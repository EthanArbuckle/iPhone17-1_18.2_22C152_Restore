double Data.makeIterator()@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t vars8;

  v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      v6 = (int)a1;
      goto LABEL_4;
    case 2uLL:
      v6 = *(void *)(a1 + 16);
LABEL_4:
      outlined copy of Data._Representation(a1, a2);
      break;
    default:
      break;
  }

  return Data.Iterator.init(_:at:)(a1, a2, v6, a3);
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

void *initializeBufferWithCopyOfBuffer for ExpressionStructure(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int16(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_shortValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(unsigned char *)(a2 + 2) = 0;
  }
  return v5 & 1;
}

void URL.absoluteURL.getter(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  id v13 = *(id *)v1;
  uint64_t v4 = *(void *)(v1 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    if (v4)
    {
      id v14 = v13;
      *(void *)&long long v15 = v3;
      *((void *)&v15 + 1) = v4;
      uint64_t v5 = URL.absoluteString.getter();
      URL.init(string:)(v5, v6, (uint64_t *)&v14);
      swift_bridgeObjectRelease();
      id v7 = v14;
      if (v14)
      {
        uint64_t v4 = *((void *)&v15 + 1);
        uint64_t v3 = v15;
      }
      else
      {
        swift_retain();
        id v7 = v13;
        swift_retain();
      }
      *a1 = v7;
      a1[1] = v3;
      a1[2] = v4;
    }
    else
    {
      *a1 = v13;
      a1[1] = v3;
      a1[2] = 0;
      swift_retain();
      id v11 = v13;
    }
  }
  else
  {
    id v8 = objc_msgSend(v13, sel_absoluteURL);
    if (v8)
    {
      v9 = v8;
      URL.init(reference:)(v8, &v14);

      long long v10 = v15;
      *a1 = v14;
      *(_OWORD *)(a1 + 1) = v10;
    }
    else
    {
      *a1 = v13;
      a1[1] = v3;
      a1[2] = v4;
      swift_retain();
      id v12 = v13;
      swift_retain();
    }
  }
}

uint64_t URLResourceValues.contentModificationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x1E4F1C530], a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DateInterval()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

ValueMetadata *type metadata accessor for ExpressionStructure.Argument()
{
  return &type metadata for ExpressionStructure.Argument;
}

ValueMetadata *type metadata accessor for Locale.MeasurementSystem()
{
  return &type metadata for Locale.MeasurementSystem;
}

double static Calendar.autoupdatingCurrent.getter@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static CalendarCache.cache + 16;
  Swift::UInt64 v3 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v2, (uint64_t *)&v5);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  double result = *(double *)&v5;
  *a1 = v5;
  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(a1, a2, a3, (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(a1, a2, a3, (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(a1, a2, a3, (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(a1, a2, a3, (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(a1, a2, a3, (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(a1, a2, a3, (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(a1, a2, a3, (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(a1, a2, a3, (void (*)(uint64_t))specialized _BPlistEncodingFormat.number<A>(from:));
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v4 + 240))();
  if (result)
  {
    a4(a1);
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  uint64_t result = (*(uint64_t (**)(void))(**(void **)v4 + 240))();
  if (result)
  {
    a4(a1);
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  uint64_t result = (*(uint64_t (**)(void))(**(void **)v4 + 240))();
  if (result)
  {
    a4(a1);
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  uint64_t result = (*(uint64_t (**)(void))(**(void **)v4 + 240))();
  if (result)
  {
    a4(a1);
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t URLResourceValues.isDirectory.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C628]);
}

void static Measurement<>.FormatStyle.UnitWidth.narrow.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t PredicateExpressions.Conjunction.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t JSONDecoderImpl.unwrapDictionary<A, B>(from:as:for:_:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  unint64_t v173 = a1;
  v158[1] = a9;
  v158[2] = a7;
  uint64_t v162 = a6;
  unint64_t v171 = a2;
  uint64_t v172 = a5;
  uint64_t v187 = *MEMORY[0x1E4F143B8];
  v165 = *(char **)(a8 - 8);
  uint64_t v160 = a11;
  MEMORY[0x1F4188790](a1);
  v159 = (char *)v158 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v158[0] = (char *)v158 - v15;
  MEMORY[0x1F4188790](v16);
  v168 = (char *)v158 - v17;
  uint64_t v170 = v18;
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v163 = v19;
  uint64_t v164 = v20;
  MEMORY[0x1F4188790](v19);
  v22 = (char *)v158 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  v25 = (char *)v158 - v24;
  MEMORY[0x1F4188790](v26);
  v28 = (char *)v158 - v27;
  MEMORY[0x1F4188790](v29);
  v31 = (char *)v158 - v30;
  MEMORY[0x1F4188790](v32);
  v34 = (char *)v158 - v33;
  MEMORY[0x1F4188790](v35);
  v37 = (char *)v158 - v36;
  uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  int64_t v161 = a3 >> 5;
  if (v161 == 5)
  {
    if (!(v171 | v173) && a3 == 160)
    {
      unint64_t v173 = type metadata accessor for DecodingError();
      uint64_t v174 = swift_allocError();
      unint64_t v171 = (unint64_t)v38;
      uint64_t *v38 = v166;
      uint64_t v40 = v163;
      uint64_t v39 = v164;
      v41 = *(void (**)(char *, uint64_t, uint64_t))(v164 + 16);
      v41(v37, v162, v163);
      v41(v34, (uint64_t)v37, v40);
      v42 = v165;
      uint64_t v43 = v170;
      if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v165 + 6))(v34, 1, v170) == 1)
      {
        v44 = *(void (**)(char *, uint64_t))(v39 + 8);
        v44(v34, v40);
        _CodingPathNode.path.getter(v172);
        v44(v37, v40);
      }
      else
      {
        (*((void (**)(char *, char *, uint64_t))v42 + 4))(v168, v34, v43);
        uint64_t v73 = _CodingPathNode.path.getter(v172);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v75 = v160;
        *(void *)(inited + 56) = v43;
        *(void *)(inited + 64) = v75;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        v77 = v168;
        (*((void (**)(uint64_t *, char *, uint64_t))v42 + 2))(boxed_opaque_existential_1, v168, v43);
        uint64_t v183 = v73;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v40);
        (*((void (**)(char *, uint64_t))v42 + 1))(v77, v43);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      unint64_t v78 = v171;
      uint64_t v183 = 0;
      unint64_t v184 = 0xE000000000000000;
      _StringGuts.grow(_:)(55);
      v79._countAndFlagsBits = 0xD000000000000019;
      v79._object = (void *)0x80000001823B3360;
      String.append(_:)(v79);
      v80._object = (void *)0x80000001823B3460;
      v80._countAndFlagsBits = 0xD000000000000017;
      String.append(_:)(v80);
      v81._countAndFlagsBits = 0xD00000000000001CLL;
      v81._object = (void *)0x80000001823B3380;
      String.append(_:)(v81);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(unint64_t, void))(*(void *)(v173 - 8) + 104))(v78, *MEMORY[0x1E4FBBA80]);
      return swift_willThrow();
    }
    if (dynamic_cast_existential_2_conditional(a4))
    {
LABEL_14:
      unint64_t v173 = type metadata accessor for DecodingError();
      uint64_t v57 = swift_allocError();
      unint64_t v171 = (unint64_t)v58;
      uint64_t *v58 = v166;
      uint64_t v60 = v163;
      uint64_t v59 = v164;
      v61 = *(void (**)(char *, uint64_t, uint64_t))(v164 + 16);
      v61(v25, v162, v163);
      v61(v22, (uint64_t)v25, v60);
      v62 = v165;
      uint64_t v63 = v170;
      if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v165 + 6))(v22, 1, v170) == 1)
      {
        v64 = *(void (**)(char *, uint64_t))(v59 + 8);
        v64(v22, v60);
        _CodingPathNode.path.getter(v172);
        v64(v25, v60);
      }
      else
      {
        v65 = (void (*)(char *, char *, uint64_t))*((void *)v62 + 4);
        uint64_t v174 = v57;
        v66 = v159;
        v65(v159, v22, v63);
        uint64_t v67 = _CodingPathNode.path.getter(v172);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v68 = swift_initStackObject();
        *(_OWORD *)(v68 + 16) = xmmword_1821037E0;
        uint64_t v69 = v160;
        *(void *)(v68 + 56) = v63;
        *(void *)(v68 + 64) = v69;
        v70 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v68 + 32));
        (*((void (**)(uint64_t *, char *, uint64_t))v62 + 2))(v70, v66, v63);
        uint64_t v183 = v67;
        specialized Array.append<A>(contentsOf:)(v68);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v25, v60);
        (*((void (**)(char *, uint64_t))v62 + 1))(v66, v63);
      }
      uint64_t v183 = 0;
      unint64_t v184 = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      uint64_t v183 = 0xD000000000000035;
      unint64_t v184 = 0x80000001823B3300;
      v71 = (void *)0xE800000000000000;
      uint64_t v72 = 0x676E697274732061;
      switch(v161)
      {
        case 1:
          v71 = (void *)0xE600000000000000;
          uint64_t v72 = 0x7265626D756ELL;
          break;
        case 2:
          v71 = (void *)0xE400000000000000;
          uint64_t v72 = 1819242338;
          break;
        case 3:
          v71 = (void *)0xEC0000007972616ELL;
          uint64_t v72 = 0x6F69746369642061;
          break;
        case 4:
          uint64_t v72 = 0x7961727261206E61;
          break;
        case 5:
          v71 = (void *)0xE400000000000000;
          uint64_t v72 = 1819047278;
          break;
        default:
          break;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      unint64_t v89 = v171;
      v90._countAndFlagsBits = v72;
      v90._object = v71;
      String.append(_:)(v90);
      swift_bridgeObjectRelease();
      v91._countAndFlagsBits = 0x64616574736E6920;
      v91._object = (void *)0xE90000000000002ELL;
      String.append(_:)(v91);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(unint64_t, void))(*(void *)(v173 - 8) + 104))(v89, *MEMORY[0x1E4FBBA70]);
      return swift_willThrow();
    }
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  uint64_t v45 = v171;
  uint64_t v167 = dynamic_cast_existential_2_conditional(a4);
  v168 = v46;
  if (!v167) {
    goto LABEL_91;
  }
  if (v161 != 3) {
    goto LABEL_14;
  }
  unint64_t v176 = MEMORY[0x1E4FBC868];
  if (v45 >= 0) {
    uint64_t v47 = v45;
  }
  else {
    uint64_t v47 = v45 + 1;
  }
  Dictionary.reserveCapacity(_:)(v47 >> 1);
  uint64_t v48 = v163;
  uint64_t v49 = v164;
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v164 + 16);
  v50(v31, v162, v163);
  v50(v28, (uint64_t)v31, v48);
  v51 = v165;
  uint64_t v52 = v170;
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v165 + 6))(v28, 1, v170) != 1)
  {
    v82 = (void (*)(uint64_t *, char *, uint64_t))*((void *)v51 + 4);
    v83 = (char *)v158[0];
    v82((uint64_t *)v158[0], v28, v52);
    v84 = (uint64_t *)swift_allocObject();
    uint64_t v85 = v160;
    v84[5] = v52;
    v84[6] = v85;
    v86 = __swift_allocate_boxed_opaque_existential_1(v84 + 2);
    v82(v86, v83, v52);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v31, v48);
    unint64_t v87 = v172;
    unint64_t v56 = v173;
    v84[7] = v172;
    uint64_t v55 = v169;
    if (v87 >> 62)
    {
      if (v87 >> 62 != 1)
      {
        uint64_t v94 = 1;
LABEL_32:
        v84[8] = v94;
        unint64_t v54 = (unint64_t)v84;
        goto LABEL_33;
      }
      v88 = (uint64_t *)((v87 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v88 = (uint64_t *)(v87 + 64);
    }
    uint64_t v93 = *v88;
    swift_retain();
    uint64_t v94 = v93 + 1;
    if (__OFADD__(v93, 1))
    {
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
    }
    goto LABEL_32;
  }
  v53 = *(void (**)(char *, uint64_t))(v49 + 8);
  v53(v31, v48);
  v53(v28, v48);
  unint64_t v54 = v172;
  swift_retain();
  uint64_t v55 = v169;
  unint64_t v56 = v173;
LABEL_33:
  uint64_t v95 = *(void *)(v55 + 32);
  swift_retain();
  uint64_t v96 = JSONMap.loadValue(at:)(v56);
  if (v98 > 0xFDu)
  {
LABEL_34:
    swift_release();
    swift_release();
    uint64_t v183 = v176;
    return swift_dynamicCast();
  }
  uint64_t v99 = v96;
  uint64_t v100 = v97;
  unsigned __int8 v101 = v98;
  uint64_t v164 = v95;
  v165 = v168 + 8;
  uint64_t v172 = v54;
  while (1)
  {
    Swift::Int v104 = JSONMap.offset(after:)(v56);
    uint64_t v105 = JSONMap.loadValue(at:)(v104);
    uint64_t v170 = v107;
    unint64_t v171 = v105;
    if (v106 > 0xFDu) {
      goto LABEL_90;
    }
    uint64_t v108 = v106;
    unint64_t v173 = JSONMap.offset(after:)(v104);
    unsigned __int8 v109 = v101;
    unint64_t v110 = v172;
    uint64_t v111 = v174;
    uint64_t v112 = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v99, v100, v109, v172, 0, 0, 0, 255);
    if (v111) {
      goto LABEL_93;
    }
    uint64_t v114 = v112;
    uint64_t v115 = v113;
    v116 = (ValueMetadata *)(*((uint64_t (**)(void))v168 + 1))();
    v185 = v116;
    uint64_t v186 = v117;
    __swift_allocate_boxed_opaque_existential_1(&v183);
    swift_bridgeObjectRetain();
    specialized JSONDecoderImpl.unwrap<A, B>(_:as:for:_:)(v171, v170, v108, v116, v110, v114, v115, 0, 0, (uint64_t)v116);
    uint64_t v174 = 0;
    swift_bridgeObjectRelease();
    uint64_t v118 = (uint64_t)v185;
    v119 = __swift_project_boxed_opaque_existential_1(&v183, (uint64_t)v185);
    v182[3] = v118;
    v120 = __swift_allocate_boxed_opaque_existential_1(v182);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v118 - 8) + 16))(v120, v119, v118);
    swift_bridgeObjectRetain();
    unint64_t v121 = v176;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v175 = (void *)v121;
    unint64_t v176 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    unint64_t v171 = v114;
    unint64_t v124 = specialized __RawDictionaryStorage.find<A>(_:)(v114, v115);
    uint64_t v125 = *(void *)(v121 + 16);
    BOOL v126 = (v123 & 1) == 0;
    uint64_t v127 = v125 + v126;
    if (__OFADD__(v125, v126)) {
      goto LABEL_87;
    }
    char v128 = v123;
    if (*(void *)(v121 + 24) < v127)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v127, isUniquelyReferenced_nonNull_native);
      uint64_t v129 = (uint64_t)v175;
      unint64_t v130 = specialized __RawDictionaryStorage.find<A>(_:)(v171, v115);
      if ((v128 & 1) != (v131 & 1)) {
        goto LABEL_94;
      }
      unint64_t v124 = v130;
LABEL_46:
      if (v128) {
        goto LABEL_47;
      }
      goto LABEL_76;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v129 = v121;
      goto LABEL_46;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v132 = static _DictionaryStorage.copy(original:)();
    uint64_t v129 = v132;
    if (*(void *)(v121 + 16)) {
      break;
    }
LABEL_75:
    swift_bridgeObjectRelease();
    v175 = (void *)v129;
    if (v128)
    {
LABEL_47:
      outlined init with take of Any((_OWORD *)(*(void *)(v129 + 56) + 32 * v124), v181);
      goto LABEL_77;
    }
LABEL_76:
    memset(v181, 0, sizeof(v181));
LABEL_77:
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v181, (uint64_t)&v179, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v151 = v180;
    outlined destroy of Any?((uint64_t)&v179, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (!v151)
    {
      outlined destroy of Any?((uint64_t)v181, (uint64_t *)&demangling cache variable for type metadata for Any?);
      outlined init with copy of Any((uint64_t)v182, (uint64_t)v181);
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v181, (uint64_t)&v177, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v178)
    {
      outlined init with take of Any(&v177, &v179);
      v152 = v175;
      if (v128)
      {
        outlined init with take of Any(&v179, (_OWORD *)(v175[7] + 32 * v124));
      }
      else
      {
        v175[(v124 >> 6) + 8] |= 1 << v124;
        v153 = (unint64_t *)(v152[6] + 16 * v124);
        unint64_t *v153 = v171;
        v153[1] = v115;
        outlined init with take of Any(&v179, (_OWORD *)(v152[7] + 32 * v124));
        uint64_t v154 = v152[2];
        BOOL v155 = __OFADD__(v154, 1);
        uint64_t v156 = v154 + 1;
        if (v155) {
          goto LABEL_88;
        }
        v152[2] = v156;
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v177, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v128)
      {
        uint64_t v157 = (uint64_t)v175;
        swift_arrayDestroy();
        specialized _NativeDictionary._delete(at:)(v124, v157);
      }
    }
    outlined destroy of Any?((uint64_t)v181, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRelease();
    unint64_t v176 = (unint64_t)v175;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v182);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v183);
    unint64_t v56 = v173;
    uint64_t v99 = JSONMap.loadValue(at:)(v173);
    uint64_t v100 = v102;
    unsigned __int8 v101 = v103;
    if (v103 > 0xFDu) {
      goto LABEL_34;
    }
  }
  v133 = (char *)(v132 + 64);
  v134 = (char *)(v121 + 64);
  unint64_t v135 = (unint64_t)((1 << *(unsigned char *)(v129 + 32)) + 63) >> 6;
  uint64_t v160 = v121 + 64;
  if (v129 != v121 || v133 >= &v134[8 * v135]) {
    memmove(v133, v134, 8 * v135);
  }
  uint64_t v136 = 0;
  *(void *)(v129 + 16) = *(void *)(v121 + 16);
  uint64_t v137 = 1 << *(unsigned char *)(v121 + 32);
  if (v137 < 64) {
    uint64_t v138 = ~(-1 << v137);
  }
  else {
    uint64_t v138 = -1;
  }
  unint64_t v139 = v138 & *(void *)(v121 + 64);
  int64_t v161 = (unint64_t)(v137 + 63) >> 6;
  while (2)
  {
    if (v139)
    {
      uint64_t v170 = (v139 - 1) & v139;
      uint64_t v163 = v136;
      unint64_t v140 = __clz(__rbit64(v139)) | (v136 << 6);
LABEL_57:
      uint64_t v141 = 16 * v140;
      uint64_t v142 = *(void *)(v121 + 56);
      v143 = (uint64_t *)(*(void *)(v121 + 48) + 16 * v140);
      uint64_t v144 = v143[1];
      uint64_t v162 = *v143;
      uint64_t v145 = 32 * v140;
      outlined init with copy of Any(v142 + 32 * v140, (uint64_t)v181);
      v146 = (void *)(*(void *)(v129 + 48) + v141);
      void *v146 = v162;
      v146[1] = v144;
      outlined init with take of Any(v181, (_OWORD *)(*(void *)(v129 + 56) + v145));
      swift_bridgeObjectRetain();
      uint64_t v136 = v163;
      unint64_t v139 = v170;
      continue;
    }
    break;
  }
  int64_t v147 = v136 + 1;
  if (__OFADD__(v136, 1)) {
    goto LABEL_89;
  }
  if (v147 >= v161) {
    goto LABEL_75;
  }
  unint64_t v148 = *(void *)(v160 + 8 * v147);
  int64_t v149 = v136 + 1;
  if (v148) {
    goto LABEL_74;
  }
  int64_t v149 = v136 + 2;
  if (v136 + 2 >= v161) {
    goto LABEL_75;
  }
  unint64_t v148 = *(void *)(v160 + 8 * v149);
  if (v148) {
    goto LABEL_74;
  }
  int64_t v149 = v136 + 3;
  if (v136 + 3 >= v161) {
    goto LABEL_75;
  }
  unint64_t v148 = *(void *)(v160 + 8 * v149);
  if (v148) {
    goto LABEL_74;
  }
  int64_t v149 = v136 + 4;
  if (v136 + 4 >= v161) {
    goto LABEL_75;
  }
  unint64_t v148 = *(void *)(v160 + 8 * v149);
  if (v148)
  {
LABEL_74:
    uint64_t v170 = (v148 - 1) & v148;
    uint64_t v163 = v149;
    unint64_t v140 = __clz(__rbit64(v148)) + (v149 << 6);
    goto LABEL_57;
  }
  uint64_t v150 = v136 + 5;
  if (v136 + 5 >= v161) {
    goto LABEL_75;
  }
  unint64_t v148 = *(void *)(v160 + 8 * v150);
  if (v148)
  {
    int64_t v149 = v136 + 5;
    goto LABEL_74;
  }
  while (1)
  {
    int64_t v149 = v150 + 1;
    if (__OFADD__(v150, 1)) {
      break;
    }
    if (v149 >= v161) {
      goto LABEL_75;
    }
    unint64_t v148 = *(void *)(v160 + 8 * v149);
    ++v150;
    if (v148) {
      goto LABEL_74;
    }
  }
LABEL_92:
  __break(1u);
LABEL_93:
  swift_unexpectedError();
  __break(1u);
LABEL_94:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t dynamic_cast_existential_2_conditional(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2()) {
      return a1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:format:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t PropertyListDecoder.decode<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = 200;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v5 + 160))(a1, a2, a3, &v7, a4, a5);
}

uint64_t PropertyListDecoder.decode<A>(_:from:format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v30 = a1;
  uint64_t v22 = a5;
  uint64_t v23 = v7;
  uint64_t v24 = partial apply for closure #1 in PropertyListDecoder.decode<A>(_:from:format:);
  v25 = v27;
  uint64_t v26 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = v7;
  uint64_t v18 = partial apply for closure #1 in PropertyListDecoder.decode<A>(_:from:format:);
  uint64_t v19 = v27;
  uint64_t v20 = a4;
  uint64_t v10 = a5;
  uint64_t v11 = v7;
  uint64_t v12 = a4;
  uint64_t v13 = partial apply for closure #1 in PropertyListDecoder.decode<A>(_:from:format:);
  uint64_t v14 = v27;
  return static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(a2, a3, (uint64_t (*)(uint64_t, uint64_t, __n128))partial apply for closure #1 in PropertyListDecoder._decode<A>(_:from:format:), (uint64_t)v21, (uint64_t)partial apply for closure #2 in PropertyListDecoder._decode<A>(_:from:format:), (uint64_t)v15, (void (*)(id))partial apply for closure #3 in PropertyListDecoder._decode<A>(_:from:format:), (uint64_t)v9, a7, a5);
}

uint64_t static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, __n128)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(id)@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = a10;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  v25 = a7;
  uint64_t v26 = a8;
  uint64_t v16 = a10;
  uint64_t v17 = partial apply for closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:);
  uint64_t v18 = &v19;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      swift_retain();
      __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, partial apply for closure #1 in Data.withBufferView<A>(_:));
      uint64_t result = outlined consume of Data._Representation(a1, a2);
      break;
    case 2uLL:
      swift_retain();
      swift_retain();
      Data.LargeSlice.withUnsafeBytes<A>(_:)((uint64_t)partial apply for closure #1 in Data.withBufferView<A>(_:), (uint64_t)v15, a1, (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL));
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      memset(v14, 0, 14);
      uint64_t result = closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)((uint64_t)v14, 0, a3, a5, a6, a7, a9, a8, v10, a10);
      break;
    default:
      v14[0] = a1;
      LOWORD(v14[1]) = a2;
      BYTE2(v14[1]) = BYTE2(a2);
      BYTE3(v14[1]) = BYTE3(a2);
      BYTE4(v14[1]) = BYTE4(a2);
      BYTE5(v14[1]) = BYTE5(a2);
      uint64_t result = closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)((uint64_t)v14, BYTE6(a2), a3, a5, a6, a7, a9, a8, v10, a10);
      break;
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanPlist()()
{
  Swift::UInt64 v1 = v0;
  Swift::Bool v2 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
  if (!v3)
  {
    if (v2)
    {
      LOBYTE(v4) = XMLPlistScanner.peekXMLElement()()._0;
      if (v5) {
        return;
      }
      Foundation::XMLPlistTag v6 = (char)v4;
      switch((char)v4)
      {
        case 1:
          if ((v4 & 0x100) == 0)
          {
            XMLPlistScanner.scanArray()();
            goto LABEL_30;
          }
          long long v30 = v0[1];
          v79[0] = *v0;
          v79[1] = v30;
          uint64_t v80 = *((void *)v0 + 4);
          v31 = v79;
          unsigned __int8 v32 = 8;
          goto LABEL_39;
        case 2:
          if ((v4 & 0x100) == 0)
          {
            XMLPlistScanner.scanDict()();
            goto LABEL_30;
          }
          long long v33 = v0[1];
          v81[0] = *v0;
          v81[1] = v33;
          uint64_t v82 = *((void *)v0 + 4);
          v31 = v81;
          unsigned __int8 v32 = 9;
LABEL_39:
          XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(v32, v31);
          goto LABEL_40;
        case 3:
        case 4:
          if ((v4 & 0x100) != 0)
          {
            long long v28 = v0[1];
            v83[0] = *v0;
            v83[1] = v28;
            uint64_t v84 = *((void *)v0 + 4);
            if (v4 == 3) {
              unsigned __int8 v29 = 13;
            }
            else {
              unsigned __int8 v29 = 12;
            }
            XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v29, 0, 0, v83);
            goto LABEL_40;
          }
          XMLPlistScanner.scanString(asKey:)(v4 == 3);
          if (!v18)
          {
            XMLPlistScanner.checkForCloseTag(_:)(v6);
LABEL_30:
            if (!v19) {
              goto LABEL_40;
            }
          }
          return;
        case 5:
        case 6:
        case 7:
        case 8:
          if ((v4 & 0x100) != 0)
          {
            long long v27 = v0[1];
            long long v85 = *v0;
            long long v86 = v27;
            uint64_t v87 = *((void *)v0 + 4);
LABEL_23:
            uint64_t v15 = BufferReader.lineNumber.getter();
            lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
            swift_allocError();
            *(void *)uint64_t v16 = v6;
            goto LABEL_9;
          }
          uint64_t v7 = XMLPlistScanner.scanThroughCloseTag(_:)(v4);
          uint64_t v9 = v8;
          unsigned __int8 v10 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v6);
          uint64_t v11 = *((void *)v1 + 1);
          uint64_t v12 = v7 - *(void *)v1;
          uint64_t v13 = *((void *)v1 + 4);
          v88[0] = *(void *)v1;
          v88[1] = v11;
          long long v89 = v1[1];
          uint64_t v90 = v13;
          XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v10, v9 - v7, v12, v88);
LABEL_40:
          uint64_t v34 = *((void *)v1 + 3);
          Swift::Bool v35 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
          if (v36) {
            return;
          }
          if (!v35)
          {
            XMLPlistScanner.checkForCloseTag(_:)(Foundation_XMLPlistTag_plist);
            return;
          }
          LOBYTE(v37) = XMLPlistScanner.peekXMLElement()()._0;
          if (v38) {
            return;
          }
          Foundation::XMLPlistTag v6 = (char)v37;
          switch((char)v37)
          {
            case 1:
              if ((v37 & 0x100) == 0)
              {
                XMLPlistScanner.scanArray()();
                goto LABEL_65;
              }
              long long v57 = v1[1];
              v65[0] = *v1;
              v65[1] = v57;
              uint64_t v66 = *((void *)v1 + 4);
              v58 = v65;
              unsigned __int8 v59 = 8;
              goto LABEL_74;
            case 2:
              if ((v37 & 0x100) == 0)
              {
                XMLPlistScanner.scanDict()();
                goto LABEL_65;
              }
              long long v60 = v1[1];
              v67[0] = *v1;
              v67[1] = v60;
              uint64_t v68 = *((void *)v1 + 4);
              v58 = v67;
              unsigned __int8 v59 = 9;
LABEL_74:
              XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(v59, v58);
              goto LABEL_75;
            case 3:
            case 4:
              if ((v37 & 0x100) != 0)
              {
                long long v55 = v1[1];
                v69[0] = *v1;
                v69[1] = v55;
                uint64_t v70 = *((void *)v1 + 4);
                if (v37 == 3) {
                  unsigned __int8 v56 = 13;
                }
                else {
                  unsigned __int8 v56 = 12;
                }
                XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v56, 0, 0, v69);
                goto LABEL_75;
              }
              XMLPlistScanner.scanString(asKey:)(v37 == 3);
              if (!v46)
              {
                XMLPlistScanner.checkForCloseTag(_:)(v6);
LABEL_65:
                if (!v47) {
                  goto LABEL_75;
                }
              }
              return;
            case 5:
            case 6:
            case 7:
            case 8:
              if ((v37 & 0x100) != 0)
              {
                long long v54 = v1[1];
                long long v71 = *v1;
                long long v72 = v54;
                uint64_t v73 = *((void *)v1 + 4);
                goto LABEL_23;
              }
              uint64_t v39 = XMLPlistScanner.scanThroughCloseTag(_:)(v37);
              uint64_t v41 = v40;
              unsigned __int8 v42 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v6);
              uint64_t v43 = *((void *)v1 + 1);
              uint64_t v44 = v39 - *(void *)v1;
              uint64_t v45 = *((void *)v1 + 4);
              v74[0] = *(void *)v1;
              v74[1] = v43;
              long long v75 = v1[1];
              uint64_t v76 = v45;
              XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v42, v41 - v39, v44, v74);
LABEL_75:
              *((void *)v1 + 3) = v34;
              _StringGuts.grow(_:)(77);
              v61._countAndFlagsBits = 0xD000000000000027;
              v61._object = (void *)0x80000001823AA350;
              String.append(_:)(v61);
              BufferReader.lineNumber.getter();
              v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v62);
              swift_bridgeObjectRelease();
              v63._object = (void *)0x80000001823AA380;
              v63._countAndFlagsBits = 0xD000000000000024;
              String.append(_:)(v63);
              lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
              swift_allocError();
              *(void *)uint64_t v16 = 0;
              *(void *)(v16 + 8) = 0xE000000000000000;
              *(void *)(v16 + 16) = 0;
              *(void *)(v16 + 24) = 0;
              char v17 = 5;
              break;
            case 9:
            case 10:
              if ((v37 & 0x100) == 0)
              {
                XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v37);
                if (v48) {
                  return;
                }
              }
              unsigned __int8 v49 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v6);
              long long v50 = v1[1];
              v77[0] = *v1;
              v77[1] = v50;
              uint64_t v78 = *((void *)v1 + 4);
              XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v77);
              v51 = (void *)*((void *)v1 + 5);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
              }
              unint64_t v53 = v51[2];
              unint64_t v52 = v51[3];
              if (v53 >= v52 >> 1) {
                v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v52 > 1), v53 + 1, 1, v51);
              }
              v51[2] = v53 + 1;
              v51[v53 + 4] = v49;
              *((void *)v1 + 5) = v51;
              goto LABEL_75;
            default:
              if ((v37 & 0x100) != 0) {
                goto LABEL_8;
              }
              XMLPlistScanner.scanPlist()();
              goto LABEL_65;
          }
          break;
        case 9:
        case 10:
          if ((v4 & 0x100) == 0)
          {
            XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v4);
            if (v20) {
              return;
            }
          }
          unsigned __int8 v21 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v6);
          long long v22 = v0[1];
          v91[0] = *v0;
          v91[1] = v22;
          uint64_t v92 = *((void *)v0 + 4);
          XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v91);
          uint64_t v23 = (void *)*((void *)v0 + 5);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
          }
          unint64_t v25 = v23[2];
          unint64_t v24 = v23[3];
          unint64_t v26 = v25 + 1;
          if (v25 >= v24 >> 1)
          {
            v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v23);
            unint64_t v26 = v25 + 1;
            uint64_t v23 = v64;
          }
          v23[2] = v26;
          v23[v25 + 4] = v21;
          *((void *)v0 + 5) = v23;
          goto LABEL_40;
        default:
          if ((v4 & 0x100) != 0) {
            goto LABEL_8;
          }
          XMLPlistScanner.scanPlist()();
          goto LABEL_30;
      }
    }
    else
    {
      long long v14 = v0[1];
      long long v93 = *v0;
      long long v94 = v14;
      uint64_t v95 = *((void *)v0 + 4);
LABEL_8:
      uint64_t v15 = BufferReader.lineNumber.getter();
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(void *)uint64_t v16 = 0;
LABEL_9:
      *(void *)(v16 + 8) = v15;
      *(void *)(v16 + 16) = 0;
      *(void *)(v16 + 24) = 0;
      char v17 = 2;
    }
    *(unsigned char *)(v16 + 32) = v17;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanDict()()
{
  Swift::UInt64 v1 = v0;
  long long v2 = *v0;
  long long v3 = v0[1];
  uint64_t v401 = *((void *)v0 + 4);
  v400[1] = v3;
  v400[0] = v2;
  uint64_t v4 = (void *)v0 + 5;
  int64_t v402 = XMLPlistScanner.PartialMapData.recordStartCollection(tagType:with:)(9u, v400);
  uint64_t v5 = 0;
  while (2)
  {
    if (*((void *)v1 + 4) == *((void *)v1 + 3)) {
      goto LABEL_101;
    }
    Swift::Bool v12 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_dict);
    if (v13) {
      goto LABEL_104;
    }
    if (!v12)
    {
LABEL_101:
      XMLPlistScanner.checkForCloseTag(_:)(Foundation_XMLPlistTag_dict);
      long long v100 = v1[1];
      if (v99)
      {
        v249[0] = *v1;
        v249[1] = v100;
        uint64_t v250 = *((void *)v1 + 4);
        unsigned __int8 v101 = v249;
      }
      else
      {
        v247[0] = *v1;
        v247[1] = v100;
        uint64_t v248 = *((void *)v1 + 4);
        unsigned __int8 v101 = v247;
      }
      goto LABEL_115;
    }
    Foundation::XMLPlistTag v14 = XMLPlistScanner.peekXMLElement()()._0;
    if (v15) {
      goto LABEL_104;
    }
    if (v14 != Foundation_XMLPlistTag_key)
    {
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(void *)uint64_t v102 = 0xD000000000000028;
      *(void *)(v102 + 8) = 0x80000001823AA400;
      *(void *)(v102 + 16) = 0;
      *(void *)(v102 + 24) = 0;
      *(unsigned char *)(v102 + 32) = 5;
      swift_willThrow();
LABEL_104:
      long long v103 = v1[1];
      v398[0] = *v1;
      v398[1] = v103;
      uint64_t v399 = *((void *)v1 + 4);
      unsigned __int8 v101 = v398;
      goto LABEL_115;
    }
    XMLPlistScanner.scanString(asKey:)(1);
    if (v16) {
      goto LABEL_104;
    }
    XMLPlistScanner.checkForCloseTag(_:)(Foundation_XMLPlistTag_key);
    if (v17) {
      goto LABEL_104;
    }
    Swift::Bool v18 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_dict);
    if (v19) {
      goto LABEL_114;
    }
    if (!v18)
    {
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease();
      long long v104 = v1[1];
      long long v395 = *v1;
      long long v396 = v104;
      uint64_t v397 = *((void *)v1 + 4);
      BufferReader.lineNumber.getter();
      v105._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v105);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(void *)uint64_t v106 = 0xD00000000000002CLL;
      *(void *)(v106 + 8) = 0x80000001823AA430;
      *(void *)(v106 + 16) = 0;
      *(void *)(v106 + 24) = 0;
      *(unsigned char *)(v106 + 32) = 5;
      swift_willThrow();
      long long v107 = v1[1];
      v393[0] = *v1;
      v393[1] = v107;
      uint64_t v394 = *((void *)v1 + 4);
      unsigned __int8 v101 = v393;
      goto LABEL_115;
    }
    LOBYTE(v20) = XMLPlistScanner.peekXMLElement()()._0;
    if (v21) {
      goto LABEL_114;
    }
    Foundation::XMLPlistTag v22 = (char)v20;
    switch((char)v20)
    {
      case 1:
        if ((v20 & 0x100) != 0)
        {
          long long v54 = v1[1];
          v379[0] = *v1;
          v379[1] = v54;
          uint64_t v380 = *((void *)v1 + 4);
          unint64_t v52 = v379;
          unsigned __int8 v53 = 8;
LABEL_43:
          XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(v53, v52);
        }
        else
        {
          XMLPlistScanner.scanArray()();
          if (v49) {
            goto LABEL_114;
          }
        }
        goto LABEL_3;
      case 2:
        if ((v20 & 0x100) != 0)
        {
          long long v51 = v1[1];
          v381[0] = *v1;
          v381[1] = v51;
          uint64_t v382 = *((void *)v1 + 4);
          unint64_t v52 = v381;
          unsigned __int8 v53 = 9;
          goto LABEL_43;
        }
        XMLPlistScanner.scanDict()();
        if (v35) {
          goto LABEL_114;
        }
        goto LABEL_3;
      case 3:
      case 4:
        if ((v20 & 0x100) != 0)
        {
          long long v50 = v1[1];
          v383[0] = *v1;
          v383[1] = v50;
          uint64_t v384 = *((void *)v1 + 4);
          if (v20 == 3) {
            unsigned __int8 v26 = 13;
          }
          else {
            unsigned __int8 v26 = 12;
          }
          v31 = v383;
          uint64_t v27 = 0;
          uint64_t v29 = 0;
          goto LABEL_40;
        }
        XMLPlistScanner.scanString(asKey:)(v20 == 3);
        if (v32) {
          goto LABEL_114;
        }
        Foundation::XMLPlistTag v33 = v22;
        goto LABEL_96;
      case 5:
      case 6:
      case 7:
      case 8:
        if ((v20 & 0x100) != 0)
        {
          long long v108 = v1[1];
          long long v385 = *v1;
          long long v386 = v108;
          uint64_t v387 = *((void *)v1 + 4);
LABEL_108:
          uint64_t v109 = BufferReader.lineNumber.getter();
          lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
          swift_allocError();
          *(void *)uint64_t v110 = v22;
LABEL_112:
          *(void *)(v110 + 8) = v109;
          *(void *)(v110 + 16) = 0;
          *(void *)(v110 + 24) = 0;
          char v113 = 2;
          goto LABEL_113;
        }
        uint64_t v23 = XMLPlistScanner.scanThroughCloseTag(_:)(v20);
        uint64_t v25 = v24;
        unsigned __int8 v26 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v22);
        uint64_t v27 = v25 - v23;
        uint64_t v28 = *((void *)v1 + 1);
        uint64_t v29 = v23 - *(void *)v1;
        uint64_t v30 = *((void *)v1 + 4);
        v388[0] = *(void *)v1;
        v388[1] = v28;
        long long v389 = v1[1];
        uint64_t v390 = v30;
        v31 = v388;
LABEL_40:
        XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v26, v27, v29, v31);
LABEL_3:
        BOOL v11 = __OFADD__(v5, 2);
        v5 += 2;
        if (v11)
        {
          __break(1u);
LABEL_124:
          long long v133 = v1[1];
          long long v256 = *v1;
          long long v257 = v133;
          uint64_t v258 = *((void *)v1 + 4);
          goto LABEL_111;
        }
        continue;
      case 9:
      case 10:
        if ((v20 & 0x100) == 0)
        {
          XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v20);
          if (v34) {
            goto LABEL_114;
          }
        }
        unsigned __int8 v6 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v22);
        long long v7 = v1[1];
        v391[0] = *v1;
        v391[1] = v7;
        uint64_t v392 = *((void *)v1 + 4);
        XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v391);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v8 = *(void *)(*((void *)v1 + 5) + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
        uint64_t v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
        destructiveProjectEnumData for PredicateCodableError(v9, v10);
        goto LABEL_3;
      default:
        if ((v20 & 0x100) != 0)
        {
          long long v111 = v1[1];
          long long v253 = *v1;
          long long v254 = v111;
          uint64_t v255 = *((void *)v1 + 4);
LABEL_111:
          uint64_t v109 = BufferReader.lineNumber.getter();
          lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
          swift_allocError();
          *(void *)uint64_t v110 = 0;
          goto LABEL_112;
        }
        Swift::Bool v36 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
        if (v37) {
          goto LABEL_114;
        }
        if (!v36)
        {
          long long v112 = v1[1];
          long long v376 = *v1;
          long long v377 = v112;
          uint64_t v378 = *((void *)v1 + 4);
          goto LABEL_111;
        }
        LOBYTE(v38) = XMLPlistScanner.peekXMLElement()()._0;
        if (v39) {
          goto LABEL_114;
        }
        Foundation::XMLPlistTag v22 = (char)v38;
        switch((char)v38)
        {
          case 1:
            if ((v38 & 0x100) == 0)
            {
              XMLPlistScanner.scanArray()();
              goto LABEL_92;
            }
            long long v78 = v1[1];
            v362[0] = *v1;
            v362[1] = v78;
            uint64_t v363 = *((void *)v1 + 4);
            Swift::String v79 = v362;
            unsigned __int8 v80 = 8;
            goto LABEL_68;
          case 2:
            if ((v38 & 0x100) == 0)
            {
              XMLPlistScanner.scanDict()();
              goto LABEL_92;
            }
            long long v81 = v1[1];
            v364[0] = *v1;
            v364[1] = v81;
            uint64_t v365 = *((void *)v1 + 4);
            Swift::String v79 = v364;
            unsigned __int8 v80 = 9;
LABEL_68:
            XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(v80, v79);
            goto LABEL_93;
          case 3:
          case 4:
            if ((v38 & 0x100) != 0)
            {
              long long v77 = v1[1];
              v366[0] = *v1;
              v366[1] = v77;
              uint64_t v367 = *((void *)v1 + 4);
              if (v38 == 3) {
                unsigned __int8 v43 = 13;
              }
              else {
                unsigned __int8 v43 = 12;
              }
              uint64_t v48 = v366;
              uint64_t v44 = 0;
              uint64_t v46 = 0;
              goto LABEL_65;
            }
            XMLPlistScanner.scanString(asKey:)(v38 == 3);
            if (v55) {
              goto LABEL_114;
            }
            Foundation::XMLPlistTag v56 = v22;
            goto LABEL_91;
          case 5:
          case 6:
          case 7:
          case 8:
            if ((v38 & 0x100) != 0)
            {
              long long v132 = v1[1];
              long long v368 = *v1;
              long long v369 = v132;
              uint64_t v370 = *((void *)v1 + 4);
              goto LABEL_108;
            }
            uint64_t v40 = XMLPlistScanner.scanThroughCloseTag(_:)(v38);
            uint64_t v42 = v41;
            unsigned __int8 v43 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v22);
            uint64_t v44 = v42 - v40;
            uint64_t v45 = *((void *)v1 + 1);
            uint64_t v46 = v40 - *(void *)v1;
            uint64_t v47 = *((void *)v1 + 4);
            v371[0] = *(void *)v1;
            v371[1] = v45;
            long long v372 = v1[1];
            uint64_t v373 = v47;
            uint64_t v48 = v371;
LABEL_65:
            XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v43, v44, v46, v48);
            goto LABEL_93;
          case 9:
          case 10:
            if ((v38 & 0x100) == 0)
            {
              XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v38);
              if (v57) {
                goto LABEL_114;
              }
            }
            unsigned __int8 v58 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v22);
            long long v59 = v1[1];
            v374[0] = *v1;
            v374[1] = v59;
            uint64_t v375 = *((void *)v1 + 4);
            XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v374);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v60 = *(void *)(*((void *)v1 + 5) + 16);
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v60);
            uint64_t v61 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v58);
            destructiveProjectEnumData for PredicateCodableError(v61, v62);
            goto LABEL_93;
          default:
            if ((v38 & 0x100) != 0) {
              goto LABEL_124;
            }
            Swift::Bool v63 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
            if (v64) {
              goto LABEL_114;
            }
            if (!v63)
            {
              long long v134 = v1[1];
              long long v359 = *v1;
              long long v360 = v134;
              uint64_t v361 = *((void *)v1 + 4);
              goto LABEL_111;
            }
            LOBYTE(v65) = XMLPlistScanner.peekXMLElement()()._0;
            if (v66) {
              goto LABEL_114;
            }
            Foundation::XMLPlistTag v22 = (char)v65;
            switch((char)v65)
            {
              case 1:
                if ((v65 & 0x100) == 0)
                {
                  XMLPlistScanner.scanArray()();
                  goto LABEL_81;
                }
                long long v95 = v1[1];
                v345[0] = *v1;
                v345[1] = v95;
                uint64_t v346 = *((void *)v1 + 4);
                uint64_t v96 = v345;
                unsigned __int8 v97 = 8;
                goto LABEL_100;
              case 2:
                if ((v65 & 0x100) == 0)
                {
                  XMLPlistScanner.scanDict()();
                  goto LABEL_81;
                }
                long long v98 = v1[1];
                v347[0] = *v1;
                v347[1] = v98;
                uint64_t v348 = *((void *)v1 + 4);
                uint64_t v96 = v347;
                unsigned __int8 v97 = 9;
LABEL_100:
                XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(v97, v96);
                goto LABEL_88;
              case 3:
              case 4:
                if ((v65 & 0x100) != 0)
                {
                  long long v87 = v1[1];
                  v349[0] = *v1;
                  v349[1] = v87;
                  uint64_t v350 = *((void *)v1 + 4);
                  if (v65 == 3) {
                    unsigned __int8 v70 = 13;
                  }
                  else {
                    unsigned __int8 v70 = 12;
                  }
                  long long v75 = v349;
                  uint64_t v71 = 0;
                  uint64_t v73 = 0;
                  goto LABEL_87;
                }
                XMLPlistScanner.scanString(asKey:)(v65 == 3);
                if (v82) {
                  goto LABEL_114;
                }
                XMLPlistScanner.checkForCloseTag(_:)(v22);
                goto LABEL_81;
              case 5:
              case 6:
              case 7:
              case 8:
                if ((v65 & 0x100) != 0)
                {
                  long long v172 = v1[1];
                  long long v351 = *v1;
                  long long v352 = v172;
                  uint64_t v353 = *((void *)v1 + 4);
                  goto LABEL_108;
                }
                uint64_t v67 = XMLPlistScanner.scanThroughCloseTag(_:)(v65);
                uint64_t v69 = v68;
                unsigned __int8 v70 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v22);
                uint64_t v71 = v69 - v67;
                uint64_t v72 = *((void *)v1 + 1);
                uint64_t v73 = v67 - *(void *)v1;
                uint64_t v74 = *((void *)v1 + 4);
                v354[0] = *(void *)v1;
                v354[1] = v72;
                long long v355 = v1[1];
                uint64_t v356 = v74;
                long long v75 = v354;
LABEL_87:
                XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v70, v71, v73, v75);
                goto LABEL_88;
              case 9:
              case 10:
                if ((v65 & 0x100) == 0)
                {
                  XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v65);
                  if (v84) {
                    goto LABEL_114;
                  }
                }
                unsigned __int8 v85 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v22);
                long long v86 = v1[1];
                v357[0] = *v1;
                v357[1] = v86;
                uint64_t v358 = *((void *)v1 + 4);
                XMLPlistScanner.PartialMapData.record(tagType:with:)(v85, v357);
                goto LABEL_88;
              default:
                if ((v65 & 0x100) != 0)
                {
                  long long v183 = v1[1];
                  long long v259 = *v1;
                  long long v260 = v183;
                  uint64_t v261 = *((void *)v1 + 4);
                  goto LABEL_111;
                }
                XMLPlistScanner.scanPlist()();
LABEL_81:
                if (v83) {
                  goto LABEL_114;
                }
LABEL_88:
                uint64_t v88 = *((void *)v1 + 3);
                Swift::Bool v89 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
                if (v90) {
                  goto LABEL_114;
                }
                if (v89)
                {
                  LOBYTE(v135) = XMLPlistScanner.peekXMLElement()()._0;
                  if (v136) {
                    goto LABEL_114;
                  }
                  Foundation::XMLPlistTag v22 = (char)v135;
                  switch((char)v135)
                  {
                    case 1:
                      if ((v135 & 0x100) != 0)
                      {
                        long long v196 = v1[1];
                        v269[0] = *v1;
                        v269[1] = v196;
                        uint64_t v270 = *((void *)v1 + 4);
                        v197 = v269;
                        unsigned __int8 v198 = 8;
                        goto LABEL_191;
                      }
                      XMLPlistScanner.scanArray()();
                      if (!v192) {
                        goto LABEL_192;
                      }
                      goto LABEL_114;
                    case 2:
                      if ((v135 & 0x100) != 0)
                      {
                        long long v199 = v1[1];
                        v271[0] = *v1;
                        v271[1] = v199;
                        uint64_t v272 = *((void *)v1 + 4);
                        v197 = v271;
                        unsigned __int8 v198 = 9;
LABEL_191:
                        XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(v198, v197);
                        goto LABEL_192;
                      }
                      XMLPlistScanner.scanDict()();
                      if (!v193) {
                        goto LABEL_192;
                      }
                      goto LABEL_114;
                    case 3:
                    case 4:
                      if ((v135 & 0x100) != 0)
                      {
                        long long v194 = v1[1];
                        v273[0] = *v1;
                        v273[1] = v194;
                        uint64_t v274 = *((void *)v1 + 4);
                        if (v135 == 3) {
                          unsigned __int8 v140 = 13;
                        }
                        else {
                          unsigned __int8 v140 = 12;
                        }
                        uint64_t v145 = v273;
                        uint64_t v141 = 0;
                        uint64_t v143 = 0;
                        goto LABEL_187;
                      }
                      XMLPlistScanner.scanString(asKey:)(v135 == 3);
                      if (!v184)
                      {
                        XMLPlistScanner.checkForCloseTag(_:)(v22);
                        if (!v185) {
                          goto LABEL_192;
                        }
                      }
                      goto LABEL_114;
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                      if ((v135 & 0x100) != 0)
                      {
                        long long v189 = v1[1];
                        long long v275 = *v1;
                        long long v276 = v189;
                        uint64_t v277 = *((void *)v1 + 4);
                        goto LABEL_108;
                      }
                      uint64_t v137 = XMLPlistScanner.scanThroughCloseTag(_:)(v135);
                      uint64_t v139 = v138;
                      unsigned __int8 v140 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v22);
                      uint64_t v141 = v139 - v137;
                      uint64_t v142 = *((void *)v1 + 1);
                      uint64_t v143 = v137 - *(void *)v1;
                      uint64_t v144 = *((void *)v1 + 4);
                      v278[0] = *(void *)v1;
                      v278[1] = v142;
                      long long v279 = v1[1];
                      uint64_t v280 = v144;
                      uint64_t v145 = v278;
LABEL_187:
                      XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v140, v141, v143, v145);
                      goto LABEL_192;
                    case 9:
                    case 10:
                      if ((v135 & 0x100) == 0)
                      {
                        XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v135);
                        if (v186) {
                          goto LABEL_114;
                        }
                      }
                      unsigned __int8 v187 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v22);
                      long long v188 = v1[1];
                      v281[0] = *v1;
                      v281[1] = v188;
                      uint64_t v282 = *((void *)v1 + 4);
                      XMLPlistScanner.PartialMapData.record(tagType:with:)(v187, v281);
                      goto LABEL_192;
                    default:
                      if ((v135 & 0x100) != 0)
                      {
                        long long v195 = v1[1];
                        long long v262 = *v1;
                        long long v263 = v195;
                        uint64_t v264 = *((void *)v1 + 4);
                        goto LABEL_111;
                      }
                      XMLPlistScanner.scanPlist()();
                      if (v191) {
                        goto LABEL_114;
                      }
LABEL_192:
                      *((void *)v1 + 3) = v88;
                      _StringGuts.grow(_:)(77);
                      v200._countAndFlagsBits = 0xD000000000000027;
                      v200._object = (void *)0x80000001823AA350;
                      String.append(_:)(v200);
                      uint64_t v201 = *((void *)v1 + 2);
                      uint64_t v202 = *((void *)v1 + 4);
                      long long v265 = *v1;
                      uint64_t v266 = v201;
                      uint64_t v267 = v88;
                      uint64_t v268 = v202;
                      break;
                  }
LABEL_163:
                  BufferReader.lineNumber.getter();
                  v181._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                  String.append(_:)(v181);
                  swift_bridgeObjectRelease();
                  v182._object = (void *)0x80000001823AA380;
                  v182._countAndFlagsBits = 0xD000000000000024;
                  String.append(_:)(v182);
                  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
                  swift_allocError();
                  *(void *)uint64_t v110 = 0;
                  *(void *)(v110 + 8) = 0xE000000000000000;
                  *(void *)(v110 + 16) = 0;
                  *(void *)(v110 + 24) = 0;
                  char v113 = 5;
LABEL_113:
                  *(unsigned char *)(v110 + 32) = v113;
                  swift_willThrow();
                  goto LABEL_114;
                }
                Foundation::XMLPlistTag v56 = Foundation_XMLPlistTag_plist;
LABEL_91:
                XMLPlistScanner.checkForCloseTag(_:)(v56);
LABEL_92:
                if (v76) {
                  goto LABEL_114;
                }
LABEL_93:
                uint64_t v91 = *((void *)v1 + 3);
                Swift::Bool v92 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
                if (v93) {
                  goto LABEL_114;
                }
                if (!v92)
                {
                  Foundation::XMLPlistTag v33 = Foundation_XMLPlistTag_plist;
LABEL_96:
                  XMLPlistScanner.checkForCloseTag(_:)(v33);
                  if (v94) {
                    goto LABEL_114;
                  }
                  goto LABEL_3;
                }
                LOBYTE(v121) = XMLPlistScanner.peekXMLElement()()._0;
                if (!v122)
                {
                  Foundation::XMLPlistTag v22 = (char)v121;
                  switch((char)v121)
                  {
                    case 1:
                      if ((v121 & 0x100) != 0)
                      {
                        long long v174 = v1[1];
                        v331[0] = *v1;
                        v331[1] = v174;
                        uint64_t v332 = *((void *)v1 + 4);
                        v175 = v331;
                        unsigned __int8 v176 = 8;
                        goto LABEL_161;
                      }
                      XMLPlistScanner.scanArray()();
                      if (!v169) {
                        goto LABEL_162;
                      }
                      goto LABEL_114;
                    case 2:
                      if ((v121 & 0x100) != 0)
                      {
                        long long v177 = v1[1];
                        v333[0] = *v1;
                        v333[1] = v177;
                        uint64_t v334 = *((void *)v1 + 4);
                        v175 = v333;
                        unsigned __int8 v176 = 9;
LABEL_161:
                        XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(v176, v175);
                        goto LABEL_162;
                      }
                      XMLPlistScanner.scanDict()();
                      if (!v170) {
                        goto LABEL_162;
                      }
                      goto LABEL_114;
                    case 3:
                    case 4:
                      if ((v121 & 0x100) != 0)
                      {
                        long long v171 = v1[1];
                        v335[0] = *v1;
                        v335[1] = v171;
                        uint64_t v336 = *((void *)v1 + 4);
                        if (v121 == 3) {
                          unsigned __int8 v126 = 13;
                        }
                        else {
                          unsigned __int8 v126 = 12;
                        }
                        char v131 = v335;
                        uint64_t v127 = 0;
                        uint64_t v129 = 0;
                        goto LABEL_156;
                      }
                      XMLPlistScanner.scanString(asKey:)(v121 == 3);
                      if (!v146)
                      {
                        Foundation::XMLPlistTag v147 = v22;
LABEL_133:
                        XMLPlistScanner.checkForCloseTag(_:)(v147);
                        if (!v148) {
                          goto LABEL_162;
                        }
                      }
                      goto LABEL_114;
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                      if ((v121 & 0x100) != 0)
                      {
                        long long v155 = v1[1];
                        long long v337 = *v1;
                        long long v338 = v155;
                        uint64_t v339 = *((void *)v1 + 4);
                        goto LABEL_108;
                      }
                      uint64_t v123 = XMLPlistScanner.scanThroughCloseTag(_:)(v121);
                      uint64_t v125 = v124;
                      unsigned __int8 v126 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v22);
                      uint64_t v127 = v125 - v123;
                      uint64_t v128 = *((void *)v1 + 1);
                      uint64_t v129 = v123 - *(void *)v1;
                      uint64_t v130 = *((void *)v1 + 4);
                      v340[0] = *(void *)v1;
                      v340[1] = v128;
                      long long v341 = v1[1];
                      uint64_t v342 = v130;
                      char v131 = v340;
LABEL_156:
                      XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v126, v127, v129, v131);
                      goto LABEL_162;
                    case 9:
                    case 10:
                      if ((v121 & 0x100) == 0)
                      {
                        XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v121);
                        if (v149) {
                          goto LABEL_114;
                        }
                      }
                      unsigned __int8 v150 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v22);
                      long long v151 = v1[1];
                      v343[0] = *v1;
                      v343[1] = v151;
                      uint64_t v344 = *((void *)v1 + 4);
                      XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v343);
                      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                      uint64_t v152 = *(void *)(*((void *)v1 + 5) + 16);
                      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v152);
                      uint64_t v153 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v152, v150);
                      destructiveProjectEnumData for PredicateCodableError(v153, v154);
LABEL_162:
                      *((void *)v1 + 3) = v91;
                      _StringGuts.grow(_:)(77);
                      v178._countAndFlagsBits = 0xD000000000000027;
                      v178._object = (void *)0x80000001823AA350;
                      String.append(_:)(v178);
                      uint64_t v179 = *((void *)v1 + 2);
                      uint64_t v180 = *((void *)v1 + 4);
                      long long v310 = *v1;
                      uint64_t v311 = v179;
                      uint64_t v312 = v91;
                      uint64_t v313 = v180;
                      goto LABEL_163;
                    default:
                      if ((v121 & 0x100) != 0)
                      {
                        long long v173 = v1[1];
                        long long v283 = *v1;
                        long long v284 = v173;
                        uint64_t v285 = *((void *)v1 + 4);
                        goto LABEL_111;
                      }
                      Swift::Bool v156 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
                      if (v157) {
                        goto LABEL_114;
                      }
                      if (!v156)
                      {
                        long long v190 = v1[1];
                        long long v328 = *v1;
                        long long v329 = v190;
                        uint64_t v330 = *((void *)v1 + 4);
                        goto LABEL_111;
                      }
                      LOBYTE(v158) = XMLPlistScanner.peekXMLElement()()._0;
                      if (v159) {
                        goto LABEL_114;
                      }
                      Foundation::XMLPlistTag v22 = (char)v158;
                      switch((char)v158)
                      {
                        case 1:
                          if ((v158 & 0x100) == 0)
                          {
                            XMLPlistScanner.scanArray()();
                            goto LABEL_206;
                          }
                          long long v211 = v1[1];
                          v314[0] = *v1;
                          v314[1] = v211;
                          uint64_t v315 = *((void *)v1 + 4);
                          v212 = v314;
                          unsigned __int8 v213 = 8;
                          goto LABEL_216;
                        case 2:
                          if ((v158 & 0x100) == 0)
                          {
                            XMLPlistScanner.scanDict()();
                            goto LABEL_206;
                          }
                          long long v214 = v1[1];
                          v316[0] = *v1;
                          v316[1] = v214;
                          uint64_t v317 = *((void *)v1 + 4);
                          v212 = v316;
                          unsigned __int8 v213 = 9;
LABEL_216:
                          XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(v213, v212);
                          goto LABEL_217;
                        case 3:
                        case 4:
                          if ((v158 & 0x100) != 0)
                          {
                            long long v209 = v1[1];
                            v318[0] = *v1;
                            v318[1] = v209;
                            uint64_t v319 = *((void *)v1 + 4);
                            if (v158 == 3) {
                              unsigned __int8 v163 = 13;
                            }
                            else {
                              unsigned __int8 v163 = 12;
                            }
                            v168 = v318;
                            uint64_t v164 = 0;
                            uint64_t v166 = 0;
                            goto LABEL_212;
                          }
                          XMLPlistScanner.scanString(asKey:)(v158 == 3);
                          if (v203) {
                            goto LABEL_114;
                          }
                          XMLPlistScanner.checkForCloseTag(_:)(v22);
                          goto LABEL_206;
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                          if ((v158 & 0x100) != 0)
                          {
                            long long v208 = v1[1];
                            long long v320 = *v1;
                            long long v321 = v208;
                            uint64_t v322 = *((void *)v1 + 4);
                            goto LABEL_108;
                          }
                          uint64_t v160 = XMLPlistScanner.scanThroughCloseTag(_:)(v158);
                          uint64_t v162 = v161;
                          unsigned __int8 v163 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v22);
                          uint64_t v164 = v162 - v160;
                          uint64_t v165 = *((void *)v1 + 1);
                          uint64_t v166 = v160 - *(void *)v1;
                          uint64_t v167 = *((void *)v1 + 4);
                          v323[0] = *(void *)v1;
                          v323[1] = v165;
                          long long v324 = v1[1];
                          uint64_t v325 = v167;
                          v168 = v323;
LABEL_212:
                          XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v163, v164, v166, v168);
                          goto LABEL_217;
                        case 9:
                        case 10:
                          if ((v158 & 0x100) == 0)
                          {
                            XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v158);
                            if (v205) {
                              goto LABEL_114;
                            }
                          }
                          unsigned __int8 v206 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v22);
                          long long v207 = v1[1];
                          v326[0] = *v1;
                          v326[1] = v207;
                          uint64_t v327 = *((void *)v1 + 4);
                          XMLPlistScanner.PartialMapData.record(tagType:with:)(v206, v326);
                          goto LABEL_217;
                        default:
                          if ((v158 & 0x100) != 0)
                          {
                            long long v210 = v1[1];
                            long long v286 = *v1;
                            long long v287 = v210;
                            uint64_t v288 = *((void *)v1 + 4);
                            goto LABEL_111;
                          }
                          XMLPlistScanner.scanPlist()();
LABEL_206:
                          if (v204) {
                            goto LABEL_114;
                          }
LABEL_217:
                          uint64_t v215 = *((void *)v1 + 3);
                          Swift::Bool v216 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
                          if (v217) {
                            goto LABEL_114;
                          }
                          if (!v216)
                          {
                            Foundation::XMLPlistTag v147 = Foundation_XMLPlistTag_plist;
                            goto LABEL_133;
                          }
                          LOBYTE(v218) = XMLPlistScanner.peekXMLElement()()._0;
                          if (v219) {
                            goto LABEL_114;
                          }
                          Foundation::XMLPlistTag v22 = (char)v218;
                          switch((char)v218)
                          {
                            case 1:
                              if ((v218 & 0x100) != 0)
                              {
                                long long v240 = v1[1];
                                v296[0] = *v1;
                                v296[1] = v240;
                                uint64_t v297 = *((void *)v1 + 4);
                                v241 = v296;
                                unsigned __int8 v242 = 8;
                                goto LABEL_249;
                              }
                              XMLPlistScanner.scanArray()();
                              if (!v236) {
                                goto LABEL_250;
                              }
                              goto LABEL_114;
                            case 2:
                              if ((v218 & 0x100) != 0)
                              {
                                long long v243 = v1[1];
                                v298[0] = *v1;
                                v298[1] = v243;
                                uint64_t v299 = *((void *)v1 + 4);
                                v241 = v298;
                                unsigned __int8 v242 = 9;
LABEL_249:
                                XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(v242, v241);
                                goto LABEL_250;
                              }
                              XMLPlistScanner.scanDict()();
                              if (!v237) {
                                goto LABEL_250;
                              }
                              goto LABEL_114;
                            case 3:
                            case 4:
                              if ((v218 & 0x100) != 0)
                              {
                                long long v238 = v1[1];
                                v300[0] = *v1;
                                v300[1] = v238;
                                uint64_t v301 = *((void *)v1 + 4);
                                if (v218 == 3) {
                                  unsigned __int8 v223 = 13;
                                }
                                else {
                                  unsigned __int8 v223 = 12;
                                }
                                v228 = v300;
                                uint64_t v224 = 0;
                                uint64_t v226 = 0;
                                goto LABEL_245;
                              }
                              XMLPlistScanner.scanString(asKey:)(v218 == 3);
                              if (!v229)
                              {
                                XMLPlistScanner.checkForCloseTag(_:)(v22);
                                if (!v230) {
                                  goto LABEL_250;
                                }
                              }
                              goto LABEL_114;
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                              if ((v218 & 0x100) != 0)
                              {
                                long long v234 = v1[1];
                                long long v302 = *v1;
                                long long v303 = v234;
                                uint64_t v304 = *((void *)v1 + 4);
                                goto LABEL_108;
                              }
                              uint64_t v220 = XMLPlistScanner.scanThroughCloseTag(_:)(v218);
                              uint64_t v222 = v221;
                              unsigned __int8 v223 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v22);
                              uint64_t v224 = v222 - v220;
                              uint64_t v225 = *((void *)v1 + 1);
                              uint64_t v226 = v220 - *(void *)v1;
                              uint64_t v227 = *((void *)v1 + 4);
                              v305[0] = *(void *)v1;
                              v305[1] = v225;
                              long long v306 = v1[1];
                              uint64_t v307 = v227;
                              v228 = v305;
LABEL_245:
                              XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v223, v224, v226, v228);
                              goto LABEL_250;
                            case 9:
                            case 10:
                              if ((v218 & 0x100) == 0)
                              {
                                XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v218);
                                if (v231) {
                                  goto LABEL_114;
                                }
                              }
                              unsigned __int8 v232 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v22);
                              long long v233 = v1[1];
                              v308[0] = *v1;
                              v308[1] = v233;
                              uint64_t v309 = *((void *)v1 + 4);
                              XMLPlistScanner.PartialMapData.record(tagType:with:)(v232, v308);
                              goto LABEL_250;
                            default:
                              if ((v218 & 0x100) != 0)
                              {
                                long long v239 = v1[1];
                                long long v289 = *v1;
                                long long v290 = v239;
                                uint64_t v291 = *((void *)v1 + 4);
                                goto LABEL_111;
                              }
                              XMLPlistScanner.scanPlist()();
                              if (v235) {
                                goto LABEL_114;
                              }
LABEL_250:
                              *((void *)v1 + 3) = v215;
                              _StringGuts.grow(_:)(77);
                              v244._countAndFlagsBits = 0xD000000000000027;
                              v244._object = (void *)0x80000001823AA350;
                              String.append(_:)(v244);
                              uint64_t v245 = *((void *)v1 + 2);
                              uint64_t v246 = *((void *)v1 + 4);
                              long long v292 = *v1;
                              uint64_t v293 = v245;
                              uint64_t v294 = v215;
                              uint64_t v295 = v246;
                              break;
                          }
                          break;
                      }
                      break;
                  }
                  goto LABEL_163;
                }
LABEL_114:
                long long v114 = v1[1];
                v251[0] = *v1;
                v251[1] = v114;
                uint64_t v252 = *((void *)v1 + 4);
                unsigned __int8 v101 = v251;
LABEL_115:
                XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v101);
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                uint64_t v115 = *(void *)(*((void *)v1 + 5) + 16);
                specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v115);
                uint64_t v116 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v115, 10);
                destructiveProjectEnumData for PredicateCodableError(v116, v117);
                uint64_t v118 = (void *)*((void *)v1 + 5);
                uint64_t v119 = specialized Array._getCount()(v118);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v118 = specialized _ArrayBuffer._consumeAndCreateNew()(v118);
                }
                v120 = &v118[v402];
                v120[4] = v119;
                v120[5] = v5;
                *uint64_t v4 = v118;
                return;
            }
        }
    }
  }
}

Swift::tuple_Foundation_XMLPlistTag_isEmpty_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.peekXMLElement()()
{
  long long v23 = *(_OWORD *)(v0 + 16);
  v1.Foundation::XMLPlistTag value = XMLPlistScanner.determineTag()().value;
  if (!v3)
  {
    Foundation::XMLPlistTag value = v1.value;
    v1.Foundation::XMLPlistTag value = BYTE8(v23);
    uint64_t v5 = 4;
    switch(value)
    {
      case Foundation_XMLPlistTag_dict:
      case Foundation_XMLPlistTag_data:
      case Foundation_XMLPlistTag_date:
      case Foundation_XMLPlistTag_real:
      case Foundation_XMLPlistTag_true:
        goto LABEL_3;
      case Foundation_XMLPlistTag_key:
        uint64_t v5 = 3;
        goto LABEL_3;
      case Foundation_XMLPlistTag_string:
        uint64_t v5 = 6;
        goto LABEL_3;
      case Foundation_XMLPlistTag_integer:
        uint64_t v5 = 7;
        goto LABEL_3;
      case Foundation_XMLPlistTag_unknownDefault:
        Swift::Bool v12 = *(unsigned __int8 **)(v0 + 32);
        uint64_t v13 = (unsigned __int8 *)*((void *)&v23 + 1);
        while (v13 != v12)
        {
          int v14 = *v13++;
          *(void *)(v0 + 24) = v13;
          if (v14 == 62) {
            goto LABEL_22;
          }
        }
        uint64_t v13 = v12;
LABEL_22:
        if ((unint64_t)v13 < *((void *)&v23 + 1)) {
          goto LABEL_34;
        }
        if ((uint64_t)(*((void *)&v23 + 1) - *(void *)v0) < 0) {
          goto LABEL_35;
        }
        v2.Foundation::XMLPlistTag value = (_BYTE)v13 - BYTE8(v23);
        if ((uint64_t)&v13[-*((void *)&v23 + 1)] < 0) {
          goto LABEL_36;
        }
        if ((uint64_t)(*(void *)v0 + *(void *)(v0 + 8) - (void)v13) < 0) {
          goto LABEL_37;
        }
        uint64_t v15 = static String._tryFromUTF8(_:)();
        if (v16) {
          uint64_t v17 = v15;
        }
        else {
          uint64_t v17 = 0x65737261706E753CLL;
        }
        if (v16) {
          Swift::Bool v18 = v16;
        }
        else {
          Swift::Bool v18 = (void *)0xED00003E656C6261;
        }
        _StringGuts.grow(_:)(37);
        swift_bridgeObjectRelease();
        v19._countAndFlagsBits = v17;
        v19._object = v18;
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v20._countAndFlagsBits = 0x656E696C206E6F20;
        v20._object = (void *)0xE900000000000020;
        String.append(_:)(v20);
        BufferReader.lineNumber.getter();
        v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(void *)uint64_t v10 = 0xD000000000000018;
        *(void *)(v10 + 8) = 0x80000001823AA660;
        *(void *)(v10 + 16) = 0;
        *(void *)(v10 + 24) = 0;
        char v11 = 5;
        goto LABEL_11;
      default:
        uint64_t v5 = 5;
LABEL_3:
        *(void *)(v0 + 24) = *((void *)&v23 + 1) + v5;
        uint64_t v6 = *(void *)(v0 + 32);
        break;
    }
    while (1)
    {
      long long v7 = (unsigned __int8 *)(*((void *)&v23 + 1) + v5);
      if (*((void *)&v23 + 1) + v5 == v6) {
        break;
      }
      int v8 = *v7;
      *(void *)(v0 + 24) = v7 + 1;
      ++v5;
      if (v8 == 62)
      {
        if (*((void *)&v23 + 1) + v5 != v6)
        {
          if (*((void *)&v23 + 1) - *(void *)v0 + v5 - 2 < 0
            || *(void *)v0 + *(void *)(v0 + 8) - *((void *)&v23 + 1) - v5 + 2 < 1)
          {
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
          }
          else
          {
            v1.Foundation::XMLPlistTag value = value;
          }
          goto LABEL_38;
        }
        break;
      }
    }
    uint64_t v9 = BufferReader.lineNumber.getter();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v10 = v9;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    char v11 = 1;
LABEL_11:
    *(unsigned char *)(v10 + 32) = v11;
    v1.Foundation::XMLPlistTag value = swift_willThrow();
  }
LABEL_38:
  result.isEmpty = v2.value;
  result._0 = v1.value;
  return result;
}

Foundation::XMLPlistTag_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.determineTag()()
{
  long long v1 = v0[1];
  long long v12 = *v0;
  uint64_t v13 = *((void *)v0 + 4);
  if (((*((void *)&v1 + 1) - *(void *)v0) & 0x8000000000000000) != 0
    || (unint64_t v2 = v12 + *((void *)&v12 + 1), (uint64_t)(v12 + *((void *)&v12 + 1) - *((void *)&v1 + 1)) < 1))
  {
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
  }
  else
  {
    switch(**((unsigned char **)&v1 + 1))
    {
      case 9:
      case 0xA:
      case 0xD:
      case 0x20:
      case 0x3E:
        uint64_t v3 = BufferReader.lineNumber.getter();
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(void *)uint64_t v4 = v3;
        *(void *)(v4 + 8) = 0;
        *(void *)(v4 + 16) = 0;
        *(void *)(v4 + 24) = 0;
        *(unsigned char *)(v4 + 32) = 1;
        result.Foundation::XMLPlistTag value = swift_willThrow();
        break;
      case 0x61:
        if (v13 - *((void *)&v1 + 1) < 5) {
          goto LABEL_66;
        }
        if (v2 < *((void *)&v1 + 1)) {
          goto LABEL_72;
        }
        if (**((_DWORD **)&v1 + 1) != 1634890337 || *(unsigned char *)(*((void *)&v1 + 1) + 4) != 121) {
          goto LABEL_66;
        }
        result.Foundation::XMLPlistTag value = Foundation_XMLPlistTag_array;
        break;
      case 0x64:
        if (v13 - *((void *)&v1 + 1) < 4) {
          goto LABEL_66;
        }
        if (v2 < *((void *)&v1 + 1)) {
          goto LABEL_73;
        }
        switch(**((_DWORD **)&v1 + 1))
        {
          case 0x74636964:
            result.Foundation::XMLPlistTag value = Foundation_XMLPlistTag_dict;
            break;
          case 0x61746164:
            result.Foundation::XMLPlistTag value = Foundation_XMLPlistTag_data;
            break;
          case 0x65746164:
            result.Foundation::XMLPlistTag value = Foundation_XMLPlistTag_date;
            break;
          default:
            goto LABEL_66;
        }
        break;
      case 0x66:
        if (v13 - *((void *)&v1 + 1) < 5) {
          goto LABEL_66;
        }
        if (v2 < *((void *)&v1 + 1)) {
          goto LABEL_74;
        }
        if (**((_DWORD **)&v1 + 1) != 1936482662 || *(unsigned char *)(*((void *)&v1 + 1) + 4) != 101) {
          goto LABEL_66;
        }
        result.Foundation::XMLPlistTag value = Foundation_XMLPlistTag_false;
        break;
      case 0x69:
        if (v13 - *((void *)&v1 + 1) < 7) {
          goto LABEL_66;
        }
        if (v2 < *((void *)&v1 + 1)) {
          goto LABEL_75;
        }
        if (**((_DWORD **)&v1 + 1) != 1702129257 || *(_DWORD *)(*((void *)&v1 + 1) + 3) != 1919248229) {
          goto LABEL_66;
        }
        result.Foundation::XMLPlistTag value = Foundation_XMLPlistTag_integer;
        break;
      case 0x6B:
        if (v13 - *((void *)&v1 + 1) < 3) {
          goto LABEL_66;
        }
        if (v2 < *((void *)&v1 + 1)) {
          goto LABEL_76;
        }
        if (**((_WORD **)&v1 + 1) != 25963 || *(unsigned char *)(*((void *)&v1 + 1) + 2) != 121) {
          goto LABEL_66;
        }
        result.Foundation::XMLPlistTag value = Foundation_XMLPlistTag_key;
        break;
      case 0x70:
        if (v13 - *((void *)&v1 + 1) < 5) {
          goto LABEL_66;
        }
        if (v2 < *((void *)&v1 + 1)) {
          goto LABEL_77;
        }
        if (**((_DWORD **)&v1 + 1) != 1936288880 || *(unsigned char *)(*((void *)&v1 + 1) + 4) != 116) {
          goto LABEL_66;
        }
        result.Foundation::XMLPlistTag value = Foundation_XMLPlistTag_plist;
        break;
      case 0x72:
        if (v13 - *((void *)&v1 + 1) < 4) {
          goto LABEL_66;
        }
        if (v2 < *((void *)&v1 + 1)) {
          goto LABEL_78;
        }
        if (**((_DWORD **)&v1 + 1) != 1818322290) {
          goto LABEL_66;
        }
        result.Foundation::XMLPlistTag value = Foundation_XMLPlistTag_real;
        break;
      case 0x73:
        if (v13 - *((void *)&v1 + 1) < 6) {
          goto LABEL_66;
        }
        if (v2 < *((void *)&v1 + 1)) {
          goto LABEL_79;
        }
        if (**((_DWORD **)&v1 + 1) != 1769108595 || *(_WORD *)(*((void *)&v1 + 1) + 4) != 26478) {
          goto LABEL_66;
        }
        result.Foundation::XMLPlistTag value = Foundation_XMLPlistTag_string;
        break;
      case 0x74:
        if (v13 - *((void *)&v1 + 1) < 4) {
          goto LABEL_66;
        }
        if (v2 < *((void *)&v1 + 1)) {
          goto LABEL_80;
        }
        if (**((_DWORD **)&v1 + 1) != 1702195828) {
          goto LABEL_66;
        }
        result.Foundation::XMLPlistTag value = Foundation_XMLPlistTag_true;
        break;
      default:
LABEL_66:
        result.Foundation::XMLPlistTag value = Foundation_XMLPlistTag_unknownDefault;
        break;
    }
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.checkForCloseTag(_:)(Foundation::XMLPlistTag a1)
{
  uint64_t v4 = (unsigned __int8 *)v1[3];
  unint64_t v3 = v1[4];
  if ((a1 - 2) > 7u) {
    uint64_t v5 = 5;
  }
  else {
    uint64_t v5 = qword_18210C0E0[(char)(a1 - 2)];
  }
  if (v3 < (unint64_t)&v4[v5 + 3]) {
    goto LABEL_5;
  }
  if (v3 < (unint64_t)v4)
  {
    __break(1u);
    goto LABEL_98;
  }
  uint64_t v7 = *v1;
  if ((uint64_t)&v4[-*v1] < 0)
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  if ((uint64_t)(v3 - (void)v4) < 0)
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  uint64_t v8 = v1[1];
  unint64_t v9 = v7 + v8;
  if ((uint64_t)(v7 + v8 - v3) < 0)
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  uint64_t v10 = (unsigned int *)(v4 + 2);
  uint64_t v11 = v3 - (void)(v4 + 2);
  if (v3 < (unint64_t)(v4 + 2))
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  unsigned int v12 = *v4;
  if (v12 != 60 || (unsigned int v12 = v4[1], v12 != 47))
  {
    uint64_t v16 = BufferReader.lineNumber.getter();
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    XMLPlistTag.tagName.getter(a1);
    v17._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    uint64_t v18 = v12;
    goto LABEL_21;
  }
  switch(a1)
  {
    case Foundation_XMLPlistTag_array:
      if (v11 < 5) {
        goto LABEL_88;
      }
      if (v9 < (unint64_t)v10) {
        goto LABEL_106;
      }
      if ((uint64_t)v10 - v7 < 0) {
        goto LABEL_107;
      }
      if ((uint64_t)(v9 - (void)v10) < 0) {
        goto LABEL_108;
      }
      unsigned int v21 = bswap32(*v10);
      BOOL v14 = v21 >= 0x61727261;
      if (v21 != 1634890337) {
        goto LABEL_84;
      }
      int v15 = v4[6] - 121;
      break;
    case Foundation_XMLPlistTag_dict:
      if (v11 < 4) {
        goto LABEL_88;
      }
      if (v9 < (unint64_t)v10) {
        goto LABEL_109;
      }
      if ((uint64_t)v10 - v7 < 0) {
        goto LABEL_110;
      }
      if ((uint64_t)(v9 - (void)v10) < 0) {
        goto LABEL_111;
      }
      unsigned int v22 = bswap32(*v10);
      unsigned int v23 = 1684628340;
      goto LABEL_73;
    case Foundation_XMLPlistTag_key:
      if (v11 < 3) {
        goto LABEL_88;
      }
      if (v9 < (unint64_t)v10) {
        goto LABEL_112;
      }
      if ((uint64_t)v10 - v7 < 0) {
        goto LABEL_113;
      }
      if ((uint64_t)(v9 - (void)v10) < 0) {
        goto LABEL_114;
      }
      unsigned int v24 = bswap32(*(unsigned __int16 *)v10) >> 16;
      BOOL v14 = v24 >= 0x6B65;
      if (v24 != 27493) {
        goto LABEL_84;
      }
      int v15 = v4[4] - 121;
      break;
    case Foundation_XMLPlistTag_string:
      if (v11 < 6) {
        goto LABEL_88;
      }
      if (v9 < (unint64_t)v10) {
        goto LABEL_115;
      }
      if ((uint64_t)v10 - v7 < 0) {
        goto LABEL_116;
      }
      if ((uint64_t)(v9 - (void)v10) < 0) {
        goto LABEL_117;
      }
      unsigned int v25 = 1937011305;
      unsigned int v26 = bswap32(*v10);
      if (v26 == 1937011305)
      {
        unsigned int v26 = bswap32(*((unsigned __int16 *)v4 + 3)) >> 16;
        unsigned int v25 = 28263;
        if (v26 == 28263) {
          goto LABEL_67;
        }
      }
      goto LABEL_83;
    case Foundation_XMLPlistTag_data:
      if (v11 < 4) {
        goto LABEL_88;
      }
      if (v9 < (unint64_t)v10) {
        goto LABEL_118;
      }
      if ((uint64_t)v10 - v7 < 0) {
        goto LABEL_119;
      }
      if ((uint64_t)(v9 - (void)v10) < 0) {
        goto LABEL_120;
      }
      unsigned int v22 = bswap32(*v10);
      unsigned int v23 = 1684108385;
      goto LABEL_73;
    case Foundation_XMLPlistTag_date:
      if (v11 < 4) {
        goto LABEL_88;
      }
      if (v9 < (unint64_t)v10) {
        goto LABEL_121;
      }
      if ((uint64_t)v10 - v7 < 0) {
        goto LABEL_122;
      }
      if ((uint64_t)(v9 - (void)v10) < 0) {
        goto LABEL_123;
      }
      unsigned int v22 = bswap32(*v10);
      unsigned int v23 = 1684108389;
      goto LABEL_73;
    case Foundation_XMLPlistTag_real:
      if (v11 < 4) {
        goto LABEL_88;
      }
      if (v9 < (unint64_t)v10) {
        goto LABEL_124;
      }
      if ((uint64_t)v10 - v7 < 0) {
        goto LABEL_125;
      }
      if ((uint64_t)(v9 - (void)v10) < 0) {
        goto LABEL_126;
      }
      unsigned int v22 = bswap32(*v10);
      unsigned int v23 = 1919246700;
      goto LABEL_73;
    case Foundation_XMLPlistTag_integer:
      if (v11 < 7) {
        goto LABEL_88;
      }
      if (v9 < (unint64_t)v10) {
        goto LABEL_127;
      }
      if ((uint64_t)v10 - v7 < 0) {
        goto LABEL_128;
      }
      if ((uint64_t)(v9 - (void)v10) < 0) {
        goto LABEL_135;
      }
      unsigned int v25 = 1768846437;
      unsigned int v26 = bswap32(*v10);
      if (v26 == 1768846437 && (v25 = 1701274994, unsigned int v26 = bswap32(*(_DWORD *)(v4 + 5)), v26 == 1701274994))
      {
LABEL_67:
        int v15 = 0;
      }
      else
      {
LABEL_83:
        BOOL v14 = v26 >= v25;
LABEL_84:
        if (v14) {
          int v15 = 1;
        }
        else {
          int v15 = -1;
        }
      }
      break;
    case Foundation_XMLPlistTag_true:
      if (v11 < 4) {
        goto LABEL_88;
      }
      if (v9 < (unint64_t)v10) {
        goto LABEL_129;
      }
      if ((uint64_t)v10 - v7 < 0) {
        goto LABEL_130;
      }
      if ((uint64_t)(v9 - (void)v10) < 0) {
        goto LABEL_131;
      }
      unsigned int v22 = bswap32(*v10);
      unsigned int v23 = 1953658213;
LABEL_73:
      BOOL v14 = v22 >= v23;
      BOOL v27 = v22 > v23;
      int v28 = !v14;
      int v15 = v27 - v28;
      break;
    case Foundation_XMLPlistTag_false:
      if (v11 < 5) {
        goto LABEL_88;
      }
      if (v9 < (unint64_t)v10) {
        goto LABEL_132;
      }
      if ((uint64_t)v10 - v7 < 0) {
        goto LABEL_133;
      }
      if ((uint64_t)(v9 - (void)v10) < 0) {
        goto LABEL_134;
      }
      unsigned int v29 = bswap32(*v10);
      BOOL v14 = v29 >= 0x66616C73;
      if (v29 != 1717660787) {
        goto LABEL_84;
      }
      int v15 = v4[6] - 101;
      break;
    default:
      if (v11 < 5) {
        goto LABEL_88;
      }
      if (v9 < (unint64_t)v10) {
        goto LABEL_103;
      }
      if ((uint64_t)v10 - v7 < 0) {
        goto LABEL_104;
      }
      if ((uint64_t)(v9 - (void)v10) < 0) {
        goto LABEL_105;
      }
      unsigned int v13 = bswap32(*v10);
      BOOL v14 = v13 >= 0x706C6973;
      if (v13 != 1886153075) {
        goto LABEL_84;
      }
      int v15 = v4[6] - 116;
      break;
  }
  if (v15)
  {
LABEL_88:
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease();
    BufferReader.lineNumber.getter();
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 0xD000000000000019;
    v31._object = (void *)0x80000001823AA640;
    String.append(_:)(v31);
    XMLPlistTag.tagName.getter(a1);
    v32._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v19 = 0xD000000000000012;
    *(void *)(v19 + 8) = 0x80000001823AA620;
    *(void *)(v19 + 16) = 0;
    *(void *)(v19 + 24) = 0;
    char v20 = 5;
    goto LABEL_89;
  }
  Foundation::XMLPlistTag v33 = XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)((unsigned __int8 *)v10 + v5);
  if ((unint64_t)v33 >= v3)
  {
LABEL_5:
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(unsigned char *)(v6 + 32) = 0;
LABEL_90:
    swift_willThrow();
    return;
  }
  if (((unint64_t)&v33[-v7] & 0x8000000000000000) == 0 && v7 + v8 - (uint64_t)v33 >= 1)
  {
    uint64_t v18 = *v33;
    if (v18 == 62)
    {
      v1[3] = (uint64_t)(v33 + 1);
      return;
    }
    uint64_t v16 = BufferReader.lineNumber.getter();
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    XMLPlistTag.tagName.getter(a1);
    v34._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
LABEL_21:
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v19 = v18;
    *(void *)(v19 + 8) = v16;
    *(void *)(v19 + 16) = 0xD000000000000020;
    *(void *)(v19 + 24) = 0x80000001823AA3D0;
    char v20 = 3;
LABEL_89:
    *(unsigned char *)(v19 + 32) = v20;
    goto LABEL_90;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanUpToNextValue(for:)(Foundation::XMLPlistTag a1)
{
  unint64_t v3 = (unsigned __int8 *)v1[3];
  unint64_t v4 = v1[4];
  if ((unsigned __int8 *)v4 == v3)
  {
LABEL_17:
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    XMLPlistTag.tagName.getter(a1);
    v15._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v16 = 0xD000000000000020;
    *(void *)(v16 + 8) = 0x80000001823AA3D0;
    *(void *)(v16 + 16) = 0;
    *(void *)(v16 + 24) = 0;
LABEL_19:
    *(unsigned char *)(v16 + 32) = 0;
LABEL_23:
    swift_willThrow();
LABEL_24:
    LOBYTE(v7) = v11;
  }
  else
  {
    while (1)
    {
      uint64_t v6 = *v1;
      uint64_t v5 = v1[1];
      uint64_t v7 = XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(v3);
      v1[3] = (uint64_t)v7;
      if ((unsigned __int8 *)v4 == v7)
      {
LABEL_18:
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(_OWORD *)uint64_t v16 = 0u;
        *(_OWORD *)(v16 + 16) = 0u;
        goto LABEL_19;
      }
      uint64_t v8 = v7 + 1;
      uint64_t v9 = *v7;
      v1[3] = (uint64_t)(v7 + 1);
      if (v9 != 60)
      {
        uint64_t v17 = BufferReader.lineNumber.getter();
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(void *)uint64_t v18 = v9;
        *(void *)(v18 + 8) = v17;
        *(void *)(v18 + 16) = 0xD00000000000001ALL;
        *(void *)(v18 + 24) = 0x80000001823AA3B0;
LABEL_22:
        *(unsigned char *)(v18 + 32) = 3;
        goto LABEL_23;
      }
      if (v4 < (unint64_t)(v7 + 2)) {
        goto LABEL_18;
      }
      if ((uint64_t)&v8[-v6] < 0) {
        break;
      }
      if ((uint64_t)(v4 - (void)v8) < 0) {
        goto LABEL_28;
      }
      if ((uint64_t)(v6 + v5 - v4) < 0) {
        goto LABEL_29;
      }
      int v10 = *v8;
      if (v10 == 33)
      {
        if (v4 < (unint64_t)(v7 + 4)) {
          goto LABEL_18;
        }
        unsigned int v13 = v7[2];
        if (v13 != 45 || (unsigned int v13 = v7[3], v13 != 45))
        {
          uint64_t v19 = BufferReader.lineNumber.getter();
          lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
          swift_allocError();
          *(void *)uint64_t v18 = v13;
          *(void *)(v18 + 8) = v19;
          *(_OWORD *)(v18 + 16) = xmmword_18210BF40;
          goto LABEL_22;
        }
        v1[3] = (uint64_t)(v7 + 4);
        XMLPlistScanner.skipXMLComment()();
        if (v14) {
          goto LABEL_24;
        }
      }
      else
      {
        if (v10 != 63)
        {
          BOOL v11 = v10 != 47;
          if (v10 == 47) {
            v1[3] = (uint64_t)v7;
          }
          goto LABEL_24;
        }
        XMLPlistScanner.skipXMLProcessingInstruction()();
        if (v12) {
          goto LABEL_24;
        }
      }
      unint64_t v3 = (unsigned __int8 *)v1[3];
      if ((unsigned __int8 *)v4 == v3) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }
  return (char)v7;
}

unsigned __int8 *XMLPlistScanner.indexOfEndOfWhitespaceBytes(after:)(unsigned __int8 *result)
{
  unint64_t v2 = v1[4];
  unint64_t v3 = v2 - (void)result;
  if (v2 > (unint64_t)result)
  {
    uint64_t v4 = v1[1] + *v1 - (void)result;
    for (unint64_t i = (unint64_t)&result[-*v1]; (i & 0x8000000000000000) == 0; ++i)
    {
      BOOL v6 = v4-- < 1;
      if (v6) {
        break;
      }
      unsigned int v7 = *result;
      BOOL v6 = v7 > 0x20;
      uint64_t v8 = (1 << v7) & 0x100002600;
      if (v6 || v8 == 0) {
        return result;
      }
      ++result;
      if (!--v3) {
        return (unsigned __int8 *)v1[4];
      }
    }
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanString(asKey:)(Swift::Bool asKey)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(v3 + 8);
  *(void *)&long long v24 = *(void *)v3;
  *((void *)&v24 + 1) = v5;
  long long v25 = *(_OWORD *)(v3 + 16);
  specialized static XMLPlistScanner.parseString(with:generate:)((uint64_t *)&v24, 0, (uint64_t)v21);
  if (!v2)
  {
    uint64_t v6 = v21[0];
    uint64_t v7 = v21[1];
    char v8 = v22;
    int v9 = v23;
    swift_bridgeObjectRelease();
    uint64_t v10 = v24;
    long long v11 = v25;
    *(_OWORD *)uint64_t v3 = v24;
    *(_OWORD *)(v3 + 16) = v11;
    *(void *)(v3 + 32) = v26;
    if (v8)
    {
      uint64_t v12 = (void *)(v3 + 40);
      XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(&v24);
      unsigned int v13 = *(void **)(v3 + 40);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unsigned int v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
      }
      unint64_t v15 = v13[2];
      unint64_t v14 = v13[3];
      unint64_t v16 = v15 + 1;
      if (v15 >= v14 >> 1)
      {
        unint64_t v27 = v15 + 1;
        char v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v13);
        unint64_t v16 = v27;
        unsigned int v13 = v20;
      }
      v13[2] = v16;
      v13[v15 + 4] = 11;
      *uint64_t v12 = v13;
    }
    else
    {
      if (v9) {
        char v17 = 13;
      }
      else {
        char v17 = 1;
      }
      if (v9) {
        char v18 = 12;
      }
      else {
        char v18 = 0;
      }
      if (asKey) {
        unsigned __int8 v19 = v17;
      }
      else {
        unsigned __int8 v19 = v18;
      }
      XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v19, v7 - v6, v6 - v10, &v24);
    }
  }
}

void *XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, void *a4)
{
  XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(a4);
  int v9 = *(void **)v4;
  int64_t v10 = *(void *)(*(void *)v4 + 16);
  int64_t v11 = v10 + 3;
  if (__OFADD__(v10, 3))
  {
    __break(1u);
LABEL_15:
    Foundation::XMLPlistTag_optional result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v10, 1, v9);
    int v9 = result;
    unint64_t v8 = result[3];
    unint64_t v13 = v8 >> 1;
    goto LABEL_9;
  }
  Foundation::XMLPlistTag_optional result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || (unint64_t v8 = v9[3], v13 = v8 >> 1, (uint64_t)(v8 >> 1) < v11))
  {
    if (v10 <= v11) {
      int64_t v14 = v10 + 3;
    }
    else {
      int64_t v14 = v10;
    }
    Foundation::XMLPlistTag_optional result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v14, 1, v9);
    int v9 = result;
    unint64_t v8 = result[3];
    unint64_t v13 = v8 >> 1;
  }
  int64_t v11 = v9[2];
  int64_t v10 = v11 + 1;
  if (v13 <= v11) {
    goto LABEL_15;
  }
LABEL_9:
  v9[2] = v10;
  v9[v11 + 4] = a1;
  if ((uint64_t)v13 < v11 + 2)
  {
    Foundation::XMLPlistTag_optional result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v11 + 2, 1, v9);
    int v9 = result;
  }
  v9[2] = v11 + 2;
  v9[v10 + 4] = a2;
  unint64_t v16 = v9[2];
  unint64_t v15 = v9[3];
  if (v16 >= v15 >> 1)
  {
    Foundation::XMLPlistTag_optional result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v9);
    int v9 = result;
  }
  v9[2] = v16 + 1;
  v9[v16 + 4] = a3;
  *(void *)uint64_t v4 = v9;
  return result;
}

void *XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(void *result)
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3) {
    BOOL v4 = (*(void *)(*v1 + 16) & 0x7FFLL) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    return result;
  }
  unint64_t v5 = result[2];
  unint64_t v6 = result[4];
  if (v6 < v5)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = *result;
  if ((uint64_t)(v5 - *result) < 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = v6 - v5;
  if (v8 < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if ((uint64_t)(v7 + result[1] - v6) < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  double v9 = (double)v8 / (double)(result[3] - v7) * (double)v3;
  if ((~*(void *)&v9 & 0x7FF0000000000000) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
    return result;
  }
  uint64_t v10 = (uint64_t)v9;
  uint64_t v11 = v1[1];
  if (!v11 || (double)v10 / (double)v11 > 1.25)
  {
    Foundation::XMLPlistTag_optional result = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (!result || v10 > v2[3] >> 1)
    {
      if (v3 <= v10) {
        int64_t v12 = v10;
      }
      else {
        int64_t v12 = v3;
      }
      Foundation::XMLPlistTag_optional result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v12, 0, v2);
      uint64_t v2 = result;
    }
    *uint64_t v1 = v2;
    v1[1] = v10;
  }
  return result;
}

uint64_t *specialized static XMLPlistScanner.parseString(with:generate:)@<X0>(uint64_t *result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5 = result;
  unint64_t v8 = result[3];
  unint64_t v7 = result[4];
  double v9 = (unsigned __int8 *)(v8 + 5);
  uint64_t v10 = *result;
  uint64_t v11 = result[1];
  if (v7 < v8 + 5) {
    goto LABEL_9;
  }
  if (v10 + v11 < v8) {
    goto LABEL_85;
  }
  if ((uint64_t)(v8 - v10) < 0)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  if ((uint64_t)(v10 + v11 - v8) < 0)
  {
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  if (*(_DWORD *)v8 == 1819635236 && *(unsigned char *)(v8 + 4) == 108)
  {
    uint64_t v18 = 0;
    result[3] = (uint64_t)v9;
    char v16 = 1;
    unint64_t v13 = 0xE000000000000000;
LABEL_69:
    BOOL v17 = 1;
    goto LABEL_70;
  }
LABEL_9:
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  if (v7 >= v8 + 1)
  {
    Foundation::XMLPlistTag_optional result = (uint64_t *)v8;
    double v9 = (unsigned __int8 *)v8;
    while (1)
    {
      if (v7 < (unint64_t)v9)
      {
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
      if ((uint64_t)&v9[-v10] < 0) {
        goto LABEL_74;
      }
      if ((uint64_t)(v7 - (void)v9) < 0) {
        goto LABEL_75;
      }
      uint64_t v19 = v10 + v11;
      if ((uint64_t)(v10 + v11 - v7) < 0) {
        goto LABEL_76;
      }
      int v20 = *v9;
      if (v20 == 38) {
        break;
      }
      if (v20 == 60)
      {
        if (v7 < (unint64_t)(v9 + 2) || v9[1] != 33) {
          goto LABEL_11;
        }
        if (v35)
        {
          if (v9 < (unsigned __int8 *)result) {
            goto LABEL_81;
          }
          if ((uint64_t)result - v10 < 0) {
            goto LABEL_82;
          }
          if (v9 - (unsigned __int8 *)result < 0) {
            goto LABEL_83;
          }
          if (v19 - (uint64_t)v9 < 0) {
            goto LABEL_84;
          }
          uint64_t v21 = static String._tryFromUTF8(_:)();
          if (!v22) {
            goto LABEL_71;
          }
          String.append(_:)(*(Swift::String *)&v21);
          swift_bridgeObjectRelease();
        }
        else if (a2)
        {
          if (v9 < (unsigned __int8 *)result) {
            goto LABEL_92;
          }
          if ((uint64_t)result - v10 < 0) {
            goto LABEL_93;
          }
          if (v9 - (unsigned __int8 *)result < 0) {
            goto LABEL_94;
          }
          if (v19 - (uint64_t)v9 < 0) {
            goto LABEL_95;
          }
          uint64_t v28 = static String._tryFromUTF8(_:)();
          unint64_t v30 = v29;
          swift_bridgeObjectRelease();
          uint64_t v34 = v28;
          unint64_t v35 = v30;
          if (!v30) {
            goto LABEL_71;
          }
        }
        specialized static XMLPlistScanner.parseCDSect_pl(reader:string:)(v5, (uint64_t)&v34);
        if (v3) {
          return (uint64_t *)swift_bridgeObjectRelease();
        }
LABEL_60:
        Foundation::XMLPlistTag_optional result = (uint64_t *)v5[3];
        double v9 = (unsigned __int8 *)result;
        goto LABEL_22;
      }
      v5[3] = (uint64_t)++v9;
LABEL_22:
      uint64_t v10 = *v5;
      uint64_t v11 = v5[1];
      unint64_t v7 = v5[4];
      if (v7 < (unint64_t)(v9 + 1)) {
        goto LABEL_11;
      }
    }
    if (v35)
    {
      if (v9 < (unsigned __int8 *)result) {
        goto LABEL_77;
      }
      if ((uint64_t)result - v10 < 0) {
        goto LABEL_78;
      }
      if (v9 - (unsigned __int8 *)result < 0) {
        goto LABEL_79;
      }
      if (v19 - (uint64_t)v9 < 0) {
        goto LABEL_80;
      }
      uint64_t v23 = static String._tryFromUTF8(_:)();
      if (!v24) {
        goto LABEL_71;
      }
      String.append(_:)(*(Swift::String *)&v23);
      swift_bridgeObjectRelease();
    }
    else if (a2)
    {
      if (v9 < (unsigned __int8 *)result) {
        goto LABEL_88;
      }
      if ((uint64_t)result - v10 < 0) {
        goto LABEL_89;
      }
      if (v9 - (unsigned __int8 *)result < 0) {
        goto LABEL_90;
      }
      if (v19 - (uint64_t)v9 < 0) {
        goto LABEL_91;
      }
      uint64_t v25 = static String._tryFromUTF8(_:)();
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
      uint64_t v34 = v25;
      unint64_t v35 = v27;
      if (!v27) {
        goto LABEL_71;
      }
    }
    specialized static XMLPlistScanner.parseEntityReference(reader:string:)(v5, &v34);
    if (v3) {
      return (uint64_t *)swift_bridgeObjectRelease();
    }
    goto LABEL_60;
  }
  double v9 = (unsigned __int8 *)v8;
  Foundation::XMLPlistTag_optional result = (uint64_t *)v8;
LABEL_11:
  if ((a2 & 1) == 0)
  {
    BOOL v17 = v8 == (void)result;
    Foundation::XMLPlistTag_optional result = (uint64_t *)swift_bridgeObjectRelease();
    uint64_t v18 = 0;
    char v16 = 0;
    unint64_t v13 = 0xE000000000000000;
    goto LABEL_70;
  }
  unint64_t v13 = v35;
  if (v35)
  {
    if (result >= (uint64_t *)v9)
    {
LABEL_19:
      char v16 = 0;
      BOOL v17 = 0;
      uint64_t v18 = v34;
LABEL_70:
      *(void *)a3 = v8;
      *(void *)(a3 + 8) = v9;
      *(void *)(a3 + 16) = v18;
      *(void *)(a3 + 24) = v13;
      *(unsigned char *)(a3 + 32) = v16;
      *(unsigned char *)(a3 + 33) = v17;
      return result;
    }
    if ((uint64_t)result - v10 >= 0)
    {
      if (v9 - (unsigned __int8 *)result >= 0)
      {
        if (v10 + v11 - (uint64_t)v9 >= 0)
        {
          uint64_t v14 = static String._tryFromUTF8(_:)();
          if (v15)
          {
            String.append(_:)(*(Swift::String *)&v14);
            Foundation::XMLPlistTag_optional result = (uint64_t *)swift_bridgeObjectRelease();
            double v9 = (unsigned __int8 *)v5[3];
            unint64_t v13 = v35;
            goto LABEL_19;
          }
          goto LABEL_71;
        }
LABEL_102:
        __break(1u);
        return result;
      }
LABEL_101:
      __break(1u);
      goto LABEL_102;
    }
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  if ((unint64_t)v9 < v8) {
    goto LABEL_96;
  }
  if ((uint64_t)(v8 - v10) < 0)
  {
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  if ((uint64_t)&v9[-v8] < 0)
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  if (v10 + v11 - (uint64_t)v9 < 0)
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  uint64_t v31 = static String._tryFromUTF8(_:)();
  if (v32)
  {
    uint64_t v18 = v31;
    unint64_t v13 = v32;
    double v9 = (unsigned __int8 *)v5[3];
    Foundation::XMLPlistTag_optional result = (uint64_t *)swift_bridgeObjectRelease();
    char v16 = 0;
    goto LABEL_69;
  }
LABEL_71:
  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
  swift_allocError();
  *(_OWORD *)uint64_t v33 = 0u;
  *(_OWORD *)(v33 + 16) = 0u;
  *(unsigned char *)(v33 + 32) = 6;
  swift_willThrow();
  return (uint64_t *)swift_bridgeObjectRelease();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = result + 1;
  *(void *)(v3 + 8 * result + 32) = a2;
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    Foundation::XMLPlistTag_optional result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x1F4183E80]();
}

uint64_t XMLPlistScanner.scanThroughCloseTag(_:)(uint64_t result)
{
  uint64_t v3 = v1[3];
  unint64_t v2 = v1[4];
  if (v2 < v3 + 1)
  {
LABEL_9:
    XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)result);
    if (v10) {
      return v9;
    }
    else {
      return v3;
    }
  }
  else
  {
    unint64_t v4 = *v1 + v1[1] - v2;
    uint64_t v5 = v2 - v3;
    uint64_t v6 = v3 - *v1;
    unint64_t v7 = (unsigned char *)v1[3];
    while (v2 >= (unint64_t)v7)
    {
      if (v6 < 0) {
        goto LABEL_13;
      }
      if (v5 < 0) {
        goto LABEL_14;
      }
      if ((v4 & 0x8000000000000000) != 0) {
        goto LABEL_15;
      }
      if (*v7 != 60)
      {
        unint64_t v8 = v7 + 2;
        v1[3] = v7 + 1;
        --v5;
        ++v6;
        ++v7;
        if (v2 >= (unint64_t)v8) {
          continue;
        }
      }
      goto LABEL_9;
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return result;
}

uint64_t specialized XMLPlistMap.TypeDescriptor.init(_:)(unsigned __int8 a1)
{
  uint64_t v1 = a1;
  uint64_t result = 0;
  switch(v1)
  {
    case 1:
      uint64_t result = 8;
      break;
    case 2:
      uint64_t result = 9;
      break;
    case 3:
      uint64_t result = 1;
      break;
    case 4:
      return result;
    case 5:
      uint64_t result = 4;
      break;
    case 6:
      uint64_t result = 5;
      break;
    case 7:
      uint64_t result = 2;
      break;
    case 8:
      uint64_t result = 3;
      break;
    case 9:
      uint64_t result = 6;
      break;
    case 10:
      uint64_t result = 7;
      break;
    default:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

int64_t XMLPlistScanner.PartialMapData.recordStartCollection(tagType:with:)(unsigned __int8 a1, void *a2)
{
  XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(a2);
  unint64_t v4 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  int64_t v7 = v6 + 1;
  if (v6 >= v5 >> 1) {
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  v4[2] = v7;
  v4[v6 + 4] = a1;
  int64_t v8 = v6 + 3;
  if (__OFADD__(v6, 3))
  {
    __break(1u);
  }
  else
  {
    unint64_t v9 = v4[3];
    unint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) >= v8)
    {
      unint64_t v11 = v6 + 1;
      goto LABEL_8;
    }
  }
  if (v7 <= v8) {
    int64_t v16 = v6 + 3;
  }
  else {
    int64_t v16 = v6 + 1;
  }
  unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)1, v16, 1, v4);
  unint64_t v11 = v4[2];
  unint64_t v9 = v4[3];
  unint64_t v10 = v9 >> 1;
LABEL_8:
  unint64_t v12 = v11 + 1;
  if (v10 <= v11) {
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v11 + 1, 1, v4);
  }
  v4[2] = v12;
  v4[v11 + 4] = 0;
  unint64_t v13 = v4[3];
  int64_t v14 = v11 + 2;
  if (v14 > (uint64_t)(v13 >> 1)) {
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14, 1, v4);
  }
  v4[2] = v14;
  v4[v12 + 4] = 0;
  *unint64_t v2 = v4;
  return v7;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XMLPlistScanner.scanArray()()
{
  uint64_t v1 = v0;
  long long v2 = *v0;
  long long v3 = v0[1];
  uint64_t v408 = *((void *)v0 + 4);
  v407[1] = v3;
  v407[0] = v2;
  unint64_t v4 = (void *)v0 + 5;
  int64_t v409 = XMLPlistScanner.PartialMapData.recordStartCollection(tagType:with:)(8u, v407);
  unint64_t v5 = 0;
  while (1)
  {
    uint64_t v12 = *((void *)v1 + 4);
    if (v12 == *((void *)v1 + 3)) {
      break;
    }
    Swift::Bool v13 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_array);
    if (v14) {
      goto LABEL_114;
    }
    if (!v13) {
      break;
    }
    LOBYTE(v15) = XMLPlistScanner.peekXMLElement()()._0;
    if (v16) {
      goto LABEL_114;
    }
    Foundation::XMLPlistTag v17 = (char)v15;
    switch((char)v15)
    {
      case 1:
        if ((v15 & 0x100) != 0)
        {
          long long v47 = v1[1];
          v393[0] = *v1;
          v393[1] = v47;
          uint64_t v394 = *((void *)v1 + 4);
          uint64_t v45 = v393;
          unsigned __int8 v46 = 8;
LABEL_37:
          XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(v46, v45);
        }
        else
        {
          XMLPlistScanner.scanArray()();
          if (v42) {
            goto LABEL_114;
          }
        }
        goto LABEL_3;
      case 2:
        if ((v15 & 0x100) != 0)
        {
          long long v44 = v1[1];
          v395[0] = *v1;
          v395[1] = v44;
          uint64_t v396 = *((void *)v1 + 4);
          uint64_t v45 = v395;
          unsigned __int8 v46 = 9;
          goto LABEL_37;
        }
        XMLPlistScanner.scanDict()();
        if (v29) {
          goto LABEL_114;
        }
        goto LABEL_3;
      case 3:
      case 4:
        if ((v15 & 0x100) != 0)
        {
          long long v43 = v1[1];
          v397[0] = *v1;
          v397[1] = v43;
          uint64_t v398 = *((void *)v1 + 4);
          if (v15 == 3) {
            unsigned __int8 v21 = 13;
          }
          else {
            unsigned __int8 v21 = 12;
          }
          uint64_t v25 = v397;
          uint64_t v22 = 0;
          uint64_t v24 = 0;
          goto LABEL_34;
        }
        XMLPlistScanner.scanString(asKey:)(v15 == 3);
        if (v26) {
          goto LABEL_114;
        }
        Foundation::XMLPlistTag v27 = v17;
        goto LABEL_95;
      case 5:
      case 6:
      case 7:
      case 8:
        if ((v15 & 0x100) != 0)
        {
          long long v109 = v1[1];
          long long v399 = *v1;
          long long v400 = v109;
          uint64_t v401 = *((void *)v1 + 4);
          goto LABEL_108;
        }
        uint64_t v18 = XMLPlistScanner.scanThroughCloseTag(_:)(v15);
        uint64_t v20 = v19;
        unsigned __int8 v21 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v17);
        uint64_t v22 = v20 - v18;
        uint64_t v23 = *((void *)v1 + 1);
        uint64_t v24 = v18 - *(void *)v1;
        v402[0] = *(void *)v1;
        v402[1] = v23;
        long long v403 = v1[1];
        uint64_t v404 = v12;
        uint64_t v25 = v402;
LABEL_34:
        XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v21, v22, v24, v25);
        goto LABEL_3;
      case 9:
      case 10:
        if ((v15 & 0x100) == 0)
        {
          XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v15);
          if (v28) {
            goto LABEL_114;
          }
        }
        unsigned __int8 v6 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v17);
        long long v7 = v1[1];
        v405[0] = *v1;
        v405[1] = v7;
        uint64_t v406 = *((void *)v1 + 4);
        XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v405);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v8 = *(void *)(*((void *)v1 + 5) + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
        uint64_t v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
        destructiveProjectEnumData for PredicateCodableError(v9, v10);
        goto LABEL_3;
      default:
        if ((v15 & 0x100) != 0)
        {
          long long v112 = v1[1];
          long long v260 = *v1;
          long long v261 = v112;
          uint64_t v262 = *((void *)v1 + 4);
          goto LABEL_111;
        }
        Swift::Bool v30 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
        if (v31) {
          goto LABEL_114;
        }
        if (!v30)
        {
          long long v113 = v1[1];
          long long v390 = *v1;
          long long v391 = v113;
          uint64_t v392 = *((void *)v1 + 4);
          goto LABEL_111;
        }
        LOBYTE(v32) = XMLPlistScanner.peekXMLElement()()._0;
        if (v33) {
          goto LABEL_114;
        }
        break;
    }
    Foundation::XMLPlistTag v17 = (char)v32;
    switch((char)v32)
    {
      case 1:
        if ((v32 & 0x100) == 0)
        {
          XMLPlistScanner.scanArray()();
          goto LABEL_91;
        }
        long long v70 = v1[1];
        v376[0] = *v1;
        v376[1] = v70;
        uint64_t v377 = *((void *)v1 + 4);
        uint64_t v71 = v376;
        unsigned __int8 v72 = 8;
        goto LABEL_62;
      case 2:
        if ((v32 & 0x100) == 0)
        {
          XMLPlistScanner.scanDict()();
          goto LABEL_91;
        }
        long long v73 = v1[1];
        v378[0] = *v1;
        v378[1] = v73;
        uint64_t v379 = *((void *)v1 + 4);
        uint64_t v71 = v378;
        unsigned __int8 v72 = 9;
LABEL_62:
        XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(v72, v71);
        break;
      case 3:
      case 4:
        if ((v32 & 0x100) != 0)
        {
          long long v69 = v1[1];
          v380[0] = *v1;
          v380[1] = v69;
          uint64_t v381 = *((void *)v1 + 4);
          if (v32 == 3) {
            unsigned __int8 v37 = 13;
          }
          else {
            unsigned __int8 v37 = 12;
          }
          uint64_t v41 = v380;
          uint64_t v38 = 0;
          uint64_t v40 = 0;
          goto LABEL_59;
        }
        XMLPlistScanner.scanString(asKey:)(v32 == 3);
        if (v48) {
          goto LABEL_114;
        }
        Foundation::XMLPlistTag v49 = v17;
        goto LABEL_90;
      case 5:
      case 6:
      case 7:
      case 8:
        if ((v32 & 0x100) != 0)
        {
          long long v134 = v1[1];
          long long v382 = *v1;
          long long v383 = v134;
          uint64_t v384 = *((void *)v1 + 4);
LABEL_108:
          uint64_t v110 = BufferReader.lineNumber.getter();
          lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
          swift_allocError();
          *(void *)uint64_t v111 = v17;
          goto LABEL_112;
        }
        uint64_t v34 = XMLPlistScanner.scanThroughCloseTag(_:)(v32);
        uint64_t v36 = v35;
        unsigned __int8 v37 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v17);
        uint64_t v38 = v36 - v34;
        uint64_t v39 = *((void *)v1 + 1);
        uint64_t v40 = v34 - *(void *)v1;
        v385[0] = *(void *)v1;
        v385[1] = v39;
        long long v386 = v1[1];
        uint64_t v387 = v12;
        uint64_t v41 = v385;
LABEL_59:
        XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v37, v38, v40, v41);
        break;
      case 9:
      case 10:
        if ((v32 & 0x100) == 0)
        {
          XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v32);
          if (v50) {
            goto LABEL_114;
          }
        }
        unsigned __int8 v51 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v17);
        long long v52 = v1[1];
        v388[0] = *v1;
        v388[1] = v52;
        uint64_t v389 = *((void *)v1 + 4);
        XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v388);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v53 = *(void *)(*((void *)v1 + 5) + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v53);
        uint64_t v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v51);
        destructiveProjectEnumData for PredicateCodableError(v54, v55);
        break;
      default:
        if ((v32 & 0x100) != 0) {
          goto LABEL_127;
        }
        Swift::Bool v56 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
        if (v57) {
          goto LABEL_114;
        }
        if (!v56)
        {
          long long v136 = v1[1];
          long long v373 = *v1;
          long long v374 = v136;
          uint64_t v375 = *((void *)v1 + 4);
          goto LABEL_111;
        }
        LOBYTE(v58) = XMLPlistScanner.peekXMLElement()()._0;
        if (v59) {
          goto LABEL_114;
        }
        Foundation::XMLPlistTag v17 = (char)v58;
        switch((char)v58)
        {
          case 1:
            if ((v58 & 0x100) == 0)
            {
              XMLPlistScanner.scanArray()();
              goto LABEL_80;
            }
            long long v96 = v1[1];
            v359[0] = *v1;
            v359[1] = v96;
            uint64_t v360 = *((void *)v1 + 4);
            unsigned __int8 v97 = v359;
            unsigned __int8 v98 = 8;
            goto LABEL_99;
          case 2:
            if ((v58 & 0x100) == 0)
            {
              XMLPlistScanner.scanDict()();
              goto LABEL_80;
            }
            long long v99 = v1[1];
            v361[0] = *v1;
            v361[1] = v99;
            uint64_t v362 = *((void *)v1 + 4);
            unsigned __int8 v97 = v361;
            unsigned __int8 v98 = 9;
LABEL_99:
            XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(v98, v97);
            goto LABEL_87;
          case 3:
          case 4:
            if ((v58 & 0x100) != 0)
            {
              long long v88 = v1[1];
              v363[0] = *v1;
              v363[1] = v88;
              uint64_t v364 = *((void *)v1 + 4);
              if (v58 == 3) {
                unsigned __int8 v63 = 13;
              }
              else {
                unsigned __int8 v63 = 12;
              }
              uint64_t v67 = v363;
              uint64_t v64 = 0;
              uint64_t v66 = 0;
              goto LABEL_86;
            }
            XMLPlistScanner.scanString(asKey:)(v58 == 3);
            if (v74) {
              goto LABEL_114;
            }
            Foundation::XMLPlistTag v75 = v17;
            goto LABEL_75;
          case 5:
          case 6:
          case 7:
          case 8:
            if ((v58 & 0x100) != 0)
            {
              long long v174 = v1[1];
              long long v365 = *v1;
              long long v366 = v174;
              uint64_t v367 = *((void *)v1 + 4);
              goto LABEL_108;
            }
            uint64_t v60 = XMLPlistScanner.scanThroughCloseTag(_:)(v58);
            uint64_t v62 = v61;
            unsigned __int8 v63 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v17);
            uint64_t v64 = v62 - v60;
            uint64_t v65 = *((void *)v1 + 1);
            uint64_t v66 = v60 - *(void *)v1;
            v368[0] = *(void *)v1;
            v368[1] = v65;
            long long v369 = v1[1];
            uint64_t v370 = v12;
            uint64_t v67 = v368;
LABEL_86:
            XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v63, v64, v66, v67);
LABEL_87:
            uint64_t v89 = *((void *)v1 + 3);
            Swift::Bool v90 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
            if (v91) {
              goto LABEL_114;
            }
            if (v90)
            {
              LOBYTE(v137) = XMLPlistScanner.peekXMLElement()()._0;
              if (v138) {
                goto LABEL_114;
              }
              Foundation::XMLPlistTag v17 = (char)v137;
              switch((char)v137)
              {
                case 1:
                  if ((v137 & 0x100) != 0)
                  {
                    long long v203 = v1[1];
                    v280[0] = *v1;
                    v280[1] = v203;
                    uint64_t v281 = *((void *)v1 + 4);
                    uint64_t v204 = v280;
                    unsigned __int8 v205 = 8;
                    goto LABEL_197;
                  }
                  XMLPlistScanner.scanArray()();
                  if (!v199) {
                    goto LABEL_198;
                  }
                  goto LABEL_114;
                case 2:
                  if ((v137 & 0x100) != 0)
                  {
                    long long v206 = v1[1];
                    v282[0] = *v1;
                    v282[1] = v206;
                    uint64_t v283 = *((void *)v1 + 4);
                    uint64_t v204 = v282;
                    unsigned __int8 v205 = 9;
LABEL_197:
                    XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(v205, v204);
                    goto LABEL_198;
                  }
                  XMLPlistScanner.scanDict()();
                  if (!v200) {
                    goto LABEL_198;
                  }
                  goto LABEL_114;
                case 3:
                case 4:
                  if ((v137 & 0x100) != 0)
                  {
                    long long v201 = v1[1];
                    v284[0] = *v1;
                    v284[1] = v201;
                    uint64_t v285 = *((void *)v1 + 4);
                    if (v137 == 3) {
                      unsigned __int8 v142 = 13;
                    }
                    else {
                      unsigned __int8 v142 = 12;
                    }
                    Foundation::XMLPlistTag v147 = v284;
                    uint64_t v143 = 0;
                    uint64_t v145 = 0;
                    goto LABEL_193;
                  }
                  XMLPlistScanner.scanString(asKey:)(v137 == 3);
                  if (!v191)
                  {
                    XMLPlistScanner.checkForCloseTag(_:)(v17);
                    if (!v192) {
                      goto LABEL_198;
                    }
                  }
                  goto LABEL_114;
                case 5:
                case 6:
                case 7:
                case 8:
                  if ((v137 & 0x100) != 0)
                  {
                    long long v196 = v1[1];
                    long long v286 = *v1;
                    long long v287 = v196;
                    uint64_t v288 = *((void *)v1 + 4);
                    goto LABEL_108;
                  }
                  uint64_t v139 = XMLPlistScanner.scanThroughCloseTag(_:)(v137);
                  uint64_t v141 = v140;
                  unsigned __int8 v142 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v17);
                  uint64_t v143 = v141 - v139;
                  uint64_t v144 = *((void *)v1 + 1);
                  uint64_t v145 = v139 - *(void *)v1;
                  uint64_t v146 = *((void *)v1 + 4);
                  v289[0] = *(void *)v1;
                  v289[1] = v144;
                  long long v290 = v1[1];
                  uint64_t v291 = v146;
                  Foundation::XMLPlistTag v147 = v289;
LABEL_193:
                  XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v142, v143, v145, v147);
                  goto LABEL_198;
                case 9:
                case 10:
                  if ((v137 & 0x100) == 0)
                  {
                    XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v137);
                    if (v193) {
                      goto LABEL_114;
                    }
                  }
                  unsigned __int8 v194 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v17);
                  long long v195 = v1[1];
                  v292[0] = *v1;
                  v292[1] = v195;
                  uint64_t v293 = *((void *)v1 + 4);
                  XMLPlistScanner.PartialMapData.record(tagType:with:)(v194, v292);
                  goto LABEL_198;
                default:
                  if ((v137 & 0x100) != 0)
                  {
                    long long v202 = v1[1];
                    long long v273 = *v1;
                    long long v274 = v202;
                    uint64_t v275 = *((void *)v1 + 4);
                    goto LABEL_111;
                  }
                  XMLPlistScanner.scanPlist()();
                  if (v198) {
                    goto LABEL_114;
                  }
LABEL_198:
                  *((void *)v1 + 3) = v89;
                  _StringGuts.grow(_:)(77);
                  v207._countAndFlagsBits = 0xD000000000000027;
                  v207._object = (void *)0x80000001823AA350;
                  String.append(_:)(v207);
                  uint64_t v208 = *((void *)v1 + 2);
                  uint64_t v209 = *((void *)v1 + 4);
                  long long v276 = *v1;
                  uint64_t v277 = v208;
                  uint64_t v278 = v89;
                  uint64_t v279 = v209;
                  break;
              }
LABEL_166:
              BufferReader.lineNumber.getter();
              v183._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v183);
              swift_bridgeObjectRelease();
              v184._object = (void *)0x80000001823AA380;
              v184._countAndFlagsBits = 0xD000000000000024;
              String.append(_:)(v184);
LABEL_167:
              lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
              swift_allocError();
              *(void *)uint64_t v111 = 0;
              *(void *)(v111 + 8) = 0xE000000000000000;
              *(void *)(v111 + 16) = 0;
              *(void *)(v111 + 24) = 0;
              char v114 = 5;
LABEL_113:
              *(unsigned char *)(v111 + 32) = v114;
              swift_willThrow();
              goto LABEL_114;
            }
            Foundation::XMLPlistTag v49 = Foundation_XMLPlistTag_plist;
LABEL_90:
            XMLPlistScanner.checkForCloseTag(_:)(v49);
LABEL_91:
            if (v68) {
              goto LABEL_114;
            }
            break;
          case 9:
          case 10:
            if ((v58 & 0x100) == 0)
            {
              XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v58);
              if (v76) {
                goto LABEL_114;
              }
            }
            unsigned __int8 v77 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v17);
            long long v78 = v1[1];
            v371[0] = *v1;
            v371[1] = v78;
            uint64_t v372 = *((void *)v1 + 4);
            XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v371);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v79 = *(void *)(*((void *)v1 + 5) + 16);
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v79);
            uint64_t v80 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v79, v77);
            destructiveProjectEnumData for PredicateCodableError(v80, v81);
            goto LABEL_87;
          default:
            if ((v58 & 0x100) != 0)
            {
              long long v185 = v1[1];
              long long v266 = *v1;
              long long v267 = v185;
              uint64_t v268 = *((void *)v1 + 4);
              goto LABEL_111;
            }
            Swift::Bool v82 = XMLPlistScanner.scanAnyValue(for:)(Foundation_XMLPlistTag_plist);
            if (v83) {
              goto LABEL_114;
            }
            if (!v82)
            {
              long long v186 = v1[1];
              long long v356 = *v1;
              long long v357 = v186;
              uint64_t v358 = *((void *)v1 + 4);
              goto LABEL_111;
            }
            uint64_t v84 = *((void *)v1 + 3);
            Swift::Bool v85 = XMLPlistScanner.scanAnyValue(for:)(Foundation_XMLPlistTag_plist);
            if (v86) {
              goto LABEL_114;
            }
            if (v85)
            {
              *((void *)v1 + 3) = v84;
              _StringGuts.grow(_:)(77);
              v187._countAndFlagsBits = 0xD000000000000027;
              v187._object = (void *)0x80000001823AA350;
              DefaultStringInterpolation.appendLiteral(_:)(v187);
              uint64_t v188 = *((void *)v1 + 2);
              uint64_t v189 = *((void *)v1 + 4);
              long long v269 = *v1;
              uint64_t v270 = v188;
              uint64_t v271 = v84;
              uint64_t v272 = v189;
              BufferReader.lineNumber.getter();
              specialized DefaultStringInterpolation.appendInterpolation<A>(_:)();
              v190._object = (void *)0x80000001823AA380;
              v190._countAndFlagsBits = 0xD000000000000024;
              DefaultStringInterpolation.appendLiteral(_:)(v190);
              goto LABEL_167;
            }
            Foundation::XMLPlistTag v75 = Foundation_XMLPlistTag_plist;
LABEL_75:
            XMLPlistScanner.checkForCloseTag(_:)(v75);
LABEL_80:
            if (v87) {
              goto LABEL_114;
            }
            goto LABEL_87;
        }
        break;
    }
    uint64_t v92 = *((void *)v1 + 3);
    Swift::Bool v93 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
    if (v94) {
      goto LABEL_114;
    }
    if (v93)
    {
      LOBYTE(v123) = XMLPlistScanner.peekXMLElement()()._0;
      if (!v124)
      {
        Foundation::XMLPlistTag v17 = (char)v123;
        switch((char)v123)
        {
          case 1:
            if ((v123 & 0x100) != 0)
            {
              long long v176 = v1[1];
              v342[0] = *v1;
              v342[1] = v176;
              uint64_t v343 = *((void *)v1 + 4);
              long long v177 = v342;
              unsigned __int8 v178 = 8;
              goto LABEL_164;
            }
            XMLPlistScanner.scanArray()();
            if (!v171) {
              goto LABEL_165;
            }
            goto LABEL_114;
          case 2:
            if ((v123 & 0x100) != 0)
            {
              long long v179 = v1[1];
              v344[0] = *v1;
              v344[1] = v179;
              uint64_t v345 = *((void *)v1 + 4);
              long long v177 = v344;
              unsigned __int8 v178 = 9;
LABEL_164:
              XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(v178, v177);
              goto LABEL_165;
            }
            XMLPlistScanner.scanDict()();
            if (!v172) {
              goto LABEL_165;
            }
            goto LABEL_114;
          case 3:
          case 4:
            if ((v123 & 0x100) != 0)
            {
              long long v173 = v1[1];
              v346[0] = *v1;
              v346[1] = v173;
              uint64_t v347 = *((void *)v1 + 4);
              if (v123 == 3) {
                unsigned __int8 v128 = 13;
              }
              else {
                unsigned __int8 v128 = 12;
              }
              long long v133 = v346;
              uint64_t v129 = 0;
              uint64_t v131 = 0;
              goto LABEL_159;
            }
            XMLPlistScanner.scanString(asKey:)(v123 == 3);
            if (!v148)
            {
              Foundation::XMLPlistTag v149 = v17;
LABEL_136:
              XMLPlistScanner.checkForCloseTag(_:)(v149);
              if (!v150) {
                goto LABEL_165;
              }
            }
            goto LABEL_114;
          case 5:
          case 6:
          case 7:
          case 8:
            if ((v123 & 0x100) != 0)
            {
              long long v157 = v1[1];
              long long v348 = *v1;
              long long v349 = v157;
              uint64_t v350 = *((void *)v1 + 4);
              goto LABEL_108;
            }
            uint64_t v125 = XMLPlistScanner.scanThroughCloseTag(_:)(v123);
            uint64_t v127 = v126;
            unsigned __int8 v128 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v17);
            uint64_t v129 = v127 - v125;
            uint64_t v130 = *((void *)v1 + 1);
            uint64_t v131 = v125 - *(void *)v1;
            uint64_t v132 = *((void *)v1 + 4);
            v351[0] = *(void *)v1;
            v351[1] = v130;
            long long v352 = v1[1];
            uint64_t v353 = v132;
            long long v133 = v351;
LABEL_159:
            XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v128, v129, v131, v133);
            goto LABEL_165;
          case 9:
          case 10:
            if ((v123 & 0x100) == 0)
            {
              XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v123);
              if (v151) {
                goto LABEL_114;
              }
            }
            unsigned __int8 v152 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v17);
            long long v153 = v1[1];
            v354[0] = *v1;
            v354[1] = v153;
            uint64_t v355 = *((void *)v1 + 4);
            XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v354);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v154 = *(void *)(*((void *)v1 + 5) + 16);
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v154);
            uint64_t v155 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v154, v152);
            destructiveProjectEnumData for PredicateCodableError(v155, v156);
LABEL_165:
            *((void *)v1 + 3) = v92;
            _StringGuts.grow(_:)(77);
            v180._countAndFlagsBits = 0xD000000000000027;
            v180._object = (void *)0x80000001823AA350;
            String.append(_:)(v180);
            uint64_t v181 = *((void *)v1 + 2);
            uint64_t v182 = *((void *)v1 + 4);
            long long v321 = *v1;
            uint64_t v322 = v181;
            uint64_t v323 = v92;
            uint64_t v324 = v182;
            goto LABEL_166;
          default:
            if ((v123 & 0x100) != 0)
            {
              long long v175 = v1[1];
              long long v294 = *v1;
              long long v295 = v175;
              uint64_t v296 = *((void *)v1 + 4);
              goto LABEL_111;
            }
            Swift::Bool v158 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
            if (v159) {
              goto LABEL_114;
            }
            if (!v158)
            {
              long long v197 = v1[1];
              long long v339 = *v1;
              long long v340 = v197;
              uint64_t v341 = *((void *)v1 + 4);
              goto LABEL_111;
            }
            LOBYTE(v160) = XMLPlistScanner.peekXMLElement()()._0;
            if (v161) {
              goto LABEL_114;
            }
            Foundation::XMLPlistTag v17 = (char)v160;
            switch((char)v160)
            {
              case 1:
                if ((v160 & 0x100) == 0)
                {
                  XMLPlistScanner.scanArray()();
                  goto LABEL_212;
                }
                long long v218 = v1[1];
                v325[0] = *v1;
                v325[1] = v218;
                uint64_t v326 = *((void *)v1 + 4);
                uint64_t v219 = v325;
                unsigned __int8 v220 = 8;
                goto LABEL_222;
              case 2:
                if ((v160 & 0x100) == 0)
                {
                  XMLPlistScanner.scanDict()();
                  goto LABEL_212;
                }
                long long v221 = v1[1];
                v327[0] = *v1;
                v327[1] = v221;
                uint64_t v328 = *((void *)v1 + 4);
                uint64_t v219 = v327;
                unsigned __int8 v220 = 9;
LABEL_222:
                XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(v220, v219);
                goto LABEL_223;
              case 3:
              case 4:
                if ((v160 & 0x100) != 0)
                {
                  long long v216 = v1[1];
                  v329[0] = *v1;
                  v329[1] = v216;
                  uint64_t v330 = *((void *)v1 + 4);
                  if (v160 == 3) {
                    unsigned __int8 v165 = 13;
                  }
                  else {
                    unsigned __int8 v165 = 12;
                  }
                  uint64_t v170 = v329;
                  uint64_t v166 = 0;
                  uint64_t v168 = 0;
                  goto LABEL_218;
                }
                XMLPlistScanner.scanString(asKey:)(v160 == 3);
                if (v210) {
                  goto LABEL_114;
                }
                XMLPlistScanner.checkForCloseTag(_:)(v17);
                goto LABEL_212;
              case 5:
              case 6:
              case 7:
              case 8:
                if ((v160 & 0x100) != 0)
                {
                  long long v215 = v1[1];
                  long long v331 = *v1;
                  long long v332 = v215;
                  uint64_t v333 = *((void *)v1 + 4);
                  goto LABEL_108;
                }
                uint64_t v162 = XMLPlistScanner.scanThroughCloseTag(_:)(v160);
                uint64_t v164 = v163;
                unsigned __int8 v165 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v17);
                uint64_t v166 = v164 - v162;
                uint64_t v167 = *((void *)v1 + 1);
                uint64_t v168 = v162 - *(void *)v1;
                uint64_t v169 = *((void *)v1 + 4);
                v334[0] = *(void *)v1;
                v334[1] = v167;
                long long v335 = v1[1];
                uint64_t v336 = v169;
                uint64_t v170 = v334;
LABEL_218:
                XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v165, v166, v168, v170);
                goto LABEL_223;
              case 9:
              case 10:
                if ((v160 & 0x100) == 0)
                {
                  XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v160);
                  if (v212) {
                    goto LABEL_114;
                  }
                }
                unsigned __int8 v213 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v17);
                long long v214 = v1[1];
                v337[0] = *v1;
                v337[1] = v214;
                uint64_t v338 = *((void *)v1 + 4);
                XMLPlistScanner.PartialMapData.record(tagType:with:)(v213, v337);
                goto LABEL_223;
              default:
                if ((v160 & 0x100) != 0)
                {
                  long long v217 = v1[1];
                  long long v297 = *v1;
                  long long v298 = v217;
                  uint64_t v299 = *((void *)v1 + 4);
                  goto LABEL_111;
                }
                XMLPlistScanner.scanPlist()();
LABEL_212:
                if (v211) {
                  goto LABEL_114;
                }
LABEL_223:
                uint64_t v222 = *((void *)v1 + 3);
                Swift::Bool v223 = XMLPlistScanner.scanUpToNextValue(for:)(Foundation_XMLPlistTag_plist);
                if (v224) {
                  goto LABEL_114;
                }
                if (!v223)
                {
                  Foundation::XMLPlistTag v149 = Foundation_XMLPlistTag_plist;
                  goto LABEL_136;
                }
                LOBYTE(v225) = XMLPlistScanner.peekXMLElement()()._0;
                if (v226) {
                  goto LABEL_114;
                }
                Foundation::XMLPlistTag v17 = (char)v225;
                switch((char)v225)
                {
                  case 1:
                    if ((v225 & 0x100) != 0)
                    {
                      long long v247 = v1[1];
                      v307[0] = *v1;
                      v307[1] = v247;
                      uint64_t v308 = *((void *)v1 + 4);
                      uint64_t v248 = v307;
                      unsigned __int8 v249 = 8;
                      goto LABEL_255;
                    }
                    XMLPlistScanner.scanArray()();
                    if (!v243) {
                      goto LABEL_256;
                    }
                    goto LABEL_114;
                  case 2:
                    if ((v225 & 0x100) != 0)
                    {
                      long long v250 = v1[1];
                      v309[0] = *v1;
                      v309[1] = v250;
                      uint64_t v310 = *((void *)v1 + 4);
                      uint64_t v248 = v309;
                      unsigned __int8 v249 = 9;
LABEL_255:
                      XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(v249, v248);
                      goto LABEL_256;
                    }
                    XMLPlistScanner.scanDict()();
                    if (!v244) {
                      goto LABEL_256;
                    }
                    goto LABEL_114;
                  case 3:
                  case 4:
                    if ((v225 & 0x100) != 0)
                    {
                      long long v245 = v1[1];
                      v311[0] = *v1;
                      v311[1] = v245;
                      uint64_t v312 = *((void *)v1 + 4);
                      if (v225 == 3) {
                        unsigned __int8 v230 = 13;
                      }
                      else {
                        unsigned __int8 v230 = 12;
                      }
                      uint64_t v235 = v311;
                      uint64_t v231 = 0;
                      uint64_t v233 = 0;
                      goto LABEL_251;
                    }
                    XMLPlistScanner.scanString(asKey:)(v225 == 3);
                    if (!v236)
                    {
                      XMLPlistScanner.checkForCloseTag(_:)(v17);
                      if (!v237) {
                        goto LABEL_256;
                      }
                    }
                    goto LABEL_114;
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                    if ((v225 & 0x100) != 0)
                    {
                      long long v241 = v1[1];
                      long long v313 = *v1;
                      long long v314 = v241;
                      uint64_t v315 = *((void *)v1 + 4);
                      goto LABEL_108;
                    }
                    uint64_t v227 = XMLPlistScanner.scanThroughCloseTag(_:)(v225);
                    uint64_t v229 = v228;
                    unsigned __int8 v230 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v17);
                    uint64_t v231 = v229 - v227;
                    uint64_t v232 = *((void *)v1 + 1);
                    uint64_t v233 = v227 - *(void *)v1;
                    uint64_t v234 = *((void *)v1 + 4);
                    v316[0] = *(void *)v1;
                    v316[1] = v232;
                    long long v317 = v1[1];
                    uint64_t v318 = v234;
                    uint64_t v235 = v316;
LABEL_251:
                    XMLPlistScanner.PartialMapData.record(tagType:count:dataOffset:with:)(v230, v231, v233, v235);
                    goto LABEL_256;
                  case 9:
                  case 10:
                    if ((v225 & 0x100) == 0)
                    {
                      XMLPlistScanner.checkForCloseTag(_:)((Foundation::XMLPlistTag)v225);
                      if (v238) {
                        goto LABEL_114;
                      }
                    }
                    unsigned __int8 v239 = specialized XMLPlistMap.TypeDescriptor.init(_:)(v17);
                    long long v240 = v1[1];
                    v319[0] = *v1;
                    v319[1] = v240;
                    uint64_t v320 = *((void *)v1 + 4);
                    XMLPlistScanner.PartialMapData.record(tagType:with:)(v239, v319);
                    goto LABEL_256;
                  default:
                    if ((v225 & 0x100) != 0)
                    {
                      long long v246 = v1[1];
                      long long v300 = *v1;
                      long long v301 = v246;
                      uint64_t v302 = *((void *)v1 + 4);
                      goto LABEL_111;
                    }
                    XMLPlistScanner.scanPlist()();
                    if (v242) {
                      goto LABEL_114;
                    }
LABEL_256:
                    *((void *)v1 + 3) = v222;
                    _StringGuts.grow(_:)(77);
                    v251._countAndFlagsBits = 0xD000000000000027;
                    v251._object = (void *)0x80000001823AA350;
                    String.append(_:)(v251);
                    uint64_t v252 = *((void *)v1 + 2);
                    uint64_t v253 = *((void *)v1 + 4);
                    long long v303 = *v1;
                    uint64_t v304 = v252;
                    uint64_t v305 = v222;
                    uint64_t v306 = v253;
                    break;
                }
                break;
            }
            break;
        }
        goto LABEL_166;
      }
LABEL_114:
      long long v115 = v1[1];
      v258[0] = *v1;
      v258[1] = v115;
      uint64_t v259 = *((void *)v1 + 4);
      uint64_t v102 = v258;
LABEL_115:
      XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v102);
      uint64_t v116 = (void *)*((void *)v1 + 5);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *((void *)v1 + 5) = v116;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v116[2] + 1, 1, v116);
        *unint64_t v4 = v116;
      }
      uint64_t v118 = v116[2];
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v118);
      uint64_t v119 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v118, 10);
      destructiveProjectEnumData for PredicateCodableError(v119, v120);
      long long v104 = (void *)*v4;
      uint64_t v121 = specialized Array._getCount()(*v4);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v104 = specialized _ArrayBuffer._consumeAndCreateNew()(v104);
      }
      uint64_t v122 = &v104[v409];
      v122[4] = v121;
      v122[5] = v5;
      goto LABEL_120;
    }
    Foundation::XMLPlistTag v27 = Foundation_XMLPlistTag_plist;
LABEL_95:
    XMLPlistScanner.checkForCloseTag(_:)(v27);
    if (v95) {
      goto LABEL_114;
    }
LABEL_3:
    if (__OFADD__(v5++, 1))
    {
      __break(1u);
LABEL_127:
      long long v135 = v1[1];
      long long v263 = *v1;
      long long v264 = v135;
      uint64_t v265 = *((void *)v1 + 4);
LABEL_111:
      uint64_t v110 = BufferReader.lineNumber.getter();
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(void *)uint64_t v111 = 0;
LABEL_112:
      *(void *)(v111 + 8) = v110;
      *(void *)(v111 + 16) = 0;
      *(void *)(v111 + 24) = 0;
      char v114 = 2;
      goto LABEL_113;
    }
  }
  XMLPlistScanner.checkForCloseTag(_:)(Foundation_XMLPlistTag_array);
  if (v100)
  {
    long long v101 = v1[1];
    v256[0] = *v1;
    v256[1] = v101;
    uint64_t v257 = *((void *)v1 + 4);
    uint64_t v102 = v256;
    goto LABEL_115;
  }
  long long v103 = v1[1];
  v254[0] = *v1;
  v254[1] = v103;
  uint64_t v255 = *((void *)v1 + 4);
  XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(v254);
  long long v104 = (void *)*((void *)v1 + 5);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v104[2] + 1, 1, v104);
  }
  unint64_t v106 = v104[2];
  unint64_t v105 = v104[3];
  unint64_t v107 = v106 + 1;
  if (v106 >= v105 >> 1) {
    long long v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v105 > 1), v106 + 1, 1, v104);
  }
  v104[2] = v107;
  v104[v106 + 4] = 10;
  long long v108 = &v104[v409 + 4];
  *long long v108 = v107;
  v108[1] = v5;
LABEL_120:
  *unint64_t v4 = v104;
}

void *XMLPlistScanner.PartialMapData.recordEmptyCollection(tagType:with:)(unsigned __int8 a1, void *a2)
{
  XMLPlistScanner.PartialMapData.resizeIfNecessary(with:)(a2);
  unsigned __int8 v6 = *(void **)v2;
  int64_t v7 = *(void *)(*(void *)v2 + 16);
  int64_t v8 = v7 + 4;
  if (__OFADD__(v7, 4))
  {
    __break(1u);
LABEL_17:
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v7, 1, v6);
    unsigned __int8 v6 = result;
    unint64_t v5 = result[3];
    unint64_t v10 = v5 >> 1;
    goto LABEL_9;
  }
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || (unint64_t v5 = v6[3], v10 = v5 >> 1, (uint64_t)(v5 >> 1) < v8))
  {
    if (v7 <= v8) {
      int64_t v11 = v7 + 4;
    }
    else {
      int64_t v11 = v7;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v6);
    unsigned __int8 v6 = result;
    unint64_t v5 = result[3];
    unint64_t v10 = v5 >> 1;
  }
  unint64_t v3 = v6[2];
  int64_t v7 = v3 + 1;
  if (v10 <= v3) {
    goto LABEL_17;
  }
LABEL_9:
  v6[2] = v7;
  v6[v3 + 4] = a1;
  if ((uint64_t)v10 < (uint64_t)(v3 + 2))
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v3 + 2, 1, v6);
    unsigned __int8 v6 = result;
  }
  v6[2] = v3 + 2;
  v6[v7 + 4] = v8;
  unint64_t v13 = v6[2];
  unint64_t v12 = v6[3];
  int64_t v14 = v12 >> 1;
  unint64_t v15 = v13 + 1;
  if (v12 >> 1 <= v13)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v6);
    unsigned __int8 v6 = result;
    unint64_t v12 = result[3];
    int64_t v14 = v12 >> 1;
  }
  v6[2] = v15;
  v6[v13 + 4] = 0;
  int64_t v16 = v13 + 2;
  if (v14 < v16)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v16, 1, v6);
    unsigned __int8 v6 = result;
  }
  v6[2] = v16;
  v6[v15 + 4] = 10;
  *(void *)uint64_t v2 = v6;
  return result;
}

uint64_t *specialized static XMLPlistScanner.parseEntityReference(reader:string:)(uint64_t *result, uint64_t *a2)
{
  unint64_t v4 = (unsigned char *)result[3];
  unint64_t v3 = result[4];
  unint64_t v5 = v4 + 1;
  result[3] = (uint64_t)(v4 + 1);
  unint64_t v6 = v3 - (void)(v4 + 1);
  if ((uint64_t)v6 < 1)
  {
LABEL_15:
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(_OWORD *)uint64_t v15 = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(unsigned char *)(v15 + 32) = 0;
    return (uint64_t *)swift_willThrow();
  }
  uint64_t v8 = *result;
  uint64_t v7 = result[1];
  uint64_t v9 = v4 + 2;
  if (v3 < (unint64_t)(v4 + 2))
  {
LABEL_3:
    uint64_t v10 = BufferReader.lineNumber.getter();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v11 = v10;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0;
    *(void *)(v11 + 24) = 0;
    *(unsigned char *)(v11 + 32) = 4;
    return (uint64_t *)swift_willThrow();
  }
  if ((uint64_t)&v5[-v8] < 0)
  {
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    return result;
  }
  unint64_t v12 = v8 + v7;
  if ((uint64_t)(v8 + v7 - v3) < 0) {
    goto LABEL_41;
  }
  switch(*v5)
  {
    case 'a':
      if (v6 < 4) {
        goto LABEL_15;
      }
      if (v12 < (unint64_t)v9) {
        goto LABEL_44;
      }
      if ((uint64_t)v9 - v8 < 0) {
        goto LABEL_45;
      }
      if ((uint64_t)(v12 - (void)v9) < 0) {
        goto LABEL_46;
      }
      if (*(_WORD *)v9 == 28781 && v4[4] == 59)
      {
        int64_t v14 = v4 + 5;
      }
      else
      {
        if (v6 < 5 || *v9 != 997420912) {
          goto LABEL_3;
        }
        int64_t v14 = v4 + 6;
      }
LABEL_37:
      result[3] = (uint64_t)v14;
LABEL_38:
      if (a2[1])
      {
        uint64_t v17 = *a2;
        uint64_t v18 = a2[1];
        uint64_t result = (uint64_t *)String.UnicodeScalarView.append(_:)();
        *a2 = v17;
        a2[1] = v18;
      }
      break;
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
      goto LABEL_3;
    case 'g':
    case 'l':
      int64_t v14 = v4 + 4;
      if (v3 < (unint64_t)(v4 + 4) || v4[2] != 116 || v4[3] != 59) {
        goto LABEL_3;
      }
      goto LABEL_37;
    case 'q':
      if (v6 < 5) {
        goto LABEL_3;
      }
      if (v12 < (unint64_t)v9) {
        goto LABEL_42;
      }
      if ((uint64_t)v9 - v8 < 0) {
        goto LABEL_43;
      }
      if ((uint64_t)(v12 - (void)v9) < 0) {
        goto LABEL_47;
      }
      if (*v9 != 997486453) {
        goto LABEL_3;
      }
      int64_t v14 = v4 + 6;
      goto LABEL_37;
    default:
      if (*v5 != 35) {
        goto LABEL_3;
      }
      result[3] = (uint64_t)v9;
      uint64_t result = (uint64_t *)specialized static XMLPlistScanner.parseNumericEntityReference(reader:string:)(result);
      if (!v2) {
        goto LABEL_38;
      }
      return result;
  }
  return result;
}

Swift::Void __swiftcall _BPlistEncodingFormat.Writer.append(_:isASCII:)(Swift::String _, Swift::Bool isASCII)
{
  if (isASCII)
  {
    Swift::String v10 = _;
    swift_bridgeObjectRetain();
    specialized String.withUTF8<A>(_:)(&v10._countAndFlagsBits);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10._countAndFlagsBits = 2415919360;
    unint64_t v2 = String.data(using:allowLossyConversion:)(&v10._countAndFlagsBits, 0, _._countAndFlagsBits, (unint64_t)_._object);
    if (v3 >> 60 != 15)
    {
      unint64_t v4 = v3;
      uint64_t v5 = v2;
      uint64_t v6 = 0;
      switch(v3 >> 62)
      {
        case 1uLL:
          LODWORD(v6) = HIDWORD(v2) - v2;
          if (!__OFSUB__(HIDWORD(v2), v2))
          {
            uint64_t v6 = (int)v6;
            goto LABEL_11;
          }
          __break(1u);
          goto LABEL_15;
        case 2uLL:
          uint64_t v8 = *(void *)(v2 + 16);
          uint64_t v7 = *(void *)(v2 + 24);
          BOOL v9 = __OFSUB__(v7, v8);
          uint64_t v6 = v7 - v8;
          if (!v9) {
            goto LABEL_11;
          }
LABEL_15:
          __break(1u);
          break;
        case 3uLL:
          goto LABEL_11;
        default:
          uint64_t v6 = BYTE6(v3);
LABEL_11:
          _BPlistEncodingFormat.Writer.append(_:count:)(7, v6 / 2);
          specialized Data._Representation.withUnsafeBytes<A>(_:)(v5, v4);
          outlined consume of Data?(v5, v4);
          return;
      }
    }
    __break(1u);
  }
}

uint64_t _BPlistEncodingFormat.Writer.serializePlist(_:)(uint64_t a1)
{
  unint64_t v2 = v1;
  v38[1] = *MEMORY[0x1E4F143B8];
  v38[0] = 0;
  _BPlistEncodingFormat.Writer.flattenPlist(_:_:)(a1, v38);
  *((unsigned char *)v1 + 8) = 8 - (__clz(v38[0]) >> 3);
  _BPlistEncodingFormat.Writer.write(_:)("bplist00", 8);
  _BPlistEncodingFormat.Writer.append(_:)(a1);
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[4];
  unint64_t v6 = v1[6];
  uint64_t v7 = 0;
  switch(v6 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(v4) - v4;
      if (__OFSUB__(HIDWORD(v4), v4)) {
        goto LABEL_39;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      unint64_t v12 = v7 + v5;
      if (__OFADD__(v7, v5)) {
        goto LABEL_38;
      }
      if ((v12 & 0x8000000000000000) != 0)
      {
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        unint64_t v13 = __clz(v12) >> 3;
        uint64_t v14 = (8 - v13);
        uint64_t v15 = *v1;
        uint64_t v16 = *(void *)(*v1 + 16);
        if (v16)
        {
          unint64_t v34 = v7 + v5;
          __src = (char *)v37 - v14;
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v16; ++i)
          {
            unint64_t v36 = bswap64(*(void *)(v15 + 8 * i + 32));
            if (v13 != 8)
            {
              uint64_t v18 = v1[4];
              uint64_t v19 = 0x2000 - v18;
              if (__OFSUB__(0x2000, v18))
              {
                __break(1u);
LABEL_37:
                __break(1u);
LABEL_38:
                __break(1u);
LABEL_39:
                __break(1u);
LABEL_40:
                __break(1u);
LABEL_41:
                __break(1u);
              }
              if (v19 >= v14) {
                uint64_t v20 = (8 - v13);
              }
              else {
                uint64_t v20 = 0x2000 - v18;
              }
              if (v19 >= v14)
              {
                uint64_t v23 = v1[2];
                if (!v23) {
                  goto LABEL_41;
                }
                memmove((void *)(v23 + v18), __src, (8 - v13));
                if (__OFADD__(v18, v20)) {
                  goto LABEL_37;
                }
                v1[4] = v18 + v20;
              }
              else
              {
                if (v18 > 0)
                {
                  unsigned __int8 v21 = (unsigned char *)v1[2];
                  if (v21) {
                    uint64_t v22 = &v21[v18];
                  }
                  else {
                    uint64_t v22 = 0;
                  }
                  Data._Representation.append(contentsOf:)(v21, v22);
                  v1[4] = 0;
                }
                Data._Representation.append(contentsOf:)(__src, v37);
              }
            }
          }
          swift_bridgeObjectRelease();
          unint64_t v24 = *(void *)(*v1 + 16);
          unint64_t v12 = v34;
        }
        else
        {
          unint64_t v24 = 0;
        }
        char v25 = *((unsigned char *)v1 + 8);
        WORD2(v36) = 0;
        LODWORD(v36) = 0;
        BYTE6(v36) = 8 - v13;
        HIBYTE(v36) = v25;
        v37[0] = bswap64(v24);
        v37[1] = 0;
        v37[2] = bswap64(v12);
        _BPlistEncodingFormat.Writer.write(_:)((char *)&v36, 32);
        uint64_t v26 = v1[4];
        if (v26 >= 1)
        {
          Foundation::XMLPlistTag v27 = (unsigned char *)v1[2];
          uint64_t v28 = &v27[v26];
          if (v27) {
            uint64_t v29 = v28;
          }
          else {
            uint64_t v29 = 0;
          }
          Data._Representation.append(contentsOf:)(v27, v29);
          v1[4] = 0;
        }
        uint64_t v30 = v1[5];
        unint64_t v31 = v2[6];
        uint64_t v32 = v2[2];
        outlined copy of Data._Representation(v30, v31);
        if (v32) {
          MEMORY[0x185309510](v32, -1, -1);
        }
        return v30;
      }
      return result;
    case 2uLL:
      uint64_t v10 = v4 + 16;
      uint64_t v9 = *(void *)(v4 + 16);
      uint64_t v8 = *(void *)(v10 + 8);
      BOOL v11 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_40;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v7 = BYTE6(v6);
      goto LABEL_6;
  }
}

uint64_t _BPlistEncodingFormat.Writer.flattenPlist(_:_:)(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *(void *)(result + 16);
  unint64_t v4 = *(void *)(result + 24);
  uint64_t v5 = *(void *)(result + 32);
  unsigned int v6 = *(unsigned __int8 *)(result + 40);
  if (v6 >> 4 == 6)
  {
    uint64_t v13 = *a2;
    *(void *)(result + 48) = *a2;
    BOOL v8 = __OFADD__(v13, 1);
    uint64_t v14 = v13 + 1;
    if (v8)
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    *a2 = v14;
    uint64_t v15 = *(void *)(v4 + 16);
    if (v15)
    {
      swift_retain();
      swift_retain();
      outlined copy of _BPlistEncodingFormat.Reference.Backing(v3, v4, v5, v6);
      swift_retain();
      swift_retain();
      uint64_t result = swift_retain();
      unint64_t v16 = 0;
      do
      {
        if (v16 >= *(void *)(v4 + 16))
        {
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        ++v16;
        uint64_t v17 = swift_retain();
        _BPlistEncodingFormat.Writer.flattenPlist(_:_:)(v17, a2);
        uint64_t result = swift_release();
      }
      while (v15 != v16);
      swift_release();
      swift_release();
      uint64_t v18 = *(void *)(v5 + 16);
      if (v18) {
        goto LABEL_23;
      }
    }
    else
    {
      outlined copy of _BPlistEncodingFormat.Reference.Backing(v3, v4, v5, v6);
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v18 = *(void *)(v5 + 16);
      if (v18)
      {
LABEL_23:
        swift_retain();
        swift_retain();
        uint64_t result = swift_retain();
        unint64_t v21 = 0;
        while (v21 < *(void *)(v5 + 16))
        {
          ++v21;
          uint64_t v22 = swift_retain();
          _BPlistEncodingFormat.Writer.flattenPlist(_:_:)(v22, a2);
          uint64_t result = swift_release();
          if (v18 == v21)
          {
            swift_release();
            swift_release();
            swift_release();
            goto LABEL_27;
          }
        }
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
LABEL_27:
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v3, v4, v5, v6);
    swift_release();
    swift_release();
    return swift_release();
  }
  if (v6 >> 4 != 5)
  {
    if (*(void *)(result + 48) != -1) {
      return result;
    }
    uint64_t v19 = *a2;
    *(void *)(result + 48) = *a2;
    BOOL v8 = __OFADD__(v19, 1);
    uint64_t v20 = v19 + 1;
    if (!v8)
    {
      *a2 = v20;
      return result;
    }
LABEL_35:
    __break(1u);
    return result;
  }
  uint64_t v7 = *a2;
  *(void *)(result + 48) = *a2;
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    goto LABEL_33;
  }
  *a2 = v9;
  uint64_t v10 = *(void *)(v3 + 16);
  if (v10)
  {
    uint64_t result = swift_retain();
    unint64_t v11 = 0;
    do
    {
      if (v11 >= *(void *)(v3 + 16))
      {
        __break(1u);
        goto LABEL_31;
      }
      ++v11;
      uint64_t v12 = swift_retain();
      _BPlistEncodingFormat.Writer.flattenPlist(_:_:)(v12, a2);
      uint64_t result = swift_release();
    }
    while (v10 != v11);
    return outlined consume of _BPlistEncodingFormat.Reference.Backing(v3, v4, v5, v6);
  }
  return result;
}

void _BPlistEncodingFormat.Writer.append(_:)(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = a1;
  uint64_t v199 = *MEMORY[0x1E4F143B8];
  Swift::Int64 v4 = *(void *)(a1 + 16);
  _BPlistEncodingFormat.Writer.append(_:count:)(8, v4);
  Swift::Int64 v194 = v4;
  if (v4)
  {
    uint64_t v192 = v3 + 32;
    unint64_t v5 = *(void *)(*(void *)(v3 + 32) + 48);
    if ((v5 & 0x8000000000000000) != 0 || HIDWORD(v5)) {
      goto LABEL_383;
    }
    swift_retain();
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *((unsigned __int8 *)v2 + 8);
      LODWORD(__src[0]) = bswap32(v5);
      _BPlistEncodingFormat.Writer.write(_:)((char *)__src - v7 + 4, v7);
      if (v194 - 1 == v6) {
        break;
      }
      unint64_t v5 = *(void *)(*(void *)(v3 + 8 * v6 + 40) + 48);
      if ((v5 & 0x8000000000000000) == 0)
      {
        ++v6;
        if (!HIDWORD(v5)) {
          continue;
        }
      }
      while (1)
      {
LABEL_384:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_383:
        swift_retain();
      }
    }
    swift_release();
    swift_retain();
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      uint64_t v11 = *(void *)(v192 + 8 * v8);
      uint64_t v12 = (void *)*v2;
      if (*(void *)(v11 + 48) == *(void *)(*v2 + 16))
      {
        uint64_t v14 = v2[4];
        uint64_t v13 = v2[5];
        unint64_t v15 = v2[6];
        uint64_t v16 = 0;
        switch(v15 >> 62)
        {
          case 1uLL:
            LODWORD(v16) = HIDWORD(v13) - v13;
            if (__OFSUB__(HIDWORD(v13), v13)) {
              goto LABEL_337;
            }
            uint64_t v16 = (int)v16;
LABEL_22:
            uint64_t v21 = v16 + v14;
            if (__OFADD__(v16, v14)) {
              goto LABEL_333;
            }
            uint64_t v191 = v8;
            swift_retain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
            }
            unint64_t v23 = v12[2];
            unint64_t v22 = v12[3];
            if (v23 >= v22 >> 1) {
              uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v12);
            }
            break;
          case 2uLL:
            uint64_t v19 = v13 + 16;
            uint64_t v18 = *(void *)(v13 + 16);
            uint64_t v17 = *(void *)(v19 + 8);
            BOOL v20 = __OFSUB__(v17, v18);
            uint64_t v16 = v17 - v18;
            if (!v20) {
              goto LABEL_22;
            }
            goto LABEL_336;
          case 3uLL:
            goto LABEL_22;
          default:
            uint64_t v16 = BYTE6(v15);
            goto LABEL_22;
        }
        v12[2] = v23 + 1;
        v12[v23 + 4] = v21;
        *unint64_t v2 = v12;
        unint64_t v24 = *(void *)(v11 + 16);
        unint64_t v197 = *(void *)(v11 + 24);
        uint64_t v25 = *(void *)(v11 + 32);
        unsigned int v26 = *(unsigned __int8 *)(v11 + 40);
        uint64_t v196 = v25;
        switch(v26 >> 4)
        {
          case 1u:
            if (v14 == 0x2000)
            {
              unint64_t v55 = *(void *)(v11 + 16);
              Swift::Bool v56 = (unsigned char *)v2[2];
              if (v56) {
                uint64_t v57 = v56 + 0x2000;
              }
              else {
                uint64_t v57 = 0;
              }
              Data._Representation.append(contentsOf:)(v56, v57);
              unint64_t v24 = v55;
              uint64_t v14 = 0;
            }
            *(unsigned char *)(v2[2] + v14) = 20;
            if (__OFADD__(v14, 1)) {
              goto LABEL_343;
            }
            v2[4] = v14 + 1;
            *(void *)&__src[0] = 0;
            unint64_t v58 = v24;
            _BPlistEncodingFormat.Writer.write(_:)((char *)__src, 8);
            *(void *)&__src[0] = bswap64(v58);
            uint64_t v10 = 8;
            goto LABEL_12;
          case 2u:
            if (v24 <= 0xFF)
            {
              if (v14 == 0x2000)
              {
                char v139 = *(void *)(v11 + 16);
                uint64_t v140 = (unsigned char *)v2[2];
                if (v140) {
                  uint64_t v141 = v140 + 0x2000;
                }
                else {
                  uint64_t v141 = 0;
                }
                Data._Representation.append(contentsOf:)(v140, v141);
                LOBYTE(v24) = v139;
                uint64_t v14 = 0;
              }
              *(unsigned char *)(v2[2] + v14) = 16;
              if (__OFADD__(v14, 1)) {
                goto LABEL_353;
              }
              v2[4] = v14 + 1;
              LOBYTE(__src[0]) = v24;
              uint64_t v10 = 1;
            }
            else if (v24 >> 16)
            {
              if (HIDWORD(v24))
              {
                if (v14 == 0x2000)
                {
                  unint64_t v42 = *(void *)(v11 + 16);
                  long long v43 = (unsigned char *)v2[2];
                  if (v43) {
                    long long v44 = v43 + 0x2000;
                  }
                  else {
                    long long v44 = 0;
                  }
                  Data._Representation.append(contentsOf:)(v43, v44);
                  unint64_t v24 = v42;
                  uint64_t v14 = 0;
                }
                *(unsigned char *)(v2[2] + v14) = 19;
                if (__OFADD__(v14, 1)) {
                  goto LABEL_366;
                }
                v2[4] = v14 + 1;
                *(void *)&__src[0] = bswap64(v24);
                uint64_t v10 = 8;
              }
              else
              {
                if (v14 == 0x2000)
                {
                  int v170 = *(void *)(v11 + 16);
                  uint64_t v171 = (unsigned char *)v2[2];
                  if (v171) {
                    uint64_t v172 = v171 + 0x2000;
                  }
                  else {
                    uint64_t v172 = 0;
                  }
                  Data._Representation.append(contentsOf:)(v171, v172);
                  LODWORD(v24) = v170;
                  uint64_t v14 = 0;
                }
                *(unsigned char *)(v2[2] + v14) = 18;
                if (__OFADD__(v14, 1)) {
                  goto LABEL_369;
                }
                v2[4] = v14 + 1;
                LODWORD(__src[0]) = bswap32(v24);
                uint64_t v10 = 4;
              }
            }
            else
            {
              if (v14 == 0x2000)
              {
                int v150 = *(void *)(v11 + 16);
                uint64_t v151 = (unsigned char *)v2[2];
                if (v151) {
                  unsigned __int8 v152 = v151 + 0x2000;
                }
                else {
                  unsigned __int8 v152 = 0;
                }
                Data._Representation.append(contentsOf:)(v151, v152);
                LODWORD(v24) = v150;
                uint64_t v14 = 0;
              }
              *(unsigned char *)(v2[2] + v14) = 17;
              if (__OFADD__(v14, 1)) {
                goto LABEL_359;
              }
              v2[4] = v14 + 1;
              LOWORD(__src[0]) = bswap32(v24) >> 16;
              uint64_t v10 = 2;
            }
LABEL_12:
            _BPlistEncodingFormat.Writer.write(_:)((char *)__src, v10);
            goto LABEL_13;
          case 3u:
            if (v14 == 0x2000)
            {
              unint64_t v45 = *(void *)(v11 + 16);
              unsigned __int8 v46 = (unsigned char *)v2[2];
              if (v46) {
                long long v47 = v46 + 0x2000;
              }
              else {
                long long v47 = 0;
              }
              Data._Representation.append(contentsOf:)(v46, v47);
              unint64_t v24 = v45;
              uint64_t v14 = 0;
            }
            *(unsigned char *)(v2[2] + v14) = 35;
            uint64_t v48 = v14 + 1;
            if (__OFADD__(v14, 1)) {
              goto LABEL_342;
            }
            v2[4] = v48;
            *(void *)&__src[0] = bswap64(v24);
            if (__OFSUB__(0x2000, v48)) {
              goto LABEL_347;
            }
            if (0x1FFF - v14 < 8) {
              goto LABEL_86;
            }
            if (!v2[2]) {
              goto LABEL_379;
            }
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t v49 = v14 + 9;
            if (!__OFADD__(v48, 8)) {
              goto LABEL_258;
            }
            goto LABEL_356;
          case 4u:
            if (v14 == 0x2000)
            {
              int v33 = *(void *)(v11 + 16);
              unint64_t v34 = (unsigned char *)v2[2];
              if (v34) {
                uint64_t v35 = v34 + 0x2000;
              }
              else {
                uint64_t v35 = 0;
              }
              Data._Representation.append(contentsOf:)(v34, v35);
              LODWORD(v24) = v33;
              uint64_t v14 = 0;
            }
            *(unsigned char *)(v2[2] + v14) = 34;
            uint64_t v36 = v14 + 1;
            if (__OFADD__(v14, 1)) {
              goto LABEL_344;
            }
            v2[4] = v36;
            LODWORD(__src[0]) = bswap32(v24);
            if (__OFSUB__(0x2000, v36)) {
              goto LABEL_348;
            }
            if (0x1FFF - v14 < 4)
            {
              if (v36 > 0)
              {
                unsigned __int8 v37 = (unsigned char *)v2[2];
                if (v37) {
                  uint64_t v38 = &v37[v36];
                }
                else {
                  uint64_t v38 = 0;
                }
                Data._Representation.append(contentsOf:)(v37, v38);
                v2[4] = 0;
              }
              Data._Representation.append(contentsOf:)(__src, (unsigned char *)__src + 4);
              goto LABEL_13;
            }
            if (!v2[2]) {
              goto LABEL_378;
            }
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t v49 = v14 + 5;
            if (__OFADD__(v36, 4)) {
              goto LABEL_355;
            }
            goto LABEL_258;
          case 5u:
            uint64_t v59 = *(void *)(v11 + 16);
            uint64_t v60 = swift_retain();
            _BPlistEncodingFormat.Writer.append(_:)(v60);
LABEL_100:
            uint64_t v61 = v59;
            goto LABEL_323;
          case 6u:
            Swift::Int64 v62 = *(void *)(v25 + 16);
            swift_retain();
            unint64_t v63 = v197;
            swift_retain();
            swift_retain();
            Swift::Int64 v195 = v62;
            _BPlistEncodingFormat.Writer.append(_:count:)(9, v62);
            uint64_t v193 = *(void *)(v197 + 16);
            if (!v193) {
              goto LABEL_113;
            }
            unint64_t v64 = *(void *)(*(void *)(v197 + 32) + 48);
            if ((v64 & 0x8000000000000000) != 0) {
              goto LABEL_381;
            }
            swift_retain();
            swift_retain();
            if (HIDWORD(v64)) {
              goto LABEL_384;
            }
            uint64_t v65 = 0;
            while (2)
            {
              uint64_t v66 = *((unsigned __int8 *)v2 + 8);
              LODWORD(__src[0]) = bswap32(v64);
              _BPlistEncodingFormat.Writer.write(_:)((char *)__src - v66 + 4, v66);
              if (v193 - 1 != v65)
              {
                if ((unint64_t)(v65 + 1) < *(void *)(v197 + 16))
                {
                  unint64_t v64 = *(void *)(*(void *)(v197 + 8 * v65 + 40) + 48);
                  if ((v64 & 0x8000000000000000) != 0) {
                    goto LABEL_384;
                  }
                  ++v65;
                  if (HIDWORD(v64)) {
                    goto LABEL_384;
                  }
                  continue;
                }
                __break(1u);
LABEL_330:
                __break(1u);
LABEL_331:
                __break(1u);
LABEL_332:
                __break(1u);
LABEL_333:
                __break(1u);
LABEL_334:
                __break(1u);
LABEL_335:
                __break(1u);
LABEL_336:
                __break(1u);
LABEL_337:
                __break(1u);
LABEL_338:
                __break(1u);
LABEL_339:
                __break(1u);
LABEL_340:
                __break(1u);
LABEL_341:
                __break(1u);
LABEL_342:
                __break(1u);
LABEL_343:
                __break(1u);
LABEL_344:
                __break(1u);
LABEL_345:
                __break(1u);
LABEL_346:
                __break(1u);
LABEL_347:
                __break(1u);
LABEL_348:
                __break(1u);
LABEL_349:
                __break(1u);
LABEL_350:
                __break(1u);
LABEL_351:
                __break(1u);
LABEL_352:
                __break(1u);
LABEL_353:
                __break(1u);
LABEL_354:
                __break(1u);
LABEL_355:
                __break(1u);
LABEL_356:
                __break(1u);
LABEL_357:
                __break(1u);
LABEL_358:
                __break(1u);
LABEL_359:
                __break(1u);
LABEL_360:
                __break(1u);
LABEL_361:
                __break(1u);
LABEL_362:
                __break(1u);
LABEL_363:
                __break(1u);
LABEL_364:
                __break(1u);
LABEL_365:
                __break(1u);
LABEL_366:
                __break(1u);
LABEL_367:
                __break(1u);
LABEL_368:
                __break(1u);
LABEL_369:
                __break(1u);
LABEL_370:
                __break(1u);
LABEL_371:
                __break(1u);
LABEL_372:
                __break(1u);
LABEL_373:
                __break(1u);
LABEL_374:
                __break(1u);
LABEL_375:
                __break(1u);
              }
              break;
            }
            swift_release();
            swift_release();
LABEL_113:
            if (v195)
            {
              if (!*(void *)(v25 + 16)) {
                goto LABEL_351;
              }
              unint64_t v69 = *(void *)(*(void *)(v25 + 32) + 48);
              if ((v69 & 0x8000000000000000) != 0)
              {
                swift_retain();
                swift_retain();
                goto LABEL_383;
              }
              swift_retain();
              swift_retain();
              swift_retain();
              if (HIDWORD(v69)) {
                goto LABEL_384;
              }
              uint64_t v70 = 0;
              while (1)
              {
                uint64_t v71 = *((unsigned __int8 *)v2 + 8);
                LODWORD(__src[0]) = bswap32(v69);
                _BPlistEncodingFormat.Writer.write(_:)((char *)__src - v71 + 4, v71);
                if (v195 - 1 == v70) {
                  break;
                }
                if ((unint64_t)(v70 + 1) >= *(void *)(v25 + 16)) {
                  goto LABEL_331;
                }
                unint64_t v69 = *(void *)(*(void *)(v25 + 8 * v70 + 40) + 48);
                if ((v69 & 0x8000000000000000) == 0)
                {
                  ++v70;
                  if (!HIDWORD(v69)) {
                    continue;
                  }
                }
                goto LABEL_384;
              }
              swift_release();
              swift_release();
              swift_release();
            }
            if (v193)
            {
              swift_retain();
              swift_retain();
              unint64_t v72 = 0;
              uint64_t v190 = v3;
              do
              {
                if (v72 >= *(void *)(v63 + 16)) {
                  goto LABEL_330;
                }
                uint64_t v74 = *(void *)(v63 + 8 * v72 + 32);
                uint64_t v75 = *(void *)(v74 + 48);
                if (v75 == specialized Array._getCount()(*v2))
                {
                  uint64_t v77 = v2[4];
                  uint64_t v76 = v2[5];
                  unint64_t v78 = v2[6];
                  uint64_t v79 = 0;
                  switch(v78 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v79) = HIDWORD(v76) - v76;
                      if (__OFSUB__(HIDWORD(v76), v76)) {
                        goto LABEL_338;
                      }
                      uint64_t v79 = (int)v79;
LABEL_137:
                      uint64_t v83 = v79 + v77;
                      if (__OFADD__(v79, v77)) {
                        goto LABEL_334;
                      }
                      break;
                    case 2uLL:
                      uint64_t v82 = v76 + 16;
                      uint64_t v81 = *(void *)(v76 + 16);
                      uint64_t v80 = *(void *)(v82 + 8);
                      BOOL v20 = __OFSUB__(v80, v81);
                      uint64_t v79 = v80 - v81;
                      if (!v20) {
                        goto LABEL_137;
                      }
                      goto LABEL_339;
                    case 3uLL:
                      goto LABEL_137;
                    default:
                      uint64_t v79 = BYTE6(v78);
                      goto LABEL_137;
                  }
                  swift_retain();
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                  uint64_t v84 = *(void *)(*v2 + 16);
                  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v84);
                  uint64_t v85 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v84, v83);
                  destructiveProjectEnumData for PredicateCodableError(v85, v86);
                  unint64_t v87 = *(void *)(v74 + 16);
                  unint64_t v88 = *(void *)(v74 + 24);
                  uint64_t v89 = *(void *)(v74 + 32);
                  unsigned int v90 = *(unsigned __int8 *)(v74 + 40);
                  switch(v90 >> 4)
                  {
                    case 1u:
                      if (v77 == 0x2000)
                      {
                        uint64_t v102 = (unsigned char *)v2[2];
                        if (v102) {
                          long long v103 = v102 + 0x2000;
                        }
                        else {
                          long long v103 = 0;
                        }
                        Data._Representation.append(contentsOf:)(v102, v103);
                        uint64_t v77 = 0;
                      }
                      *(unsigned char *)(v2[2] + v77) = 20;
                      uint64_t v25 = v196;
                      unint64_t v63 = v197;
                      if (__OFADD__(v77, 1)) {
                        goto LABEL_350;
                      }
                      v2[4] = v77 + 1;
                      *(void *)&__src[0] = 0;
                      _BPlistEncodingFormat.Writer.write(_:)((char *)__src, 8);
                      *(void *)&__src[0] = bswap64(v87);
                      uint64_t v96 = 8;
                      goto LABEL_173;
                    case 2u:
                      if (v87 <= 0xFF)
                      {
                        _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 0);
                        LOBYTE(__src[0]) = v87;
                        _BPlistEncodingFormat.Writer.write(_:)((char *)__src, 1);
                        goto LABEL_128;
                      }
                      uint64_t v3 = v190;
                      uint64_t v25 = v196;
                      unint64_t v63 = v197;
                      if (v87 >> 16)
                      {
                        if (HIDWORD(v87))
                        {
                          _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 3);
                          *(void *)&__src[0] = bswap64(v87);
                          uint64_t v99 = 8;
                        }
                        else
                        {
                          _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 2);
                          LODWORD(__src[0]) = bswap32(v87);
                          uint64_t v99 = 4;
                        }
                      }
                      else
                      {
                        _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 1);
                        LOWORD(__src[0]) = bswap32(v87) >> 16;
                        uint64_t v99 = 2;
                      }
                      _BPlistEncodingFormat.Writer.write(_:)((char *)__src, v99);
                      swift_release();
                      break;
                    case 3u:
                      char v100 = 3;
                      char v101 = 3;
                      goto LABEL_165;
                    case 4u:
                      if (v77 == 0x2000)
                      {
                        uint64_t v94 = (unsigned char *)v2[2];
                        if (v94) {
                          uint64_t v95 = v94 + 0x2000;
                        }
                        else {
                          uint64_t v95 = 0;
                        }
                        Data._Representation.append(contentsOf:)(v94, v95);
                        uint64_t v77 = 0;
                      }
                      *(unsigned char *)(v2[2] + v77) = 34;
                      uint64_t v25 = v196;
                      unint64_t v63 = v197;
                      if (__OFADD__(v77, 1)) {
                        goto LABEL_349;
                      }
                      v2[4] = v77 + 1;
                      LODWORD(__src[0]) = bswap32(v87);
                      uint64_t v96 = 4;
LABEL_173:
                      _BPlistEncodingFormat.Writer.write(_:)((char *)__src, v96);
                      swift_release();
                      uint64_t v3 = v190;
                      break;
                    case 5u:
                      uint64_t v73 = swift_retain();
                      _BPlistEncodingFormat.Writer.append(_:)(v73);
                      goto LABEL_127;
                    case 6u:
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      _BPlistEncodingFormat.Writer.append(_:)(v87, v88, v89);
                      swift_release();
                      swift_release();
                      swift_release();
                      goto LABEL_128;
                    case 7u:
                      char v100 = 4;
                      char v101 = 0;
LABEL_165:
                      _BPlistEncodingFormat.Writer.write(_:subtype:)(v100, v101);
                      *(void *)&__src[0] = bswap64(v87);
                      _BPlistEncodingFormat.Writer.write(_:)((char *)__src, 8);
                      goto LABEL_128;
                    case 8u:
                      outlined copy of Data._Representation(*(void *)(v74 + 16), *(void *)(v74 + 24));
                      _BPlistEncodingFormat.Writer.append(_:)(v87, v88);
                      goto LABEL_127;
                    case 9u:
                      if (v89 | v88 | v87 || v90 != 144)
                      {
                        BOOL v105 = v90 == 144 && v87 == 1 && (v89 | v88) == 0;
                        uint64_t v3 = v190;
                        unint64_t v63 = v197;
                        if (v105)
                        {
                          _BPlistEncodingFormat.Writer.appendFalse()();
                          swift_release();
                        }
                        else
                        {
                          *(void *)&__src[0] = 0x6C6C756E24;
                          *((void *)&__src[0] + 1) = 0xE500000000000000;
                          specialized String.withUTF8<A>(_:)((uint64_t *)__src);
                          swift_release();
                          swift_bridgeObjectRelease();
                        }
                        uint64_t v25 = v196;
                      }
                      else
                      {
                        unint64_t v63 = v197;
                        if (v77 == 0x2000)
                        {
                          unsigned __int8 v97 = (unsigned char *)v2[2];
                          if (v97) {
                            unsigned __int8 v98 = v97 + 0x2000;
                          }
                          else {
                            unsigned __int8 v98 = 0;
                          }
                          Data._Representation.append(contentsOf:)(v97, v98);
                          uint64_t v77 = 0;
                        }
                        *(unsigned char *)(v2[2] + v77) = 9;
                        swift_release();
                        uint64_t v25 = v196;
                        if (__OFADD__(v77, 1)) {
                          goto LABEL_357;
                        }
                        v2[4] = v77 + 1;
                        uint64_t v3 = v190;
                      }
                      break;
                    default:
                      if (v90)
                      {
                        *(void *)&__src[0] = *(void *)(v74 + 16);
                        *((void *)&__src[0] + 1) = v88;
                        swift_bridgeObjectRetain_n();
                        specialized String.withUTF8<A>(_:)((uint64_t *)__src);
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        *(void *)&__src[0] = 2415919360;
                        swift_bridgeObjectRetain();
                        unint64_t v91 = String.data(using:allowLossyConversion:)((uint64_t *)__src, 0, v87, v88);
                        if (v92 >> 60 == 15) {
                          goto LABEL_380;
                        }
                        uint64_t v93 = 0;
                        uint64_t v189 = v9;
                        switch(v92 >> 62)
                        {
                          case 1uLL:
                            LODWORD(v93) = HIDWORD(v91) - v91;
                            if (__OFSUB__(HIDWORD(v91), v91)) {
                              goto LABEL_372;
                            }
                            uint64_t v93 = (int)v93;
LABEL_194:
                            unint64_t v108 = v92;
                            uint64_t v109 = v91;
                            _BPlistEncodingFormat.Writer.append(_:count:)(7, v93 / 2);
                            unint64_t v110 = v108;
                            unint64_t v111 = v108;
                            uint64_t v9 = v189;
                            specialized Data._Representation.withUnsafeBytes<A>(_:)(v109, v111);
                            outlined consume of Data?(v109, v110);
                            break;
                          case 2uLL:
                            uint64_t v107 = *(void *)(v91 + 16);
                            uint64_t v106 = *(void *)(v91 + 24);
                            BOOL v20 = __OFSUB__(v106, v107);
                            uint64_t v93 = v106 - v107;
                            if (!v20) {
                              goto LABEL_194;
                            }
                            goto LABEL_373;
                          case 3uLL:
                            goto LABEL_194;
                          default:
                            uint64_t v93 = BYTE6(v92);
                            goto LABEL_194;
                        }
                      }
LABEL_127:
                      outlined consume of _BPlistEncodingFormat.Reference.Backing(v87, v88, v89, v90);
LABEL_128:
                      swift_release();
                      uint64_t v3 = v190;
                      uint64_t v25 = v196;
                      unint64_t v63 = v197;
                      break;
                  }
                }
                ++v72;
              }
              while (v193 != v72);
              swift_release();
              swift_release();
            }
            if (v195)
            {
              swift_retain();
              swift_retain();
              swift_retain();
              for (unint64_t i = 0; i != v195; ++i)
              {
                if (i >= *(void *)(v25 + 16)) {
                  goto LABEL_332;
                }
                uint64_t v114 = *(void *)(v25 + 8 * i + 32);
                uint64_t v115 = *(void *)(v114 + 48);
                if (v115 == specialized Array._getCount()(*v2))
                {
                  uint64_t v116 = v2[4];
                  uint64_t v117 = v2[5];
                  unint64_t v118 = v2[6];
                  uint64_t v119 = 0;
                  switch(v118 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v119) = HIDWORD(v117) - v117;
                      if (__OFSUB__(HIDWORD(v117), v117)) {
                        goto LABEL_341;
                      }
                      uint64_t v119 = (int)v119;
LABEL_209:
                      uint64_t v123 = v119 + v116;
                      if (__OFADD__(v119, v116)) {
                        goto LABEL_335;
                      }
                      swift_retain();
                      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                      uint64_t v124 = *(void *)(*v2 + 16);
                      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v124);
                      uint64_t v125 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v124, v123);
                      destructiveProjectEnumData for PredicateCodableError(v125, v126);
                      unint64_t v127 = *(void *)(v114 + 16);
                      unint64_t v128 = *(void *)(v114 + 24);
                      uint64_t v129 = *(void *)(v114 + 32);
                      unsigned int v130 = *(unsigned __int8 *)(v114 + 40);
                      switch(v130 >> 4)
                      {
                        case 1u:
                          _BPlistEncodingFormat.Writer.append(_:)(*(void *)(v114 + 16));
                          goto LABEL_200;
                        case 2u:
                          _BPlistEncodingFormat.Writer.append(_:)(*(void *)(v114 + 16));
                          goto LABEL_200;
                        case 3u:
                          char v131 = 3;
                          char v132 = 3;
                          goto LABEL_219;
                        case 4u:
                          _BPlistEncodingFormat.Writer.write(_:subtype:)(3, 2);
                          LODWORD(__src[0]) = bswap32(v127);
                          _BPlistEncodingFormat.Writer.write(_:)((char *)__src, 4);
                          goto LABEL_200;
                        case 5u:
                          uint64_t v133 = swift_retain();
                          _BPlistEncodingFormat.Writer.append(_:)(v133);
                          goto LABEL_199;
                        case 6u:
                          swift_retain();
                          swift_retain();
                          swift_retain();
                          _BPlistEncodingFormat.Writer.append(_:)(v127, v128, v129);
                          swift_release();
                          swift_release();
                          swift_release();
                          goto LABEL_200;
                        case 7u:
                          char v131 = 4;
                          char v132 = 0;
LABEL_219:
                          _BPlistEncodingFormat.Writer.write(_:subtype:)(v131, v132);
                          *(void *)&__src[0] = bswap64(v127);
                          _BPlistEncodingFormat.Writer.write(_:)((char *)__src, 8);
                          goto LABEL_200;
                        case 8u:
                          outlined copy of Data._Representation(*(void *)(v114 + 16), *(void *)(v114 + 24));
                          _BPlistEncodingFormat.Writer.append(_:)(v127, v128);
                          goto LABEL_199;
                        case 9u:
                          if (v129 | v128 | v127 || v130 != 144)
                          {
                            BOOL v135 = v130 == 144 && v127 == 1 && (v129 | v128) == 0;
                            uint64_t v25 = v196;
                            if (v135)
                            {
                              _BPlistEncodingFormat.Writer.appendFalse()();
                            }
                            else
                            {
                              v136._countAndFlagsBits = 0x6C6C756E24;
                              v136._object = (void *)0xE500000000000000;
                              _BPlistEncodingFormat.Writer.append(_:isASCII:)(v136, 1);
                            }
                            swift_release();
                          }
                          else
                          {
                            _BPlistEncodingFormat.Writer.appendTrue()();
LABEL_200:
                            swift_release();
                            uint64_t v25 = v196;
                          }
                          break;
                        default:
                          swift_bridgeObjectRetain();
                          v113._countAndFlagsBits = v127;
                          v113._object = (void *)v128;
                          _BPlistEncodingFormat.Writer.append(_:isASCII:)(v113, v130 & 1);
LABEL_199:
                          outlined consume of _BPlistEncodingFormat.Reference.Backing(v127, v128, v129, v130);
                          goto LABEL_200;
                      }
                      break;
                    case 2uLL:
                      uint64_t v122 = v117 + 16;
                      uint64_t v121 = *(void *)(v117 + 16);
                      uint64_t v120 = *(void *)(v122 + 8);
                      BOOL v20 = __OFSUB__(v120, v121);
                      uint64_t v119 = v120 - v121;
                      if (!v20) {
                        goto LABEL_209;
                      }
                      goto LABEL_340;
                    case 3uLL:
                      goto LABEL_209;
                    default:
                      uint64_t v119 = BYTE6(v118);
                      goto LABEL_209;
                  }
                }
              }
              swift_release();
              swift_release();
              swift_release();
            }
            swift_release();
            swift_release();
            swift_release();
            goto LABEL_13;
          case 7u:
            if (v14 == 0x2000)
            {
              unint64_t v50 = *(void *)(v11 + 16);
              unsigned __int8 v51 = (unsigned char *)v2[2];
              if (v51) {
                long long v52 = v51 + 0x2000;
              }
              else {
                long long v52 = 0;
              }
              Data._Representation.append(contentsOf:)(v51, v52);
              unint64_t v24 = v50;
              uint64_t v14 = 0;
            }
            *(unsigned char *)(v2[2] + v14) = 51;
            uint64_t v48 = v14 + 1;
            if (__OFADD__(v14, 1)) {
              goto LABEL_345;
            }
            v2[4] = v48;
            *(void *)&__src[0] = bswap64(v24);
            if (__OFSUB__(0x2000, v48)) {
              goto LABEL_346;
            }
            if (0x1FFF - v14 >= 8)
            {
              if (!v2[2]) {
                goto LABEL_377;
              }
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              uint64_t v49 = v14 + 9;
              if (__OFADD__(v48, 8)) {
                goto LABEL_354;
              }
LABEL_258:
              v2[4] = v49;
            }
            else
            {
LABEL_86:
              if (v48 > 0)
              {
                uint64_t v53 = (unsigned char *)v2[2];
                if (v53) {
                  uint64_t v54 = &v53[v48];
                }
                else {
                  uint64_t v54 = 0;
                }
                Data._Representation.append(contentsOf:)(v53, v54);
                v2[4] = 0;
              }
              Data._Representation.append(contentsOf:)(__src, (unsigned char *)__src + 8);
            }
            goto LABEL_13;
          case 8u:
            switch(v197 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v24), v24)) {
                  goto LABEL_361;
                }
                Swift::Int64 v165 = HIDWORD(v24) - (int)v24;
                uint64_t v68 = *(void *)(v11 + 16);
                unint64_t v67 = *(void *)(v11 + 24);
                outlined copy of Data._Representation(v24, v197);
                _BPlistEncodingFormat.Writer.append(_:count:)(5, v165);
                if (v68 >> 32 < (int)v68) {
                  goto LABEL_362;
                }
                uint64_t v166 = *(void *)((v197 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
                if (!v166) {
                  goto LABEL_291;
                }
                uint64_t v167 = *(void *)((v197 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
                if (__OFSUB__((int)v68, v167)) {
                  goto LABEL_365;
                }
                uint64_t v168 = (char *)(v166 + (int)v68 - v167);
                if (*(void *)((v197 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= (v68 >> 32) - (int)v68) {
                  uint64_t v169 = (v68 >> 32) - (int)v68;
                }
                else {
                  uint64_t v169 = *(void *)((v197 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
                }
                unint64_t v67 = v197;
                outlined copy of Data._Representation(v68, v197);
                _BPlistEncodingFormat.Writer.write(_:)(v168, v169);
                outlined consume of _BPlistEncodingFormat.Reference.Backing(v68, v197, v25, v26);
LABEL_291:
                uint64_t v61 = v68;
                unint64_t v146 = v67;
                goto LABEL_324;
              case 2uLL:
                uint64_t v154 = *(void *)(v24 + 16);
                uint64_t v153 = *(void *)(v24 + 24);
                Swift::Int64 v155 = v153 - v154;
                if (__OFSUB__(v153, v154)) {
                  goto LABEL_360;
                }
                uint64_t v156 = *(void *)(v11 + 16);
                outlined copy of Data._Representation(v24, v197);
                _BPlistEncodingFormat.Writer.append(_:count:)(5, v155);
                uint64_t v61 = v156;
                uint64_t v157 = *(void *)(v156 + 16);
                uint64_t v158 = *(void *)(v156 + 24);
                uint64_t v159 = *(void *)((v197 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
                if (!v159)
                {
                  if (__OFSUB__(v158, v157)) {
                    goto LABEL_363;
                  }
                  goto LABEL_323;
                }
                uint64_t v160 = *(void *)((v197 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
                BOOL v20 = __OFSUB__(v157, v160);
                uint64_t v161 = v157 - v160;
                if (v20) {
                  goto LABEL_364;
                }
                BOOL v20 = __OFSUB__(v158, v157);
                uint64_t v162 = v158 - v157;
                if (v20) {
                  goto LABEL_363;
                }
                uint64_t v163 = (char *)(v159 + v161);
                if (*(void *)((v197 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v162) {
                  uint64_t v164 = v162;
                }
                else {
                  uint64_t v164 = *(void *)((v197 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
                }
                uint64_t v28 = v61;
                swift_retain();
                swift_retain();
                _BPlistEncodingFormat.Writer.write(_:)(v163, v164);
                swift_release();
                swift_release();
                break;
              case 3uLL:
                uint64_t v59 = *(void *)(v11 + 16);
                _BPlistEncodingFormat.Writer.append(_:count:)(5, 0);
                goto LABEL_100;
              default:
                unint64_t v67 = *(void *)(v11 + 24);
                uint64_t v68 = *(void *)(v11 + 16);
                _BPlistEncodingFormat.Writer.append(_:count:)(5, BYTE6(v197));
                *(void *)&__src[0] = v68;
                DWORD2(__src[0]) = v197;
                WORD6(__src[0]) = WORD2(v197);
                _BPlistEncodingFormat.Writer.write(_:)((char *)__src, BYTE6(v197));
                goto LABEL_291;
            }
            goto LABEL_322;
          case 9u:
            if (v25 | v197 | v24 || v26 != 144)
            {
              if (v26 != 144 || v24 != 1 || (v25 | v197) != 0)
              {
                __src[0] = xmmword_1821A67C0;
                _BPlistEncodingFormat.Writer.append(_:count:)(6, 5);
                _BPlistEncodingFormat.Writer.write(_:)((char *)__src, 5);
                swift_release();
                swift_bridgeObjectRelease();
                goto LABEL_14;
              }
              if (v14 == 0x2000)
              {
                uint64_t v148 = (unsigned char *)v2[2];
                if (v148) {
                  Foundation::XMLPlistTag v149 = v148 + 0x2000;
                }
                else {
                  Foundation::XMLPlistTag v149 = 0;
                }
                Data._Representation.append(contentsOf:)(v148, v149);
                uint64_t v14 = 0;
              }
              *(unsigned char *)(v2[2] + v14) = 8;
              swift_release();
              uint64_t v41 = v14 + 1;
              if (__OFADD__(v14, 1)) {
                goto LABEL_358;
              }
            }
            else
            {
              if (v14 == 0x2000)
              {
                uint64_t v39 = (unsigned char *)v2[2];
                if (v39) {
                  uint64_t v40 = v39 + 0x2000;
                }
                else {
                  uint64_t v40 = 0;
                }
                Data._Representation.append(contentsOf:)(v39, v40);
                uint64_t v14 = 0;
              }
              *(unsigned char *)(v2[2] + v14) = 9;
              swift_release();
              uint64_t v41 = v14 + 1;
              if (__OFADD__(v14, 1)) {
                goto LABEL_352;
              }
            }
            v2[4] = v41;
            goto LABEL_14;
          default:
            if (v26)
            {
              if ((v197 & 0x1000000000000000) != 0)
              {
                uint64_t v186 = *(void *)(v11 + 16);
                swift_bridgeObjectRetain();
                uint64_t v28 = v186;
                uint64_t v142 = static String._copying(_:)();
                unint64_t v143 = v187;
                if ((v187 & 0x2000000000000000) == 0)
                {
LABEL_249:
                  if ((v142 & 0x1000000000000000) != 0)
                  {
                    uint64_t v144 = (char *)((v143 & 0xFFFFFFFFFFFFFFFLL) + 32);
                    Swift::Int64 v145 = v142 & 0xFFFFFFFFFFFFLL;
                  }
                  else
                  {
                    uint64_t v144 = (char *)_StringObject.sharedUTF8.getter();
                    Swift::Int64 v145 = v188;
                  }
                  _BPlistEncodingFormat.Writer.append(_:count:)(6, v145);
                  _BPlistEncodingFormat.Writer.write(_:)(v144, v145);
                  swift_bridgeObjectRelease();
                  uint64_t v61 = v28;
                  unint64_t v146 = v197;
                  uint64_t v147 = v196;
                  goto LABEL_325;
                }
              }
              else
              {
                uint64_t v142 = *(void *)(v11 + 16);
                outlined copy of _BPlistEncodingFormat.Reference.Backing(v24, v197, v25, v26);
                swift_bridgeObjectRetain();
                unint64_t v143 = v197;
                uint64_t v28 = v142;
                if ((v197 & 0x2000000000000000) == 0) {
                  goto LABEL_249;
                }
              }
              *(void *)&__src[0] = v142;
              *((void *)&__src[0] + 1) = v143 & 0xFFFFFFFFFFFFFFLL;
              _BPlistEncodingFormat.Writer.append(_:count:)(6, HIBYTE(v143) & 0xF);
              _BPlistEncodingFormat.Writer.write(_:)((char *)__src, HIBYTE(v143) & 0xF);
              swift_bridgeObjectRelease();
            }
            else
            {
              *(void *)&__src[0] = 2415919360;
              unint64_t v27 = v24;
              swift_bridgeObjectRetain();
              uint64_t v28 = v27;
              unint64_t v29 = String.data(using:allowLossyConversion:)((uint64_t *)__src, 0, v27, v197);
              if (v30 >> 60 == 15)
              {
                __break(1u);
LABEL_377:
                __break(1u);
LABEL_378:
                __break(1u);
LABEL_379:
                __break(1u);
LABEL_380:
                __break(1u);
LABEL_381:
                swift_retain();
                goto LABEL_383;
              }
              unint64_t v31 = v30;
              uint64_t v32 = v29;
              switch(v30 >> 62)
              {
                case 1uLL:
                  if (__OFSUB__(HIDWORD(v29), v29)) {
                    goto LABEL_368;
                  }
                  _BPlistEncodingFormat.Writer.append(_:count:)(7, (uint64_t)(int)(HIDWORD(v29) - v29 + (HIDWORD(v29) - (int)v29 < 0)) >> 1);
                  if (v32 >> 32 < (int)v32) {
                    goto LABEL_370;
                  }
                  uint64_t v184 = *(void *)((v31 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
                  if (!v184) {
                    goto LABEL_319;
                  }
                  uint64_t v185 = *(void *)((v31 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
                  if (__OFSUB__((int)v32, v185)) {
                    goto LABEL_375;
                  }
                  uint64_t v182 = (char *)(v184 + (int)v32 - v185);
                  if (*(void *)((v31 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= (v32 >> 32) - (int)v32) {
                    uint64_t v183 = (v32 >> 32) - (int)v32;
                  }
                  else {
                    uint64_t v183 = *(void *)((v31 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
                  }
                  goto LABEL_314;
                case 2uLL:
                  uint64_t v174 = *(void *)(v29 + 16);
                  uint64_t v173 = *(void *)(v29 + 24);
                  BOOL v20 = __OFSUB__(v173, v174);
                  uint64_t v175 = v173 - v174;
                  if (v20) {
                    goto LABEL_367;
                  }
                  _BPlistEncodingFormat.Writer.append(_:count:)(7, v175 / 2);
                  uint64_t v176 = *(void *)(v32 + 16);
                  uint64_t v177 = *(void *)(v32 + 24);
                  uint64_t v178 = *(void *)((v31 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
                  if (v178)
                  {
                    uint64_t v179 = *(void *)((v31 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
                    BOOL v20 = __OFSUB__(v176, v179);
                    uint64_t v180 = v176 - v179;
                    if (v20) {
                      goto LABEL_374;
                    }
                    BOOL v20 = __OFSUB__(v177, v176);
                    uint64_t v181 = v177 - v176;
                    if (v20) {
                      goto LABEL_371;
                    }
                    uint64_t v182 = (char *)(v178 + v180);
                    if (*(void *)((v31 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v181) {
                      uint64_t v183 = v181;
                    }
                    else {
                      uint64_t v183 = *(void *)((v31 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
                    }
LABEL_314:
                    _BPlistEncodingFormat.Writer.write(_:)(v182, v183);
                  }
                  else if (__OFSUB__(v177, v176))
                  {
                    goto LABEL_371;
                  }
LABEL_319:
                  outlined consume of Data?(v32, v31);
                  break;
                case 3uLL:
                  _BPlistEncodingFormat.Writer.append(_:count:)(7, 0);
                  goto LABEL_319;
                default:
                  _BPlistEncodingFormat.Writer.append(_:count:)(7, (v30 >> 49) & 0x7F);
                  *(void *)&__src[0] = v32;
                  WORD4(__src[0]) = v31;
                  BYTE10(__src[0]) = BYTE2(v31);
                  BYTE11(__src[0]) = BYTE3(v31);
                  BYTE12(__src[0]) = BYTE4(v31);
                  BYTE13(__src[0]) = BYTE5(v31);
                  _BPlistEncodingFormat.Writer.write(_:)((char *)__src, BYTE6(v31));
                  goto LABEL_319;
              }
            }
LABEL_322:
            uint64_t v61 = v28;
LABEL_323:
            unint64_t v146 = v197;
LABEL_324:
            uint64_t v147 = v25;
LABEL_325:
            outlined consume of _BPlistEncodingFormat.Reference.Backing(v61, v146, v147, v26);
LABEL_13:
            swift_release();
LABEL_14:
            uint64_t v8 = v191;
            break;
        }
      }
      ++v8;
    }
    while (v8 != v194);
    swift_release();
  }
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  Swift::String v20;
  Swift::Int64 v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int64 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[4];
  uint64_t vars8;

  v29[3] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = (void *)*v1;
  if (v2 == *(void *)(*v1 + 16))
  {
    Swift::Int64 v4 = v1[4];
    unint64_t v5 = v1[5];
    uint64_t v6 = v1[6];
    uint64_t v8 = 0;
    switch(v6 >> 62)
    {
      case 1uLL:
        LODWORD(v8) = HIDWORD(v5) - v5;
        if (__OFSUB__(HIDWORD(v5), v5))
        {
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
        }
        uint64_t v8 = (int)v8;
LABEL_7:
        uint64_t v13 = v8 + v4;
        if (__OFADD__(v8, v4))
        {
          __break(1u);
        }
        else if (swift_isUniquelyReferenced_nonNull_native())
        {
          goto LABEL_9;
        }
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 + 1, 1, v3);
LABEL_9:
        unint64_t v15 = v3[2];
        uint64_t v14 = v3[3];
        if (v15 >= v14 >> 1) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v3);
        }
        v3[2] = v15 + 1;
        v3[v15 + 4] = v13;
        *uint64_t v1 = v3;
        uint64_t v16 = *(void *)(a1 + 16);
        uint64_t v17 = *(void *)(a1 + 24);
        uint64_t v18 = *(void *)(a1 + 32);
        uint64_t v19 = *(unsigned __int8 *)(a1 + 40);
        switch(v19 >> 4)
        {
          case 1u:
            _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 4);
            v29[0] = 0;
            _BPlistEncodingFormat.Writer.write(_:)((char *)v29, 8);
            goto LABEL_25;
          case 2u:
            uint64_t v21 = *(void *)(a1 + 16);
            _BPlistEncodingFormat.Writer.append(_:)(v21);
            return;
          case 3u:
            unint64_t v22 = 3;
            unint64_t v23 = 3;
            goto LABEL_24;
          case 4u:
            _BPlistEncodingFormat.Writer.write(_:subtype:)(3, 2);
            LODWORD(v29[0]) = bswap32(v16);
            unint64_t v24 = 4;
            goto LABEL_26;
          case 5u:
            uint64_t v25 = swift_retain();
            _BPlistEncodingFormat.Writer.append(_:)(v25);
            goto LABEL_46;
          case 6u:
            swift_retain();
            swift_retain();
            swift_retain();
            _BPlistEncodingFormat.Writer.append(_:)(v16, v17, v18);
            swift_release();
            swift_release();
            swift_release();
            return;
          case 7u:
            unint64_t v22 = 4;
            unint64_t v23 = 0;
LABEL_24:
            _BPlistEncodingFormat.Writer.write(_:subtype:)(v22, v23);
LABEL_25:
            v29[0] = bswap64(v16);
            unint64_t v24 = 8;
LABEL_26:
            _BPlistEncodingFormat.Writer.write(_:)((char *)v29, v24);
            return;
          case 8u:
            unsigned int v26 = 0;
            switch(v17 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v16), v16)) {
                  goto LABEL_54;
                }
                unsigned int v26 = HIDWORD(v16) - (int)v16;
LABEL_44:
                outlined copy of _BPlistEncodingFormat.Reference.Backing(v16, v17, v18, v19);
LABEL_45:
                _BPlistEncodingFormat.Writer.append(_:count:)(5, v26);
                specialized Data._Representation.withUnsafeBytes<A>(_:)(v16, v17);
                break;
              case 2uLL:
                uint64_t v28 = *(void *)(v16 + 16);
                unint64_t v27 = *(void *)(v16 + 24);
                unsigned int v26 = v27 - v28;
                if (!__OFSUB__(v27, v28)) {
                  goto LABEL_44;
                }
                goto LABEL_55;
              case 3uLL:
                goto LABEL_45;
              default:
                unsigned int v26 = BYTE6(v17);
                goto LABEL_45;
            }
            goto LABEL_46;
          case 9u:
            if (v18 | v17 | v16 || v19 != 144)
            {
              if (v19 == 144 && v16 == 1 && !(v18 | v17))
              {
                _BPlistEncodingFormat.Writer.appendFalse()();
              }
              else
              {
                v29[0] = 0x6C6C756E24;
                v29[1] = 0xE500000000000000;
                specialized String.withUTF8<A>(_:)(v29);
                swift_bridgeObjectRelease();
              }
            }
            else
            {
              _BPlistEncodingFormat.Writer.appendTrue()();
            }
            return;
          default:
            swift_bridgeObjectRetain();
            v20._countAndFlagsBits = v16;
            v20._object = (void *)v17;
            _BPlistEncodingFormat.Writer.append(_:isASCII:)(v20, v19 & 1);
LABEL_46:
            outlined consume of _BPlistEncodingFormat.Reference.Backing(v16, v17, v18, v19);
            break;
        }
        break;
      case 2uLL:
        uint64_t v11 = v5 + 16;
        uint64_t v10 = *(void *)(v5 + 16);
        uint64_t v9 = *(void *)(v11 + 8);
        uint64_t v12 = __OFSUB__(v9, v10);
        uint64_t v8 = v9 - v10;
        if (!v12) {
          goto LABEL_7;
        }
        goto LABEL_53;
      case 3uLL:
        goto LABEL_7;
      default:
        uint64_t v8 = BYTE6(v6);
        goto LABEL_7;
    }
  }
}

void _BPlistEncodingFormat.Writer.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int64 v4 = (void *)v3;
  uint64_t v5 = a3;
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  Swift::Int64 v151 = *(void *)(a3 + 16);
  _BPlistEncodingFormat.Writer.append(_:count:)(9, v151);
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    unint64_t v8 = *(void *)(*(void *)(a2 + 32) + 48);
    if ((v8 & 0x8000000000000000) != 0) {
      goto LABEL_317;
    }
    if (HIDWORD(v8))
    {
      swift_retain();
      goto LABEL_320;
    }
    swift_retain();
    swift_retain();
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = *(unsigned __int8 *)(v3 + 8);
      LODWORD(__src[0]) = bswap32(v8);
      _BPlistEncodingFormat.Writer.write(_:)((char *)__src - v10 + 4, v10);
      if (v7 - 1 == v9) {
        break;
      }
      unint64_t v8 = *(void *)(*(void *)(a2 + 8 * v9 + 40) + 48);
      if ((v8 & 0x8000000000000000) == 0)
      {
        ++v9;
        if (!HIDWORD(v8)) {
          continue;
        }
      }
      while (1)
      {
LABEL_321:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_319:
        swift_retain();
        swift_retain();
LABEL_320:
        swift_retain();
      }
    }
    swift_release();
    swift_release();
  }
  if (v151)
  {
    unint64_t v11 = *(void *)(*(void *)(v5 + 32) + 48);
    if ((v11 & 0x8000000000000000) != 0 || HIDWORD(v11)) {
      goto LABEL_319;
    }
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = *(unsigned __int8 *)(v3 + 8);
      LODWORD(__src[0]) = bswap32(v11);
      _BPlistEncodingFormat.Writer.write(_:)((char *)__src - v13 + 4, v13);
      if (v151 - 1 == v12) {
        break;
      }
      unint64_t v11 = *(void *)(*(void *)(v5 + 8 * v12 + 40) + 48);
      if ((v11 & 0x8000000000000000) == 0)
      {
        ++v12;
        if (!HIDWORD(v11)) {
          continue;
        }
      }
      goto LABEL_321;
    }
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v14 = "_GenericObjCError";
  uint64_t v149 = v5;
  uint64_t v150 = a2;
  if (!v7)
  {
    if (!v151) {
      return;
    }
    goto LABEL_170;
  }
  unint64_t v145 = (unint64_t)__src + 8;
  unint64_t v146 = (unint64_t)__src + 4;
  swift_retain();
  swift_retain();
  uint64_t v15 = 0;
  uint64_t v148 = v7;
  do
  {
    uint64_t v16 = *(void *)(a2 + 8 * v15 + 32);
    uint64_t v17 = (void *)*v4;
    if (*(void *)(v16 + 48) == *(void *)(*v4 + 16))
    {
      uint64_t v19 = v4[4];
      uint64_t v18 = v4[5];
      unint64_t v20 = v4[6];
      uint64_t v21 = 0;
      switch(v20 >> 62)
      {
        case 1uLL:
          LODWORD(v21) = HIDWORD(v18) - v18;
          if (__OFSUB__(HIDWORD(v18), v18)) {
            goto LABEL_280;
          }
          uint64_t v21 = (int)v21;
LABEL_30:
          uint64_t v26 = v21 + v19;
          if (__OFADD__(v21, v19))
          {
            __break(1u);
LABEL_278:
            __break(1u);
LABEL_279:
            __break(1u);
LABEL_280:
            __break(1u);
LABEL_281:
            __break(1u);
LABEL_282:
            __break(1u);
LABEL_283:
            __break(1u);
LABEL_284:
            __break(1u);
LABEL_285:
            __break(1u);
LABEL_286:
            __break(1u);
LABEL_287:
            __break(1u);
LABEL_288:
            __break(1u);
LABEL_289:
            __break(1u);
LABEL_290:
            __break(1u);
LABEL_291:
            __break(1u);
LABEL_292:
            __break(1u);
LABEL_293:
            __break(1u);
LABEL_294:
            __break(1u);
LABEL_295:
            __break(1u);
LABEL_296:
            __break(1u);
LABEL_297:
            __break(1u);
LABEL_298:
            __break(1u);
LABEL_299:
            __break(1u);
LABEL_300:
            __break(1u);
LABEL_301:
            __break(1u);
LABEL_302:
            __break(1u);
LABEL_303:
            __break(1u);
LABEL_304:
            __break(1u);
LABEL_305:
            __break(1u);
LABEL_306:
            __break(1u);
LABEL_307:
            __break(1u);
LABEL_308:
            __break(1u);
LABEL_309:
            __break(1u);
LABEL_310:
            __break(1u);
LABEL_311:
            __break(1u);
LABEL_312:
            __break(1u);
          }
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
          }
          unint64_t v28 = v17[2];
          unint64_t v27 = v17[3];
          if (v28 >= v27 >> 1) {
            uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v17);
          }
          break;
        case 2uLL:
          uint64_t v24 = v18 + 16;
          uint64_t v23 = *(void *)(v18 + 16);
          uint64_t v22 = *(void *)(v24 + 8);
          BOOL v25 = __OFSUB__(v22, v23);
          uint64_t v21 = v22 - v23;
          if (!v25) {
            goto LABEL_30;
          }
          goto LABEL_279;
        case 3uLL:
          goto LABEL_30;
        default:
          uint64_t v21 = BYTE6(v20);
          goto LABEL_30;
      }
      v17[2] = v28 + 1;
      v17[v28 + 4] = v26;
      *Swift::Int64 v4 = v17;
      uint64_t v30 = *(void *)(v16 + 16);
      unint64_t v29 = *(void *)(v16 + 24);
      uint64_t v31 = *(void *)(v16 + 32);
      unsigned int v32 = *(unsigned __int8 *)(v16 + 40);
      switch(v32 >> 4)
      {
        case 1u:
          if (v19 == 0x2000)
          {
            unint64_t v55 = (unsigned char *)v4[2];
            if (v55) {
              Swift::Bool v56 = v55 + 0x2000;
            }
            else {
              Swift::Bool v56 = 0;
            }
            Data._Representation.append(contentsOf:)(v55, v56);
            uint64_t v19 = 0;
          }
          *(unsigned char *)(v4[2] + v19) = 20;
          if (__OFADD__(v19, 1)) {
            goto LABEL_283;
          }
          v4[4] = v19 + 1;
          *(void *)&__src[0] = 0;
          _BPlistEncodingFormat.Writer.write(_:)((char *)__src, 8);
          goto LABEL_96;
        case 2u:
          if ((unint64_t)v30 <= 0xFF)
          {
            if (v19 == 0x2000)
            {
              Swift::Int64 v62 = (unsigned char *)v4[2];
              if (v62) {
                unint64_t v63 = v62 + 0x2000;
              }
              else {
                unint64_t v63 = 0;
              }
              Data._Representation.append(contentsOf:)(v62, v63);
              uint64_t v19 = 0;
            }
            *(unsigned char *)(v4[2] + v19) = 16;
            if (__OFADD__(v19, 1)) {
              goto LABEL_294;
            }
            v4[4] = v19 + 1;
            LOBYTE(__src[0]) = v30;
            uint64_t v54 = 1;
            goto LABEL_143;
          }
          if (!((unint64_t)v30 >> 16))
          {
            if (v19 == 0x2000)
            {
              uint64_t v71 = (unsigned char *)v4[2];
              if (v71) {
                unint64_t v72 = v71 + 0x2000;
              }
              else {
                unint64_t v72 = 0;
              }
              Data._Representation.append(contentsOf:)(v71, v72);
              uint64_t v19 = 0;
            }
            *(unsigned char *)(v4[2] + v19) = 17;
            if (__OFADD__(v19, 1)) {
              goto LABEL_299;
            }
            v4[4] = v19 + 1;
            LOWORD(__src[0]) = bswap32(v30) >> 16;
            uint64_t v54 = 2;
LABEL_143:
            _BPlistEncodingFormat.Writer.write(_:)((char *)__src, v54);
            goto LABEL_164;
          }
          if (HIDWORD(v30))
          {
            _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 3);
LABEL_96:
            *(void *)&__src[0] = bswap64(v30);
            _BPlistEncodingFormat.Writer.write(_:)((char *)__src, 8);
          }
          else
          {
            _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 2);
            LODWORD(__src[0]) = bswap32(v30);
            _BPlistEncodingFormat.Writer.write(_:)((char *)__src, 4);
          }
          goto LABEL_164;
        case 3u:
          if (v19 == 0x2000)
          {
            long long v47 = (unsigned char *)v4[2];
            if (v47) {
              uint64_t v48 = v47 + 0x2000;
            }
            else {
              uint64_t v48 = 0;
            }
            Data._Representation.append(contentsOf:)(v47, v48);
            uint64_t v19 = 0;
          }
          *(unsigned char *)(v4[2] + v19) = 35;
          uint64_t v49 = v19 + 1;
          if (__OFADD__(v19, 1)) {
            goto LABEL_285;
          }
          v4[4] = v49;
          *(void *)&__src[0] = bswap64(v30);
          if (__OFSUB__(0x2000, v49)) {
            goto LABEL_288;
          }
          if (0x1FFF - v19 >= 8)
          {
            uint64_t v5 = v149;
            a2 = v150;
            uint64_t v7 = v148;
            if (!v4[2]) {
              goto LABEL_315;
            }
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t v68 = v19 + 9;
            if (__OFADD__(v49, 8)) {
              goto LABEL_296;
            }
LABEL_21:
            v4[4] = v68;
          }
          else
          {
            uint64_t v5 = v149;
            a2 = v150;
            uint64_t v7 = v148;
            if (v49 > 0)
            {
              unint64_t v50 = (unsigned char *)v4[2];
              if (v50) {
                unsigned __int8 v51 = &v50[v49];
              }
              else {
                unsigned __int8 v51 = 0;
              }
              Data._Representation.append(contentsOf:)(v50, v51);
              v4[4] = 0;
            }
            Data._Representation.append(contentsOf:)(__src, (unsigned char *)__src + 8);
          }
LABEL_22:
          swift_release();
          break;
        case 4u:
          if (v19 == 0x2000)
          {
            uint64_t v39 = (unsigned char *)v4[2];
            if (v39) {
              uint64_t v40 = v39 + 0x2000;
            }
            else {
              uint64_t v40 = 0;
            }
            Data._Representation.append(contentsOf:)(v39, v40);
            uint64_t v19 = 0;
          }
          *(unsigned char *)(v4[2] + v19) = 34;
          uint64_t v41 = v19 + 1;
          if (__OFADD__(v19, 1)) {
            goto LABEL_284;
          }
          v4[4] = v41;
          LODWORD(__src[0]) = bswap32(v30);
          if (__OFSUB__(0x2000, v41)) {
            goto LABEL_287;
          }
          if (0x1FFF - v19 < 4)
          {
            uint64_t v5 = v149;
            a2 = v150;
            uint64_t v7 = v148;
            if (v41 > 0)
            {
              unint64_t v42 = (unsigned char *)v4[2];
              if (v42) {
                long long v43 = &v42[v41];
              }
              else {
                long long v43 = 0;
              }
              Data._Representation.append(contentsOf:)(v42, v43);
              v4[4] = 0;
            }
            Data._Representation.append(contentsOf:)(__src, (unsigned char *)__src + 4);
            goto LABEL_22;
          }
          uint64_t v5 = v149;
          a2 = v150;
          uint64_t v7 = v148;
          if (!v4[2]) {
            goto LABEL_314;
          }
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v68 = v19 + 5;
          if (__OFADD__(v41, 4)) {
            goto LABEL_295;
          }
          goto LABEL_21;
        case 5u:
          uint64_t v57 = swift_retain();
          _BPlistEncodingFormat.Writer.append(_:)(v57);
          goto LABEL_163;
        case 6u:
          swift_retain();
          swift_retain();
          swift_retain();
          _BPlistEncodingFormat.Writer.append(_:)(v30, v29, v31);
          swift_release();
          swift_release();
          swift_release();
          goto LABEL_164;
        case 7u:
          if (v19 == 0x2000)
          {
            long long v52 = (unsigned char *)v4[2];
            if (v52) {
              uint64_t v53 = v52 + 0x2000;
            }
            else {
              uint64_t v53 = 0;
            }
            Data._Representation.append(contentsOf:)(v52, v53);
            uint64_t v19 = 0;
          }
          *(unsigned char *)(v4[2] + v19) = 51;
          if (__OFADD__(v19, 1)) {
            goto LABEL_286;
          }
          v4[4] = v19 + 1;
          *(void *)&__src[0] = bswap64(v30);
          uint64_t v54 = 8;
          goto LABEL_143;
        case 8u:
          switch(v29 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(v30), v30)) {
                goto LABEL_301;
              }
              outlined copy of Data._Representation(*(void *)(v16 + 16), *(void *)(v16 + 24));
              _BPlistEncodingFormat.Writer.append(_:count:)(5, HIDWORD(v30) - (int)v30);
              if (v30 >> 32 < (int)v30) {
                goto LABEL_303;
              }
              swift_retain();
              specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v30, v30 >> 32, (void *)(v29 & 0x3FFFFFFFFFFFFFFFLL));
              outlined consume of _BPlistEncodingFormat.Reference.Backing(v30, v29, v31, v32);
              break;
            case 2uLL:
              uint64_t v74 = *(void *)(v30 + 16);
              uint64_t v73 = *(void *)(v30 + 24);
              Swift::Int64 v75 = v73 - v74;
              if (__OFSUB__(v73, v74)) {
                goto LABEL_302;
              }
              outlined copy of Data._Representation(*(void *)(v16 + 16), *(void *)(v16 + 24));
              _BPlistEncodingFormat.Writer.append(_:count:)(5, v75);
              uint64_t v76 = *(void *)(v30 + 16);
              uint64_t v77 = *(void *)(v30 + 24);
              swift_retain();
              swift_retain();
              specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v76, v77, (void *)(v29 & 0x3FFFFFFFFFFFFFFFLL));
              swift_release();
              swift_release();
              goto LABEL_163;
            case 3uLL:
              _BPlistEncodingFormat.Writer.append(_:count:)(5, 0);
              unint64_t v58 = v144 & 0xFF00000000000000;
              uint64_t v59 = 0;
              v144 &= 0xFF00000000000000;
              goto LABEL_147;
            default:
              _BPlistEncodingFormat.Writer.append(_:count:)(5, BYTE6(v29));
              unint64_t v58 = v143 & 0xFF00000000000000 | v29 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v59 = v30;
              unint64_t v143 = v58;
LABEL_147:
              specialized Data.InlineData.withUnsafeBytes<A>(_:)(v59, v58);
              goto LABEL_163;
          }
          goto LABEL_163;
        case 9u:
          if (v31 | v29 | v30 || v32 != 144)
          {
            if (v32 != 144 || v30 != 1 || (v31 | v29) != 0)
            {
              __src[0] = xmmword_1821A67C0;
              _BPlistEncodingFormat.Writer.append(_:count:)(6, 5);
              _BPlistEncodingFormat.Writer.write(_:)((char *)__src, 5);
              swift_release();
              swift_bridgeObjectRelease();
              goto LABEL_165;
            }
            if (v19 == 0x2000)
            {
              unint64_t v69 = (unsigned char *)v4[2];
              if (v69) {
                uint64_t v70 = v69 + 0x2000;
              }
              else {
                uint64_t v70 = 0;
              }
              Data._Representation.append(contentsOf:)(v69, v70);
              uint64_t v19 = 0;
            }
            *(unsigned char *)(v4[2] + v19) = 8;
            swift_release();
            uint64_t v46 = v19 + 1;
            uint64_t v5 = v149;
            a2 = v150;
            uint64_t v7 = v148;
            if (__OFADD__(v19, 1)) {
              goto LABEL_300;
            }
          }
          else
          {
            if (v19 == 0x2000)
            {
              long long v44 = (unsigned char *)v4[2];
              if (v44) {
                unint64_t v45 = v44 + 0x2000;
              }
              else {
                unint64_t v45 = 0;
              }
              Data._Representation.append(contentsOf:)(v44, v45);
              uint64_t v19 = 0;
            }
            *(unsigned char *)(v4[2] + v19) = 9;
            swift_release();
            uint64_t v46 = v19 + 1;
            uint64_t v5 = v149;
            a2 = v150;
            uint64_t v7 = v148;
            if (__OFADD__(v19, 1)) {
              goto LABEL_293;
            }
          }
          v4[4] = v46;
          break;
        default:
          if (v32)
          {
            outlined copy of _BPlistEncodingFormat.Reference.Backing(*(void *)(v16 + 16), *(void *)(v16 + 24), *(void *)(v16 + 32), *(unsigned char *)(v16 + 40));
            swift_bridgeObjectRetain();
            unint64_t v64 = v29;
            uint64_t v65 = v30;
            if ((v29 & 0x1000000000000000) != 0)
            {
              uint64_t v65 = static String._copying(_:)();
              unint64_t v64 = v84;
              outlined consume of _BPlistEncodingFormat.Reference.Backing(v30, v29, v31, v32);
              if ((v64 & 0x2000000000000000) != 0) {
                goto LABEL_161;
              }
LABEL_118:
              if ((v65 & 0x1000000000000000) != 0)
              {
                uint64_t v141 = (v64 & 0xFFFFFFFFFFFFFFFLL) + 32;
                Swift::Int64 v66 = v65 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                uint64_t v141 = _StringObject.sharedUTF8.getter();
                Swift::Int64 v66 = v85;
              }
              _BPlistEncodingFormat.Writer.append(_:count:)(6, v66);
              unint64_t v67 = (char *)v141;
            }
            else
            {
              if ((v29 & 0x2000000000000000) == 0) {
                goto LABEL_118;
              }
LABEL_161:
              Swift::Int64 v66 = HIBYTE(v64) & 0xF;
              *(void *)&__src[0] = v65;
              *((void *)&__src[0] + 1) = v64 & 0xFFFFFFFFFFFFFFLL;
              _BPlistEncodingFormat.Writer.append(_:count:)(6, v66);
              unint64_t v67 = (char *)__src;
            }
            _BPlistEncodingFormat.Writer.write(_:)(v67, v66);
            swift_bridgeObjectRelease();
            goto LABEL_163;
          }
          *(void *)&__src[0] = 2415919360;
          swift_bridgeObjectRetain();
          unint64_t v33 = String.data(using:allowLossyConversion:)((uint64_t *)__src, 0, v30, v29);
          if (v34 >> 60 == 15)
          {
            __break(1u);
LABEL_314:
            __break(1u);
LABEL_315:
            __break(1u);
LABEL_316:
            __break(1u);
LABEL_317:
            swift_retain();
            goto LABEL_320;
          }
          unint64_t v35 = v34;
          uint64_t v36 = v33;
          switch(v34 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(v33), v33)) {
                goto LABEL_309;
              }
              _BPlistEncodingFormat.Writer.append(_:count:)(7, (uint64_t)(int)(HIDWORD(v33) - v33 + (HIDWORD(v33) - (int)v33 < 0)) >> 1);
              uint64_t v82 = (int)v36;
              uint64_t v142 = v36;
              uint64_t v83 = v36 >> 32;
              if (v83 < v82) {
                goto LABEL_310;
              }
              swift_retain();
              specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v82, v83, (void *)(v35 & 0x3FFFFFFFFFFFFFFFLL));
              uint64_t v81 = v142;
              outlined consume of Data?(v142, v35);
LABEL_159:
              outlined consume of Data?(v81, v35);
              break;
            case 2uLL:
              uint64_t v79 = *(void *)(v33 + 16);
              uint64_t v78 = *(void *)(v33 + 24);
              BOOL v25 = __OFSUB__(v78, v79);
              uint64_t v80 = v78 - v79;
              if (v25) {
                goto LABEL_308;
              }
              _BPlistEncodingFormat.Writer.append(_:count:)(7, v80 / 2);
              uint64_t v81 = v36;
              uint64_t v137 = *(void *)(v36 + 24);
              uint64_t v138 = *(void *)(v36 + 16);
              swift_retain();
              swift_retain();
              specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v138, v137, (void *)(v35 & 0x3FFFFFFFFFFFFFFFLL));
              swift_release();
              swift_release();
              goto LABEL_159;
            case 3uLL:
              _BPlistEncodingFormat.Writer.append(_:count:)(7, 0);
              unint64_t v37 = v139 & 0xFF00000000000000;
              uint64_t v38 = 0;
              v139 &= 0xFF00000000000000;
              goto LABEL_155;
            default:
              _BPlistEncodingFormat.Writer.append(_:count:)(7, (v34 >> 49) & 0x7F);
              unint64_t v37 = v140 & 0xFF00000000000000 | v35 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v38 = v36;
              unint64_t v140 = v37;
LABEL_155:
              uint64_t v81 = v36;
              specialized Data.InlineData.withUnsafeBytes<A>(_:)(v38, v37);
              goto LABEL_159;
          }
LABEL_163:
          outlined consume of _BPlistEncodingFormat.Reference.Backing(v30, v29, v31, v32);
LABEL_164:
          swift_release();
LABEL_165:
          uint64_t v5 = v149;
          a2 = v150;
          uint64_t v7 = v148;
          break;
      }
    }
    ++v15;
  }
  while (v7 != v15);
  swift_release();
  swift_release();
  uint64_t v14 = "_GenericObjCError";
  if (v151)
  {
LABEL_170:
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v86 = 0;
    long long v147 = *((_OWORD *)v14 + 124);
    do
    {
      uint64_t v89 = *(void *)(v5 + 8 * v86 + 32);
      unsigned int v90 = (void *)*v4;
      if (*(void *)(v89 + 48) == *(void *)(*v4 + 16))
      {
        uint64_t v92 = v4[4];
        uint64_t v91 = v4[5];
        unint64_t v93 = v4[6];
        uint64_t v94 = 0;
        switch(v93 >> 62)
        {
          case 1uLL:
            LODWORD(v94) = HIDWORD(v91) - v91;
            if (__OFSUB__(HIDWORD(v91), v91)) {
              goto LABEL_282;
            }
            uint64_t v94 = (int)v94;
LABEL_181:
            uint64_t v98 = v94 + v92;
            if (__OFADD__(v94, v92)) {
              goto LABEL_278;
            }
            swift_retain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unsigned int v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v90[2] + 1, 1, v90);
            }
            unint64_t v100 = v90[2];
            unint64_t v99 = v90[3];
            if (v100 >= v99 >> 1) {
              unsigned int v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v99 > 1), v100 + 1, 1, v90);
            }
            break;
          case 2uLL:
            uint64_t v97 = v91 + 16;
            uint64_t v96 = *(void *)(v91 + 16);
            uint64_t v95 = *(void *)(v97 + 8);
            BOOL v25 = __OFSUB__(v95, v96);
            uint64_t v94 = v95 - v96;
            if (!v25) {
              goto LABEL_181;
            }
            goto LABEL_281;
          case 3uLL:
            goto LABEL_181;
          default:
            uint64_t v94 = BYTE6(v93);
            goto LABEL_181;
        }
        v90[2] = v100 + 1;
        v90[v100 + 4] = v98;
        *Swift::Int64 v4 = v90;
        uint64_t v101 = *(void *)(v89 + 16);
        unint64_t v102 = *(void *)(v89 + 24);
        uint64_t v103 = *(void *)(v89 + 32);
        unsigned int v104 = *(unsigned __int8 *)(v89 + 40);
        switch(v104 >> 4)
        {
          case 1u:
            if (v92 == 0x2000)
            {
              uint64_t v119 = (unsigned char *)v4[2];
              if (v119) {
                uint64_t v120 = v119 + 0x2000;
              }
              else {
                uint64_t v120 = 0;
              }
              Data._Representation.append(contentsOf:)(v119, v120);
              uint64_t v92 = 0;
            }
            *(unsigned char *)(v4[2] + v92) = 20;
            uint64_t v5 = v149;
            if (__OFADD__(v92, 1)) {
              goto LABEL_292;
            }
            v4[4] = v92 + 1;
            *(void *)&__src[0] = 0;
            _BPlistEncodingFormat.Writer.write(_:)((char *)__src, 8);
            goto LABEL_232;
          case 2u:
            if ((unint64_t)v101 <= 0xFF)
            {
              uint64_t v5 = v149;
              if (v92 == 0x2000)
              {
                uint64_t v126 = (unsigned char *)v4[2];
                if (v126) {
                  unint64_t v127 = v126 + 0x2000;
                }
                else {
                  unint64_t v127 = 0;
                }
                Data._Representation.append(contentsOf:)(v126, v127);
                uint64_t v92 = 0;
              }
              *(unsigned char *)(v4[2] + v92) = 16;
              if (__OFADD__(v92, 1)) {
                goto LABEL_297;
              }
              v4[4] = v92 + 1;
              LOBYTE(__src[0]) = v101;
              uint64_t v88 = 1;
            }
            else
            {
              uint64_t v5 = v149;
              if ((unint64_t)v101 >> 16)
              {
                if (HIDWORD(v101))
                {
                  _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 3);
LABEL_232:
                  *(void *)&__src[0] = bswap64(v101);
                  uint64_t v88 = 8;
                }
                else
                {
                  _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 2);
                  LODWORD(__src[0]) = bswap32(v101);
                  uint64_t v88 = 4;
                }
              }
              else
              {
                _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 1);
                LOWORD(__src[0]) = bswap32(v101) >> 16;
                uint64_t v88 = 2;
              }
            }
LABEL_173:
            _BPlistEncodingFormat.Writer.write(_:)((char *)__src, v88);
            swift_release();
            break;
          case 3u:
            if (v92 == 0x2000)
            {
              uint64_t v115 = (unsigned char *)v4[2];
              if (v115) {
                uint64_t v116 = v115 + 0x2000;
              }
              else {
                uint64_t v116 = 0;
              }
              Data._Representation.append(contentsOf:)(v115, v116);
              uint64_t v92 = 0;
            }
            *(unsigned char *)(v4[2] + v92) = 35;
            uint64_t v87 = v92 + 1;
            uint64_t v5 = v149;
            if (!__OFADD__(v92, 1)) {
              goto LABEL_172;
            }
            goto LABEL_289;
          case 4u:
            if (v92 == 0x2000)
            {
              unint64_t v110 = (unsigned char *)v4[2];
              if (v110) {
                unint64_t v111 = v110 + 0x2000;
              }
              else {
                unint64_t v111 = 0;
              }
              Data._Representation.append(contentsOf:)(v110, v111);
              uint64_t v92 = 0;
            }
            *(unsigned char *)(v4[2] + v92) = 34;
            uint64_t v5 = v149;
            if (__OFADD__(v92, 1)) {
              goto LABEL_290;
            }
            v4[4] = v92 + 1;
            LODWORD(__src[0]) = bswap32(v101);
            uint64_t v88 = 4;
            goto LABEL_173;
          case 5u:
            uint64_t v121 = swift_retain();
            _BPlistEncodingFormat.Writer.append(_:)(v121);
            goto LABEL_273;
          case 6u:
            swift_retain();
            swift_retain();
            swift_retain();
            _BPlistEncodingFormat.Writer.append(_:)(v101, v102, v103);
            swift_release();
            swift_release();
            swift_release();
            goto LABEL_274;
          case 7u:
            if (v92 == 0x2000)
            {
              uint64_t v117 = (unsigned char *)v4[2];
              if (v117) {
                unint64_t v118 = v117 + 0x2000;
              }
              else {
                unint64_t v118 = 0;
              }
              Data._Representation.append(contentsOf:)(v117, v118);
              uint64_t v92 = 0;
            }
            *(unsigned char *)(v4[2] + v92) = 51;
            uint64_t v87 = v92 + 1;
            uint64_t v5 = v149;
            if (__OFADD__(v92, 1)) {
              goto LABEL_291;
            }
LABEL_172:
            v4[4] = v87;
            *(void *)&__src[0] = bswap64(v101);
            uint64_t v88 = 8;
            goto LABEL_173;
          case 8u:
            switch(v102 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v101), v101)) {
                  goto LABEL_306;
                }
                outlined copy of Data._Representation(*(void *)(v89 + 16), *(void *)(v89 + 24));
                _BPlistEncodingFormat.Writer.append(_:count:)(5, HIDWORD(v101) - (int)v101);
                if (v101 >> 32 < (int)v101) {
                  goto LABEL_307;
                }
                swift_retain();
                specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v101, v101 >> 32, (void *)(v102 & 0x3FFFFFFFFFFFFFFFLL));
                outlined consume of _BPlistEncodingFormat.Reference.Backing(v101, v102, v103, v104);
                break;
              case 2uLL:
                uint64_t v131 = *(void *)(v101 + 16);
                uint64_t v130 = *(void *)(v101 + 24);
                Swift::Int64 v132 = v130 - v131;
                if (__OFSUB__(v130, v131)) {
                  goto LABEL_304;
                }
                outlined copy of Data._Representation(*(void *)(v89 + 16), *(void *)(v89 + 24));
                _BPlistEncodingFormat.Writer.append(_:count:)(5, v132);
                uint64_t v133 = *(void *)(v101 + 16);
                uint64_t v134 = *(void *)(v101 + 24);
                swift_retain();
                swift_retain();
                specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v133, v134, (void *)(v102 & 0x3FFFFFFFFFFFFFFFLL));
                swift_release();
                swift_release();
                goto LABEL_273;
              case 3uLL:
                _BPlistEncodingFormat.Writer.append(_:count:)(5, 0);
                unint64_t v122 = v146 & 0xFF00000000000000;
                uint64_t v123 = 0;
                v146 &= 0xFF00000000000000;
                goto LABEL_264;
              default:
                _BPlistEncodingFormat.Writer.append(_:count:)(5, BYTE6(v102));
                unint64_t v122 = v145 & 0xFF00000000000000 | v102 & 0xFFFFFFFFFFFFFFLL;
                uint64_t v123 = v101;
                unint64_t v145 = v122;
LABEL_264:
                specialized Data.InlineData.withUnsafeBytes<A>(_:)(v123, v122);
                goto LABEL_273;
            }
            goto LABEL_273;
          case 9u:
            if (v103 | v102 | v101 || v104 != 144)
            {
              BOOL v125 = v104 == 144 && v101 == 1 && (v103 | v102) == 0;
              uint64_t v5 = v149;
              if (!v125)
              {
                __src[0] = v147;
                _BPlistEncodingFormat.Writer.append(_:count:)(6, 5);
                _BPlistEncodingFormat.Writer.write(_:)((char *)__src, 5);
                swift_release();
                swift_bridgeObjectRelease();
                break;
              }
              if (v92 == 0x2000)
              {
                unint64_t v128 = (unsigned char *)v4[2];
                if (v128) {
                  uint64_t v129 = v128 + 0x2000;
                }
                else {
                  uint64_t v129 = 0;
                }
                Data._Representation.append(contentsOf:)(v128, v129);
                uint64_t v92 = 0;
              }
              *(unsigned char *)(v4[2] + v92) = 8;
              swift_release();
              uint64_t v114 = v92 + 1;
              if (__OFADD__(v92, 1)) {
                goto LABEL_305;
              }
            }
            else
            {
              uint64_t v5 = v149;
              if (v92 == 0x2000)
              {
                long long v112 = (unsigned char *)v4[2];
                if (v112) {
                  Swift::String v113 = v112 + 0x2000;
                }
                else {
                  Swift::String v113 = 0;
                }
                Data._Representation.append(contentsOf:)(v112, v113);
                uint64_t v92 = 0;
              }
              *(unsigned char *)(v4[2] + v92) = 9;
              swift_release();
              uint64_t v114 = v92 + 1;
              if (__OFADD__(v92, 1)) {
                goto LABEL_298;
              }
            }
            v4[4] = v114;
            break;
          default:
            if (v104)
            {
              *(void *)&__src[0] = *(void *)(v89 + 16);
              *((void *)&__src[0] + 1) = v102;
              swift_bridgeObjectRetain_n();
              specialized String.withUTF8<A>(_:)((uint64_t *)__src);
              swift_bridgeObjectRelease();
            }
            else
            {
              *(void *)&__src[0] = 2415919360;
              swift_bridgeObjectRetain();
              unint64_t v105 = String.data(using:allowLossyConversion:)((uint64_t *)__src, 0, v101, v102);
              if (v106 >> 60 == 15) {
                goto LABEL_316;
              }
              unint64_t v107 = v106;
              uint64_t v108 = v105;
              uint64_t v109 = 0;
              switch(v106 >> 62)
              {
                case 1uLL:
                  LODWORD(v109) = HIDWORD(v105) - v105;
                  if (__OFSUB__(HIDWORD(v105), v105)) {
                    goto LABEL_311;
                  }
                  uint64_t v109 = (int)v109;
LABEL_272:
                  _BPlistEncodingFormat.Writer.append(_:count:)(7, v109 / 2);
                  specialized Data._Representation.withUnsafeBytes<A>(_:)(v108, v107);
                  outlined consume of Data?(v108, v107);
                  break;
                case 2uLL:
                  uint64_t v136 = *(void *)(v105 + 16);
                  uint64_t v135 = *(void *)(v105 + 24);
                  BOOL v25 = __OFSUB__(v135, v136);
                  uint64_t v109 = v135 - v136;
                  if (!v25) {
                    goto LABEL_272;
                  }
                  goto LABEL_312;
                case 3uLL:
                  goto LABEL_272;
                default:
                  uint64_t v109 = BYTE6(v106);
                  goto LABEL_272;
              }
            }
LABEL_273:
            outlined consume of _BPlistEncodingFormat.Reference.Backing(v101, v102, v103, v104);
LABEL_274:
            swift_release();
            uint64_t v5 = v149;
            break;
        }
      }
      ++v86;
    }
    while (v151 != v86);
    swift_release();
    swift_release();
    swift_release();
  }
}

void _BPlistEncodingFormat.Writer.write(_:)(char *__src, uint64_t a2)
{
  if (a2 < 1) {
    return;
  }
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v2 + 32);
  if ((unint64_t)a2 < 0x2000)
  {
    uint64_t v7 = 0x2000 - v6;
    if (__OFSUB__(0x2000, v6))
    {
      __break(1u);
    }
    else
    {
      if (v7 >= a2) {
        uint64_t v8 = a2;
      }
      else {
        uint64_t v8 = 0x2000 - v6;
      }
      if (v7 < a2) {
        goto LABEL_8;
      }
      if (!*(void *)(v3 + 16))
      {
LABEL_23:
        __break(1u);
        return;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      if (!__OFADD__(v6, v8))
      {
        *(void *)(v3 + 32) = v6 + v8;
        return;
      }
    }
    __break(1u);
    goto LABEL_23;
  }
LABEL_8:
  if (v6 >= 1)
  {
    uint64_t v9 = *(unsigned char **)(v3 + 16);
    if (v9) {
      uint64_t v10 = &v9[v6];
    }
    else {
      uint64_t v10 = 0;
    }
    Data._Representation.append(contentsOf:)(v9, v10);
    *(void *)(v3 + 32) = 0;
  }
  if (__src) {
    unint64_t v11 = &__src[a2];
  }
  else {
    unint64_t v11 = 0;
  }
  Data._Representation.append(contentsOf:)(__src, v11);
}

void _BPlistEncodingFormat.Writer.append(_:count:)(char a1, Swift::Int64 a2)
{
  char v4 = byte_1821A6E1E[a1];
  if (a2 <= 14)
  {
    if (a2 < 0)
    {
LABEL_18:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    char v5 = v4 | a2;
    uint64_t v9 = *(void *)(v2 + 32);
    if (v9 != 0x2000)
    {
      *(unsigned char *)(*(void *)(v2 + 16) + v9) = v5;
      BOOL v7 = __OFADD__(v9, 1);
      uint64_t v12 = v9 + 1;
      if (!v7)
      {
        *(void *)(v2 + 32) = v12;
        return;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
  }
  else
  {
    char v5 = v4 | 0xF;
    uint64_t v6 = *(void *)(v2 + 32);
    if (v6 != 0x2000)
    {
      *(unsigned char *)(*(void *)(v2 + 16) + v6) = v5;
      BOOL v7 = __OFADD__(v6, 1);
      uint64_t v8 = v6 + 1;
      if (!v7)
      {
        *(void *)(v2 + 32) = v8;
LABEL_11:
        _BPlistEncodingFormat.Writer.append(_:)(a2);
        return;
      }
      goto LABEL_17;
    }
  }
  uint64_t v10 = *(unsigned char **)(v2 + 16);
  if (v10) {
    unint64_t v11 = v10 + 0x2000;
  }
  else {
    unint64_t v11 = 0;
  }
  Data._Representation.append(contentsOf:)(v10, v11);
  **(unsigned char **)(v2 + 16) = v5;
  *(void *)(v2 + 32) = 1;
  if (a2 >= 15) {
    goto LABEL_11;
  }
}

Swift::Void __swiftcall _BPlistEncodingFormat.Writer.append(_:)(Swift::Int64 a1)
{
  v3[1] = *MEMORY[0x1E4F143B8];
  if ((unint64_t)a1 <= 0xFF)
  {
    _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 0);
    LOBYTE(v3[0]) = a1;
    uint64_t v2 = 1;
  }
  else if ((unint64_t)a1 >> 16)
  {
    if (HIDWORD(a1))
    {
      _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 3);
      v3[0] = bswap64(a1);
      uint64_t v2 = 8;
    }
    else
    {
      _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 2);
      LODWORD(v3[0]) = bswap32(a1);
      uint64_t v2 = 4;
    }
  }
  else
  {
    _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 1);
    LOWORD(v3[0]) = bswap32(a1) >> 16;
    uint64_t v2 = 2;
  }
  _BPlistEncodingFormat.Writer.write(_:)((char *)v3, v2);
}

void _BPlistEncodingFormat.Writer.write(_:subtype:)(char a1, char a2)
{
  char v3 = byte_1821A6E1E[a1] | a2;
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 == 0x2000)
  {
    char v5 = *(unsigned char **)(v2 + 16);
    if (v5) {
      uint64_t v6 = v5 + 0x2000;
    }
    else {
      uint64_t v6 = 0;
    }
    Data._Representation.append(contentsOf:)(v5, v6);
    uint64_t v4 = 0;
  }
  *(unsigned char *)(*(void *)(v2 + 16) + v4) = v3;
  BOOL v7 = __OFADD__(v4, 1);
  uint64_t v8 = v4 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    *(void *)(v2 + 32) = v8;
  }
}

uint64_t _NSScanDoubleFromString(void *a1, void *a2, double *a3, unint64_t *a4, void *a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  long long v47 = 0u;
  memset(v46, 0, sizeof(v46));
  long long v44 = 0u;
  long long v45 = 0u;
  uint64_t v41 = (char *)&v43 + 15;
  uint64_t v9 = (void *)[a5 objectForKey:*MEMORY[0x1E4F1C418]];
  if (!v9)
  {
    uint64_t v9 = (void *)[a5 objectForKey:@"NSDecimalSeparator"];
    if (!v9)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        uint64_t v9 = 0;
        goto LABEL_9;
      }
      uint64_t v9 = (void *)[a5 decimalSeparator];
      if (!v9) {
        goto LABEL_9;
      }
    }
  }
  if (![v9 length])
  {
LABEL_9:
    int v39 = 46;
    goto LABEL_10;
  }
  int v39 = [v9 characterAtIndex:0];
LABEL_10:
  unint64_t v10 = *a4;
  unint64_t v11 = [a1 length];
  *((void *)&v45 + 1) = v11;
  *(void *)&v46[0] = v10;
  *(void *)&long long v45 = a1;
  if (v11 <= v10)
  {
    *(void *)&long long v44 = 0;
    unsigned int v13 = 0xFFFF;
  }
  else
  {
    if (v11 - v10 >= 0x20) {
      uint64_t v12 = 32;
    }
    else {
      uint64_t v12 = v11 - v10;
    }
    *(void *)&long long v44 = v12;
    objc_msgSend(a1, sel_getUid("getCharacters:range:"), (char *)v46 + 8, v10, v12);
    unsigned int v13 = WORD4(v46[0]);
  }
  WORD4(v47) = v13;
  uint64_t v14 = 1;
  *((void *)&v44 + 1) = 1;
  if (a2)
  {
    if (objc_msgSend(a2, "characterIsMember:"))
    {
      do
      {
        uint64_t v15 = *((void *)&v44 + 1);
        if (*((void *)&v44 + 1) - 1 >= (unint64_t)v44) {
          break;
        }
        if (*((void *)&v44 + 1) >= (unint64_t)v44)
        {
          uint64_t v17 = *(void *)&v46[0] + v44;
          if (*((void *)&v45 + 1) > *(void *)&v46[0] + (void)v44)
          {
            if (*((void *)&v45 + 1) - (*(void *)&v46[0] + (void)v44) >= 0x20uLL) {
              uint64_t v18 = 32;
            }
            else {
              uint64_t v18 = *((void *)&v45 + 1) - (*(void *)&v46[0] + v44);
            }
            *(void *)&v46[0] += v44;
            *(void *)&long long v44 = v18;
            objc_msgSend((id)v45, sel_getUid("getCharacters:range:"), (char *)v46 + 8, v17, v18);
            WORD4(v47) = WORD4(v46[0]);
            *((void *)&v44 + 1) = 1;
            continue;
          }
          *((void *)&v44 + 1) = v44 + 1;
          __int16 v16 = -1;
        }
        else
        {
          ++*((void *)&v44 + 1);
          __int16 v16 = *((_WORD *)v46 + v15 + 4);
        }
        WORD4(v47) = v16;
      }
      while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
    }
    unsigned int v13 = WORD4(v47);
    uint64_t v14 = *((void *)&v44 + 1);
  }
  unint64_t v19 = *a4;
  __int16 v40 = v13;
  if (v13 <= 0x7F && (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v13 + 60) & 0x4000) != 0) {
    return 0;
  }
  uint64_t v35 = *(void *)&v46[0];
  uint64_t v36 = v14;
  unint64_t v37 = a4;
  unint64_t v20 = 0;
  size_t v21 = 0;
  uint64_t v34 = ~v19;
  uint64_t v22 = (char *)v42;
  uint64_t v23 = (char *)v42;
  while (1)
  {
    LOBYTE(v24) = v13;
    if ((unsigned __int16)v13 <= 0x7Fu)
    {
      if ((__NSNumberSet[(unint64_t)(unsigned __int16)v13 >> 3] >> (v13 & 7))) {
        goto LABEL_42;
      }
      if (!_NSCheckDecimalSeparator((uint64_t *)&v44, &v40, v39, v9)) {
        goto LABEL_58;
      }
      goto LABEL_40;
    }
    int32_t v25 = u_charDigitValue((unsigned __int16)v13);
    if (v25 == -1) {
      break;
    }
    __int16 v24 = v25 + 48;
LABEL_41:
    __int16 v40 = v24;
LABEL_42:
    if (v22 >= v41)
    {
      v21 += 128;
      if (v20)
      {
        uint64_t result = MEMORY[0x185306D80](v20, v21, 2752068208, &__block_literal_global_45);
        if (!result) {
          return result;
        }
        uint64_t v23 = (char *)result;
        LOBYTE(v24) = v40;
      }
      else
      {
        uint64_t v23 = (char *)malloc_type_malloc(v21, 0xA5222156uLL);
        long long v27 = v43;
        long long v29 = v42[0];
        long long v28 = v42[1];
        *((_OWORD *)v23 + 2) = v42[2];
        *((_OWORD *)v23 + 3) = v27;
        *(_OWORD *)uint64_t v23 = v29;
        *((_OWORD *)v23 + 1) = v28;
        unint64_t v20 = (char *)v42;
      }
      uint64_t v22 = &v23[v22 - v20];
      uint64_t v41 = &v23[v21 - 1];
      unint64_t v20 = v23;
    }
    *v22++ = v24;
    uint64_t v30 = *((void *)&v44 + 1);
    if (*((void *)&v44 + 1) < (unint64_t)v44)
    {
      ++*((void *)&v44 + 1);
      LOWORD(v13) = *((_WORD *)v46 + v30 + 4);
LABEL_56:
      WORD4(v47) = v13;
      goto LABEL_57;
    }
    uint64_t v31 = *(void *)&v46[0] + v44;
    if (*((void *)&v45 + 1) <= *(void *)&v46[0] + (void)v44)
    {
      *((void *)&v44 + 1) = v44 + 1;
      LOWORD(v13) = -1;
      goto LABEL_56;
    }
    if (*((void *)&v45 + 1) - (*(void *)&v46[0] + (void)v44) >= 0x20uLL) {
      uint64_t v32 = 32;
    }
    else {
      uint64_t v32 = *((void *)&v45 + 1) - (*(void *)&v46[0] + v44);
    }
    *(void *)&v46[0] += v44;
    *(void *)&long long v44 = v32;
    objc_msgSend((id)v45, sel_getUid("getCharacters:range:"), (char *)v46 + 8, v31, v32);
    LOWORD(v13) = WORD4(v46[0]);
    WORD4(v47) = WORD4(v46[0]);
    *((void *)&v44 + 1) = 1;
LABEL_57:
    __int16 v40 = v13;
  }
  if (_NSCheckDecimalSeparator((uint64_t *)&v44, &v40, v39, v9))
  {
LABEL_40:
    __int16 v24 = 46;
    goto LABEL_41;
  }
LABEL_58:
  char *v22 = 0;
  double v33 = strtod_l(v23, &v41, 0);
  if (v20) {
    free(v20);
  }
  if (v41 == v23) {
    return 0;
  }
  *v37 += (unint64_t)&v41[v36 + v35 + v34 - (void)v23];
  if (a3) {
    *a3 = v33;
  }
  return 1;
}

uint64_t _NSCheckDecimalSeparator(uint64_t *a1, _WORD *a2, int a3, void *a4)
{
  if (a4) {
    unint64_t v8 = [a4 length];
  }
  else {
    unint64_t v8 = 1;
  }
  int v9 = (unsigned __int16)*a2;
  BOOL v10 = v9 == a3 && v8 == 1;
  if (v10) {
    return 1;
  }
  uint64_t result = 0;
  if (a4 && v9 == a3)
  {
    if (v8 >= 2)
    {
      uint64_t v12 = 2;
      while (1)
      {
        uint64_t v13 = *a1;
        unint64_t v14 = a1[1];
        if (v14 >= *a1)
        {
          unint64_t v16 = a1[3];
          unint64_t v17 = a1[4] + v13;
          if (v16 > v17)
          {
            a1[4] = v17;
            if (v16 - v17 >= 0x20) {
              uint64_t v18 = 32;
            }
            else {
              uint64_t v18 = v16 - v17;
            }
            *a1 = v18;
            objc_msgSend((id)a1[2], sel_getUid("getCharacters:range:"), a1 + 5, v17, v18);
            int v15 = *((unsigned __int16 *)a1 + 20);
            *((_WORD *)a1 + 52) = v15;
            a1[1] = 1;
            goto LABEL_21;
          }
          a1[1] = v13 + 1;
          int v15 = 0xFFFF;
        }
        else
        {
          a1[1] = v14 + 1;
          int v15 = *((unsigned __int16 *)a1 + v14 + 20);
        }
        *((_WORD *)a1 + 52) = v15;
LABEL_21:
        *a2 = v15;
        BOOL v10 = v15 == [a4 characterAtIndex:v12 - 1];
        uint64_t result = v10;
        if (!v10 || v8 == v12++) {
          return result;
        }
      }
    }
    return 1;
  }
  return result;
}

void _NSCStringToDecimal(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = [[NSString alloc] initWithCString:a1 encoding:4];
  v7[0] = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  _NSStringToDecimal(v6, v7, a3);
  *a2 = a1 + v7[0];
}

uint64_t _NSStringToDecimal(void *a1, void *a2, uint64_t a3)
{
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)((unint64_t)v5, v6, 0x2EuLL, 0xE100000000000000, 0, (uint64_t)v12);
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v12, (uint64_t)v13);
  if (v16 == 1)
  {
    *a2 = 0;
  }
  else
  {
    int v7 = v13[0];
    uint64_t v8 = HIWORD(v13[0]);
    uint64_t v9 = HIDWORD(v13[0]);
    int v10 = v14;
    *a2 = v15;
    *(_DWORD *)a3 = v7;
    *(_WORD *)(a3 + 4) = v9;
    *(_WORD *)(a3 + 6) = v8;
    *(void *)(a3 + 8) = v13[1];
    *(_DWORD *)(a3 + 16) = v10;
  }
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with take of NSDecimal.DecimalParseResult(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t IndexPath.description.getter()
{
  uint64_t result = 23899;
  switch(*(unsigned char *)(v0 + 16))
  {
    case 1:
      v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v2);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = 8236;
      v3._object = (void *)0xE200000000000000;
      String.append(_:)(v3);
      goto LABEL_3;
    case 2:
      uint64_t result = MEMORY[0x1853025A0](*(void *)v0, MEMORY[0x1E4FBB550]);
      break;
    case 3:
      return result;
    default:
LABEL_3:
      v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._countAndFlagsBits = 93;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      uint64_t result = 91;
      break;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes()
{
  return &type metadata for AttributeScopes;
}

void protocol witness for Cancellable.cancel() in conformance NSObject.KVOSubscription<A, B, C>()
{
}

void sub_181962A40(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15)
{
  objc_begin_catch(a1);
  os_unfair_recursive_lock_unlock();
  *(void *)(v15 + 32) = a9;
  *(void *)(v15 + 40) = a10;
  *(void *)(v15 + 48) = a11;
  *(void *)(v15 + 56) = a12;
  *(void *)(v15 + 64) = a13;
  *(unsigned char *)(v15 + 72) = a15;
  objc_exception_rethrow();
}

void sub_181962A84(_Unwind_Exception *a1)
{
}

void sub_181962B98(void *a1)
{
}

void sub_181962BBC(_Unwind_Exception *a1)
{
}

void NSProgress.throughput.setter(uint64_t a1, char a2, SEL *a3)
{
  if (a2)
  {
    Swift::String v5 = *a3;
    objc_msgSend(v3, v5, 0);
  }
  else
  {
    id v6 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, a1);
    objc_msgSend(v3, *a3, v6);
  }
}

void NSKVOForwardInvocation(void *a1, const char *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  Class Class = object_getClass(a1);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  uint64_t v8 = (const void *)[a3 selector];
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v9 = objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], v8), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  if (v9)
  {
    [a1 willChangeValueForKey:v9];
    strcpy((char *)&__source, "_original_");
    Name = sel_getName((SEL)v8);
    size_t v11 = strlen(Name);
    size_t v12 = v11 + 11;
    MEMORY[0x1F4188790](v11);
    int v14 = (char *)&v15 - ((v13 + 26) & 0xFFFFFFFFFFFFFFF0);
    strlcpy(v14, (const char *)&__source, v12);
    strlcat(v14, Name, v12);
    [a3 setSelector:sel_registerName(v14)];
    [a3 invoke];
    [a1 didChangeValueForKey:v9];
  }
  else
  {
    __source.receiver = a1;
    __source.super_class = *IndexedIvars;
    objc_msgSendSuper(&__source, a2, a3);
  }
}

Swift::Void __swiftcall NSKeyValueObservation.invalidate()()
{
  uint64_t v1 = MEMORY[0x185309640](v0 + OBJC_IVAR____NSKeyValueObservation_helper);
  if (v1)
  {
    Swift::String v2 = (void *)v1;
    NSKeyValueObservation.Helper.invalidate()();
  }

  swift_unknownObjectWeakAssign();
}

void NSKeyValueObservation.Helper.invalidate()()
{
  uint64_t v1 = *(os_unfair_lock_s **)&v0[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_lock];
  os_unfair_lock_lock(v1);
  Swift::String v2 = *(void **)&v0[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_unsafeUnretainedObject];
  if (v2)
  {
    id v3 = v2;
LABEL_4:
    id v4 = v3;
    closure #1 in NSKeyValueObservation.Helper.invalidate()(v0, v3);

    return;
  }
  id v3 = (id)MEMORY[0x185309640](&v0[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_weakObject]);
  if (v3) {
    goto LABEL_4;
  }

  os_unfair_lock_unlock(v1);
}

void closure #1 in NSKeyValueObservation.Helper.invalidate()(char *a1, void *a2)
{
  *(void *)&a1[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_unsafeUnretainedObject] = 0;
  objc_msgSend(a2, sel_removeObserver_forKeyPath_context_, a1, String._bridgeToObjectiveCImpl()(), 0);
  swift_unknownObjectRelease();
  objc_setAssociatedObject(a2, a1, 0, 0);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)&a1[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_lock]);
}

void sub_181963900(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21,uint64_t a22)
{
  if (a2 == 2)
  {
    if (objc_msgSend((id)objc_msgSend(objc_begin_catch(exc_buf), "name"), "isEqualToString:", *MEMORY[0x1E4F1C4A8]))
    {
      objc_opt_class();
      [v24 keyPath];
      objc_opt_class();
      objc_opt_class();
      uint64_t v30 = +[NSString stringWithFormat:@"Cannot remove an observer <%@ %p> for the key path \"%@\" from <%@ %p>, most likely because the value for the key \"%@\" has changed without an appropriate KVO notification being sent. Check the KVO-compliance of the %@ class."];
      objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v30 userInfo:0]);
    }
    objc_exception_rethrow();
  }
  objc_begin_catch(exc_buf);
  *(void *)uint64_t v22 = v23;
  *(void *)(v22 + 8) = v26;
  *(void *)(v22 + 16) = v25;
  *(void *)(v22 + 24) = v29;
  *(void *)(v22 + 32) = v27;
  *(unsigned char *)(v22 + 40) = v28;
  os_unfair_recursive_lock_lock_with_options();
  objc_exception_rethrow();
}

void sub_181963A24(_Unwind_Exception *a1)
{
}

void sub_181963B38(void *a1)
{
  objc_begin_catch(a1);
  *(void *)(v2 + 32) = v1;
  *(void *)(v2 + 40) = v7;
  *(void *)(v2 + 48) = v6;
  *(void *)(v2 + 56) = v5;
  *(void *)(v2 + 64) = v4;
  *(unsigned char *)(v2 + 72) = v3;
  objc_exception_rethrow();
}

void sub_181963B54(_Unwind_Exception *a1)
{
}

void sub_181963C18(void *a1)
{
}

void sub_181963C30(_Unwind_Exception *a1)
{
}

void sub_181963EC0(_Unwind_Exception *a1)
{
}

void sub_181963EC8(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    uint64_t v5 = _NSKeyValueRetainedObservationInfoForObject(v2, *(void *)(v3 + 8));
    _NSKeyValueReplaceObservationInfoForObject(v2, *(void *)(v3 + 8), v5, v4);
    if (v5) {

    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(exc_buf);
}

void sub_181963F0C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x181963DECLL);
  }
  _Unwind_Resume(a1);
}

void sub_181963F2C(_Unwind_Exception *a1)
{
  if (v1) {
    JUMPOUT(0x181963F34);
  }
  _Unwind_Resume(a1);
}

void sub_181963F3C(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x181963F48);
}

unsigned char *_NSKeyValueObservationInfoCreateByRemoving(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char *a7, NSKeyValueObservance **a8)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  *a7 = 0;
  *a8 = 0;
  unint64_t Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
  size_t v17 = 8 * Count;
  int v39 = a7;
  unint64_t v40 = 8 * Count;
  if (8 * Count < 0x81)
  {
    if (Count)
    {
      MEMORY[0x1F4188790](v17);
      uint64_t v18 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v18, v20);
    }
    else
    {
      uint64_t v18 = 0;
    }
  }
  else
  {
    uint64_t v18 = (char *)malloc_type_malloc(v17, 0x80040B8603338uLL);
  }
  v42.location = 0;
  v42.length = Count;
  CFArrayGetValues(*(CFArrayRef *)(a1 + 8), v42, (const void **)v18);
  if ((uint64_t)(Count - 1) < 0)
  {
LABEL_22:
    if (!*a8)
    {
      uint64_t v31 = 0;
      goto LABEL_37;
    }
    uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v21 = Count - 1;
    while (1)
    {
      uint64_t v22 = *(void *)&v18[8 * v21];
      if (*(void *)(v22 + 16) == a3)
      {
        uint64_t v23 = (*(unsigned char *)(v22 + 40) & 0x20) != 0 ? 8 : 32;
        if (*(void *)(v22 + v23) == a2 && (*(void *)(v22 + 24) == a4 || (a5 & 1) == 0))
        {
          uint64_t v24 = (*(unsigned char *)(v22 + 40) & 0x20) != 0 ? *(void *)(v22 + 32) : 0;
          if (!a6 || v24 == a6) {
            break;
          }
        }
      }
      if (v21-- <= 0) {
        goto LABEL_22;
      }
    }
    *a8 = (NSKeyValueObservance *)v22;
  }
  if (Count >= 2)
  {
    os_unfair_lock_lock_with_options();
    if (!qword_1EB1ED258)
    {
      uint64_t v26 = [[NSPointerFunctions alloc] initWithOptions:5];
      [(NSPointerFunctions *)v26 setHashFunction:NSKeyValueShareableObservationInfoNSHTHash];
      [(NSPointerFunctions *)v26 setIsEqualFunction:NSKeyValueShareableObservationInfoNSHTIsEqual];
      qword_1EB1ED258 = [[NSHashTable alloc] initWithPointerFunctions:v26 capacity:0];
    }
    if (!qword_1EB1ED260) {
      qword_1EB1ED260 = self;
    }
    uint64_t v27 = (NSKeyValueShareableObservationInfoKey *)qword_1EB1ED280;
    if (!qword_1EB1ED280)
    {
      uint64_t v27 = objc_alloc_init(NSKeyValueShareableObservationInfoKey);
      qword_1EB1ED280 = (uint64_t)v27;
    }
    v27->_addingNotRemoving = 0;
    v27->_baseObservationInfo = (NSKeyValueObservationInfo *)a1;
    v27->_removalObservance = *a8;
    v27->_removalObservanceIndex = v21;
    *(void *)(qword_1EB1ED280 + 80) = NSKeyValueShareableObservationInfoNSHTHash((uint64_t)v27);
    char v28 = (unsigned char *)objc_msgSend((id)qword_1EB1ED258, "member:");
    uint64_t v29 = qword_1EB1ED280;
    *(void *)(qword_1EB1ED280 + 64) = 0;
    *(void *)(v29 + 16) = 0;
    uint64_t v30 = *(void *)(v29 + 80);
    *(void *)(v29 + 80) = 0;
    if (v28)
    {
      uint64_t v31 = v28;
      uint64_t v32 = v28;
      char v33 = 1;
    }
    else
    {
      memmove(&v18[8 * v21], &v18[8 * v21 + 8], 8 * Count - (8 * v21 + 8));
      uint64_t v36 = [[NSKeyValueObservationInfo alloc] _initWithObservances:v18 count:Count - 1 hashValue:v30];
      uint64_t v31 = v36;
      if (v36)
      {
        char v33 = v36[24];
        uint64_t v34 = v39;
        if (v33)
        {
          unint64_t v37 = (void *)MEMORY[0x185308110]();
          [(id)qword_1EB1ED258 addObject:v31];
          char v33 = 0;
        }
        goto LABEL_34;
      }
      char v33 = 0;
    }
    uint64_t v34 = v39;
LABEL_34:
    char *v34 = v33;
    os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_100);
    goto LABEL_37;
  }
  uint64_t v31 = 0;
  *int v39 = 1;
LABEL_37:
  if (v40 >= 0x81) {
    free(v18);
  }
  return v31;
}

void sub_1819644F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2)
  {
    if (a2 == 2)
    {
      objc_begin_catch(exception_object);
      NSLog((NSString *)@"THIS SHOULD NOT HAVE HAPPENED: %@");
      objc_exception_rethrow();
    }
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v9);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_181964728(void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a2 == 2)
  {
    if (objc_msgSend((id)objc_msgSend(objc_begin_catch(exc_buf), "name"), "isEqualToString:", *MEMORY[0x1E4F1C4A8]))
    {
      objc_opt_class();
      *(void *)(v29 - 88) = *(void *)(*(void *)(v29 - 88) + 8);
      *(void *)(v29 - 104) = [v26 keyPath];
      objc_opt_class();
      objc_opt_class();
      uint64_t v30 = +[NSString stringWithFormat:@"Cannot update for observer <%@ %p> for the key path \"%@\" from <%@ %p>, most likely because the value for the key \"%@\" has changed without an appropriate KVO notification being sent. Check the KVO-compliance of the %@ class."];
      objc_exception_throw((id)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3B8] reason:v30 userInfo:0]);
    }
    objc_exception_rethrow();
  }
  objc_begin_catch(exc_buf);
  *(void *)uint64_t v24 = a18;
  *(void *)(v24 + 8) = v25;
  *(void *)(v24 + 16) = a19;
  *(void *)(v24 + 24) = v27;
  *(void *)(v24 + 32) = v28;
  *(unsigned char *)(v24 + 40) = a21;
  objc_exception_rethrow();
}

void sub_18196483C(_Unwind_Exception *a1)
{
}

void sub_181964848(void *a1)
{
  objc_begin_catch(a1);
  *char v1 = v2;
  v1[1] = v3;
  objc_exception_rethrow();
}

void sub_181964858()
{
}

void sub_181964A00(_Unwind_Exception *a1)
{
}

void sub_181964A20(void *a1)
{
}

uint64_t NSKeyValueGetImplicitObservanceAdditionInfo()
{
  uint64_t v0 = _CFGetTSD();
  if (!v0)
  {
    char v1 = malloc_default_zone();
    uint64_t v0 = (uint64_t)malloc_type_zone_calloc(v1, 1uLL, 0x58uLL, 0xC2E5A2B2uLL);
    _CFSetTSD();
  }
  return v0 + 16;
}

uint64_t NSKeyValueGetImplicitObservanceRemovalInfo()
{
  uint64_t v0 = _CFGetTSD();
  if (!v0)
  {
    char v1 = malloc_default_zone();
    uint64_t v0 = (uint64_t)malloc_type_zone_calloc(v1, 1uLL, 0x58uLL, 0xC2E5A2B2uLL);
    _CFSetTSD();
  }
  return v0 + 32;
}

uint64_t _NSXPCDistantObjectSimpleMessageSend3(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1;
  [v9[1] _sendSelector:a2 withProxy:v9 arg1:a3 arg2:a4 arg3:a5];

  return 0;
}

void sub_1819650A4(_Unwind_Exception *a1)
{
}

void sub_1819650C4(void *a1)
{
}

uint64_t PredicateExpressions.NotEqual.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t UUID.init(uuid:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, int a10, int a11)
{
  *(unsigned char *)a9 = result;
  *(unsigned char *)(a9 + 1) = a2;
  *(unsigned char *)(a9 + 2) = a3;
  *(unsigned char *)(a9 + 3) = a4;
  *(unsigned char *)(a9 + 4) = a5;
  *(unsigned char *)(a9 + 5) = a6;
  *(unsigned char *)(a9 + 6) = a7;
  *(unsigned char *)(a9 + 7) = a8;
  *(_DWORD *)(a9 + 8) = a10;
  *(_DWORD *)(a9 + 12) = a11;
  return result;
}

ValueMetadata *type metadata accessor for _NSSwiftProcessInfo.GlobalState()
{
  return &type metadata for _NSSwiftProcessInfo.GlobalState;
}

uint64_t AttributedString.init(stringLiteral:)@<X0>(void *a1@<X8>)
{
  BigString.init(_:)();
  uint64_t result = AttributedString.init(_:attributes:)(v4, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], &v3);
  *a1 = v3;
  return result;
}

uint64_t AttributedString.unicodeScalars.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(_OWORD **)v1;
  long long v4 = *(_OWORD *)(*(void *)v1 + 16);
  long long v5 = *(_OWORD *)(*(void *)v1 + 48);
  v53[1] = *(_OWORD *)(*(void *)v1 + 32);
  v53[2] = v5;
  v53[0] = v4;
  swift_retain();
  outlined retain of Locale((uint64_t)v53);
  uint64_t v6 = BigString.startIndex.getter();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  outlined release of Locale((uint64_t)v53);
  long long v13 = v3[1];
  long long v14 = v3[3];
  v52[1] = v3[2];
  v52[2] = v14;
  v52[0] = v13;
  long long v15 = v3[1];
  v54[1] = v3[2];
  v54[2] = v14;
  v54[0] = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v54, (uint64_t)v55);
  outlined retain of Locale((uint64_t)v55);
  uint64_t v16 = BigString.endIndex.getter();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  outlined release of Locale((uint64_t)v52);
  uint64_t v41 = v6;
  uint64_t v42 = v8;
  uint64_t v43 = v10;
  uint64_t v44 = v12;
  uint64_t v45 = v16;
  uint64_t v46 = v18;
  uint64_t v47 = v20;
  uint64_t v48 = v22;
  long long v23 = v3[2];
  long long v49 = v3[1];
  long long v50 = v23;
  long long v51 = v3[3];
  swift_retain();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v39);
  uint64_t v24 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v31 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  outlined release of Locale((uint64_t)v40);
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v24;
  a1[2] = v26;
  a1[3] = v28;
  a1[4] = v30;
  a1[5] = v31;
  a1[6] = v33;
  a1[7] = v35;
  a1[8] = v37;
  a1[9] = 0;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance AttributedString.UnicodeScalarView(uint64_t *a1)
{
  uint64_t v3 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  long long v5 = v3[2];
  long long v14 = v3[1];
  long long v15 = v5;
  long long v16 = v3[3];
  BigString.unicodeScalars.getter();
  uint64_t v6 = BigString.UnicodeScalarView.index(after:)();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  outlined release of Locale((uint64_t)v13);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a1 = v6;
    a1[1] = v8;
    a1[2] = v10;
    a1[3] = v12;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance AttributedString.CharacterView(uint64_t *a1)
{
  uint64_t v3 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  long long v5 = v3[1];
  long long v6 = v3[3];
  v15[1] = v3[2];
  v15[2] = v6;
  v15[0] = v5;
  long long v7 = v3[1];
  v16[1] = v3[2];
  v16[2] = v6;
  v16[0] = v7;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v16, (uint64_t)v17);
  outlined retain of Locale((uint64_t)v17);
  uint64_t v8 = BigString.index(after:)();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  outlined release of Locale((uint64_t)v15);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v12;
    a1[3] = v14;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.subscript.read in conformance AttributedString.CharacterView(long long **a1)
{
  uint64_t v3 = (long long *)malloc(0xA0uLL);
  *a1 = v3;
  long long v4 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result)
    {
      long long v6 = v4[1];
      long long v7 = v4[3];
      v3[4] = v4[2];
      v3[5] = v7;
      v3[3] = v6;
      long long v8 = v4[1];
      long long v9 = v4[3];
      v3[1] = v4[2];
      void v3[2] = v9;
      *uint64_t v3 = v8;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v3, (uint64_t)(v3 + 6));
      outlined retain of Locale((uint64_t)(v3 + 6));
      uint64_t v10 = BigString.subscript.getter();
      uint64_t v12 = v11;
      *((void *)v3 + 19) = v11;
      outlined release of Locale((uint64_t)(v3 + 3));
      *((void *)v3 + 17) = v10;
      *((void *)v3 + 18) = v12;
      return (uint64_t)protocol witness for Collection.subscript.read in conformance AttributedString.CharacterView;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.subscript.read in conformance AttributedString.UnicodeScalarView(void *a1)
{
  uint64_t v3 = malloc(0x64uLL);
  *a1 = v3;
  long long v4 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result)
    {
      long long v6 = v4[1];
      long long v7 = v4[3];
      v3[1] = v4[2];
      void v3[2] = v7;
      *uint64_t v3 = v6;
      BigString.unicodeScalars.getter();
      int v8 = BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)(v3 + 3));
      *((_DWORD *)v3 + 24) = v8;
      return (uint64_t)protocol witness for Collection.subscript.read in conformance AttributedString.UnicodeScalarView;
    }
  }
  __break(1u);
  return result;
}

uint64_t AttributedString.subscript.modify(void *a1)
{
  uint64_t v2 = v1;
  long long v4 = (char *)malloc(0x2C8uLL);
  *a1 = v4;
  long long v5 = v4 + 368;
  long long v6 = (long long *)(v4 + 464);
  *((void *)v4 + 87) = v1;
  long long v7 = v4 + 560;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    int v8 = (void *)*v1;
    long long v10 = *(_OWORD *)(*v1 + 32);
    long long v9 = *(_OWORD *)(*v1 + 48);
    *((_OWORD *)v4 + 26) = *(_OWORD *)(*v1 + 16);
    *((_OWORD *)v4 + 27) = v10;
    *((_OWORD *)v4 + 28) = v9;
    uint64_t v11 = v8[8];
    uint64_t v12 = v8[9];
    uint64_t v64 = v8[10];
    uint64_t v61 = v8[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)(v4 + 416));
    swift_unknownObjectRetain();
    *uint64_t v1 = AttributedString.Guts.init(string:runs:)((_OWORD *)v4 + 26, v11, v12, v64, v61);
    swift_release();
  }
  uint64_t v13 = (_OWORD *)*v1;
  long long v15 = *(_OWORD *)(*v1 + 32);
  long long v14 = *(_OWORD *)(*v1 + 48);
  *long long v5 = *(_OWORD *)(*v1 + 16);
  *((_OWORD *)v4 + 24) = v15;
  *((_OWORD *)v4 + 25) = v14;
  swift_retain();
  outlined retain of Locale((uint64_t)v5);
  uint64_t v16 = BigString.startIndex.getter();
  uint64_t v60 = v18;
  uint64_t v62 = v17;
  uint64_t v20 = v19;
  outlined release of Locale((uint64_t)v5);
  long long v22 = v13[2];
  long long v21 = v13[3];
  *long long v7 = v13[1];
  *((_OWORD *)v4 + 36) = v22;
  *((_OWORD *)v4 + 37) = v21;
  long long v23 = v13[1];
  long long v24 = v13[3];
  *((_OWORD *)v4 + 30) = v13[2];
  *((_OWORD *)v4 + 31) = v24;
  *long long v6 = v23;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v6, (uint64_t)(v4 + 656));
  outlined retain of Locale((uint64_t)(v4 + 656));
  uint64_t v25 = BigString.endIndex.getter();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v30 = v2;
  uint64_t v32 = v31;
  outlined release of Locale((uint64_t)v7);
  *((void *)v4 + 14) = v13;
  *((void *)v4 + 15) = v16;
  *((void *)v4 + 16) = v62;
  *((void *)v4 + 17) = v60;
  *((void *)v4 + 18) = v20;
  *((void *)v4 + 19) = v25;
  *((void *)v4 + 20) = v27;
  *((void *)v4 + 21) = v29;
  *((void *)v4 + 22) = v32;
  *((void *)v4 + 23) = 0;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  swift_release();
  long long v33 = *((_OWORD *)v4 + 17);
  long long v34 = *((_OWORD *)v4 + 18);
  long long v35 = *((_OWORD *)v4 + 19);
  unint64_t v63 = v30;
  uint64_t v36 = (_OWORD *)*v30;
  *((_OWORD *)v4 + 12) = *((_OWORD *)v4 + 16);
  *((_OWORD *)v4 + 13) = v33;
  *((_OWORD *)v4 + 14) = v34;
  *((_OWORD *)v4 + 15) = v35;
  long long v38 = v36[2];
  long long v37 = v36[3];
  *((_OWORD *)v4 + 20) = v36[1];
  *((_OWORD *)v4 + 21) = v38;
  *((_OWORD *)v4 + 22) = v37;
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)(v4 + 512));
  uint64_t v39 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v45 = v44;
  uint64_t v46 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  outlined release of Locale((uint64_t)v4);
  swift_release();
  *((void *)v4 + 14) = v36;
  *((void *)v4 + 15) = v39;
  *((void *)v4 + 16) = v41;
  *((void *)v4 + 17) = v43;
  *((void *)v4 + 18) = v45;
  *((void *)v4 + 19) = v46;
  *((void *)v4 + 20) = v48;
  *((void *)v4 + 21) = v50;
  *((void *)v4 + 22) = v52;
  if (one-time initialization token for currentIdentity != -1) {
    swift_once();
  }
  uint64_t v53 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  uint64_t v54 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v54);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v53, &v65);
  os_unfair_lock_unlock(v54);
  swift_release();
  uint64_t v55 = v65;
  *((void *)v4 + 88) = v65;
  *((void *)v4 + 23) = v55;
  BigString.init()();
  *((void *)v4 + 32) = 0;
  MEMORY[0x185309530](v4 + 256, 8);
  uint64_t v56 = *((void *)v4 + 32);
  type metadata accessor for AttributedString.Guts();
  uint64_t v57 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if (result)
  {
    long long v59 = *((_OWORD *)v4 + 39);
    *(_OWORD *)(v57 + 16) = *((_OWORD *)v4 + 38);
    *(_OWORD *)(v57 + 32) = v59;
    *(_OWORD *)(v57 + 48) = *((_OWORD *)v4 + 40);
    *(void *)(v57 + 64) = 0;
    *(void *)(v57 + 72) = 0;
    *(void *)(v57 + 80) = 0;
    *(void *)(v57 + 88) = v56;
    *unint64_t v63 = v57;
    swift_release();
    return (uint64_t)AttributedString.subscript.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AttributedString.init(_:attributes:)@<X0>(uint64_t *a1@<X2>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  BigString.init(_:)();
  uint64_t result = AttributedString.init(_:attributes:)(v7, v3, v4, &v6);
  *a2 = v6;
  return result;
}

uint64_t AttributedString.init(_:attributes:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (BigString.isEmpty.getter())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BigString.init()();
    v31[0] = 0;
    MEMORY[0x185309530](v31, 8);
    uint64_t v8 = v31[0];
    type metadata accessor for AttributedString.Guts();
    uint64_t v9 = swift_allocObject();
    uint64_t result = BigString.isEmpty.getter();
    if (result)
    {
      long long v11 = v33;
      *(_OWORD *)(v9 + 16) = v32;
      *(_OWORD *)(v9 + 32) = v11;
      *(_OWORD *)(v9 + 48) = v34;
      *(void *)(v9 + 64) = 0;
      *(void *)(v9 + 72) = 0;
      *(void *)(v9 + 80) = 0;
      *(void *)(v9 + 88) = v8;
      uint64_t result = outlined release of Locale((uint64_t)a1);
LABEL_9:
      *a4 = v9;
      return result;
    }
    goto LABEL_12;
  }
  *(void *)&long long v32 = 0;
  MEMORY[0x185309530](&v32, 8);
  uint64_t v30 = v32;
  BigString.utf8.getter();
  uint64_t v12 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v31);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Rope.append(_:)(v12, a2, a3);
  type metadata accessor for AttributedString.Guts();
  uint64_t v9 = swift_allocObject();
  outlined retain of Locale((uint64_t)a1);
  swift_unknownObjectRetain();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) == 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  long long v13 = a1[1];
  *(_OWORD *)(v9 + 16) = *a1;
  *(_OWORD *)(v9 + 32) = v13;
  *(_OWORD *)(v9 + 48) = a1[2];
  *(void *)(v9 + 64) = 0;
  *(void *)(v9 + 72) = 0;
  *(void *)(v9 + 80) = 0;
  *(void *)(v9 + 88) = v30;
  swift_retain();
  char v14 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
  {
LABEL_8:
    swift_release();
    outlined release of Locale((uint64_t)a1);
    uint64_t result = swift_unknownObjectRelease();
    goto LABEL_9;
  }
  uint64_t v28 = a4;
  uint64_t v15 = BigString.startIndex.getter();
  uint64_t v29 = v16;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v21 = BigString.endIndex.getter();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *(void *)&long long v32 = v15;
    *((void *)&v32 + 1) = v29;
    *(void *)&long long v33 = v18;
    *((void *)&v33 + 1) = v20;
    *(void *)&long long v34 = v21;
    *((void *)&v34 + 1) = v23;
    uint64_t v35 = v25;
    uint64_t v36 = v27;
    AttributedString.Guts.fixScalarConstrainedAttributes(in:)();
    a4 = v28;
    goto LABEL_8;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AttributedString.Guts()
{
  return self;
}

_WORD *specialized Rope.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)v3;
  ++*(void *)(v3 + 24);
  if (*(void *)v3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (_WORD *)specialized Rope._Node.append(_:)(a1, a2, a3);
    if (result)
    {
      uint64_t v11 = *(void *)v3;
      unsigned int v12 = *(unsigned __int8 *)(*(void *)v3 + 18) + 1;
      if ((v12 >> 8))
      {
        __break(1u);
      }
      else
      {
        uint64_t v13 = (uint64_t)result;
        uint64_t v14 = v9;
        uint64_t v19 = v10;
        uint64_t v15 = v4[1];
        uint64_t v16 = v4[2];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Node>);
        uint64_t v17 = swift_allocObject();
        *(_WORD *)(v17 + 16) = 0;
        uint64_t result = (_WORD *)(v17 + 16);
        *(unsigned char *)(v17 + 18) = v12;
        if (!__OFADD__(v15, v14))
        {
          if (!__OFADD__(v16, v19))
          {
            specialized closure #1 in static Rope._Node.createInner(children:_:)(result, v17 + 24, v11, v15, v16, v13, v14, v19);
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = (_WORD *)swift_bridgeObjectRelease();
            *uint64_t v4 = v17;
            v4[1] = v15 + v14;
            v4[2] = v16 + v19;
            return result;
          }
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_14:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRelease();
    return (_WORD *)swift_bridgeObjectRelease();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
    uint64_t v18 = swift_allocObject();
    *(_WORD *)(v18 + 16) = 0;
    *(unsigned char *)(v18 + 18) = 0;
    uint64_t v20 = v18;
    uint64_t result = (_WORD *)specialized Rope._Node._appendItem(_:)(a1, a2, a3);
    *(void *)uint64_t v3 = v20;
    *(_OWORD *)(v3 + 8) = 0uLL;
  }
  return result;
}

uint64_t specialized Rope._Node._appendItem(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  if (result)
  {
    uint64_t v8 = v3[1];
  }
  else
  {
    uint64_t v9 = specialized Rope._Node.copy()(*v3);
    uint64_t v8 = v10;
    uint64_t v12 = v11;
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v3 = v9;
    v3[1] = v8;
    void v3[2] = v12;
  }
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_9;
  }
  v3[1] = v8 + 1;
  uint64_t v13 = v3[2];
  BOOL v14 = __OFADD__(v13, a1);
  uint64_t v15 = v13 + a1;
  if (v14)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  void v3[2] = v15;
  uint64_t v16 = *v3;
  int v17 = *(unsigned __int16 *)(*v3 + 16);
  uint64_t v18 = (void *)(*v3 + 24 * *(unsigned __int16 *)(*v3 + 16));
  v18[3] = a1;
  v18[4] = a2;
  v18[5] = a3;
  if (v17 != 0xFFFF)
  {
    *(_WORD *)(v16 + 16) = v17 + 1;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v8 = 0;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_5:
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v10, (uint64_t)v17);
    v15[2] = v17[2];
    _OWORD v15[3] = v18;
    uint64_t v16 = v19;
    v15[0] = v17[0];
    v15[1] = v17[1];
    unint64_t v11 = v18;
    uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
    if (v11 >= 2)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  int64_t v12 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v12 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v12);
  ++v8;
  if (v13) {
    goto LABEL_24;
  }
  int64_t v8 = v12 + 1;
  if (v12 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v8 = v12 + 2;
  if (v12 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v8 = v12 + 3;
  if (v12 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13) {
    goto LABEL_24;
  }
  int64_t v8 = v12 + 4;
  if (v12 + 4 >= v6) {
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v8);
  if (v13)
  {
LABEL_24:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v8 << 6);
    goto LABEL_5;
  }
  int64_t v14 = v12 + 5;
  if (v14 >= v6)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v14);
  if (v13)
  {
    int64_t v8 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_26;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized static AttributedString.Guts._characterwiseIsEqual(_:to:)(uint64_t result, long long *a2)
{
  long long v3 = *(_OWORD *)result;
  long long v4 = *(_OWORD *)(result + 16);
  long long v5 = *(_OWORD *)(result + 32);
  long long v282 = *(_OWORD *)(result + 48);
  long long v281 = v5;
  long long v279 = v3;
  long long v280 = v4;
  long long v6 = *(_OWORD *)(result + 64);
  long long v7 = *(_OWORD *)(result + 80);
  long long v8 = *(_OWORD *)(result + 96);
  long long v286 = *(_OWORD *)(result + 112);
  long long v285 = v8;
  long long v283 = v6;
  long long v284 = v7;
  long long v9 = *(_OWORD *)(result + 128);
  long long v10 = *(_OWORD *)(result + 144);
  long long v11 = *(_OWORD *)(result + 160);
  long long v12 = *(_OWORD *)(result + 176);
  uint64_t v291 = *(void *)(result + 192);
  long long v290 = v12;
  long long v289 = v11;
  long long v287 = v9;
  long long v288 = v10;
  long long v13 = a2[11];
  long long v298 = a2[10];
  long long v299 = v13;
  uint64_t v300 = *((void *)a2 + 24);
  long long v14 = a2[7];
  long long v294 = a2[6];
  long long v295 = v14;
  long long v15 = a2[8];
  long long v297 = a2[9];
  long long v296 = v15;
  long long v16 = a2[3];
  *(_OWORD *)&v292[32] = a2[2];
  *(_OWORD *)&v292[48] = v16;
  long long v17 = a2[4];
  long long v293 = a2[5];
  *(_OWORD *)&v292[64] = v17;
  long long v18 = *a2;
  *(_OWORD *)&v292[16] = a2[1];
  *(_OWORD *)long long v292 = v18;
  uint64_t v19 = v18;
  uint64_t v158 = (void *)v279;
  if ((void)v279 == (void)v18)
  {
    uint64_t result = static BigString.Index.== infix(_:_:)();
    if (result)
    {
      uint64_t result = static BigString.Index.== infix(_:_:)();
      if (result) {
        return 1;
      }
    }
  }
  uint64_t v20 = *((void *)&v283 + 1);
  uint64_t v144 = *((void *)&v279 + 1);
  if (__OFSUB__(*((void *)&v283 + 1), *((void *)&v279 + 1))) {
    goto LABEL_153;
  }
  if (__OFSUB__(*(void *)&v292[72], *(void *)&v292[8]))
  {
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
    goto LABEL_164;
  }
  if (*((void *)&v283 + 1) - *((void *)&v279 + 1) != *(void *)&v292[72] - *(void *)&v292[8]) {
    return 0;
  }
  unint64_t v146 = *((void *)&v280 + 1);
  uint64_t v150 = v281;
  uint64_t v151 = v280;
  uint64_t v149 = v282;
  uint64_t v147 = *((void *)&v281 + 1);
  uint64_t v148 = *((void *)&v282 + 1);
  uint64_t v21 = v283;
  uint64_t v22 = *((void *)&v287 + 1);
  long long v23 = v288;
  uint64_t v24 = v289;
  uint64_t v162 = v297;
  uint64_t v163 = *((void *)&v296 + 1);
  uint64_t v161 = *((void *)&v297 + 1);
  uint64_t v156 = v298;
  long long v25 = a2[11];
  __src[10] = a2[10];
  __src[11] = v25;
  *(void *)&__src[12] = *((void *)a2 + 24);
  long long v26 = a2[7];
  __src[6] = a2[6];
  __src[7] = v26;
  long long v27 = a2[8];
  __src[9] = a2[9];
  __src[8] = v27;
  long long v28 = a2[3];
  _OWORD __src[2] = a2[2];
  __src[3] = v28;
  long long v29 = a2[4];
  __src[5] = a2[5];
  __src[4] = v29;
  long long v30 = *a2;
  __src[1] = a2[1];
  __src[0] = v30;
  *(_OWORD *)((char *)&__src[12] + 8) = *(_OWORD *)&v292[8];
  *(_OWORD *)((char *)&__src[13] + 8) = *(_OWORD *)&v292[24];
  *(_OWORD *)((char *)&__src[14] + 8) = *(_OWORD *)&v292[40];
  uint64_t v31 = (void *)v279;
  uint64_t v169 = (long long *)(v279 + 16);
  uint64_t v157 = (long long *)(v19 + 16);
  *(_OWORD *)((char *)&__src[15] + 8) = *(_OWORD *)&v292[56];
  outlined retain of AttributedString.Runs((uint64_t)&v279);
  uint64_t result = outlined retain of AttributedString.Runs((uint64_t)v292);
  uint64_t v143 = v22;
  uint64_t v166 = v23;
  uint64_t v167 = v22;
  uint64_t v142 = v24;
  uint64_t v164 = v24;
  uint64_t v165 = *((void *)&v23 + 1);
  uint64_t v32 = v144;
  uint64_t v145 = v20;
  while (1)
  {
    uint64_t v170 = v21;
    if (v32 == v20)
    {
      uint64_t v187 = 0;
      uint64_t v188 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v185 = 0;
      uint64_t v186 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v168 = 0;
      uint64_t v171 = v20;
      goto LABEL_118;
    }
    if (v32 < v144 || v32 >= v20) {
      goto LABEL_142;
    }
    *(_OWORD *)&__dst[160] = v289;
    *(_OWORD *)&__dst[176] = v290;
    *(void *)&__dst[192] = v291;
    *(_OWORD *)&__dst[96] = v285;
    *(_OWORD *)&__dst[112] = v286;
    *(_OWORD *)&__dst[128] = v287;
    *(_OWORD *)&__dst[144] = v288;
    *(_OWORD *)&__dst[32] = v281;
    *(_OWORD *)&__dst[48] = v282;
    *(_OWORD *)&__dst[64] = v283;
    *(_OWORD *)&__dst[80] = v284;
    *(_OWORD *)__dst = v279;
    *(_OWORD *)&__dst[16] = v280;
    uint64_t v190 = v32;
    uint64_t v191 = v151;
    unint64_t v192 = v146;
    uint64_t v193 = v150;
    uint64_t v194 = v147;
    uint64_t v195 = v149;
    uint64_t v196 = v148;
    uint64_t v197 = v21;
    uint64_t result = (uint64_t)AttributedString.Runs._resolve(_:)(&v190, &v201);
    if (v201 != v31[11]) {
      goto LABEL_143;
    }
    uint64_t v172 = v32;
    unint64_t v39 = v202;
    uint64_t v40 = v206;
    uint64_t v41 = v207;
    uint64_t v42 = v208;
    uint64_t v43 = v209;
    if (v203)
    {
      uint64_t v44 = (void *)(v203 + 24 * ((v202 >> ((4 * *(unsigned char *)(v203 + 18) + 8) & 0x3C)) & 0xF));
      unint64_t v45 = v44[3];
      uint64_t v46 = v44[4];
      uint64_t v47 = v44[5];
      outlined retain of AttributedString.Runs((uint64_t)&v279);
      uint64_t v188 = v46;
      swift_bridgeObjectRetain();
      uint64_t v160 = v47;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v48 = v31[8];
      outlined retain of AttributedString.Runs((uint64_t)&v279);
      swift_unknownObjectRetain();
      unint64_t v45 = specialized Rope._Node.subscript.getter(v39, v48);
      uint64_t v188 = v49;
      uint64_t v160 = v50;
      swift_unknownObjectRelease();
    }
    uint64_t v52 = v23;
    uint64_t v51 = v143;
    uint64_t v54 = v142;
    uint64_t v53 = *((void *)&v23 + 1);
    if (static BigString.Index.< infix(_:_:)())
    {
      uint64_t v51 = v40;
      uint64_t v52 = v41;
      uint64_t v53 = v42;
      uint64_t v54 = v43;
    }
    uint64_t result = BigString.Index.utf8Offset.getter();
    int64_t v55 = result + v45;
    if (__OFADD__(result, v45)) {
      goto LABEL_144;
    }
    uint64_t v56 = BigString.Index.utf8Offset.getter();
    if (v56 < v55) {
      int64_t v55 = v56;
    }
    long long v57 = *v169;
    long long v58 = v169[1];
    long long v262 = v169[2];
    v261[1] = v58;
    v261[0] = v57;
    long long v59 = *v169;
    long long v60 = v169[1];
    v263[2] = v262;
    v263[1] = v60;
    v263[0] = v59;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v263, (uint64_t)v264);
    outlined retain of Locale((uint64_t)v264);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v261);
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (__OFSUB__(v55, result)) {
      goto LABEL_145;
    }
    uint64_t v61 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v63 = v62;
    uint64_t v65 = v64;
    uint64_t v67 = v66;
    outlined release of Locale((uint64_t)v224);
    uint64_t v181 = v61;
    uint64_t v186 = v54;
    uint64_t v187 = v53;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_146;
    }
    uint64_t v179 = v67;
    uint64_t v180 = v65;
    uint64_t v68 = v158[8];
    uint64_t v69 = v158[10];
    uint64_t v71 = v150;
    uint64_t v70 = v151;
    uint64_t v183 = v158[11];
    uint64_t v184 = v158[9];
    uint64_t v185 = v63;
    if (v150 != 1 && v151 == v158[11])
    {
      if (v170 == 2)
      {
        unint64_t v72 = v146;
        if (v68)
        {
          outlined retain of AttributedString.Runs((uint64_t)&v279);
          swift_unknownObjectRetain();
          uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v151, v146, v150, v68, v184, v69);
          uint64_t v73 = result;
        }
        else
        {
          uint64_t result = swift_retain();
          uint64_t v73 = 0;
        }
        uint64_t v74 = v183;
      }
      else
      {
        outlined retain of AttributedString.Runs((uint64_t)&v279);
        swift_unknownObjectRetain();
        uint64_t result = BigString.Index.utf8Offset.getter();
        uint64_t v74 = v183;
        uint64_t v73 = result;
        unint64_t v72 = v146;
      }
      goto LABEL_107;
    }
    uint64_t v75 = v158[9];
    if (!v68) {
      uint64_t v75 = 0;
    }
    uint64_t v76 = v172;
    if (v172 < 0 || v75 < v172) {
      goto LABEL_157;
    }
    if (v68 && v172 < v184 && *(_WORD *)(v68 + 16))
    {
      uint64_t v77 = *(unsigned __int8 *)(v68 + 18);
      if (*(unsigned char *)(v68 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v279);
        uint64_t result = swift_unknownObjectRetain();
        uint64_t v78 = v68;
        while (1)
        {
          unint64_t v80 = *(unsigned __int16 *)(v78 + 16);
          if (*(_WORD *)(v78 + 16))
          {
            uint64_t v81 = *(void *)(v78 + 32);
            BOOL v82 = __OFSUB__(v76, v81);
            uint64_t v83 = v76 - v81;
            if (v82) {
              goto LABEL_136;
            }
            if (__OFADD__(v83, 1)) {
              goto LABEL_137;
            }
            if (v83 + 1 <= 0)
            {
              unint64_t v80 = 0;
              goto LABEL_41;
            }
            if (v80 != 1)
            {
              uint64_t v84 = *(void *)(v78 + 56);
              uint64_t v76 = v83 - v84;
              if (__OFSUB__(v83, v84)) {
                goto LABEL_155;
              }
              if (__OFADD__(v76, 1)) {
                goto LABEL_156;
              }
              if (v76 + 1 < 1)
              {
                unint64_t v80 = 1;
                uint64_t v76 = v83;
                goto LABEL_41;
              }
              if (v80 == 2) {
                goto LABEL_40;
              }
              uint64_t v85 = *(void *)(v78 + 80);
              BOOL v82 = __OFSUB__(v76, v85);
              uint64_t v83 = v76 - v85;
              if (v82) {
                goto LABEL_159;
              }
              if (__OFADD__(v83, 1)) {
                goto LABEL_160;
              }
              if (v83 + 1 < 1)
              {
                unint64_t v80 = 2;
                goto LABEL_41;
              }
              if (v80 != 3)
              {
                uint64_t v86 = 3;
                if (v80 > 3) {
                  uint64_t v86 = *(unsigned __int16 *)(v78 + 16);
                }
                uint64_t v87 = (void *)(v78 + 104);
                uint64_t v88 = 3;
                while (v86 != v88)
                {
                  uint64_t v76 = v83 - *v87;
                  if (__OFSUB__(v83, *v87)) {
                    goto LABEL_151;
                  }
                  if (__OFADD__(v76, 1)) {
                    goto LABEL_152;
                  }
                  if (v76 + 1 < 1)
                  {
                    unint64_t v80 = v88;
                    uint64_t v76 = v83;
                    goto LABEL_41;
                  }
                  ++v88;
                  v87 += 3;
                  uint64_t v83 = v76;
                  if (v80 == v88) {
                    goto LABEL_40;
                  }
                }
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                __break(1u);
LABEL_153:
                __break(1u);
                goto LABEL_154;
              }
            }
            uint64_t v76 = v83;
          }
LABEL_40:
          if (v76)
          {
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
            goto LABEL_138;
          }
LABEL_41:
          char v79 = (4 * *(unsigned char *)(v78 + 18) + 8) & 0x3C;
          uint64_t v77 = ((-15 << v79) - 1) & v77 | (v80 << v79);
          uint64_t v71 = *(void *)(v78 + 24 + 24 * v80);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v78 = v71;
          if (!*(unsigned char *)(v71 + 18)) {
            goto LABEL_73;
          }
        }
      }
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v279);
      uint64_t result = swift_unknownObjectRetain();
      uint64_t v71 = v68;
LABEL_73:
      unint64_t v90 = *(unsigned __int16 *)(v71 + 16);
      if (*(_WORD *)(v71 + 16))
      {
        unint64_t v91 = v76 - 1;
        if (__OFSUB__(v76, 1)) {
          goto LABEL_162;
        }
        if (__OFADD__(v91, 1)) {
          goto LABEL_163;
        }
        if (v76 <= 0)
        {
          unint64_t v90 = 0;
          goto LABEL_105;
        }
        if (v90 != 1)
        {
          BOOL v82 = __OFSUB__(v91, 1);
          unint64_t v91 = v76 - 2;
          if (v82) {
            goto LABEL_166;
          }
          if (__OFADD__(v91, 1)) {
            goto LABEL_167;
          }
          if (v76 - 1 < 1)
          {
            unint64_t v90 = 1;
            goto LABEL_105;
          }
          if (v90 != 2)
          {
            BOOL v82 = __OFSUB__(v91, 1);
            unint64_t v91 = v76 - 3;
            if (v82) {
              goto LABEL_168;
            }
            if (__OFADD__(v91, 1)) {
              goto LABEL_169;
            }
            if (v76 - 2 >= 1)
            {
              if (v90 != 3)
              {
                uint64_t v92 = 0;
                uint64_t v93 = 3;
                if (v90 > 3) {
                  uint64_t v93 = *(unsigned __int16 *)(v71 + 16);
                }
                unint64_t v94 = v93 - 3;
                if (v91 >= v90 - 4) {
                  unint64_t v95 = v90 - 4;
                }
                else {
                  unint64_t v95 = v76 - 3;
                }
                if (v95 >= v76 + 0x7FFFFFFFFFFFFFFDLL) {
                  unint64_t v95 = v76 + 0x7FFFFFFFFFFFFFFDLL;
                }
                while (v94 > v95)
                {
                  if (v76 + 0x7FFFFFFFFFFFFFFDLL == v92) {
                    goto LABEL_165;
                  }
                  if (v91 == v92)
                  {
                    unint64_t v90 = v76;
                    goto LABEL_105;
                  }
                  if (v90 - 3 == ++v92)
                  {
                    v91 -= v92;
                    goto LABEL_99;
                  }
                }
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
                return result;
              }
              goto LABEL_99;
            }
            unint64_t v90 = 2;
LABEL_105:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v72 = v77 & 0xFFFFFFFFFFFFF0FFLL | (v90 << 8);
            goto LABEL_69;
          }
        }
      }
      else
      {
        unint64_t v91 = v76;
      }
LABEL_99:
      if (v91) {
        goto LABEL_161;
      }
      goto LABEL_105;
    }
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)&v279);
    unint64_t v89 = swift_unknownObjectRetain();
    unint64_t v72 = specialized Rope._endPath.getter(v89);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v71 = 0;
    if (!v68)
    {
      uint64_t v73 = 0;
      uint64_t v74 = v183;
      uint64_t v70 = v183;
      goto LABEL_107;
    }
LABEL_69:
    swift_unknownObjectRetain();
    uint64_t v70 = v183;
    uint64_t v73 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v183, v72, v71, v68, v184, v69);
    uint64_t result = swift_unknownObjectRelease_n();
    uint64_t v74 = v183;
LABEL_107:
    *(void *)__dst = v70;
    *(void *)&__dst[8] = v72;
    *(void *)&__dst[16] = v71;
    BOOL v82 = __OFADD__(v172, 1);
    uint64_t v171 = v172 + 1;
    if (v82) {
      goto LABEL_147;
    }
    if (v70 != v74) {
      goto LABEL_148;
    }
    if (v71)
    {
      unint64_t v96 = *(void *)(v71 + 24 * ((v72 >> ((4 * *(unsigned char *)(v71 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v96 = specialized Rope._Node.subscript.getter(v72, v68);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v82 = __OFADD__(v73, v96);
    unint64_t v97 = v73 + v96;
    if (v82) {
      goto LABEL_149;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(__dst, v68, v184, v69, v183);
    swift_unknownObjectRelease_n();
    unint64_t v146 = *(void *)&__dst[8];
    uint64_t v150 = *(void *)&__dst[16];
    uint64_t v151 = *(void *)__dst;
    if (v170 == 2)
    {
      long long v98 = *v169;
      long long v99 = v169[1];
      long long v260 = v169[2];
      v259[1] = v99;
      v259[0] = v98;
      long long v100 = *v169;
      long long v101 = v169[1];
      v265[2] = v260;
      v265[1] = v101;
      v265[0] = v100;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v265, (uint64_t)v266);
      outlined retain of Locale((uint64_t)v266);
      unint64_t v102 = &v226;
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v259);
      long long v103 = *v169;
      long long v104 = v169[1];
      long long v258 = v169[2];
      v257[1] = v104;
      v257[0] = v103;
      long long v105 = *v169;
      long long v106 = v169[1];
      v267[2] = v258;
      v267[1] = v106;
      v267[0] = v105;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v267, (uint64_t)v268);
      outlined retain of Locale((uint64_t)v268);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v257);
    }
    else
    {
      long long v107 = *v169;
      long long v108 = v169[1];
      long long v256 = v169[2];
      v255[1] = v108;
      v255[0] = v107;
      long long v109 = *v169;
      long long v110 = v169[1];
      _OWORD v269[2] = v256;
      v269[1] = v110;
      v269[0] = v109;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v269, (uint64_t)v270);
      outlined retain of Locale((uint64_t)v270);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v255);
      uint64_t result = BigString.Index.utf8Offset.getter();
      if (__OFSUB__(v97, result)) {
        goto LABEL_158;
      }
      unint64_t v102 = &v225;
    }
    uint64_t v147 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v148 = v111;
    uint64_t v149 = v112;
    uint64_t v170 = v113;
    outlined release of Locale((uint64_t)v102);
    outlined release of AttributedString.Runs((uint64_t)&v279);
    uint64_t v168 = v158;
    uint64_t v33 = v160;
    uint64_t v35 = v52;
    uint64_t v38 = v179;
    uint64_t v37 = v180;
    uint64_t v36 = v181;
    uint64_t v34 = v51;
LABEL_118:
    specialized IndexingIterator.next()((uint64_t)&v190);
    uint64_t v114 = v190;
    uint64_t v201 = v188;
    unint64_t v202 = v33;
    uint64_t v203 = v34;
    uint64_t v204 = v35;
    uint64_t v205 = v187;
    uint64_t v206 = v186;
    uint64_t v207 = v36;
    uint64_t v208 = v185;
    uint64_t v209 = v37;
    uint64_t v210 = v38;
    uint64_t v211 = v168;
    uint64_t v212 = v190;
    uint64_t v182 = v191;
    uint64_t v213 = v191;
    unint64_t v214 = v192;
    uint64_t v215 = v193;
    uint64_t v216 = v194;
    uint64_t v217 = v195;
    uint64_t v218 = v196;
    uint64_t v219 = v197;
    uint64_t v220 = v198;
    uint64_t v221 = v199;
    uint64_t v222 = v200;
    if (!v188)
    {
      if (v190)
      {
LABEL_129:
        outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v201);
        goto LABEL_132;
      }
      outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v201);
      memcpy(__dst, __src, sizeof(__dst));
      outlined release of AttributedString.Runs((uint64_t)__dst);
      outlined release of AttributedString.Runs((uint64_t)&v279);
      return 1;
    }
    if (!v190) {
      goto LABEL_129;
    }
    outlined copy of AttributedString.Runs.Run?(v188);
    outlined copy of AttributedString.Runs.Run?(v114);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((specialized static Dictionary<>.== infix(_:_:)(v188, v114) & 1) == 0) {
      break;
    }
    char v115 = specialized static Set.== infix(_:_:)(v33, v182);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v115 & 1) == 0) {
      goto LABEL_131;
    }
    long long v116 = *v169;
    long long v117 = v169[1];
    long long v254 = v169[2];
    v253[1] = v117;
    v253[0] = v116;
    long long v118 = *v169;
    long long v119 = v169[1];
    _OWORD v271[2] = v254;
    v271[1] = v119;
    v271[0] = v118;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v271, (uint64_t)v272);
    outlined retain of Locale((uint64_t)v272);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v253);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v176 = BigString.Index.utf8Offset.getter();
    uint64_t v173 = BigString.Index.utf8Offset.getter();
    uint64_t result = outlined consume of AttributedString.Runs.Run?(v188);
    if (__OFSUB__(v173, v176))
    {
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
      goto LABEL_150;
    }
    uint64_t v120 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v154 = v121;
    uint64_t v155 = v120;
    uint64_t v159 = v122;
    uint64_t v153 = v123;
    outlined release of Locale((uint64_t)v227);
    long long v124 = *v157;
    long long v125 = v157[1];
    long long v252 = v157[2];
    v251[1] = v125;
    v251[0] = v124;
    long long v126 = *v157;
    long long v127 = v157[1];
    _OWORD v273[2] = v252;
    v273[1] = v127;
    v273[0] = v126;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v273, (uint64_t)v274);
    outlined retain of Locale((uint64_t)v274);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v251);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v177 = BigString.Index.utf8Offset.getter();
    uint64_t v174 = BigString.Index.utf8Offset.getter();
    uint64_t result = outlined consume of AttributedString.Runs.Run?(v114);
    if (__OFSUB__(v174, v177)) {
      goto LABEL_139;
    }
    uint64_t v152 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v175 = v128;
    uint64_t v178 = v129;
    uint64_t v131 = v130;
    outlined release of Locale((uint64_t)v228);
    long long v132 = *v169;
    long long v133 = v169[1];
    long long v250 = v169[2];
    v249[1] = v133;
    v249[0] = v132;
    long long v134 = *v169;
    long long v135 = v169[1];
    v275[2] = v250;
    v275[1] = v135;
    v275[0] = v134;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v275, (uint64_t)v276);
    outlined retain of Locale((uint64_t)v276);
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_140;
    }
    uint64_t v241 = v167;
    uint64_t v242 = v166;
    uint64_t v243 = v165;
    uint64_t v244 = v164;
    uint64_t v245 = v155;
    uint64_t v246 = v154;
    uint64_t v247 = v159;
    uint64_t v248 = v153;
    uint64_t v136 = v131;
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v249);
    long long v137 = *v157;
    long long v138 = v157[1];
    long long v240 = v157[2];
    v239[1] = v138;
    v239[0] = v137;
    long long v139 = *v157;
    long long v140 = v157[1];
    v277[2] = v240;
    v277[1] = v140;
    v277[0] = v139;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v277, (uint64_t)v278);
    outlined retain of Locale((uint64_t)v278);
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_141;
    }
    uint64_t v231 = v163;
    uint64_t v232 = v162;
    uint64_t v233 = v161;
    uint64_t v234 = v156;
    uint64_t v235 = v152;
    uint64_t v236 = v175;
    uint64_t v237 = v131;
    uint64_t v238 = v178;
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v239);
    char v141 = MEMORY[0x185301310](v229, v230);
    outlined consume of AttributedString.Runs.Run?(v188);
    outlined consume of AttributedString.Runs.Run?(v114);
    outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v201);
    outlined release of Locale((uint64_t)v230);
    uint64_t result = outlined release of Locale((uint64_t)v229);
    if ((v141 & 1) == 0) {
      goto LABEL_132;
    }
    uint64_t v162 = v175;
    uint64_t v163 = v152;
    uint64_t v161 = v136;
    uint64_t v156 = v178;
    uint64_t v166 = v154;
    uint64_t v167 = v155;
    uint64_t v31 = v158;
    uint64_t v164 = v153;
    uint64_t v165 = v159;
    uint64_t v20 = v145;
    uint64_t v21 = v170;
    uint64_t v32 = v171;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_131:
  outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(&v201);
  outlined consume of AttributedString.Runs.Run?(v114);
  outlined consume of AttributedString.Runs.Run?(v188);
LABEL_132:
  memcpy(__dst, __src, sizeof(__dst));
  outlined release of AttributedString.Runs((uint64_t)__dst);
  outlined release of AttributedString.Runs((uint64_t)&v279);
  return 0;
}

uint64_t NSDictionary.Iterator.__deallocating_deinit()
{
  long long v1 = v0[12];
  v8[10] = v0[11];
  v8[11] = v1;
  v9[0] = v0[13];
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)v0 + 217);
  long long v2 = v0[8];
  v8[6] = v0[7];
  v8[7] = v2;
  long long v3 = v0[10];
  v8[8] = v0[9];
  v8[9] = v3;
  long long v4 = v0[4];
  v8[2] = v0[3];
  v8[3] = v4;
  long long v5 = v0[6];
  v8[4] = v0[5];
  v8[5] = v5;
  long long v6 = v0[2];
  v8[0] = v0[1];
  v8[1] = v6;
  outlined release of Locale((uint64_t)v8);
  return swift_deallocClassInstance();
}

uint64_t outlined release of Locale(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of AttributedString.Runs(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of AttributedString.Runs(uint64_t a1)
{
  return a1;
}

void specialized IndexingIterator.next()(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 200);
  uint64_t v4 = *(void *)(v1 + 72);
  if (v3 == v4)
  {
    *(void *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return;
  }
  if (v3 >= v4) {
    goto LABEL_117;
  }
  uint64_t v5 = *(void *)(v1 + 8);
  if (v3 < v5) {
    goto LABEL_117;
  }
  uint64_t v7 = *(void *)(v1 + 208);
  unint64_t v6 = *(void *)(v1 + 216);
  uint64_t v8 = *(void *)(v1 + 224);
  uint64_t v9 = *(void *)(v1 + 232);
  uint64_t v10 = *(void *)(v1 + 240);
  uint64_t v11 = *(void *)(v1 + 248);
  uint64_t v12 = *(void *)(v1 + 256);
  uint64_t v13 = *(void *)(v1 + 200);
  uint64_t v15 = *(void *)(v1 + 144);
  uint64_t v16 = *(void *)(v1 + 152);
  uint64_t v17 = *(void *)(v1 + 160);
  uint64_t v18 = *(void *)(v1 + 168);
  uint64_t v19 = *(void *)(v1 + 176);
  uint64_t v20 = *(void *)(v1 + 184);
  uint64_t v21 = *(void *)(v1 + 192);
  uint64_t v22 = *(void *)(v1 + 128);
  uint64_t v23 = *(void *)(v1 + 136);
  uint64_t v24 = *(void *)(v1 + 64);
  *(void *)&long long v131 = *(void *)v1;
  uint64_t v14 = v131;
  *((void *)&v131 + 1) = v5;
  long long v25 = *(_OWORD *)(v1 + 32);
  long long v132 = *(_OWORD *)(v1 + 16);
  long long v133 = v25;
  long long v134 = *(_OWORD *)(v1 + 48);
  uint64_t v135 = v24;
  uint64_t v136 = v4;
  long long v26 = *(_OWORD *)(v1 + 96);
  long long v137 = *(_OWORD *)(v1 + 80);
  long long v138 = v26;
  long long v139 = *(_OWORD *)(v1 + 112);
  uint64_t v140 = v22;
  uint64_t v141 = v23;
  uint64_t v113 = v15;
  uint64_t v142 = v15;
  uint64_t v143 = v16;
  uint64_t v144 = v17;
  uint64_t v145 = v18;
  uint64_t v146 = v19;
  uint64_t v147 = v20;
  uint64_t v148 = v21;
  uint64_t v115 = v13;
  uint64_t v116 = v12;
  *(void *)&long long v126 = v13;
  *((void *)&v126 + 1) = v7;
  uint64_t v117 = v7;
  unint64_t v106 = v6;
  *(void *)&long long v127 = v6;
  *((void *)&v127 + 1) = v8;
  *(void *)&long long v128 = v9;
  *((void *)&v128 + 1) = v10;
  uint64_t v129 = v11;
  uint64_t v130 = v12;
  AttributedString.Runs._resolve(_:)((uint64_t *)&v126, (uint64_t *)&v120);
  if ((void)v120 != *(void *)(v14 + 88))
  {
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  uint64_t v111 = v23;
  uint64_t v118 = v14;
  uint64_t v107 = v1;
  unint64_t v27 = *((void *)&v120 + 1);
  uint64_t v29 = *((void *)&v122 + 1);
  uint64_t v28 = v123;
  uint64_t v30 = v124;
  uint64_t v31 = v125;
  if ((void)v121)
  {
    uint64_t v32 = (void *)(v121 + 24 * ((*((void *)&v120 + 1) >> ((4 * *(unsigned char *)(v121 + 18) + 8) & 0x3C)) & 0xFLL));
    uint64_t v33 = v32[4];
    unint64_t v110 = v32[3];
    uint64_t v34 = v32[5];
    swift_retain();
    uint64_t v109 = v33;
    swift_bridgeObjectRetain();
    uint64_t v108 = v34;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v35 = *(void *)(v118 + 64);
    swift_retain();
    swift_unknownObjectRetain();
    unint64_t v110 = specialized Rope._Node.subscript.getter(v27, v35);
    uint64_t v108 = v37;
    uint64_t v109 = v36;
    swift_unknownObjectRelease();
  }
  char v38 = static BigString.Index.< infix(_:_:)();
  if (v38) {
    uint64_t v39 = v29;
  }
  else {
    uint64_t v39 = v111;
  }
  uint64_t v112 = v39;
  if (v38) {
    uint64_t v40 = v28;
  }
  else {
    uint64_t v40 = v113;
  }
  if (v38) {
    uint64_t v41 = v30;
  }
  else {
    uint64_t v41 = v16;
  }
  uint64_t v114 = v41;
  if (v38) {
    uint64_t v42 = v31;
  }
  else {
    uint64_t v42 = v17;
  }
  uint64_t v43 = BigString.Index.utf8Offset.getter();
  int64_t v44 = v43 + v110;
  if (__OFADD__(v43, v110)) {
    goto LABEL_119;
  }
  uint64_t v45 = BigString.Index.utf8Offset.getter();
  if (v45 < v44) {
    int64_t v44 = v45;
  }
  long long v46 = *(_OWORD *)(v118 + 16);
  long long v47 = *(_OWORD *)(v118 + 48);
  v153[1] = *(_OWORD *)(v118 + 32);
  v153[2] = v47;
  v153[0] = v46;
  long long v48 = *(_OWORD *)(v118 + 16);
  long long v127 = *(_OWORD *)(v118 + 32);
  long long v128 = v47;
  long long v126 = v48;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v126, (uint64_t)v154);
  outlined retain of Locale((uint64_t)v154);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v153);
  if (__OFSUB__(v44, BigString.Index.utf8Offset.getter())) {
    goto LABEL_120;
  }
  uint64_t v49 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  outlined release of Locale((uint64_t)v149);
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_121:
    __break(1u);
    goto LABEL_122;
  }
  *(void *)a1 = v109;
  *(void *)(a1 + 8) = v108;
  *(void *)(a1 + 16) = v112;
  *(void *)(a1 + 24) = v40;
  *(void *)(a1 + 32) = v114;
  *(void *)(a1 + 40) = v42;
  *(void *)(a1 + 48) = v49;
  *(void *)(a1 + 56) = v51;
  *(void *)(a1 + 64) = v53;
  *(void *)(a1 + 72) = v55;
  uint64_t v56 = (_OWORD *)v118;
  *(void *)(a1 + 80) = v118;
  uint64_t v57 = *(void *)(v118 + 64);
  uint64_t v58 = *(void *)(v118 + 72);
  uint64_t v60 = *(void *)(v118 + 80);
  uint64_t v59 = *(void *)(v118 + 88);
  if (v8 != 1 && v117 == v59)
  {
    uint64_t v61 = v115;
    if (v116 == 2)
    {
      swift_retain();
      if (v57)
      {
        swift_unknownObjectRetain();
        unint64_t v62 = v106;
        uint64_t v63 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v117, v106, v8, v57, v58, v60);
      }
      else
      {
        uint64_t v63 = 0;
        unint64_t v62 = v106;
      }
      uint64_t v64 = v117;
    }
    else
    {
      swift_unknownObjectRetain();
      swift_retain();
      uint64_t v63 = BigString.Index.utf8Offset.getter();
      uint64_t v64 = v117;
      unint64_t v62 = v106;
    }
LABEL_100:
    *(void *)&long long v131 = v64;
    *((void *)&v131 + 1) = v62;
    *(void *)&long long v132 = v8;
    uint64_t v82 = v61 + 1;
    if (!__OFADD__(v61, 1))
    {
      if (v64 == v59)
      {
        if (v8)
        {
          unint64_t v83 = *(void *)(v8 + 24 * ((v62 >> ((4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_unknownObjectRetain();
          unint64_t v83 = specialized Rope._Node.subscript.getter(v62, v57);
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!__OFADD__(v63, v83))
        {
          uint64_t v84 = v56 + 1;
          swift_unknownObjectRetain();
          specialized Rope.formIndex(after:)(&v131, v57, v58, v60, v59);
          swift_unknownObjectRelease_n();
          long long v119 = v131;
          uint64_t v85 = v132;
          if (v116 == 2)
          {
            long long v86 = *v84;
            long long v87 = v56[3];
            v152[1] = v56[2];
            v152[2] = v87;
            v152[0] = v86;
            long long v88 = *v84;
            long long v121 = v56[2];
            long long v122 = v87;
            long long v120 = v88;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v120, (uint64_t)v155);
            outlined retain of Locale((uint64_t)v155);
            BigString.utf8.getter();
            outlined release of Locale((uint64_t)v152);
            long long v89 = *v84;
            long long v90 = v56[3];
            v151[1] = v56[2];
            v151[2] = v90;
            v151[0] = v89;
            long long v91 = *v84;
            long long v132 = v56[2];
            long long v133 = v90;
            long long v131 = v91;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v131, (uint64_t)v156);
            outlined retain of Locale((uint64_t)v156);
            BigString.startIndex.getter();
            outlined release of Locale((uint64_t)v151);
            uint64_t v92 = BigString.UTF8View.index(_:offsetBy:)();
            uint64_t v94 = v93;
            uint64_t v96 = v95;
            uint64_t v98 = v97;
            long long v99 = &v150;
LABEL_110:
            outlined release of Locale((uint64_t)v99);
            swift_release();
            *(void *)(v107 + 200) = v82;
            *(_OWORD *)(v107 + 208) = v119;
            *(void *)(v107 + 224) = v85;
            *(void *)(v107 + 232) = v92;
            *(void *)(v107 + 240) = v94;
            *(void *)(v107 + 248) = v96;
            *(void *)(v107 + 256) = v98;
            return;
          }
          long long v100 = *v84;
          long long v101 = v56[3];
          long long v121 = v56[2];
          long long v122 = v101;
          long long v120 = v100;
          long long v102 = *v84;
          long long v132 = v56[2];
          long long v133 = v101;
          long long v131 = v102;
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v131, (uint64_t)v151);
          outlined retain of Locale((uint64_t)v151);
          BigString.utf8.getter();
          outlined release of Locale((uint64_t)&v120);
          if (!__OFSUB__(v63 + v83, BigString.Index.utf8Offset.getter()))
          {
            uint64_t v92 = BigString.UTF8View.index(_:offsetBy:)();
            uint64_t v94 = v103;
            uint64_t v96 = v104;
            uint64_t v98 = v105;
            long long v99 = (char *)v152;
            goto LABEL_110;
          }
          goto LABEL_128;
        }
        goto LABEL_124;
      }
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
      goto LABEL_127;
    }
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  if (v57) {
    uint64_t v65 = *(void *)(v118 + 72);
  }
  else {
    uint64_t v65 = 0;
  }
  uint64_t v61 = v115;
  if (v115 < 0 || v65 < v115)
  {
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }
  if (!v57)
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    unint64_t v62 = 0;
    goto LABEL_68;
  }
  if (v115 >= v58 || !*(_WORD *)(v57 + 16))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    unint64_t v62 = ((-15 << ((4 * *(unsigned char *)(v57 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v57 + 18) | ((unint64_t)*(unsigned __int16 *)(v57 + 16) << ((4 * *(unsigned char *)(v57 + 18) + 8) & 0x3C));
LABEL_68:
    swift_unknownObjectRelease();
    uint64_t v8 = 0;
    if (!v57)
    {
      uint64_t v63 = 0;
      goto LABEL_99;
    }
LABEL_69:
    swift_unknownObjectRetain();
    uint64_t v63 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v59, v62, v8, v57, v58, v60);
    swift_unknownObjectRelease_n();
LABEL_99:
    uint64_t v64 = v59;
    goto LABEL_100;
  }
  uint64_t v66 = *(unsigned __int8 *)(v57 + 18);
  if (*(unsigned char *)(v57 + 18))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    uint64_t v67 = v57;
    while (1)
    {
      uint64_t v69 = *(unsigned __int16 *)(v67 + 16);
      if (*(_WORD *)(v67 + 16))
      {
        uint64_t v70 = *(void *)(v67 + 32);
        uint64_t v71 = v61 - v70;
        if (__OFSUB__(v61, v70)) {
          goto LABEL_115;
        }
        if (__OFADD__(v71, 1)) {
          goto LABEL_116;
        }
        if (v71 + 1 <= 0)
        {
          uint64_t v69 = 0;
          goto LABEL_44;
        }
        if (v69 == 1)
        {
          v61 -= v70;
        }
        else
        {
          uint64_t v72 = *(void *)(v67 + 56);
          BOOL v73 = __OFSUB__(v71, v72);
          uint64_t v74 = v71 - v72;
          if (v73) {
            goto LABEL_125;
          }
          if (__OFADD__(v74, 1)) {
            goto LABEL_126;
          }
          if (v74 + 1 < 1)
          {
            uint64_t v69 = 1;
            uint64_t v61 = v71;
            goto LABEL_44;
          }
          if (v69 != 2)
          {
            uint64_t v75 = (void *)(v67 + 80);
            uint64_t v76 = 2;
            while (v69 != v76)
            {
              uint64_t v61 = v74 - *v75;
              if (__OFSUB__(v74, *v75)) {
                goto LABEL_112;
              }
              if (__OFADD__(v61, 1)) {
                goto LABEL_113;
              }
              if (v61 + 1 < 1)
              {
                uint64_t v69 = v76;
                uint64_t v61 = v74;
                goto LABEL_44;
              }
              ++v76;
              v75 += 3;
              uint64_t v74 = v61;
              if (v69 == v76) {
                goto LABEL_43;
              }
            }
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
            goto LABEL_118;
          }
          uint64_t v61 = v74;
        }
      }
LABEL_43:
      if (v61) {
        goto LABEL_114;
      }
LABEL_44:
      char v68 = (4 * *(unsigned char *)(v67 + 18) + 8) & 0x3C;
      uint64_t v66 = ((-15 << v68) - 1) & v66 | (v69 << v68);
      uint64_t v8 = *(void *)(v67 + 24 + 24 * v69);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      uint64_t v67 = v8;
      if (!*(unsigned char *)(v8 + 18)) {
        goto LABEL_72;
      }
    }
  }
  swift_unknownObjectRetain_n();
  swift_retain();
  uint64_t v8 = v57;
LABEL_72:
  uint64_t v77 = *(unsigned __int16 *)(v8 + 16);
  if (!*(_WORD *)(v8 + 16))
  {
    unint64_t v78 = v61;
    uint64_t v56 = (_OWORD *)v118;
    goto LABEL_92;
  }
  unint64_t v78 = v61 - 1;
  if (__OFSUB__(v61, 1))
  {
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }
  uint64_t v56 = (_OWORD *)v118;
  if (__OFADD__(v78, 1))
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }
  if (v61 <= 0) {
    goto LABEL_94;
  }
  if (v77 == 1)
  {
LABEL_92:
    if (!v78)
    {
LABEL_97:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v62 = v66 & 0xFFFFFFFFFFFFF0FFLL | (v77 << 8);
      uint64_t v61 = v115;
      goto LABEL_69;
    }
    __break(1u);
LABEL_94:
    uint64_t v77 = 0;
    goto LABEL_97;
  }
  BOOL v73 = __OFSUB__(v78, 1);
  unint64_t v78 = v61 - 2;
  if (v73)
  {
LABEL_133:
    __break(1u);
    goto LABEL_134;
  }
  if (!__OFADD__(v78, 1))
  {
    if (v61 - 1 < 1)
    {
      uint64_t v77 = 1;
      goto LABEL_97;
    }
    if (v77 != 2)
    {
      uint64_t v79 = 0;
      unint64_t v80 = v77 - 2;
      if (v78 >= v77 - 3) {
        unint64_t v81 = v77 - 3;
      }
      else {
        unint64_t v81 = v61 - 2;
      }
      if (v81 >= v61 + 0x7FFFFFFFFFFFFFFELL) {
        unint64_t v81 = v61 + 0x7FFFFFFFFFFFFFFELL;
      }
      while (v80 > v81)
      {
        if (v61 + 0x7FFFFFFFFFFFFFFELL == v79) {
          goto LABEL_130;
        }
        if (v78 == v79)
        {
          uint64_t v77 = v61;
          goto LABEL_97;
        }
        if (v80 == ++v79)
        {
          v78 -= v79;
          goto LABEL_92;
        }
      }
      goto LABEL_129;
    }
    goto LABEL_92;
  }
LABEL_134:
  __break(1u);
}

uint64_t *AttributedString.Runs._resolve(_:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *result;
  if (*result < v2[1] || v2[9] < v4)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  uint64_t v5 = result[3];
  uint64_t v6 = *v2;
  uint64_t v60 = *result;
  if (v5 == 1)
  {
    uint64_t v7 = *(void *)(v6 + 88);
  }
  else
  {
    uint64_t v8 = result[1];
    uint64_t v7 = *(void *)(v6 + 88);
    if (v8 == v7)
    {
      unint64_t v61 = result[2];
      if (result[7] == 2)
      {
        uint64_t v9 = *(void *)(v6 + 64);
        if (v9)
        {
          uint64_t v10 = *(void *)(v6 + 72);
          uint64_t v11 = *(void *)(v6 + 80);
          swift_unknownObjectRetain();
          uint64_t v12 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v8, v61, v5, v9, v10, v11);
          swift_unknownObjectRelease();
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v7 = v8;
        goto LABEL_71;
      }
      uint64_t v12 = BigString.Index.utf8Offset.getter();
      uint64_t v7 = v8;
LABEL_69:
      if (BigString.Index.utf8Offset.getter() == v12)
      {
        uint64_t v39 = v7;
        long long v40 = *(_OWORD *)(v6 + 16);
        long long v41 = *(_OWORD *)(v6 + 48);
        long long v66 = *(_OWORD *)(v6 + 32);
        long long v67 = v41;
        long long v65 = v40;
        long long v42 = *(_OWORD *)(v6 + 16);
        long long v71 = *(_OWORD *)(v6 + 32);
        long long v72 = v41;
        long long v70 = v42;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v70, (uint64_t)v63);
        outlined retain of Locale((uint64_t)v63);
        uint64_t v43 = (char *)v64;
        BigString.utf8.getter();
        outlined release of Locale((uint64_t)&v65);
        uint64_t v44 = BigString.UTF8View.index(roundingDown:)();
LABEL_72:
        uint64_t v54 = v44;
        uint64_t v55 = v45;
        uint64_t v56 = v46;
        uint64_t v57 = v47;
        uint64_t result = (uint64_t *)outlined release of Locale((uint64_t)v43);
        *a2 = v39;
        a2[1] = v61;
        a2[2] = v5;
        a2[3] = v60;
        a2[4] = v12;
        a2[5] = v54;
        a2[6] = v55;
        a2[7] = v56;
        a2[8] = v57;
        return result;
      }
LABEL_71:
      uint64_t v39 = v7;
      long long v48 = *(_OWORD *)(v6 + 16);
      long long v49 = *(_OWORD *)(v6 + 48);
      v64[1] = *(_OWORD *)(v6 + 32);
      v64[2] = v49;
      v64[0] = v48;
      long long v50 = *(_OWORD *)(v6 + 16);
      long long v66 = *(_OWORD *)(v6 + 32);
      long long v67 = v49;
      long long v65 = v50;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v65, (uint64_t)v68);
      outlined retain of Locale((uint64_t)v68);
      uint64_t v43 = &v62;
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v64);
      long long v51 = *(_OWORD *)(v6 + 16);
      long long v52 = *(_OWORD *)(v6 + 48);
      v63[1] = *(_OWORD *)(v6 + 32);
      v63[2] = v52;
      v63[0] = v51;
      long long v53 = *(_OWORD *)(v6 + 16);
      long long v71 = *(_OWORD *)(v6 + 32);
      long long v72 = v52;
      long long v70 = v53;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v70, (uint64_t)v69);
      outlined retain of Locale((uint64_t)v69);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v63);
      uint64_t v44 = BigString.UTF8View.index(_:offsetBy:)();
      goto LABEL_72;
    }
  }
  uint64_t v13 = *(void *)(v6 + 64);
  uint64_t v14 = *(void *)(v6 + 72);
  if (v13) {
    uint64_t v15 = *(void *)(v6 + 72);
  }
  else {
    uint64_t v15 = 0;
  }
  if (v4 < 0 || v15 < v4)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v58 = *(void *)(v6 + 80);
  uint64_t v59 = result[7];
  if (!v13 || (v4 < v14 ? (BOOL v16 = *(unsigned __int16 *)(v13 + 16) == 0) : (BOOL v16 = 1), v16))
  {
    unint64_t v17 = swift_unknownObjectRetain_n();
    unint64_t v18 = specialized Rope._endPath.getter(v17);
    swift_unknownObjectRelease();
    uint64_t v5 = 0;
    unint64_t v61 = v18;
    if (v13) {
      goto LABEL_21;
    }
    uint64_t v12 = 0;
LABEL_68:
    if (v59 == 2) {
      goto LABEL_71;
    }
    goto LABEL_69;
  }
  uint64_t v19 = *(unsigned __int8 *)(v13 + 18);
  if (!*(unsigned char *)(v13 + 18))
  {
    uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    unint64_t v28 = 0;
    uint64_t v5 = v13;
    uint64_t v29 = *(unsigned __int16 *)(v13 + 16);
    if (*(_WORD *)(v13 + 16)) {
      goto LABEL_41;
    }
LABEL_53:
    unint64_t v30 = v4;
    goto LABEL_65;
  }
  uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
  uint64_t v5 = v13;
  do
  {
    uint64_t v21 = *(unsigned __int16 *)(v5 + 16);
    if (*(_WORD *)(v5 + 16))
    {
      uint64_t v22 = *(void *)(v5 + 32);
      BOOL v23 = __OFSUB__(v4, v22);
      uint64_t v24 = v4 - v22;
      if (v23) {
        goto LABEL_77;
      }
      if (__OFADD__(v24, 1)) {
        goto LABEL_78;
      }
      if (v24 + 1 < 1)
      {
        uint64_t v21 = 0;
        goto LABEL_26;
      }
      if (v21 != 1)
      {
        long long v25 = (uint64_t *)(v5 + 56);
        uint64_t v26 = 1;
        while (1)
        {
          uint64_t v27 = *v25;
          v25 += 3;
          uint64_t v4 = v24 - v27;
          if (__OFSUB__(v24, v27)) {
            break;
          }
          if (__OFADD__(v4, 1)) {
            goto LABEL_75;
          }
          if (v4 + 1 < 1)
          {
            uint64_t v21 = v26;
            uint64_t v4 = v24;
            goto LABEL_26;
          }
          ++v26;
          uint64_t v24 = v4;
          if (v21 == v26) {
            goto LABEL_25;
          }
        }
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
      uint64_t v4 = v24;
    }
LABEL_25:
    if (v4) {
      goto LABEL_76;
    }
LABEL_26:
    char v20 = (4 * *(unsigned char *)(v5 + 18) + 8) & 0x3C;
    uint64_t v19 = ((-15 << v20) - 1) & v19 | (v21 << v20);
    uint64_t v5 = *(void *)(v5 + 24 + 24 * v21);
    swift_unknownObjectRetain();
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
  }
  while (*(unsigned char *)(v5 + 18));
  unint64_t v28 = v19 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v29 = *(unsigned __int16 *)(v5 + 16);
  if (!*(_WORD *)(v5 + 16)) {
    goto LABEL_53;
  }
LABEL_41:
  unint64_t v30 = v4 - 1;
  if (__OFSUB__(v4, 1)) {
    goto LABEL_82;
  }
  if (__OFADD__(v30, 1))
  {
LABEL_83:
    __break(1u);
  }
  else
  {
    if (v4 < 1)
    {
      uint64_t v29 = 0;
      goto LABEL_66;
    }
    if (v29 != 1)
    {
      unint64_t v31 = v29 - 2;
      if (v30 < v29 - 2) {
        unint64_t v31 = v4 - 1;
      }
      if (v31 >= v4 + 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v31 = v4 + 0x7FFFFFFFFFFFFFFFLL;
      }
      unint64_t v32 = v31 + 1;
      if (v32 >= 5)
      {
        uint64_t v34 = v32 & 3;
        if ((v32 & 3) == 0) {
          uint64_t v34 = 4;
        }
        unint64_t v35 = v32 - v34;
        uint64_t v33 = v35 + 1;
        int64x2_t v36 = 0uLL;
        v37.i64[0] = 0;
        v37.i64[1] = v4 - 1;
        v38.i64[0] = -1;
        v38.i64[1] = -1;
        do
        {
          int64x2_t v37 = vaddq_s64(v37, v38);
          int64x2_t v36 = vaddq_s64(v36, v38);
          v35 -= 4;
        }
        while (v35);
        unint64_t v30 = vaddvq_s64(vaddq_s64(vzip1q_s64(v37, v36), vzip2q_s64(v37, v36)));
      }
      else
      {
        uint64_t v33 = 1;
      }
      while (v4 + 0x8000000000000000 != v33)
      {
        if (v4 == v33)
        {
          uint64_t v29 = v4;
          goto LABEL_66;
        }
        ++v33;
        --v30;
        if (v29 == v33) {
          goto LABEL_65;
        }
      }
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
LABEL_65:
    if (!v30)
    {
LABEL_66:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v18 = v28 | (v29 << 8);
      unint64_t v61 = v18;
LABEL_21:
      swift_unknownObjectRetain();
      uint64_t v12 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v7, v18, v5, v13, v14, v58);
      swift_unknownObjectRelease_n();
      goto LABEL_68;
    }
  }
  __break(1u);
  return result;
}

uint64_t *outlined release of (AttributedString.Runs.Run?, AttributedString.Runs.Run?)(uint64_t *a1)
{
  uint64_t v2 = a1[11];
  outlined consume of AttributedString.Runs.Run?(*a1);
  outlined consume of AttributedString.Runs.Run?(v2);
  return a1;
}

uint64_t outlined consume of AttributedString.Runs.Run?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of AttributedString.Runs.Run?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView;
  if (!lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView;
  if (!lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView;
  if (!lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView;
  if (!lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView);
  }
  return result;
}

uint64_t *closure #1 in static AttributedString._nextModifyIdentity.getter@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *result + 1;
  if (__OFADD__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    *unint64_t result = v2;
    *a2 = v2;
  }
  return result;
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v29 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v31 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_24;
    }
    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v10 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v30) {
        return 1;
      }
      unint64_t v11 = *(void *)(v29 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v30) {
          return 1;
        }
        unint64_t v11 = *(void *)(v29 + 8 * v12);
        if (!v11) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v11 - 1) & v11;
    int64_t v31 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    uint64_t v14 = result;
    uint64_t v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      goto LABEL_39;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    uint64_t v22 = (void *)(v21 + 16 * v20);
    BOOL v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v24 = ~v19;
      for (unint64_t i = v20 + 1; ; unint64_t i = v26 + 1)
      {
        uint64_t v26 = i & v24;
        if (((*(void *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        uint64_t v27 = (void *)(v21 + 16 * v26);
        BOOL v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_39:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    unint64_t result = v14;
    int64_t v3 = v31;
  }
  uint64_t v13 = v3 + 4;
  if (v3 + 4 >= v30) {
    return 1;
  }
  unint64_t v11 = *(void *)(v29 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v3 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_23;
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t ICUDateFormatter.DateFormatInfo.init(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  void (*v7)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, void *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int16x8_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  long long v40;
  void (*v41)(long long *__return_ptr, char *, uint64_t, void *);
  char v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  void *v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t result;
  uint64_t (*v51)(uint64_t, void *);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71[9];
  void v72[2];
  char v73;
  char v74;
  uint64_t v75;
  unsigned __int32 v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD v91[3];
  long long v92;
  unsigned char v93[58];
  long long v94;
  unsigned char v95[16];
  long long v96;
  long long v97;
  long long v98;
  unsigned char v99[56];
  char v100[8];
  uint64_t v101;
  __int32 v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  char v109;

  long long v2 = a1[6];
  *(_OWORD *)&v93[16] = a1[5];
  *(_OWORD *)&v93[32] = v2;
  *(_OWORD *)&v93[42] = *(_OWORD *)((char *)a1 + 106);
  long long v3 = a1[4];
  long long v4 = a1[1];
  v91[0] = *a1;
  v91[1] = v4;
  long long v5 = a1[3];
  _OWORD v91[2] = a1[2];
  uint64_t v92 = v5;
  *(_OWORD *)uint64_t v93 = v3;
  uint64_t v94 = *(_OWORD *)&v93[40];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)&v93[48] + 24);
  outlined retain of Locale((uint64_t)&v94);
  long long v70 = *(void *)&v93[48];
  uint64_t v69 = ObjectType;
  v7(v72, ObjectType, *(void *)&v93[48]);
  outlined release of Locale((uint64_t)&v94);
  char v68 = v72[0];
  outlined init with take of LocalePreferences?((uint64_t)&v92 + 8, (uint64_t)v95, &demangling cache variable for type metadata for Date.FormatStyle.DateStyle?);
  outlined init with take of LocalePreferences?((uint64_t)v95, (uint64_t)&v108, &demangling cache variable for type metadata for Date.FormatStyle.DateStyle?);
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  if ((v109 & 1) == 0)
  {
    int64_t v10 = v108;
    uint64_t v96 = *(_OWORD *)&v93[8];
    unint64_t v11 = *(void *)&v93[16];
    int64_t v12 = swift_getObjectType();
    v72[0] = v10;
    uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 496);
    outlined retain of Locale((uint64_t)&v96);
    unint64_t v8 = v13(v72, v12, v11);
    unint64_t v9 = v14;
    outlined release of Locale((uint64_t)&v96);
  }
  uint64_t v97 = *(_OWORD *)&v93[8];
  uint64_t v15 = *(void **)&v93[16];
  uint64_t v16 = swift_getObjectType();
  uint64_t v17 = (uint64_t (*)(uint64_t, void *))v15[59];
  outlined retain of Locale((uint64_t)&v97);
  long long v67 = v16;
  Swift::Int v18 = v17(v16, v15);
  unint64_t v20 = v19;
  outlined release of Locale((uint64_t)&v97);
  outlined retain of Locale((uint64_t)&v94);
  v7(v72, v69, v70);
  outlined release of Locale((uint64_t)&v94);
  uint64_t v21 = v72[0];
  outlined init with take of LocalePreferences?((uint64_t)v91, (uint64_t)v99, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  outlined init with take of LocalePreferences?((uint64_t)v99, (uint64_t)v100, (uint64_t *)&demangling cache variable for type metadata for Date.FormatStyle.DateFieldCollection?);
  BOOL v23 = v104;
  if ((v104 & 0xFF000000000000) == 0x3000000000000)
  {
    uint64_t v24 = 0;
    long long v25 = 0;
    LOBYTE(v26) = 0;
    LOBYTE(v27) = 0;
    BOOL v28 = 0;
    v22.i64[0] = 0x3000000050003;
    uint64_t v29 = 12;
    int64_t v30 = -1;
    LOBYTE(v31) = 2;
    LOBYTE(v32) = 9;
    LOBYTE(v33) = 6;
    BOOL v23 = 1;
    uint64_t v34 = 3;
    LOBYTE(v35) = 3;
    LOBYTE(v36) = 1;
  }
  else
  {
    int64_t v31 = HIBYTE(v104);
    int64x2_t v36 = HIWORD(v104);
    uint64_t v27 = v104 >> 40;
    unint64_t v32 = HIDWORD(v104);
    uint64_t v33 = v104 >> 24;
    unint64_t v35 = v104 >> 16;
    uint64_t v26 = (v104 >> 8) & 1;
    uint64_t v34 = v100[0];
    uint64_t v24 = v101;
    v22.i32[0] = v102;
    uint64_t v22 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v22.i8);
    long long v25 = v103;
    BOOL v28 = v105;
    int64_t v30 = v106;
    uint64_t v29 = v107;
  }
  v72[0] = v18;
  v72[1] = v20;
  BOOL v73 = v21;
  uint64_t v74 = v34;
  uint64_t v75 = v24;
  uint64_t v76 = vmovn_s16(v22).u32[0];
  uint64_t v77 = v25;
  unint64_t v78 = v23;
  uint64_t v79 = v26;
  unint64_t v80 = v35;
  unint64_t v81 = v33;
  uint64_t v82 = v32;
  unint64_t v83 = v27;
  uint64_t v84 = v36;
  uint64_t v85 = v31;
  long long v86 = v28;
  long long v87 = v30;
  long long v88 = v29;
  long long v89 = v8;
  long long v90 = v9;
  int64x2_t v37 = one-time initialization token for patternCache;
  int64x2_t v38 = swift_bridgeObjectRetain();
  if (v37 != -1) {
    int64x2_t v38 = swift_once();
  }
  uint64_t v39 = static ICUDateFormatter.patternCache;
  MEMORY[0x1F4188790](v38);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v39 + 24));
  partial apply for closure #1 in ICUDateFormatter.DateFormatInfo.init(_:)((uint64_t *)(v39 + 16), (uint64_t *)&v98);
  os_unfair_lock_unlock((os_unfair_lock_t)(v39 + 24));
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease_n();
  long long v40 = v98;
  v71[0] = v68;
  long long v41 = (void (*)(long long *__return_ptr, char *, uint64_t, void *))v15[54];
  outlined retain of Locale((uint64_t)&v97);
  v41(&v98, v71, v67, v15);
  outlined release of Locale((uint64_t)&v97);
  long long v42 = v98;
  if (v98 == 7)
  {
    uint64_t v43 = v70;
    uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t))(v70 + 56);
    outlined retain of Locale((uint64_t)&v94);
    uint64_t v45 = v69;
    long long v65 = v44(v69, v70);
    outlined release of Locale((uint64_t)&v94);
LABEL_15:
    long long v51 = (uint64_t (*)(uint64_t, void *))v15[8];
    outlined retain of Locale((uint64_t)&v97);
    long long v52 = v51(v67, v15);
    uint64_t v54 = v53;
    outlined release of Locale((uint64_t)&v97);
    uint64_t v98 = *(_OWORD *)&v93[24];
    uint64_t v55 = *(void *)&v93[32];
    uint64_t v56 = swift_getObjectType();
    uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t))(v55 + 32);
    outlined retain of Locale((uint64_t)&v98);
    uint64_t v58 = v57(v56, v55);
    uint64_t v60 = v59;
    outlined release of Locale((uint64_t)&v98);
    unint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t))(v43 + 72);
    outlined retain of Locale((uint64_t)&v94);
    char v62 = v61(v45, v43);
    outlined release of Locale((uint64_t)&v94);
    unint64_t result = outlined release of Date.FormatStyle((uint64_t)v91);
    uint64_t v63 = v93[56];
    uint64_t v64 = v93[57];
    *(void *)a2 = v52;
    *(void *)(a2 + 8) = v54;
    *(void *)(a2 + 16) = v58;
    *(void *)(a2 + 24) = v60;
    *(unsigned char *)(a2 + 32) = v68;
    *(void *)(a2 + 40) = v65;
    *(void *)(a2 + 48) = v62;
    *(unsigned char *)(a2 + 56) = v63;
    *(_OWORD *)(a2 + 64) = v40;
    *(unsigned char *)(a2 + 80) = v64;
    *(void *)(a2 + 88) = 0xC1CD27E440000000;
    return result;
  }
  if (one-time initialization token for weekdays != -1) {
    swift_once();
  }
  uint64_t v46 = static Locale.Weekday.weekdays;
  swift_bridgeObjectRetain();
  uint64_t v47 = specialized Collection<>.firstIndex(of:)(v42, (uint64_t)v46);
  long long v49 = v48;
  unint64_t result = swift_bridgeObjectRelease();
  if ((v49 & 1) == 0)
  {
    if (!__OFADD__(v47, 1))
    {
      uint64_t v45 = v69;
      uint64_t v43 = v70;
      long long v65 = v47 + 1;
      goto LABEL_15;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t outlined retain of Locale(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for _CalendarProtocol.identifier.getter in conformance _CalendarAutoupdating()
{
  return _CalendarAutoupdating.identifier.getter();
}

uint64_t _CalendarAutoupdating.identifier.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v4);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  uint64_t v1 = v4[1];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 24))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t outlined release of Date.FormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t specialized _TimeZoneAutoupdating.identifier.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.current.getter(v0, v6);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  uint64_t v2 = v6[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(ObjectType, v2);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t specialized _CalendarAutoupdating.minimumDaysInFirstWeek.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v5);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  uint64_t v1 = v5[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 72))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t partial apply for closure #1 in ICUDateFormatter.DateFormatInfo.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in ICUDateFormatter.DateFormatInfo.init(_:)(a1, *(uint64_t **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

uint64_t specialized _CalendarAutoupdating.firstWeekday.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v5);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  uint64_t v1 = v5[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 56))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.customDateFormat(_:) in conformance _LocaleAutoupdating(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = v1;
  uint64_t v5 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v3 + 496))(&v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t _LocaleICU.customDateFormat(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  outlined init with take of LocalePreferences?(v1 + 32, (uint64_t)v8);
  outlined init with take of LocalePreferences?((uint64_t)v8, (uint64_t)v9);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v9) == 1) {
    return 0;
  }
  uint64_t v4 = v10;
  if (!v10) {
    return 0;
  }
  if (!*(void *)(v10 + 16)) {
    return 0;
  }
  uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v2);
  if ((v6 & 1) == 0) {
    return 0;
  }
  uint64_t v3 = *(void *)(*(void *)(v4 + 56) + 16 * v5);
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t specialized Rope._Node.append(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  uint64_t v9 = *v3;
  if ((result & 1) == 0)
  {
    uint64_t v9 = specialized Rope._Node.copy()(*v3);
    uint64_t v11 = v10;
    uint64_t v12 = a3;
    uint64_t v14 = v13;
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v4 = v9;
    v4[1] = v11;
    uint64_t v4[2] = v14;
    a3 = v12;
  }
  if (*(unsigned char *)(v9 + 18))
  {
    uint64_t v15 = v4[1];
    uint64_t v16 = v9 + 24 * *(unsigned __int16 *)(v9 + 16);
    uint64_t v18 = *(void *)(v16 + 8);
    uint64_t v17 = (void *)(v16 + 8);
    uint64_t v19 = v15 - v18;
    if (__OFSUB__(v15, v18))
    {
      __break(1u);
    }
    else
    {
      unint64_t v20 = (void *)(v16 + 16);
      uint64_t v21 = v4[2];
      uint64_t v22 = *(void *)(v16 + 16);
      uint64_t v23 = v21 - v22;
      if (!__OFSUB__(v21, v22))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        uint64_t result = specialized Rope._Node.append(_:)(a1, a2, a3);
        BOOL v26 = __OFADD__(v19, *v17);
        uint64_t v27 = v19 + *v17;
        if (!v26)
        {
          uint64_t v28 = v23 + *v20;
          if (!__OFADD__(v23, *v20))
          {
            uint64_t v29 = result;
            uint64_t v30 = v24;
            uint64_t v31 = v25;
            swift_unknownObjectRelease();
            v4[1] = v27;
            uint64_t v4[2] = v28;
            if (!v29)
            {
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              return 0;
            }
            unint64_t v32 = (_WORD *)(*v4 + 16);
            uint64_t v33 = *v4 + 24;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            specialized closure #2 in Rope._Node.append(_:)(v32, v33);
            swift_unknownObjectRelease();
            if (*(_WORD *)(*v4 + 16) == 15)
            {
              uint64_t v36 = specialized Rope._Node.split(keeping:)(8);
              uint64_t v34 = swift_unknownObjectRetain();
              specialized Rope._Node._appendNode(_:)(v34, v30, v31);
              swift_unknownObjectRelease_n();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              return v36;
            }
            uint64_t v35 = swift_unknownObjectRetain();
            specialized Rope._Node._appendNode(_:)(v35, v30, v31);
            swift_unknownObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            return 0;
          }
LABEL_22:
          __break(1u);
          return result;
        }
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  if (*(_WORD *)(v9 + 16) == 15)
  {
    uint64_t v36 = specialized Rope._Node.split(keeping:)(8);
    specialized Rope._Node._appendItem(_:)(a1, a2, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v36;
  }
  specialized Rope._Node._appendItem(_:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for Encoder.unkeyedContainer() in conformance __PlistEncoderBPlist@<X0>(uint64_t **a1@<X8>)
{
  return __PlistEncoderBPlist.unkeyedContainer()(a1);
}

uint64_t __PlistEncoderBPlist.unkeyedContainer()@<X0>(uint64_t **a1@<X8>)
{
  uint64_t v2 = v1;
  if ((*(uint64_t (**)(void))(*v1 + 240))())
  {
    uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
    if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0) {
      uint64_t v4 = specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x1E4FBC860]);
    }
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 16) = v4;
    *(unsigned char *)(v5 + 40) = 80;
    *(void *)(v5 + 48) = -1;
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    goto LABEL_7;
  }
  uint64_t result = specialized BidirectionalCollection.last.getter(v1[2]);
  if (!result)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v5 = result;
  if ((*(unsigned char *)(result + 40) & 0xF0) != 0x50)
  {
    uint64_t result = swift_release();
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v7 = v2[5];
  a1[3] = (uint64_t *)&unk_1ECA436B0;
  a1[4] = (uint64_t *)lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist();
  *a1 = v2;
  a1[1] = (uint64_t *)v5;
  a1[2] = (uint64_t *)v7;
  swift_retain();

  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist()
{
  unint64_t result = lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist;
  if (!lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist);
  }
  return result;
}

void *type metadata accessor for ExpressionStructure.CodingKeys()
{
  return &unk_1ECA3BBA0;
}

uint64_t NSURLSession.CancelState.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Predicate<Pack{repeat A}>(void *a1, uint64_t a2)
{
  return Predicate.encode(to:)(a1, a2);
}

uint64_t __NSFireTimer(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  uint64_t v4 = *(const char **)(a2 + 16);
  _CFAutoreleasePoolPush();
  id v5 = a1;
  id v6 = v3;
  objc_msgSend(v3, v4, a1);

  return _CFAutoreleasePoolPop();
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t partial apply for closure #1 in NSRunLoop.schedule(options:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void partial apply for closure #1 in _getErrorDefaultUserInfo<A>(_:)()
{
}

void closure #1 in _getErrorDefaultUserInfo<A>(_:)()
{
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_userInfoValueProviderForDomain_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v1)
  {
    _Block_release(v1);
  }
  else
  {
    uint64_t v2 = String._bridgeToObjectiveCImpl()();
    v4[4] = closure #1 in closure #1 in _getErrorDefaultUserInfo<A>(_:);
    v4[5] = 0;
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 1107296256;
    uint64_t v4[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error, @guaranteed String) -> (@out Any?);
    _OWORD v4[3] = &block_descriptor_12_1;
    uint64_t v3 = _Block_copy(v4);
    objc_msgSend(v0, sel_setUserInfoValueProviderForDomain_provider_, v2, v3);
    _Block_release(v3);
    swift_unknownObjectRelease();
  }
}

id partial apply for closure #1 in NSRunLoop.schedule(after:tolerance:options:_:)(void *a1)
{
  (*(void (**)(void))(v1 + 16))();

  return objc_msgSend(a1, sel_invalidate);
}

void sub_18196A8E8(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_18196AC28(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

unint64_t closure #1 in _ProcessInfo.arguments.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    *a2 = v4;
    return swift_bridgeObjectRetain();
  }
  uint64_t v5 = static CommandLine.arguments.getter();
  if (!_CFProcessPath())
  {
LABEL_28:
    *(void *)(a1 + 16) = v5;
    *a2 = v5;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  uint64_t v6 = String.init(cString:)();
  unint64_t v8 = v7;
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized Collection.first.getter(v6, v8);
  if (!v10) {
    goto LABEL_11;
  }
  if (v9 != 126 || v10 != 0xE100000000000000)
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_9;
    }
LABEL_11:
    unint64_t v15 = v8;
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
LABEL_9:
  unint64_t v12 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v6, v8);
  if (v13)
  {
    uint64_t v16 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0) {
      uint64_t v16 = v6;
    }
    uint64_t v17 = v16 << 16;
    if ((v8 & 0x1000000000000000) == 0 || (v6 & 0x800000000000000) != 0) {
      unint64_t v14 = v17 | 7;
    }
    else {
      unint64_t v14 = v17 | 0xB;
    }
  }
  else
  {
    unint64_t v14 = v12;
  }
  unint64_t result = String.index(after:)();
  if (v14 >> 14 == result >> 14)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    if (v14 >> 14 < result >> 14) {
      goto LABEL_32;
    }
    uint64_t v21 = String.subscript.getter();
    uint64_t v19 = MEMORY[0x185301F50](v21);
    uint64_t v20 = v22;
    swift_bridgeObjectRelease();
  }
  unint64_t v28 = static String.homeDirectoryPath(forUser:)(v19, v20);
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Collection.suffix(from:)(v14, v6, v8);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v28;
  unint64_t v15 = v24;
LABEL_23:
  uint64_t v25 = String._standardizingPath.getter(v6, v15);
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v5 + 16))
  {
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1821037E0;
    *(void *)(v5 + 32) = v25;
    *(void *)(v5 + 40) = v27;
    goto LABEL_28;
  }
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if (*(void *)(v5 + 16))
    {
LABEL_26:
      *(void *)(v5 + 32) = v25;
      *(void *)(v5 + 40) = v27;
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v5);
    uint64_t v5 = result;
    if (*(void *)(result + 16)) {
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

ValueMetadata *type metadata accessor for _NSSwiftTimeZone.State()
{
  return &type metadata for _NSSwiftTimeZone.State;
}

ValueMetadata *type metadata accessor for TimeZoneCache.State()
{
  return &type metadata for TimeZoneCache.State;
}

ValueMetadata *type metadata accessor for _TimeZoneICU.State()
{
  return &type metadata for _TimeZoneICU.State;
}

uint64_t NSObject.KeyValueObservingPublisher.didChange()(uint64_t a1)
{
  *(_OWORD *)(swift_allocObject() + 16) = *(_OWORD *)(a1 + 16);
  swift_getWitnessTable();
  Publisher.map<A>(_:)();
  return swift_release();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DateComponents(void *a1)
{
  return DateComponents.encode(to:)(a1);
}

uint64_t DateComponents.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DateComponents.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = *v1;
  uint64_t v6 = v1[1];
  uint64_t v8 = v1[2];
  uint64_t v45 = v1[3];
  uint64_t v46 = v8;
  uint64_t v9 = v1[4];
  int v50 = *((unsigned __int8 *)v1 + 40);
  uint64_t v43 = v1[6];
  uint64_t v44 = v9;
  LODWORD(v9) = *((unsigned __int8 *)v1 + 56);
  uint64_t v40 = v1[8];
  int v41 = *((unsigned __int8 *)v1 + 72);
  int v42 = v9;
  uint64_t v38 = v1[10];
  int v39 = *((unsigned __int8 *)v1 + 88);
  uint64_t v16 = v1[12];
  int v17 = *((unsigned __int8 *)v1 + 104);
  uint64_t v36 = v1[14];
  int v37 = *((unsigned __int8 *)v1 + 120);
  uint64_t v34 = v1[16];
  int v35 = *((unsigned __int8 *)v1 + 136);
  uint64_t v32 = v1[18];
  int v33 = *((unsigned __int8 *)v1 + 152);
  uint64_t v30 = v1[20];
  int v31 = *((unsigned __int8 *)v1 + 168);
  uint64_t v28 = v1[22];
  int v29 = *((unsigned __int8 *)v1 + 184);
  uint64_t v26 = v1[24];
  int v27 = *((unsigned __int8 *)v1 + 200);
  uint64_t v24 = v1[26];
  int v25 = *((unsigned __int8 *)v1 + 216);
  uint64_t v22 = v1[30];
  int v19 = *((unsigned __int8 *)v1 + 280);
  int v23 = *((unsigned __int8 *)v1 + 248);
  uint64_t v20 = v1[32];
  int v21 = *((unsigned __int8 *)v1 + 264);
  uint64_t v18 = v1[34];
  int v10 = *((unsigned __int8 *)v1 + 281);
  uint64_t v11 = a1[3];
  unint64_t v12 = a1;
  char v13 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v12, v11);
  lazy protocol witness table accessor for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v48 = v7;
  uint64_t v49 = v6;
  char v51 = 0;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  uint64_t v14 = v47;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v14)
  {
    LODWORD(v47) = v10;
    uint64_t v48 = v46;
    uint64_t v49 = v45;
    char v51 = 1;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v48) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v48) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v48) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v48) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v48) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v48) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v48) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v48) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v48) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v48) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v48) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v48) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v48) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v48) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v48) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v48) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v13, v3);
}

unint64_t lazy protocol witness table accessor for type Calendar and conformance Calendar()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar and conformance Calendar;
  if (!lazy protocol witness table cache variable for type Calendar and conformance Calendar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar and conformance Calendar);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents.CodingKeys and conformance DateComponents.CodingKeys);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.Variable<A>@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return PredicateExpressions.Variable.init(from:)(a1, a2);
}

uint64_t PredicateExpressions.Variable.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v11 = a2;
  type metadata accessor for PredicateExpressions.Variable.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v8 = v11;
    lazy protocol witness table accessor for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *uint64_t v8 = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ExpressionStructure@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized ExpressionStructure.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t specialized ExpressionStructure.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpressionStructure.CodingKeys>?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v13[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpressionStructure.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v13[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    outlined destroy of KeyedDecodingContainer<ExpressionStructure.CodingKeys>?((uint64_t)v5);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Decoder.singleValueContainer()();
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    uint64_t v11 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    LOBYTE(v13[0]) = 0;
    uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ExpressionStructure.Argument]);
    char v14 = 1;
    lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type [ExpressionStructure.Argument] and conformance <A> [A], &demangling cache variable for type metadata for [ExpressionStructure.Argument], (void (*)(void))lazy protocol witness table accessor for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v11;
}

unint64_t lazy protocol witness table accessor for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys);
  }
  return result;
}

uint64_t outlined destroy of KeyedDecodingContainer<ExpressionStructure.CodingKeys>?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ExpressionStructure.CodingKeys>?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.Variable<A>(void *a1)
{
  return PredicateExpressions.Variable.encode(to:)(a1);
}

uint64_t PredicateExpressions.Variable.encode(to:)(void *a1)
{
  type metadata accessor for PredicateExpressions.Variable.CodingKeys();
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v13 - v5;
  uint64_t v7 = *v1;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1;
  uint64_t v11 = v10;
  __swift_project_boxed_opaque_existential_1(v9, v8);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13[3] = v7;
  lazy protocol witness table accessor for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v11);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ExpressionStructure(void *a1)
{
  return ExpressionStructure.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t ExpressionStructure.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ExpressionStructure.CodingKeys>);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v13[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a4 + 16))
  {
    uint64_t v12 = v8;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    lazy protocol witness table accessor for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys();
    dispatch thunk of Encoder.container<A>(keyedBy:)();
    LOBYTE(v13[0]) = 0;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v4)
    {
      v13[0] = a4;
      char v14 = 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ExpressionStructure.Argument]);
      lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](&lazy protocol witness table cache variable for type [ExpressionStructure.Argument] and conformance <A> [A], &demangling cache variable for type metadata for [ExpressionStructure.Argument], (void (*)(void))lazy protocol witness table accessor for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v10, v7);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v13, v13[3]);
    dispatch thunk of SingleValueEncodingContainer.encode(_:)();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimeZone(void *a1)
{
  return TimeZone.encode(to:)(a1);
}

uint64_t TimeZone.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TimeZone.CodingKeys>);
  uint64_t v14 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 32);
  swift_unknownObjectRetain();
  v9(ObjectType, v7);
  swift_unknownObjectRelease();
  char v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    char v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 104))(ObjectType, v7);
    uint64_t v12 = v14;
    if (v11)
    {
      char v15 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v6, v4);
  }
}

uint64_t protocol witness for Encoder.container<A>(keyedBy:) in conformance __JSONEncoder()
{
  return __JSONEncoder.container<A>(keyedBy:)();
}

unint64_t lazy protocol witness table accessor for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A](unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for PredicateExpressions.Variable.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument()
{
  unint64_t result = lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument;
  if (!lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExpressionStructure.Argument and conformance ExpressionStructure.Argument);
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance Calendar(void *a1)
{
}

void Calendar.encode(to:)(void *a1)
{
  void (*v10)(long long *__return_ptr, uint64_t, void *);
  uint64_t v11;
  void (*v12)(long long *__return_ptr, uint64_t, void *);
  void (*v13)(uint64_t, void *);
  void (*v14)(uint64_t, void *);
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  long long v22;
  long long v23;
  uint64_t v24;
  long long v25;
  long long v26;
  char v27;

  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v7 = (void *)v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.CodingKeys and conformance Calendar.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = (void (*)(long long *__return_ptr, uint64_t, void *))v7[3];
  swift_unknownObjectRetain();
  v10(&v26, ObjectType, v7);
  swift_unknownObjectRelease();
  Calendar.Identifier.cfCalendarIdentifier.getter();
  LOBYTE(v26) = 0;
  char v11 = v24;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = v4;
    swift_bridgeObjectRelease();
    *(void *)&int v25 = v8;
    *((void *)&v25 + 1) = v7;
    Calendar.locale.getter(&v26);
    int v23 = v26;
    int v25 = v26;
    int v27 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    lazy protocol witness table accessor for type Locale? and conformance <A> A?();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    swift_unknownObjectRelease();
    uint64_t v12 = (void (*)(long long *__return_ptr, uint64_t, void *))v7[6];
    swift_unknownObjectRetain();
    v12(&v26, ObjectType, v7);
    swift_unknownObjectRelease();
    int v23 = v26;
    int v25 = v26;
    int v27 = 2;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    swift_unknownObjectRelease();
    uint64_t v13 = (void (*)(uint64_t, void *))v7[7];
    swift_unknownObjectRetain();
    v13(ObjectType, v7);
    swift_unknownObjectRelease();
    LOBYTE(v26) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v14 = (void (*)(uint64_t, void *))v7[9];
    swift_unknownObjectRetain();
    v14(ObjectType, v7);
    swift_unknownObjectRelease();
    LOBYTE(v26) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&int v23 = v3;
    *(void *)&uint64_t v26 = v8;
    *((void *)&v26 + 1) = v7;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    char v15 = static CalendarCache.cache + 16;
    char v16 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
    swift_retain_n();
    os_unfair_lock_lock(v16);
    closure #1 in CalendarCache.autoupdatingCurrent.getter(v15, (uint64_t *)&v25);
    os_unfair_lock_unlock(v16);
    swift_release_n();
    uint64_t v22 = v25;
    LOBYTE(v15) = specialized static Calendar.== infix(_:_:)((uint64_t)&v26, (uint64_t)&v25);
    swift_unknownObjectRelease();
    if (v15)
    {
      LOBYTE(v26) = 2;
      LOBYTE(v25) = 5;
      lazy protocol witness table accessor for type Calendar.Current and conformance Calendar.Current();
      int v17 = v23;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v17);
    }
    else
    {
      *(void *)&uint64_t v26 = v8;
      *((void *)&v26 + 1) = v7;
      uint64_t v18 = (os_unfair_lock_s *)static CalendarCache.cache;
      swift_retain_n();
      os_unfair_lock_lock(v18 + 15);
      closure #1 in CalendarCache.current.getter((uint64_t *)&v25);
      int v19 = v24;
      os_unfair_lock_unlock(v18 + 15);
      swift_release_n();
      uint64_t v22 = v25;
      uint64_t v20 = specialized static Calendar.== infix(_:_:)((uint64_t)&v26, (uint64_t)&v25);
      swift_unknownObjectRelease();
      int v21 = v23;
      LOBYTE(v26) = (v20 & 1) != 0;
      LOBYTE(v25) = 5;
      lazy protocol witness table accessor for type Calendar.Current and conformance Calendar.Current();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v21);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TimeZone and conformance TimeZone()
{
  unint64_t result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeZone and conformance TimeZone;
  if (!lazy protocol witness table cache variable for type TimeZone and conformance TimeZone)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Current and conformance Calendar.Current()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current;
  if (!lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current;
  if (!lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current;
  if (!lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current;
  if (!lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Locale? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Locale?);
    lazy protocol witness table accessor for type Locale and conformance Locale();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale? and conformance <A> A?);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Calendar.init(from:)(a1, a2);
}

uint64_t Calendar.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.CodingKeys and conformance Calendar.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v45) = 5;
    lazy protocol witness table accessor for type Calendar.Current and conformance Calendar.Current();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    switch((char)v47)
    {
      case 1:
        if (one-time initialization token for cache != -1) {
          swift_once();
        }
        int v19 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
        swift_retain_n();
        os_unfair_lock_lock(v19);
        closure #1 in CalendarCache.current.getter((uint64_t *)&v47);
        goto LABEL_10;
      case 2:
        if (one-time initialization token for cache != -1) {
          swift_once();
        }
        uint64_t v22 = static CalendarCache.cache + 16;
        int v19 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
        swift_retain_n();
        os_unfair_lock_lock(v19);
        closure #1 in CalendarCache.autoupdatingCurrent.getter(v22, (uint64_t *)&v47);
LABEL_10:
        os_unfair_lock_unlock(v19);
        swift_release_n();
        uint64_t v21 = *((void *)&v47 + 1);
        uint64_t v20 = v47;
        goto LABEL_11;
      default:
        LOBYTE(v47) = 0;
        uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
        uint64_t v12 = v11;
        swift_bridgeObjectRetain();
        v13._countAndFlagsBits = v10;
        v13._object = v12;
        Calendar.Identifier.init(identifierString:)(v13);
        if (v47 == 16)
        {
          uint64_t v42 = type metadata accessor for DecodingError();
          swift_allocError();
          uint64_t v14 = a1[3];
          uint64_t v40 = a1[4];
          uint64_t v41 = v15;
          __swift_project_boxed_opaque_existential_1(a1, v14);
          dispatch thunk of Decoder.codingPath.getter();
          *(void *)&long long v47 = 0;
          *((void *)&v47 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(31);
          swift_bridgeObjectRelease();
          *(void *)&long long v47 = 0xD00000000000001CLL;
          *((void *)&v47 + 1) = 0x80000001823ADD70;
          v16._countAndFlagsBits = v10;
          v16._object = v12;
          String.append(_:)(v16);
          swift_bridgeObjectRelease();
          v17._countAndFlagsBits = 46;
          v17._object = (void *)0xE100000000000000;
          String.append(_:)(v17);
          uint64_t v18 = v41;
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, void))(*(void *)(v42 - 8) + 104))(v18, *MEMORY[0x1E4FBBA78]);
          swift_willThrow();
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        }
        else
        {
          LODWORD(v42) = v47;
          swift_bridgeObjectRelease();
          LOBYTE(v45) = 1;
          lazy protocol witness table accessor for type Locale and conformance Locale();
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          uint64_t v24 = *((void *)&v47 + 1);
          uint64_t v23 = v47;
          LOBYTE(v45) = 2;
          lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v40 = v24;
          uint64_t v41 = v23;
          uint64_t v25 = *((void *)&v47 + 1);
          uint64_t v26 = v47;
          LOBYTE(v47) = 3;
          uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)();
          uint64_t v37 = v25;
          uint64_t v38 = v27;
          uint64_t v39 = v26;
          LOBYTE(v47) = 4;
          uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)();
          uint64_t v28 = v39;
          uint64_t v29 = v41;
          if (v41)
          {
            uint64_t v36 = v41;
          }
          else
          {
            if (one-time initialization token for cache != -1) {
              swift_once();
            }
            *(void *)&long long v47 = static LocaleCache.cache;
            uint64_t v36 = LocaleCache.current.getter();
            uint64_t v40 = v30;
            uint64_t v29 = 0;
            uint64_t v28 = v39;
          }
          uint64_t v31 = v37;
          uint64_t v32 = one-time initialization token for cache;
          uint64_t v41 = v29;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          if (v32 != -1) {
            swift_once();
          }
          uint64_t v39 = static CalendarCache.cache;
          char v46 = v42;
          *(void *)&long long v47 = v36;
          *((void *)&v47 + 1) = v40;
          *(void *)&long long v45 = v28;
          *((void *)&v45 + 1) = v31;
          uint64_t v43 = 0;
          char v44 = 1;
          swift_retain();
          uint64_t v20 = CalendarCache.fixed(identifier:locale:timeZone:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(&v46, &v47, &v45, v38, 0, v35, 0, &v43);
          uint64_t v21 = v33;
          swift_unknownObjectRelease();
          swift_release();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
LABEL_11:
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          *a2 = v20;
          a2[1] = v21;
        }
        break;
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type Calendar.CodingKeys and conformance Calendar.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys);
  }
  return result;
}

unint64_t _NSSwiftCalendar.init(coder:)(void *a1)
{
  uint64_t v4 = one-time initialization token for cache;
  uint64_t v5 = v1;
  uint64_t v6 = v5;
  if (v4 != -1) {
    uint64_t v5 = (char *)swift_once();
  }
  uint64_t v7 = (os_unfair_lock_s *)static CalendarCache.cache;
  MEMORY[0x1F4188790](v5);
  swift_retain_n();
  os_unfair_lock_lock(v7 + 15);
  partial apply for closure #1 in CalendarCache.fixed(_:)((uint64_t)&v7[4], &v109);
  os_unfair_lock_unlock(v7 + 15);
  swift_release_n();
  long long v107 = v109;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 16) = v107;
  uint64_t v9 = OBJC_IVAR____NSSwiftCalendar__lock;
  *(void *)&v6[OBJC_IVAR____NSSwiftCalendar__lock] = v8;
  if (!objc_msgSend(a1, sel_allowsKeyedCoding))
  {

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 40) = v20;
    *(void *)(inited + 48) = 0xD000000000000026;
    *(void *)(inited + 56) = 0x80000001823ACDA0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v21 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)&v109, &demangling cache variable for type metadata for (String, Any));
    long long v22 = v109;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v22, *((uint64_t *)&v22 + 1));
    if (v24)
    {
      __break(1u);
    }
    else
    {
      v21[(result >> 6) + 8] |= 1 << result;
      *(_OWORD *)(v21[6] + 16 * result) = v22;
      unint64_t result = (unint64_t)outlined init with take of Any(v110, (_OWORD *)(v21[7] + 32 * result));
      uint64_t v25 = v21[2];
      BOOL v26 = __OFADD__(v25, 1);
      uint64_t v27 = v25 + 1;
      if (!v26)
      {
        v21[2] = v27;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v28 = objc_allocWithZone((Class)NSError);
        uint64_t v29 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v30 = objc_msgSend(v28, sel_initWithDomain_code_userInfo_, v29, 4864, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v31 = objc_msgSend(v30, sel_domain);
        id v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        uint64_t v34 = v33;

        if (v32 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v34 == v35) {
          goto LABEL_26;
        }
        char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v36) {
          goto LABEL_27;
        }
        __break(1u);
        goto LABEL_15;
      }
    }
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v10 = (void *)specialized NSCoder.decodeObject<A>(of:forKey:)(0x746E6564692E534ELL, 0xED00007265696669);
  if (!v10)
  {
LABEL_15:

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v37 = swift_initStackObject();
    *(_OWORD *)(v37 + 16) = xmmword_1821037E0;
    *(void *)(v37 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(v37 + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(v37 + 40) = v38;
    *(void *)(v37 + 48) = 0xD00000000000001DLL;
    *(void *)(v37 + 56) = 0x80000001823ACDD0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v39 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (Hashable & Sendable)?(v37 + 32, (uint64_t)&v109, &demangling cache variable for type metadata for (String, Any));
    long long v40 = v109;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v40, *((uint64_t *)&v40 + 1));
    if (v41)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    v39[(result >> 6) + 8] |= 1 << result;
    *(_OWORD *)(v39[6] + 16 * result) = v40;
    unint64_t result = (unint64_t)outlined init with take of Any(v110, (_OWORD *)(v39[7] + 32 * result));
    uint64_t v42 = v39[2];
    BOOL v26 = __OFADD__(v42, 1);
    uint64_t v43 = v42 + 1;
    if (v26)
    {
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    v39[2] = v43;
    swift_release();
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v44 = objc_allocWithZone((Class)NSError);
    uint64_t v45 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v16 = objc_msgSend(v44, sel_initWithDomain_code_userInfo_, v45, 4864, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v46 = objc_msgSend(v16, sel_domain);
    id v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    uint64_t v49 = v48;

    if (v47 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v49 == v50) {
      goto LABEL_26;
    }
    char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v51) {
      goto LABEL_27;
    }
    __break(1u);
    goto LABEL_21;
  }
  char v11 = v10;
  id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v14 = v13;

  uint64_t v15 = specialized NSCoder.decodeObject<A>(of:forKey:)(0x6C61636F6C2E534ELL, 0xE900000000000065);
  if (!v15) {
    goto LABEL_22;
  }
  id v16 = (id)v15;
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSLocale);
  if (!objc_msgSend(v16, sel_isKindOfClass_, swift_getObjCClassFromMetadata()))
  {
LABEL_21:

LABEL_22:
    swift_bridgeObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v52 = swift_initStackObject();
    *(_OWORD *)(v52 + 16) = xmmword_1821037E0;
    *(void *)(v52 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(v52 + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(v52 + 40) = v53;
    *(void *)(v52 + 48) = 0xD00000000000001ALL;
    *(void *)(v52 + 56) = 0x80000001823ACDF0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v54 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (Hashable & Sendable)?(v52 + 32, (uint64_t)&v109, &demangling cache variable for type metadata for (String, Any));
    long long v55 = v109;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v55, *((uint64_t *)&v55 + 1));
    if ((v56 & 1) == 0)
    {
      v54[(result >> 6) + 8] |= 1 << result;
      *(_OWORD *)(v54[6] + 16 * result) = v55;
      unint64_t result = (unint64_t)outlined init with take of Any(v110, (_OWORD *)(v54[7] + 32 * result));
      uint64_t v57 = v54[2];
      BOOL v26 = __OFADD__(v57, 1);
      uint64_t v58 = v57 + 1;
      if (!v26)
      {
        v54[2] = v58;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v59 = objc_allocWithZone((Class)NSError);
        uint64_t v60 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v61 = objc_msgSend(v59, sel_initWithDomain_code_userInfo_, v60, 4864, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v62 = objc_msgSend(v61, sel_domain);
        id v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
        uint64_t v65 = v64;

        if (v63 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v65 == v66)
        {
LABEL_26:
          swift_bridgeObjectRelease_n();
          goto LABEL_27;
        }
        uint64_t v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0)
        {
          __break(1u);
          goto LABEL_32;
        }
LABEL_27:
        objc_msgSend(a1, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());
        swift_unknownObjectRelease();

LABEL_28:
        swift_release();
        type metadata accessor for _NSSwiftCalendar();
        swift_deallocPartialClassInstance();
        return 0;
      }
      goto LABEL_58;
    }
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  id v104 = v16;
  uint64_t v105 = v14;
  *(void *)&long long v107 = specialized NSCoder.decodeObject<A>(of:forKey:)(0x7A656D69742E534ELL, 0xEB00000000656E6FLL);
  id v106 = (id)specialized NSCoder.decodeObject<A>(of:forKey:)(0x72617473672E534ELL, 0xED00006574616474);
  uint64_t v17 = (uint64_t)&selRef_changeFileAttributes_atPath_;
  unsigned int v18 = objc_msgSend(a1, sel_containsValueForKey_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  uint64_t v2 = &selRef_changeFileAttributes_atPath_;
  LODWORD(v101) = v18;
  id v103 = v12;
  if (v18)
  {
    id v102 = objc_msgSend(a1, sel_decodeIntegerForKey_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    goto LABEL_33;
  }
LABEL_32:
  id v102 = 0;
LABEL_33:
  unsigned int v68 = objc_msgSend(a1, *(SEL *)(v17 + 680), String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v68)
  {
    id v69 = objc_msgSend(a1, (SEL)v2 + 3608, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
  }
  else
  {
    id v69 = 0;
  }
  id v70 = objc_msgSend(a1, sel_error);
  if (v70)
  {
    long long v71 = v70;
    swift_bridgeObjectRelease();

LABEL_49:
    goto LABEL_28;
  }
  long long v72 = (void *)String._bridgeToObjectiveCImpl()();
  static Calendar._fromNSCalendarIdentifier(_:)(v72, (char *)&v109);
  id v73 = (id)swift_unknownObjectRelease();
  if (v109 != 16)
  {
    int v89 = v68 ^ 1;
    long long v90 = (void *)v107;
    v100[1] = v69;
    if ((void)v107)
    {
      LODWORD(v100[0]) = v89;
      LODWORD(v101) = v109;
      type metadata accessor for _NSSwiftTimeZone();
      uint64_t v91 = swift_dynamicCastClass();
      if (v91)
      {
        uint64_t v92 = *(void *)(v91 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
        id v73 = (id)swift_unknownObjectRetain();
      }
      else
      {
        type metadata accessor for _TimeZoneBridged();
        uint64_t v92 = swift_allocObject();
        *(void *)(v92 + 16) = v107;
        _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (void (*)(uint64_t))type metadata accessor for _TimeZoneBridged);
        id v73 = v90;
      }
      uint64_t v94 = v92;
    }
    else
    {
      uint64_t v94 = 0;
    }
    uint64_t v101 = v94;
    v100[0] = v100;
    uint64_t v95 = *(void *)&v6[v9];
    MEMORY[0x1F4188790](v73);
    id v96 = v104;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v95 + 32));
    partial apply for closure #1 in _NSSwiftCalendar.init(coder:)((uint64_t *)(v95 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v95 + 32));
    swift_release();

    uint64_t v97 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v98 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
    v108.receiver = v6;
    v108.super_class = v98;
    id v99 = objc_msgSendSuper2(&v108, sel_initWithCheckedCalendarIdentifier_, v97);

    id v67 = v99;
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    if (v67) {

    }
    return (unint64_t)v67;
  }
  swift_bridgeObjectRelease();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v74 = swift_initStackObject();
  *(_OWORD *)(v74 + 16) = xmmword_1821037E0;
  *(void *)(v74 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(v74 + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(v74 + 40) = v75;
  *(void *)(v74 + 48) = 0xD00000000000001BLL;
  *(void *)(v74 + 56) = 0x80000001823ACE10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v76 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?(v74 + 32, (uint64_t)&v109, &demangling cache variable for type metadata for (String, Any));
  long long v77 = v109;
  swift_retain();
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v77, *((uint64_t *)&v77 + 1));
  if (v78) {
    goto LABEL_61;
  }
  v76[(result >> 6) + 8] |= 1 << result;
  *(_OWORD *)(v76[6] + 16 * result) = v77;
  unint64_t result = (unint64_t)outlined init with take of Any(v110, (_OWORD *)(v76[7] + 32 * result));
  uint64_t v79 = v76[2];
  BOOL v26 = __OFADD__(v79, 1);
  uint64_t v80 = v79 + 1;
  if (v26)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v76[2] = v80;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v81 = objc_allocWithZone((Class)NSError);
  uint64_t v82 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v83 = objc_msgSend(v81, sel_initWithDomain_code_userInfo_, v82, 4864, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v84 = objc_msgSend(v83, sel_domain);
  id v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
  uint64_t v87 = v86;

  if (v85 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v87 == v88)
  {
    swift_bridgeObjectRelease_n();
LABEL_48:
    objc_msgSend(a1, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());

    swift_unknownObjectRelease();
    goto LABEL_49;
  }
  char v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  if (v93) {
    goto LABEL_48;
  }
LABEL_63:
  __break(1u);
  return result;
}

uint64_t specialized NSCoder.decodeObject<A>(of:forKey:)(uint64_t a1, uint64_t a2)
{
  return specialized NSCoder.decodeObject<A>(of:forKey:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for NSString);
}

{
  return specialized NSCoder.decodeObject<A>(of:forKey:)(a1, a2, &lazy cache variable for type metadata for NSLocale);
}

{
  return specialized NSCoder.decodeObject<A>(of:forKey:)(a1, a2, &lazy cache variable for type metadata for NSDate);
}

{
  return specialized NSCoder.decodeObject<A>(of:forKey:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for NSTimeZone);
}

uint64_t partial apply for closure #1 in _NSSwiftCalendar.init(coder:)(uint64_t *a1)
{
  return closure #1 in _NSSwiftCalendar.init(coder:)(a1, *(unsigned char *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned char *)(v1 + 56), *(void *)(v1 + 64), *(unsigned char *)(v1 + 72), *(void **)(v1 + 80));
}

uint64_t closure #1 in _NSSwiftCalendar.init(coder:)(uint64_t *a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, void *a10)
{
  uint64_t v28 = a8;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftLocale();
  uint64_t v15 = swift_dynamicCastClass();
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + OBJC_IVAR____NSSwiftLocale_locale);
    uint64_t v17 = *(void *)(v15 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    swift_unknownObjectRetain();
    if (a10)
    {
LABEL_3:
      objc_msgSend(a10, sel_timeIntervalSinceReferenceDate, v26, v27, v28);
      uint64_t v19 = v18;
      goto LABEL_6;
    }
  }
  else
  {
    type metadata accessor for _LocaleBridged();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = a3;
    uint64_t v17 = _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (void (*)(uint64_t))type metadata accessor for _LocaleBridged);
    id v20 = a3;
    if (a10) {
      goto LABEL_3;
    }
  }
  uint64_t v19 = 0;
LABEL_6:
  uint64_t v21 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v21 != -1) {
    swift_once();
  }
  char v33 = a2;
  *(void *)&long long v32 = v16;
  *((void *)&v32 + 1) = v17;
  *(void *)&long long v31 = a4;
  *((void *)&v31 + 1) = v26;
  uint64_t v29 = v19;
  BOOL v30 = a10 == 0;
  swift_retain();
  uint64_t v22 = CalendarCache.fixed(identifier:locale:timeZone:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(&v33, &v32, &v31, v27, a7 & 1, v28, a9 & 1, &v29);
  uint64_t v24 = v23;
  swift_unknownObjectRelease();
  swift_release();
  uint64_t result = swift_unknownObjectRelease();
  *a1 = v22;
  a1[1] = v24;
  return result;
}

uint64_t CalendarCache.fixed(identifier:locale:timeZone:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(char *a1, long long *a2, long long *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t *a8)
{
  char v12 = *a1;
  long long v21 = *a3;
  long long v22 = *a2;
  uint64_t v13 = *a8;
  char v14 = *((unsigned char *)a8 + 8);
  if (*a1)
  {
    uint64_t v15 = type metadata accessor for _CalendarICU();
    uint64_t v16 = (unint64_t *)&lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU;
    uint64_t v17 = type metadata accessor for _CalendarICU;
  }
  else
  {
    uint64_t v15 = type metadata accessor for _CalendarGregorian();
    uint64_t v16 = (unint64_t *)&lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian;
    uint64_t v17 = type metadata accessor for _CalendarGregorian;
  }
  uint64_t v18 = lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU(v16, (void (*)(uint64_t))v17);
  char v27 = v12;
  long long v25 = v22;
  long long v26 = v21;
  uint64_t v23 = v13;
  char v24 = v14;
  uint64_t v19 = *(uint64_t (**)(char *, long long *, long long *, uint64_t, void, uint64_t, void, uint64_t *, uint64_t, uint64_t))(v18 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return v19(&v27, &v26, &v25, a4, a5 & 1, a6, a7 & 1, &v23, v15, v18);
}

uint64_t type metadata completion function for PredicateExpressions.NotEqual()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t PredicateExpressions.NotEqual.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

uint64_t _NSSwiftTimeZone.isDaylightSavingTime.getter()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__darwin_time_t v2 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  uint64_t ObjectType = swift_getObjectType();
  __tp.tv_sec = v2;
  LOBYTE(v1) = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v1 + 64))(&__tp, ObjectType, v1);
  swift_unknownObjectRelease();
  return v1 & 1;
}

BOOL protocol witness for _TimeZoneProtocol.isDaylightSavingTime(for:) in conformance _TimeZoneAutoupdating(double a1)
{
  return _TimeZoneAutoupdating.isDaylightSavingTime(for:)(*(Foundation::Date *)&a1);
}

uint64_t specialized _TimeZoneAutoupdating.isDaylightSavingTime(for:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  __darwin_time_t v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.current.getter(v2, v8);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v8[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = v1;
  LOBYTE(v4) = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 64))(&v7, ObjectType, v4);
  swift_unknownObjectRelease();
  return v4 & 1;
}

double static Date.- infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double result = *a1 - a3;
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for CalendarCache.State()
{
  return &type metadata for CalendarCache.State;
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return (NSNumber)objc_msgSend(v2, sel_initWithBool_, BOOLeanLiteral);
}

unint64_t CFBasicHashGetCount(void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = a1[2];
  if ((v1 & 0x380) == 0) {
    return v1 >> 22;
  }
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  uint64_t v4[2] = __CFBasicHashGetCount_block_invoke;
  _OWORD v4[3] = &unk_1E51F8418;
  v4[4] = &v5;
  CFBasicHashApply(a1, (uint64_t)v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_18196F244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id NSUnitSpeed.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  return NSUnitLength.init(forLocale:usage:)(a1, a2, &lazy cache variable for type metadata for NSUnitSpeed, (uint64_t)off_1E51F4560);
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.checkResourceIsReachable()()
{
  return URL.checkResourceIsReachable()((SEL *)&selRef_checkResourceIsReachableAndReturnError_) & 1;
}

id URL.checkResourceIsReachable()(SEL *a1)
{
  v5[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *v1;
  v5[0] = 0;
  id v3 = objc_msgSend(v2, *a1, v5);
  if (v5[0])
  {
    v5[0];
    swift_willThrow();
  }
  return v3;
}

void URL.standardizedFileURL.getter(uint64_t *a1@<X8>)
{
  uint64_t v4 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    swift_retain();
    id v6 = v4;
    swift_retain();
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v83 = (uint64_t)v6;
      *(void *)&long long v84 = v3;
      *((void *)&v84 + 1) = v5;
      URL.scheme.getter();
      if (!v7)
      {
        swift_release();
        swift_release();

        goto LABEL_41;
      }
      Swift::String v8 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v8._countAndFlagsBits == 1701603686 && v8._object == (void *)0xE400000000000000)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }
      else
      {
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0) {
          goto LABEL_41;
        }
      }
    }
    else
    {
      unsigned __int8 v13 = objc_msgSend(v6, sel_isFileURL);
      swift_release();
      swift_release();

      if ((v13 & 1) == 0) {
        goto LABEL_41;
      }
    }
    uint64_t v82 = a1;
    *((void *)&v84 + 1) = v5;
    id v16 = v6;
    swift_retain();
    swift_retain();
    Swift::String v17 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v17._countAndFlagsBits;
    uint64_t v83 = v17._countAndFlagsBits;
    *(void *)&long long v84 = v17._object;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      unint64_t object = (unint64_t)v17._object;
    }
    else
    {
      unint64_t object = (unint64_t)v17._object;
      if ((specialized BidirectionalCollection.last.getter(v17._countAndFlagsBits, (unint64_t)v17._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v83;
        unint64_t object = v84;
      }
    }
    uint64_t v86 = Set.init(minimumCapacity:)();
    uint64_t v20 = specialized Set._Variant.insert(_:)(&v88, 0x2FuLL);
    uint64_t v21 = v86;
    uint64_t v22 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v22 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v22)
    {
      id v81 = v16;
      uint64_t v86 = countAndFlagsBits;
      unint64_t v87 = object;
      MEMORY[0x1F4188790](v20);
      uint64_t v79 = &v86;
      uint64_t v80 = v21;
      swift_bridgeObjectRetain();
      uint64_t v23 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v78, countAndFlagsBits, object);
      if (v24 == 1)
      {
        Swift::Int v26 = v86;
        unint64_t v25 = v87;
        swift_bridgeObjectRetain();
        unint64_t v27 = (unint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v26, v25, v21);
        unint64_t v29 = v28;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v27 = (unint64_t)v23;
        unint64_t v29 = v24;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v16 = v81;
      if (!v29)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v27 = 0;
        unint64_t v29 = 0xE000000000000000;
LABEL_30:
        swift_bridgeObjectRelease();
        uint64_t v30 = HIBYTE(v29) & 0xF;
        if ((v29 & 0x2000000000000000) == 0) {
          uint64_t v30 = v27 & 0xFFFFFFFFFFFFLL;
        }
        a1 = v82;
        if (v30)
        {
          uint64_t v83 = (uint64_t)v16;
          *(void *)&long long v84 = v3;
          *((void *)&v84 + 1) = v5;
          id v31 = v16;
          swift_retain();
          swift_retain();
          Swift::String v32 = URL.path(percentEncoded:)(1);
          uint64_t v83 = v32._countAndFlagsBits;
          *(void *)&long long v84 = v32._object;
          swift_bridgeObjectRetain();
          if (String.count.getter() >= 2
            && (specialized BidirectionalCollection.last.getter(v32._countAndFlagsBits, (unint64_t)v32._object) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
          }
          uint64_t v86 = Set.init(minimumCapacity:)();
          uint64_t v33 = specialized Set._Variant.insert(_:)(&v88, 0x2FuLL);
          uint64_t v34 = v86;
          uint64_t v35 = v83;
          unint64_t v36 = v84;
          unint64_t v37 = BYTE7(v84) & 0xF;
          if ((v84 & 0x2000000000000000) == 0) {
            unint64_t v37 = v83 & 0xFFFFFFFFFFFFLL;
          }
          if (v37)
          {
            id v81 = v31;
            uint64_t v86 = v83;
            unint64_t v87 = v84;
            MEMORY[0x1F4188790](v33);
            uint64_t v79 = &v86;
            uint64_t v80 = v34;
            swift_bridgeObjectRetain();
            uint64_t v38 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v78, v35, v36);
            if (v39 == 1)
            {
              Swift::Int v40 = v86;
              unint64_t v41 = v87;
              swift_bridgeObjectRetain();
              uint64_t v42 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v40, v41, v34);
              unint64_t v44 = v43;
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v42 = (uint64_t)v38;
              unint64_t v44 = v39;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v31 = v81;
            if (!v44)
            {
              swift_release();
              swift_release();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v42 = 0;
              unint64_t v44 = 0xE000000000000000;
LABEL_47:
              swift_bridgeObjectRetain();
              uint64_t v46 = specialized Collection.first.getter(v42, v44);
              if (v47)
              {
                if (v46 == 126 && v47 == 0xE100000000000000)
                {
                  swift_bridgeObjectRelease();
LABEL_52:
                  unint64_t v49 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v42, v44);
                  if (v50)
                  {
                    uint64_t v53 = HIBYTE(v44) & 0xF;
                    if ((v44 & 0x2000000000000000) == 0) {
                      uint64_t v53 = v42;
                    }
                    uint64_t v54 = v53 << 16;
                    if ((v44 & 0x1000000000000000) == 0 || (v42 & 0x800000000000000) != 0) {
                      unint64_t v51 = v54 | 7;
                    }
                    else {
                      unint64_t v51 = v54 | 0xB;
                    }
                  }
                  else
                  {
                    unint64_t v51 = v49;
                  }
                  unint64_t v55 = String.index(after:)();
                  if (v51 >> 14 == v55 >> 14)
                  {
                    uint64_t v56 = 0;
                    uint64_t v57 = 0;
                  }
                  else
                  {
                    if (v51 >> 14 < v55 >> 14)
                    {
                      __break(1u);
                      return;
                    }
                    uint64_t v58 = String.subscript.getter();
                    uint64_t v56 = MEMORY[0x185301F50](v58);
                    uint64_t v57 = v59;
                    swift_bridgeObjectRelease();
                  }
                  unint64_t v60 = static String.homeDirectoryPath(forUser:)(v56, v57);
                  unint64_t v62 = v61;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  unint64_t v63 = specialized Collection.suffix(from:)(v51, v42, v44);
                  uint64_t v65 = v64;
                  uint64_t v67 = v66;
                  uint64_t v69 = v68;
                  swift_bridgeObjectRelease();
                  uint64_t v86 = v60;
                  unint64_t v87 = v62;
                  uint64_t v83 = v63;
                  *(void *)&long long v84 = v65;
                  *((void *)&v84 + 1) = v67;
                  uint64_t v85 = v69;
                  lazy protocol witness table accessor for type Substring and conformance Substring();
                  swift_bridgeObjectRetain();
                  String.append<A>(contentsOf:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v42 = v86;
                  unint64_t v52 = v87;
LABEL_67:
                  uint64_t v70 = String._standardizingPath.getter(v42, v52);
                  unint64_t v72 = v71;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  id v73 = v31;
                  swift_retain();
                  swift_retain();
                  if (_foundation_swift_url_feature_enabled())
                  {
                    uint64_t v83 = (uint64_t)v73;
                    *(void *)&long long v84 = v3;
                    *((void *)&v84 + 1) = v5;
                    Swift::String v74 = URL.path(percentEncoded:)(1);
                    __int16 v75 = specialized BidirectionalCollection.last.getter(v74._countAndFlagsBits, (unint64_t)v74._object);
                    swift_release();
                    swift_release();

                    swift_bridgeObjectRelease();
                    if ((v75 & 0x1FF) == 0x2F)
                    {
LABEL_69:
                      char v76 = 0;
LABEL_72:
                      LOBYTE(v86) = v76;
                      uint64_t v83 = 0;
                      long long v84 = 0uLL;
                      URL.init(filePath:directoryHint:relativeTo:)(v70, v72, (unsigned __int8 *)&v86, (uint64_t)&v83, v82);
                      return;
                    }
                  }
                  else
                  {
                    unsigned __int8 v77 = objc_msgSend(v73, sel_hasDirectoryPath);
                    swift_release();
                    swift_release();

                    if (v77) {
                      goto LABEL_69;
                    }
                  }
                  char v76 = 1;
                  goto LABEL_72;
                }
                char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v48) {
                  goto LABEL_52;
                }
              }
              unint64_t v52 = v44;
              goto LABEL_67;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v42 = 0;
            unint64_t v44 = 0xE000000000000000;
          }
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_47;
        }
LABEL_41:
        *a1 = (uint64_t)v6;
        a1[1] = v3;
        a1[2] = v5;
        id v45 = v6;
        swift_retain();
        swift_retain();
        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v27 = 0;
      unint64_t v29 = 0xE000000000000000;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  id v9 = objc_msgSend(v4, sel_URLByStandardizingPath);
  if (v9)
  {
    uint64_t v10 = v9;
    URL.init(reference:)(v9, &v83);

    id v11 = (id)v83;
    URL.init(reference:)(v11, &v83);

    swift_release();
    swift_release();
    long long v12 = v84;
    *a1 = v83;
    *(_OWORD *)(a1 + 1) = v12;
  }
  else
  {
    *a1 = (uint64_t)v4;
    a1[1] = v3;
    a1[2] = v5;
    swift_retain();
    id v14 = v4;
    swift_retain();
  }
}

uint64_t _NSOpenFileDescriptor(const char *a1, int a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = open(a1, a2, a3);
  if ((v3 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = v3;
  memset(&v6, 0, sizeof(v6));
  if (fstat(v3, &v6) < 0 || (v6.st_mode & 0xF000) == 0x4000)
  {
    close(v4);
    return 0xFFFFFFFFLL;
  }
  return v4;
}

void sub_1819703BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void URL.resolvingSymlinksInPath()(uint64_t *a1@<X8>)
{
  uint64_t v4 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    swift_retain();
    id v6 = v4;
    swift_retain();
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v89 = (uint64_t)v6;
      *(void *)&long long v90 = v3;
      *((void *)&v90 + 1) = v5;
      URL.scheme.getter();
      if (!v7)
      {
        swift_release();
        swift_release();

        goto LABEL_41;
      }
      Swift::String v8 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v8._countAndFlagsBits == 1701603686 && v8._object == (void *)0xE400000000000000)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }
      else
      {
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0) {
          goto LABEL_41;
        }
      }
    }
    else
    {
      unsigned __int8 v13 = objc_msgSend(v6, sel_isFileURL);
      swift_release();
      swift_release();

      if ((v13 & 1) == 0) {
        goto LABEL_41;
      }
    }
    char v88 = a1;
    *((void *)&v90 + 1) = v5;
    id v16 = v6;
    swift_retain();
    swift_retain();
    Swift::String v17 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v17._countAndFlagsBits;
    uint64_t v89 = v17._countAndFlagsBits;
    *(void *)&long long v90 = v17._object;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      unint64_t object = (unint64_t)v17._object;
    }
    else
    {
      unint64_t object = (unint64_t)v17._object;
      if ((specialized BidirectionalCollection.last.getter(v17._countAndFlagsBits, (unint64_t)v17._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v89;
        unint64_t object = v90;
      }
    }
    uint64_t v92 = Set.init(minimumCapacity:)();
    uint64_t v20 = specialized Set._Variant.insert(_:)(&v94, 0x2FuLL);
    uint64_t v21 = v92;
    uint64_t v22 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v22 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v22)
    {
      id v87 = v16;
      uint64_t v92 = countAndFlagsBits;
      unint64_t v93 = object;
      MEMORY[0x1F4188790](v20);
      uint64_t v85 = &v92;
      uint64_t v86 = v21;
      swift_bridgeObjectRetain();
      uint64_t v23 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v84, countAndFlagsBits, object);
      if (v24 == 1)
      {
        Swift::Int v26 = v92;
        unint64_t v25 = v93;
        swift_bridgeObjectRetain();
        unint64_t v27 = (unint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v26, v25, v21);
        unint64_t v29 = v28;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v27 = (unint64_t)v23;
        unint64_t v29 = v24;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v16 = v87;
      if (!v29)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v27 = 0;
        unint64_t v29 = 0xE000000000000000;
LABEL_30:
        swift_bridgeObjectRelease();
        uint64_t v30 = HIBYTE(v29) & 0xF;
        if ((v29 & 0x2000000000000000) == 0) {
          uint64_t v30 = v27 & 0xFFFFFFFFFFFFLL;
        }
        a1 = v88;
        if (v30)
        {
          uint64_t v89 = (uint64_t)v16;
          *(void *)&long long v90 = v3;
          *((void *)&v90 + 1) = v5;
          id v31 = v16;
          swift_retain();
          swift_retain();
          Swift::String v32 = URL.path(percentEncoded:)(1);
          uint64_t v89 = v32._countAndFlagsBits;
          *(void *)&long long v90 = v32._object;
          swift_bridgeObjectRetain();
          if (String.count.getter() >= 2
            && (specialized BidirectionalCollection.last.getter(v32._countAndFlagsBits, (unint64_t)v32._object) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
          }
          uint64_t v92 = Set.init(minimumCapacity:)();
          uint64_t v33 = specialized Set._Variant.insert(_:)(&v94, 0x2FuLL);
          uint64_t v34 = v92;
          uint64_t v35 = v89;
          unint64_t v36 = v90;
          unint64_t v37 = BYTE7(v90) & 0xF;
          if ((v90 & 0x2000000000000000) == 0) {
            unint64_t v37 = v89 & 0xFFFFFFFFFFFFLL;
          }
          if (v37)
          {
            id v87 = v31;
            uint64_t v92 = v89;
            unint64_t v93 = v90;
            MEMORY[0x1F4188790](v33);
            uint64_t v85 = &v92;
            uint64_t v86 = v34;
            swift_bridgeObjectRetain();
            uint64_t v38 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v84, v35, v36);
            if (v39 == 1)
            {
              Swift::Int v40 = v92;
              unint64_t v41 = v93;
              swift_bridgeObjectRetain();
              uint64_t v42 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v40, v41, v34);
              unint64_t v44 = v43;
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v42 = (uint64_t)v38;
              unint64_t v44 = v39;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v31 = v87;
            if (!v44)
            {
              swift_release();
              swift_release();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v42 = 0;
              unint64_t v44 = 0xE000000000000000;
LABEL_47:
              swift_bridgeObjectRetain();
              uint64_t v46 = specialized Collection.first.getter(v42, v44);
              if (v47)
              {
                if (v46 == 126 && v47 == 0xE100000000000000)
                {
                  swift_bridgeObjectRelease();
LABEL_52:
                  unint64_t v49 = specialized Collection<>.firstIndex(of:)(47, 0xE100000000000000, v42, v44);
                  if (v50)
                  {
                    uint64_t v53 = HIBYTE(v44) & 0xF;
                    if ((v44 & 0x2000000000000000) == 0) {
                      uint64_t v53 = v42;
                    }
                    uint64_t v54 = v53 << 16;
                    if ((v44 & 0x1000000000000000) == 0 || (v42 & 0x800000000000000) != 0) {
                      unint64_t v51 = v54 | 7;
                    }
                    else {
                      unint64_t v51 = v54 | 0xB;
                    }
                  }
                  else
                  {
                    unint64_t v51 = v49;
                  }
                  unint64_t v55 = String.index(after:)();
                  id v87 = 0;
                  if (v51 >> 14 == v55 >> 14)
                  {
                    id v56 = v31;
                    uint64_t v57 = 0;
                    uint64_t v58 = 0;
                  }
                  else
                  {
                    if (v51 >> 14 < v55 >> 14)
                    {
                      __break(1u);
                      return;
                    }
                    id v56 = v31;
                    uint64_t v59 = String.subscript.getter();
                    uint64_t v57 = MEMORY[0x185301F50](v59);
                    uint64_t v58 = v60;
                    swift_bridgeObjectRelease();
                  }
                  unint64_t v61 = static String.homeDirectoryPath(forUser:)(v57, v58);
                  unint64_t v63 = v62;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  unint64_t v64 = specialized Collection.suffix(from:)(v51, v42, v44);
                  uint64_t v66 = v65;
                  uint64_t v68 = v67;
                  uint64_t v70 = v69;
                  swift_bridgeObjectRelease();
                  uint64_t v92 = v61;
                  unint64_t v93 = v63;
                  uint64_t v89 = v64;
                  *(void *)&long long v90 = v66;
                  *((void *)&v90 + 1) = v68;
                  uint64_t v91 = v70;
                  lazy protocol witness table accessor for type Substring and conformance Substring();
                  swift_bridgeObjectRetain();
                  String.append<A>(contentsOf:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v42 = v92;
                  unint64_t v52 = v93;
                  id v31 = v56;
LABEL_67:
                  uint64_t v71 = HIBYTE(v52) & 0xF;
                  if ((v52 & 0x2000000000000000) == 0) {
                    uint64_t v71 = v42 & 0xFFFFFFFFFFFFLL;
                  }
                  if (v71)
                  {
                    swift_bridgeObjectRetain();
                    uint64_t v72 = specialized String.withFileSystemRepresentation<A>(_:)(v42, v52, v42, v52);
                    if (v73)
                    {
                      uint64_t v74 = v72;
                      unint64_t v75 = v73;
                      swift_bridgeObjectRelease();
                      uint64_t v42 = v74;
                      unint64_t v52 = v75;
                    }
                  }
                  uint64_t v76 = String._standardizingPath.getter(v42, v52);
                  unint64_t v78 = v77;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  id v79 = v31;
                  swift_retain();
                  swift_retain();
                  if (_foundation_swift_url_feature_enabled())
                  {
                    uint64_t v89 = (uint64_t)v79;
                    *(void *)&long long v90 = v3;
                    *((void *)&v90 + 1) = v5;
                    Swift::String v80 = URL.path(percentEncoded:)(1);
                    __int16 v81 = specialized BidirectionalCollection.last.getter(v80._countAndFlagsBits, (unint64_t)v80._object);
                    swift_release();
                    swift_release();

                    swift_bridgeObjectRelease();
                    if ((v81 & 0x1FF) == 0x2F)
                    {
LABEL_74:
                      char v82 = 0;
LABEL_77:
                      LOBYTE(v92) = v82;
                      uint64_t v89 = 0;
                      long long v90 = 0uLL;
                      URL.init(filePath:directoryHint:relativeTo:)(v76, v78, (unsigned __int8 *)&v92, (uint64_t)&v89, v88);
                      return;
                    }
                  }
                  else
                  {
                    unsigned __int8 v83 = objc_msgSend(v79, sel_hasDirectoryPath);
                    swift_release();
                    swift_release();

                    if (v83) {
                      goto LABEL_74;
                    }
                  }
                  char v82 = 1;
                  goto LABEL_77;
                }
                char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v48) {
                  goto LABEL_52;
                }
              }
              unint64_t v52 = v44;
              goto LABEL_67;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v42 = 0;
            unint64_t v44 = 0xE000000000000000;
          }
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_47;
        }
LABEL_41:
        *a1 = (uint64_t)v6;
        a1[1] = v3;
        a1[2] = v5;
        id v45 = v6;
        swift_retain();
        swift_retain();
        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v27 = 0;
      unint64_t v29 = 0xE000000000000000;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  id v9 = objc_msgSend(v4, sel_URLByResolvingSymlinksInPath);
  if (v9)
  {
    uint64_t v10 = v9;
    URL.init(reference:)(v9, &v89);

    id v11 = (id)v89;
    URL.init(reference:)(v11, &v89);

    swift_release();
    swift_release();
    long long v12 = v90;
    *a1 = v89;
    *(_OWORD *)(a1 + 1) = v12;
  }
  else
  {
    *a1 = (uint64_t)v4;
    a1[1] = v3;
    a1[2] = v5;
    swift_retain();
    id v14 = v4;
    swift_retain();
  }
}

NSError *_NSErrorWithFilePathErrnoVariantAndExtraUserInfo(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (a1 <= 12)
    {
      if (a1 != 1)
      {
        if (a1 == 2)
        {
          uint64_t v9 = 260;
          goto LABEL_31;
        }
LABEL_28:
        uint64_t v9 = 256;
        goto LABEL_31;
      }
    }
    else if (a1 != 13)
    {
      if (a1 == 27)
      {
        uint64_t v9 = 263;
        goto LABEL_31;
      }
      if (a1 == 63)
      {
        uint64_t v9 = 258;
        goto LABEL_31;
      }
      goto LABEL_28;
    }
    uint64_t v9 = 257;
    goto LABEL_31;
  }
  if (a1 <= 27)
  {
    if (a1 > 12)
    {
      if (a1 != 13)
      {
        if (a1 == 17)
        {
          uint64_t v9 = 516;
          goto LABEL_31;
        }
        goto LABEL_30;
      }
    }
    else if (a1 != 1)
    {
      if (a1 == 2)
      {
        uint64_t v9 = 4;
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    uint64_t v9 = 513;
    goto LABEL_31;
  }
  if (a1 <= 62)
  {
    if (a1 != 28)
    {
      if (a1 == 30)
      {
        uint64_t v9 = 642;
        goto LABEL_31;
      }
      goto LABEL_30;
    }
LABEL_25:
    uint64_t v9 = 640;
    goto LABEL_31;
  }
  if (a1 == 63)
  {
    uint64_t v9 = 514;
    goto LABEL_31;
  }
  if (a1 == 69) {
    goto LABEL_25;
  }
LABEL_30:
  uint64_t v9 = 512;
LABEL_31:
  id v10 = objc_alloc(MEMORY[0x1E4F1CA60]);
  id v11 = +[NSError errorWithDomain:@"NSPOSIXErrorDomain" code:a1 userInfo:0];
  if (a4) {
    uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObject:a4];
  }
  else {
    uint64_t v12 = 0;
  }
  unsigned __int8 v13 = @"NSUserStringVariant";
  if (!a4) {
    unsigned __int8 v13 = 0;
  }
  id v14 = objc_msgSend(v10, "initWithObjectsAndKeys:", v11, @"NSUnderlyingError", v12, v13, 0);
  if (a2)
  {
    objc_opt_class();
    isKindOfClass Class = objc_opt_isKindOfClass();
    id v16 = &NSURLErrorKey;
    if ((isKindOfClass & 1) == 0) {
      id v16 = &NSFilePathErrorKey;
    }
    [v14 setObject:a2 forKeyedSubscript:*v16];
  }
  if ([a5 count])
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v17 = [a5 countByEnumeratingWithState:&v25 objects:v24 count:16];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)v26;
      do
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          if (*(void *)v26 != v19) {
            objc_enumerationMutation(a5);
          }
          uint64_t v21 = *(void *)(*((void *)&v25 + 1) + 8 * i);
          if (![v14 objectForKey:v21]) {
            objc_msgSend(v14, "setObject:forKey:", objc_msgSend(a5, "objectForKey:", v21), v21);
          }
        }
        uint64_t v18 = [a5 countByEnumeratingWithState:&v25 objects:v24 count:16];
      }
      while (v18);
    }
  }
  uint64_t v22 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:v9 userInfo:v14];

  return v22;
}

ValueMetadata *type metadata accessor for JSONEncoder.KeyEncodingStrategy()
{
  return &type metadata for JSONEncoder.KeyEncodingStrategy;
}

id Notification.name.getter()
{
  return *v0;
}

void *partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

uint64_t type metadata completion function for PredicateExpressions.Value()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PredicateExpressions.ComparisonOperator()
{
  return &type metadata for PredicateExpressions.ComparisonOperator;
}

ValueMetadata *type metadata accessor for PredicateExpressionCodingKeys()
{
  return &type metadata for PredicateExpressionCodingKeys;
}

unint64_t specialized _PlistDecoder.init(referencing:options:codingPathNode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v3[3] = a1;
  void v3[2] = MEMORY[0x1E4FBC860];
  swift_retain();
  unint64_t result = XMLPlistMap.loadValue(at:)(0);
  if ((~result & 0xF000000000000007) != 0)
  {
    unint64_t v8 = result;
    uint64_t v9 = (void *)v4[2];
    outlined copy of XMLPlistMap.Value(result);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v4[2] = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      uint64_t v4[2] = v9;
    }
    unint64_t v12 = v9[2];
    unint64_t v11 = v9[3];
    if (v12 >= v11 >> 1) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
    }
    _OWORD v9[2] = v12 + 1;
    v9[v12 + 4] = v8;
    uint64_t v4[2] = v9;
    outlined consume of XMLPlistMap.Value?(v8);
    v4[4] = a2;
    void v4[5] = a3;
    return (unint64_t)v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static _XMLPlistDecodingFormat.container<A>(keyedBy:for:referencing:codingPathNode:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = a3;
  if (a2 >> 60 != 2)
  {
    if (a2 >> 60 == 8 && a2 == 0x8000000000000000)
    {
      uint64_t v7 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v9 = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      uint64_t *v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      unint64_t v10 = *(void *)(v5 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v10);
      swift_release();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, *MEMORY[0x1E4FBBA80], v7);
    }
    else
    {
      unint64_t v11 = *(void *)(a3 + 40);
      swift_retain();
      _CodingPathNode.path.getter(v11);
      swift_release();
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(v12, a2, v13);
      swift_bridgeObjectRelease();
    }
    return swift_willThrow();
  }
  unint64_t v17 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
  uint64_t v16 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
  uint64_t v58 = (void *)MEMORY[0x1E4FBC868];
  Swift::Int v18 = v16 / 2;
  swift_retain();
  swift_retain_n();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : XMLPlistMap.Value]);
  Dictionary.reserveCapacity(_:)(v18);
  uint64_t v19 = v58;
  swift_retain();
  unint64_t v20 = XMLPlistMap.loadValue(at:)(v17);
  if ((~v20 & 0xF000000000000007) == 0)
  {
LABEL_8:
    swift_release();
    swift_release_n();
    uint64_t v55 = v5;
    id v56 = v19;
    unint64_t v57 = a4;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    type metadata accessor for _PlistKeyedDecodingContainer();
    swift_getWitnessTable();
    KeyedDecodingContainer.init<A>(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  unint64_t v21 = v20;
  uint64_t v52 = v5;
  unint64_t v51 = a4;
  while (1)
  {
    Swift::Int v24 = XMLPlistMap.offset(after:)(v17);
    unint64_t v25 = XMLPlistMap.loadValue(at:)(v24);
    if ((~v25 & 0xF000000000000007) == 0) {
      goto LABEL_35;
    }
    unint64_t v26 = v25;
    Swift::Int v27 = XMLPlistMap.offset(after:)(v24);
    unint64_t v28 = v21 >> 60;
    if (v21 == 0x8000000000000000 && v28 == 8)
    {
      uint64_t v58 = v19;
      uint64_t v47 = type metadata accessor for DecodingError();
      unint64_t v21 = v26;
      swift_allocError();
      unint64_t v49 = v48;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *unint64_t v49 = MEMORY[0x1E4FBB1A0];
      _CodingPathNode.path.getter(a4);
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v47 - 8) + 104))(v49, *MEMORY[0x1E4FBBA80], v47);
      swift_willThrow();
LABEL_30:
      outlined consume of XMLPlistMap.Value(v21);
      swift_release();
LABEL_32:
      swift_release_n();
      swift_release();
      swift_release_n();
      return swift_bridgeObjectRelease();
    }
    unint64_t v53 = v27;
    unint64_t v54 = v26;
    uint64_t v29 = *(void *)(v5 + 24);
    if (v28)
    {
      uint64_t v58 = v19;
      outlined copy of XMLPlistMap.Value(v21);
      swift_retain();
      _CodingPathNode.path.getter(a4);
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(MEMORY[0x1E4FBB1A0], v21, v50);
      swift_bridgeObjectRelease();
      swift_willThrow();
      swift_release();
      outlined consume of XMLPlistMap.Value(v21);
      outlined consume of XMLPlistMap.Value(v26);
      goto LABEL_30;
    }
    MEMORY[0x1F4188790](v27);
    uint64_t v30 = *(void *)(v29 + 24);
    MEMORY[0x1F4188790](v31);
    outlined copy of XMLPlistMap.Value(v21);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
    closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)specialized partial apply((void *)(v30 + 16), &v55);
    if (v4)
    {
      uint64_t v58 = v19;
      os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
      swift_release();
      swift_release();
      outlined consume of XMLPlistMap.Value(v21);
      outlined consume of XMLPlistMap.Value(v26);
      outlined consume of XMLPlistMap.Value(v21);
      swift_release();
      goto LABEL_32;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
    swift_release();
    swift_release();
    uint64_t v33 = v55;
    uint64_t v32 = (uint64_t)v56;
    outlined copy of XMLPlistMap.Value(v26);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v32);
    uint64_t v37 = v19[2];
    BOOL v38 = (v35 & 1) == 0;
    uint64_t v39 = v37 + v38;
    if (__OFADD__(v37, v38)) {
      break;
    }
    char v40 = v35;
    if (v19[3] >= v39)
    {
      uint64_t v5 = v52;
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v35) {
          goto LABEL_10;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v40) {
          goto LABEL_10;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, isUniquelyReferenced_nonNull_native);
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v32);
      uint64_t v5 = v52;
      if ((v40 & 1) != (v42 & 1)) {
        goto LABEL_36;
      }
      unint64_t v36 = v41;
      if (v40)
      {
LABEL_10:
        uint64_t v22 = v19[7];
        outlined consume of XMLPlistMap.Value(*(void *)(v22 + 8 * v36));
        unint64_t v23 = v54;
        *(void *)(v22 + 8 * v36) = v54;
        goto LABEL_11;
      }
    }
    v19[(v36 >> 6) + 8] |= 1 << v36;
    unint64_t v43 = (uint64_t *)(v19[6] + 16 * v36);
    *unint64_t v43 = v33;
    v43[1] = v32;
    unint64_t v23 = v54;
    *(void *)(v19[7] + 8 * v36) = v54;
    uint64_t v44 = v19[2];
    BOOL v45 = __OFADD__(v44, 1);
    uint64_t v46 = v44 + 1;
    if (v45) {
      goto LABEL_34;
    }
    v19[2] = v46;
    swift_bridgeObjectRetain();
LABEL_11:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of XMLPlistMap.Value(v21);
    outlined consume of XMLPlistMap.Value(v23);
    outlined consume of XMLPlistMap.Value(v21);
    unint64_t v17 = v53;
    unint64_t v21 = XMLPlistMap.loadValue(at:)(v53);
    a4 = v51;
    if ((~v21 & 0xF000000000000007) == 0) {
      goto LABEL_8;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int __swiftcall XMLPlistMap.offset(after:)(Swift::Int after)
{
  if (after < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    _StringGuts.grow(_:)(68);
    v7._uint64_t countAndFlagsBits = 0xD000000000000041;
    v7._unint64_t object = (void *)0x80000001823AA6B0;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 41;
    v9._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v9);
LABEL_16:
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t v4 = *(void *)(v3 + 16);
  if (v4 <= after) {
    goto LABEL_12;
  }
  uint64_t v5 = v3 + 32;
  switch(specialized XMLPlistMap.TypeDescriptor.init(rawValue:)(*(void *)(v3 + 32 + 8 * after)))
  {
    case 6u:
    case 7u:
    case 0xBu:
      goto LABEL_7;
    case 8u:
    case 9u:
      if (after + 1 >= v4) {
        goto LABEL_13;
      }
      return *(void *)(v5 + 8 * (after + 1));
    case 0xAu:
      goto LABEL_14;
    case 0xEu:
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._uint64_t countAndFlagsBits = 41;
      v11._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      goto LABEL_16;
    default:
      Swift::Int result = after + 3;
      if (!__OFADD__(after, 3)) {
        return result;
      }
      __break(1u);
LABEL_7:
      Swift::Int result = after + 1;
      break;
  }
  return result;
}

unint64_t XMLPlistMap.loadValue(at:)(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t v4 = *(void *)(v3 + 16);
  if (v4 <= a1)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v37._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 41;
    v38._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v5 = v3 + 32;
  unint64_t v6 = *(void *)(v3 + 32 + 8 * a1);
  char v7 = specialized XMLPlistMap.TypeDescriptor.init(rawValue:)(v6);
  unint64_t result = 0x8000000000000000;
  switch(v7)
  {
    case 2:
      if (a1 + 1 >= v4) {
        goto LABEL_43;
      }
      unint64_t v24 = a1 + 2;
      if (a1 + 2 >= v4) {
        goto LABEL_47;
      }
      uint64_t v25 = *(void *)(v5 + 8 * (a1 + 1));
      uint64_t v26 = *(void *)(v5 + 8 * v24);
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = v25;
      return v27 | 0x6000000000000000;
    case 3:
      if (a1 + 1 >= v4) {
        goto LABEL_44;
      }
      unint64_t v28 = a1 + 2;
      if (a1 + 2 >= v4) {
        goto LABEL_48;
      }
      uint64_t v29 = *(void *)(v5 + 8 * (a1 + 1));
      uint64_t v30 = *(void *)(v5 + 8 * v28);
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = v29;
      return v31 | 0x7000000000000000;
    case 4:
      if (a1 + 1 >= v4) {
        goto LABEL_42;
      }
      unint64_t v20 = a1 + 2;
      if (a1 + 2 >= v4) {
        goto LABEL_46;
      }
      uint64_t v21 = *(void *)(v5 + 8 * (a1 + 1));
      uint64_t v22 = *(void *)(v5 + 8 * v20);
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = v21;
      return v23 | 0x3000000000000000;
    case 5:
      if (a1 + 1 >= v4) {
        goto LABEL_45;
      }
      unint64_t v32 = a1 + 2;
      if (a1 + 2 >= v4) {
        goto LABEL_49;
      }
      uint64_t v33 = *(void *)(v5 + 8 * (a1 + 1));
      uint64_t v34 = *(void *)(v5 + 8 * v32);
      uint64_t v35 = swift_allocObject();
      *(void *)(v35 + 16) = v34;
      *(void *)(v35 + 24) = v33;
      return v35 | 0x4000000000000000;
    case 6:
      uint64_t v17 = swift_allocObject();
      *(unsigned char *)(v17 + 16) = 1;
      return v17 | 0x5000000000000000;
    case 7:
      uint64_t v17 = swift_allocObject();
      *(unsigned char *)(v17 + 16) = 0;
      return v17 | 0x5000000000000000;
    case 8:
      if (a1 + 2 >= v4) {
        goto LABEL_40;
      }
      uint64_t v15 = *(void *)(v5 + 8 * (a1 + 2));
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = a1 + 3;
      *(void *)(v16 + 24) = v15;
      return v16 | 0x1000000000000000;
    case 9:
      if (a1 + 2 >= v4) {
        goto LABEL_41;
      }
      uint64_t v18 = *(void *)(v5 + 8 * (a1 + 2));
      unint64_t v19 = a1 + 3;
      if (XMLPlistMap.detectUID(dictionaryReferenceCount:objectOffset:)(v18, v19)) {
        return 0x8000000000000008;
      }
      uint64_t v36 = swift_allocObject();
      *(void *)(v36 + 16) = v19;
      *(void *)(v36 + 24) = v18;
      return v36 | 0x2000000000000000;
    case 10:
      return 0xF000000000000007;
    case 11:
      return result;
    case 14:
      goto LABEL_50;
    default:
      if (a1 + 1 >= v4) {
        goto LABEL_38;
      }
      unint64_t v9 = a1 + 2;
      if (a1 + 2 >= v4) {
        goto LABEL_39;
      }
      uint64_t v10 = *(void *)(v5 + 8 * (a1 + 1));
      uint64_t v11 = *(void *)(v5 + 8 * v9);
      BOOL v12 = (v6 & 0xFFFFFFFFFFFFFFFELL) == 12;
      BOOL v14 = v6 == 13 || v6 == 1;
      unint64_t result = swift_allocObject();
      *(void *)(result + 16) = v11;
      *(void *)(result + 24) = v10;
      *(unsigned char *)(result + 32) = v14;
      *(unsigned char *)(result + 33) = v12;
      break;
  }
  return result;
}

unint64_t specialized XMLPlistMap.TypeDescriptor.init(rawValue:)(unint64_t result)
{
  if (result >= 0xE) {
    return 14;
  }
  return result;
}

uint64_t XMLPlistMap.detectUID(dictionaryReferenceCount:objectOffset:)(uint64_t result, unint64_t a2)
{
  if (result != 2) {
    return 0;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v3 = *(void *)(v2 + 16);
  unint64_t v4 = *(void *)(v3 + 16);
  if (v4 <= a2)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v5 = v3 + 32;
  if (*(void *)(v5 + 8 * a2) != 13) {
    return 0;
  }
  if (a2 + 1 >= v4)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(void *)(v5 + 8 * (a2 + 1)) == 6)
  {
    if (a2 + 2 < v4)
    {
      uint64_t v6 = *(void *)(v2 + 24);
      MEMORY[0x1F4188790](2);
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v6 + 40));
      partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((void *)(v6 + 16), &v7);
      os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 40));
      swift_release();
      return v7;
    }
    goto LABEL_14;
  }
  return 0;
}

unint64_t outlined consume of XMLPlistMap.Value?(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return outlined consume of XMLPlistMap.Value(result);
  }
  return result;
}

void *partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(a1, *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

void *specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)@<X0>(void *result@<X0>, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, unsigned char *a5@<X8>)
{
  uint64_t v8 = result[1];
  BOOL v9 = v8 < a4 + a3 || v8 < a4;
  if (v9 || (a4 | a3) < 0 || v8 <= a3)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = a2(&v10, *result + a3, a4);
    if (!v5) {
      *a5 = v10;
    }
  }
  return result;
}

unint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(unint64_t, uint64_t, uint64_t))specialized _parseJSON5Integer<A>(_:isHex:), (uint64_t)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:), (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(unint64_t, uint64_t, uint64_t))specialized _parseJSON5Integer<A>(_:isHex:), (uint64_t)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:), (uint64_t (*)(unint64_t, uint64_t))specialized _parseInteger<A>(_:), a5);
}

unint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(unint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(unint64_t, uint64_t)@<X6>, unsigned char *a8@<X8>)
{
  unint64_t result = specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(a1, a2, a3, a4, *(unsigned char *)(v8 + 16), *(unsigned char *)(v8 + 17), a5, a6, a7);
  if (!v9) {
    *a8 = result;
  }
  return result;
}

unint64_t specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(unint64_t, uint64_t, uint64_t), uint64_t a8, uint64_t (*a9)(unint64_t, uint64_t))
{
  uint64_t v10 = v9;
  unint64_t v11 = a4;
  uint64_t v13 = a2;
  unint64_t v14 = result;
  LOBYTE(v175) = a5;
  if (a5)
  {
    if (a2)
    {
      unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, result);
      if (result == 48)
      {
        uint64_t v165 = a7;
        if (v13 >= 1) {
          uint64_t v16 = 1;
        }
        else {
          uint64_t v16 = v13;
        }
        if (v13 >= 2)
        {
          unint64_t v17 = v14 + v16;
          unsigned __int8 v18 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + v16);
          char v19 = 0;
          if (v18 > 0x57u)
          {
            if (v18 == 120) {
              goto LABEL_12;
            }
            if (v18 != 101)
            {
              if (v18 == 88)
              {
LABEL_12:
                uint64_t v20 = v17 + 1;
                unint64_t result = specialized static Comparable.<= infix(_:_:)(v17 + 1, v14 + v13);
                if (result)
                {
LABEL_13:
                  unsigned __int8 v21 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v20);
                  uint64_t v22 = 1;
                  if (!UInt8.isValidHexDigit.getter(v21))
                  {
                    unint64_t v138 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, v11);
                    uint64_t v140 = v139;
                    uint64_t v142 = v141;
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(_OWORD *)uint64_t v143 = xmmword_182112860;
                    *(void *)(v143 + 16) = v21;
                    *(void *)(v143 + 24) = v138;
                    *(void *)(v143 + 32) = v140;
                    *(void *)(v143 + 40) = v142;
                    *(unsigned char *)(v143 + 48) = 1;
                    return swift_willThrow();
                  }
                  char v23 = 0;
LABEL_76:
                  unint64_t result = v165(v14, v13, v22);
                  if ((result & 0x100) == 0) {
                    return result;
                  }
                  if (v23)
                  {
                    uint64_t v56 = static String._fromUTF8Repairing(_:)();
                    uint64_t v58 = v57;
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(void *)uint64_t v59 = v56;
                    *(void *)(v59 + 8) = v58;
                    *(_OWORD *)(v59 + 16) = 0u;
                    *(_OWORD *)(v59 + 32) = 0u;
                    char v60 = 11;
LABEL_234:
                    *(unsigned char *)(v59 + 48) = v60;
                    return swift_willThrow();
                  }
                  return ((uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t))a8)(v175 & 1, v14, v13, a3, v11, v20);
                }
                if (v13 - v16 >= 1)
                {
LABEL_221:
                  unsigned __int8 v127 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v17);
                  unint64_t v122 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v17, a3, v11);
                  uint64_t v124 = v128;
                  uint64_t v126 = v129;
                  uint64_t v130 = v127;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_OWORD *)uint64_t v59 = xmmword_182112860;
LABEL_231:
                  *(void *)(v59 + 16) = v130;
LABEL_232:
                  *(void *)(v59 + 24) = v122;
                  *(void *)(v59 + 32) = v124;
                  *(void *)(v59 + 40) = v126;
                  goto LABEL_233;
                }
                goto LABEL_290;
              }
LABEL_110:
              __int16 v73 = _asciiNumbers.getter();
              unint64_t v32 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v14 + v16, a3, v11);
              uint64_t v34 = v74;
              uint64_t v36 = v75;
              if (v18 >= v73)
              {
                unsigned int v37 = HIBYTE(v73);
LABEL_112:
                if (v37 >= v18)
                {
LABEL_113:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v59 = v32;
                  *(void *)(v59 + 8) = v34;
                  *(void *)(v59 + 16) = v36;
                  *(void *)(v59 + 24) = 0;
                  *(void *)(v59 + 32) = 0;
                  *(void *)(v59 + 40) = 0;
                  char v60 = 10;
                  goto LABEL_234;
                }
                goto LABEL_184;
              }
              goto LABEL_184;
            }
            goto LABEL_46;
          }
          uint64_t v20 = v14;
          if (v18 != 46 && v18 != 69) {
            goto LABEL_110;
          }
LABEL_47:
          char v23 = v19;
          unint64_t v48 = v14 + v13;
          unint64_t v49 = v14 + v13 - 1;
          unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v49);
          unsigned __int8 v170 = result;
          if ((result | 0x20) != 0x65)
          {
            uint64_t v22 = 0;
            goto LABEL_76;
          }
          unint64_t v50 = v49 - a3;
          if (v49 >= a3 && a3 + v11 >= v49)
          {
            unint64_t v51 = v11;
            if (a3 + v11 >= v48) {
              unint64_t v11 = v48;
            }
            else {
              v11 += a3;
            }
            if (v11 > a3)
            {
              unint64_t v166 = v49 - a3;
              unint64_t v52 = v51 + a3;
              uint64_t v53 = -(uint64_t)a3;
              uint64_t v13 = 1;
              unint64_t v175 = v51 + a3;
              a8 = -(uint64_t)a3;
              while (2)
              {
                uint64_t v10 = 0;
                unint64_t v14 = 0;
                unint64_t v54 = v52 - a3;
                a7 = (uint64_t (*)(unint64_t, uint64_t, uint64_t))(v53 + a3);
                while (1)
                {
                  if ((uint64_t)((uint64_t)a7 + v14) < 0 || (uint64_t)(v54 + v10) < 1)
                  {
                    __break(1u);
LABEL_255:
                    __break(1u);
                    goto LABEL_256;
                  }
                  unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v14);
                  if (result == 10)
                  {
                    BOOL v55 = __OFADD__(v13++, 1);
                    uint64_t v53 = a8;
                    if (v55) {
                      goto LABEL_276;
                    }
                    a3 += v14 + 1;
                    goto LABEL_72;
                  }
                  if (result == 13) {
                    break;
                  }
                  uint64_t v20 = v14 + 1;
                  if (__OFADD__(v14, 1)) {
                    goto LABEL_255;
                  }
                  ++v14;
                  --v10;
                  if (a3 + v14 >= v11) {
                    goto LABEL_74;
                  }
                }
                uint64_t v20 = a3 + v14;
                unint64_t result = specialized static Comparable.<= infix(_:_:)(a3 + v14 + 1, v49);
                uint64_t v53 = a8;
                if ((result & 1) == 0) {
                  goto LABEL_70;
                }
                if (((a8 + a3 + v14 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v14 + v54) >= 1)
                {
                  unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v14 + 1);
                  if (result == 10) {
                    uint64_t v20 = a3 + v14 + 1;
                  }
LABEL_70:
                  BOOL v55 = __OFADD__(v13++, 1);
                  if (v55) {
                    goto LABEL_277;
                  }
                  a3 = v20 + 1;
LABEL_72:
                  unint64_t v52 = v175;
                  if (a3 < v11) {
                    continue;
                  }
                  uint64_t v20 = 0;
LABEL_74:
                  unint64_t v50 = v166;
                  goto LABEL_80;
                }
                goto LABEL_281;
              }
            }
            uint64_t v20 = 0;
            uint64_t v13 = 1;
LABEL_80:
            uint64_t v61 = v170;
LABEL_181:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v106 = 0xD000000000000010;
            *(void *)(v106 + 8) = 0x80000001823ABAE0;
            *(void *)(v106 + 16) = v61;
            *(void *)(v106 + 24) = v13;
            *(void *)(v106 + 32) = v20;
            *(void *)(v106 + 40) = v50;
            *(unsigned char *)(v106 + 48) = 1;
            return swift_willThrow();
          }
          goto LABEL_272;
        }
      }
      else
      {
        if ((result - 58) < 0xF7u)
        {
          switch((char)result)
          {
            case '+':
            case '-':
              if (v13 < 2)
              {
                if (v13 != 1) {
                  goto LABEL_287;
                }
                unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14);
                unint64_t v108 = v14 - a3;
                if (v14 >= a3)
                {
                  unsigned __int8 v109 = result;
                  unint64_t result = specialized static Comparable.<= infix(_:_:)(v14, a3 + v11);
                  if ((result & 1) == 0) {
                    goto LABEL_289;
                  }
                  unint64_t result = specialized min<A>(_:_:)(v14 + 1, a3 + v11);
                  if (result <= a3)
                  {
                    uint64_t v118 = 0;
                    uint64_t v113 = 1;
                  }
                  else
                  {
                    unint64_t v110 = result;
                    unsigned __int8 v169 = v109;
                    unint64_t v174 = v14 - a3;
                    unint64_t v111 = v11 + a3;
                    uint64_t v112 = -(uint64_t)a3;
                    uint64_t v113 = 1;
                    unint64_t v178 = v111;
                    uint64_t v183 = -(uint64_t)a3;
                    do
                    {
                      uint64_t v114 = 0;
                      uint64_t v115 = 0;
                      unint64_t v116 = v111 - a3;
                      unint64_t v117 = v112 + a3;
                      while (1)
                      {
                        if ((uint64_t)(v117 + v115) < 0 || (uint64_t)(v116 + v114) < 1) {
                          goto LABEL_269;
                        }
                        unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v115);
                        if (result == 10)
                        {
                          BOOL v55 = __OFADD__(v113++, 1);
                          if (v55) {
                            goto LABEL_294;
                          }
                          a3 += v115 + 1;
                          goto LABEL_212;
                        }
                        if (result == 13) {
                          break;
                        }
                        uint64_t v118 = v115 + 1;
                        if (__OFADD__(v115, 1)) {
                          goto LABEL_270;
                        }
                        ++v115;
                        --v114;
                        if (a3 + v115 >= v110) {
                          goto LABEL_214;
                        }
                      }
                      uint64_t v119 = a3 + v115;
                      unint64_t result = specialized static Comparable.<= infix(_:_:)(a3 + v115 + 1, v14);
                      if ((result & 1) == 0) {
                        goto LABEL_210;
                      }
                      if (((v183 + a3 + v115 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v115 + v116) < 1) {
                        goto LABEL_298;
                      }
                      unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v115 + 1);
                      if (result == 10) {
                        uint64_t v119 = a3 + v115 + 1;
                      }
LABEL_210:
                      BOOL v55 = __OFADD__(v113++, 1);
                      if (v55) {
                        goto LABEL_295;
                      }
                      a3 = v119 + 1;
LABEL_212:
                      unint64_t v111 = v178;
                      uint64_t v112 = v183;
                    }
                    while (a3 < v110);
                    uint64_t v118 = 0;
LABEL_214:
                    unsigned __int8 v109 = v169;
                    unint64_t v108 = v174;
                  }
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v137 = 0xD000000000000010;
                  *(void *)(v137 + 8) = 0x80000001823ABAE0;
                  *(void *)(v137 + 16) = v109;
                  *(void *)(v137 + 24) = v113;
                  *(void *)(v137 + 32) = v118;
                  *(void *)(v137 + 40) = v108;
                  *(unsigned char *)(v137 + 48) = 1;
                  return swift_willThrow();
                }
                goto LABEL_288;
              }
              uint64_t v20 = v14 + 1;
              unsigned __int8 v38 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + 1);
              if (v38 != 48)
              {
                unsigned __int8 v131 = v38;
                if ((v38 - 58) >= 0xF7u) {
                  goto LABEL_257;
                }
                switch(v38)
                {
                  case '.':
LABEL_256:
                    char v150 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v14, v13);
                    unint64_t result = (unint64_t)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v150, v151, a3, v11);
                    if (v10) {
                      return result;
                    }
LABEL_257:
                    uint64_t v165 = a7;
                    char v19 = 0;
                    break;
                  case 'N':
                    uint64_t v152 = (char *)specialized BufferView.dropFirst(_:)(1, v14, v13);
                    unint64_t result = specialized static JSON5Scanner.validateNaN(from:fullSource:)(v152, v153, a3, v11);
                    if (v9) {
                      return result;
                    }
                    uint64_t v165 = a7;
                    char v19 = 1;
                    break;
                  case 'I':
                    long long v132 = (char *)specialized BufferView.dropFirst(_:)(1, v14, v13);
                    unint64_t result = specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v132, v133, a3, v11);
                    if (v9) {
                      return result;
                    }
                    uint64_t v165 = a7;
                    char v19 = 1;
                    break;
                  default:
                    uint64_t v185 = 0;
                    unint64_t v186 = 0xE000000000000000;
                    _StringGuts.grow(_:)(20);
                    v154._uint64_t countAndFlagsBits = 0x27207265746661;
                    v154._unint64_t object = (void *)0xE700000000000000;
                    DefaultStringInterpolation.appendLiteral(_:)(v154);
                    unsigned __int8 v155 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14);
                    unsigned int v156 = (v155 + 1);
                    if ((v155 & 0x80) != 0) {
                      unsigned int v156 = (((v155 & 0x3F) << 8) | (v155 >> 6)) + 33217;
                    }
                    uint64_t v184 = (v156 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v156) >> 3)) & 7)));
                    v157._uint64_t countAndFlagsBits = MEMORY[0x185302020](&v184);
                    specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v157);
                    swift_bridgeObjectRelease();
                    v158._uint64_t countAndFlagsBits = 0x6D756E206E692027;
                    v158._unint64_t object = (void *)0xEB00000000726562;
                    DefaultStringInterpolation.appendLiteral(_:)(v158);
                    uint64_t v159 = v185;
                    unint64_t v160 = v186;
                    unint64_t v161 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, v11);
                    uint64_t v163 = v162;
                    uint64_t v95 = v164;
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(void *)uint64_t v59 = v159;
                    *(void *)(v59 + 8) = v160;
                    *(void *)(v59 + 16) = v131;
                    *(void *)(v59 + 24) = v161;
                    *(void *)(v59 + 32) = v163;
                    goto LABEL_148;
                }
                goto LABEL_47;
              }
              uint64_t v165 = a7;
              unint64_t v17 = v14 + 2;
              if (specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
              {
                char v19 = 0;
                goto LABEL_47;
              }
              unsigned __int8 v145 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v17);
              char v19 = 0;
              int v146 = v145;
              if (v145 <= 0x57u) {
                goto LABEL_249;
              }
              switch(v145)
              {
                case 'x':
                  goto LABEL_246;
                case 'e':
                  goto LABEL_47;
                case 'X':
LABEL_246:
                  uint64_t v20 = v14 + 3;
                  if (specialized static Comparable.<= infix(_:_:)(v14 + 3, v14 + v13)) {
                    goto LABEL_13;
                  }
                  if (v13 - 2 >= 1) {
                    goto LABEL_221;
                  }
                  __break(1u);
LABEL_249:
                  if (v146 == 46 || v146 == 69) {
                    goto LABEL_47;
                  }
                  break;
              }
              __int16 v147 = _asciiNumbers.getter();
              unint64_t v32 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v17, a3, v11);
              uint64_t v34 = v148;
              uint64_t v36 = v149;
              if (v145 < v147 || HIBYTE(v147) < v145)
              {
                uint64_t v47 = v145;
                goto LABEL_185;
              }
              goto LABEL_113;
            case '.':
              if (v13 >= 1) {
                uint64_t v120 = 1;
              }
              else {
                uint64_t v120 = v13;
              }
              unint64_t v121 = v14 + v120;
              if (specialized Collection.isEmpty.getter(v14 + v120, v13 - v120))
              {
                unint64_t v122 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v121, a3, v11);
                uint64_t v124 = v123;
                uint64_t v126 = v125;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v59 = 0;
                *(void *)(v59 + 8) = 0;
                *(void *)(v59 + 16) = 46;
                goto LABEL_232;
              }
              uint64_t v165 = a7;
              LOBYTE(v130) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v121);
              __int16 v134 = _asciiNumbers.getter();
              if (v130 >= v134
                && HIBYTE(v134) >= v130)
              {
                goto LABEL_45;
              }
              unint64_t v122 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v121, a3, v11);
              uint64_t v124 = v135;
              uint64_t v126 = v136;
              uint64_t v130 = v130;
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)uint64_t v59 = 0xD000000000000013;
              *(void *)(v59 + 8) = 0x80000001823ABAC0;
              goto LABEL_231;
            case 'I':
              unint64_t result = closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)((const char *)v14, v13, v14, v13, a3, v11);
              goto LABEL_188;
            case 'N':
              unint64_t result = specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v14, v13, v14, v13, a3, v11);
LABEL_188:
              if (v9) {
                return result;
              }
              uint64_t v165 = a7;
              char v19 = 1;
              goto LABEL_46;
            default:
              goto LABEL_286;
          }
        }
        uint64_t v165 = a7;
      }
LABEL_45:
      char v19 = 0;
LABEL_46:
      uint64_t v20 = v14;
      goto LABEL_47;
    }
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
LABEL_273:
    __break(1u);
LABEL_274:
    __break(1u);
    goto LABEL_275;
  }
  if (!a2) {
    goto LABEL_268;
  }
  unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, result);
  if (result == 48)
  {
    if (v13 >= 1) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = v13;
    }
    uint64_t v20 = v14;
    if (v13 >= 2)
    {
      unint64_t v27 = v14 + v26;
      unsigned __int8 v28 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + v26);
      unsigned int v29 = v28;
      BOOL v30 = v28 - 46 > 0x37 || ((1 << (v28 - 46)) & 0x80000000800001) == 0;
      uint64_t v20 = v14;
      if (v30)
      {
        unsigned __int8 v18 = v28;
        __int16 v31 = _asciiNumbers.getter();
        unint64_t v32 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v27, a3, a4);
        uint64_t v34 = v33;
        uint64_t v36 = v35;
        if (v29 >= v31)
        {
          unsigned int v37 = HIBYTE(v31);
          goto LABEL_112;
        }
LABEL_184:
        uint64_t v47 = v18;
        goto LABEL_185;
      }
    }
LABEL_138:
    unint64_t v11 = a4;
    if ((a6 & 1) != 0 && v20 + 1 < v14 + v13)
    {
      uint64_t v88 = 0;
      while (1)
      {
        uint64_t v89 = v20 + v88;
        if ((*(unsigned __int8 *)(v20 + v88 + 1) | 0x20) == 0x65) {
          break;
        }
        if (~v20 + v13 + v14 == ++v88) {
          goto LABEL_149;
        }
      }
      unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v20 + v88);
      if ((result - 58) <= 0xF5u)
      {
        if (((v20 - v14 + v88 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v20 + v13 + v14 - v88) >= 1)
        {
          unsigned __int8 v90 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v89 + 1);
          unint64_t v91 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v89 + 1, a3, a4);
          uint64_t v93 = v92;
          uint64_t v95 = v94;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)uint64_t v59 = xmmword_182112860;
          *(void *)(v59 + 16) = v90;
          *(void *)(v59 + 24) = v91;
          *(void *)(v59 + 32) = v93;
LABEL_148:
          *(void *)(v59 + 40) = v95;
          goto LABEL_233;
        }
        goto LABEL_283;
      }
    }
LABEL_149:
    unint64_t v96 = v14 + v13;
    unint64_t v97 = v14 + v13 - 1;
    unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v97);
    if ((result - 58) > 0xF5u)
    {
      unint64_t result = a9(v14, v13);
      if ((result & 0x100) == 0) {
        return result;
      }
      return ((uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t))a8)(v175 & 1, v14, v13, a3, v11, v20);
    }
    unint64_t v50 = v97 - a3;
    if (v97 >= a3 && a3 + a4 >= v97)
    {
      if (a3 + a4 >= v96) {
        unint64_t v98 = v96;
      }
      else {
        unint64_t v98 = a3 + a4;
      }
      if (v98 > a3)
      {
        char v168 = result;
        unint64_t v173 = v97 - a3;
        unint64_t v99 = a4 + a3;
        uint64_t v100 = -(uint64_t)a3;
        uint64_t v13 = 1;
        unint64_t v177 = a4 + a3;
        uint64_t v182 = -(uint64_t)a3;
        while (2)
        {
          uint64_t v101 = 0;
          uint64_t v102 = 0;
          unint64_t v103 = v99 - a3;
          unint64_t v104 = v100 + a3;
          while (1)
          {
            if ((uint64_t)(v104 + v102) < 0 || (uint64_t)(v103 + v101) < 1)
            {
              __break(1u);
LABEL_264:
              __break(1u);
              goto LABEL_265;
            }
            unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v102);
            if (result == 10)
            {
              BOOL v55 = __OFADD__(v13++, 1);
              uint64_t v100 = v182;
              if (v55) {
                goto LABEL_278;
              }
              a3 += v102 + 1;
              goto LABEL_174;
            }
            if (result == 13) {
              break;
            }
            uint64_t v20 = v102 + 1;
            if (__OFADD__(v102, 1)) {
              goto LABEL_264;
            }
            ++v102;
            --v101;
            if (a3 + v102 >= v98) {
              goto LABEL_176;
            }
          }
          uint64_t v105 = a3 + v102;
          unint64_t result = specialized static Comparable.<= infix(_:_:)(a3 + v102 + 1, v97);
          uint64_t v100 = v182;
          if ((result & 1) == 0) {
            goto LABEL_172;
          }
          if (((v182 + a3 + v102 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v102 + v103) >= 1)
          {
            unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v102 + 1);
            if (result == 10) {
              uint64_t v105 = a3 + v102 + 1;
            }
LABEL_172:
            BOOL v55 = __OFADD__(v13++, 1);
            if (v55) {
              goto LABEL_279;
            }
            a3 = v105 + 1;
LABEL_174:
            unint64_t v99 = v177;
            if (a3 < v98) {
              continue;
            }
            uint64_t v20 = 0;
LABEL_176:
            LOBYTE(result) = v168;
            unint64_t v50 = v173;
            goto LABEL_180;
          }
          goto LABEL_282;
        }
      }
      uint64_t v20 = 0;
      uint64_t v13 = 1;
LABEL_180:
      uint64_t v61 = result;
      goto LABEL_181;
    }
    goto LABEL_274;
  }
  uint64_t v20 = v14;
  if ((result - 58) >= 0xF7u) {
    goto LABEL_138;
  }
  if (result != 45)
  {
LABEL_275:
    __break(1u);
LABEL_276:
    __break(1u);
LABEL_277:
    __break(1u);
LABEL_278:
    __break(1u);
LABEL_279:
    __break(1u);
    goto LABEL_280;
  }
  if (v13 >= 2)
  {
    uint64_t v20 = v14 + 1;
    unsigned __int8 v39 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + 1);
    if (v39 == 48)
    {
      unint64_t v40 = v14 + 2;
      if (!specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
      {
        unsigned __int8 v41 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v40);
        unsigned __int8 v42 = v41;
        unsigned int v43 = v41;
        if (v41 - 46 > 0x37 || ((1 << (v41 - 46)) & 0x80000000800001) == 0)
        {
          __int16 v44 = _asciiNumbers.getter();
          unint64_t v32 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v40, a3, a4);
          uint64_t v34 = v45;
          uint64_t v36 = v46;
          if (v43 >= v44 && HIBYTE(v44) >= v42) {
            goto LABEL_113;
          }
          uint64_t v47 = v42;
LABEL_185:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)uint64_t v59 = xmmword_182112860;
          *(void *)(v59 + 16) = v47;
          *(void *)(v59 + 24) = v32;
          *(void *)(v59 + 32) = v34;
          *(void *)(v59 + 40) = v36;
LABEL_233:
          char v60 = 1;
          goto LABEL_234;
        }
      }
    }
    else
    {
      unsigned __int8 v76 = v39;
      if ((v39 - 58) < 0xF7u)
      {
        unint64_t result = specialized static Comparable.<= infix(_:_:)(a3, v14 + 1);
        if (result)
        {
          unint64_t result = specialized static Comparable.<= infix(_:_:)(v14 + 1, a3 + a4);
          if (result)
          {
            unint64_t result = specialized min<A>(_:_:)(v14 + 2, a3 + a4);
            if (result > a3)
            {
              unint64_t v77 = result;
              unint64_t v78 = v11 + a3;
              uint64_t v79 = -(uint64_t)a3;
              uint64_t v80 = 1;
              unint64_t v81 = a3;
              unsigned __int8 v167 = v76;
              unint64_t v172 = v78;
              while (2)
              {
                uint64_t v181 = v80;
                uint64_t v82 = 0;
                uint64_t v83 = 0;
                unint64_t v84 = v78 - v81;
                unint64_t v85 = v79 + v81;
                while (1)
                {
                  if ((uint64_t)(v85 + v83) < 0 || (uint64_t)(v84 + v82) < 1) {
                    goto LABEL_271;
                  }
                  unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v81 + v83);
                  if (result == 10) {
                    break;
                  }
                  if (result == 13)
                  {
                    uint64_t v87 = v81 + v83;
                    unint64_t result = specialized static Comparable.<= infix(_:_:)(v81 + v83 + 1, v20);
                    uint64_t v79 = -(uint64_t)a3;
                    if (result)
                    {
                      if (((v81 - a3 + v83 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v83 + v84) < 1) {
                        goto LABEL_299;
                      }
                      unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v81 + v83 + 1);
                      if (result == 10) {
                        uint64_t v87 = v81 + v83 + 1;
                      }
                    }
                    uint64_t v80 = v181 + 1;
                    if (__OFADD__(v181, 1)) {
                      goto LABEL_297;
                    }
                    unint64_t v81 = v87 + 1;
                    goto LABEL_136;
                  }
                  uint64_t v86 = v83 + 1;
                  if (__OFADD__(v83, 1)) {
                    goto LABEL_273;
                  }
                  ++v83;
                  --v82;
                  if (v81 + v83 >= v77)
                  {
                    unsigned __int8 v76 = v167;
                    uint64_t v80 = v181;
                    goto LABEL_241;
                  }
                }
                uint64_t v79 = -(uint64_t)a3;
                uint64_t v80 = v181 + 1;
                if (__OFADD__(v181, 1)) {
                  goto LABEL_296;
                }
                v81 += v83 + 1;
LABEL_136:
                unint64_t v78 = v172;
                if (v81 < v77) {
                  continue;
                }
                break;
              }
              uint64_t v86 = 0;
              unsigned __int8 v76 = v167;
              goto LABEL_241;
            }
            uint64_t v86 = 0;
            uint64_t v80 = 1;
LABEL_241:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v144 = 0xD000000000000013;
            *(void *)(v144 + 8) = 0x80000001823ABBD0;
            *(void *)(v144 + 16) = v76;
            *(void *)(v144 + 24) = v80;
            *(void *)(v144 + 32) = v86;
            *(void *)(v144 + 40) = v20 - a3;
            *(unsigned char *)(v144 + 48) = 1;
            return swift_willThrow();
          }
          goto LABEL_292;
        }
LABEL_291:
        __break(1u);
LABEL_292:
        __break(1u);
        goto LABEL_293;
      }
    }
    goto LABEL_138;
  }
  unint64_t v62 = v14 - a3;
  if (v14 < a3 || a3 + a4 < v14)
  {
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
LABEL_282:
    __break(1u);
LABEL_283:
    __break(1u);
LABEL_284:
    __break(1u);
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }
  if (a3 + a4 >= v14 + 1) {
    unint64_t v63 = v14 + 1;
  }
  else {
    unint64_t v63 = a3 + v11;
  }
  if (v63 <= a3)
  {
    uint64_t v71 = 0;
    uint64_t v66 = 1;
LABEL_183:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v107 = 0xD000000000000010;
    *(void *)(v107 + 8) = 0x80000001823ABAE0;
    *(void *)(v107 + 16) = 45;
    *(void *)(v107 + 24) = v66;
    *(void *)(v107 + 32) = v71;
    *(void *)(v107 + 40) = v62;
    *(unsigned char *)(v107 + 48) = 1;
    return swift_willThrow();
  }
  unint64_t v64 = a4 + a3;
  uint64_t v65 = -(uint64_t)a3;
  uint64_t v66 = 1;
  unint64_t v171 = v14 - a3;
  unint64_t v176 = a4 + a3;
  uint64_t v180 = -(uint64_t)a3;
  while (2)
  {
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    unint64_t v69 = v64 - a3;
    unint64_t v70 = v65 + a3;
    while (1)
    {
      if ((uint64_t)(v70 + v68) < 0 || (uint64_t)(v69 + v67) < 1)
      {
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
        goto LABEL_267;
      }
      unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v68);
      if (result == 10)
      {
        BOOL v55 = __OFADD__(v66++, 1);
        uint64_t v65 = v180;
        if (v55) {
          goto LABEL_284;
        }
        a3 += v68 + 1;
        goto LABEL_105;
      }
      if (result == 13) {
        break;
      }
      uint64_t v71 = v68 + 1;
      if (__OFADD__(v68, 1)) {
        goto LABEL_266;
      }
      ++v68;
      --v67;
      if (a3 + v68 >= v63) {
        goto LABEL_107;
      }
    }
    uint64_t v72 = a3 + v68;
    unint64_t result = specialized static Comparable.<= infix(_:_:)(a3 + v68 + 1, v14);
    uint64_t v65 = v180;
    if ((result & 1) == 0) {
      goto LABEL_103;
    }
    if (((v180 + a3 + v68 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v68 + v69) >= 1)
    {
      unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v68 + 1);
      if (result == 10) {
        uint64_t v72 = a3 + v68 + 1;
      }
LABEL_103:
      BOOL v55 = __OFADD__(v66++, 1);
      if (v55) {
        goto LABEL_285;
      }
      a3 = v72 + 1;
LABEL_105:
      unint64_t v64 = v176;
      if (a3 < v63) {
        continue;
      }
      uint64_t v71 = 0;
LABEL_107:
      unint64_t v62 = v171;
      goto LABEL_183;
    }
    break;
  }
LABEL_293:
  __break(1u);
LABEL_294:
  __break(1u);
LABEL_295:
  __break(1u);
LABEL_296:
  __break(1u);
LABEL_297:
  __break(1u);
LABEL_298:
  __break(1u);
LABEL_299:
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  char v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  char v23;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 v28;
  unsigned int v29;
  BOOL v30;
  __int16 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned int v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unsigned __int8 v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 v131;
  char *v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned __int8 v145;
  int v146;
  __int16 v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  Swift::String v154;
  unsigned __int8 v155;
  unsigned int v156;
  Swift::String v157;
  Swift::String v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t (*v165)(unint64_t, uint64_t, uint64_t);
  unint64_t v166;
  unsigned __int8 v167;
  char v168;
  unsigned __int8 v169;
  unsigned __int8 v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;

  uint64_t v10 = v9;
  unint64_t v11 = a4;
  uint64_t v13 = a2;
  unint64_t v14 = result;
  LOBYTE(v175) = a5;
  if (a5)
  {
    if (a2)
    {
      unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, result);
      if (result == 48)
      {
        uint64_t v165 = a7;
        if (v13 >= 1) {
          uint64_t v16 = 1;
        }
        else {
          uint64_t v16 = v13;
        }
        if (v13 >= 2)
        {
          unint64_t v17 = v14 + v16;
          unsigned __int8 v18 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + v16);
          char v19 = 0;
          if (v18 > 0x57u)
          {
            if (v18 == 120) {
              goto LABEL_12;
            }
            if (v18 != 101)
            {
              if (v18 == 88)
              {
LABEL_12:
                uint64_t v20 = v17 + 1;
                unint64_t result = specialized static Comparable.<= infix(_:_:)(v17 + 1, v14 + v13);
                if (result)
                {
LABEL_13:
                  unsigned __int8 v21 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v20);
                  uint64_t v22 = 1;
                  if (!UInt8.isValidHexDigit.getter(v21))
                  {
                    unint64_t v138 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, v11);
                    uint64_t v140 = v139;
                    uint64_t v142 = v141;
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(_OWORD *)uint64_t v143 = xmmword_182112860;
                    *(void *)(v143 + 16) = v21;
                    *(void *)(v143 + 24) = v138;
                    *(void *)(v143 + 32) = v140;
                    *(void *)(v143 + 40) = v142;
                    *(unsigned char *)(v143 + 48) = 1;
                    return swift_willThrow();
                  }
                  char v23 = 0;
LABEL_76:
                  unint64_t result = v165(v14, v13, v22);
                  if ((result & 0x10000) == 0) {
                    return result;
                  }
                  if (v23)
                  {
                    uint64_t v56 = static String._fromUTF8Repairing(_:)();
                    uint64_t v58 = v57;
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(void *)uint64_t v59 = v56;
                    *(void *)(v59 + 8) = v58;
                    *(_OWORD *)(v59 + 16) = 0u;
                    *(_OWORD *)(v59 + 32) = 0u;
                    char v60 = 11;
LABEL_234:
                    *(unsigned char *)(v59 + 48) = v60;
                    return swift_willThrow();
                  }
                  return ((uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t))a8)(v175 & 1, v14, v13, a3, v11, v20);
                }
                if (v13 - v16 >= 1)
                {
LABEL_221:
                  unsigned __int8 v127 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v17);
                  unint64_t v122 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v17, a3, v11);
                  uint64_t v124 = v128;
                  uint64_t v126 = v129;
                  uint64_t v130 = v127;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(_OWORD *)uint64_t v59 = xmmword_182112860;
LABEL_231:
                  *(void *)(v59 + 16) = v130;
LABEL_232:
                  *(void *)(v59 + 24) = v122;
                  *(void *)(v59 + 32) = v124;
                  *(void *)(v59 + 40) = v126;
                  goto LABEL_233;
                }
                goto LABEL_290;
              }
LABEL_110:
              __int16 v73 = _asciiNumbers.getter();
              unint64_t v32 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v14 + v16, a3, v11);
              uint64_t v34 = v74;
              uint64_t v36 = v75;
              if (v18 >= v73)
              {
                unsigned int v37 = HIBYTE(v73);
LABEL_112:
                if (v37 >= v18)
                {
LABEL_113:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v59 = v32;
                  *(void *)(v59 + 8) = v34;
                  *(void *)(v59 + 16) = v36;
                  *(void *)(v59 + 24) = 0;
                  *(void *)(v59 + 32) = 0;
                  *(void *)(v59 + 40) = 0;
                  char v60 = 10;
                  goto LABEL_234;
                }
                goto LABEL_184;
              }
              goto LABEL_184;
            }
            goto LABEL_46;
          }
          uint64_t v20 = v14;
          if (v18 != 46 && v18 != 69) {
            goto LABEL_110;
          }
LABEL_47:
          char v23 = v19;
          unint64_t v48 = v14 + v13;
          unint64_t v49 = v14 + v13 - 1;
          unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v49);
          unsigned __int8 v170 = result;
          if ((result | 0x20) != 0x65)
          {
            uint64_t v22 = 0;
            goto LABEL_76;
          }
          unint64_t v50 = v49 - a3;
          if (v49 >= a3 && a3 + v11 >= v49)
          {
            unint64_t v51 = v11;
            if (a3 + v11 >= v48) {
              unint64_t v11 = v48;
            }
            else {
              v11 += a3;
            }
            if (v11 > a3)
            {
              unint64_t v166 = v49 - a3;
              unint64_t v52 = v51 + a3;
              uint64_t v53 = -(uint64_t)a3;
              uint64_t v13 = 1;
              unint64_t v175 = v51 + a3;
              a8 = -(uint64_t)a3;
              while (2)
              {
                uint64_t v10 = 0;
                unint64_t v14 = 0;
                unint64_t v54 = v52 - a3;
                a7 = (uint64_t (*)(unint64_t, uint64_t, uint64_t))(v53 + a3);
                while (1)
                {
                  if ((uint64_t)((uint64_t)a7 + v14) < 0 || (uint64_t)(v54 + v10) < 1)
                  {
                    __break(1u);
LABEL_255:
                    __break(1u);
                    goto LABEL_256;
                  }
                  unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v14);
                  if (result == 10)
                  {
                    BOOL v55 = __OFADD__(v13++, 1);
                    uint64_t v53 = a8;
                    if (v55) {
                      goto LABEL_276;
                    }
                    a3 += v14 + 1;
                    goto LABEL_72;
                  }
                  if (result == 13) {
                    break;
                  }
                  uint64_t v20 = v14 + 1;
                  if (__OFADD__(v14, 1)) {
                    goto LABEL_255;
                  }
                  ++v14;
                  --v10;
                  if (a3 + v14 >= v11) {
                    goto LABEL_74;
                  }
                }
                uint64_t v20 = a3 + v14;
                unint64_t result = specialized static Comparable.<= infix(_:_:)(a3 + v14 + 1, v49);
                uint64_t v53 = a8;
                if ((result & 1) == 0) {
                  goto LABEL_70;
                }
                if (((a8 + a3 + v14 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v14 + v54) >= 1)
                {
                  unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v14 + 1);
                  if (result == 10) {
                    uint64_t v20 = a3 + v14 + 1;
                  }
LABEL_70:
                  BOOL v55 = __OFADD__(v13++, 1);
                  if (v55) {
                    goto LABEL_277;
                  }
                  a3 = v20 + 1;
LABEL_72:
                  unint64_t v52 = v175;
                  if (a3 < v11) {
                    continue;
                  }
                  uint64_t v20 = 0;
LABEL_74:
                  unint64_t v50 = v166;
                  goto LABEL_80;
                }
                goto LABEL_281;
              }
            }
            uint64_t v20 = 0;
            uint64_t v13 = 1;
LABEL_80:
            uint64_t v61 = v170;
LABEL_181:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v106 = 0xD000000000000010;
            *(void *)(v106 + 8) = 0x80000001823ABAE0;
            *(void *)(v106 + 16) = v61;
            *(void *)(v106 + 24) = v13;
            *(void *)(v106 + 32) = v20;
            *(void *)(v106 + 40) = v50;
            *(unsigned char *)(v106 + 48) = 1;
            return swift_willThrow();
          }
          goto LABEL_272;
        }
      }
      else
      {
        if ((result - 58) < 0xF7u)
        {
          switch((char)result)
          {
            case '+':
            case '-':
              if (v13 < 2)
              {
                if (v13 != 1) {
                  goto LABEL_287;
                }
                unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14);
                unint64_t v108 = v14 - a3;
                if (v14 >= a3)
                {
                  unsigned __int8 v109 = result;
                  unint64_t result = specialized static Comparable.<= infix(_:_:)(v14, a3 + v11);
                  if ((result & 1) == 0) {
                    goto LABEL_289;
                  }
                  unint64_t result = specialized min<A>(_:_:)(v14 + 1, a3 + v11);
                  if (result <= a3)
                  {
                    uint64_t v118 = 0;
                    uint64_t v113 = 1;
                  }
                  else
                  {
                    unint64_t v110 = result;
                    unsigned __int8 v169 = v109;
                    unint64_t v174 = v14 - a3;
                    unint64_t v111 = v11 + a3;
                    uint64_t v112 = -(uint64_t)a3;
                    uint64_t v113 = 1;
                    unint64_t v178 = v111;
                    uint64_t v183 = -(uint64_t)a3;
                    do
                    {
                      uint64_t v114 = 0;
                      uint64_t v115 = 0;
                      unint64_t v116 = v111 - a3;
                      unint64_t v117 = v112 + a3;
                      while (1)
                      {
                        if ((uint64_t)(v117 + v115) < 0 || (uint64_t)(v116 + v114) < 1) {
                          goto LABEL_269;
                        }
                        unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v115);
                        if (result == 10)
                        {
                          BOOL v55 = __OFADD__(v113++, 1);
                          if (v55) {
                            goto LABEL_294;
                          }
                          a3 += v115 + 1;
                          goto LABEL_212;
                        }
                        if (result == 13) {
                          break;
                        }
                        uint64_t v118 = v115 + 1;
                        if (__OFADD__(v115, 1)) {
                          goto LABEL_270;
                        }
                        ++v115;
                        --v114;
                        if (a3 + v115 >= v110) {
                          goto LABEL_214;
                        }
                      }
                      uint64_t v119 = a3 + v115;
                      unint64_t result = specialized static Comparable.<= infix(_:_:)(a3 + v115 + 1, v14);
                      if ((result & 1) == 0) {
                        goto LABEL_210;
                      }
                      if (((v183 + a3 + v115 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v115 + v116) < 1) {
                        goto LABEL_298;
                      }
                      unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v115 + 1);
                      if (result == 10) {
                        uint64_t v119 = a3 + v115 + 1;
                      }
LABEL_210:
                      BOOL v55 = __OFADD__(v113++, 1);
                      if (v55) {
                        goto LABEL_295;
                      }
                      a3 = v119 + 1;
LABEL_212:
                      unint64_t v111 = v178;
                      uint64_t v112 = v183;
                    }
                    while (a3 < v110);
                    uint64_t v118 = 0;
LABEL_214:
                    unsigned __int8 v109 = v169;
                    unint64_t v108 = v174;
                  }
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v137 = 0xD000000000000010;
                  *(void *)(v137 + 8) = 0x80000001823ABAE0;
                  *(void *)(v137 + 16) = v109;
                  *(void *)(v137 + 24) = v113;
                  *(void *)(v137 + 32) = v118;
                  *(void *)(v137 + 40) = v108;
                  *(unsigned char *)(v137 + 48) = 1;
                  return swift_willThrow();
                }
                goto LABEL_288;
              }
              uint64_t v20 = v14 + 1;
              unsigned __int8 v38 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + 1);
              if (v38 != 48)
              {
                unsigned __int8 v131 = v38;
                if ((v38 - 58) >= 0xF7u) {
                  goto LABEL_257;
                }
                switch(v38)
                {
                  case '.':
LABEL_256:
                    char v150 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v14, v13);
                    unint64_t result = (unint64_t)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v150, v151, a3, v11);
                    if (v10) {
                      return result;
                    }
LABEL_257:
                    uint64_t v165 = a7;
                    char v19 = 0;
                    break;
                  case 'N':
                    uint64_t v152 = (char *)specialized BufferView.dropFirst(_:)(1, v14, v13);
                    unint64_t result = specialized static JSON5Scanner.validateNaN(from:fullSource:)(v152, v153, a3, v11);
                    if (v9) {
                      return result;
                    }
                    uint64_t v165 = a7;
                    char v19 = 1;
                    break;
                  case 'I':
                    long long v132 = (char *)specialized BufferView.dropFirst(_:)(1, v14, v13);
                    unint64_t result = specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v132, v133, a3, v11);
                    if (v9) {
                      return result;
                    }
                    uint64_t v165 = a7;
                    char v19 = 1;
                    break;
                  default:
                    uint64_t v185 = 0;
                    unint64_t v186 = 0xE000000000000000;
                    _StringGuts.grow(_:)(20);
                    v154._uint64_t countAndFlagsBits = 0x27207265746661;
                    v154._unint64_t object = (void *)0xE700000000000000;
                    DefaultStringInterpolation.appendLiteral(_:)(v154);
                    unsigned __int8 v155 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14);
                    unsigned int v156 = (v155 + 1);
                    if ((v155 & 0x80) != 0) {
                      unsigned int v156 = (((v155 & 0x3F) << 8) | (v155 >> 6)) + 33217;
                    }
                    uint64_t v184 = (v156 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v156) >> 3)) & 7)));
                    v157._uint64_t countAndFlagsBits = MEMORY[0x185302020](&v184);
                    specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v157);
                    swift_bridgeObjectRelease();
                    v158._uint64_t countAndFlagsBits = 0x6D756E206E692027;
                    v158._unint64_t object = (void *)0xEB00000000726562;
                    DefaultStringInterpolation.appendLiteral(_:)(v158);
                    uint64_t v159 = v185;
                    unint64_t v160 = v186;
                    unint64_t v161 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, v11);
                    uint64_t v163 = v162;
                    uint64_t v95 = v164;
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(void *)uint64_t v59 = v159;
                    *(void *)(v59 + 8) = v160;
                    *(void *)(v59 + 16) = v131;
                    *(void *)(v59 + 24) = v161;
                    *(void *)(v59 + 32) = v163;
                    goto LABEL_148;
                }
                goto LABEL_47;
              }
              uint64_t v165 = a7;
              unint64_t v17 = v14 + 2;
              if (specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
              {
                char v19 = 0;
                goto LABEL_47;
              }
              unsigned __int8 v145 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v17);
              char v19 = 0;
              int v146 = v145;
              if (v145 <= 0x57u) {
                goto LABEL_249;
              }
              switch(v145)
              {
                case 'x':
                  goto LABEL_246;
                case 'e':
                  goto LABEL_47;
                case 'X':
LABEL_246:
                  uint64_t v20 = v14 + 3;
                  if (specialized static Comparable.<= infix(_:_:)(v14 + 3, v14 + v13)) {
                    goto LABEL_13;
                  }
                  if (v13 - 2 >= 1) {
                    goto LABEL_221;
                  }
                  __break(1u);
LABEL_249:
                  if (v146 == 46 || v146 == 69) {
                    goto LABEL_47;
                  }
                  break;
              }
              __int16 v147 = _asciiNumbers.getter();
              unint64_t v32 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v17, a3, v11);
              uint64_t v34 = v148;
              uint64_t v36 = v149;
              if (v145 < v147 || HIBYTE(v147) < v145)
              {
                uint64_t v47 = v145;
                goto LABEL_185;
              }
              goto LABEL_113;
            case '.':
              if (v13 >= 1) {
                uint64_t v120 = 1;
              }
              else {
                uint64_t v120 = v13;
              }
              unint64_t v121 = v14 + v120;
              if (specialized Collection.isEmpty.getter(v14 + v120, v13 - v120))
              {
                unint64_t v122 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v121, a3, v11);
                uint64_t v124 = v123;
                uint64_t v126 = v125;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v59 = 0;
                *(void *)(v59 + 8) = 0;
                *(void *)(v59 + 16) = 46;
                goto LABEL_232;
              }
              uint64_t v165 = a7;
              LOBYTE(v130) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v121);
              __int16 v134 = _asciiNumbers.getter();
              if (v130 >= v134
                && HIBYTE(v134) >= v130)
              {
                goto LABEL_45;
              }
              unint64_t v122 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v121, a3, v11);
              uint64_t v124 = v135;
              uint64_t v126 = v136;
              uint64_t v130 = v130;
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)uint64_t v59 = 0xD000000000000013;
              *(void *)(v59 + 8) = 0x80000001823ABAC0;
              goto LABEL_231;
            case 'I':
              unint64_t result = closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)((const char *)v14, v13, v14, v13, a3, v11);
              goto LABEL_188;
            case 'N':
              unint64_t result = specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v14, v13, v14, v13, a3, v11);
LABEL_188:
              if (v9) {
                return result;
              }
              uint64_t v165 = a7;
              char v19 = 1;
              goto LABEL_46;
            default:
              goto LABEL_286;
          }
        }
        uint64_t v165 = a7;
      }
LABEL_45:
      char v19 = 0;
LABEL_46:
      uint64_t v20 = v14;
      goto LABEL_47;
    }
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
LABEL_273:
    __break(1u);
LABEL_274:
    __break(1u);
    goto LABEL_275;
  }
  if (!a2) {
    goto LABEL_268;
  }
  unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, result);
  if (result == 48)
  {
    if (v13 >= 1) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = v13;
    }
    uint64_t v20 = v14;
    if (v13 >= 2)
    {
      unint64_t v27 = v14 + v26;
      unsigned __int8 v28 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + v26);
      unsigned int v29 = v28;
      BOOL v30 = v28 - 46 > 0x37 || ((1 << (v28 - 46)) & 0x80000000800001) == 0;
      uint64_t v20 = v14;
      if (v30)
      {
        unsigned __int8 v18 = v28;
        __int16 v31 = _asciiNumbers.getter();
        unint64_t v32 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v27, a3, a4);
        uint64_t v34 = v33;
        uint64_t v36 = v35;
        if (v29 >= v31)
        {
          unsigned int v37 = HIBYTE(v31);
          goto LABEL_112;
        }
LABEL_184:
        uint64_t v47 = v18;
        goto LABEL_185;
      }
    }
LABEL_138:
    unint64_t v11 = a4;
    if ((a6 & 1) != 0 && v20 + 1 < v14 + v13)
    {
      uint64_t v88 = 0;
      while (1)
      {
        uint64_t v89 = v20 + v88;
        if ((*(unsigned __int8 *)(v20 + v88 + 1) | 0x20) == 0x65) {
          break;
        }
        if (~v20 + v13 + v14 == ++v88) {
          goto LABEL_149;
        }
      }
      unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v20 + v88);
      if ((result - 58) <= 0xF5u)
      {
        if (((v20 - v14 + v88 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v20 + v13 + v14 - v88) >= 1)
        {
          unsigned __int8 v90 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v89 + 1);
          unint64_t v91 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v89 + 1, a3, a4);
          uint64_t v93 = v92;
          uint64_t v95 = v94;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)uint64_t v59 = xmmword_182112860;
          *(void *)(v59 + 16) = v90;
          *(void *)(v59 + 24) = v91;
          *(void *)(v59 + 32) = v93;
LABEL_148:
          *(void *)(v59 + 40) = v95;
          goto LABEL_233;
        }
        goto LABEL_283;
      }
    }
LABEL_149:
    unint64_t v96 = v14 + v13;
    unint64_t v97 = v14 + v13 - 1;
    unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v97);
    if ((result - 58) > 0xF5u)
    {
      unint64_t result = a9(v14, v13);
      if ((result & 0x10000) == 0) {
        return result;
      }
      return ((uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t))a8)(v175 & 1, v14, v13, a3, v11, v20);
    }
    unint64_t v50 = v97 - a3;
    if (v97 >= a3 && a3 + a4 >= v97)
    {
      if (a3 + a4 >= v96) {
        unint64_t v98 = v96;
      }
      else {
        unint64_t v98 = a3 + a4;
      }
      if (v98 > a3)
      {
        char v168 = result;
        unint64_t v173 = v97 - a3;
        unint64_t v99 = a4 + a3;
        uint64_t v100 = -(uint64_t)a3;
        uint64_t v13 = 1;
        unint64_t v177 = a4 + a3;
        uint64_t v182 = -(uint64_t)a3;
        while (2)
        {
          uint64_t v101 = 0;
          uint64_t v102 = 0;
          unint64_t v103 = v99 - a3;
          unint64_t v104 = v100 + a3;
          while (1)
          {
            if ((uint64_t)(v104 + v102) < 0 || (uint64_t)(v103 + v101) < 1)
            {
              __break(1u);
LABEL_264:
              __break(1u);
              goto LABEL_265;
            }
            unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v102);
            if (result == 10)
            {
              BOOL v55 = __OFADD__(v13++, 1);
              uint64_t v100 = v182;
              if (v55) {
                goto LABEL_278;
              }
              a3 += v102 + 1;
              goto LABEL_174;
            }
            if (result == 13) {
              break;
            }
            uint64_t v20 = v102 + 1;
            if (__OFADD__(v102, 1)) {
              goto LABEL_264;
            }
            ++v102;
            --v101;
            if (a3 + v102 >= v98) {
              goto LABEL_176;
            }
          }
          uint64_t v105 = a3 + v102;
          unint64_t result = specialized static Comparable.<= infix(_:_:)(a3 + v102 + 1, v97);
          uint64_t v100 = v182;
          if ((result & 1) == 0) {
            goto LABEL_172;
          }
          if (((v182 + a3 + v102 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v102 + v103) >= 1)
          {
            unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v102 + 1);
            if (result == 10) {
              uint64_t v105 = a3 + v102 + 1;
            }
LABEL_172:
            BOOL v55 = __OFADD__(v13++, 1);
            if (v55) {
              goto LABEL_279;
            }
            a3 = v105 + 1;
LABEL_174:
            unint64_t v99 = v177;
            if (a3 < v98) {
              continue;
            }
            uint64_t v20 = 0;
LABEL_176:
            LOBYTE(result) = v168;
            unint64_t v50 = v173;
            goto LABEL_180;
          }
          goto LABEL_282;
        }
      }
      uint64_t v20 = 0;
      uint64_t v13 = 1;
LABEL_180:
      uint64_t v61 = result;
      goto LABEL_181;
    }
    goto LABEL_274;
  }
  uint64_t v20 = v14;
  if ((result - 58) >= 0xF7u) {
    goto LABEL_138;
  }
  if (result != 45)
  {
LABEL_275:
    __break(1u);
LABEL_276:
    __break(1u);
LABEL_277:
    __break(1u);
LABEL_278:
    __break(1u);
LABEL_279:
    __break(1u);
    goto LABEL_280;
  }
  if (v13 >= 2)
  {
    uint64_t v20 = v14 + 1;
    unsigned __int8 v39 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + 1);
    if (v39 == 48)
    {
      unint64_t v40 = v14 + 2;
      if (!specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
      {
        unsigned __int8 v41 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v40);
        unsigned __int8 v42 = v41;
        unsigned int v43 = v41;
        if (v41 - 46 > 0x37 || ((1 << (v41 - 46)) & 0x80000000800001) == 0)
        {
          __int16 v44 = _asciiNumbers.getter();
          unint64_t v32 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v40, a3, a4);
          uint64_t v34 = v45;
          uint64_t v36 = v46;
          if (v43 >= v44 && HIBYTE(v44) >= v42) {
            goto LABEL_113;
          }
          uint64_t v47 = v42;
LABEL_185:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)uint64_t v59 = xmmword_182112860;
          *(void *)(v59 + 16) = v47;
          *(void *)(v59 + 24) = v32;
          *(void *)(v59 + 32) = v34;
          *(void *)(v59 + 40) = v36;
LABEL_233:
          char v60 = 1;
          goto LABEL_234;
        }
      }
    }
    else
    {
      unsigned __int8 v76 = v39;
      if ((v39 - 58) < 0xF7u)
      {
        unint64_t result = specialized static Comparable.<= infix(_:_:)(a3, v14 + 1);
        if (result)
        {
          unint64_t result = specialized static Comparable.<= infix(_:_:)(v14 + 1, a3 + a4);
          if (result)
          {
            unint64_t result = specialized min<A>(_:_:)(v14 + 2, a3 + a4);
            if (result > a3)
            {
              unint64_t v77 = result;
              unint64_t v78 = v11 + a3;
              uint64_t v79 = -(uint64_t)a3;
              uint64_t v80 = 1;
              unint64_t v81 = a3;
              unsigned __int8 v167 = v76;
              unint64_t v172 = v78;
              while (2)
              {
                uint64_t v181 = v80;
                uint64_t v82 = 0;
                uint64_t v83 = 0;
                unint64_t v84 = v78 - v81;
                unint64_t v85 = v79 + v81;
                while (1)
                {
                  if ((uint64_t)(v85 + v83) < 0 || (uint64_t)(v84 + v82) < 1) {
                    goto LABEL_271;
                  }
                  unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v81 + v83);
                  if (result == 10) {
                    break;
                  }
                  if (result == 13)
                  {
                    uint64_t v87 = v81 + v83;
                    unint64_t result = specialized static Comparable.<= infix(_:_:)(v81 + v83 + 1, v20);
                    uint64_t v79 = -(uint64_t)a3;
                    if (result)
                    {
                      if (((v81 - a3 + v83 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v83 + v84) < 1) {
                        goto LABEL_299;
                      }
                      unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v81 + v83 + 1);
                      if (result == 10) {
                        uint64_t v87 = v81 + v83 + 1;
                      }
                    }
                    uint64_t v80 = v181 + 1;
                    if (__OFADD__(v181, 1)) {
                      goto LABEL_297;
                    }
                    unint64_t v81 = v87 + 1;
                    goto LABEL_136;
                  }
                  uint64_t v86 = v83 + 1;
                  if (__OFADD__(v83, 1)) {
                    goto LABEL_273;
                  }
                  ++v83;
                  --v82;
                  if (v81 + v83 >= v77)
                  {
                    unsigned __int8 v76 = v167;
                    uint64_t v80 = v181;
                    goto LABEL_241;
                  }
                }
                uint64_t v79 = -(uint64_t)a3;
                uint64_t v80 = v181 + 1;
                if (__OFADD__(v181, 1)) {
                  goto LABEL_296;
                }
                v81 += v83 + 1;
LABEL_136:
                unint64_t v78 = v172;
                if (v81 < v77) {
                  continue;
                }
                break;
              }
              uint64_t v86 = 0;
              unsigned __int8 v76 = v167;
              goto LABEL_241;
            }
            uint64_t v86 = 0;
            uint64_t v80 = 1;
LABEL_241:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v144 = 0xD000000000000013;
            *(void *)(v144 + 8) = 0x80000001823ABBD0;
            *(void *)(v144 + 16) = v76;
            *(void *)(v144 + 24) = v80;
            *(void *)(v144 + 32) = v86;
            *(void *)(v144 + 40) = v20 - a3;
            *(unsigned char *)(v144 + 48) = 1;
            return swift_willThrow();
          }
          goto LABEL_292;
        }
LABEL_291:
        __break(1u);
LABEL_292:
        __break(1u);
        goto LABEL_293;
      }
    }
    goto LABEL_138;
  }
  unint64_t v62 = v14 - a3;
  if (v14 < a3 || a3 + a4 < v14)
  {
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
LABEL_282:
    __break(1u);
LABEL_283:
    __break(1u);
LABEL_284:
    __break(1u);
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }
  if (a3 + a4 >= v14 + 1) {
    unint64_t v63 = v14 + 1;
  }
  else {
    unint64_t v63 = a3 + v11;
  }
  if (v63 <= a3)
  {
    uint64_t v71 = 0;
    uint64_t v66 = 1;
LABEL_183:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v107 = 0xD000000000000010;
    *(void *)(v107 + 8) = 0x80000001823ABAE0;
    *(void *)(v107 + 16) = 45;
    *(void *)(v107 + 24) = v66;
    *(void *)(v107 + 32) = v71;
    *(void *)(v107 + 40) = v62;
    *(unsigned char *)(v107 + 48) = 1;
    return swift_willThrow();
  }
  unint64_t v64 = a4 + a3;
  uint64_t v65 = -(uint64_t)a3;
  uint64_t v66 = 1;
  unint64_t v171 = v14 - a3;
  unint64_t v176 = a4 + a3;
  uint64_t v180 = -(uint64_t)a3;
  while (2)
  {
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    unint64_t v69 = v64 - a3;
    unint64_t v70 = v65 + a3;
    while (1)
    {
      if ((uint64_t)(v70 + v68) < 0 || (uint64_t)(v69 + v67) < 1)
      {
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
        goto LABEL_267;
      }
      unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v68);
      if (result == 10)
      {
        BOOL v55 = __OFADD__(v66++, 1);
        uint64_t v65 = v180;
        if (v55) {
          goto LABEL_284;
        }
        a3 += v68 + 1;
        goto LABEL_105;
      }
      if (result == 13) {
        break;
      }
      uint64_t v71 = v68 + 1;
      if (__OFADD__(v68, 1)) {
        goto LABEL_266;
      }
      ++v68;
      --v67;
      if (a3 + v68 >= v63) {
        goto LABEL_107;
      }
    }
    uint64_t v72 = a3 + v68;
    unint64_t result = specialized static Comparable.<= infix(_:_:)(a3 + v68 + 1, v14);
    uint64_t v65 = v180;
    if ((result & 1) == 0) {
      goto LABEL_103;
    }
    if (((v180 + a3 + v68 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v68 + v69) >= 1)
    {
      unint64_t result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v68 + 1);
      if (result == 10) {
        uint64_t v72 = a3 + v68 + 1;
      }
LABEL_103:
      BOOL v55 = __OFADD__(v66++, 1);
      if (v55) {
        goto LABEL_285;
      }
      a3 = v72 + 1;
LABEL_105:
      unint64_t v64 = v176;
      if (a3 < v63) {
        continue;
      }
      uint64_t v71 = 0;
LABEL_107:
      unint64_t v62 = v171;
      goto LABEL_183;
    }
    break;
  }
LABEL_293:
  __break(1u);
LABEL_294:
  __break(1u);
LABEL_295:
  __break(1u);
LABEL_296:
  __break(1u);
LABEL_297:
  __break(1u);
LABEL_298:
  __break(1u);
LABEL_299:
  __break(1u);
  return result;
}

uint64_t closure #1 in XMLPlistMap.detectUID(dictionaryReferenceCount:objectOffset:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  BOOL v3 = *(_DWORD *)result == 1428440643 && *(_WORD *)(result + 4) == 17481;
  *a2 = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for String.StandardComparator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

__n128 protocol witness for Collection.startIndex.getter in conformance AttributedString.Runs@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 40);
  long long v4 = *(_OWORD *)(v1 + 56);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

double one-time initialization function for cache()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<LocaleCache.State>._Buffer);
  uint64_t v0 = swift_allocObject();
  *(_DWORD *)(v0 + 124) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  uint64_t v1 = MEMORY[0x1E4FBC868];
  *(void *)(v0 + 48) = MEMORY[0x1E4FBC868];
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 88) = v1;
  *(void *)(v0 + 96) = v1;
  double result = 0.0;
  *(_OWORD *)(v0 + 104) = xmmword_1821A4B10;
  *(unsigned char *)(v0 + 120) = 0;
  static LocaleCache.cache = v0;
  return result;
}

uint64_t closure #1 in _LocaleICU.scriptCode.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 8) == 1)
  {
    uint64_t v4 = swift_bridgeObjectRetain();
    MEMORY[0x1F4188790](v4);
    LODWORD(v68) = 0;
    String.utf8CString.getter();
    int Language = uloc_getLanguage();
    swift_release();
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    if (Language > 0)
    {
      v46[Language] = 0;
      uint64_t v6 = MEMORY[0x185301F80](v46, 0);
    }
    uint64_t v67 = v7;
    uint64_t v65 = v6;
    MEMORY[0x1F4188790](v6);
    LODWORD(v68) = 0;
    String.utf8CString.getter();
    int Script = uloc_getScript();
    swift_release();
    uint64_t v9 = 0;
    unint64_t v50 = a2;
    uint64_t v10 = 0;
    if ((int)v68 <= 0 && Script > 0)
    {
      v46[Script] = 0;
      uint64_t v9 = MEMORY[0x185301F80](v46);
      uint64_t v10 = v11;
    }
    uint64_t v66 = v9;
    MEMORY[0x1F4188790](v9);
    LODWORD(v68) = 0;
    String.utf8CString.getter();
    int Country = uloc_getCountry();
    swift_release();
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    if ((int)v68 > 0)
    {
      uint64_t v15 = v67;
    }
    else
    {
      uint64_t v15 = v67;
      if (Country > 0)
      {
        v46[Country] = 0;
        uint64_t v13 = MEMORY[0x185301F80](v46);
        uint64_t v14 = v16;
      }
    }
    swift_bridgeObjectRelease();
    if (v15)
    {
      Swift::String v19 = String.lowercased()();
      uint64_t countAndFlagsBits = v19._countAndFlagsBits;
      unint64_t object = v19._object;
      uint64_t v21 = v66;
      if (v10) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v65 = 0;
      uint64_t countAndFlagsBits = 0;
      unint64_t object = 0;
      uint64_t v21 = v66;
      if (v10)
      {
LABEL_16:
        uint64_t v68 = v21;
        uint64_t v69 = v10;
        uint64_t v22 = countAndFlagsBits;
        swift_bridgeObjectRetain_n();
        String.init<A>(_:)();
        Swift::String v23 = String._capitalized()();
        unint64_t v49 = v23._object;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v22;
        uint64_t v24 = v23._countAndFlagsBits;
        if (v14)
        {
LABEL_17:
          uint64_t v25 = object;
          uint64_t v26 = countAndFlagsBits;
          uint64_t v27 = v21;
          Swift::String v28 = String.uppercased()();
          unint64_t v63 = v28._object;
          uint64_t v64 = v28._countAndFlagsBits;
          uint64_t v29 = v14;
          uint64_t v62 = v13;
          goto LABEL_21;
        }
LABEL_20:
        uint64_t v29 = v14;
        uint64_t v25 = object;
        uint64_t v26 = countAndFlagsBits;
        uint64_t v27 = v21;
        uint64_t v62 = 0;
        unint64_t v63 = 0;
        uint64_t v64 = 0;
LABEL_21:
        uint64_t v30 = *(void *)a1;
        uint64_t v60 = *(void *)(a1 + 8);
        uint64_t v61 = v30;
        uint64_t v31 = *(void *)(a1 + 16);
        uint64_t v58 = *(void *)(a1 + 24);
        uint64_t v59 = v31;
        uint64_t v32 = *(void *)(a1 + 32);
        uint64_t v56 = *(void *)(a1 + 40);
        uint64_t v57 = v32;
        uint64_t v33 = *(void *)(a1 + 48);
        uint64_t v54 = *(void *)(a1 + 56);
        uint64_t v55 = v33;
        long long v53 = *(_OWORD *)(a1 + 64);
        uint64_t v34 = *(void *)(a1 + 80);
        uint64_t v51 = *(void *)(a1 + 88);
        uint64_t v52 = v34;
        uint64_t v35 = v65;
        uint64_t v36 = v67;
        *(void *)a1 = v65;
        *(void *)(a1 + 8) = v36;
        uint64_t v37 = v26;
        *(void *)(a1 + 16) = v26;
        *(void *)(a1 + 24) = v25;
        unsigned __int8 v38 = v25;
        *(void *)(a1 + 32) = v27;
        *(void *)(a1 + 40) = v10;
        unsigned __int8 v39 = v49;
        *(void *)(a1 + 48) = v24;
        *(void *)(a1 + 56) = v39;
        uint64_t v40 = v62;
        unsigned __int8 v41 = v63;
        *(void *)(a1 + 64) = v62;
        *(void *)(a1 + 72) = v29;
        *(void *)(a1 + 80) = v64;
        *(void *)(a1 + 88) = v41;
        uint64_t v42 = v29;
        uint64_t v47 = v37;
        unint64_t v48 = v38;
        outlined copy of Locale.LanguageCode?(v35, v36);
        uint64_t v66 = v27;
        outlined copy of Locale.LanguageCode?(v27, v10);
        outlined copy of Locale.LanguageCode?(v40, v42);
        outlined consume of Locale.Language.Components?(v61, v60, v59, v58, v57, v56, v55, v54, v53, *((uint64_t *)&v53 + 1), v52, v51, (void (*)(void))outlined consume of Locale.LanguageCode?);
        if (v10)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined consume of Locale.LanguageCode?(v35, v67);
          uint64_t v43 = v66;
          outlined consume of Locale.LanguageCode?(v66, v10);
          outlined consume of Locale.LanguageCode?(v62, v42);
          swift_bridgeObjectRetain();
          uint64_t result = outlined consume of Locale.LanguageCode?(v43, v10);
          __int16 v44 = v50;
          *unint64_t v50 = v43;
          v44[1] = v10;
        }
        else
        {
          outlined consume of Locale.LanguageCode?(v35, v67);
          outlined consume of Locale.LanguageCode?(v66, 0);
          uint64_t result = outlined consume of Locale.LanguageCode?(v62, v42);
          uint64_t v45 = v50;
          *unint64_t v50 = 0;
          v45[1] = 0;
        }
        return result;
      }
    }
    uint64_t v21 = 0;
    unint64_t v49 = 0;
    uint64_t v24 = 0;
    if (v14) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    *a2 = *(void *)(a1 + 32);
    a2[1] = result;
    return swift_bridgeObjectRetain();
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t outlined consume of Locale.Language.Components?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void))
{
  if (a2 != 1)
  {
    a13();
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))a13)(a5, a6, a7, a8);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))a13)(a9, a10, a11, a12);
  }
  return result;
}

uint64_t type metadata accessor for Measurement<>.FormatStyle.UnitWidth()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UInt32(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int32(a1, a2, a3, a4, (SEL *)&selRef_unsignedIntValue, (SEL *)&selRef_initWithUnsignedInt_);
}

uint64_t Locale.hourCycle.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 360))(ObjectType, v1);
}

uint64_t protocol witness for _LocaleProtocol.hourCycle.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 360))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.hourCycle.getter in conformance _LocaleICU@<X0>(char *a1@<X8>)
{
  unsigned int v3 = *(os_unfair_lock_s **)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  partial apply for closure #1 in _LocaleICU.hourCycle.getter((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 140);

  return swift_release();
}

uint64_t partial apply for closure #1 in _LocaleICU.hourCycle.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #1 in _LocaleICU.hourCycle.getter(a1, v2, a2);
}

uint64_t closure #1 in _LocaleICU.hourCycle.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v188 = *MEMORY[0x1E4F143B8];
  int v5 = *(unsigned __int8 *)(result + 281);
  if (v5 != 4)
  {
    *a3 = v5;
    return result;
  }
  uint64_t v7 = result;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  v10._uint64_t countAndFlagsBits = specialized static Locale.keywordValue(identifier:key:)();
  if (v10._object)
  {
    uint64_t result = Locale.HourCycle.init(rawValue:)(v10, (char *)v174);
    char v11 = v174[0];
    if (LOBYTE(v174[0]) != 4) {
      goto LABEL_17;
    }
  }
  outlined init with take of LocalePreferences?(a2 + 32, (uint64_t)v176);
  outlined init with take of LocalePreferences?((uint64_t)v176, (uint64_t)v177);
  uint64_t result = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)v177);
  if (result == 1) {
    goto LABEL_5;
  }
  if (v177[138])
  {
    char v11 = 2;
    goto LABEL_17;
  }
  if (v177[139])
  {
    char v11 = 1;
LABEL_17:
    *(unsigned char *)(v7 + 281) = v11;
    *a3 = v11;
    return result;
  }
LABEL_5:
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(v9, v8, v174);
  char v12 = v175;
  if (v175 != 4)
  {
    uint64_t result = (uint64_t)outlined release of Locale.Components(v174);
    *(unsigned char *)(v7 + 281) = v12;
    *a3 = v12;
    return result;
  }
  unint64_t v166 = a3;
  uint64_t v168 = v3;
  _LocaleICU._lockedCalendarIdentifier(_:)(v7, &v178);
  LODWORD(v167) = v178;
  uint64_t v13 = *(void *)(v7 + 336);
  if (!v13) {
    goto LABEL_50;
  }
  uint64_t v14 = *(void *)(v7 + 328);
  uint64_t v15 = *(void *)(v7 + 352);
  if (v13 == 1)
  {
    uint64_t v155 = *(void *)(v7 + 344);
    uint64_t v156 = v15;
    uint64_t v157 = v14;
    specialized static Locale.keywordValue(identifier:key:)();
    if (v16)
    {
      if (String.count.getter() >= 3)
      {
        uint64_t v17 = specialized Collection.prefix(_:)(2);
        uint64_t v19 = v18;
        uint64_t v21 = v20;
        uint64_t v23 = v22;
        swift_bridgeObjectRelease();
        MEMORY[0x185301F50](v17, v19, v21, v23);
        swift_bridgeObjectRelease();
        Swift::String v24 = String.uppercased()();
        unint64_t object = v24._object;
        uint64_t countAndFlagsBits = v24._countAndFlagsBits;
        swift_bridgeObjectRelease();
        Swift::String v27 = String.uppercased()();
        *(Swift::String *)(v7 + 328) = v24;
        *(Swift::String *)(v7 + 344) = v27;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_43:
        uint64_t v14 = v157;
        goto LABEL_44;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v152 = 1;
    uint64_t v28 = swift_bridgeObjectRetain();
    MEMORY[0x1F4188790](v28);
    LODWORD(v178) = 0;
    String.utf8CString.getter();
    int Language = uloc_getLanguage();
    swift_release();
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    if ((int)v178 <= 0 && Language > 0)
    {
      v149[Language] = 0;
      uint64_t v30 = (os_unfair_lock_s *)MEMORY[0x185301F80](v149, 0);
    }
    os_unfair_lock_t v163 = v30;
    uint64_t v165 = v31;
    MEMORY[0x1F4188790](v30);
    LODWORD(v178) = 0;
    String.utf8CString.getter();
    int Script = uloc_getScript();
    swift_release();
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    if ((int)v178 <= 0 && Script > 0)
    {
      v149[Script] = 0;
      uint64_t v33 = MEMORY[0x185301F80](v149, 0);
    }
    uint64_t v160 = v34;
    uint64_t v164 = (os_unfair_lock_s *)v33;
    MEMORY[0x1F4188790](v33);
    LODWORD(v178) = 0;
    String.utf8CString.getter();
    int Country = uloc_getCountry();
    swift_release();
    uint64_t v36 = 0;
    if ((int)v178 > 0)
    {
      uint64_t v159 = 0;
      uint64_t v37 = v165;
    }
    else
    {
      uint64_t v159 = 0;
      uint64_t v37 = v165;
      if (Country > 0)
      {
        v149[Country] = 0;
        uint64_t v36 = MEMORY[0x185301F80](v149);
        uint64_t v159 = (void *)v38;
      }
    }
    swift_bridgeObjectRelease();
    if (v37)
    {
      Swift::String v39 = String.lowercased()();
      uint64_t v162 = v39._countAndFlagsBits;
      Swift::String v154 = v39._object;
    }
    else
    {
      uint64_t v162 = 0;
      os_unfair_lock_t v163 = 0;
      Swift::String v154 = 0;
    }
    uint64_t v40 = v36;
    unint64_t object = v159;
    uint64_t v41 = v160;
    if (v160)
    {
      os_unfair_lock_t v178 = v164;
      uint64_t v179 = v160;
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      Swift::String v42 = String._capitalized()();
      unint64_t v161 = (char *)v42._countAndFlagsBits;
      unint64_t v158 = (unint64_t)v42._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v164 = 0;
      unint64_t v161 = 0;
      unint64_t v158 = 0;
    }
    if (object)
    {
      Swift::String v43 = String.uppercased()();
      __int16 v44 = v43._object;
      uint64_t v45 = (uint64_t)object;
      uint64_t v46 = v40;
      uint64_t v153 = v40;
      uint64_t v151 = v43._countAndFlagsBits;
    }
    else
    {
      os_unfair_lock_t v47 = v163;
      os_unfair_lock_t v178 = v163;
      uint64_t v179 = v37;
      uint64_t v180 = v162;
      uint64_t v181 = v154;
      uint64_t v48 = (uint64_t)v164;
      uint64_t v182 = (uint64_t)v164;
      uint64_t v183 = v41;
      uint64_t v184 = v161;
      unint64_t v185 = v158;
      long long v186 = 0u;
      long long v187 = 0u;
      outlined copy of Locale.LanguageCode?((uint64_t)v163, v37);
      outlined copy of Locale.LanguageCode?(v48, v41);
      outlined copy of Locale.LanguageCode?(0, 0);
      uint64_t v153 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v178);
      uint64_t v49 = (uint64_t)v47;
      unint64_t object = v50;
      outlined consume of Locale.LanguageCode?(v49, v165);
      outlined consume of Locale.LanguageCode?(v48, v41);
      outlined consume of Locale.LanguageCode?(0, 0);
      if (object)
      {
        Swift::String v51 = String.uppercased()();
        uint64_t v151 = v51._countAndFlagsBits;
        __int16 v44 = v51._object;
      }
      else
      {
        uint64_t v153 = 0;
        uint64_t v151 = 0;
        __int16 v44 = 0;
      }
      uint64_t v46 = 0;
      uint64_t v45 = (uint64_t)v159;
    }
    uint64_t v159 = (void *)v46;
    outlined copy of Locale.LanguageCode?(v46, v45);
    outlined consume of Locale.LanguageCode?((uint64_t)v163, v165);
    outlined consume of Locale.LanguageCode?((uint64_t)v164, v160);
    outlined consume of Locale.LanguageCode?((uint64_t)v159, v45);
    uint64_t v52 = *(void *)(v7 + 328);
    uint64_t v53 = *(void *)(v7 + 336);
    uint64_t v164 = *(os_unfair_lock_s **)(v7 + 344);
    uint64_t v165 = v52;
    os_unfair_lock_t v163 = *(os_unfair_lock_t *)(v7 + 352);
    uint64_t countAndFlagsBits = v153;
    uint64_t v54 = v151;
    outlined copy of Locale.LanguageCode?(v153, (uint64_t)object);
    outlined consume of Locale.Subdivision??(v165, v53);
    *(void *)(v7 + 328) = countAndFlagsBits;
    *(void *)(v7 + 336) = object;
    *(void *)(v7 + 344) = v54;
    *(void *)(v7 + 352) = v44;
    uint64_t v13 = v152;
    if (object) {
      goto LABEL_43;
    }
LABEL_50:
    uint64_t v68 = one-time initialization token for _patternGeneratorCache;
    uint64_t v69 = swift_bridgeObjectRetain();
    if (v68 != -1) {
      uint64_t v69 = swift_once();
    }
    uint64_t v70 = *(void *)algn_1E8EDF498;
    uint64_t v165 = static ICUPatternGenerator._patternGeneratorCache;
    uint64_t v170 = v9;
    unint64_t v171 = v8;
    unsigned __int8 v172 = v167;
    MEMORY[0x1F4188790](v69);
    char v150 = &v170;
    uint64_t v71 = (uint64_t *)(v70 + 16);
    uint64_t v61 = v70 + 24;
    swift_retain_n();
    os_unfair_lock_lock((os_unfair_lock_t)(v70 + 24));
    uint64_t v72 = v168;
    _s10Foundation14FormatterCacheV9formatter3for7creatorq_x_q_yKXEtKFq_SgSDyxq_GzYbXEfU_AA19ICUPatternGeneratorC07PatternH4InfoV_AJSgTG5TA_0(v70 + 16, (uint64_t *)&v173);
    uint64_t v168 = v72;
    if (v72) {
      goto LABEL_161;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v70 + 24));
    swift_release();
    uint64_t v73 = (uint64_t)v173;
    if (v173 != (os_unfair_lock_s *)1) {
      goto LABEL_152;
    }
    LOBYTE(v169) = (_BYTE)v167;
    type metadata accessor for ICUPatternGenerator();
    swift_allocObject();
    os_unfair_lock_t v167 = (os_unfair_lock_t)(v70 + 24);
    swift_bridgeObjectRetain();
    uint64_t v74 = ICUPatternGenerator.init(localeIdentifier:calendarIdentifier:)(v9, v8, (char *)&v169);
    swift_retain();
    os_unfair_lock_lock(v167);
    uint64_t v75 = *(void *)(v70 + 16);
    uint64_t v76 = *(void *)(v75 + 16);
    os_unfair_lock_t v163 = (os_unfair_lock_t)v70;
    uint64_t v164 = (os_unfair_lock_s *)v75;
    if (v165 >= v76) {
      swift_bridgeObjectRetain();
    }
    else {
      uint64_t *v71 = MEMORY[0x1E4FBC868];
    }
    uint64_t v91 = v170;
    uint64_t v78 = v171;
    uint64_t v60 = v172;
    uint64_t v165 = v74;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v169 = *v71;
    uint64_t v80 = v169;
    uint64_t *v71 = 0x8000000000000000;
    uint64_t v77 = v91;
    LODWORD(v162) = v60;
    unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)(v91, v78, v60);
    uint64_t v94 = *(void *)(v80 + 16);
    BOOL v95 = (v93 & 1) == 0;
    uint64_t v96 = v94 + v95;
    if (!__OFADD__(v94, v95))
    {
      char v97 = v93;
      if (*(void *)(v80 + 24) < v96)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v96, isUniquelyReferenced_nonNull_native);
        uint64_t v80 = v169;
        char v98 = v162;
        unint64_t v99 = specialized __RawDictionaryStorage.find<A>(_:)(v91, v78, v162);
        if ((v97 & 1) != (v100 & 1)) {
          goto LABEL_162;
        }
        unint64_t v82 = v99;
        if ((v97 & 1) == 0) {
          goto LABEL_150;
        }
        goto LABEL_73;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        char v98 = v162;
        if ((v93 & 1) == 0) {
          goto LABEL_150;
        }
        goto LABEL_73;
      }
      unint64_t v158 = v91;
      uint64_t v159 = (void *)v82;
      uint64_t v160 = v78;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPatternGenerator.PatternGeneratorInfo, ICUPatternGenerator?>);
      uint64_t v126 = v80;
      uint64_t v127 = static _DictionaryStorage.copy(original:)();
      uint64_t v80 = v127;
      uint64_t v61 = v126;
      if (!*(void *)(v126 + 16)) {
        goto LABEL_149;
      }
      uint64_t v128 = (char *)(v127 + 64);
      uint64_t v129 = 1 << *(unsigned char *)(v80 + 32);
      unint64_t v161 = (char *)(v126 + 64);
      unint64_t v130 = (unint64_t)(v129 + 63) >> 6;
      if (v80 != v126 || v128 >= &v161[8 * v130]) {
        memmove(v128, v161, 8 * v130);
      }
      int64_t v131 = 0;
      *(void *)(v80 + 16) = *(void *)(v61 + 16);
      uint64_t v132 = 1 << *(unsigned char *)(v61 + 32);
      uint64_t v133 = -1;
      if (v132 < 64) {
        uint64_t v133 = ~(-1 << v132);
      }
      int64_t v62 = v133 & *(void *)(v61 + 64);
      int64_t v134 = (unint64_t)(v132 + 63) >> 6;
      while (1)
      {
        if (v62)
        {
          unint64_t v135 = __clz(__rbit64(v62));
          v62 &= v62 - 1;
          unint64_t v136 = v135 | (v131 << 6);
        }
        else
        {
          int64_t v144 = v131 + 1;
          if (__OFADD__(v131, 1))
          {
LABEL_157:
            __break(1u);
            goto LABEL_158;
          }
          if (v144 >= v134) {
            goto LABEL_149;
          }
          unint64_t v145 = *(void *)&v161[8 * v144];
          ++v131;
          if (!v145)
          {
            int64_t v131 = v144 + 1;
            if (v144 + 1 >= v134) {
              goto LABEL_149;
            }
            unint64_t v145 = *(void *)&v161[8 * v131];
            if (!v145)
            {
              int64_t v131 = v144 + 2;
              if (v144 + 2 >= v134) {
                goto LABEL_149;
              }
              unint64_t v145 = *(void *)&v161[8 * v131];
              if (!v145)
              {
                int64_t v131 = v144 + 3;
                if (v144 + 3 >= v134) {
                  goto LABEL_149;
                }
                unint64_t v145 = *(void *)&v161[8 * v131];
                if (!v145)
                {
                  int64_t v131 = v144 + 4;
                  if (v144 + 4 >= v134) {
                    goto LABEL_149;
                  }
                  unint64_t v145 = *(void *)&v161[8 * v131];
                  if (!v145)
                  {
                    int64_t v131 = v144 + 5;
                    if (v144 + 5 >= v134) {
                      goto LABEL_149;
                    }
                    unint64_t v145 = *(void *)&v161[8 * v131];
                    if (!v145)
                    {
                      int64_t v131 = v144 + 6;
                      if (v144 + 6 >= v134) {
                        goto LABEL_149;
                      }
                      unint64_t v145 = *(void *)&v161[8 * v131];
                      if (!v145)
                      {
                        int64_t v131 = v144 + 7;
                        if (v144 + 7 >= v134) {
                          goto LABEL_149;
                        }
                        unint64_t v145 = *(void *)&v161[8 * v131];
                        if (!v145)
                        {
                          int64_t v146 = v144 + 8;
                          if (v146 >= v134) {
                            goto LABEL_149;
                          }
                          unint64_t v145 = *(void *)&v161[8 * v146];
                          if (!v145)
                          {
                            while (1)
                            {
                              int64_t v131 = v146 + 1;
                              if (__OFADD__(v146, 1)) {
                                goto LABEL_159;
                              }
                              if (v131 >= v134) {
                                break;
                              }
                              unint64_t v145 = *(void *)&v161[8 * v131];
                              ++v146;
                              if (v145) {
                                goto LABEL_148;
                              }
                            }
LABEL_149:
                            swift_bridgeObjectRelease();
                            unint64_t v82 = (unint64_t)v159;
                            uint64_t v78 = v160;
                            uint64_t v77 = v158;
                            char v98 = v162;
                            if ((v97 & 1) == 0)
                            {
LABEL_150:
                              char v147 = v98;
                              uint64_t v73 = v165;
                              specialized _NativeDictionary._insert(at:key:value:)(v82, v77, v78, v147, v165, (void *)v80);
                              swift_bridgeObjectRetain();
LABEL_151:
                              *(void *)&v163[4]._os_unfair_lock_opaque = v80;
                              swift_bridgeObjectRelease();
                              os_unfair_lock_unlock(v167);
                              swift_release();
                              swift_bridgeObjectRelease();
                              outlined consume of ICUDateIntervalFormatter??(1);
LABEL_152:
                              swift_bridgeObjectRelease();
                              swift_release();
                              if (v73)
                              {
LABEL_153:
                                ICUPatternGenerator.defaultHourCycle.getter((char *)&v170);
                                swift_release();
                                uint64_t result = (uint64_t)outlined release of Locale.Components(v174);
                                char v148 = v170;
                              }
                              else
                              {
                                uint64_t result = (uint64_t)outlined release of Locale.Components(v174);
                                char v148 = 2;
                              }
                              *(unsigned char *)(v7 + 281) = v148;
                              *unint64_t v166 = v148;
                              return result;
                            }
LABEL_73:
                            uint64_t v101 = *(void *)(v80 + 56);
                            uint64_t v102 = 8 * v82;
                            swift_release();
                            uint64_t v103 = v165;
                            *(void *)(v101 + v102) = v165;
                            uint64_t v73 = v103;
                            goto LABEL_151;
                          }
                          int64_t v131 = v146;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_148:
          int64_t v62 = (v145 - 1) & v145;
          unint64_t v136 = __clz(__rbit64(v145)) + (v131 << 6);
        }
        uint64_t v137 = 24 * v136;
        uint64_t v138 = *(void *)(v61 + 48) + 24 * v136;
        uint64_t v139 = *(void *)v138;
        uint64_t v140 = *(void *)(v138 + 8);
        LOBYTE(v138) = *(unsigned char *)(v138 + 16);
        uint64_t v141 = 8 * v136;
        uint64_t v142 = *(void *)(*(void *)(v61 + 56) + v141);
        uint64_t v143 = *(void *)(v80 + 48) + v137;
        *(void *)uint64_t v143 = v139;
        *(void *)(v143 + 8) = v140;
        *(unsigned char *)(v143 + 16) = v138;
        *(void *)(*(void *)(v80 + 56) + v141) = v142;
        swift_retain();
        swift_bridgeObjectRetain();
      }
    }
    goto LABEL_75;
  }
  uint64_t countAndFlagsBits = *(void *)(v7 + 328);
  unint64_t object = *(void **)(v7 + 336);
LABEL_44:
  outlined copy of Locale.Subdivision??(v14, v13);
  swift_bridgeObjectRelease();
  uint64_t v170 = 1600417397;
  unint64_t v171 = 0xE400000000000000;
  v55._uint64_t countAndFlagsBits = countAndFlagsBits;
  v55._unint64_t object = object;
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  uint64_t v57 = v170;
  uint64_t v56 = v171;
  uint64_t v58 = one-time initialization token for _patternGeneratorCache;
  uint64_t v59 = swift_bridgeObjectRetain();
  if (v58 != -1) {
    uint64_t v59 = swift_once();
  }
  uint64_t v60 = *(void *)algn_1E8EDF498;
  uint64_t v164 = (os_unfair_lock_s *)static ICUPatternGenerator._patternGeneratorCache;
  uint64_t v165 = v56;
  uint64_t v170 = v57;
  unint64_t v171 = v56;
  unsigned __int8 v172 = v167;
  MEMORY[0x1F4188790](v59);
  char v150 = &v170;
  uint64_t v61 = v60 + 16;
  int64_t v62 = v60 + 24;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v60 + 24));
  uint64_t v63 = v168;
  _s10Foundation14FormatterCacheV9formatter3for7creatorq_x_q_yKXEtKFq_SgSDyxq_GzYbXEfU_AA19ICUPatternGeneratorC07PatternH4InfoV_AJSgTG5TA_0(v60 + 16, (uint64_t *)&v173);
  uint64_t v168 = v63;
  if (v63) {
    goto LABEL_160;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v60 + 24));
  swift_release();
  os_unfair_lock_t v64 = v173;
  if (v173 != (os_unfair_lock_s *)1)
  {
LABEL_113:
    swift_release();
    swift_bridgeObjectRelease_n();
    if (!v64)
    {
      uint64_t result = (uint64_t)outlined release of Locale.Components(v174);
      *(unsigned char *)(v7 + 281) = 2;
      *unint64_t v166 = 2;
      return result;
    }
    goto LABEL_153;
  }
  LOBYTE(v169) = (_BYTE)v167;
  type metadata accessor for ICUPatternGenerator();
  swift_allocObject();
  uint64_t v65 = v165;
  swift_bridgeObjectRetain();
  uint64_t v66 = (os_unfair_lock_s *)ICUPatternGenerator.init(localeIdentifier:calendarIdentifier:)(v57, v65, (char *)&v169);
  swift_retain();
  os_unfair_lock_t v163 = (os_unfair_lock_t)(v60 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v60 + 24));
  uint64_t v67 = *(void *)(*(void *)(v60 + 16) + 16);
  uint64_t v162 = *(void *)(v60 + 16);
  os_unfair_lock_t v167 = v66;
  if ((uint64_t)v164 >= v67) {
    swift_bridgeObjectRetain();
  }
  else {
    *(void *)uint64_t v61 = MEMORY[0x1E4FBC868];
  }
  uint64_t v77 = v170;
  uint64_t v78 = v171;
  LODWORD(v8) = v172;
  swift_retain();
  char v79 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v169 = *(void *)v61;
  uint64_t v80 = v169;
  *(void *)uint64_t v61 = 0x8000000000000000;
  LODWORD(v164) = v8;
  unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)(v77, v78, v8);
  uint64_t v83 = *(void *)(v80 + 16);
  BOOL v84 = (v81 & 1) == 0;
  uint64_t v85 = v83 + v84;
  if (!__OFADD__(v83, v84))
  {
    LOBYTE(v8) = v81;
    if (*(void *)(v80 + 24) < v85)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v85, v79);
      uint64_t v80 = v169;
      char v86 = (char)v164;
      unint64_t v87 = specialized __RawDictionaryStorage.find<A>(_:)(v77, v78, v164);
      if ((v8 & 1) != (v88 & 1)) {
        goto LABEL_162;
      }
      unint64_t v82 = v87;
      if ((v8 & 1) == 0) {
        goto LABEL_111;
      }
LABEL_64:
      uint64_t v89 = *(void *)(v80 + 56);
      uint64_t v90 = 8 * v82;
      swift_release();
      os_unfair_lock_t v64 = v167;
      *(void *)(v89 + v90) = v167;
LABEL_112:
      *(void *)(v60 + 16) = v80;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v163);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1);
      goto LABEL_113;
    }
    if (v79)
    {
      char v86 = (char)v164;
      if (v81) {
        goto LABEL_64;
      }
LABEL_111:
      uint64_t v125 = v77;
      os_unfair_lock_t v64 = v167;
      specialized _NativeDictionary._insert(at:key:value:)(v82, v125, v78, v86, (uint64_t)v167, (void *)v80);
      swift_bridgeObjectRetain();
      goto LABEL_112;
    }
    goto LABEL_76;
  }
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  unint64_t v158 = v82;
  uint64_t v159 = (void *)v77;
  uint64_t v160 = v78;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPatternGenerator.PatternGeneratorInfo, ICUPatternGenerator?>);
  uint64_t v104 = v80;
  uint64_t v105 = static _DictionaryStorage.copy(original:)();
  uint64_t v80 = v105;
  uint64_t v61 = v104;
  if (!*(void *)(v104 + 16))
  {
LABEL_110:
    swift_bridgeObjectRelease();
    uint64_t v77 = (uint64_t)v159;
    uint64_t v78 = v160;
    char v86 = (char)v164;
    unint64_t v82 = v158;
    if (v8) {
      goto LABEL_64;
    }
    goto LABEL_111;
  }
  uint64_t v106 = (char *)(v105 + 64);
  uint64_t v107 = 1 << *(unsigned char *)(v80 + 32);
  unint64_t v161 = (char *)(v104 + 64);
  unint64_t v108 = (unint64_t)(v107 + 63) >> 6;
  if (v80 != v104 || v106 >= &v161[8 * v108]) {
    memmove(v106, v161, 8 * v108);
  }
  int64_t v109 = 0;
  *(void *)(v80 + 16) = *(void *)(v61 + 16);
  uint64_t v110 = 1 << *(unsigned char *)(v61 + 32);
  uint64_t v111 = -1;
  if (v110 < 64) {
    uint64_t v111 = ~(-1 << v110);
  }
  unint64_t v112 = v111 & *(void *)(v61 + 64);
  int64_t v62 = (unint64_t)(v110 + 63) >> 6;
  while (1)
  {
    if (v112)
    {
      unint64_t v113 = __clz(__rbit64(v112));
      v112 &= v112 - 1;
      unint64_t v114 = v113 | (v109 << 6);
      goto LABEL_84;
    }
    int64_t v122 = v109 + 1;
    if (__OFADD__(v109, 1))
    {
      __break(1u);
      goto LABEL_157;
    }
    if (v122 >= v62) {
      goto LABEL_110;
    }
    unint64_t v123 = *(void *)&v161[8 * v122];
    ++v109;
    if (!v123)
    {
      int64_t v109 = v122 + 1;
      if (v122 + 1 >= v62) {
        goto LABEL_110;
      }
      unint64_t v123 = *(void *)&v161[8 * v109];
      if (!v123)
      {
        int64_t v109 = v122 + 2;
        if (v122 + 2 >= v62) {
          goto LABEL_110;
        }
        unint64_t v123 = *(void *)&v161[8 * v109];
        if (!v123)
        {
          int64_t v109 = v122 + 3;
          if (v122 + 3 >= v62) {
            goto LABEL_110;
          }
          unint64_t v123 = *(void *)&v161[8 * v109];
          if (!v123)
          {
            int64_t v109 = v122 + 4;
            if (v122 + 4 >= v62) {
              goto LABEL_110;
            }
            unint64_t v123 = *(void *)&v161[8 * v109];
            if (!v123)
            {
              int64_t v109 = v122 + 5;
              if (v122 + 5 >= v62) {
                goto LABEL_110;
              }
              unint64_t v123 = *(void *)&v161[8 * v109];
              if (!v123)
              {
                int64_t v109 = v122 + 6;
                if (v122 + 6 >= v62) {
                  goto LABEL_110;
                }
                unint64_t v123 = *(void *)&v161[8 * v109];
                if (!v123)
                {
                  int64_t v109 = v122 + 7;
                  if (v122 + 7 >= v62) {
                    goto LABEL_110;
                  }
                  unint64_t v123 = *(void *)&v161[8 * v109];
                  if (!v123) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_109:
    unint64_t v112 = (v123 - 1) & v123;
    unint64_t v114 = __clz(__rbit64(v123)) + (v109 << 6);
LABEL_84:
    uint64_t v115 = 24 * v114;
    uint64_t v116 = *(void *)(v61 + 48) + 24 * v114;
    uint64_t v117 = *(void *)v116;
    uint64_t v118 = *(void *)(v116 + 8);
    LOBYTE(v116) = *(unsigned char *)(v116 + 16);
    uint64_t v119 = 8 * v114;
    uint64_t v120 = *(void *)(*(void *)(v61 + 56) + v119);
    uint64_t v121 = *(void *)(v80 + 48) + v115;
    *(void *)uint64_t v121 = v117;
    *(void *)(v121 + 8) = v118;
    *(unsigned char *)(v121 + 16) = v116;
    *(void *)(*(void *)(v80 + 56) + v119) = v120;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  int64_t v124 = v122 + 8;
  if (v124 >= v62) {
    goto LABEL_110;
  }
  unint64_t v123 = *(void *)&v161[8 * v124];
  if (v123)
  {
    int64_t v109 = v124;
    goto LABEL_109;
  }
  while (1)
  {
    int64_t v109 = v124 + 1;
    if (__OFADD__(v124, 1)) {
      break;
    }
    if (v109 >= v62) {
      goto LABEL_110;
    }
    unint64_t v123 = *(void *)&v161[8 * v109];
    ++v124;
    if (v123) {
      goto LABEL_109;
    }
  }
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  os_unfair_lock_unlock((os_unfair_lock_t)v62);
  __break(1u);
LABEL_161:
  os_unfair_lock_unlock((os_unfair_lock_t)v61);
  __break(1u);
LABEL_162:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = a6[6] + 24 * result;
  *(void *)uint64_t v6 = a2;
  *(void *)(v6 + 8) = a3;
  *(unsigned char *)(v6 + 16) = a4;
  *(void *)(a6[7] + 8 * result) = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

uint64_t specialized static ICUPatternGenerator.localizedPattern(symbols:locale:calendar:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void (*v12)(uint64_t *__return_ptr, uint64_t, uint64_t);
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  unint64_t v58;
  int64_t v59;
  int64_t v60;
  uint64_t v61;
  os_unfair_lock_s *v62;
  uint64_t v63;
  uint64_t countAndFlagsBits;
  Swift::String_optional v65;
  uint64_t result;
  unint64_t v67;
  int64_t v68;
  char *v69;
  int64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  Swift::String v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 v79;
  uint64_t v80;

  uint64_t v3 = a2[1];
  uint64_t v4 = *(void *)(a3 + 8);
  uint64_t v77 = *a2;
  uint64_t v78 = v3;
  v74._uint64_t countAndFlagsBits = Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)(&v77);
  v74._unint64_t object = v5;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 472);
  swift_unknownObjectRetain();
  uint64_t v8 = v7(ObjectType, v3);
  uint64_t v10 = v9;
  swift_unknownObjectRelease();
  uint64_t v11 = swift_getObjectType();
  char v12 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 24);
  swift_unknownObjectRetain();
  v12(&v80, v11, v4);
  swift_unknownObjectRelease();
  uint64_t v13 = v80;
  uint64_t v14 = one-time initialization token for _patternGeneratorCache;
  uint64_t v15 = swift_bridgeObjectRetain();
  if (v14 != -1) {
    uint64_t v15 = swift_once();
  }
  uint64_t v17 = static ICUPatternGenerator._patternGeneratorCache;
  uint64_t v16 = *(void *)algn_1E8EDF498;
  uint64_t v77 = v8;
  uint64_t v78 = v10;
  char v79 = v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (uint64_t *)(v16 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 24));
  partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(v16 + 16, &v76);
  os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 24));
  swift_release();
  uint64_t v19 = v76;
  if (v76 != 1) {
    goto LABEL_53;
  }
  LOBYTE(v75) = v13;
  type metadata accessor for ICUPatternGenerator();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v19 = ICUPatternGenerator.init(localeIdentifier:calendarIdentifier:)(v8, v10, (char *)&v75);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 24));
  uint64_t v20 = *(void *)(v16 + 16);
  if (v17 >= *(void *)(v20 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = v20;
  }
  else
  {
    uint64_t v21 = *(void *)(v16 + 16);
    *uint64_t v18 = MEMORY[0x1E4FBC868];
  }
  uint64_t v22 = v77;
  uint64_t v23 = v78;
  Swift::String v24 = (os_unfair_lock_s *)v79;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v75 = *v18;
  uint64_t v26 = v75;
  *uint64_t v18 = 0x8000000000000000;
  uint64_t v72 = v22;
  uint64_t v73 = v23;
  Swift::String v27 = v23;
  uint64_t v28 = v26;
  uint64_t v71 = (char)v24;
  uint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v27, v24);
  uint64_t v31 = *(void *)(v28 + 16);
  uint64_t v32 = (v29 & 1) == 0;
  uint64_t v33 = v31 + v32;
  if (__OFADD__(v31, v32))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v18) = v29;
    if (*(void *)(v28 + 24) < v33)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, isUniquelyReferenced_nonNull_native);
      uint64_t v34 = v75;
      uint64_t v35 = v22;
      uint64_t v36 = (char)v24;
      uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v73, v24);
      if ((v18 & 1) != (v38 & 1)) {
        goto LABEL_60;
      }
      uint64_t v30 = v37;
      Swift::String v24 = (os_unfair_lock_s *)(v16 + 24);
      if ((v18 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      Swift::String v39 = *(void *)(v34 + 56);
      uint64_t v40 = 8 * v30;
      swift_release();
      *(void *)(v39 + v40) = v19;
LABEL_52:
      *(void *)(v16 + 16) = v34;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v24);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(v76);
LABEL_53:
      swift_release();
      swift_bridgeObjectRelease_n();
      if (!v19) {
        return v74._countAndFlagsBits;
      }
      uint64_t countAndFlagsBits = v74._countAndFlagsBits;
      uint64_t v65 = ICUPatternGenerator._patternForSkeleton(_:)(v74);
      swift_release();
      if (v65.value._object)
      {
        swift_bridgeObjectRelease();
        return v65.value._countAndFlagsBits;
      }
      return countAndFlagsBits;
    }
    uint64_t v22 = v21;
    Swift::String v24 = (os_unfair_lock_s *)(v16 + 24);
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v34 = v28;
      uint64_t v35 = v72;
      uint64_t v36 = v71;
      if (v29) {
        goto LABEL_14;
      }
LABEL_51:
      specialized _NativeDictionary._insert(at:key:value:)(v30, v35, v73, v36, v19, (void *)v34);
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
  }
  uint64_t v67 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPatternGenerator.PatternGeneratorInfo, ICUPatternGenerator?>);
  uint64_t v41 = static _DictionaryStorage.copy(original:)();
  uint64_t v34 = v41;
  if (!*(void *)(v28 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    uint64_t v35 = v72;
    uint64_t v36 = v71;
    uint64_t v30 = v67;
    if (v18) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
  Swift::String v42 = (char *)(v41 + 64);
  uint64_t v69 = (char *)(v28 + 64);
  Swift::String v43 = (unint64_t)((1 << *(unsigned char *)(v34 + 32)) + 63) >> 6;
  if (v34 != v28 || v42 >= &v69[8 * v43]) {
    memmove(v42, v69, 8 * v43);
  }
  __int16 v44 = 0;
  *(void *)(v34 + 16) = *(void *)(v28 + 16);
  uint64_t v45 = 1 << *(unsigned char *)(v28 + 32);
  uint64_t v46 = -1;
  if (v45 < 64) {
    uint64_t v46 = ~(-1 << v45);
  }
  os_unfair_lock_t v47 = v46 & *(void *)(v28 + 64);
  uint64_t v68 = (unint64_t)(v45 + 63) >> 6;
  while (1)
  {
    if (v47)
    {
      uint64_t v48 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      uint64_t v70 = v44;
      uint64_t v49 = v48 | (v44 << 6);
      goto LABEL_24;
    }
    uint64_t v57 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
      goto LABEL_59;
    }
    if (v57 >= v68) {
      goto LABEL_50;
    }
    uint64_t v58 = *(void *)&v69[8 * v57];
    uint64_t v59 = v44 + 1;
    if (!v58)
    {
      uint64_t v59 = v44 + 2;
      if (v44 + 2 >= v68) {
        goto LABEL_50;
      }
      uint64_t v58 = *(void *)&v69[8 * v59];
      if (!v58)
      {
        uint64_t v59 = v44 + 3;
        if (v44 + 3 >= v68) {
          goto LABEL_50;
        }
        uint64_t v58 = *(void *)&v69[8 * v59];
        if (!v58)
        {
          uint64_t v59 = v44 + 4;
          if (v44 + 4 >= v68) {
            goto LABEL_50;
          }
          uint64_t v58 = *(void *)&v69[8 * v59];
          if (!v58)
          {
            uint64_t v59 = v44 + 5;
            if (v44 + 5 >= v68) {
              goto LABEL_50;
            }
            uint64_t v58 = *(void *)&v69[8 * v59];
            if (!v58)
            {
              uint64_t v59 = v44 + 6;
              if (v44 + 6 >= v68) {
                goto LABEL_50;
              }
              uint64_t v58 = *(void *)&v69[8 * v59];
              if (!v58)
              {
                uint64_t v59 = v44 + 7;
                if (v44 + 7 >= v68) {
                  goto LABEL_50;
                }
                uint64_t v58 = *(void *)&v69[8 * v59];
                if (!v58)
                {
                  uint64_t v59 = v44 + 8;
                  if (v44 + 8 >= v68) {
                    goto LABEL_50;
                  }
                  uint64_t v58 = *(void *)&v69[8 * v59];
                  if (!v58) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    os_unfair_lock_t v47 = (v58 - 1) & v58;
    uint64_t v70 = v59;
    uint64_t v49 = __clz(__rbit64(v58)) + (v59 << 6);
LABEL_24:
    unint64_t v50 = 24 * v49;
    Swift::String v51 = *(void *)(v28 + 48) + 24 * v49;
    uint64_t v52 = *(void *)v51;
    uint64_t v53 = *(void *)(v51 + 8);
    LOBYTE(v51) = *(unsigned char *)(v51 + 16);
    uint64_t v54 = 8 * v49;
    Swift::String v55 = *(void *)(*(void *)(v28 + 56) + v54);
    uint64_t v56 = *(void *)(v34 + 48) + v50;
    *(void *)uint64_t v56 = v52;
    *(void *)(v56 + 8) = v53;
    *(unsigned char *)(v56 + 16) = v51;
    *(void *)(*(void *)(v34 + 56) + v54) = v55;
    swift_retain();
    swift_bridgeObjectRetain();
    __int16 v44 = v70;
  }
  uint64_t v60 = v44 + 9;
  if (v44 + 9 >= v68) {
    goto LABEL_50;
  }
  uint64_t v61 = v28;
  int64_t v62 = v24;
  uint64_t v63 = v22;
  uint64_t v58 = *(void *)&v69[8 * v60];
  if (v58)
  {
    uint64_t v59 = v60;
    goto LABEL_49;
  }
  while (1)
  {
    uint64_t v59 = v60 + 1;
    if (__OFADD__(v60, 1)) {
      break;
    }
    uint64_t v22 = v63;
    Swift::String v24 = v62;
    uint64_t v28 = v61;
    if (v59 >= v68) {
      goto LABEL_50;
    }
    uint64_t v58 = *(void *)&v69[8 * v59];
    ++v60;
    if (v58) {
      goto LABEL_49;
    }
  }
LABEL_59:
  __break(1u);
LABEL_60:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(a3);
  Swift::Int v6 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    int v10 = a3;
    uint64_t v11 = ~v6;
    uint64_t v12 = *(void *)(v4 + 48);
    do
    {
      uint64_t v13 = v12 + 24 * v7;
      int v14 = *(unsigned __int8 *)(v13 + 16);
      BOOL v15 = *(void *)v13 == a1 && *(void *)(v13 + 8) == a2;
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && v14 == v10) {
        break;
      }
      unint64_t v7 = (v7 + 1) & v11;
    }
    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

uint64_t type metadata accessor for ICUPatternGenerator()
{
  return self;
}

uint64_t ICUPatternGenerator.init(localeIdentifier:calendarIdentifier:)(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = v3;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  char v7 = *a3;
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(a1, a2, v11);
  __src[0] = *(_OWORD *)v11;
  __src[1] = *(_OWORD *)&v11[2];
  _OWORD __src[2] = *(_OWORD *)&v11[4];
  __src[3] = *(_OWORD *)&v11[6];
  __src[4] = *(_OWORD *)&v11[8];
  __src[5] = *(_OWORD *)&v11[10];
  LOBYTE(__src[6]) = v7;
  *(_OWORD *)((char *)&__src[6] + 8) = *(_OWORD *)&v11[13];
  *(_OWORD *)((char *)&__src[7] + 8) = *(_OWORD *)&v11[15];
  *(_OWORD *)((char *)&__src[8] + 8) = *(_OWORD *)&v11[17];
  *(_OWORD *)((char *)&__src[9] + 8) = *(_OWORD *)&v11[19];
  *(_OWORD *)((char *)&__src[10] + 8) = *(_OWORD *)&v11[21];
  *(_OWORD *)((char *)&__src[11] + 8) = *(_OWORD *)&v11[23];
  WORD4(__src[12]) = v12;
  __src[13] = v13;
  __src[14] = v14;
  __src[15] = v15;
  __src[16] = v16;
  _OWORD __src[17] = v17;
  __src[18] = v18;
  __src[19] = v19;
  __src[20] = v20;
  __src[21] = v21;
  memcpy(__dst, __src, sizeof(__dst));
  Locale.Components.icuIdentifier.getter();
  outlined release of Locale.Components((uint64_t *)__src);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v8 = udatpg_open();
  swift_release();
  if (v8)
  {
    *(void *)(v4 + 16) = v8;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v4;
}

uint64_t _s10Foundation14FormatterCacheV9formatter3for7creatorq_x_q_yKXEtKFq_SgSDyxq_GzYbXEfU_AA19ICUPatternGeneratorC07PatternH4InfoV_AJSgTG5TA_0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2);
}

uint64_t Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xE000000000000000;
  uint64_t v63 = 0;
  unint64_t v64 = 0xE000000000000000;
  outlined init with take of LocalePreferences?(v1, (uint64_t)&v77, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v77, (uint64_t)&v78, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.EraOption?);
  uint64_t v5 = 0;
  switch(v78)
  {
    case 1:
      unint64_t v4 = 0xE400000000000000;
      uint64_t v5 = 1195853639;
      break;
    case 2:
      unint64_t v4 = 0xE500000000000000;
      uint64_t v5 = 0x4747474747;
      break;
    case 3:
      break;
    default:
      unint64_t v4 = 0xE100000000000000;
      uint64_t v5 = 71;
      break;
  }
  unint64_t v6 = v4;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v1 + 8, (uint64_t)v76, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
  outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)&v79, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.YearOption?);
  if (v80 == 255)
  {
    uint64_t v7 = 0;
    unint64_t v9 = 0xE000000000000000;
  }
  else
  {
    uint64_t v7 = Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v79, v80);
    unint64_t v9 = v8;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v1 + 17, (uint64_t)&v75, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v75, (uint64_t)&v81, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.QuarterOption?);
  unint64_t v11 = 0xE000000000000000;
  uint64_t v12 = 0;
  switch(v81)
  {
    case 1:
      unint64_t v11 = 0xE200000000000000;
      uint64_t v12 = 20817;
      break;
    case 2:
      unint64_t v11 = 0xE300000000000000;
      uint64_t v12 = 5329233;
      break;
    case 3:
      unint64_t v11 = 0xE400000000000000;
      uint64_t v12 = 1364283729;
      break;
    case 4:
      unint64_t v11 = 0xE500000000000000;
      uint64_t v12 = 0x5151515151;
      break;
    case 5:
      break;
    default:
      unint64_t v11 = 0xE100000000000000;
      uint64_t v12 = 81;
      break;
  }
  unint64_t v13 = v11;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v1 + 18, (uint64_t)&v74, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v74, (uint64_t)&v82, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MonthOption?);
  unint64_t v14 = 0xE000000000000000;
  uint64_t v15 = 0;
  switch(v82)
  {
    case 1:
      unint64_t v14 = 0xE200000000000000;
      uint64_t v15 = 19789;
      break;
    case 2:
      unint64_t v14 = 0xE300000000000000;
      uint64_t v15 = 5066061;
      break;
    case 3:
      unint64_t v14 = 0xE400000000000000;
      uint64_t v15 = 1296911693;
      break;
    case 4:
      unint64_t v14 = 0xE500000000000000;
      uint64_t v15 = 0x4D4D4D4D4DLL;
      break;
    case 5:
      break;
    default:
      unint64_t v14 = 0xE100000000000000;
      uint64_t v15 = 77;
      break;
  }
  unint64_t v16 = v14;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v1 + 19, (uint64_t)&v73, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v73, (uint64_t)&v83, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekOption?);
  unint64_t v17 = 0xE000000000000000;
  uint64_t v18 = 0;
  switch(v83)
  {
    case 1:
      unint64_t v17 = 0xE200000000000000;
      uint64_t v18 = 30583;
      break;
    case 2:
      unint64_t v17 = 0xE100000000000000;
      uint64_t v18 = 87;
      break;
    case 3:
      break;
    default:
      unint64_t v17 = 0xE100000000000000;
      uint64_t v18 = 119;
      break;
  }
  unint64_t v19 = v17;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v1 + 24, (uint64_t)v72, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption?);
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v84, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOption?);
  if (v84[9])
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
  }
  else
  {
    outlined init with take of Date.FormatStyle.Symbol.SymbolType.DayOption((uint64_t)v84, (uint64_t)v85);
    outlined init with take of Date.FormatStyle.Symbol.SymbolType.DayOption((uint64_t)v85, (uint64_t)&v86);
    uint64_t v22 = v86;
    if (v87 == 1)
    {
      unint64_t v23 = 0xE200000000000000;
      uint64_t v24 = 25700;
      if (v86 != 1)
      {
        uint64_t v24 = 70;
        unint64_t v23 = 0xE100000000000000;
      }
      if (v86) {
        uint64_t v20 = v24;
      }
      else {
        uint64_t v20 = 100;
      }
      if (v86) {
        unint64_t v21 = v23;
      }
      else {
        unint64_t v21 = 0xE100000000000000;
      }
    }
    else
    {
      if (v86 >= 10) {
        uint64_t v22 = 10;
      }
      if (v22 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v22;
      }
      uint64_t v20 = MEMORY[0x185302340](103, 0xE100000000000000, v25);
      unint64_t v21 = v26;
    }
  }
  unint64_t v27 = v21;
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v1 + 34, (uint64_t)&v71, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v71, (uint64_t)&v88, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayOfYearOption?);
  unint64_t v28 = 0xE000000000000000;
  uint64_t v29 = 0;
  switch(v88)
  {
    case 1:
      unint64_t v28 = 0xE200000000000000;
      uint64_t v29 = 17476;
      break;
    case 2:
      unint64_t v28 = 0xE300000000000000;
      uint64_t v29 = 4473924;
      break;
    case 3:
      break;
    default:
      unint64_t v28 = 0xE100000000000000;
      uint64_t v29 = 68;
      break;
  }
  unint64_t v30 = v28;
  String.append(_:)(*(Swift::String *)&v29);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v1 + 35, (uint64_t)&v70, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v70, (uint64_t)&v89, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.WeekdayOption?);
  unint64_t v31 = 0xE000000000000000;
  uint64_t v32 = 0;
  switch(v89)
  {
    case 1:
      unint64_t v31 = 0xE400000000000000;
      uint64_t v32 = 1162167621;
      break;
    case 2:
      unint64_t v31 = 0xE500000000000000;
      uint64_t v32 = 0x4545454545;
      break;
    case 3:
      unint64_t v31 = 0xE600000000000000;
      uint64_t v32 = 0x454545454545;
      break;
    case 4:
      unint64_t v31 = 0xE100000000000000;
      uint64_t v32 = 101;
      break;
    case 5:
      unint64_t v31 = 0xE200000000000000;
      uint64_t v32 = 25957;
      break;
    case 6:
      break;
    default:
      unint64_t v31 = 0xE300000000000000;
      uint64_t v32 = 4539717;
      break;
  }
  unint64_t v33 = v31;
  String.append(_:)(*(Swift::String *)&v32);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v1 + 36, (uint64_t)&v69, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v69, (uint64_t)&v90, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption?);
  unint64_t v34 = 0xE000000000000000;
  uint64_t v35 = 0;
  switch(v90)
  {
    case 1:
      unint64_t v34 = 0xE400000000000000;
      uint64_t v35 = 1633771873;
      break;
    case 2:
      unint64_t v34 = 0xE500000000000000;
      uint64_t v35 = 0x6161616161;
      break;
    case 3:
      unint64_t v34 = 0xE100000000000000;
      uint64_t v35 = 98;
      break;
    case 4:
      unint64_t v34 = 0xE400000000000000;
      uint64_t v35 = 1650614882;
      break;
    case 5:
      unint64_t v34 = 0xE500000000000000;
      uint64_t v35 = 0x6262626262;
      break;
    case 6:
      unint64_t v34 = 0xE100000000000000;
      uint64_t v35 = 66;
      break;
    case 7:
      unint64_t v34 = 0xE400000000000000;
      uint64_t v35 = 1111638594;
      break;
    case 8:
      unint64_t v34 = 0xE500000000000000;
      uint64_t v35 = 0x4242424242;
      break;
    case 9:
      break;
    default:
      unint64_t v34 = 0xE100000000000000;
      uint64_t v35 = 97;
      break;
  }
  unint64_t v36 = v34;
  String.append(_:)(*(Swift::String *)&v35);
  swift_bridgeObjectRelease();
  uint64_t v61 = v2;
  uint64_t v62 = v3;
  char v37 = Date.FormatStyle.DateFieldCollection.preferredHour(withLocale:)(&v61);
  unint64_t v38 = 0xE000000000000000;
  if (v37 == 14)
  {
    uint64_t v39 = 0;
    unint64_t v40 = 0xE000000000000000;
  }
  else
  {
    uint64_t v39 = Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v37);
    unint64_t v40 = v41;
  }
  unint64_t v42 = v40;
  String.append(_:)(*(Swift::String *)&v39);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v1 + 38, (uint64_t)&v68, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v68, (uint64_t)&v91, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.MinuteOption?);
  uint64_t v43 = 28013;
  if (v91)
  {
    unint64_t v44 = 0xE200000000000000;
  }
  else
  {
    uint64_t v43 = 109;
    unint64_t v44 = 0xE100000000000000;
  }
  if (v91 == 2) {
    uint64_t v45 = 0;
  }
  else {
    uint64_t v45 = v43;
  }
  if (v91 == 2) {
    unint64_t v46 = 0xE000000000000000;
  }
  else {
    unint64_t v46 = v44;
  }
  unint64_t v47 = v46;
  String.append(_:)(*(Swift::String *)&v45);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v1 + 39, (uint64_t)&v67, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v67, (uint64_t)&v92, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondOption?);
  uint64_t v48 = 29555;
  if (v92)
  {
    unint64_t v49 = 0xE200000000000000;
  }
  else
  {
    uint64_t v48 = 115;
    unint64_t v49 = 0xE100000000000000;
  }
  if (v92 == 2) {
    uint64_t v50 = 0;
  }
  else {
    uint64_t v50 = v48;
  }
  if (v92 == 2) {
    unint64_t v51 = 0xE000000000000000;
  }
  else {
    unint64_t v51 = v49;
  }
  unint64_t v52 = v51;
  String.append(_:)(*(Swift::String *)&v50);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v1 + 40, (uint64_t)v66, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption?);
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)&v61, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.SecondFractionOption?);
  if (v62 == 255)
  {
    uint64_t v53 = 0;
  }
  else
  {
    uint64_t v53 = Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.rawValue.getter(v61, v62 & 1);
    unint64_t v38 = v54;
  }
  unint64_t v55 = v38;
  String.append(_:)(*(Swift::String *)&v53);
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?(v1 + 49, (uint64_t)&v65, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v65, (uint64_t)&v93, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption?);
  if (v93 == 12)
  {
    uint64_t v56 = 0;
    unint64_t v57 = 0xE000000000000000;
  }
  else
  {
    uint64_t v56 = Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v93);
    unint64_t v57 = v58;
  }
  unint64_t v59 = v57;
  String.append(_:)(*(Swift::String *)&v56);
  swift_bridgeObjectRelease();
  return v63;
}

uint64_t outlined init with take of Date.FormatStyle.Symbol.SymbolType.DayOption(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t Date.FormatStyle.DateFieldCollection.preferredHour(withLocale:)(uint64_t *a1)
{
  void (*v8)(_OWORD *__return_ptr, uint64_t, void *);
  void (*v9)(long long *__return_ptr, uint64_t, void *);
  long long v10;
  uint64_t v11;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  char v18;
  void (*v19)(long long *__return_ptr, uint64_t, void *);
  long long v20;
  long long v21;
  Swift::String v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  char v33;
  _OWORD v34[6];
  unsigned char v35[17];

  uint64_t v3 = *a1;
  uint64_t v2 = (void *)a1[1];
  outlined init with take of LocalePreferences?(v1 + 37, (uint64_t)&v33, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption?);
  outlined init with take of LocalePreferences?((uint64_t)&v33, (uint64_t)v35, &demangling cache variable for type metadata for Date.FormatStyle.Symbol.SymbolType.HourOption?);
  uint64_t v4 = v35[0];
  if (v35[0] == 14 || v3 == 0) {
    return 14;
  }
  uint64_t v6 = v35[0];
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v8 = (void (*)(_OWORD *__return_ptr, uint64_t, void *))v2[45];
  swift_unknownObjectRetain();
  v8(v34, ObjectType, v2);
  if (LOBYTE(v34[0]) > 1u)
  {
    swift_unknownObjectRelease();
    return v6;
  }
  unint64_t v9 = (void (*)(long long *__return_ptr, uint64_t, void *))v2[44];
  swift_unknownObjectRetain();
  uint64_t v25 = ObjectType;
  v9(&v27, ObjectType, v2);
  swift_unknownObjectRelease();
  v34[0] = v27;
  v34[1] = v28;
  v34[2] = v29;
  v34[3] = v30;
  v34[4] = v31;
  v34[5] = v32;
  unint64_t v10 = v27;
  unint64_t v11 = *((void *)&v27 + 1);
  unint64_t v26 = v27;
  unint64_t object = (void *)*((void *)&v28 + 1);
  uint64_t countAndFlagsBits = v28;
  if (!*((void *)&v27 + 1))
  {
    outlined retain of Locale.Language((uint64_t *)v34, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    unint64_t v14 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)v34);
    unint64_t v11 = v15;
    outlined retain of Locale.Language((uint64_t *)v34, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v11)
    {
      unint64_t v26 = v14;
      unint64_t v16 = String.lowercased()();
      uint64_t countAndFlagsBits = v16._countAndFlagsBits;
      unint64_t object = v16._object;
    }
    else
    {
      unint64_t v26 = 0;
      uint64_t countAndFlagsBits = 0;
      unint64_t object = 0;
    }
  }
  outlined copy of Locale.LanguageCode?(v10, *((uint64_t *)&v10 + 1));
  outlined retain of Locale.Language((uint64_t *)v34, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  unint64_t v17 = String.lowercased()();
  if (!v11)
  {
    outlined consume of Locale.LanguageCode?(v26, 0);
    outlined consume of Locale.LanguageCode?(26746, 0xE200000000000000);
    goto LABEL_22;
  }
  if (countAndFlagsBits == v17._countAndFlagsBits && object == v17._object)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v26, v11);
    goto LABEL_19;
  }
  uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Locale.LanguageCode?(v26, v11);
  if ((v18 & 1) == 0)
  {
LABEL_22:
    swift_unknownObjectRelease();
    return v4;
  }
LABEL_19:
  unint64_t v19 = (void (*)(long long *__return_ptr, uint64_t, void *))v2[47];
  swift_unknownObjectRetain();
  v19(&v27, v25, v2);
  swift_unknownObjectRelease();
  uint64_t v20 = v27;
  unint64_t v21 = v28;
  uint64_t v22 = String.uppercased()();
  if (*((void *)&v20 + 1))
  {
    if (v21 == v22)
    {
      outlined copy of Locale.LanguageCode?(v20, *((uint64_t *)&v20 + 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Locale.LanguageCode?(v20, *((uint64_t *)&v20 + 1));
      return byte_1821A3E58[v4];
    }
    unint64_t v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined copy of Locale.LanguageCode?(v20, *((uint64_t *)&v20 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v20, *((uint64_t *)&v20 + 1));
    uint64_t v6 = v4;
    if (v23) {
      return byte_1821A3E58[v4];
    }
  }
  else
  {
    swift_unknownObjectRelease();
    outlined consume of Locale.LanguageCode?(v20, 0);
    outlined consume of Locale.LanguageCode?(22356, 0xE200000000000000);
    return v4;
  }
  return v6;
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (*(void *)(*(void *)a1 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4), (v4 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 1;
  }
}

uint64_t outlined copy of Locale.Subdivision??(uint64_t result, uint64_t a2)
{
  if (a2 != 1) {
    return outlined copy of Locale.LanguageCode?(result, a2);
  }
  return result;
}

Swift::String_optional __swiftcall ICUPatternGenerator._patternForSkeleton(_:)(Swift::String a1)
{
  unint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  v11[2] = *MEMORY[0x1E4F143B8];
  v10[21] = 0;
  if (udatpg_clone())
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = specialized _copyCollectionToContiguousArray<A>(_:)(countAndFlagsBits, (unint64_t)object);
    swift_bridgeObjectRelease();
    uint64_t v6 = swift_bridgeObjectRetain_n();
    MEMORY[0x1F4188790](v6);
    swift_bridgeObjectRetain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v10, (uint64_t)v5, v11);
    uint64_t v3 = v11[0];
    uint64_t v4 = v11[1];
    swift_release_n();
    udatpg_close();
  }
  else
  {
    udatpg_close();
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v7 = v3;
  unint64_t v8 = (void *)v4;
  result.value._unint64_t object = v8;
  result.value._uint64_t countAndFlagsBits = v7;
  return result;
}

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t *a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v10 = 0;
  if (!a1) {
LABEL_7:
  }
    __break(1u);
  if (*(void *)(a2 + 16) >> 31)
  {
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    goto LABEL_7;
  }
  int BestPatternWithOptions = udatpg_getBestPatternWithOptions();
  if (BestPatternWithOptions <= 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v6 = specialized String.init(_utf16:)(a1, BestPatternWithOptions);
    uint64_t v8 = v7;
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v6;
    a3[1] = v8;
  }
  return result;
}

uint64_t ICUPatternGenerator.defaultHourCycle.getter@<X0>(char *a1@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v6 = 0;
  uint64_t result = MEMORY[0x185309C60](*(void *)(v1 + 16), &v6);
  if (result < 4 && v6 < 1) {
    char v5 = result;
  }
  else {
    char v5 = 2;
  }
  *a1 = v5;
  return result;
}

uint64_t Locale.language.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 352))(ObjectType, v1);
}

uint64_t _LocaleICU.language.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v3 = swift_release();
  if (Language <= 0)
  {
    uint64_t v27 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    v33[Language] = 0;
    uint64_t v3 = MEMORY[0x185301F80](v33);
    uint64_t v27 = v3;
    uint64_t v5 = v4;
  }
  MEMORY[0x1F4188790](v3);
  LODWORD(v31) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  swift_release();
  uint64_t v7 = 0;
  uint64_t v29 = v5;
  uint64_t v8 = 0;
  if (Script > 0)
  {
    v25[Script] = 0;
    uint64_t v7 = MEMORY[0x185301F80](v25);
    uint64_t v8 = v9;
  }
  uint64_t v30 = v7;
  MEMORY[0x1F4188790](v7);
  LODWORD(v31) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if ((int)v31 <= 0 && Country > 0)
  {
    v25[Country] = 0;
    uint64_t v11 = MEMORY[0x185301F80](v25);
    uint64_t v12 = v13;
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = v29;
  if (v29)
  {
    uint64_t v15 = v27;
    Swift::String v16 = String.lowercased()();
    uint64_t countAndFlagsBits = v16._countAndFlagsBits;
    unint64_t object = v16._object;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
  }
  uint64_t v28 = v8;
  if (!v8)
  {
    uint64_t v30 = 0;
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    if (v12) {
      goto LABEL_14;
    }
LABEL_16:
    uint64_t v11 = 0;
    uint64_t result = 0;
    unint64_t v21 = 0;
    goto LABEL_17;
  }
  uint64_t v31 = v30;
  uint64_t v32 = v8;
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v19 = String._capitalized()();
  unint64_t v26 = v19._object;
  uint64_t v27 = v19._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_16;
  }
LABEL_14:
  Swift::String v22 = String.uppercased()();
  unint64_t v21 = v22._object;
  uint64_t result = v22._countAndFlagsBits;
LABEL_17:
  uint64_t v23 = v28;
  *a1 = v15;
  a1[1] = v14;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  a1[4] = v30;
  a1[5] = v23;
  uint64_t v24 = (uint64_t)v26;
  a1[6] = v27;
  a1[7] = v24;
  a1[8] = v11;
  a1[9] = v12;
  a1[10] = result;
  a1[11] = (uint64_t)v21;
  return result;
}

uint64_t protocol witness for _LocaleProtocol.language.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 352))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t AttributedString._AttributeStorage.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  if (*(void *)(a1 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7), (v9 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v8, (uint64_t)&v14);
    swift_bridgeObjectRelease();
    if (*((void *)&v15 + 1))
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v14, (uint64_t)v13);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      swift_dynamicCast();
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v14);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(a4, 0, 1, AssociatedTypeWitness);
    }
  }
  else
  {
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    swift_bridgeObjectRelease();
  }
  outlined destroy of Any?((uint64_t)&v14, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a4, 1, 1, v12);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.Run(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

Swift::Bool __swiftcall IndexSet.contains(_:)(Swift::Int a1)
{
  return objc_msgSend(*(id *)(*(void *)v1 + 16), sel_containsIndex_, a1);
}

uint64_t URLRequest.init(url:cachePolicy:timeoutInterval:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v5 = (void *)*a1;
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F18D50]), sel_initWithURL_cachePolicy_timeoutInterval_, *a1, a2, a4);

  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v6;
  *a3 = result;
  return result;
}

uint64_t Data.description.getter(uint64_t result, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(result), result)) {
        goto LABEL_5;
      }
      __break(1u);
      goto LABEL_7;
    case 2uLL:
      if (!__OFSUB__(*(void *)(result + 24), *(void *)(result + 16))) {
        goto LABEL_5;
      }
LABEL_7:
      __break(1u);
      break;
    default:
LABEL_5:
      v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v2);
      swift_bridgeObjectRelease();
      v3._uint64_t countAndFlagsBits = 0x736574796220;
      v3._unint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v3);
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t static Locale.characterDirection(forLanguage:)(uint64_t a1, uint64_t a2)
{
  return static Locale.characterDirection(forLanguage:)(a1, a2, Locale.Language.characterDirection.getter);
}

uint64_t _NSBundleImagesLoadedCallback(unsigned int a1, const void *a2)
{
  uint64_t result = _CFGetTSD();
  if (result == 1)
  {
    uint64_t v5 = malloc_type_calloc(a1 + 1, 8uLL, 0x6004044C4A2DFuLL);
    memcpy(v5, a2, 8 * a1);
    *((void *)v5 + a1) = 0;
    return _CFSetTSD();
  }
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], a2[2], a2[3], a2[4], a2[5]);
}

{
  void *v4;

  return a4(a1, *v4, v4[1], v4[2], a2[2], a2[3], a2[4], a2[5]);
}

{
  void *v4;

  return a4(a1, *v4, v4[1], v4[2], a2[2], a2[3], a2[4], a2[5]);
}

{
  void *v4;

  return a4(a1, *v4, v4[1], v4[2], a2[2], a2[3], a2[4], a2[5]);
}

uint64_t specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(uint64_t a1, unint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  void (*v26)(void *__return_ptr, uint64_t, uint64_t, unint64_t, char *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void v46[11];

  id v6 = v5;
  unint64_t v40 = a5;
  unint64_t v42 = a3;
  v46[10] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v5;
  unint64_t v41 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v20 + 40))(a1, v19, v20, v16))
  {
    unint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v22 = v21;
    *(void *)unint64_t v21 = MEMORY[0x1E4FBC1C8];
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v23(v18, v42, v12);
    v23(v14, v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v14, 1, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v43 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      unint64_t v42 = v22;
      uint64_t v31 = v41;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v39, v14, a4);
      uint64_t v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v34 = v40;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      unint64_t v36 = v39;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v39, a4);
      unint64_t v44 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v12);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v36, a4);
      Swift::String v22 = v42;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    unint64_t v44 = 0;
    uint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(char *, void))(*(void *)(v38 - 8) + 104))(v22, *MEMORY[0x1E4FBBA80]);
    return swift_willThrow();
  }
  else
  {
    uint64_t v25 = v6[3];
    unint64_t v26 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, unint64_t, void *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type Int64 and conformance Int64();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v38;
    v26(v46, a1, v25, a2, v42, MEMORY[0x1E4FBC1C8], a4, v28, v40, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v46[0];
    }
  }
  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(void *__return_ptr, uint64_t, uint64_t, unint64_t, char *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void v46[11];

  id v6 = v5;
  unint64_t v40 = a5;
  unint64_t v42 = a3;
  v46[10] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v5;
  unint64_t v41 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v20 + 40))(a1, v19, v20, v16))
  {
    unint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v22 = v21;
    *(void *)unint64_t v21 = MEMORY[0x1E4FBC538];
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v23(v18, v42, v12);
    v23(v14, v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v14, 1, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v43 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      unint64_t v42 = v22;
      uint64_t v31 = v41;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v39, v14, a4);
      uint64_t v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v34 = v40;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      unint64_t v36 = v39;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v39, a4);
      unint64_t v44 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v12);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v36, a4);
      Swift::String v22 = v42;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    unint64_t v44 = 0;
    uint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(char *, void))(*(void *)(v38 - 8) + 104))(v22, *MEMORY[0x1E4FBBA80]);
    return swift_willThrow();
  }
  else
  {
    uint64_t v25 = v6[3];
    unint64_t v26 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, unint64_t, void *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v38;
    v26(v46, a1, v25, a2, v42, MEMORY[0x1E4FBC538], a4, v28, v40, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v46[0];
    }
  }
  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(void *__return_ptr, uint64_t, uint64_t, unint64_t, char *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void v46[11];

  id v6 = v5;
  unint64_t v40 = a5;
  unint64_t v42 = a3;
  v46[10] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v5;
  unint64_t v41 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v20 + 40))(a1, v19, v20, v16))
  {
    unint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v22 = v21;
    *(void *)unint64_t v21 = MEMORY[0x1E4FBB550];
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v23(v18, v42, v12);
    v23(v14, v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v14, 1, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v43 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      unint64_t v42 = v22;
      uint64_t v31 = v41;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v39, v14, a4);
      uint64_t v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v34 = v40;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      unint64_t v36 = v39;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v39, a4);
      unint64_t v44 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v12);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v36, a4);
      Swift::String v22 = v42;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    unint64_t v44 = 0;
    uint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(char *, void))(*(void *)(v38 - 8) + 104))(v22, *MEMORY[0x1E4FBBA80]);
    return swift_willThrow();
  }
  else
  {
    uint64_t v25 = v6[3];
    unint64_t v26 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, unint64_t, void *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type Int and conformance Int();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v38;
    v26(v46, a1, v25, a2, v42, MEMORY[0x1E4FBB550], a4, v28, v40, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v46[0];
    }
  }
  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, char *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _DWORD v46[21];

  id v6 = v5;
  unint64_t v40 = a5;
  unint64_t v42 = a3;
  *(void *)&v46[19] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v5;
  unint64_t v41 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v20 + 40))(a1, v19, v20, v16))
  {
    unint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v22 = v21;
    *(void *)unint64_t v21 = MEMORY[0x1E4FBC150];
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v23(v18, v42, v12);
    v23(v14, v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v14, 1, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v43 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      unint64_t v42 = v22;
      uint64_t v31 = v41;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v39, v14, a4);
      uint64_t v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v34 = v40;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      unint64_t v36 = v39;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v39, a4);
      unint64_t v44 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v12);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v36, a4);
      Swift::String v22 = v42;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    unint64_t v44 = 0;
    uint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(char *, void))(*(void *)(v38 - 8) + 104))(v22, *MEMORY[0x1E4FBBA80]);
    return swift_willThrow();
  }
  else
  {
    uint64_t v25 = v6[3];
    unint64_t v26 = *(void (**)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, void *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type Int32 and conformance Int32();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v38;
    v26(v46, a1, v25, a2, v42, MEMORY[0x1E4FBC150], a4, v28, v40, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v46[0];
    }
  }
  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(unsigned char *__return_ptr, uint64_t, uint64_t, unint64_t, char *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned char v46[81];

  id v6 = v5;
  unint64_t v40 = a5;
  unint64_t v42 = a3;
  *(void *)&v46[73] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v5;
  unint64_t v41 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v20 + 40))(a1, v19, v20, v16))
  {
    unint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v22 = v21;
    *(void *)unint64_t v21 = MEMORY[0x1E4FBC098];
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v23(v18, v42, v12);
    v23(v14, v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v14, 1, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v43 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      unint64_t v42 = v22;
      uint64_t v31 = v41;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v39, v14, a4);
      uint64_t v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v34 = v40;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      unint64_t v36 = v39;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v39, a4);
      unint64_t v44 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v12);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v36, a4);
      Swift::String v22 = v42;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    unint64_t v44 = 0;
    uint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(char *, void))(*(void *)(v38 - 8) + 104))(v22, *MEMORY[0x1E4FBBA80]);
    return swift_willThrow();
  }
  else
  {
    uint64_t v25 = v6[3];
    unint64_t v26 = *(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, unint64_t, void *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type Int8 and conformance Int8();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v38;
    v26(v46, a1, v25, a2, v42, MEMORY[0x1E4FBC098], a4, v28, v40, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v46[0];
    }
  }
  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, char *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _DWORD v46[21];

  id v6 = v5;
  unint64_t v40 = a5;
  unint64_t v42 = a3;
  *(void *)&v46[19] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v5;
  unint64_t v41 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v20 + 40))(a1, v19, v20, v16))
  {
    unint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v22 = v21;
    *(void *)unint64_t v21 = MEMORY[0x1E4FBC4C0];
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v23(v18, v42, v12);
    v23(v14, v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v14, 1, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v43 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      unint64_t v42 = v22;
      uint64_t v31 = v41;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v39, v14, a4);
      uint64_t v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v34 = v40;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      unint64_t v36 = v39;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v39, a4);
      unint64_t v44 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v12);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v36, a4);
      Swift::String v22 = v42;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    unint64_t v44 = 0;
    uint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(char *, void))(*(void *)(v38 - 8) + 104))(v22, *MEMORY[0x1E4FBBA80]);
    return swift_willThrow();
  }
  else
  {
    uint64_t v25 = v6[3];
    unint64_t v26 = *(void (**)(_DWORD *__return_ptr, uint64_t, uint64_t, unint64_t, void *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v38;
    v26(v46, a1, v25, a2, v42, MEMORY[0x1E4FBC4C0], a4, v28, v40, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v46[0];
    }
  }
  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_WORD *__return_ptr, uint64_t, uint64_t, unint64_t, char *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _WORD v46[41];

  id v6 = v5;
  unint64_t v40 = a5;
  unint64_t v42 = a3;
  *(void *)&v46[37] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v5;
  unint64_t v41 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v20 + 40))(a1, v19, v20, v16))
  {
    unint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v22 = v21;
    *(void *)unint64_t v21 = MEMORY[0x1E4FBC0F8];
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v23(v18, v42, v12);
    v23(v14, v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v14, 1, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v43 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      unint64_t v42 = v22;
      uint64_t v31 = v41;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v39, v14, a4);
      uint64_t v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v34 = v40;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      unint64_t v36 = v39;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v39, a4);
      unint64_t v44 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v12);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v36, a4);
      Swift::String v22 = v42;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    unint64_t v44 = 0;
    uint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(char *, void))(*(void *)(v38 - 8) + 104))(v22, *MEMORY[0x1E4FBBA80]);
    return swift_willThrow();
  }
  else
  {
    uint64_t v25 = v6[3];
    unint64_t v26 = *(void (**)(_WORD *__return_ptr, uint64_t, uint64_t, unint64_t, void *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type Int16 and conformance Int16();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v38;
    v26(v46, a1, v25, a2, v42, MEMORY[0x1E4FBC0F8], a4, v28, v40, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v46[0];
    }
  }
  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(void *__return_ptr, uint64_t, uint64_t, unint64_t, char *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void v46[11];

  id v6 = v5;
  unint64_t v40 = a5;
  unint64_t v42 = a3;
  v46[10] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v5;
  unint64_t v41 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v20 + 40))(a1, v19, v20, v16))
  {
    unint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v22 = v21;
    *(void *)unint64_t v21 = MEMORY[0x1E4FBB808];
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v23(v18, v42, v12);
    v23(v14, v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v14, 1, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v43 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      unint64_t v42 = v22;
      uint64_t v31 = v41;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v39, v14, a4);
      uint64_t v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v34 = v40;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      unint64_t v36 = v39;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v39, a4);
      unint64_t v44 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v12);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v36, a4);
      Swift::String v22 = v42;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    unint64_t v44 = 0;
    uint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(char *, void))(*(void *)(v38 - 8) + 104))(v22, *MEMORY[0x1E4FBBA80]);
    return swift_willThrow();
  }
  else
  {
    uint64_t v25 = v6[3];
    unint64_t v26 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, unint64_t, void *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type UInt and conformance UInt();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v38;
    v26(v46, a1, v25, a2, v42, MEMORY[0x1E4FBB808], a4, v28, v40, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v46[0];
    }
  }
  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(unsigned char *__return_ptr, uint64_t, uint64_t, unint64_t, char *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned char v46[81];

  id v6 = v5;
  unint64_t v40 = a5;
  unint64_t v42 = a3;
  *(void *)&v46[73] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v5;
  unint64_t v41 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v20 + 40))(a1, v19, v20, v16))
  {
    unint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v22 = v21;
    *(void *)unint64_t v21 = MEMORY[0x1E4FBC358];
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v23(v18, v42, v12);
    v23(v14, v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v14, 1, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v43 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      unint64_t v42 = v22;
      uint64_t v31 = v41;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v39, v14, a4);
      uint64_t v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v34 = v40;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      unint64_t v36 = v39;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v39, a4);
      unint64_t v44 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v12);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v36, a4);
      Swift::String v22 = v42;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    unint64_t v44 = 0;
    uint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(char *, void))(*(void *)(v38 - 8) + 104))(v22, *MEMORY[0x1E4FBBA80]);
    return swift_willThrow();
  }
  else
  {
    uint64_t v25 = v6[3];
    unint64_t v26 = *(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, unint64_t, void *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v38;
    v26(v46, a1, v25, a2, v42, MEMORY[0x1E4FBC358], a4, v28, v40, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v46[0];
    }
  }
  return result;
}

{
  void *v5;
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(_WORD *__return_ptr, uint64_t, uint64_t, unint64_t, char *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _WORD v46[41];

  id v6 = v5;
  unint64_t v40 = a5;
  unint64_t v42 = a3;
  *(void *)&v46[37] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v5;
  unint64_t v41 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v20 + 40))(a1, v19, v20, v16))
  {
    unint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v22 = v21;
    *(void *)unint64_t v21 = MEMORY[0x1E4FBC450];
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v23(v18, v42, v12);
    v23(v14, v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v14, 1, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v43 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      unint64_t v42 = v22;
      uint64_t v31 = v41;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v39, v14, a4);
      uint64_t v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v34 = v40;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      unint64_t v36 = v39;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v39, a4);
      unint64_t v44 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v12);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v36, a4);
      Swift::String v22 = v42;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    unint64_t v44 = 0;
    uint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(char *, void))(*(void *)(v38 - 8) + 104))(v22, *MEMORY[0x1E4FBBA80]);
    return swift_willThrow();
  }
  else
  {
    uint64_t v25 = v6[3];
    unint64_t v26 = *(void (**)(_WORD *__return_ptr, uint64_t, uint64_t, unint64_t, void *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 88);
    uint64_t v27 = lazy protocol witness table accessor for type UInt16 and conformance UInt16();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    uint64_t v29 = v38;
    v26(v46, a1, v25, a2, v42, MEMORY[0x1E4FBC450], a4, v28, v40, v19, v20);
    uint64_t result = swift_unknownObjectRelease();
    if (!v29) {
      return v46[0];
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int64 and conformance Int64()
{
  unint64_t result = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
  }
  return result;
}

uint64_t _PlistDecoder.decode(_:)(uint64_t (*a1)(char *, uint64_t, void, void, void, uint64_t))
{
  uint64_t v3 = v1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v12);
  Swift::String v22 = (char *)&v20 - v13;
  uint64_t v14 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = MEMORY[0x185302620](v14, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v20 = a1;
    uint64_t v23 = v14;
    type metadata accessor for Array();
    swift_getWitnessTable();
    BidirectionalCollection.last.getter();
    uint64_t v15 = v21;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, AssociatedTypeWitness) != 1)
    {
      double v16 = v22;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v22, v7, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v15);
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(v3 + 40);
      swift_retain();
      uint64_t v18 = v20(v16, v17, 0, 0, 0, 255);
      swift_release();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, AssociatedTypeWitness);
      return v18;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v15);
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t (*v20)(char *, uint64_t, void, void, void, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;

  uint64_t v3 = v1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v12);
  Swift::String v22 = (char *)&v20 - v13;
  uint64_t v14 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = MEMORY[0x185302620](v14, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v20 = a1;
    uint64_t v23 = v14;
    type metadata accessor for Array();
    swift_getWitnessTable();
    BidirectionalCollection.last.getter();
    uint64_t v15 = v21;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, AssociatedTypeWitness) != 1)
    {
      double v16 = v22;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v22, v7, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v15);
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(v3 + 40);
      swift_retain();
      uint64_t v18 = v20(v16, v17, 0, 0, 0, 255);
      swift_release();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, AssociatedTypeWitness);
      return v18;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v15);
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t (*v20)(char *, uint64_t, void, void, void, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;

  uint64_t v3 = v1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v12);
  Swift::String v22 = (char *)&v20 - v13;
  uint64_t v14 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = MEMORY[0x185302620](v14, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v20 = a1;
    uint64_t v23 = v14;
    type metadata accessor for Array();
    swift_getWitnessTable();
    BidirectionalCollection.last.getter();
    uint64_t v15 = v21;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, AssociatedTypeWitness) != 1)
    {
      double v16 = v22;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v22, v7, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v15);
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(v3 + 40);
      swift_retain();
      uint64_t v18 = v20(v16, v17, 0, 0, 0, 255);
      swift_release();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, AssociatedTypeWitness);
      return v18;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v15);
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t (*v20)(char *, uint64_t, void, void, void, uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;

  uint64_t v3 = v1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v12);
  Swift::String v22 = (char *)&v20 - v13;
  uint64_t v14 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = MEMORY[0x185302620](v14, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v20 = a1;
    uint64_t v23 = v14;
    type metadata accessor for Array();
    swift_getWitnessTable();
    BidirectionalCollection.last.getter();
    uint64_t v15 = v21;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, AssociatedTypeWitness) != 1)
    {
      double v16 = v22;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v22, v7, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v15);
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(v3 + 40);
      swift_retain();
      uint64_t v18 = v20(v16, v17, 0, 0, 0, 255);
      swift_release();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, AssociatedTypeWitness);
      return v18;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v15);
  __break(1u);
  return result;
}

uint64_t specialized _PlistDecoder.unwrapFixedWidthInteger<A, B>(from:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  unint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14))
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *double v16 = MEMORY[0x1E4FBB550];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(unsigned char *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBA80], v15);
    return swift_willThrow();
  }
  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    unint64_t v26 = lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E4FBB550], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return v29;
    }
  }
  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  unint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14))
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *double v16 = MEMORY[0x1E4FBC538];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(unsigned char *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBA80], v15);
    return swift_willThrow();
  }
  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    unint64_t v26 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E4FBC538], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return v29;
    }
  }
  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  unint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14))
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *double v16 = MEMORY[0x1E4FBC098];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(unsigned char *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBA80], v15);
    return swift_willThrow();
  }
  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    unint64_t v26 = lazy protocol witness table accessor for type Int8 and conformance Int8();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E4FBC098], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return v29;
    }
  }
  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  unint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14))
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *double v16 = MEMORY[0x1E4FBC358];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(unsigned char *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBA80], v15);
    return swift_willThrow();
  }
  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    unint64_t v26 = lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E4FBC358], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return v29;
    }
  }
  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  unint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14))
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *double v16 = MEMORY[0x1E4FBC450];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(unsigned char *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBA80], v15);
    return swift_willThrow();
  }
  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    unint64_t v26 = lazy protocol witness table accessor for type UInt16 and conformance UInt16();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E4FBC450], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return (unsigned __int16)v29;
    }
  }
  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  unint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14))
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *double v16 = MEMORY[0x1E4FBC0F8];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(unsigned char *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBA80], v15);
    return swift_willThrow();
  }
  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    unint64_t v26 = lazy protocol witness table accessor for type Int16 and conformance Int16();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E4FBC0F8], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return (unsigned __int16)v29;
    }
  }
  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  unint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14))
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *double v16 = MEMORY[0x1E4FBC150];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(unsigned char *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBA80], v15);
    return swift_willThrow();
  }
  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    unint64_t v26 = lazy protocol witness table accessor for type Int32 and conformance Int32();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E4FBC150], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return v29;
    }
  }
  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  unint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14))
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *double v16 = MEMORY[0x1E4FBC1C8];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(unsigned char *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBA80], v15);
    return swift_willThrow();
  }
  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    unint64_t v26 = lazy protocol witness table accessor for type Int64 and conformance Int64();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E4FBC1C8], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return v29;
    }
  }
  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  unint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14))
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *double v16 = MEMORY[0x1E4FBB808];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(unsigned char *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBA80], v15);
    return swift_willThrow();
  }
  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    unint64_t v26 = lazy protocol witness table accessor for type UInt and conformance UInt();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E4FBB808], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return v29;
    }
  }
  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *v6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  unint64_t v33 = a6;
  uint64_t v13 = *(void *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(a1, v13, v14))
  {
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    *double v16 = MEMORY[0x1E4FBC4C0];
    char v18 = v33;
    if (v33 == 255)
    {
      _CodingPathNode.path.getter(a2);
    }
    else
    {
      uint64_t v20 = v31;
      uint64_t v19 = v32;
      uint64_t v21 = v30;
      outlined copy of _CodingKey(v30, v31, v32, v33);
      outlined copy of _CodingKey(v30, v31, v32, v33);
      _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v23 = swift_allocObject();
      *(void *)(inited + 32) = v23;
      *(void *)(v23 + 16) = v21;
      *(void *)(v23 + 24) = v20;
      *(void *)(v23 + 32) = v19;
      *(unsigned char *)(v23 + 40) = v18;
      specialized Array.append<A>(contentsOf:)(inited);
      outlined consume of _CodingKey?(v21, v20, v19, v18);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBA80], v15);
    return swift_willThrow();
  }
  else
  {
    uint64_t v24 = v9[3];
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t, uint64_t *, void, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 88);
    unint64_t v26 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    uint64_t v27 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    swift_unknownObjectRetain();
    v25(&v29, a1, v24, a2, &v30, MEMORY[0x1E4FBC4C0], &type metadata for _CodingKey, v26, v27, v13, v14);
    uint64_t result = swift_unknownObjectRelease();
    if (!v8) {
      return v29;
    }
  }
  return result;
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapFixedWidthInteger<A, B>(from:in:for:_:) in conformance _BPlistDecodingFormat@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  return static _BPlistDecodingFormat.unwrapFixedWidthInteger<A, B>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6, a7);
}

uint64_t static _BPlistDecodingFormat.unwrapFixedWidthInteger<A, B>(from:in:for:_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v66 = a6;
  unint64_t v67 = a2;
  uint64_t v68 = a3;
  uint64_t v64 = a7;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v63 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = v10;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v63 - v16;
  uint64_t v70 = a4;
  uint64_t v18 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v63 - v22;
  double v28 = MEMORY[0x1F4188790](v24);
  uint64_t v30 = (char *)&v63 - v29;
  if (v26 >> 60 == 8)
  {
    uint64_t v38 = v27;
    uint64_t v39 = v25;
    uint64_t v40 = *(void *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
    uint64_t v33 = v70;
    if (*(unsigned char *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 0x18))
    {
      unint64_t v72 = *(void *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      dispatch thunk of Numeric.init<A>(exactly:)();
      uint64_t v41 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v23, 1, v33) == 1)
      {
        (*(void (**)(char *, uint64_t))(v38 + 8))(v23, v39);
        unint64_t v72 = 0;
        unint64_t v73 = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v42._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
        v42._unint64_t object = (void *)0x80000001823B1A00;
        String.append(_:)(v42);
        uint64_t v71 = v40;
LABEL_24:
        v49._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v49);
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
      uint64_t v20 = v23;
    }
    else
    {
      unint64_t v72 = *(void *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      dispatch thunk of Numeric.init<A>(exactly:)();
      uint64_t v41 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v20, 1, v33) == 1)
      {
        (*(void (**)(char *, uint64_t))(v38 + 8))(v20, v39);
        unint64_t v72 = 0;
        unint64_t v73 = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v48._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
        v48._unint64_t object = (void *)0x80000001823B1A00;
        String.append(_:)(v48);
        uint64_t v71 = v40;
        goto LABEL_24;
      }
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v64, v20, v33);
  }
  if (v26 >> 60 != 7)
  {
    unint64_t v65 = v26;
    uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
    v43(v17, v68, v11, v28);
    ((void (*)(char *, char *, uint64_t))v43)(v14, v17, v11);
    uint64_t v44 = v63;
    uint64_t v45 = v69;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v14, 1, v69) == 1)
    {
      unint64_t v46 = *(void (**)(char *, uint64_t))(v12 + 8);
      v46(v14, v11);
      _CodingPathNode.path.getter(v67);
      v46(v17, v11);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v9, v14, v45);
      uint64_t v56 = _CodingPathNode.path.getter(v67);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v58 = v66;
      *(void *)(inited + 56) = v45;
      *(void *)(inited + 64) = v58;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v44 + 16))(boxed_opaque_existential_1, v9, v45);
      unint64_t v72 = v56;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v45);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(v70, v65, (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter, v60);
    goto LABEL_29;
  }
  unint64_t v31 = *(void *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
  uint64_t v32 = *(void *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
  if (v32 == 4)
  {
    uint64_t v33 = v70;
    if (!HIDWORD(v31))
    {
      uint64_t v34 = v27;
      uint64_t v35 = v25;
      if ((v31 & 0x7FFFFF) != 0 && (~v31 & 0x7F800000) == 0) {
        double v37 = NAN;
      }
      else {
        double v37 = *(float *)&v31;
      }
LABEL_20:
      unint64_t v72 = *(void *)&v37;
      lazy protocol witness table accessor for type Double and conformance Double();
      dispatch thunk of BinaryInteger.init<A>(exactly:)();
      uint64_t v41 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v30, 1, v33) == 1)
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v30, v35);
        unint64_t v72 = 0;
        unint64_t v73 = 0xE000000000000000;
        _StringGuts.grow(_:)(45);
        v47._uint64_t countAndFlagsBits = 0xD000000000000016;
        v47._unint64_t object = (void *)0x80000001823B2B80;
        String.append(_:)(v47);
        Double.write<A>(to:)();
LABEL_25:
        v50._unint64_t object = (void *)0x80000001823B1A20;
        v50._uint64_t countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v50);
        v51._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v51);
        swift_bridgeObjectRelease();
        v52._uint64_t countAndFlagsBits = 46;
        v52._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v52);
        uint64_t v53 = v72;
        uint64_t v54 = v73;
        type metadata accessor for DecodingError();
        swift_allocError();
        static DecodingError._dataCorrupted<A>(_:for:_:)(v53, v54, v67, v68, v69, v66, v55);
LABEL_29:
        swift_bridgeObjectRelease();
        return swift_willThrow();
      }
      uint64_t v20 = v30;
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v64, v20, v33);
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v33 = v70;
    if (v32 == 8)
    {
      uint64_t v34 = v27;
      uint64_t v35 = v25;
      double v37 = *(double *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      if ((~v31 & 0x7FF0000000000000) == 0 && (v31 & 0xFFFFFFFFFFFFFLL) != 0) {
        double v37 = NAN;
      }
      goto LABEL_20;
    }
  }
  unint64_t v72 = 0;
  unint64_t v73 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  unint64_t v72 = 0xD000000000000023;
  unint64_t v73 = 0x80000001823B2B50;
  uint64_t v71 = v32;
  v62._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance DateComponents(void *a1, uint64_t a2)
{
  return 1;
}

void static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in IndexPath()
{
  return MEMORY[0x1E4FBB568];
}

_UNKNOWN **associated type witness table accessor for PlistDecodingFormat.Map : PlistDecodingMap in _BPlistDecodingFormat()
{
  return &protocol witness table for BPlistMap;
}

uint64_t base witness table accessor for Cancellable in NSObject.KVOSubscription<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomCombineIdentifierConvertible in NSObject.KVOSubscription<A, B, C>()
{
  return swift_getWitnessTable();
}

id Predicate.description.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    uint64_t v6 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    for (unint64_t i = 0; i < v4; ++i)
      *(void *)&v8[8 * i] = type metadata accessor for PredicateExpressions.Variable();
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  uint64_t v10 = *(void *)(v6 - 8);
  uint64_t v33 = &v29;
  MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = &v29;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v29 - v14;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v2, (uint64_t)v34);
  uint64_t v16 = v35;
  uint64_t v30 = __swift_project_boxed_opaque_existential_1(v34, v35);
  unint64_t v31 = &v29;
  double v17 = MEMORY[0x1F4188790](v30);
  uint64_t v19 = (uint64_t **)((char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, v2 + *(int *)(a1 + 36), v6, v17);
  for (uint64_t j = 0; j != v4; ++j)
  {
    if (v4 == 1) {
      int v21 = 0;
    }
    else {
      int v21 = *(_DWORD *)(v6 + 24 + 16 * j + 8);
    }
    uint64_t v22 = (uint64_t *)&v15[v21];
    if (v4 == 1) {
      int v23 = 0;
    }
    else {
      int v23 = *(_DWORD *)(v6 + 24 + 16 * j + 8);
    }
    uint64_t *v22 = *(void *)&v12[v23];
    v19[j] = v22;
  }
  Swift::String v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Predicate", 9uLL, 1);
  uint64_t v25 = *(void **)(a1 + 24);
  uint64_t v26 = MEMORY[0x1E4FBC848] + 8;
  destructiveProjectEnumData for PredicateCodableError(v4, v25);
  id v27 = createDescription<each A, B, C>(variable:expression:typeName:outputType:)(v19, (uint64_t)v30, v24._countAndFlagsBits, v24._object, v26, v4, v25, v26, v16);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  return v27;
}

uint64_t one-time initialization function for _errorDomainUserInfoProviderQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v5 - 8);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v7[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FBCC58], v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  _errorDomainUserInfoProviderQueue = result;
  return result;
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t type metadata completion function for Expression(uint64_t a1)
{
  v12[0] = "(";
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    if (v4 > 0x3F) {
      return TupleTypeMetadata;
    }
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
    if (v5 > 0x3F) {
      return TupleTypeMetadata;
    }
LABEL_9:
    v12[1] = *(void *)(TupleTypeMetadata - 8) + 64;
    swift_initStructMetadata();
    return 0;
  }
  MEMORY[0x1F4188790](a1);
  if (v2)
  {
    unint64_t v7 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v8 = (void *)((char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v9 = v2;
    do
    {
      v7 += 8;
      *v8++ = type metadata accessor for PredicateExpressions.Variable();
      --v9;
    }
    while (v9);
  }
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  if (v10 <= 0x3F) {
    goto LABEL_9;
  }
  return TupleTypeMetadata;
}

uint64_t dispatch thunk of PredicateExpression.evaluate(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t _withPredicateArchivingState<A>(_:_:)(uint64_t *a1, void (*a2)(uint64_t))
{
  v15[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  char v5 = *((unsigned char *)a1 + 16);
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  pthread_key_t v6 = static _ThreadLocal.Key<A>.predicateArchivingState;
  unint64_t v7 = (uint64_t *)pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  if (v7)
  {
    uint64_t v8 = *v7;
    char v9 = *(unsigned char *)(*v7 + 32);
    *(unsigned char *)(*v7 + 32) = v5;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v10 = swift_bridgeObjectRetain();
    long long v14 = *(_OWORD *)(v8 + 16);
    *(void *)(v8 + 16) = v4;
    *(void *)(v8 + 24) = v3;
    a2(v10);
    *(_OWORD *)(v8 + 16) = v14;
    *(unsigned char *)(v8 + 32) = v9;
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for PredicateArchivingState();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v4;
    *(void *)(v12 + 24) = v3;
    *(unsigned char *)(v12 + 32) = v5;
    *(void *)(v12 + 40) = MEMORY[0x1E4FBC868];
    v15[0] = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (pthread_getspecific(v6)) {
      __break(1u);
    }
    uint64_t v13 = pthread_setspecific(v6, v15);
    a2(v13);
    pthread_setspecific(v6, 0);
    return swift_release();
  }
}

uint64_t specialized _withPredicateArchivingState<A>(_:_:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t))
{
  v18[1] = *MEMORY[0x1E4F143B8];
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  pthread_key_t v8 = static _ThreadLocal.Key<A>.predicateArchivingState;
  char v9 = (uint64_t *)pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  char v10 = a3 & 1;
  if (v9)
  {
    uint64_t v11 = *v9;
    char v12 = *(unsigned char *)(*v9 + 32);
    *(unsigned char *)(*v9 + 32) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v13 = swift_retain();
    long long v17 = *(_OWORD *)(v11 + 16);
    *(void *)(v11 + 16) = a1;
    *(void *)(v11 + 24) = a2;
    a4(v13);
    *(_OWORD *)(v11 + 16) = v17;
    *(unsigned char *)(v11 + 32) = v12;
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for PredicateArchivingState();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = a1;
    *(void *)(v15 + 24) = a2;
    *(unsigned char *)(v15 + 32) = v10;
    *(void *)(v15 + 40) = MEMORY[0x1E4FBC868];
    v18[0] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (pthread_getspecific(v8)) {
      __break(1u);
    }
    uint64_t v16 = pthread_setspecific(v8, v18);
    a4(v16);
    pthread_setspecific(v8, 0);
    return swift_release();
  }
}

uint64_t type metadata accessor for PredicateArchivingState()
{
  return self;
}

uint64_t partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:)()
{
  return partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:)();
}

{
  return closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:)();
}

uint64_t closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  uint64_t result = KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v0) {
    return KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return result;
}

uint64_t partial apply for closure #1 in KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)(v1[5], v1[6], v1[7], v1[8], v1[9], v1[2], v1[3], v1[4], a1);
}

uint64_t _ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)(a1);
}

uint64_t closure #1 in KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v38 = a8;
  uint64_t v39 = a5;
  uint64_t v41 = a2;
  uint64_t v42 = a4;
  uint64_t v40 = a3;
  uint64_t v48 = a1;
  unint64_t v12 = a7 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v44 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v43 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = a6;
  if (a6 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](v14);
    unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a6)
    {
      unint64_t v19 = v12;
      uint64_t v20 = (uint64_t *)((char *)&v36 - v18);
      uint64_t v21 = v50;
      do
      {
        v19 += 8;
        *v20++ = type metadata accessor for PredicateExpressions.Variable();
        --v21;
      }
      while (v21);
    }
    a6 = v50;
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  Swift::String v47 = &v36;
  uint64_t v36 = *(void *)(TupleTypeMetadata - 8);
  v23.n128_f64[0] = MEMORY[0x1F4188790](TupleTypeMetadata);
  Swift::String v49 = (char *)&v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = v13;
  unint64_t v46 = a9;
  uint64_t v37 = v25;
  if (a6)
  {
    uint64_t v26 = v22 + 32;
    uint64_t v27 = a6;
    while (1)
    {
      type metadata accessor for PredicateExpressions.Variable();
      __swift_mutable_project_boxed_opaque_existential_1(v48, *(void *)(v48 + 24));
      swift_getWitnessTable();
      uint64_t result = dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
      if (v9) {
        break;
      }
      v26 += 16;
      v12 += 8;
      if (!--v27) {
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_11:
    uint64_t v30 = v43;
    uint64_t v29 = v44;
    uint64_t v31 = v45;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v44 + 16))(v43, v39, v45, v23);
    char v52 = 1;
    uint64_t v32 = v46;
    uint64_t v33 = v40;
    v46[3] = v41;
    v32[4] = v33;
    __swift_allocate_boxed_opaque_existential_1(v32);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    if (v9)
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
      return __swift_deallocate_boxed_opaque_existential_1((uint64_t)v32);
    }
    else
    {
      uint64_t v51 = v38;
      swift_getExtendedExistentialTypeMetadata();
      uint64_t v34 = v37;
      uint64_t v35 = (char *)v32 + *(int *)(swift_getTupleTypeMetadata2() + 48);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
      return (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 16))(v35, v49, v34);
    }
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Predicate<Pack{repeat A}>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Predicate.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t Predicate.init(from:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v17);
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  pthread_key_t v8 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  if (v8)
  {
    char v9 = 0;
    char v10 = (uint64_t *)(*v8 + 16);
    uint64_t v11 = (uint64_t *)(*v8 + 24);
  }
  else
  {
    if (one-time initialization token for standardConfiguration != -1) {
      swift_once();
    }
    char v10 = &static PredicateCodableConfiguration.standardConfiguration;
    uint64_t v11 = &qword_1E8ED4730;
    char v9 = byte_1E8ED4738;
  }
  uint64_t v12 = *v11;
  uint64_t v13 = *v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15[0] = v13;
  v15[1] = v12;
  char v16 = v9;
  Predicate.init(from:configuration:)(v17, (uint64_t)v15, a2, a3, a4);
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t Predicate.init(from:configuration:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v93 = a1;
  unint64_t v8 = a4 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v77 = a5;
  if (a3 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v10 = MetatypeMetadata;
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a3)
    {
      unint64_t v13 = v8;
      uint64_t v14 = (uint64_t *)((char *)&v71 - v12);
      unint64_t v15 = a3;
      do
      {
        v13 += 8;
        *v14++ = swift_getMetatypeMetadata();
        --v15;
      }
      while (v15);
    }
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v10 = MetatypeMetadata;
  }
  MEMORY[0x1F4188790](MetatypeMetadata);
  uint64_t v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
  char v90 = &v71;
  uint64_t v86 = a4;
  uint64_t v85 = v18;
  unint64_t v80 = v8;
  uint64_t v79 = v10;
  if (a3 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable();
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    MEMORY[0x1F4188790](v18);
    unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a3)
    {
      unint64_t v22 = v8;
      __n128 v23 = (uint64_t *)((char *)&v71 - v21);
      unint64_t v24 = a3;
      do
      {
        v22 += 8;
        *v23++ = type metadata accessor for PredicateExpressions.Variable();
        --v24;
      }
      while (v24);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v81 = TupleTypeMetadata;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  char v89 = &v71;
  uint64_t v83 = TupleTypeMetadata2;
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v76 = (uint64_t)&v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v88 = &v71;
  MEMORY[0x1F4188790](v27);
  uint64_t v78 = (uint64_t)&v71 - v28;
  char v87 = &v71;
  MEMORY[0x1F4188790](v29);
  uint64_t v84 = (uint64_t)&v71 - v30;
  uint64_t v31 = type metadata accessor for Predicate();
  char v92 = &v71;
  uint64_t v75 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v33 = (char *)&v71 - v32;
  uint64_t v35 = *(void *)a2;
  uint64_t v34 = *(void *)(a2 + 8);
  LODWORD(v82) = *(unsigned __int8 *)(a2 + 16);
  __swift_project_boxed_opaque_existential_1(v93, v93[3]);
  uint64_t v36 = v91;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v36)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
  }
  uint64_t v37 = v34;
  uint64_t v38 = v35;
  unint64_t v73 = v33;
  uint64_t v72 = v31;
  uint64_t v91 = 0;
  uint64_t v39 = v84;
  uint64_t v40 = v84 + *(int *)(v83 + 48);
  MEMORY[0x1F4188790](v37);
  uint64_t v44 = (char *)&v71 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = v45;
  if (a3)
  {
    uint64_t v46 = 0;
    Swift::String v47 = (int *)(v81 + 32);
    do
    {
      if (a3 == 1) {
        int v48 = 0;
      }
      else {
        int v48 = *v47;
      }
      *(void *)&v44[8 * v46++] = v40 + v48;
      v47 += 4;
    }
    while (a3 != v46);
    MEMORY[0x1F4188790](v41);
    uint64_t v51 = (char *)&v71 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v52 = 0;
    uint64_t v54 = (int *)(v53 + 32);
    uint64_t v56 = v55;
    do
    {
      if (a3 == 1) {
        int v57 = 0;
      }
      else {
        int v57 = *v54;
      }
      uint64_t v58 = &v17[v57];
      *(void *)uint64_t v58 = *(void *)(v49 + 8 * v52);
      *(void *)&v51[8 * v52++] = v58;
      v54 += 4;
    }
    while (a3 != v52);
  }
  else
  {
    uint64_t v51 = &v101;
    uint64_t v56 = v41;
  }
  v96[0] = v38;
  v96[1] = v56;
  char v97 = v42;
  uint64_t v60 = v99;
  uint64_t v59 = v100;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v98, v99);
  uint64_t v61 = v91;
  UnkeyedDecodingContainer.decodePredicateExpression<A>(input:predicateConfiguration:)(v39, (uint64_t)v44, (uint64_t)v51, v96, a3, v60, v86, v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v61)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
  }
  uint64_t v91 = 0;
  uint64_t v63 = v83;
  uint64_t v64 = v78 + *(int *)(v83 + 48);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v39, v78);
  uint64_t v65 = v81;
  uint64_t v86 = *(void *)(v81 - 8);
  char v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16);
  v82(v64, v40, v81);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>);
  if ((swift_dynamicCast() & 1) == 0)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v98, (uint64_t)v94);
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError.dataCorruptedError(in:debugDescription:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1(v84);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(v94, (uint64_t)v95);
  outlined init with take of any PredicateExpression<Self.Output == B1>(v95, (uint64_t)v73);
  uint64_t v66 = *(int *)(v63 + 48);
  uint64_t v67 = v76;
  uint64_t v68 = v76 + v66;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v84, v76);
  v82(v68, v40, v65);
  uint64_t v69 = v72;
  uint64_t v70 = (uint64_t)v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v86 + 32))(&v73[*(int *)(v72 + 36)], v68, v65);
  __swift_destroy_boxed_opaque_existential_1(v67);
  __swift_destroy_boxed_opaque_existential_1(v84);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 32))(v77, v70, v69);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t UnkeyedDecodingContainer.decodePredicateExpression<A>(input:predicateConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v70 = a8;
  uint64_t v71 = a6;
  uint64_t v65 = a3;
  uint64_t v75 = a2;
  uint64_t v68 = a1;
  if (a5 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    unint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    for (unint64_t i = 0; i < a5; ++i)
      *(void *)&v13[8 * i] = swift_getMetatypeMetadata();
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  v89[7] = &v58;
  MEMORY[0x1F4188790](MetatypeMetadata);
  uint64_t v61 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = a7;
  uint64_t v63 = v15;
  if (a5 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](v15);
    unint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    for (unint64_t j = 0; j < a5; ++j)
      *(void *)&v19[8 * j] = type metadata accessor for PredicateExpressions.Variable();
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v64 = TupleTypeMetadata;
  uint64_t v59 = *(void *)(TupleTypeMetadata - 8);
  uint64_t v79 = &v58;
  MEMORY[0x1F4188790](TupleTypeMetadata);
  Swift::String v62 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = &v58;
  MEMORY[0x1F4188790](v22);
  unint64_t v24 = (char *)&v58 - v23;
  uint64_t v77 = &v58;
  MEMORY[0x1F4188790](v25);
  uint64_t v58 = (char *)&v58 - v26;
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v73 = *(void *)(v74 - 8);
  uint64_t v76 = &v58;
  MEMORY[0x1F4188790](v74);
  uint64_t v28 = (char *)&v58 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *a4;
  uint64_t v30 = a4[1];
  char v31 = *((unsigned char *)a4 + 16);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v32 = v60;
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
  if (!v32)
  {
    uint64_t v69 = &v58;
    MEMORY[0x1F4188790](result);
    uint64_t v36 = (char *)&v58 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    for (uint64_t k = 0; k != a5; ++k)
    {
      if (a5 == 1) {
        int v38 = 0;
      }
      else {
        int v38 = *(_DWORD *)(v64 + 24 + 16 * k + 8);
      }
      *(void *)&v36[8 * k] = &v24[v38];
    }
    uint64_t v67 = &v58;
    MEMORY[0x1F4188790](v34);
    char v42 = (char *)&v58 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
    for (uint64_t m = 0; m != a5; ++m)
    {
      if (a5 == 1) {
        int v44 = 0;
      }
      else {
        int v44 = *(_DWORD *)(v40 + 24 + 16 * m + 8);
      }
      uint64_t v45 = &v61[v44];
      *(void *)uint64_t v45 = **(void **)(v65 + 8 * m);
      *(void *)&v42[8 * m] = v45;
    }
    v86[0] = v29;
    v86[1] = v30;
    char v87 = v31 & 1;
    KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)((uint64_t)v88, v39, (uint64_t)v42, MEMORY[0x1E4FBB390], (uint64_t)v86, a5, v66, MEMORY[0x1E4FBB390]);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v88, (uint64_t)v89);
    uint64_t v46 = v59;
    Swift::String v47 = v58;
    uint64_t v48 = v64;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v58, v24, v64);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v89, (uint64_t)v84);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v84, (uint64_t)&v82);
    if (v83)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v82, (uint64_t)v85);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v85, v68);
      uint64_t v49 = v62;
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v62, v47, v48);
      for (uint64_t n = 0; n != a5; ++n)
      {
        if (a5 == 1) {
          int v51 = 0;
        }
        else {
          int v51 = *(_DWORD *)(v48 + 24 + 16 * n + 8);
        }
        **(void **)(v75 + 8 * n) = *(void *)&v49[v51];
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
      return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v28, v74);
    }
    else
    {
      uint64_t v52 = v71;
      v81[3] = v71;
      v81[4] = v70;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v81);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(boxed_opaque_existential_1, v72, v52);
      v80[2] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v80[3] = v54;
      Swift::String v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("This expression has an unsupported output type of ", 0x32uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v55);
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_1(v89, v89[3]);
      swift_getDynamicType();
      static PredicateExpression.outputType.getter();
      default argument 1 of _typeName(_:qualified:)();
      v80[0] = _typeName(_:qualified:)();
      v80[1] = v56;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String((uint64_t)v80);
      Swift::String v57 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" (expected Bool)", 0x10uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v57);
      swift_bridgeObjectRelease();
      String.init(stringInterpolation:)();
      type metadata accessor for DecodingError();
      swift_allocError();
      static DecodingError.dataCorruptedError(in:debugDescription:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
      return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v28, v74);
    }
  }
  return result;
}

uint64_t type metadata completion function for Predicate(uint64_t a1)
{
  v12[0] = "(";
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    if (v4 > 0x3F) {
      return TupleTypeMetadata;
    }
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
    if (v5 > 0x3F) {
      return TupleTypeMetadata;
    }
LABEL_9:
    v12[1] = *(void *)(TupleTypeMetadata - 8) + 64;
    swift_initStructMetadata();
    return 0;
  }
  MEMORY[0x1F4188790](a1);
  if (v2)
  {
    unint64_t v7 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v8 = (void *)((char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v9 = v2;
    do
    {
      v7 += 8;
      *v8++ = type metadata accessor for PredicateExpressions.Variable();
      --v9;
    }
    while (v9);
  }
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  if (v10 <= 0x3F) {
    goto LABEL_9;
  }
  return TupleTypeMetadata;
}

uint64_t partial apply for closure #1 in Sequence.filter(_:)(uint64_t a1)
{
  return closure #1 in Sequence.filter(_:)(a1) & 1;
}

uint64_t Predicate.variable.getter@<X0>(uint64_t a1@<X0>, void **a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    uint64_t v7 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if (v5)
    {
      unint64_t v9 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v10 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v11 = v5;
      do
      {
        v9 += 8;
        *v10++ = type metadata accessor for PredicateExpressions.Variable();
        --v11;
      }
      while (v11);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v7 = TupleTypeMetadata;
  }
  double v12 = MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v2 + *(int *)(a1 + 36), v7, v12);
  if (v5)
  {
    uint64_t v17 = (int *)(v7 + 32);
    uint64_t v18 = v5;
    do
    {
      if (v5 == 1) {
        int v19 = 0;
      }
      else {
        int v19 = *v17;
      }
      uint64_t v20 = *a2++;
      *uint64_t v20 = *(void *)&v14[v19];
      v17 += 4;
      --v18;
    }
    while (v18);
  }
  return result;
}

uint64_t closure #1 in Sequence.filter(_:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  double v4 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v10 - v5;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v10 - v5, a1, AssociatedTypeWitness, v4);
  uint64_t v10 = AssociatedTypeWitness;
  uint64_t v11 = v6;
  uint64_t v7 = type metadata accessor for Predicate();
  char v8 = Predicate.evaluate(_:)((uint64_t *)&v11, v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, AssociatedTypeWitness);
  return v8 & 1;
}

uint64_t Predicate.init(_:)@<X0>(void (*a1)(long long *__return_ptr, char **)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void (*v36)(long long *__return_ptr, char **);
  long long v37[2];

  v35[1] = a2;
  uint64_t v36 = a1;
  unint64_t v7 = a4 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v8 = 8 * a3;
  if (a3 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    uint64_t v10 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if (a3)
    {
      uint64_t v11 = (void *)((char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v12 = a3;
      do
      {
        v7 += 8;
        *v11++ = type metadata accessor for PredicateExpressions.Variable();
        --v12;
      }
      while (v12);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v10 = TupleTypeMetadata;
  }
  uint64_t v13 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35[0] = v35;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v35 - v17;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)v35 - v20;
  if (a3)
  {
    if (one-time initialization token for nextID != -1) {
      swift_once();
    }
    uint64_t v22 = (int *)(v10 + 32);
    uint64_t v23 = a3;
    do
    {
      if (a3 == 1) {
        int v24 = 0;
      }
      else {
        int v24 = *v22;
      }
      *(void *)&v21[v24] = atomic_fetch_add_explicit(&static PredicateExpressions.VariableID.nextID, 1uLL, memory_order_relaxed);
      v22 += 4;
      --v23;
    }
    while (v23);
  }
  uint64_t v25 = a5 + *(int *)(type metadata accessor for Predicate() + 36);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v25, v21, v10);
  double v27 = MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char **)((char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, v25, v10, v27);
  if (a3)
  {
    uint64_t v29 = (int *)(v10 + 32);
    uint64_t v30 = v28;
    uint64_t v31 = a3;
    do
    {
      if (a3 == 1)
      {
        LODWORD(v32) = 0;
        uint64_t v33 = v18;
      }
      else
      {
        uint64_t v32 = *v29;
        uint64_t v33 = &v18[v32];
      }
      *(void *)uint64_t v33 = *(void *)&v15[(int)v32];
      *v30++ = v33;
      v29 += 4;
      --v31;
    }
    while (v31);
  }
  v36(v37, v28);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v37, a5);
}

uint64_t type metadata accessor for Predicate()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Predicate.evaluate(_:)(uint64_t *a1, uint64_t a2)
{
  double v4 = a1;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = 8 * v5;
  uint64_t v48 = v5;
  if (v5 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    uint64_t v8 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if (v5)
    {
      unint64_t v9 = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v10 = (uint64_t *)((char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v11 = v48;
      do
      {
        v9 += 8;
        *v10++ = type metadata accessor for PredicateExpressions.Variable();
        --v11;
      }
      while (v11);
    }
    uint64_t v5 = v48;
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v8 = TupleTypeMetadata;
  }
  uint64_t v12 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  Swift::String v47 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v5 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v16 = TupleTypeMetadata2;
  }
  else
  {
    uint64_t v45 = v8;
    uint64_t v46 = v2;
    uint64_t v43 = &v38;
    MEMORY[0x1F4188790](v13);
    if (v5)
    {
      unint64_t v17 = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v18 = (uint64_t *)((char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v19 = v48;
      do
      {
        v17 += 8;
        type metadata accessor for PredicateExpressions.Variable();
        *v18++ = swift_getTupleTypeMetadata2();
        --v19;
      }
      while (v19);
    }
    uint64_t v5 = v48;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata();
    uint64_t v16 = TupleTypeMetadata2;
    uint64_t v8 = v45;
    uint64_t v2 = v46;
  }
  uint64_t v43 = &v38;
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v2, (uint64_t)v51);
  uint64_t v39 = v53;
  uint64_t v41 = v52;
  uint64_t v40 = __swift_project_boxed_opaque_existential_1(v51, v52);
  char v42 = &v38;
  double v22 = MEMORY[0x1F4188790](v40);
  uint64_t v46 = (void **)((char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, char *, uint64_t, double))(v12 + 16))(v47, (char *)v2 + *(int *)(a2 + 36), v8, v22);
  uint64_t v45 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v23 = (char **)v46;
    int v24 = (uint64_t *)(v45 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v25 = (int *)(v8 + 32);
    uint64_t v26 = (int *)(v16 + 32);
    uint64_t v27 = v5;
    do
    {
      if (v5 == 1) {
        int v32 = 0;
      }
      else {
        int v32 = *v26;
      }
      uint64_t v33 = *v24;
      type metadata accessor for PredicateExpressions.Variable();
      uint64_t v34 = swift_getTupleTypeMetadata2();
      if (v48 == 1) {
        int v28 = 0;
      }
      else {
        int v28 = *v25;
      }
      uint64_t v29 = &v21[v32];
      uint64_t v30 = &v29[*(int *)(v34 + 48)];
      *(void *)uint64_t v29 = *(void *)&v47[v28];
      uint64_t v31 = *v4++;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v30, v31, v33);
      *v23++ = v29;
      v25 += 4;
      v26 += 4;
      ++v24;
      --v27;
      uint64_t v5 = v48;
    }
    while (v27);
  }
  PredicateBindings.init<each A>(_:)(v46, v5, v45, &v50);
  uint64_t v49 = v50;
  char v35 = (char)v40;
  uint64_t v36 = v44;
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(*(void *)(v39 + 8) + 16))(&v54, &v49, v41);
  swift_bridgeObjectRelease();
  if (!v36) {
    char v35 = v54;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  return v35 & 1;
}

uint64_t initializeWithCopy for Predicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  uint64_t v7 = (**(uint64_t (***)(void))(v6 - 8))();
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = *(void *)(a3 + 16);
  if (v9 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](v7);
    if (v9)
    {
      unint64_t v12 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v13 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v14 = v9;
      do
      {
        v12 += 8;
        *v13++ = type metadata accessor for PredicateExpressions.Variable();
        --v14;
      }
      while (v14);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 16))(a1 + v8, a2 + v8);
  return a1;
}

uint64_t type metadata accessor for PredicateExpressions.Variable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.StringLocalizedStandardContains(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  double v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  unint64_t v11 = ((v6 + v9) & ~v9) + *(void *)(v8 + 64);
  uint64_t v12 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v12 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *double v4 = *a2;
    double v4 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v16, ((unint64_t)a2 + v10) & v16, v7);
  }
  return v4;
}

void **PredicateBindings.init<each A>(_:)@<X0>(void **result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (a2)
  {
    uint64_t v34 = a4;
    double v4 = (void *)(a3 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v37 = (_OWORD *)((char *)v44 + 8);
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    v33[1] = a3 & 0xFFFFFFFFFFFFFFFELL;
    char v35 = result;
    uint64_t v36 = a2;
    do
    {
      uint64_t v41 = a2;
      char v42 = result;
      uint64_t v43 = v4;
      uint64_t v6 = *v4;
      uint64_t v7 = *result;
      type metadata accessor for PredicateExpressions.Variable();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      uint64_t v40 = v33;
      uint64_t v9 = TupleTypeMetadata2 - 8;
      uint64_t v10 = *(void *)(*(void *)(TupleTypeMetadata2 - 8) + 64);
      v11.n128_f64[0] = MEMORY[0x1F4188790](TupleTypeMetadata2);
      unint64_t v12 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v13 = (char *)v33 + *(int *)(v9 + 56) - v12;
      uint64_t v14 = *v7;
      *(void *)((char *)v33 - v12) = *v7;
      uint64_t v15 = *(void *)(v6 - 8);
      uint64_t v16 = *(uint64_t (**)(__n128))(v15 + 16);
      uint64_t v39 = v13;
      uint64_t v17 = v16(v11);
      uint64_t v38 = v33;
      double v18 = MEMORY[0x1F4188790](v17);
      uint64_t v19 = *(int *)(v9 + 56);
      uint64_t v20 = (char *)v33 + v19 - v12;
      ((void (*)(char *, char *, uint64_t, double))v16)(v20, (char *)v7 + v19, v6, v18);
      uint64_t v47 = v6;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v46);
      (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 32))(boxed_opaque_existential_1, v20, v6);
      *(void *)&v44[0] = v14;
      outlined init with take of Any(&v46, v37);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v23 = v5[2];
      unint64_t v22 = v5[3];
      if (v23 >= v22 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v5);
      }
      int v24 = v39;
      id v5[2] = v23 + 1;
      uint64_t v25 = &v5[5 * v23];
      long long v26 = v44[0];
      long long v27 = v44[1];
      v25[8] = v45;
      *((_OWORD *)v25 + 2) = v26;
      *((_OWORD *)v25 + 3) = v27;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v6);
      uint64_t result = v42 + 1;
      double v4 = v43 + 1;
      a2 = v41 - 1;
    }
    while (v41 != 1);
    void *v34 = v5;
    int v28 = v35 - 1;
    uint64_t v29 = v36;
    do
    {
      uint64_t v30 = v29 - 1;
      uint64_t v31 = v28[v29];
      type metadata accessor for PredicateExpressions.Variable();
      uint64_t v32 = swift_getTupleTypeMetadata2();
      uint64_t result = (void **)(*(uint64_t (**)(void *, uint64_t))(*(void *)(v32 - 8) + 8))(v31, v32);
      uint64_t v29 = v30;
    }
    while (v30);
  }
  else
  {
    *a4 = MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Equal<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PredicateExpressions.Equal.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t PredicateExpressions.Equal.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v6 = a2[4];
  uint64_t v7 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v19 - v13;
  uint64_t v15 = *a1;
  uint64_t v21 = v15;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, double))(v6 + 16))(&v21, v7, v6, v12);
  if (!v3)
  {
    uint64_t v16 = v20;
    uint64_t v21 = v15;
    (*(void (**)(uint64_t *, void))(a2[5] + 16))(&v21, a2[3]);
    char v2 = dispatch thunk of static Equatable.== infix(_:_:)();
    double v18 = *(void (**)(char *, uint64_t))(v16 + 8);
    v18(v10, AssociatedTypeWitness);
    v18(v14, AssociatedTypeWitness);
  }
  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Value<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return PredicateExpressions.Value.evaluate(_:)(a1, a2);
}

uint64_t PredicateExpressions.Value.evaluate(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.KeyPath<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.KeyPath.evaluate(_:)(a1, a2, a3);
}

uint64_t PredicateExpressions.KeyPath.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = a3;
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  double v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v13 - v10;
  uint64_t v14 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, double))(v5 + 16))(&v14, v6, v5, v9);
  if (!v3)
  {
    swift_getAtKeyPath();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Variable<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.Variable.evaluate(_:)(a1, a2, a3);
}

uint64_t PredicateExpressions.Variable.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v15 - v9;
  uint64_t v11 = *a1;
  v15[0] = *v3;
  v15[1] = v11;
  PredicateBindings.subscript.getter(v15, v6, (uint64_t)v10);
  uint64_t v12 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v6) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v10, v6);
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
  swift_allocError();
  *(void *)uint64_t v13 = 0;
  *(void *)(v13 + 8) = 0;
  *(unsigned char *)(v13 + 16) = 3;
  return swift_willThrow();
}

uint64_t PredicateBindings.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 16);
  if (v7)
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v6 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of (id: PredicateExpressions.VariableID, value: Any)(v9, (uint64_t)&v12);
      if ((void)v12 == v8) {
        break;
      }
      outlined destroy of Any?((uint64_t)&v12, &demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any));
      v9 += 40;
      if (!--v7) {
        goto LABEL_7;
      }
    }
    long long v15 = v12;
    long long v16 = v13;
    uint64_t v17 = v14;
    swift_bridgeObjectRelease();
    if (v17)
    {
      outlined init with take of Any((long long *)((char *)&v15 + 8), &v12);
      goto LABEL_9;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    swift_bridgeObjectRelease();
  }
  outlined destroy of Any?((uint64_t)&v15, &demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any)?);
  long long v12 = 0u;
  long long v13 = 0u;
LABEL_9:
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  int v10 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, v10 ^ 1u, 1, a2);
}

uint64_t outlined init with copy of (id: PredicateExpressions.VariableID, value: Any)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.NotEqual<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PredicateExpressions.NotEqual.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t PredicateExpressions.NotEqual.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v5 = a2[4];
  uint64_t v6 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  long long v13 = (char *)&v20 - v12;
  uint64_t v14 = *a1;
  uint64_t v22 = v14;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, double))(v5 + 16))(&v22, v6, v5, v11);
  if (!v2)
  {
    uint64_t v16 = v21;
    uint64_t v22 = v14;
    (*(void (**)(uint64_t *, void))(a2[5] + 16))(&v22, a2[3]);
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v19 = *(void (**)(char *, uint64_t))(v16 + 8);
    v19(v9, AssociatedTypeWitness);
    v19(v13, AssociatedTypeWitness);
    char v15 = v18 ^ 1;
  }
  return v15 & 1;
}

NSComparisonResult __swiftcall Date.compare(_:)(Foundation::Date a1)
{
  if (*v2 < *v1) {
    return -1;
  }
  else {
    return (unint64_t)(*v1 < *v2);
  }
}

uint64_t IndexSet.formUnion(_:)(void *a1)
{
  return IndexSet.formUnion(_:)(a1, (void (*)(uint64_t *__return_ptr, void *))IndexSet.union(_:));
}

uint64_t storeEnumTagSinglePayload for URLComponents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 152) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 154) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 154) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int32(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int32(a1, a2, a3, a4, (SEL *)&selRef_intValue, (SEL *)&selRef_initWithInt_);
}

unint64_t *specialized JSONDecoderImpl.unwrapData<A>(from:for:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v10 = v9;
  double v11 = v8;
  unint64_t v13 = a7;
  uint64_t v14 = a6;
  unint64_t v15 = a4;
  LOBYTE(v8) = a3;
  uint64_t v16 = a2;
  uint64_t v17 = a1;
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  BOOL v18 = (a3 & 0xE0) == 0xA0 && (a2 | a1) == 0;
  if (v18 && a3 == 160)
  {
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    int v28 = v27;
    *long long v27 = &type metadata for Data;
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(v15);
    }
    else
    {
      outlined copy of _CodingKey(a5, v14, v13, a8);
      uint64_t v29 = _CodingPathNode.path.getter(v15);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v31 = swift_allocObject();
      *(void *)(inited + 32) = v31;
      *(void *)(v31 + 16) = a5;
      *(void *)(v31 + 24) = v14;
      *(void *)(v31 + 32) = v13;
      *(unsigned char *)(v31 + 40) = a8;
      v101[0] = v29;
      specialized Array.append<A>(contentsOf:)(inited);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v101[0] = 0;
    v101[1] = 0xE000000000000000;
    p_src = v101;
    _StringGuts.grow(_:)(55);
    v38._unint64_t object = (void *)0x80000001823B3360;
    v38._uint64_t countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v38);
    v39._uint64_t countAndFlagsBits = 1635017028;
    v39._unint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v39);
    v40._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v40._unint64_t object = (void *)0x80000001823B3380;
    String.append(_:)(v40);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    uint64_t v41 = (unsigned int *)MEMORY[0x1E4FBBA80];
    goto LABEL_23;
  }
  unint64_t v19 = *((void *)v11 + 8);
  if (v19)
  {
    if (v19 == 1)
    {
      p_src = (unint64_t *)v11;
      specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(a1, a2, a3, a4, a5, a6, a7, a8);
      if (v10) {
        return p_src;
      }
      uint64_t v96 = a5;
      id v23 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
      p_src = (unint64_t *)String._bridgeToObjectiveCImpl()();
      id v24 = objc_msgSend(v23, sel_initWithBase64EncodedString_options_, p_src, 0);
      swift_unknownObjectRelease();
      if (v24)
      {
        p_src = (unint64_t *)specialized Data.init(referencing:)(v24);
        swift_bridgeObjectRelease();

        return p_src;
      }
      swift_bridgeObjectRelease();
      uint64_t v26 = type metadata accessor for DecodingError();
      swift_allocError();
      int v28 = v85;
      if (a8 == -1)
      {
        _CodingPathNode.path.getter(v15);
      }
      else
      {
        outlined copy of _CodingKey(v96, a6, v13, a8);
        uint64_t v86 = _CodingPathNode.path.getter(v15);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v87 = swift_initStackObject();
        *(_OWORD *)(v87 + 16) = xmmword_1821037E0;
        *(void *)(v87 + 56) = &type metadata for _CodingKey;
        *(void *)(v87 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
        uint64_t v88 = swift_allocObject();
        *(void *)(v87 + 32) = v88;
        *(void *)(v88 + 16) = v96;
        *(void *)(v88 + 24) = a6;
        *(void *)(v88 + 32) = v13;
        *(unsigned char *)(v88 + 40) = a8;
        v101[0] = v86;
        p_src = v101;
        specialized Array.append<A>(contentsOf:)(v87);
      }
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      uint64_t v41 = (unsigned int *)MEMORY[0x1E4FBBA78];
LABEL_23:
      (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *v41, v26);
      swift_willThrow();
      return p_src;
    }
    uint64_t v95 = v10;
    uint64_t v97 = a5;
    uint64_t v93 = a7;
    if (a8 == -1)
    {
      swift_retain();
      uint64_t v36 = v97;
      goto LABEL_56;
    }
    uint64_t v94 = a6;
    unint64_t v13 = swift_allocObject();
    *(void *)(v13 + 40) = &type metadata for _CodingKey;
    *(void *)(v13 + 48) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v35 = swift_allocObject();
    *(void *)(v13 + 16) = v35;
    uint64_t v36 = v97;
    *(void *)(v35 + 16) = v97;
    *(void *)(v35 + 24) = v94;
    *(void *)(v35 + 32) = v93;
    *(unsigned char *)(v35 + 40) = a8;
    *(void *)(v13 + 56) = v15;
    if (v15 >> 62)
    {
      if (v15 >> 62 != 1)
      {
        uint64_t v74 = 1;
LABEL_55:
        *(void *)(v13 + 64) = v74;
        unint64_t v15 = v13;
        uint64_t v14 = v94;
LABEL_56:
        uint64_t v97 = *((void *)v11 + 20);
        *((void *)v11 + 20) = v15;
        unint64_t v13 = *((void *)v11 + 2);
        outlined copy of _CodingKey?(v36, v14, v93, a8);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v19);
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *((void *)v11 + 2) = v13;
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_57;
        }
        goto LABEL_98;
      }
      uint64_t v37 = (uint64_t *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_54:
      uint64_t v73 = *v37;
      swift_retain();
      uint64_t v36 = v97;
      uint64_t v74 = v73 + 1;
      if (__OFADD__(v73, 1))
      {
        __break(1u);
LABEL_70:
        long long v100 = xmmword_1821115B0;
LABEL_71:
        __swift_project_boxed_opaque_existential_1(v101, (uint64_t)v102);
        if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) == 0)
        {
          while (1)
          {
            unint64_t v19 = v103;
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v101, (uint64_t)v102);
            char v83 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
            if (v10) {
              break;
            }
            LOBYTE(__src) = v83;
            Data._Representation.append(contentsOf:)(&__src, (unsigned char *)&__src + 1);
            __swift_project_boxed_opaque_existential_1(v101, (uint64_t)v102);
            if (dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter()) {
              goto LABEL_74;
            }
          }
LABEL_80:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
          swift_release();
          outlined consume of Data._Representation(v100, *((unint64_t *)&v100 + 1));
          goto LABEL_87;
        }
LABEL_74:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
        swift_release();
        p_src = (unint64_t *)v100;
        *((void *)v11 + 20) = v97;
        swift_retain();
        swift_release();
        unint64_t v19 = *((void *)v11 + 2);
        if (*(void *)(v19 + 16))
        {
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v84 = *(void *)(v19 + 16);
            if (!v84)
            {
LABEL_111:
              __break(1u);
LABEL_112:
              __break(1u);
            }
LABEL_77:
            *(void *)(v19 + 16) = v84 - 1;
            *((void *)v11 + 2) = v19;
            swift_release();
            swift_release();
            return p_src;
          }
LABEL_110:
          unint64_t v19 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v19);
          uint64_t v84 = *(void *)(v19 + 16);
          if (!v84) {
            goto LABEL_111;
          }
          goto LABEL_77;
        }
LABEL_109:
        __break(1u);
        goto LABEL_110;
      }
      goto LABEL_55;
    }
LABEL_53:
    uint64_t v37 = (uint64_t *)(v15 + 64);
    goto LABEL_54;
  }
  uint64_t v95 = v10;
  uint64_t v97 = a5;
  if (a8 == -1)
  {
    uint64_t v42 = a7;
    uint64_t v43 = a4 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    uint64_t v33 = v97;
    goto LABEL_29;
  }
  uint64_t v94 = a6;
  unint64_t v19 = swift_allocObject();
  *(void *)(v19 + 40) = &type metadata for _CodingKey;
  *(void *)(v19 + 48) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v32 = swift_allocObject();
  *(void *)(v19 + 16) = v32;
  uint64_t v33 = v97;
  *(void *)(v32 + 16) = v97;
  *(void *)(v32 + 24) = v94;
  *(void *)(v32 + 32) = v13;
  *(unsigned char *)(v32 + 40) = a8;
  *(void *)(v19 + 56) = v15;
  if (!(v15 >> 62))
  {
    uint64_t v34 = (uint64_t *)(v15 + 64);
LABEL_27:
    uint64_t v44 = *v34;
    swift_retain();
    uint64_t v33 = v97;
    uint64_t v45 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
      goto LABEL_53;
    }
    goto LABEL_28;
  }
  if (v15 >> 62 == 1)
  {
    uint64_t v34 = (uint64_t *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_27;
  }
  uint64_t v45 = 1;
LABEL_28:
  uint64_t v42 = v13;
  *(void *)(v19 + 64) = v45;
  uint64_t v43 = v19 & 0x3FFFFFFFFFFFFFFFLL;
  unint64_t v15 = v19;
  uint64_t v14 = v94;
LABEL_29:
  uint64_t v97 = *((void *)v11 + 20);
  *((void *)v11 + 20) = v15;
  unint64_t v19 = *((void *)v11 + 2);
  outlined copy of _CodingKey?(v33, v14, v42, a8);
  swift_retain();
  char v46 = swift_isUniquelyReferenced_nonNull_native();
  *((void *)v11 + 2) = v19;
  uint64_t v47 = v43;
  if ((v46 & 1) == 0) {
    goto LABEL_96;
  }
  while (1)
  {
    uint64_t v10 = v95;
    unint64_t v13 = *(void *)(v19 + 16);
    unint64_t v48 = *(void *)(v19 + 24);
    if (v13 >= v48 >> 1) {
      unint64_t v19 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v48 > 1), v13 + 1, 1, (void *)v19);
    }
    *(void *)(v19 + 16) = v13 + 1;
    uint64_t v49 = v19 + 32 + 24 * v13;
    *(void *)uint64_t v49 = v17;
    *(void *)(v49 + 8) = v16;
    *(unsigned char *)(v49 + 16) = (_BYTE)v8;
    *((void *)v11 + 2) = v19;
    uint64_t v50 = *(void *)(v19 + 16);
    if (!v50)
    {
      __break(1u);
LABEL_98:
      unint64_t v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1, (void *)v13);
      *((void *)v11 + 2) = v13;
LABEL_57:
      unint64_t v77 = *(void *)(v13 + 16);
      unint64_t v76 = *(void *)(v13 + 24);
      if (v77 >= v76 >> 1) {
        unint64_t v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v76 > 1), v77 + 1, 1, (void *)v13);
      }
      *(void *)(v13 + 16) = v77 + 1;
      unint64_t v78 = v13 + 24 * v77;
      *(void *)(v78 + 32) = v17;
      *(void *)(v78 + 40) = v16;
      *(unsigned char *)(v78 + 48) = (_BYTE)v8;
      *((void *)v11 + 2) = v13;
      uint64_t v102 = (void *)type metadata accessor for JSONDecoderImpl();
      unint64_t v103 = lazy protocol witness table accessor for type JSONDecoderImpl and conformance JSONDecoderImpl(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (void (*)(uint64_t))type metadata accessor for JSONDecoderImpl);
      v101[0] = v11;
      swift_retain();
      uint64_t v79 = ((uint64_t (*)(void *))v19)(v101);
      if (v95)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
        *((void *)v11 + 20) = v97;
        p_src = (unint64_t *)(v97 & 0x3FFFFFFFFFFFFFFFLL);
        swift_retain();
        swift_release();
        unint64_t v80 = (void *)*((void *)v11 + 2);
        if (!v80[2]) {
          goto LABEL_102;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_103;
        }
        uint64_t v81 = v80[2];
        if (!v81) {
          goto LABEL_104;
        }
        goto LABEL_63;
      }
      p_src = (unint64_t *)v79;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
      *((void *)v11 + 20) = v97;
      swift_retain();
      swift_release();
      unint64_t v13 = *((void *)v11 + 2);
      if (*(void *)(v13 + 16))
      {
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v82 = *(void *)(v13 + 16);
          if (v82)
          {
LABEL_67:
            *(void *)(v13 + 16) = v82 - 1;
            *((void *)v11 + 2) = v13;
            swift_release();
            outlined consume of JSONEncoder.KeyEncodingStrategy(v19);
            swift_release();
            return p_src;
          }
          goto LABEL_108;
        }
LABEL_107:
        unint64_t v13 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v13);
        uint64_t v82 = *(void *)(v13 + 16);
        if (v82) {
          goto LABEL_67;
        }
LABEL_108:
        __break(1u);
        goto LABEL_109;
      }
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    uint64_t v51 = v19 + 32 + 24 * v50;
    unint64_t v13 = *(void *)(v51 - 24);
    unint64_t v19 = *(void *)(v51 - 16);
    unsigned int v52 = *(unsigned __int8 *)(v51 - 8);
    if (v52 >> 5 != 4) {
      break;
    }
    uint64_t v16 = v47;
    uint64_t v61 = *((void *)v11 + 20);
    uint64_t v8 = (long long *)*((void *)v11 + 4);
    uint64_t v102 = &unk_1ECA369A0;
    unint64_t v103 = lazy protocol witness table accessor for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer();
    uint64_t v62 = swift_allocObject();
    v101[0] = v62;
    *(void *)(v62 + 16) = v11;
    *(void *)(v62 + 24) = v13;
    *(void *)(v62 + 40) = 0;
    *(void *)(v62 + 48) = 0;
    *(void *)(v62 + 32) = v8;
    *(unsigned char *)(v62 + 56) = -2;
    *(void *)(v62 + 64) = v19;
    *(unsigned char *)(v62 + 72) = 0;
    *(void *)(v62 + 80) = 0;
    *(void *)(v62 + 88) = v61;
    unsigned __int8 v63 = __swift_project_boxed_opaque_existential_1(v101, (uint64_t)&unk_1ECA369A0);
    swift_retain();
    swift_retain_n();
    swift_retain();
    LOBYTE(v8) = v63;
    uint64_t v64 = dispatch thunk of UnkeyedDecodingContainer.count.getter();
    if (v65) {
      goto LABEL_70;
    }
    uint64_t v17 = v64;
    *(void *)&long long v100 = specialized Data._Representation.init(count:)(v64);
    *((void *)&v100 + 1) = v66;
    if (v17 < 0) {
      goto LABEL_112;
    }
    uint64_t v47 = v16;
    if (!v17) {
      goto LABEL_71;
    }
    uint64_t v67 = 0;
    while (v17 != v67)
    {
      unint64_t v19 = (unint64_t)v102;
      unint64_t v13 = v103;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v101, (uint64_t)v102);
      char v68 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      if (v95) {
        goto LABEL_80;
      }
      uint64_t v8 = &v100;
      Data._Representation.subscript.setter(v68, v67++);
      unint64_t v19 = v67;
      if (v17 == v67) {
        goto LABEL_71;
      }
    }
    __break(1u);
LABEL_96:
    unint64_t v19 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1, (void *)v19);
    *((void *)v11 + 2) = v19;
  }
  BOOL v53 = v52 >> 5 == 5 && (v19 | v13) == 0;
  if (v53 && v52 == 160)
  {
    uint64_t v69 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v71 = v70;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t *v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    unint64_t v72 = *((void *)v11 + 20);
    unint64_t v19 = v72 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_retain();
    unint64_t v13 = _CodingPathNode.path.getter(v72);
    swift_release();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v69 - 8) + 104))(v71, *MEMORY[0x1E4FBBA80], v69);
    goto LABEL_86;
  }
  uint64_t v54 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v56 = v55;
  *Swift::String v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  unint64_t v57 = *((void *)v11 + 20);
  swift_retain();
  swift_retain();
  unint64_t v19 = _CodingPathNode.path.getter(v57);
  swift_release();
  unint64_t __src = 0;
  unint64_t v99 = 0xE000000000000000;
  p_src = &__src;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  unint64_t __src = 0xD000000000000028;
  unint64_t v99 = 0x80000001823B32D0;
  uint64_t v58 = *((void *)v11 + 2);
  uint64_t v59 = *(void *)(v58 + 16);
  if (!v59)
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  unint64_t v13 = 0xE800000000000000;
  uint64_t v60 = 0x676E697274732061;
  switch(*(unsigned __int8 *)(v58 + 24 * v59 + 24) >> 5)
  {
    case 1:
      unint64_t v13 = 0xE600000000000000;
      uint64_t v60 = 0x7265626D756ELL;
      break;
    case 2:
      unint64_t v13 = 0xE400000000000000;
      uint64_t v60 = 1819242338;
      break;
    case 3:
      unint64_t v13 = 0xEC0000007972616ELL;
      uint64_t v60 = 0x6F69746369642061;
      break;
    case 4:
      uint64_t v60 = 0x7961727261206E61;
      break;
    case 5:
      unint64_t v13 = 0xE400000000000000;
      uint64_t v60 = 1819047278;
      break;
    default:
      break;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  v89._uint64_t countAndFlagsBits = v60;
  v89._unint64_t object = (void *)v13;
  String.append(_:)(v89);
  swift_bridgeObjectRelease();
  v90._uint64_t countAndFlagsBits = 0x64616574736E6920;
  v90._unint64_t object = (void *)0xE90000000000002ELL;
  String.append(_:)(v90);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v54 - 8) + 104))(v56, *MEMORY[0x1E4FBBA70], v54);
LABEL_86:
  swift_willThrow();
  swift_release();
LABEL_87:
  *((void *)v11 + 20) = v97;
  p_src = (unint64_t *)(v97 & 0x3FFFFFFFFFFFFFFFLL);
  swift_retain();
  swift_release();
  unint64_t v80 = (void *)*((void *)v11 + 2);
  if (!v80[2])
  {
    __break(1u);
    goto LABEL_100;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_100:
    unint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew()(v80);
    uint64_t v91 = v80[2];
    if (!v91) {
      goto LABEL_101;
    }
LABEL_90:
    v80[2] = v91 - 1;
    *((void *)v11 + 2) = v80;
    swift_release();
    goto LABEL_91;
  }
  uint64_t v91 = v80[2];
  if (v91) {
    goto LABEL_90;
  }
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  unint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew()(v80);
  uint64_t v81 = v80[2];
  if (!v81)
  {
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
LABEL_63:
  v80[2] = v81 - 1;
  *((void *)v11 + 2) = v80;
  swift_release();
  outlined consume of JSONEncoder.KeyEncodingStrategy(v19);
LABEL_91:
  swift_release();
  return p_src;
}

uint64_t *JSONDecoderImpl.unwrapData<A>(from:for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v164 = a7;
  uint64_t v169 = a5;
  uint64_t v171 = a4;
  *((void *)&v172 + 1) = a2;
  *(void *)&long long v172 = a1;
  uint64_t v180 = *MEMORY[0x1E4F143B8];
  uint64_t v166 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v160 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v162 = (char *)&v160 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v160 - v13;
  MEMORY[0x1F4188790](v15);
  os_unfair_lock_t v163 = (char *)&v160 - v16;
  uint64_t v170 = (uint64_t *)v17;
  uint64_t v167 = type metadata accessor for Optional();
  uint64_t v168 = *(void *)(v167 - 8);
  MEMORY[0x1F4188790](v167);
  unint64_t v19 = (char *)&v160 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v160 - v21;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v160 - v24;
  MEMORY[0x1F4188790](v26);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v160 - v28;
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (uint64_t *)((char *)&v160 - v31);
  MEMORY[0x1F4188790](v33);
  uint64_t v35 = (char *)&v160 - v34;
  v38.n128_f64[0] = MEMORY[0x1F4188790](v36);
  uint64_t v39 = a3;
  uint64_t v41 = (char *)&v160 - v40;
  if ((v39 & 0xE0) == 0xA0 && v172 == 0 && v39 == 160)
  {
    unint64_t v173 = (void *)type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v43 = v42;
    void *v42 = &type metadata for Data;
    uint64_t v44 = v168;
    uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v168 + 16);
    uint64_t v46 = v167;
    v45(v41, v169, v167);
    v45(v35, (uint64_t)v41, v46);
    uint64_t v47 = v166;
    uint64_t v32 = v170;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v166 + 48))(v35, 1, v170) == 1)
    {
      unint64_t v48 = *(void (**)(char *, uint64_t))(v44 + 8);
      v48(v35, v46);
      _CodingPathNode.path.getter(v171);
      v48(v41, v46);
    }
    else
    {
      uint64_t v71 = *(void (**)(char *, char *, uint64_t *))(v47 + 32);
      *((void *)&v172 + 1) = v43;
      unint64_t v72 = v163;
      v71(v163, v35, v32);
      uint64_t v73 = v47;
      uint64_t v74 = _CodingPathNode.path.getter(v171);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v76 = v164;
      *(void *)(inited + 56) = v32;
      *(void *)(inited + 64) = v76;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t *))(v73 + 16))(boxed_opaque_existential_1, v72, v32);
      v177[0] = v74;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v41, v46);
      unint64_t v78 = v72;
      uint64_t v43 = (void *)*((void *)&v172 + 1);
      (*(void (**)(char *, uint64_t *))(v73 + 8))(v78, v32);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v177[0] = 0;
    v177[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v79._unint64_t object = (void *)0x80000001823B3360;
    v79._uint64_t countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v79);
    v80._uint64_t countAndFlagsBits = 1635017028;
    v80._unint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v80);
    v81._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v81._unint64_t object = (void *)0x80000001823B3380;
    String.append(_:)(v81);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(v173 - 1) + 104))(v43, *MEMORY[0x1E4FBBA80]);
    goto LABEL_17;
  }
  uint64_t v49 = v173[8];
  if (v49)
  {
    uint64_t v50 = v169;
    if (v49 == 1)
    {
      uint64_t v51 = v37;
      uint64_t v52 = (uint64_t)v170;
      uint64_t v53 = v165;
      JSONDecoderImpl.unwrapString<A>(from:for:_:)(v172, *((uint64_t *)&v172 + 1), v39, v171, v169, (uint64_t)v170, v164);
      if (v53) {
        return v32;
      }
      id v54 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBase64EncodedString_options_, String._bridgeToObjectiveCImpl()(), 0);
      swift_unknownObjectRelease();
      if (v54)
      {
        uint64_t v32 = (uint64_t *)specialized Data.init(referencing:)(v54);
        swift_bridgeObjectRelease();

        return v32;
      }
      swift_bridgeObjectRelease();
      uint64_t v138 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v173 = v139;
      uint64_t v140 = v168;
      uint64_t v141 = *(void (**)(uint64_t, uint64_t, uint64_t))(v168 + 16);
      uint64_t v142 = v50;
      uint64_t v143 = v167;
      v141((uint64_t)v51, v142, v167);
      v141((uint64_t)v25, (uint64_t)v51, v143);
      uint64_t v144 = v166;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v166 + 48))(v25, 1, v52) == 1)
      {
        unint64_t v145 = *(void (**)(char *, uint64_t))(v140 + 8);
        v145(v25, v143);
        uint64_t v32 = (uint64_t *)_CodingPathNode.path.getter(v171);
        v145(v51, v143);
      }
      else
      {
        uint64_t v151 = v162;
        (*(void (**)(char *, char *, uint64_t))(v144 + 32))(v162, v25, v52);
        uint64_t v152 = _CodingPathNode.path.getter(v171);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t v153 = swift_initStackObject();
        *((void *)&v172 + 1) = v138;
        uint64_t v154 = v153;
        *(_OWORD *)(v153 + 16) = xmmword_1821037E0;
        uint64_t v155 = v164;
        *(void *)(v153 + 56) = v52;
        *(void *)(v153 + 64) = v155;
        uint64_t v156 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v153 + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v144 + 16))(v156, v151, v52);
        v177[0] = v152;
        uint64_t v157 = v154;
        uint64_t v138 = *((void *)&v172 + 1);
        specialized Array.append<A>(contentsOf:)(v157);
        uint64_t v32 = (uint64_t *)v177[0];
        (*(void (**)(char *, uint64_t))(v140 + 8))(v51, v143);
        (*(void (**)(char *, uint64_t))(v144 + 8))(v162, v52);
      }
      unint64_t v158 = v173;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void))(*(void *)(v138 - 8) + 104))(v158, *MEMORY[0x1E4FBBA78]);
LABEL_17:
      swift_willThrow();
      return v32;
    }
    unint64_t v161 = v173[8];
    LODWORD(v163) = v39;
    uint64_t v66 = v173;
    uint64_t v162 = (char *)v173[9];
    uint64_t v67 = v168;
    char v68 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v168 + 16);
    uint64_t v65 = v167;
    v68(v22, v169, v167, v38);
    ((void (*)(char *, char *, uint64_t))v68)(v19, v22, v65);
    uint64_t v69 = v166;
    uint64_t v60 = (uint64_t)v170;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v166 + 48))(v19, 1, v170) == 1)
    {
      uint64_t v70 = *(void (**)(char *, uint64_t))(v67 + 8);
      swift_retain();
      v70(v22, v65);
      v70(v19, v65);
      uint64_t v32 = (uint64_t *)v171;
      swift_retain();
      unint64_t v61 = v161;
      goto LABEL_53;
    }
    uint64_t v88 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
    v88(v9, v19, v60);
    uint64_t v32 = (uint64_t *)swift_allocObject();
    uint64_t v89 = v164;
    v32[5] = v60;
    v32[6] = v89;
    Swift::String v90 = __swift_allocate_boxed_opaque_existential_1(v32 + 2);
    v88((char *)v90, v9, v60);
    uint64_t v91 = *(void (**)(char *, uint64_t))(v67 + 8);
    swift_retain();
    v91(v22, v65);
    unint64_t v92 = v171;
    v32[7] = v171;
    if (v92 >> 62)
    {
      unint64_t v61 = v161;
      if (v92 >> 62 != 1)
      {
        uint64_t v135 = 1;
LABEL_52:
        v32[8] = v135;
LABEL_53:
        unint64_t v98 = v66[20];
        v66[20] = v32;
        unint64_t v95 = v66[2];
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v66[2] = v95;
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_54;
        }
        goto LABEL_94;
      }
      uint64_t v93 = (uint64_t *)((v92 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_51:
      uint64_t v125 = *v93;
      swift_retain();
      uint64_t v135 = v125 + 1;
      if (__OFADD__(v125, 1))
      {
        __break(1u);
LABEL_66:
        long long v176 = xmmword_1821115B0;
LABEL_67:
        unint64_t v61 = v60;
        __swift_project_boxed_opaque_existential_1(v177, (uint64_t)v178);
        if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) == 0)
        {
          while (1)
          {
            unint64_t v108 = v178;
            unint64_t v110 = v179;
            __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v177, (uint64_t)v178);
            char v136 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
            if (v65) {
              break;
            }
            LOBYTE(__src) = v136;
            Data._Representation.append(contentsOf:)(&__src, (unsigned char *)&__src + 1);
            __swift_project_boxed_opaque_existential_1(v177, (uint64_t)v178);
            if (dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter()) {
              goto LABEL_70;
            }
          }
LABEL_88:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v177);
          swift_release();
          outlined consume of Data._Representation(v176, *((unint64_t *)&v176 + 1));
          goto LABEL_82;
        }
LABEL_70:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v177);
        swift_release();
        uint64_t v32 = (uint64_t *)v176;
        v66[20] = v60;
        swift_retain();
        swift_release();
        unint64_t v110 = v66[2];
        if (*(void *)(v110 + 16))
        {
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v137 = *(void *)(v110 + 16);
            if (!v137)
            {
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
            }
LABEL_73:
            *(void *)(v110 + 16) = v137 - 1;
            v66[2] = v110;
            swift_release();
            swift_release();
            return v32;
          }
LABEL_106:
          unint64_t v110 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v110);
          uint64_t v137 = *(void *)(v110 + 16);
          if (!v137) {
            goto LABEL_107;
          }
          goto LABEL_73;
        }
LABEL_105:
        __break(1u);
        goto LABEL_106;
      }
      goto LABEL_52;
    }
LABEL_50:
    uint64_t v93 = (uint64_t *)(v92 + 64);
    unint64_t v61 = v161;
    goto LABEL_51;
  }
  char v55 = v39;
  uint64_t v56 = v168;
  unint64_t v57 = *(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v168 + 16);
  uint64_t v58 = v167;
  v57(v32, v169, v167, v38);
  ((void (*)(char *, uint64_t *, uint64_t))v57)(v29, v32, v58);
  uint64_t v59 = v166;
  uint64_t v60 = (uint64_t)v170;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v166 + 48))(v29, 1, v170) == 1)
  {
    uint64_t v62 = *(void (**)(uint64_t *, uint64_t))(v56 + 8);
    unint64_t v61 = v56 + 8;
    v62(v32, v58);
    v62((uint64_t *)v29, v58);
    uint64_t v63 = v171;
    unint64_t v64 = v171 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    uint64_t v65 = v165;
    uint64_t v66 = v173;
    goto LABEL_29;
  }
  uint64_t v82 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
  v82(v14, v29, v60);
  uint64_t v63 = swift_allocObject();
  uint64_t v83 = v164;
  *(void *)(v63 + 40) = v60;
  *(void *)(v63 + 48) = v83;
  uint64_t v84 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v63 + 16));
  v82((char *)v84, v14, v60);
  uint64_t v85 = *(void (**)(uint64_t *, uint64_t))(v56 + 8);
  unint64_t v61 = v56 + 8;
  v85(v32, v58);
  unint64_t v86 = v171;
  *(void *)(v63 + 56) = v171;
  uint64_t v66 = v173;
  if (!(v86 >> 62))
  {
    uint64_t v87 = (uint64_t *)(v86 + 64);
    uint64_t v65 = v165;
LABEL_27:
    uint64_t v94 = *v87;
    swift_retain();
    uint64_t v124 = v94 + 1;
    if (__OFADD__(v94, 1))
    {
      __break(1u);
      goto LABEL_50;
    }
    goto LABEL_28;
  }
  uint64_t v65 = v165;
  if (v86 >> 62 == 1)
  {
    uint64_t v87 = (uint64_t *)((v86 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_27;
  }
  uint64_t v124 = 1;
LABEL_28:
  *(void *)(v63 + 64) = v124;
  unint64_t v64 = v63 & 0x3FFFFFFFFFFFFFFFLL;
LABEL_29:
  uint64_t v60 = v66[20];
  v66[20] = v63;
  unint64_t v95 = v66[2];
  swift_retain();
  char v96 = swift_isUniquelyReferenced_nonNull_native();
  v66[2] = v95;
  if ((v96 & 1) == 0) {
    goto LABEL_92;
  }
  while (1)
  {
    unint64_t v98 = *(void *)(v95 + 16);
    unint64_t v97 = *(void *)(v95 + 24);
    if (v98 >= v97 >> 1) {
      unint64_t v95 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v97 > 1), v98 + 1, 1, (void *)v95);
    }
    *(void *)(v95 + 16) = v98 + 1;
    uint64_t v99 = v95 + 32 + 24 * v98;
    uint64_t v100 = *((void *)&v172 + 1);
    *(void *)uint64_t v99 = v172;
    *(void *)(v99 + 8) = v100;
    *(unsigned char *)(v99 + 16) = v55;
    v66[2] = v95;
    uint64_t v101 = *(void *)(v95 + 16);
    if (!v101)
    {
      __break(1u);
LABEL_94:
      unint64_t v95 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v95 + 16) + 1, 1, (void *)v95);
      v66[2] = v95;
LABEL_54:
      unint64_t v110 = *(void *)(v95 + 16);
      unint64_t v127 = *(void *)(v95 + 24);
      char v128 = (char)v163;
      if (v110 >= v127 >> 1)
      {
        uint64_t v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v127 > 1), v110 + 1, 1, (void *)v95);
        char v128 = (char)v163;
        unint64_t v95 = (unint64_t)v159;
      }
      *(void *)(v95 + 16) = v110 + 1;
      uint64_t v129 = (void *)(v95 + 24 * v110);
      uint64_t v130 = *((void *)&v172 + 1);
      v129[4] = v172;
      v129[5] = v130;
      *((unsigned char *)v129 + 48) = v128;
      v66[2] = v95;
      os_unfair_lock_t v178 = (uint64_t *)type metadata accessor for JSONDecoderImpl();
      uint64_t v179 = lazy protocol witness table accessor for type JSONDecoderImpl and conformance JSONDecoderImpl(&lazy protocol witness table cache variable for type JSONDecoderImpl and conformance JSONDecoderImpl, (void (*)(uint64_t))type metadata accessor for JSONDecoderImpl);
      v177[0] = v66;
      swift_retain();
      uint64_t v131 = v165;
      uint64_t v132 = ((uint64_t (*)(void *))v61)(v177);
      if (v131)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v177);
        v66[20] = v98;
        uint64_t v32 = (uint64_t *)(v98 & 0x3FFFFFFFFFFFFFFFLL);
        swift_retain();
        swift_release();
        unint64_t v108 = (uint64_t *)v66[2];
        if (!v108[2]) {
          goto LABEL_98;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_99;
        }
        uint64_t v133 = v108[2];
        if (!v133) {
          goto LABEL_100;
        }
        goto LABEL_60;
      }
      uint64_t v32 = (uint64_t *)v132;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v177);
      v66[20] = v98;
      swift_retain();
      swift_release();
      unint64_t v110 = v66[2];
      if (*(void *)(v110 + 16))
      {
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v134 = *(void *)(v110 + 16);
          if (v134)
          {
LABEL_64:
            *(void *)(v110 + 16) = v134 - 1;
            v66[2] = v110;
            swift_release();
            outlined consume of JSONEncoder.KeyEncodingStrategy(v61);
            swift_release();
            return v32;
          }
          goto LABEL_104;
        }
LABEL_103:
        unint64_t v110 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v110);
        uint64_t v134 = *(void *)(v110 + 16);
        if (v134) {
          goto LABEL_64;
        }
LABEL_104:
        __break(1u);
        goto LABEL_105;
      }
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
    uint64_t v102 = v95 + 32 + 24 * v101;
    unint64_t v61 = *(void *)(v102 - 24);
    uint64_t v103 = *(void *)(v102 - 16);
    unsigned int v104 = *(unsigned __int8 *)(v102 - 8);
    if (v104 >> 5 != 4) {
      break;
    }
    uint64_t v116 = v173[20];
    uint64_t v117 = v173[4];
    os_unfair_lock_t v178 = (uint64_t *)&unk_1ECA369A0;
    unint64_t v118 = lazy protocol witness table accessor for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer();
    char v55 = v118;
    uint64_t v179 = v118;
    uint64_t v119 = swift_allocObject();
    v177[0] = v119;
    *(void *)(v119 + 16) = v173;
    *(void *)(v119 + 24) = v61;
    *(void *)(v119 + 40) = 0;
    *(void *)(v119 + 48) = 0;
    *(void *)(v119 + 32) = v117;
    *(unsigned char *)(v119 + 56) = -2;
    *(void *)(v119 + 64) = v103;
    *(unsigned char *)(v119 + 72) = 0;
    *(void *)(v119 + 80) = 0;
    *(void *)(v119 + 88) = v116;
    __swift_project_boxed_opaque_existential_1(v177, (uint64_t)&unk_1ECA369A0);
    uint64_t v66 = v173;
    swift_retain();
    swift_retain_n();
    swift_retain();
    uint64_t v120 = dispatch thunk of UnkeyedDecodingContainer.count.getter();
    if (v121) {
      goto LABEL_66;
    }
    unint64_t v95 = v120;
    *(void *)&long long v176 = specialized Data._Representation.init(count:)(v120);
    *((void *)&v176 + 1) = v122;
    if ((v95 & 0x8000000000000000) != 0) {
      goto LABEL_108;
    }
    if (!v95) {
      goto LABEL_67;
    }
    unint64_t v108 = 0;
    while ((uint64_t *)v95 != v108)
    {
      unint64_t v110 = (unint64_t)v178;
      unint64_t v61 = v179;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v177, (uint64_t)v178);
      char v123 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      if (v65) {
        goto LABEL_88;
      }
      Data._Representation.subscript.setter(v123, (uint64_t)v108);
      unint64_t v108 = (uint64_t *)((char *)v108 + 1);
      char v55 = (char)v108;
      if ((uint64_t *)v95 == v108) {
        goto LABEL_67;
      }
    }
    __break(1u);
LABEL_92:
    unint64_t v95 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v95 + 16) + 1, 1, (void *)v95);
    v66[2] = v95;
  }
  if (v104 >> 5 == 5 && !(v103 | v61) && v104 == 160)
  {
    uint64_t v105 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v107 = v106;
    unint64_t v108 = (uint64_t *)((char *)v106
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                              + 48));
    *uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    unint64_t v109 = v66[20];
    unint64_t v110 = v109 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_retain();
    unint64_t v61 = _CodingPathNode.path.getter(v109);
    swift_release();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v105 - 8) + 104))(v107, *MEMORY[0x1E4FBBA80], v105);
    goto LABEL_81;
  }
  *((void *)&v172 + 1) = v64;
  uint64_t v32 = (uint64_t *)type metadata accessor for DecodingError();
  swift_allocError();
  unint64_t v108 = v111;
  *uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  unint64_t v112 = v66[20];
  swift_retain();
  swift_retain();
  unint64_t v110 = _CodingPathNode.path.getter(v112);
  swift_release();
  unint64_t __src = 0;
  unint64_t v175 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  unint64_t __src = 0xD000000000000028;
  unint64_t v175 = 0x80000001823B32D0;
  uint64_t v113 = v66[2];
  uint64_t v114 = *(void *)(v113 + 16);
  if (!v114)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  unint64_t v61 = 0xE800000000000000;
  uint64_t v115 = 0x676E697274732061;
  switch(*(unsigned __int8 *)(v113 + 24 * v114 + 24) >> 5)
  {
    case 1:
      unint64_t v61 = 0xE600000000000000;
      uint64_t v115 = 0x7265626D756ELL;
      break;
    case 2:
      unint64_t v61 = 0xE400000000000000;
      uint64_t v115 = 1819242338;
      break;
    case 3:
      unint64_t v61 = 0xEC0000007972616ELL;
      uint64_t v115 = 0x6F69746369642061;
      break;
    case 4:
      uint64_t v115 = 0x7961727261206E61;
      break;
    case 5:
      unint64_t v61 = 0xE400000000000000;
      uint64_t v115 = 1819047278;
      break;
    default:
      break;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  v146._uint64_t countAndFlagsBits = v115;
  v146._unint64_t object = (void *)v61;
  String.append(_:)(v146);
  swift_bridgeObjectRelease();
  v147._uint64_t countAndFlagsBits = 0x64616574736E6920;
  v147._unint64_t object = (void *)0xE90000000000002ELL;
  String.append(_:)(v147);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, void, uint64_t *))(*(v32 - 1) + 104))(v108, *MEMORY[0x1E4FBBA70], v32);
  uint64_t v66 = v173;
LABEL_81:
  swift_willThrow();
  swift_release();
LABEL_82:
  v66[20] = v60;
  uint64_t v32 = (uint64_t *)(v60 & 0x3FFFFFFFFFFFFFFFLL);
  swift_retain();
  swift_release();
  char v148 = (void *)v66[2];
  if (!v148[2])
  {
    __break(1u);
    goto LABEL_96;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_96:
    char v148 = specialized _ArrayBuffer._consumeAndCreateNew()(v148);
    uint64_t v149 = v148[2];
    if (!v149) {
      goto LABEL_97;
    }
LABEL_85:
    v148[2] = v149 - 1;
    v66[2] = v148;
    swift_release();
    goto LABEL_86;
  }
  uint64_t v149 = v148[2];
  if (v149) {
    goto LABEL_85;
  }
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  unint64_t v108 = specialized _ArrayBuffer._consumeAndCreateNew()(v108);
  uint64_t v133 = v108[2];
  if (!v133)
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
LABEL_60:
  v108[2] = v133 - 1;
  v66[2] = v108;
  swift_release();
  outlined consume of JSONEncoder.KeyEncodingStrategy(v61);
LABEL_86:
  swift_release();
  return v32;
}

void sub_1819830E4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t PropertyListEncoder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t IndexSet.RangeView.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *((void *)v1 + 2);
  long long v3 = *v1;
  *(_OWORD *)a1 = *v1;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v3;
  return swift_retain();
}

double static NumberFormatStyleConfiguration.Precision.fractionLength(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a2 = xmmword_182106C90;
  *(_OWORD *)(a2 + 16) = xmmword_182106C90;
  *(void *)(a2 + 32) = a1;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = a1;
  *(unsigned char *)(a2 + 56) = 0x80;
  return result;
}

void static Date.FormatStyle.TimeStyle.shortened.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static Date.FormatStyle.TimeStyle.standard.getter(void *a1@<X8>)
{
  *a1 = 2;
}

__n128 protocol witness for Sequence.makeIterator() in conformance AttributedString.UnicodeScalarView@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  __n128 result = *(__n128 *)(v1 + 32);
  long long v6 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(void *)(a1 + 80) = v2;
  *(void *)(a1 + 88) = v3;
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = result.n128_u64[0];
  return result;
}

unsigned char *storeEnumTagSinglePayload for Measurement<>.FormatStyle.UnitWidth(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

void NSCopyMemoryPages(const void *source, void *dest, NSUInteger bytes)
{
  if (vm_copy(*MEMORY[0x1E4F14960], (vm_address_t)source, bytes, (vm_address_t)dest))
  {
    memmove(dest, source, bytes);
  }
}

uint64_t type metadata completion function for PredicateExpressions.KeyPath()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t @objc static NSData._writeData(toPath:data:options:reportProgress:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, char a6)
{
  uint64_t v9 = (const char *)static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v11 = v10;
  id v12 = a4;
  specialized static NSData._writeData(toPath:data:options:reportProgress:)(v9, v11, v12, a5, a6);
  swift_bridgeObjectRelease();

  return 1;
}

void specialized static NSData._writeData(toPath:data:options:reportProgress:)(const char *a1, unint64_t a2, void *a3, void *a4, char a5)
{
  uint64_t v7 = v5;
  LOBYTE(v8) = a5;
  unint64_t v221 = a2;
  uint64_t v226 = *MEMORY[0x1E4F143B8];
  uint64_t v218 = (void *)MEMORY[0x185306FE0]();
  id v12 = a3;
  uint64_t v13 = (uint64_t)objc_msgSend(v12, sel_bytes);
  id v14 = v12;
  uint64_t v15 = (uint64_t)objc_msgSend(v14, sel_length);
  if (((unint64_t)objc_msgSend(v14, sel_length) & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_244;
  }
  uint64_t v220 = (uint64_t)a1;
  uint64_t v6 = (uint64_t)objc_msgSend(v14, sel_length);

  if (v15 < 0 || v6 < v15)
  {
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
LABEL_246:
    Swift::Int v16 = String.UTF8View._foreignCount()();
    goto LABEL_12;
  }
  if (v13) {
    a1 = (const char *)(v13 + v15);
  }
  else {
    a1 = 0;
  }
  if (a4)
  {
    uint64_t v6 = v220;
    int64_t v17 = v221;
    if ((v221 & 0x1000000000000000) == 0)
    {
      if ((v221 & 0x2000000000000000) != 0) {
        uint64_t v33 = HIBYTE(v221) & 0xF;
      }
      else {
        uint64_t v33 = v220 & 0xFFFFFFFFFFFFLL;
      }
      goto LABEL_31;
    }
LABEL_248:
    uint64_t v33 = String.UTF8View._foreignCount()();
LABEL_31:
    uint64_t v34 = 3 * v33;
    if ((unsigned __int128)(v33 * (__int128)3) >> 64 == (3 * v33) >> 63)
    {
      if (v34 >= -1)
      {
        uint64_t v219 = (void *)v13;
        uint64_t v35 = v34 + 1;
        uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
        if (v34 < 1024
          || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          MEMORY[0x1F4188790](isStackAllocationSafe);
          __n128 v38 = (char *)&v214 - v37;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v38, v35, 1, v6, v17);
          char v40 = v39;
          swift_bridgeObjectRelease();
          if (v40)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
            id v49 = objc_allocWithZone((Class)NSError);
            uint64_t v50 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v51 = objc_msgSend(v49, sel_initWithDomain_code_userInfo_, v50, 514, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v52 = objc_msgSend(v51, sel_domain);
            id v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
            uint64_t v55 = v54;

            if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
              && v55 == v56)
            {
              swift_bridgeObjectRelease_n();
            }
            else
            {
              char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v73 & 1) == 0) {
                goto LABEL_261;
              }
            }
            swift_willThrow();
          }
          else
          {
            closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v38, (void *)v6, v17, 0, 0, a4, v8 & 1, v219, (unint64_t)a1, MEMORY[0x1E4FBC868]);
            if (!v7) {
              goto LABEL_242;
            }
          }
          swift_willThrow();
          goto LABEL_242;
        }
        uint64_t v69 = (const char *)swift_slowAlloc();
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v69, v35, 1, v6, v17);
        char v71 = v70;
        swift_bridgeObjectRelease();
        if (v71)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v84 = objc_allocWithZone((Class)NSError);
          uint64_t v85 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v86 = objc_msgSend(v84, sel_initWithDomain_code_userInfo_, v85, 514, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v87 = objc_msgSend(v86, sel_domain);
          id v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
          uint64_t v90 = v89;

          if (v88 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v90 == v91)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v94 & 1) == 0) {
              goto LABEL_265;
            }
          }
          swift_willThrow();
        }
        else
        {
          closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v69, (void *)v6, v17, 0, 0, a4, v8 & 1, v219, (unint64_t)a1, MEMORY[0x1E4FBC868]);
        }
        uint64_t v93 = (void *)v69;
        goto LABEL_241;
      }
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
      goto LABEL_256;
    }
    __break(1u);
LABEL_250:
    __break(1u);
LABEL_251:
    __break(1u);
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
    goto LABEL_254;
  }
  if ((v221 & 0x1000000000000000) != 0) {
    goto LABEL_246;
  }
  if ((v221 & 0x2000000000000000) != 0) {
    Swift::Int v16 = HIBYTE(v221) & 0xF;
  }
  else {
    Swift::Int v16 = v220 & 0xFFFFFFFFFFFFLL;
  }
LABEL_12:
  int64_t v17 = 3 * v16;
  if ((unsigned __int128)(v16 * (__int128)3) >> 64 != (3 * v16) >> 63)
  {
    __break(1u);
    goto LABEL_248;
  }
  if (v17 < -1) {
    goto LABEL_253;
  }
  uint64_t v18 = v17 + 1;
  uint64_t v19 = swift_bridgeObjectRetain_n();
  if (v17 >= 1024)
  {
    uint64_t v19 = swift_stdlib_isStackAllocationSafe();
    if ((v19 & 1) == 0)
    {
      uint64_t v216 = a1;
      uint64_t v217 = (void *)v7;
      unint64_t v57 = (char *)swift_slowAlloc();
      unint64_t v58 = v221;
      swift_bridgeObjectRetain();
      a1 = (const char *)v220;
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v57, v18, 1, v220, v58);
      char v60 = v59;
      swift_bridgeObjectRelease();
      if (v60)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v76 = objc_allocWithZone((Class)NSError);
        uint64_t v77 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v78 = objc_msgSend(v76, sel_initWithDomain_code_userInfo_, v77, 514, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v79 = objc_msgSend(v78, sel_domain);
        id v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
        uint64_t v82 = v81;

        if (v80 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v82 == v83)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v92 & 1) == 0) {
            goto LABEL_264;
          }
        }
        swift_willThrow();
        uint64_t v93 = v57;
      }
      else
      {
        if ((a4 & 2) != 0) {
          int v61 = 3585;
        }
        else {
          int v61 = 1537;
        }
        uint64_t v215 = (id *)v57;
        uint64_t v62 = _NSOpenFileDescriptor_Protected(v57, v61, (int)a4, 438);
        LODWORD(v219) = v62;
        if ((v62 & 0x80000000) != 0)
        {
          int v95 = MEMORY[0x185301870](v62);
          LODWORD(a1) = v95;
          uint64_t v96 = 4;
          switch(v95)
          {
            case 1:
            case 13:
              uint64_t v96 = 513;
              goto LABEL_223;
            case 2:
              goto LABEL_223;
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 14:
            case 15:
            case 16:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 29:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
              goto LABEL_217;
            case 17:
              uint64_t v96 = 516;
              goto LABEL_223;
            case 28:
            case 69:
              uint64_t v96 = 640;
              goto LABEL_223;
            case 30:
              uint64_t v96 = 642;
              goto LABEL_223;
            case 63:
              uint64_t v96 = 514;
              goto LABEL_223;
            default:
              uint64_t v65 = (const char *)v215;
              if (v95 == 102)
              {
                id v192 = 0;
                uint64_t v96 = 512;
                uint64_t v193 = v220;
              }
              else
              {
LABEL_217:
                uint64_t v96 = 512;
LABEL_223:
                if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
                  goto LABEL_279;
                }
                static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                uint64_t v195 = (int)POSIXErrorCode.rawValue.getter();
                id v196 = objc_allocWithZone((Class)NSError);
                uint64_t v197 = String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                id v192 = objc_msgSend(v196, sel_initWithDomain_code_userInfo_, v197, v195, _NativeDictionary.bridged()());
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                id v198 = objc_msgSend(v192, sel_domain);
                id v199 = static String._unconditionallyBridgeFromObjectiveC(_:)(v198);
                uint64_t v201 = v200;

                if (v199 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                  && v201 == v202)
                {
                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  char v203 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v203 & 1) == 0) {
                    goto LABEL_268;
                  }
                }
                uint64_t v193 = v220;
                uint64_t v65 = (const char *)v215;
              }
              swift_bridgeObjectRetain();
              specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v96, v193, v58, v192, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&value, 0, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
                (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
                (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
                (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
              swift_willThrow();
              goto LABEL_240;
          }
        }
        if (v8)
        {
          uint64_t v63 = self;
          id v64 = objc_msgSend(v63, sel_currentProgress);

          uint64_t v65 = (const char *)v215;
          uint64_t v66 = v217;
          if (v64)
          {
            if (v13) {
              uint64_t v67 = v15;
            }
            else {
              uint64_t v67 = 0;
            }
            id v68 = objc_msgSend(v63, sel_progressWithTotalUnitCount_, v67, v214);
          }
          else
          {
            id v68 = 0;
          }
          a1 = (const char *)v220;
        }
        else
        {
          id v68 = 0;
          uint64_t v65 = (const char *)v215;
          uint64_t v66 = v217;
        }
        *(void *)&long long value = a1;
        *((void *)&value + 1) = v58;
        uint64_t v224 = 0;
        char v225 = 0;
        id v135 = write(buffer:toFileDescriptor:path:parentProgress:)(v13, (uint64_t)v216, (int)v219, (uint64_t)&value, v68);
        uint64_t v217 = v66;
        if (!v66)
        {
          id v214 = v68;
          uint64_t v149 = 0;
          uint64_t v150 = MEMORY[0x1E4FBC868];
          uint64_t v151 = 1 << *(unsigned char *)(MEMORY[0x1E4FBC868] + 32);
          uint64_t v152 = *(void *)(MEMORY[0x1E4FBC868] + 64);
          uint64_t v153 = -1;
          if (v151 < 64) {
            uint64_t v153 = ~(-1 << v151);
          }
          unint64_t v154 = v153 & v152;
          uint64_t v220 = (unint64_t)(v151 + 63) >> 6;
          if ((v153 & v152) == 0) {
            goto LABEL_156;
          }
LABEL_153:
          unint64_t v155 = __clz(__rbit64(v154));
          v154 &= v154 - 1;
          for (unint64_t i = v155 | (v149 << 6); ; unint64_t i = __clz(__rbit64(v157)) + (v149 << 6))
          {
            uint64_t v159 = (uint64_t *)(*(void *)(v150 + 56) + 16 * i);
            uint64_t v161 = *v159;
            unint64_t v160 = v159[1];
            switch(v160 >> 62)
            {
              case 1uLL:
                if (v161 >> 32 < (int)v161) {
                  goto LABEL_257;
                }
                uint64_t v168 = *(void *)((v160 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
                if (!v168) {
                  goto LABEL_278;
                }
                uint64_t v169 = *(void *)((v160 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
                if (__OFSUB__((int)v161, v169)) {
                  goto LABEL_259;
                }
                a1 = (const char *)(v168 + (int)v161 - v169);
                if (*(void *)((v160 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= (v161 >> 32) - (int)v161) {
                  size_t v170 = (v161 >> 32) - (int)v161;
                }
                else {
                  size_t v170 = *(void *)((v160 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
                }
                uint64_t v171 = (const char *)(String.utf8CString.getter() + 32);
                outlined copy of Data._Representation(v161, v160);
                swift_bridgeObjectRetain();
                outlined copy of Data._Representation(v161, v160);
                fsetxattr((int)v219, v171, a1, v170, 0, 0);
                swift_release();
                outlined consume of Data._Representation(v161, v160);
                break;
              case 2uLL:
                int64_t v120 = *(void *)(v161 + 16);
                uint64_t v121 = *(void *)(v161 + 24);
                uint64_t v163 = *(void *)((v160 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
                if (!v163) {
                  goto LABEL_275;
                }
                uint64_t v164 = *(void *)((v160 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
                BOOL v114 = __OFSUB__(v120, v164);
                uint64_t v165 = v120 - v164;
                if (v114) {
                  goto LABEL_258;
                }
                BOOL v114 = __OFSUB__(v121, v120);
                int64_t v166 = v121 - v120;
                if (v114) {
                  goto LABEL_277;
                }
                uint64_t v216 = (const char *)(v163 + v165);
                if (*(void *)((v160 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v166) {
                  size_t v167 = v166;
                }
                else {
                  size_t v167 = *(void *)((v160 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
                }
                a1 = (const char *)(String.utf8CString.getter() + 32);
                swift_bridgeObjectRetain();
                outlined copy of Data._Representation(v161, v160);
                swift_retain();
                swift_retain();
                fsetxattr((int)v219, a1, v216, v167, 0, 0);
                swift_release();
                swift_release();
                swift_release();
                break;
              case 3uLL:
                *(void *)((char *)&value + 6) = 0;
                *(void *)&long long value = 0;
                a1 = (const char *)String.utf8CString.getter();
                swift_bridgeObjectRetain();
                fsetxattr((int)v219, a1 + 32, &value, 0, 0, 0);
                goto LABEL_155;
              default:
                *(void *)&long long value = *v159;
                WORD4(value) = v160;
                BYTE10(value) = BYTE2(v160);
                BYTE11(value) = BYTE3(v160);
                BYTE12(value) = BYTE4(v160);
                LODWORD(a1) = BYTE6(v160);
                BYTE13(value) = BYTE5(v160);
                uint64_t v162 = (const char *)(String.utf8CString.getter() + 32);
                swift_bridgeObjectRetain();
                fsetxattr((int)v219, v162, &value, BYTE6(v160), 0, 0);
LABEL_155:
                swift_release();
                outlined consume of Data._Representation(v161, v160);
                swift_bridgeObjectRelease();
                if (!v154) {
                  goto LABEL_156;
                }
                goto LABEL_153;
            }
            outlined consume of Data._Representation(v161, v160);
            swift_bridgeObjectRelease();
            uint64_t v150 = MEMORY[0x1E4FBC868];
            if (v154) {
              goto LABEL_153;
            }
LABEL_156:
            BOOL v114 = __OFADD__(v149++, 1);
            if (v114) {
              goto LABEL_255;
            }
            if (v149 >= v220) {
              goto LABEL_189;
            }
            unint64_t v157 = *(void *)(v150 + 8 * v149 + 64);
            if (!v157)
            {
              uint64_t v158 = v149 + 1;
              if (v149 + 1 >= v220) {
                goto LABEL_189;
              }
              unint64_t v157 = *(void *)(v150 + 8 * v158 + 64);
              if (!v157)
              {
                uint64_t v158 = v149 + 2;
                if (v149 + 2 >= v220) {
                  goto LABEL_189;
                }
                unint64_t v157 = *(void *)(v150 + 8 * v158 + 64);
                if (!v157)
                {
                  uint64_t v158 = v149 + 3;
                  if (v149 + 3 >= v220) {
                    goto LABEL_189;
                  }
                  unint64_t v157 = *(void *)(v150 + 8 * v158 + 64);
                  if (!v157)
                  {
                    while (1)
                    {
                      uint64_t v149 = v158 + 1;
                      if (__OFADD__(v158, 1)) {
                        goto LABEL_262;
                      }
                      if (v149 >= v220) {
                        break;
                      }
                      unint64_t v157 = *(void *)(v150 + 8 * v149 + 64);
                      ++v158;
                      if (v157) {
                        goto LABEL_166;
                      }
                    }
LABEL_189:
                    swift_release();

                    close((int)v219);
                    MEMORY[0x185309510](v215, -1, -1);
LABEL_242:
                    swift_bridgeObjectRelease_n();
                    return;
                  }
                }
              }
              uint64_t v149 = v158;
            }
LABEL_166:
            unint64_t v154 = (v157 - 1) & v157;
          }
        }
        char v136 = v66;
        int v137 = MEMORY[0x185301870](v135);
        if (v68 && (uint64_t v138 = v68, objc_msgSend(v68, sel_isCancelled)))
        {
          unlink(v65);
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v139 = objc_allocWithZone((Class)NSError);
          uint64_t v140 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v141 = objc_msgSend(v139, sel_initWithDomain_code_userInfo_, v140, 3072, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v142 = objc_msgSend(v141, sel_domain);
          id v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v142);
          uint64_t v145 = v144;

          if (v143 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
            && v145 == v146)
          {
            swift_bridgeObjectRelease_n();
            Swift::String v147 = v217;
          }
          else
          {
            char v191 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            Swift::String v147 = v217;
            if ((v191 & 1) == 0) {
              goto LABEL_270;
            }
          }
          swift_willThrow();

          close((int)v219);
          uint64_t v93 = v215;
        }
        else
        {
          id v214 = v68;
          uint64_t v148 = 4;
          switch(v137)
          {
            case 1:
            case 13:
              uint64_t v148 = 513;
              goto LABEL_234;
            case 2:
              goto LABEL_234;
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 14:
            case 15:
            case 16:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 29:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
              goto LABEL_230;
            case 17:
              uint64_t v148 = 516;
              goto LABEL_234;
            case 28:
            case 69:
              uint64_t v148 = 640;
              goto LABEL_234;
            case 30:
              uint64_t v148 = 642;
              goto LABEL_234;
            case 63:
              uint64_t v148 = 514;
              goto LABEL_234;
            default:
              if (v137 == 102)
              {
                id v194 = 0;
                uint64_t v148 = 512;
              }
              else
              {
LABEL_230:
                uint64_t v148 = 512;
LABEL_234:
                if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
                {
                  *(void *)&long long value = 0;
                  *((void *)&value + 1) = 0xE000000000000000;
                  _StringGuts.grow(_:)(22);
                  swift_bridgeObjectRelease();
                  *(void *)&long long value = 0xD000000000000014;
                  *((void *)&value + 1) = 0x80000001823A9780;
                  int v222 = v137;
                  goto LABEL_282;
                }
                static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                uint64_t v204 = (int)POSIXErrorCode.rawValue.getter();
                id v205 = objc_allocWithZone((Class)NSError);
                uint64_t v206 = String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                id v194 = objc_msgSend(v205, sel_initWithDomain_code_userInfo_, v206, v204, _NativeDictionary.bridged()(), v214);
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                id v207 = objc_msgSend(v194, sel_domain);
                id v208 = static String._unconditionallyBridgeFromObjectiveC(_:)(v207);
                uint64_t v210 = v209;

                if (v208 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                  && v210 == v211)
                {
                  swift_bridgeObjectRelease_n();
                  char v136 = v217;
                  uint64_t v65 = (const char *)v215;
                }
                else
                {
                  char v212 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  char v136 = v217;
                  uint64_t v65 = (const char *)v215;
                  if ((v212 & 1) == 0) {
                    goto LABEL_269;
                  }
                }
              }
              swift_bridgeObjectRetain();
              specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v148, v220, v58, v194, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&value, 0, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
                (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
                (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
                (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
              swift_willThrow();

              close((int)v219);
LABEL_240:
              uint64_t v93 = (void *)v65;
              break;
          }
        }
      }
LABEL_241:
      MEMORY[0x185309510](v93, -1, -1);
      goto LABEL_242;
    }
  }
  uint64_t v215 = &v214;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v214 - v20;
  unint64_t v22 = v221;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v21, v18, 1, v220, v22);
  char v24 = v23;
  swift_bridgeObjectRelease();
  if (v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v41 = objc_allocWithZone((Class)NSError);
    uint64_t v42 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v43 = objc_msgSend(v41, sel_initWithDomain_code_userInfo_, v42, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v44 = objc_msgSend(v43, sel_domain);
    id v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    uint64_t v47 = v46;

    if (v45 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v47 == v48)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v72 & 1) == 0) {
        goto LABEL_260;
      }
    }
    swift_willThrow();
    swift_willThrow();
    goto LABEL_242;
  }
  if ((a4 & 2) != 0) {
    int v25 = 3585;
  }
  else {
    int v25 = 1537;
  }
  uint64_t v26 = _NSOpenFileDescriptor_Protected(v21, v25, (int)a4, 438);
  LODWORD(v219) = v26;
  if ((v26 & 0x80000000) != 0)
  {
    int v74 = MEMORY[0x185301870](v26, v27);
    LODWORD(a1) = v74;
    uint64_t v75 = 4;
    switch(v74)
    {
      case 1:
      case 13:
        uint64_t v75 = 513;
        goto LABEL_193;
      case 2:
        goto LABEL_193;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_137;
      case 17:
        uint64_t v75 = 516;
        goto LABEL_193;
      case 28:
      case 69:
        uint64_t v75 = 640;
        goto LABEL_193;
      case 30:
        uint64_t v75 = 642;
        goto LABEL_193;
      case 63:
        uint64_t v75 = 514;
        goto LABEL_193;
      default:
        if (v74 == 102)
        {
          id v133 = 0;
          uint64_t v75 = 512;
        }
        else
        {
LABEL_137:
          uint64_t v75 = 512;
LABEL_193:
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_279;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v172 = (int)POSIXErrorCode.rawValue.getter();
          id v173 = objc_allocWithZone((Class)NSError);
          uint64_t v174 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v133 = objc_msgSend(v173, sel_initWithDomain_code_userInfo_, v174, v172, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v175 = objc_msgSend(v133, sel_domain);
          id v176 = static String._unconditionallyBridgeFromObjectiveC(_:)(v175);
          uint64_t v178 = v177;

          if (v176 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
            && v178 == v179)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v180 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v180 & 1) == 0) {
              goto LABEL_263;
            }
          }
        }
        uint64_t v181 = v220;
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v75, v181, v22, v133, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&value, 0, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
          (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
          (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
          (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
        swift_willThrow();
        goto LABEL_210;
    }
  }
  if (v8)
  {
    size_t v8 = (size_t)a1;
    uint64_t v28 = v7;
    uint64_t v29 = self;
    id v30 = objc_msgSend(v29, sel_currentProgress);

    uint64_t v31 = v220;
    if (v30)
    {
      if (v13) {
        uint64_t v32 = v15;
      }
      else {
        uint64_t v32 = 0;
      }
      uint64_t v15 = (uint64_t)objc_msgSend(v29, sel_progressWithTotalUnitCount_, v32, v214, v215);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v7 = v28;
    a1 = (const char *)v8;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v31 = v220;
  }
  *(void *)&long long value = v31;
  *((void *)&value + 1) = v22;
  uint64_t v224 = 0;
  char v225 = 0;
  id v97 = write(buffer:toFileDescriptor:path:parentProgress:)(v13, (uint64_t)a1, (int)v219, (uint64_t)&value, (id)v15);
  a4 = (void *)v7;
  uint64_t v217 = (void *)v7;
  id v214 = (id)v15;
  if (v7)
  {
    int v98 = MEMORY[0x185301870](v97);
    if (!v15 || !objc_msgSend((id)v15, sel_isCancelled))
    {
      uint64_t v108 = 4;
      switch(v98)
      {
        case 1:
        case 13:
          uint64_t v108 = 513;
          goto LABEL_203;
        case 2:
          goto LABEL_203;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_199;
        case 17:
          uint64_t v108 = 516;
          goto LABEL_203;
        case 28:
        case 69:
          uint64_t v108 = 640;
          goto LABEL_203;
        case 30:
          uint64_t v108 = 642;
          goto LABEL_203;
        case 63:
          uint64_t v108 = 514;
          goto LABEL_203;
        default:
          if (v98 == 102)
          {
            id v134 = 0;
            uint64_t v108 = 512;
          }
          else
          {
LABEL_199:
            uint64_t v108 = 512;
LABEL_203:
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
            {
              *(void *)&long long value = 0;
              *((void *)&value + 1) = 0xE000000000000000;
              _StringGuts.grow(_:)(22);
              swift_bridgeObjectRelease();
              *(void *)&long long value = 0xD000000000000014;
              *((void *)&value + 1) = 0x80000001823A9780;
              int v222 = v98;
              goto LABEL_282;
            }
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            uint64_t v182 = (int)POSIXErrorCode.rawValue.getter();
            id v183 = objc_allocWithZone((Class)NSError);
            uint64_t v184 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v134 = objc_msgSend(v183, sel_initWithDomain_code_userInfo_, v184, v182, _NativeDictionary.bridged()(), v214);
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v185 = objc_msgSend(v134, sel_domain);
            id v186 = static String._unconditionallyBridgeFromObjectiveC(_:)(v185);
            uint64_t v188 = v187;

            if (v186 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v188 == v189)
            {
              swift_bridgeObjectRelease_n();
              a4 = v217;
              uint64_t v31 = v220;
            }
            else
            {
              char v190 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              a4 = v217;
              uint64_t v31 = v220;
              if ((v190 & 1) == 0) {
                goto LABEL_266;
              }
            }
          }
          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v108, v31, v22, v134, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&value, 0, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
            (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
            (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
            (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
          swift_willThrow();

          uint64_t v132 = a4;
          goto LABEL_209;
      }
    }
    unlink(v21);
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v99 = objc_allocWithZone((Class)NSError);
    uint64_t v100 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v101 = objc_msgSend(v99, sel_initWithDomain_code_userInfo_, v100, 3072, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v102 = objc_msgSend(v101, sel_domain);
    id v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
    uint64_t v105 = v104;

    if (v103 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v105 == v106)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v107 = v217;
    }
    else
    {
      char v131 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v107 = v217;
      if ((v131 & 1) == 0) {
        goto LABEL_267;
      }
    }
    swift_willThrow();

    uint64_t v132 = v107;
LABEL_209:

    close((int)v219);
LABEL_210:
    swift_willThrow();
    goto LABEL_242;
  }
  uint64_t v109 = 0;
  a1 = (const char *)MEMORY[0x1E4FBC868];
  uint64_t v110 = 1 << *(unsigned char *)(MEMORY[0x1E4FBC868] + 32);
  uint64_t v111 = -1;
  if (v110 < 64) {
    uint64_t v111 = ~(-1 << v110);
  }
  uint64_t v6 = v111 & *(void *)(MEMORY[0x1E4FBC868] + 64);
  uint64_t v220 = (unint64_t)(v110 + 63) >> 6;
  while (2)
  {
    if (v6)
    {
      unint64_t v112 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v113 = v112 | (v109 << 6);
    }
    else
    {
      BOOL v114 = __OFADD__(v109++, 1);
      if (v114) {
        goto LABEL_245;
      }
      if (v109 >= v220)
      {
LABEL_129:
        swift_release();

        close((int)v219);
        goto LABEL_242;
      }
      unint64_t v115 = *(void *)&a1[8 * v109 + 64];
      if (!v115)
      {
        uint64_t v116 = v109 + 1;
        if (v109 + 1 >= v220) {
          goto LABEL_129;
        }
        unint64_t v115 = *(void *)&a1[8 * v116 + 64];
        if (!v115)
        {
          uint64_t v116 = v109 + 2;
          if (v109 + 2 >= v220) {
            goto LABEL_129;
          }
          unint64_t v115 = *(void *)&a1[8 * v116 + 64];
          if (!v115)
          {
            uint64_t v116 = v109 + 3;
            if (v109 + 3 >= v220) {
              goto LABEL_129;
            }
            unint64_t v115 = *(void *)&a1[8 * v116 + 64];
            if (!v115)
            {
              while (1)
              {
                uint64_t v109 = v116 + 1;
                if (__OFADD__(v116, 1)) {
                  break;
                }
                if (v109 >= v220) {
                  goto LABEL_129;
                }
                unint64_t v115 = *(void *)&a1[8 * v109 + 64];
                ++v116;
                if (v115) {
                  goto LABEL_107;
                }
              }
LABEL_256:
              __break(1u);
LABEL_257:
              __break(1u);
LABEL_258:
              __break(1u);
LABEL_259:
              __break(1u);
LABEL_260:
              __break(1u);
LABEL_261:
              __break(1u);
LABEL_262:
              __break(1u);
LABEL_263:
              __break(1u);
LABEL_264:
              __break(1u);
LABEL_265:
              __break(1u);
LABEL_266:
              __break(1u);
LABEL_267:
              __break(1u);
LABEL_268:
              __break(1u);
LABEL_269:
              __break(1u);
LABEL_270:
              __break(1u);
            }
          }
        }
        uint64_t v109 = v116;
      }
LABEL_107:
      uint64_t v6 = (v115 - 1) & v115;
      unint64_t v113 = __clz(__rbit64(v115)) + (v109 << 6);
    }
    uint64_t v117 = 16 * v113;
    uint64_t v15 = *(void *)(*((void *)a1 + 6) + v117 + 8);
    unint64_t v118 = (uint64_t *)(*((void *)a1 + 7) + v117);
    uint64_t v7 = *v118;
    unint64_t v119 = v118[1];
    switch(v119 >> 62)
    {
      case 1uLL:
        int64_t v120 = (int)v7;
        if (v7 >> 32 < (int)v7) {
          goto LABEL_250;
        }
        uint64_t v121 = v119 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v127 = *(void *)((v119 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v127) {
          goto LABEL_274;
        }
        uint64_t v128 = *(void *)((v119 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        if (__OFSUB__((int)v7, v128)) {
          goto LABEL_252;
        }
        uint64_t v13 = v127 + (int)v7 - v128;
        if (*(void *)((v119 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= (v7 >> 32) - (int)v7) {
          size_t v8 = (v7 >> 32) - (int)v7;
        }
        else {
          size_t v8 = *(void *)((v119 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        }
        uint64_t v129 = String.utf8CString.getter() + 32;
        outlined copy of Data._Representation(v7, v119);
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v7, v119);
        uint64_t v130 = (const char *)v129;
        a1 = (const char *)MEMORY[0x1E4FBC868];
        fsetxattr((int)v219, v130, (const void *)v13, v8, 0, 0);
        a4 = v217;
        swift_release();
        outlined consume of Data._Representation(v7, v119);
        goto LABEL_94;
      case 2uLL:
        uint64_t v13 = v119 & 0x3FFFFFFFFFFFFFFFLL;
        int64_t v120 = *(void *)(v7 + 16);
        uint64_t v121 = *(void *)(v7 + 24);
        uint64_t v122 = *(void *)((v119 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (v122)
        {
          uint64_t v123 = *(void *)((v119 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          BOOL v114 = __OFSUB__(v120, v123);
          uint64_t v124 = v120 - v123;
          if (v114) {
            goto LABEL_251;
          }
          BOOL v114 = __OFSUB__(v121, v120);
          int64_t v120 = v121 - v120;
          if (v114) {
            goto LABEL_273;
          }
          uint64_t v216 = (const char *)(v122 + v124);
          if (*(void *)((v119 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v120) {
            size_t v125 = v120;
          }
          else {
            size_t v125 = *(void *)((v119 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          }
          size_t v8 = String.utf8CString.getter();
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v7, v119);
          swift_retain();
          swift_retain();
          a1 = (const char *)MEMORY[0x1E4FBC868];
          size_t v126 = v125;
          a4 = v217;
          fsetxattr((int)v219, (const char *)(v8 + 32), v216, v126, 0, 0);
          swift_release();
          swift_release();
LABEL_93:
          swift_release();
LABEL_94:
          outlined consume of Data._Representation(v7, v119);
          swift_bridgeObjectRelease();
          continue;
        }
        if (!__OFSUB__(v121, v120)) {
          __break(1u);
        }
LABEL_273:
        __break(1u);
LABEL_274:
        __break(1u);
LABEL_275:
        if (!__OFSUB__(v121, v120)) {
          __break(1u);
        }
LABEL_277:
        __break(1u);
LABEL_278:
        __break(1u);
LABEL_279:
        *(void *)&long long value = 0;
        *((void *)&value + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        *(void *)&long long value = 0xD000000000000014;
        *((void *)&value + 1) = 0x80000001823A9780;
        int v222 = (int)a1;
LABEL_282:
        v213._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v213);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
      case 3uLL:
        *(void *)((char *)&value + 6) = 0;
        *(void *)&long long value = 0;
        uint64_t v13 = String.utf8CString.getter();
        swift_bridgeObjectRetain();
        fsetxattr((int)v219, (const char *)(v13 + 32), &value, 0, 0, 0);
        goto LABEL_93;
      default:
        *(void *)&long long value = *v118;
        WORD4(value) = v119;
        BYTE10(value) = BYTE2(v119);
        BYTE11(value) = BYTE3(v119);
        BYTE12(value) = BYTE4(v119);
        uint64_t v13 = BYTE6(v119);
        BYTE13(value) = BYTE5(v119);
        size_t v8 = String.utf8CString.getter();
        swift_bridgeObjectRetain();
        fsetxattr((int)v219, (const char *)(v8 + 32), &value, BYTE6(v119), 0, 0);
        goto LABEL_93;
    }
  }
}

uint64_t closure #1 in createProtectedTemporaryFile(at:inPath:options:variant:)@<X0>(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, id a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12)
{
  if (!a1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v22 = objc_allocWithZone((Class)NSError);
    uint64_t v23 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v24 = objc_msgSend(v22, sel_initWithDomain_code_userInfo_, v23, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    a8 = objc_msgSend(v24, sel_domain);
    id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(a8);
    a5 = v26;

    if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && a5 == v27)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      a7 = (unint64_t)v27;
      a6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((a6 & 1) == 0)
      {
        __break(1u);
        goto LABEL_10;
      }
    }
    return swift_willThrow();
  }
  int v19 = _NSOpenFileDescriptor_Protected(a1, 2562, a2, 438);
  if ((v19 & 0x80000000) == 0)
  {
    *(_DWORD *)a9 = v19;
    *(void *)(a9 + 8) = a3;
    *(void *)(a9 + 16) = a4;
    uint64_t v20 = a5[1];
    *(void *)(a9 + 24) = *a5;
    *(void *)(a9 + 32) = v20;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
LABEL_10:
  uint64_t v95 = a11;
  uint64_t v96 = (void *)a12;
  int v29 = MEMORY[0x185301870]();
  uint64_t v31 = *a5;
  unint64_t v30 = a5[1];
  swift_bridgeObjectRetain();
  cleanupTemporaryDirectory(at:)(v31, v30);
  swift_bridgeObjectRelease();
  if ((a10 & 1) == 0)
  {
    uint64_t v32 = 4;
    switch(v29)
    {
      case 1:
      case 13:
        uint64_t v32 = 513;
        goto LABEL_27;
      case 2:
        goto LABEL_27;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_22;
      case 17:
        uint64_t v32 = 516;
        goto LABEL_27;
      case 28:
      case 69:
        uint64_t v32 = 640;
        goto LABEL_27;
      case 30:
        uint64_t v32 = 642;
        goto LABEL_27;
      case 63:
        uint64_t v32 = 514;
        goto LABEL_27;
      default:
        if (v29 == 102)
        {
          id v34 = 0;
          uint64_t v32 = 512;
LABEL_32:
          swift_bridgeObjectRetain();
          outlined copy of PathOrURL((void *)a6, a7, (uint64_t)a8, 0);
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v32, a6, a7, v34, v95, (uint64_t)v96, 0, 0, &v99, 0, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
            (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
            (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
            (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
          return swift_willThrow();
        }
LABEL_22:
        uint64_t v32 = 512;
LABEL_27:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v37 = (int)POSIXErrorCode.rawValue.getter();
          id v38 = objc_allocWithZone((Class)NSError);
          uint64_t v39 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v34 = objc_msgSend(v38, sel_initWithDomain_code_userInfo_, v39, v37, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v40 = objc_msgSend(v34, sel_domain);
          id v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
          uint64_t v43 = v42;

          if (v41 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v43 == v44)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_32;
          }
          char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v45) {
            goto LABEL_32;
          }
          __break(1u);
LABEL_75:
          __break(1u);
        }
        break;
    }
    goto LABEL_76;
  }
  uint64_t v33 = 4;
  switch(v29)
  {
    case 1:
    case 13:
      uint64_t v33 = 513;
      goto LABEL_36;
    case 2:
      goto LABEL_36;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      goto LABEL_23;
    case 17:
      uint64_t v33 = 516;
      goto LABEL_36;
    case 28:
    case 69:
      uint64_t v33 = 640;
      goto LABEL_36;
    case 30:
      uint64_t v33 = 642;
      goto LABEL_36;
    case 63:
      uint64_t v33 = 514;
      goto LABEL_36;
    default:
      if (v29 == 102)
      {
        swift_retain_n();
        id v35 = (id)a6;
        swift_retain_n();
        id v36 = v35;
        uint64_t v93 = 0;
        uint64_t v94 = 512;
        goto LABEL_40;
      }
LABEL_23:
      uint64_t v33 = 512;
LABEL_36:
      uint64_t v94 = v33;
      swift_retain_n();
      id v46 = (id)a6;
      swift_retain_n();
      id v47 = v46;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v48 = (int)POSIXErrorCode.rawValue.getter();
        id v49 = objc_allocWithZone((Class)NSError);
        uint64_t v50 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v51 = objc_msgSend(v49, sel_initWithDomain_code_userInfo_, v50, v48, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v93 = (uint64_t)v51;
        id v52 = objc_msgSend(v51, sel_domain);
        id v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
        uint64_t v55 = v54;

        if (v53 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") || v55 != v56)
        {
          char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v57 = v96;
          if ((v58 & 1) == 0) {
            goto LABEL_75;
          }
LABEL_42:
          swift_bridgeObjectRetain();
          outlined copy of PathOrURL((void *)a6, a7, (uint64_t)a8, 1);
          if (_foundation_swift_url_feature_enabled())
          {
            id v100 = a8;
            swift_retain();
            id v59 = (id)a6;
            swift_retain();
            Swift::String v60 = URL.path(percentEncoded:)(1);
            uint64_t countAndFlagsBits = v60._countAndFlagsBits;
            Swift::String v99 = v60;
            swift_bridgeObjectRetain();
            if (String.count.getter() <= 1)
            {
              unint64_t object = (unint64_t)v60._object;
            }
            else
            {
              unint64_t object = (unint64_t)v60._object;
              if ((specialized BidirectionalCollection.last.getter(v60._countAndFlagsBits, (unint64_t)v60._object) & 0x1FF) == 0x2F)
              {
                specialized RangeReplaceableCollection<>.popLast()();
                swift_bridgeObjectRelease();
                uint64_t countAndFlagsBits = v99._countAndFlagsBits;
                unint64_t object = (unint64_t)v99._object;
              }
            }
            uint64_t v97 = Set.init(minimumCapacity:)();
            uint64_t v75 = specialized Set._Variant.insert(_:)(&v101, 0x2FuLL);
            uint64_t v76 = v97;
            uint64_t v77 = HIBYTE(object) & 0xF;
            if ((object & 0x2000000000000000) == 0) {
              uint64_t v77 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            }
            if (v77)
            {
              uint64_t v92 = (uint64_t)&v92;
              uint64_t v97 = countAndFlagsBits;
              unint64_t v98 = object;
              MEMORY[0x1F4188790](v75);
              _OWORD v91[2] = &v97;
              v91[3] = v76;
              swift_bridgeObjectRetain();
              specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v91, countAndFlagsBits, object);
              if (v78 == 1)
              {
                Swift::Int v79 = v97;
                unint64_t v80 = v98;
                swift_bridgeObjectRetain();
                specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v79, v80, v76);
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v57 = v96;
            }
            else
            {
              swift_bridgeObjectRelease();
              unint64_t v57 = v96;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of PathOrURL((void *)a6, a7, (uint64_t)a8, 1);
          }
          else
          {
            id v63 = objc_msgSend((id)a6, sel__parameterString);
            if (v63)
            {
              id v64 = v63;
              id v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
              uint64_t v67 = v66;

              if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                && (id v68 = objc_msgSend((id)a6, sel_path)) != 0)
              {
                uint64_t v69 = v68;
                id v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
                char v72 = v71;

                v99._uint64_t countAndFlagsBits = (uint64_t)v70;
                v99._unint64_t object = v72;
                swift_bridgeObjectRetain();
                v73._uint64_t countAndFlagsBits = 59;
                v73._unint64_t object = (void *)0xE100000000000000;
                String.append(_:)(v73);
                unint64_t v57 = v96;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                v74._uint64_t countAndFlagsBits = (uint64_t)v65;
                v74._unint64_t object = v67;
                String.append(_:)(v74);
                swift_bridgeObjectRelease();
              }
              else
              {
                v99._uint64_t countAndFlagsBits = 59;
                v99._unint64_t object = (void *)0xE100000000000000;
                v81._uint64_t countAndFlagsBits = (uint64_t)v65;
                v81._unint64_t object = v67;
                String.append(_:)(v81);
              }
              swift_bridgeObjectRelease();
              outlined consume of PathOrURL((void *)a6, a7, (uint64_t)a8, 1);
              goto LABEL_64;
            }
            id v82 = objc_msgSend((id)a6, sel_path);
            if (v82)
            {
              uint64_t v83 = v82;
              static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
            }
          }
          outlined consume of PathOrURL((void *)a6, a7, (uint64_t)a8, 1);
LABEL_64:
          uint64_t v84 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v85 = (id)a6;
          outlined consume of PathOrURL((void *)a6, a7, (uint64_t)a8, 1);
          id v86 = (void *)v93;
          if (v93)
          {
            v99._uint64_t countAndFlagsBits = v93;
            lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
            id v87 = v86;
            if (_getErrorEmbeddedNSError<A>(_:)())
            {
            }
            else
            {
              swift_allocError();
              *uint64_t v89 = v87;
            }
            id v88 = (void *)_swift_stdlib_bridgeErrorToNSError();
            unint64_t v57 = v96;
          }
          else
          {
            id v88 = 0;
          }
          if (v57)
          {
            unint64_t v57 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
          }
          objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v94, v84, v85, v88, v57, 0, 0);
          swift_unknownObjectRelease();

          outlined consume of PathOrURL((void *)a6, a7, (uint64_t)a8, 1);
          return swift_willThrow();
        }
        swift_bridgeObjectRelease_n();
LABEL_40:
        unint64_t v57 = v96;
        goto LABEL_42;
      }
LABEL_76:
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      v90._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v90);
      swift_bridgeObjectRelease();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
  }
}

uint64_t _NSOpenFileDescriptor_Protected(char *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = (a3 & 0xF0000000) - 0x10000000;
  if (v7 >> 28 >= 5)
  {
    unint64_t v11 = [+[NSString stringWithUTF8String:a1] stringByDeletingLastPathComponent];
    if (![(NSString *)v11 length]) {
      unint64_t v11 = [+[NSFileManager defaultManager] currentDirectoryPath];
    }
    id v12 = [(NSString *)v11 fileSystemRepresentation];
    if (!v12) {
      return open(a1, a2, a4);
    }
    uint64_t v16 = 0;
    v17.f_blocks = 0;
    v17.f_bfree = 0;
    v17.f_bsize = 5;
    v17.f_iosize = 0x40000000;
    int v13 = getattrlist(v12, &v17, &v16, 8uLL, 1u);
    int v8 = HIDWORD(v16);
    int v14 = v13 ? -1 : HIDWORD(v16);
    if ((v14 + 1) < 2) {
      return open(a1, a2, a4);
    }
  }
  else
  {
    int v8 = *(_DWORD *)((char *)&unk_182323678 + (v7 >> 26));
  }
  uint64_t v9 = open_dprotected_np(a1, a2, v8, 0, a4);
  int v10 = *__error();
  if (v9 != -1 || v10 != 45)
  {
    *__error() = v10;
    return v9;
  }
  memset(&v17, 0, 512);
  if (!statfs(a1, &v17) && (v17.f_flags & 0x80) != 0)
  {
    *__error() = 45;
    return 0xFFFFFFFFLL;
  }
  *__error() = 45;
  return open(a1, a2, a4);
}

void sub_181987738(_Unwind_Exception *exception_object)
{
}

uint64_t JSONEncoder.outputFormatting.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *(os_unfair_lock_s **)(v1 + 136);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  *(void *)(v1 + 16) = v2;
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);

  return swift_release();
}

unint64_t URL.pathExtension.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v26 = v2;
    swift_retain();
    id v3 = v1;
    swift_retain();
    Swift::String v4 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v4._countAndFlagsBits;
    Swift::String v25 = v4;
    swift_bridgeObjectRetain();
    if (String.count.getter() < 2)
    {
      unint64_t object = (unint64_t)v4._object;
    }
    else
    {
      unint64_t object = (unint64_t)v4._object;
      if ((specialized BidirectionalCollection.last.getter(v4._countAndFlagsBits, (unint64_t)v4._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v25._countAndFlagsBits;
        unint64_t object = (unint64_t)v25._object;
      }
    }
    uint64_t v22 = Set.init(minimumCapacity:)();
    uint64_t v10 = specialized Set._Variant.insert(_:)(&v24, 0x2FuLL);
    uint64_t v11 = v22;
    uint64_t v12 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v12 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v12)
    {
      uint64_t v22 = countAndFlagsBits;
      unint64_t v23 = object;
      MEMORY[0x1F4188790](v10);
      v21[2] = &v22;
      void v21[3] = v11;
      swift_bridgeObjectRetain();
      int v13 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v21, countAndFlagsBits, object);
      if (v14 == 1)
      {
        Swift::Int v15 = v22;
        unint64_t v16 = v23;
        swift_bridgeObjectRetain();
        statfs v17 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v15, v16, v11);
        unint64_t v19 = v18;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v19) {
          goto LABEL_18;
        }
      }
      else
      {
        statfs v17 = (void (*)(char *, void))v13;
        unint64_t v19 = v14;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v19)
        {
LABEL_18:
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          statfs v17 = 0;
          unint64_t v19 = 0xE000000000000000;
          goto LABEL_19;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      statfs v17 = 0;
      unint64_t v19 = 0xE000000000000000;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_19:
    unint64_t v9 = String.pathExtension.getter((uint64_t)v17, v19);
    swift_bridgeObjectRelease();
    return v9;
  }
  id v7 = objc_msgSend(v1, sel_pathExtension);
  if (!v7) {
    return 0;
  }
  int v8 = v7;
  unint64_t v9 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  return v9;
}

uint64_t protocol witness for UnkeyedDecodingContainer.count.getter in conformance _PlistUnkeyedDecodingContainer<A>(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 44));
}

NSURLRequest __swiftcall URLRequest._bridgeToObjectiveC()()
{
  objc_msgSend(*(id *)(*(void *)v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  uint64_t v2 = v4;
  result._internal = v1;
  result.super.isa = v2;
  return result;
}

void sub_181987F58(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t ___initializeClasses_block_invoke()
{
  uint64_t result = [(id)xpc_get_class4NSXPC() superclass];
  _XPCObjectClass Class = result;
  return result;
}

ValueMetadata *type metadata accessor for _POSIXDirectoryContentsSequence.Iterator.Element()
{
  return &type metadata for _POSIXDirectoryContentsSequence.Iterator.Element;
}

id URLRequest.cachePolicy.setter(uint64_t a1)
{
  return URLRequest.cachePolicy.setter(a1, (SEL *)&selRef_setCachePolicy_);
}

uint64_t protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance __JSONEncoder(uint64_t a1, uint64_t a2, void *a3)
{
  return __JSONEncoder.encode<A>(_:)(a1, a2, a3);
}

uint64_t __JSONEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  if (((*(uint64_t (**)(void))(*v3 + 208))() & 1) == 0)
  {
    __break(1u);
LABEL_9:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_6:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    return swift_release();
  }
  unint64_t v10 = v3[18];
  swift_retain();
  uint64_t v11 = specialized __JSONEncoder.wrapGeneric<A, B>(_:for:_:)(a1, v10, 0, 0, 0, 255, a2, a3);
  if (!v5)
  {
    if (!v11)
    {
      type metadata accessor for JSONReference();
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = MEMORY[0x1E4FBC868];
      *(void *)(v12 + 24) = 0;
      *(unsigned char *)(v12 + 32) = 4;
    }
    swift_release();
    uint64_t v13 = swift_retain();
    MEMORY[0x185302590](v13);
    if (*(void *)((v6[2] & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v6[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  return swift_release();
}

unint64_t partial apply for closure #1 in String._transmutingCompressingSlashes()(uint64_t a1, uint64_t a2)
{
  return closure #1 in String._transmutingCompressingSlashes()(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

unint64_t closure #1 in String._transmutingCompressingSlashes()(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000) != 0) {
    unint64_t v4 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if (!v4) {
    return 0;
  }
  BOOL v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 4 * v4;
  uint64_t v11 = 4 << v5;
  uint64_t v29 = a4 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v26 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v12 = 15;
LABEL_9:
  unint64_t v13 = v12 & 0xC;
  unint64_t result = v12;
  if (v13 == v11)
  {
    BOOL v17 = v8;
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
    BOOL v8 = v17;
  }
  unint64_t v15 = result >> 16;
  if (result >> 16 >= v4)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if ((a4 & 0x1000000000000000) != 0)
  {
    BOOL v18 = v8;
    unint64_t result = String.UTF8View._foreignSubscript(position:)();
    BOOL v8 = v18;
    char v16 = result;
    if (v13 == v11) {
      goto LABEL_23;
    }
LABEL_19:
    if ((a4 & 0x1000000000000000) == 0) {
      goto LABEL_20;
    }
LABEL_24:
    if (v4 <= v12 >> 16) {
      goto LABEL_52;
    }
    BOOL v20 = v8;
    unint64_t result = String.UTF8View._foreignIndex(after:)();
    unint64_t v12 = result;
    if (!v20) {
      goto LABEL_26;
    }
    while (1)
    {
      while (1)
      {
LABEL_29:
        if (v16 != 47)
        {
          *(unsigned char *)(a1 + v9) = v16;
          BOOL v21 = __OFADD__(v9++, 1);
          if (v21) {
            goto LABEL_54;
          }
          BOOL v8 = 0;
LABEL_8:
          if (v10 == v12 >> 14) {
            return v9;
          }
          goto LABEL_9;
        }
        if (v10 == v12 >> 14) {
          return v9;
        }
        unint64_t v22 = v12 & 0xC;
        unint64_t result = v12;
        if (v22 == v11) {
          unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
        }
        unint64_t v23 = result >> 16;
        if (result >> 16 >= v4) {
          goto LABEL_51;
        }
        if ((a4 & 0x1000000000000000) == 0) {
          break;
        }
        unint64_t result = String.UTF8View._foreignSubscript(position:)();
        char v16 = result;
        if (v22 == v11) {
          goto LABEL_45;
        }
LABEL_41:
        if ((a4 & 0x1000000000000000) != 0) {
          goto LABEL_42;
        }
LABEL_28:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      }
      if ((a4 & 0x2000000000000000) != 0)
      {
        unint64_t v27 = a3;
        uint64_t v28 = v29;
        char v16 = *((unsigned char *)&v27 + v23);
        if (v22 == v11) {
          goto LABEL_45;
        }
        goto LABEL_41;
      }
      unint64_t result = v26;
      if ((a3 & 0x1000000000000000) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      char v16 = *(unsigned char *)(result + v23);
      if (v22 != v11) {
        goto LABEL_41;
      }
LABEL_45:
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
      unint64_t v12 = result;
      if ((a4 & 0x1000000000000000) == 0) {
        goto LABEL_28;
      }
LABEL_42:
      if (v4 <= v12 >> 16) {
        goto LABEL_52;
      }
      unint64_t result = String.UTF8View._foreignIndex(after:)();
      unint64_t v12 = result;
    }
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    unint64_t v27 = a3;
    uint64_t v28 = v29;
    char v16 = *((unsigned char *)&v27 + v15);
    if (v13 == v11) {
      goto LABEL_23;
    }
    goto LABEL_19;
  }
  unint64_t result = v26;
  if ((a3 & 0x1000000000000000) == 0)
  {
    BOOL v24 = v8;
    unint64_t result = _StringObject.sharedUTF8.getter();
    BOOL v8 = v24;
  }
  char v16 = *(unsigned char *)(result + v15);
  if (v13 != v11) {
    goto LABEL_19;
  }
LABEL_23:
  BOOL v19 = v8;
  unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a3, a4);
  BOOL v8 = v19;
  unint64_t v12 = result;
  if ((a4 & 0x1000000000000000) != 0) {
    goto LABEL_24;
  }
LABEL_20:
  unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
  if (v8) {
    goto LABEL_29;
  }
LABEL_26:
  *(unsigned char *)(a1 + v9) = v16;
  BOOL v21 = __OFADD__(v9++, 1);
  if (!v21)
  {
    BOOL v8 = v16 == 47;
    goto LABEL_8;
  }
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

uint64_t __nsurlClass_block_invoke()
{
  uint64_t result = objc_opt_class();
  qword_1EB1ED848 = result;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UInt16(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedShortValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(unsigned char *)(a2 + 2) = 0;
  }
  return v5 & 1;
}

id _NSGetUnsignedShortValueWithMethod(uint64_t a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)NSNumber);
  Implementatiouint64_t n = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  BOOL v8 = objc_msgSend(v5, "initWithUnsignedShort:", ((uint64_t (*)(uint64_t, SEL))Implementation)(a1, Name));

  return v8;
}

uint64_t NSKeyValueObservedChange.newValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

ValueMetadata *type metadata accessor for ICUPatternGenerator.PatternGeneratorInfo()
{
  return &type metadata for ICUPatternGenerator.PatternGeneratorInfo;
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSNotificationCenter.Notifications.Iterator(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = *v1;
  return MEMORY[0x1F4188298](protocol witness for AsyncIteratorProtocol.next() in conformance NSNotificationCenter.Notifications.Iterator, 0, 0);
}

uint64_t __PlistEncoderBPlist.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t NSScanner.scanInt(representation:)(char *a1)
{
  char v3 = *a1;
  uint64_t result = NSScanner.scanInt64(representation:)(&v3);
  if (v2) {
    return 0;
  }
  return result;
}

uint64_t NSScanner.scanInt64(representation:)(char *a1)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  char v2 = *a1;
  v5[0] = 0x7FFFFFFFFFFFFFFFLL;
  if (v2)
  {
    unint64_t v4 = -1;
    if (objc_msgSend(v1, sel_scanHexLongLong_, &v4))
    {
      if (v4 >= 0x7FFFFFFFFFFFFFFFLL) {
        return 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        return v4;
      }
    }
    else
    {
      return 0;
    }
  }
  else if (objc_msgSend(v1, sel_scanLongLong_, v5))
  {
    return v5[0];
  }
  else
  {
    return 0;
  }
}

uint64_t getEnumTagSinglePayload for AttributedString.Index(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

Protocol *__cdecl NSProtocolFromString(Protocol *namestr)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (namestr)
  {
    uint64_t v1 = namestr;
    uint64_t v2 = [(Protocol *)namestr length];
    if ([(Protocol *)v1 getCString:v5 maxLength:1000 encoding:4]
      && strlen(v5) == v2)
    {
      unint64_t v3 = v5;
      return objc_getProtocol(v3);
    }
    if (!v2)
    {
LABEL_9:
      unint64_t v3 = (const char *)[(Protocol *)v1 UTF8String];
      return objc_getProtocol(v3);
    }
    uint64_t v4 = 0;
    while ([(Protocol *)v1 characterAtIndex:v4])
    {
      if (v2 == ++v4) {
        goto LABEL_9;
      }
    }
    return 0;
  }
  return namestr;
}

unint64_t lazy protocol witness table accessor for type LocaleCache.State.IdentifierAndPrefs and conformance LocaleCache.State.IdentifierAndPrefs()
{
  unint64_t result = lazy protocol witness table cache variable for type LocaleCache.State.IdentifierAndPrefs and conformance LocaleCache.State.IdentifierAndPrefs;
  if (!lazy protocol witness table cache variable for type LocaleCache.State.IdentifierAndPrefs and conformance LocaleCache.State.IdentifierAndPrefs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocaleCache.State.IdentifierAndPrefs and conformance LocaleCache.State.IdentifierAndPrefs);
  }
  return result;
}

IMP __NSResolvedSelectorForName_block_invoke()
{
  uint64_t v0 = (objc_class *)objc_opt_class();
  ClassMethod = class_getClassMethod(v0, sel_resolveInstanceMethod_);
  qword_1EB1ED3E0 = (uint64_t)method_getImplementation(ClassMethod);
  uint64_t v2 = (objc_class *)objc_opt_class();
  qword_1EB1ED3F0 = (uint64_t)class_getMethodImplementation(v2, sel_forwardingTargetForSelector_);
  unint64_t v3 = (objc_class *)objc_opt_class();
  IMP result = class_getMethodImplementation(v3, sel_forwardInvocation_);
  qword_1EB1ED3E8 = (uint64_t)result;
  return result;
}

uint64_t NSKeyValueObservedChange.oldValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int16()
{
  uint64_t v1 = *v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return objc_msgSend(v2, sel_initWithShort_, v1);
}

ValueMetadata *type metadata accessor for ICUDateFormatter.PatternCacheKey()
{
  return &type metadata for ICUDateFormatter.PatternCacheKey;
}

uint64_t Locale.LanguageCode.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, void *a4@<X8>)
{
  uint64_t result = a3();
  *a4 = a1;
  a4[1] = a2;
  a4[2] = result;
  a4[3] = v8;
  return result;
}

id IndexSet.count.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_count);
}

uint64_t URL.isFileURL.getter()
{
  uint64_t v1 = *v0;
  if (!_foundation_swift_url_feature_enabled()) {
    return (uint64_t)objc_msgSend(v1, sel_isFileURL);
  }
  URL.scheme.getter();
  if (!v2) {
    return 0;
  }
  Swift::String v3 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v3._countAndFlagsBits == 1701603686 && v3._object == (void *)0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v5 & 1;
  }
}

uint64_t URLComponents.path.setter(unint64_t a1, unint64_t a2)
{
  *(unsigned char *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 14) = 0;
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    unint64_t v4 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(a1, a2);
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v4 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 104) = v4;
  *(void *)(v2 + 112) = v6;
  return result;
}

uint64_t ___createRegexForPattern_block_invoke()
{
  qword_1EB1EDC60 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1C998]);
  [(id)qword_1EB1EDC60 setName:@"NSRegularExpressionCache"];
  uint64_t v0 = (void *)qword_1EB1EDC60;

  return [v0 setCountLimit:10];
}

char *String.init(format:locale:_:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized withVaList<A>(_:_:)(a4, a1, a2, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v9;
}

id UInt32.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedIntValue);
}

uint64_t Locale.regionCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 176))(ObjectType, v1);
  if (v4)
  {
    uint64_t v5 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0) {
      uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
    }
    if (!v5)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t specialized _LocaleProtocol.regionCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 560));
  partial apply for closure #1 in _LocaleICU.region.getter((void *)(v1 + 16), &v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 560));
  swift_release();
  unint64_t object = v5._object;
  if (!v5._object) {
    return 0;
  }
  uint64_t countAndFlagsBits = v5._countAndFlagsBits;
  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(countAndFlagsBits, (uint64_t)object);
  return countAndFlagsBits;
}

uint64_t Locale.region.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 376))(ObjectType, v1);
}

uint64_t protocol witness for _LocaleProtocol.region.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 376))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

id @objc _NSSwiftLocale.countryCode.getter(char *a1)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t vars8;

  uint64_t v2 = *(void *)&a1[OBJC_IVAR____NSSwiftLocale_locale + 8];
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v4 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 376);
  Swift::String v5 = a1;
  swift_unknownObjectRetain();
  v4(&v10, ObjectType, v2);
  swift_unknownObjectRelease();
  unint64_t v6 = v11;
  if (v11)
  {
    uint64_t v7 = v10;
    swift_bridgeObjectRetain();
    outlined consume of Locale.LanguageCode?(v7, v6);

    uint64_t v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }
  else
  {

    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t protocol witness for _LocaleProtocol.region.getter in conformance _LocaleICU@<X0>(Swift::String *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.region.getter((void *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));

  return swift_release();
}

uint64_t partial apply for closure #1 in _LocaleICU.region.getter@<X0>(void *a1@<X0>, Swift::String *a2@<X8>)
{
  return closure #1 in _LocaleICU.region.getter(a1, a2);
}

uint64_t closure #1 in _LocaleICU.region.getter@<X0>(void *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t result = a1[41];
  uint64_t v6 = a1[42];
  uint64_t v7 = a1[43];
  uint64_t v8 = (void *)a1[44];
  if (v6)
  {
    if (v6 == 1)
    {
      specialized static Locale.keywordValue(identifier:key:)();
      if (v9)
      {
        if (String.count.getter() > 2)
        {
          uint64_t v10 = specialized Collection.prefix(_:)(2);
          uint64_t v12 = v11;
          uint64_t v14 = v13;
          uint64_t v16 = v15;
          swift_bridgeObjectRelease();
          MEMORY[0x185301F50](v10, v12, v14, v16);
          swift_bridgeObjectRelease();
          Swift::String v17 = String.uppercased()();
          swift_bridgeObjectRelease();
          Swift::String v18 = String.uppercased()();
          *(Swift::String *)(a1 + 41) = v17;
          *(Swift::String *)(a1 + 43) = v18;
          *a2 = v17;
          a2[1] = v18;
          swift_bridgeObjectRetain();
          return swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
      }
      uint64_t v19 = swift_bridgeObjectRetain();
      MEMORY[0x1F4188790](v19);
      LODWORD(v63) = 0;
      String.utf8CString.getter();
      int Language = uloc_getLanguage();
      swift_release();
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      if (Language > 0)
      {
        v50[Language] = 0;
        uint64_t v21 = MEMORY[0x185301F80](v50, 0);
      }
      uint64_t v58 = v22;
      uint64_t v61 = v21;
      MEMORY[0x1F4188790](v21);
      LODWORD(v63) = 0;
      String.utf8CString.getter();
      int Script = uloc_getScript();
      swift_release();
      uint64_t v24 = 0;
      if ((int)v63 > 0)
      {
        uint64_t v60 = 0;
      }
      else
      {
        uint64_t v60 = 0;
        if (Script > 0)
        {
          v50[Script] = 0;
          uint64_t v24 = MEMORY[0x185301F80](v50);
          uint64_t v60 = v25;
        }
      }
      uint64_t v62 = v24;
      MEMORY[0x1F4188790](v24);
      LODWORD(v63) = 0;
      String.utf8CString.getter();
      int Country = uloc_getCountry();
      swift_release();
      uint64_t v27 = 0;
      id v53 = a2;
      uint64_t v28 = 0;
      if ((int)v63 <= 0)
      {
        uint64_t v29 = v60;
        if (Country > 0)
        {
          v50[Country] = 0;
          uint64_t v27 = MEMORY[0x185301F80](v50, 0);
        }
      }
      else
      {
        uint64_t v29 = v60;
      }
      uint64_t v30 = v27;
      uint64_t v57 = v28;
      swift_bridgeObjectRelease();
      uint64_t v31 = v58;
      if (v58)
      {
        uint64_t v32 = v61;
        Swift::String v34 = String.lowercased()();
        uint64_t countAndFlagsBits = v34._countAndFlagsBits;
        unint64_t object = v34._object;
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t countAndFlagsBits = 0;
        unint64_t object = 0;
      }
      uint64_t v52 = countAndFlagsBits;
      if (v29)
      {
        uint64_t v63 = v62;
        uint64_t v64 = v29;
        swift_bridgeObjectRetain_n();
        String.init<A>(_:)();
        Swift::String v36 = String._capitalized()();
        uint64_t v56 = v36._countAndFlagsBits;
        id v59 = v36._object;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v62 = 0;
        uint64_t v56 = 0;
        id v59 = 0;
      }
      uint64_t v37 = v57;
      uint64_t v54 = v2;
      uint64_t v61 = v32;
      id v51 = object;
      if (v57)
      {
        Swift::String v38 = String.uppercased()();
        uint64_t v39 = v38._countAndFlagsBits;
        id v40 = v38._object;
        uint64_t v55 = v37;
        uint64_t v41 = v30;
        uint64_t v42 = v37;
      }
      else
      {
        uint64_t v63 = v32;
        uint64_t v64 = v31;
        uint64_t v65 = v52;
        uint64_t v66 = object;
        uint64_t v43 = v62;
        uint64_t v67 = v62;
        uint64_t v68 = v29;
        uint64_t v69 = v56;
        id v70 = v59;
        long long v71 = 0u;
        long long v72 = 0u;
        outlined copy of Locale.LanguageCode?(v32, v31);
        outlined copy of Locale.LanguageCode?(v43, v29);
        outlined copy of Locale.LanguageCode?(0, 0);
        uint64_t v30 = specialized _withFixedCharBuffer(size:_:)(257, &v63);
        id v40 = v44;
        outlined consume of Locale.LanguageCode?(v32, v31);
        outlined consume of Locale.LanguageCode?(v62, v29);
        outlined consume of Locale.LanguageCode?(0, 0);
        uint64_t v55 = (uint64_t)v40;
        if (v40)
        {
          Swift::String v45 = String.uppercased()();
          uint64_t v39 = v45._countAndFlagsBits;
          id v40 = v45._object;
        }
        else
        {
          uint64_t v30 = 0;
          uint64_t v55 = 0;
          uint64_t v39 = 0;
        }
        uint64_t v41 = 0;
        uint64_t v42 = v57;
      }
      outlined copy of Locale.LanguageCode?(v41, v42);
      outlined consume of Locale.LanguageCode?(v61, v58);
      outlined consume of Locale.LanguageCode?(v62, v60);
      outlined consume of Locale.LanguageCode?(v41, v42);
      uint64_t v46 = a1[41];
      uint64_t v47 = a1[42];
      uint64_t v48 = v55;
      outlined copy of Locale.LanguageCode?(v30, v55);
      uint64_t result = outlined consume of Locale.Subdivision??(v46, v47);
      a1[41] = v30;
      a1[42] = v48;
      a1[43] = v39;
      a1[44] = v40;
      id v49 = v53;
      v53->_uint64_t countAndFlagsBits = v30;
      v49->_unint64_t object = (void *)v48;
      v49[1]._uint64_t countAndFlagsBits = v39;
      v49[1]._unint64_t object = v40;
    }
    else
    {
      a2->_uint64_t countAndFlagsBits = result;
      a2->_unint64_t object = (void *)v6;
      a2[1]._uint64_t countAndFlagsBits = v7;
      a2[1]._unint64_t object = v8;
      return outlined copy of Locale.LanguageCode?(result, v6);
    }
  }
  else
  {
    a2->_uint64_t countAndFlagsBits = result;
    a2->_unint64_t object = 0;
    a2[1]._uint64_t countAndFlagsBits = v7;
    a2[1]._unint64_t object = v8;
  }
  return result;
}

uint64_t outlined consume of Locale.Subdivision??(uint64_t result, uint64_t a2)
{
  if (a2 != 1) {
    return outlined consume of Locale.LanguageCode?(result, a2);
  }
  return result;
}

uint64_t specialized _withFixedCharBuffer(size:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t (*)(uint64_t, char *, uint64_t, int *))MEMORY[0x1E4FBA660];

  return specialized _withFixedCharBuffer(size:_:)(a1, a2, v2);
}

{
  uint64_t (*v2)(uint64_t, char *, uint64_t, int *);
  uint64_t vars8;

  uint64_t v2 = (uint64_t (*)(uint64_t, char *, uint64_t, int *))MEMORY[0x1E4FBA688];

  return specialized _withFixedCharBuffer(size:_:)(a1, a2, v2);
}

{
  uint64_t (*v2)(uint64_t, char *, uint64_t, int *);
  uint64_t vars8;

  uint64_t v2 = (uint64_t (*)(uint64_t, char *, uint64_t, int *))MEMORY[0x1E4FBA5E0];

  return specialized _withFixedCharBuffer(size:_:)(a1, a2, v2);
}

uint64_t specialized _withFixedCharBuffer(size:_:)(uint64_t isStackAllocationSafe, uint64_t *a2, uint64_t (*a3)(uint64_t, char *, uint64_t, int *))
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  int v3 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_29:
    __break(1u);
  }
  if (v3 < 0) {
    goto LABEL_29;
  }
  uint64_t v6 = isStackAllocationSafe;
  if (v3 < 1025 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v8 = (char *)&v44 - v7;
    int v47 = 0;
    long long v9 = *((_OWORD *)a2 + 3);
    long long v50 = *((_OWORD *)a2 + 2);
    long long v51 = v9;
    long long v10 = *((_OWORD *)a2 + 5);
    long long v52 = *((_OWORD *)a2 + 4);
    long long v53 = v10;
    long long v11 = *((_OWORD *)a2 + 1);
    long long v48 = *(_OWORD *)a2;
    long long v49 = v11;
    outlined init with take of LocalePreferences?((uint64_t)&v48, (uint64_t)v56, &demangling cache variable for type metadata for Locale.LanguageCode?);
    uint64_t v45 = 0;
    unint64_t v46 = 0xE000000000000000;
    outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)v57, &demangling cache variable for type metadata for Locale.LanguageCode?);
    if (v58)
    {
      uint64_t v12 = v59;
      uint64_t v13 = v60;
      outlined retain of Locale.Language(a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
      v14._uint64_t countAndFlagsBits = v12;
      v14._unint64_t object = v13;
      String.append(_:)(v14);
    }
    else
    {
      outlined retain of Locale.Language(a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    }
    outlined init with take of LocalePreferences?((uint64_t)&v50, (uint64_t)v55, &demangling cache variable for type metadata for Locale.Script?);
    outlined init with take of LocalePreferences?((uint64_t)v55, (uint64_t)v61, &demangling cache variable for type metadata for Locale.Script?);
    if (v62)
    {
      uint64_t v15 = v63;
      uint64_t v16 = v64;
      v17._uint64_t countAndFlagsBits = 45;
      v17._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      v18._uint64_t countAndFlagsBits = v15;
      v18._unint64_t object = v16;
      String.append(_:)(v18);
    }
    outlined init with take of LocalePreferences?((uint64_t)&v52, (uint64_t)v54, &demangling cache variable for type metadata for Locale.Region?);
    outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v65, &demangling cache variable for type metadata for Locale.Region?);
    if (v66)
    {
      uint64_t v19 = v67;
      BOOL v20 = v68;
      v21._uint64_t countAndFlagsBits = 95;
      v21._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      v22._uint64_t countAndFlagsBits = v19;
      v22._unint64_t object = v20;
      String.append(_:)(v22);
    }
    outlined retain of Locale.Language(a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    uint64_t v23 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    int v24 = a3(v23 + 32, v8, v6, &v47);
    swift_release();
    uint64_t v25 = 0;
    if (v47 <= 0 && v24 > 0)
    {
      v8[v24] = 0;
      return MEMORY[0x185301F80](v8);
    }
  }
  else
  {
    uint64_t v26 = swift_slowAlloc();
    int v47 = 0;
    long long v27 = *((_OWORD *)a2 + 3);
    long long v50 = *((_OWORD *)a2 + 2);
    long long v51 = v27;
    long long v28 = *((_OWORD *)a2 + 5);
    long long v52 = *((_OWORD *)a2 + 4);
    long long v53 = v28;
    long long v29 = *((_OWORD *)a2 + 1);
    long long v48 = *(_OWORD *)a2;
    long long v49 = v29;
    outlined init with take of LocalePreferences?((uint64_t)&v48, (uint64_t)v56, &demangling cache variable for type metadata for Locale.LanguageCode?);
    uint64_t v45 = 0;
    unint64_t v46 = 0xE000000000000000;
    outlined init with take of LocalePreferences?((uint64_t)v56, (uint64_t)v57, &demangling cache variable for type metadata for Locale.LanguageCode?);
    if (v58)
    {
      uint64_t v30 = v59;
      uint64_t v31 = v60;
      outlined retain of Locale.Language(a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
      v32._uint64_t countAndFlagsBits = v30;
      v32._unint64_t object = v31;
      String.append(_:)(v32);
    }
    else
    {
      outlined retain of Locale.Language(a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    }
    outlined init with take of LocalePreferences?((uint64_t)&v50, (uint64_t)v55, &demangling cache variable for type metadata for Locale.Script?);
    outlined init with take of LocalePreferences?((uint64_t)v55, (uint64_t)v61, &demangling cache variable for type metadata for Locale.Script?);
    if (v62)
    {
      uint64_t v33 = v63;
      Swift::String v34 = v64;
      v35._uint64_t countAndFlagsBits = 45;
      v35._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = v33;
      v36._unint64_t object = v34;
      String.append(_:)(v36);
    }
    outlined init with take of LocalePreferences?((uint64_t)&v52, (uint64_t)v54, &demangling cache variable for type metadata for Locale.Region?);
    outlined init with take of LocalePreferences?((uint64_t)v54, (uint64_t)v65, &demangling cache variable for type metadata for Locale.Region?);
    if (v66)
    {
      uint64_t v37 = v67;
      Swift::String v38 = v68;
      v39._uint64_t countAndFlagsBits = 95;
      v39._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v39);
      v40._uint64_t countAndFlagsBits = v37;
      v40._unint64_t object = v38;
      String.append(_:)(v40);
    }
    outlined retain of Locale.Language(a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    uint64_t v41 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    int v42 = a3(v41 + 32, (char *)v26, v6, &v47);
    swift_release();
    uint64_t v25 = 0;
    if (v47 <= 0 && v42 > 0)
    {
      *(unsigned char *)(v26 + v42) = 0;
      uint64_t v25 = MEMORY[0x185301F80](v26);
    }
    MEMORY[0x185309510](v26, -1, -1);
  }
  return v25;
}

uint64_t *outlined retain of Locale.Language(uint64_t *a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  uint64_t v9 = a1[9];
  uint64_t v10 = a1[10];
  uint64_t v11 = a1[11];
  a2(*a1, a1[1], a1[2], a1[3]);
  a2(v4, v5, v6, v7);
  a2(v8, v9, v10, v11);
  return a1;
}

ValueMetadata *type metadata accessor for ICUDateFormatter.DateFormatInfo()
{
  return &type metadata for ICUDateFormatter.DateFormatInfo;
}

void *PropertyListEncoder.init()()
{
  uint64_t v1 = MEMORY[0x1E4FBC868];
  v0[2] = 200;
  v0[3] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  v0[4] = v2;
  return v0;
}

uint64_t type metadata accessor for ScopedAttributeContainer()
{
  return __swift_instantiateGenericMetadata();
}

id IndexSet.contains(integersIn:)(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)v1 + 16);
  int v3 = *(void **)(*(void *)a1 + 16);
  id v4 = v2;
  objc_msgSend(v3, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
  id v5 = objc_msgSend(v2, sel_containsIndexes_, v7);

  return v5;
}

__n128 protocol witness for Sequence.makeIterator() in conformance IndexSet@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v9 = *v1;
  uint64_t v3 = v9;
  IndexSet.startIndex.getter((uint64_t *)v7);
  uint64_t v4 = v8;
  __n128 result = (__n128)v7[0];
  long long v6 = v7[1];
  *(void *)a1 = v3;
  *(__n128 *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 24) = v6;
  *(void *)(a1 + 40) = v4;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance IndexSet.RangeView()
{
  return specialized Collection.count.getter(*v0, v0[1]);
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance IndexSet(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  swift_release();

  return swift_release();
}

char *IndexSet.symmetricDifference(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  id v6 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(unsigned char *)(v7 + 24) = 0;
  uint64_t v73 = v7;
  uint64_t v8 = *(void **)(v5 + 16);
  swift_retain();
  swift_retain();
  id v9 = objc_msgSend(v8, sel_rangeCount);
  uint64_t v71 = v4;
  __n128 result = (char *)objc_msgSend(*(id *)(v4 + 16), sel_rangeCount);
  BOOL v72 = v9 == 0;
  uint64_t v60 = result;
  if (!v9) {
    goto LABEL_9;
  }
  char v11 = *(unsigned char *)(v5 + 24);
  __n128 result = (char *)objc_msgSend(*(id *)(v5 + 16), sel_rangeAtIndex_, 0);
  uint64_t v69 = (uint64_t)result;
  uint64_t v13 = &result[v12];
  BOOL v14 = __OFADD__(result, v12);
  if (v11)
  {
    if (v14) {
      goto LABEL_155;
    }
    uint64_t v15 = result;
    if ((uint64_t)v13 < (uint64_t)result)
    {
      __break(1u);
LABEL_9:
      uint64_t v69 = 0;
      uint64_t v13 = 0;
      uint64_t v16 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    if (v14) {
      goto LABEL_156;
    }
    uint64_t v15 = result;
    if ((uint64_t)v13 < (uint64_t)result)
    {
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
      goto LABEL_159;
    }
  }
  if ((uint64_t)v13 < (uint64_t)v15) {
    goto LABEL_153;
  }
  uint64_t v16 = 1;
  __n128 result = v60;
LABEL_14:
  BOOL v17 = result == 0;
  uint64_t v58 = a2;
  id v59 = v9;
  uint64_t v62 = v16;
  uint64_t v64 = (uint64_t)v13;
  if (!result)
  {
LABEL_22:
    uint64_t v66 = 0;
    Swift::String v22 = 0;
LABEL_27:
    uint64_t v61 = 0;
    LOBYTE(v23) = 0;
    uint64_t v24 = 0;
    char v25 = 0;
    uint64_t v26 = 0;
    char v27 = 0;
    uint64_t v67 = v22;
    uint64_t v68 = (uint64_t)result;
    uint64_t v63 = (uint64_t)result;
    uint64_t v65 = v22;
    char v70 = v17;
LABEL_31:
    char v29 = v23;
    while (1)
    {
      if (v72)
      {
        uint64_t v30 = v5;
        if (v70)
        {
          swift_release();
          __n128 result = (char *)swift_release();
          uint64_t *v58 = v73;
          return result;
        }
        if (v26)
        {
          uint64_t v31 = (uint64_t)v65;
          if (v65 == (char *)0x7FFFFFFFFFFFFFFFLL)
          {
            uint64_t v32 = v66;
            uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
            if ((v25 & 1) == 0)
            {
              uint64_t v34 = v69;
              goto LABEL_81;
            }
            uint64_t v24 = 1;
            uint64_t v33 = v62;
            if ((id)v62 == v59)
            {
              uint64_t v34 = 0;
              Swift::String v35 = 0;
              uint64_t v36 = (uint64_t)v59;
              goto LABEL_110;
            }
            BOOL v17 = 0;
            uint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v68 = v63;
            uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_95:
            uint64_t v67 = (char *)v46;
            goto LABEL_96;
          }
          goto LABEL_52;
        }
        uint64_t v31 = v63;
        if (v63 == 0x7FFFFFFFFFFFFFFFLL)
        {
          BOOL v17 = 0;
          if ((v25 & 1) == 0)
          {
            char v70 = 0;
            char v39 = 0;
            uint64_t v38 = 1;
            uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v26 = 1;
            uint64_t v67 = v65;
            uint64_t v68 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v63 = 0x7FFFFFFFFFFFFFFFLL;
            BOOL v72 = 1;
            goto LABEL_128;
          }
          uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v33 = v62;
          if ((id)v62 == v59)
          {
            uint64_t v38 = 1;
            uint64_t v62 = (uint64_t)v59;
            uint64_t v26 = 1;
            uint64_t v68 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v69 = 0;
            uint64_t v67 = v65;
            uint64_t v63 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v64 = 0;
            char v70 = 0;
            BOOL v72 = 1;
            char v39 = 1;
            goto LABEL_128;
          }
          uint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v24 = 0;
          uint64_t v68 = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v46 = (uint64_t)v65;
          goto LABEL_95;
        }
        BOOL v17 = 0;
        char v70 = 0;
        uint64_t v67 = v65;
        uint64_t v68 = v63;
      }
      else
      {
        uint64_t v30 = v5;
        if (v17)
        {
          if (v27)
          {
            uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v33 = v62;
            if ((id)v62 != v59)
            {
              BOOL v17 = 1;
              uint64_t v41 = v64;
              goto LABEL_96;
            }
            uint64_t v34 = 0;
            BOOL v72 = 1;
            uint64_t v37 = 0;
            uint64_t v36 = (uint64_t)v59;
            BOOL v17 = 1;
            if (v64 == 0x7FFFFFFFFFFFFFFFLL) {
              goto LABEL_108;
            }
            uint64_t v31 = v64;
            uint64_t v38 = v24;
            uint64_t v62 = (uint64_t)v59;
            uint64_t v69 = 0;
            uint64_t v64 = 0;
            char v39 = 1;
            goto LABEL_128;
          }
          uint64_t v31 = v69;
          if (v69 != 0x7FFFFFFFFFFFFFFFLL)
          {
            BOOL v72 = 0;
            char v39 = 0;
            BOOL v17 = 1;
            uint64_t v38 = v24;
            goto LABEL_128;
          }
          if ((v24 & 1) == 0)
          {
            BOOL v72 = 0;
            char v39 = 0;
            uint64_t v38 = 1;
            uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v26 = 1;
            BOOL v17 = 1;
            uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_128;
          }
          uint64_t v38 = 0;
          uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v32 = v66;
          if ((char *)v66 == v60)
          {
            uint64_t v67 = 0;
            uint64_t v68 = 0;
            uint64_t v63 = 0;
            uint64_t v65 = 0;
            uint64_t v66 = (uint64_t)v60;
            BOOL v17 = 1;
            uint64_t v26 = 0;
            char v70 = 1;
            uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
            BOOL v72 = 0;
            char v39 = 0;
            goto LABEL_128;
          }
          uint64_t v34 = 0x7FFFFFFFFFFFFFFFLL;
          BOOL v72 = 0;
          goto LABEL_115;
        }
        uint64_t v40 = v64;
        if ((v27 & 1) == 0) {
          uint64_t v40 = v69;
        }
        if (v26) {
          uint64_t v31 = (uint64_t)v67;
        }
        else {
          uint64_t v31 = v68;
        }
        if (v31 >= v40)
        {
          if (v27)
          {
            BOOL v17 = 0;
            uint64_t v33 = v62;
            if ((id)v62 == v59)
            {
              uint64_t v34 = 0;
              uint64_t v37 = 0;
              BOOL v72 = 1;
              uint64_t v36 = (uint64_t)v59;
              uint64_t v24 = v26;
              uint64_t v41 = v64;
              if (v64 != v31) {
                goto LABEL_65;
              }
LABEL_108:
              if ((v24 & 1) == 0)
              {
                uint64_t v69 = v34;
                uint64_t v62 = v36;
                uint64_t v38 = 1;
                uint64_t v26 = 1;
                uint64_t v64 = (uint64_t)v37;
                char v39 = 1;
                goto LABEL_128;
              }
              Swift::String v35 = v37;
              LOBYTE(v24) = v72;
LABEL_110:
              BOOL v17 = 1;
              uint64_t v62 = v36;
              if ((char *)v66 == v60)
              {
                uint64_t v68 = 0;
                uint64_t v69 = v34;
                uint64_t v63 = 0;
                uint64_t v64 = (uint64_t)v35;
                uint64_t v38 = 0;
                uint64_t v26 = 0;
                uint64_t v66 = (uint64_t)v60;
                uint64_t v67 = 0;
                uint64_t v65 = 0;
                char v70 = 1;
                BOOL v72 = v24;
                char v39 = 1;
                goto LABEL_128;
              }
              BOOL v72 = v24;
              char v39 = 1;
              uint64_t v32 = v66;
LABEL_116:
              char v51 = *(unsigned char *)(v71 + 24);
              __n128 result = (char *)objc_msgSend(*(id *)(v71 + 16), sel_rangeAtIndex_, v32, v58);
              long long v53 = &result[v52];
              BOOL v54 = __OFADD__(result, v52);
              if (v51)
              {
                if (v54) {
                  goto LABEL_145;
                }
                if ((uint64_t)v53 < (uint64_t)result) {
                  goto LABEL_146;
                }
              }
              else
              {
                if (v54) {
                  goto LABEL_147;
                }
                if ((uint64_t)v53 < (uint64_t)result) {
                  goto LABEL_148;
                }
              }
              if ((uint64_t)v53 < (uint64_t)result) {
                goto LABEL_137;
              }
              BOOL v50 = __OFADD__(v32, 1);
              uint64_t v55 = v32 + 1;
              if (v50) {
                goto LABEL_138;
              }
              uint64_t v68 = (uint64_t)result;
              uint64_t v69 = v34;
              uint64_t v66 = v55;
              uint64_t v67 = &result[v52];
              uint64_t v63 = (uint64_t)result;
              uint64_t v64 = (uint64_t)v35;
              uint64_t v38 = 0;
              uint64_t v26 = 0;
              BOOL v17 = 0;
              char v70 = 0;
              uint64_t v65 = &result[v52];
              goto LABEL_128;
            }
            uint64_t v24 = v26;
            uint64_t v41 = v64;
LABEL_96:
            char v47 = *(unsigned char *)(v30 + 24);
            __n128 result = (char *)objc_msgSend(*(id *)(v30 + 16), sel_rangeAtIndex_, v33, v58);
            uint64_t v34 = (uint64_t)result;
            uint64_t v37 = &result[v48];
            BOOL v49 = __OFADD__(result, v48);
            if (v47)
            {
              if (v49) {
                goto LABEL_141;
              }
              if ((uint64_t)v37 < (uint64_t)result) {
                goto LABEL_142;
              }
            }
            else
            {
              if (v49) {
                goto LABEL_143;
              }
              if ((uint64_t)v37 < (uint64_t)result) {
                goto LABEL_144;
              }
            }
            if ((uint64_t)v37 < (uint64_t)result) {
              goto LABEL_135;
            }
            BOOL v50 = __OFADD__(v33, 1);
            uint64_t v36 = v33 + 1;
            if (v50) {
              goto LABEL_136;
            }
            BOOL v72 = 0;
            if (v41 == v31) {
              goto LABEL_108;
            }
LABEL_65:
            uint64_t v69 = v34;
            uint64_t v62 = v36;
            char v39 = 1;
            uint64_t v31 = v41;
            uint64_t v38 = v24;
            uint64_t v64 = (uint64_t)v37;
LABEL_128:
            char v25 = v39 ^ 1;
            uint64_t v24 = v38;
            char v27 = v39 ^ 1;
            goto LABEL_129;
          }
          uint64_t v34 = v69;
          if (v69 != v31)
          {
            BOOL v17 = 0;
            BOOL v72 = 0;
            char v39 = 0;
            uint64_t v31 = v69;
            uint64_t v38 = v26;
            goto LABEL_128;
          }
          uint64_t v31 = v69;
          uint64_t v32 = v66;
          if ((v26 & 1) == 0)
          {
            BOOL v17 = 0;
            BOOL v72 = 0;
            char v39 = 0;
            uint64_t v38 = 1;
            uint64_t v31 = v69;
            uint64_t v26 = 1;
            goto LABEL_128;
          }
LABEL_81:
          uint64_t v38 = 0;
          if ((char *)v32 == v60)
          {
            uint64_t v67 = 0;
            uint64_t v68 = 0;
            uint64_t v63 = 0;
            uint64_t v65 = 0;
            uint64_t v66 = (uint64_t)v60;
            BOOL v17 = 1;
            uint64_t v26 = 0;
            char v70 = 1;
            char v39 = 0;
            goto LABEL_128;
          }
LABEL_115:
          char v39 = 0;
          Swift::String v35 = (char *)v64;
          goto LABEL_116;
        }
        if (v26)
        {
          uint64_t v31 = (uint64_t)v67;
          char v25 = v27;
LABEL_52:
          if ((char *)v66 == v60)
          {
            uint64_t v67 = 0;
            uint64_t v68 = 0;
            uint64_t v63 = 0;
            uint64_t v65 = 0;
            uint64_t v66 = (uint64_t)v60;
            BOOL v17 = 1;
            char v70 = 1;
          }
          else
          {
            char v42 = *(unsigned char *)(v71 + 24);
            __n128 result = (char *)objc_msgSend(*(id *)(v71 + 16), sel_rangeAtIndex_, v66);
            uint64_t v44 = &result[v43];
            BOOL v45 = __OFADD__(result, v43);
            if (v42)
            {
              if (v45) {
                goto LABEL_149;
              }
              if ((uint64_t)v44 < (uint64_t)result) {
                goto LABEL_150;
              }
            }
            else
            {
              if (v45) {
                goto LABEL_151;
              }
              if ((uint64_t)v44 < (uint64_t)result) {
                goto LABEL_152;
              }
            }
            if ((uint64_t)v44 < (uint64_t)result) {
              goto LABEL_139;
            }
            if (__OFADD__(v66, 1)) {
              goto LABEL_140;
            }
            ++v66;
            uint64_t v67 = &result[v43];
            BOOL v17 = 0;
            char v70 = 0;
            uint64_t v68 = (uint64_t)result;
            uint64_t v63 = (uint64_t)result;
            uint64_t v65 = &result[v43];
          }
          goto LABEL_89;
        }
        BOOL v17 = 0;
        uint64_t v31 = v68;
        char v25 = v27;
      }
LABEL_89:
      uint64_t v24 = v26 ^ 1;
      uint64_t v26 = v24;
LABEL_129:
      uint64_t v5 = v30;
      unsigned int v56 = objc_msgSend(*(id *)(v30 + 16), sel_containsIndex_, v31, v58);
      unsigned int v57 = objc_msgSend(*(id *)(v71 + 16), sel_containsIndex_, v31);
      int v23 = v56 ^ v57;
      if ((v29 & 1) == 0)
      {
        uint64_t v28 = v61;
        if (v23) {
          uint64_t v28 = v31;
        }
        uint64_t v61 = v28;
        goto LABEL_31;
      }
      char v29 = v56 ^ v57;
      if ((v23 & 1) == 0)
      {
        __n128 result = (char *)v61;
        if (v31 >= v61)
        {
          IndexSet.insert(integersIn:)(v61, v31);
          goto LABEL_31;
        }
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
        goto LABEL_157;
      }
    }
  }
  char v18 = *(unsigned char *)(v4 + 24);
  __n128 result = (char *)objc_msgSend(*(id *)(v4 + 16), sel_rangeAtIndex_, 0);
  BOOL v20 = &result[v19];
  BOOL v21 = __OFADD__(result, v19);
  if (v18)
  {
    if (!v21)
    {
      if ((uint64_t)v20 < (uint64_t)result)
      {
        __break(1u);
        goto LABEL_22;
      }
LABEL_25:
      if ((uint64_t)v20 < (uint64_t)result) {
        goto LABEL_154;
      }
      uint64_t v66 = 1;
      Swift::String v22 = &result[v19];
      goto LABEL_27;
    }
    goto LABEL_158;
  }
  if (v21)
  {
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }
  if ((uint64_t)v20 >= (uint64_t)result) {
    goto LABEL_25;
  }
LABEL_160:
  __break(1u);
  return result;
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance IndexSet(uint64_t *a1)
{
  uint64_t v2 = *v1;
  v4[0] = *a1;
  v4[1] = v2;
  IndexSet.intersection(_:)(v4, (uint64_t)&v5);
  uint64_t result = swift_release();
  *uint64_t v1 = v5;
  return result;
}

uint64_t IndexSet.formUnion(_:)(void *a1, void (*a2)(uint64_t *__return_ptr, void *))
{
  uint64_t v3 = *v2;
  v5[0] = *a1;
  v5[1] = v3;
  a2(&v6, v5);
  uint64_t result = swift_release();
  *uint64_t v2 = v6;
  return result;
}

char *IndexSet.union(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void **)(v4 + 16);
  swift_retain();
  uint64_t v6 = specialized Collection.count.getter(0, (uint64_t)objc_msgSend(v5, sel_rangeCount));
  swift_release();
  uint64_t v7 = *(void **)(v3 + 16);
  swift_retain();
  uint64_t v8 = specialized Collection.count.getter(0, (uint64_t)objc_msgSend(v7, sel_rangeCount));
  swift_release();
  if (v8 >= v6) {
    uint64_t v9 = v3;
  }
  else {
    uint64_t v9 = v4;
  }
  if (v8 < v6) {
    uint64_t v4 = v3;
  }
  swift_retain();
  uint64_t v10 = *(void **)(v4 + 16);
  swift_retain();
  id v11 = objc_msgSend(v10, sel_rangeCount);
  if (!v11)
  {
    uint64_t result = (char *)swift_release();
LABEL_33:
    *a2 = v9;
    return result;
  }
  id v12 = v11;
  swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    char v18 = *(unsigned char *)(v4 + 24);
    uint64_t result = (char *)objc_msgSend(*(id *)(v4 + 16), sel_rangeAtIndex_, v13);
    uint64_t v19 = result;
    BOOL v21 = &result[v20];
    BOOL v22 = __OFADD__(result, v20);
    if (v18)
    {
      if (v22) {
        goto LABEL_37;
      }
      if ((uint64_t)v21 < (uint64_t)result) {
        goto LABEL_38;
      }
    }
    else
    {
      if (v22) {
        goto LABEL_39;
      }
      if ((uint64_t)v21 < (uint64_t)result) {
        goto LABEL_40;
      }
    }
    if ((uint64_t)v21 < (uint64_t)result) {
      break;
    }
    id v23 = (id)(v13 + 1);
    if (__OFADD__(v13, 1)) {
      goto LABEL_35;
    }
    if ((*(unsigned char *)(v9 + 24) & 1) == 0)
    {
      uint64_t result = *(char **)(v9 + 16);
LABEL_9:
      uint64_t v15 = result;
      objc_msgSend(v15, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v26;
      *(unsigned char *)(v16 + 24) = 1;
      id v17 = v26;
      uint64_t result = (char *)swift_release();
      if (__OFSUB__(v21, v19)) {
        goto LABEL_36;
      }
LABEL_10:
      objc_msgSend(v17, sel_addIndexesInRange_, v19);

      uint64_t v9 = v16;
      goto LABEL_11;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t result = *(char **)(v9 + 16);
    if ((*(unsigned char *)(v9 + 24) & 1) == 0) {
      goto LABEL_9;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v15 = result;
      objc_msgSend(v15, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v26;
      *(unsigned char *)(v16 + 24) = 1;
      id v17 = v26;
      swift_release();
      if (__OFSUB__(v21, v19))
      {
        __break(1u);
LABEL_31:
        uint64_t result = (char *)swift_release_n();
        goto LABEL_33;
      }
      goto LABEL_10;
    }
    if (__OFSUB__(v21, v19)) {
      goto LABEL_41;
    }
    objc_msgSend(result, sel_addIndexesInRange_, v19, v21 - v19);
LABEL_11:
    ++v13;
    if (v23 == v12) {
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Collection.count.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 - a1;
  BOOL v3 = a2 < a1;
  if (a2 <= a1)
  {
    uint64_t result = 0;
    if (!v3) {
      return result;
    }
    unint64_t v7 = ~a2 + a1;
    unint64_t v8 = a1 ^ 0x8000000000000000;
    if (v7 >= v8) {
      unint64_t v7 = v8;
    }
    unint64_t v9 = 0x8000000000000000;
    if (v7 < 0x8000000000000000) {
      unint64_t v9 = v7;
    }
    while ((v7 & 0x8000000000000000) == 0)
    {
      if (v8 == v9) {
        goto LABEL_18;
      }
      if (v4 == --result) {
        return result;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v6 = ~a1 + a2;
    while (v6 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v4 == ++result) {
        return result;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t IndexSet.intersection(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  id v6 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(unsigned char *)(v7 + 24) = 0;
  v27[0] = v5;
  uint64_t v28 = (void *)v4;
  swift_retain();
  swift_retain();
  IndexSetBoundaryIterator.init(_:_:)(v27, (uint64_t *)&v28, (uint64_t)v29);
  unint64_t v8 = IndexSetBoundaryIterator.next()();
  if (v9)
  {
LABEL_30:
    swift_release();
    uint64_t result = swift_release();
    *(void *)a2 = v7;
    return result;
  }
  uint64_t v10 = v8;
  char v11 = 0;
  id v12 = 0;
  uint64_t v25 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v26 = a2;
  while (1)
  {
    if ((v11 & 1) == 0)
    {
      if (!objc_msgSend(*(id *)(v5 + 16), sel_containsIndex_, v10)
        || (objc_msgSend(*(id *)(v4 + 16), sel_containsIndex_, v10) & 1) == 0)
      {
        uint64_t v13 = IndexSetBoundaryIterator.next()();
        if (v14) {
          goto LABEL_30;
        }
        uint64_t v10 = v13;
        while (!objc_msgSend(*(id *)(v5 + 16), sel_containsIndex_, v10, v25)
             || (objc_msgSend(*(id *)(v4 + 16), sel_containsIndex_, v10) & 1) == 0)
        {
          uint64_t v10 = IndexSetBoundaryIterator.next()();
          if (v15) {
            goto LABEL_30;
          }
        }
      }
      uint64_t v16 = IndexSetBoundaryIterator.next()();
      if (v17) {
        goto LABEL_30;
      }
      id v12 = v10;
      uint64_t v10 = v16;
    }
    uint64_t result = (uint64_t)objc_msgSend(*(id *)(v5 + 16), sel_containsIndex_, v10, v25);
    if (result)
    {
      uint64_t result = (uint64_t)objc_msgSend(*(id *)(v4 + 16), sel_containsIndex_, v10);
      if (result)
      {
        char v11 = 1;
        goto LABEL_25;
      }
    }
    if ((uint64_t)v10 < (uint64_t)v12) {
      break;
    }
    if ((*(unsigned char *)(v7 + 24) & 1) == 0)
    {
      uint64_t result = *(void *)(v7 + 16);
LABEL_23:
      id v20 = (id)result;
      objc_msgSend(v20, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      BOOL v21 = v28;
      a2 = swift_allocObject();
      *(void *)(a2 + 16) = v21;
      *(unsigned char *)(a2 + 24) = 1;
      id v22 = v21;
      uint64_t result = swift_release();
      if (__OFSUB__(v10, v12)) {
        goto LABEL_32;
      }
LABEL_24:
      objc_msgSend(v22, sel_addIndexesInRange_, v12);

      char v11 = 0;
      uint64_t v7 = a2;
      a2 = v26;
      goto LABEL_25;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t result = *(void *)(v7 + 16);
    if ((*(unsigned char *)(v7 + 24) & 1) == 0) {
      goto LABEL_23;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      id v20 = (id)result;
      objc_msgSend(v20, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
      swift_dynamicCast();
      uint64_t v24 = v28;
      a2 = swift_allocObject();
      *(void *)(a2 + 16) = v24;
      *(unsigned char *)(a2 + 24) = 1;
      id v22 = v24;
      swift_release();
      if (__OFSUB__(v10, v12))
      {
        __break(1u);
        goto LABEL_30;
      }
      goto LABEL_24;
    }
    if (__OFSUB__(v10, v12)) {
      goto LABEL_33;
    }
    objc_msgSend((id)result, sel_addIndexesInRange_, v12, v10 - v12);
    char v11 = 0;
LABEL_25:
    uint64_t v10 = IndexSetBoundaryIterator.next()();
    if (v23) {
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t protocol witness for SetAlgebra.init() in conformance IndexSet@<X0>(uint64_t *a1@<X8>)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(unsigned char *)(result + 24) = 0;
  *a1 = result;
  return result;
}

uint64_t IndexSet.init()@<X0>(uint64_t *a1@<X8>)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(unsigned char *)(result + 24) = 0;
  *a1 = result;
  return result;
}

char *IndexSetBoundaryIterator.next()()
{
  if (*(unsigned char *)(v0 + 80) == 1)
  {
    if (*(unsigned char *)(v0 + 104)) {
      return 0;
    }
    uint64_t v4 = (BOOL *)(v0 + 104);
    uint64_t v5 = (void *)(v0 + 88);
    id v6 = (char **)(v0 + 96);
    uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v2 = 64;
    if (*(unsigned char *)(v0 + 105)) {
      uint64_t v2 = 72;
    }
    uint64_t v3 = *(void *)(v0 + v2);
    uint64_t v4 = (BOOL *)(v0 + 104);
    uint64_t v5 = (void *)(v0 + 88);
    id v6 = (char **)(v0 + 96);
    if (*(unsigned char *)(v0 + 104))
    {
      uint64_t v1 = 0x7FFFFFFFFFFFFFFFLL;
      if (*(unsigned char *)(v0 + 105)) {
        goto LABEL_19;
      }
      if (v3 == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v7 = 0;
        uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
        if (*(unsigned char *)(v0 + 106)) {
          goto LABEL_46;
        }
LABEL_23:
        char v12 = 1;
LABEL_69:
        *(unsigned char *)(v0 + 106) = v12;
        goto LABEL_70;
      }
LABEL_31:
      LOBYTE(v7) = 0;
LABEL_70:
      *(unsigned char *)(v0 + 105) = v7 ^ 1;
      return (char *)v3;
    }
  }
  uint64_t v8 = *(unsigned __int8 *)(v0 + 106);
  uint64_t v9 = 88;
  if (*(unsigned char *)(v0 + 106)) {
    uint64_t v9 = 96;
  }
  uint64_t v1 = *(void *)(v0 + v9);
  if (v1 < v3)
  {
    if (!*(unsigned char *)(v0 + 106))
    {
LABEL_62:
      *(unsigned char *)(v0 + 106) = v8 ^ 1;
      return (char *)v1;
    }
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v3 = *(void *)(v0 + 40);
    if (v7 == v3)
    {
      uint64_t result = 0;
      char v11 = 0;
LABEL_61:
      *uint64_t v5 = result;
      *id v6 = v11;
      *uint64_t v4 = v7 == v3;
      goto LABEL_62;
    }
    uint64_t v17 = *(void *)(v0 + 48);
    char v18 = *(unsigned char *)(v17 + 24);
    uint64_t result = (char *)objc_msgSend(*(id *)(v17 + 16), sel_rangeAtIndex_, *(void *)(v0 + 56));
    char v11 = &result[v19];
    BOOL v16 = __OFADD__(result, v19);
    if ((v18 & 1) == 0) {
      goto LABEL_56;
    }
    if (v16)
    {
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    if ((uint64_t)v11 >= (uint64_t)result)
    {
LABEL_58:
      if ((uint64_t)v11 >= (uint64_t)result)
      {
        if (!__OFADD__(v7, 1))
        {
          *(void *)(v0 + 56) = v7 + 1;
          goto LABEL_61;
        }
        goto LABEL_78;
      }
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
    __break(1u);
LABEL_39:
    if (v16)
    {
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    if ((uint64_t)v11 < (uint64_t)result)
    {
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    goto LABEL_41;
  }
  if ((*(unsigned char *)(v0 + 105) & 1) == 0)
  {
    if (v3 == v1)
    {
      uint64_t v7 = 0;
      if (*(unsigned char *)(v0 + 106)) {
        goto LABEL_46;
      }
      goto LABEL_23;
    }
    goto LABEL_31;
  }
LABEL_19:
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = *(void *)(v0 + 8);
  if (v7 == v8)
  {
    uint64_t result = 0;
    char v11 = 0;
    goto LABEL_44;
  }
  uint64_t v13 = *(void *)(v0 + 16);
  char v14 = *(unsigned char *)(v13 + 24);
  uint64_t result = (char *)objc_msgSend(*(id *)(v13 + 16), sel_rangeAtIndex_, *(void *)(v0 + 24));
  char v11 = &result[v15];
  BOOL v16 = __OFADD__(result, v15);
  if ((v14 & 1) == 0) {
    goto LABEL_39;
  }
  if (v16)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  if ((uint64_t)v11 < (uint64_t)result)
  {
    __break(1u);
    goto LABEL_31;
  }
LABEL_41:
  if ((uint64_t)v11 < (uint64_t)result)
  {
    __break(1u);
    goto LABEL_73;
  }
  if (__OFADD__(v7, 1))
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  *(void *)(v0 + 24) = v7 + 1;
LABEL_44:
  *(void *)(v0 + 64) = result;
  *(void *)(v0 + 72) = v11;
  *(unsigned char *)(v0 + 80) = v7 == v8;
  if (v3 != v1)
  {
    LOBYTE(v7) = 1;
    goto LABEL_70;
  }
  uint64_t v7 = 1;
  char v12 = 1;
  if ((*(unsigned char *)(v0 + 106) & 1) == 0) {
    goto LABEL_69;
  }
LABEL_46:
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v8 = *(void *)(v0 + 40);
  if (v1 == v8)
  {
    uint64_t result = 0;
    char v11 = 0;
LABEL_68:
    char v12 = 0;
    *uint64_t v5 = result;
    *id v6 = v11;
    *uint64_t v4 = v1 == v8;
    goto LABEL_69;
  }
  uint64_t v20 = *(void *)(v0 + 48);
  char v21 = *(unsigned char *)(v20 + 24);
  uint64_t result = (char *)objc_msgSend(*(id *)(v20 + 16), sel_rangeAtIndex_, *(void *)(v0 + 56));
  char v11 = &result[v22];
  BOOL v16 = __OFADD__(result, v22);
  if (v21)
  {
    if (v16)
    {
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    if ((uint64_t)v11 < (uint64_t)result)
    {
      __break(1u);
LABEL_56:
      if (v16)
      {
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
      if ((uint64_t)v11 < (uint64_t)result)
      {
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
      goto LABEL_58;
    }
LABEL_65:
    if ((uint64_t)v11 >= (uint64_t)result)
    {
      if (!__OFADD__(v1, 1))
      {
        *(void *)(v0 + 56) = v1 + 1;
        goto LABEL_68;
      }
      goto LABEL_80;
    }
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  if (v16)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  if ((uint64_t)v11 >= (uint64_t)result) {
    goto LABEL_65;
  }
LABEL_86:
  __break(1u);
  return result;
}

char *IndexSetBoundaryIterator.init(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  id v6 = objc_msgSend(*(id *)(*a1 + 16), sel_rangeCount);
  id v7 = objc_msgSend(*(id *)(v5 + 16), sel_rangeCount);
  if (!v6)
  {
LABEL_9:
    uint64_t v10 = 0;
    char v12 = 0;
    uint64_t v14 = 0;
    if (!v7)
    {
LABEL_10:
      uint64_t result = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
LABEL_26:
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = v6;
      *(void *)(a3 + 16) = v4;
      *(void *)(a3 + 24) = v14;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = v7;
      *(void *)(a3 + 48) = v5;
      *(void *)(a3 + 56) = v16;
      *(void *)(a3 + 64) = v10;
      *(void *)(a3 + 72) = v12;
      *(unsigned char *)(a3 + 80) = v6 == 0;
      *(void *)(a3 + 88) = result;
      *(void *)(a3 + 96) = v15;
      *(unsigned char *)(a3 + 104) = v7 == 0;
      *(_WORD *)(a3 + 105) = 0;
      return result;
    }
    goto LABEL_15;
  }
  char v8 = *(unsigned char *)(v4 + 24);
  uint64_t result = (char *)objc_msgSend(*(id *)(v4 + 16), sel_rangeAtIndex_, 0);
  uint64_t v10 = result;
  char v12 = &result[v11];
  BOOL v13 = __OFADD__(result, v11);
  if (v8)
  {
    if (v13)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if ((uint64_t)v12 < (uint64_t)result)
    {
      __break(1u);
      goto LABEL_9;
    }
  }
  else
  {
    if (v13)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if ((uint64_t)v12 < (uint64_t)result)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  if ((uint64_t)v12 < (uint64_t)result)
  {
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v14 = 1;
  if (!v7) {
    goto LABEL_10;
  }
LABEL_15:
  char v17 = *(unsigned char *)(v5 + 24);
  uint64_t result = (char *)objc_msgSend(*(id *)(v5 + 16), sel_rangeAtIndex_, 0);
  uint64_t v15 = &result[v18];
  BOOL v19 = __OFADD__(result, v18);
  if (v17)
  {
    if (v19)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if ((uint64_t)v15 >= (uint64_t)result) {
      goto LABEL_24;
    }
    __break(1u);
  }
  if (v19)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if ((uint64_t)v15 >= (uint64_t)result)
  {
LABEL_24:
    if ((uint64_t)v15 >= (uint64_t)result)
    {
      uint64_t v16 = 1;
      goto LABEL_26;
    }
    goto LABEL_28;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance IndexSet.RangeView(char **a1, uint64_t *a2))(void, void)
{
  *a1 = IndexSet.RangeView.subscript.getter(*a2);
  a1[1] = v3;
  return destructiveProjectEnumData for PredicateCodableError;
}

char *IndexSet.RangeView.subscript.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  char v3 = *(unsigned char *)(v2 + 24);
  uint64_t result = (char *)objc_msgSend(*(id *)(v2 + 16), sel_rangeAtIndex_, a1);
  BOOL v6 = __OFADD__(result, v5);
  id v7 = &result[v5];
  char v8 = v6;
  if (v3)
  {
    if (v8)
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    if ((uint64_t)v7 >= (uint64_t)result)
    {
LABEL_10:
      if ((uint64_t)v7 >= (uint64_t)result) {
        return result;
      }
      __break(1u);
      goto LABEL_12;
    }
    __break(1u);
  }
  if (v8)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((uint64_t)v7 >= (uint64_t)result) {
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
  return result;
}

__n128 IndexSet.makeIterator()@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v9 = *v1;
  uint64_t v3 = v9;
  swift_retain();
  IndexSet.startIndex.getter((uint64_t *)v7);
  uint64_t v4 = v8;
  __n128 result = (__n128)v7[0];
  long long v6 = v7[1];
  *(void *)a1 = v3;
  *(__n128 *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 24) = v6;
  *(void *)(a1 + 40) = v4;
  return result;
}

uint64_t IndexSet.startIndex.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = (uint64_t)objc_msgSend(*(id *)(*v1 + 16), sel_rangeCount);
  if (result < 1) {
    goto LABEL_9;
  }
  char v5 = *(unsigned char *)(v3 + 24);
  uint64_t result = (uint64_t)objc_msgSend(*(id *)(v3 + 16), sel_rangeAtIndex_, 0);
  uint64_t v6 = result;
  uint64_t v8 = result + v7;
  BOOL v9 = __OFADD__(result, v7);
  if (v5)
  {
    if (!v9)
    {
      if (v8 < result)
      {
        __break(1u);
LABEL_9:
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        a1[3] = -1;
LABEL_13:
        a1[4] = result;
        return result;
      }
LABEL_12:
      uint64_t result = (uint64_t)objc_msgSend(*(id *)(v3 + 16), sel_rangeCount);
      *a1 = v6;
      a1[1] = v6;
      a1[2] = v8;
      a1[3] = 0;
      goto LABEL_13;
    }
    __break(1u);
    goto LABEL_15;
  }
  if (v9)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v8 >= result) {
    goto LABEL_12;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t IndexSet.endIndex.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *(unsigned char *)(*v1 + 24);
  uint64_t result = (uint64_t)objc_msgSend(*(id *)(*v1 + 16), sel_rangeCount);
  uint64_t v6 = result;
  uint64_t v7 = result - 1;
  BOOL v8 = __OFSUB__(result, 1);
  if (v4)
  {
    if (!v8)
    {
      uint64_t v9 = result - 1;
      if (result < 1) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v8) {
    goto LABEL_23;
  }
  if (result <= 0) {
    goto LABEL_18;
  }
  uint64_t v9 = result - 1;
LABEL_11:
  uint64_t v10 = *(void **)(v3 + 16);
  char v11 = *(unsigned char *)(v3 + 24);
  uint64_t result = (uint64_t)objc_msgSend(v10, sel_rangeAtIndex_, v9);
  uint64_t v13 = result + v12;
  BOOL v14 = __OFADD__(result, v12);
  if (v11)
  {
    if (!v14)
    {
      if (v13 >= result)
      {
LABEL_21:
        *a1 = v13;
        a1[1] = result;
        a1[2] = v13;
        a1[3] = v7;
        a1[4] = v6;
        return result;
      }
      __break(1u);
LABEL_18:
      uint64_t v13 = 0;
      uint64_t result = 0;
      goto LABEL_21;
    }
    goto LABEL_24;
  }
  if (v14)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v13 >= result) {
    goto LABEL_21;
  }
LABEL_26:
  __break(1u);
  return result;
}

void service_connection_handler(_xpc_connection_s *a1)
{
  uint64_t v2 = +[NSXPCListener serviceListener];

  service_connection_handler_make_connection(v2, a1);
}

uint64_t destroy for AttributedString.Runs.Run()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t PredicateArchivingState.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void *__cdecl NSZoneMalloc(NSZone *zone, NSUInteger size)
{
  if (!zone) {
    zone = (NSZone *)malloc_default_zone();
  }

  return malloc_type_zone_malloc((malloc_zone_t *)zone, size, 0x4A6F13AEuLL);
}

uint64_t initializeWithCopy for SortDescriptor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  char v5 = (void *)(a1 + 24);
  uint64_t v6 = a2 + 24;
  int v7 = *(unsigned __int8 *)(a2 + 120);
  swift_bridgeObjectRetain();
  if (v7 == 2)
  {
    long long v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 48) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 24, v6);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    uint64_t v10 = *(void *)(a2 + 104);
    uint64_t v9 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = v9;
    *(unsigned char *)(a1 + 120) = 2;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else if (v7 == 1)
  {
    *char v5 = *(void *)v6;
    *(_WORD *)(a1 + 32) = *(_WORD *)(v6 + 8);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 120) = 1;
    swift_retain();
  }
  else if (v7)
  {
    long long v11 = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a1 + 104) = v11;
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(v6 + 96);
    long long v12 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)char v5 = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 40) = v12;
    long long v13 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(a1 + 72) = v13;
  }
  else
  {
    *char v5 = *(void *)v6;
    *(_WORD *)(a1 + 32) = *(_WORD *)(v6 + 8);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 120) = 0;
    swift_retain();
  }
  return a1;
}

void __Block_byref_object_copy__77(uint64_t a1, uint64_t a2)
{
}

uint64_t type metadata completion function for NSDecimal.FormatStyle.Currency()
{
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for FloatingPointFormatStyle.Currency()
{
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for IntegerFormatStyle.Currency()
{
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for ICULegacyNumberFormatter.NumberFormatType()
{
  uint64_t result = type metadata accessor for NumberFormatStyleConfiguration.Collection(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for ICULegacyNumberFormatter.Signature()
{
  uint64_t result = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle(a1, a2, a3, a4, a5, &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>, a6, type metadata accessor for NSDecimal.FormatStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:));
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X7>, uint64_t a7@<X8>, uint64_t (*a8)(void), uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = v9;
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v33 = a9;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(a6);
  uint64_t v17 = v16 - 8;
  MEMORY[0x1F4188790](v16);
  BOOL v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v11, (uint64_t)v19, a8);
  v19[*(int *)(v17 + 44)] = 0;
  uint64_t v20 = v33(a1, a2, a3, v34, v35);
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t result = outlined destroy of Any?((uint64_t)v19, a6);
  if ((v26 & 0x100000000) != 0) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = v20;
  }
  if ((v26 & 0x100000000) != 0) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v22;
  }
  if ((v26 & 0x100000000) != 0) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = v24;
  }
  if ((v26 & 0x100000000) != 0) {
    int v31 = 0;
  }
  else {
    int v31 = v26;
  }
  *(void *)a7 = v28;
  *(void *)(a7 + 8) = v29;
  *(void *)(a7 + 16) = v30;
  *(_DWORD *)(a7 + 24) = v31;
  *(unsigned char *)(a7 + 28) = BYTE4(v26) & 1;
  return result;
}

uint64_t specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v95 = a1;
  uint64_t v9 = (int *)type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v96 = v9;
  uint64_t v97 = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9);
  unint64_t v98 = &v83[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  BOOL v14 = &v83[-v13];
  uint64_t v15 = type metadata accessor for NSDecimal.FormatStyle(0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (uint64_t *)&v83[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = &v83[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v94 = a3;
  if (a3 >> 14 >= a5 >> 14) {
    goto LABEL_10;
  }
  unint64_t v92 = a5;
  uint64_t v93 = a2;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v5, (uint64_t)v17, type metadata accessor for NSDecimal.FormatStyle);
  outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v17 + *(int *)(v15 + 20), (uint64_t)v20, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = *v17;
  uint64_t v22 = v17[1];
  char v23 = *(unsigned char *)(v5
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>)
                          + 36));
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0((uint64_t)v20, (uint64_t)v14, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 64);
  swift_unknownObjectRetain_n();
  uint64_t v26 = v25(ObjectType, v22);
  uint64_t v28 = v27;
  swift_unknownObjectRelease();
  uint64_t v29 = v96;
  uint64_t v30 = (uint64_t *)&v14[v96[5]];
  *uint64_t v30 = v26;
  v30[1] = v28;
  v14[v29[6]] = v23;
  Swift::String v90 = v20;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v31 = static ICULegacyNumberFormatter.cache;
  uint64_t v32 = unk_1E8ED3298;
  uint64_t v33 = v98;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0((uint64_t)v14, (uint64_t)v98, type metadata accessor for ICULegacyNumberFormatter.Signature);
  unint64_t v34 = (*(unsigned __int8 *)(v97 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
  uint64_t v35 = swift_allocObject();
  uint64_t v36 = outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v33, v35 + v34, type metadata accessor for ICULegacyNumberFormatter.Signature);
  MEMORY[0x1F4188790](v36);
  uint64_t v91 = v14;
  *(void *)&v83[-16] = v14;
  uint64_t v37 = (uint64_t *)(v32 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v32 + 24));
  closure #1 in FormatterCache.formatter(for:creator:)specialized partial apply(v32 + 16, v99);
  os_unfair_lock_unlock((os_unfair_lock_t)(v32 + 24));
  swift_release();
  if (v99[0])
  {
    swift_release();
    uint64_t v38 = (uint64_t)v91;
LABEL_6:
    _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v38, type metadata accessor for ICULegacyNumberFormatter.Signature);
    swift_unknownObjectRelease();
    swift_release();
    unint64_t v39 = String.subscript.getter();
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    v100[0] = 0;
    specialized ICULegacyNumberFormatter.parseAsDecimal<A>(_:upperBound:)(v39, v40, v42, v44, v100);
    if ((v46 & 0x100000000) == 0)
    {
      v99[0] = v39;
      v99[1] = v41;
      v99[2] = v43;
      v99[3] = v45;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      uint64_t v47 = String.Index.init<A>(utf16Offset:in:)();
      swift_unknownObjectRelease();
      swift_release();
      _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v90, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
      char v48 = 0;
LABEL_11:
      LOBYTE(v99[0]) = v48;
      return v47;
    }
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v90, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
LABEL_10:
    uint64_t v47 = 0;
    char v48 = 1;
    goto LABEL_11;
  }
  os_unfair_lock_t v89 = (os_unfair_lock_t)(v32 + 24);
  uint64_t v88 = partial apply for implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
  swift_retain();
  os_unfair_lock_lock(v89);
  uint64_t v50 = *(void *)(*(void *)(v32 + 16) + 16);
  uint64_t v87 = *(void *)(v32 + 16);
  if (v31 >= v50) {
    swift_bridgeObjectRetain();
  }
  else {
    uint64_t *v37 = MEMORY[0x1E4FBC868];
  }
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v100[0] = *v37;
  uint64_t v52 = v100[0];
  uint64_t *v37 = 0x8000000000000000;
  uint64_t v38 = (uint64_t)v91;
  unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v91);
  uint64_t v55 = *(void *)(v52 + 16);
  BOOL v56 = (v53 & 1) == 0;
  uint64_t v57 = v55 + v56;
  if (__OFADD__(v55, v56))
  {
    __break(1u);
  }
  else
  {
    if (*(void *)(v52 + 24) < v57)
    {
      char v58 = v53;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, isUniquelyReferenced_nonNull_native);
      uint64_t v59 = v100[0];
      unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v38);
      if ((v58 & 1) != (v61 & 1)) {
        goto LABEL_65;
      }
      unint64_t v54 = v60;
      if ((v58 & 1) == 0) {
        goto LABEL_61;
      }
LABEL_22:
      uint64_t v62 = *(void *)(v59 + 56);
      swift_release();
      *(void *)(v62 + 8 * v54) = v88;
LABEL_62:
      *(void *)(v32 + 16) = v59;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v89);
      swift_release_n();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v59 = v52;
      if (v53) {
        goto LABEL_22;
      }
LABEL_61:
      id v82 = v98;
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v38, (uint64_t)v98, type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v54, (uint64_t)v82, v88, (void *)v59);
      goto LABEL_62;
    }
  }
  int v84 = v53;
  unint64_t v85 = v54;
  uint64_t v86 = v21;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  uint64_t v63 = static _DictionaryStorage.copy(original:)();
  uint64_t v59 = v63;
  if (!*(void *)(v52 + 16))
  {
LABEL_60:
    swift_bridgeObjectRelease();
    unint64_t v54 = v85;
    uint64_t v38 = (uint64_t)v91;
    if (v84) {
      goto LABEL_22;
    }
    goto LABEL_61;
  }
  uint64_t v64 = (int *)(v63 + 64);
  uint64_t v65 = 1 << *(unsigned char *)(v59 + 32);
  uint64_t v96 = (int *)(v52 + 64);
  unint64_t v66 = (unint64_t)(v65 + 63) >> 6;
  if (v59 != v52 || v64 >= &v96[2 * v66]) {
    memmove(v64, v96, 8 * v66);
  }
  int64_t v67 = 0;
  *(void *)(v59 + 16) = *(void *)(v52 + 16);
  uint64_t v68 = 1 << *(unsigned char *)(v52 + 32);
  uint64_t v69 = -1;
  if (v68 < 64) {
    uint64_t v69 = ~(-1 << v68);
  }
  unint64_t v70 = v69 & *(void *)(v52 + 64);
  int64_t v71 = (unint64_t)(v68 + 63) >> 6;
  while (1)
  {
    if (v70)
    {
      unint64_t v72 = __clz(__rbit64(v70));
      v70 &= v70 - 1;
      unint64_t v73 = v72 | (v67 << 6);
      Swift::String v74 = v98;
      goto LABEL_32;
    }
    int64_t v79 = v67 + 1;
    Swift::String v74 = v98;
    if (__OFADD__(v67, 1))
    {
      __break(1u);
      goto LABEL_64;
    }
    if (v79 >= v71) {
      goto LABEL_60;
    }
    unint64_t v80 = *(void *)&v96[2 * v79];
    ++v67;
    if (!v80)
    {
      int64_t v67 = v79 + 1;
      if (v79 + 1 >= v71) {
        goto LABEL_60;
      }
      unint64_t v80 = *(void *)&v96[2 * v67];
      if (!v80)
      {
        int64_t v67 = v79 + 2;
        if (v79 + 2 >= v71) {
          goto LABEL_60;
        }
        unint64_t v80 = *(void *)&v96[2 * v67];
        if (!v80)
        {
          int64_t v67 = v79 + 3;
          if (v79 + 3 >= v71) {
            goto LABEL_60;
          }
          unint64_t v80 = *(void *)&v96[2 * v67];
          if (!v80)
          {
            int64_t v67 = v79 + 4;
            if (v79 + 4 >= v71) {
              goto LABEL_60;
            }
            unint64_t v80 = *(void *)&v96[2 * v67];
            if (!v80)
            {
              int64_t v67 = v79 + 5;
              if (v79 + 5 >= v71) {
                goto LABEL_60;
              }
              unint64_t v80 = *(void *)&v96[2 * v67];
              if (!v80)
              {
                int64_t v67 = v79 + 6;
                if (v79 + 6 >= v71) {
                  goto LABEL_60;
                }
                unint64_t v80 = *(void *)&v96[2 * v67];
                if (!v80)
                {
                  int64_t v67 = v79 + 7;
                  if (v79 + 7 >= v71) {
                    goto LABEL_60;
                  }
                  unint64_t v80 = *(void *)&v96[2 * v67];
                  if (!v80)
                  {
                    int64_t v67 = v79 + 8;
                    if (v79 + 8 >= v71) {
                      goto LABEL_60;
                    }
                    unint64_t v80 = *(void *)&v96[2 * v67];
                    if (!v80) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_59:
    unint64_t v70 = (v80 - 1) & v80;
    unint64_t v73 = __clz(__rbit64(v80)) + (v67 << 6);
LABEL_32:
    unint64_t v75 = *(void *)(v97 + 72) * v73;
    _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(*(void *)(v52 + 48) + v75, (uint64_t)v74, type metadata accessor for ICULegacyNumberFormatter.Signature);
    uint64_t v76 = (uint64_t)v74;
    uint64_t v77 = 8 * v73;
    uint64_t v78 = *(void *)(*(void *)(v52 + 56) + 8 * v73);
    outlined init with take of NSDecimal.FormatStyle.Percent(v76, *(void *)(v59 + 48) + v75, type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(void *)(*(void *)(v59 + 56) + v77) = v78;
    swift_retain();
  }
  int64_t v81 = v79 + 9;
  if (v81 >= v71) {
    goto LABEL_60;
  }
  unint64_t v80 = *(void *)&v96[2 * v81];
  if (v80)
  {
    int64_t v67 = v81;
    Swift::String v74 = v98;
    goto LABEL_59;
  }
  while (1)
  {
    int64_t v67 = v81 + 1;
    if (__OFADD__(v81, 1)) {
      break;
    }
    Swift::String v74 = v98;
    if (v67 >= v71) {
      goto LABEL_60;
    }
    unint64_t v80 = *(void *)&v96[2 * v67];
    ++v81;
    if (v80) {
      goto LABEL_59;
    }
  }
LABEL_64:
  __break(1u);
LABEL_65:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t ObjectType;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t result;
  uint64_t v50;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  unint64_t v80;
  int64_t v81;
  unsigned char *v82;
  unsigned char v83[4];
  int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  os_unfair_lock_t v89;
  unsigned char *v90;
  unsigned char *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int *v96;
  uint64_t v97;
  unsigned char *v98;
  uint64_t v99[4];
  uint64_t v100[3];

  uint64_t v95 = a1;
  uint64_t v9 = (int *)type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v96 = v9;
  uint64_t v97 = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9);
  unint64_t v98 = &v83[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  BOOL v14 = &v83[-v13];
  uint64_t v15 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (uint64_t *)&v83[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = &v83[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v94 = a3;
  if (a3 >> 14 >= a5 >> 14) {
    goto LABEL_10;
  }
  unint64_t v92 = a5;
  uint64_t v93 = a2;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v5, (uint64_t)v17, type metadata accessor for NSDecimal.FormatStyle.Percent);
  outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v17 + *(int *)(v15 + 20), (uint64_t)v20, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = *v17;
  uint64_t v22 = v17[1];
  char v23 = *(unsigned char *)(v5
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>)
                          + 36));
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0((uint64_t)v20, (uint64_t)v14, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 64);
  swift_unknownObjectRetain_n();
  uint64_t v26 = v25(ObjectType, v22);
  uint64_t v28 = v27;
  swift_unknownObjectRelease();
  uint64_t v29 = v96;
  uint64_t v30 = (uint64_t *)&v14[v96[5]];
  *uint64_t v30 = v26;
  v30[1] = v28;
  v14[v29[6]] = v23;
  Swift::String v90 = v20;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v31 = static ICULegacyNumberFormatter.cache;
  uint64_t v32 = unk_1E8ED3298;
  uint64_t v33 = v98;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0((uint64_t)v14, (uint64_t)v98, type metadata accessor for ICULegacyNumberFormatter.Signature);
  unint64_t v34 = (*(unsigned __int8 *)(v97 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
  uint64_t v35 = swift_allocObject();
  uint64_t v36 = outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v33, v35 + v34, type metadata accessor for ICULegacyNumberFormatter.Signature);
  MEMORY[0x1F4188790](v36);
  uint64_t v91 = v14;
  *(void *)&v83[-16] = v14;
  uint64_t v37 = (uint64_t *)(v32 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v32 + 24));
  closure #1 in FormatterCache.formatter(for:creator:)specialized partial apply(v32 + 16, v99);
  os_unfair_lock_unlock((os_unfair_lock_t)(v32 + 24));
  swift_release();
  if (v99[0])
  {
    swift_release();
    uint64_t v38 = (uint64_t)v91;
LABEL_6:
    _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v38, type metadata accessor for ICULegacyNumberFormatter.Signature);
    swift_unknownObjectRelease();
    swift_release();
    unint64_t v39 = String.subscript.getter();
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    v100[0] = 0;
    specialized ICULegacyNumberFormatter.parseAsDecimal<A>(_:upperBound:)(v39, v40, v42, v44, v100);
    if ((v46 & 0x100000000) == 0)
    {
      v99[0] = v39;
      v99[1] = v41;
      v99[2] = v43;
      v99[3] = v45;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      uint64_t v47 = String.Index.init<A>(utf16Offset:in:)();
      swift_unknownObjectRelease();
      swift_release();
      _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v90, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
      char v48 = 0;
LABEL_11:
      LOBYTE(v99[0]) = v48;
      return v47;
    }
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v90, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
LABEL_10:
    uint64_t v47 = 0;
    char v48 = 1;
    goto LABEL_11;
  }
  os_unfair_lock_t v89 = (os_unfair_lock_t)(v32 + 24);
  uint64_t v88 = partial apply for implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
  swift_retain();
  os_unfair_lock_lock(v89);
  uint64_t v50 = *(void *)(*(void *)(v32 + 16) + 16);
  uint64_t v87 = *(void *)(v32 + 16);
  if (v31 >= v50) {
    swift_bridgeObjectRetain();
  }
  else {
    uint64_t *v37 = MEMORY[0x1E4FBC868];
  }
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v100[0] = *v37;
  uint64_t v52 = v100[0];
  uint64_t *v37 = 0x8000000000000000;
  uint64_t v38 = (uint64_t)v91;
  unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v91);
  uint64_t v55 = *(void *)(v52 + 16);
  BOOL v56 = (v53 & 1) == 0;
  uint64_t v57 = v55 + v56;
  if (__OFADD__(v55, v56))
  {
    __break(1u);
  }
  else
  {
    if (*(void *)(v52 + 24) < v57)
    {
      char v58 = v53;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, isUniquelyReferenced_nonNull_native);
      uint64_t v59 = v100[0];
      unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v38);
      if ((v58 & 1) != (v61 & 1)) {
        goto LABEL_65;
      }
      unint64_t v54 = v60;
      if ((v58 & 1) == 0) {
        goto LABEL_61;
      }
LABEL_22:
      uint64_t v62 = *(void *)(v59 + 56);
      swift_release();
      *(void *)(v62 + 8 * v54) = v88;
LABEL_62:
      *(void *)(v32 + 16) = v59;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v89);
      swift_release_n();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v59 = v52;
      if (v53) {
        goto LABEL_22;
      }
LABEL_61:
      id v82 = v98;
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v38, (uint64_t)v98, type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v54, (uint64_t)v82, v88, (void *)v59);
      goto LABEL_62;
    }
  }
  int v84 = v53;
  unint64_t v85 = v54;
  uint64_t v86 = v21;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  uint64_t v63 = static _DictionaryStorage.copy(original:)();
  uint64_t v59 = v63;
  if (!*(void *)(v52 + 16))
  {
LABEL_60:
    swift_bridgeObjectRelease();
    unint64_t v54 = v85;
    uint64_t v38 = (uint64_t)v91;
    if (v84) {
      goto LABEL_22;
    }
    goto LABEL_61;
  }
  uint64_t v64 = (int *)(v63 + 64);
  uint64_t v65 = 1 << *(unsigned char *)(v59 + 32);
  uint64_t v96 = (int *)(v52 + 64);
  unint64_t v66 = (unint64_t)(v65 + 63) >> 6;
  if (v59 != v52 || v64 >= &v96[2 * v66]) {
    memmove(v64, v96, 8 * v66);
  }
  int64_t v67 = 0;
  *(void *)(v59 + 16) = *(void *)(v52 + 16);
  uint64_t v68 = 1 << *(unsigned char *)(v52 + 32);
  uint64_t v69 = -1;
  if (v68 < 64) {
    uint64_t v69 = ~(-1 << v68);
  }
  unint64_t v70 = v69 & *(void *)(v52 + 64);
  int64_t v71 = (unint64_t)(v68 + 63) >> 6;
  while (1)
  {
    if (v70)
    {
      unint64_t v72 = __clz(__rbit64(v70));
      v70 &= v70 - 1;
      unint64_t v73 = v72 | (v67 << 6);
      Swift::String v74 = v98;
      goto LABEL_32;
    }
    int64_t v79 = v67 + 1;
    Swift::String v74 = v98;
    if (__OFADD__(v67, 1))
    {
      __break(1u);
      goto LABEL_64;
    }
    if (v79 >= v71) {
      goto LABEL_60;
    }
    unint64_t v80 = *(void *)&v96[2 * v79];
    ++v67;
    if (!v80)
    {
      int64_t v67 = v79 + 1;
      if (v79 + 1 >= v71) {
        goto LABEL_60;
      }
      unint64_t v80 = *(void *)&v96[2 * v67];
      if (!v80)
      {
        int64_t v67 = v79 + 2;
        if (v79 + 2 >= v71) {
          goto LABEL_60;
        }
        unint64_t v80 = *(void *)&v96[2 * v67];
        if (!v80)
        {
          int64_t v67 = v79 + 3;
          if (v79 + 3 >= v71) {
            goto LABEL_60;
          }
          unint64_t v80 = *(void *)&v96[2 * v67];
          if (!v80)
          {
            int64_t v67 = v79 + 4;
            if (v79 + 4 >= v71) {
              goto LABEL_60;
            }
            unint64_t v80 = *(void *)&v96[2 * v67];
            if (!v80)
            {
              int64_t v67 = v79 + 5;
              if (v79 + 5 >= v71) {
                goto LABEL_60;
              }
              unint64_t v80 = *(void *)&v96[2 * v67];
              if (!v80)
              {
                int64_t v67 = v79 + 6;
                if (v79 + 6 >= v71) {
                  goto LABEL_60;
                }
                unint64_t v80 = *(void *)&v96[2 * v67];
                if (!v80)
                {
                  int64_t v67 = v79 + 7;
                  if (v79 + 7 >= v71) {
                    goto LABEL_60;
                  }
                  unint64_t v80 = *(void *)&v96[2 * v67];
                  if (!v80)
                  {
                    int64_t v67 = v79 + 8;
                    if (v79 + 8 >= v71) {
                      goto LABEL_60;
                    }
                    unint64_t v80 = *(void *)&v96[2 * v67];
                    if (!v80) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_59:
    unint64_t v70 = (v80 - 1) & v80;
    unint64_t v73 = __clz(__rbit64(v80)) + (v67 << 6);
LABEL_32:
    unint64_t v75 = *(void *)(v97 + 72) * v73;
    _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(*(void *)(v52 + 48) + v75, (uint64_t)v74, type metadata accessor for ICULegacyNumberFormatter.Signature);
    uint64_t v76 = (uint64_t)v74;
    uint64_t v77 = 8 * v73;
    uint64_t v78 = *(void *)(*(void *)(v52 + 56) + 8 * v73);
    outlined init with take of NSDecimal.FormatStyle.Percent(v76, *(void *)(v59 + 48) + v75, type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(void *)(*(void *)(v59 + 56) + v77) = v78;
    swift_retain();
  }
  int64_t v81 = v79 + 9;
  if (v81 >= v71) {
    goto LABEL_60;
  }
  unint64_t v80 = *(void *)&v96[2 * v81];
  if (v80)
  {
    int64_t v67 = v81;
    Swift::String v74 = v98;
    goto LABEL_59;
  }
  while (1)
  {
    int64_t v67 = v81 + 1;
    if (__OFADD__(v81, 1)) {
      break;
    }
    Swift::String v74 = v98;
    if (v67 >= v71) {
      goto LABEL_60;
    }
    unint64_t v80 = *(void *)&v96[2 * v67];
    ++v81;
    if (v80) {
      goto LABEL_59;
    }
  }
LABEL_64:
  __break(1u);
LABEL_65:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t ObjectType;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  os_unfair_lock_s *v53;
  uint64_t v54;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned char *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int64_t v86;
  unint64_t v87;
  int64_t v88;
  unsigned char v89[4];
  int v90;
  unint64_t v91;
  uint64_t v92;
  int64_t v93;
  uint64_t v94;
  uint64_t v95;
  os_unfair_lock_t v96;
  int *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unsigned char *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned char *v106;
  uint64_t v107[4];
  uint64_t v108[3];

  id v103 = a1;
  long long v8 = (int *)type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  uint64_t v105 = *((void *)v8 - 1);
  uint64_t v9 = *(void *)(v105 + 64);
  MEMORY[0x1F4188790](v8);
  uint64_t v106 = &v89[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = &v89[-v11];
  uint64_t v13 = type metadata accessor for NSDecimal.FormatStyle.Currency(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (uint64_t *)&v89[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = &v89[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v102 = a3;
  if (a3 >> 14 >= a5 >> 14) {
    goto LABEL_10;
  }
  unint64_t v98 = a2;
  Swift::String v99 = a5;
  uint64_t v19 = v104;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v104, (uint64_t)v15, type metadata accessor for NSDecimal.FormatStyle.Currency);
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0((uint64_t)v15 + *(int *)(v13 + 24), (uint64_t)v18, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = *v15;
  uint64_t v21 = v15[1];
  swift_unknownObjectRetain();
  _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v15, type metadata accessor for NSDecimal.FormatStyle.Currency);
  uint64_t v22 = *(unsigned char *)(v19
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>)
                          + 36));
  char v101 = v18;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0((uint64_t)v18, (uint64_t)v12, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 64);
  swift_unknownObjectRetain_n();
  uint64_t v25 = v24(ObjectType, v21);
  uint64_t v27 = v26;
  id v100 = v20;
  swift_unknownObjectRelease();
  uint64_t v28 = (uint64_t *)&v12[v8[5]];
  void *v28 = v25;
  v28[1] = v27;
  uint64_t v97 = v8;
  v12[v8[6]] = v22;
  uint64_t v29 = (uint64_t)v12;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v31 = static ICULegacyNumberFormatter.cache;
  uint64_t v30 = unk_1E8ED3298;
  uint64_t v32 = (uint64_t)v12;
  uint64_t v33 = v106;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v32, (uint64_t)v106, type metadata accessor for ICULegacyNumberFormatter.Signature);
  unint64_t v34 = (*(unsigned __int8 *)(v105 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80);
  uint64_t v35 = swift_allocObject();
  uint64_t v36 = outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v33, v35 + v34, type metadata accessor for ICULegacyNumberFormatter.Signature);
  MEMORY[0x1F4188790](v36);
  *(void *)&v89[-16] = v29;
  uint64_t v37 = (uint64_t *)(v30 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v30 + 24));
  _s10Foundation14FormatterCacheV9formatter3for7creatorq_x_q_yKXEtKFq_SgSDyxq_GzYbXEfU_AA015ICULegacyNumberB0C9Signature33_ADC49A1B068F5C8BE74334B016A6B679LLV_AJTG5TA_0(v30 + 16, v107);
  os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 24));
  swift_release();
  if (v107[0])
  {
    uint64_t v104 = v35;
    swift_release();
    uint64_t v38 = (uint64_t)v101;
LABEL_6:
    _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v29, type metadata accessor for ICULegacyNumberFormatter.Signature);
    swift_unknownObjectRelease();
    swift_release();
    unint64_t v39 = String.subscript.getter();
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    v108[0] = 0;
    specialized ICULegacyNumberFormatter.parseAsDecimal<A>(_:upperBound:)(v39, v40, v42, v44, v108);
    if ((v46 & 0x100000000) == 0)
    {
      v107[0] = v39;
      v107[1] = v41;
      v107[2] = v43;
      v107[3] = v45;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      uint64_t v47 = String.Index.init<A>(utf16Offset:in:)();
      swift_unknownObjectRelease();
      swift_release();
      _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0((uint64_t)v101, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
      char v48 = 0;
LABEL_11:
      LOBYTE(v107[0]) = v48;
      return v47;
    }
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_0(v38, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
LABEL_10:
    uint64_t v47 = 0;
    char v48 = 1;
    goto LABEL_11;
  }
  uint64_t v96 = (os_unfair_lock_t)(v30 + 24);
  BOOL v49 = partial apply for implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
  char v51 = v31;
  uint64_t v52 = (uint64_t)v101;
  uint64_t v95 = v49;
  uint64_t v104 = v35;
  swift_retain();
  int v53 = v96;
  os_unfair_lock_lock(v96);
  unint64_t v54 = *(void *)(*(void *)(v30 + 16) + 16);
  unint64_t v94 = *(void *)(v30 + 16);
  if (v51 >= v54) {
    swift_bridgeObjectRetain();
  }
  else {
    uint64_t *v37 = MEMORY[0x1E4FBC868];
  }
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v108[0] = *v37;
  BOOL v56 = v108[0];
  uint64_t *v37 = 0x8000000000000000;
  char v58 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
  uint64_t v59 = *(void *)(v56 + 16);
  unint64_t v60 = (v57 & 1) == 0;
  char v61 = v59 + v60;
  if (__OFADD__(v59, v60))
  {
    __break(1u);
  }
  else
  {
    if (*(void *)(v56 + 24) < v61)
    {
      uint64_t v62 = v57;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v61, isUniquelyReferenced_nonNull_native);
      uint64_t v63 = v108[0];
      uint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
      if ((v62 & 1) != (v65 & 1)) {
        goto LABEL_65;
      }
      char v58 = v64;
      if ((v62 & 1) == 0) {
        goto LABEL_61;
      }
LABEL_22:
      unint64_t v66 = *(void *)(v63 + 56);
      swift_release();
      int v53 = v96;
      *(void *)(v66 + 8 * v58) = v95;
      uint64_t v52 = (uint64_t)v101;
LABEL_62:
      *(void *)(v30 + 16) = v63;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v53);
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v38 = v52;
      goto LABEL_6;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v63 = v56;
      if (v57) {
        goto LABEL_22;
      }
LABEL_61:
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v29, (uint64_t)v33, type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v58, (uint64_t)v33, v95, (void *)v63);
      goto LABEL_62;
    }
  }
  Swift::String v90 = v57;
  uint64_t v91 = v58;
  unint64_t v92 = v29;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  int64_t v67 = static _DictionaryStorage.copy(original:)();
  uint64_t v63 = v67;
  if (!*(void *)(v56 + 16))
  {
LABEL_60:
    swift_bridgeObjectRelease();
    uint64_t v52 = (uint64_t)v101;
    uint64_t v29 = v92;
    uint64_t v33 = v106;
    int v53 = v96;
    char v58 = v91;
    if (v90) {
      goto LABEL_22;
    }
    goto LABEL_61;
  }
  uint64_t v68 = (char *)(v67 + 64);
  uint64_t v69 = 1 << *(unsigned char *)(v63 + 32);
  uint64_t v97 = (int *)(v56 + 64);
  unint64_t v70 = (unint64_t)(v69 + 63) >> 6;
  int64_t v71 = v56;
  if (v63 != v56 || v68 >= (char *)&v97[2 * v70]) {
    memmove(v68, v97, 8 * v70);
  }
  unint64_t v72 = 0;
  *(void *)(v63 + 16) = *(void *)(v56 + 16);
  unint64_t v73 = 1 << *(unsigned char *)(v56 + 32);
  Swift::String v74 = -1;
  if (v73 < 64) {
    Swift::String v74 = ~(-1 << v73);
  }
  unint64_t v75 = v74 & *(void *)(v56 + 64);
  uint64_t v93 = (unint64_t)(v73 + 63) >> 6;
  uint64_t v76 = v106;
  while (1)
  {
    if (v75)
    {
      uint64_t v77 = __clz(__rbit64(v75));
      v75 &= v75 - 1;
      uint64_t v78 = v77 | (v72 << 6);
      int64_t v79 = v105;
      unint64_t v80 = v71;
      goto LABEL_32;
    }
    uint64_t v86 = v72 + 1;
    int64_t v79 = v105;
    if (__OFADD__(v72, 1))
    {
      __break(1u);
      goto LABEL_64;
    }
    unint64_t v80 = v71;
    if (v86 >= v93) {
      goto LABEL_60;
    }
    uint64_t v87 = *(void *)&v97[2 * v86];
    ++v72;
    if (!v87)
    {
      unint64_t v72 = v86 + 1;
      if (v86 + 1 >= v93) {
        goto LABEL_60;
      }
      uint64_t v87 = *(void *)&v97[2 * v72];
      if (!v87)
      {
        unint64_t v72 = v86 + 2;
        if (v86 + 2 >= v93) {
          goto LABEL_60;
        }
        uint64_t v87 = *(void *)&v97[2 * v72];
        if (!v87)
        {
          unint64_t v72 = v86 + 3;
          if (v86 + 3 >= v93) {
            goto LABEL_60;
          }
          uint64_t v87 = *(void *)&v97[2 * v72];
          if (!v87)
          {
            unint64_t v72 = v86 + 4;
            if (v86 + 4 >= v93) {
              goto LABEL_60;
            }
            uint64_t v87 = *(void *)&v97[2 * v72];
            if (!v87)
            {
              unint64_t v72 = v86 + 5;
              if (v86 + 5 >= v93) {
                goto LABEL_60;
              }
              uint64_t v87 = *(void *)&v97[2 * v72];
              if (!v87)
              {
                unint64_t v72 = v86 + 6;
                if (v86 + 6 >= v93) {
                  goto LABEL_60;
                }
                uint64_t v87 = *(void *)&v97[2 * v72];
                if (!v87)
                {
                  unint64_t v72 = v86 + 7;
                  if (v86 + 7 >= v93) {
                    goto LABEL_60;
                  }
                  uint64_t v87 = *(void *)&v97[2 * v72];
                  if (!v87)
                  {
                    unint64_t v72 = v86 + 8;
                    if (v86 + 8 >= v93) {
                      goto LABEL_60;
                    }
                    uint64_t v87 = *(void *)&v97[2 * v72];
                    if (!v87) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_59:
    unint64_t v75 = (v87 - 1) & v87;
    uint64_t v78 = __clz(__rbit64(v87)) + (v72 << 6);
LABEL_32:
    int64_t v81 = *(void *)(v80 + 48);
    id v82 = v80;
    uint64_t v83 = *(void *)(v79 + 72) * v78;
    _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWOcTm_0(v81 + v83, (uint64_t)v76, type metadata accessor for ICULegacyNumberFormatter.Signature);
    int v84 = 8 * v78;
    unint64_t v85 = *(void *)(*(void *)(v82 + 56) + 8 * v78);
    outlined init with take of NSDecimal.FormatStyle.Percent((uint64_t)v76, *(void *)(v63 + 48) + v83, type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(void *)(*(void *)(v63 + 56) + v84) = v85;
    swift_retain();
  }
  uint64_t v88 = v86 + 9;
  if (v88 >= v93) {
    goto LABEL_60;
  }
  uint64_t v87 = *(void *)&v97[2 * v88];
  if (v87)
  {
    unint64_t v72 = v88;
    int64_t v79 = v105;
    unint64_t v80 = v71;
    goto LABEL_59;
  }
  while (1)
  {
    unint64_t v72 = v88 + 1;
    if (__OFADD__(v88, 1)) {
      break;
    }
    int64_t v79 = v105;
    unint64_t v80 = v71;
    if (v72 >= v93) {
      goto LABEL_60;
    }
    uint64_t v87 = *(void *)&v97[2 * v72];
    ++v88;
    if (v87) {
      goto LABEL_59;
    }
  }
LABEL_64:
  __break(1u);
LABEL_65:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined init with take of NSDecimal.FormatStyle.Percent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t closure #1 in FormatterCache.formatter(for:creator:)specialized partial apply@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return _s10Foundation14FormatterCacheV9formatter3for7creatorq_x_q_yKXEtKFq_SgSDyxq_GzYbXEfU_AA015ICULegacyNumberB0C9Signature33_ADC49A1B068F5C8BE74334B016A6B679LLV_AJTG5TA_0(a1, a2);
}

{
  return partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, a2);
}

{
  return _s10Foundation14FormatterCacheV9formatter3for7creatorq_x_q_yKXEtKFq_SgSDyxq_GzYbXEfU_AA017ICUCurrencyNumberB0C9Signature33_1C58B5D80AA37B9371410D3343C91B53LLV_AJSgTG5TA_0(a1, a2);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  uint64_t v39 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  int v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  int v40 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v36 = v2;
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v38 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v37) {
      break;
    }
    uint64_t v22 = v38;
    unint64_t v23 = v38[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_34;
      }
      unint64_t v23 = v38[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v37)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v36;
          if ((v40 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v38[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v37) {
              goto LABEL_34;
            }
            unint64_t v23 = v38[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v24;
      }
    }
LABEL_21:
    unint64_t v14 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v39 + 72);
    uint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
    if (v40)
    {
      outlined init with take of ICUNumberFormatter.Signature(v26, (uint64_t)v7, type metadata accessor for ICULegacyNumberFormatter.Signature);
      uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
    }
    else
    {
      outlined init with copy of ICUNumberFormatter.Signature(v26, (uint64_t)v7, type metadata accessor for ICULegacyNumberFormatter.Signature);
      uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
      swift_retain();
    }
    Hasher.init(_seed:)();
    ICULegacyNumberFormatter.Signature.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = outlined init with take of ICUNumberFormatter.Signature((uint64_t)v7, *(void *)(v10 + 48) + v25 * v18, type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(void *)(*(void *)(v10 + 56) + 8 * v18) = v27;
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  uint64_t v22 = v38;
  if ((v40 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v35;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  void (**v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  void (**v46)(char *, unint64_t, uint64_t);
  long long v47;

  uint64_t v3 = v2;
  unint64_t v44 = type metadata accessor for CombineIdentifier();
  uint64_t v5 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  int v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CombineIdentifier, NSTimer.TimerPublisher.Side>);
  uint64_t v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    int v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    uint64_t v39 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    uint64_t v42 = v8;
    uint64_t v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        uint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          uint64_t v22 = v40[v17];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            uint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                uint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      int64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      uint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      uint64_t v27 = v43;
      uint64_t v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        uint64_t v47 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20);
      }
      else
      {
        (*v41)(v43, v26, v44);
        uint64_t v47 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v20);
        swift_retain();
      }
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier, MEMORY[0x1E4F1A7E8]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      unint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v30 = result & ~v29;
      char v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v32 = 0;
        BOOL v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v34 = v31 == v33;
          if (v31 == v33) {
            char v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v46)(*(void *)(v10 + 48) + v25 * v18, v27, v28);
      *(_OWORD *)(*(void *)(v10 + 56) + 16 * v18) = v47;
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  int v45;
  void (**v46)(char *, uint64_t, uint64_t);
  char *v47;
  uint64_t v48;

  uint64_t v3 = v2;
  char v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t v5 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v47 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RegexPatternCache.Key, Regex<AnyRegexOutput>>);
  uint64_t v45 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (*(void *)(v7 + 16))
  {
    int v40 = v2;
    uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
    uint64_t v11 = *(void *)(v7 + 64);
    uint64_t v42 = (void *)(v7 + 64);
    if (v10 < 64) {
      uint64_t v12 = ~(-1 << v10);
    }
    else {
      uint64_t v12 = -1;
    }
    uint64_t v13 = v12 & v11;
    uint64_t v41 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v43 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v46 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    unint64_t v14 = v8 + 64;
    uint64_t result = swift_retain();
    uint64_t v16 = 0;
    unint64_t v44 = v7;
    while (1)
    {
      if (v13)
      {
        unint64_t v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v20 = v19 | (v16 << 6);
      }
      else
      {
        int64_t v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v41) {
          goto LABEL_34;
        }
        uint64_t v22 = v42[v21];
        ++v16;
        if (!v22)
        {
          uint64_t v16 = v21 + 1;
          if (v21 + 1 >= v41) {
            goto LABEL_34;
          }
          uint64_t v22 = v42[v16];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v41)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v40;
              if (v45)
              {
                uint64_t v39 = 1 << *(unsigned char *)(v7 + 32);
                if (v39 >= 64) {
                  bzero(v42, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v42 = -1 << v39;
                }
                *(void *)(v7 + 16) = 0;
              }
              break;
            }
            uint64_t v22 = v42[v23];
            if (!v22)
            {
              while (1)
              {
                uint64_t v16 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v16 >= v41) {
                  goto LABEL_34;
                }
                uint64_t v22 = v42[v16];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v16 = v23;
          }
        }
LABEL_21:
        uint64_t v13 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      int64_t v24 = *(void *)(v7 + 56);
      uint64_t v25 = *(void *)(v7 + 48) + 24 * v20;
      uint64_t v27 = *(void *)v25;
      uint64_t v26 = *(void *)(v25 + 8);
      uint64_t v28 = *(unsigned char *)(v25 + 16);
      unint64_t v29 = v5;
      unint64_t v30 = *(void *)(v5 + 72);
      char v31 = v24 + v30 * v20;
      if (v45)
      {
        (*v46)(v47, v31, v48);
      }
      else
      {
        (*v43)(v47, v31, v48);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      unint64_t v32 = -1 << *(unsigned char *)(v9 + 32);
      BOOL v33 = result & ~v32;
      uint64_t v34 = v33 >> 6;
      if (((-1 << v33) & ~*(void *)(v14 + 8 * (v33 >> 6))) != 0)
      {
        int64_t v17 = __clz(__rbit64((-1 << v33) & ~*(void *)(v14 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v35 = 0;
        uint64_t v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          int64_t v37 = v34 == v36;
          if (v34 == v36) {
            uint64_t v34 = 0;
          }
          v35 |= v37;
          uint64_t v38 = *(void *)(v14 + 8 * v34);
        }
        while (v38 == -1);
        int64_t v17 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = *(void *)(v9 + 48) + 24 * v17;
      *(void *)unint64_t v18 = v27;
      *(void *)(v18 + 8) = v26;
      *(unsigned char *)(v18 + 16) = v28;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v46)(*(void *)(v9 + 56) + v30 * v17, v47, v48);
      ++*(void *)(v9 + 16);
      int v7 = v44;
      uint64_t v5 = v29;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  void (**v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  void (**v46)(char *, unint64_t, uint64_t);
  _OWORD v47[2];

  uint64_t v3 = v2;
  unint64_t v44 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  int v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  uint64_t v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    int v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    uint64_t v39 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    uint64_t v42 = v8;
    uint64_t v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        uint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          uint64_t v22 = v40[v17];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            uint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                uint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      int64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      uint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      uint64_t v27 = v43;
      uint64_t v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        outlined init with take of Any((_OWORD *)(*(void *)(v8 + 56) + 32 * v20), v47);
      }
      else
      {
        (*v41)(v43, v26, v44);
        outlined init with copy of Any(*(void *)(v8 + 56) + 32 * v20, (uint64_t)v47);
      }
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      unint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v30 = result & ~v29;
      char v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v32 = 0;
        BOOL v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v34 = v31 == v33;
          if (v31 == v33) {
            char v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      (*v46)((char *)(*(void *)(v10 + 48) + v25 * v18), (unint64_t)v27, v28);
      uint64_t result = (uint64_t)outlined init with take of Any(v47, (_OWORD *)(*(void *)(v10 + 56) + 32 * v18));
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)()
{
  return partial apply for implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
}

{
  type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  return implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
}

uint64_t implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)()
{
  return ICULegacyNumberFormatter.Signature.createNumberFormatter()();
}

uint64_t ICULegacyNumberFormatter.Signature.createNumberFormatter()()
{
  uint64_t v1 = v0;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v42 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v42);
  uint64_t v3 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v41 - v5;
  uint64_t v7 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v41 - v11;
  uint64_t v13 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (unsigned __int8 *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unint64_t v18 = (char *)&v41 - v17;
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v1, (uint64_t)&v41 - v17);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined destroy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)v18, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
      break;
    case 2u:
      _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v18, (uint64_t)v6, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
      outlined destroy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)v6, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
      break;
    case 3u:
      break;
    default:
      _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v18, (uint64_t)v12, type metadata accessor for NumberFormatStyleConfiguration.Collection);
      outlined destroy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)v12, type metadata accessor for NumberFormatStyleConfiguration.Collection);
      break;
  }
  int v43 = 0;
  type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  String.utf8CString.getter();
  uint64_t v19 = unum_open();
  swift_release();
  if (!v19)
  {
    int v20 = 16;
    goto LABEL_23;
  }
  int v20 = v43;
  if (v43 > 0)
  {
LABEL_23:
    lazy protocol witness table accessor for type ICUError and conformance ICUError();
    swift_allocError();
    int *v28 = v20;
    return swift_willThrow();
  }
  unum_setAttribute();
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v1, (uint64_t)v15);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload < 2)
  {
    _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v15, (uint64_t)v9, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    if (v9[8]) {
      goto LABEL_13;
    }
    if ((~*(void *)v9 & 0x7FF0000000000000) != 0)
    {
      if (*(double *)v9 > -2147483650.0)
      {
        if (*(double *)v9 < 2147483650.0)
        {
          unum_setAttribute();
LABEL_13:
          uint64_t v22 = *((void *)v9 + 8);
          char v23 = v9[72];
          long long v24 = *((_OWORD *)v9 + 2);
          long long v44 = *((_OWORD *)v9 + 1);
          long long v45 = v24;
          long long v46 = *((_OWORD *)v9 + 3);
          uint64_t v47 = v22;
          char v48 = v23;
          setPrecision(_:formatter:)((uint64_t)&v44);
          if (v9[73]) {
            unum_setAttribute();
          }
          if (v9[77]) {
            unum_setAttribute();
          }
          uint64_t v25 = &v9[*(int *)(v7 + 40)];
          int v26 = v25[8];
          if (v26 == 255) {
            goto LABEL_47;
          }
          uint64_t v27 = *(void *)v25;
          if (v26)
          {
            unum_setDoubleAttribute();
LABEL_47:
            __int16 v39 = *((_WORD *)v9 + 37);
            outlined destroy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)v9, type metadata accessor for NumberFormatStyleConfiguration.Collection);
            if (v39 != 2 && (v39 & 1) == 0) {
              unum_setAttribute();
            }
            goto LABEL_55;
          }
          if (v27 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (v27 <= 0x7FFFFFFF)
            {
              unum_setAttribute();
              goto LABEL_47;
            }
            goto LABEL_60;
          }
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_58;
  }
  if (EnumCaseMultiPayload == 2)
  {
    _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v15, (uint64_t)v3, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
    if ((v3[8] & 1) == 0)
    {
      if ((~*(void *)v3 & 0x7FF0000000000000) == 0)
      {
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      if (*(double *)v3 <= -2147483650.0)
      {
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      if (*(double *)v3 >= 2147483650.0)
      {
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      unum_setAttribute();
    }
    uint64_t v30 = *((void *)v3 + 8);
    char v31 = v3[72];
    long long v32 = *((_OWORD *)v3 + 2);
    long long v44 = *((_OWORD *)v3 + 1);
    long long v45 = v32;
    long long v46 = *((_OWORD *)v3 + 3);
    uint64_t v47 = v30;
    char v48 = v31;
    setPrecision(_:formatter:)((uint64_t)&v44);
    if (v3[73]) {
      unum_setAttribute();
    }
    if (v3[78]) {
      unum_setAttribute();
    }
    BOOL v33 = &v3[*(int *)(v42 + 40)];
    int v34 = v33[8];
    if (v34 != 255)
    {
      uint64_t v35 = *(void *)v33;
      if (v34)
      {
        unum_setDoubleAttribute();
      }
      else
      {
        if (v35 < (uint64_t)0xFFFFFFFF80000000)
        {
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
        }
        if (v35 > 0x7FFFFFFF) {
          goto LABEL_67;
        }
        unum_setAttribute();
      }
    }
    int v40 = *(_DWORD *)(v3 + 74);
    if (v40 != 2 && (v40 & 1) == 0) {
      unum_setAttribute();
    }
    outlined destroy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)v3, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
    goto LABEL_55;
  }
  unsigned int v36 = *v15;
  if (v15[1] != 5)
  {
    LODWORD(v44) = 0;
    unum_setContext();
  }
  if (v36 < 2) {
    goto LABEL_55;
  }
  int64_t v37 = specialized _copyCollectionToContiguousArray<A>(_:)(0xD000000000000012, 0x80000001823ACF70);
  LODWORD(v44) = 0;
  if (v37[2] >> 31) {
    goto LABEL_64;
  }
  unum_setTextAttribute();
  swift_release();
  if ((int)v44 > 0)
  {
    uint64_t v38 = specialized _copyCollectionToContiguousArray<A>(_:)(0xD00000000000001CLL, 0x80000001823ACF90);
    LODWORD(v44) = 0;
    if (v38[2] >> 31)
    {
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    unum_setTextAttribute();
    swift_release();
  }
LABEL_55:
  type metadata accessor for ICULegacyNumberFormatter();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v19;
  return result;
}

uint64_t type metadata accessor for ICULegacyNumberFormatter()
{
  return self;
}

uint64_t setPrecision(_:formatter:)(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 24);
  unint64_t v2 = *(void *)(result + 40);
  unsigned int v3 = *(unsigned __int8 *)(result + 56);
  if (v1 >> 1 == 0xFFFFFFFF && v2 <= 1 && v3 < 2) {
    return result;
  }
  uint64_t v7 = *(void *)result;
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v8 = *(void *)(result + 16);
  if ((v3 & 0x80) == 0)
  {
    uint64_t result = unum_setAttribute();
    if (v7 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v7 <= 0x7FFFFFFF)
    {
      uint64_t result = unum_setAttribute();
      if (v8) {
        return result;
      }
      if (v6 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (v6 <= 0x7FFFFFFF) {
          goto LABEL_31;
        }
        goto LABEL_38;
      }
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v9 = *(void *)(result + 32);
  uint64_t v10 = *(void *)(result + 48);
  uint64_t result = unum_setAttribute();
  if ((v6 & 1) == 0)
  {
    if (v7 < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v7 > 0x7FFFFFFF)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    uint64_t result = unum_setAttribute();
  }
  if ((v1 & 1) == 0)
  {
    if (v8 < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v8 > 0x7FFFFFFF)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    uint64_t result = unum_setAttribute();
  }
  if ((v2 & 1) == 0)
  {
    if (v9 < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v9 > 0x7FFFFFFF)
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    uint64_t result = unum_setAttribute();
  }
  if (v3) {
    return result;
  }
  if (v10 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_45;
  }
  if (v10 > 0x7FFFFFFF)
  {
LABEL_46:
    __break(1u);
    return result;
  }
LABEL_31:

  return unum_setAttribute();
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = *(void *)(type metadata accessor for ICULegacyNumberFormatter.Signature(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v6 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  }
  else
  {
    if (EnumCaseMultiPayload > 1) {
      goto LABEL_7;
    }
    uint64_t v6 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  }
  uint64_t v7 = v0 + v3 + *(int *)(v6 + 36);
  uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
LABEL_7:
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t objectdestroyTm_0()
{
  uint64_t v1 = *(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v6 = type metadata accessor for NSDecimal.FormatStyle.Percent(0);
LABEL_6:
    uint64_t v7 = *(int *)(v6 + 20);
    uint64_t v8 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_10;
    }
    swift_unknownObjectRelease();
    uint64_t v6 = type metadata accessor for NSDecimal.FormatStyle(0);
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0) + 24);
  uint64_t v8 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  uint64_t v9 = v0 + v3 + v7 + *(int *)(v8 + 36);
  uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
LABEL_10:

  return MEMORY[0x1F4186498](v0, ((v4 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 20, v2 | 7);
}

uint64_t objectdestroyTm_1()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t outlined destroy of ICULegacyNumberFormatter.Signature(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s10Foundation24ICULegacyNumberFormatterC9Signature33_ADC49A1B068F5C8BE74334B016A6B679LLVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for ICULegacyNumberFormatter.Signature(uint64_t a1)
{
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v3 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  }
  else
  {
    if (EnumCaseMultiPayload > 1) {
      goto LABEL_7;
    }
    uint64_t v3 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  }
  uint64_t v4 = a1 + *(int *)(v3 + 36);
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
LABEL_7:

  return swift_bridgeObjectRelease();
}

uint64_t specialized static ICULegacyNumberFormatter.NumberFormatType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = a2;
  uint64_t v3 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v38 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (__int16 *)((char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v37 - v15;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v37 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v37 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ICULegacyNumberFormatter.NumberFormatType, ICULegacyNumberFormatter.NumberFormatType));
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v25 = (char *)&v37 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = &v25[*(int *)(v26 + 56)];
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(a1, (uint64_t)v25);
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v39, (uint64_t)v27);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)v25, (uint64_t)v19);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v27, (uint64_t)v7, type metadata accessor for NumberFormatStyleConfiguration.Collection);
        char v30 = static NumberFormatStyleConfiguration.Collection.== infix(_:_:)(v19, v7);
        char v31 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
        outlined destroy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)v7, type metadata accessor for NumberFormatStyleConfiguration.Collection);
        uint64_t v32 = (uint64_t)v19;
        goto LABEL_8;
      }
      uint64_t v28 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
      uint64_t v29 = (uint64_t)v19;
      goto LABEL_13;
    case 2u:
      outlined init with copy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)v25, (uint64_t)v16);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        uint64_t v28 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection;
        uint64_t v29 = (uint64_t)v16;
        goto LABEL_13;
      }
      uint64_t v33 = v38;
      _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v27, v38, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
      char v30 = static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(v16, v33);
      char v31 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection;
      outlined destroy of ICULegacyNumberFormatter.NumberFormatType(v33, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
      uint64_t v32 = (uint64_t)v16;
LABEL_8:
      int v34 = v31;
      goto LABEL_16;
    case 3u:
      outlined init with copy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)v25, (uint64_t)v13);
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_14;
      }
      __int16 v35 = *(_WORD *)v27;
      __int16 v41 = *v13;
      __int16 v40 = v35;
      char v30 = specialized static DescriptiveNumberFormatConfiguration.Collection.== infix(_:_:)((unsigned __int8 *)&v41, (unsigned __int8 *)&v40);
      goto LABEL_17;
    default:
      outlined init with copy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)v25, (uint64_t)v22);
      if (swift_getEnumCaseMultiPayload())
      {
        uint64_t v28 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
        uint64_t v29 = (uint64_t)v22;
LABEL_13:
        outlined destroy of ICULegacyNumberFormatter.NumberFormatType(v29, v28);
LABEL_14:
        outlined destroy of (ICULegacyNumberFormatter.NumberFormatType, ICULegacyNumberFormatter.NumberFormatType)((uint64_t)v25);
        char v30 = 0;
      }
      else
      {
        _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v27, (uint64_t)v10, type metadata accessor for NumberFormatStyleConfiguration.Collection);
        char v30 = static NumberFormatStyleConfiguration.Collection.== infix(_:_:)(v22, v10);
        outlined destroy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)v10, type metadata accessor for NumberFormatStyleConfiguration.Collection);
        uint64_t v32 = (uint64_t)v22;
        int v34 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
LABEL_16:
        outlined destroy of ICULegacyNumberFormatter.NumberFormatType(v32, v34);
LABEL_17:
        outlined destroy of ICULegacyNumberFormatter.NumberFormatType((uint64_t)v25, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
      }
      return v30 & 1;
  }
}

uint64_t outlined destroy of ICULegacyNumberFormatter.NumberFormatType(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for ICULegacyNumberFormatter.NumberFormatType);
}

void ICULegacyNumberFormatter.Signature.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v85 = *(void *)(v2 - 8);
  uint64_t v86 = v2;
  MEMORY[0x1F4188790](v2);
  int v84 = (char *)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v83 = (uint64_t)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v82 = (uint64_t)&v82 - v7;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v82 - v9;
  uint64_t v11 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v82 - v18;
  uint64_t v20 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (unsigned __int8 *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = v1;
  outlined init with copy of ICULegacyNumberFormatter.NumberFormatType(v1, (uint64_t)v22);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v22, (uint64_t)v16, type metadata accessor for NumberFormatStyleConfiguration.Collection);
      Hasher._combine(_:)(1uLL);
      if (v16[8])
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt64 v48 = *(void *)v16;
        Hasher._combine(_:)(1u);
        if ((v48 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v49 = v48;
        }
        else {
          Swift::UInt64 v49 = 0;
        }
        Hasher._combine(_:)(v49);
      }
      uint64_t v51 = v85;
      uint64_t v50 = v86;
      uint64_t v52 = v14;
      outlined init with take of NumberFormatStyleConfiguration.Precision?((uint64_t)(v16 + 16), (uint64_t)v88);
      specialized Optional<A>.hash(into:)();
      int v53 = v16[73];
      if (v53 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v57 = v53 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v57);
      }
      int v58 = *((unsigned __int16 *)v16 + 37);
      unsigned int v59 = v58 | (v16[76] << 16);
      if (v58 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v59 & 1);
        Hasher._combine(_:)((v59 >> 8) & 1);
        Hasher._combine(_:)(HIWORD(v59) & 1);
      }
      int v61 = v16[77];
      if (v61 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v63 = v61 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v63);
      }
      uint64_t v64 = v82;
      outlined init with copy of FloatingPointRoundingRule?((uint64_t)&v16[*(int *)(v14 + 36)], v82);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v64, 1, v50) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v68 = v84;
        (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v84, v64, v50);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)();
        (*(void (**)(char *, uint64_t))(v51 + 8))(v68, v50);
      }
      uint64_t v25 = v87;
      uint64_t v69 = &v16[*(int *)(v52 + 40)];
      int v70 = v69[8];
      if (v70 == 255)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v72 = *(void *)v69;
        Hasher._combine(_:)(1u);
        if (v70)
        {
          Hasher._combine(_:)(1uLL);
          if ((v72 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            Swift::UInt64 v79 = v72;
          }
          else {
            Swift::UInt64 v79 = 0;
          }
          Hasher._combine(_:)(v79);
        }
        else
        {
          Hasher._combine(_:)(0);
          Hasher._combine(_:)(v72);
        }
      }
      Swift::UInt v80 = v16[*(int *)(v52 + 44)];
      if (v80 == 3)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v80);
      }
      unint64_t v75 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
      uint64_t v76 = (uint64_t)v16;
      goto LABEL_96;
    case 2u:
      _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v22, (uint64_t)v13, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
      Hasher._combine(_:)(2uLL);
      if (v13[8])
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt64 v26 = *(void *)v13;
        Hasher._combine(_:)(1u);
        if ((v26 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v27 = v26;
        }
        else {
          Swift::UInt64 v27 = 0;
        }
        Hasher._combine(_:)(v27);
      }
      uint64_t v29 = v85;
      uint64_t v28 = v86;
      uint64_t v30 = v11;
      outlined init with take of NumberFormatStyleConfiguration.Precision?((uint64_t)(v13 + 16), (uint64_t)v88);
      specialized Optional<A>.hash(into:)();
      int v31 = v13[73];
      if (v31 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v32 = v31 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v32);
      }
      unint64_t v33 = *(unsigned int *)(v13 + 74);
      if (*(_DWORD *)(v13 + 74) == 2)
      {
        LOBYTE(v34) = 0;
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v33 & 1);
        Hasher._combine(_:)((v33 >> 8) & 1);
        Hasher._combine(_:)(WORD1(v33) & 1);
        unsigned int v34 = BYTE3(v33) & 1;
      }
      uint64_t v25 = v87;
      Hasher._combine(_:)(v34);
      int v35 = v13[78];
      if (v35 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v36 = v35 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v36);
      }
      uint64_t v37 = v83;
      outlined init with copy of FloatingPointRoundingRule?((uint64_t)&v13[*(int *)(v11 + 36)], v83);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v37, 1, v28) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v38 = v84;
        (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v84, v37, v28);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)();
        (*(void (**)(char *, uint64_t))(v29 + 8))(v38, v28);
      }
      uint64_t v39 = &v13[*(int *)(v11 + 40)];
      int v40 = v39[8];
      if (v40 == 255)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v41 = *(void *)v39;
        Hasher._combine(_:)(1u);
        if (v40)
        {
          Hasher._combine(_:)(1uLL);
          if ((v41 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            Swift::UInt64 v73 = v41;
          }
          else {
            Swift::UInt64 v73 = 0;
          }
          Hasher._combine(_:)(v73);
        }
        else
        {
          Hasher._combine(_:)(0);
          Hasher._combine(_:)(v41);
        }
      }
      Hasher._combine(_:)(v13[*(int *)(v30 + 44)]);
      Swift::UInt v74 = v13[*(int *)(v30 + 48)];
      if (v74 == 3)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v74);
      }
      unint64_t v75 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection;
      uint64_t v76 = (uint64_t)v13;
      goto LABEL_96;
    case 3u:
      uint64_t v23 = *v22;
      Swift::UInt v24 = v22[1];
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v23 + 1);
      if (v24 == 5)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v24);
      }
      uint64_t v25 = v87;
      goto LABEL_97;
    default:
      _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v22, (uint64_t)v19, type metadata accessor for NumberFormatStyleConfiguration.Collection);
      Hasher._combine(_:)(0);
      if (v19[8])
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt64 v42 = *(void *)v19;
        Hasher._combine(_:)(1u);
        if ((v42 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v43 = v42;
        }
        else {
          Swift::UInt64 v43 = 0;
        }
        Hasher._combine(_:)(v43);
      }
      uint64_t v45 = v85;
      uint64_t v44 = v86;
      long long v46 = (int *)v14;
      outlined init with take of NumberFormatStyleConfiguration.Precision?((uint64_t)(v19 + 16), (uint64_t)v88);
      specialized Optional<A>.hash(into:)();
      int v47 = v19[73];
      if (v47 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v54 = v47 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v54);
      }
      int v55 = *((unsigned __int16 *)v19 + 37);
      unsigned int v56 = v55 | (v19[76] << 16);
      if (v55 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v56 & 1);
        Hasher._combine(_:)((v56 >> 8) & 1);
        Hasher._combine(_:)(HIWORD(v56) & 1);
      }
      uint64_t v25 = v87;
      int v60 = v19[77];
      if (v60 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v62 = v60 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v62);
      }
      outlined init with copy of FloatingPointRoundingRule?((uint64_t)&v19[v46[9]], (uint64_t)v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v10, 1, v44) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v65 = v84;
        (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v84, v10, v44);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v65, v44);
      }
      unint64_t v66 = &v19[v46[10]];
      int v67 = v66[8];
      if (v67 == 255)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v71 = *(void *)v66;
        Hasher._combine(_:)(1u);
        if (v67)
        {
          Hasher._combine(_:)(1uLL);
          if ((v71 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            Swift::UInt64 v77 = v71;
          }
          else {
            Swift::UInt64 v77 = 0;
          }
          Hasher._combine(_:)(v77);
        }
        else
        {
          Hasher._combine(_:)(0);
          Hasher._combine(_:)(v71);
        }
      }
      Swift::UInt v78 = v19[v46[11]];
      if (v78 == 3)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v78);
      }
      unint64_t v75 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
      uint64_t v76 = (uint64_t)v19;
LABEL_96:
      outlined destroy of ICULegacyNumberFormatter.NumberFormatType(v76, v75);
LABEL_97:
      uint64_t v81 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(*(unsigned char *)(v25 + *(int *)(v81 + 24)));
      return;
  }
}

uint64_t outlined init with take of CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for CurrencyFormatStyleConfiguration.Collection(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for CurrencyFormatStyleConfiguration.Collection);
}

uint64_t outlined init with take of NumberFormatStyleConfiguration.Precision?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id @objc static NSLocale._localeIdentifier(fromWindowsLocaleCode:)(uint64_t a1, uint64_t a2, unsigned int a3)
{
  specialized static Locale.identifier(fromWindowsLocaleCode:)(a3);
  if (v3)
  {
    uint64_t v4 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

uint64_t specialized static Locale.identifier(fromWindowsLocaleCode:)(unint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (HIDWORD(a1)) {
    return 0;
  }
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if (isStackAllocationSafe)
  {
    double v4 = MEMORY[0x1F4188790](isStackAllocationSafe);
    int v11 = 0;
    int v5 = MEMORY[0x185309E90](a1, v10, 1024, &v11, v4);
    if (v11 > 0 || v5 <= 0)
    {
      return 0;
    }
    else
    {
      v10[v5] = 0;
      return MEMORY[0x185301F80](v10);
    }
  }
  else
  {
    uint64_t v7 = swift_slowAlloc();
    int v11 = 0;
    int v8 = MEMORY[0x185309E90](a1, v7, 1024, &v11);
    uint64_t v1 = 0;
    if (v11 <= 0 && v8 > 0)
    {
      *(unsigned char *)(v7 + v8) = 0;
      uint64_t v1 = MEMORY[0x185301F80](v7);
    }
    MEMORY[0x185309510](v7, -1, -1);
  }
  return v1;
}

void static Measurement<>.FormatStyle.UnitWidth.wide.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance AttributedString.Index()
{
  return (static BigString.Index.< infix(_:_:)() & 1) == 0;
}

uint64_t type metadata accessor for BufferView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Equal<A, B>(uint64_t a1)
{
  *(void *)(a1 + 16) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 24) = result;
  return result;
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

uint64_t specialized closure #1 in static AttributeScope.scopeDescription.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes);
  if ((v3 & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(*(void *)(v1 + 56) + 16 * v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v4;
}

{
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes);
  if ((v3 & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(*(void *)(v1 + 56) + 16 * v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v4;
}

{
  uint64_t v1;
  Swift::UInt v2;
  unint64_t v3;
  char v4;
  uint64_t v5;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  unint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _FoundationPlusScope<AttributeScopes.FoundationAttributes>);
  char v3 = specialized __RawDictionaryStorage.find<A>(_:)(v2);
  if ((v4 & 1) == 0) {
    return 0;
  }
  int v5 = *(void *)(*(void *)(v1 + 56) + 16 * v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t AttributedString.init<A>(_:including:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = static AttributeScope.scopeDescription.getter(a2);
  swift_bridgeObjectRelease();
  uint64_t result = AttributedString.init(_:attributeTable:options:)(a1, (uint64_t)v6, 0, &v8);
  if (!v3) {
    *a3 = v8;
  }
  return result;
}

{
  uint64_t v3;
  void *v6;
  uint64_t result;
  uint64_t v8;

  uint64_t v6 = static AttributeScope.scopeDescription.getter(a2);
  swift_bridgeObjectRelease();
  AttributedString.init(_:attributeTable:options:)(a1, (uint64_t)v6, 0, &v8);
  uint64_t result = swift_release();
  if (!v3) {
    *a3 = v8;
  }
  return result;
}

void AttributedString.init(_:)(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = a1;
  uint64_t Default = _loadDefaultAttributes()((uint64_t)v3);
  AttributedString.init(_:attributeTable:options:)(v3, Default, 1, &v5);

  *a2 = v5;
}

uint64_t Dictionary<>.init<A>(_:including:)(long long *a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *a1;
  id v3 = static AttributeScope.scopeDescription.getter(a3);
  swift_bridgeObjectRelease();
  return specialized Dictionary<>.init(_:attributeTable:options:)((uint64_t *)&v5, (uint64_t)v3, 0);
}

{
  return Dictionary<>.init<A>(_:including:)(a1, a2, a3);
}

{
  void *v3;
  uint64_t v4;
  long long v6;

  uint64_t v6 = *a1;
  id v3 = static AttributeScope.scopeDescription.getter(a3);
  swift_bridgeObjectRelease();
  uint64_t v4 = specialized Dictionary<>.init(_:attributeTable:options:)((uint64_t *)&v6, (uint64_t)v3, 0);
  swift_release();
  return v4;
}

uint64_t closure #2 in static AttributeScope.scopeDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v39 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0x8000000000000000;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  uint64_t v12 = *(void *)(v39 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v4 = v10;
    if (*(void *)(v39 + 24) < v14)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, isUniquelyReferenced_nonNull_native);
      uint64_t v15 = v39;
      unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
      if ((v4 & 1) != (v17 & 1)) {
        goto LABEL_47;
      }
      unint64_t v11 = v16;
      if ((v4 & 1) == 0) {
        goto LABEL_43;
      }
LABEL_8:
      uint64_t v18 = (uint64_t *)(*(void *)(v15 + 56) + 16 * v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *uint64_t v18 = a2;
      v18[1] = a3;
LABEL_44:
      *(void *)(a1 + 16) = v15;
      return swift_bridgeObjectRelease();
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v15 = v39;
      if (v10) {
        goto LABEL_8;
      }
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v11, a4, a2, a3, (void *)v15);
      goto LABEL_44;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Type, ScopeDescription>);
  uint64_t v19 = static _DictionaryStorage.copy(original:)();
  uint64_t v15 = v19;
  if (!*(void *)(v39 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
  uint64_t v20 = (char *)(v19 + 64);
  uint64_t v21 = (char *)(v39 + 64);
  unint64_t v22 = (unint64_t)((1 << *(unsigned char *)(v15 + 32)) + 63) >> 6;
  uint64_t v37 = v39 + 64;
  if (v15 != v39 || v20 >= &v21[8 * v22]) {
    memmove(v20, v21, 8 * v22);
  }
  int64_t v23 = 0;
  *(void *)(v15 + 16) = *(void *)(v39 + 16);
  uint64_t v24 = 1 << *(unsigned char *)(v39 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & *(void *)(v39 + 64);
  int64_t v38 = (unint64_t)(v24 + 63) >> 6;
  while (1)
  {
    if (v26)
    {
      unint64_t v27 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      unint64_t v28 = v27 | (v23 << 6);
      goto LABEL_18;
    }
    int64_t v33 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v33 >= v38) {
      goto LABEL_42;
    }
    unint64_t v34 = *(void *)(v37 + 8 * v33);
    ++v23;
    if (!v34)
    {
      int64_t v23 = v33 + 1;
      if (v33 + 1 >= v38) {
        goto LABEL_42;
      }
      unint64_t v34 = *(void *)(v37 + 8 * v23);
      if (!v34)
      {
        int64_t v23 = v33 + 2;
        if (v33 + 2 >= v38) {
          goto LABEL_42;
        }
        unint64_t v34 = *(void *)(v37 + 8 * v23);
        if (!v34)
        {
          int64_t v23 = v33 + 3;
          if (v33 + 3 >= v38) {
            goto LABEL_42;
          }
          unint64_t v34 = *(void *)(v37 + 8 * v23);
          if (!v34)
          {
            int64_t v23 = v33 + 4;
            if (v33 + 4 >= v38) {
              goto LABEL_42;
            }
            unint64_t v34 = *(void *)(v37 + 8 * v23);
            if (!v34)
            {
              int64_t v23 = v33 + 5;
              if (v33 + 5 >= v38) {
                goto LABEL_42;
              }
              unint64_t v34 = *(void *)(v37 + 8 * v23);
              if (!v34)
              {
                int64_t v23 = v33 + 6;
                if (v33 + 6 >= v38) {
                  goto LABEL_42;
                }
                unint64_t v34 = *(void *)(v37 + 8 * v23);
                if (!v34) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_41:
    unint64_t v26 = (v34 - 1) & v34;
    unint64_t v28 = __clz(__rbit64(v34)) + (v23 << 6);
LABEL_18:
    uint64_t v29 = 8 * v28;
    uint64_t v30 = *(void *)(*(void *)(v39 + 48) + 8 * v28);
    uint64_t v31 = 16 * v28;
    long long v32 = *(_OWORD *)(*(void *)(v39 + 56) + v31);
    *(void *)(*(void *)(v15 + 48) + v29) = v30;
    *(_OWORD *)(*(void *)(v15 + 56) + v31) = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  int64_t v35 = v33 + 7;
  if (v35 >= v38) {
    goto LABEL_42;
  }
  unint64_t v34 = *(void *)(v37 + 8 * v35);
  if (v34)
  {
    int64_t v23 = v35;
    goto LABEL_41;
  }
  while (1)
  {
    int64_t v23 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v23 >= v38) {
      goto LABEL_42;
    }
    unint64_t v34 = *(void *)(v37 + 8 * v23);
    ++v35;
    if (v34) {
      goto LABEL_41;
    }
  }
LABEL_46:
  __break(1u);
LABEL_47:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _loadDefaultAttributes()(uint64_t a1)
{
  if (one-time initialization token for _loadedScopeCache != -1) {
    goto LABEL_84;
  }
LABEL_2:
  uint64_t v1 = (os_unfair_lock_s *)_loadedScopeCache;
  MEMORY[0x1F4188790](a1);
  swift_retain();
  os_unfair_lock_lock(v1 + 10);
  partial apply for closure #1 in _loadDefaultAttributes()(&v72);
  os_unfair_lock_unlock(v1 + 10);
  swift_release();
  unint64_t v2 = v72;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  unint64_t v5 = v4 + 1;
  if (v4 >= v3 >> 1) {
    unint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  v2[2] = v5;
  uint64_t v6 = &v2[2 * v4];
  v6[4] = &type metadata for AttributeScopes.FoundationAttributes;
  v6[5] = &protocol witness table for AttributeScopes.FoundationAttributes;
  Swift::UInt v72 = (void *)MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 + 1, 0);
  uint64_t v7 = v72;
  uint64_t v8 = v2 + 5;
  do
  {
    uint64_t v9 = static AttributeScope.scopeDescription.getter(*(v8 - 1));
    swift_bridgeObjectRelease();
    Swift::UInt v72 = v7;
    unint64_t v11 = v7[2];
    unint64_t v10 = v7[3];
    uint64_t v12 = v7;
    if (v11 >= v10 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      uint64_t v12 = v72;
    }
    void v12[2] = v11 + 1;
    v12[v11 + 4] = v9;
    v8 += 2;
    --v5;
    uint64_t v7 = v12;
  }
  while (v5);
  int v67 = v12 + 4;
  swift_bridgeObjectRelease();
  uint64_t v66 = v7[2];
  if (!v66)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC868];
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = 0;
  uint64_t v14 = MEMORY[0x1E4FBC868];
LABEL_13:
  uint64_t v68 = v13;
  uint64_t v15 = v67[v13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::UInt v72 = (void *)v14;
  uint64_t v69 = v15 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(v15 + 32);
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & *(void *)(v15 + 64);
  int64_t v70 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t i = 0;
  while (1)
  {
    if (v19)
    {
      unint64_t v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v22 = v21 | (i << 6);
      goto LABEL_36;
    }
    int64_t v23 = i + 1;
    if (__OFADD__(i, 1)) {
      goto LABEL_81;
    }
    if (v23 >= v70)
    {
LABEL_12:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v13 = v68 + 1;
      swift_bridgeObjectRelease();
      if (v68 + 1 == v66)
      {
        swift_bridgeObjectRelease_n();
        return v14;
      }
      goto LABEL_13;
    }
    unint64_t v24 = *(void *)(v69 + 8 * v23);
    ++i;
    if (!v24)
    {
      int64_t i = v23 + 1;
      if (v23 + 1 >= v70) {
        goto LABEL_12;
      }
      unint64_t v24 = *(void *)(v69 + 8 * i);
      if (!v24)
      {
        int64_t i = v23 + 2;
        if (v23 + 2 >= v70) {
          goto LABEL_12;
        }
        unint64_t v24 = *(void *)(v69 + 8 * i);
        if (!v24)
        {
          int64_t i = v23 + 3;
          if (v23 + 3 >= v70) {
            goto LABEL_12;
          }
          unint64_t v24 = *(void *)(v69 + 8 * i);
          if (!v24)
          {
            int64_t v25 = v23 + 4;
            if (v25 >= v70) {
              goto LABEL_12;
            }
            unint64_t v24 = *(void *)(v69 + 8 * v25);
            for (int64_t i = v25; !v24; ++v25)
            {
              int64_t i = v25 + 1;
              if (__OFADD__(v25, 1)) {
                goto LABEL_82;
              }
              if (i >= v70) {
                goto LABEL_12;
              }
              unint64_t v24 = *(void *)(v69 + 8 * i);
            }
          }
        }
      }
    }
    unint64_t v19 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (i << 6);
LABEL_36:
    uint64_t v26 = 16 * v22;
    unint64_t v27 = (uint64_t *)(*(void *)(v15 + 48) + v26);
    uint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    long long v71 = *(_OWORD *)(*(void *)(v15 + 56) + v26);
    swift_bridgeObjectRetain();
    unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
    uint64_t v32 = *(void *)(v14 + 16);
    BOOL v33 = (v30 & 1) == 0;
    uint64_t v34 = v32 + v33;
    if (__OFADD__(v32, v33))
    {
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      a1 = swift_once();
      goto LABEL_2;
    }
    char v35 = v30;
    if (*(void *)(v14 + 24) >= v34) {
      break;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, isUniquelyReferenced_nonNull_native & 1);
    uint64_t v36 = (uint64_t)v72;
    unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
    if ((v35 & 1) != (v38 & 1)) {
      goto LABEL_86;
    }
    unint64_t v31 = v37;
    if (v35)
    {
LABEL_17:
      swift_bridgeObjectRelease();
      *(_OWORD *)(*(void *)(v36 + 56) + 16 * v31) = v71;
      goto LABEL_18;
    }
LABEL_43:
    *(void *)(v36 + 8 * (v31 >> 6) + 64) |= 1 << v31;
    uint64_t v39 = (uint64_t *)(*(void *)(v36 + 48) + 16 * v31);
    *uint64_t v39 = v29;
    v39[1] = v28;
    *(_OWORD *)(*(void *)(v36 + 56) + 16 * v31) = v71;
    uint64_t v40 = *(void *)(v36 + 16);
    BOOL v41 = __OFADD__(v40, 1);
    uint64_t v42 = v40 + 1;
    if (v41) {
      goto LABEL_80;
    }
    *(void *)(v36 + 16) = v42;
LABEL_18:
    char isUniquelyReferenced_nonNull_native = 1;
    uint64_t v14 = v36;
  }
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v36 = v14;
    if (v30) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
  uint64_t v43 = static _DictionaryStorage.copy(original:)();
  uint64_t v36 = v43;
  if (!*(void *)(v14 + 16))
  {
LABEL_74:
    swift_release();
    Swift::UInt v72 = (void *)v36;
    if (v35) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
  uint64_t v44 = (void *)(v43 + 64);
  unint64_t v45 = (unint64_t)((1 << *(unsigned char *)(v36 + 32)) + 63) >> 6;
  if (v36 != v14 || (unint64_t)v44 >= v14 + 64 + 8 * v45) {
    memmove(v44, (const void *)(v14 + 64), 8 * v45);
  }
  uint64_t v63 = v14 + 64;
  int64_t v46 = 0;
  *(void *)(v36 + 16) = *(void *)(v14 + 16);
  uint64_t v47 = 1 << *(unsigned char *)(v14 + 32);
  if (v47 < 64) {
    uint64_t v48 = ~(-1 << v47);
  }
  else {
    uint64_t v48 = -1;
  }
  unint64_t v49 = v48 & *(void *)(v14 + 64);
  int64_t v64 = (unint64_t)(v47 + 63) >> 6;
  while (2)
  {
    if (v49)
    {
      unint64_t v50 = __clz(__rbit64(v49));
      v49 &= v49 - 1;
      int64_t v65 = v46;
      unint64_t v51 = v50 | (v46 << 6);
LABEL_54:
      uint64_t v52 = 16 * v51;
      int v53 = (uint64_t *)(*(void *)(v14 + 48) + v52);
      uint64_t v55 = *v53;
      uint64_t v54 = v53[1];
      long long v56 = *(_OWORD *)(*(void *)(v14 + 56) + v52);
      Swift::UInt v57 = (void *)(*(void *)(v36 + 48) + v52);
      *Swift::UInt v57 = v55;
      v57[1] = v54;
      *(_OWORD *)(*(void *)(v36 + 56) + v52) = v56;
      swift_bridgeObjectRetain();
      int64_t v46 = v65;
      continue;
    }
    break;
  }
  int64_t v58 = v46 + 1;
  if (__OFADD__(v46, 1)) {
    goto LABEL_83;
  }
  if (v58 >= v64) {
    goto LABEL_74;
  }
  unint64_t v59 = *(void *)(v63 + 8 * v58);
  int64_t v60 = v46 + 1;
  if (v59) {
    goto LABEL_73;
  }
  int64_t v60 = v46 + 2;
  if (v46 + 2 >= v64) {
    goto LABEL_74;
  }
  unint64_t v59 = *(void *)(v63 + 8 * v60);
  if (v59) {
    goto LABEL_73;
  }
  int64_t v60 = v46 + 3;
  if (v46 + 3 >= v64) {
    goto LABEL_74;
  }
  unint64_t v59 = *(void *)(v63 + 8 * v60);
  if (v59) {
    goto LABEL_73;
  }
  int64_t v60 = v46 + 4;
  if (v46 + 4 >= v64) {
    goto LABEL_74;
  }
  unint64_t v59 = *(void *)(v63 + 8 * v60);
  if (v59) {
    goto LABEL_73;
  }
  int64_t v60 = v46 + 5;
  if (v46 + 5 >= v64) {
    goto LABEL_74;
  }
  unint64_t v59 = *(void *)(v63 + 8 * v60);
  if (v59)
  {
LABEL_73:
    unint64_t v49 = (v59 - 1) & v59;
    int64_t v65 = v60;
    unint64_t v51 = __clz(__rbit64(v59)) + (v60 << 6);
    goto LABEL_54;
  }
  uint64_t v61 = v46 + 6;
  if (v46 + 6 >= v64) {
    goto LABEL_74;
  }
  unint64_t v59 = *(void *)(v63 + 8 * v61);
  if (v59)
  {
    int64_t v60 = v46 + 6;
    goto LABEL_73;
  }
  while (1)
  {
    int64_t v60 = v61 + 1;
    if (__OFADD__(v61, 1)) {
      break;
    }
    if (v60 >= v64) {
      goto LABEL_74;
    }
    unint64_t v59 = *(void *)(v63 + 8 * v60);
    ++v61;
    if (v59) {
      goto LABEL_73;
    }
  }
  __break(1u);
LABEL_86:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *static AttributeScope.scopeDescription.getter(uint64_t a1)
{
  uint64_t v1 = a1;
  if (one-time initialization token for _loadedScopeCache != -1) {
    goto LABEL_258;
  }
  while (2)
  {
    unint64_t v2 = (os_unfair_lock_s *)_loadedScopeCache;
    MEMORY[0x1F4188790](a1);
    swift_retain();
    os_unfair_lock_lock(v2 + 10);
    partial apply for closure #1 in static AttributeScope.scopeDescription.getter((unint64_t)&v2[4], &v225);
    os_unfair_lock_unlock(v2 + 10);
    swift_release();
    unint64_t v3 = (void *)v225;
    if ((void)v225) {
      return v3;
    }
    unint64_t v4 = 0;
    unint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    uint64_t v223 = MEMORY[0x1E4FBC868];
LABEL_4:
    unint64_t v5 = *(void *)v1;
    if (*(void *)v1 > 0x7FFuLL) {
      goto LABEL_7;
    }
    if (v5 == 512)
    {
      swift_getKeyPath();
      uint64_t v78 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      uint64_t v7 = swift_release();
      uint64_t v8 = (unsigned int *)(*(void *)(v1 + v78) + 20);
      goto LABEL_8;
    }
    if (!v5)
    {
LABEL_7:
      swift_getKeyPath();
      uint64_t v6 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      uint64_t v7 = swift_release();
      uint64_t v8 = (unsigned int *)(*(void *)(v1 + v6) + 36);
LABEL_8:
      uint64_t v9 = *v8;
      goto LABEL_9;
    }
    uint64_t v7 = static Metadata.Kind.tuple.getter();
    if ((unint64_t)v7 > 0x7FF || v7 != v5)
    {
      if (!v4)
      {
LABEL_251:
        id v207 = (os_unfair_lock_s *)_loadedScopeCache;
        MEMORY[0x1F4188790](v7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        os_unfair_lock_lock(v207 + 10);
        partial apply for closure #2 in static AttributeScope.scopeDescription.getter((uint64_t)&v207[4]);
        os_unfair_lock_unlock(v207 + 10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return v3;
      }
      goto LABEL_10;
    }
    MEMORY[0x185300FE0](v1);
    uint64_t v9 = TupleMetadata.Elements.endIndex.getter();
    if (TupleMetadata.Elements.endIndex.getter() < 0)
    {
      __break(1u);
LABEL_260:
      __break(1u);
LABEL_261:
      __break(1u);
LABEL_262:
      __break(1u);
LABEL_263:
      __break(1u);
LABEL_264:
      __break(1u);
LABEL_265:
      __break(1u);
LABEL_266:
      __break(1u);
LABEL_267:
      __break(1u);
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
      goto LABEL_270;
    }
    uint64_t v7 = TupleMetadata.Elements.endIndex.getter();
    if (v9 < 0 || v7 < v9) {
      goto LABEL_260;
    }
LABEL_9:
    if (v4 == v9) {
      goto LABEL_251;
    }
LABEL_10:
    unint64_t v10 = *(void *)v1;
    if (*(void *)v1 > 0x7FFuLL) {
      goto LABEL_13;
    }
    if (v10 == 512)
    {
      swift_getKeyPath();
      uint64_t v79 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      uint64_t v12 = (unsigned int *)(*(void *)(v1 + v79) + 20);
      goto LABEL_14;
    }
    if (!v10)
    {
LABEL_13:
      swift_getKeyPath();
      uint64_t v11 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      uint64_t v12 = (unsigned int *)(*(void *)(v1 + v11) + 36);
LABEL_14:
      uint64_t v13 = *v12;
      goto LABEL_15;
    }
    unint64_t v80 = static Metadata.Kind.tuple.getter();
    uint64_t v13 = 0;
    if (v80 <= 0x7FF && v80 == v10)
    {
      MEMORY[0x185300FE0](v1);
      uint64_t v13 = TupleMetadata.Elements.endIndex.getter();
      if (TupleMetadata.Elements.endIndex.getter() < 0) {
        goto LABEL_261;
      }
      uint64_t v81 = TupleMetadata.Elements.endIndex.getter();
      if (v13 < 0 || v81 < v13) {
        goto LABEL_262;
      }
    }
LABEL_15:
    if (v4 >= v13)
    {
      __break(1u);
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      a1 = swift_once();
      continue;
    }
    break;
  }
  unint64_t v14 = *(void *)v1;
  unint64_t v15 = static Metadata.Kind.tuple.getter();
  if (v14 >= 0x800)
  {
    if (v15 - 2048 < 0xFFFFFFFFFFFFF801) {
      goto LABEL_21;
    }
LABEL_23:
    uint64_t v18 = TypeMetadata.descriptor.getter();
    swift_getKeyPath();
    dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    int v19 = *(_DWORD *)(v18 + 16);
    long long v225 = *(_OWORD *)v18;
    LODWORD(v226) = v19;
    swift_getAtKeyPath();
    swift_release();
    uint64_t v20 = FieldDescriptor.subscript.getter();
    swift_getKeyPath();
    dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    int v21 = *(_DWORD *)(v20 + 8);
    *(void *)&long long v225 = *(void *)v20;
    DWORD2(v225) = v21;
    swift_getAtKeyPath();
    swift_release();
    uint64_t v17 = MangledTypeReference.standardSubstitution.getter();
    if (!v17) {
      uint64_t v17 = TypeMetadata._resolve(_:)();
    }
    unint64_t v16 = v4;
    goto LABEL_26;
  }
  if (v15 >= 0x800)
  {
    if (!v14) {
      goto LABEL_21;
    }
    goto LABEL_23;
  }
  if (v14 != v15) {
    goto LABEL_23;
  }
LABEL_21:
  MEMORY[0x185300FE0](v1);
  unint64_t v16 = v4;
  TupleMetadata.Elements.subscript.getter();
  uint64_t v17 = TupleMetadata.Elements.Element.metadata.getter();
LABEL_26:
  uint64_t v22 = swift_conformsToProtocol2();
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  if (v22) {
    uint64_t v24 = v17;
  }
  else {
    uint64_t v24 = 0;
  }
  if (v24)
  {
    uint64_t v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 24))(v24, v23);
    uint64_t v84 = v83;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v225 = v3;
    uint64_t v218 = v82;
    uint64_t v221 = v84;
    unint64_t v87 = specialized __RawDictionaryStorage.find<A>(_:)(v82, v84);
    uint64_t v88 = v3[2];
    BOOL v89 = (v86 & 1) == 0;
    uint64_t v90 = v88 + v89;
    if (__OFADD__(v88, v89)) {
      goto LABEL_263;
    }
    if (v3[3] < v90)
    {
      char v91 = v86;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v90, isUniquelyReferenced_nonNull_native);
      unint64_t v3 = (void *)v225;
      uint64_t v92 = v218;
      unint64_t v93 = specialized __RawDictionaryStorage.find<A>(_:)(v218, v84);
      if ((v91 & 1) != (v94 & 1)) {
        goto LABEL_273;
      }
      unint64_t v87 = v93;
      if ((v91 & 1) == 0) {
        goto LABEL_108;
      }
      goto LABEL_105;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v92 = v82;
      if ((v86 & 1) == 0) {
        goto LABEL_108;
      }
LABEL_105:
      uint64_t v95 = (uint64_t *)(v3[7] + 16 * v87);
      *uint64_t v95 = v24;
      v95[1] = v23;
      unint64_t v96 = v16;
      goto LABEL_110;
    }
    unint64_t v168 = v87;
    char v216 = v86;
    uint64_t v212 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
    uint64_t v169 = static _DictionaryStorage.copy(original:)();
    uint64_t v170 = v169;
    if (!v3[2]) {
      goto LABEL_213;
    }
    uint64_t result = (void *)(v169 + 64);
    uint64_t v172 = v3 + 8;
    unint64_t v173 = (unint64_t)((1 << *(unsigned char *)(v170 + 32)) + 63) >> 6;
    if ((void *)v170 != v3 || result >= &v172[v173]) {
      uint64_t result = memmove(result, v3 + 8, 8 * v173);
    }
    int64_t v174 = 0;
    *(void *)(v170 + 16) = v3[2];
    uint64_t v175 = 1 << *((unsigned char *)v3 + 32);
    if (v175 < 64) {
      uint64_t v176 = ~(-1 << v175);
    }
    else {
      uint64_t v176 = -1;
    }
    unint64_t v177 = v176 & v3[8];
    int64_t v178 = (unint64_t)(v175 + 63) >> 6;
    while (1)
    {
      if (v177)
      {
        unint64_t v179 = __clz(__rbit64(v177));
        v177 &= v177 - 1;
        unint64_t v180 = v179 | (v174 << 6);
      }
      else
      {
        BOOL v58 = __OFADD__(v174++, 1);
        if (v58) {
          goto LABEL_269;
        }
        if (v174 >= v178) {
          goto LABEL_213;
        }
        unint64_t v187 = v172[v174];
        if (!v187)
        {
          int64_t v188 = v174 + 1;
          if (v174 + 1 >= v178) {
            goto LABEL_213;
          }
          unint64_t v187 = v172[v188];
          if (!v187)
          {
            int64_t v188 = v174 + 2;
            if (v174 + 2 >= v178) {
              goto LABEL_213;
            }
            unint64_t v187 = v172[v188];
            if (!v187)
            {
              int64_t v188 = v174 + 3;
              if (v174 + 3 >= v178) {
                goto LABEL_213;
              }
              unint64_t v187 = v172[v188];
              if (!v187)
              {
                int64_t v188 = v174 + 4;
                if (v174 + 4 >= v178) {
                  goto LABEL_213;
                }
                unint64_t v187 = v172[v188];
                if (!v187)
                {
                  int64_t v188 = v174 + 5;
                  if (v174 + 5 >= v178) {
                    goto LABEL_213;
                  }
                  unint64_t v187 = v172[v188];
                  if (!v187)
                  {
                    int64_t v188 = v174 + 6;
                    if (v174 + 6 >= v178) {
                      goto LABEL_213;
                    }
                    unint64_t v187 = v172[v188];
                    if (!v187)
                    {
                      int64_t v188 = v174 + 7;
                      if (v174 + 7 >= v178) {
                        goto LABEL_213;
                      }
                      unint64_t v187 = v172[v188];
                      if (!v187)
                      {
                        while (1)
                        {
                          int64_t v174 = v188 + 1;
                          if (__OFADD__(v188, 1)) {
                            goto LABEL_274;
                          }
                          if (v174 >= v178) {
                            break;
                          }
                          unint64_t v187 = v172[v174];
                          ++v188;
                          if (v187) {
                            goto LABEL_208;
                          }
                        }
LABEL_213:
                        swift_bridgeObjectRelease();
                        uint64_t v1 = v212;
                        unint64_t v3 = (void *)v170;
                        uint64_t v92 = v218;
                        unint64_t v87 = v168;
                        if (v216) {
                          goto LABEL_105;
                        }
LABEL_108:
                        v3[(v87 >> 6) + 8] |= 1 << v87;
                        uint64_t v97 = (uint64_t *)(v3[6] + 16 * v87);
                        *uint64_t v97 = v92;
                        v97[1] = v221;
                        unint64_t v98 = (uint64_t *)(v3[7] + 16 * v87);
                        *unint64_t v98 = v24;
                        v98[1] = v23;
                        uint64_t v99 = v3[2];
                        BOOL v58 = __OFADD__(v99, 1);
                        uint64_t v100 = v99 + 1;
                        if (v58) {
                          goto LABEL_264;
                        }
                        void v3[2] = v100;
                        swift_bridgeObjectRetain();
                        unint64_t v96 = v16;
LABEL_110:
                        unint64_t v4 = v96 + 1;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v101 = swift_conformsToProtocol2();
                        if (v101) {
                          uint64_t v102 = v101;
                        }
                        else {
                          uint64_t v102 = 0;
                        }
                        if (!v101) {
                          uint64_t v24 = 0;
                        }
                        if (v24)
                        {
                          unint64_t v213 = v96;
                          uint64_t v151 = (*(uint64_t (**)(uint64_t, uint64_t))(v102 + 24))(v24, v102);
                          uint64_t v153 = v152;
                          char v154 = swift_isUniquelyReferenced_nonNull_native();
                          *(void *)&long long v225 = v223;
                          uint64_t v222 = v151;
                          unint64_t v156 = specialized __RawDictionaryStorage.find<A>(_:)(v151, v153);
                          uint64_t v157 = *(void *)(v223 + 16);
                          BOOL v158 = (v155 & 1) == 0;
                          uint64_t v159 = v157 + v158;
                          if (__OFADD__(v157, v158)) {
                            goto LABEL_267;
                          }
                          uint64_t v215 = v3;
                          if (*(void *)(v223 + 24) < v159)
                          {
                            char v219 = v155;
                            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v159, v154);
                            uint64_t v127 = v225;
                            uint64_t v160 = v222;
                            unint64_t v161 = specialized __RawDictionaryStorage.find<A>(_:)(v222, v153);
                            if ((v219 & 1) != (v162 & 1)) {
                              goto LABEL_273;
                            }
                            unint64_t v156 = v161;
                            if ((v219 & 1) == 0) {
                              goto LABEL_176;
                            }
                            goto LABEL_173;
                          }
                          if (v154)
                          {
                            uint64_t v127 = v223;
                            uint64_t v160 = v222;
                            if ((v155 & 1) == 0) {
                              goto LABEL_176;
                            }
LABEL_173:
                            uint64_t v163 = (uint64_t *)(*(void *)(v127 + 56) + 16 * v156);
                            *uint64_t v163 = v24;
                            v163[1] = v102;
                            goto LABEL_178;
                          }
                          char v220 = v155;
                          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
                          uint64_t v189 = static _DictionaryStorage.copy(original:)();
                          uint64_t v127 = v189;
                          if (!*(void *)(v223 + 16)) {
                            goto LABEL_249;
                          }
                          uint64_t result = (void *)(v189 + 64);
                          uint64_t v190 = v223 + 64;
                          unint64_t v191 = (unint64_t)((1 << *(unsigned char *)(v127 + 32)) + 63) >> 6;
                          if (v127 != v223 || (unint64_t)result >= v190 + 8 * v191) {
                            uint64_t result = memmove(result, (const void *)(v223 + 64), 8 * v191);
                          }
                          int64_t v192 = 0;
                          *(void *)(v127 + 16) = *(void *)(v223 + 16);
                          uint64_t v193 = 1 << *(unsigned char *)(v223 + 32);
                          if (v193 < 64) {
                            uint64_t v194 = ~(-1 << v193);
                          }
                          else {
                            uint64_t v194 = -1;
                          }
                          unint64_t v195 = v194 & *(void *)(v223 + 64);
                          int64_t v196 = (unint64_t)(v193 + 63) >> 6;
                          while (1)
                          {
                            if (v195)
                            {
                              unint64_t v197 = __clz(__rbit64(v195));
                              v195 &= v195 - 1;
                              unint64_t v198 = v197 | (v192 << 6);
                            }
                            else
                            {
                              BOOL v58 = __OFADD__(v192++, 1);
                              if (v58) {
                                goto LABEL_272;
                              }
                              if (v192 >= v196) {
                                goto LABEL_249;
                              }
                              unint64_t v205 = *(void *)(v190 + 8 * v192);
                              if (!v205)
                              {
                                int64_t v206 = v192 + 1;
                                if (v192 + 1 >= v196) {
                                  goto LABEL_249;
                                }
                                unint64_t v205 = *(void *)(v190 + 8 * v206);
                                if (!v205)
                                {
                                  int64_t v206 = v192 + 2;
                                  if (v192 + 2 >= v196) {
                                    goto LABEL_249;
                                  }
                                  unint64_t v205 = *(void *)(v190 + 8 * v206);
                                  if (!v205)
                                  {
                                    int64_t v206 = v192 + 3;
                                    if (v192 + 3 >= v196) {
                                      goto LABEL_249;
                                    }
                                    unint64_t v205 = *(void *)(v190 + 8 * v206);
                                    if (!v205)
                                    {
                                      int64_t v206 = v192 + 4;
                                      if (v192 + 4 >= v196) {
                                        goto LABEL_249;
                                      }
                                      unint64_t v205 = *(void *)(v190 + 8 * v206);
                                      if (!v205)
                                      {
                                        int64_t v206 = v192 + 5;
                                        if (v192 + 5 >= v196) {
                                          goto LABEL_249;
                                        }
                                        unint64_t v205 = *(void *)(v190 + 8 * v206);
                                        if (!v205)
                                        {
                                          int64_t v206 = v192 + 6;
                                          if (v192 + 6 >= v196) {
                                            goto LABEL_249;
                                          }
                                          unint64_t v205 = *(void *)(v190 + 8 * v206);
                                          if (!v205)
                                          {
                                            int64_t v206 = v192 + 7;
                                            if (v192 + 7 >= v196) {
                                              goto LABEL_249;
                                            }
                                            unint64_t v205 = *(void *)(v190 + 8 * v206);
                                            if (!v205)
                                            {
                                              while (1)
                                              {
                                                int64_t v192 = v206 + 1;
                                                if (__OFADD__(v206, 1)) {
                                                  goto LABEL_275;
                                                }
                                                if (v192 >= v196) {
                                                  break;
                                                }
                                                unint64_t v205 = *(void *)(v190 + 8 * v192);
                                                ++v206;
                                                if (v205) {
                                                  goto LABEL_244;
                                                }
                                              }
LABEL_249:
                                              swift_bridgeObjectRelease();
                                              uint64_t v160 = v222;
                                              if (v220) {
                                                goto LABEL_173;
                                              }
LABEL_176:
                                              *(void *)(v127 + 8 * (v156 >> 6) + 64) |= 1 << v156;
                                              uint64_t v164 = (uint64_t *)(*(void *)(v127 + 48) + 16 * v156);
                                              *uint64_t v164 = v160;
                                              v164[1] = v153;
                                              uint64_t v165 = (uint64_t *)(*(void *)(v127 + 56) + 16 * v156);
                                              uint64_t *v165 = v24;
                                              v165[1] = v102;
                                              uint64_t v166 = *(void *)(v127 + 16);
                                              BOOL v58 = __OFADD__(v166, 1);
                                              uint64_t v167 = v166 + 1;
                                              if (v58) {
                                                goto LABEL_268;
                                              }
                                              *(void *)(v127 + 16) = v167;
                                              swift_bridgeObjectRetain();
LABEL_178:
                                              swift_bridgeObjectRelease();
                                              swift_bridgeObjectRelease();
LABEL_168:
                                              unint64_t v4 = v213 + 1;
                                              uint64_t v223 = v127;
                                              unint64_t v3 = v215;
                                              goto LABEL_4;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                int64_t v192 = v206;
                              }
LABEL_244:
                              unint64_t v195 = (v205 - 1) & v205;
                              unint64_t v198 = __clz(__rbit64(v205)) + (v192 << 6);
                            }
                            uint64_t v199 = 16 * v198;
                            uint64_t v200 = (uint64_t *)(*(void *)(v223 + 48) + v199);
                            uint64_t v202 = *v200;
                            uint64_t v201 = v200[1];
                            long long v203 = *(_OWORD *)(*(void *)(v223 + 56) + v199);
                            uint64_t v204 = (void *)(*(void *)(v127 + 48) + v199);
                            *uint64_t v204 = v202;
                            v204[1] = v201;
                            *(_OWORD *)(*(void *)(v127 + 56) + v199) = v203;
                            uint64_t result = (void *)swift_bridgeObjectRetain();
                          }
                        }
                        goto LABEL_4;
                      }
                    }
                  }
                }
              }
            }
          }
          int64_t v174 = v188;
        }
LABEL_208:
        unint64_t v177 = (v187 - 1) & v187;
        unint64_t v180 = __clz(__rbit64(v187)) + (v174 << 6);
      }
      uint64_t v181 = 16 * v180;
      uint64_t v182 = (uint64_t *)(v3[6] + v181);
      uint64_t v184 = *v182;
      uint64_t v183 = v182[1];
      long long v185 = *(_OWORD *)(v3[7] + v181);
      id v186 = (void *)(*(void *)(v170 + 48) + v181);
      *id v186 = v184;
      v186[1] = v183;
      *(_OWORD *)(*(void *)(v170 + 56) + v181) = v185;
      uint64_t result = (void *)swift_bridgeObjectRetain();
    }
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v25 = v17;
  }
  else {
    uint64_t v25 = 0;
  }
  unint64_t v4 = v16 + 1;
  if (!v25) {
    goto LABEL_4;
  }
  unint64_t v213 = v16;
  uint64_t v26 = static AttributeScope.scopeDescription.getter();
  uint64_t v217 = v27;
  swift_bridgeObjectRetain();
  char v28 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v29 = -1 << *(unsigned char *)(v26 + 32);
  uint64_t v30 = ~v29;
  uint64_t v31 = -v29;
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  else {
    uint64_t v32 = -1;
  }
  uint64_t v33 = v32 & *(void *)(v26 + 64);
  *(void *)&long long v225 = v26;
  *((void *)&v225 + 1) = v26 + 64;
  uint64_t v226 = v30;
  uint64_t v227 = 0;
  uint64_t v228 = v33;
  uint64_t v229 = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B);
  uint64_t v230 = 0;
  uint64_t v231 = v3;
  uint64_t v34 = swift_bridgeObjectRetain();
  uint64_t v35 = specialized LazyMapSequence.Iterator.next()(v34);
  if (v36)
  {
    uint64_t v39 = v35;
    uint64_t v40 = v36;
    uint64_t v41 = v37;
    uint64_t v42 = v38;
    while (1)
    {
      unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
      uint64_t v51 = v3[2];
      BOOL v52 = (v49 & 1) == 0;
      uint64_t v43 = v51 + v52;
      if (__OFADD__(v51, v52)) {
        goto LABEL_254;
      }
      char v53 = v49;
      if (v3[3] >= v43)
      {
        if (v28)
        {
          if (v49) {
            goto LABEL_42;
          }
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
          uint64_t v60 = static _DictionaryStorage.copy(original:)();
          id v214 = (void *)v60;
          if (v3[2])
          {
            uint64_t v61 = v60;
            Swift::UInt v62 = (void *)(v60 + 64);
            unint64_t v63 = (unint64_t)((1 << *(unsigned char *)(v61 + 32)) + 63) >> 6;
            if ((void *)v61 != v3 || v62 >= &v3[v63 + 8]) {
              memmove(v62, v3 + 8, 8 * v63);
            }
            id v208 = v3 + 8;
            int64_t v64 = 0;
            v214[2] = v3[2];
            uint64_t v65 = 1 << *((unsigned char *)v3 + 32);
            if (v65 < 64) {
              uint64_t v66 = ~(-1 << v65);
            }
            else {
              uint64_t v66 = -1;
            }
            unint64_t v67 = v66 & v3[8];
            int64_t v210 = (unint64_t)(v65 + 63) >> 6;
            while (1)
            {
              if (v67)
              {
                unint64_t v68 = __clz(__rbit64(v67));
                v67 &= v67 - 1;
                unint64_t v69 = v68 | (v64 << 6);
              }
              else
              {
                BOOL v58 = __OFADD__(v64++, 1);
                if (v58) {
                  goto LABEL_265;
                }
                if (v64 >= v210) {
                  break;
                }
                unint64_t v76 = v208[v64];
                if (!v76)
                {
                  int64_t v77 = v64 + 1;
                  if (v64 + 1 >= v210) {
                    break;
                  }
                  unint64_t v76 = v208[v77];
                  if (!v76)
                  {
                    int64_t v77 = v64 + 2;
                    if (v64 + 2 >= v210) {
                      break;
                    }
                    unint64_t v76 = v208[v77];
                    if (!v76)
                    {
                      int64_t v77 = v64 + 3;
                      if (v64 + 3 >= v210) {
                        break;
                      }
                      unint64_t v76 = v208[v77];
                      if (!v76)
                      {
                        int64_t v77 = v64 + 4;
                        if (v64 + 4 >= v210) {
                          break;
                        }
                        unint64_t v76 = v208[v77];
                        if (!v76)
                        {
                          int64_t v77 = v64 + 5;
                          if (v64 + 5 >= v210) {
                            break;
                          }
                          unint64_t v76 = v208[v77];
                          if (!v76)
                          {
                            while (1)
                            {
                              int64_t v64 = v77 + 1;
                              if (__OFADD__(v77, 1)) {
                                break;
                              }
                              if (v64 >= v210) {
                                goto LABEL_83;
                              }
                              unint64_t v76 = v208[v64];
                              ++v77;
                              if (v76) {
                                goto LABEL_78;
                              }
                            }
LABEL_270:
                            __break(1u);
                            goto LABEL_271;
                          }
                        }
                      }
                    }
                  }
                  int64_t v64 = v77;
                }
LABEL_78:
                unint64_t v67 = (v76 - 1) & v76;
                unint64_t v69 = __clz(__rbit64(v76)) + (v64 << 6);
              }
              uint64_t v70 = 16 * v69;
              long long v71 = (uint64_t *)(v3[6] + v70);
              uint64_t v73 = *v71;
              uint64_t v72 = v71[1];
              long long v74 = *(_OWORD *)(v3[7] + v70);
              unint64_t v75 = (void *)(v214[6] + v70);
              *unint64_t v75 = v73;
              v75[1] = v72;
              *(_OWORD *)(v214[7] + v70) = v74;
              swift_bridgeObjectRetain();
            }
          }
LABEL_83:
          uint64_t v43 = swift_release();
          unint64_t v3 = v214;
          uint64_t v231 = v214;
          if (v53)
          {
LABEL_42:
            uint64_t v43 = swift_bridgeObjectRelease();
            uint64_t v44 = (void *)(v3[7] + 16 * v50);
            *uint64_t v44 = v41;
            v44[1] = v42;
            goto LABEL_43;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, v28 & 1);
        unint64_t v3 = v231;
        uint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
        if ((v53 & 1) != (v54 & 1)) {
          goto LABEL_273;
        }
        unint64_t v50 = v43;
        if (v53) {
          goto LABEL_42;
        }
      }
      v3[(v50 >> 6) + 8] |= 1 << v50;
      uint64_t v55 = (uint64_t *)(v3[6] + 16 * v50);
      *uint64_t v55 = v39;
      v55[1] = v40;
      long long v56 = (void *)(v3[7] + 16 * v50);
      *long long v56 = v41;
      v56[1] = v42;
      uint64_t v57 = v3[2];
      BOOL v58 = __OFADD__(v57, 1);
      uint64_t v59 = v57 + 1;
      if (v58) {
        goto LABEL_256;
      }
      void v3[2] = v59;
LABEL_43:
      uint64_t v39 = specialized LazyMapSequence.Iterator.next()(v43);
      uint64_t v40 = v45;
      uint64_t v41 = v46;
      uint64_t v42 = v47;
      char v28 = 1;
      uint64_t v48 = v3;
      if (!v45) {
        goto LABEL_118;
      }
    }
  }
  uint64_t v48 = v3;
LABEL_118:
  uint64_t v215 = v48;
  uint64_t v211 = v1;
  swift_bridgeObjectRelease();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v1 = v223;
  char v103 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v104 = -1 << *(unsigned char *)(v217 + 32);
  uint64_t v105 = ~v104;
  uint64_t v106 = -v104;
  if (v106 < 64) {
    uint64_t v107 = ~(-1 << v106);
  }
  else {
    uint64_t v107 = -1;
  }
  uint64_t v108 = v107 & *(void *)(v217 + 64);
  *(void *)&long long v225 = v217;
  *((void *)&v225 + 1) = v217 + 64;
  uint64_t v226 = v105;
  uint64_t v227 = 0;
  uint64_t v228 = v108;
  uint64_t v229 = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B);
  uint64_t v230 = 0;
  uint64_t v231 = (void *)v223;
  uint64_t v109 = swift_bridgeObjectRetain();
  uint64_t v110 = specialized LazyMapSequence.Iterator.next()(v109);
  if (!v111)
  {
    uint64_t v127 = v223;
LABEL_167:
    swift_bridgeObjectRelease();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v1 = v211;
    goto LABEL_168;
  }
  uint64_t v114 = v110;
  uint64_t v115 = v111;
  uint64_t v116 = v112;
  uint64_t v117 = v113;
  while (1)
  {
    unint64_t v124 = specialized __RawDictionaryStorage.find<A>(_:)(v114, v115);
    uint64_t v125 = *(void *)(v1 + 16);
    BOOL v126 = (v123 & 1) == 0;
    uint64_t v118 = v125 + v126;
    if (__OFADD__(v125, v126)) {
      goto LABEL_255;
    }
    uint64_t v127 = v1;
    char v128 = v123;
    if (*(void *)(v1 + 24) >= v118) {
      break;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v118, v103 & 1);
    uint64_t v127 = (uint64_t)v231;
    uint64_t v118 = specialized __RawDictionaryStorage.find<A>(_:)(v114, v115);
    if ((v128 & 1) != (v129 & 1)) {
      goto LABEL_273;
    }
    unint64_t v124 = v118;
    if (v128)
    {
LABEL_123:
      uint64_t v118 = swift_bridgeObjectRelease();
      unint64_t v119 = (void *)(*(void *)(v127 + 56) + 16 * v124);
      void *v119 = v116;
      v119[1] = v117;
      goto LABEL_124;
    }
LABEL_132:
    *(void *)(v127 + 8 * (v124 >> 6) + 64) |= 1 << v124;
    uint64_t v130 = (uint64_t *)(*(void *)(v127 + 48) + 16 * v124);
    *uint64_t v130 = v114;
    v130[1] = v115;
    char v131 = (void *)(*(void *)(v127 + 56) + 16 * v124);
    *char v131 = v116;
    v131[1] = v117;
    uint64_t v132 = *(void *)(v127 + 16);
    BOOL v58 = __OFADD__(v132, 1);
    uint64_t v133 = v132 + 1;
    if (v58) {
      goto LABEL_257;
    }
    *(void *)(v127 + 16) = v133;
LABEL_124:
    uint64_t v114 = specialized LazyMapSequence.Iterator.next()(v118);
    uint64_t v115 = v120;
    uint64_t v116 = v121;
    uint64_t v117 = v122;
    char v103 = 1;
    uint64_t v1 = v127;
    if (!v120) {
      goto LABEL_167;
    }
  }
  if (v103)
  {
    if (v123) {
      goto LABEL_123;
    }
    goto LABEL_132;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
  uint64_t v134 = static _DictionaryStorage.copy(original:)();
  uint64_t v127 = v134;
  if (!*(void *)(v1 + 16))
  {
LABEL_164:
    uint64_t v118 = swift_release();
    uint64_t v231 = (void *)v127;
    if (v128) {
      goto LABEL_123;
    }
    goto LABEL_132;
  }
  id v135 = (void *)(v134 + 64);
  unint64_t v136 = (unint64_t)((1 << *(unsigned char *)(v127 + 32)) + 63) >> 6;
  if (v127 != v1 || (unint64_t)v135 >= v1 + 64 + 8 * v136) {
    memmove(v135, (const void *)(v1 + 64), 8 * v136);
  }
  uint64_t v209 = v1 + 64;
  int64_t v137 = 0;
  *(void *)(v127 + 16) = *(void *)(v1 + 16);
  uint64_t v138 = 1 << *(unsigned char *)(v1 + 32);
  if (v138 < 64) {
    uint64_t v139 = ~(-1 << v138);
  }
  else {
    uint64_t v139 = -1;
  }
  unint64_t v140 = v139 & *(void *)(v1 + 64);
  int64_t v224 = (unint64_t)(v138 + 63) >> 6;
  while (2)
  {
    if (v140)
    {
      unint64_t v141 = __clz(__rbit64(v140));
      v140 &= v140 - 1;
      unint64_t v142 = v141 | (v137 << 6);
LABEL_143:
      uint64_t v143 = 16 * v142;
      uint64_t v144 = (uint64_t *)(*(void *)(v1 + 48) + v143);
      uint64_t v146 = *v144;
      uint64_t v145 = v144[1];
      long long v147 = *(_OWORD *)(*(void *)(v1 + 56) + v143);
      uint64_t v148 = (void *)(*(void *)(v127 + 48) + v143);
      *uint64_t v148 = v146;
      v148[1] = v145;
      *(_OWORD *)(*(void *)(v127 + 56) + v143) = v147;
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  BOOL v58 = __OFADD__(v137++, 1);
  if (v58) {
    goto LABEL_266;
  }
  if (v137 >= v224) {
    goto LABEL_164;
  }
  unint64_t v149 = *(void *)(v209 + 8 * v137);
  if (v149)
  {
LABEL_159:
    unint64_t v140 = (v149 - 1) & v149;
    unint64_t v142 = __clz(__rbit64(v149)) + (v137 << 6);
    goto LABEL_143;
  }
  int64_t v150 = v137 + 1;
  if (v137 + 1 >= v224) {
    goto LABEL_164;
  }
  unint64_t v149 = *(void *)(v209 + 8 * v150);
  if (v149) {
    goto LABEL_158;
  }
  int64_t v150 = v137 + 2;
  if (v137 + 2 >= v224) {
    goto LABEL_164;
  }
  unint64_t v149 = *(void *)(v209 + 8 * v150);
  if (v149) {
    goto LABEL_158;
  }
  int64_t v150 = v137 + 3;
  if (v137 + 3 >= v224) {
    goto LABEL_164;
  }
  unint64_t v149 = *(void *)(v209 + 8 * v150);
  if (v149) {
    goto LABEL_158;
  }
  int64_t v150 = v137 + 4;
  if (v137 + 4 >= v224) {
    goto LABEL_164;
  }
  unint64_t v149 = *(void *)(v209 + 8 * v150);
  if (v149) {
    goto LABEL_158;
  }
  int64_t v150 = v137 + 5;
  if (v137 + 5 >= v224) {
    goto LABEL_164;
  }
  unint64_t v149 = *(void *)(v209 + 8 * v150);
  if (v149)
  {
LABEL_158:
    int64_t v137 = v150;
    goto LABEL_159;
  }
  while (1)
  {
    int64_t v137 = v150 + 1;
    if (__OFADD__(v150, 1)) {
      break;
    }
    if (v137 >= v224) {
      goto LABEL_164;
    }
    unint64_t v149 = *(void *)(v209 + 8 * v137);
    ++v150;
    if (v149) {
      goto LABEL_159;
    }
  }
LABEL_271:
  __break(1u);
LABEL_272:
  __break(1u);
LABEL_273:
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_274:
  __break(1u);
LABEL_275:
  __break(1u);
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  void (*v12)(uint64_t *__return_ptr, void *);
  long long v13;
  uint64_t result;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  void v22[2];
  long long v23;

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 16 * v6;
    uint64_t v9 = *(void *)(v1 + 48);
    uint64_t v8 = *(void *)(v1 + 56);
    unint64_t v10 = (void *)(v9 + v7);
    uint64_t v11 = v10[1];
    uint64_t v12 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v22[0] = *v10;
    v22[1] = v11;
    uint64_t v13 = *(_OWORD *)(v8 + v7);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v23 = v13;
    swift_bridgeObjectRetain();
    v12(&v21, v22);
    swift_bridgeObjectRelease();
    return v21;
  }
  unint64_t v15 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    unint64_t v16 = (unint64_t)(v0[2] + 64) >> 6;
    if (v15 < v16)
    {
      uint64_t v17 = v0[1];
      uint64_t v18 = *(void *)(v17 + 8 * v15);
      if (v18)
      {
LABEL_7:
        uint64_t v5 = (v18 - 1) & v18;
        unint64_t v6 = __clz(__rbit64(v18)) + (v15 << 6);
        int64_t v4 = v15;
        goto LABEL_3;
      }
      int v19 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v16)
      {
        uint64_t v18 = *(void *)(v17 + 8 * v19);
        if (v18)
        {
LABEL_10:
          unint64_t v15 = v19;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v16)
        {
          uint64_t v18 = *(void *)(v17 + 8 * (v3 + 3));
          if (v18)
          {
            unint64_t v15 = v3 + 3;
            goto LABEL_7;
          }
          int v19 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v16)
          {
            uint64_t v18 = *(void *)(v17 + 8 * v19);
            if (v18) {
              goto LABEL_10;
            }
            unint64_t v15 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v16)
            {
              uint64_t v18 = *(void *)(v17 + 8 * v15);
              if (v18) {
                goto LABEL_7;
              }
              int64_t v4 = v16 - 1;
              uint64_t v20 = v3 + 6;
              while (v16 != v20)
              {
                uint64_t v18 = *(void *)(v17 + 8 * v20++);
                if (v18)
                {
                  unint64_t v15 = v20 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)a2 = *(void *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = v2;
  return swift_bridgeObjectRetain();
}

unint64_t partial apply for closure #1 in static AttributeScope.scopeDescription.getter@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return closure #1 in static AttributeScope.scopeDescription.getter(a1, *(void *)(v2 + 16), a2);
}

unint64_t closure #1 in static AttributeScope.scopeDescription.getter@<X0>(unint64_t result@<X0>, Swift::UInt a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = *(void *)(result + 16);
  long long v5 = 0uLL;
  if (*(void *)(v4 + 16))
  {
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    long long v5 = 0uLL;
    if (v6)
    {
      long long v7 = *(_OWORD *)(*(void *)(v4 + 56) + 16 * result);
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
      long long v5 = v7;
    }
  }
  *a3 = v5;
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : AttributedStringKey.Type]>);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : AttributedStringKey.Type]);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: JSONReference)>);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: JSONReference));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: NSString, value: JSONReference)>);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: NSString, value: JSONReference));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: Encodable)>);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 56 * v8) {
      memmove(v10 + 4, a4 + 4, 56 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 56 * v8 || v12 >= v13 + 56 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Encodable));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(PredicateExpressions.VariableID, String)>);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PredicateExpressions.VariableID, String));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;
  void *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String.LocalizationValue.FormatArgument._AttributeFixup?>);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 4;
  unint64_t v13 = a4 + 4;
  unint64_t v14 = 3 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v10 + 4, a4 + 4, v14 * 8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument._AttributeFixup?);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  size_t v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?)>);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 6);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 4;
  unint64_t v14 = a4 + 4;
  unint64_t v15 = v8 << 6;
  if (a1)
  {
    if (v10 != a4 || v13 >= (void *)((char *)v14 + v15)) {
      memmove(v10 + 4, a4 + 4, v15);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= (void *)((char *)v13 + v15) || v13 >= (void *)((char *)v14 + v15))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;
  void *v13;
  size_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: _XMLPlistEncodingFormat.Reference, value: _XMLPlistEncodingFormat.Reference)>);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 4;
  unint64_t v13 = a4 + 4;
  unint64_t v14 = 6 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v10 + 4, a4 + 4, v14 * 8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: _XMLPlistEncodingFormat.Reference, value: _XMLPlistEncodingFormat.Reference));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String.LocalizationValue.FormatArgument.CodableStorage>);
  unint64_t v10 = *(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0) - 8);
  int64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  unint64_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  unint64_t v16 = *(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0) - 8);
  uint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  int v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  int v21 = &v18[v20];
  uint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any?>);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: Substring)>);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Substring));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in _loadDefaultAttributes()@<X0>(void *a1@<X8>)
{
  return closure #1 in _loadDefaultAttributes()(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t closure #1 in _loadDefaultAttributes()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18210C6A0;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  *(void *)(inited + 48) = a3;
  *(void *)(inited + 56) = a4;
  *(void *)(inited + 64) = 0xD000000000000037;
  *(void *)(inited + 72) = 0x80000001823B2680;
  *(void *)(inited + 80) = 0xD000000000000030;
  *(void *)(inited + 88) = 0x80000001823B26C0;
  *(void *)(inited + 96) = 0xD00000000000003BLL;
  *(void *)(inited + 104) = 0x80000001823B2700;
  *(void *)(inited + 112) = 0xD000000000000034;
  *(void *)(inited + 120) = 0x80000001823B2740;
  *(void *)(inited + 128) = 0xD000000000000040;
  *(void *)(inited + 136) = 0x80000001823B2780;
  *(void *)(inited + 144) = 0xD000000000000040;
  *(void *)(inited + 152) = 0x80000001823B27D0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int64_t v11 = specialized Sequence.compactMap<A>(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
  uint64_t result = swift_arrayDestroy();
  *a5 = v11;
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  Swift::Int v2 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
  int64_t v3 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v5 = *(v2 - 1);
    uint64_t v6 = *v2;
    uint64_t v7 = *(v2 - 3);
    uint64_t v8 = (void *)*(v2 - 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = LoadedScopeCache.scopeType(for:in:)(v7, v8, v5, v6);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      }
      unint64_t v13 = v3[2];
      unint64_t v12 = v3[3];
      if (v13 >= v12 >> 1) {
        int64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v3);
      }
      void v3[2] = v13 + 1;
      uint64_t v4 = &v3[2 * v13];
      v4[4] = v9;
      void v4[5] = v11;
    }
    v2 += 4;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

{
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  long long v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  _OWORD v26[4];
  uint64_t v27;
  long long v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  long long v36[4];
  char v37;
  char v38;
  char v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  uint64_t v53;
  void *v54;

  Swift::Int v2 = *(_OWORD *)(a1 + 176);
  unint64_t v50 = *(_OWORD *)(a1 + 160);
  uint64_t v51 = v2;
  BOOL v52 = *(_OWORD *)(a1 + 192);
  char v53 = *(void *)(a1 + 208);
  int64_t v3 = *(_OWORD *)(a1 + 112);
  uint64_t v46 = *(_OWORD *)(a1 + 96);
  uint64_t v47 = v3;
  uint64_t v4 = *(_OWORD *)(a1 + 144);
  uint64_t v48 = *(_OWORD *)(a1 + 128);
  char v49 = v4;
  uint64_t v5 = *(_OWORD *)(a1 + 48);
  uint64_t v42 = *(_OWORD *)(a1 + 32);
  uint64_t v43 = v5;
  uint64_t v6 = *(_OWORD *)(a1 + 80);
  uint64_t v44 = *(_OWORD *)(a1 + 64);
  uint64_t v45 = v6;
  uint64_t v7 = *(_OWORD *)(a1 + 16);
  uint64_t v40 = *(_OWORD *)a1;
  uint64_t v41 = v7;
  uint64_t v8 = *((void *)&v50 + 1);
  uint64_t v9 = *((void *)&v51 + 1);
  uint64_t v10 = v51;
  uint64_t v11 = v52;
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>(a1);
  if (static BigString.Index.== infix(_:_:)())
  {
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator(a1);
    return (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    int v21 = a1;
    char v54 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      specialized AttributedString.Runs.AttributesSlice4.index(before:)(v8, v10, v9, v11, (uint64_t *)&v28);
      uint64_t v10 = *((void *)&v28 + 1);
      uint64_t v8 = v28;
      uint64_t v9 = v29;
      uint64_t v11 = v30;
      unint64_t v14 = specialized AttributedString.Runs.AttributesSlice4.subscript.getter(&v28, &v32, &v34, (uint64_t *)v36, (uint64_t *)v28, *((uint64_t **)&v28 + 1), v29, v30);
      unint64_t v15 = v28;
      uint64_t v39 = v16 & 1;
      uint64_t v38 = v33;
      uint64_t v37 = v35;
      uint64_t v30 = v14;
      uint64_t v31 = v16 & 1;
      closure #1 in AttributedString.enumerateInflectableRanges(in:editor:)((uint64_t)&v28, v14, v16 & 1, v32, v33, v34, v35, v36, (uint64_t)v26);
      outlined consume of AttributedString.AttributeRunBoundaries?(v15, *((uint64_t *)&v15 + 1));
      uint64_t v17 = v27;
      if (v27)
      {
        uint64_t v24 = v26[1];
        uint64_t v25 = v26[0];
        uint64_t v22 = v26[3];
        uint64_t v23 = v26[2];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54[2] + 1, 1, v54);
        }
        int v19 = v54[2];
        uint64_t v18 = v54[3];
        if (v19 >= v18 >> 1) {
          char v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v54);
        }
        unint64_t v12 = v54;
        v54[2] = v19 + 1;
        unint64_t v13 = &v12[9 * v19];
        *((_OWORD *)v13 + 2) = v25;
        *((_OWORD *)v13 + 3) = v24;
        *((_OWORD *)v13 + 4) = v23;
        *((_OWORD *)v13 + 5) = v22;
        v13[12] = v17;
      }
    }
    while ((static BigString.Index.== infix(_:_:)() & 1) == 0);
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator(v21);
  }
  return v54;
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[4];
  unsigned char v32[80];
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  uint64_t v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  uint64_t v71;
  uint64_t v72;

  uint64_t v1 = *(_OWORD *)(a1 + 144);
  Swift::Int v2 = *(_OWORD *)(a1 + 176);
  uint64_t v55 = *(_OWORD *)(a1 + 160);
  long long v56 = v2;
  int64_t v3 = *(_OWORD *)(a1 + 176);
  uint64_t v57 = *(_OWORD *)(a1 + 192);
  uint64_t v4 = *(_OWORD *)(a1 + 80);
  uint64_t v5 = *(_OWORD *)(a1 + 112);
  uint64_t v51 = *(_OWORD *)(a1 + 96);
  BOOL v52 = v5;
  uint64_t v6 = *(_OWORD *)(a1 + 112);
  uint64_t v7 = *(_OWORD *)(a1 + 144);
  char v53 = *(_OWORD *)(a1 + 128);
  char v54 = v7;
  uint64_t v8 = *(_OWORD *)(a1 + 16);
  uint64_t v9 = *(_OWORD *)(a1 + 48);
  uint64_t v47 = *(_OWORD *)(a1 + 32);
  uint64_t v48 = v9;
  uint64_t v10 = *(_OWORD *)(a1 + 48);
  uint64_t v11 = *(_OWORD *)(a1 + 80);
  char v49 = *(_OWORD *)(a1 + 64);
  unint64_t v50 = v11;
  unint64_t v12 = *(_OWORD *)(a1 + 16);
  uint64_t v45 = *(_OWORD *)a1;
  uint64_t v46 = v12;
  unint64_t v69 = v55;
  uint64_t v70 = v3;
  uint64_t v65 = v51;
  uint64_t v66 = v6;
  unint64_t v67 = v53;
  unint64_t v68 = v1;
  uint64_t v61 = v47;
  Swift::UInt v62 = v10;
  unint64_t v63 = v49;
  int64_t v64 = v4;
  BOOL v58 = *(void *)(a1 + 208);
  long long v71 = *(void *)(a1 + 192);
  uint64_t v59 = v45;
  uint64_t v60 = v8;
  unint64_t v13 = *((void *)&v1 + 1);
  unint64_t v14 = *((void *)&v55 + 1);
  unint64_t v15 = *((void *)&v3 + 1);
  unint64_t v16 = v3;
  uint64_t v17 = v71;
  uint64_t v24 = a1;
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>(a1);
  uint64_t v72 = v13;
  if (static BigString.Index.== infix(_:_:)())
  {
    uint64_t v18 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v29 = *((void *)&v57 + 1);
    uint64_t v30 = v58;
    uint64_t v18 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v38 = v69;
      uint64_t v39 = v70;
      uint64_t v40 = v71;
      uint64_t v34 = v65;
      uint64_t v35 = v66;
      uint64_t v36 = v67;
      uint64_t v37 = v68;
      *(_OWORD *)&v32[32] = v61;
      *(_OWORD *)&v32[48] = v62;
      *(_OWORD *)&v32[64] = v63;
      uint64_t v33 = v64;
      *(_OWORD *)uint64_t v32 = v59;
      *(_OWORD *)&v32[16] = v60;
      v31[0] = v14;
      v31[1] = v16;
      v31[2] = v15;
      v31[3] = v17;
      outlined retain of AttributedString.Runs((uint64_t)&v59);
      AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:)(v31, v29, v30, (uint64_t *)&v41);
      outlined release of AttributedString.Runs((uint64_t)&v59);
      unint64_t v14 = v41;
      unint64_t v16 = v42;
      unint64_t v15 = v43;
      uint64_t v17 = v44;
      specialized AttributedString.Runs.AttributesSlice1.subscript.getter((unint64_t)v32, &v32[8], v41, v42, v43, v44);
      if ((v32[0] & 1) == 0)
      {
        uint64_t v27 = *(_OWORD *)&v32[24];
        char v28 = *(_OWORD *)&v32[8];
        uint64_t v25 = *(_OWORD *)&v32[56];
        uint64_t v26 = *(_OWORD *)&v32[40];
        uint64_t v20 = objc_msgSend(self, sel_automatic, v24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
        }
        uint64_t v22 = v18[2];
        int v21 = v18[3];
        if (v22 >= v21 >> 1) {
          uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v18);
        }
        void v18[2] = v22 + 1;
        int v19 = &v18[9 * v22];
        *((_OWORD *)v19 + 2) = v28;
        *((_OWORD *)v19 + 3) = v27;
        *((_OWORD *)v19 + 4) = v26;
        *((_OWORD *)v19 + 5) = v25;
        v19[12] = v20;
      }
    }
    while ((static BigString.Index.== infix(_:_:)() & 1) == 0);
  }
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator(v24);
  return v18;
}

uint64_t LoadedScopeCache.scopeType(for:in:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *v4;
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
    if (v11)
    {
      unint64_t v12 = *(void **)(*(void *)(v9 + 56) + 16 * v10);
      swift_bridgeObjectRelease();
      if (v12) {
        return (uint64_t)v12;
      }
      uint32_t v13 = _dyld_image_count();
      if (*((_DWORD *)v5 + 2) == v13) {
        return 0;
      }
      *((_DWORD *)v5 + 2) = v13;
      uint64_t v14 = swift_bridgeObjectRetain();
      uint64_t v15 = specialized _NativeDictionary.filter(_:)(v14);
      swift_bridgeObjectRelease();
      *uint64_t v5 = v15;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = String.utf8CString.getter();
  LOBYTE(v12) = v16;
  uint64_t v17 = dlopen((const char *)(v16 + 32), 16);
  swift_release();
  if (!v17
    || (uint64_t v18 = String.utf8CString.getter(),
        LOBYTE(v12) = v18,
        int v19 = dlsym(v17, (const char *)(v18 + 32)),
        swift_release(),
        !v19))
  {
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v87 = *v5;
    a4 = *v5;
    *uint64_t v5 = 0x8000000000000000;
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
    uint64_t v36 = *(void *)(a4 + 16);
    BOOL v37 = (v35 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (!__OFADD__(v36, v37))
    {
      LOBYTE(v12) = v35;
      if (*(void *)(a4 + 24) >= v38)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          goto LABEL_38;
        }
        uint64_t v39 = a4;
        if (v35) {
          goto LABEL_25;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
        uint64_t v39 = v87;
        unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
        if ((v12 & 1) != (v41 & 1)) {
          goto LABEL_112;
        }
        unint64_t v21 = v40;
        if (v12) {
          goto LABEL_25;
        }
      }
LABEL_28:
      specialized _NativeDictionary._insert(at:key:value:)(v21, a1, a2, 0, 0, v39);
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LoadedScopeCache.ScopeType>);
    uint64_t v44 = static _DictionaryStorage.copy(original:)();
    uint64_t v39 = v44;
    if (*(void *)(a4 + 16))
    {
      uint64_t v45 = (char *)(v44 + 64);
      unint64_t __src = (char *)(a4 + 64);
      unint64_t v46 = (unint64_t)((1 << *(unsigned char *)(v39 + 32)) + 63) >> 6;
      if (v39 != a4 || v45 >= &__src[8 * v46]) {
        memmove(v45, __src, 8 * v46);
      }
      uint64_t v47 = 0;
      *(void *)(v39 + 16) = *(void *)(a4 + 16);
      uint64_t v48 = 1 << *(unsigned char *)(a4 + 32);
      uint64_t v49 = -1;
      if (v48 < 64) {
        uint64_t v49 = ~(-1 << v48);
      }
      unint64_t v50 = v49 & *(void *)(a4 + 64);
      uint64_t v82 = (void *)((unint64_t)(v48 + 63) >> 6);
      while (1)
      {
        if (v50)
        {
          unint64_t v51 = __clz(__rbit64(v50));
          v50 &= v50 - 1;
          unint64_t v52 = v51 | (v47 << 6);
        }
        else
        {
          BOOL v28 = __OFADD__(v47++, 1);
          if (v28)
          {
            __break(1u);
LABEL_109:
            __break(1u);
            goto LABEL_110;
          }
          if (v47 >= (uint64_t)v82) {
            break;
          }
          unint64_t v59 = *(void *)&__src[8 * v47];
          if (!v59)
          {
            uint64_t v60 = v47 + 1;
            if (v47 + 1 >= (uint64_t)v82) {
              break;
            }
            unint64_t v59 = *(void *)&__src[8 * v60];
            if (!v59)
            {
              uint64_t v60 = v47 + 2;
              if (v47 + 2 >= (uint64_t)v82) {
                break;
              }
              unint64_t v59 = *(void *)&__src[8 * v60];
              if (!v59)
              {
                uint64_t v60 = v47 + 3;
                if (v47 + 3 >= (uint64_t)v82) {
                  break;
                }
                unint64_t v59 = *(void *)&__src[8 * v60];
                if (!v59)
                {
                  uint64_t v60 = v47 + 4;
                  if (v47 + 4 >= (uint64_t)v82) {
                    break;
                  }
                  unint64_t v59 = *(void *)&__src[8 * v60];
                  if (!v59)
                  {
                    uint64_t v60 = v47 + 5;
                    if (v47 + 5 >= (uint64_t)v82) {
                      break;
                    }
                    unint64_t v59 = *(void *)&__src[8 * v60];
                    if (!v59)
                    {
                      uint64_t v60 = v47 + 6;
                      if (v47 + 6 >= (uint64_t)v82) {
                        break;
                      }
                      unint64_t v59 = *(void *)&__src[8 * v60];
                      if (!v59)
                      {
                        uint64_t v60 = v47 + 7;
                        if (v47 + 7 >= (uint64_t)v82) {
                          break;
                        }
                        unint64_t v59 = *(void *)&__src[8 * v60];
                        if (!v59)
                        {
                          while (1)
                          {
                            uint64_t v47 = v60 + 1;
                            if (__OFADD__(v60, 1)) {
                              break;
                            }
                            if (v47 >= (uint64_t)v82) {
                              goto LABEL_71;
                            }
                            unint64_t v59 = *(void *)&__src[8 * v47];
                            ++v60;
                            if (v59) {
                              goto LABEL_66;
                            }
                          }
LABEL_110:
                          __break(1u);
                          goto LABEL_111;
                        }
                      }
                    }
                  }
                }
              }
            }
            uint64_t v47 = v60;
          }
LABEL_66:
          unint64_t v50 = (v59 - 1) & v59;
          unint64_t v52 = __clz(__rbit64(v59)) + (v47 << 6);
        }
        uint64_t v53 = 16 * v52;
        char v54 = (uint64_t *)(*(void *)(a4 + 48) + v53);
        uint64_t v56 = *v54;
        uint64_t v55 = v54[1];
        long long v57 = *(_OWORD *)(*(void *)(a4 + 56) + v53);
        BOOL v58 = (void *)(*(void *)(v39 + 48) + v53);
        void *v58 = v56;
        v58[1] = v55;
        *(_OWORD *)(*(void *)(v39 + 56) + v53) = v57;
        swift_bridgeObjectRetain();
      }
    }
LABEL_71:
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0) {
      goto LABEL_28;
    }
LABEL_25:
    uint64_t v42 = (void *)(*(void *)(v39 + 56) + 16 * v21);
    void *v42 = 0;
    v42[1] = 0;
LABEL_29:
    *uint64_t v5 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v20 = swift_conformsToProtocol2();
  if (v20) {
    unint64_t v21 = v20;
  }
  else {
    unint64_t v21 = 0;
  }
  if (v20) {
    unint64_t v12 = v19;
  }
  else {
    unint64_t v12 = 0;
  }
  if (!v12) {
    goto LABEL_113;
  }
  swift_bridgeObjectRetain();
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v86 = *v5;
  uint64_t v23 = *v5;
  *uint64_t v5 = 0x8000000000000000;
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
  uint64_t v26 = *(void *)(v23 + 16);
  BOOL v27 = (v25 & 1) == 0;
  BOOL v28 = __OFADD__(v26, v27);
  uint64_t v29 = v26 + v27;
  if (v28) {
    goto LABEL_37;
  }
  char v30 = v25;
  if (*(void *)(v23 + 24) < v29)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, v22);
    uint64_t v31 = v86;
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
    if ((v30 & 1) != (v32 & 1)) {
      goto LABEL_112;
    }
    if (v30) {
      goto LABEL_20;
    }
LABEL_33:
    specialized _NativeDictionary._insert(at:key:value:)(v24, a1, a2, v12, v21, v31);
    swift_bridgeObjectRetain();
    goto LABEL_34;
  }
  if (v22)
  {
    uint64_t v31 = v23;
    if ((v25 & 1) == 0) {
      goto LABEL_33;
    }
LABEL_20:
    uint64_t v33 = (void *)(*(void *)(v31 + 56) + 16 * v24);
    *uint64_t v33 = v12;
    v33[1] = v21;
LABEL_34:
    *uint64_t v5 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  unint64_t v80 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LoadedScopeCache.ScopeType>);
  uint64_t v61 = static _DictionaryStorage.copy(original:)();
  uint64_t v31 = v61;
  if (!*(void *)(v23 + 16))
  {
LABEL_106:
    swift_bridgeObjectRelease();
    unint64_t v24 = v80;
    if ((v30 & 1) == 0) {
      goto LABEL_33;
    }
    goto LABEL_20;
  }
  Swift::UInt v62 = (char *)(v61 + 64);
  uint64_t v83 = (char *)(v23 + 64);
  unint64_t v63 = (unint64_t)((1 << *(unsigned char *)(v31 + 32)) + 63) >> 6;
  if (v31 != v23 || v62 >= &v83[8 * v63]) {
    memmove(v62, v83, 8 * v63);
  }
  __srca = 0;
  *(void *)(v31 + 16) = *(void *)(v23 + 16);
  uint64_t v64 = 1 << *(unsigned char *)(v23 + 32);
  uint64_t v65 = -1;
  if (v64 < 64) {
    uint64_t v65 = ~(-1 << v64);
  }
  unint64_t v66 = v65 & *(void *)(v23 + 64);
  int64_t v81 = (unint64_t)(v64 + 63) >> 6;
  while (1)
  {
    if (v66)
    {
      unint64_t v67 = __clz(__rbit64(v66));
      v66 &= v66 - 1;
      unint64_t v68 = v67 | ((void)__srca << 6);
      goto LABEL_81;
    }
    int64_t v75 = (int64_t)(__srca + 1);
    if (__OFADD__(__srca, 1)) {
      goto LABEL_109;
    }
    if (v75 >= v81) {
      goto LABEL_106;
    }
    unint64_t v76 = *(void *)&v83[8 * v75];
    if (!v76) {
      break;
    }
LABEL_101:
    unint64_t v66 = (v76 - 1) & v76;
    __srca = (char *)v75;
    unint64_t v68 = __clz(__rbit64(v76)) + (v75 << 6);
LABEL_81:
    uint64_t v69 = 16 * v68;
    uint64_t v70 = (uint64_t *)(*(void *)(v23 + 48) + v69);
    uint64_t v72 = *v70;
    uint64_t v71 = v70[1];
    long long v73 = *(_OWORD *)(*(void *)(v23 + 56) + v69);
    long long v74 = (void *)(*(void *)(v31 + 48) + v69);
    *long long v74 = v72;
    v74[1] = v71;
    *(_OWORD *)(*(void *)(v31 + 56) + v69) = v73;
    swift_bridgeObjectRetain();
  }
  int64_t v77 = (int64_t)(__srca + 2);
  if ((uint64_t)(__srca + 2) >= v81) {
    goto LABEL_106;
  }
  unint64_t v76 = *(void *)&v83[8 * v77];
  if (v76) {
    goto LABEL_100;
  }
  int64_t v77 = (int64_t)(__srca + 3);
  if ((uint64_t)(__srca + 3) >= v81) {
    goto LABEL_106;
  }
  unint64_t v76 = *(void *)&v83[8 * v77];
  if (v76) {
    goto LABEL_100;
  }
  int64_t v77 = (int64_t)(__srca + 4);
  if ((uint64_t)(__srca + 4) >= v81) {
    goto LABEL_106;
  }
  unint64_t v76 = *(void *)&v83[8 * v77];
  if (v76) {
    goto LABEL_100;
  }
  int64_t v77 = (int64_t)(__srca + 5);
  if ((uint64_t)(__srca + 5) >= v81) {
    goto LABEL_106;
  }
  unint64_t v76 = *(void *)&v83[8 * v77];
  if (v76) {
    goto LABEL_100;
  }
  int64_t v77 = (int64_t)(__srca + 6);
  if ((uint64_t)(__srca + 6) >= v81) {
    goto LABEL_106;
  }
  unint64_t v76 = *(void *)&v83[8 * v77];
  if (v76) {
    goto LABEL_100;
  }
  int64_t v77 = (int64_t)(__srca + 7);
  if ((uint64_t)(__srca + 7) >= v81) {
    goto LABEL_106;
  }
  unint64_t v76 = *(void *)&v83[8 * v77];
  if (v76) {
    goto LABEL_100;
  }
  int64_t v77 = (int64_t)(__srca + 8);
  if ((uint64_t)(__srca + 8) >= v81) {
    goto LABEL_106;
  }
  unint64_t v76 = *(void *)&v83[8 * v77];
  if (v76)
  {
LABEL_100:
    int64_t v75 = v77;
    goto LABEL_101;
  }
  while (1)
  {
    int64_t v75 = v77 + 1;
    if (__OFADD__(v77, 1)) {
      break;
    }
    if (v75 >= v81) {
      goto LABEL_106;
    }
    unint64_t v76 = *(void *)&v83[8 * v75];
    ++v77;
    if (v76) {
      goto LABEL_101;
    }
  }
LABEL_111:
  __break(1u);
LABEL_112:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_113:
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  v78._uint64_t countAndFlagsBits = a1;
  v78._unint64_t object = a2;
  String.append(_:)(v78);
  v79._unint64_t object = (void *)0x80000001823B2840;
  v79._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v79);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #2 in static AttributeScope.scopeDescription.getter(uint64_t a1)
{
  return closure #2 in static AttributeScope.scopeDescription.getter(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16));
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  int64_t v95 = (unint64_t)((1 << v3) + 63) >> 6;
  uint64_t v96 = isStackAllocationSafe;
  size_t v4 = 8 * v95;
  if ((v3 & 0x3Fu) > 0xD)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      int v19 = (unint64_t *)swift_slowAlloc();
      bzero(v19, v4);
      uint64_t v20 = 0;
      int64_t v21 = 0;
      uint64_t v22 = v2 + 64;
      uint64_t v23 = 1 << *(unsigned char *)(v2 + 32);
      if (v23 < 64) {
        uint64_t v24 = ~(-1 << v23);
      }
      else {
        uint64_t v24 = -1;
      }
      unint64_t v25 = v24 & *(void *)(v2 + 64);
      int64_t v26 = (unint64_t)(v23 + 63) >> 6;
      while (1)
      {
        if (v25)
        {
          unint64_t v27 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          unint64_t v28 = v27 | (v21 << 6);
        }
        else
        {
          int64_t v29 = v21 + 1;
          if (__OFADD__(v21, 1)) {
            goto LABEL_133;
          }
          if (v29 >= v26) {
            goto LABEL_58;
          }
          unint64_t v30 = *(void *)(v22 + 8 * v29);
          ++v21;
          if (!v30)
          {
            int64_t v21 = v29 + 1;
            if (v29 + 1 >= v26) {
              goto LABEL_58;
            }
            unint64_t v30 = *(void *)(v22 + 8 * v21);
            if (!v30)
            {
              int64_t v21 = v29 + 2;
              if (v29 + 2 >= v26) {
                goto LABEL_58;
              }
              unint64_t v30 = *(void *)(v22 + 8 * v21);
              if (!v30)
              {
                int64_t v21 = v29 + 3;
                if (v29 + 3 >= v26) {
                  goto LABEL_58;
                }
                unint64_t v30 = *(void *)(v22 + 8 * v21);
                if (!v30)
                {
                  int64_t v31 = v29 + 4;
                  if (v31 >= v26) {
                    goto LABEL_58;
                  }
                  unint64_t v30 = *(void *)(v22 + 8 * v31);
                  if (!v30)
                  {
                    while (1)
                    {
                      int64_t v21 = v31 + 1;
                      if (__OFADD__(v31, 1)) {
                        goto LABEL_137;
                      }
                      if (v21 >= v26) {
                        break;
                      }
                      unint64_t v30 = *(void *)(v22 + 8 * v21);
                      ++v31;
                      if (v30) {
                        goto LABEL_54;
                      }
                    }
LABEL_58:
                    if (!v20)
                    {
                      uint64_t v2 = MEMORY[0x1E4FBC868];
                      goto LABEL_128;
                    }
                    if (v20 == *(void *)(v2 + 16))
                    {
                      swift_retain();
                      goto LABEL_128;
                    }
                    uint64_t v93 = v1;
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LoadedScopeCache.ScopeType>);
                    uint64_t v32 = static _DictionaryStorage.allocate(capacity:)();
                    int64_t v61 = 0;
                    char v94 = v19;
                    unint64_t v62 = *v19;
                    uint64_t v63 = v32 + 64;
                    while (1)
                    {
                      if (v62)
                      {
                        unint64_t v69 = __clz(__rbit64(v62));
                        v62 &= v62 - 1;
                        int64_t v70 = v61;
                        unint64_t v71 = v69 | (v61 << 6);
                      }
                      else
                      {
                        int64_t v72 = v61 + 1;
                        if (__OFADD__(v61, 1)) {
                          goto LABEL_136;
                        }
                        if (v72 >= v95) {
                          goto LABEL_127;
                        }
                        int v19 = v94;
                        unint64_t v73 = v94[v72];
                        int64_t v74 = v61 + 1;
                        if (!v73)
                        {
                          int64_t v74 = v61 + 2;
                          if (v61 + 2 >= v95) {
                            goto LABEL_130;
                          }
                          unint64_t v73 = v94[v74];
                          if (!v73)
                          {
                            int64_t v74 = v61 + 3;
                            if (v61 + 3 >= v95) {
                              goto LABEL_130;
                            }
                            unint64_t v73 = v94[v74];
                            if (!v73)
                            {
                              int64_t v74 = v61 + 4;
                              if (v61 + 4 >= v95) {
                                goto LABEL_130;
                              }
                              unint64_t v73 = v94[v74];
                              if (!v73)
                              {
                                int64_t v74 = v61 + 5;
                                if (v61 + 5 >= v95) {
                                  goto LABEL_130;
                                }
                                unint64_t v73 = v94[v74];
                                if (!v73)
                                {
                                  uint64_t v75 = v61 + 6;
                                  if (v61 + 6 >= v95) {
                                    goto LABEL_130;
                                  }
                                  unint64_t v73 = v94[v75];
                                  if (!v73)
                                  {
                                    while (1)
                                    {
                                      int64_t v74 = v75 + 1;
                                      if (__OFADD__(v75, 1)) {
                                        goto LABEL_139;
                                      }
                                      if (v74 >= v95) {
                                        break;
                                      }
                                      unint64_t v73 = v94[v74];
                                      ++v75;
                                      if (v73) {
                                        goto LABEL_117;
                                      }
                                    }
LABEL_130:
                                    uint64_t v2 = v32;
LABEL_128:
                                    MEMORY[0x185309510](v19, -1, -1);
                                    return v2;
                                  }
                                  int64_t v74 = v61 + 6;
                                }
                              }
                            }
                          }
                        }
LABEL_117:
                        unint64_t v62 = (v73 - 1) & v73;
                        int64_t v70 = v74;
                        unint64_t v71 = __clz(__rbit64(v73)) + (v74 << 6);
                      }
                      uint64_t v76 = 16 * v71;
                      uint64_t v77 = *(void *)(v2 + 56);
                      Swift::String v78 = (uint64_t *)(*(void *)(v2 + 48) + v76);
                      uint64_t v80 = *v78;
                      uint64_t v79 = v78[1];
                      int64_t v81 = (uint64_t *)(v77 + v76);
                      uint64_t v82 = *v81;
                      int64_t v97 = v81[1];
                      Hasher.init(_seed:)();
                      swift_bridgeObjectRetain();
                      String.hash(into:)();
                      Swift::Int v83 = Hasher._finalize()();
                      uint64_t v84 = -1 << *(unsigned char *)(v32 + 32);
                      unint64_t v85 = v83 & ~v84;
                      unint64_t v86 = v85 >> 6;
                      if (((-1 << v85) & ~*(void *)(v63 + 8 * (v85 >> 6))) != 0)
                      {
                        unint64_t v64 = __clz(__rbit64((-1 << v85) & ~*(void *)(v63 + 8 * (v85 >> 6)))) | v85 & 0x7FFFFFFFFFFFFFC0;
                      }
                      else
                      {
                        char v87 = 0;
                        unint64_t v88 = (unint64_t)(63 - v84) >> 6;
                        do
                        {
                          if (++v86 == v88 && (v87 & 1) != 0) {
                            goto LABEL_132;
                          }
                          BOOL v89 = v86 == v88;
                          if (v86 == v88) {
                            unint64_t v86 = 0;
                          }
                          v87 |= v89;
                          uint64_t v90 = *(void *)(v63 + 8 * v86);
                        }
                        while (v90 == -1);
                        unint64_t v64 = __clz(__rbit64(~v90)) + (v86 << 6);
                      }
                      *(void *)(v63 + ((v64 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v64;
                      uint64_t v65 = 16 * v64;
                      unint64_t v66 = (void *)(*(void *)(v32 + 48) + v65);
                      void *v66 = v80;
                      v66[1] = v79;
                      unint64_t v67 = (void *)(*(void *)(v32 + 56) + v65);
                      uint64_t v2 = v96;
                      int64_t v68 = v97;
                      *unint64_t v67 = v82;
                      v67[1] = v68;
                      ++*(void *)(v32 + 16);
                      --v20;
                      int64_t v61 = v70;
                      if (!v20)
                      {
LABEL_127:
                        uint64_t v2 = v32;
                        int v19 = v94;
                        goto LABEL_128;
                      }
                    }
                  }
                  int64_t v21 = v31;
                }
              }
            }
          }
LABEL_54:
          unint64_t v25 = (v30 - 1) & v30;
          unint64_t v28 = __clz(__rbit64(v30)) + (v21 << 6);
        }
        if (*(void *)(*(void *)(v2 + 56) + 16 * v28))
        {
          *(unint64_t *)((char *)v19 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
          BOOL v18 = __OFADD__(v20++, 1);
          if (v18)
          {
            __break(1u);
            goto LABEL_58;
          }
        }
      }
    }
  }
  MEMORY[0x1F4188790](isStackAllocationSafe);
  uint64_t v5 = (unint64_t *)((char *)&v92 - ((v4 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v5, v4);
  uint64_t v6 = 0;
  int64_t v7 = 0;
  uint64_t v8 = v2 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v2 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v7 << 6);
    }
    else
    {
      int64_t v15 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
        goto LABEL_135;
      }
      if (v15 >= v12) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v8 + 8 * v15);
      ++v7;
      if (!v16)
      {
        int64_t v7 = v15 + 1;
        if (v15 + 1 >= v12) {
          goto LABEL_28;
        }
        unint64_t v16 = *(void *)(v8 + 8 * v7);
        if (!v16)
        {
          int64_t v7 = v15 + 2;
          if (v15 + 2 >= v12) {
            goto LABEL_28;
          }
          unint64_t v16 = *(void *)(v8 + 8 * v7);
          if (!v16)
          {
            int64_t v7 = v15 + 3;
            if (v15 + 3 >= v12) {
              goto LABEL_28;
            }
            unint64_t v16 = *(void *)(v8 + 8 * v7);
            if (!v16)
            {
              int64_t v17 = v15 + 4;
              if (v17 >= v12) {
                goto LABEL_28;
              }
              unint64_t v16 = *(void *)(v8 + 8 * v17);
              if (!v16)
              {
                while (1)
                {
                  int64_t v7 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    break;
                  }
                  if (v7 >= v12) {
                    goto LABEL_28;
                  }
                  unint64_t v16 = *(void *)(v8 + 8 * v7);
                  ++v17;
                  if (v16) {
                    goto LABEL_24;
                  }
                }
LABEL_135:
                __break(1u);
LABEL_136:
                __break(1u);
LABEL_137:
                __break(1u);
                goto LABEL_138;
              }
              int64_t v7 = v17;
            }
          }
        }
      }
LABEL_24:
      unint64_t v11 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
    }
    if (*(void *)(*(void *)(v2 + 56) + 16 * v14))
    {
      *(unint64_t *)((char *)v5 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      BOOL v18 = __OFADD__(v6++, 1);
      if (v18) {
        break;
      }
    }
  }
  __break(1u);
LABEL_28:
  if (!v6) {
    return MEMORY[0x1E4FBC868];
  }
  if (v6 != *(void *)(v2 + 16))
  {
    uint64_t v92 = (uint64_t)&v92;
    uint64_t v93 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, LoadedScopeCache.ScopeType>);
    uint64_t v32 = static _DictionaryStorage.allocate(capacity:)();
    int64_t v33 = 0;
    char v94 = (unint64_t *)((char *)&v92 - ((v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    unint64_t v34 = *v5;
    uint64_t v35 = v32 + 64;
    while (1)
    {
      if (v34)
      {
        unint64_t v40 = __clz(__rbit64(v34));
        v34 &= v34 - 1;
        int64_t v97 = v33;
        unint64_t v41 = v40 | (v33 << 6);
      }
      else
      {
        int64_t v42 = v33 + 1;
        if (__OFADD__(v33, 1)) {
          goto LABEL_134;
        }
        if (v42 >= v95) {
          return v32;
        }
        unint64_t v43 = v94[v42];
        int64_t v44 = v33 + 1;
        if (!v43)
        {
          int64_t v44 = v33 + 2;
          if (v33 + 2 >= v95) {
            return v32;
          }
          unint64_t v43 = v94[v44];
          if (!v43)
          {
            int64_t v44 = v33 + 3;
            if (v33 + 3 >= v95) {
              return v32;
            }
            unint64_t v43 = v94[v44];
            if (!v43)
            {
              int64_t v44 = v33 + 4;
              if (v33 + 4 >= v95) {
                return v32;
              }
              unint64_t v43 = v94[v44];
              if (!v43)
              {
                int64_t v44 = v33 + 5;
                if (v33 + 5 >= v95) {
                  return v32;
                }
                unint64_t v43 = v94[v44];
                if (!v43)
                {
                  uint64_t v45 = v33 + 6;
                  if (v33 + 6 >= v95) {
                    return v32;
                  }
                  unint64_t v43 = v94[v45];
                  if (!v43)
                  {
                    while (1)
                    {
                      int64_t v44 = v45 + 1;
                      if (__OFADD__(v45, 1)) {
                        break;
                      }
                      if (v44 >= v95) {
                        return v32;
                      }
                      unint64_t v43 = v94[v44];
                      ++v45;
                      if (v43) {
                        goto LABEL_83;
                      }
                    }
LABEL_138:
                    __break(1u);
LABEL_139:
                    __break(1u);
                  }
                  int64_t v44 = v33 + 6;
                }
              }
            }
          }
        }
LABEL_83:
        unint64_t v34 = (v43 - 1) & v43;
        int64_t v97 = v44;
        unint64_t v41 = __clz(__rbit64(v43)) + (v44 << 6);
      }
      uint64_t v46 = 16 * v41;
      uint64_t v47 = *(void *)(v2 + 56);
      uint64_t v48 = (uint64_t *)(*(void *)(v2 + 48) + v46);
      uint64_t v50 = *v48;
      uint64_t v49 = v48[1];
      unint64_t v51 = (uint64_t *)(v47 + v46);
      uint64_t v52 = *v51;
      int v19 = (unint64_t *)v51[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v53 = Hasher._finalize()();
      uint64_t v54 = -1 << *(unsigned char *)(v32 + 32);
      unint64_t v55 = v53 & ~v54;
      unint64_t v56 = v55 >> 6;
      if (((-1 << v55) & ~*(void *)(v35 + 8 * (v55 >> 6))) != 0)
      {
        unint64_t v36 = __clz(__rbit64((-1 << v55) & ~*(void *)(v35 + 8 * (v55 >> 6)))) | v55 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_63;
      }
      char v57 = 0;
      unint64_t v58 = (unint64_t)(63 - v54) >> 6;
      do
      {
        if (++v56 == v58 && (v57 & 1) != 0)
        {
          __break(1u);
          goto LABEL_130;
        }
        BOOL v59 = v56 == v58;
        if (v56 == v58) {
          unint64_t v56 = 0;
        }
        v57 |= v59;
        uint64_t v60 = *(void *)(v35 + 8 * v56);
      }
      while (v60 == -1);
      unint64_t v36 = __clz(__rbit64(~v60)) + (v56 << 6);
LABEL_63:
      *(void *)(v35 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
      uint64_t v37 = 16 * v36;
      uint64_t v38 = (void *)(*(void *)(v32 + 48) + v37);
      void *v38 = v50;
      v38[1] = v49;
      uint64_t v39 = (void *)(*(void *)(v32 + 56) + v37);
      *uint64_t v39 = v52;
      v39[1] = v19;
      ++*(void *)(v32 + 16);
      --v6;
      uint64_t v2 = v96;
      int64_t v33 = v97;
      if (!v6) {
        return v32;
      }
    }
  }
  swift_retain();
  return v2;
}

{
  uint64_t v1;
  char v2;
  size_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  Swift::Int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  Swift::Int v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v98;
  int64_t v99;
  unint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  unsigned char *v104;
  long long *v105;
  unsigned char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned char v110[64];
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned char v114[72];
  long long v115;
  long long v116;
  long long v117;
  long long v118;
  uint64_t v119;
  unsigned __int8 v120;
  long long v121;
  long long v122;
  long long v123;
  long long v124;
  uint64_t v125;
  unsigned char v126[72];
  uint64_t v127;

  uint64_t v1 = isStackAllocationSafe;
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned char *)(isStackAllocationSafe + 32);
  uint64_t v99 = (unint64_t)((1 << v2) + 63) >> 6;
  char v3 = 8 * v99;
  uint64_t v107 = isStackAllocationSafe;
  if ((v2 & 0x3Fu) > 0xD)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v100 = (unint64_t *)swift_slowAlloc();
      bzero(v100, v3);
      unint64_t v28 = 0;
      int64_t v29 = *(void *)(v1 + 64);
      uint64_t v101 = 0;
      uint64_t v102 = v1 + 64;
      unint64_t v30 = 1 << *(unsigned char *)(v1 + 32);
      if (v30 < 64) {
        int64_t v31 = ~(-1 << v30);
      }
      else {
        int64_t v31 = -1;
      }
      uint64_t v32 = v31 & v29;
      uint64_t v105 = &v116;
      uint64_t v106 = v114;
      char v103 = (unint64_t)(v30 + 63) >> 6;
      uint64_t v104 = v110;
      while (1)
      {
        if (v32)
        {
          int64_t v33 = __clz(__rbit64(v32));
          v32 &= v32 - 1;
          unint64_t v34 = v33 | (v28 << 6);
        }
        else
        {
          uint64_t v35 = v28 + 1;
          if (__OFADD__(v28, 1)) {
            goto LABEL_144;
          }
          if (v35 >= v103) {
            goto LABEL_73;
          }
          unint64_t v36 = *(void *)(v102 + 8 * v35);
          ++v28;
          if (!v36)
          {
            unint64_t v28 = v35 + 1;
            if (v35 + 1 >= v103) {
              goto LABEL_73;
            }
            unint64_t v36 = *(void *)(v102 + 8 * v28);
            if (!v36)
            {
              unint64_t v28 = v35 + 2;
              if (v35 + 2 >= v103) {
                goto LABEL_73;
              }
              unint64_t v36 = *(void *)(v102 + 8 * v28);
              if (!v36)
              {
                uint64_t v37 = v35 + 3;
                if (v37 >= v103) {
                  goto LABEL_73;
                }
                unint64_t v36 = *(void *)(v102 + 8 * v37);
                if (!v36)
                {
                  while (1)
                  {
                    unint64_t v28 = v37 + 1;
                    if (__OFADD__(v37, 1)) {
                      goto LABEL_148;
                    }
                    if (v28 >= v103) {
                      break;
                    }
                    unint64_t v36 = *(void *)(v102 + 8 * v28);
                    ++v37;
                    if (v36) {
                      goto LABEL_61;
                    }
                  }
LABEL_73:
                  uint64_t v48 = v101;
                  if (!v101)
                  {
                    uint64_t v1 = MEMORY[0x1E4FBC868];
                    goto LABEL_139;
                  }
                  if (v101 == *(void *)(v1 + 16))
                  {
                    swift_retain();
                    goto LABEL_139;
                  }
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  unint64_t v73 = static _DictionaryStorage.allocate(capacity:)();
                  int64_t v74 = 0;
                  uint64_t v75 = *v100;
                  uint64_t v76 = v73 + 64;
                  while (1)
                  {
                    if (v75)
                    {
                      uint64_t v80 = __clz(__rbit64(v75));
                      v75 &= v75 - 1;
                      int64_t v81 = v80 | (v74 << 6);
                    }
                    else
                    {
                      uint64_t v82 = v74 + 1;
                      if (__OFADD__(v74, 1)) {
                        goto LABEL_149;
                      }
                      if (v82 >= v99) {
                        goto LABEL_138;
                      }
                      Swift::Int v83 = v100[v82];
                      ++v74;
                      if (!v83)
                      {
                        int64_t v74 = v82 + 1;
                        if (v82 + 1 >= v99) {
                          goto LABEL_138;
                        }
                        Swift::Int v83 = v100[v74];
                        if (!v83)
                        {
                          int64_t v74 = v82 + 2;
                          if (v82 + 2 >= v99) {
                            goto LABEL_138;
                          }
                          Swift::Int v83 = v100[v74];
                          if (!v83)
                          {
                            int64_t v74 = v82 + 3;
                            if (v82 + 3 >= v99) {
                              goto LABEL_138;
                            }
                            Swift::Int v83 = v100[v74];
                            if (!v83)
                            {
                              uint64_t v84 = v82 + 4;
                              if (v84 >= v99) {
                                goto LABEL_138;
                              }
                              Swift::Int v83 = v100[v84];
                              if (!v83)
                              {
                                while (1)
                                {
                                  int64_t v74 = v84 + 1;
                                  if (__OFADD__(v84, 1)) {
                                    goto LABEL_151;
                                  }
                                  if (v74 >= v99) {
                                    break;
                                  }
                                  Swift::Int v83 = v100[v74];
                                  ++v84;
                                  if (v83) {
                                    goto LABEL_128;
                                  }
                                }
LABEL_138:
                                uint64_t v1 = v73;
LABEL_139:
                                MEMORY[0x185309510](v100, -1, -1);
                                return v1;
                              }
                              int64_t v74 = v84;
                            }
                          }
                        }
                      }
LABEL_128:
                      uint64_t v75 = (v83 - 1) & v83;
                      int64_t v81 = __clz(__rbit64(v83)) + (v74 << 6);
                    }
                    unint64_t v85 = *(void *)(v1 + 56);
                    unint64_t v86 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v81);
                    unint64_t v88 = *v86;
                    char v87 = v86[1];
                    outlined init with copy of AttributedString._AttributeValue(v85 + 72 * v81, (uint64_t)&v121);
                    uint64_t v117 = v123;
                    uint64_t v118 = v124;
                    unint64_t v119 = v125;
                    uint64_t v115 = v121;
                    uint64_t v116 = v122;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    BOOL v89 = Hasher._finalize()();
                    uint64_t v90 = -1 << *(unsigned char *)(v73 + 32);
                    char v91 = v89 & ~v90;
                    uint64_t v92 = v91 >> 6;
                    if (((-1 << v91) & ~*(void *)(v76 + 8 * (v91 >> 6))) != 0)
                    {
                      uint64_t v77 = __clz(__rbit64((-1 << v91) & ~*(void *)(v76 + 8 * (v91 >> 6)))) | v91 & 0x7FFFFFFFFFFFFFC0;
                    }
                    else
                    {
                      uint64_t v93 = 0;
                      char v94 = (unint64_t)(63 - v90) >> 6;
                      do
                      {
                        if (++v92 == v94 && (v93 & 1) != 0) {
                          goto LABEL_143;
                        }
                        int64_t v95 = v92 == v94;
                        if (v92 == v94) {
                          uint64_t v92 = 0;
                        }
                        v93 |= v95;
                        uint64_t v96 = *(void *)(v76 + 8 * v92);
                      }
                      while (v96 == -1);
                      uint64_t v77 = __clz(__rbit64(~v96)) + (v92 << 6);
                    }
                    *(void *)(v76 + ((v77 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v77;
                    Swift::String v78 = (void *)(*(void *)(v73 + 48) + 16 * v77);
                    *Swift::String v78 = v88;
                    v78[1] = v87;
                    uint64_t v79 = *(void *)(v73 + 56) + 72 * v77;
                    *(_OWORD *)(v79 + 16) = v116;
                    *(_OWORD *)(v79 + 32) = v117;
                    *(_OWORD *)(v79 + 48) = v118;
                    *(void *)(v79 + 64) = v119;
                    *(_OWORD *)uint64_t v79 = v115;
                    ++*(void *)(v73 + 16);
                    --v48;
                    uint64_t v1 = v107;
                    if (!v48) {
                      goto LABEL_138;
                    }
                  }
                }
                unint64_t v28 = v37;
              }
            }
          }
LABEL_61:
          uint64_t v32 = (v36 - 1) & v36;
          unint64_t v34 = __clz(__rbit64(v36)) + (v28 << 6);
        }
        uint64_t v38 = *(void *)(v1 + 56);
        uint64_t v39 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v34);
        unint64_t v40 = *v39;
        unint64_t v41 = v39[1];
        outlined init with copy of AttributedString._AttributeValue(v38 + 72 * v34, (uint64_t)v126);
        *(void *)&uint64_t v121 = v40;
        *((void *)&v121 + 1) = v41;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v126, (uint64_t)&v122);
        *(void *)&uint64_t v115 = v40;
        *((void *)&v115 + 1) = v41;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v122, (uint64_t)v105);
        int64_t v42 = v120;
        swift_bridgeObjectRetain_n();
        outlined destroy of AttributedString._AttributeValue((uint64_t)v105);
        uint64_t v112 = v40;
        uint64_t v113 = v41;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v122, (uint64_t)v106);
        if (v42 != 1) {
          break;
        }
        uint64_t v108 = v40;
        uint64_t v109 = v41;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v106, (uint64_t)v104);
        unint64_t v43 = v111;
        if (v111
          && *(void *)(v111 + 16)
          && (Hasher.init(_seed:)(),
              Hasher._combine(_:)(0),
              int64_t v44 = Hasher._finalize()(),
              uint64_t v45 = -1 << *(unsigned char *)(v43 + 32),
              uint64_t v46 = v44 & ~v45,
              ((*(void *)(v43 + 56 + ((v46 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v46) & 1) != 0))
        {
          uint64_t v47 = ~v45;
          while (*(void *)(*(void *)(v43 + 48) + 16 * v46 + 8))
          {
            uint64_t v46 = (v46 + 1) & v47;
            if (((*(void *)(v43 + 56 + ((v46 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v46) & 1) == 0) {
              goto LABEL_69;
            }
          }
          swift_bridgeObjectRelease();
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v104);
LABEL_45:
          outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
          swift_bridgeObjectRelease();
          uint64_t v1 = v107;
        }
        else
        {
LABEL_69:
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v104);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
          swift_bridgeObjectRelease();
          *(unint64_t *)((char *)v100 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
          int64_t v26 = __OFADD__(v101++, 1);
          uint64_t v1 = v107;
          if (v26) {
            goto LABEL_146;
          }
        }
      }
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
      goto LABEL_45;
    }
  }
  uint64_t v98 = (uint64_t)&v98;
  MEMORY[0x1F4188790](isStackAllocationSafe);
  uint64_t v100 = (unint64_t *)((char *)&v98 - ((v3 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v100, v3);
  size_t v4 = 0;
  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v101 = 0;
  uint64_t v102 = v1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(v1 + 32);
  if (v6 < 64) {
    int64_t v7 = ~(-1 << v6);
  }
  else {
    int64_t v7 = -1;
  }
  uint64_t v8 = v7 & v5;
  uint64_t v105 = &v116;
  uint64_t v106 = v114;
  char v103 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v104 = v110;
  while (1)
  {
    if (v8)
    {
      uint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      uint64_t v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    unint64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_141;
    }
    if (v11 >= v103) {
      goto LABEL_36;
    }
    int64_t v12 = *(void *)(v102 + 8 * v11);
    ++v4;
    if (!v12)
    {
      size_t v4 = v11 + 1;
      if (v11 + 1 >= v103) {
        goto LABEL_36;
      }
      int64_t v12 = *(void *)(v102 + 8 * v4);
      if (!v12)
      {
        size_t v4 = v11 + 2;
        if (v11 + 2 >= v103) {
          goto LABEL_36;
        }
        int64_t v12 = *(void *)(v102 + 8 * v4);
        if (!v12) {
          break;
        }
      }
    }
LABEL_24:
    uint64_t v8 = (v12 - 1) & v12;
    uint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    unint64_t v14 = *(void *)(v1 + 56);
    int64_t v15 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v10);
    unint64_t v16 = *v15;
    int64_t v17 = v15[1];
    outlined init with copy of AttributedString._AttributeValue(v14 + 72 * v10, (uint64_t)v126);
    *(void *)&uint64_t v121 = v16;
    *((void *)&v121 + 1) = v17;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)v126, (uint64_t)&v122);
    *(void *)&uint64_t v115 = v16;
    *((void *)&v115 + 1) = v17;
    BOOL v18 = (uint64_t)v105;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)&v122, (uint64_t)v105);
    int v19 = v120;
    swift_bridgeObjectRetain_n();
    outlined destroy of AttributedString._AttributeValue(v18);
    uint64_t v112 = v16;
    uint64_t v113 = v17;
    uint64_t v20 = (uint64_t)v106;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)&v122, (uint64_t)v106);
    if (v19 != 1)
    {
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
      goto LABEL_8;
    }
    uint64_t v108 = v16;
    uint64_t v109 = v17;
    outlined init with copy of AttributedString._AttributeValue(v20, (uint64_t)v104);
    int64_t v21 = v111;
    if (v111
      && *(void *)(v111 + 16)
      && (Hasher.init(_seed:)(),
          Hasher._combine(_:)(0),
          uint64_t v22 = Hasher._finalize()(),
          uint64_t v23 = -1 << *(unsigned char *)(v21 + 32),
          uint64_t v24 = v22 & ~v23,
          ((*(void *)(v21 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) != 0))
    {
      unint64_t v25 = ~v23;
      while (*(void *)(*(void *)(v21 + 48) + 16 * v24 + 8))
      {
        uint64_t v24 = (v24 + 1) & v25;
        if (((*(void *)(v21 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
          goto LABEL_32;
        }
      }
      swift_bridgeObjectRelease();
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v104);
LABEL_8:
      outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
      swift_bridgeObjectRelease();
      uint64_t v1 = v107;
    }
    else
    {
LABEL_32:
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v112);
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v121);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v104);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v126);
      swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v100 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      int64_t v26 = __OFADD__(v101++, 1);
      uint64_t v1 = v107;
      if (v26) {
        goto LABEL_142;
      }
    }
  }
  unint64_t v13 = v11 + 3;
  if (v13 >= v103) {
    goto LABEL_36;
  }
  int64_t v12 = *(void *)(v102 + 8 * v13);
  if (v12)
  {
    size_t v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    size_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_145;
    }
    if (v4 >= v103) {
      break;
    }
    int64_t v12 = *(void *)(v102 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_36:
  unint64_t v27 = v101;
  if (!v101) {
    return MEMORY[0x1E4FBC868];
  }
  if (v101 != *(void *)(v1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
    uint64_t v49 = static _DictionaryStorage.allocate(capacity:)();
    uint64_t v50 = 0;
    unint64_t v51 = *v100;
    uint64_t v52 = v49 + 64;
    while (1)
    {
      if (v51)
      {
        unint64_t v56 = __clz(__rbit64(v51));
        v51 &= v51 - 1;
        char v57 = v56 | (v50 << 6);
      }
      else
      {
        unint64_t v58 = v50 + 1;
        if (__OFADD__(v50, 1)) {
          goto LABEL_147;
        }
        if (v58 >= v99) {
          return v49;
        }
        BOOL v59 = v100[v58];
        ++v50;
        if (!v59)
        {
          uint64_t v50 = v58 + 1;
          if (v58 + 1 >= v99) {
            return v49;
          }
          BOOL v59 = v100[v50];
          if (!v59)
          {
            uint64_t v50 = v58 + 2;
            if (v58 + 2 >= v99) {
              return v49;
            }
            BOOL v59 = v100[v50];
            if (!v59)
            {
              uint64_t v50 = v58 + 3;
              if (v58 + 3 >= v99) {
                return v49;
              }
              BOOL v59 = v100[v50];
              if (!v59)
              {
                uint64_t v60 = v58 + 4;
                if (v60 >= v99) {
                  return v49;
                }
                BOOL v59 = v100[v60];
                if (!v59)
                {
                  while (1)
                  {
                    uint64_t v50 = v60 + 1;
                    if (__OFADD__(v60, 1)) {
                      break;
                    }
                    if (v50 >= v99) {
                      return v49;
                    }
                    BOOL v59 = v100[v50];
                    ++v60;
                    if (v59) {
                      goto LABEL_96;
                    }
                  }
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
                }
                uint64_t v50 = v60;
              }
            }
          }
        }
LABEL_96:
        unint64_t v51 = (v59 - 1) & v59;
        char v57 = __clz(__rbit64(v59)) + (v50 << 6);
      }
      int64_t v61 = *(void *)(v1 + 56);
      unint64_t v62 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v57);
      unint64_t v64 = *v62;
      uint64_t v63 = v62[1];
      outlined init with copy of AttributedString._AttributeValue(v61 + 72 * v57, (uint64_t)&v121);
      uint64_t v117 = v123;
      uint64_t v118 = v124;
      unint64_t v119 = v125;
      uint64_t v115 = v121;
      uint64_t v116 = v122;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      uint64_t v65 = Hasher._finalize()();
      unint64_t v66 = -1 << *(unsigned char *)(v49 + 32);
      unint64_t v67 = v65 & ~v66;
      int64_t v68 = v67 >> 6;
      if (((-1 << v67) & ~*(void *)(v52 + 8 * (v67 >> 6))) != 0)
      {
        Swift::Int v53 = __clz(__rbit64((-1 << v67) & ~*(void *)(v52 + 8 * (v67 >> 6)))) | v67 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_78;
      }
      unint64_t v69 = 0;
      int64_t v70 = (unint64_t)(63 - v66) >> 6;
      do
      {
        if (++v68 == v70 && (v69 & 1) != 0)
        {
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
          goto LABEL_150;
        }
        unint64_t v71 = v68 == v70;
        if (v68 == v70) {
          int64_t v68 = 0;
        }
        v69 |= v71;
        int64_t v72 = *(void *)(v52 + 8 * v68);
      }
      while (v72 == -1);
      Swift::Int v53 = __clz(__rbit64(~v72)) + (v68 << 6);
LABEL_78:
      *(void *)(v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v53;
      uint64_t v54 = (void *)(*(void *)(v49 + 48) + 16 * v53);
      *uint64_t v54 = v64;
      v54[1] = v63;
      unint64_t v55 = *(void *)(v49 + 56) + 72 * v53;
      *(_OWORD *)(v55 + 16) = v116;
      *(_OWORD *)(v55 + 32) = v117;
      *(_OWORD *)(v55 + 48) = v118;
      *(void *)(v55 + 64) = v119;
      *(_OWORD *)unint64_t v55 = v115;
      ++*(void *)(v49 + 16);
      --v27;
      uint64_t v1 = v107;
      if (!v27) {
        return v49;
      }
    }
  }
  swift_retain();
  return v1;
}

{
  uint64_t v1;
  char v2;
  size_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  Swift::Int v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int64_t v76;
  unint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  Swift::Int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  BOOL v89;
  uint64_t v90;
  void v92[2];
  int64_t v93;
  unint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  long long v99;
  long long v100;
  long long v101;
  long long v102;
  uint64_t v103;
  uint64_t v104;
  long long v105;
  long long v106;
  long long v107;
  long long v108;
  uint64_t v109;
  unsigned char v110[72];
  uint64_t v111;

  uint64_t v1 = isStackAllocationSafe;
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned char *)(isStackAllocationSafe + 32);
  uint64_t v93 = (unint64_t)((1 << v2) + 63) >> 6;
  char v3 = 8 * v93;
  uint64_t v98 = isStackAllocationSafe;
  if ((v2 & 0x3Fu) > 0xD)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      char v94 = (unint64_t *)swift_slowAlloc();
      bzero(v94, v3);
      uint64_t v24 = 0;
      unint64_t v25 = *(void *)(v1 + 64);
      int64_t v95 = 0;
      uint64_t v96 = v1 + 64;
      int64_t v26 = 1 << *(unsigned char *)(v1 + 32);
      if (v26 < 64) {
        unint64_t v27 = ~(-1 << v26);
      }
      else {
        unint64_t v27 = -1;
      }
      unint64_t v28 = v27 & v25;
      int64_t v97 = (unint64_t)(v26 + 63) >> 6;
      while (1)
      {
        if (v28)
        {
          int64_t v29 = __clz(__rbit64(v28));
          v28 &= v28 - 1;
          unint64_t v30 = v29 | (v24 << 6);
        }
        else
        {
          int64_t v31 = v24 + 1;
          if (__OFADD__(v24, 1)) {
            goto LABEL_139;
          }
          if (v31 >= v97) {
            goto LABEL_69;
          }
          uint64_t v32 = *(void *)(v96 + 8 * v31);
          ++v24;
          if (!v32)
          {
            uint64_t v24 = v31 + 1;
            if (v31 + 1 >= v97) {
              goto LABEL_69;
            }
            uint64_t v32 = *(void *)(v96 + 8 * v24);
            if (!v32)
            {
              uint64_t v24 = v31 + 2;
              if (v31 + 2 >= v97) {
                goto LABEL_69;
              }
              uint64_t v32 = *(void *)(v96 + 8 * v24);
              if (!v32)
              {
                int64_t v33 = v31 + 3;
                if (v33 >= v97) {
                  goto LABEL_69;
                }
                uint64_t v32 = *(void *)(v96 + 8 * v33);
                if (!v32)
                {
                  while (1)
                  {
                    uint64_t v24 = v33 + 1;
                    if (__OFADD__(v33, 1)) {
                      goto LABEL_142;
                    }
                    if (v24 >= v97) {
                      break;
                    }
                    uint64_t v32 = *(void *)(v96 + 8 * v24);
                    ++v33;
                    if (v32) {
                      goto LABEL_58;
                    }
                  }
LABEL_69:
                  int64_t v42 = v95;
                  if (!v95)
                  {
                    uint64_t v1 = MEMORY[0x1E4FBC868];
                    goto LABEL_135;
                  }
                  if (v95 == *(void *)(v1 + 16))
                  {
                    swift_retain();
                    goto LABEL_135;
                  }
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  unint64_t v67 = static _DictionaryStorage.allocate(capacity:)();
                  int64_t v68 = 0;
                  unint64_t v69 = *v94;
                  int64_t v70 = v67 + 64;
                  while (1)
                  {
                    if (v69)
                    {
                      int64_t v74 = __clz(__rbit64(v69));
                      v69 &= v69 - 1;
                      uint64_t v98 = v68;
                      uint64_t v75 = v74 | (v68 << 6);
                    }
                    else
                    {
                      uint64_t v76 = v68 + 1;
                      if (__OFADD__(v68, 1)) {
                        goto LABEL_143;
                      }
                      if (v76 >= v93) {
                        goto LABEL_134;
                      }
                      uint64_t v77 = v94[v76];
                      Swift::String v78 = v68 + 1;
                      if (!v77)
                      {
                        Swift::String v78 = v68 + 2;
                        if (v68 + 2 >= v93) {
                          goto LABEL_134;
                        }
                        uint64_t v77 = v94[v78];
                        if (!v77)
                        {
                          Swift::String v78 = v68 + 3;
                          if (v68 + 3 >= v93) {
                            goto LABEL_134;
                          }
                          uint64_t v77 = v94[v78];
                          if (!v77)
                          {
                            Swift::String v78 = v68 + 4;
                            if (v68 + 4 >= v93) {
                              goto LABEL_134;
                            }
                            uint64_t v77 = v94[v78];
                            if (!v77)
                            {
                              uint64_t v79 = v68 + 5;
                              if (v68 + 5 >= v93) {
                                goto LABEL_134;
                              }
                              uint64_t v77 = v94[v79];
                              if (!v77)
                              {
                                while (1)
                                {
                                  Swift::String v78 = v79 + 1;
                                  if (__OFADD__(v79, 1)) {
                                    goto LABEL_145;
                                  }
                                  if (v78 >= v93) {
                                    break;
                                  }
                                  uint64_t v77 = v94[v78];
                                  ++v79;
                                  if (v77) {
                                    goto LABEL_124;
                                  }
                                }
LABEL_134:
                                uint64_t v1 = v67;
LABEL_135:
                                MEMORY[0x185309510](v94, -1, -1);
                                return v1;
                              }
                              Swift::String v78 = v68 + 5;
                            }
                          }
                        }
                      }
LABEL_124:
                      unint64_t v69 = (v77 - 1) & v77;
                      uint64_t v98 = v78;
                      uint64_t v75 = __clz(__rbit64(v77)) + (v78 << 6);
                    }
                    uint64_t v80 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v75);
                    uint64_t v82 = *v80;
                    int64_t v81 = v80[1];
                    outlined init with copy of AttributedString._AttributeValue(*(void *)(v1 + 56) + 72 * v75, (uint64_t)&v105);
                    uint64_t v101 = v107;
                    uint64_t v102 = v108;
                    char v103 = v109;
                    uint64_t v99 = v105;
                    uint64_t v100 = v106;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    Swift::Int v83 = Hasher._finalize()();
                    uint64_t v84 = -1 << *(unsigned char *)(v67 + 32);
                    unint64_t v85 = v83 & ~v84;
                    unint64_t v86 = v85 >> 6;
                    if (((-1 << v85) & ~*(void *)(v70 + 8 * (v85 >> 6))) != 0)
                    {
                      unint64_t v71 = __clz(__rbit64((-1 << v85) & ~*(void *)(v70 + 8 * (v85 >> 6)))) | v85 & 0x7FFFFFFFFFFFFFC0;
                    }
                    else
                    {
                      char v87 = 0;
                      unint64_t v88 = (unint64_t)(63 - v84) >> 6;
                      do
                      {
                        if (++v86 == v88 && (v87 & 1) != 0) {
                          goto LABEL_138;
                        }
                        BOOL v89 = v86 == v88;
                        if (v86 == v88) {
                          unint64_t v86 = 0;
                        }
                        v87 |= v89;
                        uint64_t v90 = *(void *)(v70 + 8 * v86);
                      }
                      while (v90 == -1);
                      unint64_t v71 = __clz(__rbit64(~v90)) + (v86 << 6);
                    }
                    *(void *)(v70 + ((v71 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v71;
                    int64_t v72 = (void *)(*(void *)(v67 + 48) + 16 * v71);
                    *int64_t v72 = v82;
                    v72[1] = v81;
                    unint64_t v73 = *(void *)(v67 + 56) + 72 * v71;
                    *(_OWORD *)(v73 + 16) = v100;
                    *(_OWORD *)(v73 + 32) = v101;
                    *(_OWORD *)(v73 + 48) = v102;
                    *(void *)(v73 + 64) = v103;
                    *(_OWORD *)unint64_t v73 = v99;
                    ++*(void *)(v67 + 16);
                    --v42;
                    int64_t v68 = v98;
                    if (!v42) {
                      goto LABEL_134;
                    }
                  }
                }
                uint64_t v24 = v33;
              }
            }
          }
LABEL_58:
          unint64_t v28 = (v32 - 1) & v32;
          unint64_t v30 = __clz(__rbit64(v32)) + (v24 << 6);
        }
        unint64_t v34 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v30);
        uint64_t v35 = *v34;
        unint64_t v36 = v34[1];
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v1 + 56) + 72 * v30, (uint64_t)v110);
        *(void *)&uint64_t v105 = v35;
        *((void *)&v105 + 1) = v36;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v110, (uint64_t)&v106);
        *(void *)&uint64_t v99 = v35;
        *((void *)&v99 + 1) = v36;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)&v106, (uint64_t)&v100);
        uint64_t v37 = v104;
        if (v104
          && *(void *)(v104 + 16)
          && (Hasher.init(_seed:)(),
              Hasher._combine(_:)(0),
              uint64_t v38 = Hasher._finalize()(),
              uint64_t v39 = -1 << *(unsigned char *)(v37 + 32),
              unint64_t v40 = v38 & ~v39,
              ((*(void *)(v37 + 56 + ((v40 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v40) & 1) != 0))
        {
          unint64_t v41 = ~v39;
          while (*(void *)(*(void *)(v37 + 48) + 16 * v40 + 8))
          {
            unint64_t v40 = (v40 + 1) & v41;
            if (((*(void *)(v37 + 56 + ((v40 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v40) & 1) == 0) {
              goto LABEL_42;
            }
          }
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRelease();
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v105);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v100);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v110);
          swift_bridgeObjectRelease();
          *(unint64_t *)((char *)v94 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
          uint64_t v22 = __OFADD__(v95++, 1);
          uint64_t v1 = v98;
          if (v22)
          {
            __break(1u);
            goto LABEL_69;
          }
        }
        else
        {
LABEL_42:
          swift_bridgeObjectRetain_n();
          outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v105);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v100);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v110);
          swift_bridgeObjectRelease();
          uint64_t v1 = v98;
        }
      }
    }
  }
  v92[1] = v92;
  MEMORY[0x1F4188790](isStackAllocationSafe);
  char v94 = (void *)((char *)v92 - ((v3 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v94, v3);
  size_t v4 = 0;
  uint64_t v5 = *(void *)(v1 + 64);
  int64_t v95 = 0;
  uint64_t v96 = v1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(v1 + 32);
  if (v6 < 64) {
    int64_t v7 = ~(-1 << v6);
  }
  else {
    int64_t v7 = -1;
  }
  uint64_t v8 = v7 & v5;
  int64_t v97 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      uint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      uint64_t v10 = v9 | (v4 << 6);
      goto LABEL_24;
    }
    unint64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_137;
    }
    if (v11 >= v97) {
      goto LABEL_34;
    }
    int64_t v12 = *(void *)(v96 + 8 * v11);
    ++v4;
    if (!v12)
    {
      size_t v4 = v11 + 1;
      if (v11 + 1 >= v97) {
        goto LABEL_34;
      }
      int64_t v12 = *(void *)(v96 + 8 * v4);
      if (!v12)
      {
        size_t v4 = v11 + 2;
        if (v11 + 2 >= v97) {
          goto LABEL_34;
        }
        int64_t v12 = *(void *)(v96 + 8 * v4);
        if (!v12) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v12 - 1) & v12;
    uint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_24:
    unint64_t v14 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v10);
    int64_t v15 = *v14;
    unint64_t v16 = v14[1];
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v1 + 56) + 72 * v10, (uint64_t)v110);
    *(void *)&uint64_t v105 = v15;
    *((void *)&v105 + 1) = v16;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)v110, (uint64_t)&v106);
    *(void *)&uint64_t v99 = v15;
    *((void *)&v99 + 1) = v16;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)&v106, (uint64_t)&v100);
    int64_t v17 = v104;
    if (v104
      && *(void *)(v104 + 16)
      && (Hasher.init(_seed:)(),
          Hasher._combine(_:)(0),
          BOOL v18 = Hasher._finalize()(),
          int v19 = -1 << *(unsigned char *)(v17 + 32),
          uint64_t v20 = v18 & ~v19,
          ((*(void *)(v17 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) != 0))
    {
      int64_t v21 = ~v19;
      while (*(void *)(*(void *)(v17 + 48) + 16 * v20 + 8))
      {
        uint64_t v20 = (v20 + 1) & v21;
        if (((*(void *)(v17 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
          goto LABEL_7;
        }
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v105);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v100);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v110);
      swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v94 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      uint64_t v22 = __OFADD__(v95++, 1);
      uint64_t v1 = v98;
      if (v22)
      {
        __break(1u);
        goto LABEL_34;
      }
    }
    else
    {
LABEL_7:
      swift_bridgeObjectRetain_n();
      outlined destroy of (key: String, value: AttributedString._AttributeValue)((uint64_t)&v105);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v100);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v110);
      swift_bridgeObjectRelease();
      uint64_t v1 = v98;
    }
  }
  unint64_t v13 = v11 + 3;
  if (v13 >= v97) {
    goto LABEL_34;
  }
  int64_t v12 = *(void *)(v96 + 8 * v13);
  if (v12)
  {
    size_t v4 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    size_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_140;
    }
    if (v4 >= v97) {
      break;
    }
    int64_t v12 = *(void *)(v96 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_23;
    }
  }
LABEL_34:
  uint64_t v23 = v95;
  if (!v95) {
    return MEMORY[0x1E4FBC868];
  }
  if (v95 != *(void *)(v1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
    unint64_t v43 = static _DictionaryStorage.allocate(capacity:)();
    int64_t v44 = 0;
    uint64_t v45 = *v94;
    uint64_t v46 = v43 + 64;
    while (1)
    {
      if (v45)
      {
        uint64_t v50 = __clz(__rbit64(v45));
        v45 &= v45 - 1;
        uint64_t v98 = v44;
        unint64_t v51 = v50 | (v44 << 6);
      }
      else
      {
        uint64_t v52 = v44 + 1;
        if (__OFADD__(v44, 1)) {
          goto LABEL_141;
        }
        if (v52 >= v93) {
          return v43;
        }
        Swift::Int v53 = v94[v52];
        uint64_t v54 = v44 + 1;
        if (!v53)
        {
          uint64_t v54 = v44 + 2;
          if (v44 + 2 >= v93) {
            return v43;
          }
          Swift::Int v53 = v94[v54];
          if (!v53)
          {
            uint64_t v54 = v44 + 3;
            if (v44 + 3 >= v93) {
              return v43;
            }
            Swift::Int v53 = v94[v54];
            if (!v53)
            {
              uint64_t v54 = v44 + 4;
              if (v44 + 4 >= v93) {
                return v43;
              }
              Swift::Int v53 = v94[v54];
              if (!v53)
              {
                unint64_t v55 = v44 + 5;
                if (v44 + 5 >= v93) {
                  return v43;
                }
                Swift::Int v53 = v94[v55];
                if (!v53)
                {
                  while (1)
                  {
                    uint64_t v54 = v55 + 1;
                    if (__OFADD__(v55, 1)) {
                      break;
                    }
                    if (v54 >= v93) {
                      return v43;
                    }
                    Swift::Int v53 = v94[v54];
                    ++v55;
                    if (v53) {
                      goto LABEL_92;
                    }
                  }
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
                }
                uint64_t v54 = v44 + 5;
              }
            }
          }
        }
LABEL_92:
        uint64_t v45 = (v53 - 1) & v53;
        uint64_t v98 = v54;
        unint64_t v51 = __clz(__rbit64(v53)) + (v54 << 6);
      }
      unint64_t v56 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v51);
      unint64_t v58 = *v56;
      char v57 = v56[1];
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v1 + 56) + 72 * v51, (uint64_t)&v105);
      uint64_t v101 = v107;
      uint64_t v102 = v108;
      char v103 = v109;
      uint64_t v99 = v105;
      uint64_t v100 = v106;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      BOOL v59 = Hasher._finalize()();
      uint64_t v60 = -1 << *(unsigned char *)(v43 + 32);
      int64_t v61 = v59 & ~v60;
      unint64_t v62 = v61 >> 6;
      if (((-1 << v61) & ~*(void *)(v46 + 8 * (v61 >> 6))) != 0)
      {
        uint64_t v47 = __clz(__rbit64((-1 << v61) & ~*(void *)(v46 + 8 * (v61 >> 6)))) | v61 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_74;
      }
      uint64_t v63 = 0;
      unint64_t v64 = (unint64_t)(63 - v60) >> 6;
      do
      {
        if (++v62 == v64 && (v63 & 1) != 0)
        {
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        uint64_t v65 = v62 == v64;
        if (v62 == v64) {
          unint64_t v62 = 0;
        }
        v63 |= v65;
        unint64_t v66 = *(void *)(v46 + 8 * v62);
      }
      while (v66 == -1);
      uint64_t v47 = __clz(__rbit64(~v66)) + (v62 << 6);
LABEL_74:
      *(void *)(v46 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v47;
      uint64_t v48 = (void *)(*(void *)(v43 + 48) + 16 * v47);
      *uint64_t v48 = v58;
      v48[1] = v57;
      uint64_t v49 = *(void *)(v43 + 56) + 72 * v47;
      *(_OWORD *)(v49 + 16) = v100;
      *(_OWORD *)(v49 + 32) = v101;
      *(_OWORD *)(v49 + 48) = v102;
      *(void *)(v49 + 64) = v103;
      *(_OWORD *)uint64_t v49 = v99;
      ++*(void *)(v43 + 16);
      --v23;
      int64_t v44 = v98;
      if (!v23) {
        return v43;
      }
    }
  }
  swift_retain();
  return v1;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute()
{
  return 0xD00000000000001BLL;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute()
{
  return 0xD00000000000001DLL;
}

uint64_t static MarkdownDecodableAttributedStringKey.markdownName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 24))();
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.Run(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

BOOL protocol witness for SingleValueDecodingContainer.decodeNil() in conformance _PlistDecoder<A>()
{
  return _PlistDecoder.decodeNil()();
}

Swift::Bool __swiftcall _PlistDecoder.decodeNil()()
{
  uint64_t v1 = *(void *)(*v0 + 88);
  uint64_t v2 = *(void *)(*v0 + 80);
  swift_getAssociatedTypeWitness();
  uint64_t v21 = v2;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v12);
  unint64_t v14 = (char *)&v19 - v13;
  uint64_t v15 = v0[2];
  swift_bridgeObjectRetain_n();
  uint64_t v16 = MEMORY[0x185302620](v15, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (v16)
  {
    uint64_t v20 = v1;
    uint64_t v22 = v15;
    type metadata accessor for Array();
    swift_getWitnessTable();
    BidirectionalCollection.last.getter();
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, AssociatedTypeWitness) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v7, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      swift_bridgeObjectRelease();
      char v17 = (*(uint64_t (**)(char *))(v20 + 40))(v14);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
      return v17 & 1;
    }
  }
  else
  {
    __break(1u);
  }
  Swift::Bool result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  __break(1u);
  return result;
}

uint64_t dispatch thunk of JSONDecoder.userInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

void static MeasurementFormatUnitUsage<>.barometric.getter(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

void static MeasurementFormatUnitUsage<>.visibility.getter(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

char *specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(char *__s1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(unsigned __int8 *, uint64_t, uint64_t), uint64_t (*a8)(unsigned __int8 *, uint64_t, uint64_t), uint64_t (*a9)(char *, uint64_t))
{
  if (a5)
  {
    Swift::Bool result = (char *)specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)(__s1, a2, a3, a4);
    if (!v9)
    {
      __int16 v19 = v18;
      int64_t v26 = result;
      Swift::Bool result = (char *)specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)__s1, a2, v18 & 1, a7, a8);
      if (v20)
      {
        if ((v19 & 0x100) != 0)
        {
          uint64_t v21 = static String._fromUTF8Repairing(_:)();
          uint64_t v23 = v22;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v24 = v21;
          *(void *)(v24 + 8) = v23;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(unsigned char *)(v24 + 48) = 11;
          return (char *)swift_willThrow();
        }
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v26);
      }
    }
  }
  else
  {
    Swift::Bool result = (char *)specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)((unsigned __int8 *)__s1, a2, a6 & 1, a3, a4);
    if (!v9)
    {
      int64_t v26 = result;
      Swift::Bool result = (char *)a9(__s1, a2);
      if (v25) {
        return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(a5 & 1, __s1, a2, a3, a4, v26);
      }
    }
  }
  return result;
}

unint64_t specialized closure #1 in JSONDecoderImpl.unwrapFixedWidthInteger<A, B>(from:as:for:_:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6, uint64_t (*a7)(unsigned __int8 *, uint64_t, uint64_t), unint64_t a8, uint64_t (*a9)(unint64_t, uint64_t))
{
  uint64_t v10 = v9;
  LOBYTE(v11) = a5;
  uint64_t v13 = a2;
  unint64_t v14 = result;
  unint64_t v172 = a4;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
      goto LABEL_275;
    }
    Swift::Bool result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, result);
    if (result == 48)
    {
      if (v13 >= 1) {
        uint64_t v27 = 1;
      }
      else {
        uint64_t v27 = v13;
      }
      unint64_t v28 = v14;
      if (v13 < 2) {
        goto LABEL_175;
      }
      unint64_t v29 = v14 + v27;
      unsigned __int8 v30 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + v27);
      unsigned int v31 = v30;
      if (v30 - 46 <= 0x37 && ((1 << (v30 - 46)) & 0x80000000800001) != 0) {
        goto LABEL_175;
      }
LABEL_26:
      unsigned __int8 v33 = v30;
      __int16 v34 = _asciiNumbers.getter();
      unint64_t v35 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v29, a3, v172);
      unsigned __int8 v36 = v33;
      uint64_t v38 = v37;
      uint64_t v40 = v39;
      if (v31 >= v34 && HIBYTE(v34) >= v36) {
        goto LABEL_111;
      }
      uint64_t v41 = v36;
LABEL_232:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_OWORD *)uint64_t v56 = xmmword_182112860;
      *(void *)(v56 + 16) = v41;
      *(void *)(v56 + 24) = v35;
      *(void *)(v56 + 32) = v38;
      *(void *)(v56 + 40) = v40;
LABEL_245:
      char v57 = 1;
      goto LABEL_246;
    }
    unint64_t v28 = v14;
    if ((result - 58) < 0xF7u)
    {
      if (result != 45)
      {
LABEL_275:
        __break(1u);
LABEL_276:
        __break(1u);
LABEL_277:
        __break(1u);
LABEL_278:
        __break(1u);
LABEL_279:
        __break(1u);
LABEL_280:
        __break(1u);
LABEL_281:
        __break(1u);
LABEL_282:
        __break(1u);
        goto LABEL_283;
      }
      if (v13 < 2)
      {
        unint64_t v59 = v14 - a3;
        if (v14 >= a3 && a3 + v172 >= v14)
        {
          if (a3 + v172 >= v14 + 1) {
            unint64_t v60 = v14 + 1;
          }
          else {
            unint64_t v60 = a3 + v172;
          }
          if (v60 <= a3)
          {
            uint64_t v68 = 0;
            uint64_t v63 = 1;
LABEL_137:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v85 = 0xD000000000000010;
            *(void *)(v85 + 8) = 0x80000001823ABAE0;
            *(void *)(v85 + 16) = 45;
            *(void *)(v85 + 24) = v63;
            *(void *)(v85 + 32) = v68;
            *(void *)(v85 + 40) = v59;
            *(unsigned char *)(v85 + 48) = 1;
            return swift_willThrow();
          }
          unint64_t v61 = v172 + a3;
          uint64_t v62 = -(uint64_t)a3;
          uint64_t v63 = 1;
          unint64_t v164 = v14 - a3;
          unint64_t v169 = v172 + a3;
          uint64_t v173 = -(uint64_t)a3;
          while (2)
          {
            uint64_t v64 = 0;
            uint64_t v65 = 0;
            unint64_t v66 = v61 - a3;
            unint64_t v67 = v62 + a3;
            while (1)
            {
              if ((uint64_t)(v67 + v65) < 0 || (uint64_t)(v66 + v64) < 1)
              {
LABEL_265:
                __break(1u);
LABEL_266:
                __break(1u);
                goto LABEL_267;
              }
              Swift::Bool result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v65);
              if (result == 10)
              {
                BOOL v50 = __OFADD__(v63++, 1);
                uint64_t v62 = v173;
                if (v50) {
                  goto LABEL_284;
                }
                a3 += v65 + 1;
                goto LABEL_104;
              }
              if (result == 13) {
                break;
              }
              uint64_t v68 = v65 + 1;
              if (__OFADD__(v65, 1)) {
                goto LABEL_266;
              }
              ++v65;
              --v64;
              if (a3 + v65 >= v60) {
                goto LABEL_106;
              }
            }
            uint64_t v69 = a3 + v65;
            Swift::Bool result = specialized static Comparable.<= infix(_:_:)(a3 + v65 + 1, v14);
            uint64_t v62 = v173;
            if ((result & 1) == 0) {
              goto LABEL_102;
            }
            if (((v173 + a3 + v65 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v65 + v66) >= 1)
            {
              Swift::Bool result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v65 + 1);
              if (result == 10) {
                uint64_t v69 = a3 + v65 + 1;
              }
LABEL_102:
              BOOL v50 = __OFADD__(v63++, 1);
              if (v50) {
                goto LABEL_285;
              }
              a3 = v69 + 1;
LABEL_104:
              unint64_t v61 = v169;
              if (a3 < v60) {
                continue;
              }
              uint64_t v68 = 0;
LABEL_106:
              unint64_t v59 = v164;
              goto LABEL_137;
            }
            goto LABEL_293;
          }
        }
        goto LABEL_280;
      }
      unint64_t v43 = v14 + 1;
      unsigned __int8 v44 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + 1);
      if (v44 == 48)
      {
        ++v14;
        unint64_t v29 = v28 + 2;
        if (!specialized Collection.isEmpty.getter(v28 + 2, v13 - 2))
        {
          unsigned __int8 v30 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v29);
          unsigned int v31 = v30;
          if (v30 - 46 > 0x37 || ((1 << (v30 - 46)) & 0x80000000800001) == 0) {
            goto LABEL_26;
          }
        }
      }
      else
      {
        unsigned __int8 v73 = v44;
        if ((v44 - 58) < 0xF7u)
        {
          Swift::Bool result = specialized static Comparable.<= infix(_:_:)(a3, v14 + 1);
          if (result)
          {
            Swift::Bool result = specialized static Comparable.<= infix(_:_:)(v14 + 1, a3 + v172);
            if (result)
            {
              Swift::Bool result = specialized min<A>(_:_:)(v14 + 2, a3 + v172);
              if (result <= a3)
              {
                uint64_t v83 = 0;
                uint64_t v77 = 1;
LABEL_234:
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v138 = 0xD000000000000013;
                *(void *)(v138 + 8) = 0x80000001823ABBD0;
                *(void *)(v138 + 16) = v73;
                *(void *)(v138 + 24) = v77;
                *(void *)(v138 + 32) = v83;
                *(void *)(v138 + 40) = v43 - a3;
                *(unsigned char *)(v138 + 48) = 1;
                return swift_willThrow();
              }
              unint64_t v74 = result;
              unint64_t v75 = v172 + a3;
              uint64_t v76 = -(uint64_t)a3;
              uint64_t v77 = 1;
              unint64_t v78 = a3;
              unsigned __int8 v159 = v73;
              unint64_t v165 = v172 + a3;
LABEL_117:
              while (1)
              {
                uint64_t v174 = v77;
                uint64_t v79 = 0;
                uint64_t v80 = 0;
                unint64_t v81 = v75 - v78;
                unint64_t v82 = v76 + v78;
                while (1)
                {
                  if ((uint64_t)(v82 + v80) < 0 || (uint64_t)(v81 + v79) < 1) {
                    goto LABEL_271;
                  }
                  Swift::Bool result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v78 + v80);
                  if (result == 10)
                  {
                    uint64_t v76 = -(uint64_t)a3;
                    uint64_t v77 = v174 + 1;
                    if (__OFADD__(v174, 1)) {
                      goto LABEL_296;
                    }
                    v78 += v80 + 1;
                    unint64_t v75 = v165;
                    if (v78 >= v74) {
                      goto LABEL_135;
                    }
                    goto LABEL_117;
                  }
                  if (result == 13) {
                    break;
                  }
                  uint64_t v83 = v80 + 1;
                  if (__OFADD__(v80, 1)) {
                    goto LABEL_273;
                  }
                  ++v80;
                  --v79;
                  if (v78 + v80 >= v74)
                  {
                    unsigned __int8 v73 = v159;
                    uint64_t v77 = v174;
                    goto LABEL_234;
                  }
                }
                uint64_t v84 = v78 + v80;
                Swift::Bool result = specialized static Comparable.<= infix(_:_:)(v78 + v80 + 1, v43);
                if ((result & 1) == 0) {
                  goto LABEL_133;
                }
                if (((v78 - a3 + v80 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v80 + v81) < 1) {
                  break;
                }
                Swift::Bool result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v78 + v80 + 1);
                if (result == 10) {
                  uint64_t v84 = v78 + v80 + 1;
                }
LABEL_133:
                uint64_t v77 = v174 + 1;
                if (__OFADD__(v174, 1)) {
                  goto LABEL_297;
                }
                unint64_t v78 = v84 + 1;
                unint64_t v75 = v165;
                uint64_t v76 = -(uint64_t)a3;
                if (v84 + 1 >= v74)
                {
LABEL_135:
                  uint64_t v83 = 0;
                  unsigned __int8 v73 = v159;
                  goto LABEL_234;
                }
              }
LABEL_299:
              __break(1u);
              return result;
            }
            goto LABEL_292;
          }
LABEL_291:
          __break(1u);
LABEL_292:
          __break(1u);
LABEL_293:
          __break(1u);
LABEL_294:
          __break(1u);
LABEL_295:
          __break(1u);
LABEL_296:
          __break(1u);
LABEL_297:
          __break(1u);
LABEL_298:
          __break(1u);
          goto LABEL_299;
        }
        ++v14;
      }
    }
LABEL_175:
    unint64_t v22 = v14;
    unint64_t v14 = v28;
    if ((a6 & 1) != 0 && v22 + 1 < v28 + v13)
    {
      uint64_t v107 = 0;
      while (1)
      {
        uint64_t v108 = v22 + v107;
        if ((*(unsigned __int8 *)(v22 + v107 + 1) | 0x20) == 0x65) {
          break;
        }
        if (~v22 + v13 + v14 == ++v107) {
          goto LABEL_186;
        }
      }
      Swift::Bool result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v22 + v107);
      if ((result - 58) <= 0xF5u)
      {
        if (((v22 - v14 + v107 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v22 + v13 + v14 - v107) >= 1)
        {
          unsigned __int8 v109 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v108 + 1);
          unint64_t v110 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v108 + 1, a3, v172);
          uint64_t v112 = v111;
          uint64_t v114 = v113;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)uint64_t v56 = xmmword_182112860;
          *(void *)(v56 + 16) = v109;
          *(void *)(v56 + 24) = v110;
          *(void *)(v56 + 32) = v112;
LABEL_185:
          *(void *)(v56 + 40) = v114;
          goto LABEL_245;
        }
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
LABEL_287:
        __break(1u);
LABEL_288:
        __break(1u);
LABEL_289:
        __break(1u);
LABEL_290:
        __break(1u);
        goto LABEL_291;
      }
    }
LABEL_186:
    unint64_t v115 = v14 + v13;
    unint64_t v116 = v14 + v13 - 1;
    Swift::Bool result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v116);
    if ((result - 58) > 0xF5u)
    {
      Swift::Bool result = a9(v14, v13);
      if ((v125 & 1) == 0) {
        return result;
      }
      return (unint64_t)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(v11 & 1, (char *)v14, v13, a3, v172, v22);
    }
    uint64_t v46 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(v116 - a3);
    if (v116 >= a3 && a3 + v172 >= v116)
    {
      if (a3 + v172 >= v115) {
        unint64_t v117 = v115;
      }
      else {
        unint64_t v117 = a3 + v172;
      }
      if (v117 > a3)
      {
        char v161 = result;
        unint64_t v167 = v116 - a3;
        unint64_t v118 = v172 + a3;
        uint64_t v119 = -(uint64_t)a3;
        uint64_t v13 = 1;
        unint64_t v171 = v172 + a3;
        uint64_t v176 = -(uint64_t)a3;
        while (2)
        {
          uint64_t v120 = 0;
          uint64_t v121 = 0;
          unint64_t v122 = v118 - a3;
          unint64_t v123 = v119 + a3;
          while (1)
          {
            if ((uint64_t)(v123 + v121) < 0 || (uint64_t)(v122 + v120) < 1)
            {
              __break(1u);
LABEL_264:
              __break(1u);
              goto LABEL_265;
            }
            Swift::Bool result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v121);
            if (result == 10)
            {
              BOOL v50 = __OFADD__(v13++, 1);
              uint64_t v119 = v176;
              if (v50) {
                goto LABEL_278;
              }
              a3 += v121 + 1;
              goto LABEL_211;
            }
            if (result == 13) {
              break;
            }
            unint64_t v22 = v121 + 1;
            if (__OFADD__(v121, 1)) {
              goto LABEL_264;
            }
            ++v121;
            --v120;
            if (a3 + v121 >= v117) {
              goto LABEL_213;
            }
          }
          uint64_t v124 = a3 + v121;
          Swift::Bool result = specialized static Comparable.<= infix(_:_:)(a3 + v121 + 1, v116);
          uint64_t v119 = v176;
          if ((result & 1) == 0) {
            goto LABEL_209;
          }
          if (((v176 + a3 + v121 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v121 + v122) >= 1)
          {
            Swift::Bool result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v121 + 1);
            if (result == 10) {
              uint64_t v124 = a3 + v121 + 1;
            }
LABEL_209:
            BOOL v50 = __OFADD__(v13++, 1);
            if (v50) {
              goto LABEL_279;
            }
            a3 = v124 + 1;
LABEL_211:
            unint64_t v118 = v171;
            if (a3 < v117) {
              continue;
            }
            unint64_t v22 = 0;
LABEL_213:
            LOBYTE(result) = v161;
            uint64_t v46 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))v167;
            goto LABEL_217;
          }
          goto LABEL_282;
        }
      }
      unint64_t v22 = 0;
      uint64_t v13 = 1;
LABEL_217:
      uint64_t v58 = result;
      goto LABEL_218;
    }
    goto LABEL_274;
  }
  if (!a2)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }
  Swift::Bool result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, result);
  if (result != 48)
  {
    if ((result - 58) < 0xF7u)
    {
      switch((char)result)
      {
        case '+':
        case '-':
          if (v13 < 2)
          {
            if (v13 != 1) {
              goto LABEL_287;
            }
            Swift::Bool result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14);
            unint64_t v86 = v14 - a3;
            if (v14 >= a3)
            {
              unsigned __int8 v87 = result;
              Swift::Bool result = specialized static Comparable.<= infix(_:_:)(v14, a3 + a4);
              if ((result & 1) == 0) {
                goto LABEL_289;
              }
              Swift::Bool result = specialized min<A>(_:_:)(v14 + 1, a3 + a4);
              if (result <= a3)
              {
                uint64_t v96 = 0;
                uint64_t v91 = 1;
              }
              else
              {
                unint64_t v88 = result;
                unsigned __int8 v160 = v87;
                unint64_t v166 = v14 - a3;
                unint64_t v89 = a4 + a3;
                uint64_t v90 = -(uint64_t)a3;
                uint64_t v91 = 1;
                unint64_t v170 = a4 + a3;
                uint64_t v175 = -(uint64_t)a3;
                do
                {
                  uint64_t v92 = 0;
                  uint64_t v93 = 0;
                  unint64_t v94 = v89 - a3;
                  unint64_t v95 = v90 + a3;
                  while (1)
                  {
                    if ((uint64_t)(v95 + v93) < 0 || (uint64_t)(v94 + v92) < 1) {
                      goto LABEL_269;
                    }
                    Swift::Bool result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v93);
                    if (result == 10)
                    {
                      BOOL v50 = __OFADD__(v91++, 1);
                      if (v50) {
                        goto LABEL_294;
                      }
                      a3 += v93 + 1;
                      goto LABEL_164;
                    }
                    if (result == 13) {
                      break;
                    }
                    uint64_t v96 = v93 + 1;
                    if (__OFADD__(v93, 1)) {
                      goto LABEL_270;
                    }
                    ++v93;
                    --v92;
                    if (a3 + v93 >= v88) {
                      goto LABEL_166;
                    }
                  }
                  uint64_t v97 = a3 + v93;
                  Swift::Bool result = specialized static Comparable.<= infix(_:_:)(a3 + v93 + 1, v14);
                  if ((result & 1) == 0) {
                    goto LABEL_162;
                  }
                  if (((v175 + a3 + v93 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v93 + v94) < 1) {
                    goto LABEL_298;
                  }
                  Swift::Bool result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v93 + 1);
                  if (result == 10) {
                    uint64_t v97 = a3 + v93 + 1;
                  }
LABEL_162:
                  BOOL v50 = __OFADD__(v91++, 1);
                  if (v50) {
                    goto LABEL_295;
                  }
                  a3 = v97 + 1;
LABEL_164:
                  unint64_t v89 = v170;
                  uint64_t v90 = v175;
                }
                while (a3 < v88);
                uint64_t v96 = 0;
LABEL_166:
                unsigned __int8 v87 = v160;
                unint64_t v86 = v166;
              }
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)uint64_t v131 = 0xD000000000000010;
              *(void *)(v131 + 8) = 0x80000001823ABAE0;
              *(void *)(v131 + 16) = v87;
              *(void *)(v131 + 24) = v91;
              *(void *)(v131 + 32) = v96;
              *(void *)(v131 + 40) = v86;
              *(unsigned char *)(v131 + 48) = 1;
              return swift_willThrow();
            }
            goto LABEL_288;
          }
          BOOL v158 = a7;
          unint64_t v22 = v14 + 1;
          unsigned __int8 v42 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + 1);
          if (v42 == 48)
          {
            char v162 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
            unint64_t v19 = v14 + 2;
            if (specialized Collection.isEmpty.getter(v14 + 2, v13 - 2))
            {
              char v21 = 0;
              goto LABEL_46;
            }
            unsigned __int8 v139 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v19);
            char v21 = 0;
            if (v139 <= 0x57u)
            {
              if (v139 == 46 || v139 == 69) {
                goto LABEL_46;
              }
            }
            else
            {
              switch(v139)
              {
                case 'x':
                  goto LABEL_239;
                case 'e':
                  goto LABEL_46;
                case 'X':
LABEL_239:
                  unint64_t v22 = v14 + 3;
                  if (specialized static Comparable.<= infix(_:_:)(v14 + 3, v14 + v13)) {
                    goto LABEL_13;
                  }
                  if (v13 - 2 < 1)
                  {
                    __break(1u);
LABEL_242:
                    unint64_t v99 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v19, a3, v172);
                    uint64_t v101 = v140;
                    uint64_t v103 = v141;
                    unint64_t v22 = v22;
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(void *)uint64_t v56 = 0xD000000000000013;
                    *(void *)(v56 + 8) = 0x80000001823ABAC0;
                    goto LABEL_243;
                  }
                  goto LABEL_173;
              }
            }
            __int16 v142 = _asciiNumbers.getter();
            unint64_t v35 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v19, a3, v172);
            uint64_t v38 = v143;
            uint64_t v40 = v144;
            if (v139 < v142 || HIBYTE(v142) < v139)
            {
              uint64_t v41 = v139;
              goto LABEL_232;
            }
            goto LABEL_111;
          }
          unsigned __int8 v127 = v42;
          if ((v42 - 58) >= 0xF7u) {
            goto LABEL_257;
          }
          switch(v42)
          {
            case '.':
LABEL_256:
              uint64_t v145 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v14, v13);
              Swift::Bool result = (unint64_t)specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v145, v146, a3, v172);
              if (v10) {
                return result;
              }
LABEL_257:
              char v162 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
              char v21 = 0;
              break;
            case 'N':
              long long v147 = (char *)specialized BufferView.dropFirst(_:)(1, v14, v13);
              Swift::Bool result = specialized static JSON5Scanner.validateNaN(from:fullSource:)(v147, v148, a3, v172);
              if (v9) {
                return result;
              }
              char v162 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
              char v21 = 1;
              break;
            case 'I':
              char v128 = (char *)specialized BufferView.dropFirst(_:)(1, v14, v13);
              Swift::Bool result = specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v128, v129, a3, v172);
              if (v9) {
                return result;
              }
              char v162 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
              char v21 = 1;
              break;
            default:
              _StringGuts.grow(_:)(20);
              v149._uint64_t countAndFlagsBits = 0x27207265746661;
              v149._unint64_t object = (void *)0xE700000000000000;
              DefaultStringInterpolation.appendLiteral(_:)(v149);
              unsigned __int8 v150 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14);
              unsigned int v151 = (v150 + 1);
              if ((v150 & 0x80) != 0) {
                unsigned int v151 = (((v150 & 0x3F) << 8) | (v150 >> 6)) + 33217;
              }
              uint64_t v177 = (v151 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v151) >> 3)) & 7)));
              v152._uint64_t countAndFlagsBits = MEMORY[0x185302020](&v177);
              specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v152);
              swift_bridgeObjectRelease();
              v153._uint64_t countAndFlagsBits = 0x6D756E206E692027;
              v153._unint64_t object = (void *)0xEB00000000726562;
              DefaultStringInterpolation.appendLiteral(_:)(v153);
              unint64_t v154 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v22, a3, v172);
              uint64_t v156 = v155;
              uint64_t v114 = v157;
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)uint64_t v56 = 0;
              *(void *)(v56 + 8) = 0xE000000000000000;
              *(void *)(v56 + 16) = v127;
              *(void *)(v56 + 24) = v154;
              *(void *)(v56 + 32) = v156;
              goto LABEL_185;
          }
          break;
        case '.':
          if (v13 >= 1) {
            uint64_t v98 = 1;
          }
          else {
            uint64_t v98 = v13;
          }
          unint64_t v19 = v14 + v98;
          if (specialized Collection.isEmpty.getter(v14 + v98, v13 - v98))
          {
            unint64_t v99 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v19, a3, a4);
            uint64_t v101 = v100;
            uint64_t v103 = v102;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v56 = 0;
            *(void *)(v56 + 8) = 0;
            *(void *)(v56 + 16) = 46;
            goto LABEL_244;
          }
          char v162 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
          LOBYTE(v22) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v19);
          __int16 v130 = _asciiNumbers.getter();
          if (v22 < v130
            || HIBYTE(v130) < v22)
          {
            goto LABEL_242;
          }
          BOOL v158 = a7;
          char v21 = 0;
          unint64_t v22 = v14;
          goto LABEL_46;
        case 'I':
          Swift::Bool result = closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)((const char *)v14, v13, v14, v13, a3, a4);
          goto LABEL_140;
        case 'N':
          Swift::Bool result = specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v14, v13, v14, v13, a3, a4);
LABEL_140:
          if (v9) {
            return result;
          }
          BOOL v158 = a7;
          char v162 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
          char v21 = 1;
          goto LABEL_45;
        default:
          goto LABEL_286;
      }
      goto LABEL_46;
    }
    BOOL v158 = a7;
    char v162 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
LABEL_44:
    char v21 = 0;
LABEL_45:
    unint64_t v22 = v14;
    goto LABEL_46;
  }
  BOOL v158 = a7;
  char v162 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
  if (v13 >= 1) {
    uint64_t v18 = 1;
  }
  else {
    uint64_t v18 = v13;
  }
  if (v13 < 2) {
    goto LABEL_44;
  }
  unint64_t v19 = v14 + v18;
  unsigned __int8 v20 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v14 + v18);
  char v21 = 0;
  if (v20 <= 0x57u)
  {
    unint64_t v22 = v14;
    if (v20 != 46 && v20 != 69) {
      goto LABEL_109;
    }
LABEL_46:
    char v25 = v21;
    unint64_t v45 = v14 + v13;
    a8 = v14 + v13 - 1;
    Swift::Bool result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a8);
    unsigned __int8 v168 = result;
    if ((result | 0x20) != 0x65)
    {
      char v24 = 0;
LABEL_75:
      Swift::Bool result = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)v14, v13, v24, v158, v162);
      if ((v52 & 1) == 0) {
        return result;
      }
      if (v25)
      {
        uint64_t v53 = static String._fromUTF8Repairing(_:)();
        uint64_t v55 = v54;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v56 = v53;
        *(void *)(v56 + 8) = v55;
        *(_OWORD *)(v56 + 16) = 0u;
        *(_OWORD *)(v56 + 32) = 0u;
        char v57 = 11;
LABEL_246:
        *(unsigned char *)(v56 + 48) = v57;
        return swift_willThrow();
      }
      return (unint64_t)specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)(v11 & 1, (char *)v14, v13, a3, v172, v22);
    }
    uint64_t v46 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
    if (a8 >= a3 && a3 + v172 >= a8)
    {
      if (a3 + v172 >= v45) {
        unint64_t v11 = v45;
      }
      else {
        unint64_t v11 = a3 + v172;
      }
      if (v11 > a3)
      {
        unint64_t v47 = v172 + a3;
        unint64_t v22 = -(uint64_t)a3;
        uint64_t v13 = 1;
        BOOL v158 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))(a8 - a3);
        unint64_t v163 = v172 + a3;
        unint64_t v172 = -(uint64_t)a3;
        while (2)
        {
          uint64_t v10 = 0;
          unint64_t v14 = 0;
          unint64_t v48 = v47 - a3;
          unint64_t v49 = v22 + a3;
          while (1)
          {
            if ((uint64_t)(v49 + v14) < 0 || (uint64_t)(v48 + v10) < 1)
            {
              __break(1u);
LABEL_255:
              __break(1u);
              goto LABEL_256;
            }
            Swift::Bool result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v14);
            if (result == 10)
            {
              BOOL v50 = __OFADD__(v13++, 1);
              unint64_t v22 = v172;
              if (v50) {
                goto LABEL_276;
              }
              a3 += v14 + 1;
              goto LABEL_71;
            }
            if (result == 13) {
              break;
            }
            unint64_t v22 = v14 + 1;
            if (__OFADD__(v14, 1)) {
              goto LABEL_255;
            }
            ++v14;
            --v10;
            if (a3 + v14 >= v11) {
              goto LABEL_73;
            }
          }
          uint64_t v51 = a3 + v14;
          Swift::Bool result = specialized static Comparable.<= infix(_:_:)(a3 + v14 + 1, a8);
          unint64_t v22 = v172;
          if ((result & 1) == 0) {
            goto LABEL_69;
          }
          if (((v172 + a3 + v14 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v14 + v48) >= 1)
          {
            Swift::Bool result = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v14 + 1);
            if (result == 10) {
              uint64_t v51 = a3 + v14 + 1;
            }
LABEL_69:
            BOOL v50 = __OFADD__(v13++, 1);
            if (v50) {
              goto LABEL_277;
            }
            a3 = v51 + 1;
LABEL_71:
            unint64_t v47 = v163;
            if (a3 < v11) {
              continue;
            }
            unint64_t v22 = 0;
LABEL_73:
            uint64_t v46 = v158;
            goto LABEL_79;
          }
          goto LABEL_281;
        }
      }
      unint64_t v22 = 0;
      uint64_t v13 = 1;
LABEL_79:
      uint64_t v58 = v168;
LABEL_218:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v126 = 0xD000000000000010;
      *(void *)(v126 + 8) = 0x80000001823ABAE0;
      *(void *)(v126 + 16) = v58;
      *(void *)(v126 + 24) = v13;
      *(void *)(v126 + 32) = v22;
      *(void *)(v126 + 40) = v46;
      *(unsigned char *)(v126 + 48) = 1;
      return swift_willThrow();
    }
    goto LABEL_272;
  }
  if (v20 == 120) {
    goto LABEL_12;
  }
  if (v20 == 101) {
    goto LABEL_45;
  }
  if (v20 != 88)
  {
LABEL_109:
    __int16 v70 = _asciiNumbers.getter();
    unint64_t v35 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v14 + v18, a3, v172);
    uint64_t v38 = v71;
    uint64_t v40 = v72;
    if (v20 >= v70 && HIBYTE(v70) >= v20)
    {
LABEL_111:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v56 = v35;
      *(void *)(v56 + 8) = v38;
      *(void *)(v56 + 16) = v40;
      *(void *)(v56 + 24) = 0;
      *(void *)(v56 + 32) = 0;
      *(void *)(v56 + 40) = 0;
      char v57 = 10;
      goto LABEL_246;
    }
    uint64_t v41 = v20;
    goto LABEL_232;
  }
LABEL_12:
  unint64_t v22 = v19 + 1;
  Swift::Bool result = specialized static Comparable.<= infix(_:_:)(v19 + 1, v14 + v13);
  if ((result & 1) == 0)
  {
    if (v13 - v18 >= 1)
    {
LABEL_173:
      unsigned __int8 v104 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v19);
      unint64_t v99 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v19, a3, v172);
      uint64_t v101 = v105;
      uint64_t v103 = v106;
      unint64_t v22 = v104;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_OWORD *)uint64_t v56 = xmmword_182112860;
LABEL_243:
      *(void *)(v56 + 16) = v22;
LABEL_244:
      *(void *)(v56 + 24) = v99;
      *(void *)(v56 + 32) = v101;
      *(void *)(v56 + 40) = v103;
      goto LABEL_245;
    }
    goto LABEL_290;
  }
LABEL_13:
  unsigned __int8 v23 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v22);
  char v24 = 1;
  if (UInt8.isValidHexDigit.getter(v23))
  {
    char v25 = 0;
    goto LABEL_75;
  }
  unint64_t v132 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v22, a3, v172);
  uint64_t v134 = v133;
  uint64_t v136 = v135;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(_OWORD *)uint64_t v137 = xmmword_182112860;
  *(void *)(v137 + 16) = v23;
  *(void *)(v137 + 24) = v132;
  *(void *)(v137 + 32) = v134;
  *(void *)(v137 + 40) = v136;
  *(unsigned char *)(v137 + 48) = 1;
  return swift_willThrow();
}

unint64_t specialized _parseInteger<A>(_:)(unsigned __int8 *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a1;
    int v3 = *a1;
    if (v3 == 43)
    {
      if (a2 >= 2)
      {
        unint64_t v13 = 0;
        unint64_t v14 = &a1[a2];
        uint64_t v15 = a1 + 1;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            break;
          }
          unint64_t result = 0;
          BOOL v17 = !is_mul_ok(v13, 0xAuLL);
          uint64_t v18 = 10 * v13;
          BOOL v11 = __CFADD__(v18, v16);
          unint64_t v13 = v18 + v16;
          char v19 = v11;
          if (!v17 && (v19 & 1) == 0)
          {
            ++v15;
            unint64_t result = v13;
            if (v15 < v14) {
              continue;
            }
          }
          return result;
        }
      }
    }
    else if (v3 == 45)
    {
      if (a2 >= 2)
      {
        unint64_t v4 = 0;
        uint64_t v5 = &a1[a2];
        uint64_t v6 = a1 + 1;
        while (1)
        {
          unsigned int v7 = *v6 - 48;
          if (v7 > 9) {
            break;
          }
          unint64_t result = 0;
          BOOL v9 = !is_mul_ok(v4, 0xAuLL);
          unint64_t v10 = 10 * v4;
          BOOL v11 = v10 >= v7;
          unint64_t v4 = v10 - v7;
          char v12 = !v11;
          if (!v9 && (v12 & 1) == 0)
          {
            ++v6;
            unint64_t result = v4;
            if (v6 < v5) {
              continue;
            }
          }
          return result;
        }
      }
    }
    else
    {
      if (a2 < 1) {
        return 0;
      }
      unint64_t v20 = 0;
      char v21 = &a1[a2];
      while (1)
      {
        unsigned int v22 = *v2 - 48;
        if (v22 > 9) {
          break;
        }
        unint64_t result = 0;
        BOOL v23 = !is_mul_ok(v20, 0xAuLL);
        uint64_t v24 = 10 * v20;
        BOOL v11 = __CFADD__(v24, v22);
        unint64_t v20 = v24 + v22;
        char v25 = v11;
        if (!v23 && (v25 & 1) == 0)
        {
          ++v2;
          unint64_t result = v20;
          if (v2 < v21) {
            continue;
          }
        }
        return result;
      }
    }
  }
  return 0;
}

{
  int v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  char v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  char v23;

  if (a2)
  {
    uint64_t v2 = *a1;
    if (v2 == 43)
    {
      if (a2 >= 2)
      {
        char v12 = 0;
        unint64_t v13 = a1 + 1;
        while (1)
        {
          unint64_t v14 = *v13 - 48;
          if (v14 > 9) {
            break;
          }
          uint64_t v6 = 0;
          uint64_t v15 = 10 * v12;
          unsigned int v16 = (v15 & 0xFFFFFFFF00000000) != 0;
          BOOL v9 = __CFADD__(v15, v14);
          char v12 = v15 + v14;
          BOOL v17 = v9;
          BOOL v11 = 1;
          if (!v16 && (v17 & 1) == 0)
          {
            BOOL v11 = 0;
            ++v13;
            uint64_t v6 = v12;
            if (v13 < &a1[a2]) {
              continue;
            }
          }
          return v6 | ((unint64_t)v11 << 32);
        }
      }
    }
    else if (v2 == 45)
    {
      if (a2 >= 2)
      {
        int v3 = 0;
        unint64_t v4 = a1 + 1;
        while (1)
        {
          uint64_t v5 = *v4 - 48;
          if (v5 > 9) {
            break;
          }
          uint64_t v6 = 0;
          unsigned int v7 = 10 * v3;
          uint64_t v8 = (v7 & 0xFFFFFFFF00000000) != 0;
          BOOL v9 = v7 >= v5;
          int v3 = v7 - v5;
          unint64_t v10 = !v9;
          BOOL v11 = 1;
          if (!v8 && (v10 & 1) == 0)
          {
            BOOL v11 = 0;
            ++v4;
            uint64_t v6 = v3;
            if (v4 < &a1[a2]) {
              continue;
            }
          }
          return v6 | ((unint64_t)v11 << 32);
        }
      }
    }
    else
    {
      if (a2 < 1)
      {
        uint64_t v6 = 0;
        BOOL v11 = 0;
        return v6 | ((unint64_t)v11 << 32);
      }
      uint64_t v18 = 0;
      char v19 = &a1[a2];
      while (1)
      {
        unint64_t v20 = *a1 - 48;
        if (v20 > 9) {
          break;
        }
        uint64_t v6 = 0;
        char v21 = 10 * v18;
        unsigned int v22 = (v21 & 0xFFFFFFFF00000000) != 0;
        BOOL v9 = __CFADD__(v21, v20);
        uint64_t v18 = v21 + v20;
        BOOL v23 = v9;
        BOOL v11 = 1;
        if (!v22 && (v23 & 1) == 0)
        {
          BOOL v11 = 0;
          ++a1;
          uint64_t v6 = v18;
          if (a1 < v19) {
            continue;
          }
        }
        return v6 | ((unint64_t)v11 << 32);
      }
    }
  }
  uint64_t v6 = 0;
  BOOL v11 = 1;
  return v6 | ((unint64_t)v11 << 32);
}

{
  int v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  char v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  char v23;

  if (a2)
  {
    uint64_t v2 = *a1;
    if (v2 == 43)
    {
      if (a2 >= 2)
      {
        char v12 = 0;
        unint64_t v13 = a1 + 1;
        while (1)
        {
          unint64_t v14 = *v13 - 48;
          if (v14 > 9) {
            break;
          }
          uint64_t v6 = 0;
          uint64_t v15 = 10 * (int)v12;
          unsigned int v16 = v15 != (int)v15;
          BOOL v9 = __OFADD__(v15, v14);
          char v12 = v15 + v14;
          BOOL v17 = v9;
          BOOL v11 = 1;
          if (!v16 && (v17 & 1) == 0)
          {
            BOOL v11 = 0;
            ++v13;
            uint64_t v6 = v12;
            if (v13 < &a1[a2]) {
              continue;
            }
          }
          return v6 | ((unint64_t)v11 << 32);
        }
      }
    }
    else if (v2 == 45)
    {
      if (a2 >= 2)
      {
        int v3 = 0;
        unint64_t v4 = a1 + 1;
        while (1)
        {
          uint64_t v5 = *v4 - 48;
          if (v5 > 9) {
            break;
          }
          uint64_t v6 = 0;
          unsigned int v7 = 10 * (int)v3;
          uint64_t v8 = v7 != (int)v7;
          BOOL v9 = __OFSUB__(v7, v5);
          int v3 = v7 - v5;
          unint64_t v10 = v9;
          BOOL v11 = 1;
          if (!v8 && (v10 & 1) == 0)
          {
            BOOL v11 = 0;
            ++v4;
            uint64_t v6 = v3;
            if (v4 < &a1[a2]) {
              continue;
            }
          }
          return v6 | ((unint64_t)v11 << 32);
        }
      }
    }
    else
    {
      if (a2 < 1)
      {
        uint64_t v6 = 0;
        BOOL v11 = 0;
        return v6 | ((unint64_t)v11 << 32);
      }
      uint64_t v18 = 0;
      char v19 = &a1[a2];
      while (1)
      {
        unint64_t v20 = *a1 - 48;
        if (v20 > 9) {
          break;
        }
        uint64_t v6 = 0;
        char v21 = 10 * (int)v18;
        unsigned int v22 = v21 != (int)v21;
        BOOL v9 = __OFADD__(v21, v20);
        uint64_t v18 = v21 + v20;
        BOOL v23 = v9;
        BOOL v11 = 1;
        if (!v22 && (v23 & 1) == 0)
        {
          BOOL v11 = 0;
          ++a1;
          uint64_t v6 = v18;
          if (a1 < v19) {
            continue;
          }
        }
        return v6 | ((unint64_t)v11 << 32);
      }
    }
  }
  uint64_t v6 = 0;
  BOOL v11 = 1;
  return v6 | ((unint64_t)v11 << 32);
}

Protocol *__setProtocolMetadata_block_invoke()
{
  unint64_t result = objc_getProtocol("NSObject");
  qword_1EB1EDF28 = (uint64_t)result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Equal<A, B>(void *a1)
{
  return PredicateExpressions.Equal<>.encode(to:)(a1);
}

Swift::Bool __swiftcall _NSSwiftCalendar.isDate(_:inSameDayAs:)(Foundation::Date _, Foundation::Date inSameDayAs)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____NSSwiftCalendar__lock);
  uint64_t v6 = v5 + 4;
  unsigned int v7 = v5 + 8;
  os_unfair_lock_lock(v5 + 8);
  closure #1 in _NSSwiftCalendar.calendar.getter(v6, &v13);
  os_unfair_lock_unlock(v7);
  long long v12 = v13;
  uint64_t v11 = v4;
  NSComparisonResult v9 = Calendar.compare(_:to:toGranularity:)((Foundation::Date)v13, v8, (Foundation::Calendar::Component)&v11);
  swift_unknownObjectRelease();
  return v9 == NSOrderedSame;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.KeyPath<A, B>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t closure #1 in NSNotificationCenter.Notifications.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = closure #1 in NSNotificationCenter.Notifications.Iterator.next();
  v5[35] = a1;
  v5[36] = a2;
  return MEMORY[0x1F4188298](NSNotificationCenter.Notifications.next(), 0, 0);
}

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  unint64_t result = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int8 and conformance Int8()
{
  unint64_t result = lazy protocol witness table cache variable for type Int8 and conformance Int8;
  if (!lazy protocol witness table cache variable for type Int8 and conformance Int8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int8 and conformance Int8);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int8 and conformance Int8;
  if (!lazy protocol witness table cache variable for type Int8 and conformance Int8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int8 and conformance Int8);
  }
  return result;
}

uint64_t Array<A>.nonPrettyJSONRepresentation(options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = a4;
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  double v8 = MEMORY[0x1F4188790](a1);
  NSComparisonResult v9 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)v10;
  uint64_t v39 = *(void **)(v10 + 8);
  uint64_t v40 = v11;
  uint64_t v38 = *(void *)(v10 + 16);
  int v37 = *(unsigned __int8 *)(v10 + 24);
  uint64_t v36 = *(void *)(v10 + 32);
  uint64_t v35 = *(void *)(v10 + 40);
  uint64_t v34 = *(void *)(v10 + 48);
  uint64_t v33 = *(void *)(v10 + 56);
  uint64_t v32 = *(void *)(v10 + 64);
  uint64_t v31 = *(void *)(v10 + 72);
  uint64_t v30 = *(void *)(v10 + 80);
  uint64_t v29 = *(void *)(v10 + 88);
  uint64_t v28 = *(void *)(v10 + 96);
  uint64_t v27 = *(void *)(v10 + 104);
  uint64_t v26 = *(void *)(v10 + 112);
  uint64_t v56 = 91;
  unint64_t v57 = 0xE100000000000000;
  uint64_t result = MEMORY[0x185302610](v12, v13, v8);
  if (result + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x185301FA0]((2 * result) | 1);
    uint64_t v15 = swift_bridgeObjectRetain();
    uint64_t result = MEMORY[0x185302620](v15, a3);
    if (!result)
    {
LABEL_12:
      swift_bridgeObjectRelease();
      v21._uint64_t countAndFlagsBits = 93;
      v21._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      return v56;
    }
    uint64_t v16 = result;
    if (result >= 1)
    {
      uint64_t v22 = v7;
      uint64_t v17 = 0;
      char v25 = *(uint64_t (**)(Swift::String *, uint64_t, uint64_t))(v41 + 16);
      unint64_t v23 = a2 & 0xC000000000000001;
      uint64_t v24 = (void (**)(char *, Swift::String *, uint64_t))(v6 + 16);
      do
      {
        if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && v23)
        {
          uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
          if (v22 != 8) {
            goto LABEL_15;
          }
          uint64_t v18 = a2;
          v42._uint64_t countAndFlagsBits = result;
          (*v24)(v9, &v42, a3);
          swift_unknownObjectRelease();
        }
        else
        {
          uint64_t v18 = a2;
          (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, a2+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v17, a3);
        }
        ++v17;
        v42._uint64_t countAndFlagsBits = v40;
        v42._unint64_t object = v39;
        uint64_t v43 = v38;
        char v44 = v37;
        uint64_t v45 = v36;
        uint64_t v46 = v35;
        uint64_t v47 = v34;
        uint64_t v48 = v33;
        uint64_t v49 = v32;
        uint64_t v50 = v31;
        uint64_t v51 = v30;
        uint64_t v52 = v29;
        uint64_t v53 = v28;
        uint64_t v54 = v27;
        uint64_t v55 = v26;
        v42._uint64_t countAndFlagsBits = v25(&v42, a3, v41);
        v42._unint64_t object = v19;
        swift_bridgeObjectRetain();
        v20._uint64_t countAndFlagsBits = 44;
        v20._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        String.append(_:)(v42);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a3);
        a2 = v18;
      }
      while (v16 != v17);
      swift_bridgeObjectRelease();
      specialized RangeReplaceableCollection<>.popLast()();
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

Swift::String __swiftcall String.serializedForJSON(withoutEscapingSlashes:)(Swift::Bool withoutEscapingSlashes)
{
  unint64_t v6 = v2;
  uint64_t v7 = v1;
  if ((v2 & 0x1000000000000000) != 0)
  {
    Swift::Int v39 = String.UTF8View._foreignCount()();
    uint64_t v10 = v39 + 2;
    if (!__OFADD__(v39, 2)) {
      goto LABEL_6;
    }
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if ((v2 & 0x2000000000000000) != 0) {
    uint64_t v9 = HIBYTE(v2) & 0xF;
  }
  else {
    uint64_t v9 = v1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v9 + 2;
  if (__OFADD__(v9, 2)) {
    goto LABEL_83;
  }
LABEL_6:
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10 & ~(v10 >> 63), 0, MEMORY[0x1E4FBC860]);
  unint64_t v5 = *((void *)v3 + 2);
  uint64_t v10 = *((void *)v3 + 3);
  int64_t v4 = v5 + 1;
  if (v5 >= (unint64_t)v10 >> 1) {
LABEL_84:
  }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)((unint64_t)v10 > 1), v4, 1, v3);
  *((void *)v3 + 2) = v4;
  v3[v5 + 32] = 34;
  uint64_t v45 = v3;
  swift_bridgeObjectRetain();
  if ((v6 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = static String._copying(_:)();
    unint64_t v12 = v11;
    swift_bridgeObjectRelease();
    unint64_t v6 = v12;
  }
  if ((v6 & 0x2000000000000000) == 0)
  {
    if ((v7 & 0x1000000000000000) != 0)
    {
      uint64_t v13 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = v7 & 0xFFFFFFFFFFFFLL;
      if ((v7 & 0xFFFFFFFFFFFFLL) == 0) {
        goto LABEL_76;
      }
    }
    else
    {
      uint64_t v38 = _StringObject.sharedUTF8.getter();
      if (!v38)
      {
        __break(1u);
        goto LABEL_89;
      }
      uint64_t v13 = (char *)v38;
      if (v14 < 1) {
        goto LABEL_76;
      }
    }
    uint64_t v15 = &v13[v14];
    uint64_t v16 = v13;
    while (1)
    {
      unsigned int v17 = *v13;
      unint64_t v18 = 0xE200000000000000;
      Swift::Int v19 = 8796;
      switch(*v13)
      {
        case 8:
          Swift::Int v19 = 25180;
          if (v16 < v13) {
            goto LABEL_36;
          }
          goto LABEL_37;
        case 9:
          Swift::Int v19 = 29788;
          if (v16 >= v13) {
            goto LABEL_37;
          }
          goto LABEL_36;
        case 10:
          Swift::Int v19 = 28252;
          if (v16 >= v13) {
            goto LABEL_37;
          }
          goto LABEL_36;
        case 11:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
          goto LABEL_19;
        case 12:
          Swift::Int v19 = 26204;
          if (v16 >= v13) {
            goto LABEL_37;
          }
          goto LABEL_36;
        case 13:
          Swift::Int v19 = 29276;
          if (v16 >= v13) {
            goto LABEL_37;
          }
          goto LABEL_36;
        case 34:
          goto LABEL_35;
        case 47:
          if (withoutEscapingSlashes) {
            goto LABEL_23;
          }
          Swift::Int v19 = 12124;
          if (v16 >= v13) {
            goto LABEL_37;
          }
          goto LABEL_36;
        default:
          if (v17 == 92)
          {
            unint64_t v18 = 0xE200000000000000;
            Swift::Int v19 = 23644;
            if (v16 >= v13) {
              goto LABEL_37;
            }
            goto LABEL_36;
          }
LABEL_19:
          if (v17 < 0x10)
          {
            uint64_t v43 = 0x303030755CLL;
            uint64_t v44 = 0xE500000000000000;
            goto LABEL_34;
          }
          if (v17 > 0x1F)
          {
LABEL_23:
            if (++v13 >= v15) {
              goto LABEL_73;
            }
          }
          else
          {
            uint64_t v43 = 808482140;
            uint64_t v44 = 0xE400000000000000;
LABEL_34:
            lazy protocol witness table accessor for type UInt8 and conformance UInt8();
            v20._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            Swift::Int v19 = v43;
            unint64_t v18 = v44;
LABEL_35:
            if (v16 >= v13) {
              goto LABEL_37;
            }
LABEL_36:
            specialized Array.append<A>(contentsOf:)(v16, (char *)(v13 - v16));
LABEL_37:
            specialized Array.append<A>(contentsOf:)(v19, v18);
            uint64_t v16 = ++v13;
            if (v13 >= v15)
            {
LABEL_73:
              if (v16 < v13)
              {
                uint64_t v29 = (char *)(v13 - v16);
                uint64_t v30 = v16;
LABEL_75:
                specialized Array.append<A>(contentsOf:)(v30, v29);
              }
              goto LABEL_76;
            }
          }
          break;
      }
    }
  }
  uint64_t v21 = HIBYTE(v6) & 0xF;
  uint64_t v43 = v7;
  uint64_t v44 = v6 & 0xFFFFFFFFFFFFFFLL;
  if (!v21) {
    goto LABEL_76;
  }
  uint64_t v22 = (uint64_t *)((char *)&v43 + v21);
  unint64_t v23 = &v43;
  uint64_t v24 = (char *)&v43;
  while (2)
  {
    unsigned int v25 = *(unsigned __int8 *)v23;
    unint64_t v26 = 0xE200000000000000;
    Swift::Int v27 = 8796;
    switch(*(unsigned char *)v23)
    {
      case 8:
        Swift::Int v27 = 25180;
        if (v24 < (char *)v23) {
          goto LABEL_66;
        }
        goto LABEL_67;
      case 9:
        Swift::Int v27 = 29788;
        if (v24 >= (char *)v23) {
          goto LABEL_67;
        }
        goto LABEL_66;
      case 0xA:
        Swift::Int v27 = 28252;
        if (v24 >= (char *)v23) {
          goto LABEL_67;
        }
        goto LABEL_66;
      case 0xB:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
        goto LABEL_49;
      case 0xC:
        Swift::Int v27 = 26204;
        if (v24 >= (char *)v23) {
          goto LABEL_67;
        }
        goto LABEL_66;
      case 0xD:
        Swift::Int v27 = 29276;
        if (v24 >= (char *)v23) {
          goto LABEL_67;
        }
        goto LABEL_66;
      case 0x22:
        goto LABEL_65;
      case 0x2F:
        if (withoutEscapingSlashes) {
          goto LABEL_53;
        }
        Swift::Int v27 = 12124;
        if (v24 >= (char *)v23) {
          goto LABEL_67;
        }
        goto LABEL_66;
      default:
        if (v25 == 92)
        {
          unint64_t v26 = 0xE200000000000000;
          Swift::Int v27 = 23644;
          if (v24 < (char *)v23) {
            goto LABEL_66;
          }
          goto LABEL_67;
        }
LABEL_49:
        if (v25 < 0x10)
        {
          uint64_t v41 = 0x303030755CLL;
          unint64_t v42 = 0xE500000000000000;
          goto LABEL_64;
        }
        if (v25 > 0x1F)
        {
LABEL_53:
          unint64_t v23 = (uint64_t *)((char *)v23 + 1);
          if (v23 >= v22) {
            goto LABEL_71;
          }
          continue;
        }
        uint64_t v41 = 808482140;
        unint64_t v42 = 0xE400000000000000;
LABEL_64:
        lazy protocol witness table accessor for type UInt8 and conformance UInt8();
        v28._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        Swift::Int v27 = v41;
        unint64_t v26 = v42;
LABEL_65:
        if (v24 < (char *)v23) {
LABEL_66:
        }
          specialized Array.append<A>(contentsOf:)(v24, (char *)((char *)v23 - v24));
LABEL_67:
        specialized Array.append<A>(contentsOf:)(v27, v26);
        unint64_t v23 = (uint64_t *)((char *)v23 + 1);
        uint64_t v24 = (char *)v23;
        if (v23 < v22) {
          continue;
        }
LABEL_71:
        if (v24 < (char *)v23)
        {
          uint64_t v29 = (char *)((char *)v23 - v24);
          uint64_t v30 = v24;
          goto LABEL_75;
        }
LABEL_76:
        uint64_t v31 = (uint64_t)v45;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v31 + 16) + 1, 1, (char *)v31);
          uint64_t v31 = isUniquelyReferenced_nonNull_native;
        }
        unint64_t v34 = *(void *)(v31 + 16);
        unint64_t v33 = *(void *)(v31 + 24);
        if (v34 >= v33 >> 1)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, (char *)v31);
          uint64_t v31 = isUniquelyReferenced_nonNull_native;
        }
        *(void *)(v31 + 16) = v34 + 1;
        *(unsigned char *)(v31 + v34 + 32) = 34;
        uint64_t v45 = (char *)v31;
        MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native);
        uint64_t v35 = String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
        uint64_t v37 = v36;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v38 = v35;
        uint64_t v14 = v37;
LABEL_89:
        result._unint64_t object = (void *)v14;
        result._uint64_t countAndFlagsBits = v38;
        return result;
    }
  }
}

char *specialized Array.append<A>(contentsOf:)(char *result, char *a2)
{
  uint64_t v3 = *v2;
  int64_t v4 = *((void *)*v2 + 2);
  int64_t v5 = (int64_t)&a2[v4];
  if (__OFADD__(v4, a2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    if (result) {
      BOOL v18 = result == a2;
    }
    else {
      BOOL v18 = 1;
    }
    if (v18) {
      goto LABEL_13;
    }
    int64_t v19 = *((void *)v3 + 2);
    char v20 = *result++;
    LOBYTE(v12) = v20;
    int64_t v6 = 16;
    while (1)
    {
      unint64_t v21 = *((void *)v3 + 3);
      int64_t v14 = v21 >> 1;
      int64_t v22 = v19 + 1;
      if ((uint64_t)(v21 >> 1) < v19 + 1)
      {
        unint64_t v34 = result;
        uint64_t v32 = a2;
        unint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v19 + 1, 1, v3);
        int64_t v22 = v19 + 1;
        a2 = v32;
        uint64_t v3 = v33;
        Swift::String result = v34;
        int64_t v14 = *((void *)v3 + 3) >> 1;
        if (v19 >= v14) {
          goto LABEL_23;
        }
      }
      else if (v19 >= v14)
      {
        goto LABEL_23;
      }
      v3[v19 + 32] = v12;
      if (result == a2)
      {
LABEL_41:
        *((void *)v3 + 2) = v22;
        goto LABEL_13;
      }
      unint64_t v23 = (char *)(v14 + ~v19);
      if (v23 >= &a2[~(unint64_t)result]) {
        unint64_t v23 = &a2[~(unint64_t)result];
      }
      uint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) > 0x10 && (unint64_t)(&v3[v19] - result + 33) >= 0x10)
      {
        unsigned int v25 = (long long *)result;
        int64_t v26 = v24 & 0xF;
        if ((v24 & 0xF) == 0) {
          int64_t v26 = v6;
        }
        Swift::Int v27 = &v24[-v26];
        v22 += (int64_t)v27;
        Swift::String result = &v27[(void)result];
        Swift::String v28 = &v3[v19 + 33];
        do
        {
          long long v29 = *v25++;
          *(_OWORD *)Swift::String v28 = v29;
          v28 += 16;
          v27 -= 16;
        }
        while (v27);
      }
      uint64_t v30 = result++;
      while (1)
      {
        char v31 = *v30++;
        LOBYTE(v12) = v31;
        if (v14 == v22) {
          break;
        }
        v3[v22++ + 32] = v12;
        ++result;
        if (v30 == a2) {
          goto LABEL_41;
        }
      }
LABEL_22:
      int64_t v19 = v14;
LABEL_23:
      *((void *)v3 + 2) = v19;
    }
  }
  int64_t v6 = (int64_t)a2;
  uint64_t v7 = result;
  uint64_t isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v9 = *((void *)v3 + 3) >> 1, v9 < v5))
  {
    if (v4 <= v5) {
      int64_t v10 = v5;
    }
    else {
      int64_t v10 = v4;
    }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v10, 1, v3);
    int64_t v9 = *((void *)v3 + 3) >> 1;
  }
  uint64_t v11 = *((void *)v3 + 2);
  uint64_t v12 = v9 - v11;
  Swift::String result = specialized UnsafeBufferPointer._copyContents(initializing:)(&v3[v11 + 32], v9 - v11, v7, v6);
  if (v13 < v6) {
    goto LABEL_15;
  }
  if (v13 >= 1)
  {
    uint64_t v15 = *((void *)v3 + 2);
    BOOL v16 = __OFADD__(v15, v13);
    uint64_t v17 = v15 + v13;
    if (v16)
    {
      __break(1u);
      goto LABEL_22;
    }
    *((void *)v3 + 2) = v17;
  }
  if (v13 == v12) {
    goto LABEL_16;
  }
LABEL_13:
  *unint64_t v2 = v3;
  return result;
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance String(void *a1)
{
  return String.serializedForJSON(withoutEscapingSlashes:)((*a1 & 8) != 0)._countAndFlagsBits;
}

char *specialized UnsafeBufferPointer._copyContents(initializing:)(char *a1, int64_t a2, char *__src, int64_t a4)
{
  int64_t v4 = __src;
  if (!a4 || !a2) {
    return v4;
  }
  if (a4 >= a2) {
    size_t v5 = a2;
  }
  else {
    size_t v5 = a4;
  }
  if ((v5 & 0x8000000000000000) == 0 && (&a1[v5] <= __src || &__src[v5] <= a1))
  {
    memcpy(a1, __src, v5);
    v4 += v5;
    return v4;
  }
  Swift::String result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void protocol witness for static PlistDecodingFormat.unwrapFixedWidthInteger<A, B>(from:in:for:_:) in conformance _XMLPlistDecodingFormat(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
}

void static _XMLPlistDecodingFormat.unwrapFixedWidthInteger<A, B>(from:in:for:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v68 = a8;
  uint64_t v69 = a4;
  uint64_t v63 = a9;
  uint64_t v64 = a7;
  unint64_t v70 = a3;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v62 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = v12;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  BOOL v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  int64_t v19 = (char *)&v61 - v18;
  uint64_t v20 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v20);
  int64_t v22 = (char *)&v61 - v21;
  uint64_t v67 = a5;
  uint64_t v23 = *(void *)(a5 - 8);
  double v28 = MEMORY[0x1F4188790](v24);
  uint64_t v30 = (char *)&v61 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v26 >> 60 == 7)
  {
    MEMORY[0x1F4188790](v25);
    uint64_t v42 = v71;
    *(&v61 - 8) = v67;
    *(&v61 - 7) = v42;
    uint64_t v43 = v68;
    *(&v61 - 6) = v64;
    *(&v61 - 5) = v43;
    unint64_t v44 = v70;
    *(&v61 - 4) = v45;
    *(&v61 - 3) = v44;
    *(&v61 - 2) = v69;
    uint64_t v46 = *(void *)(v65 + 24);
    *(double *)&long long v48 = MEMORY[0x1F4188790](v47);
    *(&v61 - 6) = v49;
    *(&v61 - 5) = (uint64_t)partial apply for closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:);
    *(&v61 - 4) = v50;
    *(_OWORD *)(&v61 - 3) = v48;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v46 + 40));
    _s10Foundation11XMLPlistMapC10withBuffer3for7performxAC6RegionV_xAA0E4ViewVys5UInt8VG_AMtYbKXEtKlFxAM6buffer_SVSg10allocationtz_tYbKXEfU_TA_0((void *)(v46 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v46 + 40));
    swift_release();
    return;
  }
  if (v26 >> 60 == 6)
  {
    uint64_t v31 = v27;
    uint64_t v32 = v66;
    double v33 = specialized XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(v65, v70, v69, v26, v71, v68);
    if (v32) {
      return;
    }
    double v72 = v33;
    lazy protocol witness table accessor for type Double and conformance Double();
    uint64_t v34 = v67;
    dispatch thunk of BinaryInteger.init<A>(exactly:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, v34) != 1)
    {
      unint64_t v60 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
      v60(v30, v22, v34);
      v60(v63, v30, v34);
      return;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v22, v20);
    double v72 = 0.0;
    unint64_t v73 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v35._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v35._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v35);
    Double.write<A>(to:)();
    v36._unint64_t object = (void *)0x80000001823B1A20;
    v36._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v36);
    v37._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 46;
    v38._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    uint64_t v40 = *(void *)&v72;
    uint64_t v39 = v73;
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)(v40, v39, v70, v69, v71, v68, v41);
  }
  else
  {
    unint64_t v66 = v26;
    uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16);
    v51(v19, v69, v13, v28);
    ((void (*)(char *, char *, uint64_t))v51)(v16, v19, v13);
    uint64_t v52 = v62;
    uint64_t v53 = v71;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v16, 1, v71) == 1)
    {
      uint64_t v54 = *(void (**)(char *, uint64_t))(v14 + 8);
      v54(v16, v13);
      _CodingPathNode.path.getter(v70);
      v54(v19, v13);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v11, v16, v53);
      uint64_t v55 = _CodingPathNode.path.getter(v70);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v57 = v68;
      *(void *)(inited + 56) = v53;
      *(void *)(inited + 64) = v57;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v52 + 16))(boxed_opaque_existential_1, v11, v53);
      double v72 = *(double *)&v55;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v11, v53);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(v67, v66, v59);
  }
  swift_bridgeObjectRelease();
  swift_willThrow();
}

void *partial apply for closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(void *result)
{
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v4 = result[1];
  BOOL v5 = v4 < v2 + v3 || v4 < v2;
  if (!v5 && ((v2 | v3) & 0x8000000000000000) == 0 && v4 > v3) {
    return (void *)(*(uint64_t (**)(uint64_t))(v1 + 24))(*result + v3);
  }
  __break(1u);
  return result;
}

void *_s10Foundation11XMLPlistMapC10withBuffer3for7performxAC6RegionV_xAA0E4ViewVys5UInt8VG_AMtYbKXEtKlFxAM6buffer_SVSg10allocationtz_tYbKXEfU_TA_0(void *a1)
{
  return closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

void *closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(void *result, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = result[1];
  BOOL v7 = v6 < a5 + a4 || v6 < a5;
  if (!v7 && ((a5 | a4) & 0x8000000000000000) == 0 && v6 > a4) {
    return (void *)a2(*result + a4, a5);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(a1, a2, a3, a4, *(void *)(v5 + 56), *(void *)(v5 + 64), *(void *)(v5 + 16), a5, *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40));
}

uint64_t closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v44 = a5;
  uint64_t v45 = a6;
  uint64_t v41 = a8;
  uint64_t v42 = a11;
  uint64_t v43 = a9;
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  int64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = a1 + a2;
  *(void *)&long long v48 = a3;
  *((void *)&v48 + 1) = a4;
  *(void *)&long long v49 = a1;
  *((void *)&v49 + 1) = a1;
  uint64_t v50 = v20;
  specialized XMLPlistMap.Value._skipIntegerWhitespace(_:)(&v48);
  if (v20 == *((void *)&v49 + 1))
  {
    unint64_t v46 = 0;
    unint64_t v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    unint64_t v46 = 0xD000000000000024;
    unint64_t v47 = 0x80000001823AA7B0;
    uint64_t v51 = a3;
    uint64_t v52 = a4;
    uint64_t v53 = a1;
    uint64_t v54 = v20;
    uint64_t v55 = v20;
    uint64_t v59 = BufferReader.lineNumber.getter();
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    unint64_t v37 = v46;
    unint64_t v36 = v47;
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v38;
    uint64_t v30 = v37;
    uint64_t v31 = v36;
    unint64_t v32 = v44;
    uint64_t v33 = v45;
    uint64_t v34 = v43;
    goto LABEL_5;
  }
  uint64_t v22 = v43;
  unint64_t v21 = v44;
  uint64_t v23 = v45;
  XMLPlistMap.Value._parseXMLPlistInteger<A>(_:)((unint64_t)&v48, a7, a10, (uint64_t)v19);
  uint64_t v24 = *(void *)(a7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v19, 1, a7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    unint64_t v46 = 0;
    unint64_t v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    unint64_t v46 = 0xD000000000000020;
    unint64_t v47 = 0x80000001823AA780;
    long long v56 = v48;
    long long v57 = v49;
    uint64_t v58 = v50;
    uint64_t v59 = BufferReader.lineNumber.getter();
    v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    unint64_t v27 = v46;
    unint64_t v26 = v47;
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v28;
    uint64_t v30 = v27;
    uint64_t v31 = v26;
    unint64_t v32 = v21;
    uint64_t v33 = v23;
    uint64_t v34 = v22;
LABEL_5:
    static DecodingError._dataCorrupted<A>(_:for:_:)(v30, v31, v32, v33, v34, v42, v29);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v41, v19, a7);
}

uint64_t _parseIntegerDigits<A>(_:isNegative:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v55 = a3;
  long long v57 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2 - 8);
  uint64_t v54 = (char *)&v46 - v11;
  uint64_t v53 = *(void *)(a5 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  MEMORY[0x1F4188790](v17);
  int64_t v19 = (char *)&v46 - v18;
  v23.n128_f64[0] = MEMORY[0x1F4188790](v20);
  Swift::String v25 = (char *)&v46 - v24;
  if (a2)
  {
    uint64_t v51 = v22;
    uint64_t v52 = a5;
    uint64_t v56 = a6;
    uint64_t v58 = v21;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    uint64_t v26 = v58;
    unint64_t v27 = v58 + 8;
    if (a2 <= 0)
    {
      Swift::String v35 = *(void (**)(char *, uint64_t, uint64_t))v27;
LABEL_13:
      v35(v25, a4, v26);
      uint64_t v43 = v56;
      (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v56, v19, a4);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v43, 0, 1, a4);
    }
    else
    {
      uint64_t v28 = v57;
      unint64_t v29 = (unint64_t)&v57[a2];
      uint64_t v30 = (void (**)(void, void, void))(v58 + 32);
      uint64_t v31 = v27 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      while (1)
      {
        unsigned int v32 = *v28 - 48;
        if (v32 >= 0xA)
        {
          uint64_t v42 = *(void (**)(char *, uint64_t))(v26 + 8);
          v42(v19, a4);
          v42(v25, a4);
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v56, 1, 1, a4);
        }
        uint64_t v47 = v31;
        unint64_t v48 = v29;
        long long v57 = v28;
        char v59 = v32;
        lazy protocol witness table accessor for type UInt8 and conformance UInt8();
        uint64_t v33 = v15;
        uint64_t v34 = v51;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        int v49 = dispatch thunk of FixedWidthInteger.multipliedReportingOverflow(by:)();
        Swift::String v35 = *(void (**)(char *, uint64_t, uint64_t))v27;
        (*(void (**)(char *, uint64_t))v27)(v19, a4);
        unint64_t v36 = v30;
        unint64_t v37 = (void (*)(char *, char *, uint64_t))*v30;
        uint64_t v50 = v36;
        v37(v19, v33, a4);
        int v38 = (v55 & 1) != 0
            ? dispatch thunk of FixedWidthInteger.subtractingReportingOverflow(_:)()
            : dispatch thunk of FixedWidthInteger.addingReportingOverflow(_:)();
        int v39 = v38;
        ((void (*)(char *, uint64_t))v35)(v34, a4);
        ((void (*)(char *, uint64_t))v35)(v19, a4);
        uint64_t v40 = v54;
        uint64_t v41 = v50;
        v37(v54, v33, a4);
        v37(v19, v40, a4);
        if ((v49 | v39)) {
          break;
        }
        uint64_t v30 = v41;
        uint64_t v15 = v33;
        uint64_t v26 = v58;
        uint64_t v28 = v57 + 1;
        uint64_t v31 = v47;
        unint64_t v29 = v48;
        if ((unint64_t)(v57 + 1) >= v48) {
          goto LABEL_13;
        }
      }
      ((void (*)(char *, uint64_t))v35)(v19, a4);
      ((void (*)(char *, uint64_t))v35)(v25, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v56, 1, 1, a4);
    }
  }
  else
  {
    uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v21 + 56);
    return v45(a6, 1, 1, a4, v23);
  }
}

unint64_t lazy protocol witness table accessor for type UInt8 and conformance UInt8()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
  }
  return result;
}

unint64_t specialized XMLPlistMap.Value._skipIntegerWhitespace(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Unicode.Scalar.Properties();
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t result = a1[3];
  unint64_t v7 = a1[4];
  if (v7 >= result + 1)
  {
    double v8 = (uint64_t (**)(char *, uint64_t))(v3 + 8);
    while (v7 >= result)
    {
      if ((uint64_t)(result - *a1) < 0) {
        goto LABEL_16;
      }
      if ((uint64_t)(v7 - result) < 0) {
        goto LABEL_17;
      }
      if ((uint64_t)(*a1 + a1[1] - v7) < 0) {
        goto LABEL_18;
      }
      unsigned int v9 = *(unsigned __int8 *)result;
      if (v9 < 0x21 || v9 - 127 <= 0x21)
      {
        ++result;
      }
      else
      {
        unint64_t result = BufferView<A>._decodeScalar()((unsigned __int8 *)result, v7 - result);
        if ((result & 0x100000000) != 0) {
          return result;
        }
        uint64_t v11 = v10;
        Unicode.Scalar.properties.getter();
        char v12 = Unicode.Scalar.Properties.isWhitespace.getter();
        unint64_t result = (*v8)(v5, v2);
        if ((v12 & 1) == 0) {
          return result;
        }
        unint64_t v7 = a1[4];
        unint64_t result = a1[3] + v11;
      }
      a1[3] = result;
      if (v7 < result + 1) {
        return result;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  return result;
}

unint64_t XMLPlistMap.Value._parseXMLPlistInteger<A>(_:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(unsigned __int8 **)(result + 24);
  unint64_t v7 = *(void *)(result + 32);
  if ((unsigned __int8 *)v7 == v6)
  {
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);
    return v18(a4, 1, 1, a2);
  }
  unint64_t v9 = result;
  uint64_t v10 = *(void *)result;
  uint64_t v11 = *(void *)(result + 8);
  char v12 = v6 + 1;
  if (v7 < (unint64_t)(v6 + 1)) {
    goto LABEL_9;
  }
  if ((uint64_t)&v6[-v10] < 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (((v7 - (void)v6) & 0x8000000000000000) != 0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((uint64_t)(v10 + v11 - v7) < 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  int v13 = *v6;
  if (v13 == 45)
  {
    int v14 = 1;
    goto LABEL_11;
  }
  if (v13 != 43)
  {
LABEL_9:
    int v14 = 0;
    goto LABEL_12;
  }
  int v14 = 0;
LABEL_11:
  *(void *)(result + 24) = v12;
  specialized XMLPlistMap.Value._skipIntegerWhitespace(_:)((void *)result);
LABEL_12:
  unint64_t result = *(void *)(v9 + 24);
  if (v7 < result)
  {
    __break(1u);
    goto LABEL_30;
  }
  if ((uint64_t)(result - v10) < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if ((uint64_t)(v7 - result) < 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if ((uint64_t)(v10 + v11 - v7) < 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  unint64_t v15 = result + 2;
  uint64_t v16 = v7 - (result + 2);
  if (v7 >= result + 2 && *(unsigned char *)result == 48 && (*(unsigned __int8 *)(result + 1) | 0x20) == 0x78)
  {
    *(void *)(v9 + 24) = v15;
    if ((((v15 - v10) | v16) & 0x8000000000000000) == 0)
    {
      uint64_t v17 = (unsigned __int8 *)(result + 2);
      return _parseHexIntegerDigits<A>(_:isNegative:)(v17, v16, v14, a2, a3, a4);
    }
LABEL_36:
    __break(1u);
    return result;
  }

  return _parseIntegerDigits<A>(_:isNegative:)((unsigned __int8 *)result, v7 - result, v14, a2, a3, a4);
}

uint64_t BufferView<A>._decodeScalar()(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = *a1;
  if ((v2 & 0xC0) == 0x80) {
    goto LABEL_2;
  }
  if ((v2 & 0x80) == 0)
  {
    if (a2 >= 1) {
      unsigned int v3 = *a1;
    }
    else {
      unsigned int v3 = 0;
    }
    LOBYTE(v4) = a2 < 1;
    return v3 | ((unint64_t)v4 << 32);
  }
  uint64_t v7 = (__clz(v2 ^ 0xFF) - 24);
  if (v7 > a2)
  {
LABEL_2:
    unsigned int v3 = 0;
    LOBYTE(v4) = 1;
    return v3 | ((unint64_t)v4 << 32);
  }
  unsigned int v3 = 0;
  LOBYTE(v4) = 1;
  switch(v7)
  {
    case 1:
      return v3 | ((unint64_t)v4 << 32);
    case 2:
      int v4 = a1[1] & 0xC0;
      unsigned int v3 = a1[1] & 0x3F | ((v2 & 0x1F) << 6);
      if (v4 != 128) {
        unsigned int v3 = 0;
      }
      LOBYTE(v4) = v4 != 128;
      return v3 | ((unint64_t)v4 << 32);
    case 3:
      unsigned int v3 = 0;
      unsigned __int8 v8 = a1[1];
      if ((v8 & 0xC0) == 0x80)
      {
        unsigned __int8 v9 = a1[2];
        if ((v9 & 0xC0) == 0x80)
        {
          unsigned int v3 = ((v2 & 0xF) << 12) | ((v8 & 0x3F) << 6) | v9 & 0x3F;
          LOBYTE(v4) = (((v2 & 0xF) << 12) | ((v8 & 0x3F) << 6) & 0xF800) == 55296;
          if ((((v2 & 0xF) << 12) | ((v8 & 0x3F) << 6) & 0xF800) == 0xD800) {
            unsigned int v3 = 0;
          }
        }
      }
      return v3 | ((unint64_t)v4 << 32);
    case 4:
      unsigned int v3 = 0;
      unsigned __int8 v10 = a1[1];
      if ((v10 & 0xC0) == 0x80)
      {
        unsigned __int8 v11 = a1[2];
        if ((v11 & 0xC0) == 0x80)
        {
          unsigned __int8 v12 = a1[3];
          if ((v12 & 0xC0) == 0x80)
          {
            unsigned int v13 = (((v2 & 0xF) << 18) | ((v10 & 0x3Fu) << 12)) >> 16;
            int v14 = ((v2 & 0xF) << 18) | ((v10 & 0x3F) << 12) | ((v11 & 0x3F) << 6);
            int v15 = v14 & 0x3FF800;
            unsigned int v3 = v14 & 0xFFFFFFC0 | v12 & 0x3F;
            BOOL v16 = v15 == 55296 || v13 > 0x10;
            int v4 = v16;
            if (v4) {
              unsigned int v3 = 0;
            }
          }
        }
      }
      return v3 | ((unint64_t)v4 << 32);
    default:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

uint64_t specialized RangeReplaceableCollection<>.popLast()()
{
  unint64_t v1 = v0[1];
  uint64_t v2 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    uint64_t v2 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  String.index(before:)();
  return String.remove(at:)();
}

uint64_t partial apply for closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(a1, a2, a3, a4, *(void *)(v5 + 48), *(void *)(v5 + 56), *(void *)(v5 + 16), a5, *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40));
}

uint64_t protocol witness for _JSONSimpleValueArrayElement.jsonRepresentation(options:) in conformance Int32()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

__n128 __swift_memcpy20_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t SortDescriptor.keyPath.getter()
{
  uint64_t v1 = type metadata accessor for SortDescriptor.AllowedComparison();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16))(v4, v0 + 24, v1);
  uint64_t v2 = 0;
  switch(v7)
  {
    case 2:
      uint64_t v2 = v6;
      outlined destroy of AnySortComparator((uint64_t)v4);
      break;
    case 3:
    case 4:
      return v2;
    default:
      uint64_t v2 = v5;
      break;
  }
  return v2;
}

uint64_t outlined destroy of AnySortComparator(uint64_t a1)
{
  return a1;
}

uint64_t destroy for AnySortComparator(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t SortDescriptor.stringComparator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 24;
  uint64_t v4 = type metadata accessor for SortDescriptor.AllowedComparison();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(&v13, v3, v4);
  if (v16 == 3)
  {
    uint64_t v7 = v13;
    if (v15) {
      __int16 v12 = 256;
    }
    else {
      __int16 v12 = 0;
    }
    __int16 v11 = v12 | v14;
  }
  else if (v16 > 1u)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(&v13, v4);
    uint64_t v7 = 0;
    __int16 v11 = 2;
  }
  else
  {
    uint64_t v7 = v13;
    __int16 v8 = v14;
    int v9 = v15;
    uint64_t result = swift_release();
    if (v9) {
      __int16 v10 = 256;
    }
    else {
      __int16 v10 = 0;
    }
    __int16 v11 = v10 | v8;
  }
  if (v11 != 2) {
    __int16 v11 = v11;
  }
  *(void *)a1 = v7;
  *(_WORD *)(a1 + 8) = v11;
  return result;
}

uint64_t initializeWithCopy for SortDescriptor.AllowedComparison(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 96);
  if (v4 >= 4) {
    unsigned int v4 = *(_DWORD *)a2 + 4;
  }
  switch(v4)
  {
    case 0u:
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 96) = 0;
      swift_retain();
      break;
    case 1u:
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 96) = 1;
      swift_retain();
      break;
    case 2u:
      long long v8 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      long long v9 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v9;
      uint64_t v11 = *(void *)(a2 + 80);
      uint64_t v10 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v11;
      *(void *)(a1 + 88) = v10;
      *(unsigned char *)(a1 + 96) = 2;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      break;
    case 3u:
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      *(unsigned char *)(a1 + 96) = 3;
      break;
    default:
      long long v5 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v5;
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      long long v7 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v7;
      break;
  }
  return a1;
}

uint64_t type metadata accessor for SortDescriptor.AllowedComparison()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for SortDescriptor.AllowedComparison(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 96);
  if (v1 >= 4) {
    unsigned int v1 = *(_DWORD *)result + 4;
  }
  if (v1 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(result);
    swift_release();
    swift_release();
    swift_release();
  }
  else if (v1 > 1)
  {
    return result;
  }

  return swift_release();
}

void static Duration.UnitsFormatStyle.Unit.minutes.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static Duration.UnitsFormatStyle.Unit.hours.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t URLComponents.scheme.setter(uint64_t a1, uint64_t a2)
{
  return URLComponents.scheme.setter(a1, a2, (void (*)(void))URLComponents._URLComponents.setScheme(_:));
}

unsigned char *storeEnumTagSinglePayload for PredicateExpressions.Variable.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        break;
      case 2:
        *(_WORD *)uint64_t result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = 0;
        break;
      case 2:
        *(_WORD *)uint64_t result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)uint64_t result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

void type metadata accessor for BPlistTrailer(uint64_t a1)
{
}

void specialized static UInt._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedIntegerValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInteger_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *(void *)a2 = v3;
    *(unsigned char *)(a2 + 8) = 0;
  }
  else
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136;
    v7._unint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 1953384789;
    v8._unint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t StringProtocol.components(separatedBy:)(uint64_t a1, uint64_t a2)
{
  double v4 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = *v6;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a2, v4);
  unint64_t v9 = Substring.init<A>(_:)();
  uint64_t v14 = v7;
  uint64_t v11 = Substring._components(separatedBy:)((uint64_t)&v14, v9, v10);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t Substring._components(separatedBy:)(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a3 >> 14;
  if (a2 >> 14 >= a3 >> 14)
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
    unint64_t v8 = a2;
    if (v4 >= a2 >> 14) {
      goto LABEL_44;
    }
    goto LABEL_49;
  }
  uint64_t v40 = *(void *)result;
  uint64_t v5 = MEMORY[0x1E4FBC860];
  unint64_t v6 = a2;
  unint64_t v7 = a2 >> 14;
  unint64_t v36 = a3 >> 14;
  while (2)
  {
    if (v4 >= v7)
    {
      unint64_t v39 = v7;
      swift_bridgeObjectRetain();
      unint64_t v8 = Substring.subscript.getter();
      unint64_t v10 = v9;
      unint64_t v3 = v11;
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      unint64_t v14 = v8 >> 14;
      unint64_t v15 = v10 >> 14;
      if (v8 >> 14 != v10 >> 14)
      {
        unint64_t v37 = (void *)v5;
        unint64_t v38 = v6;
        swift_bridgeObjectRetain();
        uint64_t v16 = v40;
        swift_retain();
        uint64_t v5 = Substring.UnicodeScalarView.index(before:)();
        uint64_t v17 = (v3 >> 59) & 1;
        if ((v13 & 0x1000000000000000) == 0) {
          LOBYTE(v17) = 1;
        }
        uint64_t v18 = 4 << v17;
        for (unint64_t i = v8; ; unint64_t i = Substring.UnicodeScalarView.index(_:offsetBy:)())
        {
          if ((i & 0xC) == v18 || (i & 1) == 0)
          {
            unint64_t v21 = i;
            if ((i & 0xC) == v18) {
              unint64_t v21 = _StringGuts._slowEnsureMatchingEncoding(_:)(i, v3, v13);
            }
            if (v21 >> 14 < v14 || v21 >> 14 >= v15) {
              goto LABEL_50;
            }
            if ((v21 & 1) == 0) {
              _StringGuts.scalarAlignSlow(_:)(v21, v3, v13);
            }
          }
          else if (i >> 14 < v14 || i >> 14 >= v15)
          {
            goto LABEL_51;
          }
          if ((v13 & 0x1000000000000000) != 0)
          {
            UTF32Char v22 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }
          else
          {
            if ((v13 & 0x2000000000000000) == 0 && (v3 & 0x1000000000000000) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            UTF32Char v22 = _decodeScalar(_:startingAt:)();
            uint64_t v16 = v40;
          }
          if (CFCharacterSetIsLongCharacterMember(*(CFCharacterSetRef *)(v16 + 16), v22)) {
            break;
          }
          if ((i ^ v5) < 0x4000)
          {
            swift_bridgeObjectRelease_n();
            swift_release();
LABEL_42:
            uint64_t v5 = (uint64_t)v37;
            unint64_t v8 = v38;
            unint64_t v23 = v39;
            unint64_t v4 = v36;
            goto LABEL_43;
          }
        }
        unint64_t v8 = Substring.UnicodeScalarView.index(after:)();
        swift_bridgeObjectRelease_n();
        uint64_t result = swift_release();
        unint64_t v23 = v8 >> 14;
        unint64_t v24 = i >> 14;
        if (v8 >> 14 < i >> 14) {
          goto LABEL_54;
        }
        if (v24 == v23) {
          goto LABEL_42;
        }
        uint64_t result = v38;
        if (v24 < v39) {
          goto LABEL_55;
        }
        uint64_t v25 = Substring.subscript.getter();
        unint64_t v3 = MEMORY[0x185301F50](v25);
        uint64_t v27 = v26;
        swift_bridgeObjectRelease();
        uint64_t v5 = (uint64_t)v37;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
          uint64_t v5 = result;
        }
        unint64_t v29 = *(void *)(v5 + 16);
        unint64_t v28 = *(void *)(v5 + 24);
        if (v29 >= v28 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, (void *)v5);
          uint64_t v5 = result;
        }
        *(void *)(v5 + 16) = v29 + 1;
        uint64_t v30 = v5 + 16 * v29;
        *(void *)(v30 + 32) = v3;
        *(void *)(v30 + 40) = v27;
        unint64_t v6 = v8;
        unint64_t v7 = v8 >> 14;
        unint64_t v4 = v36;
        if (v23 < v36) {
          continue;
        }
LABEL_43:
        if (v4 < v23) {
          goto LABEL_49;
        }
LABEL_44:
        uint64_t v31 = Substring.subscript.getter();
        unint64_t v8 = MEMORY[0x185301F50](v31);
        unint64_t v3 = v32;
        swift_bridgeObjectRelease();
        if (swift_isUniquelyReferenced_nonNull_native())
        {
LABEL_45:
          unint64_t v34 = *(void *)(v5 + 16);
          unint64_t v33 = *(void *)(v5 + 24);
          if (v34 >= v33 >> 1) {
            uint64_t v5 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, (void *)v5);
          }
          *(void *)(v5 + 16) = v34 + 1;
          uint64_t v35 = v5 + 16 * v34;
          *(void *)(v35 + 32) = v8;
          *(void *)(v35 + 40) = v3;
          return v5;
        }
LABEL_52:
        uint64_t v5 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1, (void *)v5);
        goto LABEL_45;
      }
      swift_bridgeObjectRelease();
      unint64_t v8 = v6;
      if (v36 >= v39) {
        goto LABEL_44;
      }
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    break;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.Current()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.Current()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t type metadata completion function for Notification.Subscription()
{
  return swift_initClassMetadata2();
}

uint64_t Locale.Language.region.getter@<X0>(uint64_t *a1@<X8>)
{
  long long v3 = v1[5];
  long long v15 = v1[4];
  long long v16 = v3;
  long long v4 = v1[3];
  void v14[2] = v1[2];
  v14[3] = v4;
  long long v5 = v1[1];
  v14[0] = *v1;
  v14[1] = v5;
  long long v6 = v15;
  uint64_t v8 = *((void *)&v15 + 1);
  uint64_t v7 = v15;
  unint64_t object = (void *)*((void *)&v16 + 1);
  uint64_t countAndFlagsBits = v16;
  if (!*((void *)&v15 + 1))
  {
    outlined retain of Locale.Language((uint64_t *)v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    uint64_t v7 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)v14);
    uint64_t v8 = v11;
    outlined retain of Locale.Language((uint64_t *)v14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v8)
    {
      Swift::String v12 = String.uppercased()();
      unint64_t object = v12._object;
      uint64_t countAndFlagsBits = v12._countAndFlagsBits;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t countAndFlagsBits = 0;
      unint64_t object = 0;
    }
  }
  *a1 = v7;
  a1[1] = v8;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  return outlined copy of Locale.LanguageCode?(v6, *((uint64_t *)&v6 + 1));
}

__n128 __swift_memcpy122_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_OWORD *)(a1 + 106) = *(long long *)((char *)a2 + 106);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t URLRequest.httpMethod.setter(uint64_t a1, uint64_t a2)
{
  return specialized URLRequest._applyMutation<A>(_:)(v2, a1, a2);
}

void IndexSet.remove(integersIn:)(uint64_t a1, uint64_t a2)
{
}

{
  BOOL v2;
  uint64_t v3;

  uint64_t v2 = __OFADD__(a2, 1);
  long long v3 = a2 + 1;
  if (v2) {
    __break(1u);
  }
  else {
    IndexSet.remove(integersIn:)(a1, v3);
  }
}

uint64_t initializeWithCopy for AttributedString.Runs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_retain();
  return a1;
}

double protocol witness for Scheduler.now.getter in conformance NSRunLoop@<D0>(double *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double result = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  *a1 = result;
  return result;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance IndexSet.Index(void *a1, void *a2)
{
  return *a2 >= *a1;
}

void one-time initialization function for weekdays()
{
  static Locale.Weekday.weekdays = &outlined read-only object #0 of one-time initialization function for weekdays;
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.download(from:delegate:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t partial apply for closure #1 in _NSSwiftProcessInfo.thermalState.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _NSSwiftProcessInfo.thermalState.getter(a1, *(void *)(v2 + 16), a2);
}

uint64_t closure #1 in _NSSwiftProcessInfo.thermalState.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    uint64_t v5 = setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter(a2);
    if (v6)
    {
      uint64_t result = 0;
    }
    else
    {
      uint64_t result = specialized static _NSSwiftProcessInfo._mapOSThermalToThermalState(_:)(v5);
      *(void *)a1 = result;
      *(unsigned char *)(a1 + 8) = 0;
    }
  }
  else
  {
    uint64_t result = *(void *)a1;
  }
  *a3 = result;
  return result;
}

uint64_t specialized static _NSSwiftProcessInfo._mapOSThermalToThermalState(_:)(unint64_t a1)
{
  if (HIDWORD(a1))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    int v1 = a1;
    uint64_t result = 0;
    switch(v1)
    {
      case 10:
        uint64_t result = 1;
        break;
      case 20:
        uint64_t result = 2;
        break;
      case 30:
      case 40:
      case 50:
        uint64_t result = 3;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  out_tokeuint64_t n = 0;
  uint64_t v2 = (const char *)_platform_shims_kOSThermalNotificationPressureLevelName();
  long long v3 = __NSDispatchQueueGetGenericMatchingMain();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  v7[4] = (uint64_t)partial apply for closure #1 in setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter;
  v7[5] = v4;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  _OWORD v7[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Int32) -> ();
  _OWORD v7[3] = (uint64_t)&block_descriptor_6_0;
  uint64_t v5 = _Block_copy(v7);
  swift_release();
  LODWORD(v2) = notify_register_dispatch(v2, &out_token, v3, v5);
  _Block_release(v5);

  if (v2) {
    return 0;
  }
  v7[0] = 0;
  if (notify_get_state(out_token, v7)) {
    return 0;
  }
  else {
    return v7[0];
  }
}

uint64_t _platform_shims_kOSThermalNotificationPressureLevelName()
{
  return *MEMORY[0x1E4F14918];
}

uint64_t partial apply for closure #1 in _NSSwiftProcessInfo.isLowPowerModeEnabled.getter@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(result + 17);
  if (v3 == 2)
  {
    uint64_t v4 = result;
    uint64_t result = specialized setupPowerStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.isLowPowerModeEnabled.getter();
    if (v5)
    {
      char v6 = 0;
    }
    else if (result)
    {
      char v6 = 1;
      *(unsigned char *)(v4 + 17) = 1;
    }
    else
    {
      char v6 = 0;
      *(unsigned char *)(v4 + 17) = 0;
    }
  }
  else
  {
    char v6 = v3 & 1;
  }
  *a2 = v6;
  return result;
}

uint64_t specialized setupPowerStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.isLowPowerModeEnabled.getter()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  out_tokeuint64_t n = 0;
  uint64_t v0 = __NSDispatchQueueGetGenericMatchingMain();
  v4[4] = (uint64_t)specialized closure #1 in setupPowerStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.isLowPowerModeEnabled.getter;
  void v4[5] = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1107296256;
  uint64_t v4[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Int32) -> ();
  _OWORD v4[3] = (uint64_t)&block_descriptor_5;
  int v1 = _Block_copy(v4);
  swift_release();
  uint32_t v2 = notify_register_dispatch("com.apple.system.lowpowermode", &out_token, v0, v1);
  _Block_release(v1);

  if (v2) {
    return 0;
  }
  v4[0] = 0;
  if (notify_get_state(out_token, v4)) {
    return 0;
  }
  else {
    return v4[0];
  }
}

id __NSDispatchQueueGetGenericMatchingMain()
{
  qos_class_t v0 = qos_class_main();
  int v1 = dispatch_get_global_queue(v0, 2uLL);

  return v1;
}

void _NSAllocatorDeallocateWithBlock(uint64_t a1, void (**a2)(void))
{
  a2[2](a2);
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownParsingOptions()
{
  return &type metadata for AttributedString.MarkdownParsingOptions;
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownParsingOptions.InterpretedSyntax()
{
  return &type metadata for AttributedString.MarkdownParsingOptions.InterpretedSyntax;
}

ValueMetadata *type metadata accessor for AttributedString.MarkdownParsingOptions.FailurePolicy()
{
  return &type metadata for AttributedString.MarkdownParsingOptions.FailurePolicy;
}

ValueMetadata *type metadata accessor for NSNotificationCenter.Notifications.State()
{
  return &type metadata for NSNotificationCenter.Notifications.State;
}

uint64_t Calendar.date(byAdding:to:wrappingComponents:)(void *__src, double *a2, uint64_t a3)
{
  memcpy(__dst, __src, 0x11AuLL);
  double v6 = *a2;
  uint64_t v7 = *(void *)(v3 + 8);
  if (*a2 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  double v8 = fmax(v6, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v11 = v8;
  return (*(uint64_t (**)(unsigned char *, double *, uint64_t, uint64_t, uint64_t))(v7 + 200))(__dst, &v11, a3, ObjectType, v7);
}

uint64_t protocol witness for _CalendarProtocol.date(byAdding:to:wrappingComponents:) in conformance _CalendarICU(void *__src)
{
  memcpy(__dst, __src, sizeof(__dst));
  uint32_t v2 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)();
  os_unfair_lock_unlock(v2 + 4);
  return swift_release();
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  free(v1);
}

NSRect NSIntersectionRect(NSRect aRect, NSRect bRect)
{
  double height = aRect.size.height;
  double v3 = 0.0;
  if (aRect.size.width <= 0.0
    || bRect.size.width <= 0.0
    || height <= 0.0
    || bRect.size.height <= 0.0
    || (aRect.origin.x <= bRect.origin.x ? (double x = bRect.origin.x) : (double x = aRect.origin.x),
        (double v5 = aRect.origin.x + aRect.size.width, v5 >= bRect.origin.x + bRect.size.width)
      ? (double v6 = bRect.origin.x + bRect.size.width)
      : (double v6 = v5),
        v6 <= x))
  {
    double v9 = 0.0;
    double v10 = 0.0;
    double v11 = 0.0;
  }
  else
  {
    if (aRect.origin.y <= bRect.origin.y) {
      double y = bRect.origin.y;
    }
    else {
      double y = aRect.origin.y;
    }
    if (aRect.origin.y + height >= bRect.origin.y + bRect.size.height) {
      double v8 = bRect.origin.y + bRect.size.height;
    }
    else {
      double v8 = aRect.origin.y + height;
    }
    double v9 = 0.0;
    double v10 = 0.0;
    double v11 = 0.0;
    if (v8 > y)
    {
      double v9 = v6 - x;
      double v3 = v8 - y;
      double v10 = y;
      double v11 = x;
    }
  }
  result.size.double height = v3;
  result.size.width = v9;
  result.origin.double y = v10;
  result.origin.double x = v11;
  return result;
}

uint64_t objectdestroy_93Tm(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return MEMORY[0x1F4186498](v1, v6, v7);
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.download(from:delegate:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in NSURLSession.download(from:delegate:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in closure #1 in NSURLSession.download(from:delegate:));
}

unint64_t specialized closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t *a8@<X8>)
{
  unint64_t result = specialized closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(a1, a2, a3, a4, a5, a6, *(void *)a7, *(void *)(a7 + 8), *(void *)(a7 + 16), *(unsigned char *)(a7 + 24));
  if (!v8)
  {
    *a8 = result;
    a8[1] = v11;
  }
  return result;
}

unint64_t specialized closure #1 in static _XMLPlistDecodingFormat.unwrapString<A>(from:in:for:_:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  if (a5)
  {
    uint64_t v14 = static String._tryFromUTF8(_:)();
    if (v15) {
      return v14;
    }
    uint64_t v22 = a10;
    uint64_t v16 = a9;
    *(void *)&long long v75 = 0;
    *((void *)&v75 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v48._uint64_t countAndFlagsBits = 0xD000000000000035;
    v48._unint64_t object = (void *)0x80000001823B3080;
    String.append(_:)(v48);
    v49._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    unint64_t v72 = 0xE000000000000000;
    if (a10 == 0xFF)
    {
      char v54 = -1;
      swift_retain();
LABEL_133:
      uint64_t v60 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v62 = v61;
      outlined copy of _CodingKey?(a7, a8, a9, v54);
      _CodingPathNode.path.getter(a6);
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v60 - 8) + 104))(v62, *MEMORY[0x1E4FBBA78], v60);
      swift_bridgeObjectRelease();
      swift_release();
      swift_willThrow();
      return v16;
    }
    uint64_t v50 = (void *)swift_allocObject();
    v50[5] = &type metadata for _CodingKey;
    v50[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v51 = swift_allocObject();
    v50[2] = v51;
    *(void *)(v51 + 16) = a7;
    *(void *)(v51 + 24) = a8;
    *(void *)(v51 + 32) = a9;
    *(unsigned char *)(v51 + 40) = a10;
    v50[7] = a6;
    if (a6 >> 62)
    {
      if (a6 >> 62 != 1)
      {
        unint64_t v21 = 1;
LABEL_132:
        char v54 = a10;
        v50[8] = v21;
        a6 = (unint64_t)v50;
        goto LABEL_133;
      }
      uint64_t v52 = (uint64_t *)((a6 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v52 = (uint64_t *)(a6 + 64);
    }
    uint64_t v59 = *v52;
    swift_retain();
    unint64_t v21 = v59 + 1;
    if (__OFADD__(v59, 1))
    {
      __break(1u);
      goto LABEL_136;
    }
    goto LABEL_132;
  }
  uint64_t v16 = a3;
  unint64_t v72 = v10;
  unint64_t v17 = result + a2;
  *(void *)&long long v75 = a3;
  *((void *)&v75 + 1) = a4;
  *(void *)&long long v76 = result;
  *((void *)&v76 + 1) = result;
  unint64_t v77 = result + a2;
  if (a2 >= 5)
  {
    if (a3 + a4 < result)
    {
LABEL_188:
      __break(1u);
      goto LABEL_189;
    }
    if ((uint64_t)(result - a3) < 0)
    {
LABEL_189:
      __break(1u);
      goto LABEL_190;
    }
    if ((uint64_t)(a3 + a4 - result) < 0)
    {
LABEL_190:
      __break(1u);
      goto LABEL_191;
    }
    if (*(_DWORD *)result == 1819635236 && *(unsigned char *)(result + 4) == 108) {
      return 0;
    }
    uint64_t v73 = 0;
    uint64_t v74 = 0;
  }
  else
  {
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    if (a2 < 1)
    {
      a6 = result;
      goto LABEL_7;
    }
  }
  a6 = result;
  unint64_t v71 = result;
LABEL_23:
  if (v17 < a6) {
    goto LABEL_181;
  }
  if ((uint64_t)(a6 - v16) < 0) {
    goto LABEL_182;
  }
  uint64_t v22 = v17 - a6;
  if ((uint64_t)(v17 - a6) < 0) {
    goto LABEL_183;
  }
  unint64_t v23 = v16 + a4;
  if ((uint64_t)(v16 + a4 - v17) < 0) {
    goto LABEL_184;
  }
  int v24 = *(unsigned __int8 *)a6;
  if (v24 == 38)
  {
    if (v74)
    {
      if (a6 < result)
      {
LABEL_191:
        __break(1u);
        goto LABEL_192;
      }
      if ((uint64_t)(result - v16) < 0)
      {
LABEL_192:
        __break(1u);
        goto LABEL_193;
      }
      if ((uint64_t)(a6 - result) < 0)
      {
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
        goto LABEL_199;
      }
      if ((uint64_t)(v23 - a6) < 0) {
        goto LABEL_194;
      }
      uint64_t v22 = a4;
      uint64_t v28 = static String._tryFromUTF8(_:)();
      if (!v29) {
        goto LABEL_129;
      }
      String.append(_:)(*(Swift::String *)&v28);
      unint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      if (a6 < result)
      {
LABEL_199:
        __break(1u);
        goto LABEL_200;
      }
      if ((uint64_t)(result - v16) < 0)
      {
LABEL_200:
        __break(1u);
        goto LABEL_201;
      }
      if ((uint64_t)(a6 - result) < 0)
      {
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
        goto LABEL_207;
      }
      if ((uint64_t)(v23 - a6) < 0) {
        goto LABEL_202;
      }
      uint64_t v22 = a4;
      uint64_t v30 = static String._tryFromUTF8(_:)();
      uint64_t v32 = v31;
      unint64_t result = swift_bridgeObjectRelease();
      uint64_t v73 = v30;
      uint64_t v74 = v32;
      if (!v32) {
        goto LABEL_129;
      }
    }
    unint64_t v21 = a6 + 1;
    *((void *)&v76 + 1) = a6 + 1;
    unint64_t v33 = v17 - (a6 + 1);
    if ((uint64_t)v33 < 1)
    {
LABEL_118:
      lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
      swift_allocError();
      *(_OWORD *)uint64_t v53 = 0u;
      *(_OWORD *)(v53 + 16) = 0u;
      *(unsigned char *)(v53 + 32) = 0;
      goto LABEL_175;
    }
    unint64_t v34 = (_DWORD *)(a6 + 2);
    if (v17 < a6 + 2)
    {
LABEL_138:
      uint64_t v86 = v16;
      uint64_t v87 = v22;
      uint64_t v88 = v76;
      unint64_t v89 = v21;
      unint64_t v90 = v17;
      goto LABEL_172;
    }
    if ((uint64_t)(v21 - v16) >= 0)
    {
      switch(*(unsigned char *)v21)
      {
        case 'a':
          if (v33 < 4) {
            goto LABEL_118;
          }
          if (v23 < (unint64_t)v34) {
            goto LABEL_214;
          }
          if ((uint64_t)v34 - v16 < 0) {
            goto LABEL_215;
          }
          unint64_t v46 = v72;
          if ((uint64_t)(v23 - (void)v34) < 0) {
            goto LABEL_216;
          }
          if (*(_WORD *)v34 == 28781 && *(unsigned char *)(a6 + 4) == 59)
          {
            unint64_t v35 = a6 + 5;
          }
          else
          {
            if (v33 < 5 || *v34 != 997420912)
            {
              long long v78 = v75;
              long long v79 = v76;
              unint64_t v80 = v77;
              goto LABEL_172;
            }
            unint64_t v35 = a6 + 6;
          }
LABEL_109:
          *((void *)&v76 + 1) = v35;
LABEL_110:
          unint64_t v72 = v46;
          if (v74) {
            String.UnicodeScalarView.append(_:)();
          }
          a4 = *((void *)&v75 + 1);
          uint64_t v16 = v75;
          unint64_t result = *((void *)&v76 + 1);
          unint64_t v17 = v77;
          a6 = *((void *)&v76 + 1);
          break;
        case 'b':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
          goto LABEL_138;
        case 'g':
        case 'l':
          unint64_t v35 = a6 + 4;
          if (v17 < a6 + 4 || *(unsigned char *)(a6 + 2) != 116 || *(unsigned char *)(a6 + 3) != 59) {
            goto LABEL_154;
          }
          goto LABEL_108;
        case 'q':
          if (v33 < 5) {
            goto LABEL_168;
          }
          if (v23 < (unint64_t)v34) {
            goto LABEL_217;
          }
          if ((uint64_t)v34 - v16 < 0) {
            goto LABEL_218;
          }
          if ((uint64_t)(v23 - (void)v34) < 0) {
            goto LABEL_219;
          }
          if (*v34 != 997486453) {
            goto LABEL_168;
          }
          unint64_t v35 = a6 + 6;
LABEL_108:
          unint64_t v46 = v72;
          goto LABEL_109;
        default:
          if (*(unsigned char *)v21 != 35) {
            goto LABEL_138;
          }
          *((void *)&v76 + 1) = a6 + 2;
          specialized static XMLPlistScanner.parseNumericEntityReference(reader:string:)((uint64_t *)&v75);
          unint64_t v46 = v72;
          if (v72) {
            goto LABEL_176;
          }
          goto LABEL_110;
      }
      goto LABEL_22;
    }
    goto LABEL_185;
  }
  if (v24 != 60)
  {
    *((void *)&v76 + 1) = ++a6;
    goto LABEL_22;
  }
  unint64_t v21 = a6 + 2;
  if (v17 < a6 + 2) {
    goto LABEL_121;
  }
  unint64_t v21 = *(unsigned __int8 *)(a6 + 1);
  if (v21 != 33) {
    goto LABEL_121;
  }
  if (v74)
  {
    if (a6 < result) {
      goto LABEL_195;
    }
    if ((uint64_t)(result - v16) < 0) {
      goto LABEL_196;
    }
    if ((uint64_t)(a6 - result) < 0) {
      goto LABEL_197;
    }
    if ((uint64_t)(v23 - a6) < 0) {
      goto LABEL_198;
    }
    uint64_t v25 = a4;
    uint64_t v26 = static String._tryFromUTF8(_:)();
    if (!v27) {
      goto LABEL_129;
    }
    String.append(_:)(*(Swift::String *)&v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (a6 < result) {
      goto LABEL_203;
    }
    if ((uint64_t)(result - v16) < 0) {
      goto LABEL_204;
    }
    if ((uint64_t)(a6 - result) < 0) {
      goto LABEL_205;
    }
    if ((uint64_t)(v23 - a6) < 0) {
      goto LABEL_206;
    }
    uint64_t v25 = a4;
    uint64_t v36 = static String._tryFromUTF8(_:)();
    uint64_t v38 = v37;
    swift_bridgeObjectRelease();
    uint64_t v73 = v36;
    uint64_t v74 = v38;
    if (!v38) {
      goto LABEL_129;
    }
  }
  unint64_t result = a6 + 9;
  if (v17 < a6 + 9) {
    goto LABEL_118;
  }
  if (v23 < a6) {
    goto LABEL_186;
  }
  if ((uint64_t)(v23 - a6) < 0) {
    goto LABEL_187;
  }
  if (*(void *)a6 == 0x41544144435B213CLL && *(unsigned char *)(a6 + 8) == 91)
  {
    a4 = v25;
    if (result >= v17 - 2) {
      goto LABEL_118;
    }
    unint64_t v40 = 0;
    uint64_t v41 = v25 + v16 - a6 - 9;
    while (1)
    {
      uint64_t v42 = (_WORD *)(a6 + v40 + 9);
      if (v23 < (unint64_t)v42) {
        break;
      }
      if ((uint64_t)(a6 - v16 + 9 + v40) < 0) {
        goto LABEL_179;
      }
      if (v41 < 0) {
        goto LABEL_180;
      }
      if (*v42 == 23901 && *(unsigned char *)(a6 + v40 + 11) == 62)
      {
        if (!v74) {
          goto LABEL_87;
        }
        if (v40 >= 0xFFFFFFFFFFFFFFF7) {
          goto LABEL_210;
        }
        if ((uint64_t)(result - v16) < 0) {
          goto LABEL_211;
        }
        uint64_t v22 = v25;
        uint64_t v44 = static String._tryFromUTF8(_:)();
        if (!v45)
        {
          lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
          swift_allocError();
          *(_OWORD *)uint64_t v65 = 0u;
          *(_OWORD *)(v65 + 16) = 0u;
          char v66 = 6;
          goto LABEL_170;
        }
        String.append(_:)(*(Swift::String *)&v44);
        swift_bridgeObjectRelease();
        a4 = v25;
LABEL_87:
        unint64_t result = a6 + v40 + 12;
        *((void *)&v76 + 1) = result;
        a6 = result;
LABEL_22:
        unint64_t v21 = a6 + 1;
        if (v17 < a6 + 1)
        {
LABEL_121:
          if (v74)
          {
            if (result >= a6) {
              return v73;
            }
            if ((uint64_t)(result - v16) >= 0)
            {
              if ((uint64_t)(a6 - result) >= 0)
              {
                if ((uint64_t)(v16 + a4 - a6) >= 0)
                {
                  uint64_t v55 = static String._tryFromUTF8(_:)();
                  if (v56)
                  {
                    String.append(_:)(*(Swift::String *)&v55);
                    swift_bridgeObjectRelease();
                    return v73;
                  }
LABEL_129:
                  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
                  swift_allocError();
                  *(_OWORD *)uint64_t v57 = 0u;
                  *(_OWORD *)(v57 + 16) = 0u;
                  char v58 = 6;
                  goto LABEL_174;
                }
LABEL_224:
                __break(1u);
                return result;
              }
LABEL_223:
              __break(1u);
              goto LABEL_224;
            }
LABEL_222:
            __break(1u);
            goto LABEL_223;
          }
LABEL_136:
          unint64_t result = v71;
          unint64_t v17 = v72;
          if (a6 < v71)
          {
            __break(1u);
            goto LABEL_138;
          }
LABEL_7:
          if ((uint64_t)(result - v16) >= 0)
          {
            if ((uint64_t)(a6 - result) >= 0)
            {
              if ((uint64_t)(v16 + a4 - a6) >= 0)
              {
                uint64_t v18 = static String._tryFromUTF8(_:)();
                if (v19)
                {
                  uint64_t v16 = v18;
                  swift_bridgeObjectRelease();
                  return v16;
                }
                goto LABEL_129;
              }
              goto LABEL_209;
            }
LABEL_208:
            __break(1u);
LABEL_209:
            __break(1u);
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
LABEL_212:
            __break(1u);
LABEL_213:
            __break(1u);
LABEL_214:
            __break(1u);
LABEL_215:
            __break(1u);
LABEL_216:
            __break(1u);
LABEL_217:
            __break(1u);
LABEL_218:
            __break(1u);
LABEL_219:
            __break(1u);
LABEL_220:
            __break(1u);
LABEL_221:
            __break(1u);
            goto LABEL_222;
          }
LABEL_207:
          __break(1u);
          goto LABEL_208;
        }
        goto LABEL_23;
      }
      ++v40;
      --v41;
      if (v22 - 11 == v40) {
        goto LABEL_118;
      }
    }
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
    goto LABEL_188;
  }
  _StringGuts.grow(_:)(45);
  unint64_t result = swift_bridgeObjectRelease();
  uint64_t v63 = (unsigned char *)v76;
  unint64_t v21 = 1;
  if ((unint64_t)v76 >= a6)
  {
LABEL_140:
    unint64_t v91 = v21;
    v64._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v65 = 0xD00000000000002BLL;
    *(void *)(v65 + 8) = 0x80000001823AA470;
    *(void *)(v65 + 16) = 0;
    *(void *)(v65 + 24) = 0;
    char v66 = 5;
LABEL_170:
    *(unsigned char *)(v65 + 32) = v66;
    goto LABEL_175;
  }
  while (2)
  {
    while (*v63 == 13)
    {
      BOOL v67 = __OFADD__(v21++, 1);
      if (v67) {
        goto LABEL_212;
      }
      if ((unint64_t)(v63 + 1) >= a6) {
        goto LABEL_141;
      }
      if (v63[1] == 10) {
        ++v63;
      }
      if ((unint64_t)++v63 >= a6) {
        goto LABEL_140;
      }
    }
    if (v25 < 2) {
      goto LABEL_213;
    }
    if (*(unsigned char *)(v16 + 1) != 10 || (BOOL v67 = __OFADD__(v21, 1), ++v21, !v67))
    {
LABEL_141:
      if ((unint64_t)++v63 >= a6) {
        goto LABEL_140;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_154:
  uint64_t v68 = (unsigned char *)v76;
  unint64_t v17 = 1;
  if ((unint64_t)v76 >= v21)
  {
LABEL_155:
    lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
    swift_allocError();
    *(void *)uint64_t v57 = v17;
    goto LABEL_173;
  }
  while (2)
  {
    if (*v68 == 13)
    {
      BOOL v67 = __OFADD__(v17++, 1);
      if (v67) {
        goto LABEL_220;
      }
      if ((unint64_t)v68 < a6 && v68[1] == 10) {
        ++v68;
      }
LABEL_156:
      if ((unint64_t)v68++ >= a6) {
        goto LABEL_155;
      }
      continue;
    }
    break;
  }
  if (v22 < 2) {
    goto LABEL_221;
  }
  unint64_t v21 = *(unsigned __int8 *)(v16 + 1);
  if (v21 != 10) {
    goto LABEL_156;
  }
  BOOL v67 = __OFADD__(v17++, 1);
  if (!v67) {
    goto LABEL_156;
  }
  __break(1u);
LABEL_168:
  uint64_t v81 = v16;
  uint64_t v82 = v22;
  uint64_t v83 = v76;
  unint64_t v84 = v21;
  unint64_t v85 = v17;
LABEL_172:
  uint64_t v70 = BufferReader.lineNumber.getter();
  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
  swift_allocError();
  *(void *)uint64_t v57 = v70;
LABEL_173:
  *(void *)(v57 + 8) = 0;
  *(void *)(v57 + 16) = 0;
  *(void *)(v57 + 24) = 0;
  char v58 = 4;
LABEL_174:
  *(unsigned char *)(v57 + 32) = v58;
LABEL_175:
  swift_willThrow();
LABEL_176:
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t partial apply for closure #1 in closure #1 in NSNotificationCenter.Notifications.next()@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in NSNotificationCenter.Notifications.next()(a1, *(void *)(v2 + 16), a2);
}

uint64_t closure #1 in closure #1 in NSNotificationCenter.Notifications.next()@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 5;
  uint64_t v7 = (void *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  }
  unint64_t v9 = v7[2];
  unint64_t v8 = v7[3];
  if (v9 >= v8 >> 1) {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v7);
  }
  _OWORD v7[2] = v9 + 1;
  v7[v9 + 4] = a2;
  a1[5] = v7;
  outlined init with copy of (Hashable & Sendable)?((uint64_t)(a1 + 1), (uint64_t)v19, &demangling cache variable for type metadata for Sendable?);
  uint64_t v10 = *(void *)&v19[24];
  uint64_t result = outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for Sendable?);
  if (!v10)
  {
    uint64_t v15 = *v6;
    memset(&v19[8], 0, 48);
    *(void *)uint64_t v19 = v15;
    swift_bridgeObjectRetain();
    outlined destroy of Any?((uint64_t)&v19[8], &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    memset(&v19[8], 0, 48);
    long long v16 = *(_OWORD *)&v19[16];
    *(_OWORD *)a3 = *(_OWORD *)v19;
    *(_OWORD *)(a3 + 16) = v16;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v19[32];
    *(void *)(a3 + 48) = *(void *)&v19[48];
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v6 = MEMORY[0x1E4FBC860];
    return result;
  }
  uint64_t v12 = *a1;
  if (!*(void *)(*a1 + 16))
  {
    memset(&v19[8], 0, 48);
    *(void *)uint64_t v19 = MEMORY[0x1E4FBC860];
    uint64_t result = outlined destroy of Any?((uint64_t)&v19[8], &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
    memset(&v19[8], 0, 48);
    goto LABEL_12;
  }
  if (*(void *)(*v6 + 16))
  {
    uint64_t v13 = *(void *)(*v6 + 32);
    uint64_t result = (uint64_t)specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    if (*(void *)(v12 + 16))
    {
      outlined init with copy of NSNotificationCenter.Notifications.NotificationWrapper(v12 + 32, v18);
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      memset(&v19[8], 0, 48);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafeContinuation<NSNotificationCenter.Notifications.NotificationWrapper?, Never>>);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1821037E0;
      *(void *)(v14 + 32) = v13;
      *(void *)uint64_t v19 = v14;
      uint64_t result = outlined assign with take of NSNotificationCenter.Notifications.NotificationWrapper?((uint64_t)v18, (uint64_t)&v19[8], &demangling cache variable for type metadata for NSNotificationCenter.Notifications.NotificationWrapper?);
LABEL_12:
      long long v17 = *(_OWORD *)&v19[16];
      *(_OWORD *)a3 = *(_OWORD *)v19;
      *(_OWORD *)(a3 + 16) = v17;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)&v19[32];
      *(void *)(a3 + 48) = *(void *)&v19[48];
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t outlined destroy of NSNotificationCenter.Notifications.Resumption(uint64_t a1)
{
  return a1;
}

uint64_t destroy for NSNotificationCenter.Notifications.Resumption(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {

    if (*(void *)(a1 + 40)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(uint64_t a1, uint64_t a2)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderBPlist.encode(_:)(Swift::String a1)
{
  uint64_t v2 = v1;
  unint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if ((*(uint64_t (**)(void))(*(void *)v1 + 240))())
  {
    if (specialized Sequence.allSatisfy(_:)(countAndFlagsBits, (unint64_t)object))
    {
      swift_bridgeObjectRetain();
      id v5 = (id)String.hashValue.getter();
      unsigned __int8 v6 = 1;
    }
    else
    {
      uint64_t v7 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      id v5 = objc_msgSend(v7, sel_hash);
      swift_unknownObjectRelease();
      unsigned __int8 v6 = 0;
    }
    uint64_t v8 = *(void *)(v2 + 88);
    uint64_t v9 = *(void *)(v8 + 16);
    unint64_t v10 = *(void *)(v8 + 24);
    uint64_t v11 = *(void *)(v8 + 32);
    *(void *)(v8 + 16) = countAndFlagsBits;
    *(void *)(v8 + 24) = object;
    *(void *)(v8 + 32) = v5;
    unsigned __int8 v12 = *(unsigned char *)(v8 + 40);
    *(unsigned char *)(v8 + 40) = v6;
    outlined copy of _BPlistEncodingFormat.Reference.Backing(countAndFlagsBits, (unint64_t)object, (uint64_t)v5, v6);
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v9, v10, v11, v12);
    swift_retain();
    if (specialized Set._Variant.insert(_:)(&v14, v8))
    {
      type metadata accessor for _BPlistEncodingFormat.Reference();
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = 2;
      *(unsigned char *)(v13 + 40) = -112;
      *(void *)(v13 + 48) = -1;
      swift_bridgeObjectRelease();
      swift_release();
      *(void *)(v2 + 88) = v13;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t ___foundation_swift_process_info_enabled_block_invoke()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    BOOL v1 = 1;
  }
  else
  {
    uint64_t result = (uint64_t)getenv("NSSwiftProcessInfo");
    BOOL v1 = result != 0;
  }
  byte_1EB1ED649 = v1;
  return result;
}

ValueMetadata *type metadata accessor for Locale.IdentifierType()
{
  return &type metadata for Locale.IdentifierType;
}

uint64_t AttributedStringProtocol.settingAttributes(_:)@<X0>(long long *a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  double v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (uint64_t *)((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, ValueMetadata *, double))(v12 + 16))(v11, v4, a2, v9);
  AttributedString.init<A>(_:)(v11, a2, a3, a4);
  long long v14 = *a1;
  return AttributedString.setAttributes(_:)((uint64_t *)&v14);
}

uint64_t initializeWithCopy for AttributedString.UnicodeScalarView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  return a1;
}

uint64_t AttributedString.init<A>(_:)@<X0>(uint64_t *a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a2;
  id v5 = a1;
  unsigned __int8 v6 = a4;
  if (a2 == &type metadata for AttributedString)
  {
    uint64_t v41 = *a1;
    swift_retain();
  }
  else
  {
    if (a2 == &type metadata for AttributedSubstring)
    {
      uint64_t v42 = *a1;
      uint64_t v43 = a1[2];
      uint64_t v44 = a1[4];
      uint64_t v59 = a1[6];
      uint64_t v61 = a1[5];
      uint64_t v58 = a1[7];
      uint64_t v56 = a1[3];
      uint64_t v57 = a1[8];
      *(void *)&long long v64 = a1[1];
      *((void *)&v64 + 1) = v43;
      *(void *)&long long v65 = v56;
      *((void *)&v65 + 1) = v44;
      uint64_t v66 = v61;
      uint64_t v67 = v59;
      uint64_t v68 = v58;
      uint64_t v69 = v57;
      long long v45 = *(_OWORD *)(v42 + 16);
      long long v46 = *(_OWORD *)(v42 + 48);
      long long v80 = *(_OWORD *)(v42 + 32);
      long long v81 = v46;
      long long v79 = v45;
      swift_retain_n();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v83);
      swift_release();
      BigString.init(_:)();
      uint64_t v47 = *(void *)(v42 + 64);
      uint64_t v48 = *(void *)(v42 + 72);
      uint64_t v49 = *(void *)(v42 + 80);
      swift_unknownObjectRetain();
      uint64_t v50 = BigString.Index.utf8Offset.getter();
      uint64_t v51 = BigString.Index.utf8Offset.getter();
      swift_unknownObjectRetain();
      uint64_t v33 = specialized Rope.extract<A>(from:to:in:)(v50, v51, v47, v48, v49);
      uint64_t v35 = v52;
      uint64_t v37 = v53;
      uint64_t v39 = v54;
      swift_release();
      swift_unknownObjectRelease_n();
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      unint64_t v40 = (char *)v75;
    }
    else
    {
      uint64_t v8 = AttributedStringProtocol.__guts.getter(a2, a3);
      (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t))(a3 + 32))(&v72, v4, a3);
      long long v60 = v72;
      uint64_t v9 = v73;
      uint64_t v10 = v74;
      (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t))(a3 + 40))(&v64, v4, a3);
      long long v79 = v60;
      *(void *)&long long v80 = v9;
      *((void *)&v80 + 1) = v10;
      long long v81 = v64;
      long long v82 = v65;
      long long v11 = *(_OWORD *)(v8 + 32);
      v83[0] = *(_OWORD *)(v8 + 16);
      v83[1] = v11;
      _OWORD v83[2] = *(_OWORD *)(v8 + 48);
      swift_retain();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v63);
      uint64_t v12 = BigSubstring.UnicodeScalarView.startIndex.getter();
      uint64_t v14 = v13;
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      *(void *)&long long v60 = v4;
      uint64_t v19 = v5;
      uint64_t v20 = BigSubstring.UnicodeScalarView.endIndex.getter();
      uint64_t v22 = v21;
      uint64_t v24 = v23;
      uint64_t v26 = v25;
      outlined release of Locale((uint64_t)&v64);
      swift_release();
      v75[0] = v12;
      v75[1] = v14;
      v75[2] = v16;
      v75[3] = v18;
      v75[4] = v20;
      v75[5] = v22;
      id v5 = v19;
      uint64_t v4 = (ValueMetadata *)v60;
      v75[6] = v24;
      v75[7] = v26;
      long long v27 = *(_OWORD *)(v8 + 32);
      long long v76 = *(_OWORD *)(v8 + 16);
      long long v77 = v27;
      long long v78 = *(_OWORD *)(v8 + 48);
      swift_retain_n();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v70);
      swift_release();
      BigString.init(_:)();
      uint64_t v29 = *(void *)(v8 + 64);
      uint64_t v28 = *(void *)(v8 + 72);
      uint64_t v30 = *(void *)(v8 + 80);
      swift_unknownObjectRetain();
      uint64_t v31 = BigString.Index.utf8Offset.getter();
      uint64_t v32 = BigString.Index.utf8Offset.getter();
      swift_unknownObjectRetain();
      uint64_t v33 = specialized Rope.extract<A>(from:to:in:)(v31, v32, v29, v28, v30);
      uint64_t v35 = v34;
      uint64_t v37 = v36;
      uint64_t v39 = v38;
      swift_release();
      swift_unknownObjectRelease_n();
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      unint64_t v40 = &v71;
    }
    uint64_t v41 = AttributedString.Guts.init(string:runs:)(v40, v33, v35, v37, v39);
    swift_release();
    unsigned __int8 v6 = a4;
  }
  uint64_t result = (*((uint64_t (**)(uint64_t *, ValueMetadata *))v4[-1].Description + 1))(v5, v4);
  *unsigned __int8 v6 = v41;
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

uint64_t AttributedString.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v23 = a1[6];
  uint64_t v24 = a1[5];
  uint64_t v22 = a1[7];
  uint64_t v6 = a1[8];
  uint64_t v28 = a1[1];
  uint64_t v29 = v3;
  uint64_t v30 = v4;
  uint64_t v31 = v5;
  uint64_t v32 = v24;
  uint64_t v33 = v23;
  uint64_t v34 = v22;
  uint64_t v35 = v6;
  long long v7 = *(_OWORD *)(v2 + 16);
  long long v8 = *(_OWORD *)(v2 + 48);
  long long v37 = *(_OWORD *)(v2 + 32);
  long long v38 = v8;
  long long v36 = v7;
  swift_retain();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v26);
  swift_release();
  BigString.init(_:)();
  uint64_t v9 = *(void *)(v2 + 64);
  uint64_t v10 = *(void *)(v2 + 72);
  uint64_t v11 = *(void *)(v2 + 80);
  swift_unknownObjectRetain();
  uint64_t v12 = BigString.Index.utf8Offset.getter();
  uint64_t v13 = BigString.Index.utf8Offset.getter();
  swift_unknownObjectRetain();
  uint64_t v14 = specialized Rope.extract<A>(from:to:in:)(v12, v13, v9, v10, v11);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  swift_release();
  swift_unknownObjectRelease_n();
  type metadata accessor for AttributedString.Guts();
  swift_allocObject();
  uint64_t result = AttributedString.Guts.init(string:runs:)(v27, v14, v16, v18, v20);
  *a2 = result;
  return result;
}

uint64_t AttributedString.init(_:attributeTable:options:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id v8 = objc_msgSend(a1, sel_string);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  BigString.init(_:)();
  aBlocuint64_t k = 0;
  MEMORY[0x185309530](&aBlock, 8);
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  uint64_t v96 = aBlock;
  id v92 = 0;
  v91[0] = BigString.startIndex.getter();
  v91[1] = v9;
  _OWORD v91[2] = v10;
  v91[3] = v11;
  v90[0] = v91[0];
  v90[1] = v9;
  v90[2] = v10;
  v90[3] = v11;
  uint64_t v87 = 0;
  uint64_t v88 = MEMORY[0x1E4FBC868];
  uint64_t v89 = MEMORY[0x1E4FBC870];
  char v86 = 0;
  id v12 = objc_msgSend(a1, sel_length);
  uint64_t v13 = swift_allocObject();
  long long v14 = v97[1];
  *(_OWORD *)(v13 + 56) = v97[0];
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  *(void *)(v13 + 32) = &v92;
  *(void *)(v13 + 40) = v90;
  *(void *)(v13 + 48) = v91;
  *(_OWORD *)(v13 + 72) = v14;
  *(_OWORD *)(v13 + 88) = v97[2];
  *(void *)(v13 + 104) = &v87;
  *(void *)(v13 + 112) = &v93;
  *(void *)(v13 + 120) = &v86;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = partial apply for closure #1 in AttributedString.init(_:attributeTable:options:);
  *(void *)(v15 + 24) = v13;
  long long v82 = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  uint64_t v83 = v15;
  aBlocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v79 = 1107296256;
  long long v80 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  long long v81 = &block_descriptor_21;
  uint64_t v16 = _Block_copy(&aBlock);
  swift_retain();
  outlined retain of Locale((uint64_t)v97);
  swift_release();
  objc_msgSend(a1, sel_enumerateAttributesInRange_options_usingBlock_, 0, v12, 0, v16);
  _Block_release(v16);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v12 & 1) == 0)
  {
    if (v92)
    {
      id v18 = v92;
      swift_willThrow();

      outlined release of Locale((uint64_t)v97);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      return swift_unknownObjectRelease();
    }
    char v71 = a1;
    long long v72 = a4;
    uint64_t v19 = v87;
    if (v87 > 0)
    {
      uint64_t v20 = v88;
      uint64_t v21 = v89;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope.append(_:)(v19, v20, v21);
    }
    uint64_t v22 = v93;
    uint64_t v23 = v94;
    uint64_t v24 = v95;
    uint64_t v25 = v96;
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v97);
    swift_unknownObjectRetain();
    uint64_t v26 = (_OWORD *)AttributedString.Guts.init(string:runs:)(v97, v22, v23, v24, v25);
    long long v27 = v26;
    uint64_t v74 = v26;
    if (v86 == 1)
    {
      long long v28 = v26[2];
      v113[0] = v26[1];
      v113[1] = v28;
      v113[2] = v26[3];
      swift_retain();
      outlined retain of Locale((uint64_t)v113);
      uint64_t v29 = BigString.startIndex.getter();
      uint64_t v31 = v30;
      uint64_t v76 = v32;
      uint64_t v124 = v33;
      outlined release of Locale((uint64_t)v113);
      long long v34 = v27[1];
      long long v35 = v27[3];
      v112[1] = v27[2];
      v112[2] = v35;
      v112[0] = v34;
      long long v36 = v27[1];
      v114[1] = v27[2];
      v114[2] = v35;
      v114[0] = v36;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v114, (uint64_t)v115);
      outlined retain of Locale((uint64_t)v115);
      uint64_t v37 = BigString.endIndex.getter();
      uint64_t v39 = v38;
      uint64_t v41 = v40;
      uint64_t v43 = v42;
      outlined release of Locale((uint64_t)v112);
      uint64_t v75 = v29;
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_21;
      }
      uint64_t v44 = v27 + 1;
      uint64_t v104 = v75;
      uint64_t v105 = v31;
      uint64_t v106 = v76;
      uint64_t v107 = v124;
      uint64_t v108 = v37;
      uint64_t v109 = v39;
      uint64_t v110 = v41;
      uint64_t v111 = v43;
      AttributedString.Guts.fixScalarConstrainedAttributes(in:)();
      long long v45 = v27[1];
      long long v46 = v27[3];
      v103[1] = v27[2];
      v103[2] = v46;
      v103[0] = v45;
      long long v47 = v27[1];
      v116[1] = v27[2];
      v116[2] = v46;
      v116[0] = v47;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v116, (uint64_t)v117);
      outlined retain of Locale((uint64_t)v117);
      uint64_t v48 = BigString.startIndex.getter();
      uint64_t v50 = v49;
      uint64_t v52 = v51;
      uint64_t v54 = v53;
      outlined release of Locale((uint64_t)v103);
      long long v55 = v27[1];
      long long v56 = v27[3];
      v102[1] = v27[2];
      v102[2] = v56;
      v102[0] = v55;
      long long v57 = v27[1];
      v118[1] = v27[2];
      v118[2] = v56;
      v118[0] = v57;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v118, (uint64_t)v119);
      outlined retain of Locale((uint64_t)v119);
      BigString.endIndex.getter();
      uint64_t v124 = v58;
      outlined release of Locale((uint64_t)v102);
      if (static BigString.Index.< infix(_:_:)())
      {
        uint64_t v73 = v27 + 1;
        while (1)
        {
          long long v59 = *v44;
          long long v60 = v44[2];
          v101[1] = v44[1];
          v101[2] = v60;
          v101[0] = v59;
          long long v61 = *v44;
          v120[1] = v44[1];
          v120[2] = v60;
          v120[0] = v61;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v120, (uint64_t)v121);
          outlined retain of Locale((uint64_t)v121);
          BigString.utf8.getter();
          outlined release of Locale((uint64_t)v101);
          uint64_t result = static BigString.Index.< infix(_:_:)();
          if (result) {
            break;
          }
          v100[0] = v48;
          v100[1] = v50;
          void v100[2] = v52;
          uint64_t v100[3] = v54;
          v100[4] = v48;
          v100[5] = v50;
          v100[6] = v52;
          v100[7] = v54;
          specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)v100, &aBlock);
          uint64_t result = outlined release of Locale((uint64_t)v98);
          uint64_t v124 = v85;
          if (v85 == 2) {
            goto LABEL_22;
          }
          uint64_t v62 = v82;
          uint64_t v77 = v83;
          uint64_t v63 = v84;
          uint64_t v64 = BigString.Index.utf8Offset.getter();
          aBlocuint64_t k = 0;
          uint64_t v79 = 0;
          uint64_t v65 = AttributedString.Guts._constrainedAttributes(at:with:)(v64, &aBlock);
          uint64_t v66 = BigString.Index.utf8Offset.getter();
          uint64_t v50 = v77;
          uint64_t v52 = v63;
          uint64_t result = BigString.Index.utf8Offset.getter();
          if (result < v66) {
            goto LABEL_19;
          }
          uint64_t v67 = result;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized AttributedString._InternalRunsSlice.updateEach(with:)(v74, v66, v67, v65);
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          uint64_t v44 = v73;
          long long v68 = *v73;
          long long v69 = v73[2];
          v99[1] = v73[1];
          v99[2] = v69;
          v99[0] = v68;
          long long v70 = *v73;
          v122[1] = v73[1];
          v122[2] = v69;
          v122[0] = v70;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v122, (uint64_t)v123);
          outlined retain of Locale((uint64_t)v123);
          BigString.endIndex.getter();
          outlined release of Locale((uint64_t)v99);
          uint64_t v48 = (uint64_t)v62;
          uint64_t v54 = v124;
          if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
            goto LABEL_16;
          }
        }
        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
    }
    else
    {
      swift_retain();
    }
LABEL_16:

    outlined release of Locale((uint64_t)v97);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    uint64_t result = swift_unknownObjectRelease();
    *long long v72 = v74;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t AttributedString.runs.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(_OWORD **)v1;
  long long v4 = *(_OWORD *)(*(void *)v1 + 16);
  long long v5 = *(_OWORD *)(*(void *)v1 + 48);
  v11[1] = *(_OWORD *)(*(void *)v1 + 32);
  v11[2] = v5;
  v11[0] = v4;
  swift_retain();
  outlined retain of Locale((uint64_t)v11);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v11);
  long long v6 = v3[1];
  long long v7 = v3[3];
  v10[1] = v3[2];
  v10[2] = v7;
  v10[0] = v6;
  long long v8 = v3[1];
  v12[1] = v3[2];
  void v12[2] = v7;
  v12[0] = v8;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v12, (uint64_t)v13);
  outlined retain of Locale((uint64_t)v13);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v10);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0) {
    return AttributedString.Runs.init(_:in:)((uint64_t)v3, a1);
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs(uint64_t *result)
{
  uint64_t v2 = *result;
  if (*result < v1[1] || v2 >= v1[9]) {
    goto LABEL_85;
  }
  uint64_t v3 = result;
  uint64_t v4 = *v1;
  uint64_t v5 = result[3];
  uint64_t v6 = *(void *)(*v1 + 64);
  uint64_t v7 = *(void *)(v4 + 72);
  uint64_t v8 = *(void *)(v4 + 88);
  uint64_t v64 = result[7];
  uint64_t v66 = *(void *)(v4 + 80);
  if (v5 != 1)
  {
    uint64_t v9 = result[1];
    if (v9 == v8)
    {
      uint64_t v62 = *result;
      uint64_t v61 = *(void *)(v4 + 88);
      uint64_t v10 = v4;
      uint64_t v11 = *(void *)(v4 + 80);
      unint64_t v12 = result[2];
      if (v64 == 2)
      {
        if (v6)
        {
          swift_unknownObjectRetain();
          uint64_t result = (uint64_t *)specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v12, v5, v6, v7, v11);
          uint64_t v13 = (uint64_t)result;
        }
        else
        {
          uint64_t v13 = 0;
        }
      }
      else
      {
        swift_unknownObjectRetain();
        uint64_t result = (uint64_t *)BigString.Index.utf8Offset.getter();
        uint64_t v13 = (uint64_t)result;
      }
      uint64_t v4 = v10;
      uint64_t v8 = v61;
      uint64_t v2 = v62;
      goto LABEL_68;
    }
  }
  if (v6) {
    uint64_t v14 = *(void *)(v4 + 72);
  }
  else {
    uint64_t v14 = 0;
  }
  if (v2 < 0 || v14 < v2) {
    goto LABEL_89;
  }
  if (!v6 || (v2 < v7 ? (BOOL v15 = *(unsigned __int16 *)(v6 + 16) == 0) : (BOOL v15 = 1), v15))
  {
    unint64_t v16 = swift_unknownObjectRetain_n();
    unint64_t v12 = specialized Rope._endPath.getter(v16);
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
    uint64_t v5 = 0;
    if (!v6)
    {
      uint64_t v13 = 0;
      goto LABEL_67;
    }
LABEL_20:
    swift_unknownObjectRetain();
    uint64_t v13 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v8, v12, v5, v6, v7, v66);
    uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
LABEL_67:
    uint64_t v9 = v8;
LABEL_68:
    *(void *)&long long v74 = v9;
    *((void *)&v74 + 1) = v12;
    *(void *)&long long v75 = v5;
    if (__OFADD__(v2, 1)) {
      goto LABEL_86;
    }
    if (v9 != v8) {
      goto LABEL_87;
    }
    uint64_t v63 = v2 + 1;
    uint64_t v38 = v8;
    if (v5)
    {
      unint64_t v39 = *(void *)(v5 + 24 * ((v12 >> ((4 * *(unsigned char *)(v5 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v39 = specialized Rope._Node.subscript.getter(v12, v6);
      swift_unknownObjectRelease();
    }
    uint64_t v40 = v64;
    swift_bridgeObjectRelease();
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    if (__OFADD__(v13, v39)) {
      goto LABEL_88;
    }
    unint64_t v65 = v13 + v39;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v74, v6, v7, v66, v38);
    swift_unknownObjectRelease_n();
    long long v41 = v74;
    uint64_t v42 = (long long *)(v4 + 16);
    uint64_t v43 = v75;
    if (v40 == 2)
    {
      uint64_t v44 = v74;
      long long v45 = *v42;
      long long v46 = v42[2];
      v68[1] = v42[1];
      v68[2] = v46;
      v68[0] = v45;
      long long v47 = *v42;
      long long v70 = v42[1];
      long long v71 = v46;
      long long v69 = v47;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v69, (uint64_t)v72);
      outlined retain of Locale((uint64_t)v72);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v68);
      long long v48 = *v42;
      long long v49 = v42[2];
      v67[1] = v42[1];
      _OWORD v67[2] = v49;
      v67[0] = v48;
      long long v50 = *v42;
      long long v75 = v42[1];
      long long v76 = v49;
      long long v74 = v50;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v74, (uint64_t)v73);
      outlined retain of Locale((uint64_t)v73);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v67);
    }
    else
    {
      long long v51 = *v42;
      long long v52 = *(_OWORD *)(v4 + 48);
      long long v70 = *(_OWORD *)(v4 + 32);
      long long v71 = v52;
      long long v69 = v51;
      long long v53 = *v42;
      long long v75 = *(_OWORD *)(v4 + 32);
      long long v76 = v52;
      long long v74 = v53;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v74, (uint64_t)v67);
      outlined retain of Locale((uint64_t)v67);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)&v69);
      uint64_t result = (uint64_t *)BigString.Index.utf8Offset.getter();
      if (__OFSUB__(v65, result)) {
        goto LABEL_90;
      }
      uint64_t v44 = v41;
    }
    uint64_t v54 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v56 = v55;
    uint64_t v58 = v57;
    uint64_t v60 = v59;
    uint64_t result = (uint64_t *)outlined release of Locale(v41);
    *uint64_t v3 = v63;
    v3[1] = v44;
    void v3[2] = *((void *)&v41 + 1);
    v3[3] = v43;
    v3[4] = v54;
    v3[5] = v56;
    v3[6] = v58;
    v3[7] = v60;
    return result;
  }
  uint64_t v17 = *(unsigned __int8 *)(v6 + 18);
  if (!*(unsigned char *)(v6 + 18))
  {
    uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    uint64_t v18 = v2;
    uint64_t v5 = v6;
LABEL_43:
    uint64_t v28 = *(unsigned __int16 *)(v5 + 16);
    if (*(_WORD *)(v5 + 16))
    {
      unint64_t v29 = v18 - 1;
      if (__OFSUB__(v18, 1)) {
        goto LABEL_92;
      }
      if (__OFADD__(v29, 1)) {
        goto LABEL_94;
      }
      if (v18 <= 0)
      {
        uint64_t v28 = 0;
LABEL_65:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v12 = v17 & 0xFFFFFFFFFFFFF0FFLL | (v28 << 8);
        goto LABEL_20;
      }
      if (v28 != 1)
      {
        unint64_t v30 = v28 - 2;
        if (v29 < v28 - 2) {
          unint64_t v30 = v18 - 1;
        }
        if (v30 >= v18 + 0x7FFFFFFFFFFFFFFFLL) {
          unint64_t v30 = v18 + 0x7FFFFFFFFFFFFFFFLL;
        }
        unint64_t v31 = v30 + 1;
        if (v31 >= 5)
        {
          uint64_t v33 = v31 & 3;
          if ((v31 & 3) == 0) {
            uint64_t v33 = 4;
          }
          unint64_t v34 = v31 - v33;
          uint64_t v32 = v34 + 1;
          int64x2_t v35 = 0uLL;
          v36.i64[0] = 0;
          v36.i64[1] = v18 - 1;
          v37.i64[0] = -1;
          v37.i64[1] = -1;
          do
          {
            int64x2_t v36 = vaddq_s64(v36, v37);
            int64x2_t v35 = vaddq_s64(v35, v37);
            v34 -= 4;
          }
          while (v34);
          unint64_t v29 = vaddvq_s64(vaddq_s64(vzip1q_s64(v36, v35), vzip2q_s64(v36, v35)));
        }
        else
        {
          uint64_t v32 = 1;
        }
        while (v18 + 0x8000000000000000 != v32)
        {
          if (v18 == v32)
          {
            uint64_t v28 = v18;
            goto LABEL_65;
          }
          ++v32;
          --v29;
          if (v28 == v32) {
            goto LABEL_64;
          }
        }
        goto LABEL_91;
      }
    }
    else
    {
      unint64_t v29 = v18;
    }
LABEL_64:
    if (v29) {
      goto LABEL_93;
    }
    goto LABEL_65;
  }
  uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
  uint64_t v18 = v2;
  uint64_t v19 = v6;
  while (1)
  {
    uint64_t v21 = *(unsigned __int16 *)(v19 + 16);
    if (*(_WORD *)(v19 + 16)) {
      break;
    }
LABEL_25:
    if (v18) {
      goto LABEL_82;
    }
LABEL_26:
    char v20 = (4 * *(unsigned char *)(v19 + 18) + 8) & 0x3C;
    uint64_t v17 = ((-15 << v20) - 1) & v17 | (v21 << v20);
    uint64_t v5 = *(void *)(v19 + 24 + 24 * v21);
    swift_unknownObjectRetain();
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
    uint64_t v19 = v5;
    if (!*(unsigned char *)(v5 + 18)) {
      goto LABEL_43;
    }
  }
  uint64_t v22 = *(void *)(v19 + 32);
  BOOL v23 = __OFSUB__(v18, v22);
  uint64_t v24 = v18 - v22;
  if (v23) {
    goto LABEL_83;
  }
  if (__OFADD__(v24, 1)) {
    goto LABEL_84;
  }
  if (v24 + 1 <= 0)
  {
    uint64_t v21 = 0;
    goto LABEL_26;
  }
  if (v21 == 1)
  {
    uint64_t v18 = v24;
    goto LABEL_25;
  }
  uint64_t v25 = (uint64_t *)(v19 + 56);
  uint64_t v26 = 1;
  while (1)
  {
    uint64_t v27 = *v25;
    v25 += 3;
    uint64_t v18 = v24 - v27;
    if (__OFSUB__(v24, v27)) {
      break;
    }
    if (__OFADD__(v18, 1)) {
      goto LABEL_81;
    }
    if (v18 + 1 < 1)
    {
      uint64_t v21 = v26;
      uint64_t v18 = v24;
      goto LABEL_26;
    }
    ++v26;
    uint64_t v24 = v18;
    if (v21 == v26) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
  return result;
}

uint64_t AttributedString.Guts.init(string:runs:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  int v12 = BigString.isEmpty.getter();
  if (a2)
  {
    unint64_t v13 = swift_unknownObjectRetain_n();
    specialized Rope._endPath.getter(v13);
    uint64_t result = swift_unknownObjectRelease_n();
    if ((((a4 == 0) ^ v12) & 1) == 0)
    {
LABEL_3:
      long long v15 = a1[1];
      *(_OWORD *)(v6 + 16) = *a1;
      *(_OWORD *)(v6 + 32) = v15;
      *(_OWORD *)(v6 + 48) = a1[2];
      *(void *)(v6 + 64) = a2;
      *(void *)(v6 + 72) = a3;
      *(void *)(v6 + 80) = a4;
      *(void *)(v6 + 88) = a5;
      return v6;
    }
  }
  else
  {
    unint64_t v16 = swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v16);
    uint64_t result = swift_unknownObjectRelease();
    if (v12) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static AttributedString.Guts.characterwiseIsEqual(_:to:)(_OWORD *a1, _OWORD *a2)
{
  long long v4 = a1[2];
  v65[0] = a1[1];
  v65[1] = v4;
  long long v66 = a1[3];
  v67[0] = v65[0];
  v67[1] = v4;
  _OWORD v67[2] = v66;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v67, (uint64_t)v68);
  outlined retain of Locale((uint64_t)v68);
  uint64_t v5 = BigString.startIndex.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  outlined release of Locale((uint64_t)v65);
  long long v12 = a1[2];
  v63[0] = a1[1];
  v63[1] = v12;
  long long v64 = a1[3];
  v69[0] = v63[0];
  v69[1] = v12;
  _OWORD v69[2] = v64;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v69, (uint64_t)v70);
  outlined retain of Locale((uint64_t)v70);
  uint64_t v13 = BigString.endIndex.getter();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  outlined release of Locale((uint64_t)v63);
  uint64_t v51 = v5;
  uint64_t v52 = v7;
  uint64_t v53 = v9;
  uint64_t v54 = v11;
  uint64_t v55 = v13;
  uint64_t v56 = v15;
  uint64_t v57 = v17;
  uint64_t v58 = v19;
  long long v20 = a2[2];
  v61[0] = a2[1];
  v61[1] = v20;
  long long v62 = a2[3];
  v71[1] = v20;
  v71[2] = v62;
  v71[0] = v61[0];
  outlined init with take of any PredicateExpression<Self.Output == B1>(v71, (uint64_t)v72);
  outlined retain of Locale((uint64_t)v72);
  uint64_t v21 = BigString.startIndex.getter();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  outlined release of Locale((uint64_t)v61);
  long long v28 = a2[2];
  v59[0] = a2[1];
  v59[1] = v28;
  long long v60 = a2[3];
  v73[0] = v59[0];
  v73[1] = v28;
  v73[2] = v60;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v73, (uint64_t)v74);
  outlined retain of Locale((uint64_t)v74);
  uint64_t v29 = BigString.endIndex.getter();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  outlined release of Locale((uint64_t)v59);
  uint64_t v43 = v21;
  uint64_t v44 = v23;
  uint64_t v45 = v25;
  uint64_t v46 = v27;
  uint64_t v47 = v29;
  uint64_t v48 = v31;
  uint64_t v49 = v33;
  uint64_t v50 = v35;
  uint64_t v36 = swift_retain();
  AttributedString.Runs.init(_:in:)(v36, v75);
  uint64_t v37 = swift_retain();
  AttributedString.Runs.init(_:in:)(v37, v77);
  v41[10] = v75[10];
  v41[11] = v75[11];
  uint64_t v42 = v76;
  v41[6] = v75[6];
  v41[7] = v75[7];
  v41[8] = v75[8];
  v41[9] = v75[9];
  v41[2] = v75[2];
  v41[3] = v75[3];
  v41[4] = v75[4];
  v41[5] = v75[5];
  v41[0] = v75[0];
  v41[1] = v75[1];
  v39[10] = v77[10];
  v39[11] = v77[11];
  uint64_t v40 = v78;
  v39[6] = v77[6];
  v39[7] = v77[7];
  v39[8] = v77[8];
  v39[9] = v77[9];
  v39[2] = v77[2];
  v39[3] = v77[3];
  v39[4] = v77[4];
  v39[5] = v77[5];
  v39[0] = v77[0];
  v39[1] = v77[1];
  LOBYTE(a2) = specialized static AttributedString.Guts._characterwiseIsEqual(_:to:)((uint64_t)v41, v39);
  outlined release of AttributedString.Runs((uint64_t)v77);
  outlined release of AttributedString.Runs((uint64_t)v75);
  return a2 & 1;
}

void *specialized AttributedString._InternalRunsSlice.updateEach(with:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (uint64_t)(result + 8);
  uint64_t v5 = result[8];
  if (v5) {
    uint64_t v7 = result[10];
  }
  else {
    uint64_t v7 = 0;
  }
  if (a2 < 0 || v7 < a2)
  {
LABEL_384:
    __break(1u);
LABEL_385:
    __break(1u);
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
LABEL_390:
    __break(1u);
LABEL_391:
    __break(1u);
LABEL_392:
    __break(1u);
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
LABEL_396:
    __break(1u);
LABEL_397:
    __break(1u);
LABEL_398:
    __break(1u);
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
    goto LABEL_402;
  }
  LOBYTE(v8) = a5;
  uint64_t v9 = a3;
  uint64_t v184 = result;
  uint64_t v10 = result[9];
  uint64_t v11 = result[11];
  uint64_t v176 = result + 8;
  if (!v5 || (*(_WORD *)(v5 + 16) ? (BOOL v12 = result[10] <= a2) : (BOOL v12 = 1), v12))
  {
    unint64_t v13 = swift_unknownObjectRetain_n();
    unint64_t v14 = specialized Rope._endPath.getter(v13);
    uint64_t result = (void *)swift_unknownObjectRelease();
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    if (!v5) {
      goto LABEL_48;
    }
    goto LABEL_13;
  }
  uint64_t v6 = *(unsigned __int8 *)(v5 + 18);
  if (*(unsigned char *)(v5 + 18))
  {
    uint64_t result = (void *)swift_unknownObjectRetain_n();
    uint64_t v16 = a2;
    uint64_t v17 = v5;
    while (1)
    {
      uint64_t v19 = *(unsigned __int16 *)(v17 + 16);
      if (!*(_WORD *)(v17 + 16)) {
        break;
      }
      uint64_t v20 = *(void *)(v17 + 40);
      BOOL v21 = __OFSUB__(v16, v20);
      uint64_t v22 = v16 - v20;
      if (v21) {
        goto LABEL_369;
      }
      if (__OFADD__(v22, 1)) {
        goto LABEL_370;
      }
      if (v22 + 1 <= 0)
      {
        uint64_t v19 = 0;
        goto LABEL_18;
      }
      if (v19 == 1)
      {
        uint64_t v16 = v22;
        break;
      }
      uint64_t v23 = (uint64_t *)(v17 + 64);
      uint64_t v24 = 1;
      while (1)
      {
        uint64_t v25 = *v23;
        v23 += 3;
        uint64_t v16 = v22 - v25;
        if (__OFSUB__(v22, v25)) {
          goto LABEL_337;
        }
        if (__OFADD__(v16, 1))
        {
LABEL_338:
          __break(1u);
LABEL_339:
          __break(1u);
LABEL_340:
          __break(1u);
LABEL_341:
          __break(1u);
LABEL_342:
          __break(1u);
LABEL_343:
          __break(1u);
LABEL_344:
          __break(1u);
LABEL_345:
          __break(1u);
LABEL_346:
          __break(1u);
LABEL_347:
          __break(1u);
LABEL_348:
          __break(1u);
LABEL_349:
          __break(1u);
LABEL_350:
          __break(1u);
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
LABEL_353:
          __break(1u);
LABEL_354:
          __break(1u);
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
          goto LABEL_363;
        }
        if (v16 + 1 < 1) {
          break;
        }
        ++v24;
        uint64_t v22 = v16;
        if (v19 == v24) {
          goto LABEL_17;
        }
      }
      uint64_t v19 = v24;
      uint64_t v16 = v22;
LABEL_18:
      char v18 = (4 * *(unsigned char *)(v17 + 18) + 8) & 0x3C;
      uint64_t v6 = ((-15 << v18) - 1) & v6 | (v19 << v18);
      uint64_t v15 = *(void *)(v17 + 24 + 24 * v19);
      swift_unknownObjectRetain();
      uint64_t result = (void *)swift_unknownObjectRelease();
      uint64_t v17 = v15;
      if (!*(unsigned char *)(v15 + 18)) {
        goto LABEL_33;
      }
    }
LABEL_17:
    if (!v16) {
      goto LABEL_18;
    }
LABEL_363:
    __break(1u);
LABEL_364:
    __break(1u);
LABEL_365:
    __break(1u);
LABEL_366:
    __break(1u);
LABEL_367:
    __break(1u);
LABEL_368:
    __break(1u);
LABEL_369:
    __break(1u);
LABEL_370:
    __break(1u);
LABEL_371:
    __break(1u);
LABEL_372:
    __break(1u);
LABEL_373:
    __break(1u);
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    __break(1u);
LABEL_380:
    __break(1u);
LABEL_381:
    __break(1u);
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
    goto LABEL_384;
  }
  uint64_t result = (void *)swift_unknownObjectRetain_n();
  uint64_t v16 = a2;
  uint64_t v15 = v5;
LABEL_33:
  uint64_t v26 = *(unsigned __int16 *)(v15 + 16);
  if (!*(_WORD *)(v15 + 16))
  {
    uint64_t v9 = a3;
    LOBYTE(v8) = a5;
    goto LABEL_46;
  }
  uint64_t v27 = *(void *)(v15 + 24);
  BOOL v21 = __OFSUB__(v16, v27);
  uint64_t v28 = v16 - v27;
  uint64_t v9 = a3;
  LOBYTE(v8) = a5;
  if (v21)
  {
LABEL_403:
    __break(1u);
    goto LABEL_404;
  }
  if (!__OFADD__(v28, 1))
  {
    if (v28 + 1 <= 0)
    {
      uint64_t v26 = 0;
      goto LABEL_47;
    }
    if (v26 != 1)
    {
      uint64_t v29 = (uint64_t *)(v15 + 48);
      uint64_t v30 = 1;
      while (1)
      {
        uint64_t v31 = *v29;
        v29 += 3;
        uint64_t v16 = v28 - v31;
        if (__OFSUB__(v28, v31)) {
          goto LABEL_391;
        }
        if (__OFADD__(v16, 1)) {
          goto LABEL_393;
        }
        if (v16 + 1 < 1) {
          goto LABEL_327;
        }
        ++v30;
        uint64_t v28 = v16;
        if (v26 == v30) {
          goto LABEL_46;
        }
      }
    }
    uint64_t v16 = v28;
LABEL_46:
    if (v16)
    {
LABEL_402:
      __break(1u);
      goto LABEL_403;
    }
LABEL_47:
    while (2)
    {
      swift_unknownObjectRelease();
      uint64_t result = (void *)swift_unknownObjectRelease();
      unint64_t v14 = v6 & 0xFFFFFFFFFFFFF0FFLL | (v26 << 8);
      uint64_t v6 = (uint64_t)v176;
      if (v5)
      {
LABEL_13:
        swift_unknownObjectRetain();
        uint64_t v178 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v14, v15, v5, v10);
        uint64_t result = (void *)swift_unknownObjectRelease_n();
      }
      else
      {
LABEL_48:
        uint64_t v178 = 0;
      }
      uint64_t v5 = a2;
      BOOL v21 = __OFSUB__(a2, v16);
      uint64_t v32 = a2 - v16;
      if (v21) {
        goto LABEL_385;
      }
      char v171 = v8 & 1;
      unint64_t v33 = v14;
      while (1)
      {
        uint64_t v10 = *(void *)v6;
        unint64_t v179 = v33;
        if (v5 != v9)
        {
          if (v10)
          {
            unint64_t v39 = v184;
            uint64_t v40 = v184[10];
          }
          else
          {
            uint64_t v40 = 0;
            unint64_t v39 = v184;
          }
          goto LABEL_104;
        }
        if (!v10)
        {
          if (v5 > 0) {
            goto LABEL_371;
          }
          uint64_t v9 = 0;
          goto LABEL_102;
        }
        uint64_t v8 = v184[10];
        if (v8 < v5) {
          goto LABEL_360;
        }
        uint64_t v36 = *(unsigned __int8 *)(v10 + 18);
        BOOL v37 = !*(_WORD *)(v10 + 16) || v8 <= v5;
        uint64_t v180 = v184[9];
        uint64_t v174 = v184[11];
        if (!v37) {
          break;
        }
        unint64_t v38 = ((-15 << ((4 * v36 + 8) & 0x3C)) - 1) & v36 | ((unint64_t)*(unsigned __int16 *)(v10 + 16) << ((4 * v36 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v9 = 0;
        uint64_t v5 = 0;
LABEL_101:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v174, v38, v5, v10, v180);
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        uint64_t v5 = a2;
        unint64_t v33 = v179;
LABEL_102:
        uint64_t v40 = v5 - v9;
        unint64_t v39 = v184;
        if (__OFSUB__(v5, v9)) {
          goto LABEL_349;
        }
        uint64_t v9 = a3;
LABEL_104:
        if (v32 >= v40) {
          return result;
        }
        if (v11 != v39[11]) {
          goto LABEL_339;
        }
        if (v15)
        {
          uint64_t v53 = (void *)(v15 + 24 * ((v33 >> ((4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C)) & 0xF));
          uint64_t v55 = v53[4];
          uint64_t v54 = v53[5];
          unint64_t v56 = v53[3];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
        }
        else
        {
          uint64_t v57 = v39[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v33, v57);
          uint64_t v55 = v58;
          uint64_t v54 = v59;
          uint64_t result = (void *)swift_unknownObjectRelease();
          if (v11 != v39[11]) {
            goto LABEL_359;
          }
          uint64_t v60 = v184[8];
          swift_unknownObjectRetain();
          unint64_t v56 = specialized Rope._Node.subscript.getter(v33, v60);
          unint64_t v39 = v184;
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        uint64_t v61 = v32 + v56;
        if (__OFADD__(v32, v56)) {
          goto LABEL_340;
        }
        *(void *)&long long v195 = v55;
        *((void *)&v195 + 1) = v54;
        if (v32 >= v9) {
          uint64_t v62 = v9;
        }
        else {
          uint64_t v62 = v32;
        }
        if (v32 >= a2) {
          uint64_t v63 = v62;
        }
        else {
          uint64_t v63 = a2;
        }
        if (v61 <= a2) {
          uint64_t v64 = a2;
        }
        else {
          uint64_t v64 = v61;
        }
        if (v61 <= v9) {
          uint64_t v65 = v64;
        }
        else {
          uint64_t v65 = v9;
        }
        if (v63 == v65) {
          goto LABEL_341;
        }
        uint64_t v186 = v32;
        if (v63 != v32 || v65 != v61)
        {
          LOBYTE(v192) = v171;
          uint64_t result = (void *)specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(a4, (char *)&v192);
          if (__OFSUB__(v65, v63)) {
            goto LABEL_351;
          }
          long long v81 = v39;
          uint64_t v10 = *((void *)&v195 + 1);
          uint64_t v82 = v195;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v63, v65, v65 - v63, v82, v10);
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          uint64_t v5 = v81[8];
          uint64_t v11 = v81[10];
          if (v5) {
            uint64_t v83 = v11;
          }
          else {
            uint64_t v83 = 0;
          }
          if (v32 < 0 || v83 < v32) {
            goto LABEL_353;
          }
          uint64_t v8 = v184[9];
          uint64_t v15 = v184[11];
          if (v5 && *(_WORD *)(v5 + 16) && v32 < v11)
          {
            uint64_t v84 = *(unsigned __int8 *)(v5 + 18);
            if (*(unsigned char *)(v5 + 18))
            {
              uint64_t result = (void *)swift_unknownObjectRetain_n();
              uint64_t v9 = v32;
              uint64_t v6 = v5;
              while (1)
              {
                uint64_t v28 = *(unsigned __int16 *)(v6 + 16);
                if (!*(_WORD *)(v6 + 16)) {
                  goto LABEL_148;
                }
                uint64_t v86 = *(void *)(v6 + 40);
                BOOL v21 = __OFSUB__(v9, v86);
                uint64_t v30 = v9 - v86;
                if (v21) {
                  goto LABEL_332;
                }
                if (__OFADD__(v30, 1)) {
                  goto LABEL_333;
                }
                if (v30 + 1 <= 0)
                {
                  uint64_t v28 = 0;
                }
                else
                {
                  if (v28 == 1)
                  {
                    uint64_t v9 = v30;
LABEL_148:
                    if (v9) {
                      goto LABEL_329;
                    }
                    goto LABEL_149;
                  }
                  uint64_t v87 = (uint64_t *)(v6 + 64);
                  uint64_t v88 = 1;
                  while (1)
                  {
                    uint64_t v89 = *v87;
                    v87 += 3;
                    uint64_t v9 = v30 - v89;
                    if (__OFSUB__(v30, v89)) {
                      goto LABEL_325;
                    }
                    if (__OFADD__(v9, 1)) {
                      goto LABEL_326;
                    }
                    if (v9 + 1 < 1) {
                      break;
                    }
                    ++v88;
                    uint64_t v30 = v9;
                    if (v28 == v88) {
                      goto LABEL_148;
                    }
                  }
                  uint64_t v28 = v88;
                  uint64_t v9 = v30;
                }
LABEL_149:
                char v85 = (4 * *(unsigned char *)(v6 + 18) + 8) & 0x3C;
                uint64_t v84 = ((-15 << v85) - 1) & v84 | (v28 << v85);
                long long v68 = *(void **)(v6 + 24 + 24 * v28);
                swift_unknownObjectRetain();
                uint64_t result = (void *)swift_unknownObjectRelease();
                uint64_t v6 = (uint64_t)v68;
                if (!*((unsigned char *)v68 + 18)) {
                  goto LABEL_204;
                }
              }
            }
            uint64_t result = (void *)swift_unknownObjectRetain_n();
            uint64_t v9 = v32;
            long long v68 = (void *)v5;
LABEL_204:
            uint64_t v126 = *((unsigned __int16 *)v68 + 8);
            if (*((_WORD *)v68 + 8))
            {
              uint64_t v127 = v68[3];
              BOOL v21 = __OFSUB__(v9, v127);
              uint64_t v128 = v9 - v127;
              if (v21) {
                goto LABEL_379;
              }
              if (__OFADD__(v128, 1)) {
                goto LABEL_380;
              }
              if (v128 + 1 <= 0)
              {
                uint64_t v126 = 0;
              }
              else
              {
                if (v126 == 1)
                {
                  uint64_t v9 = v128;
                  goto LABEL_221;
                }
                unint64_t v132 = v68 + 6;
                uint64_t v133 = 1;
                while (1)
                {
                  uint64_t v134 = *v132;
                  v132 += 3;
                  uint64_t v9 = v128 - v134;
                  if (__OFSUB__(v128, v134)) {
                    goto LABEL_357;
                  }
                  if (__OFADD__(v9, 1)) {
                    goto LABEL_358;
                  }
                  if (v9 + 1 < 1) {
                    break;
                  }
                  ++v133;
                  uint64_t v128 = v9;
                  if (v126 == v133) {
                    goto LABEL_221;
                  }
                }
                uint64_t v126 = v133;
                uint64_t v9 = v128;
              }
            }
            else
            {
LABEL_221:
              if (v9) {
                goto LABEL_374;
              }
            }
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v91 = v84 & 0xFFFFFFFFFFFFF0FFLL | (v126 << 8);
LABEL_164:
            swift_unknownObjectRetain();
            uint64_t v92 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v15, v91, (uint64_t)v68, v5, v8);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = (void *)swift_unknownObjectRelease_n();
          }
          else
          {
            unint64_t v90 = swift_unknownObjectRetain_n();
            unint64_t v91 = specialized Rope._endPath.getter(v90);
            swift_unknownObjectRelease();
            long long v68 = 0;
            uint64_t v9 = 0;
            if (v5) {
              goto LABEL_164;
            }
            swift_bridgeObjectRelease();
            uint64_t result = (void *)swift_bridgeObjectRelease();
            uint64_t v92 = 0;
          }
          uint64_t v104 = v184;
          BOOL v21 = __OFSUB__(v186, v9);
          v186 -= v9;
          if (v21) {
            goto LABEL_354;
          }
          uint64_t v9 = a3;
          goto LABEL_226;
        }
        if (v11 != v39[11]) {
          goto LABEL_350;
        }
        if (!*(void *)v6) {
          goto LABEL_405;
        }
        specialized Rope._Node._prepareModify(at:)(v179, (uint64_t)&v196);
        v207[0] = v197;
        long long v192 = v196;
        long long v193 = v197;
        long long v194 = v198;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)v207);
        uint64_t result = (void *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)v207 + 8);
        long long v193 = MEMORY[0x1E4FBC868];
        v39[11] = v11 + 1;
        if (!v39[8]) {
          goto LABEL_406;
        }
        specialized Rope._Node._finalizeModify(_:)(&v189, &v192);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        LOBYTE(v192) = v171;
        uint64_t result = (void *)specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(a4, (char *)&v192);
        if (v11 + 1 != v39[11]) {
          goto LABEL_352;
        }
        if (!*(void *)v6) {
          goto LABEL_407;
        }
        specialized Rope._Node._prepareModify(at:)(v179, (uint64_t)&v199);
        uint64_t v205 = v200;
        uint64_t v206 = v201;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v205);
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v206);
        long long v192 = v199;
        long long v194 = v202;
        uint64_t v66 = *((void *)&v195 + 1);
        uint64_t result = (void *)v195;
        long long v193 = v195;
        uint64_t v67 = v11 + 2;
        v39[11] = v11 + 2;
        if (!v39[8]) {
          goto LABEL_408;
        }
        uint64_t v175 = (uint64_t)result;
        swift_bridgeObjectRetain_n();
        uint64_t v173 = v66;
        swift_bridgeObjectRetain_n();
        long long v68 = specialized Rope._Node._finalizeModify(_:)(v188, &v192);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v69 = v39[8];
        uint64_t v70 = v39[9];
        uint64_t v71 = v39[10];
        uint64_t v72 = v39[11];
        *(void *)&long long v192 = v67;
        *((void *)&v192 + 1) = v179;
        *(void *)&long long v193 = v68;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(after:)(&v192, v69, v70, v71, v72);
        swift_unknownObjectRelease();
        long long v73 = v192;
        uint64_t v74 = v193;
        unint64_t v75 = swift_unknownObjectRetain();
        unint64_t v76 = specialized Rope._endPath.getter(v75);
        uint64_t result = (void *)swift_unknownObjectRelease();
        uint64_t v181 = v67;
        if (*((void *)&v73 + 1) >= v76)
        {
          uint64_t v93 = v176;
          uint64_t v9 = a3;
        }
        else
        {
          if ((void)v73 != v39[11]) {
            goto LABEL_364;
          }
          if (v74)
          {
            uint64_t v77 = v74 + 24 * ((*((void *)&v73 + 1) >> ((4 * *(unsigned char *)(v74 + 18) + 8) & 0x3C)) & 0xFLL);
            uint64_t v78 = *(void *)(v77 + 32);
            uint64_t v79 = *(void *)(v77 + 40);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v9 = a3;
            long long v80 = v184;
          }
          else
          {
            long long v80 = v184;
            uint64_t v94 = v184[8];
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(*((unint64_t *)&v73 + 1), v94);
            uint64_t v78 = v95;
            uint64_t v79 = v96;
            swift_unknownObjectRelease();
            uint64_t v9 = a3;
          }
          uint64_t v93 = v176;
          if (specialized static Dictionary<>.== infix(_:_:)(v78, v175))
          {
            char v97 = specialized static Set.== infix(_:_:)(v79, v173);
            swift_bridgeObjectRelease();
            uint64_t result = (void *)swift_bridgeObjectRelease();
            if (v97)
            {
              unint64_t v98 = specialized Rope._remove(at:)((uint64_t)&v192, v67, v179);
              unint64_t v99 = v80[8];
              uint64_t v100 = v80[11];
              if (v98 < specialized Rope._endPath.getter(v99) && *(unsigned char *)(v99 + 18))
              {
                uint64_t v101 = (v98 >> ((4 * *(unsigned char *)(v99 + 18) + 8) & 0x3C)) & 0xF;
                swift_unknownObjectRetain();
                specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v99 + 24, v101, v98);
                swift_unknownObjectRelease();
              }
              uint64_t v102 = v192;
              swift_bridgeObjectRelease();
              uint64_t result = (void *)swift_bridgeObjectRelease();
              if (v100 != v80[11]) {
                goto LABEL_386;
              }
              if (!*v176) {
                goto LABEL_409;
              }
              uint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(v98, (uint64_t)v203);
              long long v192 = v203[0];
              long long v193 = v203[1];
              long long v194 = v203[2];
              if (__OFADD__(*((void *)&v203[0] + 1), v102)) {
                goto LABEL_387;
              }
              *((void *)&v192 + 1) = *((void *)&v203[0] + 1) + v102;
              uint64_t v181 = v100 + 1;
              v80[11] = v100 + 1;
              if (!v80[8]) {
                goto LABEL_410;
              }
              long long v68 = specialized Rope._Node._finalizeModify(_:)(v188, &v192);
              swift_bridgeObjectRelease();
              uint64_t result = (void *)swift_bridgeObjectRelease();
              uint64_t v92 = v178;
              unint64_t v103 = *v176;
              if (!*v176) {
                goto LABEL_181;
              }
LABEL_180:
              unint64_t v103 = *(unsigned __int8 *)(v103 + 18);
              goto LABEL_181;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t result = (void *)swift_bridgeObjectRelease();
          }
        }
        uint64_t v92 = v178;
        unint64_t v98 = v179;
        unint64_t v103 = *v93;
        if (*v93) {
          goto LABEL_180;
        }
LABEL_181:
        uint64_t v104 = v184;
        if (v98 <= v103)
        {
          unint64_t v91 = v98;
          swift_bridgeObjectRelease_n();
          uint64_t result = (void *)swift_bridgeObjectRelease_n();
          uint64_t v15 = v181;
          goto LABEL_226;
        }
        uint64_t v105 = v184[8];
        uint64_t v106 = v184[11];
        *(void *)&long long v192 = v181;
        *((void *)&v192 + 1) = v98;
        *(void *)&long long v193 = v68;
        if (v181 != v106) {
          goto LABEL_365;
        }
        unint64_t v91 = v98;
        if (v105)
        {
          unint64_t v107 = *(unsigned __int8 *)(v105 + 18);
          uint64_t result = (void *)swift_unknownObjectRetain();
          if (v98 <= v107) {
            goto LABEL_366;
          }
        }
        else if (!v98)
        {
          goto LABEL_366;
        }
        char v108 = (4 * *((unsigned char *)v68 + 18) + 8) & 0x3C;
        if (((v98 >> v108) & 0xF) != 0)
        {
          unint64_t v109 = ((((v98 >> v108) & 0xF) - 1) << v108) | ((-15 << v108) - 1) & v98;
          uint64_t result = (void *)swift_unknownObjectRelease();
          uint64_t v110 = v68;
          uint64_t v111 = v181;
        }
        else
        {
          swift_unknownObjectRetain();
          char v112 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v192, v105);
          uint64_t result = (void *)swift_unknownObjectRelease_n();
          if ((v112 & 1) == 0) {
            goto LABEL_377;
          }
          unint64_t v109 = *((void *)&v192 + 1);
          uint64_t v111 = v192;
          uint64_t v110 = (void *)v193;
        }
        if (v111 != v184[11]) {
          goto LABEL_367;
        }
        if (v110)
        {
          uint64_t v113 = &v110[3 * ((v109 >> ((4 * *((unsigned char *)v110 + 18) + 8) & 0x3C)) & 0xF)];
          uint64_t v115 = v113[4];
          uint64_t v114 = v113[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v116 = v184[8];
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v109, v116);
          uint64_t v115 = v117;
          uint64_t v114 = v118;
          swift_unknownObjectRelease();
        }
        if ((specialized static Dictionary<>.== infix(_:_:)(v115, v175) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_202:
          uint64_t v15 = v181;
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          goto LABEL_226;
        }
        char v119 = specialized static Set.== infix(_:_:)(v114, v173);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v119 & 1) == 0) {
          goto LABEL_202;
        }
        unint64_t v120 = specialized Rope._remove(at:)((uint64_t)&v192, v181, v91);
        unint64_t v121 = v184[8];
        uint64_t v122 = v184[11];
        if (v120 >= specialized Rope._endPath.getter(v121))
        {
          unint64_t v121 = 0;
          uint64_t v123 = v186;
        }
        else
        {
          uint64_t v123 = v186;
          if (*(unsigned char *)(v121 + 18))
          {
            uint64_t v124 = (v120 >> ((4 * *(unsigned char *)(v121 + 18) + 8) & 0x3C)) & 0xF;
            swift_unknownObjectRetain();
            uint64_t v125 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v121 + 24, v124, v120);
            swift_unknownObjectRelease();
            unint64_t v121 = v125;
          }
        }
        uint64_t v189 = v122;
        unint64_t v190 = v120;
        unint64_t v191 = v121;
        uint64_t v129 = v192;
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        if (v122 != v184[11]) {
          goto LABEL_388;
        }
        uint64_t v130 = v184[8];
        if (v130)
        {
          unint64_t v131 = *(unsigned __int8 *)(v130 + 18);
          uint64_t result = (void *)swift_unknownObjectRetain();
          if (v120 <= v131) {
            goto LABEL_389;
          }
        }
        else if (!v120)
        {
          goto LABEL_389;
        }
        if (v121 && (char v165 = (4 * *(unsigned char *)(v121 + 18) + 8) & 0x3C, ((v120 >> v165) & 0xF) != 0))
        {
          unint64_t v190 = ((((v120 >> v165) & 0xF) - 1) << v165) | ((-15 << v165) - 1) & v120;
          uint64_t result = (void *)swift_unknownObjectRelease();
          uint64_t v9 = a3;
        }
        else
        {
          swift_unknownObjectRetain();
          char v166 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v189, v130);
          uint64_t result = (void *)swift_unknownObjectRelease_n();
          uint64_t v9 = a3;
          if ((v166 & 1) == 0) {
            goto LABEL_399;
          }
          uint64_t v122 = v189;
        }
        if (v122 != v184[11]) {
          goto LABEL_390;
        }
        if (!*v176) {
          goto LABEL_411;
        }
        unint64_t v91 = v190;
        uint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(v190, (uint64_t)v204);
        long long v192 = v204[0];
        long long v193 = v204[1];
        long long v194 = v204[2];
        BOOL v21 = __OFSUB__(v123, *((void *)&v204[0] + 1));
        uint64_t v167 = v123 - *((void *)&v204[0] + 1);
        if (v21) {
          goto LABEL_392;
        }
        if (__OFADD__(*((void *)&v204[0] + 1), v129)) {
          goto LABEL_394;
        }
        uint64_t v186 = v167;
        *((void *)&v192 + 1) = *((void *)&v204[0] + 1) + v129;
        uint64_t v168 = v122 + 1;
        v184[11] = v168;
        if (!v184[8]) {
          goto LABEL_412;
        }
        long long v68 = specialized Rope._Node._finalizeModify(_:)(v188, &v192);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        uint64_t v92 = v178 - 1;
        if (__OFSUB__(v178, 1)) {
          goto LABEL_395;
        }
        uint64_t v15 = v168;
LABEL_226:
        uint64_t v135 = v104[8];
        uint64_t v136 = v104[11];
        *(void *)&long long v192 = v15;
        *((void *)&v192 + 1) = v91;
        *(void *)&long long v193 = v68;
        BOOL v21 = __OFADD__(v92, 1);
        uint64_t v137 = v92 + 1;
        if (v21) {
          goto LABEL_342;
        }
        if (v15 != v136) {
          goto LABEL_343;
        }
        if (v68)
        {
          unint64_t v138 = v68[3 * ((v91 >> ((4 * *((unsigned char *)v68 + 18) + 8) & 0x3C)) & 0xF) + 3];
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_unknownObjectRetain();
          unint64_t v138 = specialized Rope._Node.subscript.getter(v91, v135);
        }
        swift_bridgeObjectRelease();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        BOOL v21 = __OFADD__(v186, v138);
        uint64_t v187 = v186 + v138;
        if (v21) {
          goto LABEL_344;
        }
        if (v135)
        {
          unint64_t v139 = ((-15 << ((4 * *(unsigned char *)(v135 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v135 + 18) | ((unint64_t)*(unsigned __int16 *)(v135 + 16) << ((4 * *(unsigned char *)(v135 + 18) + 8) & 0x3C));
          uint64_t result = (void *)swift_unknownObjectRetain();
        }
        else
        {
          unint64_t v139 = 0;
        }
        uint64_t v5 = a2;
        if (v91 >= v139) {
          goto LABEL_345;
        }
        uint64_t v178 = v137;
        if (v68
          && (char v140 = (4 * *((unsigned char *)v68 + 18) + 8) & 0x3C,
              unint64_t v141 = ((v91 >> v140) & 0xF) + 1,
              v141 < *((unsigned __int16 *)v68 + 8)))
        {
          unint64_t v33 = (v141 << v140) | ((-15 << v140) - 1) & v91;
          uint64_t result = (void *)swift_unknownObjectRelease_n();
          uint64_t v6 = (uint64_t)v176;
          uint64_t v32 = v187;
        }
        else
        {
          uint64_t v182 = v15;
          int v142 = *(unsigned __int8 *)(v135 + 18);
          char v143 = (4 * v142 + 8) & 0x3C;
          uint64_t v189 = (v91 >> v143) & 0xF;
          if (v142)
          {
            swift_unknownObjectRetain();
            char v144 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v135 + 24, &v189, (uint64_t)&v192, v135, v142);
            uint64_t result = (void *)swift_unknownObjectRelease();
            uint64_t v32 = v187;
            if ((v144 & 1) == 0) {
              goto LABEL_244;
            }
            uint64_t result = (void *)swift_unknownObjectRelease_n();
            unint64_t v33 = *((void *)&v192 + 1);
            uint64_t v6 = (uint64_t)v176;
          }
          else
          {
            unint64_t v145 = ((v91 >> v143) & 0xF) + 1;
            uint64_t v32 = v187;
            if (v145 >= *(unsigned __int16 *)(v135 + 16))
            {
LABEL_244:
              uint64_t v6 = (uint64_t)v176;
              if (v135)
              {
                int v146 = *(unsigned __int8 *)(v135 + 18);
                uint64_t v147 = *(unsigned __int16 *)(v135 + 16);
                uint64_t result = (void *)swift_unknownObjectRelease_n();
                unint64_t v33 = ((-15 << ((4 * v146 + 8) & 0x3C)) - 1) & v146 | (unint64_t)(v147 << ((4 * v146 + 8) & 0x3C));
              }
              else
              {
                unint64_t v33 = 0;
              }
              *(void *)&long long v192 = v182;
              *((void *)&v192 + 1) = v33;
              *(void *)&long long v193 = 0;
              goto LABEL_248;
            }
            unint64_t v33 = (v145 << v143) | ((-15 << v143) - 1) & v91;
            *((void *)&v192 + 1) = v33;
            uint64_t result = (void *)swift_unknownObjectRelease_n();
            *(void *)&long long v193 = v135;
            uint64_t v6 = (uint64_t)v176;
          }
        }
LABEL_248:
        uint64_t v11 = v192;
        uint64_t v15 = v193;
        if (v32 >= v9)
        {
          uint64_t v148 = *(void *)v6;
          if (a2 == v9)
          {
            uint64_t v11 = v104[11];
            if (v148)
            {
              uint64_t v149 = v104[10];
              if (v149 < a2) {
                goto LABEL_372;
              }
              uint64_t v150 = v104[9];
              uint64_t v151 = *(unsigned __int8 *)(v148 + 18);
              if (*(_WORD *)(v148 + 16) && v149 > a2)
              {
                if (*(unsigned char *)(v148 + 18))
                {
                  uint64_t result = (void *)swift_unknownObjectRetain_n();
                  uint64_t v35 = a2;
                  uint64_t v152 = v148;
                  while (1)
                  {
                    uint64_t v154 = *(unsigned __int16 *)(v152 + 16);
                    if (!*(_WORD *)(v152 + 16)) {
                      goto LABEL_257;
                    }
                    uint64_t v155 = *(void *)(v152 + 40);
                    uint64_t v156 = v35 - v155;
                    if (__OFSUB__(v35, v155)) {
                      goto LABEL_347;
                    }
                    if (__OFADD__(v156, 1)) {
                      goto LABEL_348;
                    }
                    if (v156 + 1 <= 0)
                    {
                      uint64_t v154 = 0;
                    }
                    else
                    {
                      if (v154 == 1)
                      {
                        v35 -= v155;
LABEL_257:
                        if (v35) {
                          goto LABEL_346;
                        }
                        goto LABEL_258;
                      }
                      uint64_t v157 = *(void *)(v152 + 64);
                      BOOL v21 = __OFSUB__(v156, v157);
                      uint64_t v158 = v156 - v157;
                      if (v21) {
                        goto LABEL_361;
                      }
                      if (__OFADD__(v158, 1)) {
                        goto LABEL_362;
                      }
                      if (v158 + 1 >= 1)
                      {
                        if (v154 != 2)
                        {
                          unsigned __int8 v159 = (void *)(v152 + 88);
                          uint64_t v160 = 2;
                          while (v154 != v160)
                          {
                            uint64_t v35 = v158 - *v159;
                            if (__OFSUB__(v158, *v159)) {
                              goto LABEL_335;
                            }
                            if (__OFADD__(v35, 1)) {
                              goto LABEL_336;
                            }
                            if (v35 + 1 < 1)
                            {
                              uint64_t v154 = v160;
                              uint64_t v35 = v158;
                              goto LABEL_258;
                            }
                            ++v160;
                            v159 += 3;
                            uint64_t v158 = v35;
                            if (v154 == v160) {
                              goto LABEL_257;
                            }
                          }
LABEL_334:
                          __break(1u);
LABEL_335:
                          __break(1u);
LABEL_336:
                          __break(1u);
LABEL_337:
                          __break(1u);
                          goto LABEL_338;
                        }
                        uint64_t v35 = v158;
                        goto LABEL_257;
                      }
                      uint64_t v154 = 1;
                      uint64_t v35 = v156;
                    }
LABEL_258:
                    char v153 = (4 * *(unsigned char *)(v152 + 18) + 8) & 0x3C;
                    uint64_t v151 = ((-15 << v153) - 1) & v151 | (v154 << v153);
                    uint64_t v15 = *(void *)(v152 + 24 + 24 * v154);
                    swift_unknownObjectRetain();
                    uint64_t result = (void *)swift_unknownObjectRelease();
                    uint64_t v152 = v15;
                    if (!*(unsigned char *)(v15 + 18)) {
                      goto LABEL_284;
                    }
                  }
                }
                uint64_t result = (void *)swift_unknownObjectRetain_n();
                uint64_t v151 = 0;
                uint64_t v35 = a2;
                uint64_t v15 = v148;
LABEL_284:
                uint64_t v161 = *(unsigned __int16 *)(v15 + 16);
                if (*(_WORD *)(v15 + 16))
                {
                  uint64_t v162 = *(void *)(v15 + 24);
                  BOOL v21 = __OFSUB__(v35, v162);
                  uint64_t v163 = v35 - v162;
                  if (v21) {
                    goto LABEL_397;
                  }
                  if (__OFADD__(v163, 1)) {
                    goto LABEL_398;
                  }
                  if (v163 + 1 <= 0)
                  {
                    uint64_t v161 = 0;
                    goto LABEL_321;
                  }
                  if (v161 != 1)
                  {
                    uint64_t v164 = *(void *)(v15 + 48);
                    uint64_t v35 = v163 - v164;
                    if (__OFSUB__(v163, v164)) {
                      goto LABEL_400;
                    }
                    if (__OFADD__(v35, 1)) {
                      goto LABEL_401;
                    }
                    if (v35 + 1 >= 1)
                    {
                      if (v161 != 2)
                      {
                        unint64_t v169 = (void *)(v15 + 72);
                        uint64_t v170 = 2;
                        while (v161 != v170)
                        {
                          uint64_t v163 = v35 - *v169;
                          if (__OFSUB__(v35, *v169)) {
                            goto LABEL_382;
                          }
                          if (__OFADD__(v163, 1)) {
                            goto LABEL_383;
                          }
                          if (v163 + 1 < 1)
                          {
                            uint64_t v161 = v170;
                            goto LABEL_321;
                          }
                          ++v170;
                          v169 += 3;
                          uint64_t v35 = v163;
                          if (v161 == v170) {
                            goto LABEL_294;
                          }
                        }
                        goto LABEL_381;
                      }
                      goto LABEL_293;
                    }
                    uint64_t v161 = 1;
                    uint64_t v35 = v163;
LABEL_321:
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    unint64_t v34 = v151 & 0xFFFFFFFFFFFFF0FFLL | (v161 << 8);
LABEL_52:
                    swift_unknownObjectRetain();
                    uint64_t v178 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v34, v15, v148, v150);
                    uint64_t result = (void *)swift_unknownObjectRelease_n();
                    uint64_t v5 = a2;
                    unint64_t v33 = v34;
                    goto LABEL_53;
                  }
                }
                else
                {
LABEL_293:
                  uint64_t v163 = v35;
                }
LABEL_294:
                if (v163) {
                  goto LABEL_396;
                }
                uint64_t v35 = 0;
                goto LABEL_321;
              }
              unint64_t v34 = ((-15 << ((4 * v151 + 8) & 0x3C)) - 1) & v151 | ((unint64_t)*(unsigned __int16 *)(v148 + 16) << ((4 * v151 + 8) & 0x3C));
              swift_unknownObjectRetain();
              uint64_t v35 = 0;
              uint64_t v15 = 0;
              goto LABEL_52;
            }
            if (a2 > 0) {
              goto LABEL_378;
            }
            uint64_t v35 = 0;
            uint64_t v15 = 0;
            unint64_t v33 = 0;
            uint64_t v178 = 0;
LABEL_53:
            BOOL v21 = __OFSUB__(v5, v35);
            uint64_t v32 = v5 - v35;
            uint64_t v9 = a3;
            if (v21) {
              goto LABEL_368;
            }
          }
          else
          {
            uint64_t v32 = 0;
            uint64_t v178 = 0;
            uint64_t v15 = 0;
            unint64_t v33 = 0;
            uint64_t v11 = v104[11];
            if (v148)
            {
              uint64_t v15 = 0;
              uint64_t v32 = v104[10];
              uint64_t v178 = v104[9];
              unint64_t v33 = ((-15 << ((4 * *(unsigned char *)(v148 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v148 + 18) | ((unint64_t)*(unsigned __int16 *)(v148 + 16) << ((4 * *(unsigned char *)(v148 + 18) + 8) & 0x3C));
            }
          }
        }
      }
      if (*(unsigned char *)(v10 + 18))
      {
        uint64_t result = (void *)swift_unknownObjectRetain_n();
        uint64_t v9 = v5;
        uint64_t v41 = v10;
LABEL_73:
        uint64_t v28 = *(unsigned __int16 *)(v41 + 16);
        if (!*(_WORD *)(v41 + 16)) {
          goto LABEL_71;
        }
        uint64_t v43 = *(void *)(v41 + 40);
        BOOL v21 = __OFSUB__(v9, v43);
        uint64_t v30 = v9 - v43;
        if (v21) {
          goto LABEL_330;
        }
        if (__OFADD__(v30, 1)) {
          goto LABEL_331;
        }
        if (v30 + 1 <= 0)
        {
          uint64_t v28 = 0;
          goto LABEL_72;
        }
        if (v28 == 1)
        {
          uint64_t v9 = v30;
LABEL_71:
          if (!v9) {
            goto LABEL_72;
          }
          __break(1u);
LABEL_329:
          __break(1u);
LABEL_330:
          __break(1u);
LABEL_331:
          __break(1u);
LABEL_332:
          __break(1u);
LABEL_333:
          __break(1u);
          goto LABEL_334;
        }
        uint64_t v44 = (uint64_t *)(v41 + 64);
        uint64_t v45 = 1;
        while (1)
        {
          uint64_t v46 = *v44;
          v44 += 3;
          uint64_t v9 = v30 - v46;
          if (__OFSUB__(v30, v46)) {
            break;
          }
          if (__OFADD__(v9, 1)) {
            goto LABEL_324;
          }
          if (v9 + 1 < 1)
          {
            uint64_t v28 = v45;
            uint64_t v9 = v30;
LABEL_72:
            char v42 = (4 * *(unsigned char *)(v41 + 18) + 8) & 0x3C;
            uint64_t v36 = ((-15 << v42) - 1) & v36 | (v28 << v42);
            uint64_t v5 = *(void *)(v41 + 24 + 24 * v28);
            swift_unknownObjectRetain();
            uint64_t result = (void *)swift_unknownObjectRelease();
            uint64_t v41 = v5;
            if (!*(unsigned char *)(v5 + 18)) {
              goto LABEL_87;
            }
            goto LABEL_73;
          }
          ++v45;
          uint64_t v30 = v9;
          if (v28 == v45) {
            goto LABEL_71;
          }
        }
        __break(1u);
LABEL_324:
        __break(1u);
LABEL_325:
        __break(1u);
LABEL_326:
        __break(1u);
LABEL_327:
        uint64_t v26 = v30;
        uint64_t v16 = v28;
        continue;
      }
      break;
    }
    uint64_t result = (void *)swift_unknownObjectRetain_n();
    uint64_t v36 = 0;
    uint64_t v9 = v5;
    uint64_t v5 = v10;
LABEL_87:
    uint64_t v47 = *(unsigned __int16 *)(v5 + 16);
    if (!*(_WORD *)(v5 + 16)) {
      goto LABEL_99;
    }
    uint64_t v48 = *(void *)(v5 + 24);
    BOOL v21 = __OFSUB__(v9, v48);
    uint64_t v49 = v9 - v48;
    if (v21) {
      goto LABEL_375;
    }
    if (__OFADD__(v49, 1)) {
      goto LABEL_376;
    }
    if (v49 + 1 <= 0)
    {
      uint64_t v47 = 0;
    }
    else
    {
      if (v47 == 1)
      {
        uint64_t v9 = v49;
LABEL_99:
        if (v9) {
          goto LABEL_373;
        }
        goto LABEL_100;
      }
      uint64_t v50 = (uint64_t *)(v5 + 48);
      uint64_t v51 = 1;
      while (1)
      {
        uint64_t v52 = *v50;
        v50 += 3;
        uint64_t v9 = v49 - v52;
        if (__OFSUB__(v49, v52)) {
          goto LABEL_355;
        }
        if (__OFADD__(v9, 1)) {
          goto LABEL_356;
        }
        if (v9 + 1 < 1) {
          break;
        }
        ++v51;
        uint64_t v49 = v9;
        if (v47 == v51) {
          goto LABEL_99;
        }
      }
      uint64_t v47 = v51;
      uint64_t v9 = v49;
    }
LABEL_100:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v38 = v36 & 0xFFFFFFFFFFFFF0FFLL | (v47 << 8);
    goto LABEL_101;
  }
LABEL_404:
  __break(1u);
LABEL_405:
  __break(1u);
LABEL_406:
  __break(1u);
LABEL_407:
  __break(1u);
LABEL_408:
  __break(1u);
LABEL_409:
  __break(1u);
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
  return result;
}

void *specialized Rope._Node._finalizeModify(_:)(void *result, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = result;
  uint64_t v6 = *v2;
  uint64_t v7 = (*a2 >> ((4 * *(unsigned char *)(*v2 + 18) + 8) & 0x3C)) & 0xFLL;
  if (*(unsigned char *)(*v2 + 18))
  {
    swift_unknownObjectRetain();
    uint64_t v8 = specialized Rope._Node._finalizeModify(_:)(v27, a2);
    uint64_t result = (void *)swift_unknownObjectRelease();
    uint64_t v9 = v27[0];
    uint64_t v10 = v3[1];
    uint64_t v11 = v10 + v27[0];
    if (__OFADD__(v10, v27[0]))
    {
      __break(1u);
    }
    else
    {
      uint64_t v12 = v27[1];
      v3[1] = v11;
      uint64_t v13 = v3[2];
      BOOL v14 = __OFADD__(v13, v12);
      uint64_t v15 = v13 + v12;
      if (!v14)
      {
        void v3[2] = v15;
        uint64_t v6 = v8;
        *uint64_t v5 = v9;
        v5[1] = v12;
        return (void *)v6;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v16 = a2[4];
  BOOL v14 = __OFSUB__(1, v16);
  uint64_t v17 = 1 - v16;
  if (v14)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v18 = a2[1];
  uint64_t v19 = a2[5];
  *uint64_t result = v17;
  BOOL v14 = __OFSUB__(v18, v19);
  uint64_t v20 = v18 - v19;
  if (v14)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result[1] = v20;
  BOOL v21 = (void *)(v6 + 24 * v7);
  uint64_t result = (void *)a2[2];
  uint64_t v22 = a2[3];
  void v21[3] = v18;
  v21[4] = result;
  v21[5] = v22;
  uint64_t v23 = v3[1];
  BOOL v14 = __OFADD__(v23, v17);
  uint64_t v24 = v23 + v17;
  if (v14)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v3[1] = v24;
  uint64_t v25 = v3[2];
  BOOL v14 = __OFADD__(v25, v20);
  uint64_t v26 = v25 + v20;
  if (!v14)
  {
    void v3[2] = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (void *)v6;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node._prepareModify(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  uint64_t v6 = *v2;
  if ((result & 1) == 0)
  {
    uint64_t v6 = specialized Rope._Node.copy()(*v2);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v2 = v6;
    v2[1] = v8;
    v2[2] = v10;
  }
  if (((a1 >> ((4 * *(unsigned char *)(v6 + 18) + 8) & 0x3C)) & 0xF) >= *(unsigned __int16 *)(v6 + 16))
  {
    __break(1u);
  }
  else
  {
    if (*(unsigned char *)(v6 + 18))
    {
      swift_unknownObjectRetain();
      specialized Rope._Node._prepareModify(at:)(v17, a1);
      a1 = v17[0];
      uint64_t v11 = v17[1];
      long long v16 = v18;
      uint64_t v13 = v19;
      uint64_t v12 = v20;
      uint64_t result = swift_unknownObjectRelease();
      long long v14 = v16;
    }
    else
    {
      uint64_t v15 = v6 + 24 + 24 * ((a1 >> ((4 * *(unsigned char *)(v6 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v12 = *(void *)v15;
      long long v14 = *(_OWORD *)(v15 + 8);
      uint64_t v13 = 1;
      uint64_t v11 = *(void *)v15;
    }
    *(void *)a2 = a1;
    *(void *)(a2 + 8) = v11;
    *(_OWORD *)(a2 + 16) = v14;
    *(void *)(a2 + 32) = v13;
    *(void *)(a2 + 40) = v12;
  }
  return result;
}

uint64_t specialized Rope.formIndex(after:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*a1 != a5)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v8 = a1[1];
  swift_unknownObjectRetain();
  if (!a2)
  {
LABEL_11:
    uint64_t result = swift_unknownObjectRelease();
    goto LABEL_12;
  }
  int v9 = *(unsigned __int8 *)(a2 + 18);
  uint64_t v10 = *(unsigned __int16 *)(a2 + 16);
  uint64_t result = swift_unknownObjectRelease();
  if (v8 >= (((-15 << ((4 * v9 + 8) & 0x3C)) - 1) & v9 | (unint64_t)(v10 << ((4 * v9 + 8) & 0x3C))))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = a1[2];
  if (v12
    && (char v13 = (4 * *(unsigned char *)(v12 + 18) + 8) & 0x3C, v14 = ((v8 >> v13) & 0xF) + 1,
                                                     v14 < *(unsigned __int16 *)(v12 + 16)))
  {
    a1[1] = (v14 << v13) | ((-15 << v13) - 1) & v8;
  }
  else
  {
    swift_unknownObjectRetain();
    char v15 = specialized Rope._Node.formSuccessor(of:)((uint64_t)a1, a2);
    uint64_t result = swift_unknownObjectRelease();
    if ((v15 & 1) == 0)
    {
      unint64_t v16 = ((-15 << ((4 * *(unsigned char *)(a2 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(a2 + 18) | ((unint64_t)*(unsigned __int16 *)(a2 + 16) << ((4 * *(unsigned char *)(a2 + 18) + 8) & 0x3C));
      *a1 = a5;
      a1[1] = v16;
      a1[2] = 0;
    }
  }
  return result;
}

uint64_t specialized Rope._Node.formSuccessor(of:)(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 18);
  unint64_t v5 = *(void *)(a1 + 8);
  char v6 = (4 * v4 + 8) & 0x3C;
  unint64_t v10 = (v5 >> v6) & 0xF;
  if (v4)
  {
    swift_unknownObjectRetain();
    char v7 = specialized closure #1 in Rope._Node.formSuccessor(of:)(a2 + 24, (uint64_t *)&v10, a1, a2, v4);
    swift_unknownObjectRelease();
  }
  else
  {
    unint64_t v8 = ((v5 >> v6) & 0xF) + 1;
    if (v8 >= *(unsigned __int16 *)(a2 + 16))
    {
      char v7 = 0;
    }
    else
    {
      *(void *)(a1 + 8) = (v8 << v6) | ((-15 << v6) - 1) & v5;
      *(void *)(a1 + 16) = a2;
      char v7 = 1;
    }
  }
  return v7 & 1;
}

uint64_t AttributedString.Runs.init(_:in:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v120 = *(_OWORD *)(a1 + 16);
  long long v121 = v4;
  long long v122 = *(_OWORD *)(a1 + 48);
  swift_retain();
  BigString.unicodeScalars.getter();
  uint64_t v5 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  outlined release of Locale((uint64_t)v108);
  long long v12 = *(_OWORD *)(a1 + 32);
  long long v117 = *(_OWORD *)(a1 + 16);
  long long v118 = v12;
  long long v119 = *(_OWORD *)(a1 + 48);
  BigString.unicodeScalars.getter();
  uint64_t v13 = v11;
  uint64_t v14 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  outlined release of Locale((uint64_t)v109);
  uint64_t v100 = v20;
  uint64_t v101 = v18;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_70;
  }
  uint64_t v88 = v7;
  uint64_t v89 = v5;
  uint64_t v87 = v9;
  AttributedString.Guts.findRun(at:)((uint64_t *)&v102);
  unint64_t v96 = *((void *)&v102 + 1);
  uint64_t v97 = v102;
  uint64_t v94 = *((void *)&v104 + 1);
  uint64_t v95 = v103;
  uint64_t v92 = v106;
  uint64_t v93 = v105;
  uint64_t v90 = *((void *)&v103 + 1);
  uint64_t v91 = v107;
  long long v22 = *(_OWORD *)(a1 + 32);
  v115[0] = *(_OWORD *)(a1 + 16);
  v115[1] = v22;
  long long v116 = *(_OWORD *)(a1 + 48);
  v123[0] = v115[0];
  v123[1] = v22;
  v123[2] = v116;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v123, (uint64_t)v124);
  outlined retain of Locale((uint64_t)v124);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v115);
  uint64_t v99 = v16;
  uint64_t v86 = v13;
  uint64_t v98 = v14;
  if (static BigString.Index.== infix(_:_:)())
  {
    uint64_t v23 = v14;
    if (*(void *)(a1 + 64)) {
      uint64_t v24 = *(void *)(a1 + 72);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = *(void *)(a1 + 88);
    unint64_t v26 = swift_unknownObjectRetain();
    uint64_t v84 = v25;
    unint64_t v83 = specialized Rope._endPath.getter(v26);
    swift_release();
    swift_unknownObjectRelease();
    uint64_t v28 = v99;
    uint64_t v27 = v100;
    uint64_t result = 0;
    uint64_t v29 = v99;
    uint64_t v30 = v18;
    uint64_t v31 = v100;
LABEL_46:
    uint64_t v42 = v90;
    uint64_t v34 = v91;
    unint64_t v37 = v96;
    uint64_t v40 = v97;
    uint64_t v35 = v94;
    uint64_t v38 = v95;
    uint64_t v33 = v92;
    uint64_t v36 = v93;
    unint64_t v39 = v83;
    uint64_t v41 = v84;
    if (v24 < v90) {
      goto LABEL_71;
    }
    goto LABEL_47;
  }
  long long v32 = *(_OWORD *)(a1 + 32);
  v113[0] = *(_OWORD *)(a1 + 16);
  v113[1] = v32;
  long long v114 = *(_OWORD *)(a1 + 48);
  v125[0] = v113[0];
  v125[1] = v32;
  v125[2] = v114;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v125, (uint64_t)v126);
  outlined retain of Locale((uint64_t)v126);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v113);
  if (static BigString.Index.== infix(_:_:)())
  {
    uint64_t v29 = v16;
    swift_release();
    uint64_t v34 = v91;
    uint64_t v33 = v92;
    uint64_t v31 = v91;
    uint64_t v30 = v92;
    uint64_t v36 = v93;
    uint64_t v35 = v94;
    uint64_t v28 = v93;
    uint64_t v23 = v94;
    uint64_t v38 = v95;
    unint64_t v37 = v96;
    uint64_t result = v95;
    unint64_t v39 = v96;
    uint64_t v40 = v97;
    uint64_t v41 = v97;
    uint64_t v42 = v90;
    uint64_t v24 = v90;
    uint64_t v27 = v100;
LABEL_47:
    *a2 = a1;
    a2[1] = v42;
    a2[2] = v40;
    a2[3] = v37;
    a2[4] = v38;
    a2[5] = v35;
    a2[6] = v36;
    a2[7] = v33;
    a2[8] = v34;
    a2[9] = v24;
    a2[10] = v41;
    a2[11] = v39;
    a2[12] = result;
    a2[13] = v23;
    a2[14] = v28;
    a2[15] = v30;
    a2[16] = v31;
    a2[17] = v89;
    a2[18] = v88;
    a2[19] = v87;
    a2[20] = v86;
    a2[21] = v98;
    a2[22] = v29;
    a2[23] = v18;
    a2[24] = v27;
    return result;
  }
  uint64_t v44 = *(void *)(a1 + 64);
  uint64_t v43 = *(void *)(a1 + 72);
  uint64_t v45 = *(void *)(a1 + 80);
  uint64_t v85 = *(void *)(a1 + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v46 = result - 1;
  if (__OFSUB__(result, 1)) {
    goto LABEL_75;
  }
  if (v44) {
    uint64_t v47 = v45;
  }
  else {
    uint64_t v47 = 0;
  }
  if (v46 < 0 || v47 < v46)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  uint64_t v80 = v43;
  if (!v44 || !*(_WORD *)(v44 + 16) || v46 >= v45)
  {
    unint64_t v60 = swift_unknownObjectRetain();
    unint64_t v61 = specialized Rope._endPath.getter(v60);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v52 = 0;
    unint64_t v49 = 0;
    if (!v44) {
      goto LABEL_64;
    }
    goto LABEL_37;
  }
  uint64_t v48 = *(unsigned __int8 *)(v44 + 18);
  uint64_t v78 = result - 1;
  if (*(unsigned char *)(v44 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    unint64_t v49 = v46;
    uint64_t v50 = v44;
    while (1)
    {
      uint64_t v53 = *(unsigned __int16 *)(v50 + 16);
      if (!*(_WORD *)(v50 + 16)) {
        goto LABEL_21;
      }
      uint64_t v54 = *(void *)(v50 + 40);
      BOOL v55 = __OFSUB__(v49, v54);
      unint64_t v56 = v49 - v54;
      if (v55) {
        goto LABEL_73;
      }
      if (__OFADD__(v56, 1)) {
        goto LABEL_74;
      }
      if ((uint64_t)(v56 + 1) < 1)
      {
        uint64_t v53 = 0;
        goto LABEL_22;
      }
      if (v53 == 1)
      {
        unint64_t v49 = v56;
LABEL_21:
        if (!v49) {
          goto LABEL_22;
        }
        goto LABEL_72;
      }
      uint64_t v57 = (uint64_t *)(v50 + 64);
      uint64_t v58 = 1;
      while (1)
      {
        uint64_t v59 = *v57;
        v57 += 3;
        unint64_t v49 = v56 - v59;
        if (__OFSUB__(v56, v59))
        {
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
          goto LABEL_76;
        }
        if (__OFADD__(v49, 1)) {
          goto LABEL_69;
        }
        if ((uint64_t)(v49 + 1) < 1) {
          break;
        }
        ++v58;
        unint64_t v56 = v49;
        if (v53 == v58) {
          goto LABEL_21;
        }
      }
      uint64_t v53 = v58;
      unint64_t v49 = v56;
LABEL_22:
      char v51 = (4 * *(unsigned char *)(v50 + 18) + 8) & 0x3C;
      uint64_t v48 = ((-15 << v51) - 1) & v48 | (v53 << v51);
      uint64_t v52 = *(void *)(v50 + 24 + 24 * v53);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v50 = v52;
      if (!*(unsigned char *)(v52 + 18)) {
        goto LABEL_49;
      }
    }
  }
  uint64_t result = swift_unknownObjectRetain_n();
  unint64_t v49 = v46;
  uint64_t v52 = v44;
LABEL_49:
  uint64_t v74 = *(unsigned __int16 *)(v52 + 16);
  if (!*(_WORD *)(v52 + 16))
  {
    uint64_t v46 = v78;
LABEL_62:
    if (!v49)
    {
      while (1)
      {
LABEL_63:
        swift_unknownObjectRelease();
        uint64_t result = swift_unknownObjectRelease();
        unint64_t v62 = v48 & 0xFFFFFFFFFFFFF0FFLL;
        unint64_t v61 = v48 & 0xFFFFFFFFFFFFF0FFLL | (v74 << 8);
        if (v44)
        {
LABEL_37:
          swift_unknownObjectRetain();
          uint64_t v48 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v85, v61, v52, v44, v80);
          uint64_t result = swift_unknownObjectRelease_n();
          BOOL v55 = __OFSUB__(v46, v49);
          unint64_t v64 = v46 - v49;
          if (!v55) {
            goto LABEL_38;
          }
        }
        else
        {
LABEL_64:
          uint64_t v48 = 0;
          BOOL v55 = __OFSUB__(v46, v49);
          unint64_t v64 = v46 - v49;
          if (!v55)
          {
LABEL_38:
            uint64_t v65 = *(void *)(a1 + 64);
            uint64_t v66 = *(void *)(a1 + 72);
            uint64_t v81 = *(void *)(a1 + 80);
            uint64_t v67 = *(void *)(a1 + 88);
            *(void *)&long long v102 = v85;
            *((void *)&v102 + 1) = v61;
            *(void *)&long long v103 = v52;
            if (!__OFADD__(v48, 1))
            {
              if (v85 == v67)
              {
                uint64_t v79 = v48 + 1;
                if (v52)
                {
                  uint64_t v68 = v66;
                  unint64_t v69 = *(void *)(v52 + 24 * ((v61 >> ((4 * *(unsigned char *)(v52 + 18) + 8) & 0x3C)) & 0xF) + 24);
                  swift_unknownObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  swift_unknownObjectRetain();
                  uint64_t v68 = v66;
                  unint64_t v69 = specialized Rope._Node.subscript.getter(v61, v65);
                }
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
                if (!__OFADD__(v64, v69))
                {
                  swift_unknownObjectRetain();
                  specialized Rope.formIndex(after:)(&v102, v65, v68, v81, v85);
                  swift_unknownObjectRelease_n();
                  unint64_t v83 = *((void *)&v102 + 1);
                  uint64_t v84 = v102;
                  uint64_t v82 = v103;
                  long long v70 = *(_OWORD *)(a1 + 32);
                  v111[0] = *(_OWORD *)(a1 + 16);
                  v111[1] = v70;
                  long long v112 = *(_OWORD *)(a1 + 48);
                  long long v102 = v111[0];
                  long long v103 = v70;
                  long long v104 = v112;
                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v102, (uint64_t)v127);
                  outlined retain of Locale((uint64_t)v127);
                  BigString.utf8.getter();
                  outlined release of Locale((uint64_t)v111);
                  uint64_t v27 = v20;
                  uint64_t v18 = v101;
                  uint64_t result = BigString.Index.utf8Offset.getter();
                  if (!__OFSUB__(v64 + v69, result))
                  {
                    uint64_t v29 = v99;
                    uint64_t v23 = BigString.UTF8View.index(_:offsetBy:)();
                    uint64_t v28 = v71;
                    uint64_t v30 = v72;
                    uint64_t v31 = v73;
                    outlined release of Locale((uint64_t)v110);
                    swift_release();
                    uint64_t v24 = v79;
                    uint64_t result = v82;
                    goto LABEL_46;
                  }
LABEL_80:
                  __break(1u);
LABEL_81:
                  __break(1u);
                  goto LABEL_82;
                }
LABEL_79:
                __break(1u);
                goto LABEL_80;
              }
LABEL_78:
              __break(1u);
              goto LABEL_79;
            }
LABEL_77:
            __break(1u);
            goto LABEL_78;
          }
        }
        __break(1u);
LABEL_67:
        uint64_t v74 = v63;
        unint64_t v49 = v62;
      }
    }
    goto LABEL_85;
  }
  uint64_t v75 = *(void *)(v52 + 24);
  BOOL v55 = __OFSUB__(v49, v75);
  unint64_t v62 = v49 - v75;
  uint64_t v46 = v78;
  if (v55) {
    goto LABEL_83;
  }
  if (!__OFADD__(v62, 1))
  {
    if ((uint64_t)(v62 + 1) < 1)
    {
      uint64_t v74 = 0;
      goto LABEL_63;
    }
    if (v74 == 1)
    {
      unint64_t v49 = v62;
      goto LABEL_62;
    }
    unint64_t v76 = (uint64_t *)(v52 + 48);
    uint64_t v63 = 1;
    while (1)
    {
      uint64_t v77 = *v76;
      v76 += 3;
      unint64_t v49 = v62 - v77;
      if (__OFSUB__(v62, v77)) {
        goto LABEL_81;
      }
      if (__OFADD__(v49, 1)) {
        break;
      }
      if ((uint64_t)(v49 + 1) < 1) {
        goto LABEL_67;
      }
      ++v63;
      unint64_t v62 = v49;
      if (v74 == v63) {
        goto LABEL_62;
      }
    }
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
  }
  __break(1u);
LABEL_85:
  __break(1u);
  return result;
}

unint64_t specialized Rope._endPath.getter(unint64_t result)
{
  if (result) {
    return ((-15 << ((4 * *(unsigned char *)(result + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(result + 18) | ((unint64_t)*(unsigned __int16 *)(result + 16) << ((4 * *(unsigned char *)(result + 18) + 8) & 0x3C));
  }
  return result;
}

uint64_t AttributedString.Guts.findRun(at:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(v1 + 72);
  uint64_t v5 = *(void *)(v1 + 80);
  uint64_t v40 = *(void *)(v1 + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v3) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0;
  }
  if (result < 0) {
    goto LABEL_56;
  }
  uint64_t v8 = result;
  if (v7 < result) {
    goto LABEL_56;
  }
  uint64_t v39 = v4;
  if (!v3 || result >= v5 || !*(_WORD *)(v3 + 16))
  {
    unint64_t v20 = swift_unknownObjectRetain();
    uint64_t v21 = v40;
    unint64_t v22 = specialized Rope._endPath.getter(v20);
    swift_unknownObjectRelease();
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    if (!v3) {
      goto LABEL_47;
    }
    goto LABEL_28;
  }
  uint64_t v9 = *(unsigned __int8 *)(v3 + 18);
  if (*(unsigned char *)(v3 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v10 = v8;
    uint64_t v11 = v3;
    while (1)
    {
      uint64_t v13 = *(unsigned __int16 *)(v11 + 16);
      if (!*(_WORD *)(v11 + 16)) {
        goto LABEL_12;
      }
      uint64_t v14 = *(void *)(v11 + 40);
      BOOL v15 = __OFSUB__(v10, v14);
      uint64_t v16 = v10 - v14;
      if (v15) {
        goto LABEL_54;
      }
      if (__OFADD__(v16, 1)) {
        goto LABEL_55;
      }
      if (v16 + 1 < 1)
      {
        uint64_t v13 = 0;
        goto LABEL_13;
      }
      if (v13 == 1) {
        break;
      }
      uint64_t v17 = (uint64_t *)(v11 + 64);
      uint64_t v18 = 1;
      while (1)
      {
        uint64_t v19 = *v17;
        v17 += 3;
        uint64_t v10 = v16 - v19;
        if (__OFSUB__(v16, v19))
        {
          __break(1u);
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
        if (__OFADD__(v10, 1)) {
          goto LABEL_52;
        }
        if (v10 + 1 < 1) {
          break;
        }
        ++v18;
        uint64_t v16 = v10;
        if (v13 == v18) {
          goto LABEL_12;
        }
      }
      uint64_t v13 = v18;
      uint64_t v10 = v16;
LABEL_13:
      char v12 = (4 * *(unsigned char *)(v11 + 18) + 8) & 0x3C;
      uint64_t v9 = ((-15 << v12) - 1) & v9 | (v13 << v12);
      uint64_t v11 = *(void *)(v11 + 24 + 24 * v13);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      if (!*(unsigned char *)(v11 + 18))
      {
        unint64_t v26 = v9 & 0xFFFFFFFFFFFFF0FFLL;
        goto LABEL_33;
      }
    }
    uint64_t v10 = v16;
LABEL_12:
    if (!v10) {
      goto LABEL_13;
    }
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  unint64_t v26 = 0;
  uint64_t v10 = v8;
  uint64_t v11 = v3;
LABEL_33:
  uint64_t v35 = *(unsigned __int16 *)(v11 + 16);
  if (!*(_WORD *)(v11 + 16)) {
    goto LABEL_45;
  }
  uint64_t v36 = *(void *)(v11 + 24);
  BOOL v15 = __OFSUB__(v10, v36);
  uint64_t v23 = v10 - v36;
  if (v15) {
    goto LABEL_60;
  }
  if (__OFADD__(v23, 1))
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v23 + 1 < 1)
  {
    uint64_t v35 = 0;
    goto LABEL_46;
  }
  if (v35 != 1)
  {
    unint64_t v37 = (uint64_t *)(v11 + 48);
    uint64_t v24 = 1;
    while (1)
    {
      uint64_t v38 = *v37;
      v37 += 3;
      uint64_t v10 = v23 - v38;
      if (__OFSUB__(v23, v38)) {
        goto LABEL_58;
      }
      if (__OFADD__(v10, 1)) {
        break;
      }
      if (v10 + 1 < 1) {
        goto LABEL_50;
      }
      ++v24;
      uint64_t v23 = v10;
      if (v35 == v24) {
        goto LABEL_45;
      }
    }
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v10 = v23;
LABEL_45:
  if (!v10)
  {
    while (1)
    {
LABEL_46:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v22 = v26 | (v35 << 8);
      uint64_t v21 = v40;
      if (v3)
      {
LABEL_28:
        swift_unknownObjectRetain();
        uint64_t v25 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v21, v22, v11, v3, v39);
        swift_unknownObjectRelease_n();
        unint64_t v26 = v8 - v10;
        if (!__OFSUB__(v8, v10)) {
          goto LABEL_29;
        }
      }
      else
      {
LABEL_47:
        uint64_t v25 = 0;
        unint64_t v26 = v8 - v10;
        if (!__OFSUB__(v8, v10))
        {
LABEL_29:
          long long v27 = *(_OWORD *)(v1 + 32);
          v42[0] = *(_OWORD *)(v1 + 16);
          v42[1] = v27;
          long long v43 = *(_OWORD *)(v1 + 48);
          v44[0] = v42[0];
          v44[1] = v27;
          _OWORD v44[2] = v43;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v44, (uint64_t)v45);
          outlined retain of Locale((uint64_t)v45);
          BigString.utf8.getter();
          uint64_t result = outlined release of Locale((uint64_t)v42);
          if (!__OFSUB__(0, v10))
          {
            uint64_t v28 = BigString.UTF8View.index(_:offsetBy:)();
            uint64_t v30 = v29;
            uint64_t v32 = v31;
            uint64_t v34 = v33;
            uint64_t result = outlined release of Locale((uint64_t)v41);
            *a1 = v40;
            a1[1] = v22;
            a1[2] = v11;
            a1[3] = v25;
            a1[4] = v26;
            a1[5] = v28;
            a1[6] = v30;
            a1[7] = v32;
            a1[8] = v34;
            return result;
          }
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
      }
      __break(1u);
LABEL_50:
      uint64_t v35 = v24;
      uint64_t v10 = v23;
    }
  }
LABEL_62:
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node.distanceFromStart<A>(to:in:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a4 + 16;
  unint64_t v5 = *(unsigned __int16 *)(a4 + 16);
  int v7 = *(unsigned __int8 *)(a4 + 18);
  unint64_t v8 = (a2 >> ((4 * v7 + 8) & 0x3C)) & 0xF;
  if (v8 > v5)
  {
    __break(1u);
  }
  else
  {
    if (v8 == v5)
    {
      if ((a2 & (~(-1 << ((4 * v7) & 0x3C)) << 8)) == 0) {
        return a5;
      }
      __break(1u);
    }
    uint64_t v12 = result;
    uint64_t v13 = a4 + 24;
    swift_unknownObjectRetain();
    if (!v7)
    {
      uint64_t v20 = specialized closure #1 in Rope._Node.distanceFromStart<A>(to:in:)(v6, v13, v8);
      swift_unknownObjectRelease();
      return v20;
    }
    uint64_t v14 = specialized Rope._UnsafeHandle.distance<A>(from:to:in:)(0, v8, v6, v13);
    BOOL v15 = (uint64_t *)(v13 + 24 * v8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    swift_unknownObjectRetain();
    uint64_t v19 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, a2, a3, v16, v17, v18);
    uint64_t result = swift_unknownObjectRelease();
    a5 = v14 + v19;
    if (!__OFADD__(v14, v19))
    {
      swift_unknownObjectRelease();
      return a5;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Rope._Node.distanceFromStart<A>(to:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if ((a3 & 0x8000000000000000) == 0) {
    return v3;
  }
  MEMORY[0x1F4188790](a1);
  uint64_t result = specialized Sequence.reduce<A>(into:_:)(0, (void (*)(uint64_t *, void *))closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:)specialized partial apply, (uint64_t)&v7, v4, 0, v5);
  uint64_t v3 = -result;
  if (!__OFSUB__(0, result)) {
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t static Measurement.< infix<A, B>(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  double v3 = *(double *)(a1 + 8);
  uint64_t v4 = *(void **)a2;
  double v5 = *(double *)(a2 + 8);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if (static NSObject.== infix(_:_:)()) {
    return v3 < v5;
  }
  self;
  uint64_t v6 = swift_dynamicCastObjCClass();
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    self;
    uint64_t v8 = swift_dynamicCastObjCClass();
    if (v8)
    {
      uint64_t v9 = (void *)v8;
      ObjCClassFromObject = (void *)swift_getObjCClassFromObject();
      id v11 = v2;
      id v12 = v4;
      id v13 = objc_msgSend(ObjCClassFromObject, sel_baseUnit);
      id v14 = objc_msgSend((id)swift_getObjCClassFromObject(), sel_baseUnit);
      char v15 = static NSObject.== infix(_:_:)();

      if (v15)
      {
        id v16 = objc_msgSend(v7, sel_converter);
        objc_msgSend(v16, sel_baseUnitValueFromValue_, v3);
        double v3 = v17;

        id v18 = objc_msgSend(v9, sel_converter);
        objc_msgSend(v18, sel_baseUnitValueFromValue_, v5);
        double v5 = v19;

        return v3 < v5;
      }
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id NSUnitLength.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  return NSUnitLength.init(forLocale:usage:)(a1, a2, &lazy cache variable for type metadata for NSUnitLength, (uint64_t)off_1E51F4520);
}

uint64_t dispatch thunk of DataProtocol.regions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Variable<A>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t initializeWithCopy for URLComponents(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v7;
  uint64_t v8 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v8;
  uint64_t v9 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v9;
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = v3;
  a3[1] = a1;
  a3[2] = a2;
  id v4 = v3;

  return swift_retain();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Calendar()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(ObjectType, v1);
}

uint64_t Locale.languageCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 152))(ObjectType, v1);
}

uint64_t one-time initialization function for processInfo()
{
  type metadata accessor for _ProcessInfo();
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_ProcessInfo.State>._Buffer);
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  *(void *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<String?>._Buffer);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(void *)(v0 + 24) = result;
  static _ProcessInfo.processInfo = v0;
  return result;
}

uint64_t type metadata accessor for _ProcessInfo()
{
  return self;
}

uint64_t URL.relativeString.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!result)
  {
    id v5 = objc_msgSend(v1, sel_relativeString);
    id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

    return (uint64_t)v4;
  }
  if (v2)
  {
    id v4 = *(id *)(v2 + 16);
    swift_bridgeObjectRetain();
    return (uint64_t)v4;
  }
  __break(1u);
  return result;
}

_UNKNOWN **associated type witness table accessor for PlistDecodingMap.ArrayIterator : PlistArrayIterator in BPlistMap()
{
  return &protocol witness table for BPlistMap.ArrayIterator;
}

id IndexSet.last.getter()
{
  return IndexSet.first.getter((SEL *)&selRef_lastIndex);
}

void sub_1819A2798(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1819A27AC(_Unwind_Exception *a1)
{
}

uint64_t initializeWithCopy for AttributedString.Runs.Run(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

id URL.hasDirectoryPath.getter()
{
  uint64_t v1 = *v0;
  if (!_foundation_swift_url_feature_enabled()) {
    return objc_msgSend(v1, sel_hasDirectoryPath);
  }
  Swift::String v2 = URL.path(percentEncoded:)(1);
  __int16 v3 = specialized BidirectionalCollection.last.getter(v2._countAndFlagsBits, (unint64_t)v2._object);
  swift_bridgeObjectRelease();
  return (id)((v3 & 0x1FF) == 47);
}

void AttributedString.subscript.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*(void *)(*a1 + 184) == *(void *)(*a1 + 704))
  {
    **(void **)(v1 + 696) = *(void *)(v1 + 112);
    swift_retain();
    swift_release();
    swift_release();
    free((void *)v1);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

ValueMetadata *type metadata accessor for Duration.UnitsFormatStyle.UnitWidth()
{
  return &type metadata for Duration.UnitsFormatStyle.UnitWidth;
}

ValueMetadata *type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy()
{
  return &type metadata for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy;
}

uint64_t type metadata accessor for MeasurementFormatUnitUsage()
{
  return __swift_instantiateGenericMetadata();
}

void *__cdecl NSZoneCalloc(NSZone *zone, NSUInteger numElems, NSUInteger byteSize)
{
  if (!zone) {
    zone = (NSZone *)malloc_default_zone();
  }

  return malloc_type_zone_calloc((malloc_zone_t *)zone, numElems, byteSize, 0x131BFA1uLL);
}

Swift::Bool __swiftcall Calendar.isDate(_:equalTo:toGranularity:)(Foundation::Date _, Foundation::Date equalTo, Foundation::Calendar::Component toGranularity)
{
  *(Foundation::Date *)&v5._Swift::Double time = *(Foundation::Date *)toGranularity;
  *(Foundation::Date *)&v6._Swift::Double time = (Foundation::Date)*v3;
  long long v9 = *v4;
  Swift::Double time = v5._time;
  return Calendar.compare(_:to:toGranularity:)(v5, v6, (Foundation::Calendar::Component)&time) == NSOrderedSame;
}

uint64_t _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  if (a2)
  {
    swift_getObjectType();
    uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  return MEMORY[0x1F4188298](_sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY0_, v4, v6);
}

uint64_t StringProtocol.lowercased(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  double v8 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v14, a2, v8);
  uint64_t v15 = String.init<A>(_:)();
  uint64_t v17 = v16;
  if (v11)
  {
    uint64_t ObjectType = swift_getObjectType();
    double v19 = *(void (**)(uint64_t, uint64_t))(v12 + 64);
    swift_unknownObjectRetain();
    v19(ObjectType, v12);
    swift_unknownObjectRelease();
  }
  uint64_t v20 = specialized static ICU.CaseMap.caseMappingForLocale(_:)();
  swift_bridgeObjectRelease();
  if (!v20 || (uint64_t v21 = a4(v15, v17), v23 = v22, swift_release(), !v23)) {
    uint64_t v21 = a5(v15, v17);
  }
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t StringProtocol.localizedLowercase.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  double v8 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a1, v8);
  uint64_t v11 = String.init<A>(_:)();
  uint64_t v13 = v12;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  v22[1] = static LocaleCache.cache;
  LocaleCache.current.getter();
  uint64_t v15 = v14;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v15 + 64))(ObjectType, v15);
  uint64_t v17 = specialized static ICU.CaseMap.caseMappingForLocale(_:)();
  swift_bridgeObjectRelease();
  if (!v17 || (uint64_t v18 = a3(v11, v13), v20 = v19, swift_release(), !v20)) {
    uint64_t v18 = a4(v11, v13);
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v18;
}

Swift::String_optional __swiftcall ICU.CaseMap.uppercase(_:)(Swift::String a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, unsigned char *, uint64_t, uint64_t, unint64_t, int *))MEMORY[0x1E4FBA5F8];

  uint64_t v2 = ICU.CaseMap.lowercase(_:)(a1._countAndFlagsBits, (uint64_t)a1._object, v1);
  result.value._unint64_t object = v3;
  result.value._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t ICU.CaseMap.lowercase(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, unsigned char *, uint64_t, uint64_t, unint64_t, int *))
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = String.utf8CString.getter();
  unint64_t v6 = *(void *)(v5 + 16);
  int v22 = 0;
  if (v6 >> 31)
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  uint64_t v7 = v5 + 32;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t isStackAllocationSafe = a3(v8, v23, 32, v5 + 32, v6, &v22);
  if (v22 != 15)
  {
    if (v22 > 0 || (int)isStackAllocationSafe <= 0)
    {
      uint64_t v15 = 0;
    }
    else
    {
      v23[isStackAllocationSafe] = 0;
      uint64_t v15 = MEMORY[0x185301F80](v23);
    }
    goto LABEL_21;
  }
  uint64_t v10 = (isStackAllocationSafe + 1);
  if (__OFADD__(isStackAllocationSafe, 1)) {
    goto LABEL_23;
  }
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_24;
  }
  if ((int)v10 < 1025
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    double v11 = MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v13 = &v20[-v12];
    int v21 = 0;
    int v14 = ((uint64_t (*)(uint64_t, unsigned char *, uint64_t, uint64_t, unint64_t, int *, double))a3)(v8, &v20[-v12], v10, v7, v6, &v21, v11);
    uint64_t v15 = 0;
    if (v21 <= 0 && v14 >= 1)
    {
      v13[v14] = 0;
      uint64_t v15 = MEMORY[0x185301F80](v13);
    }
  }
  else
  {
    uint64_t v17 = swift_slowAlloc();
    int v21 = 0;
    int v18 = a3(v8, (unsigned char *)v17, v10, v7, v6, &v21);
    uint64_t v15 = 0;
    if (v21 <= 0 && v18 >= 1)
    {
      *(unsigned char *)(v17 + v18) = 0;
      uint64_t v15 = MEMORY[0x185301F80](v17);
    }
    MEMORY[0x185309510](v17, -1, -1);
  }
LABEL_21:
  swift_release();
  return v15;
}

uint64_t specialized static ICU.CaseMap.caseMappingForLocale(_:)()
{
  uint64_t v0 = one-time initialization token for _cache;
  uint64_t v1 = swift_bridgeObjectRetain();
  if (v0 != -1) {
    uint64_t v1 = swift_once();
  }
  uint64_t v2 = (os_unfair_lock_s *)static ICU.CaseMap._cache;
  MEMORY[0x1F4188790](v1);
  swift_retain();
  os_unfair_lock_lock(v2 + 6);
  partial apply for closure #1 in static ICU.CaseMap.caseMappingForLocale(_:)((uint64_t)&v2[4], &v7);
  os_unfair_lock_unlock(v2 + 6);
  swift_release();
  uint64_t v3 = v7;
  if (!v7)
  {
    type metadata accessor for ICU.CaseMap();
    uint64_t v3 = swift_allocObject();
    swift_bridgeObjectRetain();
    uint64_t v4 = ICU.CaseMap.init(localeID:)();
    uint64_t v5 = static ICU.CaseMap._cache;
    MEMORY[0x1F4188790](v4);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
    partial apply for closure #2 in static ICU.CaseMap.caseMappingForLocale(_:)((uint64_t *)(v5 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
    swift_release();
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t partial apply for closure #1 in static ICU.CaseMap.caseMappingForLocale(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static ICU.CaseMap.caseMappingForLocale(_:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t closure #1 in static ICU.CaseMap.caseMappingForLocale(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)result;
  if (*(void *)(*(void *)result + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v9)
    {
      uint64_t v10 = *(void *)(*(void *)(v5 + 56) + 8 * v8);
      swift_retain();
    }
    else
    {
      uint64_t v10 = 0;
    }
    Swift::String_optional result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
  *a4 = v10;
  return result;
}

uint64_t type metadata accessor for ICU.CaseMap()
{
  return self;
}

uint64_t ICU.CaseMap.init(localeID:)()
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v1 = ucasemap_open();
  swift_release();
  if (!v1) {
    __break(1u);
  }
  *(void *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  *(void *)(v0 + 24) = v2;
  return v0;
}

uint64_t partial apply for closure #2 in static ICU.CaseMap.caseMappingForLocale(_:)(uint64_t *a1)
{
  return closure #2 in static ICU.CaseMap.caseMappingForLocale(_:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t closure #2 in static ICU.CaseMap.caseMappingForLocale(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = *a1;
  uint64_t v10 = *a1;
  *a1 = 0x8000000000000000;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    char v4 = v11;
    if (*(void *)(v10 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v43;
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v18 & 1)) {
        goto LABEL_47;
      }
      unint64_t v12 = v17;
      if ((v4 & 1) == 0) {
        goto LABEL_43;
      }
LABEL_8:
      uint64_t v19 = *(void *)(v16 + 56);
      swift_release();
      *(void *)(v19 + 8 * v12) = a4;
LABEL_44:
      *a1 = v16;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v16 = v10;
      if (v11) {
        goto LABEL_8;
      }
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a4, v16);
      swift_bridgeObjectRetain();
      goto LABEL_44;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ICU.CaseMap>);
  uint64_t v20 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v20;
  if (!*(void *)(v10 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
  int v21 = (void *)(v20 + 64);
  unint64_t v22 = (unint64_t)((1 << *(unsigned char *)(v16 + 32)) + 63) >> 6;
  if (v16 != v10 || (unint64_t)v21 >= v10 + 64 + 8 * v22) {
    memmove(v21, (const void *)(v10 + 64), 8 * v22);
  }
  uint64_t v40 = v10 + 64;
  int64_t v23 = 0;
  *(void *)(v16 + 16) = *(void *)(v10 + 16);
  uint64_t v24 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & *(void *)(v10 + 64);
  int64_t v41 = (unint64_t)(v24 + 63) >> 6;
  while (1)
  {
    if (v26)
    {
      unint64_t v27 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      int64_t v42 = v23;
      unint64_t v28 = v27 | (v23 << 6);
      goto LABEL_18;
    }
    int64_t v35 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v35 >= v41) {
      goto LABEL_42;
    }
    unint64_t v36 = *(void *)(v40 + 8 * v35);
    int64_t v37 = v23 + 1;
    if (!v36)
    {
      int64_t v37 = v23 + 2;
      if (v23 + 2 >= v41) {
        goto LABEL_42;
      }
      unint64_t v36 = *(void *)(v40 + 8 * v37);
      if (!v36)
      {
        int64_t v37 = v23 + 3;
        if (v23 + 3 >= v41) {
          goto LABEL_42;
        }
        unint64_t v36 = *(void *)(v40 + 8 * v37);
        if (!v36)
        {
          int64_t v37 = v23 + 4;
          if (v23 + 4 >= v41) {
            goto LABEL_42;
          }
          unint64_t v36 = *(void *)(v40 + 8 * v37);
          if (!v36)
          {
            int64_t v37 = v23 + 5;
            if (v23 + 5 >= v41) {
              goto LABEL_42;
            }
            unint64_t v36 = *(void *)(v40 + 8 * v37);
            if (!v36)
            {
              int64_t v37 = v23 + 6;
              if (v23 + 6 >= v41) {
                goto LABEL_42;
              }
              unint64_t v36 = *(void *)(v40 + 8 * v37);
              if (!v36)
              {
                int64_t v37 = v23 + 7;
                if (v23 + 7 >= v41) {
                  goto LABEL_42;
                }
                unint64_t v36 = *(void *)(v40 + 8 * v37);
                if (!v36) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_41:
    unint64_t v26 = (v36 - 1) & v36;
    int64_t v42 = v37;
    unint64_t v28 = __clz(__rbit64(v36)) + (v37 << 6);
LABEL_18:
    uint64_t v29 = 16 * v28;
    uint64_t v30 = (void *)(*(void *)(v10 + 48) + 16 * v28);
    uint64_t v31 = v30[1];
    uint64_t v32 = 8 * v28;
    uint64_t v33 = *(void *)(*(void *)(v10 + 56) + v32);
    uint64_t v34 = (void *)(*(void *)(v16 + 48) + v29);
    void *v34 = *v30;
    v34[1] = v31;
    *(void *)(*(void *)(v16 + 56) + v32) = v33;
    swift_bridgeObjectRetain();
    swift_retain();
    int64_t v23 = v42;
  }
  uint64_t v38 = v23 + 8;
  if (v23 + 8 >= v41) {
    goto LABEL_42;
  }
  unint64_t v36 = *(void *)(v40 + 8 * v38);
  if (v36)
  {
    int64_t v37 = v23 + 8;
    goto LABEL_41;
  }
  while (1)
  {
    int64_t v37 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      break;
    }
    if (v37 >= v41) {
      goto LABEL_42;
    }
    unint64_t v36 = *(void *)(v40 + 8 * v37);
    ++v38;
    if (v36) {
      goto LABEL_41;
    }
  }
LABEL_46:
  __break(1u);
LABEL_47:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of JSONEncoder.keyEncodingStrategy.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

Swift::Int one-time initialization function for _pageSize()
{
  Swift::Int result = _platform_shims_vm_size();
  if (result < 0) {
    __break(1u);
  }
  else {
    _pageSize = result;
  }
  return result;
}

uint64_t _platform_shims_vm_size()
{
  return *MEMORY[0x1E4F14B00];
}

Swift::String_optional __swiftcall NSScanner.scanUpToString(_:)(Swift::String a1)
{
  uint64_t v2 = HIBYTE(a1._object) & 0xF;
  unint64_t object = (uint64_t (**)(uint64_t, void *))a1._object;
  if (((uint64_t)a1._object & 0x2000000000000000) == 0) {
    uint64_t v2 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v2)
  {
LABEL_73:
    uint64_t v90 = 0;
    uint64_t v91 = 0;
LABEL_76:
    unint64_t v22 = (char *)v90;
    int64_t v23 = v91;
    goto LABEL_86;
  }
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  id v4 = objc_msgSend(v1, sel_string);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  unint64_t v111 = v6;
  unint64_t v112 = (unint64_t)v5;

  id v7 = objc_msgSend(v1, sel_charactersToBeSkipped);
  id v115 = v1;
  uint64_t v109 = countAndFlagsBits;
  if (v7)
  {
    id v8 = v7;
    objc_msgSend(v8, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CFCharacterSetRef(0);
    swift_dynamicCast();
    type metadata accessor for __CharacterSetStorage();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = *(void *)&v118[0];
    *(unsigned char *)(v9 + 24) = 0;

    id v10 = objc_msgSend(v1, sel_string);
    id v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    unint64_t v12 = v11;

    id v13 = objc_msgSend(v1, (SEL)&selRef_setLanguageCode_);
    unint64_t v14 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    unint64_t v16 = v15;

    unint64_t v119 = v14;
    unint64_t v120 = v16;
    objc_msgSend(v1, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v17 = StringProtocol._toUTF16Index(_:)();
    unint64_t v18 = v17;
    uint64_t v19 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0) {
      uint64_t v19 = v14 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v20 = 4 * v19;
    if (4 * v19 != v17 >> 14)
    {
      uint64_t v21 = 0;
      while (1)
      {
        unint64_t v22 = (char *)String.Index.samePosition(in:)();
        if ((v23 & 1) == 0) {
          goto LABEL_13;
        }
        uint64_t v24 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          break;
        }
        unint64_t v119 = v14;
        unint64_t v120 = v16;
        uint64_t v25 = (char *)objc_msgSend(v115, sel__deprecated_scanLocation);
        BOOL v26 = __OFADD__(v25, v24);
        unint64_t v22 = &v25[v24];
        if (v26) {
          goto LABEL_80;
        }
        unint64_t v18 = StringProtocol._toUTF16Index(_:)();
        ++v21;
        if (v20 == v18 >> 14) {
          goto LABEL_13;
        }
      }
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    unint64_t v27 = specialized Collection.suffix(from:)(v18, (uint64_t)v113, v12);
    unint64_t v29 = v28;
    swift_bridgeObjectRelease();
    if (v29 >> 14 == v27 >> 14)
    {
      swift_bridgeObjectRelease();
      uint64_t v30 = v115;
      unint64_t v31 = v111;
LABEL_28:
      id v49 = objc_msgSend(v30, sel_string);
      uint64_t v50 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      unint64_t v52 = v51;
      swift_release();

      swift_bridgeObjectRelease();
      uint64_t v53 = HIBYTE(v52) & 0xF;
      if ((v52 & 0x2000000000000000) == 0) {
        uint64_t v53 = v50;
      }
      uint64_t v54 = v53 << 16;
      unint64_t v43 = v112;
      if ((v52 & 0x1000000000000000) == 0 || (v50 & 0x800000000000000) != 0) {
        unint64_t v37 = v54 | 7;
      }
      else {
        unint64_t v37 = v54 | 0xB;
      }
    }
    else
    {
      swift_retain();
      unint64_t v44 = v27;
      while (1)
      {
        unint64_t v45 = v44;
        uint64_t v46 = Substring.subscript.getter();
        unint64_t v48 = v47;
        swift_retain();
        LOBYTE(v46) = specialized Sequence.allSatisfy(_:)(v46, v48, v9);
        swift_bridgeObjectRelease();
        if ((v46 & 1) == 0) {
          break;
        }
        unint64_t v44 = Substring.index(after:)();
        if (v29 >> 14 == v44 >> 14)
        {
          swift_bridgeObjectRelease();
          swift_release();
          unint64_t v31 = v111;
          uint64_t v30 = v115;
          goto LABEL_28;
        }
      }
      swift_bridgeObjectRelease();
      swift_release_n();
      unint64_t v31 = v111;
      unint64_t v43 = v112;
      unint64_t v37 = v45;
      uint64_t v30 = v115;
    }
  }
  else
  {
    id v32 = objc_msgSend(v1, sel_string);
    unint64_t v33 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    unint64_t v35 = v34;

    unint64_t v119 = v33;
    unint64_t v120 = v35;
    objc_msgSend(v1, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v36 = StringProtocol._toUTF16Index(_:)();
    unint64_t v37 = v36;
    uint64_t v38 = HIBYTE(v35) & 0xF;
    if ((v35 & 0x2000000000000000) == 0) {
      uint64_t v38 = v33 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v39 = 4 * v38;
    if (4 * v38 != v36 >> 14)
    {
      uint64_t v40 = 0;
      do
      {
        unint64_t v22 = (char *)String.Index.samePosition(in:)();
        if ((v23 & 1) == 0) {
          break;
        }
        uint64_t v41 = v40 + 1;
        if (__OFADD__(v40, 1)) {
          goto LABEL_82;
        }
        unint64_t v119 = v33;
        unint64_t v120 = v35;
        int64_t v42 = (char *)objc_msgSend(v115, sel__deprecated_scanLocation);
        BOOL v26 = __OFADD__(v42, v41);
        unint64_t v22 = &v42[v41];
        if (v26) {
          goto LABEL_83;
        }
        unint64_t v37 = StringProtocol._toUTF16Index(_:)();
        ++v40;
      }
      while (v39 != v37 >> 14);
    }
    swift_bridgeObjectRelease();
    uint64_t v30 = v115;
    unint64_t v31 = v111;
    unint64_t v43 = v112;
  }
  uint64_t v55 = HIBYTE(v31) & 0xF;
  if ((v31 & 0x2000000000000000) == 0) {
    uint64_t v55 = v43 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v56 = 7;
  if (((v31 >> 60) & ((v43 & 0x800000000000000) == 0)) != 0) {
    uint64_t v56 = 11;
  }
  unint64_t v114 = v56 | (v55 << 16);
  unint64_t v57 = 4 * v55;
  unint64_t v106 = v37;
  unint64_t v108 = 4 * v55;
  while (1)
  {
    unint64_t v22 = (char *)objc_msgSend(v30, sel_caseSensitive);
    if (v57 < v37 >> 14)
    {
      __break(1u);
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
    int v58 = (int)v22;
    if (objc_msgSend(v30, sel_locale))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v118, 0, sizeof(v118));
    }
    outlined init with take of Any?((uint64_t)v118, (uint64_t)&v119);
    if (v121)
    {
      if (swift_dynamicCast())
      {
        uint64_t v59 = v116;
        unint64_t v60 = v117;
        goto LABEL_50;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v119);
    }
    uint64_t v59 = 0;
    unint64_t v60 = 0;
LABEL_50:
    int v61 = v58 ^ 1;
    unint64_t v119 = v109;
    unint64_t v120 = (unint64_t)object;
    *(void *)&v118[0] = v43;
    *((void *)&v118[0] + 1) = v31;
    if (!(v59 | v31 & 0x1000000000000000)) {
      break;
    }
    uint64_t v107 = v58 ^ 1u;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    StringProtocol._ephemeralString.getter();
    unint64_t v62 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v63 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    unint64_t v22 = (char *)StringProtocol._toUTF16Offsets(_:)();
    unint64_t v64 = v22;
    int64_t v65 = v23 - v22;
    BOOL v66 = __OFSUB__(v23, v22);
    if (v59)
    {
      if (v66) {
        goto LABEL_81;
      }
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v68 = (void *)v60[61](ObjectType, v60);
      unint64_t v69 = (char *)objc_msgSend(v62, sel_rangeOfString_options_range_locale_, v63, v107, v64, v65, v68);
      uint64_t v71 = v70;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      if (v66) {
        goto LABEL_84;
      }
      unint64_t v69 = (char *)objc_msgSend(v62, sel_rangeOfString_options_range_, v63, v107, v22, v65);
      uint64_t v71 = v86;
      swift_unknownObjectRelease();
      unint64_t v22 = (char *)swift_unknownObjectRelease();
    }
    uint64_t v30 = v115;
    unint64_t v31 = v111;
    unint64_t v43 = v112;
    if (v69 == (char *)0x7FFFFFFFFFFFFFFFLL)
    {
      swift_unknownObjectRelease();
      goto LABEL_71;
    }
    int64_t v23 = &v69[v71];
    if (__OFADD__(v69, v71)) {
      goto LABEL_78;
    }
    StringProtocol._toUTF16Indices(_:)();
    unint64_t v37 = v87;
    swift_unknownObjectRelease();
LABEL_66:
    uint64_t v88 = String.Index.samePosition(in:)();
    if ((v23 & 1) == 0)
    {
      uint64_t v89 = v88;
      String.Index.samePosition(in:)();
      if ((v23 & 1) == 0)
      {
        unint64_t v114 = v89;
        goto LABEL_71;
      }
    }
    unint64_t v57 = v108;
    if (v108 <= v37 >> 14) {
      goto LABEL_71;
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v72 = String.subscript.getter();
  unint64_t v74 = v73;
  uint64_t v76 = v75;
  uint64_t v78 = v77;
  swift_bridgeObjectRelease();
  uint64_t v116 = v109;
  long long v117 = object;
  swift_bridgeObjectRetain();
  unint64_t v79 = Substring.init<A>(_:)();
  if ((v72 ^ v74) >= 0x4000 && (v79 ^ v80) >> 14)
  {
    specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v79, v80, v81, v82, 0, 0, v61, 0, 0, v72, v74, v76, v78);
    unint64_t v37 = v83;
    char v85 = v84;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v30 = v115;
    if (v85) {
      goto LABEL_71;
    }
    unint64_t v31 = v111;
    unint64_t v43 = v112;
    goto LABEL_66;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v30 = v115;
LABEL_71:
  unint64_t v22 = (char *)v106;
  if (v106 >> 14 == v114 >> 14)
  {
    swift_bridgeObjectRelease();
    goto LABEL_73;
  }
  if (v114 >> 14 >= v106 >> 14)
  {
    uint64_t v92 = String.subscript.getter();
    uint64_t v94 = v93;
    uint64_t v96 = v95;
    uint64_t v98 = v97;
    swift_bridgeObjectRelease();
    id v99 = objc_msgSend(v30, sel_string);
    id v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
    unint64_t v102 = v101;

    unint64_t v119 = (unint64_t)v100;
    unint64_t v120 = v102;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v103 = StringProtocol._toUTF16Offset(_:)();
    swift_bridgeObjectRelease();
    objc_msgSend(v30, sel__deprecated_setScanLocation_, v103);
    uint64_t v90 = MEMORY[0x185301F50](v92, v94, v96, v98);
    uint64_t v91 = v104;
    swift_bridgeObjectRelease();
    goto LABEL_76;
  }
LABEL_85:
  __break(1u);
LABEL_86:
  result.value._unint64_t object = v23;
  result.value._uint64_t countAndFlagsBits = (uint64_t)v22;
  return result;
}

uint64_t __performOrderedCleanup(id *a1)
{
  _CFAutoreleasePoolPush();

  free(a1);

  return _CFAutoreleasePoolPop();
}

id one-time initialization function for _shared()
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for _NSSwiftProcessInfo()), sel_init);
  static _NSSwiftProcessInfo._shared = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for _NSSwiftProcessInfo()
{
  return self;
}

id _NSSwiftProcessInfo.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftProcessInfo.State>._Buffer);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 76) = 0;
  *(void *)(v2 + 16) = 1;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 40) = 0;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 48) = 0;
  *(unsigned char *)(v2 + 72) = 0;
  *(void *)&v0[OBJC_IVAR____NSSwiftProcessInfo__state] = v2;
  uint64_t v3 = one-time initialization token for processInfo;
  id v4 = v0;
  if (v3 != -1) {
    swift_once();
  }
  *(void *)&v4[OBJC_IVAR____NSSwiftProcessInfo__processInfo] = static _ProcessInfo.processInfo;
  swift_retain();

  v6.receiver = v4;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

void PredicateExpressions.Comparison.op.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void NSRunLoop.SchedulerTimeType.Stride.init(floatLiteral:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

ValueMetadata *type metadata accessor for ICULegacyKey()
{
  return &type metadata for ICULegacyKey;
}

uint64_t *assignWithCopy for Data(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

void *initUAUserActivity()
{
  if (qword_1EB1EDA68
    || (id result = dlopen("/System/Library/PrivateFrameworks/UserActivity.framework/UserActivity", 2),
        (qword_1EB1EDA68 = (uint64_t)result) != 0))
  {
    id result = objc_getClass("UAUserActivity");
    qword_1EB1EDA60 = (uint64_t)result;
    getUAUserActivityClass Class = UAUserActivityFunction;
  }
  return result;
}

uint64_t __supportsUserActivityAppLinks_block_invoke()
{
  getUAUserActivityClass();
  if (objc_opt_respondsToSelector()) {
    uint64_t result = [getUAUserActivityClass() supportsUserActivityAppLinks];
  }
  else {
    uint64_t result = 0;
  }
  _MergedGlobals_140 = result;
  return result;
}

uint64_t UAUserActivityFunction()
{
  return qword_1EB1EDA60;
}

char *IndexSet.formIndex(after:)(char **a1)
{
  BOOL v3 = __OFADD__(*a1, 1);
  uint64_t result = *a1 + 1;
  if (v3)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (result != a1[2])
  {
LABEL_15:
    *a1 = result;
    return result;
  }
  uint64_t v5 = a1[3];
  unint64_t v6 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v6 == a1[4]) {
    goto LABEL_15;
  }
  uint64_t v7 = *v1;
  a1[3] = v6;
  char v8 = *(unsigned char *)(v7 + 24);
  uint64_t result = (char *)objc_msgSend(*(id *)(v7 + 16), sel_rangeAtIndex_);
  id v10 = &result[v9];
  BOOL v11 = __OFADD__(result, v9);
  if ((v8 & 1) == 0) {
    goto LABEL_12;
  }
  if (v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if ((uint64_t)v10 >= (uint64_t)result)
  {
LABEL_14:
    a1[1] = result;
    a1[2] = v10;
    goto LABEL_15;
  }
  __break(1u);
LABEL_12:
  if (v11)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((uint64_t)v10 >= (uint64_t)result) {
    goto LABEL_14;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance URL(void *a1, uint64_t a2)
{
  outlined consume of URL?(*(void **)a2);
  URL.init(reference:)(a1, &v5);
  *(void *)a2 = v5;
  *(_OWORD *)(a2 + 8) = v6;
  return 1;
}

uint64_t _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY3_()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized URLRequest._applyMutation<A>(_:)(uint64_t a1)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v2 = *(void **)(*(void *)a1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v3 = swift_allocObject();
    swift_retain();
    id v4 = v2;
    objc_msgSend(v4, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v3 + 16) = v10;
    *(void *)a1 = v3;
    swift_release();
  }
  uint64_t v5 = *(void **)(*(void *)a1 + 16);
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  uint64_t v7 = String._bridgeToObjectiveCImpl()();
  id v8 = v5;
  objc_msgSend(v8, sel_addValue_forHTTPHeaderField_, v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t destroy for Date.ISO8601FormatStyle()
{
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t storeEnumTagSinglePayload for AttributedString.Index(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 2147483646;
    *(void *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encodeNil() in conformance __JSONEncoder()
{
  return __JSONEncoder.encodeNil()();
}

uint64_t __JSONEncoder.encodeNil()()
{
  if (((*(uint64_t (**)(void))(*v0 + 208))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  type metadata accessor for JSONReference();
  swift_initStaticObject();
  MEMORY[0x185302590]();
  if (*(void *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
LABEL_5:
  }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

ValueMetadata *type metadata accessor for BPlistMap.ArrayIterator()
{
  return &type metadata for BPlistMap.ArrayIterator;
}

void _compatEncodeValueOfObjCType(objc_class *a1, uint64_t a2, const char **a3, const char *a4)
{
  if ((int)a2 > 80)
  {
    switch((int)a2)
    {
      case 'c':
LABEL_7:
        unint64_t v10 = *((void *)a1 + 11);
        *((void *)a1 + 11) = v10 + 1;
        if (v10 > 0x27) {
          BOOL v11 = +[NSString stringWithFormat:@"$%ld", v10];
        }
        else {
          BOOL v11 = (NSString *)generic_keys[v10];
        }
        int v16 = *(char *)a3;
        goto LABEL_42;
      case 'd':
        unint64_t v21 = *((void *)a1 + 11);
        *((void *)a1 + 11) = v21 + 1;
        if (v21 > 0x27) {
          unint64_t v22 = +[NSString stringWithFormat:@"$%ld", v21];
        }
        else {
          unint64_t v22 = (NSString *)generic_keys[v21];
        }
        unint64_t v36 = *a3;
        _encodeDouble((uint64_t)a1, v22, *(double *)&v36);
        return;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        goto LABEL_78;
      case 'f':
        unint64_t v23 = *((void *)a1 + 11);
        *((void *)a1 + 11) = v23 + 1;
        if (v23 > 0x27) {
          uint64_t v24 = +[NSString stringWithFormat:@"$%ld", v23];
        }
        else {
          uint64_t v24 = (NSString *)generic_keys[v23];
        }
        float v37 = *(float *)a3;
        _encodeFloat((uint64_t)a1, v24, v37);
        return;
      case 'i':
      case 'l':
LABEL_19:
        unint64_t v13 = *((void *)a1 + 11);
        *((void *)a1 + 11) = v13 + 1;
        if (v13 > 0x27) {
          BOOL v11 = +[NSString stringWithFormat:@"$%ld", v13];
        }
        else {
          BOOL v11 = (NSString *)generic_keys[v13];
        }
        int v16 = *(_DWORD *)a3;
        goto LABEL_42;
      case 'q':
        goto LABEL_21;
      case 's':
        goto LABEL_15;
      default:
        if (a2 == 81)
        {
LABEL_21:
          unint64_t v14 = *((void *)a1 + 11);
          *((void *)a1 + 11) = v14 + 1;
          if (v14 > 0x27) {
            unint64_t v15 = +[NSString stringWithFormat:@"$%ld", v14];
          }
          else {
            unint64_t v15 = (NSString *)generic_keys[v14];
          }
          uint64_t v29 = (uint64_t)*a3;
          _encodeInt64((uint64_t)a1, v15, v29);
        }
        else
        {
          if (a2 != 83) {
            goto LABEL_78;
          }
LABEL_15:
          unint64_t v12 = *((void *)a1 + 11);
          *((void *)a1 + 11) = v12 + 1;
          if (v12 > 0x27) {
            BOOL v11 = +[NSString stringWithFormat:@"$%ld", v12];
          }
          else {
            BOOL v11 = (NSString *)generic_keys[v12];
          }
          int v16 = *(__int16 *)a3;
LABEL_42:
          _encodeInt32((uint64_t)a1, v11, v16);
        }
        break;
    }
  }
  else
  {
    if ((int)a2 > 57)
    {
      switch((int)a2)
      {
        case ':':
          uint64_t v6 = NSCopyStringFromSelector(*a3);
          unint64_t v7 = *((void *)a1 + 11);
          *((void *)a1 + 11) = v7 + 1;
          id value = (id)v6;
          if (v7 > 0x27)
          {
            unint64_t v31 = +[NSString stringWithFormat:@"$%ld", v7];
            id v8 = value;
            uint64_t v9 = (__CFString *)v31;
          }
          else
          {
            id v8 = (void *)v6;
            uint64_t v9 = generic_keys[v7];
          }
          _encodeObject((uint64_t)a1, v9, v8, 0);

          return;
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case 'A':
          goto LABEL_78;
        case '@':
          unint64_t v17 = *((void *)a1 + 11);
          *((void *)a1 + 11) = v17 + 1;
          if (v17 > 0x27) {
            unint64_t v18 = +[NSString stringWithFormat:@"$%ld", v17];
          }
          else {
            unint64_t v18 = (NSString *)generic_keys[v17];
          }
          id v32 = (char *)*a3;
          uint64_t v33 = (uint64_t)a1;
          goto LABEL_75;
        case 'B':
          unint64_t v19 = *((void *)a1 + 11);
          *((void *)a1 + 11) = v19 + 1;
          if (v19 > 0x27) {
            uint64_t v20 = +[NSString stringWithFormat:@"$%ld", v19];
          }
          else {
            uint64_t v20 = (NSString *)generic_keys[v19];
          }
          if (*(unsigned char *)a3) {
            unint64_t v34 = (const void **)MEMORY[0x1E4F1CFD0];
          }
          else {
            unint64_t v34 = (const void **)MEMORY[0x1E4F1CFC8];
          }
          unint64_t v35 = *v34;
          addValueToTopContainerE((uint64_t)a1, v20, v35);
          return;
        case 'C':
          goto LABEL_7;
        default:
          if (a2 == 73 || a2 == 76) {
            goto LABEL_19;
          }
          goto LABEL_78;
      }
    }
    if (a2 == 35)
    {
      _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)*a3, 1);
      unint64_t v25 = *((void *)a1 + 11);
      *((void *)a1 + 11) = v25 + 1;
      if (v25 > 0x27) {
        BOOL v26 = +[NSString stringWithFormat:@"$%ld", v25];
      }
      else {
        BOOL v26 = (NSString *)generic_keys[v25];
      }
      uint64_t v30 = NSStringFromClass((Class)*a3);
    }
    else
    {
      if (a2 == 37)
      {
        unint64_t v27 = _NSMethodExceptionProem(a1, a4);
        NSLog((NSString *)@"%@: warning: NXAtom being encoded -- will not be decoded uniqued", v27);
      }
      else if (a2 != 42)
      {
LABEL_78:
        uint64_t v38 = (void *)[MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C3C8], +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@: unknown type encoding ('%c')", _NSMethodExceptionProem(a1, a4), a2), 0 reason userInfo];
        objc_exception_throw(v38);
      }
      unint64_t v28 = *((void *)a1 + 11);
      *((void *)a1 + 11) = v28 + 1;
      if (v28 > 0x27) {
        BOOL v26 = +[NSString stringWithFormat:@"$%ld", v28];
      }
      else {
        BOOL v26 = (NSString *)generic_keys[v28];
      }
      uint64_t v30 = +[NSString stringWithUTF8String:*a3];
    }
    id v32 = (char *)v30;
    uint64_t v33 = (uint64_t)a1;
    unint64_t v18 = v26;
LABEL_75:
    _encodeObject(v33, v18, v32, 0);
  }
}

char *String.init(format:arguments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized withVaList<A>(_:_:)(a3, a1, a2, 0, 0);
  swift_bridgeObjectRelease();
  return v6;
}

id specialized static IndexSet.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(*(void *)a1 + 16);
  uint64_t v3 = *(void **)(*(void *)a2 + 16);
  id v4 = v2;
  objc_msgSend(v3, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
  id v5 = objc_msgSend(v2, sel_isEqualToIndexSet_, v7);

  return v5;
}

BOOL _isEmpty(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t v1 = *MEMORY[0x1E4FBA8E0];
    if ((~a1 & 0xC000000000000007) == 0) {
      uint64_t v1 = 0;
    }
    unint64_t v2 = v1 ^ a1;
    uint64_t v3 = 0xFFFFFFFFFFFFFFFLL;
    if ((~(_BYTE)v2 & 7) == 0) {
      uint64_t v3 = 0xFFFFFFFFFFFFFLL;
    }
    uint64_t v4 = v3 & (v2 >> 3);
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 8);
    if ((v5 & 2) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 16);
    }
    else if (v5)
    {
      uint64_t v4 = *(void *)(a1 + 24);
    }
    else
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
    }
  }
  return v4 == 0;
}

void static JSONEncoder.OutputFormatting.prettyPrinted.getter(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance _CodingKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _CodingKey.stringValue.getter(*(void *)v3, *(void *)(v3 + 8), a3, *(unsigned char *)(v3 + 24));
}

uint64_t partial apply for closure #1 in _NSSwiftCalendar.minimumDaysInFirstWeek.setter(uint64_t *a1)
{
  return closure #1 in _NSSwiftCalendar.minimumDaysInFirstWeek.setter(a1, *(void *)(v1 + 16));
}

uint64_t closure #1 in _NSSwiftCalendar.minimumDaysInFirstWeek.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 72))(ObjectType, v4);
  if (result != a2)
  {
    v11[0] = 0;
    v11[1] = 0;
    v10[0] = 0;
    v10[1] = 0;
    uint64_t v7 = (*(uint64_t (**)(void *, void *, void, uint64_t, uint64_t, void, uint64_t, uint64_t))(v4 + 112))(v11, v10, 0, 1, a2, 0, ObjectType, v4);
    uint64_t v9 = v8;
    uint64_t result = swift_unknownObjectRelease();
    *a1 = v7;
    a1[1] = v9;
  }
  return result;
}

Foundation::DateInterval_optional __swiftcall Calendar.dateInterval(of:for:)(Foundation::Calendar::Component of, Foundation::Date a2)
{
  double v4 = *v2;
  uint64_t v5 = *(void *)(v3 + 8);
  char v12 = *(unsigned char *)of;
  if (v4 > 1.59271755e13) {
    double v4 = 1.59271755e13;
  }
  double v6 = fmax(v4, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v11 = v6;
  char v8 = (*(uint64_t (**)(char *, double *, uint64_t, uint64_t))(v5 + 160))(&v12, &v11, ObjectType, v5);
  result.value.duratiouint64_t n = v10;
  result.value.start._Swift::Double time = v9;
  result.is_nil = v8;
  return result;
}

double protocol witness for _CalendarProtocol.dateInterval(of:for:) in conformance _CalendarAutoupdating(Foundation::Calendar::Component a1, double a2)
{
  *(void *)&double result = (unint64_t)_CalendarAutoupdating.dateInterval(of:for:)(a1, *(Foundation::Date *)&a2);
  return result;
}

Foundation::DateInterval_optional __swiftcall _CalendarAutoupdating.dateInterval(of:for:)(Foundation::Calendar::Component of, Foundation::Date a2)
{
  char v3 = *(unsigned char *)of;
  uint64_t v4 = *v2;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v5 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in CalendarCache.current.getter(v12);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  uint64_t v6 = v12[1];
  uint64_t ObjectType = swift_getObjectType();
  v11[0] = v3;
  v12[0] = v4;
  (*(void (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(v6 + 160))(v11, v12, ObjectType, v6);

  char v8 = swift_unknownObjectRelease();
  result.value.duratiouint64_t n = v10;
  result.value.start._Swift::Double time = v9;
  result.is_nil = v8;
  return result;
}

BOOL NSIntersectsRect(NSRect aRect, NSRect bRect)
{
  BOOL result = 0;
  if (aRect.size.width > 0.0 && bRect.size.width > 0.0 && aRect.size.height > 0.0 && bRect.size.height > 0.0)
  {
    if (aRect.origin.x >= bRect.origin.x)
    {
      if (bRect.origin.x + bRect.size.width <= aRect.origin.x) {
        return 0;
      }
    }
    else if (aRect.origin.x + aRect.size.width <= bRect.origin.x)
    {
      return 0;
    }
    if (aRect.origin.y >= bRect.origin.y)
    {
      if (bRect.origin.y + bRect.size.height <= aRect.origin.y) {
        return 0;
      }
    }
    else if (aRect.origin.y + aRect.size.height <= bRect.origin.y)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t NSURLSession.data(for:delegate:)(void *a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[15] = *a1;
  return MEMORY[0x1F4188298](NSURLSession.data(for:delegate:), 0, 0);
}

uint64_t NSURLSession.data(for:delegate:)()
{
  swift_release();
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v4(v1, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NSURLSession.data(for:delegate:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = NSURLSession.data(for:delegate:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  long long v7;
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  uint64_t v7 = *(_OWORD *)(v0 + 112);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 128) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v3 = swift_initStackObject();
  *(void *)(v0 + 136) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(inited + 16) = v3;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 144) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(void *)(v4 + 32) = v1;
  *(void *)(v4 + 40) = inited;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *uint64_t v5 = v0;
  v5[1] = NSURLSession.data(for:delegate:);
  return MEMORY[0x1F4188148](v0 + 80, &async function pointer to partial apply for closure #1 in NSURLSession.data(for:delegate:));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1819A76B8(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1819A76D8(_Unwind_Exception *a1)
{
}

uint64_t destroy for ICUMeasurementNumberFormatter.Signature(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 40);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t URL.host.getter()
{
  return URL.user.getter((uint64_t (*)(uint64_t))URL.host(percentEncoded:), (SEL *)&selRef_host);
}

uint64_t closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v61 = a5;
  uint64_t v60 = a6;
  uint64_t v63 = a3;
  uint64_t v64 = a4;
  uint64_t v53 = a8;
  v73[1] = *(char **)MEMORY[0x1E4F143B8];
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v57 = *(void *)(v14 - 8);
  uint64_t v58 = v14;
  MEMORY[0x1F4188790](v14);
  int v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v56 = (char *)&v48 - v18;
  uint64_t v59 = *(void *)(a7 - 8);
  uint64_t v19 = *(void *)(v59 + 64);
  MEMORY[0x1F4188790](v20);
  unint64_t v52 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  unint64_t v23 = (char *)&v48 - v22;
  uint64_t v55 = a11;
  uint64_t v51 = a10;
  uint64_t v24 = v60;
  uint64_t v54 = a9;
  uint64_t v25 = v62;
  unint64_t v26 = v61;
  uint64_t result = closure #1 in static XMLPlistMap.Value.parseSpecialRealValue<A, B>(_:fullSource:for:_:)(a1, a2, (uint64_t)a1, a2, v63, v64, v61, v60, (uint64_t)v16, a7, a9, a10, a11);
  if (!v25)
  {
    unint64_t v48 = v23;
    uint64_t v62 = 0;
    uint64_t v49 = a2;
    uint64_t v50 = a1;
    unint64_t v28 = v26;
    uint64_t v29 = v24;
    unint64_t v31 = v56;
    uint64_t v30 = v57;
    uint64_t v32 = v58;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v56, v16, v58);
    uint64_t v33 = v59;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v31, 1, a7) == 1)
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v32);
      uint64_t v34 = v62;
      uint64_t result = static XMLPlistMap.Value.rejectHexadecimalValues<A>(_:fullSource:for:_:)((uint64_t)v50, v49, v63, v64, v26, v29, v54, v55);
      if (!v34)
      {
        uint64_t v35 = a7;
        v73[0] = 0;
        if (v19 == 4)
        {
          _stringshims_strtof_l(v50, v73, 0);
          unint64_t v36 = v52;
          uint64_t result = dispatch thunk of BinaryFloatingPoint.init(_:)();
        }
        else
        {
          unint64_t v36 = v52;
          if (v19 != 8) {
            __break(1u);
          }
          _stringshims_strtod_l(v50, v73, 0);
          uint64_t result = dispatch thunk of BinaryFloatingPoint.init(_:)();
        }
        uint64_t v39 = v29;
        unint64_t v40 = v28;
        uint64_t v41 = v54;
        if (v73[0])
        {
          if (&v50[v49] == v73[0])
          {
            return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v59 + 32))(v53, v36, a7);
          }
          else
          {
            uint64_t v68 = v63;
            uint64_t v69 = v64;
            uint64_t v70 = v50;
            uint64_t v71 = v50;
            unint64_t v72 = &v50[v49];
            unint64_t v66 = 0;
            unint64_t v67 = 0xE000000000000000;
            uint64_t v42 = v55;
            _StringGuts.grow(_:)(40);
            swift_bridgeObjectRelease();
            unint64_t v66 = 0xD000000000000026;
            unint64_t v67 = 0x80000001823AA730;
            uint64_t v65 = BufferReader.lineNumber.getter();
            v43._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v44 = v35;
            String.append(_:)(v43);
            swift_bridgeObjectRelease();
            uint64_t v45 = v66;
            uint64_t v46 = v67;
            type metadata accessor for DecodingError();
            swift_allocError();
            static DecodingError._dataCorrupted<A>(_:for:_:)(v45, v46, v40, v39, v41, v42, v47);
            swift_bridgeObjectRelease();
            swift_willThrow();
            return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v36, v44);
          }
        }
        else
        {
          __break(1u);
        }
      }
    }
    else
    {
      float v37 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      uint64_t v38 = v48;
      v37(v48, v31, a7);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v37)(v53, v38, a7);
    }
  }
  return result;
}

double protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance JSONDecoderImpl.KeyedContainer<A>(uint64_t a1, uint64_t a2)
{
  return JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(a1, *(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

double JSONDecoderImpl.KeyedContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v37 = a3;
  uint64_t v35 = a2;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a4 + 16) && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void *)(a4 + 56) + 24 * v17;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    HIDWORD(v34) = *(unsigned __int8 *)(v19 + 16);
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(a5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v14, a1, a5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v14, 0, 1, a5);
    unint64_t v23 = v36;
    specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(v20, v21, HIDWORD(v34), v37, (uint64_t)v14, a5, a6);
    if (!v23) {
      double v6 = v24;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v27 = v26;
    unint64_t v36 = (char *)v26
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    _OWORD v27[3] = a5;
    uint64_t v27[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    _CodingPathNode.path.getter(v37);
    unint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    unint64_t v38 = 0xD00000000000001DLL;
    unint64_t v39 = 0x80000001823B2190;
    v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._uint64_t countAndFlagsBits = 2238496;
    v30._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 3025186;
    v32._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x1E4FBBA68], v25);
    swift_willThrow();
  }
  return v6;
}

uint64_t specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v8 = v7;
  uint64_t v83 = a7;
  uint64_t v79 = a5;
  unint64_t v82 = a4;
  *((void *)&v84 + 1) = a2;
  *(void *)&long long v84 = a1;
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v7;
  uint64_t v81 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v77 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v73 - v13;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v80 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  unint64_t v17 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v73 - v19;
  MEMORY[0x1F4188790](v21);
  unint64_t v23 = (char *)&v73 - v22;
  v27.n128_f64[0] = MEMORY[0x1F4188790](v24);
  Swift::String v29 = (char *)&v73 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1F4188790](v25);
    uint64_t v52 = v83;
    *(&v73 - 4) = a6;
    *(&v73 - 3) = v52;
    *((unsigned char *)&v73 - 16) = v53;
    *((unsigned char *)&v73 - 15) = v54;
    *(&v73 - 1) = v10;
    uint64_t v55 = *(void *)(v8[4] + 24);
    MEMORY[0x1F4188790](v56);
    *(&v73 - 4) = (uint64_t)partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:);
    *(&v73 - 3) = v57;
    uint64_t v58 = *((void *)&v84 + 1);
    *(&v73 - 2) = v84;
    *(&v73 - 1) = v58;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v55 + 40));
    closure #1 in JSONMap.withBuffer<A>(for:perform:)specialized partial apply((void *)(v55 + 16), &v85);
    os_unfair_lock_unlock((os_unfair_lock_t)(v55 + 40));
    swift_release();
    return swift_release();
  }
  if (v30 == 5 && v84 == 0 && v26 == 160)
  {
    *(void *)&long long v84 = type metadata accessor for DecodingError();
    *((void *)&v84 + 1) = swift_allocError();
    uint64_t v78 = v31;
    void *v31 = MEMORY[0x1E4FBB3D0];
    uint64_t v32 = v80;
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 16);
    v33(v29, v79, v15);
    v33(v23, (uint64_t)v29, v15);
    uint64_t v34 = v81;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v23, 1, a6) == 1)
    {
      uint64_t v35 = *(void (**)(char *, uint64_t))(v32 + 8);
      v35(v23, v15);
      _CodingPathNode.path.getter(v82);
      v35(v29, v15);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v14, v23, a6);
      uint64_t v65 = _CodingPathNode.path.getter(v82);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v67 = v83;
      *(void *)(inited + 56) = a6;
      *(void *)(inited + 64) = v67;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v14, a6);
      uint64_t v86 = v65;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v15);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v14, a6);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v69 = v78;
    uint64_t v86 = 0;
    unint64_t v87 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v70._unint64_t object = (void *)0x80000001823B3360;
    v70._uint64_t countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v70);
    v71._uint64_t countAndFlagsBits = 0x656C62756F44;
    v71._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v71);
    v72._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v72._unint64_t object = (void *)0x80000001823B3380;
    String.append(_:)(v72);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v84 - 8) + 104))(v69, *MEMORY[0x1E4FBBA80]);
    return swift_willThrow();
  }
  int v76 = v26;
  if ((v26 & 0xE1) != 1 || !v8[11])
  {
LABEL_11:
    uint64_t v48 = v80;
    uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v80 + 16);
    v49(v20, v79, v15, v27);
    ((void (*)(char *, char *, uint64_t))v49)(v17, v20, v15);
    uint64_t v50 = v81;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v17, 1, a6) == 1)
    {
      uint64_t v51 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51(v17, v15);
      _CodingPathNode.path.getter(v82);
      v51(v20, v15);
    }
    else
    {
      uint64_t v59 = v77;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v77, v17, a6);
      uint64_t v60 = _CodingPathNode.path.getter(v82);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v61 = swift_initStackObject();
      *(_OWORD *)(v61 + 16) = xmmword_1821037E0;
      uint64_t v62 = v83;
      *(void *)(v61 + 56) = a6;
      *(void *)(v61 + 64) = v62;
      uint64_t v63 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v61 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v50 + 16))(v63, v59, a6);
      uint64_t v86 = v60;
      specialized Array.append<A>(contentsOf:)(v61);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v20, v15);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v59, a6);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBB3D0], v76, v64);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  uint64_t v75 = &v73;
  *(double *)&long long v36 = MEMORY[0x1F4188790](v25);
  uint64_t v37 = v83;
  *(&v73 - 8) = a6;
  *(&v73 - 7) = v37;
  *(&v73 - 6) = v39;
  *(&v73 - 5) = v38;
  *((_OWORD *)&v73 - 2) = v36;
  *(&v73 - 2) = v41;
  *(&v73 - 1) = v40;
  uint64_t v42 = *(void *)(v8[4] + 24);
  MEMORY[0x1F4188790](v43);
  *(&v73 - 4) = (uint64_t)partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:);
  *(&v73 - 3) = v44;
  uint64_t v45 = *((void *)&v84 + 1);
  *(&v73 - 2) = v84;
  *(&v73 - 1) = v45;
  unint64_t v74 = (void *)(v42 + 16);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v42 + 40));
  uint64_t v46 = v78;
  closure #1 in JSONMap.withBuffer<A>(for:perform:)specialized partial apply(v74, (uint64_t)&v86);
  if (v46)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v42 + 40));
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v42 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (v87) {
      goto LABEL_11;
    }
  }
  return result;
}

{
  void *v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  int v30;
  void *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  long long v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t result;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, __n128);
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  void *v64;
  uint64_t v65;
  uint64_t inited;
  uint64_t v67;
  uint64_t *boxed_opaque_existential_1;
  void *v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  uint64_t v73;
  void *v74;
  uint64_t *v75;
  int v76;
  char *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  long long v84;
  int v85;
  void v86[21];

  char v8 = v7;
  uint64_t v83 = a7;
  uint64_t v79 = a5;
  unint64_t v82 = a4;
  *((void *)&v84 + 1) = a2;
  *(void *)&long long v84 = a1;
  v86[20] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v7;
  uint64_t v81 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v77 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v73 - v13;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v80 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  unint64_t v17 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v73 - v19;
  MEMORY[0x1F4188790](v21);
  unint64_t v23 = (char *)&v73 - v22;
  v27.n128_f64[0] = MEMORY[0x1F4188790](v24);
  Swift::String v29 = (char *)&v73 - v28;
  int v30 = v26 >> 5;
  if (v30 == 1)
  {
    MEMORY[0x1F4188790](v25);
    uint64_t v52 = v83;
    *(&v73 - 4) = a6;
    *(&v73 - 3) = v52;
    *((unsigned char *)&v73 - 16) = v53;
    *((unsigned char *)&v73 - 15) = v54;
    *(&v73 - 1) = v10;
    uint64_t v55 = *(void *)(v8[4] + 24);
    MEMORY[0x1F4188790](v56);
    *(&v73 - 4) = (uint64_t)partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:);
    *(&v73 - 3) = v57;
    uint64_t v58 = *((void *)&v84 + 1);
    *(&v73 - 2) = v84;
    *(&v73 - 1) = v58;
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v55 + 40));
    closure #1 in JSONMap.withBuffer<A>(for:perform:)specialized partial apply((void *)(v55 + 16), &v85);
    os_unfair_lock_unlock((os_unfair_lock_t)(v55 + 40));
    swift_release();
    return swift_release();
  }
  if (v30 == 5 && v84 == 0 && v26 == 160)
  {
    *(void *)&long long v84 = type metadata accessor for DecodingError();
    *((void *)&v84 + 1) = swift_allocError();
    uint64_t v78 = v31;
    void *v31 = MEMORY[0x1E4FBB470];
    uint64_t v32 = v80;
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 16);
    v33(v29, v79, v15);
    v33(v23, (uint64_t)v29, v15);
    uint64_t v34 = v81;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v23, 1, a6) == 1)
    {
      uint64_t v35 = *(void (**)(char *, uint64_t))(v32 + 8);
      v35(v23, v15);
      _CodingPathNode.path.getter(v82);
      v35(v29, v15);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v14, v23, a6);
      uint64_t v65 = _CodingPathNode.path.getter(v82);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v67 = v83;
      *(void *)(inited + 56) = a6;
      *(void *)(inited + 64) = v67;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v34 + 16))(boxed_opaque_existential_1, v14, a6);
      v86[0] = v65;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v15);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v14, a6);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v69 = v78;
    v86[0] = 0;
    v86[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v70._unint64_t object = (void *)0x80000001823B3360;
    v70._uint64_t countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v70);
    v71._uint64_t countAndFlagsBits = 0x74616F6C46;
    v71._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v71);
    v72._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v72._unint64_t object = (void *)0x80000001823B3380;
    String.append(_:)(v72);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void))(*(void *)(v84 - 8) + 104))(v69, *MEMORY[0x1E4FBBA80]);
    return swift_willThrow();
  }
  int v76 = v26;
  if ((v26 & 0xE1) != 1 || !v8[11])
  {
LABEL_11:
    uint64_t v48 = v80;
    uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v80 + 16);
    v49(v20, v79, v15, v27);
    ((void (*)(char *, char *, uint64_t))v49)(v17, v20, v15);
    uint64_t v50 = v81;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v17, 1, a6) == 1)
    {
      uint64_t v51 = *(void (**)(char *, uint64_t))(v48 + 8);
      v51(v17, v15);
      _CodingPathNode.path.getter(v82);
      v51(v20, v15);
    }
    else
    {
      uint64_t v59 = v77;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v77, v17, a6);
      uint64_t v60 = _CodingPathNode.path.getter(v82);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v61 = swift_initStackObject();
      *(_OWORD *)(v61 + 16) = xmmword_1821037E0;
      uint64_t v62 = v83;
      *(void *)(v61 + 56) = a6;
      *(void *)(v61 + 64) = v62;
      uint64_t v63 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v61 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v50 + 16))(v63, v59, a6);
      v86[0] = v60;
      specialized Array.append<A>(contentsOf:)(v61);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v20, v15);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v59, a6);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBB470], v76, v64);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  uint64_t v75 = &v73;
  *(double *)&long long v36 = MEMORY[0x1F4188790](v25);
  uint64_t v37 = v83;
  *(&v73 - 8) = a6;
  *(&v73 - 7) = v37;
  *(&v73 - 6) = v39;
  *(&v73 - 5) = v38;
  *((_OWORD *)&v73 - 2) = v36;
  *(&v73 - 2) = v41;
  *(&v73 - 1) = v40;
  uint64_t v42 = *(void *)(v8[4] + 24);
  MEMORY[0x1F4188790](v43);
  *(&v73 - 4) = (uint64_t)partial apply for specialized closure #2 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:);
  *(&v73 - 3) = v44;
  uint64_t v45 = *((void *)&v84 + 1);
  *(&v73 - 2) = v84;
  *(&v73 - 1) = v45;
  unint64_t v74 = (void *)(v42 + 16);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v42 + 40));
  uint64_t v46 = v78;
  closure #1 in JSONMap.withBuffer<A>(for:perform:)specialized partial apply(v74, (uint64_t)v86);
  if (v46)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v42 + 40));
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v42 + 40));
    swift_release();
    uint64_t result = swift_release();
    if ((v86[0] & 0x100000000) != 0) {
      goto LABEL_11;
    }
  }
  return result;
}

void *closure #1 in JSONMap.withBuffer<A>(for:perform:)specialized partial apply@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)(a1, a2);
}

uint64_t specialized JSONDecoderImpl.decode(_:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 24 * v2;
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(void *)(v3 + 16);
    unint64_t v6 = *(void *)(v0 + 160);
    unsigned __int8 v7 = *(unsigned char *)(v3 + 24);
    swift_retain();
    specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(v4, v5, v7, v6, 0, 0, 0, 255);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;
  uint64_t result;

  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 24 * v2;
    uint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(void *)(v3 + 16);
    unint64_t v6 = *(void *)(v0 + 160);
    unsigned __int8 v7 = *(unsigned char *)(v3 + 24);
    swift_retain();
    specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(v4, v5, v7, v6, 0, 0, 0, 255);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v10 = v8;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  int v12 = a3 >> 5;
  if (v12 == 1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v35 = *(void *)(*(void *)(v8 + 32) + 24);
    MEMORY[0x1F4188790](v36);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v35 + 40));
    partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((void *)(v35 + 16), &v48);
    os_unfair_lock_unlock((os_unfair_lock_t)(v35 + 40));
    swift_release();
    return swift_release();
  }
  uint64_t v14 = a7;
  uint64_t v15 = a6;
  uint64_t v16 = a5;
  if (v12 == 5 && !(a2 | a1) && a3 == 160)
  {
    unint64_t v17 = a4;
    uint64_t v18 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v20 = v19;
    *uint64_t v19 = MEMORY[0x1E4FBB3D0];
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(v17);
    }
    else
    {
      outlined copy of _CodingKey(v16, v15, v14, a8);
      uint64_t v21 = _CodingPathNode.path.getter(v17);
      uint64_t v22 = v15;
      uint64_t v23 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v24 = v16;
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v26 = swift_allocObject();
      *(void *)(inited + 32) = v26;
      *(void *)(v26 + 16) = v24;
      *(void *)(v26 + 24) = v22;
      *(void *)(v26 + 32) = v14;
      *(unsigned char *)(v26 + 40) = a8;
      uint64_t v49 = (unint64_t *)v23;
      specialized Array.append<A>(contentsOf:)(inited);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v49 = 0;
    unint64_t v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v38._unint64_t object = (void *)0x80000001823B3360;
    v38._uint64_t countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v38);
    v39._uint64_t countAndFlagsBits = 0x656C62756F44;
    v39._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v39);
    v40._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v40._unint64_t object = (void *)0x80000001823B3380;
    String.append(_:)(v40);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    return swift_willThrow();
  }
  if ((a3 & 0xE1) != 1 || !*(void *)(v10 + 88))
  {
LABEL_12:
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }
    else
    {
      unint64_t v31 = a4;
      outlined copy of _CodingKey(v16, v15, v14, a8);
      uint64_t v47 = (unint64_t *)_CodingPathNode.path.getter(v31);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v32 = v16;
      uint64_t v33 = swift_initStackObject();
      *(_OWORD *)(v33 + 16) = xmmword_1821037E0;
      *(void *)(v33 + 56) = &type metadata for _CodingKey;
      *(void *)(v33 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v34 = swift_allocObject();
      *(void *)(v33 + 32) = v34;
      *(void *)(v34 + 16) = v32;
      *(void *)(v34 + 24) = v15;
      *(void *)(v34 + 32) = v14;
      *(unsigned char *)(v34 + 40) = a8;
      uint64_t v49 = v47;
      specialized Array.append<A>(contentsOf:)(v33);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBB3D0], a3, v37);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  unint64_t v41 = a4;
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  uint64_t v44 = a7;
  uint64_t v47 = &v41;
  MEMORY[0x1F4188790](a1);
  uint64_t v27 = *(void *)(v10 + 32);
  uint64_t v28 = *(void *)(v27 + 24);
  MEMORY[0x1F4188790](v27);
  uint64_t v45 = (void *)(v28 + 16);
  uint64_t v46 = v29;
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v28 + 40));
  partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(v45, (uint64_t)&v49);
  if (v9)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 40));
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (v50)
    {
      uint64_t v14 = v44;
      uint64_t v15 = v43;
      uint64_t v16 = v42;
      a4 = v41;
      goto LABEL_12;
    }
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unint64_t *v47;
  int v48;
  void v49[22];

  uint64_t v10 = v8;
  v49[20] = *MEMORY[0x1E4F143B8];
  int v12 = a3 >> 5;
  if (v12 == 1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v35 = *(void *)(*(void *)(v8 + 32) + 24);
    MEMORY[0x1F4188790](v36);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v35 + 40));
    partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)((void *)(v35 + 16), &v48);
    os_unfair_lock_unlock((os_unfair_lock_t)(v35 + 40));
    swift_release();
    return swift_release();
  }
  uint64_t v14 = a7;
  uint64_t v15 = a6;
  uint64_t v16 = a5;
  if (v12 == 5 && !(a2 | a1) && a3 == 160)
  {
    unint64_t v17 = a4;
    uint64_t v18 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v20 = v19;
    *uint64_t v19 = MEMORY[0x1E4FBB470];
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(v17);
    }
    else
    {
      outlined copy of _CodingKey(v16, v15, v14, a8);
      uint64_t v21 = _CodingPathNode.path.getter(v17);
      uint64_t v22 = v15;
      uint64_t v23 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v24 = v16;
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v26 = swift_allocObject();
      *(void *)(inited + 32) = v26;
      *(void *)(v26 + 16) = v24;
      *(void *)(v26 + 24) = v22;
      *(void *)(v26 + 32) = v14;
      *(unsigned char *)(v26 + 40) = a8;
      v49[0] = v23;
      specialized Array.append<A>(contentsOf:)(inited);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    v49[0] = 0;
    v49[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v38._unint64_t object = (void *)0x80000001823B3360;
    v38._uint64_t countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v38);
    v39._uint64_t countAndFlagsBits = 0x74616F6C46;
    v39._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v39);
    v40._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v40._unint64_t object = (void *)0x80000001823B3380;
    String.append(_:)(v40);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    return swift_willThrow();
  }
  if ((a3 & 0xE1) != 1 || !*(void *)(v10 + 88))
  {
LABEL_12:
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }
    else
    {
      unint64_t v31 = a4;
      outlined copy of _CodingKey(v16, v15, v14, a8);
      uint64_t v47 = (unint64_t *)_CodingPathNode.path.getter(v31);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v32 = v16;
      uint64_t v33 = swift_initStackObject();
      *(_OWORD *)(v33 + 16) = xmmword_1821037E0;
      *(void *)(v33 + 56) = &type metadata for _CodingKey;
      *(void *)(v33 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v34 = swift_allocObject();
      *(void *)(v33 + 32) = v34;
      *(void *)(v34 + 16) = v32;
      *(void *)(v34 + 24) = v15;
      *(void *)(v34 + 32) = v14;
      *(unsigned char *)(v34 + 40) = a8;
      v49[0] = v47;
      specialized Array.append<A>(contentsOf:)(v33);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBB470], a3, v37);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  unint64_t v41 = a4;
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  uint64_t v44 = a7;
  uint64_t v47 = &v41;
  MEMORY[0x1F4188790](a1);
  uint64_t v27 = *(void *)(v10 + 32);
  uint64_t v28 = *(void *)(v27 + 24);
  MEMORY[0x1F4188790](v27);
  uint64_t v45 = (void *)(v28 + 16);
  uint64_t v46 = v29;
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v28 + 40));
  partial apply for specialized closure #1 in JSONMap.withBuffer<A>(for:perform:)(v45, (uint64_t)v49);
  if (v9)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 40));
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 40));
    swift_release();
    uint64_t result = swift_release();
    if ((v49[0] & 0x100000000) != 0)
    {
      uint64_t v14 = v44;
      uint64_t v15 = v43;
      uint64_t v16 = v42;
      a4 = v41;
      goto LABEL_12;
    }
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;

  uint64_t v10 = v8;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  int v12 = a3 >> 5;
  if (v12 == 1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v35 = *(void *)(*(void *)(v8 + 32) + 24);
    MEMORY[0x1F4188790](v36);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v35 + 40));
    closure #1 in JSONMap.withBuffer<A>(for:perform:)specialized partial apply((void *)(v35 + 16), &v48);
    os_unfair_lock_unlock((os_unfair_lock_t)(v35 + 40));
    swift_release();
    return swift_release();
  }
  uint64_t v14 = a7;
  uint64_t v15 = a6;
  uint64_t v16 = a5;
  if (v12 == 5 && !(a2 | a1) && a3 == 160)
  {
    unint64_t v17 = a4;
    uint64_t v18 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v20 = v19;
    *uint64_t v19 = MEMORY[0x1E4FBB3D0];
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(v17);
    }
    else
    {
      outlined copy of _CodingKey(v16, v15, v14, a8);
      uint64_t v21 = _CodingPathNode.path.getter(v17);
      uint64_t v22 = v15;
      uint64_t v23 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v24 = v16;
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v26 = swift_allocObject();
      *(void *)(inited + 32) = v26;
      *(void *)(v26 + 16) = v24;
      *(void *)(v26 + 24) = v22;
      *(void *)(v26 + 32) = v14;
      *(unsigned char *)(v26 + 40) = a8;
      uint64_t v49 = (unint64_t *)v23;
      specialized Array.append<A>(contentsOf:)(inited);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v49 = 0;
    unint64_t v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v38._unint64_t object = (void *)0x80000001823B3360;
    v38._uint64_t countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v38);
    v39._uint64_t countAndFlagsBits = 0x656C62756F44;
    v39._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v39);
    v40._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v40._unint64_t object = (void *)0x80000001823B3380;
    String.append(_:)(v40);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA80], v18);
    return swift_willThrow();
  }
  if ((a3 & 0xE1) != 1 || !*(void *)(v10 + 88))
  {
LABEL_12:
    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }
    else
    {
      unint64_t v31 = a4;
      outlined copy of _CodingKey(v16, v15, v14, a8);
      uint64_t v47 = (unint64_t *)_CodingPathNode.path.getter(v31);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v32 = v16;
      uint64_t v33 = swift_initStackObject();
      *(_OWORD *)(v33 + 16) = xmmword_1821037E0;
      *(void *)(v33 + 56) = &type metadata for _CodingKey;
      *(void *)(v33 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v34 = swift_allocObject();
      *(void *)(v33 + 32) = v34;
      *(void *)(v34 + 16) = v32;
      *(void *)(v34 + 24) = v15;
      *(void *)(v34 + 32) = v14;
      *(unsigned char *)(v34 + 40) = a8;
      uint64_t v49 = v47;
      specialized Array.append<A>(contentsOf:)(v33);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1E4FBB3D0], a3, v37);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  unint64_t v41 = a4;
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  uint64_t v44 = a7;
  uint64_t v47 = &v41;
  MEMORY[0x1F4188790](a1);
  uint64_t v27 = *(void *)(v10 + 32);
  uint64_t v28 = *(void *)(v27 + 24);
  MEMORY[0x1F4188790](v27);
  uint64_t v45 = (void *)(v28 + 16);
  uint64_t v46 = v29;
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v28 + 40));
  closure #1 in JSONMap.withBuffer<A>(for:perform:)specialized partial apply(v45, (uint64_t)&v49);
  if (v9)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 40));
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 40));
    swift_release();
    uint64_t result = swift_release();
    if (v50)
    {
      uint64_t v14 = v44;
      uint64_t v15 = v43;
      uint64_t v16 = v42;
      a4 = v41;
      goto LABEL_12;
    }
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:), a5);
}

{
  return partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:), a5);
}

uint64_t partial apply for specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, void)@<X4>, void *a6@<X8>)
{
  uint64_t result = a5(a1, a2, a3, a4, *(unsigned __int8 *)(v6 + 16), *(unsigned __int8 *)(v6 + 17));
  if (!v7) {
    *a6 = v10;
  }
  return result;
}

void specialized closure #1 in JSONDecoderImpl.unwrapFloatingPoint<A, B>(from:as:for:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, char a6)
{
  unint64_t v8 = v6;
  uint64_t v11 = a2;
  unint64_t v12 = a1;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_291:
      __break(1u);
LABEL_292:
      __break(1u);
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
LABEL_298:
      __break(1u);
LABEL_299:
      __break(1u);
      goto LABEL_300;
    }
    char v24 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
    unint64_t v222 = a3;
    if (v24 == 48)
    {
      if (v11 >= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v11;
      }
      unint64_t v26 = v12 + v25;
      if (!specialized Collection.isEmpty.getter(v12 + v25, v11 - v25))
      {
        unsigned __int8 v27 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v26);
        unsigned int v28 = v27;
        BOOL v29 = v27 - 46 > 0x37 || ((1 << (v27 - 46)) & 0x80000000800001) == 0;
        uint64_t v30 = v12;
        if (v29)
        {
          unsigned __int8 v31 = v27;
          __int16 v32 = _asciiNumbers.getter();
          unint64_t v33 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v26, v222, a4);
          uint64_t v35 = v34;
          uint64_t v37 = v36;
          if (v28 < v32 || HIBYTE(v32) < v31)
          {
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v38 = xmmword_182112860;
            *(void *)(v38 + 16) = v31;
            *(void *)(v38 + 24) = v33;
            *(void *)(v38 + 32) = v35;
            *(void *)(v38 + 40) = v37;
            goto LABEL_247;
          }
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v38 = v33;
          *(void *)(v38 + 8) = v35;
          *(void *)(v38 + 16) = v37;
LABEL_110:
          *(void *)(v38 + 24) = 0;
          *(void *)(v38 + 32) = 0;
          *(void *)(v38 + 40) = 0;
          char v104 = 10;
          goto LABEL_248;
        }
        goto LABEL_46;
      }
    }
    else if ((v24 - 58) < 0xF7u)
    {
      if (v24 != 45)
      {
LABEL_300:
        __break(1u);
        goto LABEL_301;
      }
      if (v11 < 2)
      {
        unint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        uint64_t v95 = v94;
        uint64_t v97 = v96;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v38 = 0xD000000000000010;
        *(void *)(v38 + 8) = 0x80000001823ABAE0;
        *(void *)(v38 + 16) = 45;
        goto LABEL_246;
      }
      uint64_t v30 = v12 + 1;
      unsigned __int8 v45 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      if (v45 == 48)
      {
        uint64_t v46 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
        specialized static JSONScanner.validateLeadingZero(in:fullSource:)(v46, v47, a3, a4);
        if (v6) {
          return;
        }
      }
      else
      {
        unsigned __int8 v109 = v45;
        if ((v45 - 49) >= 9u)
        {
          unint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12 + 1, a3, a4);
          uint64_t v95 = v110;
          uint64_t v97 = v111;
          uint64_t v11 = v109;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          unint64_t v112 = 0xD000000000000013;
          id v113 = "after '-' in number";
LABEL_146:
          *(void *)uint64_t v38 = v112;
          *(void *)(v38 + 8) = (unint64_t)(v113 - 32) | 0x8000000000000000;
LABEL_238:
          *(void *)(v38 + 16) = v11;
          goto LABEL_246;
        }
      }
      goto LABEL_46;
    }
    uint64_t v30 = v12;
LABEL_46:
    uint64_t v216 = a4;
    if ((a6 & 1) != 0 && v30 + 1 < v12 + v11)
    {
      uint64_t v48 = v30 - v12 + 1;
      uint64_t v49 = v30;
      while (1)
      {
        uint64_t v50 = v49 + 1;
        if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v49 + 1) | 0x20) == 0x65) {
          break;
        }
        unint64_t v51 = v49 + 2;
        ++v48;
        ++v49;
        if (v51 >= v12 + v11) {
          goto LABEL_54;
        }
      }
      unsigned __int8 v52 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v49);
      __int16 v53 = _asciiNumbers.getter();
      if (v52 < v53 || HIBYTE(v53) < v52)
      {
        if (v48 < 0 || v11 - v48 < 1) {
          goto LABEL_313;
        }
        unsigned __int8 v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v50);
        unint64_t v106 = v50;
        unint64_t v107 = v222;
        uint64_t v108 = a4;
        goto LABEL_236;
      }
    }
LABEL_54:
    uint64_t v54 = v12 + v11 - 1;
    unsigned __int8 v55 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v54);
    if ((v55 - 58) > 0xF5u)
    {
      specialized BufferView.withUnsafePointer<A>(_:)((const char *)v12);
      if ((v72 & 1) == 0)
      {
        if ((~*(void *)&v71 & 0x7FF0000000000000) == 0) {
          goto LABEL_179;
        }
        if (v71 != 0.0) {
          return;
        }
        uint64_t v73 = v11;
        uint64_t v74 = v12;
        if (v11 >= 4)
        {
          uint64_t v73 = v11;
          uint64_t v74 = v12;
          do
          {
            unsigned __int8 v75 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v74);
            if ((v75 - 49) < 9u) {
              goto LABEL_179;
            }
            if ((v75 | 0x20) == 0x65) {
              return;
            }
            unsigned __int8 v76 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v74 + 1);
            if ((v76 - 49) < 9u) {
              goto LABEL_179;
            }
            if ((v76 | 0x20) == 0x65) {
              return;
            }
            unsigned __int8 v77 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v74 + 2);
            if ((v77 - 49) < 9u) {
              goto LABEL_179;
            }
            if ((v77 | 0x20) == 0x65) {
              return;
            }
            unsigned __int8 v78 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v74 + 3);
            if ((v78 - 49) < 9u) {
              goto LABEL_179;
            }
            if ((v78 | 0x20) == 0x65) {
              return;
            }
            uint64_t v74 = specialized BufferView.dropFirst(_:)(4, v74, v73);
            uint64_t v73 = v79;
          }
          while (v79 >= 4);
        }
        goto LABEL_215;
      }
      uint64_t v80 = specialized BufferView.suffix(from:)(v30, v12, v11);
      uint64_t v11 = v80;
      uint64_t v82 = v81;
      unint64_t v83 = v80 + v81;
      if (v81 <= 0)
      {
        unint64_t v91 = v80;
      }
      else
      {
        __int16 v84 = _asciiNumbers.getter();
        unsigned __int8 v85 = v84;
        uint64_t v86 = 0;
        unsigned int v87 = HIBYTE(v84);
        uint64_t v88 = v82;
        while (1)
        {
          if (v86 < 0) {
            goto LABEL_289;
          }
          BOOL v89 = v88-- < 1;
          if (v89) {
            goto LABEL_289;
          }
          unsigned __int8 v90 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v11 + v86);
          if (v90 < v85 || v87 < v90) {
            break;
          }
          ++v86;
          unint64_t v91 = v11 + v86;
          if (v11 + v86 >= v83) {
            goto LABEL_118;
          }
        }
        unint64_t v91 = v11 + v86;
      }
LABEL_118:
      if (v91 < v83)
      {
        uint64_t v114 = v91 - v11;
        __int16 v115 = _asciiNumbers.getter();
        unsigned __int8 v117 = v115;
        char v118 = 0;
        uint64_t v210 = v82 + v11;
        uint64_t v208 = -v11;
        char v119 = 1;
        unsigned int v120 = HIBYTE(v115);
        char v121 = 1;
        while (1)
        {
          char v213 = v121;
          char v219 = v119;
          uint64_t v122 = v210 - v91;
          unint64_t v123 = v208 + v91;
          while (1)
          {
            if ((v123 & 0x8000000000000000) != 0 || (BOOL v89 = v122 < 1, --v122, v89))
            {
              __break(1u);
LABEL_241:
              __break(1u);
LABEL_242:
              __break(1u);
LABEL_243:
              unint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v83, v116, v216);
              uint64_t v95 = v176;
              uint64_t v97 = v177;
LABEL_244:
              unint64_t v172 = 0xE900000000000072;
              uint64_t v173 = 0x65626D756E206E69;
LABEL_245:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)uint64_t v38 = v173;
              *(void *)(v38 + 8) = v172;
              *(void *)(v38 + 16) = v91;
LABEL_246:
              *(void *)(v38 + 24) = v93;
              *(void *)(v38 + 32) = v95;
              *(void *)(v38 + 40) = v97;
LABEL_247:
              char v104 = 1;
              goto LABEL_248;
            }
            uint64_t v124 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v91);
            uint64_t v11 = v124;
            if (v124 < v117 || v120 < v124) {
              break;
            }
            if (__OFADD__(v114, 1)) {
              goto LABEL_241;
            }
            ++v91;
            ++v114;
            ++v123;
            if (v91 >= v83) {
              goto LABEL_242;
            }
          }
          switch((char)v124)
          {
            case '+':
            case '-':
              if (v114 != 0 || (v118 & 1) == 0) {
                goto LABEL_139;
              }
              uint64_t v114 = 0;
              char v118 = 0;
              char v119 = 0;
              char v121 = 0;
              if (++v91 >= v83) {
                goto LABEL_292;
              }
              continue;
            case ',':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '<':
            case '=':
            case '>':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
              goto LABEL_139;
            case '.':
              if (v114 < 1 || (v213 & 1) == 0) {
                goto LABEL_139;
              }
              uint64_t v114 = 0;
              char v118 = 0;
              char v121 = 0;
              ++v91;
              char v119 = 1;
              if (v91 < v83) {
                continue;
              }
              __break(1u);
              goto LABEL_139;
            case 'E':
              goto LABEL_133;
            default:
              if (v124 != 101) {
                goto LABEL_139;
              }
LABEL_133:
              if (v114 < 1 || (v219 & 1) == 0)
              {
LABEL_139:
                unint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v91, v222, v216);
                uint64_t v95 = v125;
                uint64_t v97 = v126;
                uint64_t v11 = v11;
                goto LABEL_237;
              }
              uint64_t v114 = 0;
              char v119 = 0;
              char v121 = 0;
              ++v91;
              char v118 = 1;
              if (v91 >= v83) {
                goto LABEL_293;
              }
              break;
          }
        }
      }
LABEL_303:
      __break(1u);
LABEL_304:
      __break(1u);
      goto LABEL_305;
    }
    unsigned __int8 v56 = v55;
    unint64_t v57 = v222;
    if (!specialized static Comparable.<= infix(_:_:)(v222, v12 + v11 - 1)) {
      goto LABEL_296;
    }
    if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, v222 + a4)) {
      goto LABEL_297;
    }
    unint64_t v58 = specialized min<A>(_:_:)(v12 + v11, v222 + a4);
    if (v58 <= v222)
    {
      uint64_t v68 = 0;
      uint64_t v62 = 1;
      goto LABEL_103;
    }
    unint64_t v59 = v58;
    unint64_t v60 = a4 + v222;
    uint64_t v61 = -(uint64_t)v222;
    uint64_t v62 = 1;
    unsigned __int8 v212 = v56;
    unint64_t v217 = a4 + v222;
LABEL_59:
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    unint64_t v65 = v60 - v57;
    unint64_t v66 = v61 + v57;
    while ((uint64_t)(v66 + v64) >= 0 && (uint64_t)(v65 + v63) >= 1)
    {
      int v67 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v57 + v64);
      if (v67 == 10)
      {
        BOOL v69 = __OFADD__(v62++, 1);
        if (!v69)
        {
          v57 += v64 + 1;
          goto LABEL_76;
        }
        goto LABEL_304;
      }
      if (v67 == 13)
      {
        uint64_t v70 = v57 + v64;
        if (!specialized static Comparable.<= infix(_:_:)(v57 + v64 + 1, v54)) {
          goto LABEL_74;
        }
        if (((v57 - v222 + v64 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v64 + v65) >= 1)
        {
          if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v57 + v64 + 1) == 10) {
            uint64_t v70 = v57 + v64 + 1;
          }
LABEL_74:
          BOOL v69 = __OFADD__(v62++, 1);
          if (!v69)
          {
            unint64_t v57 = v70 + 1;
LABEL_76:
            unint64_t v60 = v217;
            uint64_t v61 = -(uint64_t)v222;
            if (v57 >= v59)
            {
              uint64_t v68 = 0;
LABEL_78:
              unint64_t v57 = v222;
              unsigned __int8 v56 = v212;
LABEL_103:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)uint64_t v92 = 0xD000000000000010;
              *(void *)(v92 + 8) = 0x80000001823ABAE0;
              *(void *)(v92 + 16) = v56;
              *(void *)(v92 + 24) = v62;
              *(void *)(v92 + 32) = v68;
              *(void *)(v92 + 40) = v54 - v57;
              *(unsigned char *)(v92 + 48) = 1;
              goto LABEL_249;
            }
            goto LABEL_59;
          }
LABEL_305:
          __break(1u);
LABEL_306:
          __break(1u);
LABEL_307:
          __break(1u);
LABEL_308:
          __break(1u);
LABEL_309:
          __break(1u);
LABEL_310:
          __break(1u);
        }
        __break(1u);
LABEL_312:
        __break(1u);
LABEL_313:
        __break(1u);
LABEL_314:
        __break(1u);
LABEL_315:
        __break(1u);
LABEL_316:
        __break(1u);
        return;
      }
      uint64_t v68 = v64 + 1;
      if (__OFADD__(v64, 1)) {
        goto LABEL_288;
      }
      ++v64;
      --v63;
      if (v57 + v64 >= v59) {
        goto LABEL_78;
      }
    }
    __break(1u);
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
    goto LABEL_290;
  }
  if (!a2)
  {
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }
  char v13 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
  if (v13 == 48)
  {
    uint64_t v216 = a4;
    if (v11 >= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v11;
    }
    unint64_t v15 = v12 + v14;
    uint64_t v16 = v11 - v14;
    if (!specialized Collection.isEmpty.getter(v12 + v14, v11 - v14))
    {
      unsigned __int8 v17 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
      char v18 = 0;
      if (v17 <= 0x57u)
      {
        unint64_t v39 = v12;
        if (v17 == 46 || v17 == 69) {
          goto LABEL_151;
        }
LABEL_107:
        __int16 v98 = _asciiNumbers.getter();
        unint64_t v99 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15, a3, v216);
        uint64_t v101 = v100;
        uint64_t v103 = v102;
        if (v17 < v98 || HIBYTE(v98) < v17)
        {
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)uint64_t v38 = xmmword_182112860;
          *(void *)(v38 + 16) = v17;
          *(void *)(v38 + 24) = v99;
          *(void *)(v38 + 32) = v101;
          *(void *)(v38 + 40) = v103;
          goto LABEL_247;
        }
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v38 = v99;
        *(void *)(v38 + 8) = v101;
        *(void *)(v38 + 16) = v103;
        goto LABEL_110;
      }
      if (v17 == 120)
      {
LABEL_12:
        if (specialized static Comparable.<= infix(_:_:)(v15 + 1, v12 + v11))
        {
          unsigned __int8 v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + 1);
          if (UInt8.isValidHexDigit.getter(v19)) {
            goto LABEL_14;
          }
          unint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + 1, a3, v216);
          uint64_t v95 = v179;
          uint64_t v97 = v180;
          uint64_t v11 = v19;
          goto LABEL_237;
        }
        if (v16 < 1) {
          goto LABEL_316;
        }
        unsigned __int8 v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
        unint64_t v106 = v15;
        unint64_t v107 = a3;
        uint64_t v108 = v216;
LABEL_236:
        unint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v106, v107, v108);
        uint64_t v95 = v174;
        uint64_t v97 = v175;
        uint64_t v11 = v105;
LABEL_237:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)uint64_t v38 = xmmword_182112860;
        goto LABEL_238;
      }
      if (v17 != 101)
      {
        if (v17 == 88) {
          goto LABEL_12;
        }
        goto LABEL_107;
      }
LABEL_150:
      unint64_t v39 = v12;
      goto LABEL_151;
    }
LABEL_149:
    char v18 = 0;
    goto LABEL_150;
  }
  if ((v13 - 58) >= 0xF7u)
  {
LABEL_148:
    uint64_t v216 = a4;
    goto LABEL_149;
  }
  switch(v13)
  {
    case '+':
    case '-':
      if (v11 < 2)
      {
        if (v11 != 1) {
          goto LABEL_315;
        }
        unsigned __int8 v127 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12);
        unint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        uint64_t v95 = v128;
        uint64_t v97 = v129;
        uint64_t v11 = v127;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        unint64_t v112 = 0xD000000000000010;
        id v113 = "at end of number";
        goto LABEL_146;
      }
      unint64_t v39 = v12 + 1;
      unsigned __int8 v40 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      if (v40 == 48)
      {
        unint64_t v41 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
        uint64_t v43 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)(v41, v42, (unsigned __int8 *)(v12 + 1), a3, a4);
        if (v6) {
          return;
        }
        unint64_t v39 = (unint64_t)v43;
        uint64_t v216 = a4;
        if ((v44 & 1) == 0)
        {
          char v18 = 0;
          goto LABEL_151;
        }
LABEL_14:
        if (*(unsigned char *)v12 != 45) {
          goto LABEL_269;
        }
        uint64_t v20 = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned char *)v12, v11, 1, (uint64_t (*)(unsigned char *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
        if ((v21 & 1) == 0)
        {
          specialized Double.init<A>(exactly:)(v20);
          if ((v22 & 1) == 0) {
            return;
          }
        }
        goto LABEL_179;
      }
      unsigned __int8 v178 = v40;
      if ((v40 - 49) < 9u) {
        goto LABEL_252;
      }
      if (v40 == 46) {
        goto LABEL_280;
      }
      if (v40 != 78)
      {
        if (v40 == 73)
        {
          uint64_t v189 = a4;
          char v18 = 1;
          unint64_t v190 = (char *)specialized BufferView.dropFirst(_:)(1, v12, v11);
          specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v190, v191, a3, v189);
          if (v6) {
            return;
          }
          uint64_t v216 = v189;
          goto LABEL_151;
        }
        uint64_t v226 = 0;
        unint64_t v227 = 0xE000000000000000;
        _StringGuts.grow(_:)(20);
        v199._uint64_t countAndFlagsBits = 0x27207265746661;
        v199._unint64_t object = (void *)0xE700000000000000;
        DefaultStringInterpolation.appendLiteral(_:)(v199);
        unsigned __int8 v200 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12);
        unsigned int v201 = (v200 + 1);
        if ((v200 & 0x80) != 0) {
          unsigned int v201 = (((v200 & 0x3F) << 8) | (v200 >> 6)) + 33217;
        }
        uint64_t v225 = (v201 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v201) >> 3)) & 7)));
        v202._uint64_t countAndFlagsBits = MEMORY[0x185302020](&v225);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v202);
        swift_bridgeObjectRelease();
        v203._uint64_t countAndFlagsBits = 0x6D756E206E692027;
        v203._unint64_t object = (void *)0xEB00000000726562;
        DefaultStringInterpolation.appendLiteral(_:)(v203);
        uint64_t v204 = v226;
        unint64_t v205 = v227;
        unint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v39, a3, a4);
        uint64_t v95 = v206;
        uint64_t v97 = v207;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v38 = v204;
        *(void *)(v38 + 8) = v205;
        *(void *)(v38 + 16) = v178;
        goto LABEL_246;
      }
      uint64_t v196 = a4;
      char v18 = 1;
      long long v197 = (char *)specialized BufferView.dropFirst(_:)(1, v12, v11);
      specialized static JSON5Scanner.validateNaN(from:fullSource:)(v197, v198, a3, v196);
      if (v6) {
        return;
      }
      uint64_t v216 = v196;
LABEL_151:
      uint64_t v132 = v12 + v11 - 1;
      unsigned __int8 v133 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v132);
      if ((v133 | 0x20) != 0x65)
      {
        specialized BufferView.withUnsafePointer<A>(_:)((const char *)v12);
        if ((v143 & 1) == 0)
        {
          double v7 = v142;
          if ((~*(void *)&v142 & 0x7FF0000000000000) == 0)
          {
            if (v18) {
              return;
            }
            goto LABEL_179;
          }
          goto LABEL_213;
        }
        uint64_t v148 = specialized BufferView.suffix(from:)(v39, v12, v11);
        if (v149 < 1) {
          goto LABEL_306;
        }
        uint64_t v150 = v148;
        uint64_t v151 = v149;
        unint64_t v12 = v148 + v149;
        int v152 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v148);
        if (v152 == 45 || (uint64_t v11 = v150, v152 == 43)) {
          uint64_t v11 = v150 + 1;
        }
        unint64_t v224 = a3;
        if (!specialized static Comparable.<= infix(_:_:)(v11, v12)) {
          goto LABEL_307;
        }
        if (v11 - v150 < 0) {
          goto LABEL_308;
        }
        if ((uint64_t)(v12 - v11) < 0) {
          goto LABEL_309;
        }
        char v153 = (const char *)specialized BufferView.prefix(_:)(2, v11);
        if (specialized BufferView.withUnsafePointer<A>(_:)(v153, v154))
        {
          if (v11 < v12)
          {
            __int16 v155 = _asciiNumbers.getter();
            unsigned __int8 v156 = v155;
            char v157 = 0;
            char v158 = 0;
            uint64_t v211 = v151 + v150;
            uint64_t v209 = -v150;
            char v159 = 1;
            unsigned int v160 = HIBYTE(v155);
            while (1)
            {
              char v215 = v159;
              char v221 = v157;
              unint64_t v83 = 0;
              uint64_t v161 = v211 - v11;
              while (1)
              {
                if ((uint64_t)(v209 + v11 + v83) < 0 || (BOOL v89 = v161 < 1, --v161, v89))
                {
                  __break(1u);
LABEL_267:
                  __break(1u);
LABEL_268:
                  __break(1u);
LABEL_269:
                  unint64_t v186 = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)v12, v11, 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
                  if ((v187 & 1) == 0)
                  {
                    specialized Double.init<A>(exactly:)(v186);
                    if ((v188 & 1) == 0) {
                      return;
                    }
                  }
LABEL_179:
                  uint64_t v144 = static String._fromUTF8Repairing(_:)();
                  uint64_t v146 = v145;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v38 = v144;
                  *(void *)(v38 + 8) = v146;
                  *(_OWORD *)(v38 + 16) = 0u;
                  *(_OWORD *)(v38 + 32) = 0u;
                  char v104 = 11;
LABEL_248:
                  *(unsigned char *)(v38 + 48) = v104;
                  goto LABEL_249;
                }
                unsigned __int8 v162 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v11 + v83);
                LOBYTE(v91) = v162;
                if (v162 < v156 || v160 < v162) {
                  break;
                }
                if (__OFADD__(v83, 1)) {
                  goto LABEL_267;
                }
                ++v83;
                if (v11 + v83 >= v12) {
                  goto LABEL_268;
                }
              }
              unint64_t v116 = a3;
              switch(v162)
              {
                case '+':
                case '-':
                  if (v83 != 0 || (v221 & 1) == 0) {
                    goto LABEL_243;
                  }
                  char v157 = 0;
                  char v159 = 0;
                  v11 += v83 + 1;
                  char v158 = 3;
                  if (v11 >= v12) {
                    goto LABEL_299;
                  }
                  continue;
                case ',':
                case '/':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                  goto LABEL_243;
                case '.':
                  if ((v215 & 1) == 0)
                  {
                    unint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v83, a3, v216);
                    uint64_t v95 = v192;
                    uint64_t v97 = v193;
                    LOBYTE(v91) = 46;
                    goto LABEL_244;
                  }
                  char v157 = 0;
                  char v159 = 0;
                  v11 += v83 + 1;
                  char v158 = 1;
                  if (v11 >= v12)
                  {
                    __break(1u);
LABEL_213:
                    if (v7 != 0.0) {
                      return;
                    }
                    uint64_t v73 = v11;
                    uint64_t v74 = v12;
                    if (v11 >= 4)
                    {
                      uint64_t v73 = v11;
                      uint64_t v74 = v12;
                      do
                      {
                        unsigned __int8 v181 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v74);
                        if ((v181 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v181 | 0x20) == 0x65) {
                          return;
                        }
                        unsigned __int8 v182 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v74 + 1);
                        if ((v182 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v182 | 0x20) == 0x65) {
                          return;
                        }
                        unsigned __int8 v183 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v74 + 2);
                        if ((v183 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v183 | 0x20) == 0x65) {
                          return;
                        }
                        unsigned __int8 v184 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v74 + 3);
                        if ((v184 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v184 | 0x20) == 0x65) {
                          return;
                        }
                        uint64_t v74 = specialized BufferView.dropFirst(_:)(4, v74, v73);
                        uint64_t v73 = v185;
                      }
                      while (v185 >= 4);
                    }
LABEL_215:
                    if (v73 != 1)
                    {
                      if (v73 != 2)
                      {
                        if (v73 != 3) {
                          return;
                        }
                        unsigned __int8 v163 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v74 + 2);
                        if ((v163 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v163 | 0x20) == 0x65) {
                          return;
                        }
                      }
                      unsigned __int8 v164 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v74 + 1);
                      if ((v164 - 49) < 9u) {
                        goto LABEL_179;
                      }
                      if ((v164 | 0x20) == 0x65) {
                        return;
                      }
                    }
                    if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v74)
                                         - 49) >= 9u)
                      return;
                    goto LABEL_179;
                  }
                  break;
                case 'E':
                  goto LABEL_206;
                default:
                  unint64_t v116 = a3;
                  if (v162 != 101) {
                    goto LABEL_243;
                  }
LABEL_206:
                  if (v158 != 1 && (v158 || (uint64_t)v83 < 1)) {
                    goto LABEL_243;
                  }
                  char v159 = 0;
                  v11 += v83 + 1;
                  char v158 = 2;
                  char v157 = 1;
                  if (v11 < v12) {
                    continue;
                  }
                  goto LABEL_298;
              }
            }
          }
          goto LABEL_312;
        }
        unint64_t v165 = v11 + 2;
        if ((uint64_t)(v12 - (v11 + 2)) < 1 || v165 >= v12 || ((v165 - v150) & 0x8000000000000000) != 0)
        {
LABEL_232:
          __break(1u);
        }
        else
        {
          uint64_t v166 = v151 + v150 - v11 - 3;
          uint64_t v167 = v11 - v150 + 3;
          while (1)
          {
            uint64_t v168 = v167;
            unsigned __int8 v169 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v165);
            if (!UInt8.isValidHexDigit.getter(v169)) {
              break;
            }
            BOOL v89 = v166-- < 1;
            if (!v89 && ++v165 < v12)
            {
              uint64_t v167 = v168 + 1;
              if ((v168 & 0x8000000000000000) == 0) {
                continue;
              }
            }
            goto LABEL_232;
          }
        }
        LOBYTE(v91) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v165);
        unint64_t v93 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v165, v224, v216);
        uint64_t v95 = v170;
        uint64_t v97 = v171;
        unint64_t v172 = 0xED00007265626D75;
        uint64_t v173 = 0x6E20786568206E69;
        goto LABEL_245;
      }
      unsigned __int8 v134 = v133;
      if (!specialized static Comparable.<= infix(_:_:)(a3, v12 + v11 - 1)) {
        goto LABEL_294;
      }
      a4 = v216;
      if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, a3 + v216)) {
        goto LABEL_295;
      }
      unint64_t v135 = specialized min<A>(_:_:)(v12 + v11, a3 + v216);
      if (v135 <= a3)
      {
        a4 = 0;
        uint64_t v11 = 1;
        goto LABEL_181;
      }
      unint64_t v8 = v135;
      unint64_t v136 = v216 + a3;
      uint64_t v137 = -(uint64_t)a3;
      uint64_t v11 = 1;
      uint64_t v220 = -(uint64_t)a3;
      unint64_t v223 = a3;
      unsigned __int8 v214 = v134;
      unint64_t v218 = v216 + a3;
      do
      {
        uint64_t v138 = 0;
        unint64_t v12 = 0;
        unint64_t v39 = v136 - a3;
        unint64_t v139 = v137 + a3;
        while (1)
        {
          if ((uint64_t)(v139 + v12) < 0 || (uint64_t)(v39 + v138) < 1)
          {
            __break(1u);
LABEL_279:
            __break(1u);
LABEL_280:
            long long v194 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
            specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v194, v195, a3, a4);
            if (v8) {
              return;
            }
LABEL_252:
            uint64_t v216 = a4;
            char v18 = 0;
            goto LABEL_151;
          }
          int v140 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v12);
          if (v140 == 10)
          {
            BOOL v69 = __OFADD__(v11++, 1);
            if (!v69)
            {
              a3 += v12 + 1;
              goto LABEL_173;
            }
LABEL_301:
            __break(1u);
LABEL_302:
            __break(1u);
            goto LABEL_303;
          }
          if (v140 == 13) {
            break;
          }
          a4 = v12 + 1;
          if (__OFADD__(v12, 1)) {
            goto LABEL_279;
          }
          ++v12;
          --v138;
          if (a3 + v12 >= v8) {
            goto LABEL_175;
          }
        }
        uint64_t v141 = a3 + v12;
        a4 = a3 + v12 + 1;
        if (!specialized static Comparable.<= infix(_:_:)(a4, v132)) {
          goto LABEL_171;
        }
        if (((v220 + a3 + v12 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v12 + v39) < 1) {
          goto LABEL_310;
        }
        if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v12 + 1) == 10) {
          uint64_t v141 = a3 + v12 + 1;
        }
LABEL_171:
        BOOL v69 = __OFADD__(v11++, 1);
        if (v69) {
          goto LABEL_302;
        }
        a3 = v141 + 1;
LABEL_173:
        unint64_t v136 = v218;
        uint64_t v137 = v220;
      }
      while (a3 < v8);
      a4 = 0;
LABEL_175:
      a3 = v223;
      unsigned __int8 v134 = v214;
LABEL_181:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v147 = 0xD000000000000010;
      *(void *)(v147 + 8) = 0x80000001823ABAE0;
      *(void *)(v147 + 16) = v134;
      *(void *)(v147 + 24) = v11;
      *(void *)(v147 + 32) = a4;
      *(void *)(v147 + 40) = v132 - a3;
      *(unsigned char *)(v147 + 48) = 1;
LABEL_249:
      swift_willThrow();
      return;
    case '.':
      uint64_t v130 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(1, v12, v11);
      specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v130, v131, a3, a4);
      if (!v6) {
        goto LABEL_148;
      }
      return;
    case 'I':
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)((char *)v12, v11, a3, a4);
      goto LABEL_142;
    case 'N':
      specialized static JSON5Scanner.validateNaN(from:fullSource:)((char *)v12, v11, a3, a4);
LABEL_142:
      if (v6) {
        return;
      }
      uint64_t v216 = a4;
      char v18 = 1;
      goto LABEL_150;
    default:
      goto LABEL_314;
  }
}

{
  unint64_t v6;
  double v7;
  unint64_t v8;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  char v18;
  unsigned __int8 v19;
  uint64_t v20;
  char v21;
  char v22;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unsigned __int8 v31;
  __int16 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  char v44;
  unsigned __int8 v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int8 v52;
  __int16 v53;
  uint64_t v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  __int16 v75;
  unsigned __int8 v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  BOOL v80;
  unsigned __int8 v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int16 v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  unsigned __int8 v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unsigned __int8 v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  const char *v111;
  uint64_t v112;
  __int16 v113;
  unint64_t v114;
  unsigned __int8 v115;
  char v116;
  char v117;
  unsigned int v118;
  char v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned __int8 v125;
  uint64_t v126;
  uint64_t v127;
  unsigned __int8 *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 v131;
  unsigned __int8 v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  int v138;
  uint64_t v139;
  double v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  const char *v151;
  size_t v152;
  __int16 v153;
  unsigned __int8 v154;
  char v155;
  char v156;
  char v157;
  unsigned int v158;
  uint64_t v159;
  unsigned __int8 v160;
  unsigned __int8 v161;
  unsigned __int8 v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned __int8 v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned __int8 v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int8 v179;
  unsigned __int8 v180;
  unsigned __int8 v181;
  unsigned __int8 v182;
  uint64_t v183;
  unint64_t v184;
  char v185;
  char v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned __int8 *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  Swift::String v197;
  unsigned __int8 v198;
  unsigned int v199;
  Swift::String v200;
  Swift::String v201;
  double v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned __int8 v210;
  char v211;
  unsigned __int8 v212;
  char v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char v217;
  uint64_t v218;
  char v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  double v224;
  unint64_t v225;

  unint64_t v8 = v6;
  uint64_t v11 = a2;
  unint64_t v12 = a1;
  if ((a5 & 1) == 0)
  {
    if (!a2)
    {
LABEL_292:
      __break(1u);
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
LABEL_298:
      __break(1u);
LABEL_299:
      __break(1u);
LABEL_300:
      __break(1u);
      goto LABEL_301;
    }
    char v24 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
    uint64_t v220 = a3;
    if (v24 == 48)
    {
      if (v11 >= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v11;
      }
      unint64_t v26 = v12 + v25;
      if (!specialized Collection.isEmpty.getter(v12 + v25, v11 - v25))
      {
        unsigned __int8 v27 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v26);
        unsigned int v28 = v27;
        BOOL v29 = v27 - 46 > 0x37 || ((1 << (v27 - 46)) & 0x80000000800001) == 0;
        uint64_t v30 = v12;
        if (v29)
        {
          unsigned __int8 v31 = v27;
          __int16 v32 = _asciiNumbers.getter();
          unint64_t v33 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v26, v220, a4);
          uint64_t v35 = v34;
          uint64_t v37 = v36;
          if (v28 < v32 || HIBYTE(v32) < v31)
          {
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v38 = xmmword_182112860;
            *(void *)(v38 + 16) = v31;
            *(void *)(v38 + 24) = v33;
            *(void *)(v38 + 32) = v35;
            *(void *)(v38 + 40) = v37;
            goto LABEL_247;
          }
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v38 = v33;
          *(void *)(v38 + 8) = v35;
          *(void *)(v38 + 16) = v37;
LABEL_110:
          *(void *)(v38 + 24) = 0;
          *(void *)(v38 + 32) = 0;
          *(void *)(v38 + 40) = 0;
          uint64_t v102 = 10;
          goto LABEL_248;
        }
        goto LABEL_46;
      }
    }
    else if ((v24 - 58) < 0xF7u)
    {
      if (v24 != 45)
      {
LABEL_301:
        __break(1u);
        goto LABEL_302;
      }
      if (v11 < 2)
      {
        unint64_t v91 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        unint64_t v93 = v92;
        uint64_t v95 = v94;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v38 = 0xD000000000000010;
        *(void *)(v38 + 8) = 0x80000001823ABAE0;
        *(void *)(v38 + 16) = 45;
        goto LABEL_246;
      }
      uint64_t v30 = v12 + 1;
      unsigned __int8 v45 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      if (v45 == 48)
      {
        uint64_t v46 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
        specialized static JSONScanner.validateLeadingZero(in:fullSource:)(v46, v47, a3, a4);
        if (v6) {
          return;
        }
      }
      else
      {
        unint64_t v107 = v45;
        if ((v45 - 49) >= 9u)
        {
          unint64_t v91 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12 + 1, a3, a4);
          unint64_t v93 = v108;
          uint64_t v95 = v109;
          uint64_t v11 = v107;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          uint64_t v110 = 0xD000000000000013;
          uint64_t v111 = "after '-' in number";
LABEL_146:
          *(void *)uint64_t v38 = v110;
          *(void *)(v38 + 8) = (unint64_t)(v111 - 32) | 0x8000000000000000;
LABEL_238:
          *(void *)(v38 + 16) = v11;
          goto LABEL_246;
        }
      }
      goto LABEL_46;
    }
    uint64_t v30 = v12;
LABEL_46:
    unsigned __int8 v214 = a4;
    if ((a6 & 1) != 0 && v30 + 1 < v12 + v11)
    {
      uint64_t v48 = v30 - v12 + 1;
      uint64_t v49 = v30;
      while (1)
      {
        uint64_t v50 = v49 + 1;
        if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v49 + 1) | 0x20) == 0x65) {
          break;
        }
        unint64_t v51 = v49 + 2;
        ++v48;
        ++v49;
        if (v51 >= v12 + v11) {
          goto LABEL_54;
        }
      }
      unsigned __int8 v52 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v49);
      __int16 v53 = _asciiNumbers.getter();
      if (v52 < v53 || HIBYTE(v53) < v52)
      {
        if (v48 < 0 || v11 - v48 < 1) {
          goto LABEL_314;
        }
        uint64_t v103 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v50);
        char v104 = v50;
        unsigned __int8 v105 = v220;
        unint64_t v106 = a4;
        goto LABEL_236;
      }
    }
LABEL_54:
    uint64_t v54 = v12 + v11 - 1;
    unsigned __int8 v55 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v54);
    if ((v55 - 58) >= 0xF6u)
    {
      closure #1 in Double.init(prevalidatedBuffer:)((const char *)v12, v11, (uint64_t)&v224);
      if ((v225 & 1) == 0)
      {
        if ((~*(void *)&v224 & 0x7FF0000000000000) == 0) {
          goto LABEL_179;
        }
        if (v224 != 0.0) {
          return;
        }
        unint64_t v83 = v11;
        __int16 v84 = v12;
        if (v11 >= 4)
        {
          unint64_t v83 = v11;
          __int16 v84 = v12;
          do
          {
            unsigned __int8 v85 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v84);
            if ((v85 - 49) < 9u) {
              goto LABEL_179;
            }
            if ((v85 | 0x20) == 0x65) {
              return;
            }
            uint64_t v86 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v84 + 1);
            if ((v86 - 49) < 9u) {
              goto LABEL_179;
            }
            if ((v86 | 0x20) == 0x65) {
              return;
            }
            unsigned int v87 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v84 + 2);
            if ((v87 - 49) < 9u) {
              goto LABEL_179;
            }
            if ((v87 | 0x20) == 0x65) {
              return;
            }
            uint64_t v88 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v84 + 3);
            if ((v88 - 49) < 9u) {
              goto LABEL_179;
            }
            if ((v88 | 0x20) == 0x65) {
              return;
            }
            __int16 v84 = specialized BufferView.dropFirst(_:)(4, v84, v83);
            unint64_t v83 = v89;
          }
          while (v89 >= 4);
        }
        goto LABEL_215;
      }
      double v71 = specialized BufferView.suffix(from:)(v30, v12, v11);
      uint64_t v11 = v71;
      uint64_t v73 = v72;
      uint64_t v74 = v71 + v72;
      if (v72 <= 0)
      {
        uint64_t v82 = v71;
      }
      else
      {
        unsigned __int8 v75 = _asciiNumbers.getter();
        unsigned __int8 v76 = v75;
        unsigned __int8 v77 = 0;
        unsigned __int8 v78 = HIBYTE(v75);
        uint64_t v79 = v73;
        while (1)
        {
          if (v77 < 0) {
            goto LABEL_290;
          }
          uint64_t v80 = v79-- < 1;
          if (v80) {
            goto LABEL_290;
          }
          uint64_t v81 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v11 + v77);
          if (v81 < v76 || v78 < v81) {
            break;
          }
          ++v77;
          uint64_t v82 = v11 + v77;
          if (v11 + v77 >= v74) {
            goto LABEL_118;
          }
        }
        uint64_t v82 = v11 + v77;
      }
LABEL_118:
      if (v82 < v74)
      {
        unint64_t v112 = v82 - v11;
        id v113 = _asciiNumbers.getter();
        __int16 v115 = v113;
        unint64_t v116 = 0;
        uint64_t v208 = v73 + v11;
        uint64_t v206 = -v11;
        unsigned __int8 v117 = 1;
        char v118 = HIBYTE(v113);
        char v119 = 1;
        while (1)
        {
          uint64_t v211 = v119;
          unint64_t v217 = v117;
          unsigned int v120 = v208 - v82;
          char v121 = v206 + v82;
          while (1)
          {
            if ((v121 & 0x8000000000000000) != 0 || (uint64_t v80 = v120 < 1, --v120, v80))
            {
              __break(1u);
LABEL_241:
              __break(1u);
LABEL_242:
              __break(1u);
LABEL_243:
              unint64_t v91 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v74, v114, v214);
              unint64_t v93 = v174;
              uint64_t v95 = v175;
LABEL_244:
              uint64_t v170 = 0xE900000000000072;
              uint64_t v171 = 0x65626D756E206E69;
LABEL_245:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)uint64_t v38 = v171;
              *(void *)(v38 + 8) = v170;
              *(void *)(v38 + 16) = v82;
LABEL_246:
              *(void *)(v38 + 24) = v91;
              *(void *)(v38 + 32) = v93;
              *(void *)(v38 + 40) = v95;
LABEL_247:
              uint64_t v102 = 1;
              goto LABEL_248;
            }
            uint64_t v122 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v82);
            uint64_t v11 = v122;
            if (v122 < v115 || v118 < v122) {
              break;
            }
            if (__OFADD__(v112, 1)) {
              goto LABEL_241;
            }
            ++v82;
            ++v112;
            ++v121;
            if (v82 >= v74) {
              goto LABEL_242;
            }
          }
          switch((char)v122)
          {
            case '+':
            case '-':
              if (v112 != 0 || (v116 & 1) == 0) {
                goto LABEL_139;
              }
              unint64_t v112 = 0;
              unint64_t v116 = 0;
              unsigned __int8 v117 = 0;
              char v119 = 0;
              if (++v82 >= v74) {
                goto LABEL_293;
              }
              continue;
            case ',':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '<':
            case '=':
            case '>':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
              goto LABEL_139;
            case '.':
              if (v112 < 1 || (v211 & 1) == 0) {
                goto LABEL_139;
              }
              unint64_t v112 = 0;
              unint64_t v116 = 0;
              char v119 = 0;
              ++v82;
              unsigned __int8 v117 = 1;
              if (v82 < v74) {
                continue;
              }
              __break(1u);
              goto LABEL_139;
            case 'E':
              goto LABEL_133;
            default:
              if (v122 != 101) {
                goto LABEL_139;
              }
LABEL_133:
              if (v112 < 1 || (v217 & 1) == 0)
              {
LABEL_139:
                unint64_t v91 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v82, v220, v214);
                unint64_t v93 = v123;
                uint64_t v95 = v124;
                uint64_t v11 = v11;
                goto LABEL_237;
              }
              unint64_t v112 = 0;
              unsigned __int8 v117 = 0;
              char v119 = 0;
              ++v82;
              unint64_t v116 = 1;
              if (v82 >= v74) {
                goto LABEL_294;
              }
              break;
          }
        }
      }
LABEL_304:
      __break(1u);
LABEL_305:
      __break(1u);
      goto LABEL_306;
    }
    unsigned __int8 v56 = v55;
    unint64_t v57 = v220;
    if (!specialized static Comparable.<= infix(_:_:)(v220, v12 + v11 - 1)) {
      goto LABEL_297;
    }
    if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, v220 + a4)) {
      goto LABEL_298;
    }
    unint64_t v58 = specialized min<A>(_:_:)(v12 + v11, v220 + a4);
    if (v58 <= v220)
    {
      uint64_t v68 = 0;
      uint64_t v62 = 1;
      goto LABEL_103;
    }
    unint64_t v59 = v58;
    unint64_t v60 = a4 + v220;
    uint64_t v61 = -(uint64_t)v220;
    uint64_t v62 = 1;
    uint64_t v210 = v56;
    char v215 = a4 + v220;
LABEL_59:
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    unint64_t v65 = v60 - v57;
    unint64_t v66 = v61 + v57;
    while ((uint64_t)(v66 + v64) >= 0 && (uint64_t)(v65 + v63) >= 1)
    {
      int v67 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v57 + v64);
      if (v67 == 10)
      {
        BOOL v69 = __OFADD__(v62++, 1);
        if (!v69)
        {
          v57 += v64 + 1;
          goto LABEL_76;
        }
        goto LABEL_305;
      }
      if (v67 == 13)
      {
        uint64_t v70 = v57 + v64;
        if (!specialized static Comparable.<= infix(_:_:)(v57 + v64 + 1, v54)) {
          goto LABEL_74;
        }
        if (((v57 - v220 + v64 + 1) & 0x8000000000000000) == 0 && (uint64_t)(~v64 + v65) >= 1)
        {
          if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v57 + v64 + 1) == 10) {
            uint64_t v70 = v57 + v64 + 1;
          }
LABEL_74:
          BOOL v69 = __OFADD__(v62++, 1);
          if (!v69)
          {
            unint64_t v57 = v70 + 1;
LABEL_76:
            unint64_t v60 = v215;
            uint64_t v61 = -(uint64_t)v220;
            if (v57 >= v59)
            {
              uint64_t v68 = 0;
LABEL_78:
              unint64_t v57 = v220;
              unsigned __int8 v56 = v210;
LABEL_103:
              lazy protocol witness table accessor for type JSONError and conformance JSONError();
              swift_allocError();
              *(void *)unsigned __int8 v90 = 0xD000000000000010;
              *(void *)(v90 + 8) = 0x80000001823ABAE0;
              *(void *)(v90 + 16) = v56;
              *(void *)(v90 + 24) = v62;
              *(void *)(v90 + 32) = v68;
              *(void *)(v90 + 40) = v54 - v57;
              *(unsigned char *)(v90 + 48) = 1;
              goto LABEL_249;
            }
            goto LABEL_59;
          }
LABEL_306:
          __break(1u);
LABEL_307:
          __break(1u);
LABEL_308:
          __break(1u);
LABEL_309:
          __break(1u);
LABEL_310:
          __break(1u);
LABEL_311:
          __break(1u);
        }
        __break(1u);
LABEL_313:
        __break(1u);
LABEL_314:
        __break(1u);
LABEL_315:
        __break(1u);
LABEL_316:
        __break(1u);
LABEL_317:
        __break(1u);
        return;
      }
      uint64_t v68 = v64 + 1;
      if (__OFADD__(v64, 1)) {
        goto LABEL_289;
      }
      ++v64;
      --v63;
      if (v57 + v64 >= v59) {
        goto LABEL_78;
      }
    }
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }
  if (!a2)
  {
LABEL_291:
    __break(1u);
    goto LABEL_292;
  }
  char v13 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a1);
  if (v13 == 48)
  {
    unsigned __int8 v214 = a4;
    if (v11 >= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v11;
    }
    unint64_t v15 = v12 + v14;
    uint64_t v16 = v11 - v14;
    if (!specialized Collection.isEmpty.getter(v12 + v14, v11 - v14))
    {
      unsigned __int8 v17 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
      char v18 = 0;
      if (v17 <= 0x57u)
      {
        unint64_t v39 = v12;
        if (v17 == 46 || v17 == 69) {
          goto LABEL_151;
        }
LABEL_107:
        uint64_t v96 = _asciiNumbers.getter();
        uint64_t v97 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15, a3, v214);
        unint64_t v99 = v98;
        uint64_t v101 = v100;
        if (v17 < v96 || HIBYTE(v96) < v17)
        {
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)uint64_t v38 = xmmword_182112860;
          *(void *)(v38 + 16) = v17;
          *(void *)(v38 + 24) = v97;
          *(void *)(v38 + 32) = v99;
          *(void *)(v38 + 40) = v101;
          goto LABEL_247;
        }
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v38 = v97;
        *(void *)(v38 + 8) = v99;
        *(void *)(v38 + 16) = v101;
        goto LABEL_110;
      }
      if (v17 == 120)
      {
LABEL_12:
        if (specialized static Comparable.<= infix(_:_:)(v15 + 1, v12 + v11))
        {
          unsigned __int8 v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15 + 1);
          if (UInt8.isValidHexDigit.getter(v19)) {
            goto LABEL_14;
          }
          unint64_t v91 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + 1, a3, v214);
          unint64_t v93 = v177;
          uint64_t v95 = v178;
          uint64_t v11 = v19;
          goto LABEL_237;
        }
        if (v16 < 1) {
          goto LABEL_317;
        }
        uint64_t v103 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v15);
        char v104 = v15;
        unsigned __int8 v105 = a3;
        unint64_t v106 = v214;
LABEL_236:
        unint64_t v91 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v104, v105, v106);
        unint64_t v93 = v172;
        uint64_t v95 = v173;
        uint64_t v11 = v103;
LABEL_237:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)uint64_t v38 = xmmword_182112860;
        goto LABEL_238;
      }
      if (v17 != 101)
      {
        if (v17 == 88) {
          goto LABEL_12;
        }
        goto LABEL_107;
      }
LABEL_150:
      unint64_t v39 = v12;
      goto LABEL_151;
    }
LABEL_149:
    char v18 = 0;
    goto LABEL_150;
  }
  if ((v13 - 58) >= 0xF7u)
  {
LABEL_148:
    unsigned __int8 v214 = a4;
    goto LABEL_149;
  }
  switch(v13)
  {
    case '+':
    case '-':
      if (v11 < 2)
      {
        if (v11 != 1) {
          goto LABEL_316;
        }
        uint64_t v125 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12);
        unint64_t v91 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v12, a3, a4);
        unint64_t v93 = v126;
        uint64_t v95 = v127;
        uint64_t v11 = v125;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        uint64_t v110 = 0xD000000000000010;
        uint64_t v111 = "at end of number";
        goto LABEL_146;
      }
      unint64_t v39 = v12 + 1;
      unsigned __int8 v40 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12 + 1);
      if (v40 == 48)
      {
        unint64_t v41 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
        uint64_t v43 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)(v41, v42, (unsigned __int8 *)(v12 + 1), a3, a4);
        if (v6) {
          return;
        }
        unint64_t v39 = (unint64_t)v43;
        unsigned __int8 v214 = a4;
        if ((v44 & 1) == 0) {
          goto LABEL_253;
        }
LABEL_14:
        if (*(unsigned char *)v12 != 45) {
          goto LABEL_270;
        }
        uint64_t v20 = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned char *)v12, v11, 1, (uint64_t (*)(unsigned char *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:));
        if ((v21 & 1) == 0)
        {
          specialized Double.init<A>(exactly:)(v20);
          if ((v22 & 1) == 0) {
            return;
          }
        }
        goto LABEL_179;
      }
      uint64_t v176 = v40;
      if ((v40 - 49) < 9u) {
        goto LABEL_252;
      }
      if (v40 == 46) {
        goto LABEL_281;
      }
      if (v40 != 78)
      {
        if (v40 == 73)
        {
          char v187 = a4;
          char v18 = 1;
          char v188 = (char *)specialized BufferView.dropFirst(_:)(1, v12, v11);
          specialized static JSON5Scanner.validateInfinity(from:fullSource:)(v188, v189, a3, v187);
          if (v6) {
            return;
          }
          unsigned __int8 v214 = v187;
          goto LABEL_151;
        }
        unint64_t v224 = 0.0;
        uint64_t v225 = 0xE000000000000000;
        _StringGuts.grow(_:)(20);
        v197._uint64_t countAndFlagsBits = 0x27207265746661;
        v197._unint64_t object = (void *)0xE700000000000000;
        DefaultStringInterpolation.appendLiteral(_:)(v197);
        uint64_t v198 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v12);
        Swift::String v199 = (v198 + 1);
        if ((v198 & 0x80) != 0) {
          Swift::String v199 = (((v198 & 0x3F) << 8) | (v198 >> 6)) + 33217;
        }
        unint64_t v223 = (v199 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v199) >> 3)) & 7)));
        v200._uint64_t countAndFlagsBits = MEMORY[0x185302020](&v223);
        specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v200);
        swift_bridgeObjectRelease();
        v201._uint64_t countAndFlagsBits = 0x6D756E206E692027;
        v201._unint64_t object = (void *)0xEB00000000726562;
        DefaultStringInterpolation.appendLiteral(_:)(v201);
        Swift::String v202 = v224;
        Swift::String v203 = v225;
        unint64_t v91 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v39, a3, a4);
        unint64_t v93 = v204;
        uint64_t v95 = v205;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(double *)uint64_t v38 = v202;
        *(void *)(v38 + 8) = v203;
        *(void *)(v38 + 16) = v176;
        goto LABEL_246;
      }
      long long v194 = a4;
      char v18 = 1;
      uint64_t v195 = (char *)specialized BufferView.dropFirst(_:)(1, v12, v11);
      specialized static JSON5Scanner.validateNaN(from:fullSource:)(v195, v196, a3, v194);
      if (v6) {
        return;
      }
      unsigned __int8 v214 = v194;
LABEL_151:
      uint64_t v130 = v12 + v11 - 1;
      uint64_t v131 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v130);
      if ((v131 | 0x20) != 0x65)
      {
        specialized BufferView.withUnsafePointer<A>(_:)((const char *)v12);
        if ((v141 & 1) == 0)
        {
          double v7 = v140;
          if ((~*(void *)&v140 & 0x7FF0000000000000) == 0)
          {
            if (v18) {
              return;
            }
            goto LABEL_179;
          }
          goto LABEL_213;
        }
        uint64_t v146 = specialized BufferView.suffix(from:)(v39, v12, v11);
        if (v147 < 1) {
          goto LABEL_307;
        }
        uint64_t v148 = v146;
        uint64_t v149 = v147;
        unint64_t v12 = v146 + v147;
        uint64_t v150 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v146);
        if (v150 == 45 || (uint64_t v11 = v148, v150 == 43)) {
          uint64_t v11 = v148 + 1;
        }
        unint64_t v222 = a3;
        if (!specialized static Comparable.<= infix(_:_:)(v11, v12)) {
          goto LABEL_308;
        }
        if (v11 - v148 < 0) {
          goto LABEL_309;
        }
        if ((uint64_t)(v12 - v11) < 0) {
          goto LABEL_310;
        }
        uint64_t v151 = (const char *)specialized BufferView.prefix(_:)(2, v11);
        if (specialized BufferView.withUnsafePointer<A>(_:)(v151, v152))
        {
          if (v11 < v12)
          {
            char v153 = _asciiNumbers.getter();
            size_t v154 = v153;
            __int16 v155 = 0;
            unsigned __int8 v156 = 0;
            uint64_t v209 = v149 + v148;
            uint64_t v207 = -v148;
            char v157 = 1;
            char v158 = HIBYTE(v153);
            while (1)
            {
              char v213 = v157;
              char v219 = v155;
              uint64_t v74 = 0;
              char v159 = v209 - v11;
              while (1)
              {
                if ((uint64_t)(v207 + v11 + v74) < 0 || (uint64_t v80 = v159 < 1, --v159, v80))
                {
                  __break(1u);
LABEL_268:
                  __break(1u);
LABEL_269:
                  __break(1u);
LABEL_270:
                  unsigned __int8 v184 = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)v12, v11, 1, (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))specialized _parseIntegerDigits<A>(_:isNegative:));
                  if ((v185 & 1) == 0)
                  {
                    specialized Double.init<A>(exactly:)(v184);
                    if ((v186 & 1) == 0) {
                      return;
                    }
                  }
LABEL_179:
                  double v142 = static String._fromUTF8Repairing(_:)();
                  uint64_t v144 = v143;
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)uint64_t v38 = v142;
                  *(void *)(v38 + 8) = v144;
                  *(_OWORD *)(v38 + 16) = 0u;
                  *(_OWORD *)(v38 + 32) = 0u;
                  uint64_t v102 = 11;
LABEL_248:
                  *(unsigned char *)(v38 + 48) = v102;
                  goto LABEL_249;
                }
                unsigned int v160 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v11 + v74);
                LOBYTE(v82) = v160;
                if (v160 < v154 || v158 < v160) {
                  break;
                }
                if (__OFADD__(v74, 1)) {
                  goto LABEL_268;
                }
                ++v74;
                if (v11 + v74 >= v12) {
                  goto LABEL_269;
                }
              }
              uint64_t v114 = a3;
              switch(v160)
              {
                case '+':
                case '-':
                  if (v74 != 0 || (v219 & 1) == 0) {
                    goto LABEL_243;
                  }
                  __int16 v155 = 0;
                  char v157 = 0;
                  v11 += v74 + 1;
                  unsigned __int8 v156 = 3;
                  if (v11 >= v12) {
                    goto LABEL_300;
                  }
                  continue;
                case ',':
                case '/':
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                case ':':
                case ';':
                case '<':
                case '=':
                case '>':
                case '?':
                case '@':
                case 'A':
                case 'B':
                case 'C':
                case 'D':
                  goto LABEL_243;
                case '.':
                  if ((v213 & 1) == 0)
                  {
                    unint64_t v91 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11 + v74, a3, v214);
                    unint64_t v93 = v190;
                    uint64_t v95 = v191;
                    LOBYTE(v82) = 46;
                    goto LABEL_244;
                  }
                  __int16 v155 = 0;
                  char v157 = 0;
                  v11 += v74 + 1;
                  unsigned __int8 v156 = 1;
                  if (v11 >= v12)
                  {
                    __break(1u);
LABEL_213:
                    if (v7 != 0.0) {
                      return;
                    }
                    unint64_t v83 = v11;
                    __int16 v84 = v12;
                    if (v11 >= 4)
                    {
                      unint64_t v83 = v11;
                      __int16 v84 = v12;
                      do
                      {
                        uint64_t v179 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v84);
                        if ((v179 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v179 | 0x20) == 0x65) {
                          return;
                        }
                        uint64_t v180 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v84 + 1);
                        if ((v180 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v180 | 0x20) == 0x65) {
                          return;
                        }
                        unsigned __int8 v181 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v84 + 2);
                        if ((v181 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v181 | 0x20) == 0x65) {
                          return;
                        }
                        unsigned __int8 v182 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v84 + 3);
                        if ((v182 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v182 | 0x20) == 0x65) {
                          return;
                        }
                        __int16 v84 = specialized BufferView.dropFirst(_:)(4, v84, v83);
                        unint64_t v83 = v183;
                      }
                      while (v183 >= 4);
                    }
LABEL_215:
                    if (v83 != 1)
                    {
                      if (v83 != 2)
                      {
                        if (v83 != 3) {
                          return;
                        }
                        uint64_t v161 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v84 + 2);
                        if ((v161 - 49) < 9u) {
                          goto LABEL_179;
                        }
                        if ((v161 | 0x20) == 0x65) {
                          return;
                        }
                      }
                      unsigned __int8 v162 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v84 + 1);
                      if ((v162 - 49) < 9u) {
                        goto LABEL_179;
                      }
                      if ((v162 | 0x20) == 0x65) {
                        return;
                      }
                    }
                    if ((specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v84)
                                         - 49) > 8u)
                      return;
                    goto LABEL_179;
                  }
                  break;
                case 'E':
                  goto LABEL_206;
                default:
                  uint64_t v114 = a3;
                  if (v160 != 101) {
                    goto LABEL_243;
                  }
LABEL_206:
                  if (v156 != 1 && (v156 || (uint64_t)v74 < 1)) {
                    goto LABEL_243;
                  }
                  char v157 = 0;
                  v11 += v74 + 1;
                  unsigned __int8 v156 = 2;
                  __int16 v155 = 1;
                  if (v11 < v12) {
                    continue;
                  }
                  goto LABEL_299;
              }
            }
          }
          goto LABEL_313;
        }
        unsigned __int8 v163 = v11 + 2;
        if ((uint64_t)(v12 - (v11 + 2)) < 1 || v163 >= v12 || ((v163 - v148) & 0x8000000000000000) != 0)
        {
LABEL_232:
          __break(1u);
        }
        else
        {
          unsigned __int8 v164 = v149 + v148 - v11 - 3;
          unint64_t v165 = v11 - v148 + 3;
          while (1)
          {
            uint64_t v166 = v165;
            uint64_t v167 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v163);
            if (!UInt8.isValidHexDigit.getter(v167)) {
              break;
            }
            uint64_t v80 = v164-- < 1;
            if (!v80 && ++v163 < v12)
            {
              unint64_t v165 = v166 + 1;
              if ((v166 & 0x8000000000000000) == 0) {
                continue;
              }
            }
            goto LABEL_232;
          }
        }
        LOBYTE(v82) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, v163);
        unint64_t v91 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v163, v222, v214);
        unint64_t v93 = v168;
        uint64_t v95 = v169;
        uint64_t v170 = 0xED00007265626D75;
        uint64_t v171 = 0x6E20786568206E69;
        goto LABEL_245;
      }
      uint64_t v132 = v131;
      if (!specialized static Comparable.<= infix(_:_:)(a3, v12 + v11 - 1)) {
        goto LABEL_295;
      }
      a4 = v214;
      if (!specialized static Comparable.<= infix(_:_:)(v12 + v11 - 1, a3 + v214)) {
        goto LABEL_296;
      }
      unsigned __int8 v133 = specialized min<A>(_:_:)(v12 + v11, a3 + v214);
      if (v133 <= a3)
      {
        a4 = 0;
        uint64_t v11 = 1;
        goto LABEL_181;
      }
      unint64_t v8 = v133;
      unsigned __int8 v134 = v214 + a3;
      unint64_t v135 = -(uint64_t)a3;
      uint64_t v11 = 1;
      unint64_t v218 = -(uint64_t)a3;
      char v221 = a3;
      unsigned __int8 v212 = v132;
      uint64_t v216 = v214 + a3;
      do
      {
        unint64_t v136 = 0;
        unint64_t v12 = 0;
        unint64_t v39 = v134 - a3;
        uint64_t v137 = v135 + a3;
        while (1)
        {
          if ((uint64_t)(v137 + v12) < 0 || (uint64_t)(v39 + v136) < 1)
          {
            __break(1u);
LABEL_280:
            __break(1u);
LABEL_281:
            uint64_t v192 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(2, v12, v11);
            specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v192, v193, a3, a4);
            if (v8) {
              return;
            }
LABEL_252:
            unsigned __int8 v214 = a4;
LABEL_253:
            char v18 = 0;
            goto LABEL_151;
          }
          uint64_t v138 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v12);
          if (v138 == 10)
          {
            BOOL v69 = __OFADD__(v11++, 1);
            if (!v69)
            {
              a3 += v12 + 1;
              goto LABEL_173;
            }
LABEL_302:
            __break(1u);
LABEL_303:
            __break(1u);
            goto LABEL_304;
          }
          if (v138 == 13) {
            break;
          }
          a4 = v12 + 1;
          if (__OFADD__(v12, 1)) {
            goto LABEL_280;
          }
          ++v12;
          --v136;
          if (a3 + v12 >= v8) {
            goto LABEL_175;
          }
        }
        unint64_t v139 = a3 + v12;
        a4 = a3 + v12 + 1;
        if (!specialized static Comparable.<= infix(_:_:)(a4, v130)) {
          goto LABEL_171;
        }
        if (((v218 + a3 + v12 + 1) & 0x8000000000000000) != 0 || (uint64_t)(~v12 + v39) < 1) {
          goto LABEL_311;
        }
        if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0, a3 + v12 + 1) == 10) {
          unint64_t v139 = a3 + v12 + 1;
        }
LABEL_171:
        BOOL v69 = __OFADD__(v11++, 1);
        if (v69) {
          goto LABEL_303;
        }
        a3 = v139 + 1;
LABEL_173:
        unsigned __int8 v134 = v216;
        unint64_t v135 = v218;
      }
      while (a3 < v8);
      a4 = 0;
LABEL_175:
      a3 = v221;
      uint64_t v132 = v212;
LABEL_181:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v145 = 0xD000000000000010;
      *(void *)(v145 + 8) = 0x80000001823ABAE0;
      *(void *)(v145 + 16) = v132;
      *(void *)(v145 + 24) = v11;
      *(void *)(v145 + 32) = a4;
      *(void *)(v145 + 40) = v130 - a3;
      *(unsigned char *)(v145 + 48) = 1;
LABEL_249:
      swift_willThrow();
      return;
    case '.':
      uint64_t v128 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(1, v12, v11);
      specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v128, v129, a3, a4);
      if (!v6) {
        goto LABEL_148;
      }
      return;
    case 'I':
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)((char *)v12, v11, a3, a4);
      goto LABEL_142;
    case 'N':
      specialized static JSON5Scanner.validateNaN(from:fullSource:)((char *)v12, v11, a3, a4);
LABEL_142:
      if (v6) {
        return;
      }
      unsigned __int8 v214 = a4;
      char v18 = 1;
      goto LABEL_150;
    default:
      goto LABEL_315;
  }
}

double specialized BufferView.withUnsafePointer<A>(_:)(const char *a1)
{
  v2[1] = *(char **)MEMORY[0x1E4F143B8];
  v2[0] = 0;
  return _stringshims_strtod_l(a1, v2, 0);
}

double protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistKeyedDecodingContainer<A, B>(uint64_t a1, uint64_t *a2)
{
  return _PlistKeyedDecodingContainer.decode(_:forKey:)(a1, *(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), a2[2], a2[3], a2[4], a2[5]);
}

double _PlistKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v54 = a4;
  uint64_t v57 = a2;
  uint64_t v58 = a3;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v44 = *(void *)(v14 - 8);
  uint64_t v45 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v43 = (char *)&v41 - v15;
  swift_getAssociatedTypeWitness();
  uint64_t v51 = a8;
  uint64_t v52 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v18 - 8);
  uint64_t v47 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v41 - v19;
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v48 = (char *)&v41 - v23;
  uint64_t v24 = v58;
  uint64_t v25 = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(v25 - 8);
  uint64_t v42 = v25;
  MEMORY[0x1F4188790](v25);
  uint64_t v49 = (char *)&v41 - v26;
  uint64_t v53 = a1;
  uint64_t v55 = a5;
  uint64_t v56 = a7;
  uint64_t v27 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(v24 + 16) && (unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28), (v30 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v20, *(void *)(v24 + 56) + *(void *)(v21 + 72) * v29, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v20, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v20, 1, 1, AssociatedTypeWitness);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v20, v47);
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized _PlistKeyedDecodingContainer.errorForMissingValue<A>(key:type:)(v53, v54, v55, v56, v31, v51, &demangling cache variable for type metadata for Double.Type, &demangling cache variable for type metadata for Double.Type.Type);
    swift_willThrow();
  }
  else
  {
    __int16 v32 = v48;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v48, v20, AssociatedTypeWitness);
    unint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 80);
    swift_unknownObjectRetain();
    uint64_t v34 = swift_checkMetadataState();
    uint64_t v36 = (uint64_t)v49;
    uint64_t v35 = v50;
    v33(v32, v34, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v32, AssociatedTypeWitness);
    swift_unknownObjectRelease();
    if (!v35)
    {
      uint64_t v37 = v55;
      uint64_t v38 = *(void *)(v55 - 8);
      unint64_t v39 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v43, v53, v55);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
      double v8 = specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(v36, v54, v39, v37, v56);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v39, v45);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v36, v42);
    }
  }
  return v8;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DateInterval.CodingKeys()
{
  if (*v0) {
    return 0x6E6F697461727564;
  }
  else {
    return 0x7472617473;
  }
}

unsigned char *storeEnumTagSinglePayload for DateInterval.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

double specialized _PlistDecoder.unwrapFloatingPoint<A, B>(from:for:_:)(uint64_t a1, unint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  void (*v26)(void *__return_ptr, uint64_t, uint64_t, unint64_t, char *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  double result;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void v46[11];

  unsigned int v6 = v5;
  unsigned __int8 v40 = a5;
  uint64_t v42 = a3;
  v46[10] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v5;
  uint64_t v41 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = *(void *)(v10 + 80);
  uint64_t v20 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v20 + 40))(a1, v19, v20, v16))
  {
    uint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v22 = v21;
    *(void *)uint64_t v21 = MEMORY[0x1E4FBB3D0];
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v23(v18, v42, v12);
    v23(v14, v18, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v14, 1, a4) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v43 + 8);
      v24(v14, v12);
      _CodingPathNode.path.getter(a2);
      v24(v18, v12);
    }
    else
    {
      uint64_t v42 = v22;
      unsigned __int8 v31 = v41;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v39, v14, a4);
      __int16 v32 = _CodingPathNode.path.getter(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v34 = v40;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v34;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      uint64_t v36 = v39;
      (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 16))(boxed_opaque_existential_1, v39, a4);
      uint64_t v44 = v32;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v12);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v36, a4);
      uint64_t v22 = v42;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t v44 = 0;
    uint64_t v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(char *, void))(*(void *)(v38 - 8) + 104))(v22, *MEMORY[0x1E4FBBA80]);
    swift_willThrow();
  }
  else
  {
    uint64_t v25 = v6[3];
    uint64_t v26 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, unint64_t, void *, void, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v20 + 80);
    uint64_t v27 = lazy protocol witness table accessor for type Double and conformance Double();
    swift_unknownObjectRetain();
    uint64_t v28 = v27;
    unint64_t v29 = v38;
    v26(v46, a1, v25, a2, v42, MEMORY[0x1E4FBB3D0], a4, v28, v40, v19, v20);
    swift_unknownObjectRelease();
    if (!v29) {
      return *(double *)v46;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:) in conformance _XMLPlistDecodingFormat@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return static _XMLPlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:)(*a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t static _XMLPlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)(a2, a5, a3, a4, a1, a5, a6, a7, a9, a8);
}

uint64_t XMLPlistMap.Value.realValue<A, B>(in:as:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  unint64_t v60 = (uint64_t *)a2;
  uint64_t v56 = a8;
  uint64_t v57 = a6;
  uint64_t v61 = a3;
  uint64_t v58 = a9;
  v63[10] = *MEMORY[0x1E4F143B8];
  uint64_t v55 = *(uint64_t **)(a7 - 8);
  uint64_t v62 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v54 - v22;
  if (a5 >> 60 == 6)
  {
    MEMORY[0x1F4188790](v21);
    uint64_t v38 = v56;
    *(&v54 - 8) = v57;
    *(&v54 - 7) = a7;
    uint64_t v39 = v62;
    *(&v54 - 6) = v38;
    *(&v54 - 5) = v39;
    *(&v54 - 4) = v61;
    *(&v54 - 3) = a4;
    *(&v54 - 2) = (uint64_t)v60;
    uint64_t v40 = *(void *)(a1 + 24);
    *(double *)&long long v42 = MEMORY[0x1F4188790](v41);
    *(&v54 - 6) = v43;
    *(&v54 - 5) = (uint64_t)partial apply for closure #1 in XMLPlistMap.Value.realValue<A, B>(in:as:for:_:);
    *(&v54 - 4) = v44;
    *(_OWORD *)(&v54 - 3) = v42;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v40 + 40));
    partial apply for closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((void *)(v40 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v40 + 40));
    return swift_release();
  }
  else if (a5 >> 60 == 7)
  {
    unint64_t v60 = &v54;
    uint64_t v54 = a5 & 0xFFFFFFFFFFFFFFFLL;
    MEMORY[0x1F4188790](v21);
    uint64_t v55 = &v54;
    unint64_t v26 = v61;
    uint64_t v25 = v62;
    *(&v54 - 6) = a7;
    *(&v54 - 5) = v25;
    *(&v54 - 4) = a5;
    *(&v54 - 3) = v26;
    *(&v54 - 2) = a4;
    uint64_t v27 = *(void *)(a1 + 24);
    *(double *)&long long v29 = MEMORY[0x1F4188790](v28);
    *(&v54 - 4) = (uint64_t)partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:);
    *(&v54 - 3) = v30;
    *((_OWORD *)&v54 - 1) = v29;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v27 + 40));
    unsigned __int8 v31 = v59;
    partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((void *)(v27 + 16), v63);
    os_unfair_lock_unlock((os_unfair_lock_t)(v27 + 40));
    swift_release();
    if (v31)
    {

      unint64_t v60 = &v54;
      MEMORY[0x1F4188790](v32);
      uint64_t v33 = v62;
      *(&v54 - 6) = a7;
      *(&v54 - 5) = v33;
      *(&v54 - 4) = a5;
      *(&v54 - 3) = v26;
      *(&v54 - 2) = a4;
      uint64_t v34 = *(void *)(a1 + 24);
      *(double *)&long long v36 = MEMORY[0x1F4188790](v35);
      *(&v54 - 4) = (uint64_t)partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:);
      *(&v54 - 3) = v37;
      *((_OWORD *)&v54 - 1) = v36;
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v34 + 40));
      partial apply for specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)((void *)(v34 + 16), v63);
      os_unfair_lock_unlock((os_unfair_lock_t)(v34 + 40));
      swift_release();
      lazy protocol witness table accessor for type Int64 and conformance Int64();
    }
    else
    {
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    }
    return dispatch thunk of FloatingPoint.init<A>(_:)();
  }
  else
  {
    unint64_t v59 = (void *)a5;
    uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16);
    v46((char *)&v54 - v22, a4, v16, v23);
    ((void (*)(char *, char *, uint64_t))v46)(v19, v24, v16);
    uint64_t v47 = v55;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v55[6])(v19, 1, a7) == 1)
    {
      uint64_t v48 = *(void (**)(char *, uint64_t))(v17 + 8);
      v48(v19, v16);
      _CodingPathNode.path.getter(v61);
      v48(v24, v16);
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v47[4])(v15, v19, a7);
      uint64_t v49 = _CodingPathNode.path.getter(v61);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v51 = v62;
      *(void *)(inited + 56) = a7;
      *(void *)(inited + 64) = v51;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      ((void (*)(uint64_t *, char *, uint64_t))v47[2])(boxed_opaque_existential_1, v15, a7);
      v63[0] = v49;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, v16);
      ((void (*)(char *, uint64_t))v47[1])(v15, a7);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)((uint64_t)v60, (uint64_t)v59, v53);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
}

uint64_t static XMLPlistMap.Value.rejectHexadecimalValues<A>(_:fullSource:for:_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 >= 1)
  {
    uint64_t v12 = (unsigned char *)result;
    while (2)
    {
      switch(*v12)
      {
        case 9:
        case 0xA:
        case 0xD:
        case 0x20:
        case 0x2B:
        case 0x2D:
        case 0x30:
          if ((unint64_t)++v12 < result + a2) {
            continue;
          }
          break;
        case 0xB:
        case 0xC:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2C:
        case 0x2E:
        case 0x2F:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
        case 0x3A:
        case 0x3B:
        case 0x3C:
        case 0x3D:
        case 0x3E:
        case 0x3F:
        case 0x40:
        case 0x41:
        case 0x42:
        case 0x43:
        case 0x44:
        case 0x45:
        case 0x46:
        case 0x47:
        case 0x48:
        case 0x49:
        case 0x4A:
        case 0x4B:
        case 0x4C:
        case 0x4D:
        case 0x4E:
        case 0x4F:
        case 0x50:
        case 0x51:
        case 0x52:
        case 0x53:
        case 0x54:
        case 0x55:
        case 0x56:
        case 0x57:
          return result;
        case 0x58:
          goto LABEL_7;
        default:
          if (*v12 == 120)
          {
LABEL_7:
            _StringGuts.grow(_:)(40);
            swift_bridgeObjectRelease();
            BufferReader.lineNumber.getter();
            v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v13);
            swift_bridgeObjectRelease();
            type metadata accessor for DecodingError();
            swift_allocError();
            static DecodingError._dataCorrupted<A>(_:for:_:)(0xD000000000000026, 0x80000001823AA730, a5, a6, a7, a8, v14);
            swift_bridgeObjectRelease();
            unint64_t result = swift_willThrow();
          }
          break;
      }
      break;
    }
  }
  return result;
}

uint64_t closure #1 in static XMLPlistMap.Value.parseSpecialRealValue<A, B>(_:fullSource:for:_:)@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v47 = a9;
  unint64_t v45 = a7;
  uint64_t v46 = a8;
  uint64_t v44 = *(void *)(a12 + 16);
  uint64_t v43 = *(void *)(*(void *)(v44 + 16) + 8);
  uint64_t v42 = *(void *)(v43 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  MEMORY[0x1F4188790](v20);
  MEMORY[0x1F4188790](v21);
  if (!a2)
  {
    uint64_t v48 = a5;
    uint64_t v49 = a6;
    uint64_t v50 = a3;
    uint64_t v51 = a3;
    uint64_t v52 = a3 + a4;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    uint64_t v53 = BufferReader.lineNumber.getter();
    v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)(0xD000000000000026, 0x80000001823AA730, v45, v46, a11, a13, v29);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  int v25 = *(unsigned __int8 *)a1;
  if ((v25 & 0xFFFFFFDF) == 0x4E && a2 == 3)
  {
    if ((*((unsigned __int8 *)a1 + 1) | 0x20) == 0x61 && (*((unsigned __int8 *)a1 + 2) | 0x20) == 0x6E)
    {
      uint64_t v26 = v47;
      uint64_t v27 = v23;
      dispatch thunk of static FloatingPoint.nan.getter();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v26, 0, 1, a10);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v47, 1, 1, a10);
  }
  uint64_t v31 = v23;
  if (v25 != 43 || a2 != 9)
  {
    if (v25 == 43 && a2 == 4)
    {
      if ((*((unsigned __int8 *)a1 + 1) | 0x20) == 0x69
        && (*((unsigned __int8 *)a1 + 2) | 0x20) == 0x6E
        && (*((unsigned __int8 *)a1 + 3) | 0x20) == 0x66)
      {
        goto LABEL_18;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v47, 1, 1, a10);
    }
    long long v36 = (char *)&v42 - v22;
    if (v25 == 45 && a2 == 9)
    {
      uint64_t v37 = v24;
      int v38 = _stringshims_strncasecmp_l(a1, "-infinity", 9uLL, 0);
      uint64_t v23 = v31;
      if (v38) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v47, 1, 1, a10);
      }
    }
    else
    {
      if (v25 != 45 || a2 != 4)
      {
        if ((v25 & 0xFFFFFFDF) != 0x49 || a2 != 8) {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v47, 1, 1, a10);
        }
        uint64_t v32 = "infinity";
        uint64_t v33 = a1;
        size_t v34 = 8;
        goto LABEL_11;
      }
      if ((*((unsigned __int8 *)a1 + 1) | 0x20) != 0x69
        || (*((unsigned __int8 *)a1 + 2) | 0x20) != 0x6E
        || (*((unsigned __int8 *)a1 + 3) | 0x20) != 0x66)
      {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v47, 1, 1, a10);
      }
      uint64_t v37 = v24;
    }
    uint64_t v39 = v23;
    dispatch thunk of static FloatingPoint.infinity.getter();
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    uint64_t v40 = v47;
    dispatch thunk of static Numeric.* infix(_:_:)();
    uint64_t v41 = *(void (**)(char *, uint64_t))(v39 + 8);
    v41(v37, a10);
    v41(v36, a10);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v40, 0, 1, a10);
  }
  uint64_t v32 = "+infinity";
  uint64_t v33 = a1;
  size_t v34 = 9;
LABEL_11:
  int v35 = _stringshims_strncasecmp_l(v33, v32, v34, 0);
  uint64_t v23 = v31;
  if (!v35)
  {
LABEL_18:
    uint64_t v26 = v47;
    uint64_t v27 = v23;
    dispatch thunk of static FloatingPoint.infinity.getter();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v26, 0, 1, a10);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v47, 1, 1, a10);
}

uint64_t protocol witness for static PlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:) in conformance _BPlistDecodingFormat@<X0>(unint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  return static _BPlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t static _BPlistDecodingFormat.unwrapFloatingPoint<A, B>(from:in:for:_:)@<X0>(unint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v88 = a6;
  uint64_t v90 = a5;
  unint64_t v91 = a1;
  uint64_t v92 = a2;
  uint64_t v89 = a7;
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  uint64_t v94 = a3;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v86 - v13;
  uint64_t v87 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = a4;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v25 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v86 - v23;
  if (v24 >> 60 != 7)
  {
    if (v24 >> 60 != 8)
    {
      uint64_t v90 = v24;
      unint64_t v66 = *(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16);
      v66((char *)&v86 - v23, v92, v18, v25);
      ((void (*)(char *, char *, uint64_t))v66)(v21, v26, v18);
      uint64_t v67 = v87;
      uint64_t v68 = v93;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v21, 1, v93) == 1)
      {
        BOOL v69 = *(void (**)(char *, uint64_t))(v19 + 8);
        v69(v21, v18);
        _CodingPathNode.path.getter(v91);
        v69(v26, v18);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v17, v21, v68);
        uint64_t v72 = _CodingPathNode.path.getter(v91);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v74 = v88;
        *(void *)(inited + 56) = v68;
        *(void *)(inited + 64) = v74;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
        (*(void (**)(uint64_t *, char *, uint64_t))(v67 + 16))(boxed_opaque_existential_1, v17, v68);
        unint64_t v96 = v72;
        specialized Array.append<A>(contentsOf:)(inited);
        (*(void (**)(char *, uint64_t))(v19 + 8))(v26, v18);
        (*(void (**)(char *, uint64_t))(v67 + 8))(v17, v68);
      }
      type metadata accessor for DecodingError();
      swift_allocError();
      specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)(v94, v90, (uint64_t (*)(uint64_t))BPlistMap.Value.debugDataTypeDescription.getter, v76);
      goto LABEL_27;
    }
    uint64_t v27 = v24 & 0xFFFFFFFFFFFFFFFLL;
    uint64_t v28 = *(void *)((v24 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
    uint64_t v29 = v93;
    if (*(unsigned char *)((v24 & 0xFFFFFFFFFFFFFFFLL) + 0x18) != 1 || (v28 & 0x8000000000000000) == 0)
    {
      unint64_t v96 = *(void *)((v24 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      return dispatch thunk of FloatingPoint.init<A>(_:)();
    }
    unint64_t v96 = 0;
    unint64_t v97 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v30._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v30._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v30);
    uint64_t v95 = v28;
    v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._unint64_t object = (void *)0x80000001823B1A20;
    v32._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v32);
    v33._uint64_t countAndFlagsBits = 0x3436746E4955;
    v33._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v33);
    v34._uint64_t countAndFlagsBits = 46;
    v34._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    uint64_t v35 = v96;
    uint64_t v36 = v97;
    type metadata accessor for DecodingError();
    uint64_t v37 = (void *)swift_allocError();
    static DecodingError._dataCorrupted<A>(_:for:_:)(v35, v36, v91, v92, v29, v88, v38);
    swift_bridgeObjectRelease();
    swift_willThrow();

    uint64_t v39 = *(void *)(v27 + 16);
    if ((*(unsigned char *)(v27 + 24) & 1) != 0 || (v39 & 0x8000000000000000) == 0)
    {
      unint64_t v96 = *(void *)(v27 + 16);
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      return dispatch thunk of FloatingPoint.init<A>(_:)();
    }
    unint64_t v96 = 0;
    unint64_t v97 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v40._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v40._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v40);
    uint64_t v95 = v39;
    v41._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._unint64_t object = (void *)0x80000001823B1A20;
    v42._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v42);
    v43._uint64_t countAndFlagsBits = 0x3436746E49;
    v43._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v43);
    v44._uint64_t countAndFlagsBits = 46;
    v44._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    unint64_t v46 = v96;
    unint64_t v45 = v97;
    swift_allocError();
    uint64_t v48 = v47;
    uint64_t v49 = v46;
    uint64_t v50 = v45;
    unint64_t v51 = v91;
    uint64_t v52 = v92;
    uint64_t v53 = v29;
LABEL_26:
    static DecodingError._dataCorrupted<A>(_:for:_:)(v49, v50, v51, v52, v53, v88, v48);
LABEL_27:
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  unint64_t v54 = *(void *)((v24 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
  uint64_t v55 = *(void *)((v24 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
  if (v55 != 4)
  {
    uint64_t v71 = v94;
    if (v55 == 8)
    {
      if ((~v54 & 0x7FF0000000000000) != 0 || (v54 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        unint64_t v96 = *(void *)((v24 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        lazy protocol witness table accessor for type Double and conformance Double();
        dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
        uint64_t v77 = *(void *)(v71 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v11, 1, v71) == 1)
        {
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
          unint64_t v96 = 0;
          unint64_t v97 = 0xE000000000000000;
          _StringGuts.grow(_:)(45);
          v78._uint64_t countAndFlagsBits = 0xD000000000000016;
          v78._unint64_t object = (void *)0x80000001823B2B80;
          String.append(_:)(v78);
          Double.write<A>(to:)();
          v79._unint64_t object = (void *)0x80000001823B1A20;
          v79._uint64_t countAndFlagsBits = 0xD000000000000012;
          String.append(_:)(v79);
          v80._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v80);
          swift_bridgeObjectRelease();
          v81._uint64_t countAndFlagsBits = 46;
          v81._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v81);
          unint64_t v82 = v96;
          unint64_t v83 = v97;
          type metadata accessor for DecodingError();
          swift_allocError();
          uint64_t v48 = v84;
          uint64_t v49 = v82;
          uint64_t v50 = v83;
          unint64_t v51 = v91;
          uint64_t v52 = v92;
          uint64_t v53 = v93;
          goto LABEL_26;
        }
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v77 + 32))(v89, v11, v71);
      }
      return dispatch thunk of static FloatingPoint.nan.getter();
    }
LABEL_31:
    unint64_t v96 = 0;
    unint64_t v97 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    unint64_t v96 = 0xD000000000000023;
    unint64_t v97 = 0x80000001823B2B50;
    uint64_t v95 = v55;
    v85._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v85);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v56 = v94;
  if (HIDWORD(v54))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v57 = v93;
  if ((~v54 & 0x7F800000) == 0 && (v54 & 0x7FFFFF) != 0) {
    return dispatch thunk of static FloatingPoint.nan.getter();
  }
  LODWORD(v96) = *(void *)((v24 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
  lazy protocol witness table accessor for type Float and conformance Float();
  dispatch thunk of BinaryFloatingPoint.init<A>(exactly:)();
  uint64_t v58 = *(void *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v14, 1, v56) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    unint64_t v96 = 0;
    unint64_t v97 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    v59._uint64_t countAndFlagsBits = 0xD000000000000016;
    v59._unint64_t object = (void *)0x80000001823B2B80;
    String.append(_:)(v59);
    Float.write<A>(to:)();
    v60._unint64_t object = (void *)0x80000001823B1A20;
    v60._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v60);
    v61._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    v62._uint64_t countAndFlagsBits = 46;
    v62._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v62);
    unint64_t v63 = v96;
    unint64_t v64 = v97;
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v48 = v65;
    uint64_t v49 = v63;
    uint64_t v50 = v64;
    unint64_t v51 = v91;
    uint64_t v52 = v92;
    uint64_t v53 = v57;
    goto LABEL_26;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v58 + 32))(v89, v14, v56);
}

uint64_t Locale.Language.Components.languageCode.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

uint64_t NSURLSession.download(from:delegate:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(v4 + 112) = a1;
  *(void *)(v4 + 120) = a3;
  uint64_t v5 = *a2;
  *(void *)(v4 + 128) = v3;
  *(void *)(v4 + 136) = v5;
  *(_OWORD *)(v4 + 144) = *(_OWORD *)(a2 + 1);
  return MEMORY[0x1F4188298](NSURLSession.download(from:delegate:), 0, 0);
}

__CFNotificationCenter *__standardDefaultCenter_block_invoke()
{
  uint64_t v0 = [NSNotificationCenter alloc];
  TaskCenter = (const void *)_CFXNotificationGetTaskCenter();
  uint64_t result = (__CFNotificationCenter *)CFRetain(TaskCenter);
  v0->_impl = result;
  atomic_store((unint64_t)v0, &qword_1EB1ECFA0);
  return result;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)uint64_t result = v2;
  return result;
}

id NSUnitPressure.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  return NSUnitLength.init(forLocale:usage:)(a1, a2, &lazy cache variable for type metadata for NSUnitPressure, (uint64_t)off_1E51F4550);
}

uint64_t URLResourceValues.typeIdentifier.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E4F1C728]);
}

uint64_t type metadata accessor for _PlistUnkeyedDecodingContainer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for IndexSet.RangeView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t PredicateExpressions.Comparison.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

char *String.init(format:locale:arguments:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized withVaList<A>(_:_:)(a4, a1, a2, v7, v8);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v9;
}

uint64_t KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v76 = a2;
  uint64_t v75 = a1;
  uint64_t v83 = a7;
  uint64_t v11 = (uint64_t *)(a7 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  *(void *)&long long v80 = *(void *)(v85 - 8);
  MEMORY[0x1F4188790](v85);
  Swift::String v79 = (char *)v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = a8;
  *(void *)&long long v88 = a8;
  uint64_t ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  uint64_t v14 = 8 * a6;
  if (a6 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable();
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
  }
  else
  {
    TupleTypeMetadata2 = v72;
    MEMORY[0x1F4188790](ExtendedExistentialTypeMetadata);
    if (a6)
    {
      uint64_t v16 = v11;
      uint64_t v17 = (void *)((char *)v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v18 = a6;
      do
      {
        ++v16;
        *v17++ = type metadata accessor for PredicateExpressions.Variable();
        --v18;
      }
      while (v18);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v74 = TupleTypeMetadata;
  TupleTypeMetadata2 = (void *)swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v77 = (long long *)((char *)v72 - v20);
  if (a6 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }
  else
  {
    uint64_t v73 = v72;
    MEMORY[0x1F4188790](v19);
    if (a6)
    {
      uint64_t v22 = v11;
      uint64_t v23 = (void *)((char *)v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v24 = a6;
      do
      {
        ++v22;
        *v23++ = swift_getMetatypeMetadata();
        --v24;
      }
      while (v24);
    }
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }
  MEMORY[0x1F4188790](MetatypeMetadata);
  uint64_t v25 = *(void *)(a5 + 8);
  char v26 = *(unsigned char *)(a5 + 16);
  uint64_t v90 = *(void *)a5;
  uint64_t v91 = v25;
  char v92 = v26;
  MEMORY[0x1F4188790](v90);
  if (a6)
  {
    uint64_t v29 = (int *)(v27 + 32);
    Swift::String v30 = (void *)((char *)v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v31 = a6;
    do
    {
      if (a6 == 1) {
        int v32 = 0;
      }
      else {
        int v32 = *v29;
      }
      uint64_t v33 = *v11++;
      *(void *)(v28 + v32) = v33;
      *v30++ = v28 + v32;
      v29 += 4;
      --v31;
    }
    while (v31);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a6, v83);
  LOBYTE(v86[0]) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  uint64_t v34 = v82;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v34)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v72[2] = v72;
  long long v36 = v88;
  uint64_t v73 = v89;
  uint64_t v37 = v91;
  char v38 = v92;
  uint64_t v39 = *(void *)(v91 + 16);
  uint64_t v82 = v90;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v72[1] = v72;
  if (!v39) {
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v36, *((uint64_t *)&v36 + 1));
  if ((v41 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_26:
    *(void *)&long long v88 = 47;
    *((void *)&v88 + 1) = 0xE100000000000000;
    v86[0] = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
    v48._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    long long v49 = v88;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_OWORD *)uint64_t v50 = v36;
    *(_OWORD *)(v50 + 16) = v49;
    *(unsigned char *)(v50 + 32) = 1;
    swift_willThrow();
LABEL_27:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v42 = *(void *)(v37 + 56) + 16 * v40;
  uint64_t v43 = *(void *)v42;
  char v44 = *(unsigned char *)(v42 + 8);
  swift_bridgeObjectRelease();
  if ((v44 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  v72[0] = v43;
  uint64_t v45 = v82;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v46 = v38;
  uint64_t v47 = swift_bridgeObjectRetain();
  uint64_t v57 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v47, v45, v37, v38, MEMORY[0x1E4FBC860], v36, *((uint64_t *)&v36 + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v58 = v72[0];
  uint64_t v59 = PartialType.create2(with:)();
  if (!v59)
  {
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v65 = v58;
    *(void *)(v65 + 8) = v57;
    *(void *)(v65 + 16) = 0;
    *(void *)(v65 + 24) = 0;
    *(unsigned char *)(v65 + 32) = 2;
    swift_willThrow();
    goto LABEL_27;
  }
  uint64_t v60 = v59;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v61 = v60;
  char v38 = v46;
  uint64_t v43 = v61;
LABEL_29:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v86[0] = v43;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  uint64_t v93 = v81;
  swift_getExtendedExistentialTypeMetadata();
  if (swift_dynamicCast())
  {
    long long v80 = v88;
    unint64_t v51 = v89;
    LOBYTE(v86[0]) = 0;
    uint64_t v52 = v84;
    uint64_t v53 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
    v86[0] = v82;
    v86[1] = v37;
    char v87 = v38;
    MEMORY[0x1F4188790](v53);
    uint64_t v62 = v83;
    v72[-8] = a6;
    v72[-7] = v62;
    v72[-6] = v81;
    v72[-5] = &v88;
    *(_OWORD *)&v72[-4] = v80;
    v72[-2] = v51;
    v72[-1] = v52;
    unint64_t v63 = v77;
    unint64_t v64 = TupleTypeMetadata2;
    _withPredicateArchivingState<A>(_:_:)(v86, (void (*)(uint64_t))partial apply for closure #1 in KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of any PredicateExpression<Self.Output == B1>(v63, v75);
    unint64_t v66 = v76;
    if (a6)
    {
      uint64_t v67 = (char *)v63 + *((int *)v64 + 12);
      uint64_t v68 = (int *)(v74 + 32);
      uint64_t v69 = a6;
      do
      {
        if (a6 == 1) {
          int v70 = 0;
        }
        else {
          int v70 = *v68;
        }
        uint64_t v71 = *v66++;
        void *v71 = *(void *)&v67[v70];
        v68 += 4;
        --v69;
      }
      while (v69);
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v88) = 2;
    uint64_t v55 = v79;
    uint64_t v54 = v80;
    uint64_t v56 = v85;
    (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v79, v84, v85);
    type metadata accessor for DecodingError();
    swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>, &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v56);
    return swift_willThrow();
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = MEMORY[0x1E4FBC860];
  if (!v9) {
    return v10;
  }
  uint64_t v87 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
  uint64_t v13 = 0;
  uint64_t v10 = v87;
  uint64_t v69 = a1 + 32;
  uint64_t v14 = a3;
  uint64_t v75 = a6;
  int64_t v68 = v9;
  while (1)
  {
    uint64_t v15 = v69 + 32 * v13;
    uint64_t v17 = *(void *)v15;
    uint64_t v16 = *(void *)(v15 + 8);
    uint64_t v18 = *(void *)(v15 + 16);
    char v19 = *(unsigned char *)(v15 + 24);
    if (v19) {
      break;
    }
    char v73 = *(unsigned char *)(v15 + 24);
    uint64_t v71 = v13;
    swift_bridgeObjectRetain_n();
    uint64_t v78 = v17;
    outlined copy of ExpressionStructure.Argument(v17, v16, v18, 0);
    uint64_t v39 = a5;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
    }
    unint64_t v41 = v39[2];
    unint64_t v40 = v39[3];
    if (v41 >= v40 >> 1) {
      uint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v39);
    }
    v39[2] = v41 + 1;
    uint64_t v42 = &v39[2 * v41];
    v42[4] = a6;
    v42[5] = a7;
    swift_bridgeObjectRelease();
    uint64_t v14 = a3;
    if (!*(void *)(a3 + 16)) {
      goto LABEL_48;
    }
    swift_bridgeObjectRetain();
    unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v78, v16);
    if ((v44 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_48:
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
      v59._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
      swift_allocError();
      *(void *)uint64_t v60 = v78;
      *(void *)(v60 + 8) = v16;
      *(void *)(v60 + 16) = 47;
      *(void *)(v60 + 24) = 0xE100000000000000;
      *(unsigned char *)(v60 + 32) = 1;
      swift_willThrow();
      swift_bridgeObjectRelease();
      uint64_t v61 = v78;
      uint64_t v62 = v16;
LABEL_49:
      uint64_t v63 = v18;
LABEL_50:
      outlined consume of ExpressionStructure.Argument(v61, v62, v63, 0);
      goto LABEL_43;
    }
    uint64_t v45 = *(void *)(a3 + 56) + 16 * v43;
    uint64_t v21 = *(void *)v45;
    char v46 = *(unsigned char *)(v45 + 8);
    swift_bridgeObjectRelease();
    if (v46)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v47 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v18, a2, a3, a4 & 1, v39, v78, v16, v18);
      if (v8)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t v61 = v78;
        uint64_t v62 = v16;
        goto LABEL_49;
      }
      uint64_t v48 = v47;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v49 = PartialType.create2(with:)();
      if (!v49)
      {
        lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
        swift_allocError();
        *(void *)uint64_t v64 = v21;
        *(void *)(v64 + 8) = v48;
        *(void *)(v64 + 16) = 0;
        *(void *)(v64 + 24) = 0;
        *(unsigned char *)(v64 + 32) = 2;
        swift_willThrow();
        swift_bridgeObjectRelease();
        uint64_t v61 = v78;
        uint64_t v62 = v16;
        uint64_t v63 = v18;
        goto LABEL_50;
      }
      uint64_t v21 = v49;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of ExpressionStructure.Argument(v78, v16, v18, 0);
      uint64_t v14 = a3;
      a6 = v75;
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined consume of ExpressionStructure.Argument(v78, v16, v18, 0);
    }
    int64_t v50 = v68;
    uint64_t v13 = v71;
    char v19 = v73;
LABEL_35:
    uint64_t v88 = v10;
    unint64_t v52 = *(void *)(v10 + 16);
    unint64_t v51 = *(void *)(v10 + 24);
    if (v52 >= v51 >> 1)
    {
      uint64_t v54 = v13;
      char v74 = v19;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
      char v19 = v74;
      uint64_t v13 = v54;
      uint64_t v10 = v88;
    }
    ++v13;
    *(void *)(v10 + 16) = v52 + 1;
    uint64_t v53 = v10 + 16 * v52;
    *(void *)(v53 + 32) = v21;
    *(unsigned char *)(v53 + 40) = v19;
    if (v13 == v50) {
      return v10;
    }
  }
  uint64_t v81 = v8;
  int64_t v20 = *(void *)(v17 + 16);
  if (!v20)
  {
    uint64_t v21 = MEMORY[0x1E4FBC860];
LABEL_34:
    uint64_t v8 = v81;
    int64_t v50 = v68;
    goto LABEL_35;
  }
  char v72 = *(unsigned char *)(v15 + 24);
  uint64_t v70 = v13;
  uint64_t v66 = *(void *)(v15 + 16);
  uint64_t v67 = v10;
  uint64_t v65 = *(void *)(v15 + 8);
  outlined copy of ExpressionStructure.Argument(v17, v16, v18, 1);
  uint64_t v86 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  uint64_t v21 = v86;
  uint64_t v77 = v17;
  uint64_t v22 = (uint64_t *)(v17 + 48);
  while (1)
  {
    uint64_t v10 = *(v22 - 1);
    uint64_t v83 = v21;
    uint64_t v84 = *(v22 - 2);
    uint64_t v23 = *v22;
    swift_bridgeObjectRetain_n();
    uint64_t v24 = a5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
    }
    unint64_t v26 = v24[2];
    unint64_t v25 = v24[3];
    if (v26 >= v25 >> 1) {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v24);
    }
    v24[2] = v26 + 1;
    uint64_t v27 = &v24[2 * v26];
    uint64_t v27[4] = a6;
    v27[5] = a7;
    swift_bridgeObjectRelease();
    if (!*(void *)(v14 + 16)) {
      goto LABEL_40;
    }
    swift_bridgeObjectRetain();
    unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v10);
    if ((v29 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_40:
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
      v55._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
      swift_allocError();
      *(void *)uint64_t v56 = v84;
      *(void *)(v56 + 8) = v10;
      *(void *)(v56 + 16) = 47;
      *(void *)(v56 + 24) = 0xE100000000000000;
      char v57 = 1;
LABEL_41:
      *(unsigned char *)(v56 + 32) = v57;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_42;
    }
    uint64_t v30 = *(void *)(v14 + 56) + 16 * v28;
    uint64_t v31 = *(void *)v30;
    char v32 = *(unsigned char *)(v30 + 8);
    swift_bridgeObjectRelease();
    if ((v32 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n(v23, a2, v14, a4 & 1, v24, v84, v10, v23);
    if (v81) {
      break;
    }
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v35 = PartialType.create2(with:)();
    if (!v35)
    {
      lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
      swift_allocError();
      *(void *)uint64_t v56 = v31;
      *(void *)(v56 + 8) = v34;
      *(void *)(v56 + 16) = 0;
      *(void *)(v56 + 24) = 0;
      char v57 = 2;
      goto LABEL_41;
    }
    uint64_t v36 = v35;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v31 = v36;
    uint64_t v14 = a3;
    a6 = v75;
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t v21 = v83;
    unint64_t v38 = *(void *)(v83 + 16);
    unint64_t v37 = *(void *)(v83 + 24);
    if (v38 >= v37 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
      uint64_t v21 = v83;
    }
    *(void *)(v21 + 16) = v38 + 1;
    *(void *)(v21 + 8 * v38 + 32) = v31;
    v22 += 3;
    if (!--v20)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of ExpressionStructure.Argument(v77, v65, v66, 1);
      uint64_t v10 = v67;
      uint64_t v13 = v70;
      char v19 = v72;
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
LABEL_42:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of ExpressionStructure.Argument(v77, v65, v66, 1);
LABEL_43:
  swift_release();
  return v10;
}

uint64_t initializeWithCopy for ExpressionStructure.Argument(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of ExpressionStructure.Argument(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t outlined copy of ExpressionStructure.Argument(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = vars8;
  }
  return swift_bridgeObjectRetain();
}

void PredicateCodableConfiguration.allowInputs<each A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(v3 + 16) == 1)
  {
    uint64_t v4 = a2;
    if (a2)
    {
      uint64_t v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
      char v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
      unint64_t v7 = v6[2];
      do
      {
        unint64_t v8 = v6[3];
        unint64_t v9 = v7 + 1;
        if (v7 >= v8 >> 1) {
          char v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v7 + 1, 1, v6);
        }
        uint64_t v10 = *v5++;
        uint64_t v6[2] = v9;
        v6[v7++ + 4] = v10;
        --v4;
      }
      while (v4);
      goto LABEL_9;
    }
    char v6 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v9 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (v9)
    {
LABEL_9:
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = v6[v11 + 4];
        _StringGuts.grow(_:)(29);
        swift_bridgeObjectRelease();
        v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v13);
        swift_bridgeObjectRelease();
        PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(v12, 0xD00000000000001BLL, (void *)0x80000001823A9010, 1);
        swift_bridgeObjectRelease();
        ++v11;
      }
      while (v9 != v11);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t PredicateCodableConfiguration.allowKeyPath(_:identifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  v136._uint64_t countAndFlagsBits = a2;
  v136._unint64_t object = a3;
  AnyKeyPath._validateForPredicateUsage(restrictArguments:)(0);
  uint64_t v10 = *v3;
  uint64_t v130 = v3;
  unint64_t __src = (void *)(*v3 + 64);
  uint64_t v11 = 1 << *(unsigned char *)(*v3 + 32);
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & *(void *)(*v3 + 64);
  int64_t v133 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v14 = 0;
  uint64_t v128 = v10;
  if (v13) {
    goto LABEL_8;
  }
LABEL_9:
  int64_t v17 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  unint64_t object = v136._object;
  if (v17 >= v133)
  {
LABEL_73:
    swift_release();
    type metadata accessor for AnyKeyPath();
    swift_bridgeObjectRetain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyKeyPath & Sendable);
    swift_dynamicCast();
    unint64_t v13 = *(void *)v142;
    uint64_t v4 = (uint64_t)v130;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v141 = *v130;
    uint64_t v10 = *v130;
    *uint64_t v130 = 0x8000000000000000;
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v136._countAndFlagsBits, (uint64_t)v136._object);
    uint64_t v68 = *(void *)(v10 + 16);
    BOOL v69 = (v67 & 1) == 0;
    uint64_t v70 = v68 + v69;
    if (!__OFADD__(v68, v69))
    {
      uint64_t v4 = v67;
      if (*(void *)(v10 + 24) < v70)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v70, isUniquelyReferenced_nonNull_native);
        uint64_t v71 = v141;
        uint64_t countAndFlagsBits = v136._countAndFlagsBits;
        unint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)(v136._countAndFlagsBits, (uint64_t)v136._object);
        if ((v4 & 1) != (v74 & 1)) {
          goto LABEL_127;
        }
        unint64_t v5 = v73;
        goto LABEL_80;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v71 = v10;
        goto LABEL_79;
      }
LABEL_87:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
      uint64_t v77 = static _DictionaryStorage.copy(original:)();
      uint64_t v71 = v77;
      if (!*(void *)(v10 + 16)) {
        goto LABEL_119;
      }
      uint64_t v78 = (char *)(v77 + 64);
      __srca = (char *)(v10 + 64);
      unint64_t v79 = (unint64_t)((1 << *(unsigned char *)(v71 + 32)) + 63) >> 6;
      uint64_t v127 = v71;
      if (v71 != v10 || v78 >= &__srca[8 * v79]) {
        memmove(v78, __srca, 8 * v79);
      }
      int64_t v134 = 0;
      *(void *)(v71 + 16) = *(void *)(v10 + 16);
      uint64_t v80 = 1 << *(unsigned char *)(v10 + 32);
      uint64_t v81 = -1;
      if (v80 < 64) {
        uint64_t v81 = ~(-1 << v80);
      }
      unint64_t v140 = v81 & *(void *)(v10 + 64);
      int64_t v129 = (unint64_t)(v80 + 63) >> 6;
      while (1)
      {
        if (v140)
        {
          unint64_t v82 = __clz(__rbit64(v140));
          v140 &= v140 - 1;
          unint64_t v83 = v82 | (v134 << 6);
        }
        else
        {
          int64_t v94 = v134 + 1;
          if (__OFADD__(v134, 1))
          {
LABEL_121:
            __break(1u);
            goto LABEL_122;
          }
          if (v94 >= v129) {
            goto LABEL_119;
          }
          unint64_t v95 = *(void *)&__srca[8 * v94];
          int64_t v96 = v134 + 1;
          if (!v95)
          {
            int64_t v96 = v134 + 2;
            if (v134 + 2 >= v129) {
              goto LABEL_119;
            }
            unint64_t v95 = *(void *)&__srca[8 * v96];
            if (!v95)
            {
              int64_t v96 = v134 + 3;
              if (v134 + 3 >= v129) {
                goto LABEL_119;
              }
              unint64_t v95 = *(void *)&__srca[8 * v96];
              if (!v95)
              {
                int64_t v96 = v134 + 4;
                if (v134 + 4 >= v129) {
                  goto LABEL_119;
                }
                unint64_t v95 = *(void *)&__srca[8 * v96];
                if (!v95)
                {
                  int64_t v96 = v134 + 5;
                  if (v134 + 5 >= v129) {
                    goto LABEL_119;
                  }
                  unint64_t v95 = *(void *)&__srca[8 * v96];
                  if (!v95)
                  {
                    int64_t v96 = v134 + 6;
                    if (v134 + 6 >= v129) {
                      goto LABEL_119;
                    }
                    unint64_t v95 = *(void *)&__srca[8 * v96];
                    if (!v95)
                    {
                      int64_t v96 = v134 + 7;
                      if (v134 + 7 >= v129) {
                        goto LABEL_119;
                      }
                      unint64_t v95 = *(void *)&__srca[8 * v96];
                      if (!v95)
                      {
                        int64_t v97 = v134 + 8;
                        if (v134 + 8 >= v129) {
                          goto LABEL_119;
                        }
                        unint64_t v95 = *(void *)&__srca[8 * v97];
                        if (!v95)
                        {
                          while (1)
                          {
                            int64_t v96 = v97 + 1;
                            if (__OFADD__(v97, 1)) {
                              goto LABEL_123;
                            }
                            uint64_t v71 = v127;
                            if (v96 >= v129) {
                              break;
                            }
                            unint64_t v95 = *(void *)&__srca[8 * v96];
                            ++v97;
                            if (v95) {
                              goto LABEL_118;
                            }
                          }
LABEL_119:
                          swift_bridgeObjectRelease();
LABEL_79:
                          uint64_t countAndFlagsBits = v136._countAndFlagsBits;
LABEL_80:
                          *(void *)double v142 = v13;
                          *(_OWORD *)&v142[8] = 0u;
                          long long v143 = 0u;
                          char v144 = 0;
                          if (v4)
                          {
                            outlined assign with take of PredicateCodableConfiguration.AllowListKeyPath((uint64_t)v142, *(void *)(v71 + 56) + 48 * v5);
                          }
                          else
                          {
                            specialized _NativeDictionary._insert(at:key:value:)(v5, countAndFlagsBits, (uint64_t)v136._object, (uint64_t)v142, (void *)v71);
                            swift_bridgeObjectRetain();
                          }
                          *uint64_t v130 = v71;
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          uint64_t v75 = dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
                          PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(v75, 0, 0, 0);
                          dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
                          return PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(v76, 0, 0, 0);
                        }
                        int64_t v96 = v134 + 8;
                        uint64_t v71 = v127;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_118:
          unint64_t v140 = (v95 - 1) & v95;
          int64_t v134 = v96;
          unint64_t v83 = __clz(__rbit64(v95)) + (v96 << 6);
        }
        uint64_t v84 = 16 * v83;
        uint64_t v85 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v83);
        uint64_t v87 = *v85;
        uint64_t v86 = v85[1];
        uint64_t v88 = 48 * v83;
        uint64_t v89 = *(void *)(v10 + 56) + v88;
        uint64_t v6 = *(void *)(v89 + 8);
        uint64_t v138 = *(void *)v89;
        uint64_t v90 = *(void *)v89;
        unint64_t v7 = *(void **)(v89 + 16);
        uint64_t v8 = *(void *)(v89 + 24);
        uint64_t v9 = *(void *)(v89 + 32);
        char v91 = *(unsigned char *)(v89 + 40);
        char v92 = (void *)(*(void *)(v71 + 48) + v84);
        *char v92 = v87;
        v92[1] = v86;
        uint64_t v93 = *(void *)(v71 + 56) + v88;
        *(void *)uint64_t v93 = v90;
        *(void *)(v93 + 8) = v6;
        *(void *)(v93 + 16) = v7;
        *(void *)(v93 + 24) = v8;
        *(void *)(v93 + 32) = v9;
        *(unsigned char *)(v93 + 40) = v91;
        swift_bridgeObjectRetain();
        outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v138, v6, (uint64_t)v7, v8, v9, v91);
      }
    }
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  unint64_t v18 = __src[v17];
  int64_t v19 = v14 + 1;
  if (!v18)
  {
    int64_t v19 = v14 + 2;
    if (v14 + 2 >= v133) {
      goto LABEL_73;
    }
    unint64_t v18 = __src[v19];
    if (!v18)
    {
      int64_t v19 = v14 + 3;
      if (v14 + 3 >= v133) {
        goto LABEL_73;
      }
      unint64_t v18 = __src[v19];
      if (!v18)
      {
        uint64_t v20 = v14 + 4;
        if (v14 + 4 < v133)
        {
          unint64_t v18 = __src[v20];
          if (v18)
          {
            int64_t v19 = v14 + 4;
            goto LABEL_22;
          }
          while (1)
          {
            int64_t v19 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_85;
            }
            if (v19 >= v133) {
              goto LABEL_73;
            }
            unint64_t v18 = __src[v19];
            ++v20;
            if (v18) {
              goto LABEL_22;
            }
          }
        }
        goto LABEL_73;
      }
    }
  }
LABEL_22:
  uint64_t v137 = (v18 - 1) & v18;
  int64_t v139 = v19;
  unint64_t v15 = __clz(__rbit64(v18)) + (v19 << 6);
  while (1)
  {
    uint64_t v21 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v15);
    uint64_t v22 = *v21;
    unint64_t v5 = v21[1];
    uint64_t v23 = *(void *)(v10 + 56) + 48 * v15;
    uint64_t v9 = *(void *)v23;
    uint64_t v4 = *(void *)(v23 + 8);
    uint64_t v6 = *(void *)(v23 + 16);
    uint64_t v8 = *(void *)(v23 + 24);
    unint64_t v7 = *(void **)(v23 + 32);
    char v24 = *(unsigned char *)(v23 + 40);
    BOOL v25 = *v21 == v136._countAndFlagsBits && v5 == (void)object;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      if (v24) {
        goto LABEL_124;
      }
      *(void *)double v142 = v9;
      type metadata accessor for AnyKeyPath();
      swift_retain_n();
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        *(void *)double v142 = 0;
        *(void *)&v142[8] = 0xE000000000000000;
        _StringGuts.grow(_:)(57);
        v108._unint64_t object = (void *)0x80000001823AF9C0;
        v108._uint64_t countAndFlagsBits = 0xD000000000000014;
        String.append(_:)(v108);
        v109._uint64_t countAndFlagsBits = AnyKeyPath.debugDescription.getter();
        String.append(_:)(v109);
        swift_bridgeObjectRelease();
        v110._uint64_t countAndFlagsBits = 0x2720646E612027;
        v110._unint64_t object = (void *)0xE700000000000000;
        String.append(_:)(v110);
        v111._uint64_t countAndFlagsBits = AnyKeyPath.debugDescription.getter();
        String.append(_:)(v111);
        swift_bridgeObjectRelease();
        v112._uint64_t countAndFlagsBits = 0xD000000000000017;
        v112._unint64_t object = (void *)0x80000001823AF9E0;
        String.append(_:)(v112);
        String.append(_:)(v136);
        v113._uint64_t countAndFlagsBits = 39;
        v113._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v113);
        goto LABEL_126;
      }
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      return swift_release();
    }
    if (v24)
    {
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 1);
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 1);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    type metadata accessor for AnyKeyPath();
    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
    swift_bridgeObjectRetain();
    if ((MEMORY[0x185302EC0](v9, a1) & 1) == 0)
    {
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      swift_bridgeObjectRelease();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      goto LABEL_7;
    }
    swift_bridgeObjectRetain();
    unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v5);
    char v28 = v27;
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
      uint64_t v10 = v128;
LABEL_7:
      unint64_t v13 = v137;
      int64_t v14 = v139;
      if (!v137) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    char v29 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *v130;
    *uint64_t v130 = 0x8000000000000000;
    if (v29)
    {
      uint64_t v31 = v30;
      goto LABEL_33;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
    uint64_t v36 = static _DictionaryStorage.copy(original:)();
    uint64_t v118 = v36;
    if (*(void *)(v30 + 16)) {
      break;
    }
LABEL_69:
    swift_bridgeObjectRelease();
    uint64_t v31 = v118;
LABEL_33:
    swift_bridgeObjectRelease();
    uint64_t v32 = *(void *)(v31 + 56) + 48 * v26;
    unint64_t v33 = v26;
    uint64_t v35 = *(void *)(v32 + 8);
    uint64_t v34 = *(void *)(v32 + 16);
    uint64_t v123 = *(void *)(v32 + 24);
    uint64_t v125 = *(void *)v32;
    uint64_t v121 = *(void *)(v32 + 32);
    char v119 = *(unsigned char *)(v32 + 40);
    specialized _NativeDictionary._delete(at:)(v33, v31);
    *uint64_t v130 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v125, v35, v34, v123, v121, v119);
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 0);
    unint64_t v13 = v137;
    int64_t v14 = v139;
    uint64_t v10 = v128;
    if (!v137) {
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v137 = (v13 - 1) & v13;
    int64_t v139 = v14;
    unint64_t v15 = __clz(__rbit64(v13)) | (v14 << 6);
    unint64_t object = v136._object;
  }
  uint64_t v37 = v36;
  unint64_t v38 = (char *)(v36 + 64);
  uint64_t v39 = (char *)(v30 + 64);
  unint64_t v40 = (unint64_t)((1 << *(unsigned char *)(v37 + 32)) + 63) >> 6;
  uint64_t v114 = v30 + 64;
  if (v37 != v30 || v38 >= &v39[8 * v40])
  {
    memmove(v38, v39, 8 * v40);
    uint64_t v37 = v118;
  }
  int64_t v41 = 0;
  *(void *)(v37 + 16) = *(void *)(v30 + 16);
  uint64_t v42 = 1 << *(unsigned char *)(v30 + 32);
  unint64_t v116 = v26;
  uint64_t v117 = v30;
  if (v42 < 64) {
    uint64_t v43 = ~(-1 << v42);
  }
  else {
    uint64_t v43 = -1;
  }
  unint64_t v44 = v43 & *(void *)(v30 + 64);
  int64_t v115 = (unint64_t)(v42 + 63) >> 6;
  while (2)
  {
    if (v44)
    {
      int64_t v124 = v41;
      uint64_t v126 = (v44 - 1) & v44;
      unint64_t v45 = __clz(__rbit64(v44)) | (v41 << 6);
      uint64_t v47 = v117;
      uint64_t v46 = v118;
LABEL_46:
      uint64_t v48 = 16 * v45;
      uint64_t v49 = (uint64_t *)(*(void *)(v47 + 48) + 16 * v45);
      uint64_t v51 = *v49;
      uint64_t v50 = v49[1];
      uint64_t v52 = 48 * v45;
      uint64_t v53 = *(void *)(v47 + 56) + v52;
      uint64_t v54 = *(void *)v53;
      uint64_t v55 = *(void *)(v53 + 8);
      uint64_t v56 = *(void *)(v53 + 16);
      uint64_t v57 = *(void *)(v53 + 24);
      uint64_t v122 = *(void *)(v53 + 32);
      char v58 = *(unsigned char *)(v53 + 40);
      char v120 = v58;
      Swift::String v59 = (void *)(*(void *)(v46 + 48) + v48);
      *Swift::String v59 = v51;
      v59[1] = v50;
      uint64_t v60 = *(void *)(v46 + 56) + v52;
      *(void *)uint64_t v60 = v54;
      *(void *)(v60 + 8) = v55;
      *(void *)(v60 + 16) = v56;
      *(void *)(v60 + 24) = v57;
      *(void *)(v60 + 32) = v122;
      *(unsigned char *)(v60 + 40) = v58;
      swift_bridgeObjectRetain();
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v54, v55, v56, v57, v122, v120);
      unint64_t v26 = v116;
      int64_t v41 = v124;
      unint64_t v44 = v126;
      continue;
    }
    break;
  }
  int64_t v61 = v41 + 1;
  uint64_t v47 = v117;
  uint64_t v46 = v118;
  if (__OFADD__(v41, 1))
  {
    __break(1u);
    goto LABEL_121;
  }
  if (v61 >= v115) {
    goto LABEL_69;
  }
  unint64_t v62 = *(void *)(v114 + 8 * v61);
  int64_t v63 = v41 + 1;
  if (v62) {
    goto LABEL_68;
  }
  int64_t v63 = v41 + 2;
  if (v41 + 2 >= v115) {
    goto LABEL_69;
  }
  unint64_t v62 = *(void *)(v114 + 8 * v63);
  if (v62) {
    goto LABEL_68;
  }
  int64_t v63 = v41 + 3;
  if (v41 + 3 >= v115) {
    goto LABEL_69;
  }
  unint64_t v62 = *(void *)(v114 + 8 * v63);
  if (v62) {
    goto LABEL_68;
  }
  int64_t v63 = v41 + 4;
  if (v41 + 4 >= v115) {
    goto LABEL_69;
  }
  unint64_t v62 = *(void *)(v114 + 8 * v63);
  if (v62) {
    goto LABEL_68;
  }
  int64_t v63 = v41 + 5;
  if (v41 + 5 >= v115) {
    goto LABEL_69;
  }
  unint64_t v62 = *(void *)(v114 + 8 * v63);
  if (v62) {
    goto LABEL_68;
  }
  int64_t v63 = v41 + 6;
  if (v41 + 6 >= v115) {
    goto LABEL_69;
  }
  unint64_t v62 = *(void *)(v114 + 8 * v63);
  if (v62)
  {
LABEL_68:
    int64_t v124 = v63;
    uint64_t v126 = (v62 - 1) & v62;
    unint64_t v45 = __clz(__rbit64(v62)) + (v63 << 6);
    goto LABEL_46;
  }
  uint64_t v64 = v41 + 7;
  if (v41 + 7 >= v115) {
    goto LABEL_69;
  }
  unint64_t v62 = *(void *)(v114 + 8 * v64);
  if (v62)
  {
    int64_t v63 = v41 + 7;
    uint64_t v47 = v117;
    uint64_t v46 = v118;
    goto LABEL_68;
  }
  unint64_t v26 = v116;
  uint64_t v47 = v117;
  uint64_t v46 = v118;
  while (1)
  {
    int64_t v63 = v64 + 1;
    if (__OFADD__(v64, 1)) {
      break;
    }
    if (v63 >= v115) {
      goto LABEL_69;
    }
    unint64_t v62 = *(void *)(v114 + 8 * v63);
    ++v64;
    if (v62) {
      goto LABEL_68;
    }
  }
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v9, v4, v6, v8, (uint64_t)v7, 1);
  *(void *)double v142 = 0;
  *(void *)&v142[8] = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v98._unint64_t object = (void *)0x80000001823AF9C0;
  v98._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v98);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  int v99 = *(_DWORD *)(v9 + 16);
  *(_OWORD *)double v142 = *(_OWORD *)v9;
  *(_DWORD *)&v142[16] = v99;
  swift_getAtKeyPath();
  swift_release();
  v100._uint64_t countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v100);
  swift_bridgeObjectRelease();
  v101._uint64_t countAndFlagsBits = 46;
  v101._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v101);
  v102._uint64_t countAndFlagsBits = v8;
  v102._unint64_t object = v7;
  String.append(_:)(v102);
  v103._uint64_t countAndFlagsBits = 92;
  v103._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v103);
  swift_bridgeObjectRelease();
  v104._uint64_t countAndFlagsBits = 0x2720646E612027;
  v104._unint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v104);
  v105._uint64_t countAndFlagsBits = AnyKeyPath.debugDescription.getter();
  String.append(_:)(v105);
  swift_bridgeObjectRelease();
  v106._uint64_t countAndFlagsBits = 0xD000000000000017;
  v106._unint64_t object = (void *)0x80000001823AF9E0;
  String.append(_:)(v106);
  String.append(_:)(v136);
  v107._uint64_t countAndFlagsBits = 39;
  v107._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v107);
LABEL_126:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_127:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined copy of PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  else
  {
    return swift_retain();
  }
}

uint64_t outlined consume of PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_release();
  }
}

uint64_t static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 - 8);
  double v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v10, v8);
  v13[0] = a2;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t v11 = v13[1];
  swift_retain();
  AnyKeyPath._validateForPredicateUsage(restrictArguments:)(0);
  swift_release();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a4, v10, a3);
  uint64_t result = type metadata accessor for PredicateExpressions.KeyPath();
  *(void *)(a4 + *(int *)(result + 44)) = v11;
  return result;
}

uint64_t type metadata accessor for PredicateExpressions.KeyPath()
{
  return __swift_instantiateGenericMetadata();
}

Swift::Void __swiftcall AnyKeyPath._validateForPredicateUsage(restrictArguments:)(Swift::Bool restrictArguments)
{
  unint64_t v2 = *(unsigned int *)(v1 + 32);
  switch((v2 >> 24) & 0x7F)
  {
    case 1uLL:
    case 3uLL:
      dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
      type metadata accessor for PartialKeyPath();
      swift_dynamicCastClassUnconditional();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      if (v3) {
        goto LABEL_21;
      }
      return;
    case 2uLL:
      if ((v2 & 0x400000) != 0)
      {
        if ((v2 & 0x80000) == 0)
        {
          uint64_t v4 = 4;
          goto LABEL_16;
        }
        if (restrictArguments) {
          goto LABEL_21;
        }
        uint64_t v5 = 4;
      }
      else
      {
        if ((v2 & 0x80000) == 0)
        {
          uint64_t v4 = 3;
          goto LABEL_16;
        }
        if (restrictArguments) {
          goto LABEL_21;
        }
        uint64_t v5 = 3;
      }
      unint64_t v6 = *(void *)(v1 + 32 + 8 * v5);
      if ((v6 & 0x8000000000000000) != 0) {
        goto LABEL_19;
      }
      uint64_t v7 = v5 + (v6 >> 3);
      if ((unint64_t)(v7 - 0xFFFFFFFFFFFFFFELL) >> 61 != 7)
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        _StringGuts.grow(_:)(52);
        v8._uint64_t countAndFlagsBits = 0xD000000000000031;
        v8._unint64_t object = (void *)0x80000001823AF3A0;
        String.append(_:)(v8);
        v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v9);
        swift_bridgeObjectRelease();
        v10._uint64_t countAndFlagsBits = 41;
        v10._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v10);
        while (1)
        {
LABEL_21:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
      uint64_t v4 = v7 + 2;
LABEL_16:
      if ((*(_DWORD *)(v1 + 24) & 0xFFFFFFu) > (unint64_t)(8 * v4)) {
        goto LABEL_21;
      }
      return;
    case 4uLL:
      goto LABEL_21;
    default:
      goto LABEL_20;
  }
}

uint64_t PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v6 = v4;
  if (a3)
  {
    Swift::String v8 = a3;
  }
  else
  {
    a2 = _typeName(_:qualified:)();
    Swift::String v8 = v9;
  }
  uint64_t v10 = *(void *)(v4 + 8);
  uint64_t v106 = v10 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(v10 + 32);
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & *(void *)(v10 + 64);
  unint64_t __src = (void *)((unint64_t)(v11 + 63) >> 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = 0;
  while (1)
  {
    do
    {
      if (v13)
      {
        unint64_t v16 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v17 = v16 | (v14 << 6);
        goto LABEL_27;
      }
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
      if (v18 >= (uint64_t)__src) {
        goto LABEL_76;
      }
      unint64_t v19 = *(void *)(v106 + 8 * v18);
      ++v14;
      if (v19) {
        goto LABEL_26;
      }
      uint64_t v14 = v18 + 1;
      if (v18 + 1 >= (uint64_t)__src) {
        goto LABEL_76;
      }
      unint64_t v19 = *(void *)(v106 + 8 * v14);
      if (v19) {
        goto LABEL_26;
      }
      uint64_t v14 = v18 + 2;
      if (v18 + 2 >= (uint64_t)__src) {
        goto LABEL_76;
      }
      unint64_t v19 = *(void *)(v106 + 8 * v14);
      if (v19) {
        goto LABEL_26;
      }
      uint64_t v20 = v18 + 3;
      if (v20 >= (uint64_t)__src)
      {
LABEL_76:
        swift_release();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v111 = *(void *)(v6 + 8);
        uint64_t v5 = v111;
        *(void *)(v6 + 8) = 0x8000000000000000;
        unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)v8);
        uint64_t v58 = *(void *)(v111 + 16);
        BOOL v59 = (v57 & 1) == 0;
        uint64_t v60 = v58 + v59;
        if (!__OFADD__(v58, v59))
        {
          LOBYTE(v10) = v57;
          if (*(void *)(v111 + 24) < v60)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v60, isUniquelyReferenced_nonNull_native);
            uint64_t v61 = v111;
            unint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)v8);
            if ((v10 & 1) != (v63 & 1)) {
              goto LABEL_131;
            }
            unint64_t v13 = v62;
            uint64_t v64 = a1;
            if ((v10 & 1) == 0) {
              goto LABEL_120;
            }
            goto LABEL_83;
          }
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v61 = v111;
            uint64_t v64 = a1;
            if ((v57 & 1) == 0) {
              goto LABEL_120;
            }
            goto LABEL_83;
          }
LABEL_87:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
          uint64_t v66 = static _DictionaryStorage.copy(original:)();
          uint64_t v61 = v66;
          if (!*(void *)(v5 + 16)) {
            goto LABEL_119;
          }
          uint64_t v67 = (char *)(v66 + 64);
          uint64_t v107 = v61;
          __srca = (char *)(v5 + 64);
          unint64_t v68 = (unint64_t)((1 << *(unsigned char *)(v61 + 32)) + 63) >> 6;
          if (v61 != v5 || v67 >= &__srca[8 * v68]) {
            memmove(v67, __srca, 8 * v68);
          }
          int64_t v69 = 0;
          *(void *)(v61 + 16) = *(void *)(v5 + 16);
          uint64_t v70 = 1 << *(unsigned char *)(v5 + 32);
          uint64_t v71 = -1;
          if (v70 < 64) {
            uint64_t v71 = ~(-1 << v70);
          }
          unint64_t v72 = v71 & *(void *)(v5 + 64);
          int64_t v73 = (unint64_t)(v70 + 63) >> 6;
          while (1)
          {
            if (v72)
            {
              unint64_t v74 = __clz(__rbit64(v72));
              v72 &= v72 - 1;
              unint64_t v75 = v74 | (v69 << 6);
            }
            else
            {
              int64_t v84 = v69 + 1;
              if (__OFADD__(v69, 1))
              {
LABEL_125:
                __break(1u);
                goto LABEL_126;
              }
              if (v84 >= v73) {
                goto LABEL_119;
              }
              unint64_t v85 = *(void *)&__srca[8 * v84];
              ++v69;
              if (!v85)
              {
                int64_t v69 = v84 + 1;
                if (v84 + 1 >= v73) {
                  goto LABEL_119;
                }
                unint64_t v85 = *(void *)&__srca[8 * v69];
                if (!v85)
                {
                  int64_t v69 = v84 + 2;
                  if (v84 + 2 >= v73) {
                    goto LABEL_119;
                  }
                  unint64_t v85 = *(void *)&__srca[8 * v69];
                  if (!v85)
                  {
                    int64_t v69 = v84 + 3;
                    if (v84 + 3 >= v73) {
                      goto LABEL_119;
                    }
                    unint64_t v85 = *(void *)&__srca[8 * v69];
                    if (!v85)
                    {
                      int64_t v69 = v84 + 4;
                      if (v84 + 4 >= v73) {
                        goto LABEL_119;
                      }
                      unint64_t v85 = *(void *)&__srca[8 * v69];
                      if (!v85)
                      {
                        int64_t v69 = v84 + 5;
                        if (v84 + 5 >= v73) {
                          goto LABEL_119;
                        }
                        unint64_t v85 = *(void *)&__srca[8 * v69];
                        if (!v85)
                        {
                          int64_t v69 = v84 + 6;
                          if (v84 + 6 >= v73) {
                            goto LABEL_119;
                          }
                          unint64_t v85 = *(void *)&__srca[8 * v69];
                          if (!v85)
                          {
                            int64_t v86 = v84 + 7;
                            if (v86 >= v73) {
                              goto LABEL_119;
                            }
                            unint64_t v85 = *(void *)&__srca[8 * v86];
                            if (!v85)
                            {
                              while (1)
                              {
                                int64_t v69 = v86 + 1;
                                if (__OFADD__(v86, 1)) {
                                  goto LABEL_127;
                                }
                                uint64_t v61 = v107;
                                if (v69 >= v73) {
                                  break;
                                }
                                unint64_t v85 = *(void *)&__srca[8 * v69];
                                ++v86;
                                if (v85) {
                                  goto LABEL_118;
                                }
                              }
LABEL_119:
                              swift_bridgeObjectRelease();
                              uint64_t v64 = a1;
                              if ((v10 & 1) == 0)
                              {
LABEL_120:
                                specialized _NativeDictionary._insert(at:key:value:)(v13, a2, (uint64_t)v8, v64, 0, (void *)v61);
                                swift_bridgeObjectRetain();
                                goto LABEL_121;
                              }
LABEL_83:
                              uint64_t v65 = *(void *)(v61 + 56) + 16 * v13;
                              *(void *)uint64_t v65 = v64;
                              *(unsigned char *)(v65 + 8) = 0;
LABEL_121:
                              *(void *)(v6 + 8) = v61;
                              swift_bridgeObjectRelease();
                              return swift_bridgeObjectRelease();
                            }
                            int64_t v69 = v86;
                            uint64_t v61 = v107;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_118:
              unint64_t v72 = (v85 - 1) & v85;
              unint64_t v75 = __clz(__rbit64(v85)) + (v69 << 6);
            }
            uint64_t v76 = 16 * v75;
            uint64_t v77 = (uint64_t *)(*(void *)(v5 + 48) + v76);
            uint64_t v79 = *v77;
            uint64_t v78 = v77[1];
            uint64_t v80 = *(void *)(v5 + 56) + v76;
            uint64_t v81 = *(void *)v80;
            LOBYTE(v80) = *(unsigned char *)(v80 + 8);
            unint64_t v82 = (void *)(*(void *)(v61 + 48) + v76);
            *unint64_t v82 = v79;
            v82[1] = v78;
            uint64_t v83 = *(void *)(v61 + 56) + v76;
            *(void *)uint64_t v83 = v81;
            *(unsigned char *)(v83 + 8) = v80;
            swift_bridgeObjectRetain();
          }
        }
LABEL_86:
        __break(1u);
        goto LABEL_87;
      }
      unint64_t v19 = *(void *)(v106 + 8 * v20);
      if (!v19)
      {
        while (1)
        {
          uint64_t v14 = v20 + 1;
          if (__OFADD__(v20, 1)) {
            goto LABEL_85;
          }
          if (v14 >= (uint64_t)__src) {
            goto LABEL_76;
          }
          unint64_t v19 = *(void *)(v106 + 8 * v14);
          ++v20;
          if (v19) {
            goto LABEL_26;
          }
        }
      }
      uint64_t v14 = v20;
LABEL_26:
      unint64_t v13 = (v19 - 1) & v19;
      unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
      uint64_t v21 = 16 * v17;
      uint64_t v22 = (uint64_t *)(*(void *)(v10 + 48) + v21);
      uint64_t v23 = *v22;
      uint64_t v24 = v22[1];
      uint64_t v25 = *(void *)(v10 + 56) + v21;
      uint64_t v5 = *(void *)v25;
      char v26 = *(unsigned char *)(v25 + 8);
      BOOL v27 = *v22 == a2 && v24 == (void)v8;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v26) {
          goto LABEL_128;
        }
        if (v5 != a1)
        {
          _StringGuts.grow(_:)(57);
          v94._uint64_t countAndFlagsBits = 0xD000000000000014;
          v94._unint64_t object = (void *)0x80000001823AF9C0;
          String.append(_:)(v94);
          v95._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v95);
          swift_bridgeObjectRelease();
          v96._uint64_t countAndFlagsBits = 0x2720646E612027;
          v96._unint64_t object = (void *)0xE700000000000000;
          String.append(_:)(v96);
          v97._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v97);
          swift_bridgeObjectRelease();
          v98._unint64_t object = (void *)0x80000001823AF9E0;
          v98._uint64_t countAndFlagsBits = 0xD000000000000017;
          String.append(_:)(v98);
          v99._uint64_t countAndFlagsBits = a2;
          v99._unint64_t object = v8;
          String.append(_:)(v99);
          v100._uint64_t countAndFlagsBits = 39;
          v100._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v100);
          goto LABEL_130;
        }
LABEL_73:
        swift_bridgeObjectRelease();
        return swift_release();
      }
      if (v5 == a1) {
        char v28 = v26;
      }
      else {
        char v28 = 1;
      }
    }
    while ((v28 & 1) != 0);
    if ((a4 & 1) == 0) {
      goto LABEL_73;
    }
    uint64_t v5 = *(void *)(v6 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24);
    char v31 = v30;
    swift_bridgeObjectRelease();
    if (v31) {
      break;
    }
LABEL_10:
    swift_bridgeObjectRelease();
  }
  char v32 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v33 = *(void *)(v6 + 8);
  *(void *)(v6 + 8) = 0x8000000000000000;
  if (v32)
  {
    uint64_t v15 = v33;
LABEL_9:
    swift_bridgeObjectRelease();
    specialized _NativeDictionary._delete(at:)(v29, v15);
    uint64_t v5 = *(void *)(v6 + 8);
    *(void *)(v6 + 8) = v15;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
  uint64_t v34 = static _DictionaryStorage.copy(original:)();
  uint64_t v15 = v34;
  if (!*(void *)(v33 + 16))
  {
LABEL_70:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v35 = (char *)(v34 + 64);
  uint64_t v36 = (char *)(v33 + 64);
  unint64_t v37 = (unint64_t)((1 << *(unsigned char *)(v15 + 32)) + 63) >> 6;
  uint64_t v101 = v33 + 64;
  if (v15 != v33 || v35 >= &v36[8 * v37]) {
    memmove(v35, v36, 8 * v37);
  }
  int64_t v38 = 0;
  *(void *)(v15 + 16) = *(void *)(v33 + 16);
  uint64_t v39 = 1 << *(unsigned char *)(v33 + 32);
  if (v39 < 64) {
    uint64_t v40 = ~(-1 << v39);
  }
  else {
    uint64_t v40 = -1;
  }
  unint64_t v41 = v40 & *(void *)(v33 + 64);
  int64_t v102 = (unint64_t)(v39 + 63) >> 6;
  while (2)
  {
    if (v41)
    {
      uint64_t v103 = (v41 - 1) & v41;
      int64_t v104 = v38;
      unint64_t v42 = __clz(__rbit64(v41)) | (v38 << 6);
LABEL_48:
      uint64_t v43 = 16 * v42;
      unint64_t v44 = (uint64_t *)(*(void *)(v33 + 48) + v43);
      uint64_t v46 = *v44;
      uint64_t v45 = v44[1];
      uint64_t v47 = *(void *)(v33 + 56) + v43;
      uint64_t v48 = *(void *)v47;
      LOBYTE(v47) = *(unsigned char *)(v47 + 8);
      uint64_t v49 = (void *)(*(void *)(v15 + 48) + v43);
      *uint64_t v49 = v46;
      v49[1] = v45;
      uint64_t v50 = *(void *)(v15 + 56) + v43;
      *(void *)uint64_t v50 = v48;
      *(unsigned char *)(v50 + 8) = v47;
      swift_bridgeObjectRetain();
      unint64_t v41 = v103;
      int64_t v38 = v104;
      continue;
    }
    break;
  }
  int64_t v51 = v38 + 1;
  if (__OFADD__(v38, 1))
  {
    __break(1u);
    goto LABEL_125;
  }
  if (v51 >= v102) {
    goto LABEL_70;
  }
  unint64_t v52 = *(void *)(v101 + 8 * v51);
  int64_t v53 = v38 + 1;
  if (v52) {
    goto LABEL_69;
  }
  int64_t v53 = v38 + 2;
  if (v38 + 2 >= v102) {
    goto LABEL_70;
  }
  unint64_t v52 = *(void *)(v101 + 8 * v53);
  if (v52) {
    goto LABEL_69;
  }
  int64_t v53 = v38 + 3;
  if (v38 + 3 >= v102) {
    goto LABEL_70;
  }
  unint64_t v52 = *(void *)(v101 + 8 * v53);
  if (v52) {
    goto LABEL_69;
  }
  int64_t v53 = v38 + 4;
  if (v38 + 4 >= v102) {
    goto LABEL_70;
  }
  unint64_t v52 = *(void *)(v101 + 8 * v53);
  if (v52) {
    goto LABEL_69;
  }
  int64_t v53 = v38 + 5;
  if (v38 + 5 >= v102) {
    goto LABEL_70;
  }
  unint64_t v52 = *(void *)(v101 + 8 * v53);
  if (v52) {
    goto LABEL_69;
  }
  int64_t v53 = v38 + 6;
  if (v38 + 6 >= v102) {
    goto LABEL_70;
  }
  unint64_t v52 = *(void *)(v101 + 8 * v53);
  if (v52)
  {
LABEL_69:
    uint64_t v103 = (v52 - 1) & v52;
    int64_t v104 = v53;
    unint64_t v42 = __clz(__rbit64(v52)) + (v53 << 6);
    goto LABEL_48;
  }
  uint64_t v54 = v38 + 7;
  if (v38 + 7 >= v102) {
    goto LABEL_70;
  }
  unint64_t v52 = *(void *)(v101 + 8 * v54);
  if (v52)
  {
    int64_t v53 = v38 + 7;
    goto LABEL_69;
  }
  while (1)
  {
    int64_t v53 = v54 + 1;
    if (__OFADD__(v54, 1)) {
      break;
    }
    if (v53 >= v102) {
      goto LABEL_70;
    }
    unint64_t v52 = *(void *)(v101 + 8 * v53);
    ++v54;
    if (v52) {
      goto LABEL_69;
    }
  }
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  _StringGuts.grow(_:)(75);
  v87._uint64_t countAndFlagsBits = 0xD000000000000021;
  v87._unint64_t object = (void *)0x80000001823AFA40;
  String.append(_:)(v87);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  swift_getAtKeyPath();
  swift_release();
  v88._uint64_t countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v88);
  swift_bridgeObjectRelease();
  v89._uint64_t countAndFlagsBits = 0x797420646E612027;
  v89._unint64_t object = (void *)0xEC00000027206570;
  String.append(_:)(v89);
  v90._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v90);
  swift_bridgeObjectRelease();
  v91._unint64_t object = (void *)0x80000001823AF9E0;
  v91._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v91);
  v92._uint64_t countAndFlagsBits = a2;
  v92._unint64_t object = v8;
  String.append(_:)(v92);
  v93._uint64_t countAndFlagsBits = 39;
  v93._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v93);
LABEL_130:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_131:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *protocol witness for Decodable.init(from:) in conformance ExpressionStructure.Argument@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = ExpressionStructure.Argument.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(unsigned char *)(a2 + 24) = v7 & 1;
  }
  return result;
}

void *ExpressionStructure.Argument.init(from:)(void *a1)
{
  __n128 result = specialized ExpressionStructure.Argument.init(from:)(a1);
  if (v1) {
    return (void *)(v3 & 1);
  }
  return result;
}

void *specialized ExpressionStructure.Argument.init(from:)(void *a1)
{
  char v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v6, v6[3]);
    lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    char v3 = v5;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t type metadata instantiation function for PredicateExpressions.DictionaryKeyDefaultValueSubscript(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 72);
}

void static Duration.UnitsFormatStyle.Unit.days.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t NSScanner.currentIndex.getter()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(v0, sel_string);
  unint64_t v3 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  unint64_t v5 = v4;

  objc_msgSend(v1, sel__deprecated_scanLocation, v3, v5);
  lazy protocol witness table accessor for type String and conformance String();
  unint64_t v6 = StringProtocol._toUTF16Index(_:)();
  unint64_t v7 = v6;
  uint64_t v8 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v8 = v3 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v9 = 4 * v8;
  if (4 * v8 != v6 >> 14)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t result = String.Index.samePosition(in:)();
      if ((v12 & 1) == 0) {
        break;
      }
      uint64_t v13 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        return result;
      }
      id v14 = objc_msgSend(v1, sel__deprecated_scanLocation, v3, v5);
      BOOL v15 = __OFADD__(v14, v13);
      uint64_t result = (uint64_t)v14 + v13;
      if (v15) {
        goto LABEL_11;
      }
      unint64_t v7 = StringProtocol._toUTF16Index(_:)();
      ++v10;
    }
    while (v9 != v7 >> 14);
  }
  swift_bridgeObjectRelease();
  return v7;
}

void sub_1819B1C4C(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void _NSKeyValueRemoveObservationInfoForObject(uint64_t a1)
{
  os_unfair_lock_lock_with_options();
  uint64_t v2 = ~a1;
  if (NSKeyValueObservationInfoPerObject)
  {
    id Value = (id)CFDictionaryGetValue((CFDictionaryRef)NSKeyValueObservationInfoPerObject, (const void *)v2);
    Mutable = (__CFDictionary *)NSKeyValueObservationInfoPerObject;
    if (NSKeyValueObservationInfoPerObject) {
      goto LABEL_6;
    }
  }
  else
  {
    id Value = 0;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
  NSKeyValueObservationInfoPerObject = (uint64_t)Mutable;
LABEL_6:
  CFDictionaryRemoveValue(Mutable, (const void *)v2);
  if (NSKeyValueSharedObservationInfoPerObject) {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)NSKeyValueSharedObservationInfoPerObject, (const void *)v2);
  }
  os_unfair_lock_unlock(&NSKeyValueObservationInfoLock);
}

uint64_t instantiation function for generic protocol witness table for <A> PredicateExpressions.Value<A>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

id thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error, @guaranteed String) -> (@out Any?)(uint64_t a1, void *a2, void *a3)
{
  void (*v4)(void *__return_ptr);
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void v14[3];
  uint64_t v15;
  uint64_t vars8;

  unint64_t v4 = *(void (**)(void *__return_ptr))(a1 + 32);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  swift_retain();
  unint64_t v5 = a2;
  v4(v14);
  swift_release();

  swift_bridgeObjectRelease();
  unint64_t v6 = v15;
  if (v15)
  {
    unint64_t v7 = __swift_project_boxed_opaque_existential_1(v14, v15);
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = MEMORY[0x1F4188790](v7);
    uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v8 + 16))(v11, v9);
    char v12 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    char v12 = 0;
  }

  return v12;
}

uint64_t closure #1 in closure #1 in _getErrorDefaultUserInfo<A>(_:)@<X0>(void *a1@<X0>, id a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedDescription") == a2 && v8 == a3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v10)
  {
LABEL_20:
    uint64_t v48 = a1;
    id v18 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedError);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_36;
    }
    uint64_t v19 = *((void *)&v46 + 1);
    uint64_t v20 = v47;
    __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20);
    if (v22) {
      goto LABEL_22;
    }
LABEL_27:
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
LABEL_38:
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    return result;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedFailureReason") == a2 && v11 == a3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v13)
  {
LABEL_25:
    uint64_t v48 = a1;
    id v24 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedError);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_36;
    }
    uint64_t v25 = *((void *)&v46 + 1);
    uint64_t v26 = v47;
    __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 24))(v25, v26);
    if (v22) {
      goto LABEL_22;
    }
    goto LABEL_27;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedRecoverySuggestion") == a2 && v14 == a3)
  {
    swift_bridgeObjectRelease();
LABEL_29:
    uint64_t v48 = a1;
    id v27 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedError);
    if (swift_dynamicCast())
    {
      uint64_t v28 = *((void *)&v46 + 1);
      uint64_t v29 = v47;
      __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 32))(v28, v29);
      if (!v22) {
        goto LABEL_27;
      }
LABEL_22:
      *(void *)(a4 + 24) = MEMORY[0x1E4FBB1A0];
      *(void *)a4 = v21;
      *(void *)(a4 + 8) = v22;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
    }
LABEL_36:
    uint64_t v47 = 0;
    long long v45 = 0u;
    long long v46 = 0u;
    uint64_t v34 = (uint64_t *)&demangling cache variable for type metadata for LocalizedError?;
    goto LABEL_37;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v16) {
    goto LABEL_29;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSHelpAnchor") == a2 && v17 == a3)
  {
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v30)
  {
LABEL_33:
    uint64_t v48 = a1;
    id v31 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedError);
    if (swift_dynamicCast())
    {
      uint64_t v32 = *((void *)&v46 + 1);
      uint64_t v33 = v47;
      __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 40))(v32, v33);
      if (!v22) {
        goto LABEL_27;
      }
      goto LABEL_22;
    }
    goto LABEL_36;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedRecoveryOptions") == a2 && v35 == a3)
  {
    swift_bridgeObjectRelease();
LABEL_43:
    uint64_t v48 = a1;
    id v37 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverableError);
    if (swift_dynamicCast())
    {
      uint64_t v38 = *((void *)&v46 + 1);
      uint64_t v39 = v47;
      __swift_project_boxed_opaque_existential_1(&v45, *((uint64_t *)&v46 + 1));
      uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 16))(v38, v39);
      *(void *)(a4 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      *(void *)a4 = v40;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
    }
    uint64_t v47 = 0;
    long long v45 = 0u;
    long long v46 = 0u;
    uint64_t v34 = (uint64_t *)&demangling cache variable for type metadata for RecoverableError?;
LABEL_37:
    uint64_t result = outlined destroy of Any?((uint64_t)&v45, v34);
    goto LABEL_38;
  }
  char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v36) {
    goto LABEL_43;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSRecoveryAttempter") == a2 && v41 == a3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v42 & 1) == 0) {
      goto LABEL_38;
    }
  }
  uint64_t v48 = a1;
  id v43 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverableError);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
    goto LABEL_38;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
  uint64_t v44 = type metadata accessor for __NSErrorRecoveryAttempter();
  uint64_t result = swift_allocObject();
  *(void *)(a4 + 24) = v44;
  *(void *)a4 = result;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int8(void *a1, unsigned char *a2)
{
  id v3 = objc_msgSend(a1, sel_charValue);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if (v5)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }
  return v5 & 1;
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
  uint64_t v2 = v1;
  unint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  v5._uint64_t countAndFlagsBits = 16421;
  v5._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  uint64_t v6 = MEMORY[0x1E4FBB1A0];
  v22[3] = MEMORY[0x1E4FBB1A0];
  v22[4] = lazy protocol witness table accessor for type String and conformance String();
  v22[0] = countAndFlagsBits;
  v22[1] = object;
  unint64_t v7 = __swift_project_boxed_opaque_existential_1(v22, v6);
  uint64_t v20 = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(boxed_opaque_existential_1, v7, v6);
  char v21 = 0;
  outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v19, (uint64_t)v23);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  uint64_t v9 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  if (v11 >= v10 >> 1) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v9);
  }
  _OWORD v9[2] = v11 + 1;
  char v12 = &v9[15 * v11];
  long long v13 = v23[0];
  long long v14 = v23[1];
  long long v15 = v23[3];
  *((_OWORD *)v12 + 4) = v23[2];
  *((_OWORD *)v12 + 5) = v15;
  *((_OWORD *)v12 + 2) = v13;
  *((_OWORD *)v12 + 3) = v14;
  long long v16 = v23[4];
  long long v17 = v23[5];
  long long v18 = v23[6];
  *((unsigned char *)v12 + 144) = v24;
  *((_OWORD *)v12 + 7) = v17;
  *((_OWORD *)v12 + 8) = v18;
  *((_OWORD *)v12 + 6) = v16;
  *uint64_t v2 = v9;
}

uint64_t outlined init with take of String.LocalizationValue.FormatArgument.Storage(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[3];
  *(_OWORD *)(a2 + 32) = a1[2];
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  long long v5 = a1[4];
  long long v6 = a1[5];
  long long v7 = a1[6];
  *(unsigned char *)(a2 + 112) = *((unsigned char *)a1 + 112);
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 96) = v7;
  *(_OWORD *)(a2 + 64) = v5;
  return a2;
}

void *type metadata accessor for ICUMeasurementNumberFormatter.Signature()
{
  return &unk_1ECA41C68;
}

uint64_t PredicateExpressions.OptionalFlatMap.variable.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(result + 72));
  return result;
}

Swift::Bool __swiftcall Calendar.isDate(_:inSameDayAs:)(Foundation::Date _, Foundation::Date inSameDayAs)
{
  *(Foundation::Date *)&v5._Swift::Double time = (Foundation::Date)*v2;
  *(Foundation::Date *)&v6._Swift::Double time = (Foundation::Date)*v3;
  long long v9 = *v4;
  Swift::Double time = v5._time;
  return Calendar.compare(_:to:toGranularity:)(v5, v6, (Foundation::Calendar::Component)&time) == NSOrderedSame;
}

void __NSPostIdleQueueNotes(uint64_t a1, uint64_t a2, char *a3)
{
}

void static Duration.UnitsFormatStyle.UnitWidth.wide.getter(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
}

void static Duration.UnitsFormatStyle.Unit.seconds.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static Duration.UnitsFormatStyle.Unit.milliseconds.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

void static Duration.UnitsFormatStyle.Unit.microseconds.getter(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

void static Duration.UnitsFormatStyle.Unit.nanoseconds.getter(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

void one-time initialization function for nextID()
{
  static PredicateExpressions.VariableID.nextID = 0;
}

uint64_t ___foundation_swift_url_feature_enabled_block_invoke()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    BOOL v1 = 1;
  }
  else
  {
    uint64_t result = (uint64_t)getenv("NSSwiftURL");
    BOOL v1 = result != 0;
  }
  _MergedGlobals_95 = v1;
  return result;
}

uint64_t protocol witness for Decoder.codingPath.getter in conformance _PlistDecoder<A>()
{
  return _PlistDecoder.codingPath.getter();
}

uint64_t _PlistDecoder.codingPath.getter()
{
  unint64_t v1 = *(void *)(v0 + 40);
  swift_retain();
  uint64_t v2 = _CodingPathNode.path.getter(v1);
  swift_release();
  return v2;
}

id IndexSet.rangeView.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  long long v4 = *(void **)(v3 + 16);
  swift_retain();
  id result = objc_msgSend(v4, sel_rangeCount);
  *a1 = 0;
  a1[1] = result;
  a1[2] = v3;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DateInterval(void *a1)
{
  return DateInterval.encode(to:)(a1);
}

uint64_t DateInterval.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DateInterval.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  long long v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = v8;
  v10[7] = 0;
  lazy protocol witness table accessor for type Date and conformance Date();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[6] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t protocol witness for Decodable.init(from:) in conformance DateInterval@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return DateInterval.init(from:)(a1, a2);
}

uint64_t DateInterval.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DateInterval.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v13[15] = 0;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v9 = v14;
    v13[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

uint64_t _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY1_()
{
  swift_retain();
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Notification?);
  *unint64_t v1 = v0;
  v1[1] = _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ2_;
  uint64_t v2 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188148](v2, &closure #1 in NSNotificationCenter.Notifications.Iterator.next()partial apply);
}

uint64_t Locale.Language.minimalIdentifier.getter()
{
  return Locale.Language.minimalIdentifier.getter((uint64_t (*)(uint64_t, void, unint64_t))specialized _withFixedCharBuffer(size:_:), (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized _withFixedCharBuffer(size:_:));
}

void static Date.FormatStyle.Symbol.CyclicYear.abbreviated.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t type metadata completion function for PredicateExpressions.StringLocalizedStandardContains()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

double static NSRunLoop.SchedulerTimeType.Stride.milliseconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000.0;
  *a2 = result;
  return result;
}

uint64_t protocol witness for CVarArg._cVarArgEncoding.getter in conformance [A]()
{
  swift_getWitnessTable();

  return CVarArg<>._cVarArgEncoding.getter();
}

ValueMetadata *type metadata accessor for _XMLPlistDecodingFormat()
{
  return &type metadata for _XMLPlistDecodingFormat;
}

void *type metadata accessor for ScopeDescription()
{
  return &unk_1ECA38EA8;
}

void *type metadata accessor for LoadedScopeCache()
{
  return &unk_1ECA38E20;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ImageURLAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ImageURLAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LinkAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LinkAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.AlternateDescriptionAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.AlternateDescriptionAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.PresentationIntentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.PresentationIntentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.AgreementArgumentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.AgreementArgumentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ReplacementIndexAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ReplacementIndexAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.AgreementConceptAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.AgreementConceptAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ReferentConceptAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ReferentConceptAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.InflectionRuleAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.InflectionRuleAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.NumberFormatAttributes()
{
  return &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.MorphologyAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.MorphologyAttribute;
}

id @objc static NSLocale._newLocaleAsIfCurrent(_:overrides:disableBundleMatching:)(uint64_t a1, uint64_t a2, void *a3, void *a4, char a5)
{
  if (a3)
  {
    id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v9 = v8;
  }
  else
  {
    id v7 = 0;
    uint64_t v9 = 0;
  }
  id v10 = a4;
  id v11 = specialized static NSLocale._newLocaleAsIfCurrent(_:overrides:disableBundleMatching:)((uint64_t)v7, v9, a4, a5);

  swift_bridgeObjectRelease();
  return v11;
}

id specialized static NSLocale._newLocaleAsIfCurrent(_:overrides:disableBundleMatching:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  swift_retain();
  LocaleCache.preferences()(v21);
  if (a3)
  {
    CFDictionaryRef v8 = a3;
    LocalePreferences.apply(_:)(v8);
  }
  v19[6] = v21[6];
  v20[0] = v22[0];
  *(_OWORD *)((char *)v20 + 12) = *(_OWORD *)((char *)v22 + 12);
  v19[2] = v21[2];
  v19[3] = v21[3];
  v19[4] = v21[4];
  v19[5] = v21[5];
  v19[0] = v21[0];
  v19[1] = v21[1];
  type metadata accessor for _LocaleICU();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v9 = _LocaleICU.init(name:prefs:disableBundleMatching:)(a1, a2, (uint64_t *)v19, a4 & 1);
  swift_release();
  uint64_t v10 = _s10Foundation14_LocaleBridgedCAcA01_B8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (void (*)(uint64_t))type metadata accessor for _LocaleICU);
  id v11 = (objc_class *)type metadata accessor for _NSSwiftLocale();
  char v12 = objc_allocWithZone(v11);
  uint64_t v13 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
  uint64_t v14 = (uint64_t *)&v12[OBJC_IVAR____NSSwiftLocale_locale];
  *uint64_t v14 = v9;
  v14[1] = v10;
  v12[v13] = 2;
  uint64_t v15 = String._bridgeToObjectiveCImpl()();
  v18.receiver = v12;
  v18.super_class = v11;
  swift_retain();
  id v16 = objc_msgSendSuper2(&v18, sel_initWithLocaleIdentifier_, v15);
  swift_release();
  swift_unknownObjectRelease();
  return v16;
}

__n128 LocaleCache.preferences()(_OWORD *a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)__CFXPreferencesCopyCurrentApplicationStateWithDeadlockAvoidance();
  v4[0] = 2;
  memset(&v4[8], 0, 128);
  *(_DWORD *)&v4[136] = 33686018;
  LocalePreferences.apply(_:)(v2);

  a1[6] = *(_OWORD *)&v4[96];
  a1[7] = *(_OWORD *)&v4[112];
  *(_OWORD *)((char *)a1 + 124) = *(_OWORD *)&v4[124];
  a1[2] = *(_OWORD *)&v4[32];
  a1[3] = *(_OWORD *)&v4[48];
  a1[4] = *(_OWORD *)&v4[64];
  a1[5] = *(_OWORD *)&v4[80];
  __n128 result = *(__n128 *)&v4[16];
  *a1 = *(_OWORD *)v4;
  a1[1] = *(_OWORD *)&v4[16];
  return result;
}

Swift::Void __swiftcall LocalePreferences.apply(_:)(CFDictionaryRef a1)
{
  CFDictionaryRef v2 = a1;
  v238[1] = *MEMORY[0x1E4F143B8];
  BOOL v236 = 0;
  if (CFDictionaryGetCount(a1) < 1) {
    return;
  }
  uint64_t v3 = __CFLocalePrefsCopyAppleLanguages(v2);
  if (v3)
  {
    uint64_t v4 = v3;
    [(__CFArray *)v3 copy];
    unint64_t v5 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v6 = specialized _arrayConditionalCast<A, B>(_:)(v5);

    swift_bridgeObjectRelease();
    if (v6)
    {
      swift_bridgeObjectRelease();
      v1[1] = v6;
    }
  }
  id v7 = (void *)__CFLocalePrefsCopyAppleLocale(v2);
  if (v7)
  {
    CFDictionaryRef v8 = v7;
    id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v11 = v10;

    swift_bridgeObjectRelease();
    v1[2] = v9;
    v1[3] = v11;
  }
  BOOL IsMetric = __CFLocalePrefsAppleMetricUnitsIsMetric(v2, &v236);
  if (v236) {
    *(unsigned char *)unint64_t v1 = IsMetric;
  }
  IsCuint64_t m = __CFLocalePrefsAppleMeasurementUnitsIsCm(v2, (char *)&v236);
  if (v236) {
    *((unsigned char *)v1 + 136) = IsCm == 0;
  }
  int IsC = __CFLocalePrefsAppleTemperatureUnitIsC(v2, (char *)&v236);
  if (v236) {
    *((unsigned char *)v1 + 137) = IsC != 0;
  }
  BOOL v15 = __CFLocalePrefsAppleForce24HourTime(v2, &v236);
  if (v236) {
    *((unsigned char *)v1 + 138) = v15;
  }
  BOOL v16 = __CFLocalePrefsAppleForce12HourTime(v2, &v236);
  if (v236) {
    *((unsigned char *)v1 + 139) = v16;
  }
  long long v17 = (void *)__CFLocalePrefsCopyAppleCollationOrder(v2);
  if (v17)
  {
    objc_super v18 = v17;
    id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v21 = v20;

    swift_bridgeObjectRelease();
    v1[4] = v19;
    v1[5] = v21;
  }
  uint64_t v22 = (void *)__CFLocalePrefsCopyCountry(v2);
  if (v22)
  {
    uint64_t v23 = v22;
    id v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v26 = v25;

    swift_bridgeObjectRelease();
    v1[15] = v24;
    v1[16] = v26;
  }
  CFTypeRef v27 = __CFLocalePrefsCopyAppleICUDateTimeSymbols(v2);
  if (v27)
  {
    CFTypeRef v28 = v27;

    v1[8] = v28;
  }
  uint64_t v29 = (void *)__CFLocalePrefsCopyAppleICUDateFormatStrings(v2);
  uint64_t v234 = v1;
  CFDictionaryRef v235 = v2;
  if (v29)
  {
    char v30 = v29;
    id v31 = (void *)v1[9];
    id v32 = v29;

    v1[9] = v30;
    v238[0] = 0;
    id v33 = v32;
    specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v33, v238);

    uint64_t v34 = v238[0];
    if (v238[0])
    {
      uint64_t v225 = v33;
      int64_t v35 = 0;
      uint64_t v36 = v238[0] + 64;
      uint64_t v37 = 1 << *(unsigned char *)(v238[0] + 32);
      if (v37 < 64) {
        uint64_t v38 = ~(-1 << v37);
      }
      else {
        uint64_t v38 = -1;
      }
      unint64_t v39 = v38 & *(void *)(v238[0] + 64);
      int64_t v40 = (unint64_t)(v37 + 63) >> 6;
      int64_t v228 = v40;
      uint64_t v231 = MEMORY[0x1E4FBC868];
      if (!v39) {
        goto LABEL_32;
      }
LABEL_29:
      unint64_t v41 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      for (unint64_t i = v41 | (v35 << 6); ; unint64_t i = __clz(__rbit64(v53)) + (v35 << 6))
      {
        uint64_t v43 = 16 * i;
        uint64_t v44 = (uint64_t *)(*(void *)(v34 + 48) + v43);
        uint64_t v45 = *v44;
        unint64_t v46 = v44[1];
        uint64_t v47 = (uint64_t *)(*(void *)(v34 + 56) + v43);
        uint64_t v48 = *v47;
        uint64_t v49 = v47[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v50 = specialized FixedWidthInteger.init(_:)(v45, v46);
        if (v51)
        {
          swift_bridgeObjectRelease();
          if (v39) {
            goto LABEL_29;
          }
          goto LABEL_32;
        }
        unint64_t v55 = v50;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v238[0] = v231;
        unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v55);
        uint64_t v59 = *(void *)(v231 + 16);
        BOOL v60 = (v57 & 1) == 0;
        uint64_t v61 = v59 + v60;
        if (__OFADD__(v59, v60)) {
          goto LABEL_279;
        }
        if (*(void *)(v231 + 24) >= v61)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            int64_t v40 = v228;
            uint64_t v63 = v231;
            if (v57) {
              goto LABEL_53;
            }
          }
          else
          {
            unint64_t v217 = v58;
            char v219 = v57;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Date.FormatStyle.DateStyle, String>);
            uint64_t v67 = static _DictionaryStorage.copy(original:)();
            uint64_t v63 = v67;
            if (*(void *)(v231 + 16))
            {
              unint64_t v68 = (char *)(v67 + 64);
              unint64_t __src = (char *)(v231 + 64);
              unint64_t v69 = (unint64_t)((1 << *(unsigned char *)(v63 + 32)) + 63) >> 6;
              if (v63 != v231 || v68 >= &__src[8 * v69]) {
                memmove(v68, __src, 8 * v69);
              }
              uint64_t v70 = 0;
              *(void *)(v63 + 16) = *(void *)(v231 + 16);
              uint64_t v71 = 1 << *(unsigned char *)(v231 + 32);
              if (v71 < 64) {
                uint64_t v72 = ~(-1 << v71);
              }
              else {
                uint64_t v72 = -1;
              }
              unint64_t v73 = v72 & *(void *)(v231 + 64);
              char v221 = (void *)((unint64_t)(v71 + 63) >> 6);
              while (1)
              {
                if (v73)
                {
                  unint64_t v74 = __clz(__rbit64(v73));
                  v73 &= v73 - 1;
                  unint64_t v75 = v74 | (v70 << 6);
                }
                else
                {
                  uint64_t v83 = v70 + 1;
                  if (__OFADD__(v70, 1))
                  {
                    __break(1u);
LABEL_284:
                    __break(1u);
LABEL_285:
                    __break(1u);
                    goto LABEL_286;
                  }
                  if (v83 >= (uint64_t)v221) {
                    break;
                  }
                  unint64_t v84 = *(void *)&__src[8 * v83];
                  uint64_t v85 = v70 + 1;
                  if (!v84)
                  {
                    uint64_t v85 = v70 + 2;
                    if (v70 + 2 >= (uint64_t)v221) {
                      break;
                    }
                    unint64_t v84 = *(void *)&__src[8 * v85];
                    if (!v84)
                    {
                      uint64_t v85 = v70 + 3;
                      if (v70 + 3 >= (uint64_t)v221) {
                        break;
                      }
                      unint64_t v84 = *(void *)&__src[8 * v85];
                      if (!v84)
                      {
                        uint64_t v85 = v70 + 4;
                        if (v70 + 4 >= (uint64_t)v221) {
                          break;
                        }
                        unint64_t v84 = *(void *)&__src[8 * v85];
                        if (!v84)
                        {
                          uint64_t v85 = v70 + 5;
                          if (v70 + 5 >= (uint64_t)v221) {
                            break;
                          }
                          unint64_t v84 = *(void *)&__src[8 * v85];
                          if (!v84)
                          {
                            uint64_t v85 = v70 + 6;
                            if (v70 + 6 >= (uint64_t)v221) {
                              break;
                            }
                            unint64_t v84 = *(void *)&__src[8 * v85];
                            if (!v84)
                            {
                              uint64_t v85 = v70 + 7;
                              if (v70 + 7 >= (uint64_t)v221) {
                                break;
                              }
                              unint64_t v84 = *(void *)&__src[8 * v85];
                              if (!v84)
                              {
                                uint64_t v86 = v70 + 8;
                                if (v70 + 8 >= (uint64_t)v221) {
                                  break;
                                }
                                unint64_t v84 = *(void *)&__src[8 * v86];
                                if (!v84)
                                {
                                  while (1)
                                  {
                                    uint64_t v85 = v86 + 1;
                                    if (__OFADD__(v86, 1)) {
                                      break;
                                    }
                                    if (v85 >= (uint64_t)v221) {
                                      goto LABEL_87;
                                    }
                                    unint64_t v84 = *(void *)&__src[8 * v85];
                                    ++v86;
                                    if (v84) {
                                      goto LABEL_86;
                                    }
                                  }
LABEL_286:
                                  __break(1u);
                                  goto LABEL_287;
                                }
                                uint64_t v85 = v70 + 8;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_86:
                  unint64_t v73 = (v84 - 1) & v84;
                  uint64_t v70 = v85;
                  unint64_t v75 = __clz(__rbit64(v84)) + (v85 << 6);
                }
                uint64_t v76 = 8 * v75;
                uint64_t v77 = *(void *)(*(void *)(v231 + 48) + 8 * v75);
                uint64_t v78 = 16 * v75;
                uint64_t v79 = (uint64_t *)(*(void *)(v231 + 56) + v78);
                uint64_t v81 = *v79;
                uint64_t v80 = v79[1];
                *(void *)(*(void *)(v63 + 48) + v76) = v77;
                unint64_t v82 = (void *)(*(void *)(v63 + 56) + v78);
                *unint64_t v82 = v81;
                v82[1] = v80;
                swift_bridgeObjectRetain();
              }
            }
LABEL_87:
            swift_bridgeObjectRelease();
            int64_t v40 = v228;
            unint64_t v58 = v217;
            if (v219)
            {
LABEL_53:
              uint64_t v66 = (void *)(*(void *)(v63 + 56) + 16 * v58);
              swift_bridgeObjectRelease();
              void *v66 = v48;
              v66[1] = v49;
              goto LABEL_90;
            }
          }
        }
        else
        {
          char v62 = v57;
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v61, isUniquelyReferenced_nonNull_native);
          uint64_t v63 = v238[0];
          uint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v55);
          if ((v62 & 1) != (v65 & 1)) {
            goto LABEL_289;
          }
          unint64_t v58 = v64;
          int64_t v40 = v228;
          if (v62) {
            goto LABEL_53;
          }
        }
        *(void *)(v63 + 8 * (v58 >> 6) + 64) |= 1 << v58;
        *(void *)(*(void *)(v63 + 48) + 8 * v58) = v55;
        Swift::String v87 = (void *)(*(void *)(v63 + 56) + 16 * v58);
        *Swift::String v87 = v48;
        v87[1] = v49;
        uint64_t v88 = *(void *)(v63 + 16);
        BOOL v89 = __OFADD__(v88, 1);
        uint64_t v90 = v88 + 1;
        if (v89) {
          goto LABEL_282;
        }
        *(void *)(v63 + 16) = v90;
LABEL_90:
        swift_bridgeObjectRelease();
        uint64_t v231 = v63;
        if (v39) {
          goto LABEL_29;
        }
LABEL_32:
        int64_t v52 = v35 + 1;
        if (__OFADD__(v35, 1))
        {
          __break(1u);
LABEL_272:
          __break(1u);
LABEL_273:
          __break(1u);
LABEL_274:
          __break(1u);
          goto LABEL_275;
        }
        if (v52 >= v40) {
          goto LABEL_92;
        }
        unint64_t v53 = *(void *)(v36 + 8 * v52);
        ++v35;
        if (!v53)
        {
          int64_t v35 = v52 + 1;
          if (v52 + 1 >= v40) {
            goto LABEL_92;
          }
          unint64_t v53 = *(void *)(v36 + 8 * v35);
          if (!v53)
          {
            int64_t v35 = v52 + 2;
            if (v52 + 2 >= v40) {
              goto LABEL_92;
            }
            unint64_t v53 = *(void *)(v36 + 8 * v35);
            if (!v53)
            {
              int64_t v54 = v52 + 3;
              if (v54 >= v40)
              {
LABEL_92:

                swift_release();
                unint64_t v1 = v234;
                swift_bridgeObjectRelease();
                v234[13] = v231;
                goto LABEL_94;
              }
              unint64_t v53 = *(void *)(v36 + 8 * v54);
              if (!v53)
              {
                while (1)
                {
                  int64_t v35 = v54 + 1;
                  if (__OFADD__(v54, 1)) {
                    break;
                  }
                  if (v35 >= v40) {
                    goto LABEL_92;
                  }
                  unint64_t v53 = *(void *)(v36 + 8 * v35);
                  ++v54;
                  if (v53) {
                    goto LABEL_45;
                  }
                }
LABEL_275:
                __break(1u);
                goto LABEL_276;
              }
              int64_t v35 = v54;
            }
          }
        }
LABEL_45:
        unint64_t v39 = (v53 - 1) & v53;
      }
    }

LABEL_94:
    CFDictionaryRef v2 = v235;
  }
  CFTypeRef v91 = __CFLocalePrefsCopyAppleICUTimeFormatStrings(v2);
  if (v91)
  {
    CFTypeRef v92 = v91;

    v1[10] = v92;
  }
  CFTypeRef v93 = __CFLocalePrefsCopyAppleICUNumberFormatStrings(v2);
  if (v93)
  {
    CFTypeRef v94 = v93;

    v1[11] = v94;
  }
  Swift::String v95 = (void *)__CFLocalePrefsCopyAppleICUNumberSymbols(v2);
  if (!v95) {
    goto LABEL_172;
  }
  Swift::String v96 = v95;
  Swift::String v97 = (void *)v1[12];
  id v98 = v95;

  v1[12] = v96;
  v238[0] = 0;
  id v99 = v98;
  specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v99, v238);

  uint64_t v100 = v238[0];
  if (!v238[0])
  {

    goto LABEL_171;
  }
  uint64_t v229 = v99;
  int64_t v101 = 0;
  uint64_t v102 = v238[0] + 64;
  uint64_t v103 = 1 << *(unsigned char *)(v238[0] + 32);
  if (v103 < 64) {
    uint64_t v104 = ~(-1 << v103);
  }
  else {
    uint64_t v104 = -1;
  }
  unint64_t v105 = v104 & *(void *)(v238[0] + 64);
  int64_t v106 = (unint64_t)(v103 + 63) >> 6;
  uint64_t v232 = MEMORY[0x1E4FBC868];
  if (!v105) {
    goto LABEL_108;
  }
LABEL_105:
  unint64_t v107 = __clz(__rbit64(v105));
  v105 &= v105 - 1;
  for (unint64_t j = v107 | (v101 << 6); ; unint64_t j = __clz(__rbit64(v118)) + (v101 << 6))
  {
    uint64_t v109 = 16 * j;
    Swift::String v110 = (uint64_t *)(*(void *)(v100 + 48) + v109);
    uint64_t v111 = *v110;
    unint64_t v112 = v110[1];
    Swift::String v113 = (uint64_t *)(*(void *)(v100 + 56) + v109);
    uint64_t v115 = *v113;
    uint64_t v114 = v113[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v116 = specialized FixedWidthInteger.init(_:)(v111, v112);
    if ((v116 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      if (v105) {
        goto LABEL_105;
      }
      goto LABEL_108;
    }
    unsigned int v120 = v116;
    char v121 = swift_isUniquelyReferenced_nonNull_native();
    v238[0] = v232;
    unint64_t v123 = specialized __RawDictionaryStorage.find<A>(_:)(v120);
    uint64_t v124 = *(void *)(v232 + 16);
    BOOL v125 = (v122 & 1) == 0;
    uint64_t v126 = v124 + v125;
    if (__OFADD__(v124, v125)) {
      goto LABEL_280;
    }
    if (*(void *)(v232 + 24) >= v126)
    {
      if (v121)
      {
        uint64_t v127 = v232;
        if (v122) {
          goto LABEL_129;
        }
      }
      else
      {
        unint64_t v218 = v123;
        char v227 = v122;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, String>);
        uint64_t v131 = static _DictionaryStorage.copy(original:)();
        uint64_t v127 = v131;
        if (*(void *)(v232 + 16))
        {
          uint64_t v132 = (char *)(v131 + 64);
          unint64_t v222 = (char *)(v232 + 64);
          unint64_t v133 = (unint64_t)((1 << *(unsigned char *)(v127 + 32)) + 63) >> 6;
          if (v127 != v232 || v132 >= &v222[8 * v133]) {
            memmove(v132, v222, 8 * v133);
          }
          int64_t __srca = 0;
          *(void *)(v127 + 16) = *(void *)(v232 + 16);
          uint64_t v134 = 1 << *(unsigned char *)(v232 + 32);
          if (v134 < 64) {
            uint64_t v135 = ~(-1 << v134);
          }
          else {
            uint64_t v135 = -1;
          }
          unint64_t v136 = v135 & *(void *)(v232 + 64);
          int64_t v220 = (unint64_t)(v134 + 63) >> 6;
          while (1)
          {
            if (v136)
            {
              unint64_t v137 = __clz(__rbit64(v136));
              v136 &= v136 - 1;
              unint64_t v138 = v137 | (__srca << 6);
            }
            else
            {
              uint64_t v146 = __srca + 1;
              if (__OFADD__(__srca, 1)) {
                goto LABEL_284;
              }
              if (v146 >= v220) {
                break;
              }
              unint64_t v147 = *(void *)&v222[8 * v146];
              int64_t v148 = __srca + 1;
              if (!v147)
              {
                int64_t v148 = __srca + 2;
                if (__srca + 2 >= v220) {
                  break;
                }
                unint64_t v147 = *(void *)&v222[8 * v148];
                if (!v147)
                {
                  int64_t v148 = __srca + 3;
                  if (__srca + 3 >= v220) {
                    break;
                  }
                  unint64_t v147 = *(void *)&v222[8 * v148];
                  if (!v147)
                  {
                    int64_t v148 = __srca + 4;
                    if (__srca + 4 >= v220) {
                      break;
                    }
                    unint64_t v147 = *(void *)&v222[8 * v148];
                    if (!v147)
                    {
                      int64_t v148 = __srca + 5;
                      if (__srca + 5 >= v220) {
                        break;
                      }
                      unint64_t v147 = *(void *)&v222[8 * v148];
                      if (!v147)
                      {
                        int64_t v148 = __srca + 6;
                        if (__srca + 6 >= v220) {
                          break;
                        }
                        unint64_t v147 = *(void *)&v222[8 * v148];
                        if (!v147)
                        {
                          int64_t v148 = __srca + 7;
                          if (__srca + 7 >= v220) {
                            break;
                          }
                          unint64_t v147 = *(void *)&v222[8 * v148];
                          if (!v147)
                          {
                            uint64_t v149 = (char *)(__srca + 8);
                            if (__srca + 8 >= v220) {
                              break;
                            }
                            unint64_t v147 = *(void *)&v222[8 * (void)v149];
                            if (!v147)
                            {
                              while (1)
                              {
                                int64_t v148 = (int64_t)(v149 + 1);
                                if (__OFADD__(v149, 1)) {
                                  break;
                                }
                                if (v148 >= v220) {
                                  goto LABEL_163;
                                }
                                unint64_t v147 = *(void *)&v222[8 * v148];
                                ++v149;
                                if (v147) {
                                  goto LABEL_162;
                                }
                              }
LABEL_287:
                              __break(1u);
                              goto LABEL_288;
                            }
                            int64_t v148 = __srca + 8;
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_162:
              unint64_t v136 = (v147 - 1) & v147;
              int64_t __srca = v148;
              unint64_t v138 = __clz(__rbit64(v147)) + (v148 << 6);
            }
            uint64_t v139 = 4 * v138;
            int v140 = *(_DWORD *)(*(void *)(v232 + 48) + 4 * v138);
            uint64_t v141 = 16 * v138;
            double v142 = (uint64_t *)(*(void *)(v232 + 56) + v141);
            uint64_t v144 = *v142;
            uint64_t v143 = v142[1];
            *(_DWORD *)(*(void *)(v127 + 48) + v139) = v140;
            uint64_t v145 = (void *)(*(void *)(v127 + 56) + v141);
            *uint64_t v145 = v144;
            v145[1] = v143;
            swift_bridgeObjectRetain();
          }
        }
LABEL_163:
        swift_bridgeObjectRelease();
        unint64_t v123 = v218;
        if (v227)
        {
LABEL_129:
          uint64_t v130 = (uint64_t *)(*(void *)(v127 + 56) + 16 * v123);
          swift_bridgeObjectRelease();
          *uint64_t v130 = v115;
          v130[1] = v114;
          goto LABEL_165;
        }
      }
    }
    else
    {
      char v226 = v122;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v126, v121);
      uint64_t v127 = v238[0];
      unint64_t v128 = specialized __RawDictionaryStorage.find<A>(_:)(v120);
      if ((v226 & 1) != (v129 & 1)) {
        goto LABEL_290;
      }
      unint64_t v123 = v128;
      if (v226) {
        goto LABEL_129;
      }
    }
    specialized _NativeDictionary._insert(at:key:value:)(v123, v120, v115, v114, (void *)v127);
LABEL_165:
    swift_bridgeObjectRelease();
    uint64_t v232 = v127;
    if (v105) {
      goto LABEL_105;
    }
LABEL_108:
    int64_t v117 = v101 + 1;
    if (__OFADD__(v101, 1)) {
      goto LABEL_272;
    }
    if (v117 >= v106) {
      break;
    }
    unint64_t v118 = *(void *)(v102 + 8 * v117);
    ++v101;
    if (!v118)
    {
      int64_t v101 = v117 + 1;
      if (v117 + 1 >= v106) {
        break;
      }
      unint64_t v118 = *(void *)(v102 + 8 * v101);
      if (!v118)
      {
        int64_t v101 = v117 + 2;
        if (v117 + 2 >= v106) {
          break;
        }
        unint64_t v118 = *(void *)(v102 + 8 * v101);
        if (!v118)
        {
          int64_t v119 = v117 + 3;
          if (v119 >= v106) {
            break;
          }
          unint64_t v118 = *(void *)(v102 + 8 * v119);
          if (!v118)
          {
            while (1)
            {
              int64_t v101 = v119 + 1;
              if (__OFADD__(v119, 1)) {
                break;
              }
              if (v101 >= v106) {
                goto LABEL_167;
              }
              unint64_t v118 = *(void *)(v102 + 8 * v101);
              ++v119;
              if (v118) {
                goto LABEL_121;
              }
            }
LABEL_276:
            __break(1u);
            goto LABEL_277;
          }
          int64_t v101 = v119;
        }
      }
    }
LABEL_121:
    unint64_t v105 = (v118 - 1) & v118;
  }
LABEL_167:
  swift_release();

  if (*(void *)(v232 + 16))
  {
    swift_bridgeObjectRelease();
    v234[14] = v232;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
LABEL_171:
  CFDictionaryRef v2 = v235;
LABEL_172:
  Weekdadouble y = (void *)__CFLocalePrefsCopyAppleFirstWeekday(v2);
  if (Weekday)
  {
    uint64_t v151 = Weekday;
    v238[0] = 0;
    specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(Weekday, v238);

    uint64_t v152 = v238[0];
    if (v238[0])
    {
      int64_t v153 = 0;
      uint64_t v154 = v238[0] + 64;
      uint64_t v155 = 1 << *(unsigned char *)(v238[0] + 32);
      if (v155 < 64) {
        uint64_t v156 = ~(-1 << v155);
      }
      else {
        uint64_t v156 = -1;
      }
      unint64_t v157 = v156 & *(void *)(v238[0] + 64);
      int64_t v158 = (unint64_t)(v155 + 63) >> 6;
      uint64_t v159 = MEMORY[0x1E4FBC868];
      if (!v157) {
        goto LABEL_181;
      }
LABEL_178:
      unint64_t v160 = __clz(__rbit64(v157));
      v157 &= v157 - 1;
      for (unint64_t k = v160 | (v153 << 6); ; unint64_t k = __clz(__rbit64(v169)) + (v153 << 6))
      {
        unsigned __int8 v162 = (uint64_t *)(*(void *)(v152 + 48) + 16 * k);
        uint64_t v163 = *v162;
        unsigned __int8 v164 = (void *)v162[1];
        uint64_t v165 = *(void *)(*(void *)(v152 + 56) + 8 * k);
        swift_bridgeObjectRetain();
        v166._uint64_t countAndFlagsBits = v163;
        v166._unint64_t object = v164;
        Calendar.Identifier.init(identifierString:)(v166);
        uint64_t v167 = LOBYTE(v238[0]);
        if (LOBYTE(v238[0]) == 16)
        {
          if (v157) {
            goto LABEL_178;
          }
          goto LABEL_181;
        }
        char v171 = swift_isUniquelyReferenced_nonNull_native();
        v238[0] = v159;
        unint64_t v173 = specialized __RawDictionaryStorage.find<A>(_:)(v167);
        uint64_t v174 = *(void *)(v159 + 16);
        BOOL v175 = (v172 & 1) == 0;
        uint64_t v176 = v174 + v175;
        if (__OFADD__(v174, v175)) {
          goto LABEL_281;
        }
        if (*(void *)(v159 + 24) >= v176)
        {
          if (v171)
          {
            uint64_t v178 = v159;
            if (v172) {
              goto LABEL_202;
            }
          }
          else
          {
            unint64_t v233 = v173;
            char v230 = v172;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, Int>);
            uint64_t v181 = static _DictionaryStorage.copy(original:)();
            uint64_t v178 = v181;
            if (*(void *)(v159 + 16))
            {
              unsigned __int8 v182 = (void *)(v181 + 64);
              uint64_t v183 = v159 + 64;
              unint64_t v184 = (unint64_t)((1 << *(unsigned char *)(v178 + 32)) + 63) >> 6;
              if (v178 != v159 || (unint64_t)v182 >= v183 + 8 * v184) {
                memmove(v182, (const void *)(v159 + 64), 8 * v184);
              }
              int64_t v185 = 0;
              *(void *)(v178 + 16) = *(void *)(v159 + 16);
              uint64_t v186 = 1 << *(unsigned char *)(v159 + 32);
              if (v186 < 64) {
                uint64_t v187 = ~(-1 << v186);
              }
              else {
                uint64_t v187 = -1;
              }
              unint64_t v188 = v187 & *(void *)(v159 + 64);
              int64_t v189 = (unint64_t)(v186 + 63) >> 6;
              while (1)
              {
                if (v188)
                {
                  unint64_t v190 = __clz(__rbit64(v188));
                  v188 &= v188 - 1;
                  unint64_t v191 = v190 | (v185 << 6);
                }
                else
                {
                  int64_t v193 = v185 + 1;
                  if (__OFADD__(v185, 1)) {
                    goto LABEL_285;
                  }
                  if (v193 >= v189) {
                    break;
                  }
                  unint64_t v194 = *(void *)(v183 + 8 * v193);
                  ++v185;
                  if (!v194)
                  {
                    int64_t v185 = v193 + 1;
                    if (v193 + 1 >= v189) {
                      break;
                    }
                    unint64_t v194 = *(void *)(v183 + 8 * v185);
                    if (!v194)
                    {
                      int64_t v185 = v193 + 2;
                      if (v193 + 2 >= v189) {
                        break;
                      }
                      unint64_t v194 = *(void *)(v183 + 8 * v185);
                      if (!v194)
                      {
                        int64_t v185 = v193 + 3;
                        if (v193 + 3 >= v189) {
                          break;
                        }
                        unint64_t v194 = *(void *)(v183 + 8 * v185);
                        if (!v194)
                        {
                          int64_t v185 = v193 + 4;
                          if (v193 + 4 >= v189) {
                            break;
                          }
                          unint64_t v194 = *(void *)(v183 + 8 * v185);
                          if (!v194)
                          {
                            int64_t v185 = v193 + 5;
                            if (v193 + 5 >= v189) {
                              break;
                            }
                            unint64_t v194 = *(void *)(v183 + 8 * v185);
                            if (!v194)
                            {
                              int64_t v185 = v193 + 6;
                              if (v193 + 6 >= v189) {
                                break;
                              }
                              unint64_t v194 = *(void *)(v183 + 8 * v185);
                              if (!v194)
                              {
                                int64_t v195 = v193 + 7;
                                if (v195 >= v189) {
                                  break;
                                }
                                uint64_t v196 = v183;
                                unint64_t v194 = *(void *)(v183 + 8 * v195);
                                if (!v194)
                                {
                                  while (1)
                                  {
                                    int64_t v185 = v195 + 1;
                                    if (__OFADD__(v195, 1)) {
                                      break;
                                    }
                                    if (v185 >= v189) {
                                      goto LABEL_236;
                                    }
                                    uint64_t v183 = v196;
                                    unint64_t v194 = *(void *)(v196 + 8 * v185);
                                    ++v195;
                                    if (v194) {
                                      goto LABEL_235;
                                    }
                                  }
LABEL_288:
                                  __break(1u);
LABEL_289:
                                  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                                  __break(1u);
LABEL_290:
                                  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                                  __break(1u);
LABEL_291:
                                  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                                  __break(1u);
                                  return;
                                }
                                int64_t v185 = v195;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_235:
                  unint64_t v188 = (v194 - 1) & v194;
                  unint64_t v191 = __clz(__rbit64(v194)) + (v185 << 6);
                }
                uint64_t v192 = *(void *)(*(void *)(v159 + 56) + 8 * v191);
                *(unsigned char *)(*(void *)(v178 + 48) + v191) = *(unsigned char *)(*(void *)(v159 + 48) + v191);
                *(void *)(*(void *)(v178 + 56) + 8 * v191) = v192;
              }
            }
LABEL_236:
            swift_bridgeObjectRelease();
            unint64_t v173 = v233;
            if (v230)
            {
LABEL_202:
              *(void *)(*(void *)(v178 + 56) + 8 * v173) = v165;
              goto LABEL_238;
            }
          }
        }
        else
        {
          char v177 = v172;
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v176, v171);
          uint64_t v178 = v238[0];
          uint64_t v179 = specialized __RawDictionaryStorage.find<A>(_:)(v167);
          if ((v177 & 1) != (v180 & 1)) {
            goto LABEL_291;
          }
          unint64_t v173 = v179;
          if (v177) {
            goto LABEL_202;
          }
        }
        specialized _NativeDictionary._insert(at:key:value:)(v173, v167, v165, (void *)v178);
LABEL_238:
        swift_bridgeObjectRelease();
        uint64_t v159 = v178;
        if (v157) {
          goto LABEL_178;
        }
LABEL_181:
        int64_t v168 = v153 + 1;
        if (__OFADD__(v153, 1)) {
          goto LABEL_273;
        }
        if (v168 >= v158)
        {
LABEL_240:
          swift_release();
          if (*(void *)(v159 + 16))
          {
            swift_bridgeObjectRelease();
            v234[6] = v159;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          CFDictionaryRef v2 = v235;
          break;
        }
        unint64_t v169 = *(void *)(v154 + 8 * v168);
        ++v153;
        if (!v169)
        {
          int64_t v153 = v168 + 1;
          if (v168 + 1 >= v158) {
            goto LABEL_240;
          }
          unint64_t v169 = *(void *)(v154 + 8 * v153);
          if (!v169)
          {
            int64_t v153 = v168 + 2;
            if (v168 + 2 >= v158) {
              goto LABEL_240;
            }
            unint64_t v169 = *(void *)(v154 + 8 * v153);
            if (!v169)
            {
              int64_t v170 = v168 + 3;
              if (v170 >= v158) {
                goto LABEL_240;
              }
              unint64_t v169 = *(void *)(v154 + 8 * v170);
              if (!v169)
              {
                while (1)
                {
                  int64_t v153 = v170 + 1;
                  if (__OFADD__(v170, 1)) {
                    break;
                  }
                  if (v153 >= v158) {
                    goto LABEL_240;
                  }
                  unint64_t v169 = *(void *)(v154 + 8 * v153);
                  ++v170;
                  if (v169) {
                    goto LABEL_194;
                  }
                }
LABEL_277:
                __break(1u);
                goto LABEL_278;
              }
              int64_t v153 = v170;
            }
          }
        }
LABEL_194:
        unint64_t v157 = (v169 - 1) & v169;
      }
    }
  }
  Weeunint64_t k = (void *)__CFLocalePrefsCopyAppleMinDaysInFirstWeek(v2);
  if (Week)
  {
    uint64_t v198 = Week;
    v238[0] = 0;
    specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(Week, v238);

    uint64_t v199 = v238[0];
    if (v238[0])
    {
      int64_t v200 = 0;
      v238[0] = MEMORY[0x1E4FBC868];
      uint64_t v201 = v199 + 64;
      uint64_t v202 = 1 << *(unsigned char *)(v199 + 32);
      uint64_t v203 = -1;
      if (v202 < 64) {
        uint64_t v203 = ~(-1 << v202);
      }
      unint64_t v204 = v203 & *(void *)(v199 + 64);
      int64_t v205 = (unint64_t)(v202 + 63) >> 6;
      while (1)
      {
        if (v204)
        {
          unint64_t v206 = __clz(__rbit64(v204));
          v204 &= v204 - 1;
          unint64_t v207 = v206 | (v200 << 6);
        }
        else
        {
          int64_t v208 = v200 + 1;
          if (__OFADD__(v200, 1)) {
            goto LABEL_274;
          }
          if (v208 >= v205)
          {
LABEL_267:
            swift_release();
            uint64_t v216 = v238[0];
            if (*(void *)(v238[0] + 16))
            {
              swift_bridgeObjectRelease();
              v234[7] = v216;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            return;
          }
          unint64_t v209 = *(void *)(v201 + 8 * v208);
          ++v200;
          if (!v209)
          {
            int64_t v200 = v208 + 1;
            if (v208 + 1 >= v205) {
              goto LABEL_267;
            }
            unint64_t v209 = *(void *)(v201 + 8 * v200);
            if (!v209)
            {
              int64_t v200 = v208 + 2;
              if (v208 + 2 >= v205) {
                goto LABEL_267;
              }
              unint64_t v209 = *(void *)(v201 + 8 * v200);
              if (!v209)
              {
                int64_t v210 = v208 + 3;
                if (v210 >= v205) {
                  goto LABEL_267;
                }
                unint64_t v209 = *(void *)(v201 + 8 * v210);
                if (!v209)
                {
                  while (1)
                  {
                    int64_t v200 = v210 + 1;
                    if (__OFADD__(v210, 1)) {
                      break;
                    }
                    if (v200 >= v205) {
                      goto LABEL_267;
                    }
                    unint64_t v209 = *(void *)(v201 + 8 * v200);
                    ++v210;
                    if (v209) {
                      goto LABEL_264;
                    }
                  }
LABEL_278:
                  __break(1u);
LABEL_279:
                  __break(1u);
LABEL_280:
                  __break(1u);
LABEL_281:
                  __break(1u);
LABEL_282:
                  __break(1u);
                }
                int64_t v200 = v210;
              }
            }
          }
LABEL_264:
          unint64_t v204 = (v209 - 1) & v209;
          unint64_t v207 = __clz(__rbit64(v209)) + (v200 << 6);
        }
        uint64_t v211 = (uint64_t *)(*(void *)(v199 + 48) + 16 * v207);
        uint64_t v212 = *v211;
        char v213 = (void *)v211[1];
        uint64_t v214 = *(void *)(*(void *)(v199 + 56) + 8 * v207);
        swift_bridgeObjectRetain();
        v215._uint64_t countAndFlagsBits = v212;
        v215._unint64_t object = v213;
        Calendar.Identifier.init(identifierString:)(v215);
        if (v237 != 16) {
          specialized Dictionary.subscript.setter(v214, 0, v237);
        }
      }
    }
  }
}

CFTypeRef __CFLocalePrefsCopyCountry(const __CFDictionary *a1)
{
  id Value = CFDictionaryGetValue(a1, @"Country");
  if (!Value) {
    return 0;
  }
  CFDictionaryRef v2 = Value;
  CFTypeID v3 = CFGetTypeID(Value);
  if (v3 != CFStringGetTypeID()) {
    return 0;
  }

  return CFRetain(v2);
}

CFTypeRef __CFLocalePrefsCopyAppleMinDaysInFirstWeek(const __CFDictionary *a1)
{
  id Value = CFDictionaryGetValue(a1, @"AppleMinDaysInFirstWeek");
  if (!Value) {
    return 0;
  }
  CFDictionaryRef v2 = Value;
  CFTypeID v3 = CFGetTypeID(Value);
  if (v3 != CFDictionaryGetTypeID()) {
    return 0;
  }

  return CFRetain(v2);
}

CFTypeRef __CFLocalePrefsCopyAppleLocale(const __CFDictionary *a1)
{
  id Value = CFDictionaryGetValue(a1, @"AppleLocale");
  if (!Value) {
    return 0;
  }
  CFDictionaryRef v2 = Value;
  CFTypeID v3 = CFGetTypeID(Value);
  if (v3 != CFStringGetTypeID()) {
    return 0;
  }

  return CFRetain(v2);
}

__CFArray *__CFLocalePrefsCopyAppleLanguages(const __CFDictionary *a1)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, @"AppleLanguages");
  if (!Value) {
    return 0;
  }
  CFArrayRef v2 = Value;
  CFTypeID v3 = CFGetTypeID(Value);
  if (v3 != CFArrayGetTypeID()) {
    return 0;
  }
  uint64_t Count = CFArrayGetCount(v2);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], Count, MEMORY[0x1E4F1D510]);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndedouble x = CFArrayGetValueAtIndex(v2, i);
      CFTypeID v8 = CFGetTypeID(ValueAtIndex);
      if (v8 == CFStringGetTypeID()) {
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
  }
  return Mutable;
}

CFTypeRef __CFLocalePrefsCopyAppleICUTimeFormatStrings(const __CFDictionary *a1)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"AppleICUTimeFormatStrings");
  if (!Value) {
    return 0;
  }
  CFArrayRef v2 = Value;
  CFTypeID v3 = CFGetTypeID(Value);
  if (v3 != CFDictionaryGetTypeID()) {
    return 0;
  }

  return CFRetain(v2);
}

CFTypeRef __CFLocalePrefsCopyAppleICUNumberSymbols(const __CFDictionary *a1)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"AppleICUNumberSymbols");
  if (!Value) {
    return 0;
  }
  CFArrayRef v2 = Value;
  CFTypeID v3 = CFGetTypeID(Value);
  if (v3 != CFDictionaryGetTypeID()) {
    return 0;
  }

  return CFRetain(v2);
}

CFTypeRef __CFLocalePrefsCopyAppleICUNumberFormatStrings(const __CFDictionary *a1)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"AppleICUNumberFormatStrings");
  if (!Value) {
    return 0;
  }
  CFArrayRef v2 = Value;
  CFTypeID v3 = CFGetTypeID(Value);
  if (v3 != CFDictionaryGetTypeID()) {
    return 0;
  }

  return CFRetain(v2);
}

CFTypeRef __CFLocalePrefsCopyAppleICUDateTimeSymbols(const __CFDictionary *a1)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"AppleICUDateTimeSymbols");
  if (!Value) {
    return 0;
  }
  CFArrayRef v2 = Value;
  CFTypeID v3 = CFGetTypeID(Value);
  if (v3 != CFDictionaryGetTypeID()) {
    return 0;
  }

  return CFRetain(v2);
}

CFTypeRef __CFLocalePrefsCopyAppleICUDateFormatStrings(const __CFDictionary *a1)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"AppleICUDateFormatStrings");
  if (!Value) {
    return 0;
  }
  CFArrayRef v2 = Value;
  CFTypeID v3 = CFGetTypeID(Value);
  if (v3 != CFDictionaryGetTypeID()) {
    return 0;
  }

  return CFRetain(v2);
}

CFTypeRef __CFLocalePrefsCopyAppleFirstWeekday(const __CFDictionary *a1)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"AppleFirstWeekday");
  if (!Value) {
    return 0;
  }
  CFArrayRef v2 = Value;
  CFTypeID v3 = CFGetTypeID(Value);
  if (v3 != CFDictionaryGetTypeID()) {
    return 0;
  }

  return CFRetain(v2);
}

CFTypeRef __CFLocalePrefsCopyAppleCollationOrder(const __CFDictionary *a1)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"AppleCollationOrder");
  if (!Value) {
    return 0;
  }
  CFArrayRef v2 = Value;
  CFTypeID v3 = CFGetTypeID(Value);
  if (v3 != CFStringGetTypeID()) {
    return 0;
  }

  return CFRetain(v2);
}

uint64_t __CFLocalePrefsAppleTemperatureUnitIsC(const __CFDictionary *a1, char *a2)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"AppleTemperatureUnit");
  if (!Value) {
    goto LABEL_6;
  }
  uint64_t v4 = Value;
  if (!CFEqual(Value, (CFTypeRef)*MEMORY[0x1E4F1D230]))
  {
    if (CFEqual(v4, (CFTypeRef)*MEMORY[0x1E4F1D228]))
    {
      char v6 = 1;
      uint64_t result = 1;
      goto LABEL_7;
    }
LABEL_6:
    char v6 = 0;
    uint64_t result = 0;
    goto LABEL_7;
  }
  uint64_t result = 0;
  char v6 = 1;
LABEL_7:
  *a2 = v6;
  return result;
}

BOOL __CFLocalePrefsAppleMetricUnitsIsMetric(const __CFDictionary *a1, BOOL *a2)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"AppleMetricUnits");
  BOOL v4 = Value == (const void *)*MEMORY[0x1E4F1CFD0];
  BOOL v5 = Value == (const void *)*MEMORY[0x1E4F1CFC8] || Value == (const void *)*MEMORY[0x1E4F1CFD0];
  *a2 = v5;
  return v4;
}

uint64_t __CFLocalePrefsAppleMeasurementUnitsIsCm(const __CFDictionary *a1, char *a2)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"AppleMeasurementUnits");
  if (!Value) {
    goto LABEL_6;
  }
  BOOL v4 = Value;
  if (!CFEqual(Value, @"Inches"))
  {
    if (CFEqual(v4, @"Centimeters"))
    {
      char v6 = 1;
      uint64_t result = 1;
      goto LABEL_7;
    }
LABEL_6:
    char v6 = 0;
    uint64_t result = 0;
    goto LABEL_7;
  }
  uint64_t result = 0;
  char v6 = 1;
LABEL_7:
  *a2 = v6;
  return result;
}

BOOL __CFLocalePrefsAppleForce24HourTime(const __CFDictionary *a1, BOOL *a2)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"AppleICUForce24HourTime");
  BOOL v4 = Value == (const void *)*MEMORY[0x1E4F1CFD0];
  BOOL v5 = Value == (const void *)*MEMORY[0x1E4F1CFC8] || Value == (const void *)*MEMORY[0x1E4F1CFD0];
  *a2 = v5;
  return v4;
}

BOOL __CFLocalePrefsAppleForce12HourTime(const __CFDictionary *a1, BOOL *a2)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"AppleICUForce12HourTime");
  BOOL v4 = Value == (const void *)*MEMORY[0x1E4F1CFD0];
  BOOL v5 = Value == (const void *)*MEMORY[0x1E4F1CFC8] || Value == (const void *)*MEMORY[0x1E4F1CFD0];
  *a2 = v5;
  return v4;
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v14 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  uint64_t v4 = v14;
  if (!v2)
  {
    unint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v2) {
      return v4;
    }
LABEL_7:
    for (uint64_t i = 4; ; ++i)
    {
      uint64_t v6 = i - 4;
      if ((a1 & 0xC000000000000001) != 0)
      {
        MEMORY[0x185303120](i - 4, a1);
        uint64_t v7 = i - 3;
        if (__OFADD__(v6, 1)) {
          goto LABEL_22;
        }
      }
      else
      {
        swift_unknownObjectRetain();
        uint64_t v7 = i - 3;
        if (__OFADD__(v6, 1))
        {
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
      }
      if (!swift_dynamicCast())
      {
        swift_release();
        swift_bridgeObjectRelease();
        return 0;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1);
        uint64_t v4 = v14;
      }
      unint64_t v9 = *(void *)(v4 + 16);
      unint64_t v8 = *(void *)(v4 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        uint64_t v4 = v14;
      }
      *(void *)(v4 + 16) = v9 + 1;
      uint64_t v10 = v4 + 16 * v9;
      *(void *)(v10 + 32) = v12;
      *(void *)(v10 + 40) = v13;
      if (v7 == v2) {
        return v4;
      }
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v2) {
    goto LABEL_7;
  }
  return v4;
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance IndexSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.union(_:) in conformance IndexSet(a1, a2, a3, (void (*)(void))IndexSet.symmetricDifference(_:));
}

uint64_t IndexSet.formIntersection(_:)(void *a1)
{
  return IndexSet.formUnion(_:)(a1, (void (*)(uint64_t *__return_ptr, void *))IndexSet.intersection(_:));
}

IMP __coderAllocateClassForUnarchival_block_invoke()
{
  qword_1EB1ECD30 = (uint64_t)class_getMethodImplementation(MEMORY[0x1E4FBA8A8], sel_classForKeyedArchiver);
  qword_1EB1ECD38 = (uint64_t)class_getMethodImplementation(MEMORY[0x1E4FBA8A8], sel_classForArchiver);
  IMP result = class_getMethodImplementation(MEMORY[0x1E4FBA8A8], sel_classForCoder);
  qword_1EB1ECD40 = (uint64_t)result;
  return result;
}

void CharacterSet.formUnion(_:)(uint64_t *a1, void (*a2)(void *, uint64_t))
{
  uint64_t v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *unint64_t v2 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.formUnion(_:)(v4, a2);
}

void __CharacterSetStorage.formUnion(_:)(uint64_t a1, void (*a2)(void *, uint64_t))
{
  BOOL v5 = *(void **)(v2 + 16);
  if (*(unsigned char *)(v2 + 24))
  {
    uint64_t v6 = *(void *)(a1 + 16);
    a2(v5, v6);
  }
  else
  {
    CFCharacterSetRef v7 = v5;
    MutableCopdouble y = CFCharacterSetCreateMutableCopy(0, v7);
    if (MutableCopy)
    {
      CFMutableCharacterSetRef v9 = MutableCopy;
      id v10 = *(id *)(a1 + 16);
      a2(v9, (uint64_t)v10);

      uint64_t v11 = *(void **)(v2 + 16);
      *(void *)(v2 + 16) = v9;
      *(unsigned char *)(v2 + 24) = 1;
    }
    else
    {
      __break(1u);
    }
  }
}

void protocol witness for Scheduler.schedule(options:_:) in conformance NSRunLoop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  v9[4] = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
  v9[5] = v7;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  _OWORD v9[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v9[3] = &block_descriptor_34;
  unint64_t v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_performBlock_, v8);
  _Block_release(v8);
}

double static Date.timeIntervalBetween1970AndReferenceDate.getter()
{
  return 978307200.0;
}

uint64_t SortDescriptor.init<A>(_:order:)@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  char v3 = a1 & 1;
  *(unsigned char *)a2 = a1 & 1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = type metadata accessor for ComparableComparator();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  uint64_t v6 = swift_getWitnessTable();
  *(void *)(v5 + 24) = v6;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v4;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = partial apply for closure #2 in AnySortComparator.init<A>(_:);
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v4;
  *(void *)(v9 + 24) = v6;
  *(unsigned char *)(a2 + 24) = v3;
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = WitnessTable;
  *(void *)(a2 + 64) = partial apply for closure #1 in AnySortComparator.init<A>(_:);
  *(void *)(a2 + 72) = v5;
  *(void *)(a2 + 80) = _sSH_s8Sendablep10Foundation9SortOrderOs11AnyHashableVIeghlyr_SH_sAApADSH_sAApIeghlyr_TRTA_0;
  *(void *)(a2 + 88) = v8;
  *(void *)(a2 + 96) = partial apply for closure #3 in AnySortComparator.init<A>(_:);
  *(void *)(a2 + 104) = v9;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t result = swift_release();
  *(void *)(a2 + 112) = v12;
  *(unsigned char *)(a2 + 120) = 2;
  return result;
}

{
  char v3;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  char v3 = a1 & 1;
  *(unsigned char *)a2 = a1 & 1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  type metadata accessor for ComparableComparator();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for OptionalComparator();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  uint64_t v7 = swift_getWitnessTable();
  *(void *)(v6 + 24) = v7;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v4;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(v9 + 24) = v8;
  id v10 = swift_allocObject();
  *(void *)(v10 + 16) = v4;
  *(void *)(v10 + 24) = v7;
  *(unsigned char *)(a2 + 24) = v3;
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = WitnessTable;
  *(void *)(a2 + 64) = closure #1 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(a2 + 72) = v6;
  *(void *)(a2 + 80) = thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable)partial apply;
  *(void *)(a2 + 88) = v9;
  *(void *)(a2 + 96) = closure #3 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(a2 + 104) = v10;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t result = swift_release();
  *(void *)(a2 + 112) = v12;
  *(unsigned char *)(a2 + 120) = 2;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  Swift::String v9;
  Swift::String v10;

  uint64_t v4 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v5)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    uint64_t result = swift_release();
    *(void *)(a2 + 8) = v6;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)a2 = a1 & 1;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(unsigned char *)(a2 + 120) = 4;
  }
  else
  {
    _StringGuts.grow(_:)(111);
    swift_getMetatypeMetadata();
    v9._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._unint64_t object = (void *)0x80000001823B41B0;
    v10._uint64_t countAndFlagsBits = 0xD00000000000006DLL;
    String.append(_:)(v10);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ComparableComparator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for Collection.subscript.getter in conformance IndexSet@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 80) = *v2;
  long long v3 = a1[1];
  *(_OWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 16) = v3;
  long long v4 = a1[3];
  *(_OWORD *)(a2 + 32) = a1[2];
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = a1[4];
  return swift_retain();
}

unint64_t _NSProcessInfoGetPowerState()
{
  if (_NSProcessInfoGetPowerState_once != -1) {
    dispatch_once(&_NSProcessInfoGetPowerState_once, &__block_literal_global_161);
  }
  return atomic_load((unint64_t *)&_NSProcessInfoGetPowerState_powerState);
}

uint64_t PredicateExpressions.Comparison.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 64));
}

id NSString.init(stringLiteral:)(void *a1, uint64_t a2, char a3)
{
  unint64_t v3 = (unint64_t)a1;
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if ((a3 & 1) == 0)
  {
    if (!a1)
    {
      __break(1u);
      goto LABEL_15;
    }
    if ((a3 & 2) != 0) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = 4;
    }
    unint64_t v3 = (unint64_t)objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytesNoCopy_length_encoding_freeWhenDone_, a1, a2, v4, 0);
    if (v3) {
      goto LABEL_13;
    }
    __break(1u);
  }
  if (HIDWORD(v3))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v3 >> 11 == 27) {
    goto LABEL_17;
  }
  if (WORD1(v3) > 0x10u)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  int v7 = v3;
  id result = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, &v7, 4, 2348810496);
  if (result)
  {
    unint64_t v3 = (unint64_t)result;
LABEL_13:
    id v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithString_, v3);

    return v6;
  }
  __break(1u);
  return result;
}

uint64_t assignWithCopy for NSNotificationCenter.Publisher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  int v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t MeasurementFormatUnitUsage.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for AttributedString._InternalRun.Summary()
{
  return &type metadata for AttributedString._InternalRun.Summary;
}

uint64_t closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(const char *a1, void *a2, unint64_t a3, void *a4, char a5, void *a6, int a7, void *a8, unint64_t a9, void *a10)
{
  uint64_t v416 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v20 = objc_allocWithZone((Class)NSError);
    uint64_t v21 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v14 = objc_msgSend(v20, sel_initWithDomain_code_userInfo_, v21, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v10 = objc_msgSend(v14, sel_domain);
    id v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v24 = v23;

    if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v24 == v25)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
      {
        __break(1u);
        goto LABEL_13;
      }
    }
    return swift_willThrow();
  }
  id v14 = a4;
  unint64_t v13 = a3;
  uint64_t v11 = a2;
  uint64_t v12 = a1;
  uint64_t v268 = a8;
  __int16 v281 = 0;
  char v282 = 1;
  id v273 = a4;
  id v274 = a2;
  LODWORD(v272) = a5 & 1;
  uint64_t v270 = a6;
  LODWORD(v267) = a7;
  if ((a5 & 1) == 0)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v28 = (uint64_t)v11;
    uint64_t v29 = (const std::error_category *)v13;
    goto LABEL_36;
  }
  swift_retain_n();
  id v15 = v11;
  swift_retain_n();
  id v16 = v15;
  if (_foundation_swift_url_feature_enabled())
  {
    id v351 = v14;
    id v16 = v16;
    unint64_t v269 = v13;
    swift_retain();
    swift_retain();
    Swift::String v17 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v17._countAndFlagsBits;
    LODWORD(v10) = v17._object;
    Swift::String v350 = v17;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      unint64_t object = (unint64_t)v17._object;
    }
    else
    {
      unint64_t object = (unint64_t)v17._object;
      if ((specialized BidirectionalCollection.last.getter(v17._countAndFlagsBits, (unint64_t)v17._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v350._countAndFlagsBits;
        unint64_t object = (unint64_t)v350._object;
      }
    }
    v283._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v42 = specialized Set._Variant.insert(_:)(&v277, 0x2FuLL);
    uint64_t v43 = v283._countAndFlagsBits;
    uint64_t v44 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v44 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v44)
    {
      id v266 = v16;
      v283._uint64_t countAndFlagsBits = countAndFlagsBits;
      v283._unint64_t object = (void *)object;
      MEMORY[0x1F4188790](v42);
      uint64_t v261 = (uint64_t)&v283;
      uint64_t v262 = v43;
      swift_bridgeObjectRetain();
      uint64_t v45 = v271;
      unint64_t v46 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v260, countAndFlagsBits, object);
      uint64_t v271 = v45;
      if (v47 == (const std::error_category *)1)
      {
        Swift::String v48 = v283;
        swift_bridgeObjectRetain();
        uint64_t v28 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v48._countAndFlagsBits, (unint64_t)v48._object, v43);
        uint64_t v29 = v49;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v28 = (uint64_t)v46;
        uint64_t v29 = v47;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v14 = v273;
      uint64_t v11 = v274;
      id v16 = v266;
      if (!v29)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v13 = v269;
        outlined consume of PathOrURL(v11, v269, (uint64_t)v14, 1);
        outlined consume of PathOrURL(v11, v13, (uint64_t)v14, 1);
        swift_release();
        swift_release();

        uint64_t v28 = 0;
        uint64_t v29 = (const std::error_category *)0xE000000000000000;
        goto LABEL_35;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v28 = 0;
      uint64_t v29 = (const std::error_category *)0xE000000000000000;
      id v14 = v273;
      uint64_t v11 = v274;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v13 = v269;
    outlined consume of PathOrURL(v11, v269, (uint64_t)v14, 1);
    outlined consume of PathOrURL(v11, v13, (uint64_t)v14, 1);
    swift_release();
    swift_release();

LABEL_35:
    swift_release();
    swift_release();

    goto LABEL_36;
  }
  id v31 = objc_msgSend(v16, sel__parameterString);
  if (v31)
  {
    id v32 = v31;
    id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    uint64_t v34 = v33;

    if (!getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      || (id v35 = objc_msgSend(v16, sel_path)) == 0)
    {
      v350._uint64_t countAndFlagsBits = 59;
      v350._unint64_t object = (void *)0xE100000000000000;
      v50._uint64_t countAndFlagsBits = (uint64_t)v10;
      v50._unint64_t object = v34;
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      outlined consume of PathOrURL(v11, v13, (uint64_t)v14, 1);
      outlined consume of PathOrURL(v11, v13, (uint64_t)v14, 1);
      uint64_t v28 = 59;
      uint64_t v29 = (const std::error_category *)0xE100000000000000;
      goto LABEL_35;
    }
    uint64_t v36 = v35;
    id v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    unint64_t v39 = v38;

    v350._uint64_t countAndFlagsBits = (uint64_t)v37;
    v350._unint64_t object = v39;
    swift_bridgeObjectRetain();
    v40._uint64_t countAndFlagsBits = 59;
    v40._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v40);
    uint64_t v11 = v274;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v41._uint64_t countAndFlagsBits = (uint64_t)v10;
    v41._unint64_t object = v34;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    id v14 = v273;
    swift_bridgeObjectRelease();
    outlined consume of PathOrURL(v274, v13, (uint64_t)v273, 1);
    uint64_t v28 = v350._countAndFlagsBits;
    uint64_t v29 = (const std::error_category *)v350._object;
LABEL_29:
    outlined consume of PathOrURL(v11, v13, (uint64_t)v14, 1);
    goto LABEL_35;
  }
  id v51 = objc_msgSend(v16, sel_path);
  if (v51)
  {
    id v10 = v51;
    uint64_t v28 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    uint64_t v29 = v52;

    outlined consume of PathOrURL(v11, v13, (uint64_t)v14, 1);
    goto LABEL_29;
  }
  outlined consume of PathOrURL(v11, v13, (uint64_t)v14, 1);
  outlined consume of PathOrURL(v11, v13, (uint64_t)v14, 1);
  swift_release();
  swift_release();

  uint64_t v28 = 0;
  uint64_t v29 = (const std::error_category *)0xE000000000000000;
LABEL_36:
  *(void *)&v280.__val_ = v28;
  v280.__cat_ = v29;
  bzero(&v350, 0x418uLL);
  int v277 = 5;
  long long v278 = xmmword_1821F6530;
  int v279 = 0;
  if (!getattrlist(v12, &v277, &v350, 0x418uLL, 1u))
  {
    if (LODWORD(v350._object) >= 0x10000)
    {
      LODWORD(v261) = 0;
      v260[1] = 3455;
      LOBYTE(v260[0]) = 2;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_209;
    }
    __int16 v281 = (__int16)v350._object;
    char v282 = 0;
    if (HIDWORD(v350._countAndFlagsBits) == 1 && HIDWORD(v351) <= 1)
    {
      Swift::String v283 = v352;
      long long v284 = v353;
      long long v285 = v354;
      long long v286 = v355;
      long long v287 = v356;
      long long v288 = v357;
      long long v289 = v358;
      long long v290 = v359;
      long long v291 = v360;
      long long v292 = v361;
      long long v293 = v362;
      long long v294 = v363;
      long long v295 = v364;
      long long v296 = v365;
      long long v297 = v366;
      long long v298 = v367;
      long long v299 = v368;
      long long v300 = v369;
      long long v301 = v370;
      long long v302 = v371;
      long long v303 = v372;
      long long v304 = v373;
      long long v305 = v374;
      long long v306 = v375;
      long long v307 = v376;
      long long v308 = v377;
      long long v309 = v378;
      long long v310 = v379;
      long long v311 = v380;
      long long v312 = v381;
      long long v313 = v382;
      long long v314 = v383;
      long long v315 = v384;
      long long v316 = v385;
      long long v317 = v386;
      long long v318 = v387;
      long long v319 = v388;
      long long v320 = v389;
      long long v321 = v390;
      long long v322 = v391;
      long long v323 = v392;
      long long v324 = v393;
      long long v325 = v394;
      long long v326 = v395;
      long long v327 = v396;
      long long v328 = v397;
      long long v329 = v398;
      long long v330 = v399;
      long long v331 = v400;
      long long v332 = v401;
      long long v333 = v402;
      long long v334 = v403;
      long long v335 = v404;
      long long v336 = v405;
      long long v337 = v406;
      long long v338 = v407;
      long long v339 = v408;
      long long v340 = v409;
      long long v341 = v410;
      long long v342 = v411;
      long long v343 = v412;
      long long v344 = v413;
      long long v345 = v414;
      long long v346 = v415;
      uint64_t v55 = String.init(cString:)();
      char v57 = v56;
      swift_bridgeObjectRelease();
      *(void *)&v280.__val_ = v55;
      v280.__cat_ = v57;
    }
LABEL_46:
    uint64_t v58 = *(void *)&v280.__val_;
    cat = v280.__cat_;
    swift_bridgeObjectRetain();
    getpid();
    if (_foundation_sandbox_check())
    {
      URL.init(fileURLWithPath:isDirectory:)(v58, (unint64_t)cat, 0, (uint64_t)&v283);
      id v266 = v283._object;
      BOOL v60 = (void *)v283._countAndFlagsBits;
      uint64_t v61 = v284;
      id v62 = objc_msgSend(self, sel_defaultManager);
      v283._uint64_t countAndFlagsBits = 0;
      id v265 = v60;
      id v63 = objc_msgSend(v62, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v60, 1, &v283);

      uint64_t v64 = (void *)v283._countAndFlagsBits;
      if (!v63)
      {
        if (v283._countAndFlagsBits)
        {
          id v91 = (id)v283._countAndFlagsBits;
        }
        else
        {
          if (one-time initialization token for _nilObjCError != -1) {
            swift_once();
          }
          id v91 = (id)_nilObjCError;
          id v114 = (id)_nilObjCError;
        }
        swift_willThrow();
        v283._uint64_t countAndFlagsBits = (uint64_t)v91;
        id v115 = v91;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if (swift_dynamicCast())
        {
          uint64_t v263 = v61;
          unint64_t v116 = (void *)v347._countAndFlagsBits;
          id v274 = objc_msgSend((id)v347._countAndFlagsBits, sel_code);
          id v117 = v116;
          uint64_t v118 = specialized _BridgedStoredNSError.errorUserInfo.getter(v117);
          id v273 = v117;

          v347._uint64_t countAndFlagsBits = v118;
          id v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSUserStringVariant");
          *((void *)&v284 + 1) = MEMORY[0x1E4FBB1A0];
          v283._uint64_t countAndFlagsBits = 0x7265646C6F46;
          v283._unint64_t object = (void *)0xE600000000000000;
          specialized Dictionary.subscript.setter((uint64_t)&v283, (uint64_t)v119, v120);
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v121 = objc_allocWithZone((Class)NSError);
          uint64_t v122 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v123 = objc_msgSend(v121, sel_initWithDomain_code_userInfo_, v122, v274, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v124 = objc_msgSend(v123, sel_domain);
          id v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v124);
          uint64_t v127 = v126;

          if (v125 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
            && v127 == v128)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v129 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v129 & 1) == 0)
            {
              __break(1u);
              __break(1u);
LABEL_204:
              __break(1u);
              goto LABEL_205;
            }
          }
          swift_willThrow();

          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        swift_willThrow();
        swift_bridgeObjectRelease();

        swift_release();
        goto LABEL_77;
      }
      uint64_t v263 = v61;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v63, (uint64_t)&v283);
      id v65 = v64;

      id v66 = v14;
      uint64_t v67 = (void *)v283._countAndFlagsBits;
      Swift::String v347 = v283;
      uint64_t v348 = v284;
      Swift::String v68 = URL.path(percentEncoded:)(0);
      unint64_t v269 = v13;

      swift_release();
      swift_release();
      Swift::String v275 = v68;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t Path = String._lastPathComponent.getter(v58, (unint64_t)cat);
      unint64_t v71 = v70;
      long long v264 = cat;
      uint64_t v72 = v66;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v73 = String._appendingPathComponent(_:)(Path, v71, v68._countAndFlagsBits, (unint64_t)v68._object);
      unint64_t v74 = v274;
      unint64_t v76 = v75;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v77 = v269;
      char v78 = v272;
      outlined copy of PathOrURL(v74, v269, (uint64_t)v72, v272);
      swift_bridgeObjectRetain();
      uint64_t v79 = v73;
      uint64_t v80 = v271;
      uint64_t v81 = v73;
      uint64_t v82 = v77;
      specialized String.withFileSystemRepresentation<A>(_:)(v79, v76, (uint64_t)v270, v81, v76, &v275._countAndFlagsBits, (uint64_t)v74, v77, &v283, v72, v78, 0x7265646C6F46, 0xE600000000000000);
      if (v80)
      {
        outlined consume of PathOrURL(v74, v77, (uint64_t)v72, v78);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
LABEL_77:
        swift_release();
        return swift_bridgeObjectRelease();
      }
      char v92 = v78;
      int v93 = v283._countAndFlagsBits;
      uint64_t v271 = (uint64_t)v283._object;
      uint64_t v94 = v82;
      uint64_t v96 = *((void *)&v284 + 1);
      unint64_t v95 = v284;
      Swift::String v97 = v74;
      id v98 = (void *)v285;
      outlined consume of PathOrURL(v97, v94, (uint64_t)v72, v92);
      cat = v264;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
    }
    else
    {
      BOOL v83 = v272 != 0;
      swift_bridgeObjectRetain();
      uint64_t v84 = String._deletingLastPathComponent()(v58, (unint64_t)cat);
      unint64_t v86 = v85;
      swift_bridgeObjectRelease();
      v283._uint64_t countAndFlagsBits = (uint64_t)v11;
      v283._unint64_t object = (void *)v13;
      *(void *)&long long v284 = v14;
      BYTE8(v284) = v83;
      uint64_t v87 = v271;
      int v88 = createTemporaryFile(at:inPath:prefix:options:variant:)(v84, v86, (uint64_t)&v283, (char *)0x736F6E2E7461642ELL, (void *)0xEB00000000636E79, v270, 0x7265646C6F46, 0xE600000000000000);
      if (v87)
      {
        swift_bridgeObjectRelease();
LABEL_200:
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      int v93 = v88;
      unint64_t v95 = v90;
      uint64_t v271 = v89;
      unint64_t v269 = v13;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v96 = 0;
      id v98 = 0;
    }
    int v276 = v93;
    v349[0] = v96;
    v349[1] = (uint64_t)v98;
    if ((v93 & 0x80000000) == 0)
    {
      id v265 = v98;
      unint64_t v99 = a9;
      long long v264 = cat;
      if (v267)
      {
        uint64_t v100 = self;
        id v101 = objc_msgSend(v100, sel_currentProgress);

        if (v101)
        {
          uint64_t v102 = (uint64_t)v268;
          if (v268) {
            unint64_t v103 = a9 - (void)v268;
          }
          else {
            unint64_t v103 = 0;
          }
          id v104 = objc_msgSend(v100, sel_progressWithTotalUnitCount_, v103);
          unint64_t v99 = a9;
          uint64_t v105 = v102;
          id v106 = v104;
          uint64_t v107 = v269;
          Swift::String v108 = v274;
        }
        else
        {
          id v106 = 0;
          uint64_t v105 = (uint64_t)v268;
          uint64_t v107 = v269;
          Swift::String v108 = v274;
          unint64_t v99 = a9;
        }
      }
      else
      {
        id v106 = 0;
        uint64_t v105 = (uint64_t)v268;
        uint64_t v107 = v269;
        Swift::String v108 = v274;
      }
      uint64_t v131 = v272;
      v283._uint64_t countAndFlagsBits = (uint64_t)v108;
      v283._unint64_t object = (void *)v107;
      uint64_t v132 = (uint64_t)v273;
      *(void *)&long long v284 = v273;
      BYTE8(v284) = v272 != 0;
      id v267 = v106;
      write(buffer:toFileDescriptor:path:parentProgress:)(v105, v99, v93, (uint64_t)&v283, v106);
      id v266 = 0;
      writeExtendedAttributes(fd:attributes:)(v93, (uint64_t)a10);
      outlined copy of PathOrURL(v108, v107, v132, v131);
      swift_bridgeObjectRetain();
      specialized String.withFileSystemRepresentation<A>(_:)(v271, v95, &v280, v108, v107, v132, v131, v270, v349, v268, v99, a10, &v281, &v276);
      swift_bridgeObjectRelease();

      close(v93);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v109 = swift_bridgeObjectRelease();
    LODWORD(v10) = MEMORY[0x185301870](v109);
    swift_bridgeObjectRetain();
    cleanupTemporaryDirectory(at:)(v96, (unint64_t)v98);
    swift_bridgeObjectRelease();
    uint64_t v110 = v269;
    uint64_t v111 = v274;
    if (!v272)
    {
      uint64_t v130 = 4;
      switch((int)v10)
      {
        case 1:
        case 13:
          uint64_t v130 = 513;
          goto LABEL_193;
        case 2:
          goto LABEL_193;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_150;
        case 17:
          uint64_t v130 = 516;
          goto LABEL_193;
        case 28:
        case 69:
          uint64_t v130 = 640;
          goto LABEL_193;
        case 30:
          uint64_t v130 = 642;
          goto LABEL_193;
        case 63:
          uint64_t v130 = 514;
          goto LABEL_193;
        default:
          if (v10 == 102)
          {
            id v198 = 0;
            uint64_t v130 = 512;
          }
          else
          {
LABEL_150:
            uint64_t v130 = 512;
LABEL_193:
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
              goto LABEL_209;
            }
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            uint64_t v250 = (int)POSIXErrorCode.rawValue.getter();
            id v251 = objc_allocWithZone((Class)NSError);
            uint64_t v252 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v198 = objc_msgSend(v251, sel_initWithDomain_code_userInfo_, v252, v250, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v253 = objc_msgSend(v198, sel_domain);
            id v254 = static String._unconditionallyBridgeFromObjectiveC(_:)(v253);
            uint64_t v256 = v255;

            if (v254 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v256 == v257)
            {
              swift_bridgeObjectRelease_n();
              uint64_t v111 = v274;
            }
            else
            {
              char v258 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v111 = v274;
              if ((v258 & 1) == 0) {
                goto LABEL_207;
              }
            }
          }
          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v130, (uint64_t)v111, v110, v198, 0, 0, 0, 0, &v283, 0, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
            (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
            (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
            (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
          break;
      }
      goto LABEL_199;
    }
    uint64_t v112 = 4;
    switch((int)v10)
    {
      case 1:
      case 13:
        uint64_t v112 = 513;
        goto LABEL_154;
      case 2:
        goto LABEL_154;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_149;
      case 17:
        uint64_t v112 = 516;
        goto LABEL_154;
      case 28:
      case 69:
        uint64_t v112 = 640;
        goto LABEL_154;
      case 30:
        uint64_t v112 = 642;
        goto LABEL_154;
      case 63:
        uint64_t v112 = 514;
        goto LABEL_154;
      default:
        if (v10 == 102)
        {
          swift_retain_n();
          id v195 = v111;
          swift_retain_n();
          id v196 = v195;
          id v197 = 0;
          uint64_t v112 = 512;
        }
        else
        {
LABEL_149:
          uint64_t v112 = 512;
LABEL_154:
          swift_retain_n();
          id v199 = v111;
          swift_retain_n();
          id v200 = v199;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_209;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v201 = (int)POSIXErrorCode.rawValue.getter();
          id v202 = objc_allocWithZone((Class)NSError);
          uint64_t v203 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v197 = objc_msgSend(v202, sel_initWithDomain_code_userInfo_, v203, v201, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v204 = objc_msgSend(v197, sel_domain);
          id v205 = static String._unconditionallyBridgeFromObjectiveC(_:)(v204);
          uint64_t v207 = v206;

          if (v205 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
            && v207 == v208)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v209 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v209 & 1) == 0)
            {
LABEL_206:
              __break(1u);
LABEL_207:
              __break(1u);
              __break(1u);
              __break(1u);
              __break(1u);
            }
          }
        }
        id v210 = v274;
        swift_retain();
        id v211 = v273;
        swift_retain();
        int v212 = _foundation_swift_url_feature_enabled();
        uint64_t v272 = v112;
        if (!v212)
        {
          id v224 = objc_msgSend(v210, sel__parameterString);
          if (v224)
          {
            uint64_t v225 = v224;
            id v226 = static String._unconditionallyBridgeFromObjectiveC(_:)(v224);
            int64_t v228 = v227;

            if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
              && (id v229 = objc_msgSend(v210, sel_path)) != 0)
            {
              char v230 = v229;
              id v231 = static String._unconditionallyBridgeFromObjectiveC(_:)(v229);
              unint64_t v233 = v232;

              v283._uint64_t countAndFlagsBits = (uint64_t)v231;
              v283._unint64_t object = v233;
              swift_bridgeObjectRetain();
              v234._uint64_t countAndFlagsBits = 59;
              v234._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v234);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v235._uint64_t countAndFlagsBits = (uint64_t)v226;
              v235._unint64_t object = v228;
              String.append(_:)(v235);
              swift_bridgeObjectRelease();
            }
            else
            {
              v283._uint64_t countAndFlagsBits = 59;
              v283._unint64_t object = (void *)0xE100000000000000;
              v236._uint64_t countAndFlagsBits = (uint64_t)v226;
              v236._unint64_t object = v228;
              String.append(_:)(v236);
            }
            swift_bridgeObjectRelease();
            uint64_t v238 = (uint64_t)v273;
            unsigned __int8 v237 = v274;
            outlined consume of PathOrURL(v274, v110, (uint64_t)v273, 1);
          }
          else
          {
            id v239 = objc_msgSend(v210, sel_path);
            if (v239)
            {
              long long v240 = v239;
              static String._unconditionallyBridgeFromObjectiveC(_:)(v239);
            }
            uint64_t v238 = (uint64_t)v273;
            unsigned __int8 v237 = v274;
            outlined consume of PathOrURL(v274, v110, (uint64_t)v273, 1);
          }
          goto LABEL_183;
        }
        v283._uint64_t countAndFlagsBits = (uint64_t)v210;
        v283._unint64_t object = (void *)v110;
        *(void *)&long long v284 = v211;
        id v213 = v210;
        swift_retain();
        swift_retain();
        Swift::String v214 = URL.path(percentEncoded:)(1);
        Swift::String v283 = v214;
        swift_bridgeObjectRetain();
        if (String.count.getter() > 1
          && (specialized BidirectionalCollection.last.getter(v214._countAndFlagsBits, (unint64_t)v214._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
        }
        v347._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
        uint64_t v215 = specialized Set._Variant.insert(_:)(&v275, 0x2FuLL);
        uint64_t v216 = v347._countAndFlagsBits;
        Swift::String v217 = v283;
        uint64_t v218 = ((unint64_t)v283._object >> 56) & 0xF;
        if (((uint64_t)v283._object & 0x2000000000000000) == 0) {
          uint64_t v218 = v283._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }
        if (v218)
        {
          Swift::String v347 = v283;
          MEMORY[0x1F4188790](v215);
          uint64_t v261 = v219;
          uint64_t v262 = v216;
          swift_bridgeObjectRetain();
          specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v260, v217._countAndFlagsBits, (unint64_t)v217._object);
          if (v220 == 1)
          {
            Swift::String v221 = v347;
            swift_bridgeObjectRetain();
            specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v221._countAndFlagsBits, (unint64_t)v221._object, v216);
            uint64_t v223 = v222;
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v223 = v220;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v110 = v269;
          if (!v223)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v244 = (uint64_t)v273;
            uint64_t v243 = v274;
            outlined consume of PathOrURL(v274, v110, (uint64_t)v273, 1);
            outlined consume of PathOrURL(v243, v110, v244, 1);
            goto LABEL_182;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v110 = v269;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v242 = (uint64_t)v273;
        uint64_t v241 = v274;
        outlined consume of PathOrURL(v274, v110, (uint64_t)v273, 1);
        outlined consume of PathOrURL(v241, v110, v242, 1);
LABEL_182:
        uint64_t v238 = (uint64_t)v273;
        unsigned __int8 v237 = v274;
LABEL_183:
        uint64_t v245 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v246 = v210;
        outlined consume of PathOrURL(v237, v110, v238, 1);
        if (v197)
        {
          v283._uint64_t countAndFlagsBits = (uint64_t)v197;
          lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
          id v197 = v197;
          if (_getErrorEmbeddedNSError<A>(_:)())
          {
          }
          else
          {
            swift_allocError();
            *unsigned __int8 v249 = v197;
          }
          uint64_t v248 = v272;
          uint64_t v247 = (void *)_swift_stdlib_bridgeErrorToNSError();
        }
        else
        {
          uint64_t v247 = 0;
          uint64_t v248 = v272;
        }
        objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v248, v245, v246, v247, 0, 0, 0);

        swift_unknownObjectRelease();
        outlined consume of PathOrURL(v274, v110, (uint64_t)v273, 1);
LABEL_199:
        swift_willThrow();
        goto LABEL_200;
    }
  }
  if (MEMORY[0x185301870]() == 2 || MEMORY[0x185301870]() == 63) {
    goto LABEL_46;
  }
  int v53 = MEMORY[0x185301870]();
  LODWORD(v10) = v53;
  if (v272)
  {
    uint64_t v54 = 4;
    switch(v53)
    {
      case 1:
      case 13:
        uint64_t v54 = 513;
        goto LABEL_98;
      case 2:
        goto LABEL_98;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_91;
      case 17:
        uint64_t v54 = 516;
        goto LABEL_98;
      case 28:
      case 69:
        uint64_t v54 = 640;
        goto LABEL_98;
      case 30:
        uint64_t v54 = 642;
        goto LABEL_98;
      case 63:
        uint64_t v54 = 514;
        goto LABEL_98;
      default:
        if (v53 == 102)
        {
          swift_retain_n();
          id v133 = v11;
          swift_retain_n();
          id v134 = v133;
          id v135 = 0;
          uint64_t v54 = 512;
          goto LABEL_104;
        }
LABEL_91:
        uint64_t v54 = 512;
LABEL_98:
        swift_retain_n();
        id v137 = v11;
        swift_retain_n();
        id v138 = v137;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
          goto LABEL_209;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v139 = (int)POSIXErrorCode.rawValue.getter();
        id v140 = objc_allocWithZone((Class)NSError);
        uint64_t v141 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v135 = objc_msgSend(v140, sel_initWithDomain_code_userInfo_, v141, v139, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v142 = objc_msgSend(v135, sel_domain);
        id v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v142);
        uint64_t v145 = v144;

        if (v143 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v145 == v146)
        {
          swift_bridgeObjectRelease_n();
LABEL_103:
          id v14 = v273;
LABEL_104:
          id v148 = v274;
          swift_retain();
          swift_retain();
          int v149 = _foundation_swift_url_feature_enabled();
          uint64_t v272 = v54;
          if (!v149)
          {
            id v160 = objc_msgSend(v148, sel__parameterString);
            if (v160)
            {
              uint64_t v161 = v160;
              id v162 = static String._unconditionallyBridgeFromObjectiveC(_:)(v160);
              unsigned __int8 v164 = v163;

              if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                && (id v165 = objc_msgSend(v148, sel_path)) != 0)
              {
                Swift::String v166 = v165;
                id v167 = static String._unconditionallyBridgeFromObjectiveC(_:)(v165);
                unint64_t v169 = v168;

                v283._uint64_t countAndFlagsBits = (uint64_t)v167;
                v283._unint64_t object = v169;
                swift_bridgeObjectRetain();
                v170._uint64_t countAndFlagsBits = 59;
                v170._unint64_t object = (void *)0xE100000000000000;
                String.append(_:)(v170);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                v171._uint64_t countAndFlagsBits = (uint64_t)v162;
                v171._unint64_t object = v164;
                String.append(_:)(v171);
                swift_bridgeObjectRelease();
              }
              else
              {
                v283._uint64_t countAndFlagsBits = 59;
                v283._unint64_t object = (void *)0xE100000000000000;
                v172._uint64_t countAndFlagsBits = (uint64_t)v162;
                v172._unint64_t object = v164;
                String.append(_:)(v172);
              }
              swift_bridgeObjectRelease();
              uint64_t v174 = (uint64_t)v273;
              unint64_t v173 = v274;
              outlined consume of PathOrURL(v274, v13, (uint64_t)v273, 1);
            }
            else
            {
              id v175 = objc_msgSend(v148, sel_path);
              if (v175)
              {
                uint64_t v176 = v175;
                static String._unconditionallyBridgeFromObjectiveC(_:)(v175);
                uint64_t v174 = (uint64_t)v14;

                unint64_t v173 = v274;
                outlined consume of PathOrURL(v274, v13, (uint64_t)v14, 1);
              }
              else
              {
                unint64_t v173 = v274;
                outlined consume of PathOrURL(v274, v13, (uint64_t)v14, 1);
                uint64_t v174 = (uint64_t)v14;
              }
            }
            goto LABEL_127;
          }
          v283._uint64_t countAndFlagsBits = (uint64_t)v148;
          v283._unint64_t object = (void *)v13;
          *(void *)&long long v284 = v14;
          id v150 = v148;
          unint64_t v269 = v13;
          swift_retain();
          swift_retain();
          Swift::String v151 = URL.path(percentEncoded:)(1);
          Swift::String v283 = v151;
          swift_bridgeObjectRetain();
          if (String.count.getter() > 1
            && (specialized BidirectionalCollection.last.getter(v151._countAndFlagsBits, (unint64_t)v151._object) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
          }
          v347._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
          uint64_t v152 = specialized Set._Variant.insert(_:)(&v275, 0x2FuLL);
          uint64_t v153 = v347._countAndFlagsBits;
          Swift::String v154 = v283;
          uint64_t v155 = ((unint64_t)v283._object >> 56) & 0xF;
          if (((uint64_t)v283._object & 0x2000000000000000) == 0) {
            uint64_t v155 = v283._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (v155)
          {
            Swift::String v347 = v283;
            MEMORY[0x1F4188790](v152);
            uint64_t v261 = (uint64_t)&v347;
            uint64_t v262 = v153;
            swift_bridgeObjectRetain();
            specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)v260, v154._countAndFlagsBits, (unint64_t)v154._object);
            if (v156 == 1)
            {
              Swift::String v157 = v347;
              swift_bridgeObjectRetain();
              specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v157._countAndFlagsBits, (unint64_t)v157._object, v153);
              uint64_t v159 = v158;
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v159 = v156;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v13 = v269;
            if (!v159)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v180 = (uint64_t)v273;
              uint64_t v179 = v274;
              outlined consume of PathOrURL(v274, v13, (uint64_t)v273, 1);
              outlined consume of PathOrURL(v179, v13, v180, 1);
              goto LABEL_126;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            unint64_t v13 = v269;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v178 = (uint64_t)v273;
          char v177 = v274;
          outlined consume of PathOrURL(v274, v13, (uint64_t)v273, 1);
          outlined consume of PathOrURL(v177, v13, v178, 1);
LABEL_126:
          uint64_t v174 = (uint64_t)v273;
          unint64_t v173 = v274;
LABEL_127:
          uint64_t v181 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v182 = v148;
          outlined consume of PathOrURL(v173, v13, v174, 1);
          if (v135)
          {
            v283._uint64_t countAndFlagsBits = (uint64_t)v135;
            lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
            id v135 = v135;
            if (_getErrorEmbeddedNSError<A>(_:)())
            {
            }
            else
            {
              swift_allocError();
              void *v185 = v135;
            }
            uint64_t v184 = v272;
            uint64_t v183 = (void *)_swift_stdlib_bridgeErrorToNSError();
          }
          else
          {
            uint64_t v183 = 0;
            uint64_t v184 = v272;
          }
          objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v184, v181, v182, v183, 0, 0, 0);

          swift_unknownObjectRelease();
          outlined consume of PathOrURL(v274, v13, (uint64_t)v273, 1);
          swift_willThrow();
          return swift_bridgeObjectRelease();
        }
        char v147 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v147) {
          goto LABEL_103;
        }
        break;
    }
    goto LABEL_204;
  }
  uint64_t v113 = 4;
  switch(v53)
  {
    case 1:
    case 13:
      uint64_t v113 = 513;
      goto LABEL_137;
    case 2:
      goto LABEL_137;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      goto LABEL_92;
    case 17:
      uint64_t v113 = 516;
      goto LABEL_137;
    case 28:
    case 69:
      uint64_t v113 = 640;
      goto LABEL_137;
    case 30:
      uint64_t v113 = 642;
      goto LABEL_137;
    case 63:
      uint64_t v113 = 514;
      goto LABEL_137;
    default:
      if (v53 == 102)
      {
        id v136 = 0;
        uint64_t v113 = 512;
LABEL_143:
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v113, (uint64_t)v11, v13, v136, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))v349, 0, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
          (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
          (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
          (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
        swift_willThrow();
        return swift_bridgeObjectRelease();
      }
LABEL_92:
      uint64_t v113 = 512;
LABEL_137:
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v186 = (int)POSIXErrorCode.rawValue.getter();
        id v187 = objc_allocWithZone((Class)NSError);
        uint64_t v188 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v136 = objc_msgSend(v187, sel_initWithDomain_code_userInfo_, v188, v186, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v189 = objc_msgSend(v136, sel_domain);
        id v190 = static String._unconditionallyBridgeFromObjectiveC(_:)(v189);
        uint64_t v192 = v191;

        if (v190 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v192 == v193)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v194 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v194 & 1) == 0)
          {
LABEL_205:
            __break(1u);
            goto LABEL_206;
          }
        }
        uint64_t v11 = v274;
        goto LABEL_143;
      }
      break;
  }
LABEL_209:
  v283._uint64_t countAndFlagsBits = 0;
  v283._unint64_t object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v283._uint64_t countAndFlagsBits = 0xD000000000000014;
  v283._unint64_t object = (void *)0x80000001823A9780;
  LODWORD(v347._countAndFlagsBits) = v10;
  v259._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v259);
  swift_bridgeObjectRelease();
  LODWORD(v262) = 0;
  uint64_t v261 = 73;
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void static URL._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    URL.init(reference:)(a1, &v4);
    long long v3 = v5;
    *(void *)a2 = v4;
    *(_OWORD *)(a2 + 8) = v3;
  }
  else
  {
    __break(1u);
  }
}

uint64_t outlined copy of PathOrURL(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    swift_retain();
    id v5 = a1;
    return swift_retain();
  }
  else
  {
    return swift_bridgeObjectRetain();
  }
}

unint64_t String._lastPathComponent.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    goto LABEL_17;
  }
  unint64_t v4 = String.index(before:)();
  if (String.subscript.getter() != 47 || v5 != 0xE100000000000000)
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_19;
    }
    while (v4 >= 0x4000)
    {
      unint64_t v4 = String.index(before:)();
      if (String.subscript.getter() == 47 && v8 == 0xE100000000000000) {
        goto LABEL_18;
      }
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v10) {
        goto LABEL_19;
      }
    }
LABEL_17:
    swift_bridgeObjectRetain();
    return v2;
  }
LABEL_18:
  swift_bridgeObjectRelease();
LABEL_19:
  unint64_t v11 = 4 * v3;
  if (!(v4 >> 14))
  {
    if (String.count.getter() == 1) {
      return 47;
    }
    if (v11 >= (unint64_t)String.index(after:)() >> 14)
    {
LABEL_29:
      uint64_t v16 = String.subscript.getter();
      uint64_t v2 = MEMORY[0x185301F50](v16);
LABEL_30:
      swift_bridgeObjectRelease();
      return v2;
    }
    __break(1u);
  }
  if ((String.index(before:)() ^ v4) >> 14)
  {
    if (v11 >= (unint64_t)String.index(after:)() >> 14) {
      goto LABEL_29;
    }
    __break(1u);
    return 47;
  }
  unint64_t v12 = (unint64_t)String.subscript.getter() >> 14;
  if (v12 == v13 >> 14)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    return 47;
  }
  unint64_t v14 = Substring.index(before:)();
  if (Substring.subscript.getter() == 47 && v15 == 0xE100000000000000) {
    goto LABEL_35;
  }
LABEL_36:
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v18)
  {
    while (v12 != v14 >> 14)
    {
      unint64_t v14 = Substring.index(before:)();
      if (Substring.subscript.getter() != 47 || v19 != 0xE100000000000000) {
        goto LABEL_36;
      }
LABEL_35:
      swift_bridgeObjectRelease();
    }
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  unint64_t v21 = (unint64_t)String.subscript.getter() >> 14;
  if (v21 == v22 >> 14)
  {
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.index(after:)();
LABEL_58:
    uint64_t v28 = String.subscript.getter();
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    uint64_t v2 = MEMORY[0x185301F50](v28, v30, v32, v34);
    goto LABEL_30;
  }
  unint64_t v23 = Substring.index(before:)();
  if (Substring.subscript.getter() == 47 && v24 == 0xE100000000000000)
  {
LABEL_47:
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v35 = v21;
    while (1)
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v25) {
        break;
      }
      if (v35 == v23 >> 14) {
        goto LABEL_44;
      }
      unint64_t v23 = Substring.index(before:)();
      if (Substring.subscript.getter() == 47 && v26 == 0xE100000000000000) {
        goto LABEL_47;
      }
    }
  }
  swift_bridgeObjectRelease();
  unint64_t result = String.index(after:)();
  if (v14 >> 14 >= result >> 14)
  {
    swift_bridgeObjectRetain();
    String.index(after:)();
    goto LABEL_58;
  }
  __break(1u);
  return result;
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = _foundation_swift_url_feature_enabled();
  if (!v6)
  {
    id v12 = objc_msgSend(v3, sel__cfurl);
    unint64_t v13 = (void *)_CFURLCopyPath();
    if (v13)
    {
      unint64_t v14 = v13;
      uint64_t countAndFlagsBits = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      unint64_t object = v15;

      goto LABEL_24;
    }

    goto LABEL_11;
  }
  if (!v5)
  {
    if (percentEncoded)
    {
      if (v4)
      {
        if (*(unsigned char *)(v4 + 168)) {
          uint64_t v16 = MEMORY[0x185302C80](0, 0xE000000000000000);
        }
        else {
          uint64_t v16 = String.subscript.getter();
        }
        uint64_t countAndFlagsBits = MEMORY[0x185301F50](v16);
        unint64_t object = v21;
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (!v4) {
      goto LABEL_26;
    }
    if (*(unsigned char *)(v4 + 168)) {
      uint64_t v17 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else {
      uint64_t v17 = String.subscript.getter();
    }
    unint64_t v22 = v17;
    unint64_t v23 = v18;
    unint64_t v24 = v19;
    unint64_t v25 = v20;
    unint64_t v35 = (void *)v17;
    unint64_t v36 = v18;
    unint64_t v37 = v19;
    unint64_t v38 = v20;
    if ((v17 ^ v18) >> 14)
    {
      MEMORY[0x1F4188790](v17);
      v34[2] = &v35;
      void v34[3] = MEMORY[0x1E4FBC870];
      swift_bridgeObjectRetain();
      uint64_t v26 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5((void *(*)(void *__return_ptr, void, void))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v34, v22, v23, v24, v25);
      if (v27 == (void *)1)
      {
        unint64_t v28 = (unint64_t)v35;
        unint64_t v29 = v36;
        unint64_t v30 = v37;
        unint64_t v31 = v38;
        swift_bridgeObjectRetain();
        uint64_t countAndFlagsBits = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v28, v29, v30, v31, MEMORY[0x1E4FBC870]);
        unint64_t object = v32;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t countAndFlagsBits = (uint64_t)v26;
        unint64_t object = v27;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (object) {
        goto LABEL_24;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_11:
    uint64_t countAndFlagsBits = 0;
    unint64_t object = (void *)0xE000000000000000;
    goto LABEL_24;
  }
  URL.absoluteURL.getter(&v35);
  uint64_t v8 = v35;
  v34[4] = v35;
  v34[5] = v36;
  v34[6] = v37;
  Swift::String v9 = URL.path(percentEncoded:)(percentEncoded);
  uint64_t countAndFlagsBits = v9._countAndFlagsBits;
  unint64_t object = v9._object;

  swift_release();
  swift_release();
LABEL_24:
  uint64_t v6 = countAndFlagsBits;
  char v7 = object;
LABEL_27:
  result._unint64_t object = v7;
  result._uint64_t countAndFlagsBits = v6;
  return result;
}

void URL.init(fileURLWithPath:isDirectory:)(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    BOOL v15 = (a3 & 1) == 0;
    memset(v14, 0, sizeof(v14));
    swift_bridgeObjectRetain();
    URL.init(filePath:directoryHint:relativeTo:)(a1, a2, (unsigned __int8 *)&v15, (uint64_t)v14, &v16);
    uint64_t v8 = v16;
    long long v9 = v17;
  }
  else
  {
    uint64_t v10 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v10) {
      swift_bridgeObjectRetain();
    }
    id v11 = objc_allocWithZone(MEMORY[0x1E4F1CB10]);
    uint64_t v12 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend(v11, sel_initFileURLWithPath_isDirectory_, v12, a3 & 1);
    swift_unknownObjectRelease();
    uint64_t v8 = static URL._converted(from:)(v13);

    long long v9 = 0uLL;
  }
  *(void *)a4 = v8;
  *(_OWORD *)(a4 + 8) = v9;
}

uint64_t _foundation_sandbox_check()
{
  return sandbox_check();
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, _DWORD *a9@<X8>, void *a10, char a11, uint64_t a12, uint64_t a13)
{
  uint64_t v64 = a3;
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v23 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v23 < -1)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  uint64_t v61 = a4;
  id v62 = a6;
  uint64_t v63 = a7;
  uint64_t v65 = a5;
  id v60 = a10;
  char v24 = a11 & 1;
  uint64_t v25 = v23 + 1;
  if (v23 >= 1024)
  {
    Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v59 = v13;
      uint64_t v44 = (char *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v44, v25, 1, a1, a2);
      char v46 = v45;
      swift_bridgeObjectRelease();
      if (v46)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v49 = objc_allocWithZone((Class)NSError);
        uint64_t v50 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v51 = objc_msgSend(v49, sel_initWithDomain_code_userInfo_, v50, 514, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v52 = objc_msgSend(v51, sel_domain);
        id v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
        uint64_t v55 = v54;

        if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v55 == v56)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v57 & 1) == 0) {
            goto LABEL_33;
          }
        }
        swift_willThrow();
      }
      else
      {
        closure #1 in createProtectedTemporaryFile(at:inPath:options:variant:)(v44, v64, v61, v65, v62, v63, a8, v60, (uint64_t)&v71, v24, a12, a13);
        if (!v59)
        {
          uint64_t v58 = a9;
          MEMORY[0x185309510](v44, -1, -1);
          uint64_t result = swift_bridgeObjectRelease();
          int v30 = v71;
          uint64_t v31 = v72;
          uint64_t v32 = v73;
          uint64_t v33 = v74;
          uint64_t v34 = v75;
          goto LABEL_18;
        }
      }
      MEMORY[0x185309510](v44, -1, -1);
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v58 = a9;
  uint64_t v59 = &v58;
  MEMORY[0x1F4188790](isStackAllocationSafe);
  char v27 = (char *)&v58 - v26;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v27, v25, 1, a1, a2);
  char v29 = v28;
  swift_bridgeObjectRelease();
  if ((v29 & 1) == 0)
  {
    closure #1 in createProtectedTemporaryFile(at:inPath:options:variant:)(v27, v64, v61, v65, v62, v63, a8, v60, (uint64_t)&v66, v24, a12, a13);
    if (!v13)
    {
      int v30 = v66;
      uint64_t v31 = v67;
      uint64_t v32 = v68;
      uint64_t v33 = v69;
      uint64_t v34 = v70;
      uint64_t result = swift_bridgeObjectRelease();
LABEL_18:
      uint64_t v47 = v58;
      _DWORD *v58 = v30;
      v47[1] = v31;
      v47[2] = v32;
      v47[3] = v33;
      v47[4] = v34;
      return result;
    }
    goto LABEL_21;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v36 = objc_allocWithZone((Class)NSError);
  uint64_t v37 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v38 = objc_msgSend(v36, sel_initWithDomain_code_userInfo_, v37, 514, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v39 = objc_msgSend(v38, sel_domain);
  id v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
  uint64_t v42 = v41;

  if (v40 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v42 != v43)
  {
    char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v48) {
      goto LABEL_20;
    }
    goto LABEL_32;
  }
  swift_bridgeObjectRelease_n();
LABEL_20:
  swift_willThrow();
LABEL_21:
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)(uint64_t a1, unint64_t a2, std::error_code *a3, void *a4, unint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t *a9, void *a10, unint64_t a11, void *a12, void *a13, int *a14)
{
  BOOL v15 = v14;
  unint64_t cat = a2;
  uint64_t v23 = a1;
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v25 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_80;
  }
  if (v25 < -1)
  {
LABEL_80:
    __break(1u);
LABEL_81:
    Swift::Int v30 = String.UTF8View._foreignCount()();
    goto LABEL_14;
  }
  id v135 = a8;
  id v136 = v14;
  uint64_t v141 = a4;
  unsigned int v138 = a7 & 1;
  a4 = a13;
  BOOL v15 = a14;
  unint64_t v139 = a5;
  id v140 = a12;
  a8 = a10;
  uint64_t v26 = v25 + 1;
  unint64_t v133 = a11;
  id v134 = a9;
  if (v25 >= 1024)
  {
    Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      id v51 = (std::__fs::filesystem::path *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      id v137 = v51;
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v51, v26, 1, v23, cat);
      char v53 = v52;
      swift_bridgeObjectRelease();
      if (v53)
      {
        uint64_t v74 = a6;
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v75 = objc_allocWithZone((Class)NSError);
        uint64_t v76 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v77 = objc_msgSend(v75, sel_initWithDomain_code_userInfo_, v76, 514, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v78 = objc_msgSend(v77, sel_domain);
        id v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
        uint64_t v81 = v80;

        if (v79 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v81 == v82)
        {
          swift_bridgeObjectRelease_n();
          a6 = v74;
          uint64_t v64 = v137;
        }
        else
        {
          char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a6 = v74;
          uint64_t v64 = v137;
          if ((v92 & 1) == 0)
          {
LABEL_89:
            __break(1u);
            goto LABEL_90;
          }
        }
        swift_willThrow();
        uint64_t v40 = v139;
        id v39 = v141;
        char v41 = v138;
LABEL_76:
        MEMORY[0x185309510](v64, -1, -1);
        goto LABEL_77;
      }
      a7 = *(void *)&a3->__val_;
      unint64_t cat = (unint64_t)a3->__cat_;
      if ((cat & 0x1000000000000000) == 0)
      {
        if ((cat & 0x2000000000000000) != 0) {
          uint64_t v54 = HIBYTE(cat) & 0xF;
        }
        else {
          uint64_t v54 = a7 & 0xFFFFFFFFFFFFLL;
        }
LABEL_29:
        uint64_t v55 = 3 * v54;
        if ((unsigned __int128)(v54 * (__int128)3) >> 64 != (3 * v54) >> 63)
        {
          __break(1u);
LABEL_87:
          __break(1u);
          goto LABEL_88;
        }
        if (v55 < -1)
        {
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }
        uint64_t v56 = v55 + 1;
        outlined copy of PathOrURL(v141, v139, a6, v138);
        swift_bridgeObjectRetain();
        uint64_t v57 = swift_bridgeObjectRetain();
        if (v55 >= 1024)
        {
          uint64_t v57 = swift_stdlib_isStackAllocationSafe();
          if ((v57 & 1) == 0)
          {
            uint64_t v110 = swift_slowAlloc();
            swift_bridgeObjectRetain();
            String._decomposed(_:into:nullTerminated:)(1, v110, v56, 1, a7, cat);
            char v112 = v111;
            swift_bridgeObjectRelease();
            if (v112)
            {
              uint64_t v115 = v110;
              uint64_t v118 = a6;
              static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
              id v119 = objc_allocWithZone((Class)NSError);
              uint64_t v120 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v121 = objc_msgSend(v119, sel_initWithDomain_code_userInfo_, v120, 514, _NativeDictionary.bridged()());
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              id v122 = objc_msgSend(v121, sel_domain);
              id v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
              uint64_t v125 = v124;

              if (v123 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
                && v125 == v126)
              {
                swift_bridgeObjectRelease_n();
                uint64_t v64 = v137;
              }
              else
              {
                char v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v64 = v137;
                if ((v127 & 1) == 0) {
                  goto LABEL_92;
                }
              }
              swift_willThrow();
              a6 = v118;
              uint64_t v40 = v139;
              id v39 = v141;
              char v41 = v138;
            }
            else
            {
              uint64_t v130 = (uint64_t)a8;
              uint64_t v113 = (std::__fs::filesystem::path *)v110;
              uint64_t v64 = v137;
              id v114 = a3;
              id v39 = v141;
              uint64_t v40 = v139;
              uint64_t v115 = v110;
              char v41 = v138;
              closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v113, v137, v114, v141, v139, a6, v138, v135, v134, v130, v133, v140, (uint64_t)a4, v15);
            }
            MEMORY[0x185309510](v115, -1, -1);
            goto LABEL_75;
          }
        }
        uint64_t v131 = (uint64_t)&v131;
        MEMORY[0x1F4188790](v57);
        uint64_t v59 = (std::__fs::filesystem::path *)((char *)&v131 - v58);
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v59, v56, 1, a7, cat);
        char v61 = v60;
        swift_bridgeObjectRelease();
        if (v61)
        {
          uint64_t v93 = a6;
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
          id v94 = objc_allocWithZone((Class)NSError);
          uint64_t v95 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v96 = objc_msgSend(v94, sel_initWithDomain_code_userInfo_, v95, 514, _NativeDictionary.bridged()(), v131);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v97 = objc_msgSend(v96, sel_domain);
          id v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
          uint64_t v100 = v99;

          if (v98 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
            && v100 == v101)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v64 = v137;
          }
          else
          {
            char v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v64 = v137;
            if ((v116 & 1) == 0)
            {
LABEL_90:
              __break(1u);
              goto LABEL_91;
            }
          }
          swift_willThrow();
          a6 = v93;
          uint64_t v40 = v139;
          id v39 = v141;
          char v41 = v138;
        }
        else
        {
          uint64_t v129 = (uint64_t)a8;
          id v62 = v59;
          uint64_t v63 = v136;
          uint64_t v64 = v137;
          id v39 = v141;
          uint64_t v40 = v139;
          char v41 = v138;
          closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v62, v137, a3, v141, v139, a6, v138, v135, v134, v129, v133, v140, (uint64_t)a4, v15);
          if (!v63) {
            goto LABEL_75;
          }
        }
        swift_willThrow();
LABEL_75:
        outlined consume of PathOrURL(v39, v40, a6, v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_76;
      }
LABEL_85:
      uint64_t v54 = String.UTF8View._foreignCount()();
      goto LABEL_29;
    }
  }
  id v137 = (std::__fs::filesystem::path *)&v131;
  MEMORY[0x1F4188790](isStackAllocationSafe);
  a7 = (uint64_t)&v131 - v27;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, a7, v26, 1, v23, cat);
  char v29 = v28;
  swift_bridgeObjectRelease();
  if (v29)
  {
    a4 = (void *)a6;
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v43 = objc_allocWithZone((Class)NSError);
    uint64_t v44 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    BOOL v15 = (int *)objc_msgSend(v43, sel_initWithDomain_code_userInfo_, v44, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v45 = objc_msgSend(v15, sel_domain);
    id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    uint64_t v48 = v47;

    id v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    a7 = v50;
    if (v46 == v49 && v48 == v50)
    {
      swift_bridgeObjectRelease_n();
      a6 = (uint64_t)a4;
    }
    else
    {
      char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a6 = (uint64_t)a4;
      if ((v65 & 1) == 0)
      {
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
    }
    swift_willThrow();
    uint64_t v40 = v139;
    id v39 = v141;
    char v41 = v138;
LABEL_68:
    swift_willThrow();
    goto LABEL_77;
  }
  uint64_t v23 = *(void *)&a3->__val_;
  unint64_t cat = (unint64_t)a3->__cat_;
  uint64_t v132 = a6;
  if ((cat & 0x1000000000000000) != 0) {
    goto LABEL_81;
  }
  if ((cat & 0x2000000000000000) != 0) {
    Swift::Int v30 = HIBYTE(cat) & 0xF;
  }
  else {
    Swift::Int v30 = v23 & 0xFFFFFFFFFFFFLL;
  }
LABEL_14:
  a6 = 3 * v30;
  if ((unsigned __int128)(v30 * (__int128)3) >> 64 != (3 * v30) >> 63)
  {
    __break(1u);
    goto LABEL_83;
  }
  if (a6 < -1)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  uint64_t v31 = a6 + 1;
  outlined copy of PathOrURL(v141, v139, v132, v138);
  swift_bridgeObjectRetain();
  uint64_t v32 = swift_bridgeObjectRetain();
  if (a6 < 1024 || (uint64_t v32 = swift_stdlib_isStackAllocationSafe(), (v32 & 1) != 0))
  {
    uint64_t v131 = (uint64_t)&v131;
    MEMORY[0x1F4188790](v32);
    uint64_t v34 = (std::__fs::filesystem::path *)((char *)&v131 - v33);
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v34, v31, 1, v23, cat);
    char v36 = v35;
    swift_bridgeObjectRelease();
    if ((v36 & 1) == 0)
    {
      uint64_t v37 = v34;
      id v38 = (std::__fs::filesystem::path *)a7;
      id v39 = v141;
      uint64_t v40 = v139;
      a6 = v132;
      char v41 = v138;
      uint64_t v42 = v136;
      closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v37, v38, a3, v141, v139, v132, v138, v135, v134, (uint64_t)a8, v133, v140, (uint64_t)a4, v15);
      if (!v42) {
        goto LABEL_47;
      }
      goto LABEL_50;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v66 = objc_allocWithZone((Class)NSError);
    uint64_t v67 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v68 = objc_msgSend(v66, sel_initWithDomain_code_userInfo_, v67, 514, _NativeDictionary.bridged()(), v131);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v69 = objc_msgSend(v68, sel_domain);
    id v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
    uint64_t v72 = v71;

    if (v70 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v72 == v73)
    {
      swift_bridgeObjectRelease_n();
      a6 = v132;
      id v39 = v141;
LABEL_49:
      swift_willThrow();
      uint64_t v40 = v139;
      char v41 = v138;
LABEL_50:
      swift_willThrow();
LABEL_67:
      outlined consume of PathOrURL(v39, v40, a6, v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_68;
    }
    char v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a6 = v132;
    id v39 = v141;
    if (v91) {
      goto LABEL_49;
    }
    goto LABEL_87;
  }
  uint64_t v83 = swift_slowAlloc();
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, v83, v31, 1, v23, cat);
  char v85 = v84;
  swift_bridgeObjectRelease();
  if (v85)
  {
    uint64_t v89 = v83;
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v102 = objc_allocWithZone((Class)NSError);
    uint64_t v103 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v104 = objc_msgSend(v102, sel_initWithDomain_code_userInfo_, v103, 514, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v105 = objc_msgSend(v104, sel_domain);
    id v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
    uint64_t v108 = v107;

    if (v106 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v108 == v109)
    {
      swift_bridgeObjectRelease_n();
      id v39 = v141;
    }
    else
    {
      char v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v39 = v141;
      if ((v117 & 1) == 0)
      {
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
      }
    }
    swift_willThrow();
    a6 = v132;
    uint64_t v40 = v139;
    char v41 = v138;
LABEL_66:
    MEMORY[0x185309510](v89, -1, -1);
    goto LABEL_67;
  }
  unint64_t v86 = (std::__fs::filesystem::path *)v83;
  uint64_t v87 = (std::__fs::filesystem::path *)a7;
  int v88 = a3;
  id v39 = v141;
  uint64_t v40 = v139;
  uint64_t v89 = v83;
  a6 = v132;
  char v41 = v138;
  unint64_t v90 = v136;
  closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(v86, v87, v88, v141, v139, v132, v138, v135, v134, (uint64_t)a8, v133, v140, (uint64_t)a4, v15);
  if (v90) {
    goto LABEL_66;
  }
  MEMORY[0x185309510](v89, -1, -1);
LABEL_47:
  outlined consume of PathOrURL(v39, v40, a6, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_77:
  outlined consume of PathOrURL(v39, v40, a6, v41);
  return swift_bridgeObjectRelease();
}

uint64_t writeExtendedAttributes(fd:attributes:)(int a1, uint64_t a2)
{
  uint64_t v2 = a2;
  value[2] = *MEMORY[0x1E4F143B8];
  uint64_t v36 = a2 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a2 + 64);
  int64_t v37 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v11 = v10 | (v8 << 6);
      goto LABEL_23;
    }
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v12 >= v37) {
      return swift_release();
    }
    unint64_t v6 = *(void *)(v36 + 8 * v12);
    ++v8;
    if (!v6)
    {
      int64_t v8 = v12 + 1;
      if (v12 + 1 >= v37) {
        return swift_release();
      }
      unint64_t v6 = *(void *)(v36 + 8 * v8);
      if (!v6)
      {
        int64_t v8 = v12 + 2;
        if (v12 + 2 >= v37) {
          return swift_release();
        }
        unint64_t v6 = *(void *)(v36 + 8 * v8);
        if (!v6) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v6 - 1) & v6;
    unint64_t v11 = __clz(__rbit64(v6)) + (v8 << 6);
LABEL_23:
    uint64_t v7 = *(void *)(v2 + 56);
    unint64_t v14 = (uint64_t *)(v7 + 16 * v11);
    uint64_t v16 = *v14;
    unint64_t v15 = v14[1];
    switch(v15 >> 62)
    {
      case 1uLL:
        unint64_t v6 = (int)v16;
        if (v16 >> 32 < (int)v16) {
          goto LABEL_41;
        }
        uint64_t v7 = v15 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v18 = *(void *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v18) {
          goto LABEL_45;
        }
        uint64_t v19 = *(void *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        unint64_t v6 = (int)v16 - v19;
        if (__OFSUB__((int)v16, v19)) {
          goto LABEL_43;
        }
        unint64_t v20 = (const void *)(v18 + v6);
        if (*(void *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= (v16 >> 32) - (int)v16) {
          size_t v21 = (v16 >> 32) - (int)v16;
        }
        else {
          size_t v21 = *(void *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        }
        int64_t v22 = v8;
        uint64_t v23 = String.utf8CString.getter() + 32;
        outlined copy of Data._Representation(v16, v15);
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v16, v15);
        char v24 = (const char *)v23;
        int64_t v8 = v22;
        fsetxattr(a1, v24, v20, v21, 0, 0);
        swift_release();
        outlined consume of Data._Representation(v16, v15);
        break;
      case 2uLL:
        unint64_t v6 = *(void *)(v16 + 16);
        uint64_t v7 = *(void *)(v16 + 24);
        uint64_t v25 = *(void *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v25) {
          goto LABEL_46;
        }
        uint64_t v26 = *(void *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v27 = __OFSUB__(v6, v26);
        uint64_t v28 = v6 - v26;
        if (v27) {
          goto LABEL_42;
        }
        BOOL v27 = __OFSUB__(v7, v6);
        int64_t v29 = v7 - v6;
        if (v27) {
          goto LABEL_48;
        }
        Swift::Int v30 = (const void *)(v25 + v28);
        if (*(void *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v29) {
          size_t v31 = v29;
        }
        else {
          size_t v31 = *(void *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        }
        uint64_t v32 = v2;
        uint64_t v33 = String.utf8CString.getter() + 32;
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v16, v15);
        swift_retain();
        swift_retain();
        uint64_t v34 = (const char *)v33;
        uint64_t v2 = v32;
        fsetxattr(a1, v34, v30, v31, 0, 0);
        swift_release();
        swift_release();
LABEL_5:
        swift_release();
        break;
      case 3uLL:
        memset(value, 0, 14);
        long long v9 = (const char *)(String.utf8CString.getter() + 32);
        swift_bridgeObjectRetain();
        fsetxattr(a1, v9, value, 0, 0, 0);
        goto LABEL_5;
      default:
        value[0] = *v14;
        LOWORD(value[1]) = v15;
        BYTE2(value[1]) = BYTE2(v15);
        BYTE3(value[1]) = BYTE3(v15);
        BYTE4(value[1]) = BYTE4(v15);
        BYTE5(value[1]) = BYTE5(v15);
        long long v17 = (const char *)(String.utf8CString.getter() + 32);
        swift_bridgeObjectRetain();
        fsetxattr(a1, v17, value, BYTE6(v15), 0, 0);
        goto LABEL_5;
    }
    outlined consume of Data._Representation(v16, v15);
    swift_bridgeObjectRelease();
  }
  int64_t v13 = v12 + 3;
  if (v13 < v37)
  {
    unint64_t v6 = *(void *)(v36 + 8 * v13);
    if (!v6)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          break;
        }
        if (v8 >= v37) {
          return swift_release();
        }
        unint64_t v6 = *(void *)(v36 + 8 * v8);
        ++v13;
        if (v6) {
          goto LABEL_22;
        }
      }
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      if (!__OFSUB__(v7, v6)) {
        __break(1u);
      }
LABEL_48:
      __break(1u);
    }
    int64_t v8 = v13;
    goto LABEL_22;
  }
  return swift_release();
}

uint64_t String._deletingLastPathComponent()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  unint64_t v3 = String.index(before:)();
  if (String.subscript.getter() != 47 || v4 != 0xE100000000000000)
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_18;
    }
    if (v3 < 0x4000) {
      return 0;
    }
    while (1)
    {
      unint64_t v3 = String.index(before:)();
      if (String.subscript.getter() == 47 && v7 == 0xE100000000000000) {
        break;
      }
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v9) {
        goto LABEL_18;
      }
      uint64_t v10 = 0;
      if (v3 < 0x4000) {
        return v10;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_18:
  if (v3 >= 0x4000)
  {
    unint64_t v11 = String.index(before:)() ^ v3;
    unint64_t v12 = String.subscript.getter();
    if (v11 >> 14)
    {
      uint64_t v10 = MEMORY[0x185301F50](v12, v13, v14, v15);
    }
    else
    {
      unint64_t v16 = v12 >> 14;
      if (v12 >> 14 == v13 >> 14)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        return 0;
      }
      unint64_t v17 = Substring.index(before:)();
      if (Substring.subscript.getter() == 47 && v18 == 0xE100000000000000)
      {
LABEL_27:
        swift_bridgeObjectRelease();
      }
      else
      {
        while (1)
        {
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v19) {
            break;
          }
          if (v16 == v17 >> 14) {
            goto LABEL_22;
          }
          unint64_t v17 = Substring.index(before:)();
          if (Substring.subscript.getter() == 47 && v20 == 0xE100000000000000) {
            goto LABEL_27;
          }
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v22 = String.subscript.getter();
      uint64_t v10 = MEMORY[0x185301F50](v22);
    }
    swift_bridgeObjectRelease();
    return v10;
  }
  return 47;
}

Swift::UInt64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSFileHandle.seekToEnd()()
{
  return (Swift::UInt64)NSFileHandle.offset()((SEL *)&selRef_seekToEndReturningOffset_error_);
}

void *NSFileHandle.offset()(SEL *a1)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  id v5 = 0;
  v6[0] = 0;
  if (objc_msgSend(v1, *a1, v6, &v5))
  {
    uint64_t v1 = (void *)v6[0];
    id v2 = v5;
  }
  else
  {
    if (v5)
    {
      v5;
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v3 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v1;
}

void *__cdecl NSAllocateCollectable(NSUInteger size, NSUInteger options)
{
  char v2 = options;
  uint64_t v4 = malloc_default_zone();
  if (v2)
  {
    return malloc_type_zone_calloc(v4, 1uLL, size, 0xCC510C36uLL);
  }
  else
  {
    return malloc_type_zone_malloc(v4, size, 0xC5D73FE6uLL);
  }
}

uint64_t instantiation function for generic protocol witness table for _CalendarGregorian(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type _CalendarGregorian and conformance _CalendarGregorian(&lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t URLComponents.init(string:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(a1, a2, 1, (uint64_t)v10);
  outlined init with take of LocalePreferences?((uint64_t)v10, (uint64_t)v11, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v11) == 1)
  {
    _s10Foundation13URLComponentsV01_B0VSgWOi0_((uint64_t)v8);
  }
  else
  {
    v8[6] = v11[6];
    v8[7] = v11[7];
    v9[0] = v12[0];
    *(_OWORD *)((char *)v9 + 10) = *(_OWORD *)((char *)v12 + 10);
    uint64_t v8[2] = v11[2];
    v8[3] = v11[3];
    v8[4] = v11[4];
    v8[5] = v11[5];
    v8[0] = v11[0];
    v8[1] = v11[1];
    destructiveProjectEnumData for PredicateCodableError(v8, v6);
  }
  return outlined init with take of LocalePreferences?((uint64_t)v8, a3, &demangling cache variable for type metadata for URLComponents?);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.LanguageCode()
{
  return Hasher._finalize()();
}

uint64_t URLResourceValues.isExcludedFromBackup.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E4F1C630], a1);
}

uint64_t destroy for _CodingKey(uint64_t a1)
{
  return outlined consume of _CodingKey(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DateComponents()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  int v5 = *((unsigned __int8 *)v0 + 40);
  Swift::UInt v13 = v0[4];
  Swift::UInt v14 = v0[6];
  int v28 = *((unsigned __int8 *)v0 + 56);
  int v29 = *((unsigned __int8 *)v0 + 72);
  Swift::UInt v15 = v0[8];
  Swift::UInt v16 = v0[10];
  Swift::UInt v27 = v0[12];
  int v6 = *((unsigned __int8 *)v0 + 104);
  int v30 = *((unsigned __int8 *)v0 + 88);
  int v31 = *((unsigned __int8 *)v0 + 120);
  Swift::UInt v17 = v0[14];
  Swift::UInt v18 = v0[16];
  int v32 = *((unsigned __int8 *)v0 + 136);
  int v33 = *((unsigned __int8 *)v0 + 152);
  Swift::UInt v19 = v0[18];
  Swift::UInt v20 = v0[20];
  int v34 = *((unsigned __int8 *)v0 + 168);
  int v35 = *((unsigned __int8 *)v0 + 184);
  Swift::UInt v21 = v0[22];
  Swift::UInt v22 = v0[24];
  int v36 = *((unsigned __int8 *)v0 + 200);
  int v37 = *((unsigned __int8 *)v0 + 216);
  Swift::UInt v23 = v0[26];
  Swift::UInt v24 = v0[30];
  int v38 = *((unsigned __int8 *)v0 + 248);
  int v39 = *((unsigned __int8 *)v0 + 264);
  int v40 = *((unsigned __int8 *)v0 + 280);
  Swift::UInt v25 = v0[32];
  Swift::UInt v26 = v0[34];
  int v41 = *((unsigned __int8 *)v0 + 281);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1u);
    uint64_t ObjectType = swift_getObjectType();
    int64_t v8 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v1 + 120);
    swift_unknownObjectRetain();
    v8(v42, ObjectType, v1);
    swift_unknownObjectRelease();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v3)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      uint64_t v9 = swift_getObjectType();
      uint64_t v10 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 112);
      swift_unknownObjectRetain();
      v10(v42, v9, v4);
      swift_unknownObjectRelease();
      if (v5) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  Hasher._combine(_:)(0);
  if (v5)
  {
LABEL_4:
    Hasher._combine(_:)(0);
    if (!v28) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v13);
  if (!v28)
  {
LABEL_5:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
    if (!v29) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(0);
  if (!v29)
  {
LABEL_6:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
    if (!v30) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(0);
  if (!v30)
  {
LABEL_7:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
    if (!v31) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(0);
  if (!v31)
  {
LABEL_8:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17);
    if (!v32) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(0);
  if (!v32)
  {
LABEL_9:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
    if (!v33) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  Hasher._combine(_:)(0);
  if (!v33)
  {
LABEL_10:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
    if (!v34) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(0);
  if (!v34)
  {
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
    if (!v35) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(0);
  if (!v35)
  {
LABEL_12:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
    if (!v36) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  Hasher._combine(_:)(0);
  if (!v36)
  {
LABEL_13:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v22);
    if (!v37) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  Hasher._combine(_:)(0);
  if (!v37)
  {
LABEL_14:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v23);
    if (!v38) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (!v38)
  {
LABEL_15:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
    if (!v39) {
      goto LABEL_16;
    }
LABEL_32:
    Hasher._combine(_:)(0);
    if (!v40) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_31:
  Hasher._combine(_:)(0);
  if (v39) {
    goto LABEL_32;
  }
LABEL_16:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v25);
  if (!v40)
  {
LABEL_17:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v26);
    goto LABEL_34;
  }
LABEL_33:
  Hasher._combine(_:)(0);
LABEL_34:
  if (v41 == 2)
  {
    Swift::UInt8 v11 = 0;
  }
  else
  {
    Swift::UInt8 v11 = v41 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  if (v6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v27);
  }
  return Hasher._finalize()();
}

void NSProgress.fileCompletedCount.setter(uint64_t a1, char a2)
{
}

id NSProgress.fileCompletedCount.getter()
{
  return NSProgress.throughput.getter((SEL *)&selRef_fileCompletedCount);
}

void NSProgress.fileTotalCount.setter(uint64_t a1, char a2)
{
}

id NSProgress.fileTotalCount.getter()
{
  return NSProgress.throughput.getter((SEL *)&selRef_fileTotalCount);
}

uint64_t one-time initialization function for standardConfiguration()
{
  return closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration((uint64_t)&static PredicateCodableConfiguration.standardConfiguration);
}

uint64_t protocol witness for Encoder.userInfo.getter in conformance __JSONEncoder()
{
  return swift_bridgeObjectRetain();
}

uint64_t type metadata completion function for PredicateExpressions.NilCoalesce()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JSONEncoder.NonConformingFloatEncodingStrategy()
{
  return &type metadata for JSONEncoder.NonConformingFloatEncodingStrategy;
}

ValueMetadata *type metadata accessor for JSONEncoder.DataEncodingStrategy()
{
  return &type metadata for JSONEncoder.DataEncodingStrategy;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <A> PredicateExpressions.Value<A>(void *a1)
{
  return PredicateExpressions.Value<A>.encode(to:)(a1);
}

uint64_t PredicateExpressions.Value<A>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

NSNumber __swiftcall UInt._bridgeToObjectiveC()()
{
  uint64_t v1 = v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return (NSNumber)objc_msgSend(v2, sel_initWithUnsignedInteger_, v1);
}

char *IndexSet.index(after:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  BOOL v5 = __OFADD__(*a1, 1);
  uint64_t result = (char *)(*a1 + 1);
  if (v5)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  int64_t v8 = (char *)a1[1];
  uint64_t v7 = (char *)a1[2];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  if (result != v7) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (__OFADD__(v9, 1)) {
    goto LABEL_16;
  }
  uint64_t result = (char *)a1[2];
  if (v11 == v10) {
    goto LABEL_14;
  }
  unint64_t v12 = *(void **)(*(void *)v2 + 16);
  char v13 = *(unsigned char *)(*(void *)v2 + 24);
  uint64_t result = (char *)objc_msgSend(v12, sel_rangeAtIndex_, v9 + 1);
  uint64_t v7 = &result[v14];
  BOOL v15 = __OFADD__(result, v14);
  if (v13)
  {
    if (!v15)
    {
      int64_t v8 = result;
      uint64_t v9 = v11;
      if ((uint64_t)v7 < (uint64_t)result)
      {
        __break(1u);
        goto LABEL_12;
      }
LABEL_14:
      *a2 = result;
      a2[1] = v8;
      a2[2] = v7;
      a2[3] = v9;
      a2[4] = v10;
      return result;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_12:
  if (v15)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  int64_t v8 = result;
  uint64_t v9 = v11;
  if ((uint64_t)v7 >= (uint64_t)result) {
    goto LABEL_14;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t NSData.subscript.getter(uint64_t a1)
{
  unsigned __int8 v11 = 0;
  uint64_t v10 = a1;
  uint64_t v3 = (void *)swift_allocObject();
  void v3[2] = &v10;
  v3[3] = a1;
  v3[4] = &v11;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for closure #1 in NSData.subscript.getter;
  *(void *)(v4 + 24) = v3;
  v9[4] = thunk for @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  v9[5] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  _OWORD v9[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v9[3] = &block_descriptor_13_0;
  BOOL v5 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v1, sel_enumerateByteRangesUsingBlock_, v5);
  _Block_release(v5);
  isEscapingClosureAtFileLocatiouint64_t n = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = v11;
    swift_release();
    return v8;
  }
  return result;
}

id NSArray.init(arrayLiteral:)()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v1 = objc_msgSend(v0, sel_initWithArray_, _ContiguousArrayBuffer._asCocoaArray()());
  swift_unknownObjectRelease();
  return v1;
}

void protocol witness for Hashable.hash(into:) in conformance DateInterval()
{
  Swift::UInt64 v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *v0;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
}

void CharacterSet.insert(charactersIn:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *Swift::UInt64 v3 = __CharacterSetStorage.mutableCopy()();
    swift_release();
  }
  __CharacterSetStorage.insert(charactersIn:)(a1, a2, a3);
}

void __CharacterSetStorage.insert(charactersIn:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  BOOL v5 = *(void **)(v3 + 16);
  if (*(unsigned char *)(v3 + 24))
  {
    String._bridgeToObjectiveCImpl()();
    id v6 = v5;
    a3();

    swift_unknownObjectRelease();
  }
  else
  {
    CFCharacterSetRef v7 = v5;
    MutableCopdouble y = CFCharacterSetCreateMutableCopy(0, v7);
    if (MutableCopy)
    {
      CFMutableCharacterSetRef v9 = MutableCopy;
      String._bridgeToObjectiveCImpl()();
      uint64_t v10 = v9;
      a3();

      swift_unknownObjectRelease();
      unsigned __int8 v11 = *(void **)(v3 + 16);
      *(void *)(v3 + 16) = v9;
      *(unsigned char *)(v3 + 24) = 1;
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t _NSRange.init<A, B>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  if (__OFSUB__(v9, result))
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = result;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    return v10;
  }
  return result;
}

uint64_t type metadata completion function for _PlistDecoder()
{
  return swift_initClassMetadata2();
}

uint64_t one-time initialization function for _globalState()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftProcessInfo.GlobalState>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 44) = 0;
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 24) = 1;
  *(_DWORD *)(result + 28) = 0;
  *(_WORD *)(result + 32) = 513;
  *(_DWORD *)(result + 36) = 0;
  *(unsigned char *)(result + 40) = 1;
  static _NSSwiftProcessInfo._globalState = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for Duration.UnitsFormatStyle.Unit(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t dispatch thunk of PropertyListEncoder.userInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t one-time initialization function for cache()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<CalendarCache.State>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 60) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  uint64_t v1 = MEMORY[0x1E4FBC868];
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = v1;
  *(void *)(result + 48) = -1;
  *(unsigned char *)(result + 56) = 0;
  static CalendarCache.cache = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[ICUListFormatter.Signature : ICUListFormatter]>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  static ICUListFormatter.cache = 100;
  *(void *)algn_1E8EDF408 = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[ICULegacyNumberFormatter.Signature : ICULegacyNumberFormatter]>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  static ICULegacyNumberFormatter.cache = 100;
  unk_1E8ED3298 = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[ICUDateIntervalFormatter.Signature : ICUDateIntervalFormatter?]>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  static ICUDateIntervalFormatter.cache = 100;
  unk_1E8EDF4E0 = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[ICURelativeDateFormatter.Signature : ICURelativeDateFormatter?]>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  static ICURelativeDateFormatter.cache = 100;
  *(void *)algn_1E8EDF518 = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[RegexPatternCache.Key : Regex<AnyRegexOutput>]>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  static RegexPatternCache.cache = result;
  return result;
}

{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<[Date.ComponentsFormatStyle : NSDateComponentsFormatter]>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  static Date.ComponentsFormatStyle.cache = 100;
  unk_1E8EDF3B0 = result;
  return result;
}

void URLResourceValues.init()(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC870];
  *a1 = MEMORY[0x1E4FBC868];
  a1[1] = v1;
}

Swift::Void __swiftcall URL.removeCachedResourceValue(forKey:)(NSURLResourceKey forKey)
{
  objc_msgSend(*v1, sel_removeCachedResourceValueForKey_, forKey);
}

uint64_t __iop_copyCompletionBlock_block_invoke()
{
  if (_CFExecutableLinkedOnOrAfter()) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = dyld_program_sdk_at_least();
  }
  _MergedGlobals_11 = result;
  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance __PlistEncoderBPlist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __PlistEncoderBPlist.encode<A>(_:)(a1, a2, a3);
}

uint64_t __PlistEncoderBPlist.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t result = (*(uint64_t (**)(void))(*v3 + 240))();
  if (result)
  {
    unint64_t v10 = v3[5];
    swift_retain();
    uint64_t v11 = specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(a1, v10, 0, 0, 0, 255, a2, a3);
    if (!v5)
    {
      if (!v11)
      {
        uint64_t v12 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E4FBC860]);
        uint64_t v14 = v13;
        uint64_t v16 = v15;
        type metadata accessor for _BPlistEncodingFormat.Reference();
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = v12;
        *(void *)(v17 + 24) = v14;
        *(void *)(v17 + 32) = v16;
        *(unsigned char *)(v17 + 40) = 96;
        *(void *)(v17 + 48) = -1;
      }
      swift_release();
      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

void PropertyListEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v3 + 96))();
  if (v9 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 40) = v12;
    *(void *)(inited + 48) = 0xD000000000000038;
    *(void *)(inited + 56) = 0x80000001823AAEA0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v13 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v55);
    uint64_t v14 = v55;
    uint64_t v15 = v56;
    swift_retain();
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
    if (v17)
    {
      __break(1u);
    }
    else
    {
      v13[(v16 >> 6) + 8] |= 1 << v16;
      Swift::UInt v18 = (uint64_t *)(v13[6] + 16 * v16);
      *Swift::UInt v18 = v14;
      v18[1] = v15;
      outlined init with take of Any(v57, (_OWORD *)(v13[7] + 32 * v16));
      uint64_t v19 = v13[2];
      BOOL v20 = __OFADD__(v19, 1);
      uint64_t v21 = v19 + 1;
      if (!v20)
      {
        void v13[2] = v21;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v22 = objc_allocWithZone((Class)NSError);
        uint64_t v23 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v24 = objc_msgSend(v22, sel_initWithDomain_code_userInfo_, v23, 3852, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v25 = objc_msgSend(v24, sel_domain);
        id v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        a3 = v27;

        id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        uint64_t v5 = v29;
        if (v26 == v28 && (void *)a3 == v29) {
          goto LABEL_18;
        }
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v30)
        {
LABEL_20:
          swift_willThrow();
          goto LABEL_21;
        }
        __break(1u);
LABEL_12:
        PropertyListEncoder._encodeXML<A>(_:)(a1, a2, a3);
        if (!v5) {
          return;
        }
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v10 = v9;
  if (v9 == 100) {
    goto LABEL_12;
  }
  if (v9 != 200)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t v31 = swift_initStackObject();
    *(_OWORD *)(v31 + 16) = xmmword_1821037E0;
    *(void *)(v31 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(v31 + 40) = v32;
    uint64_t v55 = 0;
    unint64_t v56 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    v33._unint64_t object = (void *)0x80000001823AAE40;
    v33._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v33);
    uint64_t v58 = v10;
    type metadata accessor for NSPropertyListFormat(0);
    _print_unlocked<A, B>(_:_:)();
    *(void *)(v31 + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(v31 + 48) = 0;
    *(void *)(v31 + 56) = 0xE000000000000000;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    int v34 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (String, Any)(v31 + 32, (uint64_t)&v55);
    uint64_t v35 = v55;
    uint64_t v36 = v56;
    swift_retain();
    unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    if ((v38 & 1) == 0)
    {
      v34[(v37 >> 6) + 8] |= 1 << v37;
      int v39 = (uint64_t *)(v34[6] + 16 * v37);
      *int v39 = v35;
      v39[1] = v36;
      outlined init with take of Any(v57, (_OWORD *)(v34[7] + 32 * v37));
      uint64_t v40 = v34[2];
      BOOL v20 = __OFADD__(v40, 1);
      uint64_t v41 = v40 + 1;
      if (!v20)
      {
        v34[2] = v41;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v42 = objc_allocWithZone((Class)NSError);
        uint64_t v43 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v24 = objc_msgSend(v42, sel_initWithDomain_code_userInfo_, v43, 3852, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v44 = objc_msgSend(v24, sel_domain);
        id v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
        uint64_t v47 = v46;

        if (v45 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v47 == v48)
        {
LABEL_18:
          swift_bridgeObjectRelease_n();
          goto LABEL_20;
        }
        char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v49) {
          goto LABEL_20;
        }
LABEL_27:
        __break(1u);
        return;
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  PropertyListEncoder._encodeBPlist<A>(_:)(a1, a2, a3);
  if (!v4) {
    return;
  }
LABEL_13:
  id v24 = v5;
LABEL_21:
  uint64_t v50 = type metadata accessor for EncodingError();
  swift_allocError();
  char v52 = v51;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
  _OWORD v52[3] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v52);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
  id v54 = v24;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v50 - 8) + 104))(v52, *MEMORY[0x1E4FBBAA0], v50);
  swift_willThrow();
}

uint64_t PropertyListEncoder.outputFormat.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 32);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 16);
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v2;
}

uint64_t *PropertyListEncoder._encodeBPlist<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFCharacterSetRef v7 = PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:)(a1, a2, a3);
  if (!v4)
  {
    uint64_t v8 = (uint64_t)v7;
    unsigned int v9 = *((unsigned __int8 *)v7 + 40);
    uint64_t v10 = v7[2];
    unint64_t v11 = v7[3];
    uint64_t v12 = v7[4];
    switch(v9 >> 4)
    {
      case 0u:
        goto LABEL_22;
      case 1u:
      case 2u:
      case 3u:
      case 4u:
        unint64_t v56 = v7;
        uint64_t v13 = type metadata accessor for EncodingError();
        swift_allocError();
        uint64_t v15 = v14;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
        _OWORD v15[3] = a2;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
        uint64_t v51 = 0;
        unint64_t v52 = 0xE000000000000000;
        outlined copy of _BPlistEncodingFormat.Reference.Backing(v10, v11, v12, v9);
        _StringGuts.grow(_:)(54);
        v17._uint64_t countAndFlagsBits = 0x6576656C2D706F54;
        v17._unint64_t object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v17);
        v18._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._unint64_t object = (void *)0x80000001823AB050;
        uint64_t v3 = &v51;
        v19._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
        String.append(_:)(v19);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, *MEMORY[0x1E4FBBAA0], v13);
        goto LABEL_26;
      case 7u:
        uint64_t v20 = type metadata accessor for EncodingError();
        swift_allocError();
        id v22 = v21;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
        v22[3] = a2;
        uint64_t v23 = __swift_allocate_boxed_opaque_existential_1(v22);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v23, a1, a2);
        uint64_t v51 = 0;
        unint64_t v52 = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v24._uint64_t countAndFlagsBits = 0x6576656C2D706F54;
        v24._unint64_t object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v24);
        v25._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        unint64_t v26 = 0xD000000000000028;
        unint64_t v27 = 0x80000001823AAFF0;
        uint64_t v3 = &v51;
        goto LABEL_23;
      case 9u:
        unint64_t v28 = v12 | v11;
        if (!(v12 | v11 | v10) && v9 == 144
          || (v9 == 144 ? (BOOL v29 = v10 == 1) : (BOOL v29 = 0), v29 ? (v30 = v28 == 0) : (v30 = 0), v30))
        {
          uint64_t v50 = v7[2];
          unint64_t v41 = v7[3];
          uint64_t v42 = v7[4];
          uint64_t v20 = type metadata accessor for EncodingError();
          swift_allocError();
          id v44 = v43;
          unint64_t v56 = (uint64_t *)((char *)v43
                          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context))
                                   + 48));
          long long v44[3] = a2;
          id v45 = __swift_allocate_boxed_opaque_existential_1(v44);
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v45, a1, a2);
          uint64_t v51 = 0;
          unint64_t v52 = 0xE000000000000000;
          outlined copy of _BPlistEncodingFormat.Reference.Backing(v50, v41, v42, v9);
          _StringGuts.grow(_:)(55);
          v46._uint64_t countAndFlagsBits = 0x6576656C2D706F54;
          v46._unint64_t object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v46);
          v47._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v47);
          swift_bridgeObjectRelease();
          v48._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
          v48._unint64_t object = (void *)0x80000001823AB080;
          uint64_t v3 = &v51;
          String.append(_:)(v48);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          uint64_t v38 = *MEMORY[0x1E4FBBAA0];
          int v39 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104);
          uint64_t v40 = v44;
        }
        else
        {
          if (v9 != 144 || v10 != 2 || v28 != 0)
          {
LABEL_21:
            uint64_t v33 = swift_slowAlloc();
            uint64_t v51 = MEMORY[0x1E4FBC860];
            LOBYTE(v52) = 0;
            uint64_t v53 = v33;
            uint64_t v54 = 0x2000;
            uint64_t v55 = 0;
            uint64_t v3 = (uint64_t *)_BPlistEncodingFormat.Writer.serializePlist(_:)(v8);
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(0, 0xC000000000000000);
            swift_release();
            return v3;
          }
LABEL_22:
          uint64_t v20 = type metadata accessor for EncodingError();
          swift_allocError();
          id v22 = v34;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
          v22[3] = a2;
          uint64_t v35 = __swift_allocate_boxed_opaque_existential_1(v22);
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v35, a1, a2);
          uint64_t v51 = 0;
          unint64_t v52 = 0xE000000000000000;
          _StringGuts.grow(_:)(54);
          v36._uint64_t countAndFlagsBits = 0x6576656C2D706F54;
          v36._unint64_t object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v36);
          v37._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v37);
          swift_bridgeObjectRelease();
          unint64_t v27 = 0x80000001823AB020;
          uint64_t v3 = &v51;
          unint64_t v26 = 0xD00000000000002ALL;
LABEL_23:
          String.append(_:)(*(Swift::String *)&v26);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          uint64_t v38 = *MEMORY[0x1E4FBBAA0];
          int v39 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104);
          uint64_t v40 = v22;
        }
        v39(v40, v38, v20);
LABEL_26:
        swift_willThrow();
        swift_release();
        break;
      default:
        goto LABEL_21;
    }
  }
  return v3;
}

_OWORD *specialized PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:)(_OWORD *a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  type metadata accessor for __PlistEncoderBPlist();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = MEMORY[0x1E4FBC860];
  *(void *)(v6 + 24) = v5;
  *(void *)(v6 + 32) = v4;
  *(void *)(v6 + 16) = v7;
  *(_OWORD *)(v6 + 40) = xmmword_18210F290;
  specialized _BPlistEncodingFormat.init()((uint64_t *)v24);
  long long v8 = v24[1];
  *(_OWORD *)(v6 + 56) = v24[0];
  *(_OWORD *)(v6 + 72) = v8;
  *(void *)(v6 + 88) = v25;
  long long v9 = a1[5];
  v23[4] = a1[4];
  v23[5] = v9;
  v23[6] = a1[6];
  long long v10 = a1[1];
  v23[0] = *a1;
  v23[1] = v10;
  long long v11 = a1[3];
  v23[2] = a1[2];
  v23[3] = v11;
  _OWORD v22[2] = v23;
  swift_bridgeObjectRetain();
  uint64_t v12 = (_OWORD *)v6;
  uint64_t v13 = specialized __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)((void (*)(void *))partial apply for specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:), (uint64_t)v22, 0x8000000000000000, 0, 0, 0, 255);
  if (!v2)
  {
    uint64_t v12 = (_OWORD *)v13;
    if (!v13)
    {
      uint64_t v15 = type metadata accessor for EncodingError();
      swift_allocError();
      Swift::String v17 = v16;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
      _OWORD v17[3] = &type metadata for LocalizedStringResource;
      Swift::String v18 = (_OWORD *)swift_allocObject();
      *Swift::String v17 = v18;
      long long v19 = a1[1];
      v18[1] = *a1;
      void v18[2] = v19;
      long long v20 = a1[3];
      v18[3] = a1[2];
      v18[4] = v20;
      long long v21 = a1[5];
      v18[5] = a1[4];
      void v18[6] = v21;
      v18[7] = a1[6];
      *(void *)&v23[0] = 0;
      *((void *)&v23[0] + 1) = 0xE000000000000000;
      outlined retain of LocalizedStringResource((uint64_t)a1);
      uint64_t v12 = v23;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBAA0], v15);
      swift_willThrow();
    }
  }
  swift_release();
  return v12;
}

void *PropertyListEncoder.encodeToTopLevelContainerBPlist<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  type metadata accessor for __PlistEncoderBPlist();
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = MEMORY[0x1E4FBC860];
  *(void *)(v10 + 24) = v9;
  *(void *)(v10 + 32) = v8;
  *(void *)(v10 + 16) = v11;
  *(_OWORD *)(v10 + 40) = xmmword_18210F290;
  specialized _BPlistEncodingFormat.init()((uint64_t *)v23);
  long long v12 = v23[1];
  *(_OWORD *)(v10 + 56) = v23[0];
  *(_OWORD *)(v10 + 72) = v12;
  *(void *)(v10 + 88) = v24;
  swift_bridgeObjectRetain();
  uint64_t v13 = (void *)v10;
  uint64_t v14 = specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(a1, 0x8000000000000000, 0, 0, 0, 255, a2, a3);
  if (!v4)
  {
    uint64_t v13 = (void *)v14;
    if (v14)
    {
      swift_release();
      return v13;
    }
    uint64_t v16 = type metadata accessor for EncodingError();
    swift_allocError();
    Swift::String v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v18[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v22[0] = 0x6576656C2D706F54;
    v22[1] = 0xEA0000000000206CLL;
    v20._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._unint64_t object = (void *)0x80000001823AAF20;
    uint64_t v13 = v22;
    v21._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v21);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x1E4FBBAA0], v16);
    swift_willThrow();
  }
  swift_release();
  return v13;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _PlistUnkeyedEncodingContainerBPlist.encode<A>(_:)(a1, a2, a3);
}

uint64_t _PlistUnkeyedEncodingContainerBPlist.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *(void *)(a2 - 8);
  double v10 = MEMORY[0x1F4188790](a1);
  long long v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v3;
  uint64_t result = (*(uint64_t (**)(char *, double))(v9 + 16))(v12, v10);
  unint64_t v15 = *(void *)(v13 + 40);
  uint64_t v16 = v6[1];
  int v17 = *(unsigned __int8 *)(v16 + 40) >> 4;
  if (v17 == 6)
  {
    uint64_t v18 = v16 + 32;
  }
  else
  {
    if (v17 != 5)
    {
      __break(1u);
      return result;
    }
    uint64_t v18 = v16 + 16;
  }
  uint64_t v19 = *(void *)(*(void *)v18 + 16);
  swift_retain();
  uint64_t v20 = specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)((uint64_t)v12, v15, v19, 0, 0, 2, a2, a3);
  if (v5)
  {
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a2);
  }
  else
  {
    if (!v20)
    {
      uint64_t v21 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E4FBC860]);
      uint64_t v23 = v22;
      uint64_t v27 = v24;
      type metadata accessor for _BPlistEncodingFormat.Reference();
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = v21;
      *(void *)(v25 + 24) = v23;
      *(void *)(v25 + 32) = v27;
      *(unsigned char *)(v25 + 40) = 96;
      *(void *)(v25 + 48) = -1;
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a2);
    _BPlistEncodingFormat.Reference.insert(_:)();
    return swift_release();
  }
}

uint64_t specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v46 = a8;
  uint64_t v47 = a5;
  int v49 = a6;
  uint64_t v48 = a4;
  uint64_t v14 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v43 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v43 - v21;
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v22, a1, a7);
    swift_dynamicCast();
    uint64_t v23 = *(void *)(v9 + 88);
    uint64_t v24 = *(void *)(v23 + 16);
    unint64_t v25 = *(void *)(v23 + 24);
    uint64_t v26 = *(void *)(v23 + 32);
    *(void *)(v23 + 16) = v51;
    *(void *)(v23 + 24) = 0;
    *(void *)(v23 + 32) = 0;
    unsigned __int8 v27 = *(unsigned char *)(v23 + 40);
    *(unsigned char *)(v23 + 40) = 112;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v24, v25, v26, v27);
    swift_retain();
    char v28 = specialized Set._Variant.insert(_:)(&v53, v23);
    uint64_t v29 = v53;
    if (v28)
    {
      type metadata accessor for _BPlistEncodingFormat.Reference();
      uint64_t v30 = swift_allocObject();
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = 0;
      *(void *)(v30 + 16) = 2;
      *(unsigned char *)(v30 + 40) = -112;
      *(void *)(v30 + 48) = -1;
      swift_release();
      *(void *)(v9 + 88) = v30;
    }
  }
  else
  {
    uint64_t v31 = a1;
    unint64_t v44 = a2;
    uint64_t v45 = a3;
    uint64_t v32 = v48;
    char v33 = v49;
    if (swift_dynamicCastMetatype())
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, v31, a7);
      swift_dynamicCast();
      uint64_t v34 = v51;
      unint64_t v35 = v52;
      uint64_t v29 = _BPlistEncodingFormat.data(_:)(v51, v52);
      outlined consume of Data._Representation(v34, v35);
    }
    else
    {
      uint64_t v36 = swift_conformsToProtocol2();
      if (v36) {
        uint64_t v37 = a7;
      }
      else {
        uint64_t v37 = 0;
      }
      if (v37)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v31, a7);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Encodable]);
        swift_dynamicCast();
        uint64_t v29 = specialized __PlistEncoderBPlist.wrap<A>(_:for:_:)(v51, v44, v45, v32, v47, v33);
        swift_bridgeObjectRelease();
      }
      else
      {
        MEMORY[0x1F4188790](v36);
        uint64_t v38 = v45;
        uint64_t v39 = v46;
        *(&v43 - 4) = a7;
        *(&v43 - 3) = v39;
        *(&v43 - 2) = v31;
        uint64_t v29 = v9;
        uint64_t v40 = v50;
        uint64_t v41 = specialized __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)((void (*)(void *))partial apply for specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:), (uint64_t)(&v43 - 6), v44, v38, v32, v47, v33);
        if (!v40) {
          return v41;
        }
      }
    }
  }
  return v29;
}

uint64_t specialized __PlistEncoderBPlist._wrapGeneric<A>(_:for:_:)(void (*a1)(void *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v9 = v7;
  uint64_t v15 = a1;
  uint64_t v16 = v9 + 2;
  unint64_t v30 = *(void *)(v9[2] + 16);
  if (a7 != -1)
  {
    uint64_t v29 = a1;
    uint64_t v28 = v8;
    uint64_t v17 = (void *)swift_allocObject();
    void v17[5] = &type metadata for _CodingKey;
    v17[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v18 = swift_allocObject();
    void v17[2] = v18;
    *(void *)(v18 + 16) = a4;
    *(void *)(v18 + 24) = a5;
    *(void *)(v18 + 32) = a6;
    *(unsigned char *)(v18 + 40) = a7;
    v17[7] = a3;
    uint64_t v27 = a4;
    uint64_t v19 = a5;
    if (a3 >> 62)
    {
      if (a3 >> 62 != 1)
      {
        uint64_t v24 = a6;
        uint64_t v23 = 1;
LABEL_10:
        v17[8] = v23;
        uint64_t v21 = v9[5];
        uint64_t v22 = v9[6];
        v9[5] = v17;
        uint64_t v16 = v9 + 2;
LABEL_11:
        outlined copy of _CodingKey?(v27, v19, v24, a7);
        uint64_t v8 = v28;
        goto LABEL_12;
      }
      uint64_t v20 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v20 = (uint64_t *)(a3 + 64);
    }
    uint64_t v24 = a6;
    uint64_t v25 = *v20;
    swift_retain();
    uint64_t v23 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      return 0;
    }
    goto LABEL_10;
  }
  uint64_t v21 = v9[5];
  uint64_t v22 = v9[6];
  v9[5] = a3;
  if (!(a3 >> 62))
  {
    uint64_t v27 = a4;
    uint64_t v28 = v8;
    uint64_t v19 = a5;
    uint64_t v24 = a6;
    uint64_t v29 = a1;
    uint64_t v23 = *(void *)(a3 + 64);
    swift_retain();
    goto LABEL_11;
  }
  if (a3 >> 62 == 1)
  {
    uint64_t v29 = a1;
    uint64_t v23 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
    swift_retain();
LABEL_12:
    swift_retain();
    uint64_t v15 = v29;
    goto LABEL_13;
  }
  uint64_t v23 = 0;
LABEL_13:
  void v9[6] = v23;
  v15(v9);
  if (v8)
  {
    v9[5] = v21;
    swift_retain();
    swift_release();
    void v9[6] = v22;
    swift_release();
    swift_release();
    if (v30 < *(void *)(v9[2] + 16))
    {
      if (!specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew())) {
        specialized ContiguousArray.remove(at:)(*(void *)(*v16 + 16) - 1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
      }
      swift_release();
    }
    return swift_willThrow();
  }
  v9[5] = v21;
  swift_retain();
  swift_release();
  void v9[6] = v22;
  swift_release();
  swift_release();
  if (v30 >= *(void *)(v9[2] + 16)) {
    return 0;
  }
  uint64_t result = specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
  if (!result) {
    return specialized ContiguousArray.remove(at:)(*(void *)(*v16 + 16) - 1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(a1);
}

{
  uint64_t v1;

  return specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(a1, *(void *)(v1 + 16));
}

uint64_t specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  _OWORD v4[3] = type metadata accessor for __PlistEncoderBPlist();
  v4[4] = lazy protocol witness table accessor for type _BPlistEncodingFormat.Reference and conformance _BPlistEncodingFormat.Reference(&lazy protocol witness table cache variable for type __PlistEncoderBPlist and conformance __PlistEncoderBPlist, v2, (void (*)(uint64_t))type metadata accessor for __PlistEncoderBPlist);
  v4[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

void _BPlistEncodingFormat.Reference.insert(_:)()
{
  if ((*(unsigned char *)(v0 + 40) & 0xF0) == 0x50)
  {
    uint64_t v5 = *(void *)(v0 + 16);
    *(void *)(v0 + 24) = 0;
    *(void *)(v0 + 32) = 0;
    *(void *)(v0 + 16) = 2;
    *(unsigned char *)(v0 + 40) = -112;
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    uint64_t v1 = *(void *)(v0 + 16);
    unint64_t v2 = *(void *)(v0 + 24);
    uint64_t v3 = *(void *)(v0 + 32);
    *(void *)(v0 + 24) = 0;
    *(void *)(v0 + 32) = 0;
    *(void *)(v0 + 16) = v5;
    unsigned __int8 v4 = *(unsigned char *)(v0 + 40);
    *(unsigned char *)(v0 + 40) = 80;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v1, v2, v3, v4);
  }
  else
  {
    __break(1u);
  }
}

uint64_t specialized _BPlistEncodingFormat.init()@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for _BPlistEncodingFormat.Reference();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = 2;
  *(unsigned char *)(v2 + 40) = -112;
  *(void *)(v2 + 48) = -1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 40) = -112;
  *(void *)(v3 + 48) = -1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 16) = 1;
  *(unsigned char *)(v4 + 40) = -112;
  *(void *)(v4 + 48) = -1;
  uint64_t result = swift_allocObject();
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 2;
  *(unsigned char *)(result + 40) = -112;
  *(void *)(result + 48) = -1;
  *a1 = v2;
  a1[1] = v3;
  uint64_t v6 = MEMORY[0x1E4FBC870];
  a1[2] = v4;
  a1[3] = v6;
  a1[4] = result;
  return result;
}

uint64_t specialized closure #1 in __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 72);
  v8[5] = *(void *)a2;
  long long v9 = *(_OWORD *)(a2 + 8);
  uint64_t v10 = v3;
  uint64_t v11 = v4;
  long long v12 = *(_OWORD *)(a2 + 40);
  long long v13 = *(_OWORD *)(a2 + 56);
  uint64_t v14 = v5;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v15 = *(_OWORD *)(a2 + 80);
  long long v16 = v6;
  v8[3] = type metadata accessor for __PlistEncoderBPlist();
  v8[4] = lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage and conformance String.LocalizationValue.FormatArgument.CodableStorage(&lazy protocol witness table cache variable for type __PlistEncoderBPlist and conformance __PlistEncoderBPlist, (void (*)(uint64_t))type metadata accessor for __PlistEncoderBPlist);
  v8[0] = a1;
  swift_retain();
  LocalizedStringResource.encode(to:)(v8);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage and conformance String.LocalizationValue.FormatArgument.CodableStorage(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

long long *PropertyListEncoder._encodeXML<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  PropertyListEncoder.encodeToTopLevelContainerXML<A>(_:)(a1, a2, a3, (uint64_t)&__src);
  if (!v4)
  {
    long long v7 = __src;
    char v8 = v42;
    switch((char)v42)
    {
      case 0:
        goto LABEL_16;
      case 1:
      case 2:
      case 3:
        type metadata accessor for EncodingError();
        unint64_t v45 = *((void *)&v7 + 1);
        swift_allocError();
        uint64_t v10 = v9;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
        _OWORD v10[3] = a2;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
        *(void *)&long long __src = 0;
        *((void *)&__src + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(54);
        v12._uint64_t countAndFlagsBits = 0x6576656C2D706F54;
        v12._unint64_t object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v12);
        v13._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v13);
        swift_bridgeObjectRelease();
        uint64_t v14 = " encoded as number property list fragment.";
        goto LABEL_17;
      case 4:
        uint64_t v25 = type metadata accessor for EncodingError();
        swift_allocError();
        uint64_t v27 = v26;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
        _OWORD v27[3] = a2;
        uint64_t v28 = __swift_allocate_boxed_opaque_existential_1(v27);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v28, a1, a2);
        *(void *)&long long __src = 0;
        *((void *)&__src + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v29._uint64_t countAndFlagsBits = 0x6576656C2D706F54;
        v29._unint64_t object = (void *)0xEA0000000000206CLL;
        String.append(_:)(v29);
        v30._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        v31._uint64_t countAndFlagsBits = 0xD000000000000028;
        v31._unint64_t object = (void *)0x80000001823AAFF0;
        p_src = &__src;
        String.append(_:)(v31);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x1E4FBBAA0], v25);
        swift_willThrow();
        return p_src;
      case 8:
        if ((unint64_t)(__src - 1) <= 1)
        {
          uint64_t v15 = type metadata accessor for EncodingError();
          swift_allocError();
          unint64_t v45 = *((void *)&v7 + 1);
          uint64_t v17 = v16;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
          _OWORD v17[3] = a2;
          uint64_t v18 = __swift_allocate_boxed_opaque_existential_1(v17);
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v18, a1, a2);
          *(void *)&long long __src = 0;
          *((void *)&__src + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(55);
          v19._uint64_t countAndFlagsBits = 0x6576656C2D706F54;
          v19._unint64_t object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v19);
          v20._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v20);
          swift_bridgeObjectRelease();
          v21._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
          v21._unint64_t object = (void *)0x80000001823AB080;
          p_src = &__src;
          String.append(_:)(v21);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBAA0], v15);
          swift_willThrow();
          uint64_t v22 = v7;
          unint64_t v23 = v45;
          char v24 = 8;
LABEL_18:
          outlined consume of _XMLPlistEncodingFormat.Reference(v22, v23, v24);
          return p_src;
        }
        if (__src == 0)
        {
LABEL_16:
          type metadata accessor for EncodingError();
          unint64_t v45 = *((void *)&v7 + 1);
          swift_allocError();
          uint64_t v10 = v33;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
          _OWORD v10[3] = a2;
          uint64_t v34 = __swift_allocate_boxed_opaque_existential_1(v10);
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v34, a1, a2);
          *(void *)&long long __src = 0;
          *((void *)&__src + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(54);
          v35._uint64_t countAndFlagsBits = 0x6576656C2D706F54;
          v35._unint64_t object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v35);
          v36._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v36);
          swift_bridgeObjectRelease();
          uint64_t v14 = " encoded as string property list fragment.";
LABEL_17:
          v37._unint64_t object = (void *)((unint64_t)(v14 - 32) | 0x8000000000000000);
          p_src = &__src;
          v37._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
          String.append(_:)(v37);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t *, void, void))(*(void *)(*((void *)&v7 + 1) - 8) + 104))(v10, *MEMORY[0x1E4FBBAA0], *((void *)&v7 + 1));
          swift_willThrow();
          uint64_t v22 = v7;
          unint64_t v23 = v45;
          char v24 = v8;
          goto LABEL_18;
        }
LABEL_8:
        *(void *)&long long __src = swift_slowAlloc();
        *((void *)&__src + 1) = 0x2000;
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        unint64_t v44 = 0xC000000000000000;
        _XMLPlistEncodingFormat.Writer.append(_:)("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n", 164);
        long long v39 = v7;
        char v40 = v8;
        _XMLPlistEncodingFormat.Writer.append(_:indentation:)((uint64_t)&v39, 0);
        *(void *)&long long v39 = 0x3E7473696C702F3CLL;
        *((void *)&v39 + 1) = 0xE90000000000000ALL;
        specialized String.withUTF8<A>(_:)((uint64_t *)&v39);
        swift_bridgeObjectRelease();
        if (v42 >= 1)
        {
          if ((void)__src) {
            uint64_t v32 = (unsigned char *)(__src + v42);
          }
          else {
            uint64_t v32 = 0;
          }
          Data._Representation.append(contentsOf:)((unsigned char *)__src, v32);
        }
        p_src = v43;
        if ((void)__src) {
          MEMORY[0x185309510](__src, -1, -1);
        }
        outlined consume of _XMLPlistEncodingFormat.Reference(v7, *((unint64_t *)&v7 + 1), v8);
        break;
      default:
        goto LABEL_8;
    }
  }
  return p_src;
}

uint64_t _XMLPlistEncodingFormat.Writer.append(_:indentation:)(uint64_t a1, Swift::Int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = (unsigned __int8 *)v74;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 16);
  _XMLPlistEncodingFormat.Writer.appendIndents(_:)(a2);
  switch(v8)
  {
    case 1:
      *(void *)&v74[0] = 60;
      *((void *)&v74[0] + 1) = 0xE100000000000000;
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
      _XMLPlistEncodingFormat.Writer.append(_:)("integer", 7);
      *(void *)&v74[0] = 62;
      *((void *)&v74[0] + 1) = 0xE100000000000000;
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
      *(void *)&v74[0] = v6;
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      goto LABEL_23;
    case 2:
      *(void *)&v74[0] = 60;
      *((void *)&v74[0] + 1) = 0xE100000000000000;
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
      _XMLPlistEncodingFormat.Writer.append(_:)("integer", 7);
      *(void *)&v74[0] = 62;
      *((void *)&v74[0] + 1) = 0xE100000000000000;
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
      *(void *)&v74[0] = v6;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
LABEL_23:
      *(void *)&v74[0] = BinaryInteger.description.getter();
      *((void *)&v74[0] + 1) = v33;
      swift_bridgeObjectRetain();
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)&v74[0] = 12092;
      *((void *)&v74[0] + 1) = 0xE200000000000000;
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
      long long v9 = "integer";
      uint64_t v30 = 7;
      goto LABEL_41;
    case 3:
      *(void *)&v74[0] = 60;
      *((void *)&v74[0] + 1) = 0xE100000000000000;
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
      _XMLPlistEncodingFormat.Writer.append(_:)("real", 4);
      *(void *)&v74[0] = 62;
      *((void *)&v74[0] + 1) = 0xE100000000000000;
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
      *(void *)&v74[0] = specialized _XMLPlistEncodingFormat.Writer.realDescription(_:)(*(double *)&v6);
      *((void *)&v74[0] + 1) = v29;
      swift_bridgeObjectRetain();
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)&v74[0] = 12092;
      *((void *)&v74[0] + 1) = 0xE200000000000000;
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
      long long v9 = "real";
      uint64_t v30 = 4;
      goto LABEL_41;
    case 4:
      *(void *)&v74[0] = 60;
      *((void *)&v74[0] + 1) = 0xE100000000000000;
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
      _XMLPlistEncodingFormat.Writer.append(_:)("date", 4);
      *(void *)&v74[0] = 62;
      *((void *)&v74[0] + 1) = 0xE100000000000000;
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      uint64_t v10 = swift_bridgeObjectRelease();
      if (one-time initialization token for cache == -1) {
        goto LABEL_4;
      }
      break;
    case 5:
      *(void *)&v74[0] = 60;
      *((void *)&v74[0] + 1) = 0xE100000000000000;
      outlined copy of Data._Representation(v6, v7);
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
      _XMLPlistEncodingFormat.Writer.append(_:)("data", 4);
      *(void *)&v74[0] = 2622;
      *((void *)&v74[0] + 1) = 0xE200000000000000;
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      uint64_t v34 = swift_bridgeObjectRelease();
      MEMORY[0x1F4188790](v34);
      *(void *)&v73[0] = &v60;
      MEMORY[0x1F4188790](v35);
      _OWORD v59[2] = v73;
      v59[3] = v36;
      v59[4] = v37;
      v59[5] = v2;
      v59[6] = v36;
      v59[7] = v38;
      *(void *)&long long v62 = v39;
      switch(v7 >> 62)
      {
        case 1uLL:
          uint64_t v63 = v2;
          if (v6 >> 32 < (int)v6) {
            __break(1u);
          }
          outlined copy of _XMLPlistEncodingFormat.Reference(v6, v7, 5);
          _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFyt_Tg5015_s10Foundation4B58V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_yt_Tg5AA0L4ViewVys0Q0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1nncn_n((int)v6, v6 >> 32, (void *)(v7 & 0x3FFFFFFFFFFFFFFFLL), (uint64_t (*)(uint64_t))partial apply for closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:));
          outlined consume of _XMLPlistEncodingFormat.Reference(v6, v7, 5);
          break;
        case 2uLL:
          uint64_t v63 = 0;
          uint64_t v57 = *(void *)(v6 + 16);
          uint64_t v58 = *(void *)(v6 + 24);
          swift_retain();
          swift_retain();
          _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFyt_Tg5015_s10Foundation4B58V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_yt_Tg5AA0L4ViewVys0Q0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1nncn_n(v57, v58, (void *)(v7 & 0x3FFFFFFFFFFFFFFFLL), (uint64_t (*)(uint64_t))partial apply for closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:));
          swift_release();
          swift_release();
          break;
        case 3uLL:
          *(void *)((char *)v74 + 6) = 0;
          *(void *)&v74[0] = 0;
          uint64_t v40 = 0;
          goto LABEL_48;
        default:
          *(void *)&v74[0] = v6;
          WORD4(v74[0]) = v7;
          BYTE10(v74[0]) = BYTE2(v7);
          BYTE11(v74[0]) = BYTE3(v7);
          BYTE12(v74[0]) = BYTE4(v7);
          uint64_t v40 = BYTE6(v7);
          BYTE13(v74[0]) = BYTE5(v7);
LABEL_48:
          closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(v74, v40, v73, (uint64_t)v36, v37, v2, v36);
          break;
      }
      _XMLPlistEncodingFormat.Writer.appendIndents(_:)(a2);
      *(void *)&v74[0] = 12092;
      *((void *)&v74[0] + 1) = 0xE200000000000000;
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
      _XMLPlistEncodingFormat.Writer.append(_:)("data", 4);
      *(void *)&v74[0] = 2622;
      *((void *)&v74[0] + 1) = 0xE200000000000000;
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v6, v7, 5);
    case 6:
      outlined copy of _XMLPlistEncodingFormat.Reference(v6, v7, 6);
      uint64_t v41 = swift_retain();
      _XMLPlistEncodingFormat.Writer.appendArray(_:indentation:)(v41, a2);
      outlined consume of _XMLPlistEncodingFormat.Reference(v6, v7, 6);
      return swift_release();
    case 7:
      outlined copy of _XMLPlistEncodingFormat.Reference(v6, v7, 7);
      uint64_t v31 = swift_bridgeObjectRetain();
      _XMLPlistEncodingFormat.Writer.appendDictionary(_:indentation:)((Swift::OpaquePointer)v31, a2);
      outlined consume of _XMLPlistEncodingFormat.Reference(v6, v7, 7);
      return swift_bridgeObjectRelease();
    case 8:
      if (v6 | v7)
      {
        *(void *)&v74[0] = 60;
        *((void *)&v74[0] + 1) = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v74);
        swift_bridgeObjectRelease();
        if (v6 ^ 1 | v7)
        {
          uint64_t v42 = "false";
          uint64_t v43 = 5;
        }
        else
        {
          uint64_t v42 = "true";
          uint64_t v43 = 4;
        }
        _XMLPlistEncodingFormat.Writer.append(_:)(v42, v43);
        *(void *)&v74[0] = 671279;
        *((void *)&v74[0] + 1) = 0xE300000000000000;
      }
      else
      {
        *(void *)&v74[0] = 60;
        *((void *)&v74[0] + 1) = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v74);
        swift_bridgeObjectRelease();
        _XMLPlistEncodingFormat.Writer.append(_:)("string", 6);
        *(void *)&v74[0] = 62;
        *((void *)&v74[0] + 1) = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v74);
        swift_bridgeObjectRelease();
        _XMLPlistEncodingFormat.Writer.append(_:)("$null", 5);
        *(void *)&v74[0] = 12092;
        *((void *)&v74[0] + 1) = 0xE200000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v74);
        swift_bridgeObjectRelease();
        long long v9 = "string";
LABEL_40:
        uint64_t v30 = 6;
LABEL_41:
        _XMLPlistEncodingFormat.Writer.append(_:)(v9, v30);
        *(void *)&v74[0] = 2622;
        *((void *)&v74[0] + 1) = 0xE200000000000000;
      }
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      return swift_bridgeObjectRelease();
    default:
      *(void *)&v74[0] = 60;
      *((void *)&v74[0] + 1) = 0xE100000000000000;
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
      _XMLPlistEncodingFormat.Writer.append(_:)("string", 6);
      *(void *)&v74[0] = 62;
      *((void *)&v74[0] + 1) = 0xE100000000000000;
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
      *(void *)&v74[0] = v6;
      *((void *)&v74[0] + 1) = v7;
      swift_bridgeObjectRetain();
      specialized String.withUTF8<A>(_:)((uint64_t *)v74, v2);
      swift_bridgeObjectRelease();
      *(void *)&v74[0] = 12092;
      *((void *)&v74[0] + 1) = 0xE200000000000000;
      specialized String.withUTF8<A>(_:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
      long long v9 = "string";
      goto LABEL_40;
  }
LABEL_53:
  uint64_t v10 = swift_once();
LABEL_4:
  uint64_t v11 = (os_unfair_lock_s *)static CalendarCache.cache;
  MEMORY[0x1F4188790](v10);
  LOBYTE(v61) = 7;
  swift_retain_n();
  os_unfair_lock_lock(v11 + 15);
  partial apply for closure #1 in CalendarCache.fixed(_:)((uint64_t)&v11[4], v74);
  os_unfair_lock_unlock(v11 + 15);
  uint64_t v12 = swift_release_n();
  v67[0] = *(_OWORD *)v5;
  if (one-time initialization token for cache != -1) {
    uint64_t v12 = swift_once();
  }
  uint64_t v63 = v3;
  Swift::String v13 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v12);
  uint64_t v61 = 0;
  swift_retain_n();
  os_unfair_lock_lock(v13 + 36);
  partial apply for closure #1 in TimeZoneCache.offsetFixed(_:)((unint64_t)&v13[4], v74);
  os_unfair_lock_unlock(v13 + 36);
  swift_release_n();
  if (!*(void *)v5)
  {
    __break(1u);
    goto LABEL_56;
  }
  double v14 = *(double *)&v6;
  *(_OWORD *)uint64_t v5 = *(_OWORD *)v5;
  Calendar.timeZone.setter((uint64_t *)v74);
  long long v62 = v67[0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v6 = static _SetStorage.allocate(capacity:)();
  uint64_t v15 = 0;
  uint64_t v16 = v6 + 56;
  uint64_t v5 = outlined read-only object #0 of _XMLPlistEncodingFormat.Writer.append(_:indentation:);
  uint64_t v3 = -1;
  do
  {
    Swift::UInt v20 = outlined read-only object #0 of _XMLPlistEncodingFormat.Writer.append(_:indentation:)[v15 + 32];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v20);
    Swift::Int v21 = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v23 = v21 & ~v22;
    unint64_t v24 = v23 >> 6;
    uint64_t v25 = *(void *)(v16 + 8 * (v23 >> 6));
    uint64_t v26 = 1 << v23;
    uint64_t v27 = *(void *)(v6 + 48);
    if (((1 << v23) & v25) != 0)
    {
      if (*(unsigned __int8 *)(v27 + v23) == v20) {
        goto LABEL_10;
      }
      uint64_t v28 = ~v22;
      while (1)
      {
        unint64_t v23 = (v23 + 1) & v28;
        unint64_t v24 = v23 >> 6;
        uint64_t v25 = *(void *)(v16 + 8 * (v23 >> 6));
        uint64_t v26 = 1 << v23;
        if ((v25 & (1 << v23)) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v27 + v23) == v20) {
          goto LABEL_10;
        }
      }
    }
    *(void *)(v16 + 8 * v24) = v26 | v25;
    *(unsigned char *)(v27 + v23) = v20;
    uint64_t v17 = *(void *)(v6 + 16);
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18)
    {
      __break(1u);
      goto LABEL_53;
    }
    *(void *)(v6 + 16) = v19;
LABEL_10:
    ++v15;
  }
  while (v15 != 7);
  v74[0] = v62;
  swift_unknownObjectRetain();
  uint64_t v44 = swift_retain();
  Calendar.ComponentSet.init(_:)(v44, &v71);
  double v45 = 1.59271755e13;
  if (v14 <= 1.59271755e13) {
    double v45 = v14;
  }
  *(void *)&long long v70 = fmax(v45, -2.11845067e11);
  Calendar._dateComponents(_:from:)(&v71, (double *)&v70, v73);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v46 = memcpy(v74, v73, 0x11AuLL);
  uint64_t v47 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v46);
  uint64_t v61 = 0;
  swift_retain_n();
  os_unfair_lock_lock(v47 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v47[4], v73);
  os_unfair_lock_unlock(v47 + 36);
  uint64_t v48 = swift_release_n();
  uint64_t v49 = *(void *)&v73[0];
  if (*(void *)&v73[0])
  {
    uint64_t v50 = *((void *)&v73[0] + 1);
    uint64_t v51 = (os_unfair_lock_s *)static TimeZoneCache.cache;
    MEMORY[0x1F4188790](v48);
    uint64_t v61 = 0;
    swift_retain_n();
    os_unfair_lock_lock(v51 + 36);
    closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v51[4], v73);
    os_unfair_lock_unlock(v51 + 36);
    swift_release_n();
    if (!*(void *)&v73[0]) {
      goto LABEL_57;
    }
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    uint64_t v71 = v49;
    uint64_t v72 = v50;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    type metadata accessor for _LocaleUnlocalized();
    swift_retain();
    uint64_t inited = swift_initStaticObject();
    swift_release();
    uint64_t v53 = lazy protocol witness table accessor for type __PlistEncoderXML and conformance __PlistEncoderXML((unint64_t *)&lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized, 255, (void (*)(uint64_t))type metadata accessor for _LocaleUnlocalized);
    *(void *)&long long v70 = inited;
    *((void *)&v70 + 1) = v53;
    uint64_t v68 = 0;
    char v69 = 1;
    type metadata accessor for _CalendarGregorian();
    swift_allocObject();
    _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)&v66, &v71, &v70, 2, 0, 4, 0, (uint64_t)&v68);
    LODWORD(v73[0]) = 0x10000;
    BYTE4(v73[0]) = 1;
    *((void *)&v73[0] + 1) = 0;
    *(void *)&v73[1] = v54;
    *((void *)&v73[1] + 1) = v49;
    *(void *)&v73[2] = v50;
    char v65 = 0;
    MEMORY[0x1F4188790](v54);
    closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)((uint64_t)v59, 129, (uint64_t)v73, (uint64_t)v74, &v65, 0, 0, v64);
    uint64_t v55 = v64[0];
    uint64_t v56 = v64[1];
    swift_unknownObjectRelease();
    swift_release();
    uint64_t v71 = v55;
    uint64_t v72 = v56;
    swift_bridgeObjectRetain();
    specialized String.withUTF8<A>(_:)(&v71);
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)v74);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    *(void *)&v67[0] = 12092;
    *((void *)&v67[0] + 1) = 0xE200000000000000;
    specialized String.withUTF8<A>(_:)((uint64_t *)v67);
    swift_bridgeObjectRelease();
    _XMLPlistEncodingFormat.Writer.append(_:)("date", 4);
    *(void *)&v67[0] = 2622;
    *((void *)&v67[0] + 1) = 0xE200000000000000;
    specialized String.withUTF8<A>(_:)((uint64_t *)v67);
    return swift_bridgeObjectRelease();
  }
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  uint64_t result = swift_willThrow();
  __break(1u);
  return result;
}

uint64_t PropertyListEncoder.encodeToTopLevelContainerXML<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *(void *)(v4 + 16);
  uint64_t v10 = *(void *)(v4 + 24);
  type metadata accessor for __PlistEncoderXML();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(v12 + 24) = v11;
  *(void *)(v12 + 32) = v10;
  *(void *)(v12 + 40) = 0x8000000000000000;
  *(void *)(v12 + 56) = 0;
  *(void *)(v12 + 64) = 0;
  *(void *)(v12 + 48) = 0;
  *(unsigned char *)(v12 + 72) = 8;
  *(_OWORD *)(v12 + 80) = xmmword_18210C780;
  *(unsigned char *)(v12 + 96) = 8;
  *(_OWORD *)(v12 + 104) = xmmword_18210F2A0;
  *(unsigned char *)(v12 + 120) = 8;
  swift_bridgeObjectRetain();
  specialized __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(a1, 0x8000000000000000, 0, 0, 0, 255, a2, a3, &v23);
  if (v5) {
    return swift_release();
  }
  unsigned __int8 v14 = v25;
  if (v25 == 255)
  {
    uint64_t v17 = type metadata accessor for EncodingError();
    swift_allocError();
    uint64_t v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v19[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
    uint64_t v23 = 0;
    unint64_t v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    uint64_t v23 = 0x6576656C2D706F54;
    unint64_t v24 = 0xEA0000000000206CLL;
    v21._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._unint64_t object = (void *)0x80000001823AAF20;
    v22._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v22);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, *MEMORY[0x1E4FBBAA0], v17);
    swift_willThrow();
    return swift_release();
  }
  uint64_t v16 = v23;
  unint64_t v15 = v24;
  uint64_t result = swift_release();
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v15;
  *(unsigned char *)(a4 + 16) = v14;
  return result;
}

uint64_t Duration.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(a5 + 48))(v6, a4, a5);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Duration.UnitsFormatStyle@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Duration.UnitsFormatStyle.format(_:)(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t Duration.UnitsFormatStyle.format(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = Duration.UnitsFormatStyle._getSkeletons(_:)(a1, a2);
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS8skeleton_s8DurationV10FoundationE16UnitsFormatStyleV4UnitV011measurementJ0Sd0K5ValuetG_SSs5NeverOTg506_sSSs8e3V10f3E16ghi2V4j57VSdSSIggnyo_SS8skeleton_AG011measurementF0Sd0H5ValuetSSs5M11OIegnrzr_TRSSAMSdSSIggnyo_Tf1cn_nTf4ng_n(v2, (uint64_t (*)(uint64_t, uint64_t, unsigned char *, double))partial apply for closure #1 in Duration.UnitsFormatStyle._formatFields(_:));
  uint64_t v4 = swift_bridgeObjectRelease();
  unint64_t v5 = *(void *)(v3 + 16);
  uint64_t v33 = v3;
  if (v5 == 2)
  {
    MEMORY[0x1F4188790](v4);
    uint64_t v7 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    if (v8) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 0x7D317B202C7D307BLL;
    }
    if (v8) {
      unint64_t v10 = v8;
    }
    else {
      unint64_t v10 = 0xE800000000000000;
    }
    swift_bridgeObjectRelease();
    uint64_t v37 = v9;
    unint64_t v38 = v10;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
LABEL_21:
    unint64_t v5 = v37;
    uint64_t v6 = *(void *)(v3 + 16);
    if (!v6) {
      goto LABEL_49;
    }
    goto LABEL_22;
  }
  if (v5 != 1)
  {
    MEMORY[0x1F4188790](v4);
    uint64_t v11 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))partial apply for closure #1 in Duration.UnitsFormatStyle._getListPattern(_:));
    unint64_t v12 = 0xE800000000000000;
    MEMORY[0x1F4188790](v11);
    uint64_t v13 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    if (v14) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = 0x7D317B202C7D307BLL;
    }
    if (v14) {
      unint64_t v12 = v14;
    }
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v37 = v15;
    unint64_t v38 = v12;
    unint64_t v17 = v5 - 3;
    if (v5 < 3)
    {
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      return result;
    }
    if (v5 != 3)
    {
      while (v17)
      {
        unint64_t v5 = lazy protocol witness table accessor for type String and conformance String();
        lazy protocol witness table accessor for type String and conformance String();
        RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
        if (!--v17) {
          goto LABEL_20;
        }
      }
      goto LABEL_48;
    }
LABEL_20:
    uint64_t v18 = swift_bridgeObjectRelease();
    MEMORY[0x1F4188790](v18);
    _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    swift_bridgeObjectRelease();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    goto LABEL_21;
  }
  uint64_t v37 = 8204411;
  unint64_t v38 = 0xE300000000000000;
  uint64_t v6 = 1;
LABEL_22:
  uint64_t v34 = v3 + 32;
  while (v6 <= *(void *)(v3 + 16))
  {
    uint64_t v36 = v6 - 1;
    unint64_t v35 = *(void *)(v34 + 16 * (v6 - 1) + 8);
    if ((v38 & 0x2000000000000000) != 0) {
      uint64_t v19 = HIBYTE(v38) & 0xF;
    }
    else {
      uint64_t v19 = v37 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v20 = 7;
    if (((v38 >> 60) & ((v37 & 0x800000000000000) == 0)) != 0) {
      uint64_t v20 = 11;
    }
    unint64_t v5 = v20 | (v19 << 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v21 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(v5, 8204411, 0xE300000000000000);
    if (v22) {
      goto LABEL_47;
    }
    unint64_t v23 = v21;
    unint64_t v24 = 4 * v19;
    while (1)
    {
      unint64_t v25 = v23;
      for (unint64_t i = 15; i < 0x30000; unint64_t i = String.index(after:)())
      {
        if (v24 <= v25 >> 14) {
          break;
        }
        uint64_t v28 = String.subscript.getter();
        uint64_t v30 = v29;
        uint64_t v31 = String.subscript.getter();
        unint64_t v5 = v32;
        if (v28 == v31 && v30 == v32)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v27 & 1) == 0) {
            break;
          }
        }
        unint64_t v25 = String.index(after:)();
      }
      if ((i & 0xFFFFFFFFFFFFC000) == 0x30000) {
        break;
      }
      if (v23 < 0x4000) {
        goto LABEL_47;
      }
      unint64_t v23 = String.index(_:offsetBy:)();
    }
    swift_bridgeObjectRelease();
    if (v25 >> 14 < v23 >> 14) {
      goto LABEL_46;
    }
    unint64_t v5 = v35;
    lazy protocol witness table accessor for type String and conformance String();
    String.replaceSubrange<A>(_:with:)();
    swift_bridgeObjectRelease();
    uint64_t v3 = v33;
    uint64_t v6 = v36;
    if (!v36)
    {
      swift_bridgeObjectRelease();
      return v37;
    }
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS8skeleton_s8DurationV10FoundationE16UnitsFormatStyleV4UnitV011measurementJ0Sd0K5ValuetG_SSs5NeverOTg506_sSSs8e3V10f3E16ghi2V4j57VSdSSIggnyo_SS8skeleton_AG011measurementF0Sd0H5ValuetSSs5M11OIegnrzr_TRSSAMSdSSIggnyo_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, unsigned char *, double))
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v19;
    unint64_t v5 = (void *)(a1 + 56);
    do
    {
      uint64_t v7 = *(v5 - 3);
      uint64_t v6 = *(v5 - 2);
      double v8 = *(double *)v5;
      v17[0] = *((unsigned char *)v5 - 8);
      double v18 = v8;
      swift_bridgeObjectRetain();
      uint64_t v9 = a2(v7, v6, v17, v8);
      uint64_t v11 = v10;
      swift_bridgeObjectRelease();
      uint64_t v19 = v3;
      unint64_t v13 = *(void *)(v3 + 16);
      unint64_t v12 = *(void *)(v3 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v3 = v19;
      }
      *(void *)(v3 + 16) = v13 + 1;
      uint64_t v14 = v3 + 16 * v13;
      *(void *)(v14 + 32) = v9;
      *(void *)(v14 + 40) = v11;
      v5 += 4;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t partial apply for closure #1 in Duration.UnitsFormatStyle._formatFields(_:)(uint64_t a1, unint64_t a2, char *a3)
{
  return closure #1 in Duration.UnitsFormatStyle._formatFields(_:)(a1, a2, a3, *(_OWORD **)(v3 + 16));
}

uint64_t closure #1 in Duration.UnitsFormatStyle._formatFields(_:)(uint64_t a1, unint64_t a2, char *a3, _OWORD *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  char v6 = *a3;
  *(_OWORD *)uint64_t v15 = *a4;
  swift_unknownObjectRetain();
  uint64_t v7 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(a1, a2, v15);
  swift_unknownObjectRelease();
  if (!v7) {
    __break(1u);
  }
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  uint64_t v10 = swift_retain_n();
  MEMORY[0x1F4188790](v10);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v14, v15);
  uint64_t v12 = v15[1];
  uint64_t v11 = v15[0];
  swift_release_n();
  if (v12)
  {
    swift_release();
  }
  else
  {
    v15[0] = 0;
    v15[1] = 0xE000000000000000;
    Double.write<A>(to:)();
    v8._uint64_t countAndFlagsBits = 32;
    v8._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v14[79] = v6;
    v9._uint64_t countAndFlagsBits = Duration.UnitsFormatStyle.Unit.icuSkeleton.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return v15[0];
  }
  return v11;
}

uint64_t specialized String.withFileSystemRepresentation<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v169 = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v11 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
  }
  if (v11 < -1) {
    goto LABEL_134;
  }
  uint64_t v12 = v11 + 1;
  if (v11 >= 1024)
  {
    Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v71 = (const char *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v71, v12, 1, a1, a2);
      char v73 = v72;
      swift_bridgeObjectRelease();
      if (v73)
      {
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))4, a3, a4, 0, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v165, 0, 0);
        swift_willThrow();
        goto LABEL_129;
      }
      uint64_t v156 = v4;
      unint64_t v157 = a4;
      type metadata accessor for _FTSSequence.Iterator();
      swift_initStackObject();
      uint64_t v160 = _FTSSequence.Iterator.init(_:_:)(v71, 28);
      uint64_t v74 = _FTSSequence.Iterator.next()();
      if (v77 == 0xFF)
      {
        unint64_t v5 = (const char *)MEMORY[0x1E4FBC860];
LABEL_94:
        swift_release();
        swift_bridgeObjectRelease();
        MEMORY[0x185309510](v71, -1, -1);
        swift_bridgeObjectRelease();
        return (uint64_t)v5;
      }
      uint64_t v21 = v74;
      uint64_t v78 = v75;
      unint64_t v79 = v76;
      unsigned __int8 v80 = v77;
      uint64_t v158 = v71;
      uint64_t v81 = 0;
      uint64_t v82 = 0;
      unint64_t v5 = (const char *)MEMORY[0x1E4FBC860];
LABEL_47:
      uint64_t v159 = v5;
      while (1)
      {
        if (v80)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_111;
        }
        unsigned int v86 = *(unsigned __int16 *)(v21 + 88);
        if (v86 > 0xD) {
          goto LABEL_49;
        }
        int v87 = 1 << v86;
        if ((v87 & 0x390A) == 0) {
          break;
        }
        if (!*(void *)(v21 + 48))
        {
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        uint64_t v88 = String.init(cString:)();
        uint64_t v90 = v89;
        outlined consume of _FTSSequence.Element?(v21, v78, v79, v80);
        if (!v81)
        {
          uint64_t v21 = _FTSSequence.Iterator.next()();
          uint64_t v78 = v118;
          unint64_t v79 = v119;
          unsigned __int8 v80 = v120;
          uint64_t v81 = v90;
          uint64_t v82 = v88;
          if (v120 == 0xFF)
          {
LABEL_93:
            uint64_t v71 = v158;
            goto LABEL_94;
          }
          goto LABEL_47;
        }
        uint64_t v163 = v88;
        uint64_t v164 = v90;
        uint64_t v161 = v82;
        uint64_t v162 = v81;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        Collection<>.trimmingPrefix<A>(_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v166 >> 14 != v165 >> 14)
        {
          swift_bridgeObjectRetain();
          uint64_t v155 = v167;
          uint64_t v91 = Substring.subscript.getter();
          uint64_t v93 = v92;
          swift_bridgeObjectRelease();
          if (v91 == 47 && v93 == 0xE100000000000000)
          {
            swift_bridgeObjectRelease();
            goto LABEL_62;
          }
          char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v94)
          {
LABEL_62:
            unint64_t v95 = Substring.index(_:offsetBy:limitedBy:)();
            if (v96) {
              unint64_t v95 = v166;
            }
            if (v166 >> 14 < v95 >> 14) {
              goto LABEL_136;
            }
            uint64_t v97 = Substring.subscript.getter();
            uint64_t v99 = v98;
            uint64_t v101 = v100;
            uint64_t v103 = v102;
            swift_bridgeObjectRelease();
            uint64_t v104 = MEMORY[0x185301F50](v97, v99, v101, v103);
            uint64_t v106 = v105;
            swift_bridgeObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v159[2] + 1, 1, v159);
            }
            unint64_t v108 = v159[2];
            unint64_t v107 = v159[3];
            if (v108 >= v107 >> 1) {
              uint64_t v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v107 > 1), v108 + 1, 1, v159);
            }
            uint64_t v109 = v159;
            v159[2] = v108 + 1;
            uint64_t v110 = &v109[2 * v108];
            v110[4] = v104;
            char v111 = v110 + 4;
          }
          else
          {
            uint64_t v112 = MEMORY[0x185301F50](v165, v166, v155, v168);
            uint64_t v106 = v113;
            swift_bridgeObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v159[2] + 1, 1, v159);
            }
            unint64_t v115 = v159[2];
            unint64_t v114 = v159[3];
            if (v115 >= v114 >> 1) {
              uint64_t v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v114 > 1), v115 + 1, 1, v159);
            }
            char v116 = v159;
            v159[2] = v115 + 1;
            char v117 = &v116[2 * v115];
            v117[4] = v112;
            char v111 = v117 + 4;
          }
          v111[1] = v106;
          goto LABEL_50;
        }
        swift_bridgeObjectRelease();
LABEL_50:
        uint64_t v21 = _FTSSequence.Iterator.next()();
        uint64_t v78 = v83;
        unint64_t v79 = v84;
        unsigned __int8 v80 = v85;
        if (v85 == 0xFF)
        {
          unint64_t v5 = (const char *)v159;
          goto LABEL_93;
        }
      }
      if ((v87 & 0x490) != 0)
      {
        if (!*(void *)(v21 + 48))
        {
LABEL_140:
          __break(1u);
LABEL_141:
          unint64_t v165 = 0;
          unint64_t v166 = 0xE000000000000000;
          _StringGuts.grow(_:)(22);
          swift_bridgeObjectRelease();
          unint64_t v165 = 0xD000000000000014;
          unint64_t v166 = 0x80000001823A9780;
          LODWORD(v163) = v21;
          v154._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v154);
          swift_bridgeObjectRelease();
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v137 = String.init(cString:)();
        unint64_t v139 = v138;
        int v140 = *(_DWORD *)(v21 + 56);
        outlined consume of _FTSSequence.Element?(v21, v78, v79, v80);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        LODWORD(v21) = v140;
        uint64_t v78 = v137;
        unint64_t v79 = v139;
LABEL_111:
        uint64_t v71 = v158;
        uint64_t v141 = 263;
        switch((int)v21)
        {
          case 1:
          case 13:
            uint64_t v141 = 257;
            goto LABEL_119;
          case 2:
            uint64_t v141 = 260;
            goto LABEL_119;
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
            goto LABEL_116;
          case 27:
            goto LABEL_119;
          default:
            if (v21 == 63)
            {
              uint64_t v141 = 258;
            }
            else
            {
              if (v21 == 102)
              {
                id v142 = 0;
                uint64_t v143 = 256;
                goto LABEL_128;
              }
LABEL_116:
              uint64_t v141 = 256;
            }
LABEL_119:
            uint64_t v159 = (void *)v141;
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
              goto LABEL_141;
            }
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            uint64_t v144 = (int)POSIXErrorCode.rawValue.getter();
            id v145 = objc_allocWithZone((Class)NSError);
            uint64_t v146 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v142 = objc_msgSend(v145, sel_initWithDomain_code_userInfo_, v146, v144, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v147 = objc_msgSend(v142, sel_domain);
            id v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(v147);
            unint64_t v5 = v149;

            if (v148 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v5 == v150)
            {
              goto LABEL_126;
            }
            char v152 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v152 & 1) == 0)
            {
              __break(1u);
LABEL_126:
              swift_bridgeObjectRelease_n();
            }
            uint64_t v143 = (uint64_t)v159;
LABEL_128:
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v143, v78, v79, v142, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v165, 0, 0);
            swift_willThrow();
            outlined consume of SubpathElement();
            swift_release();
            break;
        }
LABEL_129:
        MEMORY[0x185309510](v71, -1, -1);
LABEL_130:
        swift_bridgeObjectRelease();
        return (uint64_t)v5;
      }
LABEL_49:
      outlined consume of _FTSSequence.Element?(v21, v78, v79, v80);
      goto LABEL_50;
    }
  }
  unint64_t v5 = (const char *)&v155;
  MEMORY[0x1F4188790](isStackAllocationSafe);
  uint64_t v14 = (char *)&v155 - v13;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v14, v12, 1, a1, a2);
  char v16 = v15;
  swift_bridgeObjectRelease();
  if (v16)
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))4, a3, a4, 0, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v165, 0, 0);
    swift_willThrow();
LABEL_108:
    swift_willThrow();
    goto LABEL_130;
  }
  uint64_t v158 = (const char *)&v155;
  type metadata accessor for _FTSSequence.Iterator();
  swift_initStackObject();
  uint64_t v160 = _FTSSequence.Iterator.init(_:_:)(v14, 28);
  uint64_t v17 = _FTSSequence.Iterator.next()();
  if (v20 == 0xFF)
  {
    unint64_t v5 = (const char *)MEMORY[0x1E4FBC860];
    goto LABEL_82;
  }
  uint64_t v21 = v17;
  uint64_t v22 = v18;
  unint64_t v23 = v19;
  unsigned __int8 v24 = v20;
  uint64_t v156 = v4;
  unint64_t v157 = a4;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = (void *)MEMORY[0x1E4FBC860];
  while (2)
  {
    uint64_t v159 = v27;
    while (1)
    {
      if (v24)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_86:
        unint64_t v5 = v158;
        uint64_t v125 = 263;
        switch((int)v21)
        {
          case 1:
          case 13:
            uint64_t v125 = 257;
            goto LABEL_98;
          case 2:
            uint64_t v125 = 260;
            goto LABEL_98;
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
            goto LABEL_95;
          case 27:
            goto LABEL_98;
          default:
            if (v21 == 63)
            {
              uint64_t v125 = 258;
            }
            else
            {
              if (v21 == 102)
              {
                id v126 = 0;
                uint64_t v125 = 256;
                goto LABEL_107;
              }
LABEL_95:
              uint64_t v125 = 256;
            }
LABEL_98:
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
              goto LABEL_141;
            }
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            uint64_t v127 = (int)POSIXErrorCode.rawValue.getter();
            id v128 = objc_allocWithZone((Class)NSError);
            uint64_t v129 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v126 = objc_msgSend(v128, sel_initWithDomain_code_userInfo_, v129, v127, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v130 = objc_msgSend(v126, sel_domain);
            id v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
            uint64_t v133 = v132;

            if (v131 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v133 == v134)
            {
              goto LABEL_105;
            }
            char v136 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v136 & 1) == 0)
            {
              __break(1u);
LABEL_105:
              swift_bridgeObjectRelease_n();
            }
            unint64_t v5 = v158;
LABEL_107:
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v125, v22, v23, v126, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v165, 0, 0);
            swift_willThrow();
            outlined consume of SubpathElement();
            swift_release();
            break;
        }
        goto LABEL_108;
      }
      unsigned int v31 = *(unsigned __int16 *)(v21 + 88);
      if (v31 > 0xD) {
        goto LABEL_14;
      }
      int v32 = 1 << v31;
      if ((v32 & 0x390A) != 0) {
        break;
      }
      if ((v32 & 0x490) != 0)
      {
        if (!*(void *)(v21 + 48)) {
          goto LABEL_139;
        }
        uint64_t v121 = String.init(cString:)();
        unint64_t v123 = v122;
        int v124 = *(_DWORD *)(v21 + 56);
        outlined consume of _FTSSequence.Element?(v21, v22, v23, v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        LODWORD(v21) = v124;
        uint64_t v22 = v121;
        unint64_t v23 = v123;
        goto LABEL_86;
      }
LABEL_14:
      outlined consume of _FTSSequence.Element?(v21, v22, v23, v24);
LABEL_15:
      uint64_t v21 = _FTSSequence.Iterator.next()();
      uint64_t v22 = v28;
      unint64_t v23 = v29;
      unsigned __int8 v24 = v30;
      if (v30 == 0xFF)
      {
        unint64_t v5 = (const char *)v159;
        goto LABEL_82;
      }
    }
    if (!*(void *)(v21 + 48)) {
      goto LABEL_137;
    }
    uint64_t v33 = String.init(cString:)();
    uint64_t v35 = v34;
    outlined consume of _FTSSequence.Element?(v21, v22, v23, v24);
    if (v25)
    {
      uint64_t v163 = v33;
      uint64_t v164 = v35;
      uint64_t v161 = v26;
      uint64_t v162 = v25;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      Collection<>.trimmingPrefix<A>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v36 = v165;
      unint64_t v37 = v166;
      uint64_t v38 = v168;
      unint64_t v39 = v166 >> 14;
      if (v166 >> 14 == v165 >> 14)
      {
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      uint64_t v40 = v167;
      swift_bridgeObjectRetain();
      uint64_t v155 = v40;
      uint64_t v41 = Substring.subscript.getter();
      uint64_t v43 = v42;
      swift_bridgeObjectRelease();
      if (v41 == 47 && v43 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
      char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v44)
      {
LABEL_27:
        unint64_t v45 = Substring.index(_:offsetBy:limitedBy:)();
        if (v46) {
          unint64_t v45 = v37;
        }
        if (v39 < v45 >> 14) {
          goto LABEL_135;
        }
        uint64_t v47 = Substring.subscript.getter();
        uint64_t v49 = v48;
        uint64_t v51 = v50;
        uint64_t v53 = v52;
        swift_bridgeObjectRelease();
        uint64_t v54 = MEMORY[0x185301F50](v47, v49, v51, v53);
        uint64_t v56 = v55;
        swift_bridgeObjectRelease();
        uint64_t v57 = v159;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57[2] + 1, 1, v57);
        }
        unint64_t v59 = v57[2];
        unint64_t v58 = v57[3];
        if (v59 >= v58 >> 1) {
          uint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v58 > 1), v59 + 1, 1, v57);
        }
        _OWORD v57[2] = v59 + 1;
        uint64_t v159 = v57;
        uint64_t v60 = &v57[2 * v59];
        v60[4] = v54;
        uint64_t v61 = v60 + 4;
      }
      else
      {
        uint64_t v62 = MEMORY[0x185301F50](v36, v37, v155, v38);
        uint64_t v56 = v63;
        swift_bridgeObjectRelease();
        uint64_t v64 = v159;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        }
        unint64_t v66 = v64[2];
        unint64_t v65 = v64[3];
        if (v66 >= v65 >> 1) {
          uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v65 > 1), v66 + 1, 1, v64);
        }
        uint64_t v64[2] = v66 + 1;
        uint64_t v159 = v64;
        uint64_t v67 = &v64[2 * v66];
        v67[4] = v62;
        uint64_t v61 = v67 + 4;
      }
      v61[1] = v56;
      goto LABEL_15;
    }
    uint64_t v21 = _FTSSequence.Iterator.next()();
    uint64_t v22 = v68;
    unint64_t v23 = v69;
    unsigned __int8 v24 = v70;
    uint64_t v25 = v35;
    uint64_t v26 = v33;
    if (v70 != 0xFF) {
      continue;
    }
    break;
  }
  unint64_t v5 = (const char *)v27;
LABEL_82:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (uint64_t)v5;
}

{
  uint64_t v4;
  Swift::Int isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  size_t v22[3];

  void v22[2] = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v10 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_23:
    __break(1u);
  }
  if (v10 < -1) {
    goto LABEL_23;
  }
  uint64_t v11 = v10 + 1;
  if (v10 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v13 = (char *)&v20 - v12;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v13, v11, 1, a1, a2);
    char v15 = v14;
    swift_bridgeObjectRelease();
    if (v15)
    {
      a3 = 0;
    }
    else
    {
      closure #1 in String._resolvingSymlinksInPath()((uint64_t)v13, a3, a4, (size_t *)&v21);
      if (v4) {
        swift_willThrow();
      }
      else {
        a3 = v21;
      }
    }
  }
  else
  {
    char v16 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v16, v11, 1, a1, a2);
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    if (v18)
    {
      a3 = 0;
    }
    else
    {
      closure #1 in String._resolvingSymlinksInPath()(v16, a3, a4, v22);
      if (!v4) {
        a3 = v22[0];
      }
    }
    MEMORY[0x185309510](v16, -1, -1);
  }
  swift_bridgeObjectRelease();
  return a3;
}

uint64_t _FTSSequence.Iterator.next()()
{
  int64_t v2 = (void *)(v0 + 16);
  uint64_t v1 = *(FTS **)(v0 + 16);
  if (*(unsigned char *)(v0 + 40))
  {
    if (*(unsigned char *)(v0 + 40) == 1)
    {
      *int64_t v2 = 0;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      uint64_t v3 = (FTSENT *)v1;
      *(unsigned char *)(v0 + 40) = 2;
      return (uint64_t)v3;
    }
    return 0;
  }
  uint64_t v4 = fts_read(v1);
  if (v4)
  {
    uint64_t v3 = v4;
    if (_FTSSequence.Iterator._shouldFilter(_:)((uint64_t)v4)) {
      return _FTSSequence.Iterator.next()();
    }
  }
  else
  {
    if (!MEMORY[0x185301870]())
    {
      char v9 = *(unsigned char *)(v0 + 40);
      if (!v9)
      {
        fts_close(*(FTS **)(v0 + 16));
        char v9 = *(unsigned char *)(v0 + 40);
      }
      uint64_t v10 = *(void *)(v0 + 16);
      uint64_t v11 = *(void *)(v0 + 24);
      uint64_t v12 = *(void *)(v0 + 32);
      *int64_t v2 = 0;
      *(void *)(v0 + 24) = 0;
      *(void *)(v0 + 32) = 0;
      *(unsigned char *)(v0 + 40) = 2;
      outlined consume of _FTSSequence.Iterator.State(v10, v11, v12, v9);
      return 0;
    }
    LODWORD(v3) = MEMORY[0x185301870]();
    char v5 = *(unsigned char *)(v0 + 40);
    if (!v5)
    {
      fts_close(*(FTS **)(v0 + 16));
      char v5 = *(unsigned char *)(v0 + 40);
    }
    uint64_t v6 = *(void *)(v0 + 16);
    uint64_t v7 = *(void *)(v0 + 24);
    uint64_t v8 = *(void *)(v0 + 32);
    *int64_t v2 = 0;
    *(void *)(v0 + 24) = 0;
    *(void *)(v0 + 32) = 0;
    *(unsigned char *)(v0 + 40) = 2;
    outlined consume of _FTSSequence.Iterator.State(v6, v7, v8, v5);
    String.init(cString:)();
    return v3;
  }
  return (uint64_t)v3;
}

BOOL _FTSSequence.Iterator._shouldFilter(_:)(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int64_t v2 = *(const char **)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 72);
  int v4 = *(_DWORD *)(a1 + 80);
  int v5 = *(unsigned __int16 *)(a1 + 88);
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  char v7 = v6;
  swift_release();
  if (v7) {
LABEL_44:
  }
    __break(1u);
  static String._fromUTF8Repairing(_:)();
  if (!*(_DWORD *)(v1 + 56))
  {
    v8._uint64_t countAndFlagsBits = 24366;
    v8._unint64_t object = (void *)0xE200000000000000;
    if (String.hasPrefix(_:)(v8)) {
      goto LABEL_35;
    }
  }
  uint64_t v9 = *(void *)(v1 + 64);
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    int v11 = *(_DWORD *)(v9 + 4 * v10 + 28);
    if (v5 != 1)
    {
      int v4 = v11;
      if (v5 != 6) {
        goto LABEL_30;
      }
LABEL_11:
      uint64_t v12 = *(char **)(v1 + 72);
      uint64_t v13 = *((void *)v12 + 2);
      if (!v13 || *(void *)&v12[8 * v13 + 24] != v3)
      {
LABEL_30:
        if (v4 == *(_DWORD *)(v1 + 56)) {
          goto LABEL_32;
        }
        goto LABEL_31;
      }
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v14 = *((void *)v12 + 2);
        if (v14) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v12 = (char *)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
        uint64_t v14 = *((void *)v12 + 2);
        if (v14)
        {
LABEL_15:
          *((void *)v12 + 2) = v14 - 1;
          *(void *)(v1 + 72) = v12;
          uint64_t v12 = *(char **)(v1 + 64);
          if (*((void *)v12 + 2))
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v15 = *((void *)v12 + 2);
              if (v15)
              {
LABEL_18:
                *((void *)v12 + 2) = v15 - 1;
LABEL_29:
                *(void *)(v1 + 64) = v12;
                goto LABEL_30;
              }
              goto LABEL_43;
            }
LABEL_42:
            uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
            uint64_t v15 = *((void *)v12 + 2);
            if (v15) {
              goto LABEL_18;
            }
LABEL_43:
            __break(1u);
            goto LABEL_44;
          }
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
      }
      __break(1u);
      goto LABEL_41;
    }
    if (v11 == v4) {
      goto LABEL_30;
    }
LABEL_20:
    char v16 = *(void **)(v1 + 72);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v1 + 72) = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      *(void *)(v1 + 72) = v16;
    }
    unint64_t v19 = v16[2];
    unint64_t v18 = v16[3];
    unint64_t v20 = v19 + 1;
    if (v19 >= v18 >> 1)
    {
      unint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v16);
      unint64_t v20 = v19 + 1;
      char v16 = v29;
    }
    v16[2] = v20;
    v16[v19 + 4] = v3;
    *(void *)(v1 + 72) = v16;
    uint64_t v12 = *(char **)(v1 + 64);
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v1 + 64) = v12;
    if ((v21 & 1) == 0)
    {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
      *(void *)(v1 + 64) = v12;
    }
    unint64_t v23 = *((void *)v12 + 2);
    unint64_t v22 = *((void *)v12 + 3);
    unint64_t v24 = v23 + 1;
    if (v23 >= v22 >> 1)
    {
      unsigned __int8 v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v12);
      unint64_t v24 = v23 + 1;
      uint64_t v12 = v30;
    }
    *((void *)v12 + 2) = v24;
    *(_DWORD *)&v12[4 * v23 + 32] = v4;
    goto LABEL_29;
  }
  if (v5 == 1) {
    goto LABEL_20;
  }
  if (v5 == 6)
  {
    int v4 = 0;
    goto LABEL_11;
  }
  if (*(_DWORD *)(v1 + 56))
  {
    int v4 = 0;
LABEL_31:
    bzero(&v31, 0x878uLL);
    int v25 = statfs(v2, &v31);
    *(unsigned char *)(v1 + 80) = (v25 | v31.f_flags & 0x8000) == 0;
    *(_DWORD *)(v1 + 56) = v4;
  }
LABEL_32:
  if (*(unsigned char *)(v1 + 80) != 1)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    return 0;
  }
  v26._uint64_t countAndFlagsBits = 24366;
  v26._unint64_t object = (void *)0xE200000000000000;
  Swift::Bool v27 = String.hasPrefix(_:)(v26);
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t outlined consume of _FTSSequence.Element(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of _FTSSequence.Element?(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255) {
    return outlined consume of _FTSSequence.Element(result, a2, a3, a4 & 1);
  }
  return result;
}

uint64_t _FTSSequence.Iterator.__deallocating_deinit()
{
  char v1 = *(unsigned char *)(v0 + 40);
  if (!v1)
  {
    fts_close(*(FTS **)(v0 + 16));
    char v1 = *(unsigned char *)(v0 + 40);
  }
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 40) = 2;
  outlined consume of _FTSSequence.Iterator.State(v2, v3, v4, v1);
  outlined consume of _FTSSequence.Iterator.State(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t outlined consume of _FTSSequence.Iterator.State(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void static Duration.UnitsFormatStyle.UnitWidth.narrow.getter(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 2;
  *(_DWORD *)(a1 + 4) = 2;
}

ValueMetadata *type metadata accessor for NSRunLoop.SchedulerTimeType()
{
  return &type metadata for NSRunLoop.SchedulerTimeType;
}

Swift::Double __swiftcall Date.distance(to:)(Foundation::Date to)
{
  return *v1 - *v2;
}

ValueMetadata *type metadata accessor for _XMLPlistEncodingFormat.Reference()
{
  return &type metadata for _XMLPlistEncodingFormat.Reference;
}

void *String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[1] = 0;
  a3[2] = 0xE000000000000000;
  if (a2 + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    BOOL v5 = __OFADD__(result, 2 * a2);
    uint64_t result = (void *)((char *)result + 2 * a2);
    if (!v5)
    {
      MEMORY[0x185301FA0](result);
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0, MEMORY[0x1E4FBC860]);
      *a3 = result;
      return result;
    }
  }
  __break(1u);
  return result;
}

void static Date.FormatStyle.Symbol.CyclicYear.narrow.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t URLResourceValues.generationIdentifier.getter()
{
  return URLResourceValues.fileResourceIdentifier.getter(MEMORY[0x1E4F1C600]);
}

uint64_t DateComponents.quarter.getter()
{
  return *(void *)(v0 + 208);
}

uint64_t DateComponents.era.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t DateComponents.weekdayOrdinal.getter()
{
  return *(void *)(v0 + 192);
}

uint64_t DateComponents.weekOfMonth.getter()
{
  return *(void *)(v0 + 240);
}

uint64_t DateComponents.nanosecond.getter()
{
  return *(void *)(v0 + 160);
}

uint64_t PredicateExpressions.Variable.description.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 41;
  v1._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x656C626169726156;
}

uint64_t storeEnumTagSinglePayload for KeyPathComparator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.FormatStyle()
{
  return swift_getWitnessTable();
}

uint64_t equalBoundPath(id *a1, id *a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v4 = objc_opt_class();
  if (v4 == objc_opt_class() && (uint64_t v5 = [a1 rootObject], v5 == objc_msgSend(a2, "rootObject"))) {
    return [a1[2] isEqualToString:a2[2]];
  }
  else {
    return 0;
  }
}

uint64_t URLResourceValues.allValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NSFileHandle.write<A>(contentsOf:)(int64_t a1, ValueMetadata *a2, void (**a3)(ValueMetadata *))
{
  int64_t AssociatedConformanceWitness = a1;
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  swift_getAssociatedTypeWitness();
  uint64_t v90 = a3;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v83 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v80 - v11);
  uint64_t v91 = swift_getAssociatedTypeWitness();
  uint64_t v85 = *(void *)(v91 - 8);
  MEMORY[0x1F4188790](v91);
  uint64_t v89 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  unsigned int v86 = (char *)&v80 - v14;
  uint64_t v84 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v82 = (char *)&v80 - v19;
  uint64_t v20 = swift_checkMetadataState();
  MEMORY[0x1F4188790](v20);
  if (a2 == &type metadata for Data) {
    return specialized NSFileHandle.write<A>(contentsOf:)(*(void *)AssociatedConformanceWitness, *(void *)(AssociatedConformanceWitness + 8));
  }
  if ((ValueMetadata *)type metadata accessor for DispatchData() == a2) {
    return specialized NSFileHandle.write<A>(contentsOf:)();
  }
  uint64_t v88 = a2;
  id v21 = v92;
  if ((_NSFileHandleIsClosed((uint64_t)v92) & 1) == 0)
  {
    if (!_NSFileHandleCanPerformWritingInSwiftOverlay(v21)
      || (objc_msgSend(v21, sel_fileDescriptor) & 0x80000000) != 0)
    {
      v90[8](v88);
      dispatch thunk of Sequence.makeIterator()();
      unint64_t v39 = v89;
      int64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v49 = v84;
      uint64_t v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
      unsigned int v86 = (char *)(v84 + 48);
      uint64_t v83 = v50;
      if (v50(v9, 1, AssociatedTypeWitness) != 1)
      {
        uint64_t v84 = *(void *)(v49 + 32);
        uint64_t v51 = (void (**)(char *, uint64_t))(v49 + 8);
        uint64_t v82 = (char *)(MEMORY[0x1E4FBC848] + 8);
        do
        {
          uint64_t v52 = ((uint64_t (*)(char *, char *, uint64_t))v84)(v17, v9, AssociatedTypeWitness);
          MEMORY[0x1F4188790](v52);
          *(&v80 - 2) = (uint64_t)v92;
          uint64_t v53 = swift_getAssociatedConformanceWitness();
          (*(void (**)(unsigned char *(*)(unsigned char *, unsigned char *), uint64_t *, char *, uint64_t, uint64_t))(v53 + 8))(partial apply for closure #1 in NSFileHandle.write<A>(contentsOf:), &v80 - 4, v82, AssociatedTypeWitness, v53);
          if (v3)
          {
            (*v51)(v17, AssociatedTypeWitness);
            return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v89, v91);
          }
          (*v51)(v17, AssociatedTypeWitness);
          unint64_t v39 = v89;
          dispatch thunk of IteratorProtocol.next()();
        }
        while (v83(v9, 1, AssociatedTypeWitness) != 1);
      }
    }
    else
    {
      v90[8](v88);
      uint64_t v38 = v86;
      dispatch thunk of Sequence.makeIterator()();
      unint64_t v39 = v38;
      uint64_t v40 = (char *)swift_getAssociatedConformanceWitness();
      uint64_t v41 = (char *)v83;
      uint64_t v89 = v40;
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v42 = v84;
      uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
      int64_t AssociatedConformanceWitness = v84 + 48;
      uint64_t v81 = v43;
      if (v43(v41, 1, AssociatedTypeWitness) != 1)
      {
        uint64_t v84 = *(void *)(v42 + 32);
        char v44 = (void (**)(char *, uint64_t))(v42 + 8);
        uint64_t v80 = MEMORY[0x1E4FBC848] + 8;
        unint64_t v45 = v82;
        do
        {
          ((void (*)(char *, char *, uint64_t))v84)(v45, v41, AssociatedTypeWitness);
          id v46 = objc_msgSend(v92, sel_fileDescriptor);
          MEMORY[0x1F4188790](v46);
          *((_DWORD *)&v80 - 4) = v47;
          uint64_t v48 = swift_getAssociatedConformanceWitness();
          (*(void (**)(ssize_t (*)(ssize_t, uint64_t), uint64_t *, uint64_t, uint64_t, uint64_t))(v48 + 8))(partial apply for closure #1 in writeSingleRegion #1 <A><A1>(_:) in NSFileHandle.write<A>(contentsOf:), &v80 - 4, v80, AssociatedTypeWitness, v48);
          if (v3)
          {
            (*v44)(v45, AssociatedTypeWitness);
            return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v86, v91);
          }
          (*v44)(v45, AssociatedTypeWitness);
          unint64_t v39 = v86;
          dispatch thunk of IteratorProtocol.next()();
        }
        while (v81(v41, 1, AssociatedTypeWitness) != 1);
      }
    }
    return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v39, v91);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  *(void *)&long long v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *((void *)&v103 + 1) = v23;
  uint64_t v24 = MEMORY[0x1E4FBB1A0];
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = v24;
  *(void *)(inited + 72) = 0xD00000000000002ELL;
  *(void *)(inited + 80) = 0x80000001823AB290;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v25 = static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (AnyHashable, Any)(inited + 32, (uint64_t)&v103);
  swift_retain();
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v103);
  if (v27)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v28 = (v26 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v29 = *(void *)(v25 + 64 + v28) | (1 << v26);
  uint64_t v88 = (ValueMetadata *)(v25 + 64);
  *(void *)(v25 + 64 + v28) = v29;
  uint64_t v30 = *(void *)(v25 + 48) + 40 * v26;
  long long v31 = v103;
  long long v32 = v104;
  *(void *)(v30 + 32) = *(void *)&v105[0];
  *(_OWORD *)uint64_t v30 = v31;
  *(_OWORD *)(v30 + 16) = v32;
  outlined init with take of Any((_OWORD *)((char *)v105 + 8), (_OWORD *)(*(void *)(v25 + 56) + 32 * v26));
  uint64_t v33 = *(void *)(v25 + 16);
  BOOL v34 = __OFADD__(v33, 1);
  uint64_t v35 = v33 + 1;
  if (v34)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  *(void *)(v25 + 16) = v35;
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v25 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    unint64_t v36 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v36 = (void *)MEMORY[0x1E4FBC868];
  }
  uint64_t v54 = -1;
  uint64_t v55 = -1 << *(unsigned char *)(v25 + 32);
  uint64_t v85 = ~v55;
  if (-v55 < 64) {
    uint64_t v54 = ~(-1 << -(char)v55);
  }
  unint64_t v56 = v54 & *(void *)(v25 + 64);
  uint64_t v91 = (uint64_t)v101 + 8;
  id v92 = (char *)v105 + 8;
  uint64_t v89 = (char *)&v98;
  uint64_t v90 = (void (**)(ValueMetadata *))&v96;
  unsigned int v86 = (char *)(v36 + 8);
  int64_t AssociatedConformanceWitness = (unint64_t)(63 - v55) >> 6;
  swift_retain();
  int64_t v57 = 0;
  while (1)
  {
    if (v56)
    {
      uint64_t v61 = (v56 - 1) & v56;
      unint64_t v62 = __clz(__rbit64(v56)) | (v57 << 6);
      int64_t v63 = v57;
      goto LABEL_50;
    }
    int64_t v64 = v57 + 1;
    if (__OFADD__(v57, 1)) {
      goto LABEL_62;
    }
    if (v64 >= AssociatedConformanceWitness) {
      break;
    }
    unint64_t v65 = *(&v88->Kind + v64);
    int64_t v63 = v57 + 1;
    if (!v65)
    {
      int64_t v63 = v57 + 2;
      if (v57 + 2 >= AssociatedConformanceWitness) {
        break;
      }
      unint64_t v65 = *(&v88->Kind + v63);
      if (!v65)
      {
        int64_t v63 = v57 + 3;
        if (v57 + 3 >= AssociatedConformanceWitness) {
          break;
        }
        unint64_t v65 = *(&v88->Kind + v63);
        if (!v65)
        {
          int64_t v63 = v57 + 4;
          if (v57 + 4 >= AssociatedConformanceWitness) {
            break;
          }
          unint64_t v65 = *(&v88->Kind + v63);
          if (!v65)
          {
            int64_t v63 = v57 + 5;
            if (v57 + 5 >= AssociatedConformanceWitness) {
              break;
            }
            unint64_t v65 = *(&v88->Kind + v63);
            if (!v65)
            {
              int64_t v63 = v57 + 6;
              if (v57 + 6 >= AssociatedConformanceWitness) {
                break;
              }
              unint64_t v65 = *(&v88->Kind + v63);
              if (!v65)
              {
                int64_t v66 = v57 + 7;
                if (v57 + 7 >= AssociatedConformanceWitness) {
                  break;
                }
                unint64_t v65 = *(&v88->Kind + v66);
                if (!v65)
                {
                  while (1)
                  {
                    int64_t v63 = v66 + 1;
                    if (__OFADD__(v66, 1)) {
                      break;
                    }
                    if (v63 >= AssociatedConformanceWitness) {
                      goto LABEL_56;
                    }
                    unint64_t v65 = *(&v88->Kind + v63);
                    ++v66;
                    if (v65) {
                      goto LABEL_49;
                    }
                  }
LABEL_65:
                  __break(1u);
                }
                int64_t v63 = v57 + 7;
              }
            }
          }
        }
      }
    }
LABEL_49:
    uint64_t v61 = (v65 - 1) & v65;
    unint64_t v62 = __clz(__rbit64(v65)) + (v63 << 6);
LABEL_50:
    outlined init with copy of AnyHashable(*(void *)(v25 + 48) + 40 * v62, (uint64_t)&v103);
    outlined init with copy of Any(*(void *)(v25 + 56) + 32 * v62, (uint64_t)v92);
    v101[0] = v105[0];
    v101[1] = v105[1];
    uint64_t v102 = v106;
    v100[0] = v103;
    v100[1] = v104;
    outlined init with copy of AnyHashable((uint64_t)v100, (uint64_t)v95);
    if (!swift_dynamicCast())
    {
      uint64_t v93 = 0;
      uint64_t v94 = 0;
      outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v100);
      swift_bridgeObjectRelease();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_release();
      goto LABEL_57;
    }
    uint64_t v67 = v93;
    uint64_t v68 = v94;
    outlined init with copy of Any(v91, (uint64_t)v95);
    outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v100);
    unint64_t v69 = v90;
    outlined init with take of Any(v95, v90);
    *(void *)&long long v97 = v67;
    *((void *)&v97 + 1) = v68;
    unsigned __int8 v70 = v69;
    uint64_t v71 = v89;
    outlined init with take of Any(v70, v89);
    long long v72 = v97;
    outlined init with take of Any(v71, v99);
    outlined init with take of Any(v99, &v97);
    unint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)(v72, *((uint64_t *)&v72 + 1));
    unint64_t v74 = v73;
    if (v75)
    {
      uint64_t v58 = v25;
      unint64_t v59 = (_OWORD *)(v36[6] + 16 * v73);
      swift_bridgeObjectRelease();
      *unint64_t v59 = v72;
      uint64_t v25 = v58;
      uint64_t v60 = (_OWORD *)(v36[7] + 32 * v74);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
      outlined init with take of Any(&v97, v60);
      goto LABEL_27;
    }
    if (v36[2] >= v36[3])
    {
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    *(void *)&v86[(v73 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v73;
    *(_OWORD *)(v36[6] + 16 * v73) = v72;
    outlined init with take of Any(&v97, (_OWORD *)(v36[7] + 32 * v73));
    uint64_t v76 = v36[2];
    BOOL v34 = __OFADD__(v76, 1);
    uint64_t v77 = v76 + 1;
    if (v34) {
      goto LABEL_61;
    }
    v36[2] = v77;
LABEL_27:
    int64_t v57 = v63;
    unint64_t v56 = v61;
  }
LABEL_56:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_57:
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v78 = objc_allocWithZone((Class)NSError);
  uint64_t v79 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v78, sel_initWithDomain_code_userInfo_, v79, 512, _NativeDictionary.bridged()());
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_willThrow();
}

uint64_t specialized NSFileHandle.write<A>(contentsOf:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if ((_NSFileHandleIsClosed((uint64_t)v3) & 1) == 0)
  {
    if (!_NSFileHandleCanPerformWritingInSwiftOverlay(v3)
      || (objc_msgSend(v3, sel_fileDescriptor) & 0x80000000) != 0)
    {
      outlined copy of Data._Representation(a1, a2);
      specialized Data._Representation.withUnsafeBytes<A>(_:)(a1, a2, v3);
    }
    else
    {
      outlined copy of Data._Representation(a1, a2);
      int v19 = objc_msgSend(v3, sel_fileDescriptor);
      switch(a2 >> 62)
      {
        case 1uLL:
          uint64_t v49 = (a1 >> 32) - (int)a1;
          if (a1 >> 32 < (int)a1) {
            goto LABEL_70;
          }
          uint64_t v50 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
          if (!v50) {
            goto LABEL_61;
          }
          uint64_t v51 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          if (__OFSUB__((int)a1, v51)) {
            goto LABEL_72;
          }
          id v21 = (long long *)(v50 + (int)a1 - v51);
          if (*(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) < v49) {
            uint64_t v49 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
          }
          uint64_t v20 = (char *)v21 + v49;
          goto LABEL_62;
        case 2uLL:
          uint64_t v52 = *(void *)(a1 + 16);
          uint64_t v53 = *(void *)(a1 + 24);
          uint64_t v54 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
          if (v54)
          {
            uint64_t v55 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
            BOOL v16 = __OFSUB__(v52, v55);
            uint64_t v56 = v52 - v55;
            if (v16) {
              goto LABEL_73;
            }
            BOOL v16 = __OFSUB__(v53, v52);
            uint64_t v57 = v53 - v52;
            if (v16) {
              goto LABEL_71;
            }
            id v21 = (long long *)(v54 + v56);
            uint64_t v58 = *(void *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
            if (v58 >= v57) {
              uint64_t v58 = v57;
            }
            uint64_t v20 = (char *)v21 + v58;
          }
          else
          {
            if (__OFSUB__(v53, v52)) {
              goto LABEL_71;
            }
LABEL_61:
            id v21 = 0;
            uint64_t v20 = 0;
          }
LABEL_62:
          closure #1 in writeSingleRegion #1 <A><A1>(_:) in NSFileHandle.write<A>(contentsOf:)((ssize_t)v21, (uint64_t)v20, v19);
          break;
        case 3uLL:
          *(void *)((char *)&v72 + 6) = 0;
          *(void *)&long long v72 = 0;
          id v21 = &v72;
          uint64_t v20 = (char *)&v72;
          goto LABEL_62;
        default:
          *(void *)&long long v72 = a1;
          WORD4(v72) = a2;
          BYTE10(v72) = BYTE2(a2);
          BYTE11(v72) = BYTE3(a2);
          BYTE12(v72) = BYTE4(a2);
          BYTE13(v72) = BYTE5(a2);
          uint64_t v20 = (char *)&v72 + BYTE6(a2);
          id v21 = &v72;
          goto LABEL_62;
      }
    }
    return outlined consume of Data._Representation(a1, a2);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  *(void *)&long long v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *((void *)&v72 + 1) = v7;
  uint64_t v8 = MEMORY[0x1E4FBB1A0];
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = v8;
  *(void *)(inited + 72) = 0xD00000000000002ELL;
  *(void *)(inited + 80) = 0x80000001823AB290;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v9 = static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (AnyHashable, Any)(inited + 32, (uint64_t)&v72);
  swift_retain();
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v72);
  if (v11)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  uint64_t v60 = v9 + 64;
  *(void *)(v9 + 64 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
  uint64_t v12 = *(void *)(v9 + 48) + 40 * v10;
  long long v13 = v72;
  long long v14 = v73;
  *(void *)(v12 + 32) = *(void *)&v74[0];
  *(_OWORD *)uint64_t v12 = v13;
  *(_OWORD *)(v12 + 16) = v14;
  outlined init with take of Any((_OWORD *)((char *)v74 + 8), (_OWORD *)(*(void *)(v9 + 56) + 32 * v10));
  uint64_t v15 = *(void *)(v9 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  *(void *)(v9 + 16) = v17;
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v9 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v18 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v18 = (void *)MEMORY[0x1E4FBC868];
  }
  uint64_t v22 = -1;
  uint64_t v23 = -1 << *(unsigned char *)(v9 + 32);
  if (-v23 < 64) {
    uint64_t v22 = ~(-1 << -(char)v23);
  }
  unint64_t v24 = v22 & *(void *)(v9 + 64);
  int64_t v59 = (unint64_t)(63 - v23) >> 6;
  uint64_t v25 = (char *)v74 + 8;
  unint64_t v26 = (char *)v70 + 8;
  char v27 = &v65;
  swift_retain();
  for (int64_t i = 0; ; int64_t i = v62)
  {
    if (v24)
    {
      uint64_t v61 = (v24 - 1) & v24;
      int64_t v62 = i;
      unint64_t v35 = __clz(__rbit64(v24)) | (i << 6);
      goto LABEL_39;
    }
    int64_t v36 = i + 1;
    if (__OFADD__(i, 1)) {
      goto LABEL_66;
    }
    if (v36 >= v59) {
      break;
    }
    unint64_t v37 = *(void *)(v60 + 8 * v36);
    int64_t v38 = i + 1;
    if (!v37)
    {
      int64_t v38 = i + 2;
      if (i + 2 >= v59) {
        break;
      }
      unint64_t v37 = *(void *)(v60 + 8 * v38);
      if (!v37)
      {
        int64_t v38 = i + 3;
        if (i + 3 >= v59) {
          break;
        }
        unint64_t v37 = *(void *)(v60 + 8 * v38);
        if (!v37)
        {
          int64_t v38 = i + 4;
          if (i + 4 >= v59) {
            break;
          }
          unint64_t v37 = *(void *)(v60 + 8 * v38);
          if (!v37)
          {
            int64_t v38 = i + 5;
            if (i + 5 >= v59) {
              break;
            }
            unint64_t v37 = *(void *)(v60 + 8 * v38);
            if (!v37)
            {
              int64_t v38 = i + 6;
              if (i + 6 >= v59) {
                break;
              }
              unint64_t v37 = *(void *)(v60 + 8 * v38);
              if (!v37)
              {
                uint64_t v39 = i + 7;
                if (i + 7 >= v59) {
                  break;
                }
                unint64_t v37 = *(void *)(v60 + 8 * v39);
                if (!v37)
                {
                  while (1)
                  {
                    int64_t v38 = v39 + 1;
                    if (__OFADD__(v39, 1)) {
                      break;
                    }
                    if (v38 >= v59) {
                      goto LABEL_45;
                    }
                    unint64_t v37 = *(void *)(v60 + 8 * v38);
                    ++v39;
                    if (v37) {
                      goto LABEL_38;
                    }
                  }
LABEL_69:
                  __break(1u);
LABEL_70:
                  __break(1u);
LABEL_71:
                  __break(1u);
LABEL_72:
                  __break(1u);
LABEL_73:
                  __break(1u);
                }
                int64_t v38 = i + 7;
              }
            }
          }
        }
      }
    }
LABEL_38:
    uint64_t v61 = (v37 - 1) & v37;
    int64_t v62 = v38;
    unint64_t v35 = __clz(__rbit64(v37)) + (v38 << 6);
LABEL_39:
    outlined init with copy of AnyHashable(*(void *)(v9 + 48) + 40 * v35, (uint64_t)&v72);
    outlined init with copy of Any(*(void *)(v9 + 56) + 32 * v35, (uint64_t)v25);
    v70[0] = v74[0];
    v70[1] = v74[1];
    uint64_t v71 = v75;
    v69[0] = v72;
    v69[1] = v73;
    outlined init with copy of AnyHashable((uint64_t)v69, (uint64_t)&v64);
    if (!swift_dynamicCast())
    {
      outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v69);
      swift_bridgeObjectRelease();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_release();
      goto LABEL_46;
    }
    outlined init with copy of Any((uint64_t)v26, (uint64_t)&v64);
    outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v69);
    outlined init with take of Any(&v64, v27);
    long long v66 = v63;
    outlined init with take of Any(v27, v67);
    long long v40 = v66;
    outlined init with take of Any(v67, v68);
    outlined init with take of Any(v68, &v66);
    unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v40, *((uint64_t *)&v40 + 1));
    unint64_t v42 = v41;
    if (v43)
    {
      uint64_t v29 = v27;
      uint64_t v30 = v26;
      long long v31 = v25;
      uint64_t v32 = v9;
      uint64_t v33 = (_OWORD *)(v18[6] + 16 * v41);
      swift_bridgeObjectRelease();
      *uint64_t v33 = v40;
      uint64_t v9 = v32;
      uint64_t v25 = v31;
      unint64_t v26 = v30;
      char v27 = v29;
      BOOL v34 = (_OWORD *)(v18[7] + 32 * v42);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
      outlined init with take of Any(&v66, v34);
      goto LABEL_16;
    }
    if (v18[2] >= v18[3])
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    *(void *)((char *)v18 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v41;
    *(_OWORD *)(v18[6] + 16 * v41) = v40;
    outlined init with take of Any(&v66, (_OWORD *)(v18[7] + 32 * v41));
    uint64_t v44 = v18[2];
    BOOL v16 = __OFADD__(v44, 1);
    uint64_t v45 = v44 + 1;
    if (v16) {
      goto LABEL_65;
    }
    void v18[2] = v45;
LABEL_16:
    unint64_t v24 = v61;
  }
LABEL_45:
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_46:
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v46 = objc_allocWithZone((Class)NSError);
  uint64_t v47 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v46, sel_initWithDomain_code_userInfo_, v47, 512, _NativeDictionary.bridged()());
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_willThrow();
}

void sub_1819C59EC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 232), 8);
  _Unwind_Resume(a1);
}

uint64_t _NSFileHandleIsClosed(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned __int16 *)(a1 + 100));
  return (v1 >> 2) & 1;
}

BOOL _NSFileHandleCanPerformWritingInSwiftOverlay(void *a1)
{
  if ([a1 fileDescriptor] == -1) {
    return 0;
  }
  uint64_t v2 = [a1 methodForSelector:sel_writeData_error_];
  if (v2 == +[NSConcreteFileHandle instanceMethodForSelector:sel_writeData_error_])return 1; {
  uint64_t v3 = [a1 methodForSelector:sel_writeData_];
  }
  return v3 == +[NSConcreteFileHandle instanceMethodForSelector:sel_writeData_];
}

ssize_t closure #1 in writeSingleRegion #1 <A><A1>(_:) in NSFileHandle.write<A>(contentsOf:)(ssize_t __buf, uint64_t a2, int __fd)
{
  if (__buf)
  {
    uint64_t v3 = (char *)__buf;
    int64_t v4 = a2 - __buf;
    if (a2 - __buf >= 1)
    {
      do
      {
        while (1)
        {
          __buf = write(__fd, v3, v4);
          if (__buf < 0) {
            break;
          }
          v4 -= __buf;
          v3 += __buf;
          if (v4 <= 0) {
            return __buf;
          }
        }
      }
      while (MEMORY[0x185301870]() == 35);
      int v6 = MEMORY[0x185301870]();
      __buf = _NSErrorWithFilePathAndErrno(v6, 0, 0);
      if (__buf) {
        return swift_willThrow();
      }
      else {
        __break(1u);
      }
    }
  }
  return __buf;
}

id @objc static NSCalendar._autoupdatingCurrent.getter()
{
  id v0 = specialized static NSCalendar._autoupdatingCurrent.getter();

  return v0;
}

id specialized static NSCalendar._autoupdatingCurrent.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static CalendarCache.cache + 16;
  unsigned int v1 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v0, (uint64_t *)&v9);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  uint64_t v2 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  long long v7 = v9;
  uint64_t v3 = (char *)objc_allocWithZone(v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 16) = v7;
  *(void *)&v3[OBJC_IVAR____NSSwiftCalendar__lock] = v4;
  uint64_t v5 = *MEMORY[0x1E4F1C318];
  v8.receiver = v3;
  v8.super_class = v2;
  id result = objc_msgSendSuper2(&v8, sel_initWithCheckedCalendarIdentifier_, v5);
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t AttributedString.init<A>(markdown:including:options:baseURL:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>)
{
  char v9 = *(unsigned char *)(a3 + 1);
  char v10 = *(unsigned char *)(a3 + 2);
  uint64_t v11 = *(void *)(a3 + 8);
  uint64_t v12 = *(void *)(a3 + 16);
  char v13 = *(unsigned char *)(a3 + 24);
  long long v14 = *(void **)a4;
  uint64_t v15 = *(void *)(a4 + 8);
  uint64_t v16 = *(void *)(a4 + 16);
  v19[0] = 1;
  v19[1] = v9;
  v19[2] = v10;
  uint64_t v20 = v11;
  uint64_t v21 = v12;
  char v22 = v13;
  v18[0] = v14;
  v18[1] = v15;
  void v18[2] = v16;
  static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(&v23, a1, a2, a5, v19, (uint64_t)v18, a5, a6);
  swift_bridgeObjectRelease();
  outlined consume of URL?(v14);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v7) {
    *a7 = v23;
  }
  return result;
}

uint64_t static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v42 = a8;
  char v11 = *a5;
  char v12 = a5[1];
  char v13 = a5[2];
  uint64_t v15 = *((void *)a5 + 1);
  uint64_t v14 = *((void *)a5 + 2);
  char v16 = a5[24];
  uint64_t v17 = *(void **)a6;
  uint64_t v27 = *(void *)(a6 + 8);
  uint64_t v28 = *(void *)(a6 + 16);
  swift_bridgeObjectRetain();
  if ((a3 & 0x1000000000000000) != 0)
  {
    a2 = static String._copying(_:)();
    unint64_t v25 = v22;
    swift_bridgeObjectRelease();
    a3 = v25;
    if ((v25 & 0x2000000000000000) == 0)
    {
LABEL_3:
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v18 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v19 = a2 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v18 = _StringObject.sharedUTF8.getter();
      }
      char v33 = v11;
      if (v18) {
        uint64_t v20 = v18 + v19;
      }
      else {
        uint64_t v20 = 0;
      }
      char v34 = v12;
      char v35 = v13;
      uint64_t v36 = v15;
      uint64_t v37 = v14;
      char v38 = v16;
      uint64_t v30 = v17;
      uint64_t v31 = v27;
      uint64_t v32 = v28;
      char v21 = static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(&v40, v18, v20, a4, (uint64_t)&v33, &v30);
      if (!v8)
      {
        LOBYTE(v14) = v21;
        swift_bridgeObjectRelease();
LABEL_14:
        *a1 = v40;
        return v14 & 1;
      }
      goto LABEL_12;
    }
  }
  else if ((a3 & 0x2000000000000000) == 0)
  {
    goto LABEL_3;
  }
  v39[0] = a2;
  v39[1] = a3 & 0xFFFFFFFFFFFFFFLL;
  char v33 = v11;
  char v34 = v12;
  char v35 = v13;
  uint64_t v36 = v15;
  uint64_t v37 = v14;
  char v38 = v16;
  uint64_t v30 = v17;
  uint64_t v31 = v27;
  uint64_t v32 = v28;
  char v23 = static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(&v40, (uint64_t)v39, (uint64_t)v39 + (HIBYTE(a3) & 0xF), a4, (uint64_t)&v33, &v30);
  if (!v8)
  {
    char v41 = v23 & 1;
    swift_bridgeObjectRelease();
    LOBYTE(v14) = v41;
    goto LABEL_14;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  return v14 & 1;
}

uint64_t static AttributedString._parseMarkdown<A>(markdownData:including:options:baseURL:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unint64_t v25 = *a6;
    char v9 = *(unsigned char *)(a5 + 24);
    uint64_t v10 = *(void *)(a5 + 8);
    uint64_t v11 = *(void *)(a5 + 16);
    char v12 = *(unsigned char *)(a5 + 2);
    char v13 = *(unsigned char *)(a5 + 1);
    LOBYTE(v27) = *(unsigned char *)a5;
    char v14 = (char)v27;
    BYTE1(v27) = v13;
    BYTE2(v27) = v12;
    uint64_t v28 = v10;
    uint64_t v29 = v11;
    char v30 = v9;
    objc_allocWithZone((Class)type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete());
    swift_bridgeObjectRetain();
    uint64_t v15 = (void *)_AttributedStringFromMarkdownCreatorConcrete.init(scope:options:)(a4, (unsigned __int8 *)&v27);
    type metadata accessor for NSAttributedStringMarkdownParsingOptions();
    LOBYTE(v27) = v14;
    BYTE1(v27) = v13;
    BYTE2(v27) = v12;
    uint64_t v28 = v10;
    uint64_t v29 = v11;
    char v30 = v9;
    swift_bridgeObjectRetain();
    char v16 = v15;
    uint64_t v17 = (NSAttributedStringMarkdownParsingOptions *)NSAttributedStringMarkdownParsingOptions.init(_:)((unsigned __int8 *)&v27);
    if (v25) {
      id v18 = v25;
    }
    else {
      id v18 = 0;
    }
    uint64_t v27 = 0;
    char v19 = _NSAttributedStringFromMarkdownWithCreator(v16, a2, a3 - a2, v17, (uint64_t)v18, &v27);

    uint64_t v20 = v27;
    if ((v19 & 1) != 0 || !v27)
    {
      *a1 = *(void *)&v16[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str];
      char v13 = v16[direct field offset for _AttributedStringFromMarkdownCreatorConcrete.hasInflectionAttributes];
      unint64_t v22 = v20;
      swift_retain();
    }
    else
    {
      char v21 = v27;
      swift_willThrow();
    }
  }
  else
  {
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v31, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v27);
    char v13 = 0;
    *a1 = v27;
  }
  return v13 & 1;
}

unint64_t type metadata accessor for NSAttributedStringMarkdownParsingOptions()
{
  unint64_t result = lazy cache variable for type metadata for NSAttributedStringMarkdownParsingOptions;
  if (!lazy cache variable for type metadata for NSAttributedStringMarkdownParsingOptions)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSAttributedStringMarkdownParsingOptions);
  }
  return result;
}

id NSAttributedStringMarkdownParsingOptions.init(_:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v5 = a1[24];
  id v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v6, sel_setAllowsExtendedAttributes_, v1);
  objc_msgSend(v6, sel_setInterpretedSyntax_, v2);
  objc_msgSend(v6, sel_setFailurePolicy_, v3);
  if (v4) {
    uint64_t v7 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    uint64_t v7 = 0;
  }
  objc_msgSend(v6, sel_setLanguageCode_, v7);

  objc_msgSend(v6, sel_setAppliesSourcePositionAttributes_, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t appendNodeText(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, NSError **a10)
{
  literal = (const char *)_NS_cmark_node_get_literal(a3);
  if (!literal) {
    return 1;
  }
  char v19 = [[NSString alloc] initWithBytesNoCopy:literal length:strlen(literal) encoding:4 freeWhenDone:0];
  if (v19)
  {
    uint64_t v20 = v19;
    if ([a2 appliesSourcePositionAttributes])
    {
      uint64_t v27 = [NSAttributedStringMarkdownSourcePosition alloc];
      uint64_t start_line = (int)_NS_cmark_node_get_start_line(a3);
      start_columuint64_t n = (int)_NS_cmark_node_get_start_column(a3);
      uint64_t end_line = (int)_NS_cmark_node_get_end_line(a3);
      char v23 = [(NSAttributedStringMarkdownSourcePosition *)v27 initWithStartLine:start_line startColumn:start_column endLine:end_line endColumn:(int)_NS_cmark_node_get_end_column(a3)];
      [(NSAttributedStringMarkdownSourcePosition *)v23 setOffsetsFromUTF8:a7 size:a8 usingCache:a9];
    }
    else
    {
      char v23 = 0;
    }
    appendStringWithSourcePosition(a1, (uint64_t)v20, a4, a5, a6, (uint64_t)v23);

    return 1;
  }
  if ([a2 failurePolicy]) {
    return 1;
  }
  if (!a10) {
    return 0;
  }
  unint64_t v24 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:259 userInfo:0];
  uint64_t result = 0;
  *a10 = v24;
  return result;
}

void appendStringWithSourcePosition(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  if (a6)
  {
    id v12 = (id)[a5 mutableCopy];
    [v12 setObject:a6 forKey:@"NSMarkdownSourcePosition"];
    objc_msgSend(a1, "appendString:with:", a2, attributesForIntents(a3, a4, v12));
  }
  else
  {
    id v11 = attributesForIntents(a3, a4, a5);
    [a1 appendString:a2 with:v11];
  }
}

id attributesForIntents(uint64_t a1, uint64_t a2, void *a3)
{
  void v17[2] = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    v16[0] = @"NSInlinePresentationIntent";
    v16[1] = @"NSPresentationIntent";
    v17[0] = +[NSNumber numberWithUnsignedInteger:a1];
    v17[1] = a2;
    uint64_t v5 = (void *)MEMORY[0x1E4F1C9E8];
    id v6 = (NSNumber **)v17;
    uint64_t v7 = (__CFString **)v16;
    uint64_t v8 = 2;
    goto LABEL_9;
  }
  if (a2)
  {
    char v14 = @"NSPresentationIntent";
    uint64_t v15 = a2;
    uint64_t v5 = (void *)MEMORY[0x1E4F1C9E8];
    id v6 = (NSNumber **)&v15;
    uint64_t v7 = &v14;
LABEL_8:
    uint64_t v8 = 1;
LABEL_9:
    char v9 = (void *)[v5 dictionaryWithObjects:v6 forKeys:v7 count:v8];
    if (!a3) {
      return v9;
    }
    goto LABEL_10;
  }
  if (a1)
  {
    id v12 = @"NSInlinePresentationIntent";
    char v13 = +[NSNumber numberWithUnsignedInteger:a1];
    uint64_t v5 = (void *)MEMORY[0x1E4F1C9E8];
    id v6 = &v13;
    uint64_t v7 = &v12;
    goto LABEL_8;
  }
  char v9 = (void *)MEMORY[0x1E4F1CC08];
  if (!a3) {
    return v9;
  }
LABEL_10:
  if ([a3 count])
  {
    uint64_t v10 = (void *)[v9 mutableCopy];
    [v10 addEntriesFromDictionary:a3];
    return v10;
  }
  return v9;
}

uint64_t _NSAttributedStringFromMarkdownWithCreator(void *a1, uint64_t a2, uint64_t a3, NSAttributedStringMarkdownParsingOptions *a4, uint64_t a5, NSError **a6)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  if (_NSAttributedStringLoadCMarkIfNeeded_onceToken != -1) {
    dispatch_once(&_NSAttributedStringLoadCMarkIfNeeded_onceToken, &__block_literal_global_31);
  }
  if ((_NSAttributedStringLoadCMarkIfNeeded_cmarkLoaded & 1) == 0)
  {
    if (a6)
    {
      uint64_t v24 = 3328;
LABEL_27:
      uint64_t v22 = 0;
      *a6 = +[NSError errorWithDomain:@"NSCocoaErrorDomain" code:v24 userInfo:0];
      return v22;
    }
    return 0;
  }
  uint64_t v99 = a1;
  uint64_t v12 = [(NSAttributedStringMarkdownParsingOptions *)a4 interpretedSyntax];
  if (v12 == 2) {
    uint64_t v13 = 786432;
  }
  else {
    uint64_t v13 = (v12 == 1) << 18;
  }
  uint64_t v14 = _NS_cmark_parser_new(v13);
  syntax_extensiouint64_t n = _NS_cmark_find_syntax_extension("table");
  if (syntax_extension) {
    _NS_cmark_parser_attach_syntax_extension(v14, syntax_extension);
  }
  uint64_t v16 = _NS_cmark_find_syntax_extension("autolink");
  if (v16) {
    _NS_cmark_parser_attach_syntax_extension(v14, v16);
  }
  uint64_t v17 = _NS_cmark_find_syntax_extension("strikethrough");
  if (v17) {
    _NS_cmark_parser_attach_syntax_extension(v14, v17);
  }
  uint64_t v18 = _NS_cmark_find_syntax_extension("extended-attrs");
  if (v18) {
    _NS_cmark_parser_attach_syntax_extension(v14, v18);
  }
  _NS_cmark_parser_feed(v14, a2, a3);
  uint64_t v19 = _NS_cmark_parser_finish(v14);
  if (!v19)
  {
    if (a6)
    {
      uint64_t v24 = 259;
      goto LABEL_27;
    }
    return 0;
  }
  uint64_t v97 = a2;
  uint64_t v98 = a3;
  uint64_t v96 = v19;
  uint64_t v20 = _NS_cmark_iter_new();
  if (!a4) {
    a4 = objc_alloc_init(NSAttributedStringMarkdownParsingOptions);
  }
  uint64_t v101 = (void *)[MEMORY[0x1E4F1CA48] arrayWithObject:MEMORY[0x1E4F1CC08]];
  memset(v104, 0, 32);
  v104[2] = vdupq_n_s64(1uLL);
  _OWORD v105[2] = xmmword_18235A4E8;
  v105[3] = unk_18235A4F8;
  v105[4] = xmmword_18235A508;
  v105[0] = xmmword_18235A4C8;
  v105[1] = unk_18235A4D8;
  int v21 = _NS_cmark_iter_next(v20);
  if (v21 == 1)
  {
LABEL_19:
    if (objc_opt_respondsToSelector()) {
      objc_msgSend(a1, "finalizeWithLanguageIdentifier:", -[NSAttributedStringMarkdownParsingOptions languageCode](a4, "languageCode"));
    }
    uint64_t v22 = 1;
    uint64_t v23 = v96;
    goto LABEL_22;
  }
  int v26 = v21;
  uint64_t v27 = 0;
  uint64_t v102 = 0;
  unint64_t v95 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v100 = 1;
  while (1)
  {
    uint64_t node = _NS_cmark_iter_get_node(v20);
    int type = _NS_cmark_node_get_type();
    if ((type - 32775) > 1) {
      break;
    }
    if ([(NSAttributedStringMarkdownParsingOptions *)a4 interpretedSyntax] == NSAttributedStringMarkdownInterpretedSyntaxFull)
    {
      if (v26 == 3) {
        goto LABEL_99;
      }
      if (v26 == 2)
      {
        uint64_t v30 = v100 + 1;
        uint64_t v31 = +[NSPresentationIntent paragraphIntentWithIdentity:nestedInsideIntent:](NSPresentationIntent, "paragraphIntentWithIdentity:nestedInsideIntent:");
LABEL_57:
        uint64_t v27 = v31;
LABEL_58:
        uint64_t v100 = v30;
        a1 = v99;
      }
    }
LABEL_100:
    int v26 = _NS_cmark_iter_next(v20);
    if (v26 == 1) {
      goto LABEL_19;
    }
  }
  int v32 = type;
  switch(type)
  {
    case 32770:
      if (v26 == 3) {
        goto LABEL_99;
      }
      if (v26 != 2) {
        goto LABEL_100;
      }
      uint64_t v30 = v100 + 1;
      uint64_t v31 = +[NSPresentationIntent blockQuoteIntentWithIdentity:nestedInsideIntent:](NSPresentationIntent, "blockQuoteIntentWithIdentity:nestedInsideIntent:");
      goto LABEL_57;
    case 32771:
      if (v26 == 3)
      {
        unint64_t v58 = v95 - 1;
        if (!v95) {
          unint64_t v58 = 0;
        }
        unint64_t v95 = v58;
        goto LABEL_99;
      }
      if (v26 != 2) {
        goto LABEL_100;
      }
      list_int type = _NS_cmark_node_get_list_type(node);
      unint64_t v34 = v95;
      if (v95 <= 8)
      {
        unint64_t v34 = v95 + 1;
        if (list_type == 2)
        {
          ++v95;
          *((void *)v105 + v34) = (int)_NS_cmark_node_get_list_start(node);
          uint64_t v35 = v100;
LABEL_130:
          uint64_t v30 = v35 + 1;
          uint64_t v31 = +[NSPresentationIntent orderedListIntentWithIdentity:nestedInsideIntent:](NSPresentationIntent, "orderedListIntentWithIdentity:nestedInsideIntent:");
          goto LABEL_57;
        }
        *((void *)v105 + v34) = 1;
      }
      uint64_t v35 = v100;
      unint64_t v95 = v34;
      if (list_type == 2) {
        goto LABEL_130;
      }
      if (list_type != 1) {
        goto LABEL_100;
      }
      uint64_t v30 = v100 + 1;
      uint64_t v31 = +[NSPresentationIntent unorderedListIntentWithIdentity:nestedInsideIntent:](NSPresentationIntent, "unorderedListIntentWithIdentity:nestedInsideIntent:");
      goto LABEL_57;
    case 32772:
      if (v26 == 3)
      {
        uint64_t v27 = [(NSPresentationIntent *)v27 parentIntent];
        ++*((void *)v105 + v95);
        goto LABEL_100;
      }
      if (v26 != 2) {
        goto LABEL_100;
      }
      uint64_t v30 = v100 + 1;
      uint64_t v31 = +[NSPresentationIntent listItemIntentWithIdentity:ordinal:nestedInsideIntent:](NSPresentationIntent, "listItemIntentWithIdentity:ordinal:nestedInsideIntent:");
      goto LABEL_57;
    case 32773:
      id v92 = a4;
      fence_info = (unsigned char *)_NS_cmark_node_get_fence_info(node);
      if (fence_info)
      {
        uint64_t v37 = a6;
        if (*fence_info)
        {
          char v38 = a1;
          uint64_t v39 = [[NSString alloc] initWithUTF8String:fence_info];
          goto LABEL_68;
        }
      }
      else
      {
        uint64_t v37 = a6;
      }
      char v38 = a1;
      uint64_t v39 = 0;
LABEL_68:
      char v43 = +[NSPresentationIntent codeBlockIntentWithIdentity:v100 languageHint:v39 nestedInsideIntent:v27];

      if (!appendNodeText(v38, v92, node, v102, (uint64_t)v43, (void *)[v101 lastObject], v97, v98, (uint64_t)v104, v37))goto LABEL_171; {
      ++v100;
      }
      uint64_t v27 = [(NSPresentationIntent *)v43 parentIntent];
      a1 = v38;
      a6 = v37;
      a4 = v92;
      goto LABEL_100;
    case 32774:
      char appended = appendNodeText(a1, a4, node, v102 | 0x200, (uint64_t)v27, (void *)[v101 lastObject], v97, v98, (uint64_t)v104, a6);
      if (appended) {
        goto LABEL_100;
      }
      goto LABEL_171;
    case 32777:
      if (_NS_cmark_node_get_heading_level(node) - 1 > 5) {
        goto LABEL_100;
      }
      if (v26 == 3) {
        goto LABEL_99;
      }
      if (v26 != 2) {
        goto LABEL_100;
      }
      uint64_t v30 = v100 + 1;
      uint64_t v31 = +[NSPresentationIntent headerIntentWithIdentity:level:nestedInsideIntent:](NSPresentationIntent, "headerIntentWithIdentity:level:nestedInsideIntent:");
      goto LABEL_57;
    case 32778:
      uint64_t v30 = v100 + 1;
      uint64_t v40 = +[NSPresentationIntent thematicBreakIntentWithIdentity:nestedInsideIntent:](NSPresentationIntent, "thematicBreakIntentWithIdentity:nestedInsideIntent:");
      objc_msgSend(v99, "appendString:with:", @"⸻", attributesForIntents(v102, (uint64_t)v40, objc_msgSend(v101, "lastObject")));
      uint64_t v31 = [(NSPresentationIntent *)v40 parentIntent];
      goto LABEL_57;
    default:
      if (type == *(_DWORD *)_NS_CMARK_NODE_STRIKETHROUGH)
      {
        if (v26 == 3)
        {
          unint64_t v42 = v102 & 0xFFFFFFFFFFFFFFDFLL;
        }
        else
        {
          if (v26 != 2) {
            goto LABEL_100;
          }
          unint64_t v42 = v102 | 0x20;
        }
        uint64_t v102 = v42;
        goto LABEL_100;
      }
      if ((type - 49161) <= 1)
      {
        if (v26 != 2) {
          goto LABEL_100;
        }
        uint64_t v83 = a6;
        unsigned int v86 = objc_msgSend((id)objc_msgSend(v101, "lastObject"), "mutableCopy");
        url = (const char *)_NS_cmark_node_get_url(node);
        if (url)
        {
          uint64_t v45 = [[NSString alloc] initWithBytesNoCopy:url length:strlen(url) encoding:4 freeWhenDone:0];
          if ([(NSString *)v45 length])
          {
            uint64_t v93 = v45;
            if (![(NSString *)v45 length]) {
              goto LABEL_82;
            }
            uint64_t v88 = 0;
            unint64_t v46 = 0;
            uint64_t v47 = 0;
            do
            {
              if (u_hasBinaryProperty([(NSString *)v45 characterAtIndex:v46], UCHAR_BIDI_CONTROL))
              {
                uint64_t v48 = v88;
                if (!v88) {
                  uint64_t v48 = (NSString *)[(NSString *)v93 mutableCopy];
                }
                uint64_t v88 = v48;
                -[NSString replaceCharactersInRange:withString:](v48, "replaceCharactersInRange:withString:", v46 - v47++, 1, &stru_1ECA5C228);
              }
              ++v46;
              uint64_t v45 = v93;
            }
            while (v46 < [(NSString *)v93 length]);
            a1 = v99;
            uint64_t v49 = v88;
            if (!v88) {
LABEL_82:
            }
              uint64_t v49 = v93;
            uint64_t v50 = v49;
            uint64_t v51 = [objc_alloc(MEMORY[0x1E4F1CB10]) initWithString:v49 relativeToURL:a5];
            if (v51)
            {
              uint64_t v52 = (void *)v51;
              if (v32 == 49162) {
                uint64_t v53 = @"NSImageURL";
              }
              else {
                uint64_t v53 = @"NSLink";
              }
              [v86 setObject:v51 forKey:v53];
            }
            uint64_t v45 = v93;
          }
        }
        title = (const char *)_NS_cmark_node_get_title(node);
        if (title)
        {
          uint64_t v55 = [[NSString alloc] initWithBytes:title length:strlen(title) encoding:4];
          if ([(NSString *)v55 length]) {
            [v86 setObject:v55 forKey:@"NSAlternateDescription"];
          }
        }
        [v101 addObject:v86];

        uint64_t v85 = objc_alloc_init(NSMutableString);
        _NS_cmark_node_set_user_data(node, 1);
        int v56 = _NS_cmark_iter_next(v20);
        if (v56 == 1)
        {
          int end_line = -1;
          end_columuint64_t n = -1;
          int start_line = -1;
          start_columuint64_t n = -1;
        }
        else
        {
          int v72 = v56;
          end_columuint64_t n = -1;
          int end_line = -1;
          start_columuint64_t n = -1;
          int start_line = -1;
          do
          {
            uint64_t v73 = _NS_cmark_iter_get_node(v20);
            uint64_t v74 = v73;
            if (start_line == -1)
            {
              int start_line = _NS_cmark_node_get_start_line(v73);
              start_columuint64_t n = _NS_cmark_node_get_start_column(v74);
            }
            if (_NS_cmark_node_get_user_data(v74) == 1) {
              break;
            }
            int end_line = _NS_cmark_node_get_end_line(v74);
            end_columuint64_t n = _NS_cmark_node_get_end_column(v74);
            if (v72 != 3)
            {
              literal = (const char *)_NS_cmark_node_get_literal(v74);
              if (literal)
              {
                uint64_t v76 = [[NSString alloc] initWithBytesNoCopy:literal length:strlen(literal) encoding:4 freeWhenDone:0];
                if ([(NSString *)v76 length]) {
                  [(NSMutableString *)v85 appendString:v76];
                }
              }
            }
            int v72 = _NS_cmark_iter_next(v20);
          }
          while (v72 != 1);
        }
        uint64_t v77 = v85;
        uint64_t v78 = [(NSString *)v85 length];
        if (v32 != 49162 || v78)
        {
          a6 = v83;
          if ([(NSAttributedStringMarkdownParsingOptions *)a4 appliesSourcePositionAttributes]&& start_line >= 1&& start_column >= 1&& end_line >= 1&& end_column >= 1)
          {
            uint64_t v81 = [[NSAttributedStringMarkdownSourcePosition alloc] initWithStartLine:start_line startColumn:start_column endLine:end_line endColumn:end_column];
            [(NSAttributedStringMarkdownSourcePosition *)v81 setOffsetsFromUTF8:v97 size:v98 usingCache:v104];
            appendStringWithSourcePosition(a1, (uint64_t)v85, v102, (uint64_t)v27, (void *)[v101 lastObject], (uint64_t)v81);

            uint64_t v79 = v101;
            uint64_t v77 = v85;
          }
          else
          {
            uint64_t v79 = v101;
            objc_msgSend(a1, "appendString:with:", v85, attributesForIntents(v102, (uint64_t)v27, objc_msgSend(v101, "lastObject")));
          }
        }
        else
        {
          uint64_t v79 = v101;
          objc_msgSend(a1, "appendString:with:", @"\uFFFC", attributesForIntents(v102, (uint64_t)v27, objc_msgSend(v101, "lastObject")));
          a6 = v83;
        }

        uint64_t v82 = v79;
LABEL_161:
        [v82 removeLastObject];
        goto LABEL_100;
      }
      if (type != 49164)
      {
        if (type == *(_DWORD *)_NS_CMARK_NODE_TABLE)
        {
          if (v26 == 3) {
            goto LABEL_99;
          }
          if (v26 != 2) {
            goto LABEL_100;
          }
          uint64_t v84 = a6;
          unsigned int table_columns = _NS_cmark_gfm_extensions_get_table_columns(node);
          uint64_t table_alignments = _NS_cmark_gfm_extensions_get_table_alignments(node);
          if (table_alignments && table_columns)
          {
            uint64_t v65 = (unsigned __int8 *)table_alignments;
            long long v66 = (void *)[MEMORY[0x1E4F1CA48] array];
            uint64_t v67 = table_columns;
            do
            {
              int v69 = *v65++;
              int v68 = v69;
              if (v69 == 114) {
                unsigned __int8 v70 = &off_1ECAB5648;
              }
              else {
                unsigned __int8 v70 = &off_1ECAB5660;
              }
              if (v68 == 108) {
                unsigned __int8 v70 = &off_1ECAB5660;
              }
              if (v68 == 99) {
                uint64_t v71 = &off_1ECAB5630;
              }
              else {
                uint64_t v71 = v70;
              }
              [v66 addObject:v71];
              --v67;
            }
            while (v67);
            a6 = v84;
          }
          else
          {
            a6 = v84;
          }
          uint64_t v30 = v100 + 1;
          uint64_t v27 = +[NSPresentationIntent tableIntentWithIdentity:columnCount:alignments:nestedInsideIntent:](NSPresentationIntent, "tableIntentWithIdentity:columnCount:alignments:nestedInsideIntent:");
          uint64_t v91 = 0;
        }
        else
        {
          if (type == *(_DWORD *)_NS_CMARK_NODE_TABLE_ROW)
          {
            if (v26 != 3)
            {
              if (v26 == 2)
              {
                if (_NS_cmark_gfm_extensions_get_table_row_is_header(node)) {
                  uint64_t v80 = +[NSPresentationIntent tableHeaderRowIntentWithIdentity:v100 nestedInsideIntent:v27];
                }
                else {
                  uint64_t v80 = +[NSPresentationIntent tableRowIntentWithIdentity:v100 row:v91 nestedInsideIntent:v27];
                }
                uint64_t v27 = v80;
                ++v100;
                uint64_t v90 = 0;
                ++v91;
              }
              goto LABEL_100;
            }
LABEL_99:
            uint64_t v27 = [(NSPresentationIntent *)v27 parentIntent];
            goto LABEL_100;
          }
          if (type != *(_DWORD *)_NS_CMARK_NODE_TABLE_CELL) {
            goto LABEL_100;
          }
          if (v26 == 3) {
            goto LABEL_99;
          }
          if (v26 != 2) {
            goto LABEL_100;
          }
          uint64_t v30 = v100 + 1;
          uint64_t v27 = +[NSPresentationIntent tableCellIntentWithIdentity:column:nestedInsideIntent:](NSPresentationIntent, "tableCellIntentWithIdentity:column:nestedInsideIntent:");
          ++v90;
        }
        goto LABEL_58;
      }
      if (![(NSAttributedStringMarkdownParsingOptions *)a4 allowsExtendedAttributes]) {
        goto LABEL_100;
      }
      if (v26 == 3)
      {
        uint64_t v82 = v101;
        goto LABEL_161;
      }
      if (v26 != 2) {
        goto LABEL_100;
      }
      attributes = (const char *)_NS_cmark_node_get_attributes(node);
      uint64_t v60 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytesNoCopy:attributes length:strlen(attributes) freeWhenDone:0];
      long long v103 = 0;
      uint64_t v61 = [a1 parseExtendedAttributesFromData:v60 error:&v103];

      if (v61)
      {
        int64_t v62 = objc_msgSend((id)objc_msgSend(v101, "lastObject"), "mutableCopy");
        [v62 addEntriesFromDictionary:v61];
        [v101 addObject:v62];

        goto LABEL_100;
      }
      if ([(NSAttributedStringMarkdownParsingOptions *)a4 failurePolicy])
      {
        objc_msgSend(v101, "addObject:", objc_msgSend(v101, "lastObject"));
        goto LABEL_100;
      }
      if (a6) {
        *a6 = v103;
      }
LABEL_171:
      uint64_t v22 = 0;
      uint64_t v23 = v96;
LABEL_22:
      _NS_cmark_iter_free(v20);
      _NS_cmark_node_free(v23);
      _NS_cmark_parser_free(v14);
      return v22;
  }
}

uint64_t @objc _AttributedStringFromMarkdownCreatorConcrete.finalize(withLanguageIdentifier:)(void *a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v6 = v5;
  }
  else
  {
    id v4 = 0;
    uint64_t v6 = 0;
  }
  id v7 = a1;
  _AttributedStringFromMarkdownCreatorConcrete.finalize(withLanguageIdentifier:)((uint64_t)v4, v6);

  return swift_bridgeObjectRelease();
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.finalize(withLanguageIdentifier:)(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v10 = MEMORY[0x1E4FBC868];
    uint64_t v11 = MEMORY[0x1E4FBC870];
    uint64_t v5 = MEMORY[0x1E4FBB1A0];
    uint64_t v6 = MEMORY[0x1E4FBB1B0];
    uint64_t v3 = result;
    uint64_t v4 = a2;
    long long v7 = xmmword_182106C90;
    char v8 = 1;
    uint64_t v9 = 0;
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v3, 0x6175676E614C534EuLL, 0xEA00000000006567);
    uint64_t v3 = v10;
    uint64_t v4 = v11;
    char v2 = 1;
    AttributedString.mergeAttributes(_:mergePolicy:)(&v3, &v2);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t @objc _AttributedStringFromMarkdownCreatorConcrete.append(_:with:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v8 = v7;
  uint64_t v9 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a4);
  id v10 = a1;
  _AttributedStringFromMarkdownCreatorConcrete.append(_:with:)((uint64_t)v6, v8, v9);

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.init(scope:options:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v2;
  int v4 = *a2;
  *((unsigned char *)v2 + direct field offset for _AttributedStringFromMarkdownCreatorConcrete.hasInflectionAttributes) = 0;
  uint64_t v5 = v2;
  BigString.init()();
  uint64_t v12 = 0;
  MEMORY[0x185309530](&v12, 8);
  uint64_t v6 = v12;
  type metadata accessor for AttributedString.Guts();
  uint64_t v7 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if (result)
  {
    long long v9 = v14;
    *(_OWORD *)(v7 + 16) = v13;
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = v15;
    *(void *)(v7 + 64) = 0;
    *(void *)(v7 + 72) = 0;
    *(void *)(v7 + 80) = 0;
    *(void *)(v7 + 88) = v6;
    *(void *)((char *)v5 + direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str) = v7;
    swift_bridgeObjectRelease();
    if (v4)
    {
      id v10 = static AttributeScope.scopeDescription.getter(*(void *)(v3 + 80));
      swift_bridgeObjectRelease();
    }
    else
    {
      id v10 = (void *)MEMORY[0x1E4FBC868];
    }
    *(void *)((char *)v5 + direct field offset for _AttributedStringFromMarkdownCreatorConcrete.attributeTable) = v10;

    v11.receiver = v5;
    v11.super_class = (Class)type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete();
    return (uint64_t)objc_msgSendSuper2(&v11, sel_init);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for _AttributedStringFromMarkdownCreatorConcrete()
{
  return __swift_instantiateGenericMetadata();
}

void specialized static PresentationIntent._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, void *a2)
{
  id v2 = a1;
  unint64_t v3 = MEMORY[0x1E4FBC860];
  int v4 = &selRef_initWithTarget_handler_;
  uint64_t v5 = &selRef_fixupDirInfo_;
  uint64_t v6 = &selRef_observePresentationChangeOfKind_withPresenter_url_newURL_;
  long long v64 = (void *)MEMORY[0x1E4FBC860];
  while (2)
  {
    id v9 = v2;
    switch((unint64_t)[v9 v4[61]])
    {
      case 0uLL:
        id v10 = [v9 v5[161]];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        }
        unint64_t v12 = v64[2];
        unint64_t v11 = v64[3];
        if (v12 >= v11 >> 1) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v64);
        }
        uint64_t v64[2] = v12 + 1;
        uint64_t v7 = &v64[4 * v12];
        v7[4] = 0;
        v7[5] = 0;
        goto LABEL_4;
      case 1uLL:
        id v13 = objc_msgSend(v9, sel_headerLevel);
        id v14 = [v9 (SEL)v5 + 1560];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        }
        unint64_t v16 = v64[2];
        unint64_t v15 = v64[3];
        if (v16 >= v15 >> 1) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v64);
        }
        uint64_t v64[2] = v16 + 1;
        uint64_t v17 = &v64[4 * v16];
        v17[4] = v13;
        void v17[5] = 0;
        *((unsigned char *)v17 + 48) = 0;
        goto LABEL_75;
      case 2uLL:
        id v10 = [v9 (SEL)v5 + 1560];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        }
        unint64_t v19 = v64[2];
        unint64_t v18 = v64[3];
        if (v19 >= v18 >> 1) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v64);
        }
        uint64_t v64[2] = v19 + 1;
        uint64_t v7 = &v64[4 * v19];
        long long v8 = xmmword_18210C780;
        goto LABEL_3;
      case 3uLL:
        id v10 = [v9 (SEL)v5 + 1560];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        }
        unint64_t v21 = v64[2];
        unint64_t v20 = v64[3];
        if (v21 >= v20 >> 1) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v64);
        }
        uint64_t v64[2] = v21 + 1;
        uint64_t v7 = &v64[4 * v21];
        long long v8 = xmmword_18210F2A0;
        goto LABEL_3;
      case 4uLL:
        id v22 = objc_msgSend(v9, sel_ordinal);
        id v14 = [v9 (SEL)v5 + 1560];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        }
        unint64_t v24 = v64[2];
        unint64_t v23 = v64[3];
        if (v24 >= v23 >> 1) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v64);
        }
        uint64_t v64[2] = v24 + 1;
        uint64_t v17 = &v64[4 * v24];
        v17[4] = v22;
        void v17[5] = 0;
        char v25 = 1;
        goto LABEL_74;
      case 5uLL:
        id v26 = objc_msgSend(v9, sel_languageHint);
        if (v26)
        {
          uint64_t v27 = v26;
          id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
          uint64_t v30 = v29;
        }
        else
        {
          id v28 = 0;
          uint64_t v30 = 0;
        }
        id v55 = [v9 (SEL)v5 + 1560];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        }
        unint64_t v57 = v64[2];
        unint64_t v56 = v64[3];
        if (v57 >= v56 >> 1) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v56 > 1), v57 + 1, 1, v64);
        }
        uint64_t v64[2] = v57 + 1;
        unint64_t v58 = &v64[4 * v57];
        v58[4] = v28;
        v58[5] = v30;
        *((unsigned char *)v58 + 48) = 2;
        v58[7] = v55;
        uint64_t v6 = &selRef_observePresentationChangeOfKind_withPresenter_url_newURL_;
        goto LABEL_5;
      case 6uLL:
        id v10 = [v9 (SEL)v5 + 1560];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        }
        unint64_t v32 = v64[2];
        unint64_t v31 = v64[3];
        if (v32 >= v31 >> 1) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v64);
        }
        uint64_t v64[2] = v32 + 1;
        uint64_t v7 = &v64[4 * v32];
        long long v8 = xmmword_1821A2DA0;
        goto LABEL_3;
      case 7uLL:
        id v10 = [v9 (SEL)v5 + 1560];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        }
        unint64_t v34 = v64[2];
        unint64_t v33 = v64[3];
        if (v34 >= v33 >> 1) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v64);
        }
        uint64_t v64[2] = v34 + 1;
        uint64_t v7 = &v64[4 * v34];
        long long v8 = xmmword_1821A3E80;
        goto LABEL_3;
      case 8uLL:
        id v35 = objc_msgSend(v9, sel_columnAlignments);
        if (!v35)
        {
          unint64_t v38 = v3;
          if (v3 >> 62) {
            goto LABEL_83;
          }
LABEL_49:
          uint64_t v39 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v39) {
            goto LABEL_50;
          }
LABEL_84:
          swift_bridgeObjectRelease();
          unint64_t v41 = v3;
LABEL_85:
          id v59 = [v9 v5[161]];
          uint64_t v6 = &selRef_observePresentationChangeOfKind_withPresenter_url_newURL_;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
          }
          unint64_t v61 = v64[2];
          unint64_t v60 = v64[3];
          if (v61 >= v60 >> 1) {
            long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v60 > 1), v61 + 1, 1, v64);
          }
          uint64_t v64[2] = v61 + 1;
          int64_t v62 = &v64[4 * v61];
          v62[4] = v41;
          v62[5] = 0;
          *((unsigned char *)v62 + 48) = 3;
          v62[7] = v59;
LABEL_5:
          id v2 = [v9 v6[63]];

          if (!v2)
          {
            swift_bridgeObjectRelease();
            *a2 = v64;
            return;
          }
          continue;
        }
        uint64_t v36 = v35;
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSNumber>);
        uint64_t v37 = swift_dynamicCastClass();
        if (v37)
        {
          unint64_t v38 = v37;

          if (v38 >> 62) {
            goto LABEL_83;
          }
          goto LABEL_49;
        }
        swift_unknownObjectRelease();
        objc_msgSend(v36, sel_copy);
        type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        unint64_t v38 = _bridgeCocoaArray<A>(_:)();

        swift_unknownObjectRelease();
        if (!(v38 >> 62)) {
          goto LABEL_49;
        }
LABEL_83:
        swift_bridgeObjectRetain();
        uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v39) {
          goto LABEL_84;
        }
LABEL_50:
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39 & ~(v39 >> 63), 0);
        if ((v39 & 0x8000000000000000) == 0)
        {
          uint64_t v40 = 0;
          unint64_t v41 = v3;
          do
          {
            if ((v38 & 0xC000000000000001) != 0) {
              id v42 = (id)MEMORY[0x185303120](v40, v38);
            }
            else {
              id v42 = *(id *)(v38 + 8 * v40 + 32);
            }
            char v43 = v42;
            id v44 = objc_msgSend(v42, sel_integerValue);

            if ((unint64_t)v44 > 2) {
              goto LABEL_96;
            }
            unint64_t v46 = *(void *)(v3 + 16);
            unint64_t v45 = *(void *)(v3 + 24);
            if (v46 >= v45 >> 1) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
            }
            ++v40;
            *(void *)(v3 + 16) = v46 + 1;
            *(unsigned char *)(v3 + v46 + 32) = (_BYTE)v44;
          }
          while (v39 != v40);
          swift_bridgeObjectRelease();
          unint64_t v3 = MEMORY[0x1E4FBC860];
          int v4 = &selRef_initWithTarget_handler_;
          uint64_t v5 = &selRef_fixupDirInfo_;
          goto LABEL_85;
        }
        __break(1u);
LABEL_96:
        __break(1u);
        return;
      case 9uLL:
        id v10 = [v9 (SEL)v5 + 1560];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        }
        unint64_t v48 = v64[2];
        unint64_t v47 = v64[3];
        if (v48 >= v47 >> 1) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v47 > 1), v48 + 1, 1, v64);
        }
        uint64_t v64[2] = v48 + 1;
        uint64_t v7 = &v64[4 * v48];
        long long v8 = xmmword_1821A3E70;
LABEL_3:
        *((_OWORD *)v7 + 2) = v8;
LABEL_4:
        *((unsigned char *)v7 + 48) = 6;
        v7[7] = v10;
        goto LABEL_5;
      case 0xAuLL:
        id v49 = [v9 row];
        id v14 = [v9 (SEL)v5 + 1560];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        }
        unint64_t v51 = v64[2];
        unint64_t v50 = v64[3];
        if (v51 >= v50 >> 1) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v64);
        }
        uint64_t v64[2] = v51 + 1;
        uint64_t v17 = &v64[4 * v51];
        v17[4] = v49;
        void v17[5] = 0;
        char v25 = 4;
        goto LABEL_74;
      case 0xBuLL:
        id v52 = objc_msgSend(v9, sel_column);
        id v14 = [v9 (SEL)v5 + 1560];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
        }
        unint64_t v54 = v64[2];
        unint64_t v53 = v64[3];
        if (v54 >= v53 >> 1) {
          long long v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v54 + 1, 1, v64);
        }
        uint64_t v64[2] = v54 + 1;
        uint64_t v17 = &v64[4 * v54];
        v17[4] = v52;
        void v17[5] = 0;
        char v25 = 5;
LABEL_74:
        *((unsigned char *)v17 + 48) = v25;
LABEL_75:
        v17[7] = v14;
        goto LABEL_5;
      default:
        swift_bridgeObjectRelease();

        return;
    }
  }
}

uint64_t closure #1 in NSNotificationCenter.Notifications.Iterator.next()partial apply(uint64_t a1)
{
  int v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *int v4 = v2;
  v4[1] = partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  return closure #1 in NSNotificationCenter.Notifications.Iterator.next()(a1, v1);
}

uint64_t JSONDecoder.userInfo.modify(void *a1)
{
  uint64_t v1 = (os_unfair_lock_s *)a1[2];
  *(void *)(a1[1] + a1[3] + 104) = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_retain();
  os_unfair_lock_unlock(v1 + 4);
  swift_bridgeObjectRelease();

  return swift_release();
}

void *static Date.FormatStyle.Symbol.Hour.defaultDigits(amPM:)@<X0>(void *result@<X0>, unsigned char *a2@<X8>)
{
  if (*result >= 4uLL)
  {
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = 0x2000406u >> (8 * *result);
  }
  return result;
}

uint64_t dispatch thunk of NSKeyValueObservation.invalidate()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PredicateExpressions.Variable<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in PredicateExpressions.Variable<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

BOOL static DateInterval.== infix(_:_:)(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

ValueMetadata *type metadata accessor for PredicateCodableConfiguration.AllowListKeyPath()
{
  return &type metadata for PredicateCodableConfiguration.AllowListKeyPath;
}

ValueMetadata *type metadata accessor for PredicateCodableConfiguration.AllowListType()
{
  return &type metadata for PredicateCodableConfiguration.AllowListType;
}

uint64_t type metadata completion function for NSKeyValueObservedChange()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  Swift::Int v108 = v3;
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_139;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v85 = *v2;
      uint64_t v86 = -1;
      uint64_t v87 = 1;
      uint64_t v88 = v85;
      do
      {
        uint64_t v89 = (unint64_t *)(v85 + 24 * v87);
        unint64_t v90 = *v89;
        unint64_t v91 = v89[1];
        uint64_t v92 = v86;
        uint64_t v93 = v88;
        do
        {
          uint64_t result = specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(*(void *)v93, *(void *)(v93 + 8), v90, v91);
          if ((result & 1) == 0) {
            break;
          }
          if (!v85) {
            goto LABEL_143;
          }
          long long v94 = *(_OWORD *)(v93 + 32);
          uint64_t v95 = *(void *)(v93 + 16);
          unint64_t v90 = *(void *)(v93 + 24);
          *(_OWORD *)(v93 + 24) = *(_OWORD *)v93;
          *(void *)(v93 + 40) = v95;
          *(void *)uint64_t v93 = v90;
          *(_OWORD *)(v93 + 8) = v94;
          unint64_t v91 = v94;
          v93 -= 24;
        }
        while (!__CFADD__(v92++, 1));
        ++v87;
        v88 += 24;
        --v86;
      }
      while (v87 != v3);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_148;
  }
  uint64_t v107 = result;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    __dst = (unint64_t *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v97 = (char *)MEMORY[0x1E4FBC860];
LABEL_105:
      uint64_t v106 = v8;
      if (v11 >= 2)
      {
        uint64_t v98 = *v2;
        do
        {
          unint64_t v99 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_134;
          }
          if (!v98) {
            goto LABEL_147;
          }
          uint64_t v100 = v97;
          uint64_t v101 = *(void *)&v97[16 * v99 + 32];
          uint64_t v102 = *(void *)&v97[16 * v11 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((unint64_t *)(v98 + 24 * v101), (unint64_t *)(v98 + 24 * *(void *)&v97[16 * v11 + 16]), v98 + 24 * v102, __dst);
          if (v1) {
            break;
          }
          if (v102 < v101) {
            goto LABEL_135;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v100 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v100);
          }
          if (v99 >= *((void *)v100 + 2)) {
            goto LABEL_136;
          }
          long long v103 = &v100[16 * v99 + 32];
          *(void *)long long v103 = v101;
          *((void *)v103 + 1) = v102;
          unint64_t v104 = *((void *)v100 + 2);
          if (v11 > v104) {
            goto LABEL_137;
          }
          memmove(&v100[16 * v11 + 16], &v100[16 * v11 + 32], 16 * (v104 - v11));
          uint64_t v97 = v100;
          *((void *)v100 + 2) = v104 - 1;
          unint64_t v11 = v104 - 1;
        }
        while (v104 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(void *)(v106 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v106 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: JSONReference));
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v106 = v7;
    __dst = (unint64_t *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v105 = v2;
  uint64_t v10 = *v2;
  uint64_t v110 = (char *)MEMORY[0x1E4FBC860];
  while (1)
  {
    Swift::Int v12 = v9++;
    if (v9 < v3)
    {
      int v13 = specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(*(void *)(v10 + 24 * v12), *(void *)(v10 + 24 * v12 + 8), *(void *)(v10 + 24 * v9), *(void *)(v10 + 24 * v9 + 8));
      Swift::Int v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        id v14 = (unint64_t *)(v10 + 32 + 24 * v12);
        unint64_t v15 = v14;
        while (1)
        {
          unint64_t v16 = v15[3];
          v15 += 3;
          if ((v13 ^ specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(*(v14 - 1), *v14, v14[2], v16)))break; {
          ++v9;
          }
          id v14 = v15;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v13)
      {
        if (v9 < v12) {
          goto LABEL_140;
        }
        if (v12 < v9)
        {
          uint64_t v17 = 24 * v9;
          uint64_t v18 = 24 * v12;
          Swift::Int v19 = v9;
          Swift::Int v20 = v12;
          do
          {
            if (v20 != --v19)
            {
              if (!v10) {
                goto LABEL_146;
              }
              uint64_t v21 = v10 + v18;
              uint64_t v22 = v10 + v17;
              uint64_t v23 = *(void *)(v10 + v18);
              long long v24 = *(_OWORD *)(v10 + v18 + 8);
              long long v25 = *(_OWORD *)(v10 + v17 - 24);
              *(void *)(v21 + 16) = *(void *)(v10 + v17 - 8);
              *(_OWORD *)uint64_t v21 = v25;
              *(void *)(v22 - 24) = v23;
              *(_OWORD *)(v22 - 16) = v24;
            }
            ++v20;
            v17 -= 24;
            v18 += 24;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_39;
    }
    if (__OFSUB__(v9, v12)) {
      goto LABEL_138;
    }
    if (v9 - v12 >= v107) {
      goto LABEL_39;
    }
    if (__OFADD__(v12, v107)) {
      goto LABEL_141;
    }
    Swift::Int v26 = v12 + v107 >= v3 ? v3 : v12 + v107;
    if (v26 < v12) {
      break;
    }
    if (v9 != v26)
    {
      uint64_t v77 = v10 - 24 + 24 * v9;
      uint64_t v27 = v110;
      do
      {
        uint64_t v78 = (unint64_t *)(v10 + 24 * v9);
        unint64_t v79 = *v78;
        unint64_t v80 = v78[1];
        Swift::Int v81 = v12;
        uint64_t v82 = v77;
        do
        {
          if ((specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(*(void *)v82, *(void *)(v82 + 8), v79, v80) & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_144;
          }
          long long v83 = *(_OWORD *)(v82 + 32);
          uint64_t v84 = *(void *)(v82 + 16);
          unint64_t v79 = *(void *)(v82 + 24);
          *(_OWORD *)(v82 + 24) = *(_OWORD *)v82;
          *(void *)(v82 + 40) = v84;
          *(void *)uint64_t v82 = v79;
          *(_OWORD *)(v82 + 8) = v83;
          unint64_t v80 = v83;
          v82 -= 24;
          ++v81;
        }
        while (v9 != v81);
        ++v9;
        v77 += 24;
      }
      while (v9 != v26);
      Swift::Int v9 = v26;
      if (v26 < v12) {
        goto LABEL_133;
      }
      goto LABEL_40;
    }
LABEL_39:
    uint64_t v27 = v110;
    if (v9 < v12) {
      goto LABEL_133;
    }
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v27 + 2) + 1, 1, v27);
    }
    unint64_t v29 = *((void *)v27 + 2);
    unint64_t v28 = *((void *)v27 + 3);
    unint64_t v11 = v29 + 1;
    if (v29 >= v28 >> 1) {
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1, v27);
    }
    *((void *)v27 + 2) = v11;
    uint64_t v30 = v27 + 32;
    unint64_t v31 = &v27[16 * v29 + 32];
    *(void *)unint64_t v31 = v12;
    *((void *)v31 + 1) = v9;
    uint64_t v110 = v27;
    if (v29)
    {
      while (1)
      {
        unint64_t v32 = v11 - 1;
        if (v11 >= 4)
        {
          uint64_t v37 = &v30[16 * v11];
          uint64_t v38 = *((void *)v37 - 8);
          uint64_t v39 = *((void *)v37 - 7);
          BOOL v43 = __OFSUB__(v39, v38);
          uint64_t v40 = v39 - v38;
          if (v43) {
            goto LABEL_122;
          }
          uint64_t v42 = *((void *)v37 - 6);
          uint64_t v41 = *((void *)v37 - 5);
          BOOL v43 = __OFSUB__(v41, v42);
          uint64_t v35 = v41 - v42;
          char v36 = v43;
          if (v43) {
            goto LABEL_123;
          }
          unint64_t v44 = v11 - 2;
          unint64_t v45 = &v30[16 * v11 - 32];
          uint64_t v47 = *(void *)v45;
          uint64_t v46 = *((void *)v45 + 1);
          BOOL v43 = __OFSUB__(v46, v47);
          uint64_t v48 = v46 - v47;
          if (v43) {
            goto LABEL_125;
          }
          BOOL v43 = __OFADD__(v35, v48);
          uint64_t v49 = v35 + v48;
          if (v43) {
            goto LABEL_128;
          }
          if (v49 >= v40)
          {
            uint64_t v67 = &v30[16 * v32];
            uint64_t v69 = *(void *)v67;
            uint64_t v68 = *((void *)v67 + 1);
            BOOL v43 = __OFSUB__(v68, v69);
            uint64_t v70 = v68 - v69;
            if (v43) {
              goto LABEL_132;
            }
            BOOL v60 = v35 < v70;
            goto LABEL_76;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v61 = *((void *)v27 + 4);
            uint64_t v62 = *((void *)v27 + 5);
            BOOL v43 = __OFSUB__(v62, v61);
            uint64_t v54 = v62 - v61;
            char v55 = v43;
            goto LABEL_70;
          }
          uint64_t v34 = *((void *)v27 + 4);
          uint64_t v33 = *((void *)v27 + 5);
          BOOL v43 = __OFSUB__(v33, v34);
          uint64_t v35 = v33 - v34;
          char v36 = v43;
        }
        if (v36) {
          goto LABEL_124;
        }
        unint64_t v44 = v11 - 2;
        unint64_t v50 = &v30[16 * v11 - 32];
        uint64_t v52 = *(void *)v50;
        uint64_t v51 = *((void *)v50 + 1);
        BOOL v53 = __OFSUB__(v51, v52);
        uint64_t v54 = v51 - v52;
        char v55 = v53;
        if (v53) {
          goto LABEL_127;
        }
        unint64_t v56 = &v30[16 * v32];
        uint64_t v58 = *(void *)v56;
        uint64_t v57 = *((void *)v56 + 1);
        BOOL v43 = __OFSUB__(v57, v58);
        uint64_t v59 = v57 - v58;
        if (v43) {
          goto LABEL_130;
        }
        if (__OFADD__(v54, v59)) {
          goto LABEL_131;
        }
        if (v54 + v59 >= v35)
        {
          BOOL v60 = v35 < v59;
LABEL_76:
          if (v60) {
            unint64_t v32 = v44;
          }
          goto LABEL_78;
        }
LABEL_70:
        if (v55) {
          goto LABEL_126;
        }
        long long v63 = &v30[16 * v32];
        uint64_t v65 = *(void *)v63;
        uint64_t v64 = *((void *)v63 + 1);
        BOOL v43 = __OFSUB__(v64, v65);
        uint64_t v66 = v64 - v65;
        if (v43) {
          goto LABEL_129;
        }
        if (v66 < v54) {
          goto LABEL_15;
        }
LABEL_78:
        unint64_t v71 = v32 - 1;
        if (v32 - 1 >= v11)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v10) {
          goto LABEL_145;
        }
        int v72 = &v30[16 * v71];
        uint64_t v73 = *(void *)v72;
        uint64_t v74 = &v30[16 * v32];
        uint64_t v75 = *((void *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((unint64_t *)(v10 + 24 * *(void *)v72), (unint64_t *)(v10 + 24 * *(void *)v74), v10 + 24 * v75, __dst);
        if (v1) {
          goto LABEL_95;
        }
        if (v75 < v73) {
          goto LABEL_119;
        }
        if (v32 > *((void *)v110 + 2)) {
          goto LABEL_120;
        }
        *(void *)int v72 = v73;
        *(void *)&v30[16 * v71 + 8] = v75;
        unint64_t v76 = *((void *)v110 + 2);
        if (v32 >= v76) {
          goto LABEL_121;
        }
        uint64_t v27 = v110;
        unint64_t v11 = v76 - 1;
        memmove(&v30[16 * v32], v74 + 16, 16 * (v76 - 1 - v32));
        *((void *)v110 + 2) = v76 - 1;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_15:
    Swift::Int v3 = v108;
    if (v9 >= v108)
    {
      uint64_t v8 = v106;
      uint64_t v97 = v110;
      uint64_t v2 = v105;
      goto LABEL_105;
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v34 = v7;
  uint64_t v8 = 4 * v7;
  uint64_t v9 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4 << v9;
  uint64_t v28 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v29 = a4 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v31 = v8;
  unint64_t v32 = v11;
  uint64_t v30 = 4 * v11;
  uint64_t v12 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  uint64_t v26 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v27 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  while (v31 != v15 >> 14)
  {
    unint64_t v16 = v15 & 0xC;
    unint64_t v17 = v15;
    if (v16 == v10) {
      unint64_t v17 = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a3, a4);
    }
    unint64_t v18 = v17 >> 16;
    if (v17 >> 16 >= v34)
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
      goto LABEL_50;
    }
    if ((a4 & 0x1000000000000000) != 0)
    {
      unsigned __int8 v20 = String.UTF8View._foreignSubscript(position:)();
      if (v16 == v10) {
        goto LABEL_19;
      }
    }
    else if ((a4 & 0x2000000000000000) != 0)
    {
      unint64_t v35 = a3;
      uint64_t v36 = v29;
      unsigned __int8 v20 = *((unsigned char *)&v35 + v18);
      if (v16 == v10) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v19 = v28;
      if ((a3 & 0x1000000000000000) == 0) {
        uint64_t v19 = _StringObject.sharedUTF8.getter();
      }
      unsigned __int8 v20 = *(unsigned char *)(v19 + v18);
      if (v16 == v10)
      {
LABEL_19:
        unint64_t v15 = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a3, a4);
        if ((a4 & 0x1000000000000000) == 0) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
    }
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v15 = (v15 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_25;
    }
LABEL_20:
    if (v34 <= v15 >> 16) {
      goto LABEL_60;
    }
    unint64_t v15 = String.UTF8View._foreignIndex(after:)();
LABEL_25:
    if (v30 == v14 >> 14) {
      return 0;
    }
    unint64_t v18 = v14 & 0xC;
    unint64_t v21 = v14;
    if (v18 == v13) {
      unint64_t v21 = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
    }
    unint64_t v22 = v21 >> 16;
    if (v21 >> 16 >= v32) {
      goto LABEL_59;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned __int8 v24 = String.UTF8View._foreignSubscript(position:)();
      if (v18 == v13) {
        goto LABEL_34;
      }
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      unint64_t v35 = a1;
      uint64_t v36 = v27;
      unsigned __int8 v24 = *((unsigned char *)&v35 + v22);
      if (v18 == v13) {
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v23 = v26;
      if ((a1 & 0x1000000000000000) == 0) {
        uint64_t v23 = _StringObject.sharedUTF8.getter();
      }
      unsigned __int8 v24 = *(unsigned char *)(v23 + v22);
      if (v18 == v13)
      {
LABEL_34:
        unint64_t v14 = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
        if ((a2 & 0x1000000000000000) != 0) {
          goto LABEL_35;
        }
        goto LABEL_39;
      }
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_35:
      if (v32 <= v14 >> 16) {
        goto LABEL_61;
      }
      unint64_t v14 = String.UTF8View._foreignIndex(after:)();
      goto LABEL_40;
    }
LABEL_39:
    unint64_t v14 = (v14 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_40:
    if (v20 < v24) {
      return 1;
    }
    if (v24 < v20) {
      return 0;
    }
  }
  if (v30 == v14 >> 14) {
    return 0;
  }
  unint64_t v18 = v14 & 0xC;
  unint64_t result = v14;
  if (v18 == v13) {
    goto LABEL_62;
  }
LABEL_50:
  if (v32 <= result >> 16)
  {
    __break(1u);
LABEL_64:
    unint64_t result = String.UTF8View._foreignSubscript(position:)();
    if (v18 == v13) {
      goto LABEL_65;
    }
    goto LABEL_54;
  }
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_64;
  }
  if (!(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    unint64_t result = _StringObject.sharedUTF8.getter();
    if (v18 == v13) {
      goto LABEL_65;
    }
LABEL_54:
    if ((a2 & 0x1000000000000000) != 0) {
      goto LABEL_55;
    }
    return 1;
  }
  if (v18 != v13) {
    goto LABEL_54;
  }
LABEL_65:
  unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
  unint64_t v14 = result;
  if ((a2 & 0x1000000000000000) == 0) {
    return 1;
  }
LABEL_55:
  if (v32 > v14 >> 16)
  {
    String.UTF8View._foreignIndex(after:)();
    return 1;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

Swift::Void __swiftcall URL.appendPathExtension(_:)(Swift::String a1)
{
  uint64_t v2 = v1;
  unint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  id v5 = (id)*v1;
  uint64_t v6 = (unsigned char *)v1[1];
  uint64_t v7 = v1[2];
  if (!_foundation_swift_url_feature_enabled())
  {
    swift_retain();
    id v5 = v5;
    swift_retain();
    if ((_foundation_swift_url_feature_enabled() & 1) == 0)
    {
      id v12 = objc_msgSend(v5, sel__parameterString);
      if (v12)
      {
        uint64_t v13 = v12;
        id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        unint64_t v16 = v15;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v17 = objc_msgSend(v5, sel_path)) != 0)
        {
          unint64_t v18 = v17;
          uint64_t v61 = countAndFlagsBits;
          uint64_t v62 = object;
          id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
          unint64_t v21 = v20;

          v86._uint64_t countAndFlagsBits = (uint64_t)v19;
          v86._unint64_t object = v21;
          swift_bridgeObjectRetain();
          v22._uint64_t countAndFlagsBits = 59;
          v22._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v22);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v23._uint64_t countAndFlagsBits = (uint64_t)v14;
          v23._unint64_t object = v16;
          String.append(_:)(v23);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v86._uint64_t countAndFlagsBits = 59;
          v86._unint64_t object = (void *)0xE100000000000000;
          v52._uint64_t countAndFlagsBits = (uint64_t)v14;
          v52._unint64_t object = v16;
          String.append(_:)(v52);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
        uint64_t v45 = v86._countAndFlagsBits;
        unint64_t v47 = (unint64_t)v86._object;
      }
      else
      {
        id v53 = objc_msgSend(v5, sel_path);
        if (v53)
        {
          uint64_t v54 = v53;
          uint64_t v45 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
          unint64_t v47 = v55;
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();

          uint64_t v45 = 0;
          unint64_t v47 = 0xE000000000000000;
        }
      }
      goto LABEL_42;
    }
    uint64_t v62 = object;
    uint64_t v87 = v7;
    id v60 = v5;
    swift_retain();
    swift_retain();
    Swift::String v9 = URL.path(percentEncoded:)(1);
    uint64_t v10 = v9._countAndFlagsBits;
    Swift::String v86 = v9;
    swift_bridgeObjectRetain();
    uint64_t v63 = v7;
    if (String.count.getter() <= 1)
    {
      unint64_t v11 = (unint64_t)v9._object;
    }
    else
    {
      unint64_t v11 = (unint64_t)v9._object;
      if ((specialized BidirectionalCollection.last.getter(v9._countAndFlagsBits, (unint64_t)v9._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t v10 = v86._countAndFlagsBits;
        unint64_t v11 = (unint64_t)v86._object;
      }
    }
    *(void *)&v83[0] = Set.init(minimumCapacity:)();
    uint64_t v38 = specialized Set._Variant.insert(_:)(&v78, 0x2FuLL);
    uint64_t v39 = *(void *)&v83[0];
    uint64_t v40 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0) {
      uint64_t v40 = v10 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v61 = countAndFlagsBits;
    if (v40)
    {
      *(void *)&v83[0] = v10;
      *((void *)&v83[0] + 1) = v11;
      MEMORY[0x1F4188790](v38);
      _OWORD v59[2] = v83;
      v59[3] = v39;
      swift_bridgeObjectRetain();
      uint64_t v41 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v59, v10, v11);
      if (v42 == 1)
      {
        unint64_t v44 = *((void *)&v83[0] + 1);
        Swift::Int v43 = *(void *)&v83[0];
        swift_bridgeObjectRetain();
        uint64_t v45 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v43, v44, v39);
        unint64_t v47 = v46;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v45 = (uint64_t)v41;
        unint64_t v47 = v42;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = v63;
      if (!v47)
      {
        swift_release();
        swift_release();
        id v56 = v60;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v45 = 0;
        unint64_t v47 = 0xE000000000000000;
        goto LABEL_41;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v45 = 0;
      unint64_t v47 = 0xE000000000000000;
      uint64_t v7 = v63;
    }
    swift_release();
    swift_release();
    id v56 = v60;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_41:
    swift_release();
    swift_release();

LABEL_42:
    swift_bridgeObjectRelease();
    uint64_t v57 = HIBYTE(v47) & 0xF;
    if ((v47 & 0x2000000000000000) == 0) {
      uint64_t v57 = v45 & 0xFFFFFFFFFFFFLL;
    }
    if (v57)
    {
      id v58 = objc_msgSend(v5, sel_URLByAppendingPathExtension_, String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease();
      if (v58)
      {
        URL.init(reference:)(v58, &v86);
        swift_release();
        swift_release();

        id v5 = (id)v86._countAndFlagsBits;
        uint64_t v6 = v86._object;
        uint64_t v7 = v87;
      }
    }
    goto LABEL_47;
  }
  if (v6)
  {
    if (v6[168]) {
      uint64_t v8 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else {
      uint64_t v8 = String.subscript.getter();
    }
    uint64_t v24 = MEMORY[0x185301F50](v8);
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0) {
      uint64_t v27 = v24 & 0xFFFFFFFFFFFFLL;
    }
    if (!v27) {
      goto LABEL_47;
    }
    int v28 = v6[218];
    char v85 = 1;
    v86._uint64_t countAndFlagsBits = (uint64_t)v6;
    v86._unint64_t object = (void *)0x101010101010101;
    LOBYTE(v87) = 1;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    uint64_t v92 = 0;
    char v93 = 1;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    LODWORD(v62) = v28;
    __int16 v97 = v28;
    swift_retain();
    unint64_t v29 = (unint64_t)URLComponents._URLComponents.path.getter();
    unint64_t v31 = v30;
    uint64_t v63 = v7;
    if (specialized String.validatePathExtension(_:)(countAndFlagsBits, (unint64_t)object))
    {
      v32._uint64_t countAndFlagsBits = countAndFlagsBits;
      v32._unint64_t object = object;
      String.append(_:)(v32);
      *(void *)&v83[0] = v29;
      *((void *)&v83[0] + 1) = v31;
      swift_bridgeObjectRetain();
      v33._uint64_t countAndFlagsBits = 46;
      v33._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v34 = HIBYTE(v31) & 0xF;
    if ((v31 & 0x2000000000000000) == 0) {
      uint64_t v34 = v29 & 0xFFFFFFFFFFFFLL;
    }
    if (v34)
    {
      unint64_t v35 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v29, v31);
      unint64_t v37 = v36;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v35 = 0;
      unint64_t v37 = 0xE000000000000000;
    }
    *(void *)&long long v78 = v6;
    BYTE8(v78) = 0;
    *(_DWORD *)((char *)&v78 + 9) = 16843009;
    BYTE13(v78) = 1;
    HIWORD(v78) = 256;
    v79[0] = 1;
    memset(&v79[8], 0, 64);
    uint64_t v80 = 0;
    LOBYTE(v81) = 1;
    *((void *)&v81 + 1) = v35;
    *(void *)&v82[0] = v37;
    *(_OWORD *)((char *)v82 + 8) = 0u;
    *(_OWORD *)((char *)&v82[1] + 8) = 0u;
    WORD4(v82[2]) = v62;
    v83[6] = v81;
    v83[7] = v82[0];
    v84[0] = v82[1];
    _OWORD v83[2] = *(_OWORD *)&v79[16];
    v83[3] = *(_OWORD *)&v79[32];
    _OWORD v83[4] = *(_OWORD *)&v79[48];
    v83[5] = 0uLL;
    v83[0] = v78;
    v83[1] = *(_OWORD *)v79;
    *(_OWORD *)((char *)v84 + 10) = *(_OWORD *)((char *)&v82[1] + 10);
    long long v72 = v81;
    long long v73 = v82[0];
    v74[0] = v82[1];
    *(_OWORD *)((char *)v74 + 10) = *(_OWORD *)((char *)&v82[1] + 10);
    long long v68 = *(_OWORD *)&v79[16];
    long long v69 = *(_OWORD *)&v79[32];
    long long v70 = *(_OWORD *)&v79[48];
    long long v71 = 0uLL;
    long long v66 = v78;
    long long v67 = *(_OWORD *)v79;
    uint64_t v75 = (uint64_t)v5;
    unint64_t v76 = v6;
    uint64_t v77 = v63;
    outlined retain of URLComponents((uint64_t)v83);
    URL.baseURL.getter(v65);
    uint64_t v48 = (void *)v65[0];
    v64[0] = v65[0];
    v64[1] = v65[1];
    uint64_t v64[2] = v65[2];
    URLComponents.url(relativeTo:)((uint64_t)v64, &v75);
    outlined consume of URL?(v48);
    outlined release of URLComponents((uint64_t)&v78);
    uint64_t v49 = v75;
    if (v75)
    {
      uint64_t v51 = v76;
      uint64_t v50 = v77;
      outlined release of URLComponents((uint64_t)&v78);
      swift_release();

      swift_release();
      id v5 = (id)v49;
      uint64_t v6 = v51;
      uint64_t v7 = v50;
LABEL_47:
      *uint64_t v2 = v5;
      v2[1] = v6;
      v2[2] = v7;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void URL.appendingPathExtension(_:)(unint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v69 = a1;
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *(void *)(v3 + 8);
  uint64_t v8 = *(void *)(v3 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    long long v67 = a2;
    swift_retain();
    id v10 = v6;
    swift_retain();
    if (!_foundation_swift_url_feature_enabled())
    {
      id v15 = objc_msgSend(v10, sel__parameterString);
      if (v15)
      {
        unint64_t v16 = v15;
        id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        id v19 = v18;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v20 = objc_msgSend(v10, sel_path)) != 0)
        {
          unint64_t v21 = v20;
          id v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
          uint64_t v24 = v23;

          uint64_t v92 = (uint64_t)v22;
          *(void *)&long long v93 = v24;
          swift_bridgeObjectRetain();
          v25._uint64_t countAndFlagsBits = 59;
          v25._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v25);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v26._uint64_t countAndFlagsBits = (uint64_t)v17;
          v26._unint64_t object = v19;
          String.append(_:)(v26);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v92 = 59;
          *(void *)&long long v93 = 0xE100000000000000;
          v57._uint64_t countAndFlagsBits = (uint64_t)v17;
          v57._unint64_t object = v19;
          String.append(_:)(v57);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
        unint64_t v49 = v92;
        unint64_t v51 = v93;
      }
      else
      {
        id v58 = objc_msgSend(v10, sel_path);
        if (v58)
        {
          uint64_t v59 = v58;
          unint64_t v49 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
          unint64_t v51 = v60;
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();

          unint64_t v49 = 0;
          unint64_t v51 = 0xE000000000000000;
        }
      }
      goto LABEL_45;
    }
    *((void *)&v93 + 1) = v8;
    id v11 = v10;
    swift_retain();
    swift_retain();
    Swift::String v12 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v12._countAndFlagsBits;
    uint64_t v92 = v12._countAndFlagsBits;
    *(void *)&long long v93 = v12._object;
    swift_bridgeObjectRetain();
    long long v68 = a3;
    if (String.count.getter() <= 1)
    {
      unint64_t object = (unint64_t)v12._object;
    }
    else
    {
      unint64_t object = (unint64_t)v12._object;
      if ((specialized BidirectionalCollection.last.getter(v12._countAndFlagsBits, (unint64_t)v12._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v92;
        unint64_t object = v93;
      }
    }
    *(void *)&v89[0] = Set.init(minimumCapacity:)();
    uint64_t v42 = specialized Set._Variant.insert(_:)(&v84, 0x2FuLL);
    uint64_t v43 = *(void *)&v89[0];
    uint64_t v44 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v44 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v44)
    {
      id v66 = v11;
      *(void *)&v89[0] = countAndFlagsBits;
      *((void *)&v89[0] + 1) = object;
      MEMORY[0x1F4188790](v42);
      _OWORD v65[2] = v89;
      uint64_t v65[3] = v43;
      swift_bridgeObjectRetain();
      uint64_t v45 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v65, countAndFlagsBits, object);
      if (v46 == 1)
      {
        unint64_t v48 = *((void *)&v89[0] + 1);
        Swift::Int v47 = *(void *)&v89[0];
        swift_bridgeObjectRetain();
        unint64_t v49 = (unint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v47, v48, v43);
        unint64_t v51 = v50;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v49 = (unint64_t)v45;
        unint64_t v51 = v46;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v11 = v66;
      a3 = v68;
      if (!v51)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v49 = 0;
        unint64_t v51 = 0xE000000000000000;
        goto LABEL_44;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v49 = 0;
      unint64_t v51 = 0xE000000000000000;
      a3 = v68;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_44:
    swift_release();
    swift_release();

LABEL_45:
    swift_bridgeObjectRelease();
    uint64_t v61 = HIBYTE(v51) & 0xF;
    if ((v51 & 0x2000000000000000) == 0) {
      uint64_t v61 = v49 & 0xFFFFFFFFFFFFLL;
    }
    if (v61
      && (id v62 = objc_msgSend(v10, sel_URLByAppendingPathExtension_, String._bridgeToObjectiveCImpl()()),
          swift_unknownObjectRelease(),
          v62))
    {
      URL.init(reference:)(v62, &v92);

      long long v63 = v93;
      *a3 = v92;
      *(_OWORD *)(a3 + 1) = v63;
    }
    else
    {
      *a3 = (uint64_t)v10;
      a3[1] = v7;
      a3[2] = v8;
      id v64 = v10;
      swift_retain();
      swift_retain();
    }
    return;
  }
  if (!v7)
  {
    __break(1u);
LABEL_53:
    __break(1u);
    return;
  }
  if (*(unsigned char *)(v7 + 168)) {
    uint64_t v9 = MEMORY[0x185302C80](0, 0xE000000000000000);
  }
  else {
    uint64_t v9 = String.subscript.getter();
  }
  uint64_t v27 = MEMORY[0x185301F50](v9);
  unint64_t v29 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v30 = HIBYTE(v29) & 0xF;
  if ((v29 & 0x2000000000000000) == 0) {
    uint64_t v30 = v27 & 0xFFFFFFFFFFFFLL;
  }
  if (v30)
  {
    long long v68 = a3;
    unsigned __int8 v31 = *(unsigned char *)(v7 + 218);
    char v91 = 1;
    uint64_t v92 = v7;
    *(void *)&long long v93 = 0x101010101010101;
    BYTE8(v93) = 1;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    uint64_t v98 = 0;
    char v99 = 1;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    __int16 v103 = v31;
    swift_retain();
    unint64_t v32 = (unint64_t)URLComponents._URLComponents.path.getter();
    unint64_t v34 = v33;
    if (specialized String.validatePathExtension(_:)(v69, (unint64_t)a2))
    {
      v35._uint64_t countAndFlagsBits = v69;
      v35._unint64_t object = a2;
      String.append(_:)(v35);
      *(void *)&v89[0] = v32;
      *((void *)&v89[0] + 1) = v34;
      swift_bridgeObjectRetain();
      v36._uint64_t countAndFlagsBits = 46;
      v36._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v37 = HIBYTE(v34) & 0xF;
    if ((v34 & 0x2000000000000000) == 0) {
      uint64_t v37 = v32 & 0xFFFFFFFFFFFFLL;
    }
    if (v37)
    {
      unint64_t v38 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v32, v34);
      unint64_t v40 = v39;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v38 = 0;
      unint64_t v40 = 0xE000000000000000;
    }
    *(void *)&long long v84 = v7;
    BYTE8(v84) = 0;
    *(_DWORD *)((char *)&v84 + 9) = 16843009;
    BYTE13(v84) = 1;
    HIWORD(v84) = 256;
    v85[0] = 1;
    memset(&v85[8], 0, 64);
    uint64_t v86 = 0;
    LOBYTE(v87) = 1;
    *((void *)&v87 + 1) = v38;
    *(void *)&v88[0] = v40;
    *(_OWORD *)((char *)v88 + 8) = 0u;
    *(_OWORD *)((char *)&v88[1] + 8) = 0u;
    WORD4(v88[2]) = v31;
    v89[6] = v87;
    v89[7] = v88[0];
    v90[0] = v88[1];
    v89[2] = *(_OWORD *)&v85[16];
    v89[3] = *(_OWORD *)&v85[32];
    v89[4] = *(_OWORD *)&v85[48];
    v89[5] = 0uLL;
    v89[0] = v84;
    v89[1] = *(_OWORD *)v85;
    *(_OWORD *)((char *)v90 + 10) = *(_OWORD *)((char *)&v88[1] + 10);
    long long v78 = v87;
    long long v79 = v88[0];
    v80[0] = v88[1];
    *(_OWORD *)((char *)v80 + 10) = *(_OWORD *)((char *)&v88[1] + 10);
    long long v74 = *(_OWORD *)&v85[16];
    long long v75 = *(_OWORD *)&v85[32];
    long long v76 = *(_OWORD *)&v85[48];
    long long v77 = 0uLL;
    long long v72 = v84;
    long long v73 = *(_OWORD *)v85;
    uint64_t v81 = (uint64_t)v6;
    uint64_t v82 = v7;
    uint64_t v83 = v8;
    outlined retain of URLComponents((uint64_t)v89);
    URL.baseURL.getter(v71);
    Swift::String v52 = (void *)v71[0];
    v70[0] = v71[0];
    v70[1] = v71[1];
    _OWORD v70[2] = v71[2];
    URLComponents.url(relativeTo:)((uint64_t)v70, &v81);
    outlined consume of URL?(v52);
    outlined release of URLComponents((uint64_t)&v84);
    uint64_t v53 = v81;
    if (v81)
    {
      uint64_t v55 = v82;
      uint64_t v54 = v83;
      outlined release of URLComponents((uint64_t)&v84);
      id v56 = v68;
      *long long v68 = v53;
      v56[1] = v55;
      v56[2] = v54;
      return;
    }
    goto LABEL_53;
  }
  *a3 = (uint64_t)v6;
  a3[1] = v7;
  a3[2] = v8;
  swift_retain();
  id v41 = v6;

  swift_retain();
}

uint64_t type metadata accessor for _MutablePairHandle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _MutableHandle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for String.LocalizationValue.FormatArgument(uint64_t result)
{
  uint64_t v1 = result;
  switch(*(unsigned char *)(result + 112))
  {
    case 0:
      goto LABEL_3;
    case 1:
      unint64_t result = swift_release();
      break;
    case 2:
    case 3:
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1(v1 + 32);
      unint64_t result = v1 + 64;
LABEL_3:
      unint64_t result = __swift_destroy_boxed_opaque_existential_1(result);
      break;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      swift_release();
      swift_release();
      unint64_t result = swift_bridgeObjectRelease();
      break;
    case 5:
      swift_bridgeObjectRelease();
      unint64_t result = swift_unknownObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *protocol witness for Encodable.encode(to:) in conformance URL(void *a1)
{
  return URL.encode(to:)(a1);
}

void *URL.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.CodingKeys>);
  uint64_t v19 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)v1;
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v8 = *(void *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  id v9 = v6;
  swift_retain();
  unint64_t result = (void *)_foundation_swift_url_feature_enabled();
  if (result)
  {
    if (!v7)
    {
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
  }
  else
  {
    id v11 = objc_msgSend(v9, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    swift_release();
    swift_release();
  }
  uint64_t v12 = v14[1];
  LOBYTE(v18) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v12)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v3);
    return (void *)swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v15 = v9;
    uint64_t v16 = v7;
    uint64_t v17 = v8;
    URL.baseURL.getter((uint64_t *)&v18);
    uint64_t v13 = v18;
    if (v18)
    {
      LOBYTE(v15) = 0;
      lazy protocol witness table accessor for type URL and conformance URL();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v3);
      return outlined consume of URL?(v13);
    }
    else
    {
      return (void *)(*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v5, v3);
    }
  }
}

void URL.baseURL.getter(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    if (v4)
    {
      if (*(unsigned char *)(v4 + 48))
      {
        swift_retain_n();
      }
      else
      {
        swift_retain_n();
        String.subscript.getter();
        swift_bridgeObjectRelease();
      }
      uint64_t v9 = swift_retain();
      uint64_t v10 = specialized static URL._cfURL(from:baseURL:)(v9);
      swift_release_n();
      *a1 = v10;
      a1[1] = v4;
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
    a1[2] = 0;
  }
  else
  {
    id v5 = objc_msgSend(v3, sel_baseURL);
    if (v5)
    {
      uint64_t v6 = v5;
      URL.init(reference:)(v5, &v11);

      uint64_t v7 = v11;
      long long v8 = v12;
    }
    else
    {
      uint64_t v7 = 0;
      long long v8 = 0uLL;
    }
    *a1 = v7;
    *(_OWORD *)(a1 + 1) = v8;
  }
}

void static NumberFormatStyleConfiguration.Notation.scientific.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

double URL.append<A>(path:directoryHint:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t, char *))
{
  char v6 = *a2;
  uint64_t v7 = v5[1];
  uint64_t v9 = v5[2];
  long long v12 = (void *)*v5;
  long long v8 = v12;
  uint64_t v13 = v7;
  uint64_t v14 = v9;
  char v11 = v6;
  a5(&v15, a1, &v11);

  swift_release();
  swift_release();
  *id v5 = v15;
  double result = *(double *)&v16;
  *(_OWORD *)(v5 + 1) = v16;
  return result;
}

void URL.appending<A>(path:directoryHint:)(uint64_t a1@<X0>, uint64_t a2@<X2>, void (*a3)(char *, uint64_t, uint64_t)@<X3>, void *a4@<X8>)
{
  id v66 = a3;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v11;
  uint64_t v14 = *(void **)v4;
  uint64_t v13 = *(void *)(v4 + 8);
  uint64_t v15 = *(void *)(v4 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    *(void *)&v86[0] = v14;
    *((void *)&v86[0] + 1) = v13;
    *(void *)&v86[1] = v15;
    LOBYTE(v84[0]) = v12;
    URL.appending<A>(path:directoryHint:encodingSlashes:)(a1, 0, a4);
    return;
  }
  uint64_t v60 = v15;
  uint64_t v61 = a4;
  long long v63 = v10;
  uint64_t v64 = a1;
  id v65 = v14;
  char v16 = dispatch thunk of StringProtocol.hasSuffix(_:)();
  char v17 = 1;
  uint64_t v62 = a2;
  char v18 = v16;
  uint64_t v19 = v12;
  unint64_t v21 = v63;
  uint64_t v20 = v64;
  switch(v19)
  {
    case 1:
      char v17 = 0;
      goto LABEL_14;
    case 2:
      uint64_t v22 = v60;
      swift_retain();
      id v23 = v65;
      swift_retain();
      if (!_foundation_swift_url_feature_enabled())
      {
        unsigned __int8 v26 = objc_msgSend(v23, sel_isFileURL);
        swift_release();
        swift_release();

        char v17 = v18;
        if (v26) {
          goto LABEL_35;
        }
        goto LABEL_14;
      }
      *(void *)&v86[0] = v23;
      *((void *)&v86[0] + 1) = v13;
      *(void *)&v86[1] = v22;
      URL.scheme.getter();
      if (!v24)
      {
        swift_release();
        swift_release();

LABEL_13:
        char v17 = v18;
        goto LABEL_14;
      }
      Swift::String v25 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v25._countAndFlagsBits == 1701603686 && v25._object == (void *)0xE400000000000000)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        uint64_t v20 = v64;
        goto LABEL_35;
      }
      char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      char v17 = v18;
      uint64_t v20 = v64;
      if ((v53 & 1) == 0)
      {
LABEL_14:
        uint64_t v27 = (void (*)(char *, uint64_t, uint64_t))(v17 & 1);
        unint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
        v28(v21, v20, v62);
        String.init<A>(_:)();
        uint64_t v29 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v30 = objc_msgSend(v65, sel_URLByAppendingPathComponent_isDirectory_, v29, v27);
        swift_unknownObjectRelease();
        if (!v30)
        {
          id v66 = v28;
          goto LABEL_17;
        }
LABEL_15:
        URL.init(reference:)(v30, v86);

        long long v31 = *(_OWORD *)((char *)v86 + 8);
        unint64_t v32 = v61;
        *uint64_t v61 = *(void *)&v86[0];
        *(_OWORD *)(v32 + 1) = v31;
        return;
      }
LABEL_35:
      uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
      v27(v21, v20, v62);
      String.init<A>(_:)();
      uint64_t v54 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v30 = objc_msgSend(v23, sel_URLByAppendingPathComponent_, v54);
      swift_unknownObjectRelease();
      if (v30) {
        goto LABEL_15;
      }
      id v66 = v27;
      LODWORD(v27) = 2;
LABEL_17:
      id v33 = v65;
      *(void *)&v86[0] = v65;
      *((void *)&v86[0] + 1) = v13;
      uint64_t v34 = v60;
      *(void *)&v86[1] = v60;
      uint64_t v35 = URL.absoluteString.getter();
      specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v35, v36, 1, (uint64_t)v83);
      outlined init with take of LocalePreferences?((uint64_t)v83, (uint64_t)v82, &demangling cache variable for type metadata for URLComponents._URLComponents?);
      outlined init with take of LocalePreferences?((uint64_t)v83, (uint64_t)v84, &demangling cache variable for type metadata for URLComponents._URLComponents?);
      if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v84) == 1)
      {
        uint64_t v37 = v61;
        *uint64_t v61 = v33;
        v37[1] = v13;
        v37[2] = v34;
        swift_retain();
        id v38 = v33;
        swift_retain();
      }
      else
      {
        uint64_t v59 = v13;
        long long v87 = v84[6];
        v88[0] = v84[7];
        v88[1] = v85[0];
        *(_OWORD *)((char *)&v88[1] + 10) = *(_OWORD *)((char *)v85 + 10);
        uint64_t v86[2] = v84[2];
        v86[3] = v84[3];
        v86[4] = v84[4];
        v86[5] = v84[5];
        v86[0] = v84[0];
        v86[1] = v84[1];
        outlined init with take of LocalePreferences?((uint64_t)v82, (uint64_t)v81, &demangling cache variable for type metadata for URLComponents._URLComponents?);
        outlined retain of URLComponents((uint64_t)v81);
        URLComponents._URLComponents.path.getter();
        outlined release of URLComponents?(v83);
        unint64_t v39 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v66(v63, v64, v62);
        String.init<A>(_:)();
        uint64_t v40 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v41 = objc_msgSend(v39, sel_stringByAppendingPathComponent_, v40);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v42 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
        unint64_t v44 = v43;

        if ((v44 & 0x2000000000000000) != 0) {
          unint64_t v45 = HIBYTE(v44) & 0xF;
        }
        else {
          unint64_t v45 = v42 & 0xFFFFFFFFFFFFLL;
        }
        outlined init with take of LocalePreferences?((uint64_t)&v87 + 8, (uint64_t)v89, &demangling cache variable for type metadata for String?);
        if (v45)
        {
          swift_bridgeObjectRetain();
          unint64_t v45 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v42, v44);
          unint64_t v47 = v46;
          swift_bridgeObjectRelease();
        }
        else
        {
          unint64_t v47 = 0xE000000000000000;
        }
        outlined release of String((uint64_t)v89);
        uint64_t v48 = v59;
        if (!v27
          || v27 == 2
          || (v49._uint64_t countAndFlagsBits = 47, v49._object = (void *)0xE100000000000000, String.hasSuffix(_:)(v49)))
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          *(void *)&long long v77 = v42;
          *((void *)&v77 + 1) = v44;
          swift_bridgeObjectRetain();
          v55._uint64_t countAndFlagsBits = 47;
          v55._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v55);
          swift_bridgeObjectRelease();
          uint64_t v56 = HIBYTE(*((void *)&v77 + 1)) & 0xFLL;
          if ((*((void *)&v77 + 1) & 0x2000000000000000) == 0) {
            uint64_t v56 = v77 & 0xFFFFFFFFFFFFLL;
          }
          if (v56)
          {
            unint64_t v45 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v77, *((unint64_t *)&v77 + 1));
            unint64_t v58 = v57;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v47 = v58;
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v45 = 0;
            unint64_t v47 = 0xE000000000000000;
          }
        }
        id v50 = v65;
        *(void *)&long long v77 = *(void *)&v86[0];
        BYTE8(v77) = 0;
        *(_DWORD *)((char *)&v77 + 9) = *(_DWORD *)((char *)v86 + 9);
        *(_WORD *)((char *)&v77 + 13) = BYTE13(v86[0]);
        HIBYTE(v77) = HIBYTE(v86[0]);
        LOBYTE(v78[0]) = v86[1];
        *(_OWORD *)((char *)v78 + 8) = *(_OWORD *)((char *)&v86[1] + 8);
        *(_OWORD *)((char *)&v78[1] + 8) = *(_OWORD *)((char *)&v86[2] + 8);
        *(_OWORD *)((char *)&v78[2] + 8) = *(_OWORD *)((char *)&v86[3] + 8);
        *(_OWORD *)((char *)&v78[3] + 8) = *(_OWORD *)((char *)&v86[4] + 8);
        *((void *)&v78[4] + 1) = *((void *)&v86[5] + 1);
        LOBYTE(v79) = v87;
        *((void *)&v79 + 1) = v45;
        *(void *)&v80[0] = v47;
        *(_OWORD *)((char *)v80 + 8) = *(_OWORD *)((char *)v88 + 8);
        *(_OWORD *)((char *)&v80[1] + 8) = *(_OWORD *)((char *)&v88[1] + 8);
        WORD4(v80[2]) = WORD4(v88[2]);
        long long v73 = v79;
        long long v74 = v80[0];
        v75[0] = v80[1];
        *(_OWORD *)((char *)v75 + 10) = *(_OWORD *)((char *)&v80[1] + 10);
        long long v69 = v78[1];
        long long v70 = v78[2];
        long long v71 = v78[3];
        long long v72 = v78[4];
        long long v67 = v77;
        long long v68 = v78[0];
        URLComponents.url.getter(v76);
        outlined release of URLComponents((uint64_t)&v77);
        id v51 = (id)v76[0];
        if (v76[0])
        {
          uint64_t v48 = v76[1];
          uint64_t v34 = v76[2];
        }
        else
        {
          swift_retain();
          id v51 = v50;
          swift_retain();
        }
        Swift::String v52 = v61;
        *uint64_t v61 = v51;
        v52[1] = v48;
        v52[2] = v34;
      }
      return;
    case 3:
      goto LABEL_13;
    default:
      goto LABEL_14;
  }
}

uint64_t _sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ2_()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](_sSo20NSNotificationCenterC10FoundationE13NotificationsC8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY3_, 0, 0);
}

void *thunk for @escaping @callee_guaranteed (@in_guaranteed URL?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  char v6 = *(void (**)(void **, void *, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v8 = a2;
    URL.init(reference:)(v8, &v13);
  }
  else
  {
    uint64_t v13 = 0;
    long long v14 = 0uLL;
    swift_retain();
  }
  id v9 = a3;
  id v10 = a4;
  v6(&v13, a3, a4);

  swift_release();
  char v11 = v13;

  return outlined consume of URL?(v11);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:)(uint64_t *a1, void *a2, void *a3)
{
  return closure #1 in closure #1 in closure #1 in NSURLSession.download(for:delegate:)(a1, a2, a3);
}

uint64_t closure #1 in closure #1 in closure #1 in NSURLSession.download(for:delegate:)(uint64_t *a1, void *a2, id a3)
{
  if (a3)
  {
    id v3 = a3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  uint64_t result = *a1;
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (!a2)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  outlined copy of URL?(result);
  id v6 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t outlined copy of URL?(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    swift_retain();
    id v2 = v1;
    return swift_retain();
  }
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(int a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = v3[1];
  LODWORD(v57[0]) = a1;
  uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v10 = v9;
  type metadata accessor for JSONReference();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v8;
  *(void *)(v11 + 24) = v10;
  *(unsigned char *)(v11 + 32) = 1;
  uint64_t v12 = *v4;
  unint64_t v13 = v4[2];
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(a3 + 24);
  v57[3] = v15;
  v57[4] = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(boxed_opaque_existential_1, a2, v15);
  uint64_t v17 = _JSONKeyedEncodingContainer._converted(_:)(v57, v12, v7, v13);
  uint64_t v19 = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  if (*(unsigned char *)(v7 + 32) != 4)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v20 = *(void *)(v7 + 16);
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = 0;
  *(unsigned char *)(v7 + 32) = 7;
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v57[0] = v20;
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
  uint64_t v24 = *(void *)(v20 + 16);
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v15) = v22;
    if (*(void *)(v20 + 24) < v26)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
      uint64_t v27 = v57[0];
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v19);
      if ((v15 & 1) != (v29 & 1)) {
        goto LABEL_51;
      }
      unint64_t v23 = v28;
      if ((v15 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v30 = *(void *)(v27 + 56);
      swift_release();
      *(void *)(v30 + 8 * v23) = v11;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v50 = *(void *)(v7 + 16);
      uint64_t v51 = *(void *)(v7 + 24);
      *(void *)(v7 + 16) = v27;
      *(void *)(v7 + 24) = 0;
      char v52 = *(unsigned char *)(v7 + 32);
      *(unsigned char *)(v7 + 32) = 4;
      outlined consume of JSONReference.Backing(v50, v51, v52);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v27 = v20;
      if (v22) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v23, v17, v19, v11, v27);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  uint64_t v31 = static _DictionaryStorage.copy(original:)();
  uint64_t v27 = v31;
  if (!*(void *)(v20 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
  unint64_t v32 = (void *)(v31 + 64);
  unint64_t v33 = (unint64_t)((1 << *(unsigned char *)(v27 + 32)) + 63) >> 6;
  if (v27 != v20 || (unint64_t)v32 >= v20 + 64 + 8 * v33) {
    memmove(v32, (const void *)(v20 + 64), 8 * v33);
  }
  uint64_t v54 = v20 + 64;
  int64_t v34 = 0;
  *(void *)(v27 + 16) = *(void *)(v20 + 16);
  uint64_t v35 = 1 << *(unsigned char *)(v20 + 32);
  uint64_t v36 = -1;
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  unint64_t v37 = v36 & *(void *)(v20 + 64);
  int64_t v55 = (unint64_t)(v35 + 63) >> 6;
  while (1)
  {
    if (v37)
    {
      unint64_t v38 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      int64_t v56 = v34;
      unint64_t v39 = v38 | (v34 << 6);
      goto LABEL_19;
    }
    int64_t v46 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v46 >= v55) {
      goto LABEL_45;
    }
    unint64_t v47 = *(void *)(v54 + 8 * v46);
    int64_t v48 = v34 + 1;
    if (!v47)
    {
      int64_t v48 = v34 + 2;
      if (v34 + 2 >= v55) {
        goto LABEL_45;
      }
      unint64_t v47 = *(void *)(v54 + 8 * v48);
      if (!v47)
      {
        int64_t v48 = v34 + 3;
        if (v34 + 3 >= v55) {
          goto LABEL_45;
        }
        unint64_t v47 = *(void *)(v54 + 8 * v48);
        if (!v47)
        {
          int64_t v48 = v34 + 4;
          if (v34 + 4 >= v55) {
            goto LABEL_45;
          }
          unint64_t v47 = *(void *)(v54 + 8 * v48);
          if (!v47)
          {
            int64_t v48 = v34 + 5;
            if (v34 + 5 >= v55) {
              goto LABEL_45;
            }
            unint64_t v47 = *(void *)(v54 + 8 * v48);
            if (!v47)
            {
              int64_t v48 = v34 + 6;
              if (v34 + 6 >= v55) {
                goto LABEL_45;
              }
              unint64_t v47 = *(void *)(v54 + 8 * v48);
              if (!v47)
              {
                int64_t v48 = v34 + 7;
                if (v34 + 7 >= v55) {
                  goto LABEL_45;
                }
                unint64_t v47 = *(void *)(v54 + 8 * v48);
                if (!v47)
                {
                  int64_t v48 = v34 + 8;
                  if (v34 + 8 >= v55) {
                    goto LABEL_45;
                  }
                  unint64_t v47 = *(void *)(v54 + 8 * v48);
                  if (!v47) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    unint64_t v37 = (v47 - 1) & v47;
    int64_t v56 = v48;
    unint64_t v39 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_19:
    uint64_t v40 = 16 * v39;
    id v41 = (void *)(*(void *)(v20 + 48) + 16 * v39);
    uint64_t v42 = v41[1];
    uint64_t v43 = 8 * v39;
    uint64_t v44 = *(void *)(*(void *)(v20 + 56) + v43);
    unint64_t v45 = (void *)(*(void *)(v27 + 48) + v40);
    *unint64_t v45 = *v41;
    v45[1] = v42;
    *(void *)(*(void *)(v27 + 56) + v43) = v44;
    swift_bridgeObjectRetain();
    swift_retain();
    int64_t v34 = v56;
  }
  uint64_t v49 = v34 + 9;
  if (v34 + 9 >= v55) {
    goto LABEL_45;
  }
  unint64_t v47 = *(void *)(v54 + 8 * v49);
  if (v47)
  {
    int64_t v48 = v34 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v48 = v49 + 1;
    if (__OFADD__(v49, 1)) {
      break;
    }
    if (v48 >= v55) {
      goto LABEL_45;
    }
    unint64_t v47 = *(void *)(v54 + 8 * v48);
    ++v49;
    if (v47) {
      goto LABEL_44;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static Locale.MeasurementSystem.uk.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for uk != -1) {
    swift_once();
  }
  uint64_t v2 = unk_1E8ED2BA0;
  long long v3 = xmmword_1E8ED2BA8;
  *(void *)a1 = static Locale.MeasurementSystem.uk;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

NSNumber __swiftcall Float._bridgeToObjectiveC()()
{
  int v1 = v0;
  id v2 = objc_allocWithZone((Class)NSNumber);
  LODWORD(v3) = v1;

  return (NSNumber)objc_msgSend(v2, sel_initWithFloat_, v3);
}

uint64_t AttributedString.Runs.Run.subscript.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
  a1[3] = 0;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return _PlistKeyedEncodingContainerXML.encode<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier and conformance Calendar.Identifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier);
  }
  return result;
}

uint64_t static Dictionary._forceBridgeFromObjectiveC(_:result:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = MEMORY[0x1E4FBB1A0];
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  if (a3 == v10 && a4 == MEMORY[0x1E4FBC840] + 8)
  {
    uint64_t result = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (result) {
      goto LABEL_10;
    }
    uint64_t result = (uint64_t)objc_msgSend(a1, sel_count);
    if (!result)
    {
      *a2 = MEMORY[0x1E4FBC868];
      return result;
    }
    uint64_t v13 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v14 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v15 = (void *)v14[6];
    uint64_t v16 = v14[7];
    swift_retain();
    uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v15, v16, a1, v13);
    if (result < 0 || v13 < result)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    void v14[2] = result;
    if (!result)
    {
LABEL_26:
      uint64_t result = swift_release();
      *a2 = v14;
      return result;
    }
    uint64_t v17 = result - 1;
    uint64_t v18 = v14 + 8;
    while (1)
    {
      while (1)
      {
        if ((*(void *)((char *)v18 + (((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17)) {
          goto LABEL_18;
        }
        unint64_t v23 = (uint64_t *)(v14[6] + 16 * v17);
        uint64_t v24 = *v23;
        uint64_t v25 = v23[1];
        swift_bridgeObjectRetain();
        unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
        char v28 = v27;
        swift_bridgeObjectRelease();
        if ((v28 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v29 = v14[2];
        BOOL v30 = __OFSUB__(v29, 1);
        uint64_t v31 = v29 - 1;
        if (v30)
        {
          __break(1u);
          goto LABEL_43;
        }
        void v14[2] = v31;
LABEL_18:
        if (--v17 < 0) {
          goto LABEL_26;
        }
      }
      *(void *)((char *)v18 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      if (v17 < (uint64_t)v26)
      {
        *(_OWORD *)(v14[6] + 16 * v26) = *(_OWORD *)(v14[6] + 16 * v17);
        uint64_t v19 = v14[7];
        uint64_t v20 = (_OWORD *)(v19 + 32 * v17);
        long long v21 = v20[1];
        char v22 = (_OWORD *)(v19 + 32 * v26);
        _OWORD *v22 = *v20;
        v22[1] = v21;
        goto LABEL_18;
      }
      if (v26 == v17) {
        goto LABEL_18;
      }
      uint64_t v32 = v14[6];
      unint64_t v33 = (uint64_t *)(v32 + 16 * v26);
      int64_t v34 = (uint64_t *)(v32 + 16 * v17);
      uint64_t v35 = *v33;
      uint64_t v36 = v33[1];
      uint64_t v37 = v34[1];
      *unint64_t v33 = *v34;
      v33[1] = v37;
      uint64_t *v34 = v35;
      v34[1] = v36;
      uint64_t v38 = v14[7];
      unint64_t v39 = (_OWORD *)(v38 + 32 * v26);
      uint64_t v40 = (_OWORD *)(v38 + 32 * v17);
      outlined init with take of Any(v39, &aBlock);
      outlined init with take of Any(v40, v39);
      outlined init with take of Any(&aBlock, v40);
      if (v17 < 0) {
        goto LABEL_26;
      }
    }
  }
  uint64_t result = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (!result)
  {
    if (_swift_isClassOrObjCExistentialType() & 1) != 0 && (_swift_isClassOrObjCExistentialType())
    {
      uint64_t result = (uint64_t)objc_msgSend(a1, sel_copyWithZone_, 0);
      *a2 = ~((unint64_t)result >> 1) & 0x4000000000000000 | result;
      return result;
    }
    if (*(uint64_t *)(*(void *)(a3 - 8) + 72) >= 8 && *(void *)(*(void *)(a4 - 8) + 72) > 7)
    {
      id v44 = objc_msgSend(a1, sel_count);
      if (v44)
      {
        MEMORY[0x1F4188790](v44);
        v51[2] = a3;
        void v51[3] = a4;
        v51[4] = a5;
        v51[5] = a1;
        v51[6] = v45;
        uint64_t result = _NativeDictionary.init(_unsafeUninitializedCapacity:allowingDuplicates:initializingWith:)(v45, v46, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:), (uint64_t)v51, a3, a4, a5);
      }
      else
      {
        uint64_t result = Dictionary.init(dictionaryLiteral:)();
      }
      goto LABEL_10;
    }
    id v42 = objc_msgSend(a1, sel_count);
    if (v42)
    {
      type metadata accessor for _DictionaryStorage();
      uint64_t v43 = static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t v43 = MEMORY[0x1E4FBC868];
    }
    uint64_t v57 = v43;
    id v58 = v42;
    unint64_t v47 = (void *)swift_allocObject();
    v47[2] = a3;
    v47[3] = a4;
    v47[4] = a5;
    v47[5] = &v57;
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = closure #1 in static Dictionary._forceBridgeFromObjectiveC(_:result:)partial apply;
    *(void *)(v48 + 24) = v47;
    int64_t v55 = thunk for @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
    uint64_t v56 = v48;
    *(void *)&aBlocunint64_t k = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 1107296256;
    char v53 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    uint64_t v54 = &block_descriptor_15;
    uint64_t v49 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(a1, sel_enumerateKeysAndObjectsUsingBlock_, v49);
    _Block_release(v49);
    isEscapingClosureAtFileLocatiouint64_t n = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      if (*(id *)(v57 + 16) == v58)
      {
        *a2 = v57;
        return swift_release();
      }
      goto LABEL_45;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    return result;
  }
LABEL_10:
  *a2 = result;
  return result;
}

uint64_t Date.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v6 = v5;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    *a2 = v6;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void URL.appendingPathComponent(_:)(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = *(void **)v3;
  uint64_t v7 = *(unsigned char **)(v3 + 8);
  uint64_t v9 = *(void *)(v3 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    if (_foundation_swift_url_feature_enabled())
    {
      specialized URL.appending<A>(path:directoryHint:encodingSlashes:)(a1, a2, 2, 0, v8, v7, v9, a3);
      return;
    }
    v12._uint64_t countAndFlagsBits = 47;
    v12._unint64_t object = (void *)0xE100000000000000;
    Swift::Bool v13 = String.hasSuffix(_:)(v12);
    swift_retain();
    id v14 = v8;
    swift_retain();
    if (_foundation_swift_url_feature_enabled())
    {
      *(void *)uint64_t v105 = v14;
      *(void *)&v105[8] = v7;
      *(void *)&v105[16] = v9;
      URL.scheme.getter();
      if (v15)
      {
        Swift::String v16 = String.lowercased()();
        swift_bridgeObjectRelease();
        if (v16._countAndFlagsBits == 1701603686 && v16._object == (void *)0xE400000000000000)
        {
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          goto LABEL_23;
        }
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        if (v28)
        {
LABEL_23:
          *(void *)uint64_t v105 = a1;
          *(void *)&v105[8] = a2;
          swift_bridgeObjectRetain();
          String.init<A>(_:)();
          uint64_t v29 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v10 = objc_msgSend(v14, sel_URLByAppendingPathComponent_, v29);
          swift_unknownObjectRelease();
          if (!v10)
          {
            BOOL v30 = v14;
            LODWORD(v31) = 2;
LABEL_27:
            *(void *)uint64_t v105 = v30;
            *(void *)&v105[8] = v7;
            *(void *)&v105[16] = v9;
            uint64_t v33 = URL.absoluteString.getter();
            specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v33, v34, 1, (uint64_t)v95);
            outlined init with take of LocalePreferences?((uint64_t)v95, (uint64_t)v94, &demangling cache variable for type metadata for URLComponents._URLComponents?);
            outlined init with take of LocalePreferences?((uint64_t)v95, (uint64_t)&v96, &demangling cache variable for type metadata for URLComponents._URLComponents?);
            if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v96) == 1)
            {
              *a3 = v30;
              a3[1] = v7;
              a3[2] = v9;
              id v35 = v30;
              swift_retain();
              goto LABEL_29;
            }
            long long v78 = v30;
            long long v106 = v102;
            *(_OWORD *)uint64_t v107 = v103;
            *(_OWORD *)&v107[16] = v104[0];
            *(_OWORD *)&v107[26] = *(_OWORD *)((char *)v104 + 10);
            *(_OWORD *)&v105[32] = v98;
            *(_OWORD *)&v105[48] = v99;
            *(_OWORD *)&v105[64] = v100;
            *(_OWORD *)&v105[80] = v101;
            *(_OWORD *)uint64_t v105 = v96;
            *(_OWORD *)&v105[16] = v97;
            outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)v93, &demangling cache variable for type metadata for URLComponents._URLComponents?);
            outlined retain of URLComponents((uint64_t)v93);
            URLComponents._URLComponents.path.getter();
            outlined release of URLComponents?(v95);
            uint64_t v36 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            unint64_t v82 = a1;
            unint64_t v83 = (unint64_t)a2;
            swift_bridgeObjectRetain();
            String.init<A>(_:)();
            uint64_t v37 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v38 = objc_msgSend(v36, sel_stringByAppendingPathComponent_, v37);
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v39 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
            unint64_t v41 = v40;

            if ((v41 & 0x2000000000000000) != 0) {
              unint64_t v42 = HIBYTE(v41) & 0xF;
            }
            else {
              unint64_t v42 = v39 & 0xFFFFFFFFFFFFLL;
            }
            outlined init with take of LocalePreferences?((uint64_t)&v106 + 8, (uint64_t)v108, &demangling cache variable for type metadata for String?);
            if (v42)
            {
              swift_bridgeObjectRetain();
              unint64_t v42 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v39, v41);
              unint64_t v44 = v43;
              swift_bridgeObjectRelease();
            }
            else
            {
              unint64_t v44 = 0xE000000000000000;
            }
            outlined release of String((uint64_t)v108);
            if (!v31
              || v31 == 2
              || (v57._uint64_t countAndFlagsBits = 47, v57._object = (void *)0xE100000000000000, String.hasSuffix(_:)(v57)))
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              unint64_t v82 = v39;
              unint64_t v83 = v41;
              swift_bridgeObjectRetain();
              v59._uint64_t countAndFlagsBits = 47;
              v59._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v59);
              swift_bridgeObjectRelease();
              unint64_t v60 = HIBYTE(v41) & 0xF;
              if ((v41 & 0x2000000000000000) == 0) {
                unint64_t v60 = v82 & 0xFFFFFFFFFFFFLL;
              }
              if (v60)
              {
                unint64_t v42 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v82, v83);
                unint64_t v62 = v61;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                unint64_t v44 = v62;
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                unint64_t v42 = 0;
                unint64_t v44 = 0xE000000000000000;
              }
            }
            unint64_t v82 = *(void *)v105;
            LOBYTE(v83) = 0;
            *(_DWORD *)((char *)&v83 + 1) = *(_DWORD *)&v105[9];
            *(_WORD *)((char *)&v83 + 5) = v105[13];
            HIBYTE(v83) = v105[15];
            char v84 = v105[16];
            *(_OWORD *)char v85 = *(_OWORD *)&v105[24];
            *(_OWORD *)&unsigned char v85[16] = *(_OWORD *)&v105[40];
            *(_OWORD *)&v85[32] = *(_OWORD *)&v105[56];
            *(_OWORD *)&v85[48] = *(_OWORD *)&v105[72];
            *(void *)&v85[64] = *(void *)&v105[88];
            char v86 = v106;
            unint64_t v87 = v42;
            unint64_t v88 = v44;
            long long v89 = *(_OWORD *)&v107[8];
            long long v90 = *(_OWORD *)&v107[24];
            char v91 = v107[40];
            char v92 = v107[41];
            URLComponents.url.getter((uint64_t *)&v79);
            outlined release of URLComponents((uint64_t)&v82);
            id v58 = v79;
            if (v79)
            {
              uint64_t v7 = v80;
              uint64_t v9 = v81;
            }
            else
            {
              id v58 = v78;
              swift_retain();
              swift_retain();
            }
            *a3 = v58;
            a3[1] = v7;
            a3[2] = v9;
            return;
          }
          goto LABEL_7;
        }
      }
      else
      {
        swift_release();
        swift_release();
      }
    }
    else
    {
      unsigned __int8 v20 = objc_msgSend(v14, sel_isFileURL);
      swift_release();
      swift_release();

      if (v20) {
        goto LABEL_23;
      }
    }
    uint64_t v31 = v13;
    *(void *)uint64_t v105 = a1;
    *(void *)&v105[8] = a2;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    uint64_t v32 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v10 = objc_msgSend(v14, sel_URLByAppendingPathComponent_isDirectory_, v32, v31);
    swift_unknownObjectRelease();
    if (!v10)
    {
      BOOL v30 = v14;
      goto LABEL_27;
    }
LABEL_7:
    URL.init(reference:)(v10, v105);

    long long v11 = *(_OWORD *)&v105[8];
    *a3 = *(void *)v105;
    *(_OWORD *)(a3 + 1) = v11;
    return;
  }
  id v10 = objc_msgSend(v8, sel_URLByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v10) {
    goto LABEL_7;
  }
  *(void *)uint64_t v105 = v8;
  *(void *)&v105[8] = v7;
  *(void *)&v105[16] = v9;
  uint64_t v17 = URL.absoluteString.getter();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v17, v18, 1, (uint64_t)v95);
  outlined init with take of LocalePreferences?((uint64_t)v95, (uint64_t)v94, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?((uint64_t)v95, (uint64_t)&v96, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v96) == 1)
  {
    *a3 = v8;
    a3[1] = v7;
    a3[2] = v9;
    swift_retain();
    id v19 = v8;
LABEL_29:
    swift_retain();
    return;
  }
  long long v106 = v102;
  *(_OWORD *)uint64_t v107 = v103;
  *(_OWORD *)&v107[16] = v104[0];
  *(_OWORD *)&v107[26] = *(_OWORD *)((char *)v104 + 10);
  *(_OWORD *)&v105[32] = v98;
  *(_OWORD *)&v105[48] = v99;
  *(_OWORD *)&v105[64] = v100;
  *(_OWORD *)&v105[80] = v101;
  *(_OWORD *)uint64_t v105 = v96;
  *(_OWORD *)&v105[16] = v97;
  outlined init with take of LocalePreferences?((uint64_t)v94, (uint64_t)v93, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined retain of URLComponents((uint64_t)v93);
  URLComponents._URLComponents.path.getter();
  outlined release of URLComponents?(v95);
  long long v21 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v22 = objc_msgSend(v21, sel_stringByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v23 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  unint64_t v25 = v24;

  uint64_t v26 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000) == 0) {
    uint64_t v26 = v23 & 0xFFFFFFFFFFFFLL;
  }
  long long v76 = a3;
  uint64_t v63 = v9;
  if (v26)
  {
    unint64_t v77 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v23, v25);
    unint64_t v75 = v27;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v77 = 0;
    unint64_t v75 = 0xE000000000000000;
  }
  char v73 = v107[40];
  char v74 = v107[41];
  uint64_t v71 = *(void *)&v107[32];
  uint64_t v72 = *(void *)&v107[24];
  uint64_t v69 = *(void *)&v107[16];
  uint64_t v70 = *(void *)&v107[8];
  char v68 = v106;
  long long v67 = *(_OWORD *)&v105[80];
  long long v66 = *(_OWORD *)&v105[64];
  long long v65 = *(_OWORD *)&v105[48];
  uint64_t v45 = *(void *)&v105[24];
  long long v64 = *(_OWORD *)&v105[32];
  char v46 = v105[16];
  char v47 = v105[15];
  unsigned __int8 v48 = v105[13];
  char v49 = v105[12];
  char v50 = v105[11];
  char v51 = v105[10];
  char v52 = v105[9];
  unint64_t v53 = *(void *)v105;
  outlined init with take of LocalePreferences?((uint64_t)&v106 + 8, (uint64_t)v108, &demangling cache variable for type metadata for String?);
  outlined release of String((uint64_t)v108);
  unint64_t v82 = v53;
  LOBYTE(v83) = 0;
  BYTE1(v83) = v52;
  BYTE2(v83) = v51;
  BYTE3(v83) = v50;
  BYTE4(v83) = v49;
  *(_WORD *)((char *)&v83 + 5) = v48;
  HIBYTE(v83) = v47;
  char v84 = v46;
  *(void *)char v85 = v45;
  *(_OWORD *)&v85[8] = v64;
  *(_OWORD *)&v85[24] = v65;
  *(_OWORD *)&unsigned char v85[40] = v66;
  *(_OWORD *)&v85[56] = v67;
  char v86 = v68;
  unint64_t v87 = v77;
  unint64_t v88 = v75;
  *(void *)&long long v89 = v70;
  *((void *)&v89 + 1) = v69;
  *(void *)&long long v90 = v72;
  *((void *)&v90 + 1) = v71;
  char v91 = v73;
  char v92 = v74;
  URLComponents.url.getter((uint64_t *)&v79);
  outlined release of URLComponents((uint64_t)&v82);
  id v54 = v79;
  if (v79)
  {
    uint64_t v55 = (uint64_t)v80;
    uint64_t v56 = v81;
  }
  else
  {
    uint64_t v56 = v63;
    swift_retain();
    id v54 = v8;
    uint64_t v55 = swift_retain();
  }
  *long long v76 = v54;
  v76[1] = v55;
  v76[2] = v56;
}

uint64_t (*JSONDecoder.userInfo.modify(void *a1))(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10Foundation13__JSONDecoder_optionsLock);
  a1[1] = v1;
  a1[2] = v3;
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  uint64_t v4 = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  a1[3] = OBJC_IVAR____TtC10Foundation13__JSONDecoder_options;
  *a1 = *(void *)(v1 + v4 + 104);
  swift_bridgeObjectRetain();
  return JSONDecoder.userInfo.modify;
}

uint64_t StringProtocol.uppercased(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.lowercased(with:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))ICU.CaseMap.uppercase(_:), MEMORY[0x1E4FBB100]);
}

ValueMetadata *type metadata accessor for NSURLSession.CancelState.State()
{
  return &type metadata for NSURLSession.CancelState.State;
}

void static Date.FormatStyle.Symbol.YearForWeekOfYear.defaultDigits.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
}

uint64_t destroy for PresentationIntent.IntentType(uint64_t a1)
{
  return outlined consume of PresentationIntent.Kind(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t DateComponents.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 16);
  return swift_unknownObjectRetain();
}

uint64_t DateComponents.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

uint64_t DateComponents.yearForWeekOfYear.getter()
{
  return *(void *)(v0 + 272);
}

ValueMetadata *type metadata accessor for Morphology()
{
  return &type metadata for Morphology;
}

uint64_t specialized _withResizingUCharBuffer(initialSize:_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v8[2] = *MEMORY[0x1E4F143B8];
  if ((isStackAllocationSafe & 0x80000000) != 0) {
    __break(1u);
  }
  if ((int)isStackAllocationSafe < 513
    || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v8[-1] - v4, a3, v8);
    return v8[0];
  }
  else
  {
    uint64_t v6 = swift_slowAlloc();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v6, a3, v8);
    MEMORY[0x185309510](v6, -1, -1);
    return v8[0];
  }
}

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, void *a3@<X8>)
{
  if (!a1) {
LABEL_7:
  }
    __break(1u);
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = ucal_getCanonicalTimeZoneID();
  *a3 = 0;
  a3[1] = 0;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(uint64_t a1)
{
  *(void *)(a1 + 16) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 24) = result;
  return result;
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.NotEqual<A, B>(uint64_t a1)
{
  *(void *)(a1 + 16) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 24) = result;
  return result;
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

uint64_t _PlistDecoder.unwrapDate<A>(from:for:_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v36[1] = a6;
  uint64_t v7 = v6;
  uint64_t v39 = a5;
  uint64_t v41 = a3;
  unint64_t v42 = a2;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *v6;
  uint64_t v40 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  id v38 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  id v19 = (char *)v36 - v18;
  uint64_t v20 = *(void *)(v10 + 80);
  uint64_t v21 = *(void *)(v10 + 88);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v21 + 40))(a1, v20, v21, v17))
  {
    uint64_t v22 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v37 = v23;
    *unint64_t v23 = &type metadata for Date;
    unint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v24(v19, v41, v12);
    v24(v15, (uint64_t)v19, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v15, 1, a4) == 1)
    {
      unint64_t v25 = *(void (**)(char *, uint64_t))(v13 + 8);
      v25(v15, v12);
      _CodingPathNode.path.getter(v42);
      v25(v19, v12);
    }
    else
    {
      uint64_t v41 = v22;
      uint64_t v29 = v40;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v38, v15, a4);
      uint64_t v30 = _CodingPathNode.path.getter(v42);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v32 = v39;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v32;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      unint64_t v34 = v38;
      (*(void (**)(uint64_t *, char *, uint64_t))(v29 + 16))(boxed_opaque_existential_1, v38, a4);
      uint64_t v43 = v30;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v34, a4);
      uint64_t v22 = v41;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    id v35 = v37;
    uint64_t v43 = 0;
    unint64_t v44 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v22 - 8) + 104))(v35, *MEMORY[0x1E4FBBA80], v22);
    return swift_willThrow();
  }
  else
  {
    uint64_t v26 = v7[3];
    unint64_t v27 = *(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
    swift_unknownObjectRetain();
    v27(a1, v26, v42, v41, a4, v39, v20, v21);
    return swift_unknownObjectRelease();
  }
}

void protocol witness for static PlistDecodingFormat.unwrapDate<A>(from:in:for:_:) in conformance _BPlistDecodingFormat(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
}

void static _BPlistDecodingFormat.unwrapDate<A>(from:in:for:_:)(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
}

void BPlistMap.Value.dateValue<A>(in:for:_:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
  uint64_t v30 = a5;
  unint64_t v31 = a2;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v32 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v15);
  id v19 = (char *)&v28 - v16;
  if (v17 >> 60 == 5)
  {
    *a6 = *(void *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
  }
  else
  {
    unint64_t v29 = v17;
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
    v20((char *)&v28 - v16, a3, v11, v18);
    ((void (*)(char *, char *, uint64_t))v20)(v14, v19, v11);
    uint64_t v21 = v32;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v14, 1, a4) == 1)
    {
      uint64_t v22 = *(void (**)(char *, uint64_t))(v12 + 8);
      v22(v14, v11);
      _CodingPathNode.path.getter(v31);
      v22(v19, v11);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v10, v14, a4);
      uint64_t v23 = _CodingPathNode.path.getter(v31);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1821037E0;
      uint64_t v25 = v30;
      *(void *)(inited + 56) = a4;
      *(void *)(inited + 64) = v25;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v21 + 16))(boxed_opaque_existential_1, v10, a4);
      uint64_t v33 = v23;
      specialized Array.append<A>(contentsOf:)(inited);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v10, a4);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    specialized static DecodingError._typeMismatch<A>(at:expectation:reality:)((uint64_t)&type metadata for Date, v29, v27);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

void IndexSet.insert<A>(integersIn:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  IndexSet.insert(integersIn:)(v0, v1);
}

void IndexSet.insert(integersIn:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  if (*(unsigned char *)(*(void *)v3 + 24) != 1)
  {
    uint64_t v8 = *(void **)(*(void *)v3 + 16);
LABEL_9:
    id v10 = v8;
    objc_msgSend(v10, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
    swift_dynamicCast();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v14;
    *(unsigned char *)(v11 + 24) = 1;
    *(void *)uint64_t v3 = v11;
    id v12 = v14;
    swift_release();
    if (!__OFSUB__(a2, a1))
    {
LABEL_10:
      objc_msgSend(v12, *a3, a1);

      return;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *(void **)(*(void *)v3 + 16);
  if ((*(unsigned char *)(*(void *)v3 + 24) & 1) == 0) {
    goto LABEL_9;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v10 = v8;
    objc_msgSend(v10, sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
    swift_dynamicCast();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v14;
    *(unsigned char *)(v13 + 24) = 1;
    *(void *)uint64_t v3 = v13;
    id v12 = v14;
    swift_release();
    if (!__OFSUB__(a2, a1)) {
      goto LABEL_10;
    }
    __break(1u);
    goto LABEL_14;
  }
  if (__OFSUB__(a2, a1))
  {
LABEL_15:
    __break(1u);
    return;
  }
  uint64_t v9 = *a3;

  objc_msgSend(v8, v9, a1, a2 - a1);
}

void IndexSet.insert(integersIn:)(uint64_t a1, uint64_t a2)
{
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

uint64_t protocol witness for Error._userInfo.getter in conformance CFErrorRef()
{
  CFDictionaryRef v3 = CFErrorCopyUserInfo(*v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFDictionaryRef?);
  uint64_t v1 = Optional._bridgeToObjectiveC()();

  return v1;
}

unsigned char *storeEnumTagSinglePayload for Calendar.Current(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

__CFString *protocol witness for Error._domain.getter in conformance CFErrorRef()
{
  unint64_t result = (id)CFErrorGetDomain(*v0);
  if (result)
  {
    uint64_t v2 = result;
    id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    return (__CFString *)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NSURLSession.download(from:delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 80);
  long long v3 = *(_OWORD *)(v0 + 64);
  *(void *)uint64_t v1 = *(void *)(v0 + 56);
  *(_OWORD *)(v1 + 8) = v3;
  unsigned int v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  long long v7;
  long long v8;
  uint64_t v9;

  uint64_t v8 = *(_OWORD *)(v0 + 144);
  uint64_t v1 = *(void *)(v0 + 120);
  type metadata accessor for NSURLSession.CancelState();
  uint64_t v7 = *(_OWORD *)(v0 + 128);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 160) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  long long v3 = swift_initStackObject();
  *(void *)(v0 + 168) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(inited + 16) = v3;
  unsigned int v4 = swift_task_alloc();
  *(void *)(v0 + 176) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v8;
  *(void *)(v4 + 48) = v1;
  *(void *)(v4 + 56) = inited;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, NSURLResponse));
  *uint64_t v5 = v0;
  v5[1] = NSURLSession.download(from:delegate:);
  return MEMORY[0x1F4188148](v0 + 56, &async function pointer to partial apply for closure #1 in NSURLSession.download(from:delegate:));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = NSURLSession.download(from:delegate:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = NSURLSession.download(from:delegate:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Int UUID.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

Foundation::Date __swiftcall Date.init(timeIntervalSinceNow:)(Swift::Double timeIntervalSinceNow)
{
  long long v3 = v1;
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  result._Swift::Double time = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001 + timeIntervalSinceNow;
  *long long v3 = result._time;
  return result;
}

uint64_t StringProtocol.capitalized.getter(uint64_t a1)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1, v3);
  String.init<A>(_:)();
  uint64_t countAndFlagsBits = String._capitalized()()._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

Swift::String __swiftcall String._capitalized()()
{
  unint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v45 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v4 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = 0;
  unint64_t v48 = 0xE000000000000000;
  if ((v2 & 0x1000000000000000) != 0)
  {
    Swift::Int v8 = String.UTF8View._foreignCount()();
    BOOL v7 = (v2 & 0x2000000000000000) == 0;
  }
  else
  {
    BOOL v7 = (v2 & 0x2000000000000000) == 0;
    if ((v2 & 0x2000000000000000) != 0) {
      Swift::Int v8 = HIBYTE(v2) & 0xF;
    }
    else {
      Swift::Int v8 = v3 & 0xFFFFFFFFFFFFLL;
    }
  }
  MEMORY[0x185301FA0](v8);
  uint64_t v43 = v3 & 0xFFFFFFFFFFFFLL;
  if (v7) {
    uint64_t v9 = v3 & 0xFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v9 = HIBYTE(v2) & 0xF;
  }
  if (v9)
  {
    BOOL v44 = v7;
    uint64_t v41 = v2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v42 = HIBYTE(v2) & 0xF;
    v40[1] = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    id v10 = (void (**)(char *, uint64_t))(v4 + 8);
    swift_bridgeObjectRetain();
    char v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v3;
    while (1)
    {
      if ((v2 & 0x1000000000000000) != 0)
      {
        unsigned int v16 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if (v44)
        {
          if ((v3 & 0x1000000000000000) == 0) {
            _StringObject.sharedUTF8.getter();
          }
        }
        else
        {
          v46[0] = v3;
          v46[1] = v41;
        }
        unsigned int v16 = _decodeScalar(_:startingAt:)();
      }
      unsigned int v18 = v16;
      uint64_t v19 = v17;
      Unicode.Scalar.properties.getter();
      if (BYTE2(v18) > 1u)
      {
        if (BYTE2(v18) > 0xEu) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v20 = (uint64_t)*(&__CFUniCharUppercaseLetterCharacterSetBitmap_0 + BYTE2(v18));
        if (v20 && ((*(unsigned __int8 *)(v20 + ((unsigned __int16)v18 >> 3)) >> (v18 & 7)) & 1) != 0)
        {
          if (v11)
          {
            uint64_t v14 = Unicode.Scalar.Properties.lowercaseMapping.getter();
          }
          else
          {
LABEL_30:
            if (v18 > 0x7F)
            {
              int v30 = (v18 & 0x3F) << 8;
              if (v18 >= 0x800)
              {
                int v35 = (v30 | (v18 >> 6) & 0x3F) << 8;
                int v36 = (((v35 | (v18 >> 12) & 0x3F) << 8) | (v18 >> 18)) - 2122219023;
                unsigned int v22 = (v35 | (v18 >> 12)) + 8487393;
                if (HIWORD(v18)) {
                  unsigned int v22 = v36;
                }
              }
              else
              {
                unsigned int v22 = (v30 | (v18 >> 6)) + 33217;
              }
            }
            else
            {
              unsigned int v22 = v18 + 1;
            }
            v46[0] = (v22 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v22) >> 3))));
            uint64_t v14 = MEMORY[0x185302020](v46);
          }
          goto LABEL_11;
        }
        uint64_t v21 = (uint64_t)*(&__CFUniCharLowercaseLetterCharacterSetBitmap_0 + BYTE2(v18));
        if (v21 && ((*(unsigned __int8 *)(v21 + ((unsigned __int16)v18 >> 3)) >> (v18 & 7)) & 1) != 0)
        {
          if (v11) {
            goto LABEL_30;
          }
          uint64_t v14 = Unicode.Scalar.Properties.titlecaseMapping.getter();
LABEL_11:
          String.append(_:)(*(Swift::String *)&v14);
          char v11 = 1;
          goto LABEL_12;
        }
      }
      uint64_t v23 = (uint64_t)*(&__CFUniCharCaseIgnorableCharacterSetBitmap_0 + BYTE2(v18));
      if (!v23 || ((*(unsigned __int8 *)(v23 + ((unsigned __int16)v18 >> 3)) >> (v18 & 7)) & 1) == 0)
      {
LABEL_38:
        if (v18 > 0x7F)
        {
          int v28 = (v18 & 0x3F) << 8;
          if (v18 >= 0x800)
          {
            int v31 = (v28 | (v18 >> 6) & 0x3F) << 8;
            int v32 = (((v31 | (v18 >> 12) & 0x3F) << 8) | (v18 >> 18)) - 2122219023;
            unsigned int v26 = (v31 | (v18 >> 12)) + 8487393;
            if (HIWORD(v18)) {
              unsigned int v26 = v32;
            }
          }
          else
          {
            unsigned int v26 = (v28 | (v18 >> 6)) + 33217;
          }
        }
        else
        {
          unsigned int v26 = v18 + 1;
        }
        v46[0] = (v26 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v26) >> 3))));
        v27._uint64_t countAndFlagsBits = MEMORY[0x185302020](v46);
        String.append(_:)(v27);
        char v11 = 0;
        goto LABEL_12;
      }
      if (v18 > 0x7F)
      {
        int v29 = (v18 & 0x3F) << 8;
        if (v18 >= 0x800)
        {
          int v33 = (v29 | (v18 >> 6) & 0x3F) << 8;
          int v34 = (((v33 | (v18 >> 12) & 0x3F) << 8) | (v18 >> 18)) - 2122219023;
          unsigned int v24 = (v33 | (v18 >> 12)) + 8487393;
          if (HIWORD(v18)) {
            unsigned int v24 = v34;
          }
        }
        else
        {
          unsigned int v24 = (v29 | (v18 >> 6)) + 33217;
        }
      }
      else
      {
        unsigned int v24 = v18 + 1;
      }
      v46[0] = (v24 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v24) >> 3))));
      v25._uint64_t countAndFlagsBits = MEMORY[0x185302020](v46);
      String.append(_:)(v25);
LABEL_12:
      v12 += v19;
      swift_bridgeObjectRelease();
      (*v10)(v6, v45);
      uint64_t v3 = v13;
      if (v12 >= v9)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v37 = v47;
  id v38 = (void *)v48;
  result._unint64_t object = v38;
  result._uint64_t countAndFlagsBits = v37;
  return result;
}

CFCharacterSetRef CharacterSet.subtracting(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return __CharacterSetStorage.subtracting(_:)(*a1, a2);
}

CFCharacterSetRef __CharacterSetStorage.subtracting(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char v3 = *(unsigned char *)(a1 + 24);
  CFCharacterSetRef v4 = (const __CFCharacterSet *)*(id *)(a1 + 16);
  CFCharacterSetRef result = CFCharacterSetCreateInvertedSet(0, v4);
  CFCharacterSetRef v6 = result;
  if (v3)
  {
    if (result) {
      goto LABEL_5;
    }
    __break(1u);
  }
  if (!result)
  {
    __break(1u);
    return result;
  }
LABEL_5:

  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(unsigned char *)(v7 + 24) = 0;
  __CharacterSetStorage.union(_:)(v7, MEMORY[0x1E4F1C200], a2);

  return (CFCharacterSetRef)swift_release();
}