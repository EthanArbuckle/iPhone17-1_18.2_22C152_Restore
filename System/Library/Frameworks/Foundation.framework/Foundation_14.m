uint64_t Data.enumerateBytes(_:)(uint64_t (*a1)(uint64_t *, uint64_t, void, uint64_t *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t result;
  char v23;
  uint64_t v24;
  __int16 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E4F143B8];
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
LABEL_23:
        __break(1u);
      }
      LOBYTE(v24) = 0;
      v10 = *(uint64_t **)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v10)
      {
        if (*(void *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= (a3 >> 32) - (int)a3) {
          v11 = (a3 >> 32) - (int)a3;
        }
        else {
          v11 = *(void *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        }
        outlined copy of Data._Representation(a3, a4);
        v12 = v10;
        v13 = v11;
      }
      else
      {
        outlined copy of Data._Representation(a3, a4);
        v12 = 0;
        v13 = 0;
      }
      a1(v12, v13, 0, &v24);
      result = outlined consume of Data._Representation(a3, a4);
      break;
    case 2uLL:
      v14 = *(void *)(a3 + 16);
      v15 = *(void *)(a3 + 24);
      LOBYTE(v24) = 0;
      v16 = __OFSUB__(v15, v14);
      v17 = v15 - v14;
      if (v16) {
        goto LABEL_23;
      }
      v18 = *(uint64_t **)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (v18)
      {
        if (*(void *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v17) {
          v19 = v17;
        }
        else {
          v19 = *(void *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        }
        swift_retain();
        swift_retain();
        v20 = v18;
        v21 = v19;
      }
      else
      {
        swift_retain();
        swift_retain();
        v20 = 0;
        v21 = 0;
      }
      a1(v20, v21, 0, &v24);
      swift_release();
      result = swift_release();
      break;
    case 3uLL:
      LOBYTE(v24) = 0;
      v9 = &v24;
      v8 = 0;
      v7 = 0;
      goto LABEL_16;
    default:
      v24 = a3;
      v25 = a4;
      v26 = BYTE2(a4);
      v27 = BYTE3(a4);
      v28 = BYTE4(a4);
      v7 = BYTE6(a4);
      v29 = BYTE5(a4);
      v23 = 0;
      v8 = &v24;
      v9 = (uint64_t *)&v23;
LABEL_16:
      result = a1(v8, v7, 0, v9);
      break;
  }
  return result;
}

void Data._append<A>(_:)(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a1)
    {
      uint64_t v3 = *(void *)(*(void *)(a3 - 8) + 72);
      if ((unsigned __int128)(a2 * (__int128)v3) >> 64 != (a2 * v3) >> 63)
      {
        __break(1u);
        JUMPOUT(0x181EDD4D4);
      }
      v4 = &a1[a2 * v3];
    }
    else
    {
      v4 = 0;
    }
    Data._Representation.append(contentsOf:)(a1, v4);
  }
}

Swift::Void __swiftcall Data.append(contentsOf:)(Swift::OpaquePointer contentsOf)
{
  uint64_t v1 = *((void *)contentsOf._rawValue + 2);
  if (v1) {
    Data._Representation.append(contentsOf:)((unsigned char *)contentsOf._rawValue + 32, (unsigned char *)contentsOf._rawValue + v1 + 32);
  }
}

uint64_t Data.endIndex.getter(uint64_t a1, unint64_t a2)
{
  uint64_t result = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t result = a1 >> 32;
      break;
    case 2uLL:
      uint64_t result = *(void *)(a1 + 24);
      break;
    case 3uLL:
      return result;
    default:
      uint64_t result = BYTE6(a2);
      break;
  }
  return result;
}

void Data.resetBytes(in:)(uint64_t a1, uint64_t a2)
{
  if ((a2 | a1) < 0) {
    __break(1u);
  }
  else {
    Data._Representation.resetBytes(in:)(a1, a2);
  }
}

void closure #3 in Data.append<A>(contentsOf:)(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  v13.n128_f64[0] = MEMORY[0x1F4188790](a1);
  v14 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
  {
    if (__OFSUB__(v10 - v9, v11))
    {
      __break(1u);
      return;
    }
    uint64_t v15 = v9 + v11;
    uint64_t v23 = v10;
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v15 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v12, a2, v13);
  unint64_t v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  uint64_t v18 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(v17 + v16, v14, a2);
  MEMORY[0x1F4188790](v18);
  *(&v22 - 4) = a2;
  *(&v22 - 3) = a3;
  *(&v22 - 2) = (uint64_t)partial apply for implicit closure #3 in implicit closure #2 in closure #3 in Data.append<A>(contentsOf:);
  *(&v22 - 1) = v17;
  if (v15)
  {
    uint64_t v19 = v23 - v15;
    uint64_t v20 = a4;
    uint64_t v21 = v15;
  }
  else
  {
    uint64_t v20 = a4;
    uint64_t v21 = 0;
    uint64_t v19 = 0;
  }
  partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableBufferPointer<UInt8>) -> (@out A.Sequence.Iterator, @unowned Int)(v21, v19, v20);
  swift_release();
}

uint64_t implicit closure #3 in implicit closure #2 in closure #3 in Data.append<A>(contentsOf:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v4, v5, v1);
  return dispatch thunk of Sequence._copyContents(initializing:)();
}

void Data.replaceSubrange(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  specialized Data._Representation.withUnsafeBytes<A>(_:)(a3, a4, v4, a1, a2);
}

void Data.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    if (a3)
    {
      uint64_t v5 = *(void *)(*(void *)(a5 - 8) + 72);
      if ((unsigned __int128)(a4 * (__int128)v5) >> 64 == (a4 * v5) >> 63)
      {
        Data._Representation.replaceSubrange(_:with:count:)(a1, a2, a3, a4 * v5);
        return;
      }
      __break(1u);
    }
    __break(1u);
  }
}

void closure #1 in Data.replaceSubrange<A>(_:with:)(char *__src, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (__src) {
    int64_t v6 = a2 - (void)__src;
  }
  else {
    int64_t v6 = 0;
  }
  Data._Representation.replaceSubrange(_:with:count:)(a4, a5, __src, v6);
}

uint64_t closure #3 in Data.replaceSubrange<A>(_:with:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int64_t a7, uint64_t a8)
{
  uint64_t v24 = a4;
  int64_t v25 = a7;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v12 = *(void *)(a8 - 8);
  MEMORY[0x1F4188790](a1);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  double v17 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, a3, a8, v17);
  if (dispatch thunk of Sequence._copyContents(initializing:)() != a2)
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if (v26 != 1)
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x181EDDAF4);
  }
  Data._Representation.replaceSubrange(_:with:count:)(v22, v23, a1, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, AssociatedTypeWitness);
}

uint64_t Data.advanced(by:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v4 = a3 >> 62;
  uint64_t v6 = a1;
  switch(a3 >> 62)
  {
    case 1uLL:
LABEL_6:
      uint64_t v7 = specialized RandomAccessCollection<>.index(_:offsetBy:)((int)a2, v6, a2, a3);
LABEL_7:
      uint64_t v6 = a2 >> 32;
      if (a2 >> 32 < v7) {
        goto LABEL_21;
      }
      uint64_t v8 = (int)a2;
      break;
    case 2uLL:
      uint64_t v7 = specialized RandomAccessCollection<>.index(_:offsetBy:)(*(void *)(a2 + 16), a1, a2, a3);
LABEL_10:
      uint64_t v6 = *(void *)(a2 + 24);
      if (v6 < v7) {
        goto LABEL_22;
      }
      uint64_t v8 = *(void *)(a2 + 16);
      break;
    default:
      uint64_t v7 = specialized RandomAccessCollection<>.index(_:offsetBy:)(0, a1, a2, a3);
      switch((int)v4)
      {
        case 0:
          uint64_t v6 = BYTE6(a3);
          if (BYTE6(a3) >= v7) {
            goto LABEL_14;
          }
          __break(1u);
          goto LABEL_6;
        case 1:
          goto LABEL_7;
        case 2:
          goto LABEL_10;
        case 3:
          if (v7 > 0) {
            goto LABEL_23;
          }
          uint64_t v6 = 0;
LABEL_14:
          uint64_t v8 = 0;
          if (v6 >= v7) {
            goto LABEL_15;
          }
          goto LABEL_20;
        default:
          JUMPOUT(0);
      }
  }
LABEL_15:
  if (v6 < v8)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    JUMPOUT(0x181EDDC70);
  }
  uint64_t v9 = Data._Representation.subscript.getter(v7, v6, a2, a3);

  return specialized Data.init<A>(_:)(v9, v10);
}

uint64_t Data.subscript.getter(int64_t a1, uint64_t a2, unint64_t a3, void (*a4)(char *, uint64_t), char *a5, uint64_t a6)
{
  int64_t v164 = a1;
  uint64_t v163 = a6;
  uint64_t v176 = *(void *)(a6 + 8);
  uint64_t v10 = *(void *)(*(void *)(v176 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v146 = v10;
  uint64_t v144 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v144);
  v145 = (char *)&v142 - v12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  v14 = (char *)&v142 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  v159 = (char *)&v142 - v16;
  v179 = a5;
  v165 = a4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v168 = type metadata accessor for Range();
  uint64_t v178 = *(void *)(v168 - 8);
  MEMORY[0x1F4188790](v168);
  v158 = (char *)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  v162 = (char *)&v142 - v19;
  MEMORY[0x1F4188790](v20);
  v177 = (char *)&v142 - v21;
  v160 = *(void (**)(char *, char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v142 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  v170 = (char *)&v142 - v26;
  MEMORY[0x1F4188790](v27);
  v169 = (char *)&v142 - v28;
  MEMORY[0x1F4188790](v29);
  v147 = (char *)&v142 - v30;
  MEMORY[0x1F4188790](v31);
  MEMORY[0x1F4188790](v32);
  v148 = (char *)&v142 - v33;
  MEMORY[0x1F4188790](v34);
  v36 = (char *)&v142 - v35;
  MEMORY[0x1F4188790](v37);
  v167 = (char *)&v142 - v38;
  MEMORY[0x1F4188790](v39);
  v171 = (char *)&v142 - v40;
  MEMORY[0x1F4188790](v41);
  v166 = (char *)&v142 - v42;
  MEMORY[0x1F4188790](v43);
  v151 = (char *)&v142 - v44;
  MEMORY[0x1F4188790](v45);
  v149 = (char *)&v142 - v46;
  MEMORY[0x1F4188790](v47);
  v157 = (char *)&v142 - v48;
  MEMORY[0x1F4188790](v49);
  v175 = (char *)&v142 - v50;
  MEMORY[0x1F4188790](v51);
  v174 = (char *)&v142 - v52;
  MEMORY[0x1F4188790](v53);
  uint64_t v143 = v54;
  v173 = (char *)&v142 - v55;
  switch(a3 >> 62)
  {
    case 1uLL:
      int64_t v184 = (int)a2;
      unint64_t v56 = lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(_:)();
LABEL_5:
      uint64_t v57 = a2 >> 32;
      break;
    case 2uLL:
      int64_t v184 = *(void *)(a2 + 16);
      unint64_t v56 = lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(_:)();
LABEL_7:
      uint64_t v57 = *(void *)(a2 + 24);
      break;
    default:
      int64_t v184 = 0;
      unint64_t v56 = lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(_:)();
      uint64_t v57 = 0;
      switch(a3 >> 62)
      {
        case 0uLL:
          uint64_t v57 = BYTE6(a3);
          goto LABEL_8;
        case 1uLL:
          goto LABEL_5;
        case 2uLL:
          goto LABEL_7;
        case 3uLL:
          goto LABEL_8;
        default:
          JUMPOUT(0);
      }
  }
LABEL_8:
  int64_t v184 = v57;
  unint64_t v150 = v56;
  uint64_t v58 = AssociatedTypeWitness;
  v59 = v174;
  dispatch thunk of BinaryInteger.init<A>(_:)();
  v60 = v173;
  if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0)
  {
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    ((void (*)(uint64_t, uint64_t))v179)(v58, AssociatedTypeWitness);
    __break(1u);
LABEL_76:
    ((void (*)(uint64_t, uint64_t))v36)(v58, AssociatedTypeWitness);
    __break(1u);
    JUMPOUT(0x181EDF25CLL);
  }
  v154 = v36;
  v142 = v24;
  uint64_t v152 = a2;
  unint64_t v153 = a3;
  v61 = v14;
  uint64_t v62 = TupleTypeMetadata2;
  v63 = v159;
  v64 = &v159[*(int *)(TupleTypeMetadata2 + 48)];
  v65 = v160;
  v66 = (void (*)(char *, char *, uint64_t))*((void *)v160 + 2);
  v180 = (char *)v160 + 16;
  v66(v159, v60, AssociatedTypeWitness);
  v155 = v64;
  v66(v64, v59, AssociatedTypeWitness);
  v67 = &v61[*(int *)(v62 + 48)];
  v156 = (void (*)(char *, uint64_t, uint64_t))v66;
  v66(v61, v63, AssociatedTypeWitness);
  v66(v67, v64, AssociatedTypeWitness);
  v68 = (void (*)(char *, char *, uint64_t))*((void *)v65 + 4);
  v69 = v158;
  v68(v158, v61, AssociatedTypeWitness);
  v70 = (void (*)(char *, uint64_t))*((void *)v65 + 1);
  v70(v67, AssociatedTypeWitness);
  v71 = &v61[*(int *)(v62 + 48)];
  v68(v61, v63, AssociatedTypeWitness);
  v68(v71, v155, AssociatedTypeWitness);
  v72 = &v69[*(int *)(v168 + 36)];
  v73 = v71;
  uint64_t v74 = v168;
  TupleTypeMetadata2 = (uint64_t)v65 + 32;
  v160 = v68;
  v68(v72, v73, AssociatedTypeWitness);
  v75 = v70;
  uint64_t v76 = v176;
  v70(v61, AssociatedTypeWitness);
  uint64_t v77 = v178;
  v78 = v162;
  (*(void (**)(char *, char *, uint64_t))(v178 + 32))(v162, v69, v74);
  uint64_t v79 = *(void *)(v76 + 32);
  swift_getAssociatedTypeWitness();
  uint64_t v80 = swift_getAssociatedConformanceWitness();
  uint64_t v182 = v79;
  uint64_t v183 = v80;
  swift_getWitnessTable();
  v81 = v177;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  v82 = *(void (**)(char *, uint64_t))(v77 + 8);
  uint64_t v178 = v77 + 8;
  v165 = v82;
  v82(v78, v74);
  uint64_t v83 = (uint64_t)v175;
  v84 = v156;
  v156(v175, (uint64_t)v81, AssociatedTypeWitness);
  LOBYTE(v79) = dispatch thunk of static BinaryInteger.isSigned.getter();
  v85 = v157;
  v84(v157, v83, AssociatedTypeWitness);
  v179 = (char *)v70;
  if ((v79 & 1) == 0)
  {
    v75(v85, AssociatedTypeWitness);
    v87 = v166;
    v88 = v167;
    v89 = v84;
    uint64_t v90 = (uint64_t)v175;
    goto LABEL_15;
  }
  uint64_t v86 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v75(v85, AssociatedTypeWitness);
  v87 = v166;
  v88 = v167;
  v89 = v84;
  uint64_t v90 = (uint64_t)v175;
  if (v86 <= 64) {
    goto LABEL_15;
  }
  v36 = v149;
  v84(v149, (uint64_t)v175, AssociatedTypeWitness);
  int64_t v184 = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
LABEL_60:
      uint64_t v137 = dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(char *, uint64_t))v179)(v36, AssociatedTypeWitness);
      BOOL v132 = __OFSUB__(v137, v184);
      BOOL v131 = v137 - v184 < 0;
      if (v137 < v184) {
        goto LABEL_61;
      }
      goto LABEL_15;
    }
  }
  else
  {
    char v126 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v127 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v126 & 1) == 0)
    {
      if (v127 >= 64)
      {
        ((void (*)(char *, uint64_t))v179)(v149, AssociatedTypeWitness);
        goto LABEL_15;
      }
      v36 = v149;
      goto LABEL_60;
    }
    if (v127 <= 64) {
      goto LABEL_66;
    }
  }
  v128 = v151;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v129 = dispatch thunk of static Comparable.< infix(_:_:)();
  v130 = v128;
  v36 = v179;
  ((void (*)(char *, uint64_t))v179)(v130, AssociatedTypeWitness);
  ((void (*)(char *, uint64_t))v36)(v149, AssociatedTypeWitness);
  if (v129) {
    goto LABEL_61;
  }
LABEL_15:
  uint64_t v91 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v89(v87, v90, AssociatedTypeWitness);
  if (v91 < 65)
  {
    uint64_t v92 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v36 = v179;
    ((void (*)(char *, uint64_t))v179)(v87, AssociatedTypeWitness);
    if (v92 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_27;
    }
  }
  else
  {
    ((void (*)(char *, uint64_t))v179)(v87, AssociatedTypeWitness);
  }
  v89(v171, v90, AssociatedTypeWitness);
  int64_t v184 = 0x7FFFFFFFFFFFFFFFLL;
  char v93 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v94 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v93 & 1) == 0)
  {
    if (v94 > 63) {
      goto LABEL_25;
    }
LABEL_23:
    v100 = v171;
    uint64_t v101 = dispatch thunk of BinaryInteger._lowWord.getter();
    v102 = v100;
    v36 = v179;
    ((void (*)(char *, uint64_t))v179)(v102, AssociatedTypeWitness);
    if (v184 < v101) {
      goto LABEL_24;
    }
    goto LABEL_27;
  }
  if (v94 <= 64) {
    goto LABEL_23;
  }
  v95 = v151;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v96 = v171;
  char v97 = dispatch thunk of static Comparable.< infix(_:_:)();
  v98 = v95;
  v36 = v179;
  ((void (*)(char *, uint64_t))v179)(v98, AssociatedTypeWitness);
  v99 = v96;
  while (1)
  {
    ((void (*)(char *, uint64_t))v36)(v99, AssociatedTypeWitness);
    if ((v97 & 1) == 0) {
      break;
    }
LABEL_24:
    __break(1u);
LABEL_25:
    uint64_t v181 = 0x7FFFFFFFFFFFFFFFLL;
    v103 = v151;
    v160(v151, v171, AssociatedTypeWitness);
    v104 = v148;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v97 = dispatch thunk of static Comparable.< infix(_:_:)();
    v105 = v104;
    v36 = v179;
    ((void (*)(char *, uint64_t))v179)(v105, AssociatedTypeWitness);
    v99 = v103;
    uint64_t v90 = (uint64_t)v175;
  }
LABEL_27:
  v175 = (char *)dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(uint64_t, uint64_t))v36)(v90, AssociatedTypeWitness);
  uint64_t v90 = v74;
  v89(v88, (uint64_t)&v177[*(int *)(v74 + 36)], AssociatedTypeWitness);
  char v106 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v107 = v154;
  v89(v154, (uint64_t)v88, AssociatedTypeWitness);
  if (v106)
  {
    uint64_t v108 = dispatch thunk of BinaryInteger.bitWidth.getter();
    ((void (*)(char *, uint64_t))v36)(v107, AssociatedTypeWitness);
    BOOL v109 = v108 <= 64;
    uint64_t v74 = v90;
    v87 = v169;
    if (!v109)
    {
      v36 = v147;
      v89(v147, (uint64_t)v88, AssociatedTypeWitness);
      int64_t v184 = 0x8000000000000000;
      if (dispatch thunk of static BinaryInteger.isSigned.getter())
      {
        if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64) {
          goto LABEL_64;
        }
        uint64_t v90 = (uint64_t)v151;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        LODWORD(v171) = dispatch thunk of static Comparable.< infix(_:_:)();
        v87 = v169;
        v110 = v36;
        v36 = v179;
        ((void (*)(uint64_t, uint64_t))v179)(v90, AssociatedTypeWitness);
        ((void (*)(char *, uint64_t))v36)(v110, AssociatedTypeWitness);
        if (v171) {
          goto LABEL_65;
        }
      }
      else
      {
        uint64_t v90 = dispatch thunk of static BinaryInteger.isSigned.getter();
        uint64_t v133 = dispatch thunk of BinaryInteger.bitWidth.getter();
        BOOL v132 = __OFSUB__(v133, 64);
        BOOL v131 = v133 - 64 < 0;
        if (v90)
        {
          if (v133 <= 64)
          {
            swift_getAssociatedConformanceWitness();
            v139 = v36;
            dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
            v140 = v151;
            dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
            LODWORD(v171) = dispatch thunk of static Comparable.< infix(_:_:)();
            v36 = v179;
            ((void (*)(char *, uint64_t))v179)(v140, AssociatedTypeWitness);
            uint64_t v58 = (uint64_t)v142;
            v160(v142, v139, AssociatedTypeWitness);
            if (v171) {
              goto LABEL_76;
            }
            int64_t v141 = v184;
            uint64_t v90 = dispatch thunk of BinaryInteger._lowWord.getter();
            ((void (*)(uint64_t, uint64_t))v36)(v58, AssociatedTypeWitness);
            BOOL v109 = v90 < v141;
            v87 = v169;
            if (v109) {
              goto LABEL_65;
            }
          }
          else
          {
            v134 = v151;
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            char v135 = dispatch thunk of static Comparable.< infix(_:_:)();
            v136 = v134;
            uint64_t v90 = (uint64_t)v36;
            v36 = v179;
            ((void (*)(char *, uint64_t))v179)(v136, AssociatedTypeWitness);
            ((void (*)(uint64_t, uint64_t))v36)(v90, AssociatedTypeWitness);
            v87 = v169;
            if (v135) {
              goto LABEL_65;
            }
          }
        }
        else
        {
          while (1)
          {
            v87 = v169;
            if (v131 == v132) {
              break;
            }
LABEL_64:
            uint64_t v138 = dispatch thunk of BinaryInteger._lowWord.getter();
            ((void (*)(char *, uint64_t))v179)(v36, AssociatedTypeWitness);
            if (v138 >= v184) {
              goto LABEL_34;
            }
LABEL_65:
            __break(1u);
LABEL_66:
            swift_getAssociatedConformanceWitness();
            dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
            v36 = v151;
            dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
            LODWORD(v164) = dispatch thunk of static Comparable.< infix(_:_:)();
            ((void (*)(char *, uint64_t))v179)(v36, AssociatedTypeWitness);
            uint64_t v58 = v143;
            v160((char *)v143, v149, AssociatedTypeWitness);
            if (v164) {
              goto LABEL_75;
            }
            int64_t v164 = v184;
            v36 = (char *)dispatch thunk of BinaryInteger._lowWord.getter();
            ((void (*)(uint64_t, uint64_t))v179)(v58, AssociatedTypeWitness);
            BOOL v132 = __OFSUB__(v36, v164);
            BOOL v131 = (uint64_t)&v36[-v164] < 0;
            if ((uint64_t)v36 >= v164) {
              goto LABEL_15;
            }
LABEL_61:
            __break(1u);
          }
          ((void (*)(char *, uint64_t))v179)(v36, AssociatedTypeWitness);
        }
      }
    }
  }
  else
  {
    ((void (*)(char *, uint64_t))v36)(v107, AssociatedTypeWitness);
    uint64_t v74 = v90;
    v87 = v169;
  }
LABEL_34:
  uint64_t v111 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v89(v87, (uint64_t)v88, AssociatedTypeWitness);
  if (v111 < 65)
  {
    uint64_t v119 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v114 = (void (*)(char *, uint64_t))v179;
    ((void (*)(char *, uint64_t))v179)(v87, AssociatedTypeWitness);
    if (v119 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_47;
    }
  }
  else
  {
    ((void (*)(char *, uint64_t))v179)(v87, AssociatedTypeWitness);
  }
  v89(v170, (uint64_t)v88, AssociatedTypeWitness);
  int64_t v184 = 0x7FFFFFFFFFFFFFFFLL;
  char v112 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v113 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v112 & 1) == 0)
  {
    v114 = (void (*)(char *, uint64_t))v179;
    if (v113 > 63) {
      goto LABEL_45;
    }
LABEL_43:
    v120 = v170;
    uint64_t v121 = dispatch thunk of BinaryInteger._lowWord.getter();
    v114(v120, AssociatedTypeWitness);
    if (v184 < v121) {
      goto LABEL_44;
    }
    goto LABEL_47;
  }
  v114 = (void (*)(char *, uint64_t))v179;
  if (v113 <= 64) {
    goto LABEL_43;
  }
  v115 = v151;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v116 = v170;
  char v117 = dispatch thunk of static Comparable.< infix(_:_:)();
  v114(v115, AssociatedTypeWitness);
  for (i = v116; ; i = v122)
  {
    v114(i, AssociatedTypeWitness);
    if ((v117 & 1) == 0) {
      break;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    uint64_t v181 = 0x7FFFFFFFFFFFFFFFLL;
    v122 = v151;
    v160(v151, v170, AssociatedTypeWitness);
    v123 = v148;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v117 = dispatch thunk of static Comparable.< infix(_:_:)();
    v114(v123, AssociatedTypeWitness);
  }
LABEL_47:
  uint64_t v58 = dispatch thunk of BinaryInteger._lowWord.getter();
  v114(v88, AssociatedTypeWitness);
  if (v58 < (uint64_t)v175) {
    goto LABEL_74;
  }
  uint64_t v124 = Data._Representation.subscript.getter((uint64_t)v175, v58, v152, v153);
  v165(v177, v74);
  v114(v174, AssociatedTypeWitness);
  v114(v173, AssociatedTypeWitness);
  return v124;
}

void (*Data.subscript.modify(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = Data.subscript.getter(a2, *(void *)v2, *(void *)(v2 + 8));
  return Data._Representation.subscript.modify;
}

uint64_t key path setter for Data.subscript(_:) : Data(uint64_t *a1, int a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  outlined copy of Data._Representation(*a1, v7);
  specialized Data._Representation.withUnsafeBytes<A>(_:)(v6, v7, a2, v4, v5);

  return outlined consume of Data._Representation(v6, v7);
}

uint64_t Data.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized Data._Representation.withUnsafeBytes<A>(_:)(a1, a2, v4, a3, a4);

  return outlined consume of Data._Representation(a1, a2);
}

void (*Data.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  unint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  *unint64_t v7 = Data._Representation.subscript.getter(a2, a3, *(void *)v3, *(void *)(v3 + 8));
  v7[1] = v8;
  return Data.subscript.modify;
}

void Data.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1];
  uint64_t v5 = (*a1)[3];
  uint64_t v6 = (*a1)[4];
  uint64_t v7 = (*a1)[2];
  if (a2)
  {
    outlined copy of Data._Representation(v3, v4);
    specialized Data._Representation.withUnsafeBytes<A>(_:)(v3, v4, v6, v7, v5);
    outlined consume of Data._Representation(v3, v4);
    uint64_t v8 = *v2;
    unint64_t v9 = v2[1];
  }
  else
  {
    specialized Data._Representation.withUnsafeBytes<A>(_:)(v3, v4, v6, v7, v5);
    uint64_t v8 = v3;
    unint64_t v9 = v4;
  }
  outlined consume of Data._Representation(v8, v9);

  free(v2);
}

{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t vars8;

  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1];
  uint64_t v6 = (*a1)[6];
  uint64_t v5 = (void *)(*a1)[7];
  uint64_t v7 = (*a1)[4];
  uint64_t v8 = (void (*)(char *, uint64_t))(*a1)[2];
  unint64_t v9 = (char *)(*a1)[3];
  if (a2)
  {
    outlined copy of Data._Representation(v3, v4);
    specialized Data.subscript.setter(v3, v4, (uint64_t)v5, v8, v9, v7);
    (*(void (**)(void *, void))(v6 + 8))(v5, v8);
    outlined consume of Data._Representation(v3, v4);
    uint64_t v10 = *v2;
    uint64_t v11 = v2[1];
  }
  else
  {
    specialized Data.subscript.setter(v3, v4, (uint64_t)v5, v8, v9, v7);
    (*(void (**)(void *, void))(v6 + 8))(v5, v8);
    uint64_t v10 = v3;
    uint64_t v11 = v4;
  }
  outlined consume of Data._Representation(v10, v11);
  free(v5);

  free(v2);
}

uint64_t key path setter for Data.subscript<A>(_:) : <A>DataA(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(char *, uint64_t))(a4 + a3 - 24);
  uint64_t v6 = *(char **)(a4 + a3 - 16);
  uint64_t v7 = *(void *)(a4 + a3 - 8);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  outlined copy of Data._Representation(*a1, v9);
  specialized Data.subscript.setter(v8, v9, a3, v5, v6, v7);

  return outlined consume of Data._Representation(v8, v9);
}

uint64_t Data.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t), char *a5, uint64_t a6)
{
  specialized Data.subscript.setter(a1, a2, a3, a4, a5, a6);
  (*(void (**)(uint64_t, void))(*((void *)a4 - 1) + 8))(a3, a4);

  return outlined consume of Data._Representation(a1, a2);
}

void (*Data.subscript.modify(void *a1, int64_t a2, void (*a3)(char *, uint64_t), char *a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v11 = malloc(0x40uLL);
  *a1 = v11;
  v11[4] = a5;
  v11[5] = v5;
  v11[2] = a3;
  v11[3] = a4;
  uint64_t v12 = *((void *)a3 - 1);
  uint64_t v13 = v12;
  v11[6] = v12;
  v11[7] = malloc(*(void *)(v12 + 64));
  (*(void (**)(void))(v13 + 16))();
  *uint64_t v11 = Data.subscript.getter(a2, *(void *)v5, *(void *)(v5 + 8), a3, a4, a5);
  v11[1] = v14;
  return Data.subscript.modify;
}

Swift::Int __swiftcall Data.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall Data.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t Data.indices.getter(uint64_t a1, unint64_t a2)
{
  uint64_t result = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t result = (int)a1;
      uint64_t v4 = a1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t result = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
LABEL_5:
      if (v4 < result)
      {
        __break(1u);
        JUMPOUT(0x181EDF884);
      }
      return result;
    case 3uLL:
      return result;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t Data.Iterator._data.getter()
{
  uint64_t v1 = *(void *)v0;
  outlined copy of Data._Representation(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t Data.Iterator._buffer.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Data.Iterator._buffer.setter(uint64_t result, char a2, char a3, char a4, char a5, char a6, char a7, char a8, uint64_t a9, long long a10)
{
  *(unsigned char *)(v10 + 16) = result;
  *(unsigned char *)(v10 + 17) = a2;
  *(unsigned char *)(v10 + 18) = a3;
  *(unsigned char *)(v10 + 19) = a4;
  *(unsigned char *)(v10 + 20) = a5;
  *(unsigned char *)(v10 + 21) = a6;
  *(unsigned char *)(v10 + 22) = a7;
  *(unsigned char *)(v10 + 23) = a8;
  *(void *)(v10 + 24) = a9;
  *(_OWORD *)(v10 + 32) = a10;
  return result;
}

uint64_t (*Data.Iterator._buffer.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.Iterator._idx.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t Data.Iterator._idx.setter(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t (*Data.Iterator._idx.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Data.Iterator._endIdx.getter()
{
  return *(void *)(v0 + 56);
}

char *Data.range(of:options:in:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, unint64_t a8)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = a8 >> 62;
  if ((a6 & 1) == 0)
  {
    uint64_t v14 = 0;
    switch((int)v13)
    {
      case 1:
        uint64_t v14 = (int)a7;
        break;
      case 2:
        uint64_t v14 = *(void *)(a7 + 16);
        break;
      default:
        break;
    }
    uint64_t v15 = a4 - v14;
    if (__OFSUB__(a4, v14))
    {
      __break(1u);
    }
    else
    {
      uint64_t v16 = a5 - a4;
      if (!__OFSUB__(a5, a4))
      {
        switch((int)v13)
        {
          case 1:
            goto LABEL_16;
          case 2:
            goto LABEL_21;
          case 3:
            goto LABEL_12;
          default:
            goto LABEL_10;
        }
      }
    }
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  switch((int)v13)
  {
    case 1:
      if (__OFSUB__(HIDWORD(a7), a7)) {
        goto LABEL_81;
      }
      uint64_t v15 = 0;
      uint64_t v16 = HIDWORD(a7) - (int)a7;
LABEL_16:
      if (a7 >> 32 < (int)a7) {
        goto LABEL_80;
      }
      uint64_t v70 = a3;
      if (a7 >> 32 == (int)a7)
      {
        id v21 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
        outlined copy of Data._Representation(a7, a8);
        id v22 = objc_msgSend(v21, sel_init);
        switch(a2 >> 62)
        {
          case 1uLL:
            if (a1 >> 32 >= (int)a1) {
              goto LABEL_58;
            }
            goto LABEL_89;
          case 2uLL:
            uint64_t v58 = *(void *)(a1 + 16);
            uint64_t v59 = *(void *)(a1 + 24);
            swift_retain();
            swift_retain();
            uint64_t v60 = v58;
            uint64_t v61 = v59;
            goto LABEL_60;
          case 3uLL:
            uint64_t v42 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), (SEL)&selRef_infoWithReaderID_options_auditToken_kernelMaterializationInfo_, v70);
            goto LABEL_62;
          default:
            goto LABEL_31;
        }
      }
      uint64_t v38 = *(void *)((a8 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (!v38) {
        goto LABEL_93;
      }
      uint64_t v39 = *(void *)((a8 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      if (__OFSUB__((int)a7, v39)) {
        goto LABEL_85;
      }
      uint64_t v40 = v38 + (int)a7 - v39;
      id v41 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
      outlined copy of Data._Representation(a7, a8);
      id v22 = objc_msgSend(v41, sel_initWithBytesNoCopy_length_freeWhenDone_, v40, (a7 >> 32) - (int)a7, 0);
      switch(a2 >> 62)
      {
        case 1uLL:
          if (a1 >> 32 < (int)a1) {
            goto LABEL_91;
          }
LABEL_58:
          swift_retain();
          v63 = __DataStorage.bridgedReference(_:)((int)a1, a1 >> 32);
          outlined consume of Data._Representation(a1, a2);
          break;
        case 2uLL:
          uint64_t v64 = *(void *)(a1 + 16);
          uint64_t v65 = *(void *)(a1 + 24);
          swift_retain();
          swift_retain();
          uint64_t v60 = v64;
          uint64_t v61 = v65;
LABEL_60:
          v63 = __DataStorage.bridgedReference(_:)(v60, v61);
          swift_release();
          swift_release();
          break;
        case 3uLL:
          uint64_t v42 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init, v70);
          goto LABEL_62;
        default:
LABEL_31:
          uint64_t v78 = a1;
          __int16 v79 = a2;
          char v80 = BYTE2(a2);
          char v81 = BYTE3(a2);
          char v82 = BYTE4(a2);
          char v83 = BYTE5(a2);
          uint64_t v42 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v78, BYTE6(a2));
LABEL_62:
          v63 = v42;
          break;
      }
      uint64_t v46 = (char *)objc_msgSend(v22, sel_rangeOfData_options_range_, v63, v70, v15, v16, v70);
      uint64_t v48 = v66;

      outlined consume of Data._Representation(a7, a8);
      int v49 = 1;
      goto LABEL_64;
    case 2:
      uint64_t v24 = *(void *)(a7 + 16);
      uint64_t v23 = *(void *)(a7 + 24);
      uint64_t v16 = v23 - v24;
      if (__OFSUB__(v23, v24)) {
        goto LABEL_82;
      }
      uint64_t v15 = 0;
LABEL_21:
      uint64_t v25 = *(void *)(a7 + 16);
      uint64_t v26 = *(void *)(a7 + 24);
      uint64_t v71 = a3;
      if (v25 == v26)
      {
        id v27 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
        swift_retain();
        swift_retain();
        uint64_t v28 = (uint64_t)&selRef_fixupDirInfo_;
        id v29 = objc_msgSend(v27, sel_init);
        switch(a2 >> 62)
        {
          case 1uLL:
            uint64_t v57 = (int)a1;
            uint64_t v28 = a1 >> 32;
            if (a1 >> 32 >= (int)a1) {
              goto LABEL_53;
            }
            __break(1u);
            break;
          case 2uLL:
            goto LABEL_44;
          case 3uLL:
            break;
          default:
            goto LABEL_27;
        }
        uint64_t v37 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), (SEL)(v28 + 1560), v71);
LABEL_55:
        unint64_t v56 = v37;
      }
      else
      {
        uint64_t v30 = *(void *)((a8 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v30)
        {
          __break(1u);
LABEL_93:
          __break(1u);
          JUMPOUT(0x181EE058CLL);
        }
        uint64_t v31 = *(void *)((a8 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v32 = __OFSUB__(v25, v31);
        uint64_t v33 = v25 - v31;
        if (v32) {
          goto LABEL_83;
        }
        uint64_t v34 = v26 - v25;
        if (__OFSUB__(v26, v25))
        {
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
        }
        uint64_t v35 = v30 + v33;
        id v36 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
        swift_retain();
        swift_retain();
        id v29 = objc_msgSend(v36, sel_initWithBytesNoCopy_length_freeWhenDone_, v35, v34, 0);
        switch(a2 >> 62)
        {
          case 1uLL:
            uint64_t v57 = (int)a1;
            uint64_t v28 = a1 >> 32;
            if (a1 >> 32 < (int)a1) {
              goto LABEL_90;
            }
LABEL_53:
            swift_retain();
            unint64_t v56 = __DataStorage.bridgedReference(_:)(v57, v28);
            outlined consume of Data._Representation(a1, a2);
            break;
          case 2uLL:
LABEL_44:
            uint64_t v54 = *(void *)(a1 + 16);
            uint64_t v55 = *(void *)(a1 + 24);
            swift_retain();
            swift_retain();
            unint64_t v56 = __DataStorage.bridgedReference(_:)(v54, v55);
            swift_release();
            swift_release();
            break;
          case 3uLL:
            uint64_t v37 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init, v71);
            goto LABEL_55;
          default:
LABEL_27:
            uint64_t v78 = a1;
            __int16 v79 = a2;
            char v80 = BYTE2(a2);
            char v81 = BYTE3(a2);
            char v82 = BYTE4(a2);
            char v83 = BYTE5(a2);
            uint64_t v37 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v78, BYTE6(a2));
            goto LABEL_55;
        }
      }
      uint64_t v46 = (char *)objc_msgSend(v29, sel_rangeOfData_options_range_, v56, v71, v15, v16, v71);
      uint64_t v48 = v62;
      swift_release();
      swift_release();

      int v49 = 2;
LABEL_64:
      if (v46 != (char *)0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v68 = 0;
        uint64_t result = v46;
        switch(v49)
        {
          case 1:
            uint64_t v68 = (int)a7;
            uint64_t result = &v46[(int)a7];
            if (!__OFADD__(v46, (int)a7)) {
              goto LABEL_71;
            }
            __break(1u);
LABEL_70:
            uint64_t v68 = *(void *)(a7 + 16);
            uint64_t result = &v46[v68];
            if (__OFADD__(v46, v68)) {
              goto LABEL_86;
            }
LABEL_71:
            v69 = &v46[v68];
            if (__OFADD__(v46, v68)) {
              goto LABEL_77;
            }
            if (__OFADD__(v69, v48)) {
              goto LABEL_78;
            }
            if ((uint64_t)&v69[v48] >= (uint64_t)result) {
              return result;
            }
            goto LABEL_79;
          case 2:
            goto LABEL_70;
          default:
            goto LABEL_71;
        }
      }
      return 0;
    case 3:
LABEL_12:
      id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      switch(a2 >> 62)
      {
        case 1uLL:
          if (a1 >> 32 < (int)a1) {
            goto LABEL_88;
          }
          swift_retain();
          uint64_t v50 = __DataStorage.bridgedReference(_:)((int)a1, a1 >> 32);
          outlined consume of Data._Representation(a1, a2);
          break;
        case 2uLL:
          uint64_t v51 = *(void *)(a1 + 16);
          uint64_t v52 = *(void *)(a1 + 24);
          swift_retain();
          swift_retain();
          uint64_t v50 = __DataStorage.bridgedReference(_:)(v51, v52);
          swift_release();
          swift_release();
          break;
        case 3uLL:
          uint64_t v20 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), (SEL)&selRef_infoWithReaderID_options_auditToken_kernelMaterializationInfo_);
          goto LABEL_42;
        default:
          uint64_t v78 = a1;
          __int16 v79 = a2;
          char v80 = BYTE2(a2);
          char v81 = BYTE3(a2);
          char v82 = BYTE4(a2);
          char v83 = BYTE5(a2);
          uint64_t v20 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v78, BYTE6(a2));
LABEL_42:
          uint64_t v50 = v20;
          break;
      }
      uint64_t v46 = (char *)objc_msgSend(v19, sel_rangeOfData_options_range_, v50, a3, v15, v16);
      uint64_t v48 = v53;

      int v49 = 3;
      goto LABEL_64;
    default:
      uint64_t v15 = 0;
      uint64_t v16 = BYTE6(a8);
LABEL_10:
      uint64_t v78 = a7;
      __int16 v79 = a8;
      char v80 = BYTE2(a8);
      char v81 = BYTE3(a8);
      char v82 = BYTE4(a8);
      char v83 = BYTE5(a8);
      id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytesNoCopy_length_freeWhenDone_, &v78, BYTE6(a8), 0);
      switch(a2 >> 62)
      {
        case 1uLL:
          if (a1 >> 32 < (int)a1) {
            goto LABEL_87;
          }
          swift_retain();
          uint64_t v43 = __DataStorage.bridgedReference(_:)((int)a1, a1 >> 32);
          outlined consume of Data._Representation(a1, a2);
          break;
        case 2uLL:
          uint64_t v44 = *(void *)(a1 + 16);
          uint64_t v45 = *(void *)(a1 + 24);
          swift_retain();
          swift_retain();
          uint64_t v43 = __DataStorage.bridgedReference(_:)(v44, v45);
          swift_release();
          swift_release();
          break;
        case 3uLL:
          uint64_t v18 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
          goto LABEL_36;
        default:
          uint64_t v72 = a1;
          __int16 v73 = a2;
          char v74 = BYTE2(a2);
          char v75 = BYTE3(a2);
          char v76 = BYTE4(a2);
          char v77 = BYTE5(a2);
          uint64_t v18 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v72, BYTE6(a2));
LABEL_36:
          uint64_t v43 = v18;
          break;
      }
      uint64_t v46 = (char *)objc_msgSend(v17, sel_rangeOfData_options_range_, v43, a3, v15, v16);
      uint64_t v48 = v47;

      int v49 = 0;
      goto LABEL_64;
  }
}

Swift::Int Data.hashValue.getter(uint64_t a1, unint64_t a2)
{
  Hasher.init(_seed:)();
  Data.hash(into:)((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Data(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(v2) - v2;
      if (__OFSUB__(HIDWORD(v2), v2))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        JUMPOUT(0x181EE07C0);
      }
      uint64_t v6 = (int)v6;
LABEL_6:
      switch(v5 >> 62)
      {
        case 1uLL:
          LODWORD(v10) = HIDWORD(v4) - v4;
          if (__OFSUB__(HIDWORD(v4), v4)) {
            goto LABEL_20;
          }
          uint64_t v10 = (int)v10;
LABEL_11:
          if (v6 == v10)
          {
            if (v6 <= 0)
            {
              return 1;
            }
            else
            {
              outlined copy of Data._Representation(*(void *)a2, *(void *)(a2 + 8));
              return specialized Data._Representation.withUnsafeBytes<A>(_:)(v2, v3, v4, v5);
            }
          }
          else
          {
            return 0;
          }
        case 2uLL:
          uint64_t v12 = *(void *)(v4 + 16);
          uint64_t v11 = *(void *)(v4 + 24);
          BOOL v9 = __OFSUB__(v11, v12);
          uint64_t v10 = v11 - v12;
          if (!v9) {
            goto LABEL_11;
          }
          goto LABEL_21;
        case 3uLL:
          return v6 == 0;
        default:
          uint64_t v10 = BYTE6(v5);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v8 = *(void *)(v2 + 16);
      uint64_t v7 = *(void *)(v2 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_19;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v6 = BYTE6(v3);
      goto LABEL_6;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Data()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Data.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Data(uint64_t a1)
{
  Data.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Data()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Data.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for MutableCollection.subscript.setter in conformance Data(char *a1, uint64_t *a2)
{
}

void (*protocol witness for MutableCollection.subscript.modify in conformance Data(uint64_t a1, uint64_t *a2))(uint64_t a1)
{
  uint64_t v4 = *a2;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = Data.subscript.getter(v4, *(void *)v2, *(void *)(v2 + 8));
  return protocol witness for MutableCollection.subscript.modify in conformance Data;
}

void protocol witness for MutableCollection.subscript.modify in conformance Data(uint64_t a1)
{
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance Data(uint64_t *a1, uint64_t *a2)
{
  int v3 = v2;
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  specialized Data._Representation.withUnsafeBytes<A>(_:)(*a1, v5, v3, *a2, a2[1]);

  return outlined consume of Data._Representation(v4, v5);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance Data(void *a1, uint64_t *a2))(uint64_t **a1, char a2)
{
  unint64_t v5 = malloc(0x28uLL);
  *a1 = v5;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  v5[2] = v2;
  v5[3] = v6;
  v5[4] = v7;
  *unint64_t v5 = Data._Representation.subscript.getter(v6, v7, *(void *)v2, *(void *)(v2 + 8));
  v5[1] = v8;
  return protocol witness for MutableCollection.subscript.modify in conformance Data;
}

void protocol witness for MutableCollection.subscript.modify in conformance Data(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  unint64_t v4 = (*a1)[1];
  uint64_t v6 = (*a1)[3];
  uint64_t v5 = (*a1)[4];
  uint64_t v7 = (*a1)[2];
  if (a2)
  {
    outlined copy of Data._Representation(v3, v4);
    specialized Data._Representation.withUnsafeBytes<A>(_:)(v3, v4, v7, v6, v5);
    outlined consume of Data._Representation(v3, v4);
    uint64_t v8 = *v2;
    unint64_t v9 = v2[1];
  }
  else
  {
    specialized Data._Representation.withUnsafeBytes<A>(_:)(v3, v4, v7, v6, v5);
    uint64_t v8 = v3;
    unint64_t v9 = v4;
  }
  outlined consume of Data._Representation(v8, v9);

  free(v2);
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance Data@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized MutableCollection<>._partitionImpl(by:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void protocol witness for MutableCollection.swapAt(_:_:) in conformance Data(uint64_t *a1, uint64_t *a2)
{
}

double protocol witness for RangeReplaceableCollection.init() in conformance Data@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_1821115B0;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance Data(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Data.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a3, a4);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v6(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance Data@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized Data.init(repeating:count:)(*a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance Data@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = Data.init<A>(_:)(a1, a2, a3);
  *a4 = result;
  a4[1] = v6;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.append(_:) in conformance Data(char *a1)
{
  return specialized RangeReplaceableCollection.append(_:)(*a1);
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance Data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Data.append<A>(contentsOf:)(a1, a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);

  return v5(a1, a2);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance Data(char *a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
  uint64_t v8 = &protocol witness table for <A> CollectionOfOne<A>;
  LOBYTE(v6[0]) = v2;
  char __src = *(unsigned char *)__swift_project_boxed_opaque_existential_1(v6, v7);
  Data._Representation.replaceSubrange(_:with:count:)(v3, v3, &__src, 1);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance Data(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(a1, *a2, a3, a4);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v6(a1, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance Data@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized RangeReplaceableCollection.remove(at:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance Data(uint64_t *a1)
{
}

uint64_t protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance Data@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized RangeReplaceableCollection<>._customRemoveLast()();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t specialized RangeReplaceableCollection<>._customRemoveLast()()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  __int16 v3 = specialized BidirectionalCollection.last.getter(*v0, v1);
  if ((v3 & 0x100) != 0)
  {
LABEL_12:
    __break(1u);
    JUMPOUT(0x181EE0EBCLL);
  }
  unsigned __int8 v4 = v3;
  switch(v1 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)v2;
      uint64_t v6 = v2 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 16);
      uint64_t v6 = *(void *)(v2 + 24);
      break;
    case 3uLL:
      outlined consume of Data._Representation(v2, v1);
      outlined consume of Data._Representation(v2, v1);
      uint64_t v6 = 0;
      uint64_t v5 = 0;
      break;
    default:
      outlined consume of Data._Representation(v2, v1);
      outlined consume of Data._Representation(v2, v1);
      uint64_t v5 = 0;
      uint64_t v6 = BYTE6(v1);
      break;
  }
  uint64_t v7 = v6 - 1;
  if (__OFSUB__(v6, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v7 < v5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v8 = Data._Representation.subscript.getter(v5, v7, v2, v1);
  uint64_t v10 = v9;
  outlined consume of Data._Representation(v2, v1);
  *uint64_t v0 = v8;
  v0[1] = v10;
  return v4;
}

uint64_t specialized RangeReplaceableCollection<>._customRemoveLast(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  unint64_t v2 = *(void *)(v1 + 8);
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = -a1;
      if (__OFSUB__(0, a1)) {
        goto LABEL_66;
      }
      uint64_t v6 = v3 >> 32;
      uint64_t v5 = (int)v3;
      goto LABEL_10;
    case 2uLL:
      uint64_t v4 = -a1;
      if (__OFSUB__(0, a1)) {
        goto LABEL_64;
      }
      uint64_t v5 = *(void *)(v3 + 16);
      uint64_t v6 = *(void *)(v3 + 24);
      goto LABEL_10;
    case 3uLL:
      uint64_t v4 = -a1;
      if (__OFSUB__(0, a1)) {
        goto LABEL_65;
      }
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      goto LABEL_10;
    default:
      uint64_t v4 = -a1;
      if (__OFSUB__(0, a1))
      {
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
        goto LABEL_76;
      }
      uint64_t v5 = 0;
      uint64_t v6 = BYTE6(v2);
LABEL_10:
      uint64_t v7 = specialized RandomAccessCollection<>.distance(from:to:)(v6, v5, *(void *)v1, *(void *)(v1 + 8));
      if (v4 < 1) {
        goto LABEL_14;
      }
      if ((v7 & 0x8000000000000000) == 0 && v7 < (unint64_t)v4)
      {
        do
        {
          __break(1u);
LABEL_14:
          ;
        }
        while (v7 <= 0 && v4 < v7);
      }
      uint64_t v9 = specialized RandomAccessCollection<>.index(_:offsetBy:)(v6, v4, v3, v2);
      uint64_t v10 = v9;
      switch(v2 >> 62)
      {
        case 1uLL:
          goto LABEL_36;
        case 2uLL:
          uint64_t v11 = *(void *)(v3 + 16);
          if (v9 < v11) {
            goto LABEL_68;
          }
          uint64_t v12 = *(void *)(v3 + 24);
          if (v12 < v11 || v12 < v9) {
            goto LABEL_73;
          }
          uint64_t v14 = v2 & 0x3FFFFFFFFFFFFFFFLL;
          if (v11) {
            goto LABEL_28;
          }
          if (!v9) {
            goto LABEL_58;
          }
          if (v9 <= 14)
          {
            if ((v9 & 0x8000000000000000) == 0)
            {
              unsigned __int8 v18 = v9;
              if (!*(void *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10)
                || !__OFSUB__(0, *(void *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28)))
              {
                swift_retain();
                swift_retain();
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                outlined consume of Data._Representation(v3, v2);
                unint64_t v2 = (unint64_t)v18 << 48;
LABEL_61:
                uint64_t v3 = 0;
                goto LABEL_62;
              }
              goto LABEL_78;
            }
LABEL_80:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x181EE1338);
          }
LABEL_28:
          if (v11 <= 2147483646 && v9 <= 2147483646)
          {
            if (v9 >= (uint64_t)0xFFFFFFFF80000000 && v11 >= (uint64_t)0xFFFFFFFF80000000)
            {
              if ((int)v9 >= (int)v11)
              {
                swift_retain();
                outlined consume of Data._Representation(v3, v2);
                unint64_t v2 = v14 | 0x4000000000000000;
                uint64_t v3 = v11 | ((unint64_t)v10 << 32);
                goto LABEL_62;
              }
LABEL_77:
              __break(1u);
LABEL_78:
              __break(1u);
              goto LABEL_79;
            }
LABEL_76:
            __break(1u);
            goto LABEL_77;
          }
          type metadata accessor for Data.RangeReference();
          uint64_t v16 = swift_allocObject();
          *(void *)(v16 + 16) = v11;
          *(void *)(v16 + 24) = v10;
          swift_retain();
          outlined consume of Data._Representation(v3, v2);
          unint64_t v2 = v14 | 0x8000000000000000;
          uint64_t v3 = v16;
LABEL_62:
          *(void *)uint64_t v1 = v3;
          *(void *)(v1 + 8) = v2;
          return 1;
        case 3uLL:
          if (v9 < 0) {
            goto LABEL_69;
          }
          if (!v9) {
            goto LABEL_62;
          }
          __break(1u);
LABEL_36:
          if (v9 < (int)v3) {
            goto LABEL_70;
          }
          if (v3 >> 32 < (int)v3) {
            goto LABEL_72;
          }
          if (v3 >> 32 < v9) {
            goto LABEL_74;
          }
          if (v3 << 32) {
            goto LABEL_40;
          }
          if (!v9)
          {
LABEL_58:
            outlined consume of Data._Representation(v3, v2);
            uint64_t v3 = 0;
            unint64_t v2 = 0xC000000000000000;
            goto LABEL_62;
          }
          if (v9 <= 14)
          {
            if ((v9 & 0x8000000000000000) == 0)
            {
              unsigned __int8 v19 = v9;
              if (!*(void *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x10)
                || !__OFSUB__(0, *(void *)((v2 & 0x3FFFFFFFFFFFFFFFLL) + 0x28)))
              {
                swift_retain();
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                outlined consume of Data._Representation(v3, v2);
                outlined consume of Data._Representation(v3, v2);
                unint64_t v2 = (unint64_t)v19 << 48;
                goto LABEL_61;
              }
LABEL_79:
              __break(1u);
            }
            goto LABEL_80;
          }
LABEL_40:
          if ((int)v9 < (int)v3) {
            goto LABEL_75;
          }
          uint64_t v3 = v3 | ((unint64_t)v9 << 32);
          unint64_t v2 = v2 & 0x3FFFFFFFFFFFFFFFLL | 0x4000000000000000;
          goto LABEL_62;
        default:
          if (v9 < 0) {
            goto LABEL_67;
          }
          if (v9 > (unint64_t)BYTE6(v2)) {
            goto LABEL_71;
          }
          unint64_t v2 = v2 & 0xFFFFFFFFFFFFLL | ((unint64_t)v9 << 48);
          goto LABEL_62;
      }
  }
}

uint64_t protocol witness for RangeReplaceableCollection.removeFirst() in conformance Data@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized RangeReplaceableCollection<>.removeFirst()();
  *a1 = result;
  return result;
}

uint64_t specialized RangeReplaceableCollection<>.removeFirst()()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = v2 >> 62;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = (int)v1;
      uint64_t v5 = v1 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 16);
      uint64_t v5 = *(void *)(v1 + 24);
      goto LABEL_5;
    case 3uLL:
      goto LABEL_17;
    default:
      uint64_t v4 = 0;
      uint64_t v5 = BYTE6(v2);
LABEL_5:
      if (v4 == v5) {
        goto LABEL_17;
      }
      uint64_t v6 = specialized Collection.first.getter(*(void *)v0, *(void *)(v0 + 8));
      if ((v6 & 0x100) != 0) {
        goto LABEL_16;
      }
      uint64_t v7 = v6;
      if (v3)
      {
        if (v3 == 1)
        {
          uint64_t v8 = (int)v1 + 1;
          uint64_t v9 = v1 >> 32;
        }
        else
        {
          uint64_t v10 = *(void *)(v1 + 16);
          uint64_t v8 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
LABEL_16:
            __break(1u);
LABEL_17:
            __break(1u);
LABEL_18:
            __break(1u);
            JUMPOUT(0x181EE1488);
          }
          uint64_t v9 = *(void *)(v1 + 24);
        }
      }
      else
      {
        uint64_t v9 = BYTE6(v2);
        uint64_t v8 = 1;
      }
      if (v9 < v8) {
        goto LABEL_18;
      }
      uint64_t v11 = Data._Representation.subscript.getter(v8, v9, v1, v2);
      uint64_t v13 = v12;
      outlined consume of Data._Representation(v1, v2);
      *(void *)uint64_t v0 = v11;
      *(void *)(v0 + 8) = v13;
      return v7;
  }
}

uint64_t specialized RangeReplaceableCollection<>.removeFirst(_:)(uint64_t result)
{
  if (result)
  {
    uint64_t v2 = result;
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v3 = *(void *)v1;
      unint64_t v4 = *(void *)(v1 + 8);
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      switch(v4 >> 62)
      {
        case 1uLL:
          uint64_t v6 = (int)v3;
          uint64_t v5 = v3 >> 32;
          break;
        case 2uLL:
          uint64_t v6 = *(void *)(v3 + 16);
          uint64_t v5 = *(void *)(v3 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v6 = 0;
          uint64_t v5 = BYTE6(v4);
          break;
      }
      uint64_t v7 = specialized RandomAccessCollection<>.distance(from:to:)(v6, v5, *(void *)v1, *(void *)(v1 + 8));
      if ((v7 & 0x8000000000000000) == 0 && v7 < v2)
      {
LABEL_18:
        __break(1u);
        JUMPOUT(0x181EE15C8);
      }
      uint64_t v8 = specialized RandomAccessCollection<>.index(_:offsetBy:)(v6, v2, v3, v4);
      uint64_t v9 = 0;
      switch(v4 >> 62)
      {
        case 1uLL:
          uint64_t v9 = v3 >> 32;
          break;
        case 2uLL:
          uint64_t v9 = *(void *)(v3 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v9 = BYTE6(v4);
          break;
      }
      if (v9 >= v8)
      {
        uint64_t v10 = Data._Representation.subscript.getter(v8, v9, v3, v4);
        uint64_t v12 = v11;
        uint64_t result = outlined consume of Data._Representation(v3, v4);
        *(void *)uint64_t v1 = v10;
        *(void *)(v1 + 8) = v12;
        return result;
      }
    }
    __break(1u);
    goto LABEL_18;
  }
  return result;
}

void protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance Data(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v4 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(a1, a2);
  if (!v3)
  {
    uint64_t v5 = *v2;
    unint64_t v6 = v2[1];
    uint64_t v7 = 0;
    switch(v6 >> 62)
    {
      case 1uLL:
        uint64_t v7 = v5 >> 32;
        break;
      case 2uLL:
        uint64_t v7 = *(void *)(v5 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v7 = BYTE6(v6);
        break;
    }
    if (v7 < v4)
    {
      __break(1u);
      JUMPOUT(0x181EE1670);
    }
    Data._Representation.replaceSubrange(_:with:count:)(v4, v7, 0, 0);
  }
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Data@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *v4;
  unint64_t v9 = v4[1];
  uint64_t v10 = specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a3, *v4, v9);
  if (a2 < 1)
  {
    if (v10 <= 0 && v10 > a2) {
      goto LABEL_4;
    }
LABEL_10:
    uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v7, a2, v8, v9);
    char v12 = 0;
    goto LABEL_11;
  }
  if (v10 < 0 || v10 >= (unint64_t)a2) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t result = 0;
  char v12 = 1;
LABEL_11:
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v12;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Data(unsigned char *a1, uint64_t *a2))(void, void)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  uint64_t v5 = *v2;
  unint64_t v6 = v2[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v4 >= v5 >> 32 || v4 < (int)v5) {
        goto LABEL_14;
      }
      uint64_t v9 = v6 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v10 = *(void *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (!v10)
      {
LABEL_17:
        __break(1u);
        JUMPOUT(0x181EE18A8);
      }
      uint64_t v11 = *(void *)(v9 + 40);
      BOOL v12 = __OFSUB__(v4, v11);
      uint64_t v13 = v4 - v11;
      if (v12) {
        goto LABEL_15;
      }
      char v7 = *(unsigned char *)(v10 + v13);
      break;
    case 2uLL:
      char v7 = Data.LargeSlice.subscript.getter(v4, v5, v6 & 0x3FFFFFFFFFFFFFFFLL);
      break;
    case 3uLL:
      __break(1u);
      goto LABEL_17;
    default:
      if (v4 >= BYTE6(v6))
      {
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
      }
      __int16 v15 = *v2;
      char v16 = BYTE2(v5);
      char v17 = BYTE3(v5);
      char v18 = BYTE4(v5);
      char v19 = BYTE5(v5);
      char v20 = BYTE6(v5);
      char v21 = HIBYTE(v5);
      __int16 v22 = v6;
      char v23 = BYTE2(v6);
      char v24 = BYTE3(v6);
      char v25 = BYTE4(v6);
      char v26 = BYTE5(v6);
      char v7 = *((unsigned char *)&v15 + v4);
      break;
  }
  *a1 = v7;
  return destructiveProjectEnumData for PredicateCodableError;
}

void protocol witness for Collection.indices.getter in conformance Data(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v4 = (int)v2;
      uint64_t v5 = v2 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v4 = *(void *)(v2 + 16);
      uint64_t v5 = *(void *)(v2 + 24);
LABEL_5:
      if (v5 < v4)
      {
        __break(1u);
        JUMPOUT(0x181EE191CLL);
      }
      goto LABEL_6;
    case 3uLL:
LABEL_6:
      *a1 = v4;
      a1[1] = v5;
      break;
    default:
      *a1 = 0;
      a1[1] = BYTE6(v3);
      break;
  }
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Data()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = (int)v1;
      uint64_t v3 = v1 >> 32;
      break;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 16);
      uint64_t v3 = *(void *)(v1 + 24);
      break;
    case 3uLL:
      return v4 == v3;
    default:
      uint64_t v4 = 0;
      uint64_t v3 = BYTE6(v2);
      break;
  }
  return v4 == v3;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Data@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)v2;
      goto LABEL_4;
    case 2uLL:
      uint64_t v5 = *(void *)(v2 + 16);
LABEL_4:
      outlined copy of Data._Representation(v2, v3);
      break;
    default:
      break;
  }
  Data.Iterator.init(_:at:)(v2, v3, v5, a1);

  return outlined consume of Data._Representation(v2, v3);
}

uint64_t protocol witness for Collection.count.getter in conformance Data()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t result = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      BOOL v4 = __OFSUB__(HIDWORD(v1), v1);
      int v5 = HIDWORD(v1) - v1;
      if (v4)
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x181EE1AA0);
      }
      return v5;
    case 2uLL:
      uint64_t v8 = v1 + 16;
      uint64_t v6 = *(void *)(v1 + 16);
      uint64_t v7 = *(void *)(v8 + 8);
      uint64_t result = v7 - v6;
      if (!__OFSUB__(v7, v6)) {
        return result;
      }
      goto LABEL_8;
    case 3uLL:
      return result;
    default:
      return BYTE6(v2);
  }
}

_OWORD *protocol witness for Sequence._copyContents(initializing:) in conformance Data(_OWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  uint64_t v6 = Data._copyContents(initializing:)(a1, a2, a3, v4, v5);
  outlined consume of Data._Representation(v4, v5);
  return v6;
}

void *protocol witness for Decodable.init(from:) in conformance Data@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized Data.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Data(void *a1)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  specialized Data._Representation.withUnsafeBytes<A>(_:)(v2, v3, (uint64_t)v5);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

id @nonobjc NSData.init(contentsOf:options:)(void **a1, uint64_t a2)
{
  unint64_t v3 = v2;
  v9[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  v9[0] = 0;
  id v5 = objc_msgSend(v3, sel_initWithContentsOfURL_options_error_, v4, a2, v9);
  if (v5)
  {
    id v6 = v9[0];
  }
  else
  {
    if (v9[0])
    {
      v9[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v7 = (id)_nilObjCError;
    }
    swift_willThrow();
  }

  swift_release();
  swift_release();
  return v5;
}

uint64_t specialized closure #1 in UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(char *__src, int64_t __n, char *__dst, int64_t a4)
{
  if (!__src) {
    return 0;
  }
  int64_t v4 = __n;
  if (!__n) {
    return v4;
  }
  if (a4 < __n)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (!__dst) {
    return v4;
  }
  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
  {
    memcpy(__dst, __src, __n);
    return v4;
  }
LABEL_12:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized MutableCollection<>._partitionImpl(by:)(uint64_t (*a1)(uint64_t *))
{
  char v3 = *((unsigned char *)v1 + 16);
  uint64_t v4 = 2;
  unint64_t v6 = 0;
  switch(v3)
  {
    case 1:
      goto LABEL_5;
    case 2:
      uint64_t v4 = *(void *)(*v1 + 16);
      if (!v4) {
        return 0;
      }
      char v3 = 2;
LABEL_5:
      unint64_t v6 = 0;
      char v18 = v1;
      break;
    case 3:
      return v6;
    default:
      char v3 = 0;
      uint64_t v4 = 1;
      goto LABEL_5;
  }
  while (1)
  {
    uint64_t v7 = *v1;
    uint64_t v19 = v1[1];
    switch(v3)
    {
      case 0:
        uint64_t v8 = *v1;
        if (v6) {
          goto LABEL_44;
        }
        break;
      case 1:
        if (v6 > 1) {
          goto LABEL_43;
        }
        uint64_t v8 = v1[1];
        if (!v6) {
          uint64_t v8 = *v1;
        }
        break;
      case 2:
        if (v6 >= *(void *)(v7 + 16)) {
          goto LABEL_45;
        }
        uint64_t v8 = *(void *)(v7 + 8 * v6 + 32);
        break;
      case 3:
        goto LABEL_46;
      default:
        JUMPOUT(0);
    }
    uint64_t v20 = v8;
    char v9 = a1(&v20);
    if (v2) {
      return v6;
    }
    if (v9)
    {
      if ((uint64_t)v6 >= v4 - 1) {
        return v6;
      }
      while (1)
      {
        unint64_t v10 = v4 - 1;
        if (v3)
        {
          if (v3 == 1)
          {
            if (v10 > 1) {
              goto LABEL_40;
            }
            uint64_t v11 = v19;
            if (v4 == 1) {
              uint64_t v11 = v7;
            }
          }
          else
          {
            if ((v10 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_40:
              __break(1u);
LABEL_41:
              __break(1u);
LABEL_42:
              __break(1u);
LABEL_43:
              __break(1u);
LABEL_44:
              __break(1u);
LABEL_45:
              __break(1u);
LABEL_46:
              uint64_t v20 = 0;
              unint64_t v21 = 0xE000000000000000;
              _StringGuts.grow(_:)(33);
              swift_bridgeObjectRelease();
              uint64_t v20 = 0x207865646E49;
              unint64_t v21 = 0xE600000000000000;
              unint64_t v22 = v6;
              v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v16);
              swift_bridgeObjectRelease();
              v17._object = (void *)0x80000001823AB180;
              v17._countAndFlagsBits = 0xD000000000000019;
              String.append(_:)(v17);
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x181EE2124);
            }
            if (v10 >= *(void *)(v7 + 16)) {
              goto LABEL_42;
            }
            uint64_t v11 = *(void *)(v7 + 24 + 8 * v4);
          }
        }
        else
        {
          uint64_t v11 = v7;
          if (v4 != 1) {
            goto LABEL_41;
          }
        }
        uint64_t v20 = v11;
        if ((a1(&v20) & 1) == 0) {
          break;
        }
        uint64_t v12 = v4 - 2;
        --v4;
        if ((uint64_t)v6 >= v12) {
          return v6;
        }
      }
      if (v6 + 1 == v4) {
        return ++v6;
      }
      uint64_t v13 = IndexPath.Storage.subscript.getter(v6, v7, v19, v3);
      uint64_t v14 = IndexPath.Storage.subscript.getter(v10, v7, v19, v3);
      IndexPath.Storage.subscript.setter(v14, v6);
      IndexPath.Storage.subscript.setter(v13, v10);
      uint64_t v4 = v10;
    }
    if ((uint64_t)++v6 >= v4) {
      return v6;
    }
    uint64_t v1 = v18;
    char v3 = *((unsigned char *)v18 + 16);
  }
}

uint64_t specialized MutableCollection<>._partitionImpl(by:)(uint64_t (*a1)(char *))
{
  char v3 = v1;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *v1;
  unint64_t v5 = v3[1];
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v6 = (int)v4;
      uint64_t v7 = v4 >> 32;
      if ((int)v4 >= v4 >> 32) {
        return v6;
      }
      goto LABEL_7;
    case 2uLL:
      uint64_t v6 = *(void *)(v4 + 16);
      uint64_t v7 = *(void *)(v4 + 24);
      if (v6 < v7) {
        goto LABEL_7;
      }
      return v6;
    case 3uLL:
      outlined consume of Data._Representation(v4, v3[1]);
      outlined consume of Data._Representation(v4, v5);
      return 0;
    default:
      outlined consume of Data._Representation(v4, v3[1]);
      outlined consume of Data._Representation(v4, v5);
      uint64_t v6 = 0;
      uint64_t v7 = BYTE6(v5);
      if (!v7) {
        return v6;
      }
LABEL_7:
      char v26 = v3;
      break;
  }
  do
  {
    uint64_t v9 = *v3;
    unint64_t v8 = v3[1];
    unint64_t v10 = v8 >> 62;
    unint64_t v32 = HIBYTE(*v3);
    unint64_t v30 = (unint64_t)*v3 >> 40;
    unint64_t v31 = HIWORD(*v3);
    unint64_t v28 = (unint64_t)*v3 >> 24;
    unint64_t v29 = HIDWORD(*v3);
    unint64_t v27 = (unint64_t)*v3 >> 16;
    unint64_t v11 = (unint64_t)*v3 >> 8;
    switch(v8 >> 62)
    {
      case 1uLL:
        if (v6 >= v9 >> 32 || v6 < (int)v9) {
          goto LABEL_57;
        }
        uint64_t v14 = *(void *)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v14)
        {
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
          JUMPOUT(0x181EE2590);
        }
        uint64_t v15 = *(void *)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v16 = __OFSUB__(v6, v15);
        uint64_t v17 = v6 - v15;
        if (!v16) {
          goto LABEL_26;
        }
        goto LABEL_59;
      case 2uLL:
        if (v6 < *(void *)(v9 + 16)) {
          goto LABEL_58;
        }
        if (v6 >= *(void *)(v9 + 24)) {
          goto LABEL_60;
        }
        uint64_t v14 = *(void *)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        if (!v14) {
          goto LABEL_66;
        }
        uint64_t v18 = *(void *)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
        BOOL v16 = __OFSUB__(v6, v18);
        uint64_t v17 = v6 - v18;
        if (v16) {
          goto LABEL_61;
        }
LABEL_26:
        char v12 = *(unsigned char *)(v14 + v17);
LABEL_27:
        char v34 = v12;
        char v19 = a1(&v34);
        if (v2) {
          return v6;
        }
        if ((v19 & 1) == 0) {
          goto LABEL_10;
        }
        if (v6 >= --v7) {
          return v6;
        }
        break;
      case 3uLL:
        __break(1u);
        goto LABEL_65;
      default:
        if (v6 >= BYTE6(v8)) {
          goto LABEL_56;
        }
        char v34 = *v3;
        char v35 = v11;
        char v36 = v27;
        char v37 = v28;
        char v38 = v29;
        char v39 = v30;
        char v40 = v31;
        char v41 = v32;
        __int16 v42 = v8;
        char v43 = BYTE2(v8);
        char v44 = BYTE3(v8);
        char v45 = BYTE4(v8);
        char v46 = BYTE5(v8);
        char v12 = *(&v34 + v6);
        goto LABEL_27;
    }
    while (1)
    {
      if (v10)
      {
        if (v10 == 1)
        {
          if (v7 < (int)v9 || v7 >= v9 >> 32) {
            goto LABEL_50;
          }
          uint64_t v20 = *(void *)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
          if (!v20) {
            goto LABEL_62;
          }
          uint64_t v21 = *(void *)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          BOOL v16 = __OFSUB__(v7, v21);
          uint64_t v22 = v7 - v21;
          if (v16) {
            goto LABEL_53;
          }
        }
        else
        {
          if (v7 < *(void *)(v9 + 16)) {
            goto LABEL_52;
          }
          if (v7 >= *(void *)(v9 + 24)) {
            goto LABEL_54;
          }
          uint64_t v20 = *(void *)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
          if (!v20) {
            goto LABEL_63;
          }
          uint64_t v24 = *(void *)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
          BOOL v16 = __OFSUB__(v7, v24);
          uint64_t v22 = v7 - v24;
          if (v16) {
            goto LABEL_55;
          }
        }
        char v23 = *(unsigned char *)(v20 + v22);
      }
      else
      {
        if (v7 >= BYTE6(v8)) {
          goto LABEL_51;
        }
        char v34 = v9;
        char v35 = v11;
        char v36 = v27;
        char v37 = v28;
        char v38 = v29;
        char v39 = v30;
        char v40 = v31;
        char v41 = v32;
        __int16 v42 = v8;
        char v43 = BYTE2(v8);
        char v44 = BYTE3(v8);
        char v45 = BYTE4(v8);
        char v46 = BYTE5(v8);
        char v23 = *(&v34 + v7);
      }
      char v34 = v23;
      if ((a1(&v34) & 1) == 0) {
        break;
      }
      BOOL v16 = __OFSUB__(v7--, 1);
      if (v16)
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
      }
      if (v6 >= v7) {
        return v6;
      }
    }
    char v3 = v26;
    specialized MutableCollection.swapAt(_:_:)(v6, v7);
LABEL_10:
    ++v6;
  }
  while (v6 < v7);
  return v6;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  unint64_t v5 = v2;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *v2;
  unint64_t v8 = v2[1];
  outlined copy of Data._Representation(v9, v8);
  uint64_t v10 = specialized Collection.firstIndex(where:)((uint64_t (*)(unsigned char *))a1, a2, v9, v8);
  if (v3)
  {
    outlined consume of Data._Representation(v9, v8);
  }
  else
  {
    uint64_t v4 = v10;
    char v13 = v11;
    outlined consume of Data._Representation(v9, v8);
    if ((v13 & 1) == 0)
    {
      uint64_t v9 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
        goto LABEL_8;
      }
      while (1)
      {
        uint64_t v15 = *v5;
        unint64_t v14 = v5[1];
        unint64_t v16 = v14 >> 62;
        switch(v14 >> 62)
        {
          case 1uLL:
            if (v9 == v15 >> 32) {
              return v4;
            }
            goto LABEL_15;
          case 2uLL:
            if (v9 != *(void *)(v15 + 24)) {
              goto LABEL_15;
            }
            return v4;
          case 3uLL:
            outlined consume of Data._Representation(*v5, v5[1]);
            if (!v9) {
              return v4;
            }
            __break(1u);
            goto LABEL_42;
          default:
            outlined consume of Data._Representation(*v5, v5[1]);
            if (v9 == BYTE6(v14)) {
              return v4;
            }
LABEL_15:
            if (v16)
            {
              if (v16 == 1)
              {
                if (v9 >= v15 >> 32 || v9 < (int)v15)
                {
LABEL_42:
                  __break(1u);
LABEL_43:
                  __break(1u);
LABEL_44:
                  __break(1u);
LABEL_45:
                  __break(1u);
LABEL_46:
                  __break(1u);
LABEL_47:
                  __break(1u);
                }
                uint64_t v17 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
                if (!v17)
                {
                  __break(1u);
LABEL_49:
                  __break(1u);
                  JUMPOUT(0x181EE28C4);
                }
                uint64_t v18 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
                BOOL v19 = __OFSUB__(v9, v18);
                uint64_t v20 = v9 - v18;
                if (v19) {
                  goto LABEL_45;
                }
              }
              else
              {
                if (v9 < *(void *)(v15 + 16)) {
                  goto LABEL_44;
                }
                if (v9 >= *(void *)(v15 + 24)) {
                  goto LABEL_46;
                }
                uint64_t v17 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
                if (!v17) {
                  goto LABEL_49;
                }
                uint64_t v22 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
                BOOL v19 = __OFSUB__(v9, v22);
                uint64_t v20 = v9 - v22;
                if (v19) {
                  goto LABEL_47;
                }
              }
              char v21 = *(unsigned char *)(v17 + v20);
            }
            else
            {
              if (v9 >= BYTE6(v14)) {
                goto LABEL_43;
              }
              uint64_t v23 = v15;
              __int16 v24 = v14;
              char v25 = BYTE2(v14);
              char v26 = BYTE3(v14);
              char v27 = BYTE4(v14);
              char v28 = BYTE5(v14);
              char v21 = *((unsigned char *)&v23 + v9);
            }
            LOBYTE(v23) = v21;
            if ((a1(&v23) & 1) == 0)
            {
              unint64_t v8 = (unint64_t)v5;
              specialized MutableCollection.swapAt(_:_:)(v4, v9);
              BOOL v19 = __OFADD__(v4++, 1);
              if (v19)
              {
                __break(1u);
                goto LABEL_35;
              }
            }
LABEL_8:
            ++v9;
            break;
        }
      }
    }
LABEL_35:
    switch(v8 >> 62)
    {
      case 1uLL:
        uint64_t v4 = v9 >> 32;
        break;
      case 2uLL:
        uint64_t v4 = *(void *)(v9 + 24);
        break;
      case 3uLL:
        outlined consume of Data._Representation(v9, v8);
        uint64_t v4 = 0;
        break;
      default:
        outlined consume of Data._Representation(v9, v8);
        uint64_t v4 = BYTE6(v8);
        break;
    }
  }
  return v4;
}

uint64_t specialized Data.LargeSlice.init(_:)(unint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = (uint64_t)__DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v3;
  }
  return result;
}

uint64_t partial apply for closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #3 in Data.init<A>(_:)(a1, *(void *)(v2 + 32), *(void *)(v2 + 16), a2);
}

void *specialized Data.init(from:)(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v3;
  }
  __swift_project_boxed_opaque_existential_1(v12, v13);
  uint64_t v4 = dispatch thunk of UnkeyedDecodingContainer.count.getter();
  if (v5)
  {
    long long v14 = xmmword_1821115B0;
  }
  else
  {
    uint64_t v6 = v4;
    *(void *)&long long v14 = specialized Data.init(count:)(v4);
    *((void *)&v14 + 1) = v7;
    if (v6 < 0) {
      goto LABEL_16;
    }
    if (v6)
    {
      uint64_t v8 = 0;
      while (v6 != v8)
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
        char v9 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        Data._Representation.subscript.setter(v9, v8++);
        if (v6 == v8) {
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
    }
  }
LABEL_11:
  __swift_project_boxed_opaque_existential_1(v12, v13);
  while ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) == 0)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
    char __src = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    Data._Representation.append(contentsOf:)(&__src, v12);
    __swift_project_boxed_opaque_existential_1(v12, v13);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  uint64_t v3 = (void *)v14;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

uint64_t specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1, uint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v10 = *a1;
    uint64_t v9 = a1[1];
    if ((int)v9 < (int)v10)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    uint64_t v11 = *((void *)a1 + 1);
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      uint64_t v13 = *(void *)(v11 + 40);
      BOOL v14 = __OFSUB__(v10, v13);
      uint64_t v15 = v10 - v13;
      if (v14)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      unint64_t v16 = v12 + v15;
    }
    else
    {
      unint64_t v16 = 0;
    }
    uint64_t v17 = v9 - v10;
    type metadata accessor for __DataStorage();
    uint64_t v18 = swift_allocObject();
    __DataStorage.init(bytes:length:copy:deallocator:offset:)(v16, v17, 1, 0, 0, v10);
    *((void *)a1 + 1) = v18;
    uint64_t result = swift_release();
  }
  uint64_t v19 = *a1;
  uint64_t v20 = a1[1];
  if ((int)v20 < (int)v19)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  char v21 = (void *)*((void *)a1 + 1);
  uint64_t v22 = v21[2];
  if (!v22)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  uint64_t v23 = v21[5];
  BOOL v14 = __OFSUB__(v19, v23);
  uint64_t v24 = v19 - v23;
  if (v14) {
    goto LABEL_19;
  }
  int v25 = a4;
  int64_t v26 = v20 - v19;
  if (v21[3] >= v26) {
    int64_t v27 = v26;
  }
  else {
    int64_t v27 = v21[3];
  }
  char v28 = (char *)(v22 + v24);
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a2, a3, v28, v27);
  if (v25 == 2) {
    char v29 = _allASCII(_:)(v28, v27);
  }
  else {
    char v29 = v25 & 1;
  }
  swift_bridgeObjectRelease();
  return v29 & 1;
}

uint64_t specialized Data.LargeSlice.withUnsafeMutableBytes<A>(_:)(uint64_t *a1, uint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v9 = a1[1];
    uint64_t v11 = *(void *)(*a1 + 16);
    uint64_t v10 = *(void *)(*a1 + 24);
    uint64_t v12 = *(void *)(v9 + 16);
    if (v12)
    {
      uint64_t v13 = *(void *)(v9 + 40);
      BOOL v14 = __OFSUB__(v11, v13);
      uint64_t v15 = v11 - v13;
      if (v14)
      {
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        return result;
      }
      unint64_t v16 = v12 + v15;
      uint64_t v17 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v16 = 0;
      uint64_t v17 = v10 - v11;
      if (!__OFSUB__(v10, v11))
      {
LABEL_5:
        type metadata accessor for __DataStorage();
        uint64_t v18 = swift_allocObject();
        __DataStorage.init(bytes:length:copy:deallocator:offset:)(v16, v17, 1, 0, 0, v11);
        a1[1] = v18;
        swift_release();
        goto LABEL_6;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_6:
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v19 = *(void *)(*a1 + 16);
    uint64_t v20 = *(void *)(*a1 + 24);
    type metadata accessor for Data.RangeReference();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v19;
    *(void *)(v21 + 24) = v20;
    *a1 = v21;
    uint64_t result = swift_release();
  }
  uint64_t v22 = (void *)a1[1];
  uint64_t v23 = v22[2];
  if (!v23) {
    goto LABEL_24;
  }
  uint64_t v24 = *(void *)(*a1 + 16);
  uint64_t v25 = v22[5];
  BOOL v14 = __OFSUB__(v24, v25);
  uint64_t v26 = v24 - v25;
  if (v14) {
    goto LABEL_21;
  }
  uint64_t v27 = *(void *)(*a1 + 24);
  BOOL v14 = __OFSUB__(v27, v24);
  int64_t v28 = v27 - v24;
  if (v14)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int v29 = a4;
  int64_t v30 = v22[3];
  if (v30 >= v28) {
    int64_t v31 = v28;
  }
  else {
    int64_t v31 = v30;
  }
  unint64_t v32 = (char *)(v23 + v26);
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a2, a3, v32, v31);
  if (v29 == 2) {
    char v33 = _allASCII(_:)(v32, v31);
  }
  else {
    char v33 = v29 & 1;
  }
  swift_bridgeObjectRelease();
  return v33 & 1;
}

uint64_t specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))AttributedString.UnicodeScalarView.replaceSubrange<A>(_:with:));
}

{
  return specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))AttributedString.CharacterView.replaceSubrange<A>(_:with:));
}

uint64_t specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    v17[0] = a2;
    v17[1] = a3;
    v17[2] = a4;
    v17[3] = a5;
    v17[4] = a2;
    v17[5] = a3;
    v17[6] = a4;
    v17[7] = a5;
    return a8(v17, a1, a6, a7);
  }
  return result;
}

uint64_t specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Data.replaceSubrange<A>(_:with:)(a2, a2, a1, a3, a4);
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return self;
}

void partial apply for closure #2 in Data.replaceSubrange<A>(_:with:)(char *__src, int64_t __len)
{
  Data._Representation.replaceSubrange(_:with:count:)(*(void *)(v2 + 24), *(void *)(v2 + 32), __src, __len);
}

uint64_t partial apply for closure #3 in Data.replaceSubrange<A>(_:with:)(char *a1, uint64_t a2)
{
  return closure #3 in Data.replaceSubrange<A>(_:with:)(a1, a2, v2[4], v2[5], v2[6], v2[7], v2[8], v2[2]);
}

void _s10Foundation4DataV15replaceSubrange_4withySnySiG_xtSlRzs5UInt8V7ElementRtzlFySWXEfU_TA_0(char *__src, uint64_t a2)
{
  if (__src) {
    int64_t v3 = a2 - (void)__src;
  }
  else {
    int64_t v3 = 0;
  }
  Data._Representation.replaceSubrange(_:with:count:)(*(void *)(v2 + 24), *(void *)(v2 + 32), __src, v3);
}

void partial apply for closure #2 in Data.append<A>(contentsOf:)(unsigned char *a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = &a1[a2];
  }
  else {
    uint64_t v2 = 0;
  }
  Data._Representation.append(contentsOf:)(a1, v2);
}

void partial apply for closure #3 in Data.append<A>(contentsOf:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  closure #3 in Data.append<A>(contentsOf:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

void partial apply for closure #1 in Data.append<A>(contentsOf:)(unsigned char *a1, unsigned char *a2)
{
}

uint64_t sub_181EE3264()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in Data.withUnsafeBytes<A, B>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in Data.withUnsafeBytes<A, B>(_:)(a1);
}

{
  uint64_t v1;

  if (!a1) {
    a1 = 47824;
  }
  return (*(uint64_t (**)(uint64_t))(v1 + 32))(a1);
}

uint64_t partial apply for closure #1 in Data.withUnsafeMutableBytes<A, B>(_:)(uint64_t a1)
{
  return partial apply for closure #1 in Data.withUnsafeBytes<A, B>(_:)(a1);
}

uint64_t specialized Data.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t), char *a5, uint64_t a6)
{
  uint64_t v171 = a3;
  unint64_t v160 = a2;
  uint64_t v159 = a1;
  uint64_t v170 = a6;
  uint64_t v187 = *(void *)(a6 + 8);
  uint64_t v9 = *(void *)(*(void *)(v187 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v154 = v9;
  uint64_t v153 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v153);
  uint64_t v152 = (char *)&v149 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  v167 = (char *)&v149 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v149 - v14;
  v172 = a4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = type metadata accessor for Range();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v183 = v16;
  uint64_t v184 = v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v181 = (char *)&v149 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  v169 = (char *)&v149 - v20;
  MEMORY[0x1F4188790](v21);
  uint64_t v182 = (char *)&v149 - v22;
  uint64_t v23 = *(char **)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v24);
  unint64_t v150 = (char *)&v149 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  v175 = (char *)&v149 - v27;
  MEMORY[0x1F4188790](v28);
  v177 = (char *)&v149 - v29;
  MEMORY[0x1F4188790](v30);
  unint64_t v32 = (char *)&v149 - v31;
  MEMORY[0x1F4188790](v33);
  v151 = (char *)&v149 - v34;
  MEMORY[0x1F4188790](v35);
  v155 = (char *)&v149 - v36;
  MEMORY[0x1F4188790](v37);
  v165 = (char *)&v149 - v38;
  MEMORY[0x1F4188790](v39);
  v174 = (char *)&v149 - v40;
  MEMORY[0x1F4188790](v41);
  uint64_t v176 = (char *)&v149 - v42;
  MEMORY[0x1F4188790](v43);
  v173 = (char *)&v149 - v44;
  MEMORY[0x1F4188790](v45);
  v158 = (char *)&v149 - v46;
  MEMORY[0x1F4188790](v47);
  int v49 = (char *)&v149 - v48;
  MEMORY[0x1F4188790](v50);
  v166 = (char *)&v149 - v51;
  MEMORY[0x1F4188790](v52);
  v186 = (char *)&v149 - v53;
  MEMORY[0x1F4188790](v54);
  v180 = (char *)&v149 - v55;
  MEMORY[0x1F4188790](v56);
  v185 = (char *)&v149 - v57;
  uint64_t v58 = *v6;
  unint64_t v59 = v6[1];
  v161 = v6;
  switch(v59 >> 62)
  {
    case 1uLL:
      int64_t v192 = (int)v58;
      unint64_t v178 = lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(_:)();
LABEL_5:
      uint64_t v60 = v58 >> 32;
      break;
    case 2uLL:
      int64_t v192 = *(void *)(v58 + 16);
      unint64_t v178 = lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(_:)();
LABEL_7:
      uint64_t v60 = *(void *)(v58 + 24);
      break;
    default:
      int64_t v192 = 0;
      unint64_t v178 = lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(_:)();
      uint64_t v60 = 0;
      switch(v59 >> 62)
      {
        case 0uLL:
          uint64_t v60 = BYTE6(v59);
          goto LABEL_8;
        case 1uLL:
          goto LABEL_5;
        case 2uLL:
          goto LABEL_7;
        case 3uLL:
          goto LABEL_8;
        default:
          JUMPOUT(0);
      }
  }
LABEL_8:
  int64_t v192 = v60;
  uint64_t v61 = AssociatedTypeWitness;
  uint64_t v62 = v180;
  dispatch thunk of BinaryInteger.init<A>(_:)();
  v63 = v185;
  if ((dispatch thunk of static Comparable.<= infix(_:_:)() & 1) == 0)
  {
    __break(1u);
    goto LABEL_77;
  }
  v157 = v49;
  v156 = v32;
  uint64_t v64 = TupleTypeMetadata2;
  uint64_t v65 = &v15[*(int *)(TupleTypeMetadata2 + 48)];
  int64_t v164 = a5;
  uint64_t v66 = (void (*)(char *, char *, uint64_t))*((void *)v23 + 2);
  v188 = v23 + 16;
  uint64_t v163 = v66;
  v66(v15, v63, AssociatedTypeWitness);
  v162 = v65;
  v66(v65, v62, AssociatedTypeWitness);
  v67 = v167;
  uint64_t v68 = &v167[*(int *)(v64 + 48)];
  v66(v167, v15, AssociatedTypeWitness);
  v66(v68, v65, AssociatedTypeWitness);
  uint64_t v70 = (uint64_t)(v23 + 32);
  v69 = (char *)*((void *)v23 + 4);
  ((void (*)(char *, char *, uint64_t))v69)(v181, v67, AssociatedTypeWitness);
  uint64_t v23 = (char *)*((void *)v23 + 1);
  ((void (*)(char *, uint64_t))v23)(v68, AssociatedTypeWitness);
  uint64_t v71 = &v67[*(int *)(v64 + 48)];
  ((void (*)(char *, char *, uint64_t))v69)(v67, v15, AssociatedTypeWitness);
  ((void (*)(char *, char *, uint64_t))v69)(v71, v162, AssociatedTypeWitness);
  uint64_t v72 = v183;
  __int16 v73 = v181;
  char v74 = &v181[*(int *)(v183 + 36)];
  TupleTypeMetadata2 = v70;
  v162 = v69;
  ((void (*)(char *, char *, uint64_t))v69)(v74, v71, AssociatedTypeWitness);
  ((void (*)(char *, uint64_t))v23)(v67, AssociatedTypeWitness);
  uint64_t v75 = v184;
  char v76 = v169;
  (*(void (**)(char *, char *, uint64_t))(v184 + 32))(v169, v73, v72);
  uint64_t v77 = *(void *)(v187 + 32);
  swift_getAssociatedTypeWitness();
  uint64_t v78 = swift_getAssociatedConformanceWitness();
  uint64_t v190 = v77;
  uint64_t v191 = v78;
  swift_getWitnessTable();
  __int16 v79 = v182;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  char v80 = *(void (**)(char *, uint64_t))(v75 + 8);
  uint64_t v184 = v75 + 8;
  v172 = v80;
  v80(v76, v72);
  char v81 = v186;
  char v82 = v163;
  v163(v186, v79, AssociatedTypeWitness);
  LOBYTE(v79) = dispatch thunk of static BinaryInteger.isSigned.getter();
  char v83 = v166;
  v82(v166, v81, AssociatedTypeWitness);
  uint64_t v181 = v23;
  if ((v79 & 1) == 0)
  {
    ((void (*)(char *, uint64_t))v23)(v83, AssociatedTypeWitness);
    v85 = v82;
    uint64_t v86 = v173;
    a5 = v174;
    goto LABEL_15;
  }
  uint64_t v84 = dispatch thunk of BinaryInteger.bitWidth.getter();
  ((void (*)(char *, uint64_t))v23)(v83, AssociatedTypeWitness);
  v85 = v82;
  uint64_t v86 = v173;
  a5 = v174;
  if (v84 <= 64) {
    goto LABEL_15;
  }
  v87 = v157;
  v82(v157, v186, AssociatedTypeWitness);
  int64_t v192 = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      v134 = v158;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v135 = v87;
      char v136 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v23 = v181;
      ((void (*)(char *, uint64_t))v181)(v134, AssociatedTypeWitness);
      ((void (*)(char *, uint64_t))v23)(v135, AssociatedTypeWitness);
      if (v136) {
        goto LABEL_61;
      }
      goto LABEL_15;
    }
    uint64_t v88 = dispatch thunk of BinaryInteger._lowWord.getter();
    v89 = v87;
    uint64_t v90 = v88;
    uint64_t v91 = v89;
    goto LABEL_60;
  }
  char v125 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v126 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v125 & 1) == 0)
  {
    if (v126 >= 64)
    {
      ((void (*)(char *, uint64_t))v23)(v157, AssociatedTypeWitness);
      goto LABEL_15;
    }
    uint64_t v137 = v157;
    uint64_t v90 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v91 = v137;
LABEL_60:
    ((void (*)(char *, uint64_t))v23)(v91, AssociatedTypeWitness);
    if (v90 < v192)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    goto LABEL_15;
  }
  if (v126 <= 64)
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    v140 = v158;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    a5 = v157;
    char v141 = dispatch thunk of static Comparable.< infix(_:_:)();
    ((void (*)(char *, uint64_t))v23)(v140, AssociatedTypeWitness);
    uint64_t v61 = (uint64_t)v151;
    ((void (*)(char *, char *, uint64_t))v162)(v151, a5, AssociatedTypeWitness);
    if (v141) {
      goto LABEL_78;
    }
    int64_t v142 = v192;
    uint64_t v143 = dispatch thunk of BinaryInteger._lowWord.getter();
    ((void (*)(uint64_t, uint64_t))v23)(v61, AssociatedTypeWitness);
    a5 = v174;
    if (v143 < v142) {
      goto LABEL_61;
    }
  }
  else
  {
    uint64_t v127 = v158;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v128 = v157;
    char v129 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v23 = v181;
    ((void (*)(char *, uint64_t))v181)(v127, AssociatedTypeWitness);
    ((void (*)(char *, uint64_t))v23)(v128, AssociatedTypeWitness);
    if (v129) {
      goto LABEL_61;
    }
  }
LABEL_15:
  uint64_t v92 = v186;
  uint64_t v93 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v85(v86, v92, AssociatedTypeWitness);
  if (v93 < 65)
  {
    uint64_t v94 = dispatch thunk of BinaryInteger.bitWidth.getter();
    ((void (*)(char *, uint64_t))v23)(v86, AssociatedTypeWitness);
    v95 = v177;
    if (v94 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_25;
    }
  }
  else
  {
    ((void (*)(char *, uint64_t))v23)(v86, AssociatedTypeWitness);
  }
  v85(v176, v186, AssociatedTypeWitness);
  int64_t v192 = 0x7FFFFFFFFFFFFFFFLL;
  char v96 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v97 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v96)
  {
    if (v97 > 64)
    {
      v98 = v158;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v99 = (uint64_t)v176;
      char v100 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v23 = v181;
      ((void (*)(char *, uint64_t))v181)(v98, AssociatedTypeWitness);
      ((void (*)(uint64_t, uint64_t))v23)(v99, AssociatedTypeWitness);
      v95 = v177;
      if ((v100 & 1) == 0) {
        goto LABEL_25;
      }
      goto LABEL_43;
    }
  }
  else if (v97 > 63)
  {
    goto LABEL_42;
  }
  uint64_t v101 = (uint64_t)v176;
  uint64_t v102 = dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(uint64_t, uint64_t))v23)(v101, AssociatedTypeWitness);
  v95 = v177;
  if (v192 >= v102) {
    goto LABEL_25;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  uint64_t v189 = 0x7FFFFFFFFFFFFFFFLL;
  v122 = v158;
  ((void (*)(char *, char *, uint64_t))v162)(v158, v175, AssociatedTypeWitness);
  v123 = v155;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v112 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v23 = v181;
  ((void (*)(char *, uint64_t))v181)(v123, AssociatedTypeWitness);
  v114 = v122;
LABEL_45:
  ((void (*)(char *, uint64_t))v23)(v114, AssociatedTypeWitness);
  if (v112)
  {
    while (1)
    {
      __break(1u);
LABEL_42:
      uint64_t v189 = 0x7FFFFFFFFFFFFFFFLL;
      v118 = v158;
      ((void (*)(char *, char *, uint64_t))v162)(v158, v176, AssociatedTypeWitness);
      uint64_t v119 = v155;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v120 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v23 = v181;
      ((void (*)(char *, uint64_t))v181)(v119, AssociatedTypeWitness);
      uint64_t v121 = v118;
      v95 = v177;
      ((void (*)(char *, uint64_t))v23)(v121, AssociatedTypeWitness);
      if (v120) {
        goto LABEL_43;
      }
LABEL_25:
      v103 = v186;
      uint64_t v176 = (char *)dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(char *, uint64_t))v23)(v103, AssociatedTypeWitness);
      v85(a5, &v182[*(int *)(v183 + 36)], AssociatedTypeWitness);
      char v104 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v105 = v165;
      v85(v165, a5, AssociatedTypeWitness);
      if ((v104 & 1) == 0)
      {
        ((void (*)(char *, uint64_t))v23)(v105, AssociatedTypeWitness);
        goto LABEL_31;
      }
      uint64_t v106 = dispatch thunk of BinaryInteger.bitWidth.getter();
      ((void (*)(char *, uint64_t))v23)(v105, AssociatedTypeWitness);
      if (v106 <= 64) {
        goto LABEL_31;
      }
      uint64_t v86 = v156;
      v85(v156, a5, AssociatedTypeWitness);
      int64_t v192 = 0x8000000000000000;
      if (dispatch thunk of static BinaryInteger.isSigned.getter()) {
        break;
      }
      char v130 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v131 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v130 & 1) == 0)
      {
        if (v131 >= 64)
        {
          ((void (*)(char *, uint64_t))v23)(v156, AssociatedTypeWitness);
          v95 = v177;
          goto LABEL_31;
        }
        uint64_t v86 = v156;
LABEL_68:
        uint64_t v139 = dispatch thunk of BinaryInteger._lowWord.getter();
        ((void (*)(char *, uint64_t))v23)(v86, AssociatedTypeWitness);
        v95 = v177;
        if (v139 < v192) {
          goto LABEL_80;
        }
        goto LABEL_31;
      }
      if (v131 > 64)
      {
        BOOL v132 = v158;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v86 = v156;
        char v133 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v23 = v181;
        ((void (*)(char *, uint64_t))v181)(v132, AssociatedTypeWitness);
        goto LABEL_63;
      }
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      uint64_t v144 = v158;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      v145 = v156;
      char v146 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v23 = v181;
      ((void (*)(char *, uint64_t))v181)(v144, AssociatedTypeWitness);
      a5 = v150;
      ((void (*)(char *, char *, uint64_t))v162)(v150, v145, AssociatedTypeWitness);
      if (v146) {
        goto LABEL_79;
      }
      int64_t v147 = v192;
      uint64_t v148 = dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(char *, uint64_t))v23)(a5, AssociatedTypeWitness);
      a5 = v174;
      v95 = v177;
      if (v148 < v147) {
        goto LABEL_80;
      }
LABEL_31:
      uint64_t v107 = dispatch thunk of BinaryInteger.bitWidth.getter();
      v85(v95, a5, AssociatedTypeWitness);
      if (v107 < 65)
      {
        uint64_t v115 = dispatch thunk of BinaryInteger.bitWidth.getter();
        ((void (*)(char *, uint64_t))v23)(v95, AssociatedTypeWitness);
        if (v115 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
          goto LABEL_46;
        }
      }
      else
      {
        ((void (*)(char *, uint64_t))v23)(v95, AssociatedTypeWitness);
      }
      v85(v175, a5, AssociatedTypeWitness);
      int64_t v192 = 0x7FFFFFFFFFFFFFFFLL;
      char v108 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v109 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v108)
      {
        if (v109 > 64)
        {
          v110 = v158;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          uint64_t v111 = v175;
          char v112 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v113 = v110;
          uint64_t v23 = v181;
          ((void (*)(char *, uint64_t))v181)(v113, AssociatedTypeWitness);
          v114 = v111;
          goto LABEL_45;
        }
      }
      else if (v109 > 63)
      {
        goto LABEL_44;
      }
      v116 = v175;
      uint64_t v117 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v23 = v181;
      ((void (*)(char *, uint64_t))v181)(v116, AssociatedTypeWitness);
      if (v192 >= v117) {
        goto LABEL_46;
      }
    }
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
LABEL_62:
      uint64_t v138 = v158;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v133 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v23 = v181;
      ((void (*)(char *, uint64_t))v181)(v138, AssociatedTypeWitness);
LABEL_63:
      ((void (*)(char *, uint64_t))v23)(v86, AssociatedTypeWitness);
      v95 = v177;
      if (v133) {
        goto LABEL_80;
      }
      goto LABEL_31;
    }
    goto LABEL_68;
  }
LABEL_46:
  uint64_t v61 = dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(char *, uint64_t))v23)(a5, AssociatedTypeWitness);
  if (v61 < (uint64_t)v176)
  {
LABEL_77:
    __break(1u);
LABEL_78:
    ((void (*)(uint64_t, uint64_t))v23)(v61, AssociatedTypeWitness);
    __break(1u);
LABEL_79:
    ((void (*)(char *, uint64_t))v23)(a5, AssociatedTypeWitness);
LABEL_80:
    __break(1u);
    JUMPOUT(0x181EE493CLL);
  }
  specialized Data._Representation.withUnsafeBytes<A>(_:)(v159, v160, (int)v161, (uint64_t)v176, v61);
  v172(v182, v183);
  ((void (*)(char *, uint64_t))v23)(v180, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v23)(v185, AssociatedTypeWitness);
}

unint64_t lazy protocol witness table accessor for type Data.Iterator and conformance Data.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator;
  if (!lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator);
  }
  return result;
}

uint64_t sub_181EE4AA8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 24);
  return result;
}

void sub_181EE4AB8(Swift::Int *a1)
{
}

uint64_t sub_181EE4AE0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(unsigned __int8 *)(result + 14);
  return result;
}

void sub_181EE4AEC(uint64_t *a1)
{
}

double sub_181EE4B14@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  return key path getter for Data.InlineData.subscript(_:) : Data.InlineData(a1, a2, a3);
}

uint64_t sub_181EE4B70()
{
  return 0;
}

_DWORD *sub_181EE4B80@<X0>(_DWORD *result@<X0>, void *a2@<X8>)
{
  int v2 = result[1];
  if (__OFSUB__(v2, *result)) {
    __break(1u);
  }
  else {
    *a2 = v2 - *result;
  }
  return result;
}

void sub_181EE4B9C(uint64_t *a1)
{
}

int *sub_181EE4BC4@<X0>(int *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if ((int)v3 < (int)v2)
  {
    __break(1u);
  }
  else
  {
    *a2 = v2;
    a2[1] = v3;
  }
  return result;
}

void sub_181EE4BE4(char *a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_181EE4C10()
{
  return 0;
}

uint64_t sub_181EE4C20@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)result + 16);
  uint64_t v3 = *(void *)(*(void *)result + 24);
  BOOL v4 = __OFSUB__(v3, v2);
  uint64_t v5 = v3 - v2;
  if (v4) {
    __break(1u);
  }
  else {
    *a2 = v5;
  }
  return result;
}

void sub_181EE4C3C(uint64_t *a1)
{
}

void sub_181EE4C68(char *a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_181EE4C94()
{
  return 0;
}

uint64_t *sub_181EE4CA4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return key path getter for Data._Representation.count : Data._Representation(a1, a2);
}

void sub_181EE4CBC(int64_t *a1)
{
}

uint64_t sub_181EE4CE4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = Data._Representation.subscript.getter(*a2, *(void *)a1, *(void *)(a1 + 8));
  *a3 = result;
  return result;
}

void sub_181EE4D18(char *a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_181EE4D44()
{
  return 0;
}

uint64_t *sub_181EE4D54@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return key path getter for Data._Representation.count : Data._Representation(a1, a2);
}

void sub_181EE4D6C(int64_t *a1)
{
  int64_t v1 = *a1;
  if (v1 < 0) {
    __break(1u);
  }
  else {
    Data._Representation.count.setter(v1);
  }
}

uint64_t sub_181EE4D9C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = Data.subscript.getter(*a2, *(void *)a1, *(void *)(a1 + 8));
  *a3 = result;
  return result;
}

void sub_181EE4DD0(char *a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_181EE4DFC()
{
  return 0;
}

uint64_t sub_181EE4E0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = Data._Representation.subscript.getter(*a2, a2[1], *(void *)a1, *(void *)(a1 + 8));
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_181EE4E40()
{
  return 0;
}

uint64_t sub_181EE4E50@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = Data.subscript.getter(a2, *(void *)a1, *(void *)(a1 + 8), *(void (**)(char *, uint64_t))(a3 + a2 - 24), *(char **)(a3 + a2 - 16), *(void *)(a3 + a2 - 8));
  *a4 = result;
  a4[1] = v6;
  return result;
}

uint64_t sub_181EE4E94()
{
  return 24;
}

__n128 sub_181EE4EA0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t method lookup function for __DataStorage(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for __DataStorage);
}

uint64_t dispatch thunk of __DataStorage.__allocating_init(length:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of __DataStorage.__allocating_init(capacity:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of __DataStorage.__allocating_init(bytes:length:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of __DataStorage.__allocating_init(bytes:length:copy:deallocator:offset:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of __DataStorage.__allocating_init(offset:bytes:capacity:needToZero:length:deallocator:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

void *__swift_memcpy15_1(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 7) = *(uint64_t *)((char *)a2 + 7);
  *__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Data.InlineData(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 15)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Data.InlineData(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 14) = 0;
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 15) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Data.InlineData()
{
  return &type metadata for Data.InlineData;
}

uint64_t assignWithCopy for Data.InlineSlice(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for Data.InlineSlice(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Data.InlineSlice()
{
  return &type metadata for Data.InlineSlice;
}

uint64_t method lookup function for Data.RangeReference(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Data.RangeReference);
}

uint64_t dispatch thunk of Data.RangeReference.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t destroy for Data.LargeSlice()
{
  swift_release();

  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for Data.LargeSlice(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for Data.LargeSlice(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for Data.LargeSlice(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Data.LargeSlice()
{
  return &type metadata for Data.LargeSlice;
}

uint64_t getEnumTag for Data._Representation(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) >> 62;
  if (v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

uint64_t destructiveProjectEnumData for Data._Representation(uint64_t result)
{
  *(void *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

void *destructiveInjectEnumTag for Data._Representation(void *result, uint64_t a2)
{
  if (a2 < 3)
  {
    result[1] = result[1] & 0xFFFFFFFFFFFFFFFLL | (a2 << 62);
  }
  else
  {
    *__n128 result = (a2 - 3);
    result[1] = 0xC000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for Data._Representation()
{
  return &type metadata for Data._Representation;
}

uint64_t getEnumTagSinglePayload for Data.Deallocator(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFC && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 3;
  if (v4 >= 5) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Data.Deallocator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)__n128 result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2 + 3;
    }
  }
  return result;
}

uint64_t initializeWithCopy for Data.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for Data.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of Data._Representation(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 21) = *(unsigned char *)(a2 + 21);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  *(unsigned char *)(a1 + 23) = *(unsigned char *)(a2 + 23);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 27);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  *(unsigned char *)(a1 + 30) = *(unsigned char *)(a2 + 30);
  *(unsigned char *)(a1 + 31) = *(unsigned char *)(a2 + 31);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  *(unsigned char *)(a1 + 39) = *(unsigned char *)(a2 + 39);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(unsigned char *)(a1 + 45) = *(unsigned char *)(a2 + 45);
  *(unsigned char *)(a1 + 46) = *(unsigned char *)(a2 + 46);
  *(unsigned char *)(a1 + 47) = *(unsigned char *)(a2 + 47);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for Data.Iterator(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v4, v5);
  long long v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for Data.Iterator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Data.Iterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

uint64_t sub_181EE5558()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed UnsafeMutableRawPointer, @in_guaranteed Int) -> (@out ())(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  return v3(&v6, &v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ()(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_181EE55FC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t partial apply for implicit closure #3 in implicit closure #2 in closure #3 in Data.append<A>(contentsOf:)(uint64_t a1)
{
  return implicit closure #3 in implicit closure #2 in closure #3 in Data.append<A>(contentsOf:)(a1);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableBufferPointer<UInt8>) -> (@out A.Sequence.Iterator, @unowned Int)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  swift_getAssociatedTypeWitness();
  uint64_t v8 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t result = v7(a3, a1, a2);
  *(void *)(a3 + v8) = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized closure #1 in UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a1, a2, *(char **)(v3 + 32), *(void *)(v3 + 40));
  if (!v4) {
    *a3 = result;
  }
  return result;
}

uint64_t specialized closure #1 in UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(char *__src, uint64_t a2, char *__dst, uint64_t a4)
{
  if (!__src) {
    return 0;
  }
  uint64_t v4 = a2;
  if (!a2) {
    return v4;
  }
  if (a4 < a2)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (!__dst) {
    return v4;
  }
  if ((a2 & 0x8000000000000000) == 0 && (&__dst[8 * a2] <= __src || &__src[8 * a2] <= __dst))
  {
    memcpy(__dst, __src, 8 * a2);
    return v4;
  }
LABEL_12:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t NSTimer.TimerPublisher.__allocating_init(interval:tolerance:runLoop:mode:options:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, unsigned char *a5, double a6)
{
  uint64_t v12 = swift_allocObject();
  LOBYTE(a5) = *a5;
  *(void *)(v12 + 64) = MEMORY[0x1E4FBC868];
  uint64_t v13 = (_DWORD *)swift_slowAlloc();
  *uint64_t v13 = 0;
  *(void *)(v12 + 72) = v13;
  *(double *)(v12 + 16) = a6;
  *(void *)(v12 + 24) = a1;
  *(unsigned char *)(v12 + 32) = a2 & 1;
  *(void *)(v12 + 40) = a3;
  *(void *)(v12 + 48) = a4;
  *(unsigned char *)(v12 + 56) = (_BYTE)a5;
  return v12;
}

double NSTimer.TimerPublisher.interval.getter()
{
  return *(double *)(v0 + 16);
}

uint64_t NSTimer.TimerPublisher.tolerance.getter()
{
  return *(void *)(v0 + 24);
}

id NSTimer.TimerPublisher.runLoop.getter()
{
  return *(id *)(v0 + 40);
}

id NSTimer.TimerPublisher.mode.getter()
{
  return *(id *)(v0 + 48);
}

void NSTimer.TimerPublisher.options.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 56);
}

Swift::Void __swiftcall NSTimer.TimerPublisher.Inner.send(_:)(Foundation::Date a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 80);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v27 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v27 - v13;
  uint64_t v15 = *v4;
  uint64_t v16 = *(os_unfair_lock_s **)((char *)v3 + *(void *)(v5 + 120));
  os_unfair_lock_lock(v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, (uint64_t)v3 + *(void *)(*v3 + 96), v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_12:
    os_unfair_lock_unlock(v16);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v10, v6);
  uint64_t v17 = *(void *)(*v3 + 104);
  unint64_t v18 = *(uint64_t *)((char *)v3 + v17);
  unint64_t v19 = static Subscribers.Demand.none.getter();
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0
    && (static Subscribers.Demand.unlimited.getter(), (static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
    || (static Subscribers.Demand.unlimited.getter(), (static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
    && ((static Subscribers.Demand.unlimited.getter(), (static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
     || v19 >= v18))
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v6);
    goto LABEL_12;
  }
  uint64_t v20 = *(uint64_t *)((char *)v3 + v17);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
  {
    static Subscribers.Demand.unlimited.getter();
    if (static Subscribers.Demand.== infix(_:_:)())
    {
      uint64_t v21 = static Subscribers.Demand.unlimited.getter();
LABEL_16:
      *(uint64_t *)((char *)v3 + v17) = v21;
      goto LABEL_17;
    }
    if (v20 < 0)
    {
      __break(1u);
    }
    else if (v20)
    {
      uint64_t v21 = v20 - 1;
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_35;
  }
LABEL_17:
  os_unfair_lock_unlock(v16);
  v27[1] = v15;
  unint64_t v22 = dispatch thunk of Subscriber.receive(_:)();
  unint64_t v23 = static Subscribers.Demand.none.getter();
  static Subscribers.Demand.unlimited.getter();
  if (static Subscribers.Demand.== infix(_:_:)())
  {
    static Subscribers.Demand.unlimited.getter();
    if (static Subscribers.Demand.== infix(_:_:)()) {
      goto LABEL_32;
    }
  }
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
  {
    static Subscribers.Demand.unlimited.getter();
    if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0 || v23 >= v22) {
      goto LABEL_32;
    }
  }
  os_unfair_lock_lock(v16);
  uint64_t v24 = *(uint64_t *)((char *)v3 + v17);
  static Subscribers.Demand.unlimited.getter();
  if (static Subscribers.Demand.== infix(_:_:)())
  {
LABEL_31:
    os_unfair_lock_unlock(v16);
LABEL_32:
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v6);
    return;
  }
  static Subscribers.Demand.unlimited.getter();
  char v25 = static Subscribers.Demand.== infix(_:_:)();
  uint64_t v26 = static Subscribers.Demand.unlimited.getter();
  if (v25)
  {
LABEL_30:
    *(uint64_t *)((char *)v3 + v17) = v26;
    goto LABEL_31;
  }
  if (static Subscribers.Demand.== infix(_:_:)())
  {
LABEL_28:
    uint64_t v26 = static Subscribers.Demand.unlimited.getter();
    goto LABEL_30;
  }
  if (((v24 | v22) & 0x8000000000000000) != 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v26 = v24 + v22;
  if (__OFADD__(v24, v22)) {
    goto LABEL_28;
  }
  if ((v26 & 0x8000000000000000) == 0) {
    goto LABEL_30;
  }
LABEL_36:
  __break(1u);
}

uint64_t NSTimer.TimerPublisher.init(interval:tolerance:runLoop:mode:options:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char *a5, double a6)
{
  char v12 = *a5;
  *(void *)(v6 + 64) = MEMORY[0x1E4FBC868];
  uint64_t v13 = (_DWORD *)swift_slowAlloc();
  *uint64_t v13 = 0;
  *(void *)(v6 + 72) = v13;
  *(double *)(v6 + 16) = a6;
  *(void *)(v6 + 24) = a1;
  *(unsigned char *)(v6 + 32) = a2 & 1;
  *(void *)(v6 + 40) = a3;
  *(void *)(v6 + 48) = a4;
  *(unsigned char *)(v6 + 56) = v12;
  return v6;
}

uint64_t NSTimer.TimerPublisher.deinit()
{
  MEMORY[0x185309510](*(void *)(v0 + 72), -1, -1);

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t NSTimer.TimerPublisher.__deallocating_deinit()
{
  MEMORY[0x185309510](*(void *)(v0 + 72), -1, -1);

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_181EE5EB0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in NSTimer.TimerPublisher.connect()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t NSTimer.TimerPublisher.Inner.__deallocating_deinit()
{
  MEMORY[0x185309510](*(void *)(v0 + *(void *)(*(void *)v0 + 120)), -1, -1);
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

Swift::Void __swiftcall NSTimer.TimerPublisher.Inner.cancel()()
{
  unint64_t v72 = *(void *)v0;
  unint64_t v1 = v72;
  uint64_t v2 = type metadata accessor for CombineIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v73 = v2;
  uint64_t v74 = v3;
  MEMORY[0x1F4188790](v2);
  uint64_t v71 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v75 = (char *)&v61 - v6;
  uint64_t v7 = *(void *)(v1 + 80);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v61 - v13;
  uint64_t v15 = *(os_unfair_lock_s **)(v0 + *(void *)(v1 + 120));
  os_unfair_lock_lock(v15);
  uint64_t v16 = v0 + *(void *)(*(void *)v0 + 96);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, v16, v8);
  uint64_t v17 = *(void *)(v7 - 8);
  int v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v7);
  unint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v20 = v14;
  uint64_t v21 = v8;
  uint64_t v22 = v8;
  uint64_t v76 = v9 + 8;
  unint64_t v23 = v19;
  v19(v20, v22);
  if (v18 == 1)
  {
    os_unfair_lock_unlock(v15);
    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v11, v16, v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v16, 1, 1, v7);
  os_unfair_lock_unlock(v15);
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_9;
  }
  uint64_t v25 = Strong;
  uint64_t v26 = *(os_unfair_lock_s **)(Strong + 72);
  os_unfair_lock_lock(v26);
  uint64_t v27 = *(void *)(v25 + 64);
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v28 = (uint64_t)v75;
  CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
  swift_bridgeObjectRetain();
  unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
  char v31 = v30;
  swift_bridgeObjectRelease();
  uint64_t v69 = v27;
  uint64_t v70 = v21;
  os_unfair_lock_t v68 = v26;
  if ((v31 & 1) == 0)
  {
    uint64_t v36 = 0;
    uint64_t v34 = v73;
    uint64_t v35 = *(void (**)(unint64_t, uint64_t))(v74 + 8);
    goto LABEL_8;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v33 = *(void *)(v25 + 64);
  *(void *)(v25 + 64) = 0x8000000000000000;
  if (isUniquelyReferenced_nonNull_native)
  {
LABEL_6:
    uint64_t v34 = v73;
    uint64_t v35 = *(void (**)(unint64_t, uint64_t))(v74 + 8);
    v35(*(void *)(v33 + 48) + *(void *)(v74 + 72) * v29, v73);
    uint64_t v36 = *(void *)(*(void *)(v33 + 56) + 16 * v29);
    specialized _NativeDictionary._delete(at:)(v29, v33);
    *(void *)(v25 + 64) = v33;
    swift_bridgeObjectRelease();
    uint64_t v28 = (uint64_t)v75;
LABEL_8:
    v35(v28, v34);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v36);
    os_unfair_lock_unlock(v68);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v21 = v70;
LABEL_9:
    v23(v11, v21);
    return;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CombineIdentifier, NSTimer.TimerPublisher.Side>);
  uint64_t v37 = static _DictionaryStorage.copy(original:)();
  uint64_t v38 = (void *)v33;
  uint64_t v33 = v37;
  uint64_t v65 = v38;
  if (!v38[2])
  {
LABEL_43:
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v39 = (char *)(v37 + 64);
  uint64_t v40 = 1 << *(unsigned char *)(v33 + 32);
  uint64_t v62 = (char *)(v65 + 8);
  unint64_t v41 = (unint64_t)(v40 + 63) >> 6;
  if ((void *)v33 != v65 || v39 >= &v62[8 * v41]) {
    memmove(v39, v62, 8 * v41);
  }
  int64_t v66 = 0;
  uint64_t v42 = v65;
  *(void *)(v33 + 16) = v65[2];
  uint64_t v43 = 1 << *((unsigned char *)v42 + 32);
  uint64_t v44 = v42[8];
  uint64_t v45 = -1;
  if (v43 < 64) {
    uint64_t v45 = ~(-1 << v43);
  }
  unint64_t v72 = v45 & v44;
  int64_t v61 = (unint64_t)(v43 + 63) >> 6;
  uint64_t v46 = v73;
  uint64_t v63 = v74 + 32;
  uint64_t v64 = v74 + 16;
  uint64_t v47 = v74;
  uint64_t v48 = v71;
  while (1)
  {
    if (v72)
    {
      unint64_t v49 = __clz(__rbit64(v72));
      v72 &= v72 - 1;
      unint64_t v50 = v49 | (v66 << 6);
      goto LABEL_19;
    }
    int64_t v57 = v66 + 1;
    if (__OFADD__(v66, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v57 >= v61) {
      goto LABEL_43;
    }
    unint64_t v58 = *(void *)&v62[8 * v57];
    int64_t v59 = v66 + 1;
    if (!v58)
    {
      int64_t v59 = v66 + 2;
      if (v66 + 2 >= v61) {
        goto LABEL_43;
      }
      unint64_t v58 = *(void *)&v62[8 * v59];
      if (!v58)
      {
        int64_t v59 = v66 + 3;
        if (v66 + 3 >= v61) {
          goto LABEL_43;
        }
        unint64_t v58 = *(void *)&v62[8 * v59];
        if (!v58)
        {
          int64_t v59 = v66 + 4;
          if (v66 + 4 >= v61) {
            goto LABEL_43;
          }
          unint64_t v58 = *(void *)&v62[8 * v59];
          if (!v58)
          {
            int64_t v59 = v66 + 5;
            if (v66 + 5 >= v61) {
              goto LABEL_43;
            }
            unint64_t v58 = *(void *)&v62[8 * v59];
            if (!v58)
            {
              int64_t v59 = v66 + 6;
              if (v66 + 6 >= v61) {
                goto LABEL_43;
              }
              unint64_t v58 = *(void *)&v62[8 * v59];
              if (!v58)
              {
                int64_t v59 = v66 + 7;
                if (v66 + 7 >= v61) {
                  goto LABEL_43;
                }
                unint64_t v58 = *(void *)&v62[8 * v59];
                if (!v58) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_42:
    unint64_t v72 = (v58 - 1) & v58;
    int64_t v66 = v59;
    unint64_t v50 = __clz(__rbit64(v58)) + (v59 << 6);
LABEL_19:
    *(void *)&long long v67 = v50;
    uint64_t v51 = v65;
    unint64_t v52 = *(void *)(v47 + 72) * v50;
    (*(void (**)(char *, unint64_t, uint64_t))(v47 + 16))(v48, v65[6] + v52, v46);
    uint64_t v53 = v51[7];
    uint64_t v54 = 16 * v67;
    unint64_t v55 = *(void *)(v33 + 48) + v52;
    uint64_t v56 = *(void (**)(unint64_t, char *, uint64_t))(v47 + 32);
    long long v67 = *(_OWORD *)(v53 + 16 * v67);
    v56(v55, v48, v46);
    *(_OWORD *)(*(void *)(v33 + 56) + v54) = v67;
    swift_retain();
  }
  int64_t v60 = v66 + 8;
  if (v66 + 8 >= v61) {
    goto LABEL_43;
  }
  unint64_t v58 = *(void *)&v62[8 * v60];
  if (v58)
  {
    int64_t v59 = v66 + 8;
    goto LABEL_42;
  }
  while (1)
  {
    int64_t v59 = v60 + 1;
    if (__OFADD__(v60, 1)) {
      break;
    }
    if (v59 >= v61) {
      goto LABEL_43;
    }
    unint64_t v58 = *(void *)&v62[8 * v59];
    ++v60;
    if (v58) {
      goto LABEL_42;
    }
  }
LABEL_45:
  __break(1u);
}

void protocol witness for Cancellable.cancel() in conformance NSTimer.TimerPublisher.Inner<A>()
{
}

uint64_t protocol witness for Cancellable.cancel() in conformance CancellableTimer #1 in NSTimer.TimerPublisher.connect()()
{
  unint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(os_unfair_lock_s **)(v2 + 72);
  os_unfair_lock_lock(v3);
  *(void *)(v2 + 64) = MEMORY[0x1E4FBC868];
  os_unfair_lock_unlock(v3);
  objc_msgSend(v1, sel_invalidate);

  return swift_bridgeObjectRelease();
}

uint64_t specialized NSTimer.TimerPublisher.fire(_:)()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = *(os_unfair_lock_s **)(v0 + 72);
  os_unfair_lock_lock(v1);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1);
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double v3 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  uint64_t v4 = v2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v2 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v9;
    if (!v14)
    {
      int64_t v9 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v9);
      if (!v14)
      {
        int64_t v9 = v13 + 2;
        if (v13 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v4 + 8 * v9);
        if (!v14)
        {
          int64_t v9 = v13 + 3;
          if (v13 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v4 + 8 * v9);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_5:
    uint64_t v12 = *(void (**)(timespec *))(*(void *)(v2 + 56) + 16 * v11);
    *(double *)&__tp.tv_sec = v3;
    swift_retain();
    v12(&__tp);
    swift_release();
  }
  int64_t v15 = v13 + 4;
  if (v15 < v8)
  {
    unint64_t v14 = *(void *)(v4 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v9 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          break;
        }
        if (v9 >= v8) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v4 + 8 * v9);
        ++v15;
        if (v14) {
          goto LABEL_22;
        }
      }
LABEL_25:
      __break(1u);
    }
    int64_t v9 = v15;
    goto LABEL_22;
  }
LABEL_23:
  swift_release();
  return swift_bridgeObjectRelease();
}

void partial apply for implicit closure #2 in implicit closure #1 in NSTimer.TimerPublisher.Side.init<A>(_:)(Foundation::Date *a1)
{
}

uint64_t method lookup function for NSTimer.TimerPublisher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NSTimer.TimerPublisher);
}

uint64_t dispatch thunk of NSTimer.TimerPublisher.__allocating_init(interval:tolerance:runLoop:mode:options:)(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 136))(a1, a2 & 1);
}

void *assignWithCopy for NSTimer.TimerPublisher.Side(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for NSTimer.TimerPublisher.Side(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t assignWithCopy for CancellableTimer #1 in NSTimer.TimerPublisher.connect()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

id *assignWithTake for CancellableTimer #1 in NSTimer.TimerPublisher.connect()(id *a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  swift_release();
  return a1;
}

void *type metadata accessor for CancellableTimer #1 in NSTimer.TimerPublisher.connect()()
{
  return &unk_1ECA50568;
}

void NSURL.customPlaygroundQuickLook.getter(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_absoluteString);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    unint64_t v7 = v6;

    char v8 = 17;
  }
  else
  {
    char v8 = 0;
    unint64_t v7 = 0xEB000000004C5255;
    uint64_t v5 = 0x206E776F6E6B6E55;
  }
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 32) = v8;
}

void protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance NSURL(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(*v1, sel_absoluteString);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    unint64_t v7 = v6;

    char v8 = 17;
  }
  else
  {
    char v8 = 0;
    unint64_t v7 = 0xEB000000004C5255;
    uint64_t v5 = 0x206E776F6E6B6E55;
  }
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 32) = v8;
}

uint64_t PredicateExpressions.PredicateEvaluate.predicate.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.PredicateEvaluate.input.getter@<X0>(uint64_t TupleTypeMetadata@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = TupleTypeMetadata;
  unint64_t v5 = *(void *)(TupleTypeMetadata + 16);
  if (v5 == 1)
  {
    uint64_t v6 = *(void *)(*(void *)(TupleTypeMetadata + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](TupleTypeMetadata);
    char v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v5)
    {
      unint64_t v9 = 0;
      unint64_t v10 = *(void *)(v3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v8[-v10] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v9 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v11 = (long long *)(v10 + 16);
      uint64_t v12 = v8 + 16;
      unint64_t v13 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *uint64_t v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
      if (v5 != v9)
      {
LABEL_9:
        unint64_t v15 = v5 - v9;
        uint64_t v16 = 8 * v9;
        uint64_t v17 = &v8[8 * v9];
        uint64_t v18 = (uint64_t *)(v10 + v16);
        do
        {
          uint64_t v19 = *v18++;
          *(void *)uint64_t v17 = v19;
          v17 += 8;
          --v15;
        }
        while (v15);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v6 = TupleTypeMetadata;
  }
  double v20 = MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v22, v2 + *(int *)(v3 + 60), v6, v20);
  if (v5)
  {
    uint64_t v25 = (uint64_t *)(*(void *)(v3 + 32) & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v26 = (int *)(v6 + 32);
    unint64_t v27 = v5;
    do
    {
      if (v5 == 1) {
        int v28 = 0;
      }
      else {
        int v28 = *v26;
      }
      uint64_t v30 = *v25++;
      uint64_t v29 = v30;
      uint64_t v31 = *a2++;
      uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)(v29 - 8) + 32))(v31, &v22[v28]);
      v26 += 4;
      --v27;
    }
    while (v27);
  }
  return result;
}

uint64_t PredicateExpressions.PredicateEvaluate.init(predicate:input:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  unint64_t v12 = a3;
  uint64_t v53 = a8;
  unint64_t v54 = a5 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v55 = a2;
  if (a3 == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v12)
    {
      unint64_t v18 = 0;
      if (v12 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v17[-v15] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v18 = v12 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v19 = (long long *)(v15 + 16);
      double v20 = v17 + 16;
      unint64_t v21 = v12 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *v19;
        *(v20 - 1) = *(v19 - 1);
        *double v20 = v22;
        v19 += 2;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      if (v18 != v12)
      {
LABEL_9:
        unint64_t v23 = v12 - v18;
        uint64_t v24 = 8 * v18;
        uint64_t v25 = &v17[8 * v18];
        uint64_t v26 = (uint64_t *)(v15 + v24);
        do
        {
          uint64_t v27 = *v26++;
          *(void *)uint64_t v25 = v27;
          v25 += 8;
          --v23;
        }
        while (v23);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v56 = TupleTypeMetadata;
  uint64_t v49 = *(void *)(TupleTypeMetadata - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v29 = (char *)&v48 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v57 = v12;
  uint64_t v58 = a4;
  uint64_t v59 = a5;
  uint64_t v60 = a6;
  uint64_t v61 = a7;
  uint64_t v30 = type metadata accessor for PredicateExpressions.PredicateEvaluate();
  unint64_t v50 = &v48;
  uint64_t v31 = *(void *)(v30 - 8);
  v32.n128_f64[0] = MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v48 - v33;
  uint64_t v35 = *(void *)(a4 - 8);
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v35 + 16);
  uint64_t v51 = a1;
  uint64_t v52 = a4;
  v36((char *)&v48 - v33, a1, a4, v32);
  if (v12)
  {
    uint64_t v37 = v55;
    uint64_t v38 = (int *)(v56 + 32);
    uint64_t v39 = (uint64_t *)v54;
    unint64_t v40 = v12;
    do
    {
      if (v12 == 1) {
        int v41 = 0;
      }
      else {
        int v41 = *v38;
      }
      uint64_t v43 = *v39++;
      uint64_t v42 = v43;
      uint64_t v44 = *v37++;
      (*(void (**)(char *, uint64_t))(*(void *)(v42 - 8) + 16))(&v29[v41], v44);
      v38 += 4;
      --v40;
    }
    while (v40);
  }
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v51, v52);
  (*(void (**)(char *, char *, uint64_t))(v49 + 32))(&v34[*(int *)(v30 + 60)], v29, v56);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v53, v34, v30);
  if (v12)
  {
    unint64_t v46 = v54 - 8;
    uint64_t v47 = v55 - 1;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v46 + 8 * v12) - 8) + 8))(v47[v12]);
      --v12;
    }
    while (v12);
  }
  return result;
}

unint64_t PredicateExpressions.PredicateEvaluate.evaluate(_:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = 8 * v4;
  uint64_t v70 = a1;
  if (v4 == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v7 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v4)
    {
      unint64_t v8 = 0;
      unint64_t v9 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v4 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v7[-v9] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v10 = (long long *)(v9 + 16);
      unint64_t v11 = v7 + 16;
      unint64_t v12 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *unint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v4 != v8)
      {
LABEL_9:
        unint64_t v14 = v4 - v8;
        uint64_t v15 = 8 * v8;
        uint64_t v16 = &v7[8 * v8];
        uint64_t v17 = (uint64_t *)(v9 + v15);
        do
        {
          uint64_t v18 = *v17++;
          *(void *)uint64_t v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v63 = *(void *)(TupleTypeMetadata - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v74 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v75 = v4;
  uint64_t v66 = v21;
  uint64_t v68 = v19;
  unint64_t v71 = v2;
  if (v4 == 1)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  }
  else
  {
    uint64_t v73 = (char *)&v58;
    MEMORY[0x1F4188790](v19);
    if (v4)
    {
      unint64_t v23 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v24 = *(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v25 = (uint64_t *)((char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
      unint64_t v26 = v75;
      do
      {
        v23 += 8;
        v24 += 8;
        *v25++ = swift_getAssociatedTypeWitness();
        --v26;
      }
      while (v26);
    }
    unint64_t v4 = v75;
    uint64_t AssociatedTypeWitness = swift_getTupleTypeMetadata();
  }
  uint64_t v65 = &v58;
  uint64_t v67 = AssociatedTypeWitness;
  uint64_t v62 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v73 = (char *)&v58 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = &v58;
  MEMORY[0x1F4188790](v28);
  if (v4)
  {
    unint64_t v29 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v30 = *(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v31 = (uint64_t *)((char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v32 = v75;
    do
    {
      v29 += 8;
      v30 += 8;
      *v31++ = swift_getAssociatedTypeWitness();
      --v32;
    }
    while (v32);
  }
  unint64_t v33 = v75;
  uint64_t v34 = type metadata accessor for Predicate();
  uint64_t v35 = *(void *)(v34 - 8);
  double v36 = MEMORY[0x1F4188790](v34);
  uint64_t v38 = (char *)&v58 - v37;
  unint64_t v39 = v71;
  uint64_t v40 = *v70;
  uint64_t v76 = *v70;
  int v41 = v72;
  uint64_t v42 = (*(uint64_t (**)(uint64_t *, void, double))(*(void *)(a2 + 40) + 16))(&v76, *(void *)(a2 + 24), v36);
  if (!v41)
  {
    uint64_t v58 = v38;
    uint64_t v59 = v35;
    uint64_t v60 = v34;
    uint64_t v61 = &v58;
    double v43 = MEMORY[0x1F4188790](v42);
    unint64_t v72 = (uint64_t *)((char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v44 = (*(uint64_t (**)(char *, unint64_t, uint64_t, double))(v63 + 16))(v74, v39 + *(int *)(a2 + 60), v68, v43);
    if (v33)
    {
      uint64_t v45 = 0;
      unint64_t v46 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v70 = (uint64_t *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      unint64_t v71 = v46;
      uint64_t v47 = 32;
      uint64_t v69 = v40;
      do
      {
        if (v33 == 1) {
          uint64_t v48 = (uint64_t)v73;
        }
        else {
          uint64_t v48 = (uint64_t)&v73[*(int *)(v67 + v47)];
        }
        uint64_t v49 = *(void *)(v71 + 8 * v45);
        uint64_t v50 = v70[v45];
        uint64_t v51 = *(void *)(v49 - 8);
        double v52 = MEMORY[0x1F4188790](v44);
        unint64_t v54 = (char *)&v58 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v51 + 16))(v54, v52);
        uint64_t v76 = v69;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v50 + 16))(&v76, v49, v50);
        uint64_t v44 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v54, v49);
        v72[v45++] = v48;
        v47 += 16;
        unint64_t v33 = v75;
      }
      while (v75 != v45);
    }
    uint64_t v55 = v60;
    uint64_t v56 = v58;
    LOBYTE(v39) = Predicate.evaluate(_:)(v72, v60);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v56, v55);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v73, v67);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v74, v68);
  }
  return v39 & 1;
}

unint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t result = PredicateExpressions.PredicateEvaluate.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t static PredicateExpressions.build_evaluate<A, B>(_:_:)@<X0>(uint64_t TupleTypeMetadata@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v49 = a6;
  uint64_t v50 = a7;
  uint64_t v11 = TupleTypeMetadata;
  uint64_t v46 = a8;
  uint64_t v48 = a5;
  unint64_t v12 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v13 = 8 * a3;
  if (a3 == 1)
  {
    uint64_t v14 = *v12;
  }
  else
  {
    MEMORY[0x1F4188790](TupleTypeMetadata);
    uint64_t v15 = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a3)
    {
      unint64_t v16 = 0;
      if (a3 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v15 - (char *)v12) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v16 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v17 = (long long *)(v12 + 2);
      uint64_t v18 = v15 + 16;
      unint64_t v19 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        *uint64_t v18 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v16 != a3)
      {
LABEL_9:
        unint64_t v21 = a3 - v16;
        uint64_t v22 = v16;
        unint64_t v23 = &v15[8 * v16];
        unint64_t v24 = &v12[v22];
        do
        {
          uint64_t v25 = *v24++;
          *(void *)unint64_t v23 = v25;
          v23 += 8;
          --v21;
        }
        while (v21);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v14 = TupleTypeMetadata;
  }
  MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v27 = (char *)v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45[2] = v45;
  double v29 = MEMORY[0x1F4188790](v28);
  uint64_t v31 = (char *)v45 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t, double))(v32 + 16);
  uint64_t v47 = a4;
  uint64_t v34 = v33(v31, v11, a4, v29);
  v45[1] = v45;
  MEMORY[0x1F4188790](v34);
  uint64_t v35 = (void *)((char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    double v36 = (int *)(v14 + 32);
    uint64_t v37 = (char **)((char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v38 = a3;
    do
    {
      if (a3 == 1) {
        int v39 = 0;
      }
      else {
        int v39 = *v36;
      }
      uint64_t v41 = *v12++;
      uint64_t v40 = v41;
      uint64_t v42 = &v27[v39];
      uint64_t v43 = *a2++;
      (*(void (**)(char *, uint64_t))(*(void *)(v40 - 8) + 16))(v42, v43);
      *v37++ = v42;
      v36 += 4;
      --v38;
    }
    while (v38);
  }
  return PredicateExpressions.PredicateEvaluate.init(predicate:input:)((uint64_t)v31, v35, a3, v47, v48, v49, v50, v46);
}

uint64_t PredicateExpressions.PredicateEvaluate.description.getter(uint64_t a1)
{
  v21[0] = 0;
  v21[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  v2._object = (void *)0x80000001823B3630;
  v2._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x3A7475706E69202CLL;
  v3._object = (void *)0xE900000000000020;
  String.append(_:)(v3);
  if (*(void *)(a1 + 16) != 1)
  {
    MEMORY[0x1F4188790](v4);
    uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v5)
    {
      unint64_t v8 = 0;
      unint64_t v9 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v5 < 4) {
        goto LABEL_8;
      }
      if ((unint64_t)&v7[-v9] < 0x20) {
        goto LABEL_8;
      }
      unint64_t v8 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v10 = (long long *)(v9 + 16);
      uint64_t v11 = v7 + 16;
      unint64_t v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *uint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v5 != v8)
      {
LABEL_8:
        unint64_t v14 = v5 - v8;
        uint64_t v15 = 8 * v8;
        unint64_t v16 = &v7[8 * v8];
        uint64_t v17 = (uint64_t *)(v9 + v15);
        do
        {
          uint64_t v18 = *v17++;
          *(void *)unint64_t v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    swift_getTupleTypeMetadata();
  }
  _print_unlocked<A, B>(_:_:)();
  v19._countAndFlagsBits = 41;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  return v21[0];
}

uint64_t PredicateExpressions.PredicateEvaluate<>.encode(to:)(uint64_t TupleTypeMetadata, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, unint64_t a6)
{
  unint64_t v45 = a6;
  uint64_t v48 = a4;
  uint64_t v7 = (void *)TupleTypeMetadata;
  unint64_t v8 = *(void *)(a2 + 16);
  if (v8 == 1)
  {
    uint64_t v9 = *(void *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](TupleTypeMetadata);
    uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v8)
    {
      unint64_t v12 = 0;
      unint64_t v13 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v8 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v11[-v13] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (long long *)(v13 + 16);
      uint64_t v15 = v11 + 16;
      unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *uint64_t v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v8 != v12)
      {
LABEL_9:
        unint64_t v18 = v8 - v12;
        uint64_t v19 = 8 * v12;
        long long v20 = &v11[8 * v12];
        unint64_t v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)long long v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v9 = TupleTypeMetadata;
  }
  uint64_t v46 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  unint64_t v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v49, v50);
  unint64_t v25 = v47;
  uint64_t v26 = v51;
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (v26) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }
  unint64_t v28 = v25 + *(int *)(a2 + 60);
  uint64_t v29 = v46;
  uint64_t v30 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v46 + 16))(v24, v28, v9);
  uint64_t v42 = (uint64_t)&v42;
  uint64_t v43 = v9;
  if (v8)
  {
    unint64_t v31 = v8;
    uint64_t v32 = (uint64_t *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v33 = v45 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v34 = 32;
    uint64_t v44 = v24;
    unint64_t v45 = v31;
    while (1)
    {
      unint64_t v47 = v31;
      uint64_t v51 = 0;
      uint64_t v48 = &v42;
      uint64_t v35 = *v32;
      uint64_t v36 = *(void *)(*v32 - 8);
      double v37 = MEMORY[0x1F4188790](v30);
      int v39 = (char *)&v42 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v36 + 16))(v39, v37);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v49, v50);
      uint64_t v40 = v51;
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v40) {
        break;
      }
      uint64_t v30 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v39, v35);
      v34 += 16;
      v33 += 8;
      ++v32;
      unint64_t v31 = v47 - 1;
      uint64_t v41 = v46;
      unint64_t v24 = v44;
      if (v47 == 1) {
        goto LABEL_20;
      }
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v35);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v44, v43);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }
  uint64_t v41 = v29;
LABEL_20:
  (*(void (**)(char *, uint64_t))(v41 + 8))(v24, v43);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
}

uint64_t PredicateExpressions.PredicateEvaluate<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  unint64_t v55 = a6;
  uint64_t v12 = a3;
  uint64_t v50 = a8;
  uint64_t v65 = a2;
  if (a2 == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v19 = (char *)v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v16)
    {
      unint64_t v20 = 0;
      if (v16 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v19[-v17] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v20 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v21 = (long long *)(v17 + 16);
      uint64_t v22 = v19 + 16;
      unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *v21;
        *(v22 - 1) = *(v21 - 1);
        *uint64_t v22 = v24;
        v21 += 2;
        v22 += 2;
        v23 -= 4;
      }
      while (v23);
      if (v20 != v16)
      {
LABEL_9:
        unint64_t v25 = v16 - v20;
        uint64_t v26 = 8 * v20;
        uint64_t v27 = &v19[8 * v20];
        unint64_t v28 = (uint64_t *)(v17 + v26);
        do
        {
          uint64_t v29 = *v28++;
          *(void *)uint64_t v27 = v29;
          v27 += 8;
          --v25;
        }
        while (v25);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v12 = a3;
  }
  uint64_t v60 = v48;
  uint64_t v51 = *(void *)(TupleTypeMetadata - 8);
  uint64_t v52 = TupleTypeMetadata;
  MEMORY[0x1F4188790](TupleTypeMetadata);
  unint64_t v31 = (char *)v48 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = v48;
  uint64_t v53 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v32);
  unint64_t v54 = (char *)v48 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62[0] = v34;
  v62[1] = v12;
  v62[2] = a4;
  uint64_t v63 = a5;
  uint64_t v64 = a7;
  uint64_t v35 = type metadata accessor for PredicateExpressions.PredicateEvaluate();
  uint64_t v58 = v48;
  uint64_t v36 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v38 = (char *)v48 - v37;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  int v39 = v61;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v39) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v56 = v36;
  uint64_t v57 = v35;
  uint64_t v61 = v31;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v62, v63);
  uint64_t v40 = v54;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v49 = a1;
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v38, v40, v12);
  if (v65)
  {
    v48[1] = v12;
    uint64_t v42 = 0;
    unint64_t v54 = v38;
    unint64_t v55 = a9 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v43 = v51;
    uint64_t v44 = v52 + 16;
    do
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v62, v63);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
      ++v42;
      v44 += 16;
      unint64_t v45 = v61;
      uint64_t v38 = v54;
      uint64_t v47 = v56;
      uint64_t v46 = v57;
    }
    while (v65 != v42);
  }
  else
  {
    unint64_t v45 = v61;
    uint64_t v43 = v51;
    uint64_t v47 = v56;
    uint64_t v46 = v57;
  }
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&v38[*(int *)(v46 + 60)], v45, v52);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 16))(v50, v38, v46);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v38, v46);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)a3 + 16);
  uint64_t v5 = *(void *)(*(void *)a3 + 24);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
  {
    uint64_t v11 = 0;
    unint64_t v12 = *(void *)(v7 + 8) & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(void *)&v10[8 * v11] = *(void *)(*(void *)(v12 + 8 * v11) + 16);
      ++v11;
    }
    while (v8 != v11);
    MEMORY[0x1F4188790](v6);
    unint64_t v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v17 = 0;
    do
    {
      *(void *)&v16[8 * v17] = *(void *)(*(void *)(v14 + 8 * v17) + 24);
      ++v17;
    }
    while (v13 != v17);
  }
  else
  {
    MEMORY[0x1F4188790](v6);
    unint64_t v16 = (char *)v20 - v18;
  }
  v20[4] = v4;
  v20[5] = v5;
  v20[6] = v10;
  v20[7] = v16;
  *(void *)(a1 + 16) = swift_getWitnessTable();
  v20[0] = v4;
  v20[1] = v5;
  v20[2] = v10;
  v20[3] = v16;
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.PredicateEvaluate<>.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], *(void *)(a3 - 8), a2[6], a4, *(void *)(a3 - 24));
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return PredicateExpressions.PredicateEvaluate<>.encode(to:)(a1, a2, a3, *(uint64_t **)(a3 - 16), a5, *(void *)(a3 - 32));
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.PredicateEvaluate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*(void *)(*(void *)(a3 + 24) - 8) + 16))(a1, a2);
    uint64_t v8 = *(int *)(a3 + 60);
    uint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (char *)a2 + v8;
    if (*(void *)(a3 + 16) == 1)
    {
      uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      MEMORY[0x1F4188790](v7);
      uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v13)
      {
        unint64_t v16 = 0;
        unint64_t v17 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (v13 < 4) {
          goto LABEL_11;
        }
        if ((unint64_t)&v15[-v17] < 0x20) {
          goto LABEL_11;
        }
        unint64_t v16 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v18 = (long long *)(v17 + 16);
        uint64_t v19 = v15 + 16;
        unint64_t v20 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          long long v21 = *v18;
          *(v19 - 1) = *(v18 - 1);
          *uint64_t v19 = v21;
          v18 += 2;
          v19 += 2;
          v20 -= 4;
        }
        while (v20);
        if (v13 != v16)
        {
LABEL_11:
          unint64_t v22 = v13 - v16;
          uint64_t v23 = 8 * v16;
          long long v24 = &v15[8 * v16];
          unint64_t v25 = (uint64_t *)(v17 + v23);
          do
          {
            uint64_t v26 = *v25++;
            *(void *)long long v24 = v26;
            v24 += 8;
            --v22;
          }
          while (v22);
        }
      }
      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    (*(void (**)(char *, char *))(*(void *)(TupleTypeMetadata - 8) + 16))(v9, v10);
  }
  return v4;
}

uint64_t destroy for PredicateExpressions.PredicateEvaluate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();
  uint64_t v5 = *(int *)(a2 + 60);
  if (*(void *)(a2 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](v4);
    uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      unint64_t v10 = 0;
      unint64_t v11 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v7 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v9[-v11] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v12 = (long long *)(v11 + 16);
      unint64_t v13 = v9 + 16;
      unint64_t v14 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *unint64_t v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v7 != v10)
      {
LABEL_9:
        unint64_t v16 = v7 - v10;
        uint64_t v17 = 8 * v10;
        uint64_t v18 = &v9[8 * v10];
        uint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)uint64_t v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)(TupleTypeMetadata - 8) + 8))(a1 + v5);
}

uint64_t initializeWithCopy for PredicateExpressions.PredicateEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a3 + 24) - 8) + 16))();
  uint64_t v7 = *(int *)(a3 + 60);
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](v6);
    unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      unint64_t v12 = 0;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v11[-v13] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (long long *)(v13 + 16);
      long long v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *long long v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        long long v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 16))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.PredicateEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a3 + 24) - 8) + 24))();
  uint64_t v7 = *(int *)(a3 + 60);
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](v6);
    unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      unint64_t v12 = 0;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v11[-v13] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (long long *)(v13 + 16);
      long long v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *long long v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        long long v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 24))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.PredicateEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a3 + 24) - 8) + 32))();
  uint64_t v7 = *(int *)(a3 + 60);
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](v6);
    unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      unint64_t v12 = 0;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v11[-v13] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (long long *)(v13 + 16);
      long long v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *long long v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        long long v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 32))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.PredicateEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a3 + 24) - 8) + 40))();
  uint64_t v7 = *(int *)(a3 + 60);
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](v6);
    unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
    {
      unint64_t v12 = 0;
      unint64_t v13 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v9 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v11[-v13] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v14 = (long long *)(v13 + 16);
      long long v15 = v11 + 16;
      unint64_t v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *long long v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v9 != v12)
      {
LABEL_9:
        unint64_t v18 = v9 - v12;
        uint64_t v19 = 8 * v12;
        uint64_t v20 = &v11[8 * v12];
        long long v21 = (uint64_t *)(v13 + v19);
        do
        {
          uint64_t v22 = *v21++;
          *(void *)uint64_t v20 = v22;
          v20 += 8;
          --v18;
        }
        while (v18);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 40))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.PredicateEvaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181EE9308);
}

uint64_t sub_181EE9308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) == a2)
  {
    uint64_t v7 = *(uint64_t (**)(void))(v6 + 48);
    return v7();
  }
  else
  {
    if (*(void *)(a3 + 16) == 1)
    {
      uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      MEMORY[0x1F4188790](a1);
      unint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v10)
      {
        unint64_t v13 = 0;
        unint64_t v14 = *(void *)(a3 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (v10 < 4) {
          goto LABEL_13;
        }
        if ((unint64_t)&v12[-v14] < 0x20) {
          goto LABEL_13;
        }
        unint64_t v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        long long v15 = (long long *)(v14 + 16);
        unint64_t v16 = v12 + 16;
        unint64_t v17 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          long long v18 = *v15;
          *(v16 - 1) = *(v15 - 1);
          *unint64_t v16 = v18;
          v15 += 2;
          v16 += 2;
          v17 -= 4;
        }
        while (v17);
        if (v10 != v13)
        {
LABEL_13:
          unint64_t v19 = v10 - v13;
          uint64_t v20 = 8 * v13;
          long long v21 = &v12[8 * v13];
          uint64_t v22 = (uint64_t *)(v14 + v20);
          do
          {
            uint64_t v23 = *v22++;
            *(void *)long long v21 = v23;
            v21 += 8;
            --v19;
          }
          while (v19);
        }
      }
      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 48))(a1 + *(int *)(a3 + 60), a2);
  }
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.PredicateEvaluate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181EE94D0);
}

uint64_t sub_181EE94D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  if (*(_DWORD *)(v7 + 84) == a3)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
    return v8(a1, a2, a2);
  }
  else
  {
    if (*(void *)(a4 + 16) == 1)
    {
      uint64_t TupleTypeMetadata = *(void *)(*(void *)(a4 + 32) & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      MEMORY[0x1F4188790](a1);
      unint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v11)
      {
        unint64_t v14 = 0;
        unint64_t v15 = *(void *)(a4 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (v11 < 4) {
          goto LABEL_13;
        }
        if ((unint64_t)&v13[-v15] < 0x20) {
          goto LABEL_13;
        }
        unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v16 = (long long *)(v15 + 16);
        unint64_t v17 = v13 + 16;
        unint64_t v18 = v11 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          long long v19 = *v16;
          *(v17 - 1) = *(v16 - 1);
          *unint64_t v17 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 4;
        }
        while (v18);
        if (v11 != v14)
        {
LABEL_13:
          unint64_t v20 = v11 - v14;
          uint64_t v21 = 8 * v14;
          uint64_t v22 = &v13[8 * v14];
          uint64_t v23 = (uint64_t *)(v15 + v21);
          do
          {
            uint64_t v24 = *v23++;
            *(void *)uint64_t v22 = v24;
            v22 += 8;
            --v20;
          }
          while (v20);
        }
      }
      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 56))(a1 + *(int *)(a4 + 60), a2, a2);
  }
}

BOOL static AttributeContainer.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  return (specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0
      && (specialized static Set.== infix(_:_:)(v2, v3) & 1) != 0;
}

unint64_t specialized static Dictionary<>.== infix(_:_:)(unint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  unint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  unint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    uint64_t v15 = *(void *)(*(void *)(v3 + 56) + 8 * v11);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(_DWORD *)(*(void *)(v3 + 48) + 4 * v11));
    if ((v16 & 1) == 0 || *(void *)(*(void *)(a2 + 56) + 8 * result) != v15) {
      return 0;
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

Swift::Int specialized static Set.== infix(_:_:)(Swift::Int result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  Swift::Int v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  Swift::Int v5 = result + 56;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(result + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_23;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
    if (v13 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (v14) {
      goto LABEL_22;
    }
    int64_t v4 = v13 + 1;
    if (v13 + 1 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_22;
    }
    int64_t v4 = v13 + 2;
    if (v13 + 2 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_22;
    }
    int64_t v15 = v13 + 3;
    if (v15 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v4 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_33;
        }
        if (v4 >= v9) {
          return 1;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        ++v15;
        if (v14) {
          goto LABEL_22;
        }
      }
    }
    int64_t v4 = v15;
LABEL_22:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_23:
    Swift::UInt v16 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v12);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v16);
    uint64_t result = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v18 = result & ~v17;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    uint64_t v19 = *(void *)(a2 + 48);
  }
  while (*(unsigned __int8 *)(v19 + v18) == v16);
  uint64_t v20 = ~v17;
  while (1)
  {
    unint64_t v18 = (v18 + 1) & v20;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    if (*(unsigned __int8 *)(v19 + v18) == v16) {
      goto LABEL_7;
    }
  }
}

uint64_t AttributeContainer.subscript.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*MEMORY[0x1E4FBC5F0] + *a1 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AttributedString._AttributeStorage.subscript.getter(v6, v7, a2, a3);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void static AttributeContainer.subscript.getter(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC870];
  *a1 = MEMORY[0x1E4FBC868];
  a1[1] = v1;
}

uint64_t AttributeContainer.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return AttributedString._AttributeStorage.subscript.getter(*v3, a1, a2, a3);
}

uint64_t AttributeContainer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x1F4188790](v7);
  unint64_t v11 = &v18[-v10 - 8];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v8 + 16))(&v18[-v10 - 8], a1, v7, v9);
  unint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  unint64_t v14 = v13;
  static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v11, a3, a4, (uint64_t)v18);
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v18, v12, v14);
  swift_bridgeObjectRelease();
  int64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
  v15((uint64_t)v11, v7);
  return v15(a1, v7);
}

void (*AttributeContainer.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v8 = malloc(0x40uLL);
  *a1 = v8;
  v8[1] = a4;
  v8[2] = v4;
  *uint64_t v8 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  v8[3] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[4] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v8[5] = malloc(v11);
  v8[6] = malloc(v11);
  unint64_t v12 = malloc(v11);
  v8[7] = v12;
  AttributedString._AttributeStorage.subscript.getter(*v4, a3, a4, (uint64_t)v12);
  return AttributeContainer.subscript.modify;
}

void AttributeContainer.subscript.modify(uint64_t **a1, char a2)
{
  Swift::Int v3 = *a1;
  int64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))((*a1)[4] + 16);
  v4((*a1)[6], v3[7], v3[3]);
  Swift::Int v5 = (void *)v3[6];
  uint64_t v7 = v3[4];
  uint64_t v6 = (void *)v3[5];
  uint64_t v8 = v3[3];
  unint64_t v18 = (void *)v3[7];
  uint64_t v9 = *v3;
  uint64_t v10 = v3[1];
  if (a2)
  {
    v4((uint64_t)v6, (uint64_t)v5, v8);
    unint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
    unint64_t v13 = v12;
    static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v6, v9, v10, (uint64_t)v19);
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v19, v11, v13);
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void *, uint64_t))(v7 + 8);
    v14(v6, v8);
  }
  else
  {
    unint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(*v3, v3[1]);
    unint64_t v17 = v16;
    static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v5, v9, v10, (uint64_t)v19);
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v19, v15, v17);
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void *, uint64_t))(v7 + 8);
  }
  v14(v5, v8);
  v14(v18, v8);
  free(v18);
  free(v5);
  free(v6);

  free(v3);
}

uint64_t key path getter for AttributeContainer.subscript<A>(dynamicMember:) : <A>AttributeContainerA@<X0>(void **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(uint64_t *)((char *)a1 + a2 - 8);
  Swift::Int v5 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AttributeContainer.subscript.getter(v5, v4, a3);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void (*AttributeContainer.subscript.modify(void *a1, void *a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v7 = malloc(0x50uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  uint64_t v8 = *(void *)(*MEMORY[0x1E4FBC5F0] + *a2 + 8);
  v7[3] = v8;
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  v7[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[5] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v7[6] = malloc(v11);
  v7[7] = malloc(v11);
  v7[8] = malloc(v11);
  unint64_t v12 = malloc(v11);
  v7[9] = v12;
  uint64_t v13 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AttributedString._AttributeStorage.subscript.getter(v13, v8, a3, (uint64_t)v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return AttributeContainer.subscript.modify;
}

void AttributeContainer.subscript.modify(uint64_t a1, char a2)
{
  Swift::Int v3 = *(void **)a1;
  uint64_t v4 = *(void **)(*(void *)a1 + 64);
  Swift::Int v5 = *(void **)(*(void *)a1 + 56);
  uint64_t v6 = *(void *)(*(void *)a1 + 32);
  uint64_t v7 = *(void (**)(void *, void *, uint64_t))(*(void *)(*(void *)a1 + 40) + 16);
  v7(v4, *(void **)(*(void *)a1 + 72), v6);
  v7(v5, v4, v6);
  uint64_t v8 = (void *)v3[7];
  uint64_t v25 = (void *)v3[9];
  uint64_t v26 = (void *)v3[8];
  uint64_t v9 = v3[5];
  uint64_t v10 = v3[3];
  uint64_t v11 = v3[4];
  uint64_t v12 = v3[1];
  if (a2)
  {
    uint64_t v13 = (void *)v3[6];
    v7(v13, v8, v11);
    unint64_t v14 = v13;
    unint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 24);
    swift_retain();
    unint64_t v16 = v15(v10, v12);
    unint64_t v18 = v17;
    static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v14, v10, v12, (uint64_t)v27);
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v27, v16, v18);
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(void *, uint64_t))(v9 + 8);
    v19(v14, v11);
    v19(v8, v11);
    swift_release();
    uint64_t v20 = v26;
    v19(v26, v11);
  }
  else
  {
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 24);
    unint64_t v14 = (void *)v3[6];
    swift_retain();
    unint64_t v22 = v21(v10, v12);
    unint64_t v24 = v23;
    static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v8, v10, v12, (uint64_t)v27);
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v27, v22, v24);
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(void *, uint64_t))(v9 + 8);
    v19(v8, v11);
    uint64_t v20 = v26;
    v19(v26, v11);
    swift_release();
  }
  v19(v25, v11);
  free(v25);
  free(v20);
  free(v8);
  free(v14);

  free(v3);
}

double key path getter for AttributeContainer.subscript<A>(dynamicMember:) : <A>AttributeContainerA@<D0>(_OWORD *a1@<X8>)
{
  AttributeContainer.subscript.getter(v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t key path setter for AttributeContainer.subscript<A>(dynamicMember:) : <A>AttributeContainerA(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v3 = a1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::Int v5 = AttributeContainer.subscript.modify(v8);
  *uint64_t v6 = v1;
  v6[1] = v2;
  v6[2] = v4;
  void v6[3] = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(void *, void))v5)(v8, 0);
}

uint64_t AttributeContainer.subscript.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v3 = a1[2];
  unint64_t v2 = a1[3];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v5, v3, v2);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v5[0]) = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(v1, (char *)v5);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  return swift_bridgeObjectRelease_n();
}

uint64_t AttributeContainer.merge(_:mergePolicy:)(uint64_t *a1, char *a2)
{
  uint64_t v2 = *a1;
  char v4 = *a2;
  return specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(v2, &v4);
}

uint64_t AttributeContainer.merging(_:mergePolicy:)@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  char v6 = *a2;
  uint64_t v7 = *v3;
  uint64_t v8 = v3[1];
  *a3 = v7;
  a3[1] = v8;
  char v10 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(v5, &v10);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttributeContainer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  return (specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) != 0
      && (specialized static Set.== infix(_:_:)(v2, v3) & 1) != 0;
}

uint64_t AttributeContainer.hash(into:)(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v4);
  specialized Set.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

Swift::Int AttributeContainer.hashValue.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v1);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributeContainer()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v1);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttributeContainer(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v4);
  specialized Set.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributeContainer()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v1);
  specialized Set.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t AttributeContainer.description.getter()
{
  uint64_t v1 = *v0;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  uint64_t v2 = v1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v6) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v2 + 8 * v18);
    ++v8;
    if (!v19)
    {
      int64_t v8 = v18 + 1;
      if (v18 + 1 >= v6) {
        goto LABEL_23;
      }
      unint64_t v19 = *(void *)(v2 + 8 * v8);
      if (!v19)
      {
        int64_t v8 = v18 + 2;
        if (v18 + 2 >= v6) {
          goto LABEL_23;
        }
        unint64_t v19 = *(void *)(v2 + 8 * v8);
        if (!v19)
        {
          int64_t v8 = v18 + 3;
          if (v18 + 3 >= v6) {
            goto LABEL_23;
          }
          unint64_t v19 = *(void *)(v2 + 8 * v8);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v19 - 1) & v19;
    unint64_t v10 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_5:
    uint64_t v11 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = (void *)v11[1];
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v1 + 56) + 72 * v10, (uint64_t)v28);
    v27._countAndFlagsBits = v13;
    v27._object = v12;
    v25[1] = v28[1];
    v25[2] = v28[2];
    v25[3] = v28[3];
    uint64_t v26 = v29;
    Swift::String v24 = v27;
    v25[0] = v28[0];
    v23._countAndFlagsBits = 9;
    v23._object = (void *)0xE100000000000000;
    Swift::String v14 = v27;
    swift_bridgeObjectRetain();
    String.append(_:)(v14);
    v15._countAndFlagsBits = 2112800;
    v15._object = (void *)0xE300000000000000;
    String.append(_:)(v15);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v25, (uint64_t)v22);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 10;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    uint64_t result = outlined destroy of Any?((uint64_t)&v24, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
  }
  int64_t v20 = v18 + 4;
  if (v20 >= v6)
  {
LABEL_23:
    swift_release();
    v27._countAndFlagsBits = 2683;
    v27._object = (void *)0xE200000000000000;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 125;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    return v27._countAndFlagsBits;
  }
  unint64_t v19 = *(void *)(v2 + 8 * v20);
  if (v19)
  {
    int64_t v8 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_23;
    }
    unint64_t v19 = *(void *)(v2 + 8 * v8);
    ++v20;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeContainer and conformance AttributeContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeContainer and conformance AttributeContainer;
  if (!lazy protocol witness table cache variable for type AttributeContainer and conformance AttributeContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeContainer and conformance AttributeContainer);
  }
  return result;
}

uint64_t sub_181EEBA88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized AttributeContainer.subscript.setter(a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t sub_181EEBAB4()
{
  return 16;
}

__n128 sub_181EEBAC0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_181EEBAD4()
{
  return 16;
}

__n128 sub_181EEBAE0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t PredicateExpressions.Negation.wrapped.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.Negation.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t PredicateExpressions.Negation.evaluate(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *a1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, void))(*(void *)(a2 + 24) + 16))(&var1, &v5, *(void *)(a2 + 16));
  if (!v2) {
    char v3 = var1 ^ 1;
  }
  return v3 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Negation<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PredicateExpressions.Negation.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t static PredicateExpressions.build_Negation<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t PredicateExpressions.Negation.description.getter()
{
  _StringGuts.grow(_:)(21);
  v0._object = (void *)0x80000001823B3650;
  v0._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t PredicateExpressions.Negation<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t PredicateExpressions.Negation<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v18[6] = a3;
  uint64_t v17 = a4;
  uint64_t v16 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  int64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PredicateExpressions.Negation();
  uint64_t v15 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v13 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    uint64_t v14 = v9;
    __swift_project_boxed_opaque_existential_1(v18, v18[3]);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v11, v8, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v17, v11, v14);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Negation<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.Negation<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Negation<A>(void *a1)
{
  return PredicateExpressions.Negation<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Negation(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.Negation(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x181EEC3B4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator.next()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x1F4188298](AsyncUnicodeScalarSequence.AsyncIterator.next(), 0, 0);
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator.next()()
{
  uint64_t v1 = (char *)(v0[3] + *(int *)(v0[2] + 36));
  if (v1[1])
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[5] = v4;
    void *v4 = v0;
    v4[1] = AsyncUnicodeScalarSequence.AsyncIterator.next();
    return MEMORY[0x1F4187C78](v0 + 8, AssociatedTypeWitness, AssociatedConformanceWitness);
  }
  else
  {
    char v5 = *v1;
    *(_WORD *)uint64_t v1 = 256;
    uint64_t v6 = swift_task_alloc();
    v0[4] = v6;
    *(void *)uint64_t v6 = v0;
    *(void *)(v6 + 8) = AsyncUnicodeScalarSequence.AsyncIterator.next();
    *(_OWORD *)(v6 + 16) = *((_OWORD *)v0 + 1);
    *(unsigned char *)(v6 + 86) = v5;
    return MEMORY[0x1F4188298](AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AsyncUnicodeScalarSequence.AsyncIterator.next();
  }
  else {
    uint64_t v2 = AsyncUnicodeScalarSequence.AsyncIterator.next();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;
  char v3;
  uint64_t (*v4)(unint64_t);
  uint64_t v6;
  uint64_t v7;

  uint64_t v1 = *(unsigned char *)(v0 + 65);
  if (v1)
  {
    uint64_t v2 = 0;
LABEL_4:
    uint64_t v4 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v4(v2 | ((unint64_t)v1 << 32));
  }
  uint64_t v2 = *(unsigned __int8 *)(v0 + 64);
  uint64_t v3 = v2;
  if (((char)v2 & 0x80000000) == 0) {
    goto LABEL_4;
  }
  uint64_t v6 = swift_task_alloc();
  *(void *)(v0 + 56) = v6;
  *(void *)uint64_t v6 = v0;
  *(void *)(v6 + 8) = AsyncUnicodeScalarSequence.AsyncIterator.next();
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(v0 + 16);
  *(unsigned char *)(v6 + 86) = v3;
  return MEMORY[0x1F4188298](AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:), 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator.next()(unint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    char v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
  else
  {
    unsigned int v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v7(a1 | ((HIDWORD(a1) & 1) << 32));
  }
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t (*v7)(uint64_t);
  uint64_t v8;

  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    char v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
  else
  {
    unsigned int v7 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v7(a1 | ((HIDWORD(a1) & 1) << 32));
  }
}

uint64_t AsyncUnicodeScalarSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  uint64_t result = type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator();
  *(_WORD *)(a2 + *(int *)(result + 36)) = 256;
  return result;
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, v1, AssociatedTypeWitness);
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._base.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40);

  return v4(v1, a1, AssociatedTypeWitness);
}

uint64_t (*AsyncUnicodeScalarSequence.AsyncIterator._base.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._leftover.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36)) | (*(unsigned __int8 *)(v1 + *(int *)(a1 + 36) + 1) << 8);
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._leftover.setter(uint64_t result, uint64_t a2)
{
  double v3 = (unsigned char *)(v2 + *(int *)(a2 + 36));
  *double v3 = result;
  v3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t (*AsyncUnicodeScalarSequence.AsyncIterator._leftover.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Swift::Int_optional __swiftcall AsyncUnicodeScalarSequence.AsyncIterator._expectedContinuationCountForByte(_:)(Swift::UInt8 a1)
{
  int v1 = a1 & 0xE0;
  int v2 = a1 & 0xF0;
  BOOL v3 = (a1 & 0x80u) != 0;
  uint64_t v4 = 3;
  if ((a1 & 0xF8) == 0xF0) {
    BOOL v3 = 0;
  }
  else {
    uint64_t v4 = 0;
  }
  BOOL v5 = v2 == 224;
  if (v2 == 224) {
    uint64_t v6 = 2;
  }
  else {
    uint64_t v6 = v4;
  }
  if (v5) {
    BOOL v3 = 0;
  }
  if (v1 == 192) {
    Swift::Int v7 = 1;
  }
  else {
    Swift::Int v7 = v6;
  }
  Swift::Bool v8 = v1 != 192 && v3;
  result.value = v7;
  result.is_nil = v8;
  return result;
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:)(char a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = v2;
  *(unsigned char *)(v3 + 86) = a1;
  return MEMORY[0x1F4188298](AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:), 0, 0);
}

uint64_t AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:)()
{
  char v1 = *(unsigned char *)(v0 + 86);
  if ((v1 & 0xE0) == 0xC0)
  {
    uint64_t v2 = 1;
LABEL_7:
    *(void *)(v0 + 32) = v2;
    uint64_t v3 = *(void *)(v0 + 16);
    *(unsigned char *)(v0 + 80) = v1;
    *(_WORD *)(v0 + 81) = 0;
    *(unsigned char *)(v0 + 83) = 0;
    *(void *)(v0 + 40) = *(void *)(v3 + 24);
    *(void *)(v0 + 48) = *(void *)(v3 + 16);
    *(void *)(v0 + 56) = 0;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v6;
    *uint64_t v6 = v0;
    v6[1] = AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:);
    return MEMORY[0x1F4187C78](v0 + 84, AssociatedTypeWitness, AssociatedConformanceWitness);
  }
  if ((v1 & 0xF0) == 0xE0)
  {
    uint64_t v2 = 2;
    goto LABEL_7;
  }
  if ((v1 & 0xF8) == 0xF0)
  {
    uint64_t v2 = 3;
    goto LABEL_7;
  }
  if ((*(unsigned char *)(v0 + 86) & 0x80) != 0)
  {
    LOBYTE(v10) = 0;
    uint64_t v11 = 65533;
  }
  else
  {
    *(unsigned char *)(v0 + 80) = v1;
    *(_WORD *)(v0 + 81) = 0;
    *(unsigned char *)(v0 + 83) = 0;
    unint64_t v7 = static String._fromUTF8Repairing(_:)();
    unint64_t v9 = specialized Collection.first.getter(v7, v8);
    swift_bridgeObjectRelease();
    uint64_t v10 = HIDWORD(v9) & 1;
    uint64_t v11 = v9;
  }
  unsigned int v12 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v12(v11 | ((unint64_t)v10 << 32));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:);
  }
  else {
    uint64_t v2 = AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  void *v6;
  unsigned char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t (*v11)(unint64_t);
  uint64_t v13;

  char v1 = *(unsigned char *)(v0 + 84);
  if ((*(unsigned char *)(v0 + 85) & 1) == 0)
  {
    if ((v1 & 0xC0) == 0x80)
    {
      uint64_t v2 = *(void *)(v0 + 32);
      uint64_t v3 = *(void *)(v0 + 56) + 1;
      *(unsigned char *)(v0 + 80 + v3) = v1;
      if (v3 != v2)
      {
        *(void *)(v0 + 56) = v3;
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        uint64_t v6 = (void *)swift_task_alloc();
        *(void *)(v0 + 64) = v6;
        *uint64_t v6 = v0;
        v6[1] = AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:);
        return MEMORY[0x1F4187C78](v0 + 84, AssociatedTypeWitness, AssociatedConformanceWitness);
      }
    }
    else
    {
      unint64_t v7 = (unsigned char *)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 16) + 36));
      *unint64_t v7 = v1;
      v7[1] = 0;
    }
  }
  unint64_t v8 = static String._fromUTF8Repairing(_:)();
  uint64_t v10 = specialized Collection.first.getter(v8, v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v11(v10 | ((HIDWORD(v10) & 1) << 32));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator(uint64_t a1, uint64_t a2)
{
  v3[3] = v2;
  v3[4] = a2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator, 0, 0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator()
{
  char v1 = (__int8 *)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 32) + 36));
  if (v1[1])
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v4;
    void *v4 = v0;
    v4[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator;
    return MEMORY[0x1F4187C78](v0 + 72, AssociatedTypeWitness, AssociatedConformanceWitness);
  }
  else
  {
    __int8 v5 = *v1;
    *(_WORD *)char v1 = 256;
    uint64_t v6 = (int8x16_t *)swift_task_alloc();
    *(void *)(v0 + 40) = v6;
    v6->i64[0] = v0;
    v6->i64[1] = (uint64_t)protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator;
    v6[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
    v6[5].i8[6] = v5;
    return MEMORY[0x1F4188298](AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator;
  }
  else {
    uint64_t v2 = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  int v1;
  int v2;
  __int8 v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  int8x16_t *v7;
  uint64_t v8;

  char v1 = *(unsigned __int8 *)(v0 + 73);
  if (v1 == 1)
  {
    uint64_t v2 = 0;
LABEL_4:
    uint64_t v4 = *(void *)(v0 + 16);
    *(_DWORD *)uint64_t v4 = v2;
    *(unsigned char *)(v4 + 4) = v1;
    __int8 v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  uint64_t v2 = *(unsigned __int8 *)(v0 + 72);
  uint64_t v3 = v2;
  if (((char)v2 & 0x80000000) == 0) {
    goto LABEL_4;
  }
  unint64_t v7 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 64) = v7;
  v7->i64[0] = v0;
  v7->i64[1] = (uint64_t)protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator;
  v7[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  v7[5].i8[6] = v3;
  return MEMORY[0x1F4188298](AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:), 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncUnicodeScalarSequence<A>.AsyncIterator(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1)
  {
    uint64_t v6 = *(void *)(v4 + 16);
    *(_DWORD *)uint64_t v6 = a1;
    *(unsigned char *)(v6 + 4) = BYTE4(a1) & 1;
  }
  unint64_t v7 = *(uint64_t (**)(void))(v5 + 8);
  return v7();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1)
  {
    uint64_t v6 = *(void *)(v4 + 16);
    *(_DWORD *)uint64_t v6 = a1;
    *(unsigned char *)(v6 + 4) = BYTE4(a1) & 1;
  }
  unint64_t v7 = *(uint64_t (**)(void))(v5 + 8);
  return v7();
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncUnicodeScalarSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AsyncUnicodeScalarSequence.makeAsyncIterator()(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v4(v2, a1);
}

uint64_t AsyncSequence<>.unicodeScalars.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncUnicodeScalarSequence<A>()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for AsyncUnicodeScalarSequence(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for AsyncUnicodeScalarSequence(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x181EEDE24);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for AsyncUnicodeScalarSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AsyncUnicodeScalarSequence.AsyncIterator()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 2) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *(_WORD *)((char *)a1 + v6) = *(_WORD *)((char *)a2 + v6);
  }
  else
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(_WORD *)(*(void *)(v5 + 48) + a1) = *(_WORD *)(*(void *)(v5 + 48) + a2);
  return a1;
}

uint64_t assignWithCopy for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(_WORD *)(*(void *)(v5 + 40) + a1) = *(_WORD *)(*(void *)(v5 + 40) + a2);
  return a1;
}

uint64_t initializeWithTake for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(_WORD *)(*(void *)(v5 + 32) + a1) = *(_WORD *)(*(void *)(v5 + 32) + a2);
  return a1;
}

uint64_t assignWithTake for AsyncUnicodeScalarSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(_WORD *)(*(void *)(v5 + 24) + a1) = *(_WORD *)(*(void *)(v5 + 24) + a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncUnicodeScalarSequence.AsyncIterator(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (!a2) {
    return 0;
  }
  if (a2 <= v6) {
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + 2;
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((a2 - v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v6)
      {
        unsigned int v12 = *(uint64_t (**)(unsigned __int16 *))(v5 + 48);
        return v12(a1);
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v11 = 0;
  }
  if (*(_DWORD *)(*(void *)(AssociatedTypeWitness - 8) + 64) != -2)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v6 + (v7 | v11) + 1;
}

void storeEnumTagSinglePayload for AsyncUnicodeScalarSequence.AsyncIterator(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64) + 2;
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (*(_DWORD *)(v6 + 64) != -2)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x181EEE69CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

char *specialized static AttributeScope.scopeDescription.getter()
{
  if (one-time initialization token for _loadedScopeCache != -1) {
    goto LABEL_261;
  }
  while (2)
  {
    uint64_t v0 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
    unint64_t v1 = (os_unfair_lock_s *)(_loadedScopeCache + 40);
    swift_retain();
    os_unfair_lock_lock(v1);
    specialized closure #1 in static AttributeScope.scopeDescription.getter((uint64_t *)&v225);
    os_unfair_lock_unlock(v1);
    swift_release();
    uint64_t v2 = (void *)v225;
    if ((void)v225) {
      return (char *)v2;
    }
    uint64_t v3 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _FoundationPlusScope<AttributeScopes.FoundationAttributes>);
    unint64_t v4 = 0;
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    uint64_t v223 = MEMORY[0x1E4FBC868];
LABEL_4:
    unint64_t v5 = *v3;
    if (*v3 > 0x7FF) {
      goto LABEL_7;
    }
    if (v5 == 512)
    {
      swift_getKeyPath();
      uint64_t v78 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      uint64_t v7 = swift_release();
      size_t v8 = (unsigned int *)(*(unint64_t *)((char *)v3 + v78) + 20);
      goto LABEL_8;
    }
    if (!v5)
    {
LABEL_7:
      swift_getKeyPath();
      uint64_t v6 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      uint64_t v7 = swift_release();
      size_t v8 = (unsigned int *)(*(unint64_t *)((char *)v3 + v6) + 36);
LABEL_8:
      uint64_t v9 = *v8;
      goto LABEL_9;
    }
    uint64_t v7 = static Metadata.Kind.tuple.getter();
    if ((unint64_t)v7 > 0x7FF || v7 != v5)
    {
      if (!v4)
      {
LABEL_254:
        v207 = (os_unfair_lock_s *)v0[500];
        MEMORY[0x1F4188790](v7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        os_unfair_lock_lock(v207 + 10);
        partial apply for specialized closure #2 in static AttributeScope.scopeDescription.getter((uint64_t)&v207[4]);
        os_unfair_lock_unlock(v207 + 10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return (char *)v2;
      }
      goto LABEL_10;
    }
    MEMORY[0x185300FE0](v3);
    uint64_t v9 = TupleMetadata.Elements.endIndex.getter();
    if (TupleMetadata.Elements.endIndex.getter() < 0)
    {
      __break(1u);
LABEL_263:
      __break(1u);
LABEL_264:
      __break(1u);
LABEL_265:
      __break(1u);
LABEL_266:
      __break(1u);
LABEL_267:
      __break(1u);
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
      goto LABEL_273;
    }
    uint64_t v7 = TupleMetadata.Elements.endIndex.getter();
    if (v9 < 0 || v7 < v9) {
      goto LABEL_263;
    }
LABEL_9:
    if (v4 == v9) {
      goto LABEL_254;
    }
LABEL_10:
    unint64_t v10 = *v3;
    if (*v3 > 0x7FF) {
      goto LABEL_13;
    }
    if (v10 == 512)
    {
      swift_getKeyPath();
      uint64_t v79 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      unsigned int v12 = (unsigned int *)(*(unint64_t *)((char *)v3 + v79) + 20);
      goto LABEL_14;
    }
    if (!v10)
    {
LABEL_13:
      swift_getKeyPath();
      uint64_t v11 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      unsigned int v12 = (unsigned int *)(*(unint64_t *)((char *)v3 + v11) + 36);
LABEL_14:
      uint64_t v13 = *v12;
      goto LABEL_15;
    }
    unint64_t v80 = static Metadata.Kind.tuple.getter();
    uint64_t v13 = 0;
    if (v80 <= 0x7FF && v80 == v10)
    {
      MEMORY[0x185300FE0](v3);
      uint64_t v13 = TupleMetadata.Elements.endIndex.getter();
      if (TupleMetadata.Elements.endIndex.getter() < 0) {
        goto LABEL_264;
      }
      uint64_t v81 = TupleMetadata.Elements.endIndex.getter();
      if (v13 < 0 || v81 < v13) {
        goto LABEL_265;
      }
    }
LABEL_15:
    if (v4 >= v13)
    {
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      __break(1u);
LABEL_261:
      swift_once();
      continue;
    }
    break;
  }
  unint64_t v14 = *v3;
  unint64_t v15 = static Metadata.Kind.tuple.getter();
  if (v14 > 0x7FF)
  {
    if (v15 - 2048 < 0xFFFFFFFFFFFFF801) {
      goto LABEL_21;
    }
LABEL_23:
    uint64_t v18 = TypeMetadata.descriptor.getter();
    swift_getKeyPath();
    dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    int v19 = *(_DWORD *)(v18 + 16);
    long long v225 = *(_OWORD *)v18;
    LODWORD(v226) = v19;
    swift_getAtKeyPath();
    swift_release();
    uint64_t v20 = FieldDescriptor.subscript.getter();
    swift_getKeyPath();
    dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    int v21 = *(_DWORD *)(v20 + 8);
    *(void *)&long long v225 = *(void *)v20;
    DWORD2(v225) = v21;
    swift_getAtKeyPath();
    swift_release();
    uint64_t v17 = MangledTypeReference.standardSubstitution.getter();
    if (!v17) {
      uint64_t v17 = TypeMetadata._resolve(_:)();
    }
    unint64_t v16 = v4;
    goto LABEL_26;
  }
  if (v15 >= 0x800)
  {
    if (!v14) {
      goto LABEL_21;
    }
    goto LABEL_23;
  }
  if (v14 != v15) {
    goto LABEL_23;
  }
LABEL_21:
  MEMORY[0x185300FE0](v3);
  unint64_t v16 = v4;
  TupleMetadata.Elements.subscript.getter();
  uint64_t v17 = TupleMetadata.Elements.Element.metadata.getter();
LABEL_26:
  uint64_t v22 = swift_conformsToProtocol2();
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  if (v22) {
    uint64_t v24 = v17;
  }
  else {
    uint64_t v24 = 0;
  }
  if (v24)
  {
    uint64_t v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 24))(v24, v23);
    uint64_t v84 = v83;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v225 = v2;
    uint64_t v221 = v82;
    unint64_t v87 = specialized __RawDictionaryStorage.find<A>(_:)(v82, v84);
    uint64_t v88 = v2[2];
    BOOL v89 = (v86 & 1) == 0;
    uint64_t v90 = v88 + v89;
    if (__OFADD__(v88, v89)) {
      goto LABEL_266;
    }
    if (v2[3] < v90)
    {
      char v218 = v86;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v90, isUniquelyReferenced_nonNull_native);
      uint64_t v2 = (void *)v225;
      uint64_t v91 = v82;
      unint64_t v92 = specialized __RawDictionaryStorage.find<A>(_:)(v82, v84);
      if ((v218 & 1) != (v93 & 1)) {
        goto LABEL_276;
      }
      unint64_t v87 = v92;
      if ((v218 & 1) == 0) {
        goto LABEL_108;
      }
      goto LABEL_105;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v91 = v82;
      if ((v86 & 1) == 0) {
        goto LABEL_108;
      }
LABEL_105:
      uint64_t v94 = (uint64_t *)(v2[7] + 16 * v87);
      *uint64_t v94 = v24;
      v94[1] = v23;
      goto LABEL_110;
    }
    char v219 = v86;
    v212 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
    uint64_t v170 = static _DictionaryStorage.copy(original:)();
    uint64_t v171 = v170;
    if (!v2[2]) {
      goto LABEL_214;
    }
    uint64_t result = (char *)(v170 + 64);
    v216 = (char *)(v2 + 8);
    unint64_t v173 = (unint64_t)((1 << *(unsigned char *)(v171 + 32)) + 63) >> 6;
    if ((void *)v171 != v2 || result >= &v216[8 * v173]) {
      uint64_t result = (char *)memmove(result, v216, 8 * v173);
    }
    int64_t v174 = 0;
    *(void *)(v171 + 16) = v2[2];
    uint64_t v175 = 1 << *((unsigned char *)v2 + 32);
    if (v175 < 64) {
      uint64_t v176 = ~(-1 << v175);
    }
    else {
      uint64_t v176 = -1;
    }
    unint64_t v177 = v176 & v2[8];
    int64_t v178 = (unint64_t)(v175 + 63) >> 6;
    while (1)
    {
      if (v177)
      {
        unint64_t v179 = __clz(__rbit64(v177));
        v177 &= v177 - 1;
        unint64_t v180 = v179 | (v174 << 6);
      }
      else
      {
        BOOL v58 = __OFADD__(v174++, 1);
        if (v58) {
          goto LABEL_272;
        }
        if (v174 >= v178) {
          goto LABEL_214;
        }
        unint64_t v187 = *(void *)&v216[8 * v174];
        if (!v187)
        {
          int64_t v188 = v174 + 1;
          if (v174 + 1 >= v178) {
            goto LABEL_214;
          }
          unint64_t v187 = *(void *)&v216[8 * v188];
          if (!v187)
          {
            int64_t v188 = v174 + 2;
            if (v174 + 2 >= v178) {
              goto LABEL_214;
            }
            unint64_t v187 = *(void *)&v216[8 * v188];
            if (!v187)
            {
              int64_t v188 = v174 + 3;
              if (v174 + 3 >= v178) {
                goto LABEL_214;
              }
              unint64_t v187 = *(void *)&v216[8 * v188];
              if (!v187)
              {
                int64_t v188 = v174 + 4;
                if (v174 + 4 >= v178) {
                  goto LABEL_214;
                }
                unint64_t v187 = *(void *)&v216[8 * v188];
                if (!v187)
                {
                  int64_t v188 = v174 + 5;
                  if (v174 + 5 >= v178) {
                    goto LABEL_214;
                  }
                  unint64_t v187 = *(void *)&v216[8 * v188];
                  if (!v187)
                  {
                    int64_t v188 = v174 + 6;
                    if (v174 + 6 >= v178) {
                      goto LABEL_214;
                    }
                    unint64_t v187 = *(void *)&v216[8 * v188];
                    if (!v187)
                    {
                      int64_t v188 = v174 + 7;
                      if (v174 + 7 >= v178) {
                        goto LABEL_214;
                      }
                      unint64_t v187 = *(void *)&v216[8 * v188];
                      if (!v187)
                      {
                        int64_t v188 = v174 + 8;
                        if (v174 + 8 >= v178) {
                          goto LABEL_214;
                        }
                        unint64_t v187 = *(void *)&v216[8 * v188];
                        if (!v187)
                        {
                          while (1)
                          {
                            int64_t v174 = v188 + 1;
                            if (__OFADD__(v188, 1)) {
                              goto LABEL_277;
                            }
                            if (v174 >= v178) {
                              break;
                            }
                            unint64_t v187 = *(void *)&v216[8 * v174];
                            ++v188;
                            if (v187) {
                              goto LABEL_209;
                            }
                          }
LABEL_214:
                          swift_bridgeObjectRelease();
                          uint64_t v3 = v212;
                          uint64_t v2 = (void *)v171;
                          uint64_t v91 = v221;
                          if (v219) {
                            goto LABEL_105;
                          }
LABEL_108:
                          v2[(v87 >> 6) + 8] |= 1 << v87;
                          v95 = (uint64_t *)(v2[6] + 16 * v87);
                          uint64_t *v95 = v91;
                          v95[1] = v84;
                          char v96 = (uint64_t *)(v2[7] + 16 * v87);
                          uint64_t *v96 = v24;
                          v96[1] = v23;
                          uint64_t v97 = v2[2];
                          BOOL v58 = __OFADD__(v97, 1);
                          uint64_t v98 = v97 + 1;
                          if (v58) {
                            goto LABEL_267;
                          }
                          v2[2] = v98;
                          swift_bridgeObjectRetain();
LABEL_110:
                          uint64_t v0 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
                          unint64_t v4 = v16 + 1;
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          uint64_t v99 = swift_conformsToProtocol2();
                          if (v99) {
                            uint64_t v100 = v99;
                          }
                          else {
                            uint64_t v100 = 0;
                          }
                          if (!v99) {
                            uint64_t v24 = 0;
                          }
                          if (v24)
                          {
                            unint64_t v213 = v16;
                            uint64_t v150 = (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 24))(v24, v100);
                            uint64_t v152 = v151;
                            char v153 = swift_isUniquelyReferenced_nonNull_native();
                            *(void *)&long long v225 = v223;
                            unint64_t v155 = specialized __RawDictionaryStorage.find<A>(_:)(v150, v152);
                            uint64_t v156 = *(void *)(v223 + 16);
                            BOOL v157 = (v154 & 1) == 0;
                            uint64_t v158 = v156 + v157;
                            if (__OFADD__(v156, v157)) {
                              goto LABEL_270;
                            }
                            v215 = v2;
                            if (*(void *)(v223 + 24) < v158)
                            {
                              uint64_t v159 = v152;
                              char v160 = v154;
                              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v158, v153);
                              uint64_t v101 = v225;
                              uint64_t v161 = v159;
                              unint64_t v162 = specialized __RawDictionaryStorage.find<A>(_:)(v150, v159);
                              if ((v160 & 1) != (v163 & 1)) {
                                goto LABEL_276;
                              }
                              unint64_t v155 = v162;
                              char v164 = v160;
                              uint64_t v152 = v161;
                              if ((v164 & 1) == 0) {
                                goto LABEL_175;
                              }
                              goto LABEL_172;
                            }
                            if (v153)
                            {
                              uint64_t v101 = v223;
                              if ((v154 & 1) == 0) {
                                goto LABEL_175;
                              }
LABEL_172:
                              v165 = (uint64_t *)(*(void *)(v101 + 56) + 16 * v155);
                              uint64_t *v165 = v24;
                              v165[1] = v100;
                              goto LABEL_177;
                            }
                            char v220 = v154;
                            uint64_t v222 = v150;
                            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
                            uint64_t v189 = static _DictionaryStorage.copy(original:)();
                            uint64_t v101 = v189;
                            if (!*(void *)(v223 + 16)) {
                              goto LABEL_252;
                            }
                            uint64_t result = (char *)(v189 + 64);
                            uint64_t v190 = v223 + 64;
                            unint64_t v191 = (unint64_t)((1 << *(unsigned char *)(v101 + 32)) + 63) >> 6;
                            if (v101 != v223 || (unint64_t)result >= v190 + 8 * v191) {
                              uint64_t result = (char *)memmove(result, (const void *)(v223 + 64), 8 * v191);
                            }
                            int64_t v192 = 0;
                            *(void *)(v101 + 16) = *(void *)(v223 + 16);
                            uint64_t v193 = 1 << *(unsigned char *)(v223 + 32);
                            if (v193 < 64) {
                              uint64_t v194 = ~(-1 << v193);
                            }
                            else {
                              uint64_t v194 = -1;
                            }
                            unint64_t v195 = v194 & *(void *)(v223 + 64);
                            int64_t v196 = (unint64_t)(v193 + 63) >> 6;
                            while (1)
                            {
                              if (v195)
                              {
                                unint64_t v197 = __clz(__rbit64(v195));
                                v195 &= v195 - 1;
                                unint64_t v198 = v197 | (v192 << 6);
                              }
                              else
                              {
                                BOOL v58 = __OFADD__(v192++, 1);
                                if (v58) {
                                  goto LABEL_275;
                                }
                                if (v192 >= v196) {
                                  goto LABEL_252;
                                }
                                unint64_t v205 = *(void *)(v190 + 8 * v192);
                                if (!v205)
                                {
                                  int64_t v206 = v192 + 1;
                                  if (v192 + 1 >= v196) {
                                    goto LABEL_252;
                                  }
                                  unint64_t v205 = *(void *)(v190 + 8 * v206);
                                  if (!v205)
                                  {
                                    int64_t v206 = v192 + 2;
                                    if (v192 + 2 >= v196) {
                                      goto LABEL_252;
                                    }
                                    unint64_t v205 = *(void *)(v190 + 8 * v206);
                                    if (!v205)
                                    {
                                      int64_t v206 = v192 + 3;
                                      if (v192 + 3 >= v196) {
                                        goto LABEL_252;
                                      }
                                      unint64_t v205 = *(void *)(v190 + 8 * v206);
                                      if (!v205)
                                      {
                                        int64_t v206 = v192 + 4;
                                        if (v192 + 4 >= v196) {
                                          goto LABEL_252;
                                        }
                                        unint64_t v205 = *(void *)(v190 + 8 * v206);
                                        if (!v205)
                                        {
                                          int64_t v206 = v192 + 5;
                                          if (v192 + 5 >= v196) {
                                            goto LABEL_252;
                                          }
                                          unint64_t v205 = *(void *)(v190 + 8 * v206);
                                          if (!v205)
                                          {
                                            int64_t v206 = v192 + 6;
                                            if (v192 + 6 >= v196) {
                                              goto LABEL_252;
                                            }
                                            unint64_t v205 = *(void *)(v190 + 8 * v206);
                                            if (!v205)
                                            {
                                              int64_t v206 = v192 + 7;
                                              if (v192 + 7 >= v196) {
                                                goto LABEL_252;
                                              }
                                              unint64_t v205 = *(void *)(v190 + 8 * v206);
                                              if (!v205)
                                              {
                                                int64_t v206 = v192 + 8;
                                                if (v192 + 8 >= v196) {
                                                  goto LABEL_252;
                                                }
                                                unint64_t v205 = *(void *)(v190 + 8 * v206);
                                                if (!v205)
                                                {
                                                  while (1)
                                                  {
                                                    int64_t v192 = v206 + 1;
                                                    if (__OFADD__(v206, 1)) {
                                                      goto LABEL_278;
                                                    }
                                                    if (v192 >= v196) {
                                                      break;
                                                    }
                                                    unint64_t v205 = *(void *)(v190 + 8 * v192);
                                                    ++v206;
                                                    if (v205) {
                                                      goto LABEL_247;
                                                    }
                                                  }
LABEL_252:
                                                  swift_bridgeObjectRelease();
                                                  uint64_t v150 = v222;
                                                  if (v220) {
                                                    goto LABEL_172;
                                                  }
LABEL_175:
                                                  *(void *)(v101 + 8 * (v155 >> 6) + 64) |= 1 << v155;
                                                  v166 = (uint64_t *)(*(void *)(v101 + 48) + 16 * v155);
                                                  uint64_t *v166 = v150;
                                                  v166[1] = v152;
                                                  v167 = (uint64_t *)(*(void *)(v101 + 56) + 16 * v155);
                                                  uint64_t *v167 = v24;
                                                  v167[1] = v100;
                                                  uint64_t v168 = *(void *)(v101 + 16);
                                                  BOOL v58 = __OFADD__(v168, 1);
                                                  uint64_t v169 = v168 + 1;
                                                  if (v58) {
                                                    goto LABEL_271;
                                                  }
                                                  *(void *)(v101 + 16) = v169;
                                                  swift_bridgeObjectRetain();
LABEL_177:
                                                  uint64_t v0 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
                                                  swift_bridgeObjectRelease();
                                                  swift_bridgeObjectRelease();
LABEL_167:
                                                  unint64_t v4 = v213 + 1;
                                                  uint64_t v223 = v101;
                                                  uint64_t v2 = v215;
                                                  goto LABEL_4;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  int64_t v192 = v206;
                                }
LABEL_247:
                                unint64_t v195 = (v205 - 1) & v205;
                                unint64_t v198 = __clz(__rbit64(v205)) + (v192 << 6);
                              }
                              uint64_t v199 = 16 * v198;
                              v200 = (uint64_t *)(*(void *)(v223 + 48) + v199);
                              uint64_t v202 = *v200;
                              uint64_t v201 = v200[1];
                              long long v203 = *(_OWORD *)(*(void *)(v223 + 56) + v199);
                              v204 = (void *)(*(void *)(v101 + 48) + v199);
                              void *v204 = v202;
                              v204[1] = v201;
                              *(_OWORD *)(*(void *)(v101 + 56) + v199) = v203;
                              uint64_t result = (char *)swift_bridgeObjectRetain();
                            }
                          }
                          goto LABEL_4;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          int64_t v174 = v188;
        }
LABEL_209:
        unint64_t v177 = (v187 - 1) & v187;
        unint64_t v180 = __clz(__rbit64(v187)) + (v174 << 6);
      }
      uint64_t v181 = 16 * v180;
      uint64_t v182 = (uint64_t *)(v2[6] + v181);
      uint64_t v184 = *v182;
      uint64_t v183 = v182[1];
      long long v185 = *(_OWORD *)(v2[7] + v181);
      v186 = (void *)(*(void *)(v171 + 48) + v181);
      void *v186 = v184;
      v186[1] = v183;
      *(_OWORD *)(*(void *)(v171 + 56) + v181) = v185;
      uint64_t result = (char *)swift_bridgeObjectRetain();
    }
  }
  if (swift_conformsToProtocol2()) {
    uint64_t v25 = v17;
  }
  else {
    uint64_t v25 = 0;
  }
  unint64_t v4 = v16 + 1;
  if (!v25) {
    goto LABEL_4;
  }
  unint64_t v213 = v16;
  uint64_t v26 = static AttributeScope.scopeDescription.getter(v25);
  uint64_t v217 = v27;
  swift_bridgeObjectRetain();
  char v28 = swift_isUniquelyReferenced_nonNull_native();
  v231 = v2;
  uint64_t v29 = -1 << *((unsigned char *)v26 + 32);
  uint64_t v30 = ~v29;
  uint64_t v31 = -v29;
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  else {
    uint64_t v32 = -1;
  }
  uint64_t v33 = v32 & v26[8];
  *(void *)&long long v225 = v26;
  *((void *)&v225 + 1) = v26 + 8;
  uint64_t v226 = v30;
  uint64_t v227 = 0;
  uint64_t v228 = v33;
  v229 = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B);
  uint64_t v230 = 0;
  uint64_t v34 = swift_bridgeObjectRetain();
  uint64_t v35 = specialized LazyMapSequence.Iterator.next()(v34);
  if (v36)
  {
    uint64_t v39 = v35;
    uint64_t v40 = v36;
    uint64_t v41 = v37;
    uint64_t v42 = v38;
    while (1)
    {
      unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
      uint64_t v51 = v2[2];
      BOOL v52 = (v49 & 1) == 0;
      uint64_t v43 = v51 + v52;
      if (__OFADD__(v51, v52)) {
        goto LABEL_257;
      }
      char v53 = v49;
      if (v2[3] >= v43)
      {
        if (v28)
        {
          if (v49) {
            goto LABEL_42;
          }
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
          uint64_t v60 = static _DictionaryStorage.copy(original:)();
          v214 = (void *)v60;
          if (v2[2])
          {
            uint64_t v61 = v60;
            uint64_t v62 = (void *)(v60 + 64);
            unint64_t v63 = (unint64_t)((1 << *(unsigned char *)(v61 + 32)) + 63) >> 6;
            if ((void *)v61 != v2 || v62 >= &v2[v63 + 8]) {
              memmove(v62, v2 + 8, 8 * v63);
            }
            v208 = v2 + 8;
            int64_t v64 = 0;
            v214[2] = v2[2];
            uint64_t v65 = 1 << *((unsigned char *)v2 + 32);
            if (v65 < 64) {
              uint64_t v66 = ~(-1 << v65);
            }
            else {
              uint64_t v66 = -1;
            }
            unint64_t v67 = v66 & v2[8];
            int64_t v210 = (unint64_t)(v65 + 63) >> 6;
            while (1)
            {
              if (v67)
              {
                unint64_t v68 = __clz(__rbit64(v67));
                v67 &= v67 - 1;
                unint64_t v69 = v68 | (v64 << 6);
              }
              else
              {
                BOOL v58 = __OFADD__(v64++, 1);
                if (v58) {
                  goto LABEL_268;
                }
                if (v64 >= v210) {
                  break;
                }
                unint64_t v76 = v208[v64];
                if (!v76)
                {
                  int64_t v77 = v64 + 1;
                  if (v64 + 1 >= v210) {
                    break;
                  }
                  unint64_t v76 = v208[v77];
                  if (!v76)
                  {
                    int64_t v77 = v64 + 2;
                    if (v64 + 2 >= v210) {
                      break;
                    }
                    unint64_t v76 = v208[v77];
                    if (!v76)
                    {
                      int64_t v77 = v64 + 3;
                      if (v64 + 3 >= v210) {
                        break;
                      }
                      unint64_t v76 = v208[v77];
                      if (!v76)
                      {
                        int64_t v77 = v64 + 4;
                        if (v64 + 4 >= v210) {
                          break;
                        }
                        unint64_t v76 = v208[v77];
                        if (!v76)
                        {
                          int64_t v77 = v64 + 5;
                          if (v64 + 5 >= v210) {
                            break;
                          }
                          unint64_t v76 = v208[v77];
                          if (!v76)
                          {
                            while (1)
                            {
                              int64_t v64 = v77 + 1;
                              if (__OFADD__(v77, 1)) {
                                break;
                              }
                              if (v64 >= v210) {
                                goto LABEL_83;
                              }
                              unint64_t v76 = v208[v64];
                              ++v77;
                              if (v76) {
                                goto LABEL_78;
                              }
                            }
LABEL_273:
                            __break(1u);
                            goto LABEL_274;
                          }
                        }
                      }
                    }
                  }
                  int64_t v64 = v77;
                }
LABEL_78:
                unint64_t v67 = (v76 - 1) & v76;
                unint64_t v69 = __clz(__rbit64(v76)) + (v64 << 6);
              }
              uint64_t v70 = 16 * v69;
              unint64_t v71 = (uint64_t *)(v2[6] + v70);
              uint64_t v73 = *v71;
              uint64_t v72 = v71[1];
              long long v74 = *(_OWORD *)(v2[7] + v70);
              unint64_t v75 = (void *)(v214[6] + v70);
              *unint64_t v75 = v73;
              v75[1] = v72;
              *(_OWORD *)(v214[7] + v70) = v74;
              swift_bridgeObjectRetain();
            }
          }
LABEL_83:
          uint64_t v43 = swift_release();
          uint64_t v2 = v214;
          v231 = v214;
          if (v53)
          {
LABEL_42:
            uint64_t v43 = swift_bridgeObjectRelease();
            uint64_t v44 = (void *)(v2[7] + 16 * v50);
            *uint64_t v44 = v41;
            v44[1] = v42;
            goto LABEL_43;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, v28 & 1);
        uint64_t v2 = v231;
        uint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
        if ((v53 & 1) != (v54 & 1)) {
          goto LABEL_276;
        }
        unint64_t v50 = v43;
        if (v53) {
          goto LABEL_42;
        }
      }
      v2[(v50 >> 6) + 8] |= 1 << v50;
      unint64_t v55 = (uint64_t *)(v2[6] + 16 * v50);
      *unint64_t v55 = v39;
      v55[1] = v40;
      uint64_t v56 = (void *)(v2[7] + 16 * v50);
      *uint64_t v56 = v41;
      v56[1] = v42;
      uint64_t v57 = v2[2];
      BOOL v58 = __OFADD__(v57, 1);
      uint64_t v59 = v57 + 1;
      if (v58) {
        goto LABEL_259;
      }
      v2[2] = v59;
LABEL_43:
      uint64_t v39 = specialized LazyMapSequence.Iterator.next()(v43);
      uint64_t v40 = v45;
      uint64_t v41 = v46;
      uint64_t v42 = v47;
      char v28 = 1;
      uint64_t v48 = v2;
      if (!v45) {
        goto LABEL_118;
      }
    }
  }
  uint64_t v48 = v2;
LABEL_118:
  v215 = v48;
  v211 = v3;
  swift_bridgeObjectRelease();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v101 = v223;
  char v102 = swift_isUniquelyReferenced_nonNull_native();
  v231 = (void *)v223;
  uint64_t v103 = -1 << *(unsigned char *)(v217 + 32);
  uint64_t v104 = ~v103;
  uint64_t v105 = -v103;
  if (v105 < 64) {
    uint64_t v106 = ~(-1 << v105);
  }
  else {
    uint64_t v106 = -1;
  }
  uint64_t v107 = v106 & *(void *)(v217 + 64);
  *(void *)&long long v225 = v217;
  *((void *)&v225 + 1) = v217 + 64;
  uint64_t v226 = v104;
  uint64_t v227 = 0;
  uint64_t v228 = v107;
  v229 = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B);
  uint64_t v230 = 0;
  uint64_t v108 = swift_bridgeObjectRetain();
  uint64_t v109 = specialized LazyMapSequence.Iterator.next()(v108);
  if (!v110)
  {
LABEL_166:
    swift_bridgeObjectRelease();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v0 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
    uint64_t v3 = v211;
    goto LABEL_167;
  }
  uint64_t v113 = v109;
  uint64_t v114 = v110;
  uint64_t v115 = v111;
  uint64_t v116 = v112;
  uint64_t v117 = v223;
  while (1)
  {
    unint64_t v124 = specialized __RawDictionaryStorage.find<A>(_:)(v113, v114);
    uint64_t v125 = *(void *)(v117 + 16);
    BOOL v126 = (v123 & 1) == 0;
    uint64_t v118 = v125 + v126;
    if (__OFADD__(v125, v126)) {
      goto LABEL_258;
    }
    uint64_t v101 = v117;
    char v127 = v123;
    if (*(void *)(v117 + 24) >= v118) {
      break;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v118, v102 & 1);
    uint64_t v101 = (uint64_t)v231;
    uint64_t v118 = specialized __RawDictionaryStorage.find<A>(_:)(v113, v114);
    if ((v127 & 1) != (v128 & 1)) {
      goto LABEL_276;
    }
    unint64_t v124 = v118;
    if (v127)
    {
LABEL_123:
      uint64_t v118 = swift_bridgeObjectRelease();
      uint64_t v119 = (void *)(*(void *)(v101 + 56) + 16 * v124);
      *uint64_t v119 = v115;
      v119[1] = v116;
      goto LABEL_124;
    }
LABEL_132:
    *(void *)(v101 + 8 * (v124 >> 6) + 64) |= 1 << v124;
    char v129 = (uint64_t *)(*(void *)(v101 + 48) + 16 * v124);
    *char v129 = v113;
    v129[1] = v114;
    char v130 = (void *)(*(void *)(v101 + 56) + 16 * v124);
    void *v130 = v115;
    v130[1] = v116;
    uint64_t v131 = *(void *)(v101 + 16);
    BOOL v58 = __OFADD__(v131, 1);
    uint64_t v132 = v131 + 1;
    if (v58) {
      goto LABEL_260;
    }
    *(void *)(v101 + 16) = v132;
LABEL_124:
    uint64_t v113 = specialized LazyMapSequence.Iterator.next()(v118);
    uint64_t v114 = v120;
    uint64_t v115 = v121;
    uint64_t v116 = v122;
    char v102 = 1;
    uint64_t v117 = v101;
    if (!v120) {
      goto LABEL_166;
    }
  }
  if (v102)
  {
    if (v123) {
      goto LABEL_123;
    }
    goto LABEL_132;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
  uint64_t v133 = static _DictionaryStorage.copy(original:)();
  uint64_t v101 = v133;
  if (!*(void *)(v117 + 16))
  {
LABEL_164:
    uint64_t v118 = swift_release();
    v231 = (void *)v101;
    if (v127) {
      goto LABEL_123;
    }
    goto LABEL_132;
  }
  v134 = (void *)(v133 + 64);
  unint64_t v135 = (unint64_t)((1 << *(unsigned char *)(v101 + 32)) + 63) >> 6;
  if (v101 != v117 || (unint64_t)v134 >= v117 + 64 + 8 * v135) {
    memmove(v134, (const void *)(v117 + 64), 8 * v135);
  }
  uint64_t v209 = v117 + 64;
  int64_t v136 = 0;
  *(void *)(v101 + 16) = *(void *)(v117 + 16);
  uint64_t v137 = 1 << *(unsigned char *)(v117 + 32);
  if (v137 < 64) {
    uint64_t v138 = ~(-1 << v137);
  }
  else {
    uint64_t v138 = -1;
  }
  unint64_t v139 = v138 & *(void *)(v117 + 64);
  int64_t v224 = (unint64_t)(v137 + 63) >> 6;
  while (2)
  {
    if (v139)
    {
      unint64_t v140 = __clz(__rbit64(v139));
      v139 &= v139 - 1;
      unint64_t v141 = v140 | (v136 << 6);
LABEL_143:
      uint64_t v142 = 16 * v141;
      uint64_t v143 = (uint64_t *)(*(void *)(v117 + 48) + v142);
      uint64_t v145 = *v143;
      uint64_t v144 = v143[1];
      long long v146 = *(_OWORD *)(*(void *)(v117 + 56) + v142);
      int64_t v147 = (void *)(*(void *)(v101 + 48) + v142);
      void *v147 = v145;
      v147[1] = v144;
      *(_OWORD *)(*(void *)(v101 + 56) + v142) = v146;
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  BOOL v58 = __OFADD__(v136++, 1);
  if (v58) {
    goto LABEL_269;
  }
  if (v136 >= v224) {
    goto LABEL_164;
  }
  unint64_t v148 = *(void *)(v209 + 8 * v136);
  if (v148)
  {
LABEL_159:
    unint64_t v139 = (v148 - 1) & v148;
    unint64_t v141 = __clz(__rbit64(v148)) + (v136 << 6);
    goto LABEL_143;
  }
  int64_t v149 = v136 + 1;
  if (v136 + 1 >= v224) {
    goto LABEL_164;
  }
  unint64_t v148 = *(void *)(v209 + 8 * v149);
  if (v148) {
    goto LABEL_158;
  }
  int64_t v149 = v136 + 2;
  if (v136 + 2 >= v224) {
    goto LABEL_164;
  }
  unint64_t v148 = *(void *)(v209 + 8 * v149);
  if (v148) {
    goto LABEL_158;
  }
  int64_t v149 = v136 + 3;
  if (v136 + 3 >= v224) {
    goto LABEL_164;
  }
  unint64_t v148 = *(void *)(v209 + 8 * v149);
  if (v148) {
    goto LABEL_158;
  }
  int64_t v149 = v136 + 4;
  if (v136 + 4 >= v224) {
    goto LABEL_164;
  }
  unint64_t v148 = *(void *)(v209 + 8 * v149);
  if (v148) {
    goto LABEL_158;
  }
  int64_t v149 = v136 + 5;
  if (v136 + 5 >= v224) {
    goto LABEL_164;
  }
  unint64_t v148 = *(void *)(v209 + 8 * v149);
  if (v148)
  {
LABEL_158:
    int64_t v136 = v149;
    goto LABEL_159;
  }
  while (1)
  {
    int64_t v136 = v149 + 1;
    if (__OFADD__(v149, 1)) {
      break;
    }
    if (v136 >= v224) {
      goto LABEL_164;
    }
    unint64_t v148 = *(void *)(v209 + 8 * v136);
    ++v149;
    if (v148) {
      goto LABEL_159;
    }
  }
LABEL_274:
  __break(1u);
LABEL_275:
  __break(1u);
LABEL_276:
  uint64_t result = (char *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_277:
  __break(1u);
LABEL_278:
  __break(1u);
  return result;
}

uint64_t static AttributeScopes.FoundationAttributes.LinkAttribute.name.getter()
{
  return 0x6B6E694C534ELL;
}

uint64_t static AttributeScopes.FoundationAttributes.LinkAttribute.name.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t (*static AttributeScopes.FoundationAttributes.LinkAttribute.name.modify(void *a1))()
{
  *a1 = 0x6B6E694C534ELL;
  a1[1] = 0xE600000000000000;
  return destroy for PropertyListEncoder._Options;
}

uint64_t static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.markdownName.getter()
{
  return 0x746E657265666572;
}

uint64_t static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name);
}

unint64_t static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.markdownName.getter()
{
  return 0xD000000000000010;
}

uint64_t static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name);
}

unint64_t static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.markdownName.getter()
{
  return 0xD000000000000011;
}

uint64_t static AttributeScopes.FoundationAttributes.MorphologyAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.MorphologyAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.MorphologyAttribute.markdownName.getter()
{
  return 0x6F6C6F6870726F6DLL;
}

uint64_t static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.markdownName.getter()
{
  return 0x7463656C666E69;
}

uint64_t static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.name);
}

unint64_t static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.markdownName.getter()
{
  return 0xD000000000000019;
}

uint64_t AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.init(from:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v1)
  {
    __swift_project_boxed_opaque_existential_1(v5, v5[3]);
    char v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    if ((v3 & 1) == 0)
    {
      type metadata accessor for DecodingError();
      swift_allocError();
      static DecodingError.dataCorruptedError(in:debugDescription:)();
      swift_willThrow();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.encode(to:)()
{
  return Bool.encode(to:)();
}

uint64_t static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.== infix(_:_:)()
{
  return 1;
}

void AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.hash(into:)()
{
}

Swift::Int AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value(void *a1)
{
  return AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value()
{
  return Bool.encode(to:)();
}

uint64_t static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.markdownName.getter()
{
  return 0x754E74616D726F66;
}

uint64_t static AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute.name.getter()
{
  return 0x6175676E614C534ELL;
}

unint64_t static AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.name.getter()
{
  return 0xD000000000000018;
}

uint64_t AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  char v7 = 7;
  if (v5 < 7) {
    char v7 = v5;
  }
  *a2 = v7;
  return result;
}

uint64_t AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component.rawValue.getter()
{
  uint64_t result = 0x6D614E6E65766967;
  switch(*v0)
  {
    case 1:
      uint64_t v2 = 0x796C696D6166;
      goto LABEL_4;
    case 2:
      uint64_t v2 = 0x656C6464696DLL;
LABEL_4:
      uint64_t result = v2 & 0xFFFFFFFFFFFFLL | 0x614E000000000000;
      break;
    case 3:
      uint64_t result = 0x66657250656D616ELL;
      break;
    case 4:
      uint64_t result = 0x66667553656D616ELL;
      break;
    case 5:
      uint64_t result = 0x656D616E6B63696ELL;
      break;
    case 6:
      uint64_t result = 0x6574696D696C6564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE900000000000065;
  uint64_t v3 = 0x6D614E6E65766967;
  switch(*v1)
  {
    case 1:
      uint64_t v3 = 0x614E796C696D6166;
      unint64_t v2 = 0xEA0000000000656DLL;
      goto LABEL_3;
    case 2:
      uint64_t v4 = 0x614E656C6464696DLL;
      uint64_t v5 = 25965;
      goto LABEL_8;
    case 3:
      uint64_t v4 = 0x66657250656D616ELL;
      goto LABEL_7;
    case 4:
      uint64_t v4 = 0x66667553656D616ELL;
LABEL_7:
      uint64_t v5 = 30825;
LABEL_8:
      *a1 = v4;
      a1[1] = v5 & 0xFFFFFFFFFFFFLL | 0xEA00000000000000;
      break;
    case 5:
      *a1 = 0x656D616E6B63696ELL;
      a1[1] = 0xE800000000000000;
      break;
    case 6:
      *a1 = 0x6574696D696C6564;
      a1[1] = 0xE900000000000072;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t static AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.name.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol.init(rawValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 5;
  if (result < 5) {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

uint64_t AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol.rawValue.getter()
{
  return *v0;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t static AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.name.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.rawValue.getter()
{
  return qword_18220EAB8[*v0];
}

unint64_t AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v29, v29[3]);
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v7 = v6;
    uint64_t v28 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributeScopes.FoundationAttributes.DateFieldAttribute.Field>);
    size_t v8 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v30 = (void *)v7;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != 888; i += 24)
    {
      uint64_t v10 = *(void *)((char *)&outlined read-only object #0 of AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)
                      + i
                      + 32);
      uint64_t v11 = *(void *)((char *)&outlined read-only object #0 of AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)
                      + i
                      + 40);
      char v12 = *((unsigned char *)&outlined read-only object #0 of AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)
            + i
            + 48);
      swift_bridgeObjectRetain();
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
      if (v14)
      {
        __break(1u);
LABEL_12:
        __break(1u);
        return result;
      }
      *(void *)((char *)v8 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      unint64_t v15 = (uint64_t *)(v8[6] + 16 * result);
      *unint64_t v15 = v10;
      v15[1] = v11;
      *(unsigned char *)(v8[7] + result) = v12;
      uint64_t v16 = v8[2];
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17) {
        goto LABEL_12;
      }
      v8[2] = v18;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, AttributeScopes.FoundationAttributes.DateFieldAttribute.Field));
    swift_arrayDestroy();
    int v19 = v30;
    if (v8[2])
    {
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v28, (uint64_t)v30);
      if (v21)
      {
        char v22 = *(unsigned char *)(v8[7] + v20);
        swift_bridgeObjectRelease_n();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
        *a2 = v22;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v23 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v25 = v24;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Decoder.codingPath.getter();
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = v28;
    v26._object = v19;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 11838;
    v27._object = (void *)0xE200000000000000;
    String.append(_:)(v27);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v23 - 8) + 104))(v25, *MEMORY[0x1E4FBBA78], v23);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.encode(to:)(void *a1)
{
  char v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  char v6 = v2;
  AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.rawValue.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

unint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field(void *a1)
{
  char v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  char v6 = v2;
  AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.rawValue.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

unint64_t static AttributeScopes.FoundationAttributes.DateFieldAttribute.name.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name);
}

unint64_t static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.markdownName.getter()
{
  return 0xD000000000000015;
}

uint64_t static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.decodeMarkdown(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t result = dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(&v8, v5, v6, 512, 0, 0, 0, 0);
    swift_bridgeObjectRelease();
    *a2 = v8;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return result;
}

uint64_t static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.objectiveCValue(for:)()
{
  uint64_t v0 = swift_retain();
  return specialized NSAttributedString.init<A>(_:including:)(v0);
}

uint64_t static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.value(for:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  self;
  uint64_t v5 = swift_dynamicCastObjCClass();
  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v10 = objc_allocWithZone((Class)NSError);
    uint64_t v11 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v12 = objc_msgSend(v10, sel_initWithDomain_code_userInfo_, v11, 4866, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v13 = objc_msgSend(v12, sel_domain);
    id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v16 = v15;

    if (v14 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v16 != v17)
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v19) {
        return swift_willThrow();
      }
      __break(1u);
    }
    swift_bridgeObjectRelease_n();
    return swift_willThrow();
  }
  unint64_t v6 = (void *)v5;
  id v7 = a1;
  uint64_t v8 = specialized static AttributeScope.scopeDescription.getter();
  swift_bridgeObjectRelease();
  uint64_t result = AttributedString.init(_:attributeTable:options:)(v6, (uint64_t)v8, 0, &v20);
  if (!v2) {
    *a2 = v20;
  }
  return result;
}

uint64_t protocol witness for static MarkdownDecodableAttributedStringKey.decodeMarkdown(from:) in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.decodeMarkdown(from:)(a1, a2);
}

uint64_t protocol witness for static ObjectiveCConvertibleAttributedStringKey.objectiveCValue(for:) in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute()
{
  uint64_t v0 = swift_retain();
  return specialized NSAttributedString.init<A>(_:including:)(v0);
}

uint64_t protocol witness for static ObjectiveCConvertibleAttributedStringKey.value(for:) in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.value(for:)(a1, a2);
}

uint64_t static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name);
}

id static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.objectiveCValue(for:)(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInteger_, a1);
}

id static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.value(for:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedIntegerValue);
}

id protocol witness for static ObjectiveCConvertibleAttributedStringKey.objectiveCValue(for:) in conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute(void *a1)
{
  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInteger_, *a1);
}

id protocol witness for static ObjectiveCConvertibleAttributedStringKey.value(for:) in conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(a1, sel_unsignedIntegerValue);
  *a2 = result;
  return result;
}

uint64_t static AttributeScopes.FoundationAttributes.PresentationIntentAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.PresentationIntentAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name.getter()
{
  return static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(&one-time initialization token for name, &static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name);
}

uint64_t static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name.getter(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

unint64_t static AttributeScopes.FoundationAttributes.AlternateDescriptionAttribute.name.getter()
{
  return 0xD000000000000016;
}

uint64_t static AttributeScopes.FoundationAttributes.ImageURLAttribute.name.getter()
{
  return 0x556567616D49534ELL;
}

unint64_t static AttributeScopes.FoundationAttributes.ReplacementIndexAttribute.name.getter()
{
  return 0xD000000000000012;
}

unint64_t static AttributeScopes.FoundationAttributes.MeasurementAttribute.name.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!result) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.rawValue.getter()
{
  return *v0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t static AttributeScopes.FoundationAttributes.ByteCountAttribute.name.getter()
{
  return 0xD00000000000001DLL;
}

void AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.hash(into:)()
{
  Swift::UInt v1 = *v0;
  if ((v1 - 9) >= 3u) {
    Hasher._combine(_:)(2uLL);
  }
  else {
    Swift::UInt v1 = qword_18220EB40[(char)(v1 - 9)];
  }
  Hasher._combine(_:)(v1);
}

BOOL static AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  switch(v2)
  {
    case 11:
      return v3 == 11;
    case 10:
      return v3 == 10;
    case 9:
      return v3 == 9;
  }
  if ((v3 - 9) < 3) {
    return 0;
  }
  return v2 == v3;
}

BOOL static AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys()
{
  uint64_t result = 0x65756C6176;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x4F64656C6C657073;
      break;
    case 2:
      uint64_t result = 1953066613;
      break;
    case 3:
      uint64_t result = 0x79426C6175746361;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys>);
  uint64_t v30 = *(void *)(v3 - 8);
  uint64_t v31 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v28 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys>);
  uint64_t v32 = *(void *)(v5 - 8);
  uint64_t v33 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v29 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys>);
  uint64_t v26 = *(void *)(v7 - 8);
  uint64_t v27 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys>);
  uint64_t v25 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  id v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys>);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v34 = v13;
  uint64_t v35 = v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v17 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v17)
  {
    case 11:
      char v40 = 3;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys();
      char v19 = v28;
      uint64_t v18 = v34;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v31);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v16, v18);
    case 10:
      char v37 = 1;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys();
      uint64_t v21 = v34;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v27);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v16, v21);
    case 9:
      char v36 = 0;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys();
      uint64_t v18 = v34;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v16, v18);
    default:
      char v39 = 2;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys();
      char v22 = v29;
      uint64_t v23 = v34;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v38 = v17;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit();
      uint64_t v24 = v33;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v24);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v16, v23);
  }
}

Swift::Int AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 - 9) >= 3u) {
    Hasher._combine(_:)(2uLL);
  }
  else {
    Swift::UInt v1 = qword_18220EB40[(char)(v1 - 9)];
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v40 = v3;
  uint64_t v41 = v4;
  MEMORY[0x1F4188790](v3);
  uint64_t v46 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys>);
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v44 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v45 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys>);
  uint64_t v38 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys>);
  uint64_t v39 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  id v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1[3];
  uint64_t v48 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys();
  uint64_t v18 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18) {
    goto LABEL_14;
  }
  char v19 = v12;
  uint64_t v36 = v10;
  uint64_t v37 = 0;
  uint64_t v20 = v45;
  uint64_t v21 = v46;
  uint64_t v49 = v14;
  char v22 = v47;
  uint64_t v23 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v23 + 16) != 1)
  {
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v28 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v28 = &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x1E4FBBA70], v26);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v13);
LABEL_14:
    uint64_t v34 = (uint64_t)v48;
    return __swift_destroy_boxed_opaque_existential_1(v34);
  }
  switch(*(unsigned char *)(v23 + 32))
  {
    case 1:
      char v51 = 1;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys();
      uint64_t v29 = v37;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v29) {
        goto LABEL_13;
      }
      (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v42);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v13);
      char v25 = 10;
      goto LABEL_17;
    case 2:
      char v53 = 2;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys();
      uint64_t v30 = v20;
      uint64_t v31 = v37;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v31) {
        goto LABEL_13;
      }
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit();
      uint64_t v32 = v44;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v32);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v13);
      char v25 = v52;
      goto LABEL_17;
    case 3:
      char v54 = 3;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys();
      uint64_t v33 = v37;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v33) {
        goto LABEL_13;
      }
      (*(void (**)(char *, uint64_t))(v41 + 8))(v21, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v13);
      char v25 = 11;
      goto LABEL_17;
    default:
      char v50 = 0;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys();
      uint64_t v24 = v37;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v24)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v13);
        goto LABEL_14;
      }
      (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v13);
      char v25 = 9;
LABEL_17:
      uint64_t v34 = (uint64_t)v48;
      *char v22 = v25;
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1(v34);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component(void *a1)
{
  return AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 - 9) >= 3u) {
    Hasher._combine(_:)(2uLL);
  }
  else {
    Swift::UInt v1 = qword_18220EB40[(char)(v1 - 9)];
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component()
{
  Swift::UInt v1 = *v0;
  if ((v1 - 9) >= 3u) {
    Hasher._combine(_:)(2uLL);
  }
  else {
    Swift::UInt v1 = qword_18220EB40[(char)(v1 - 9)];
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 - 9) >= 3u) {
    Hasher._combine(_:)(2uLL);
  }
  else {
    Swift::UInt v1 = qword_18220EB40[(char)(v1 - 9)];
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 1702132066;
  switch(a1)
  {
    case 1:
      uint64_t result = 25195;
      break;
    case 2:
      uint64_t result = 25197;
      break;
    case 3:
      uint64_t result = 25191;
      break;
    case 4:
      uint64_t result = 25204;
      break;
    case 5:
      uint64_t result = 25200;
      break;
    case 6:
      uint64_t result = 25189;
      break;
    case 7:
      uint64_t result = 25210;
      break;
    case 8:
      uint64_t result = 25209;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys()
{
  return AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys>);
  uint64_t v56 = *(void *)(v4 - 8);
  uint64_t v57 = v4;
  MEMORY[0x1F4188790](v4);
  unint64_t v55 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys>);
  uint64_t v53 = *(void *)(v6 - 8);
  uint64_t v54 = v6;
  MEMORY[0x1F4188790](v6);
  char v52 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys>);
  uint64_t v50 = *(void *)(v8 - 8);
  uint64_t v51 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v49 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys>);
  uint64_t v47 = *(void *)(v10 - 8);
  uint64_t v48 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v46 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys>);
  uint64_t v44 = *(void *)(v12 - 8);
  uint64_t v45 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v43 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys>);
  uint64_t v41 = *(void *)(v14 - 8);
  uint64_t v42 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v40 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys>);
  uint64_t v38 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v37 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys>);
  uint64_t v36 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  char v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys>);
  uint64_t v35 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  char v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys>);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v58 = v23;
  uint64_t v59 = v24;
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v27)
  {
    case 1:
      char v61 = 1;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys();
      uint64_t v30 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v17);
      goto LABEL_12;
    case 2:
      char v62 = 2;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys();
      uint64_t v31 = v37;
      uint64_t v30 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v31, v39);
      goto LABEL_12;
    case 3:
      char v63 = 3;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys();
      uint64_t v32 = v40;
      uint64_t v30 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v34 = v41;
      uint64_t v33 = v42;
      goto LABEL_11;
    case 4:
      char v64 = 4;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys();
      uint64_t v32 = v43;
      uint64_t v30 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v34 = v44;
      uint64_t v33 = v45;
      goto LABEL_11;
    case 5:
      char v65 = 5;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys();
      uint64_t v32 = v46;
      uint64_t v30 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v34 = v47;
      uint64_t v33 = v48;
      goto LABEL_11;
    case 6:
      char v66 = 6;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys();
      uint64_t v32 = v49;
      uint64_t v30 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v34 = v50;
      uint64_t v33 = v51;
      goto LABEL_11;
    case 7:
      char v67 = 7;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys();
      uint64_t v32 = v52;
      uint64_t v30 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v34 = v53;
      uint64_t v33 = v54;
      goto LABEL_11;
    case 8:
      char v68 = 8;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys();
      uint64_t v32 = v55;
      uint64_t v30 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v34 = v56;
      uint64_t v33 = v57;
LABEL_11:
      (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v33);
LABEL_12:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v26, v30);
      break;
    default:
      char v60 = 0;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys();
      uint64_t v28 = v58;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v22, v20);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v26, v28);
      break;
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit(void *a1)
{
  return AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.encode(to:)(a1);
}

unint64_t static AttributeScopes.FoundationAttributes.DurationFieldAttribute.name.getter()
{
  return 0xD000000000000021;
}

unint64_t AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field.init(rawValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 8;
  if (result < 8) {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t static AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.name.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys()
{
  uint64_t result = 1953393013;
  switch(*v0)
  {
    case 1:
      uint64_t result = 7630441;
      break;
    case 2:
      uint64_t result = 0x656C62756F64;
      break;
    case 3:
      uint64_t result = 0x6C616D69636564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys>);
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v41 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys>);
  unint64_t v39 = *(void *)(v5 - 8);
  uint64_t v40 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v38 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys>);
  unint64_t v36 = *(void *)(v7 - 8);
  uint64_t v37 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v35 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys>);
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys>);
  uint64_t v45 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = v1[1];
  unint64_t v44 = *v1;
  unsigned int v15 = *((_DWORD *)v1 + 4);
  uint64_t v16 = *((unsigned __int8 *)v1 + 20);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys();
  uint64_t v17 = v13;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v16)
  {
    case 1:
      LOBYTE(v47) = 1;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys();
      uint64_t v21 = v35;
      uint64_t v22 = v46;
      uint64_t v23 = v13;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v24 = v37;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v25 = v36;
      goto LABEL_6;
    case 2:
      LOBYTE(v47) = 2;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys();
      uint64_t v21 = v38;
      uint64_t v22 = v46;
      uint64_t v23 = v13;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v24 = v40;
      KeyedEncodingContainer.encode(_:forKey:)();
      unint64_t v25 = v39;
LABEL_6:
      (*(void (**)(char *, uint64_t))(v25 + 8))(v21, v24);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v23, v22);
      break;
    case 3:
      int v26 = v44;
      unint64_t v27 = HIDWORD(v44);
      unint64_t v28 = HIWORD(v44);
      unint64_t v39 = HIDWORD(v14);
      uint64_t v40 = HIWORD(v14);
      LOBYTE(v47) = 3;
      LODWORD(v38) = HIWORD(v15);
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys();
      uint64_t v29 = v41;
      uint64_t v32 = v17;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      int v47 = v26;
      __int16 v48 = v27;
      __int16 v49 = v28;
      int v50 = v14;
      __int16 v51 = v39;
      __int16 v52 = v40;
      __int16 v53 = v15;
      __int16 v54 = (__int16)v38;
      type metadata accessor for NSDecimal(0);
      lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, type metadata accessor for NSDecimal);
      uint64_t v30 = v43;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v29, v30);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v32, v46);
      break;
    default:
      LOBYTE(v47) = 0;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys();
      uint64_t v18 = v46;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v34;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v19);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v13, v18);
      break;
  }
  return result;
}

Swift::Int AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.hashValue.getter()
{
  unint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  unsigned int v3 = *(_DWORD *)(v0 + 16);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 20);
  Hasher.init(_seed:)();
  switch(v4)
  {
    case 1:
      Swift::UInt v5 = 1;
      goto LABEL_10;
    case 2:
      Hasher._combine(_:)(2uLL);
      if ((v1 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
        unint64_t v1 = 0;
      }
      break;
    case 3:
      Hasher._combine(_:)(3uLL);
      NSDecimal.doubleValue.getter(v1, v2, v3);
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        unint64_t v1 = v6;
      }
      else {
        unint64_t v1 = 0;
      }
      break;
    default:
      Swift::UInt v5 = 0;
LABEL_10:
      Hasher._combine(_:)(v5);
      break;
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v51 = v3;
  uint64_t v52 = v4;
  MEMORY[0x1F4188790](v3);
  __int16 v54 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  uint64_t v50 = v7;
  MEMORY[0x1F4188790](v6);
  __int16 v53 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys>);
  uint64_t v47 = *(void *)(v9 - 8);
  uint64_t v48 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys>);
  uint64_t v46 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  unint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a1[3];
  uint64_t v56 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys();
  uint64_t v20 = v57;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20) {
    goto LABEL_6;
  }
  uint64_t v44 = v12;
  uint64_t v45 = v14;
  uint64_t v57 = v11;
  uint64_t v22 = v53;
  uint64_t v21 = v54;
  uint64_t v23 = v55;
  uint64_t v24 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v25 = v24;
  if (*(void *)(v24 + 16) != 1)
  {
    uint64_t v31 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v33 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v33 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v31 - 8) + 104))(v33, *MEMORY[0x1E4FBBA70], v31);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
LABEL_6:
    uint64_t v34 = (uint64_t)v56;
    return __swift_destroy_boxed_opaque_existential_1(v34);
  }
  uint64_t v26 = *(unsigned __int8 *)(v24 + 32);
  uint64_t v43 = v26;
  switch(v26)
  {
    case 1:
      LOBYTE(v58) = 1;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys();
      unint64_t v27 = v57;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v28 = v48;
      uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v30 = v47;
      goto LABEL_9;
    case 2:
      LOBYTE(v58) = 2;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys();
      uint64_t v38 = v22;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v39 = v49;
      KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v42 = v41;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v38, v39);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      uint64_t v36 = 0;
      int v37 = 0;
      uint64_t v29 = v42;
      goto LABEL_12;
    case 3:
      LOBYTE(v58) = 3;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v57 = (char *)v25;
      type metadata accessor for NSDecimal(0);
      lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, type metadata accessor for NSDecimal);
      uint64_t v40 = v51;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v21, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      int v37 = v60;
      uint64_t v36 = v59;
      uint64_t v29 = v58;
LABEL_12:
      uint64_t v34 = (uint64_t)v56;
      break;
    default:
      LOBYTE(v58) = 0;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys();
      unint64_t v27 = v45;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v28 = v44;
      uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v30 = v46;
LABEL_9:
      (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v28);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      uint64_t v34 = (uint64_t)v56;
      uint64_t v36 = 0;
      int v37 = 0;
      break;
  }
  *(void *)uint64_t v23 = v29;
  *(void *)(v23 + 8) = v36;
  *(_DWORD *)(v23 + 16) = v37;
  *(unsigned char *)(v23 + 20) = v43;
  return __swift_destroy_boxed_opaque_existential_1(v34);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value()
{
  unint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  unsigned int v3 = *(_DWORD *)(v0 + 16);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 20);
  Hasher.init(_seed:)();
  switch(v4)
  {
    case 1:
      Swift::UInt v5 = 1;
      goto LABEL_10;
    case 2:
      Hasher._combine(_:)(2uLL);
      if ((v1 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
        unint64_t v1 = 0;
      }
      break;
    case 3:
      Hasher._combine(_:)(3uLL);
      NSDecimal.doubleValue.getter(v1, v2, v3);
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        unint64_t v1 = v6;
      }
      else {
        unint64_t v1 = 0;
      }
      break;
    default:
      Swift::UInt v5 = 0;
LABEL_10:
      Hasher._combine(_:)(v5);
      break;
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value(void *a1)
{
  return AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.encode(to:)(a1);
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute()
{
  return 0xD00000000000002CLL;
}

unint64_t static AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute.name.getter()
{
  return 0xD000000000000029;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute()
{
  return 0xD000000000000029;
}

unint64_t static AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute.name.getter()
{
  return 0xD000000000000031;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute()
{
  return 0xD000000000000031;
}

unint64_t static AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute.name.getter()
{
  return 0xD000000000000028;
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute()
{
  return 0xD000000000000028;
}

id static AttributeScopes.FoundationAttributes.LinkAttribute.objectiveCValue(for:)(id *a1)
{
  return *a1;
}

void static AttributeScopes.FoundationAttributes.LinkAttribute.value(for:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  self;
  uint64_t v4 = (void *)swift_dynamicCastObjCClass();
  if (v4)
  {
    URL.init(reference:)(v4, &v22);
    uint64_t v5 = v22;
LABEL_3:
    long long v6 = v23;
    *(void *)a2 = v5;
    *(_OWORD *)(a2 + 8) = v6;
    return;
  }
  self;
  uint64_t v7 = (void *)swift_dynamicCastObjCClass();
  if (v7)
  {
    id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    unint64_t v10 = v9;
    id v11 = a1;
    URL.init(string:)((uint64_t)v8, v10, &v22);
    swift_bridgeObjectRelease();

    uint64_t v5 = v22;
    if (v22) {
      goto LABEL_3;
    }
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v12 = objc_allocWithZone((Class)NSError);
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v15 = objc_msgSend(v14, sel_domain);
  id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v18 == v19) {
    goto LABEL_12;
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_bridgeObjectRelease_n();
  }
  swift_willThrow();
}

id protocol witness for static ObjectiveCConvertibleAttributedStringKey.objectiveCValue(for:) in conformance AttributeScopes.FoundationAttributes.LinkAttribute(id *a1)
{
  return *a1;
}

void protocol witness for static ObjectiveCConvertibleAttributedStringKey.value(for:) in conformance AttributeScopes.FoundationAttributes.LinkAttribute(void *a1@<X0>, uint64_t a2@<X8>)
{
}

unint64_t static AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute.markdownName.getter()
{
  return 0xD000000000000012;
}

NSLocalizedNumberFormatRule __swiftcall AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value._bridgeToObjectiveC()()
{
  id v0 = objc_msgSend(self, sel_automatic);

  return (NSLocalizedNumberFormatRule)v0;
}

void static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
  return 1;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value()
{
  id v0 = objc_msgSend(self, sel_automatic);

  return v0;
}

void protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
  return 1;
}

uint64_t specialized NSAttributedString.init<A>(_:including:)(uint64_t a1)
{
  uint64_t v122 = specialized static AttributeScope.scopeDescription.getter();
  swift_bridgeObjectRelease();
  long long v2 = *(_OWORD *)(a1 + 32);
  v157[0] = *(_OWORD *)(a1 + 16);
  v157[1] = v2;
  long long v158 = *(_OWORD *)(a1 + 48);
  v159[0] = v157[0];
  v159[1] = v2;
  v159[2] = v158;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v159, (uint64_t)v160);
  outlined retain of Locale((uint64_t)v160);
  MEMORY[0x185302050](v157);
  id v3 = objc_allocWithZone((Class)NSMutableAttributedString);
  uint64_t v4 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v111 = objc_msgSend(v3, sel_initWithString_, v4);
  swift_unknownObjectRelease();
  long long v5 = *(_OWORD *)(a1 + 32);
  v155[0] = *(_OWORD *)(a1 + 16);
  v155[1] = v5;
  long long v156 = *(_OWORD *)(a1 + 48);
  v161[0] = v155[0];
  v161[1] = v5;
  v161[2] = v156;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v161, (uint64_t)v162);
  outlined retain of Locale((uint64_t)v162);
  uint64_t v6 = BigString.startIndex.getter();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  outlined release of Locale((uint64_t)v155);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v109 = a1;
  uint64_t v16 = *(void *)(a1 + 80);
  id v15 = *(void **)(a1 + 88);
  uint64_t v128 = v12;
  if (v13)
  {
    unint64_t v17 = *(unsigned __int8 *)(v13 + 18);
    swift_unknownObjectRetain();
  }
  else
  {
    unint64_t v17 = 0;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v113 = (_OWORD *)(v109 + 16);
  uint64_t v140 = v13;
  uint64_t v141 = v14;
  uint64_t v142 = v16;
  uint64_t v143 = v15;
  uint64_t v110 = &v144;
  uint64_t v144 = v15;
  unint64_t v145 = v17;
  uint64_t v147 = 0;
  unint64_t v148 = 0;
  uint64_t v146 = 0;
  v108[1] = MEMORY[0x1E4FBC840] + 8;
  if (!v13) {
    goto LABEL_7;
  }
LABEL_5:
  if (v18 != v16)
  {
LABEL_8:
    if (v144 == v15)
    {
      BOOL v126 = v15;
      uint64_t v127 = v18;
      uint64_t v129 = v10;
      uint64_t v130 = v8;
      uint64_t v131 = (uint64_t *)v6;
      uint64_t v118 = v19;
      unint64_t v20 = v145;
      uint64_t v21 = v146;
      if (v146)
      {
        uint64_t v22 = (void *)(v146 + 24 * ((v145 >> ((4 * *(unsigned char *)(v146 + 18) + 8) & 0x3C)) & 0xF));
        unint64_t v24 = v22[3];
        uint64_t v23 = v22[4];
        uint64_t v25 = v22[5];
        uint64_t v26 = v147 + 1;
        BOOL v27 = __OFADD__(v147, 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (!v27)
        {
          uint64_t v147 = v26;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v28 = v24;
          uint64_t v167 = v23;
          uint64_t v119 = v25;
          goto LABEL_17;
        }
      }
      else
      {
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v20, v13);
        uint64_t v30 = v29;
        uint64_t v32 = v31;
        swift_unknownObjectRelease();
        if (!__OFADD__(v147, 1))
        {
          uint64_t v119 = v32;
          uint64_t v167 = v30;
          ++v147;
          swift_unknownObjectRetain();
          unint64_t v28 = specialized Rope._Node.subscript.getter(v20, v13);
LABEL_17:
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if (!__OFADD__(v127, v28))
          {
            unint64_t v148 = v127 + v28;
            if (!v13
              || (unint64_t v34 = ((-15 << ((4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v13 + 18) | ((unint64_t)*(unsigned __int16 *)(v13 + 16) << ((4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C)),
                  uint64_t result = swift_unknownObjectRetain(),
                  v20 >= v34))
            {
LABEL_99:
              __break(1u);
              return result;
            }
            if (v21)
            {
              char v35 = (4 * *(unsigned char *)(v21 + 18) + 8) & 0x3C;
              unint64_t v36 = ((v20 >> v35) & 0xF) + 1;
              if (v36 < *(unsigned __int16 *)(v21 + 16))
              {
                unint64_t v145 = (v36 << v35) | ((-15 << v35) - 1) & v20;
LABEL_25:
                swift_unknownObjectRelease_n();
LABEL_31:
                uint64_t v45 = v113;
                long long v46 = v113[1];
                v153[0] = *v113;
                v153[1] = v46;
                long long v154 = v113[2];
                v163[0] = v153[0];
                v163[1] = v46;
                v163[2] = v154;
                outlined init with take of any PredicateExpression<Self.Output == B1>(v163, (uint64_t)v164);
                outlined retain of Locale((uint64_t)v164);
                BigString.utf8.getter();
                outlined release of Locale((uint64_t)v153);
                uint64_t v47 = BigString.UTF8View.index(_:offsetBy:)();
                uint64_t v49 = v48;
                uint64_t v51 = v50;
                uint64_t v53 = v52;
                outlined release of Locale((uint64_t)&v149);
                long long v54 = v45[1];
                v151[0] = *v45;
                v151[1] = v54;
                long long v152 = v45[2];
                v165[0] = v151[0];
                v165[1] = v54;
                v165[2] = v152;
                outlined init with take of any PredicateExpression<Self.Output == B1>(v165, (uint64_t)v166);
                outlined retain of Locale((uint64_t)v166);
                BigString.utf16.getter();
                outlined release of Locale((uint64_t)v151);
                uint64_t v114 = v47;
                uint64_t v115 = v49;
                uint64_t v116 = v53;
                uint64_t v117 = v51;
                uint64_t v55 = BigString.UTF16View.distance(from:to:)();
                outlined release of Locale((uint64_t)&v150);
                if (*(void *)(v167 + 16))
                {
                  uint64_t v112 = v55;
                  uint64_t v139 = MEMORY[0x1E4FBC868];
                  uint64_t v56 = v167 + 64;
                  uint64_t v57 = 1 << *(unsigned char *)(v167 + 32);
                  if (v57 < 64) {
                    uint64_t v58 = ~(-1 << v57);
                  }
                  else {
                    uint64_t v58 = -1;
                  }
                  unint64_t v59 = v58 & *(void *)(v167 + 64);
                  int64_t v60 = (unint64_t)(v57 + 63) >> 6;
                  char v61 = v122;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  int64_t v62 = 0;
                  uint64_t v120 = v56;
                  int64_t v121 = v60;
                  while (1)
                  {
                    while (v59)
                    {
                      unint64_t v63 = __clz(__rbit64(v59));
                      v59 &= v59 - 1;
                      unint64_t v64 = v63 | (v62 << 6);
                      if (v61[2]) {
                        goto LABEL_53;
                      }
                    }
                    BOOL v65 = __OFADD__(v62++, 1);
                    if (v65)
                    {
                      __break(1u);
LABEL_92:
                      __break(1u);
                      goto LABEL_93;
                    }
                    if (v62 >= v60) {
                      goto LABEL_78;
                    }
                    unint64_t v66 = *(void *)(v56 + 8 * v62);
                    if (!v66)
                    {
                      int64_t v67 = v62 + 1;
                      if (v62 + 1 >= v60) {
                        goto LABEL_78;
                      }
                      unint64_t v66 = *(void *)(v56 + 8 * v67);
                      if (!v66)
                      {
                        int64_t v67 = v62 + 2;
                        if (v62 + 2 >= v60) {
                          goto LABEL_78;
                        }
                        unint64_t v66 = *(void *)(v56 + 8 * v67);
                        if (!v66)
                        {
                          int64_t v67 = v62 + 3;
                          if (v62 + 3 >= v60) {
                            goto LABEL_78;
                          }
                          unint64_t v66 = *(void *)(v56 + 8 * v67);
                          if (!v66)
                          {
                            int64_t v67 = v62 + 4;
                            if (v62 + 4 >= v60)
                            {
LABEL_78:
                              uint64_t v103 = v118;
                              uint64_t v104 = v112;
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              swift_release();
                              swift_bridgeObjectRelease();
                              if (*(void *)(v139 + 16))
                              {
                                type metadata accessor for NSAttributedStringKey(0);
                                lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
                                objc_msgSend(v111, sel_setAttributes_range_, _NativeDictionary.bridged()(), v103, v104);
                                swift_unknownObjectRelease();
                                BOOL v65 = __OFADD__(v103, v104);
                                uint64_t v19 = v103 + v104;
                                if (v65) {
                                  goto LABEL_97;
                                }
                              }
                              else
                              {
                                swift_bridgeObjectRelease();
                                BOOL v65 = __OFADD__(v103, v104);
                                uint64_t v19 = v103 + v104;
                                if (v65) {
                                  goto LABEL_97;
                                }
                              }
LABEL_86:
                              uint64_t v18 = v148;
                              uint64_t v13 = v140;
                              uint64_t v6 = v114;
                              uint64_t v8 = v115;
                              uint64_t v10 = v117;
                              uint64_t v128 = v116;
                              uint64_t v16 = v142;
                              id v15 = v143;
                              if (v140) {
                                goto LABEL_5;
                              }
LABEL_7:
                              if (!v18) {
                                goto LABEL_90;
                              }
                              goto LABEL_8;
                            }
                            unint64_t v66 = *(void *)(v56 + 8 * v67);
                            if (!v66)
                            {
                              while (1)
                              {
                                int64_t v62 = v67 + 1;
                                if (__OFADD__(v67, 1)) {
                                  goto LABEL_96;
                                }
                                if (v62 >= v60) {
                                  goto LABEL_78;
                                }
                                unint64_t v66 = *(void *)(v56 + 8 * v62);
                                ++v67;
                                if (v66) {
                                  goto LABEL_52;
                                }
                              }
                            }
                          }
                        }
                      }
                      int64_t v62 = v67;
                    }
LABEL_52:
                    unint64_t v59 = (v66 - 1) & v66;
                    unint64_t v64 = __clz(__rbit64(v66)) + (v62 << 6);
                    if (v61[2])
                    {
LABEL_53:
                      uint64_t v68 = v167;
                      unint64_t v69 = (uint64_t *)(*(void *)(v167 + 48) + 16 * v64);
                      uint64_t v70 = *v69;
                      uint64_t v71 = v69[1];
                      swift_bridgeObjectRetain();
                      unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v71);
                      if (v73)
                      {
                        long long v74 = (uint64_t *)(v61[7] + 16 * v72);
                        uint64_t v76 = *v74;
                        uint64_t v75 = v74[1];
                        uint64_t v127 = v71;
                        uint64_t v128 = String._bridgeToObjectiveCImpl()();
                        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
                        BOOL v126 = v108;
                        uint64_t v129 = *(void *)(AssociatedTypeWitness - 8);
                        uint64_t v130 = AssociatedTypeWitness;
                        uint64_t v78 = *(void *)(v129 + 64);
                        double v79 = MEMORY[0x1F4188790](AssociatedTypeWitness);
                        uint64_t v131 = (void *)((char *)v108 - v80);
                        uint64_t v81 = (*(uint64_t (**)(uint64_t, uint64_t, double))(v75 + 24))(v76, v75, v79);
                        if (*(void *)(v68 + 16)
                          && (unint64_t v83 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v82), (v84 & 1) != 0))
                        {
                          outlined init with copy of AttributedString._AttributeValue(*(void *)(v167 + 56) + 72 * v83, (uint64_t)&v133);
                        }
                        else
                        {
                          uint64_t v137 = 0;
                          long long v135 = 0u;
                          long long v136 = 0u;
                          long long v133 = 0u;
                          long long v134 = 0u;
                        }
                        uint64_t v85 = v130;
                        swift_bridgeObjectRelease();
                        if (!*((void *)&v134 + 1)) {
                          goto LABEL_98;
                        }
                        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v133, (uint64_t)&v132);
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                        char v86 = v131;
                        swift_dynamicCast();
                        outlined destroy of AttributedString._AttributeValue((uint64_t)&v133);
                        uint64_t v87 = swift_conformsToProtocol2();
                        if (v87) {
                          uint64_t v88 = v87;
                        }
                        else {
                          uint64_t v88 = 0;
                        }
                        if (v87) {
                          uint64_t v89 = v76;
                        }
                        else {
                          uint64_t v89 = 0;
                        }
                        if (v89)
                        {
                          unint64_t v124 = v108;
                          double v90 = MEMORY[0x1F4188790](v87);
                          (*(void (**)(char *, uint64_t *, uint64_t, double))(v129 + 16))((char *)v108 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0), v86, v85, v90);
                          uint64_t v91 = swift_getAssociatedTypeWitness();
                          char v123 = v108;
                          uint64_t v92 = *(void *)(v91 - 8);
                          MEMORY[0x1F4188790](v91);
                          uint64_t v94 = (char *)v108 - v93;
                          swift_dynamicCast();
                          uint64_t v95 = v125;
                          uint64_t v96 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 24))(v94, v89, v88);
                          uint64_t v125 = v95;
                          if (v95)
                          {
                            (*(void (**)(char *, uint64_t))(v92 + 8))(v94, v91);
                            swift_unknownObjectRelease();
                            (*(void (**)(uint64_t *, uint64_t))(v129 + 8))(v131, v130);
                            id v105 = v122;
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_willThrow();

                            swift_bridgeObjectRelease();
                            swift_release();
                            swift_release();
                            swift_unknownObjectRelease();
                            return (uint64_t)v105;
                          }
                          uint64_t v97 = v96;
                          (*(void (**)(char *, uint64_t))(v92 + 8))(v94, v91);
                          int64_t v60 = v121;
                          uint64_t v98 = (void *)v128;
                          uint64_t v85 = v130;
                          uint64_t v99 = v131;
                        }
                        else
                        {
                          uint64_t isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
                          if (isClassOrObjCExistentialType)
                          {
                            int64_t v60 = v121;
                            if (v78 != 8) {
                              goto LABEL_92;
                            }
                            uint64_t v99 = v131;
                            uint64_t v97 = *v131;
                            swift_unknownObjectRetain();
                          }
                          else
                          {
                            double v101 = MEMORY[0x1F4188790](isClassOrObjCExistentialType);
                            char v102 = v131;
                            (*(void (**)(char *, uint64_t *, uint64_t, double))(v129 + 16))((char *)v108 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0), v131, v85, v101);
                            uint64_t v97 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
                            uint64_t v99 = v102;
                            int64_t v60 = v121;
                          }
                          uint64_t v98 = (void *)v128;
                        }
                        (*(void (**)(uint64_t *, uint64_t))(v129 + 8))(v99, v85);
                        v138[3] = swift_getObjectType();
                        v138[0] = v97;
                        specialized Dictionary.subscript.setter((uint64_t)v138, v98);
                        swift_bridgeObjectRelease();
                        uint64_t v56 = v120;
                        char v61 = v122;
                      }
                      else
                      {
                        swift_bridgeObjectRelease();
                      }
                    }
                  }
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v19 = v118 + v55;
                if (!__OFADD__(v118, v55)) {
                  goto LABEL_86;
                }
                goto LABEL_97;
              }
            }
            int v37 = *(unsigned __int8 *)(v13 + 18);
            char v38 = (4 * v37 + 8) & 0x3C;
            *(void *)&long long v133 = (v20 >> v38) & 0xF;
            if (v37)
            {
              swift_unknownObjectRetain();
              char v39 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v13 + 24, (uint64_t *)&v133, (uint64_t)v110, v13, v37);
              swift_unknownObjectRelease();
              uint64_t v40 = v126;
              if (v39) {
                goto LABEL_25;
              }
              int v42 = *(unsigned __int8 *)(v13 + 18);
            }
            else
            {
              unint64_t v41 = ((v20 >> v38) & 0xF) + 1;
              if (v41 < *(unsigned __int16 *)(v13 + 16))
              {
                unint64_t v145 = (v41 << v38) | ((-15 << v38) - 1) & v20;
                swift_unknownObjectRelease_n();
                uint64_t v146 = v13;
                goto LABEL_31;
              }
              int v42 = 0;
              uint64_t v40 = v126;
            }
            uint64_t v43 = *(unsigned __int16 *)(v13 + 16);
            char v44 = *(unsigned char *)(v13 + 18);
            swift_unknownObjectRelease_n();
            uint64_t v144 = v40;
            unint64_t v145 = ((-15 << ((4 * v44 + 8) & 0x3C)) - 1) & v42 | (unint64_t)(v43 << ((4 * v44 + 8) & 0x3C));
            uint64_t v146 = 0;
            goto LABEL_31;
          }
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          uint64_t result = outlined destroy of AttributedString._AttributeValue?((uint64_t)&v133);
          __break(1u);
          goto LABEL_99;
        }
      }
    }
    else
    {
LABEL_93:
      __break(1u);
    }
    __break(1u);
    goto LABEL_95;
  }
LABEL_90:
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  id v106 = objc_allocWithZone((Class)NSAttributedString);
  id v107 = v111;
  id v105 = objc_msgSend(v106, sel_initWithAttributedString_, v111);

  return (uint64_t)v105;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys);
  }
  return result;
}

uint64_t specialized static AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)a1;
  double v4 = *(double *)a2;
  int v5 = *(unsigned __int8 *)(a2 + 20);
  switch(*(unsigned char *)(a1 + 20))
  {
    case 1:
      BOOL v6 = v5 == 1;
      goto LABEL_4;
    case 2:
      if (v5 != 2 || v3 != v4) {
        goto LABEL_15;
      }
      uint64_t result = 1;
      break;
    case 3:
      if (v5 == 3) {
        uint64_t result = specialized static NSDecimal.== infix(_:_:)(*(unint64_t *)&v3, *(void *)(a1 + 8), *(_DWORD *)(a1 + 16), *(unint64_t *)&v4, *(void *)(a2 + 8), *(_DWORD *)(a2 + 16));
      }
      else {
LABEL_15:
      }
        uint64_t result = 0;
      break;
    default:
      BOOL v6 = v5 == 0;
LABEL_4:
      uint64_t result = v6 && *(void *)&v3 == *(void *)&v4;
      break;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LinkAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for AttributedStringKey.Value : Hashable in AttributeScopes.FoundationAttributes.ReferentConceptAttribute()
{
  return MEMORY[0x1E4FBB560];
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value);
  }
  return result;
}

uint64_t associated type witness table accessor for AttributedStringKey.Value : Hashable in AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute()
{
  return MEMORY[0x1E4FBB1B0];
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.DateFieldAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for AttributedStringKey.Value : Hashable in AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal((unint64_t *)&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, type metadata accessor for NSInlinePresentationIntent);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.PresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.PresentationIntentAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute and conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute and conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute and conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute and conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute and conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ImageURLAttribute and conformance AttributeScopes.FoundationAttributes.ImageURLAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ImageURLAttribute and conformance AttributeScopes.FoundationAttributes.ImageURLAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ImageURLAttribute and conformance AttributeScopes.FoundationAttributes.ImageURLAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ImageURLAttribute and conformance AttributeScopes.FoundationAttributes.ImageURLAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.ImageURLAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ImageURLAttribute and conformance AttributeScopes.FoundationAttributes.ImageURLAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.MeasurementAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.ByteCountAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.DurationFieldAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Range<Date> and conformance <> Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<Date> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Date> and conformance <> Range<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Date>);
    lazy protocol witness table accessor for type Date and conformance Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Date> and conformance <> Range<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value;
}

unsigned char *storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181EF8634);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component()
{
  return &type metadata for AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart()
{
  return &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
}

unsigned char *storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181EF874CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol()
{
  return &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
}

uint64_t getEnumTagSinglePayload for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *unint64_t result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181EF88E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 16;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field()
{
  return &type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field;
}

unsigned char *storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181EF89E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component()
{
  return &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
}

uint64_t getEnumTagSinglePayload for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF5)
  {
    unsigned int v2 = a2 + 11;
    if (a2 + 11 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 11;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 11;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x181EF8ACCLL);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 11;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 9) {
    unsigned int v8 = v7 - 8;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 4) {
    return v8 - 3;
  }
  else {
    return 0;
  }
}

uint64_t getEnumTag for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 9) {
    return v1 - 8;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component(unsigned char *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit;
}

unsigned char *storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181EF8C20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field()
{
  return &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute;
}

uint64_t getEnumTagSinglePayload for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 20);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 21) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 21) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 20) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

uint64_t destructiveInjectEnumTag for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value(uint64_t result, char a2)
{
  *(unsigned char *)(result + 20) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181EF8E7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys()
{
  return &unk_1ECA35EE0;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys()
{
  return &unk_1ECA35EC0;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys()
{
  return &unk_1ECA35FB0;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys()
{
  return &unk_1ECA35FD0;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys()
{
  return &unk_1ECA35F90;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys()
{
  return &unk_1ECA36010;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys()
{
  return &unk_1ECA35FF0;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys()
{
  return &unk_1ECA35F70;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys()
{
  return &unk_1ECA36050;
}

void *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys()
{
  return &unk_1ECA36030;
}

unsigned char *storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181EF9010);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181EF9104);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys;
}

ValueMetadata *type metadata accessor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys()
{
  return &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.Format);
  }
  return result;
}

uint64_t specialized AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1953393013 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7630441 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C62756F64 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C616D69636564 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702132066 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25195 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 25197 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 25191 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 25204 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 25200 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 25189 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 25210 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 25209 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t specialized AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4F64656C6C657073 && a2 == 0xEF65756C61567475 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1953066613 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x79426C6175746361 && a2 == 0xEF746E756F436574)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t outlined destroy of AttributedString._AttributeValue?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t PredicateExpressions.SequenceMaximum.evaluate(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.SequenceMaximum.evaluate(_:)(a1, a2, MEMORY[0x1E4FBB290], a3);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressions.SequenceMaximum<A>.CodingKeys()
{
  return 0x73746E656D656C65;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PredicateExpressions.SequenceMaximum<A>.CodingKeys@<X0>(void *a1@<X1>, unsigned char *a2@<X8>)
{
  return protocol witness for CodingKey.init(intValue:) in conformance PredicateExpressions.SequenceMaximum<A>.CodingKeys(a1, (uint64_t (*)(void, void, void, void))default argument 1 of _typeName(_:qualified:), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.SequenceMaximum<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.SequenceMaximum<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceMaximum<A>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.SequenceMaximum.evaluate(_:)(a1, a2, a3);
}

uint64_t PredicateExpressions.SequenceMaximum.description.getter(uint64_t a1)
{
  return PredicateExpressions.SequenceMaximum.description.getter(a1, (void *)0x80000001823B37A0);
}

uint64_t PredicateExpressions.SequenceMaximum<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.SequenceMaximum<>.encode(to:)(a1, a2, a3, a4, (void (*)(uint64_t, _OWORD *))type metadata accessor for PredicateExpressions.SequenceMaximum.CodingKeys);
}

uint64_t type metadata accessor for PredicateExpressions.SequenceMaximum.CodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t PredicateExpressions.SequenceMaximum<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return PredicateExpressions.SequenceMaximum<>.init(from:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceMaximum<A>.CodingKeys, (uint64_t (*)(void, uint64_t *, double))type metadata accessor for PredicateExpressions.SequenceMaximum);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceMaximum<A>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceMaximum<A>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, uint64_t, void, void))PredicateExpressions.SequenceMaximum<>.init(from:), a5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceMaximum<A>(void *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMaximum<>.encode(to:)(a1, a2, a3, *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.SequenceMinimum.evaluate(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.SequenceMaximum.evaluate(_:)(a1, a2, MEMORY[0x1E4FBB298], a3);
}

uint64_t PredicateExpressions.SequenceMaximum.evaluate(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void (*a3)(uint64_t, void, void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v15 = a4;
  uint64_t v16 = a3;
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  double v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v15 - v12;
  uint64_t v17 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, double))(v8 + 16))(&v17, v7, v8, v11);
  if (!v4)
  {
    v16(AssociatedTypeWitness, a2[4], a2[5]);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  }
  return result;
}

uint64_t PredicateExpressions.SequenceMaximum.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x73746E656D656C65 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressions.SequenceMaximum<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PredicateExpressions.SequenceMaximum.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PredicateExpressions.SequenceMaximum<A>.CodingKeys@<X0>(void *a1@<X1>, uint64_t (*a2)(void, void, void, void)@<X3>, unsigned char *a3@<X8>)
{
  uint64_t result = a2(a1[2], a1[3], a1[4], a1[5]);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.SequenceMinimum<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.SequenceMinimum<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceMinimum<A>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.SequenceMinimum.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_max<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t PredicateExpressions.SequenceMinimum.description.getter(uint64_t a1)
{
  return PredicateExpressions.SequenceMaximum.description.getter(a1, (void *)0x80000001823B37C0);
}

uint64_t PredicateExpressions.SequenceMaximum.description.getter(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(29);
  v3._countAndFlagsBits = 0xD00000000000001ALL;
  v3._object = a2;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t PredicateExpressions.SequenceMinimum<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.SequenceMaximum<>.encode(to:)(a1, a2, a3, a4, (void (*)(uint64_t, _OWORD *))type metadata accessor for PredicateExpressions.SequenceMinimum.CodingKeys);
}

uint64_t PredicateExpressions.SequenceMaximum<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _OWORD *))
{
  uint64_t v13 = a4;
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v12 = *(_OWORD *)(a2 + 16);
  v14[0] = v12;
  v14[1] = v6;
  a5(255, v14);
  swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v12 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t type metadata accessor for PredicateExpressions.SequenceMinimum.CodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t PredicateExpressions.SequenceMinimum<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return PredicateExpressions.SequenceMaximum<>.init(from:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceMinimum<A>.CodingKeys, (uint64_t (*)(void, uint64_t *, double))type metadata accessor for PredicateExpressions.SequenceMinimum);
}

uint64_t PredicateExpressions.SequenceMaximum<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>, uint64_t a8, uint64_t (*a9)(void, uint64_t *, double))
{
  uint64_t v37 = a7;
  uint64_t v40 = *(void *)(a2 - 8);
  uint64_t v41 = a4;
  double v14 = MEMORY[0x1F4188790](a1);
  int v42 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = v16;
  uint64_t v45 = v17;
  uint64_t v46 = v18;
  uint64_t v47 = v19;
  v20(255, &v44, v14);
  swift_getWitnessTable();
  uint64_t v43 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v38 = *(void *)(v43 - 8);
  double v21 = MEMORY[0x1F4188790](v43);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = a2;
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v46 = a5;
  uint64_t v47 = a6;
  uint64_t v24 = a9(0, &v44, v21);
  uint64_t v36 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v34 - v25;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v27 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v27)
  {
    char v35 = v26;
    uint64_t v48 = v24;
    uint64_t v29 = v38;
    uint64_t v28 = v39;
    uint64_t v30 = v40;
    uint64_t v31 = v42;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v23, v43);
    uint64_t v32 = v35;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v35, v31, v28);
    (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v37, v32, v48);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceMaximum<A>(void *a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceMinimum<A>(void *a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceMinimum<A>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceMaximum<A>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, uint64_t, void, void))PredicateExpressions.SequenceMinimum<>.init(from:), a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceMaximum<A>(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, uint64_t, void, void), uint64_t a5)
{
  return a4(a1, a2[2], a2[3], *(void *)(a3 - 8), a5, a2[4], a2[5]);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceMinimum<A>(void *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMinimum<>.encode(to:)(a1, a2, a3, *(void *)(a3 - 16));
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.SequenceMaximum(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.SequenceMaximum(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x181EFBB7CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for PredicateExpressions.SequenceMinimum.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181EFBC44);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in PredicateExpressions.SequenceMaximum<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in PredicateExpressions.SequenceMinimum<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PredicateExpressions.SequenceMinimum<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in PredicateExpressions.SequenceMinimum<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PredicateExpressions.SequenceMaximum<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in PredicateExpressions.SequenceMaximum<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t AnySortComparator.order.getter()
{
  unsigned int v1 = (uint64_t (*)(uint64_t *))v0[9];
  uint64_t v2 = v0[3];
  int v3 = __swift_project_boxed_opaque_existential_1(v0, v2);
  v7[3] = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16))(boxed_opaque_existential_1, v3, v2);
  uint64_t v5 = v1(v7) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  return v5;
}

uint64_t AnySortComparator.order.setter(char a1)
{
  void (*v4)(long long *__return_ptr, uint64_t, uint64_t);
  long long v6[2];

  uint64_t v2 = v1;
  uint64_t v3 = a1 & 1;
  unsigned int v4 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v2 + 56);
  swift_retain();
  v4(v6, v2, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v6, v2);
}

uint64_t AnySortComparator.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 + 8);
  a4[3] = a2;
  a4[4] = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  a4[5] = (uint64_t)partial apply for closure #1 in AnySortComparator.init<A>(_:);
  a4[6] = v10;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = partial apply for closure #2 in AnySortComparator.init<A>(_:);
  *(void *)(v12 + 24) = v11;
  a4[7] = (uint64_t)_sSH_s8Sendablep10Foundation9SortOrderOs11AnyHashableVIeghlyr_SH_sAApADSH_sAApIeghlyr_TRTA_0;
  a4[8] = v12;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  a4[9] = (uint64_t)partial apply for closure #3 in AnySortComparator.init<A>(_:);
  a4[10] = result;
  return result;
}

uint64_t ComparableComparator.init(order:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result & 1;
  return result;
}

uint64_t OptionalComparator.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t AnySortComparator.compare(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))v2[5];
  uint64_t v6 = v2[3];
  unsigned int v7 = __swift_project_boxed_opaque_existential_1(v2, v6);
  v11[3] = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(boxed_opaque_existential_1, v7, v6);
  uint64_t v9 = v5(v11, a1, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return v9;
}

NSComparisonResult __swiftcall NSComparisonResult.withOrder(_:)(Foundation::SortOrder a1)
{
  NSComparisonResult v2 = NSOrderedDescending;
  if (v1 == NSOrderedDescending) {
    uint64_t v3 = -1;
  }
  else {
    uint64_t v3 = v1;
  }
  if (v1 != NSOrderedAscending) {
    NSComparisonResult v2 = v3;
  }
  if (a1) {
    return v2;
  }
  else {
    return v1;
  }
}

uint64_t SortOrder.init(from:)(void *a1)
{
  return specialized SortOrder.init(from:)(a1) & 1;
}

uint64_t SortOrder.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void SortOrder.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int SortOrder.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SortOrder@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized SortOrder.init(from:)(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SortOrder(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t closure #1 in AnySortComparator.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  int v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v27);
  swift_dynamicCast();
  outlined init with copy of Any(a2, (uint64_t)v26);
  swift_dynamicCast();
  outlined init with copy of Any(v24, (uint64_t)v25);
  swift_dynamicCast();
  uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a5 + 24))(v15, v12, a4, a5);
  double v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  v21(v12, AssociatedTypeWitness);
  v21(v15, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, a4);
  return v20;
}

uint64_t sub_181EFC4C4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t closure #2 in AnySortComparator.init<A>(_:)(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2 & 1;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = &v19[-v12 - 8];
  outlined init with take of any PredicateExpression<Self.Output == B1>(v14, (uint64_t)v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  swift_dynamicCast();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 40))(v7, a3, a4);
  a1[3] = a3;
  a1[4] = *(void *)(a4 + 8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  uint64_t v16 = *(void (**)(uint64_t *, char *, uint64_t))(v8 + 16);
  v16(boxed_opaque_existential_1, v13, a3);
  v16((uint64_t *)v10, v13, a3);
  AnyHashable.init<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, a3);
}

uint64_t sub_181EFC670()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181EFC680()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sSH_s8Sendablep10Foundation9SortOrderOs11AnyHashableVIeghlyr_SH_sAApADSH_sAApIeghlyr_TRTA_0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  return thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable)(a1, a2 & 1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16), a3);
}

uint64_t closure #3 in AnySortComparator.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(v8, (uint64_t)v11);
  swift_dynamicCast();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3) & 1;
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, a2);
  return v9;
}

uint64_t sub_181EFC7C8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t key path getter for AnySortComparator.order : AnySortComparator@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (uint64_t (*)(uint64_t *))a1[9];
  uint64_t v4 = a1[3];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(a1, v4);
  v9[3] = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(boxed_opaque_existential_1, v5, v4);
  char v7 = v3(v9) & 1;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  *a2 = v7;
  return result;
}

uint64_t key path setter for AnySortComparator.order : AnySortComparator(unsigned __int8 *a1, uint64_t a2)
{
  void (*v4)(long long *__return_ptr, uint64_t, uint64_t);
  long long v6[2];

  uint64_t v3 = *a1;
  uint64_t v4 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a2 + 56);
  swift_retain();
  v4(v6, a2, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a2);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v6, a2);
}

void (*AnySortComparator.order.modify(uint64_t **a1))(long long **a1)
{
  uint64_t v3 = (uint64_t *)malloc(0x38uLL);
  *a1 = v3;
  v3[5] = (uint64_t)v1;
  uint64_t v4 = (uint64_t (*)(uint64_t *))v1[9];
  uint64_t v5 = v1[3];
  uint64_t v6 = __swift_project_boxed_opaque_existential_1(v1, v5);
  v3[3] = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v3);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v5 - 8) + 16))(boxed_opaque_existential_1, v6, v5);
  char v8 = v4(v3) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *((unsigned char *)v3 + 48) = v8;
  return AnySortComparator.order.modify;
}

void AnySortComparator.order.modify(long long **a1)
{
  NSComparisonResult v1 = *a1;
  uint64_t v2 = *((void *)*a1 + 5);
  uint64_t v3 = *((unsigned __int8 *)*a1 + 48);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v2 + 56);
  swift_retain();
  v4(v2, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v2);
  outlined init with take of any PredicateExpression<Self.Output == B1>(v1, v2);

  free(v1);
}

uint64_t AnySortComparator.hash(into:)()
{
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t compare #1 <A, B>(_:_:) in static AnySortComparator.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v25[1] = a5;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v25 - v10;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a3 - 8);
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v14, a2, a4, v17);
  int v21 = swift_dynamicCast();
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if (v21)
  {
    v22(v11, 0, 1, a3);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v11, a3);
    char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, a3);
  }
  else
  {
    v22(v11, 1, 1, a3);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    char v23 = 0;
  }
  return v23 & 1;
}

Swift::Int AnySortComparator.hashValue.getter()
{
  Hasher.init(_seed:)();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for SortComparator.compare(_:_:) in conformance AnySortComparator(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))v2[5];
  uint64_t v6 = v2[3];
  char v7 = __swift_project_boxed_opaque_existential_1(v2, v6);
  v11[3] = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(boxed_opaque_existential_1, v7, v6);
  uint64_t v9 = v5(v11, a1, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return v9;
}

uint64_t protocol witness for SortComparator.order.getter in conformance AnySortComparator()
{
  NSComparisonResult v1 = (uint64_t (*)(uint64_t *))v0[9];
  uint64_t v2 = v0[3];
  uint64_t v3 = __swift_project_boxed_opaque_existential_1(v0, v2);
  v7[3] = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16))(boxed_opaque_existential_1, v3, v2);
  uint64_t v5 = v1(v7) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  return v5;
}

uint64_t protocol witness for SortComparator.order.setter in conformance AnySortComparator(char a1)
{
  void (*v4)(long long *__return_ptr, uint64_t, uint64_t);
  long long v6[2];

  uint64_t v2 = v1;
  uint64_t v3 = a1 & 1;
  uint64_t v4 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v2 + 56);
  swift_retain();
  v4(v6, v2, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v6, v2);
}

uint64_t (*protocol witness for SortComparator.order.modify in conformance AnySortComparator(uint64_t ***a1))()
{
  uint64_t v2 = (uint64_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t *)AnySortComparator.order.modify(v2);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnySortComparator(void *a1, void *a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v6 = a2[3];
  char v7 = __swift_project_boxed_opaque_existential_1(a2, v6);
  uint64_t v8 = *(void *)(v4 + 8);

  return compare #1 <A, B>(_:_:) in static AnySortComparator.== infix(_:_:)((uint64_t)v5, (uint64_t)v7, v3, v6, v8);
}

uint64_t ComparableComparator.order.getter()
{
  return *v0;
}

uint64_t ComparableComparator.order.setter(uint64_t result)
{
  *uint64_t v1 = result & 1;
  return result;
}

uint64_t (*ComparableComparator.order.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ComparableComparator.compare(_:_:)()
{
  int v1 = *v0;
  if (dispatch thunk of static Comparable.< infix(_:_:)())
  {
    if (v1) {
      return 1;
    }
    else {
      return -1;
    }
  }
  else
  {
    uint64_t v3 = dispatch thunk of static Comparable.> infix(_:_:)();
    if (v1) {
      return v3 << 63 >> 63;
    }
    else {
      return v3 & 1;
    }
  }
}

void ComparableComparator.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static ComparableComparator.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int ComparableComparator.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for SortComparator.order.setter in conformance ComparableComparator<A>(char a1)
{
  return ComparableComparator.order.setter(a1 & 1);
}

uint64_t (*protocol witness for SortComparator.order.modify in conformance ComparableComparator<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ComparableComparator.order.modify();
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ComparableComparator<A>()
{
  return Hasher._finalize()();
}

uint64_t OptionalComparator.order.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))(*(void *)(a1 + 16)) & 1;
}

uint64_t OptionalComparator.order.setter(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a2 + 24) + 40))(a1 & 1, *(void *)(a2 + 16));
}

uint64_t (*OptionalComparator.order.modify(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 32);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v6() & 1;
  return OptionalComparator.order.modify;
}

uint64_t OptionalComparator.order.modify(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 8) + 40))(*(unsigned __int8 *)(a1 + 24), *(void *)(a1 + 16));
}

uint64_t OptionalComparator.compare(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v34 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v33 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  char v35 = (char *)&v31 - v18;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v19(v12, a1, v6, v17);
  uint64_t v37 = v13;
  uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v20((uint64_t)v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    if (v20(v36, 1, AssociatedTypeWitness) == 1) {
      return 0;
    }
    BOOL v25 = ((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(v34, v4) & 1) == 0;
    uint64_t v26 = -1;
  }
  else
  {
    uint64_t v32 = v4;
    uint64_t v22 = v12;
    char v23 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
    v23(v35, v22, AssociatedTypeWitness);
    ((void (*)(char *, uint64_t, uint64_t))v19)(v9, v36, v6);
    if (v20((uint64_t)v9, 1, AssociatedTypeWitness) != 1)
    {
      uint64_t v27 = v33;
      v23(v33, v9, AssociatedTypeWitness);
      uint64_t v28 = v35;
      uint64_t v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v32 + 24))(v35, v27, v34);
      uint64_t v29 = *(void (**)(char *, uint64_t))(v37 + 8);
      v29(v27, AssociatedTypeWitness);
      v29(v28, AssociatedTypeWitness);
      return v21;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    char v24 = (*(uint64_t (**)(uint64_t))(v32 + 32))(v34);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v35, AssociatedTypeWitness);
    BOOL v25 = (v24 & 1) == 0;
    uint64_t v26 = 1;
  }
  if (v25) {
    return v26;
  }
  else {
    return -v26;
  }
}

uint64_t OptionalComparator.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static OptionalComparator.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int OptionalComparator.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for SortComparator.order.setter in conformance OptionalComparator<A>(char a1, uint64_t a2)
{
  return OptionalComparator.order.setter(a1 & 1, a2);
}

uint64_t (*protocol witness for SortComparator.order.modify in conformance OptionalComparator<A>(void *a1, uint64_t a2))()
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = OptionalComparator.order.modify((uint64_t)v4, a2);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OptionalComparator<A>()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OptionalComparator<A>()
{
  return static OptionalComparator.== infix(_:_:)();
}

uint64_t MutableCollection<>.sort<A>(using:)()
{
  return MutableCollection<>.sort(by:)();
}

uint64_t MutableCollection<>.sort<A, B>(using:)()
{
  return MutableCollection<>.sort(by:)();
}

uint64_t specialized static AnySortComparator.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v3 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x1F4188790](v8);
  (*(void (**)(char *, double))(v11 + 16))((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v20 - v14;
  int v16 = swift_dynamicCast();
  double v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  if (v16)
  {
    v17(v15, 0, 1, v3);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v15, v3);
    char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
  }
  else
  {
    v17(v15, 1, 1, v3);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    char v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized SortOrder.init(from:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  char v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (v3 & 1) == 0;
}

BOOL partial apply for closure #1 in Sequence.sorted<A>(using:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v2 + 40) + 24))(a1, a2, *(void *)(v2 + 24)) == -1;
}

BOOL partial apply for closure #1 in MutableCollection<>.sort<A>(using:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v2 + 48) + 24))(a1, a2, *(void *)(v2 + 24)) == -1;
}

BOOL partial apply for closure #1 in MutableCollection<>.sort<A, B>(using:)(uint64_t a1, uint64_t a2)
{
  return Sequence.compare<A>(_:_:)(a1, a2, v2[3], v2[4], v2[7], v2[8]) == -1;
}

unint64_t instantiation function for generic protocol witness table for AnySortComparator(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AnySortComparator and conformance AnySortComparator();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AnySortComparator and conformance AnySortComparator()
{
  unint64_t result = lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator;
  if (!lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator;
  if (!lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnySortComparator and conformance AnySortComparator);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for OptionalComparator<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in OptionalComparator<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_181EFDE84@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OptionalComparator();
  uint64_t result = OptionalComparator.order.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_181EFDEC0(char *a1)
{
  char v1 = *a1;
  uint64_t v2 = type metadata accessor for OptionalComparator();
  return OptionalComparator.order.setter(v1, v2);
}

uint64_t sub_181EFDF00()
{
  return 16;
}

__n128 sub_181EFDF0C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of SortComparator.compare(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of SortComparator.order.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))() & 1;
}

uint64_t dispatch thunk of SortComparator.order.setter(char a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))(a1 & 1);
}

uint64_t dispatch thunk of SortComparator.order.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

ValueMetadata *type metadata accessor for SortOrder()
{
  return &type metadata for SortOrder;
}

uint64_t initializeWithCopy for AnySortComparator(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(void *)(a1 + 80) = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for AnySortComparator(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[8];
  a1[7] = a2[7];
  a1[8] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[10];
  a1[9] = a2[9];
  a1[10] = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AnySortComparator(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnySortComparator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnySortComparator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnySortComparator()
{
  return &type metadata for AnySortComparator;
}

unsigned char *storeEnumTagSinglePayload for SortOrder(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181EFE2ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for OptionalComparator(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for OptionalComparator(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x181EFE648);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for OptionalComparator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized Collection.subscript.getter()
{
  String.index(after:)();

  return String.subscript.getter();
}

BOOL specialized static RFC3986Parser.validate<A>(_:component:)(unint64_t a1, unint64_t a2, char a3)
{
  if (a2)
  {
    switch(a3)
    {
      case 1:
        if ((a2 & 0x1000000000000000) != 0) {
          goto LABEL_77;
        }
        if ((a2 & 0x2000000000000000) != 0) {
          goto LABEL_53;
        }
        if ((a1 & 0x1000000000000000) != 0) {
          goto LABEL_18;
        }
        goto LABEL_14;
      case 2:
        if ((a2 & 0x1000000000000000) == 0)
        {
          if ((a2 & 0x2000000000000000) != 0)
          {
LABEL_53:
            uint64_t v19 = HIBYTE(a2) & 0xF;
            unint64_t v61 = a1;
            uint64_t v62 = a2 & 0xFFFFFFFFFFFFFFLL;
            unsigned __int8 v20 = 2;
            goto LABEL_73;
          }
          if ((a1 & 0x1000000000000000) != 0)
          {
LABEL_18:
            unsigned int v7 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
LABEL_14:
            unsigned int v7 = (char *)_StringObject.sharedUTF8.getter();
          }
          unsigned __int8 v9 = 2;
          goto LABEL_68;
        }
LABEL_77:
        unint64_t v61 = a1;
        uint64_t v62 = a2;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        char v24 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        BOOL v25 = (unsigned __int16 *)objc_msgSend(v24, sel__fastCharacterContents);
        id v26 = v24;
        if (v25)
        {
          unint64_t v61 = a1;
          uint64_t v62 = a2;
          StringProtocol._ephemeralString.getter();
          uint64_t v27 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v28 = objc_msgSend(v27, sel_length);
          swift_unknownObjectRelease();
          uint64_t v29 = v25;
          uint64_t v30 = (uint64_t)v28;
          unsigned __int8 v31 = 2;
          goto LABEL_89;
        }
        unint64_t v47 = a1;
        unint64_t v48 = a2;
        unsigned __int8 v49 = 2;
        goto LABEL_103;
      case 3:
        unint64_t v11 = specialized Collection.first.getter(a1, a2);
        if ((v11 & 0x1FF) != 0x5B) {
          goto LABEL_63;
        }
        if ((a2 & 0x1000000000000000) != 0)
        {
          Swift::Int v60 = String.UTF8View._foreignCount()();
          if (__OFSUB__(v60, 1))
          {
            __break(1u);
            JUMPOUT(0x181EFEFA0);
          }
          uint64_t v13 = (a1 >> 59) & 1;
          unint64_t v11 = MEMORY[0x185302230](15, v60 - 1, a1, a2);
        }
        else
        {
          uint64_t v12 = HIBYTE(a2) & 0xF;
          if ((a2 & 0x2000000000000000) == 0) {
            uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
          }
          if (!v12)
          {
            __break(1u);
            goto LABEL_95;
          }
          unint64_t v11 = (v12 << 16) - 65532;
          LOBYTE(v13) = 1;
        }
        if ((v11 & 0xC) != 4 << v13) {
          goto LABEL_27;
        }
LABEL_95:
        unint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a1, a2);
LABEL_27:
        unint64_t v14 = HIBYTE(a2) & 0xF;
        if ((a2 & 0x2000000000000000) == 0) {
          unint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
        }
        unint64_t v15 = v11 >> 16;
        if (v11 >> 16 >= v14)
        {
          __break(1u);
          goto LABEL_97;
        }
        if ((a2 & 0x1000000000000000) != 0)
        {
          char v17 = String.UTF8View._foreignSubscript(position:)();
        }
        else if ((a2 & 0x2000000000000000) != 0)
        {
          unint64_t v61 = a1;
          uint64_t v62 = a2 & 0xFFFFFFFFFFFFFFLL;
          char v17 = *((unsigned char *)&v61 + v15);
        }
        else
        {
          if ((a1 & 0x1000000000000000) != 0) {
            uint64_t v16 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          }
          else {
            uint64_t v16 = _StringObject.sharedUTF8.getter();
          }
          char v17 = *(unsigned char *)(v16 + v15);
        }
        if (v17 == 93)
        {
          swift_bridgeObjectRetain();
          char v22 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a1, a2);
          goto LABEL_62;
        }
LABEL_63:
        if ((a2 & 0x1000000000000000) == 0)
        {
          if ((a2 & 0x2000000000000000) != 0)
          {
            uint64_t v19 = HIBYTE(a2) & 0xF;
            unint64_t v61 = a1;
            uint64_t v62 = a2 & 0xFFFFFFFFFFFFFFLL;
            unsigned __int8 v20 = 4;
            goto LABEL_73;
          }
          if ((a1 & 0x1000000000000000) != 0)
          {
            unsigned int v7 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            unsigned int v7 = (char *)_StringObject.sharedUTF8.getter();
          }
          unsigned __int8 v9 = 4;
          goto LABEL_68;
        }
        unint64_t v61 = a1;
        uint64_t v62 = a2;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        uint64_t v50 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v51 = (unsigned __int16 *)objc_msgSend(v50, sel__fastCharacterContents);
        id v52 = v50;
        if (v51)
        {
          unint64_t v61 = a1;
          uint64_t v62 = a2;
          StringProtocol._ephemeralString.getter();
          uint64_t v53 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v54 = objc_msgSend(v53, sel_length);
          swift_unknownObjectRelease();
          uint64_t v29 = v51;
          uint64_t v30 = (uint64_t)v54;
          unsigned __int8 v31 = 4;
          goto LABEL_89;
        }
        unint64_t v47 = a1;
        unint64_t v48 = a2;
        unsigned __int8 v49 = 4;
        goto LABEL_103;
      case 4:
        char v18 = specialized Sequence.allSatisfy(_:)(a1, a2);
        goto LABEL_75;
      case 5:
        if ((a2 & 0x1000000000000000) == 0)
        {
          if ((a2 & 0x2000000000000000) != 0)
          {
            uint64_t v19 = HIBYTE(a2) & 0xF;
            unint64_t v61 = a1;
            uint64_t v62 = a2 & 0xFFFFFFFFFFFFFFLL;
            unsigned __int8 v20 = 16;
            goto LABEL_73;
          }
          if ((a1 & 0x1000000000000000) != 0)
          {
            unsigned int v7 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
            unsigned __int8 v9 = 16;
          }
          else
          {
LABEL_97:
            unsigned int v7 = (char *)_StringObject.sharedUTF8.getter();
            unsigned __int8 v9 = 16;
          }
          goto LABEL_68;
        }
        unint64_t v61 = a1;
        uint64_t v62 = a2;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        uint64_t v37 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v38 = (unsigned __int16 *)objc_msgSend(v37, sel__fastCharacterContents);
        id v39 = v37;
        if (v38)
        {
          unint64_t v61 = a1;
          uint64_t v62 = a2;
          StringProtocol._ephemeralString.getter();
          uint64_t v40 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v41 = objc_msgSend(v40, sel_length);
          swift_unknownObjectRelease();
          uint64_t v29 = v38;
          uint64_t v30 = (uint64_t)v41;
          unsigned __int8 v31 = 16;
          goto LABEL_89;
        }
        unint64_t v47 = a1;
        unint64_t v48 = a2;
        unsigned __int8 v49 = 16;
        goto LABEL_103;
      case 6:
        if ((a2 & 0x1000000000000000) != 0) {
          goto LABEL_79;
        }
        if ((a2 & 0x2000000000000000) != 0) {
          goto LABEL_54;
        }
        if ((a1 & 0x1000000000000000) == 0) {
          goto LABEL_43;
        }
        goto LABEL_52;
      case 7:
        if ((a2 & 0x1000000000000000) == 0)
        {
          if ((a2 & 0x2000000000000000) != 0)
          {
            uint64_t v19 = HIBYTE(a2) & 0xF;
            unint64_t v61 = a1;
            uint64_t v62 = a2 & 0xFFFFFFFFFFFFFFLL;
            unsigned __int8 v20 = 0x80;
            goto LABEL_73;
          }
          if ((a1 & 0x1000000000000000) != 0)
          {
            unsigned int v7 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            unsigned int v7 = (char *)_StringObject.sharedUTF8.getter();
          }
          unsigned __int8 v9 = 0x80;
          goto LABEL_68;
        }
        unint64_t v61 = a1;
        uint64_t v62 = a2;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        int v42 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v43 = (unsigned __int16 *)objc_msgSend(v42, sel__fastCharacterContents);
        id v44 = v42;
        if (v43)
        {
          unint64_t v61 = a1;
          uint64_t v62 = a2;
          StringProtocol._ephemeralString.getter();
          uint64_t v45 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v46 = objc_msgSend(v45, sel_length);
          swift_unknownObjectRelease();
          uint64_t v29 = v43;
          uint64_t v30 = (uint64_t)v46;
          unsigned __int8 v31 = 0x80;
          goto LABEL_89;
        }
        unint64_t v47 = a1;
        unint64_t v48 = a2;
        unsigned __int8 v49 = 0x80;
        goto LABEL_103;
      case 8:
        if ((a2 & 0x1000000000000000) != 0)
        {
LABEL_79:
          unint64_t v61 = a1;
          uint64_t v62 = a2;
          lazy protocol witness table accessor for type String and conformance String();
          swift_bridgeObjectRetain();
          StringProtocol._ephemeralString.getter();
          uint64_t v32 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v33 = (unsigned __int16 *)objc_msgSend(v32, sel__fastCharacterContents);
          id v34 = v32;
          if (v33)
          {
            unint64_t v61 = a1;
            uint64_t v62 = a2;
            StringProtocol._ephemeralString.getter();
            char v35 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v36 = objc_msgSend(v35, sel_length);
            swift_unknownObjectRelease();
            uint64_t v29 = v33;
            uint64_t v30 = (uint64_t)v36;
            unsigned __int8 v31 = 64;
LABEL_89:
            char v22 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v29, v30, v31, 1);
          }
          else
          {
            unint64_t v47 = a1;
            unint64_t v48 = a2;
            unsigned __int8 v49 = 64;
LABEL_103:
            char v22 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v47, v48, v49, 1);
          }
          goto LABEL_62;
        }
        if ((a2 & 0x2000000000000000) != 0)
        {
LABEL_54:
          uint64_t v19 = HIBYTE(a2) & 0xF;
          unint64_t v61 = a1;
          uint64_t v62 = a2 & 0xFFFFFFFFFFFFFFLL;
          unsigned __int8 v20 = 64;
LABEL_73:
          char v21 = 1;
          goto LABEL_74;
        }
        if ((a1 & 0x1000000000000000) != 0)
        {
LABEL_52:
          unsigned int v7 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
          unsigned __int8 v9 = 64;
        }
        else
        {
LABEL_43:
          unsigned int v7 = (char *)_StringObject.sharedUTF8.getter();
          unsigned __int8 v9 = 64;
        }
LABEL_68:
        char v10 = 1;
        goto LABEL_69;
      default:
        __int16 v5 = specialized Collection.first.getter(a1, a2);
        char v6 = 0;
        if ((v5 & 0x100) != 0 || v5 < 0x41u) {
          return v6 & 1;
        }
        if ((a2 & 0x1000000000000000) != 0)
        {
          unint64_t v61 = a1;
          uint64_t v62 = a2;
          lazy protocol witness table accessor for type String and conformance String();
          swift_bridgeObjectRetain();
          StringProtocol._ephemeralString.getter();
          uint64_t v55 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v56 = (unsigned __int16 *)objc_msgSend(v55, sel__fastCharacterContents);
          id v57 = v55;
          if (v56)
          {
            unint64_t v61 = a1;
            uint64_t v62 = a2;
            StringProtocol._ephemeralString.getter();
            uint64_t v58 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v59 = objc_msgSend(v58, sel_length);
            swift_unknownObjectRelease();
            char v22 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v56, (uint64_t)v59, 1u, 0);
          }
          else
          {
            char v22 = specialized Sequence.allSatisfy(_:)(a1, a2, 1);
          }
LABEL_62:
          char v6 = v22;
          swift_bridgeObjectRelease();
          return v6 & 1;
        }
        if ((a2 & 0x2000000000000000) != 0)
        {
          uint64_t v19 = HIBYTE(a2) & 0xF;
          unint64_t v61 = a1;
          uint64_t v62 = a2 & 0xFFFFFFFFFFFFFFLL;
          unsigned __int8 v20 = 1;
          char v21 = 0;
LABEL_74:
          char v18 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)((char *)&v61, v19, v20, v21);
LABEL_75:
          char v6 = v18;
          return v6 & 1;
        }
        if ((a1 & 0x1000000000000000) != 0)
        {
          unsigned int v7 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          unsigned int v7 = (char *)_StringObject.sharedUTF8.getter();
        }
        unsigned __int8 v9 = 1;
        char v10 = 0;
LABEL_69:
        BOOL result = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, v9, v10);
        break;
    }
  }
  else
  {
    char v6 = 1;
    return v6 & 1;
  }
  return result;
}

uint64_t specialized static RFC3986Parser.percentEncode<A>(_:component:)(unint64_t a1, unint64_t a2, char a3)
{
  unint64_t v3 = a1;
  if (!a2) {
    return v3;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v5 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0;
  }
  switch(a3)
  {
    case 1:
    case 2:
      unint64_t v60 = a1;
      uint64_t v61 = a2;
      MEMORY[0x1F4188790](a1);
      uint64_t v58 = (uint64_t)&v60;
      LOBYTE(v59) = 2;
      swift_bridgeObjectRetain();
      unint64_t v13 = (unint64_t)specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v57, v3, a2);
      if (v14) {
        goto LABEL_30;
      }
      unint64_t v15 = v60;
      unint64_t v16 = v61;
      swift_bridgeObjectRetain();
      unint64_t v17 = v15;
      unint64_t v18 = v16;
      unsigned __int8 v19 = 2;
      goto LABEL_27;
    case 3:
      Swift::Int v6 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(a1, a2);
      if (v6)
      {
        __int16 v7 = specialized Collection.first.getter(v3, a2);
        if ((v7 & 0x100) != 0) {
          goto LABEL_57;
        }
        if (v7 == 91)
        {
          if ((a2 & 0x1000000000000000) == 0)
          {
            unint64_t v8 = (v5 << 16) - 65532;
            LOBYTE(v9) = 1;
LABEL_13:
            if ((v8 & 0xC) == 4 << v9) {
              unint64_t v8 = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, v3, a2);
            }
            unint64_t v10 = v8 >> 16;
            if (v8 >> 16 >= v5)
            {
              __break(1u);
              goto LABEL_53;
            }
            if ((a2 & 0x1000000000000000) != 0)
            {
              char v12 = String.UTF8View._foreignSubscript(position:)();
              goto LABEL_34;
            }
            if ((a2 & 0x2000000000000000) != 0)
            {
              unint64_t v60 = v3;
              uint64_t v61 = a2 & 0xFFFFFFFFFFFFFFLL;
              char v12 = *((unsigned char *)&v60 + v10);
              goto LABEL_34;
            }
            if ((v3 & 0x1000000000000000) == 0) {
              goto LABEL_55;
            }
            for (uint64_t i = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32; ; uint64_t i = _StringObject.sharedUTF8.getter())
            {
              char v12 = *(unsigned char *)(i + v10);
LABEL_34:
              if (v12 == 93)
              {
                unint64_t v29 = specialized Collection<>.firstIndex(of:)(0x25u, v3, a2);
                if (v30)
                {
                  swift_bridgeObjectRetain();
                  if (specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v3, a2))
                  {
                    unint64_t v60 = v3;
                    uint64_t v61 = a2;
                    return String.init<A>(_:)();
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                    return 0;
                  }
                }
                unint64_t v10 = v29;
                if ((a2 & 0x1000000000000000) != 0)
                {
                  Swift::Int v31 = String.UTF8View._foreignCount()();
                  if (__OFSUB__(v31, 1))
                  {
                    __break(1u);
LABEL_57:
                    __break(1u);
LABEL_58:
                    __break(1u);
LABEL_59:
                    int v59 = 0;
                    uint64_t v58 = 181;
LABEL_61:
                    _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181EFF724);
                  }
                  unint64_t v5 = MEMORY[0x185302230](15, v31 - 1, v3, a2);
                }
                else
                {
                  unint64_t v5 = (v5 << 16) - 65532;
                }
                if (v5 >> 14 >= v10 >> 14)
                {
                  swift_bridgeObjectRetain_n();
                  uint64_t v32 = String.subscript.getter();
                  unint64_t v34 = v33;
                  unint64_t v60 = v32;
                  uint64_t v61 = v35;
                  unint64_t v62 = v36;
                  unint64_t v63 = v33;
                  MEMORY[0x1F4188790](v32);
                  uint64_t v58 = (uint64_t)&v60;
                  LOBYTE(v59) = 8;
                  uint64_t v40 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v57, v38, v39, v37, v34);
                  if (v41)
                  {
                    uint64_t v42 = (uint64_t)v40;
                    uint64_t v43 = v41;
                  }
                  else
                  {
                    unint64_t v45 = v60;
                    unint64_t v46 = v61;
                    unint64_t v47 = v62;
                    unint64_t v48 = v63;
                    swift_bridgeObjectRetain();
                    uint64_t v42 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v45, v46, v47, v48, 8u);
                    uint64_t v43 = v49;
                    swift_bridgeObjectRelease();
                  }
                  uint64_t v50 = String.subscript.getter();
                  uint64_t v51 = MEMORY[0x185301F50](v50);
                  uint64_t v53 = v52;
                  swift_bridgeObjectRelease();
                  unint64_t v60 = v51;
                  uint64_t v61 = v53;
                  v54._countAndFlagsBits = v42;
                  v54._object = v43;
                  String.append(_:)(v54);
                  swift_bridgeObjectRelease();
                  v55._countAndFlagsBits = 93;
                  v55._object = (void *)0xE100000000000000;
                  String.append(_:)(v55);
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  return v60;
                }
              }
              else
              {
LABEL_53:
                __break(1u);
              }
              __break(1u);
LABEL_55:
              ;
            }
          }
        }
        else
        {
          __break(1u);
        }
        Swift::Int v56 = String.UTF8View._foreignCount()();
        if (__OFSUB__(v56, 1)) {
          goto LABEL_58;
        }
        uint64_t v9 = (v3 >> 59) & 1;
        unint64_t v8 = MEMORY[0x185302230](15, v56 - 1, v3, a2);
        goto LABEL_13;
      }
      unint64_t v60 = v3;
      uint64_t v61 = a2;
      MEMORY[0x1F4188790](v6);
      uint64_t v58 = (uint64_t)&v60;
      LOBYTE(v59) = 4;
      swift_bridgeObjectRetain();
      unint64_t v13 = (unint64_t)specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v57, v3, a2);
      if (v26)
      {
LABEL_30:
        unint64_t v3 = v13;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v27 = v60;
        unint64_t v28 = v61;
        swift_bridgeObjectRetain();
        unint64_t v17 = v27;
        unint64_t v18 = v28;
        unsigned __int8 v19 = 4;
LABEL_27:
        unint64_t v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v17, v18, v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      return v3;
    case 4:
      int v59 = 0;
      uint64_t v58 = 189;
      goto LABEL_61;
    case 5:
      swift_bridgeObjectRetain();
      unint64_t v13 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v3, a2);
      goto LABEL_30;
    case 6:
    case 8:
      unint64_t v60 = a1;
      uint64_t v61 = a2;
      MEMORY[0x1F4188790](a1);
      uint64_t v58 = (uint64_t)&v60;
      LOBYTE(v59) = 64;
      swift_bridgeObjectRetain();
      unint64_t v13 = (unint64_t)specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v57, v3, a2);
      if (v23) {
        goto LABEL_30;
      }
      unint64_t v24 = v60;
      unint64_t v25 = v61;
      swift_bridgeObjectRetain();
      unint64_t v17 = v24;
      unint64_t v18 = v25;
      unsigned __int8 v19 = 64;
      goto LABEL_27;
    case 7:
      unint64_t v60 = a1;
      uint64_t v61 = a2;
      MEMORY[0x1F4188790](a1);
      uint64_t v58 = (uint64_t)&v60;
      LOBYTE(v59) = 0x80;
      swift_bridgeObjectRetain();
      unint64_t v13 = (unint64_t)specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v57, v3, a2);
      if (v20) {
        goto LABEL_30;
      }
      unint64_t v21 = v60;
      unint64_t v22 = v61;
      swift_bridgeObjectRetain();
      unint64_t v17 = v21;
      unint64_t v18 = v22;
      unsigned __int8 v19 = 0x80;
      goto LABEL_27;
    default:
      goto LABEL_59;
  }
}

unint64_t specialized Sequence<>.contains(_:)(char a1, unint64_t a2, unint64_t a3)
{
  char v5 = a1;
  _OWORD v4[2] = &v5;
  return specialized Sequence.contains(where:)((uint64_t (*)(void *))_sSTsSQ7ElementRpzrlE8containsySbABFSbABXEfU_SS8UTF8ViewV_TG5TA_0, (uint64_t)v4, a2, a3) & 1;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 9; ; ++i)
  {
    uint64_t v4 = i - 7;
    if (__OFADD__(i - 8, 1)) {
      break;
    }
    BOOL v6 = *(_DWORD *)(a2 + 4 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a5 + 16);
  if (!v5) {
    return 0;
  }
  for (uint64_t i = (void *)(a5 + 56); ; i += 4)
  {
    BOOL v9 = *(i - 1) == a3 && *i == a4;
    if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    if (!--v5) {
      return 0;
    }
  }
  return 1;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  BOOL v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

void *specialized BidirectionalCollection.last.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void **)(a1 + 8 * v1 + 24);
  id v3 = v2;
  return v2;
}

unint64_t specialized BidirectionalCollection.lastIndex(where:)(unint64_t result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000) != 0) {
    unint64_t v5 = HIBYTE(a4) & 0xF;
  }
  else {
    unint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0;
  }
  unint64_t v8 = (uint64_t (*)(void *))result;
  uint64_t v9 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LODWORD(v9) = 1;
  }
  uint64_t v10 = 11;
  if (v9) {
    uint64_t v10 = 7;
  }
  unint64_t v11 = v10 | (v5 << 16);
  uint64_t v12 = 4 << v9;
  uint64_t v18 = a4 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  while (1)
  {
    if ((v11 & 0xC) != v12)
    {
      if ((a4 & 0x1000000000000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_15;
    }
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a3, a4);
    if (result < 0x4000) {
      break;
    }
    unint64_t v11 = result;
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_12:
      unint64_t v11 = (v11 & 0xFFFFFFFFFFFF0000) - 65532;
      goto LABEL_17;
    }
LABEL_15:
    if (v5 < v11 >> 16) {
      goto LABEL_35;
    }
    unint64_t v11 = String.UTF8View._foreignIndex(before:)();
LABEL_17:
    uint64_t result = v11;
    if ((v11 & 0xC) == v12) {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a3, a4);
    }
    unint64_t v13 = result >> 16;
    if (result >> 16 >= v5) {
      goto LABEL_34;
    }
    if ((a4 & 0x1000000000000000) != 0)
    {
      char v15 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((a4 & 0x2000000000000000) != 0)
    {
      v17[0] = a3;
      v17[1] = v18;
      char v15 = *((unsigned char *)v17 + v13);
    }
    else
    {
      uint64_t v14 = v16;
      if ((a3 & 0x1000000000000000) == 0) {
        uint64_t v14 = _StringObject.sharedUTF8.getter();
      }
      char v15 = *(unsigned char *)(v14 + v13);
    }
    LOBYTE(v17[0]) = v15;
    uint64_t result = v8(v17);
    if (v4 || (result & 1) != 0) {
      return v11;
    }
    if (v11 < 0x4000) {
      return 0;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t URLResourceValues.parentDirectory.getter@<X0>(void *a1@<X8>)
{
  return URLResourceValues.parentDirectory.getter(MEMORY[0x1E4F1C6F8], a1);
}

uint64_t URLResourceValues.volumeSupportsCasePreservedNames.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C8C0]);
}

uint64_t URLResourceValues.volumeSupportsCaseSensitiveNames.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C8C8]);
}

uint64_t URL.user.getter()
{
  return URL.user.getter((uint64_t (*)(uint64_t))URL.user(percentEncoded:), (SEL *)&selRef_user);
}

uint64_t URL.password.getter()
{
  return URL.user.getter((uint64_t (*)(uint64_t))URL.password(percentEncoded:), (SEL *)&selRef_password);
}

uint64_t URL.port.getter()
{
  uint64_t v2 = *(void **)v0;
  uint64_t v1 = *(unsigned char **)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!result)
  {
    id v5 = objc_msgSend(v2, sel_port);
    if (!v5) {
      return 0;
    }
    BOOL v6 = v5;
    id v7 = objc_msgSend(v5, sel_integerValue);

    return (uint64_t)v7;
  }
  if (v1)
  {
    if (v1[72] == 1 && v1[96] == 1 && v1[120] == 1 && (v1[144] & 1) != 0 && !v3) {
      return 0;
    }
    return URLParseInfo.port.getter();
  }
  __break(1u);
  return result;
}

uint64_t URL.query.getter()
{
  return URL.user.getter((uint64_t (*)(uint64_t))URL.query(percentEncoded:), (SEL *)&selRef_query);
}

uint64_t URL.fragment.getter()
{
  return URL.user.getter((uint64_t (*)(uint64_t))URL.fragment(percentEncoded:), (SEL *)&selRef_fragment);
}

Swift::Int specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(unint64_t a1, unint64_t a2)
{
  unint64_t v4 = specialized Collection.first.getter(a1, a2);
  if ((v4 & 0x1FF) != 0x5B) {
    return 0;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int result = String.UTF8View._foreignCount()();
    if (__OFSUB__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v6 = (a1 >> 59) & 1;
    unint64_t v4 = MEMORY[0x185302230](15, result - 1, a1, a2);
LABEL_7:
    if ((v4 & 0xC) != 4 << v6) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
  uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a2) & 0xF;
  }
  if (v5)
  {
    unint64_t v4 = (v5 << 16) - 65532;
    LOBYTE(v6) = 1;
    goto LABEL_7;
  }
  __break(1u);
LABEL_24:
  unint64_t v4 = _StringGuts._slowEnsureMatchingEncoding(_:)(v4, a1, a2);
LABEL_8:
  unint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v7 = HIBYTE(a2) & 0xF;
  }
  unint64_t v8 = v4 >> 16;
  if (v4 >> 16 >= v7)
  {
    __break(1u);
LABEL_26:
    uint64_t v9 = _StringObject.sharedUTF8.getter();
    goto LABEL_15;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    char v10 = String.UTF8View._foreignSubscript(position:)();
    return v10 == 93;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v12[0] = a1;
    v12[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    char v10 = *((unsigned char *)v12 + v8);
    return v10 == 93;
  }
  if ((a1 & 0x1000000000000000) == 0) {
    goto LABEL_26;
  }
  uint64_t v9 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_15:
  char v10 = *(unsigned char *)(v9 + v8);
  return v10 == 93;
}

BOOL specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(unsigned __int16 *a1, uint64_t a2, unsigned __int8 a3, char a4)
{
  unsigned int v4 = a3;
  if ((a4 & 1) == 0)
  {
    if (!a1 || !a2) {
      return 1;
    }
    unsigned int v12 = *a1;
    if (v12 <= 0x7F)
    {
      uint64_t v13 = 2 * a2 - 2;
      uint64_t v14 = a1 + 1;
      while (2)
      {
        switch((char)v12)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_47:
            if ((a3 & 0xF6) == 0) {
              return 0;
            }
            goto LABEL_70;
          case '&':
LABEL_53:
            if ((a3 & 0x76) == 0) {
              return 0;
            }
            goto LABEL_70;
          case '+':
            if ((a3 & 0xF7) == 0) {
              return 0;
            }
            goto LABEL_70;
          case '-':
          case '.':
            goto LABEL_69;
          case '/':
LABEL_55:
            if (a3 < 0x10u) {
              return 0;
            }
            goto LABEL_70;
          default:
            if ((v12 - 58) > 0xF5u) {
              goto LABEL_69;
            }
            break;
        }
        switch((char)v12)
        {
          case ':':
            if ((a3 & 0xD2) == 0) {
              return 0;
            }
            goto LABEL_70;
          case ';':
            goto LABEL_47;
          case '=':
            goto LABEL_53;
          case '?':
            if (a3 < 0x40u) {
              return 0;
            }
            goto LABEL_70;
          case '@':
            goto LABEL_55;
          default:
            if ((v12 - 91) > 0xE5u) {
              goto LABEL_69;
            }
            if (v12 == 95)
            {
              if (a3 < 2u) {
                return 0;
              }
            }
            else if ((v12 - 123) > 0xE5u)
            {
LABEL_69:
              if (!a3) {
                return 0;
              }
            }
            else
            {
              BOOL result = 0;
              if (v12 != 126 || a3 < 2u) {
                return result;
              }
            }
LABEL_70:
            if (!v13) {
              return 1;
            }
            unsigned int v15 = *v14++;
            LOBYTE(v12) = v15;
            v13 -= 2;
            if (v15 >= 0x80) {
              return 0;
            }
            continue;
        }
      }
    }
    return 0;
  }
  if (!a1 || !a2)
  {
    uint64_t v6 = 0;
    return v6 == 0;
  }
  unsigned int v5 = *a1;
  if (v5 > 0x7F) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 2 * a2 - 2;
  unint64_t v8 = a1 + 1;
  do
  {
    if ((unsigned __int16)v5 == 37)
    {
      if (v6) {
        return 0;
      }
      uint64_t v6 = 2;
    }
    else
    {
      switch((char)v5)
      {
        case '!':
        case '$':
        case '\'':
        case '(':
        case ')':
        case '*':
        case ',':
LABEL_10:
          if ((v4 & 0xF6) == 0) {
            return 0;
          }
          goto LABEL_33;
        case '&':
LABEL_16:
          if ((v4 & 0x76) == 0) {
            return 0;
          }
          goto LABEL_33;
        case '+':
          if ((v4 & 0xFFFFFFF7) == 0) {
            return 0;
          }
          goto LABEL_33;
        case '-':
        case '.':
          goto LABEL_32;
        case '/':
LABEL_18:
          if (v4 < 0x10) {
            return 0;
          }
          goto LABEL_33;
        default:
          if ((v5 - 58) > 0xF5u) {
            goto LABEL_32;
          }
          break;
      }
      switch((char)v5)
      {
        case ':':
          if ((v4 & 0xD2) == 0) {
            return 0;
          }
          goto LABEL_33;
        case ';':
          goto LABEL_10;
        case '=':
          goto LABEL_16;
        case '?':
          if (v4 < 0x40) {
            return 0;
          }
          goto LABEL_33;
        case '@':
          goto LABEL_18;
        default:
          if ((v5 - 91) > 0xE5u) {
            goto LABEL_32;
          }
          if (v5 == 95)
          {
            if (v4 < 2) {
              return 0;
            }
          }
          else if ((v5 - 123) > 0xE5u)
          {
LABEL_32:
            if (!v4) {
              return 0;
            }
          }
          else
          {
            BOOL result = 0;
            if (v5 != 126 || v4 < 2) {
              return result;
            }
          }
LABEL_33:
          if (v6-- < 1)
          {
            uint64_t v6 = 0;
          }
          else if ((v5 - 58) <= 0xF5u)
          {
            BOOL result = 0;
            if (v5 - 65 > 0x25
              || ((1 << (v5 - 65)) & 0x3F0000003FLL) == 0)
            {
              return result;
            }
          }
          break;
      }
    }
    if (!v7) {
      return v6 == 0;
    }
    BOOL result = 0;
    unsigned int v11 = *v8++;
    LOWORD(v5) = v11;
    v7 -= 2;
  }
  while (v11 < 0x80);
  return result;
}

uint64_t specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(unint64_t a1, unint64_t a2, unsigned __int8 a3, char a4)
{
  if (a4)
  {
    uint64_t v7 = 0;
    if ((a2 & 0x2000000000000000) != 0) {
      unint64_t v8 = HIBYTE(a2) & 0xF;
    }
    else {
      unint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v8)
    {
      uint64_t v9 = (a1 >> 59) & 1;
      if ((a2 & 0x1000000000000000) == 0) {
        LOBYTE(v9) = 1;
      }
      uint64_t v10 = 4 << v9;
      uint64_t v25 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v26 = a2 & 0xFFFFFFFFFFFFFFLL;
      char v24 = a3 & 0xF6;
      char v22 = a3 & 0xF7;
      int v23 = a3 & 0x76;
      char v21 = a3 & 0xD2;
      unint64_t v11 = 15;
      while (1)
      {
        unint64_t v12 = v11 & 0xC;
        unint64_t v13 = v11;
        if (v12 == v10) {
          unint64_t v13 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a1, a2);
        }
        unint64_t v14 = v13 >> 16;
        if (v13 >> 16 >= v8)
        {
          __break(1u);
LABEL_63:
          __break(1u);
          JUMPOUT(0x181F00B14);
        }
        if ((a2 & 0x1000000000000000) != 0)
        {
          unsigned __int8 v16 = String.UTF8View._foreignSubscript(position:)();
          if (v12 != v10) {
            goto LABEL_21;
          }
        }
        else if ((a2 & 0x2000000000000000) != 0)
        {
          v27[0] = a1;
          v27[1] = v26;
          unsigned __int8 v16 = *((unsigned char *)v27 + v14);
          if (v12 != v10) {
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v15 = v25;
          if ((a1 & 0x1000000000000000) == 0) {
            uint64_t v15 = _StringObject.sharedUTF8.getter();
          }
          unsigned __int8 v16 = *(unsigned char *)(v15 + v14);
          if (v12 != v10)
          {
LABEL_21:
            if ((a2 & 0x1000000000000000) == 0) {
              goto LABEL_22;
            }
            goto LABEL_26;
          }
        }
        unint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a1, a2);
        if ((a2 & 0x1000000000000000) == 0)
        {
LABEL_22:
          unint64_t v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
          if ((v16 & 0x80) != 0) {
            goto LABEL_60;
          }
          goto LABEL_28;
        }
LABEL_26:
        if (v8 <= v11 >> 16) {
          goto LABEL_63;
        }
        unint64_t v11 = String.UTF8View._foreignIndex(after:)();
        if ((v16 & 0x80) != 0)
        {
LABEL_60:
          char v18 = 0;
          return v18 & 1;
        }
LABEL_28:
        switch(v16)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_29:
            char v17 = v24;
            goto LABEL_30;
          case '%':
            if (v7) {
              goto LABEL_60;
            }
            uint64_t v7 = 2;
            goto LABEL_10;
          case '&':
LABEL_35:
            if (!v23) {
              goto LABEL_60;
            }
            goto LABEL_53;
          case '+':
            char v17 = v22;
LABEL_30:
            if (!v17) {
              goto LABEL_60;
            }
            goto LABEL_53;
          case '-':
          case '.':
            goto LABEL_52;
          case '/':
LABEL_37:
            if (a3 < 0x10u) {
              goto LABEL_60;
            }
            goto LABEL_53;
          default:
            if ((v16 - 58) > 0xF5u) {
              goto LABEL_52;
            }
            break;
        }
        switch(v16)
        {
          case ':':
            char v17 = v21;
            goto LABEL_30;
          case ';':
            goto LABEL_29;
          case '=':
            goto LABEL_35;
          case '?':
            if (a3 < 0x40u) {
              goto LABEL_60;
            }
            goto LABEL_53;
          case '@':
            goto LABEL_37;
          default:
            if ((v16 - 91) > 0xE5u) {
              goto LABEL_52;
            }
            if (v16 == 95)
            {
              if (a3 < 2u) {
                goto LABEL_60;
              }
            }
            else if ((v16 - 123) > 0xE5u)
            {
LABEL_52:
              if (!a3) {
                goto LABEL_60;
              }
            }
            else
            {
              char v18 = 0;
              if (v16 != 126 || a3 < 2u) {
                return v18 & 1;
              }
            }
LABEL_53:
            if (v7-- < 1)
            {
              uint64_t v7 = 0;
            }
            else if ((v16 - 58) <= 0xF5u)
            {
              char v18 = 0;
              if (v16 - 65 > 0x25 || ((1 << (v16 - 65)) & 0x3F0000003FLL) == 0) {
                return v18 & 1;
              }
            }
LABEL_10:
            if (4 * v8 == v11 >> 14) {
              goto LABEL_59;
            }
            break;
        }
      }
    }
LABEL_59:
    char v18 = v7 == 0;
  }
  else
  {
    char v18 = specialized Sequence.allSatisfy(_:)(a1, a2, a3);
  }
  return v18 & 1;
}

BOOL specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 a5, char a6)
{
  unint64_t v10 = a2 >> 14;
  if ((a6 & 1) == 0)
  {
    if (a1 >> 14 == a2 >> 14) {
      return 1;
    }
    uint64_t v21 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0) {
      LOBYTE(v21) = 1;
    }
    uint64_t v22 = 4 << v21;
    if ((a4 & 0x2000000000000000) != 0) {
      unint64_t v23 = HIBYTE(a4) & 0xF;
    }
    else {
      unint64_t v23 = a3 & 0xFFFFFFFFFFFFLL;
    }
    swift_bridgeObjectRetain();
    unint64_t v24 = a1;
    while (1)
    {
      char v25 = Substring.UTF8View.subscript.getter();
      if ((v24 & 0xC) == v22)
      {
        unint64_t v24 = _StringGuts._slowEnsureMatchingEncoding(_:)(v24, a3, a4);
        if ((a4 & 0x1000000000000000) != 0)
        {
LABEL_62:
          if (v23 <= v24 >> 16)
          {
            __break(1u);
LABEL_70:
            __break(1u);
            JUMPOUT(0x181F00FECLL);
          }
          unint64_t v24 = String.UTF8View._foreignIndex(after:)();
          char v26 = v25;
          if (v25 < 0) {
            goto LABEL_50;
          }
          goto LABEL_64;
        }
      }
      else if ((a4 & 0x1000000000000000) != 0)
      {
        goto LABEL_62;
      }
      unint64_t v24 = (v24 & 0xFFFFFFFFFFFF0000) + 65540;
      char v26 = v25;
      if (v25 < 0) {
        goto LABEL_50;
      }
LABEL_64:
      if ((UInt8.allowedURLComponents.getter(v26) & a5) == 0) {
        goto LABEL_50;
      }
      if (v10 == v24 >> 14)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
    }
  }
  if (a1 >> 14 != a2 >> 14)
  {
    uint64_t v13 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0) {
      LOBYTE(v13) = 1;
    }
    uint64_t v14 = 4 << v13;
    uint64_t v15 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0) {
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v31 = v15;
    char v30 = a5 & 0xF6;
    char v28 = a5 & 0xF7;
    int v29 = a5 & 0x76;
    char v27 = a5 & 0xD2;
    swift_bridgeObjectRetain();
    uint64_t v11 = 0;
    unint64_t v16 = a1;
    while (2)
    {
      unsigned __int8 v17 = Substring.UTF8View.subscript.getter();
      if ((v16 & 0xC) == v14)
      {
        unint64_t v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(v16, a3, a4);
        if ((a4 & 0x1000000000000000) == 0) {
          goto LABEL_15;
        }
      }
      else if ((a4 & 0x1000000000000000) == 0)
      {
LABEL_15:
        if ((v17 & 0x80) != 0) {
          goto LABEL_50;
        }
        unint64_t v16 = (v16 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_21:
        switch(v17)
        {
          case '!':
          case '$':
          case '\'':
          case '(':
          case ')':
          case '*':
          case ',':
LABEL_22:
            char v19 = v30;
            goto LABEL_23;
          case '%':
            if (v11) {
              goto LABEL_50;
            }
            uint64_t v11 = 2;
            if (v10 == v16 >> 14) {
              goto LABEL_67;
            }
            continue;
          case '&':
LABEL_28:
            if (!v29) {
              goto LABEL_50;
            }
            goto LABEL_43;
          case '+':
            char v19 = v28;
LABEL_23:
            if (!v19) {
              goto LABEL_50;
            }
            goto LABEL_43;
          case '-':
          case '.':
            goto LABEL_42;
          case '/':
LABEL_30:
            if (a5 <= 0xFu) {
              goto LABEL_50;
            }
            goto LABEL_43;
          default:
            if ((v17 - 58) <= 0xF5u)
            {
              switch(v17)
              {
                case ':':
                  char v19 = v27;
                  goto LABEL_23;
                case ';':
                  goto LABEL_22;
                case '=':
                  goto LABEL_28;
                case '?':
                  if (a5 <= 0x3Fu) {
                    goto LABEL_50;
                  }
                  goto LABEL_43;
                case '@':
                  goto LABEL_30;
                default:
                  if ((v17 - 91) > 0xE5u) {
                    break;
                  }
                  if (v17 == 95) {
                    goto LABEL_40;
                  }
                  if ((v17 - 123) > 0xE5u) {
                    break;
                  }
                  if (v17 != 126) {
                    goto LABEL_50;
                  }
LABEL_40:
                  if (a5 <= 1u) {
                    goto LABEL_50;
                  }
                  goto LABEL_43;
              }
            }
LABEL_42:
            if (!a5) {
              goto LABEL_50;
            }
LABEL_43:
            if (v11-- < 1)
            {
              uint64_t v11 = 0;
            }
            else if ((v17 - 58) <= 0xF5u {
                   && (v17 - 71) <= 0xF9u
            }
                   && (v17 <= 0x60u || v17 >= 0x67u))
            {
              goto LABEL_50;
            }
            if (v10 != v16 >> 14) {
              continue;
            }
LABEL_67:
            swift_bridgeObjectRelease();
            break;
        }
        return v11 == 0;
      }
      break;
    }
    if (v31 <= v16 >> 16) {
      goto LABEL_70;
    }
    uint64_t v18 = String.UTF8View._foreignIndex(after:)();
    if ((v17 & 0x80) != 0)
    {
LABEL_50:
      swift_bridgeObjectRelease();
      return 0;
    }
    unint64_t v16 = v18;
    goto LABEL_21;
  }
  uint64_t v11 = 0;
  return v11 == 0;
}

unint64_t specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(unint64_t a1, unint64_t a2)
{
  unint64_t result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100) != 0)
  {
LABEL_102:
    __break(1u);
  }
  else
  {
    if (result == 91)
    {
      uint64_t v2 = HIBYTE(a2) & 0xF;
      if ((a2 & 0x1000000000000000) == 0)
      {
        uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
        if ((a2 & 0x2000000000000000) != 0) {
          uint64_t v12 = HIBYTE(a2) & 0xF;
        }
        if (!v12)
        {
          __break(1u);
LABEL_38:
          unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a1, a2);
LABEL_9:
          if ((a2 & 0x2000000000000000) != 0) {
            unint64_t v13 = v2;
          }
          else {
            unint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
          }
          unint64_t v14 = result >> 16;
          if (result >> 16 >= v13)
          {
            __break(1u);
          }
          else if ((a2 & 0x1000000000000000) != 0)
          {
            if (String.UTF8View._foreignSubscript(position:)() == 93)
            {
              unint64_t v14 = String.UTF8View._foreignIndex(after:)();
              Swift::Int v16 = String.UTF8View._foreignCount()();
              if (__OFSUB__(v16, 1))
              {
LABEL_42:
                __break(1u);
                goto LABEL_43;
              }
              unint64_t v3 = MEMORY[0x185302230](15, v16 - 1, a1, a2);
              goto LABEL_24;
            }
          }
          else
          {
            if ((a2 & 0x2000000000000000) == 0)
            {
              if ((a1 & 0x1000000000000000) != 0) {
                uint64_t v15 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
              }
              else {
                uint64_t v15 = _StringObject.sharedUTF8.getter();
              }
              if (*(unsigned char *)(v15 + v14) != 93) {
                goto LABEL_40;
              }
              goto LABEL_23;
            }
            unint64_t v68 = a1;
            uint64_t v69 = a2 & 0xFFFFFFFFFFFFFFLL;
            if (*((unsigned char *)&v68 + v14) == 93)
            {
LABEL_23:
              unint64_t v14 = 65540;
              unint64_t v3 = (v13 << 16) - 65532;
LABEL_24:
              if (v3 >> 14 >= v14 >> 14)
              {
                swift_bridgeObjectRetain();
                unint64_t v4 = String.subscript.getter();
                unint64_t v6 = v17;
                unint64_t v5 = v18;
                unint64_t v3 = v19;
                unint64_t v20 = specialized Collection<>.firstIndex(of:)(0x25u, a1, a2);
                if (v21)
                {
                  char v22 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v4, v6, v5, v3, 2u, 0);
                  if (v22 == 2)
                  {
                    unint64_t v68 = v4;
                    uint64_t v69 = v6;
                    unint64_t v70 = v5;
                    unint64_t v71 = v3;
                    lazy protocol witness table accessor for type Substring and conformance Substring();
                    StringProtocol._ephemeralString.getter();
                    unint64_t v23 = (void *)String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    unint64_t v24 = (unsigned __int16 *)objc_msgSend(v23, sel__fastCharacterContents);
                    id v25 = v23;
                    if (v24)
                    {
                      unint64_t v68 = v4;
                      uint64_t v69 = v6;
                      unint64_t v70 = v5;
                      unint64_t v71 = v3;
                      StringProtocol._ephemeralString.getter();
                      char v26 = (void *)String._bridgeToObjectiveCImpl()();
                      swift_bridgeObjectRelease();
                      id v27 = objc_msgSend(v26, sel_length);
                      swift_unknownObjectRelease();
                      char v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v24, (uint64_t)v27, 2u, 0);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      swift_bridgeObjectRetain();
                      char v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v4, v6, v5, v3, 2u, 0);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease_n();
                    }
                  }
                  else
                  {
                    char v29 = v22;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    char v28 = v29 & 1;
                  }
                  return v28 & 1;
                }
                unint64_t v14 = v20;
                if ((v20 & 0xC) != v8)
                {
                  unint64_t v67 = v4;
                  if ((a2 & 0x1000000000000000) != 0)
                  {
LABEL_44:
                    if (v13 <= v20 >> 16)
                    {
                      __break(1u);
                      goto LABEL_65;
                    }
                    unint64_t v7 = String.UTF8View._foreignIndex(after:)();
LABEL_46:
                    unint64_t v4 = 4 * v13;
                    if (4 * v13 == v7 >> 14)
                    {
LABEL_61:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      char v28 = 0;
                      return v28 & 1;
                    }
                    unint64_t v3 = v6;
                    unint64_t v5 = v7 & 0xC;
                    unint64_t v30 = v7;
                    if (v5 != v8)
                    {
LABEL_49:
                      unint64_t v31 = v30 >> 16;
                      if (v30 >> 16 >= v13)
                      {
                        __break(1u);
                      }
                      else
                      {
                        if ((a2 & 0x1000000000000000) != 0)
                        {
                          char v32 = String.UTF8View._foreignSubscript(position:)();
                        }
                        else if ((a2 & 0x2000000000000000) != 0)
                        {
                          unint64_t v68 = a1;
                          uint64_t v69 = a2 & 0xFFFFFFFFFFFFFFLL;
                          char v32 = *((unsigned char *)&v68 + v31);
                        }
                        else if ((a1 & 0x1000000000000000) != 0)
                        {
                          char v32 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v30 >> 16));
                        }
                        else
                        {
                          char v32 = *(unsigned char *)(_StringObject.sharedUTF8.getter() + v31);
                        }
                        if (v32 != 50) {
                          goto LABEL_61;
                        }
                        unint64_t v31 = v3;
                        if (v5 != v8)
                        {
                          if ((a2 & 0x1000000000000000) == 0) {
                            goto LABEL_59;
                          }
                          goto LABEL_68;
                        }
                      }
                      unint64_t v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a1, a2);
                      if ((a2 & 0x1000000000000000) == 0)
                      {
LABEL_59:
                        unint64_t v7 = (v7 & 0xFFFFFFFFFFFF0000) + 65540;
                        if (v4 == v7 >> 14) {
                          goto LABEL_61;
                        }
                        goto LABEL_70;
                      }
LABEL_68:
                      if (v13 <= v7 >> 16)
                      {
                        __break(1u);
LABEL_97:
                        unint64_t v33 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a1, a2);
LABEL_71:
                        unint64_t v34 = v33 >> 16;
                        if (v33 >> 16 >= v13)
                        {
                          __break(1u);
                          goto LABEL_99;
                        }
                        if ((a2 & 0x1000000000000000) != 0)
                        {
                          char v36 = String.UTF8View._foreignSubscript(position:)();
                          goto LABEL_79;
                        }
                        if ((a2 & 0x2000000000000000) != 0)
                        {
                          unint64_t v68 = a1;
                          uint64_t v69 = a2 & 0xFFFFFFFFFFFFFFLL;
                          char v36 = *((unsigned char *)&v68 + v34);
                          goto LABEL_79;
                        }
                        if ((a1 & 0x1000000000000000) == 0) {
                          goto LABEL_100;
                        }
                        for (uint64_t i = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32; ; uint64_t i = _StringObject.sharedUTF8.getter())
                        {
                          char v36 = *(unsigned char *)(i + v34);
LABEL_79:
                          unint64_t v34 = v67;
                          if (v36 != 53) {
                            break;
                          }
                          if (v14 >> 14 >= v67 >> 14)
                          {
                            unint64_t v37 = Substring.subscript.getter();
                            unint64_t v39 = v38;
                            unint64_t v66 = v40;
                            unint64_t v42 = v41;
                            char v43 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v37, v38, v40, v41, 2u, 0);
                            if (v43 == 2)
                            {
                              unint64_t v68 = v37;
                              uint64_t v69 = v39;
                              unint64_t v70 = v66;
                              unint64_t v71 = v42;
                              lazy protocol witness table accessor for type Substring and conformance Substring();
                              StringProtocol._ephemeralString.getter();
                              id v44 = (void *)String._bridgeToObjectiveCImpl()();
                              swift_bridgeObjectRelease();
                              unint64_t v45 = (unsigned __int16 *)objc_msgSend(v44, sel__fastCharacterContents);
                              id v46 = v44;
                              if (v45)
                              {
                                unint64_t v68 = v37;
                                uint64_t v69 = v39;
                                unint64_t v70 = v66;
                                unint64_t v71 = v42;
                                unint64_t v47 = v45;
                                StringProtocol._ephemeralString.getter();
                                unint64_t v48 = (void *)String._bridgeToObjectiveCImpl()();
                                swift_bridgeObjectRelease();
                                id v49 = objc_msgSend(v48, sel_length);
                                swift_unknownObjectRelease();
                                BOOL v50 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v47, (uint64_t)v49, 2u, 0);
                                swift_bridgeObjectRelease();
                              }
                              else
                              {
                                swift_bridgeObjectRetain();
                                BOOL v50 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v37, v39, v66, v42, 2u, 0);
                                swift_bridgeObjectRelease_n();
                              }
                              if (!v50) {
                                goto LABEL_61;
                              }
                            }
                            else
                            {
                              char v51 = v43;
                              swift_bridgeObjectRelease();
                              if ((v51 & 1) == 0) {
                                goto LABEL_61;
                              }
                            }
                            swift_bridgeObjectRetain();
                            unint64_t result = Substring.index(after:)();
                            if (v31 >> 14 < result >> 14)
                            {
                              __break(1u);
                              goto LABEL_102;
                            }
                            unint64_t v52 = Substring.subscript.getter();
                            unint64_t v54 = v53;
                            unint64_t v56 = v55;
                            unint64_t v58 = v57;
                            char v59 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v52, v53, v55, v57, 8u, 1);
                            if (v59 == 2)
                            {
                              unint64_t v68 = v52;
                              uint64_t v69 = v54;
                              unint64_t v70 = v56;
                              unint64_t v71 = v58;
                              lazy protocol witness table accessor for type Substring and conformance Substring();
                              StringProtocol._ephemeralString.getter();
                              unint64_t v60 = (void *)String._bridgeToObjectiveCImpl()();
                              swift_bridgeObjectRelease();
                              uint64_t v61 = (unsigned __int16 *)objc_msgSend(v60, sel__fastCharacterContents);
                              id v62 = v60;
                              if (v61)
                              {
                                unint64_t v68 = v52;
                                uint64_t v69 = v54;
                                unint64_t v70 = v56;
                                unint64_t v71 = v58;
                                StringProtocol._ephemeralString.getter();
                                unint64_t v63 = (void *)String._bridgeToObjectiveCImpl()();
                                swift_bridgeObjectRelease();
                                id v64 = objc_msgSend(v63, sel_length);
                                swift_unknownObjectRelease();
                                char v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v61, (uint64_t)v64, 8u, 1);
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease_n();
                                swift_bridgeObjectRelease();
                                return v28 & 1;
                              }
                              swift_bridgeObjectRetain();
                              char v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v52, v54, v56, v58, 8u, 1);
                              swift_bridgeObjectRelease_n();
                              swift_bridgeObjectRelease_n();
                            }
                            else
                            {
                              char v65 = v59;
                              swift_bridgeObjectRelease_n();
                              swift_bridgeObjectRelease();
                              char v28 = v65 & 1;
                            }
                            swift_bridgeObjectRelease();
                            return v28 & 1;
                          }
LABEL_99:
                          __break(1u);
LABEL_100:
                          ;
                        }
                        goto LABEL_61;
                      }
                      unint64_t v7 = String.UTF8View._foreignIndex(after:)();
                      if (v4 == v7 >> 14) {
                        goto LABEL_61;
                      }
LABEL_70:
                      unint64_t v33 = v7;
                      if ((v7 & 0xC) != v8) {
                        goto LABEL_71;
                      }
                      goto LABEL_97;
                    }
LABEL_65:
                    unint64_t v30 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a1, a2);
                    goto LABEL_49;
                  }
LABEL_28:
                  unint64_t v7 = (v20 & 0xFFFFFFFFFFFF0000) + 65540;
                  goto LABEL_46;
                }
LABEL_43:
                unint64_t v20 = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
                unint64_t v67 = v4;
                if ((a2 & 0x1000000000000000) != 0) {
                  goto LABEL_44;
                }
                goto LABEL_28;
              }
              goto LABEL_41;
            }
          }
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        unint64_t result = (v12 << 16) - 65532;
        unint64_t v3 = 1;
LABEL_8:
        uint64_t v8 = 4 << v3;
        if ((result & 0xC) != 4 << v3) {
          goto LABEL_9;
        }
        goto LABEL_38;
      }
    }
    else
    {
      __break(1u);
    }
    unint64_t result = String.UTF8View._foreignCount()();
    if (!__OFSUB__(result, 1))
    {
      unint64_t v3 = (a1 >> 59) & 1;
      unint64_t result = MEMORY[0x185302230](15, result - 1, a1, a2);
      goto LABEL_8;
    }
  }
  __break(1u);
  return result;
}

uint64_t URLResourceValues.localizedName.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E4F1C6C8]);
}

uint64_t specialized URLResourceValues._get<A>(_:)(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    id v3 = a1;
    uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if (v5)
    {
      outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v4, (uint64_t)&v7);
    }
    else
    {
      long long v7 = 0u;
      long long v8 = 0u;
    }
  }
  else
  {
    long long v7 = 0u;
    long long v8 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  if (swift_dynamicCast()) {
    return v9;
  }
  else {
    return 0;
  }
}

{
  id v3;
  uint64_t v4;
  char v5;
  long long v7;
  long long v8;
  uint64_t v9;

  if (*(void *)(a2 + 16))
  {
    id v3 = a1;
    uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
    if (v5)
    {
      outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v4, (uint64_t)&v7);
    }
    else
    {
      long long v7 = 0u;
      long long v8 = 0u;
    }
  }
  else
  {
    long long v7 = 0u;
    long long v8 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSFileSecurity);
  if (swift_dynamicCast()) {
    return v9;
  }
  else {
    return 0;
  }
}

id URLResourceValues._get(_:)(void *a1)
{
  uint64_t v2 = *v1;
  if (!*(void *)(v2 + 16))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    goto LABEL_8;
  }
  id v3 = a1;
  uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v5 & 1) == 0)
  {
    long long v9 = 0u;
    long long v10 = 0u;

    goto LABEL_8;
  }
  outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v4, (uint64_t)&v9);

  if (!*((void *)&v10 + 1))
  {
LABEL_8:
    outlined destroy of Any?((uint64_t)&v9);
    return 0;
  }
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  id v6 = objc_msgSend(v8, sel_integerValue);

  return v6;
}

uint64_t URLResourceValues._set(_:newValue:)(void *a1, uint64_t a2, char a3)
{
  id v5 = a1;
  specialized Set._Variant.insert(_:)(&v11, v5);

  if (a3)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    id v9 = v5;
  }
  else
  {
    id v6 = objc_allocWithZone((Class)NSNumber);
    id v7 = v5;
    id v8 = objc_msgSend(v6, sel_initWithInteger_, a2);
    *((void *)&v12 + 1) = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    *(void *)&long long v11 = v8;
    id v9 = v7;
  }
  return specialized Dictionary.subscript.setter((uint64_t)&v11, v9);
}

uint64_t URLResourceValues.name.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E4F1C6E8]);
}

uint64_t URLResourceValues.name.setter(uint64_t a1, uint64_t a2)
{
  specialized URLResourceValues.name.setter(a1, a2, MEMORY[0x1E4F1C6E8]);

  return swift_bridgeObjectRelease();
}

uint64_t (*URLResourceValues.name.modify(void *a1))()
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x50uLL);
  id v5 = v4;
  *a1 = v4;
  id v6 = v4 + 3;
  uint64_t v7 = *v1;
  id v8 = (void *)*MEMORY[0x1E4F1C6E8];
  *((void *)v4 + 8) = v2;
  *((void *)v4 + 9) = v8;
  if (*(void *)(v7 + 16))
  {
    id v9 = v8;
    uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    if (v11)
    {
      outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v10, (uint64_t)v5);
    }
    else
    {
      *id v5 = 0u;
      v5[1] = 0u;
    }
  }
  else
  {
    _OWORD *v4 = 0u;
    v4[1] = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  int v12 = swift_dynamicCast();
  long long v13 = 0uLL;
  if (v12) {
    long long v13 = *v6;
  }
  v5[2] = v13;
  return URLResourceValues.name.modify;
}

uint64_t URLResourceValues.isRegularFile.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C670]);
}

uint64_t URLResourceValues.isSymbolicLink.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C680]);
}

uint64_t URLResourceValues.isVolume.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C6A0]);
}

uint64_t URLResourceValues.isPackage.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C658]);
}

uint64_t URLResourceValues.isPackage.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E4F1C658], a1);
}

uint64_t (*URLResourceValues.isPackage.modify(uint64_t a1))()
{
  id v3 = (void *)*MEMORY[0x1E4F1C658];
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.isApplication.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C618]);
}

uint64_t URLResourceValues.isSystemImmutable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C688]);
}

uint64_t URLResourceValues.isUserImmutable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C698]);
}

uint64_t URLResourceValues.isUserImmutable.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E4F1C698], a1);
}

uint64_t (*URLResourceValues.isUserImmutable.modify(uint64_t a1))()
{
  id v3 = (void *)*MEMORY[0x1E4F1C698];
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.isHidden.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C648]);
}

uint64_t URLResourceValues.isHidden.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E4F1C648], a1);
}

uint64_t (*URLResourceValues.isHidden.modify(uint64_t a1))()
{
  id v3 = (void *)*MEMORY[0x1E4F1C648];
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.hasHiddenExtension.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C608]);
}

uint64_t URLResourceValues.hasHiddenExtension.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E4F1C608], a1);
}

uint64_t (*URLResourceValues.hasHiddenExtension.modify(uint64_t a1))()
{
  id v3 = (void *)*MEMORY[0x1E4F1C608];
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.creationDate.setter(uint64_t a1)
{
  return URLResourceValues.creationDate.setter(a1, MEMORY[0x1E4F1C540]);
}

uint64_t (*URLResourceValues.creationDate.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  URLResourceValues.creationDate.getter(a1);
  return URLResourceValues.creationDate.modify;
}

uint64_t URLResourceValues.creationDate.modify(uint64_t a1)
{
  double v1 = *(double *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  id v3 = (id)*MEMORY[0x1E4F1C540];
  specialized Set._Variant.insert(_:)(&v6, v3);

  if (v2)
  {
    long long v6 = 0u;
    long long v7 = 0u;
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v1);
    *((void *)&v7 + 1) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDate);
    *(void *)&long long v6 = v4;
  }
  return specialized Dictionary.subscript.setter((uint64_t)&v6, v3);
}

uint64_t URLResourceValues.contentAccessDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x1E4F1C528], a1);
}

uint64_t URLResourceValues.contentAccessDate.setter(uint64_t a1)
{
  return URLResourceValues.creationDate.setter(a1, MEMORY[0x1E4F1C528]);
}

uint64_t URLResourceValues.creationDate.setter(uint64_t a1, id *a2)
{
  double v2 = *(double *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  id v4 = *a2;
  specialized Set._Variant.insert(_:)(&v7, v4);

  if (v3)
  {
    long long v7 = 0u;
    long long v8 = 0u;
  }
  else
  {
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v2);
    *((void *)&v8 + 1) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDate);
    *(void *)&long long v7 = v5;
  }
  return specialized Dictionary.subscript.setter((uint64_t)&v7, v4);
}

uint64_t (*URLResourceValues.contentAccessDate.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  URLResourceValues.contentAccessDate.getter(a1);
  return URLResourceValues.contentAccessDate.modify;
}

uint64_t URLResourceValues.contentAccessDate.modify(uint64_t a1)
{
  double v1 = *(double *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  id v3 = (id)*MEMORY[0x1E4F1C528];
  specialized Set._Variant.insert(_:)(&v6, v3);

  if (v2)
  {
    long long v6 = 0u;
    long long v7 = 0u;
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v1);
    *((void *)&v7 + 1) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDate);
    *(void *)&long long v6 = v4;
  }
  return specialized Dictionary.subscript.setter((uint64_t)&v6, v3);
}

uint64_t URLResourceValues.contentModificationDate.setter(uint64_t a1)
{
  return URLResourceValues.creationDate.setter(a1, MEMORY[0x1E4F1C530]);
}

uint64_t (*URLResourceValues.contentModificationDate.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  URLResourceValues.contentModificationDate.getter(a1);
  return URLResourceValues.contentModificationDate.modify;
}

uint64_t URLResourceValues.contentModificationDate.modify(uint64_t a1)
{
  double v1 = *(double *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  id v3 = (id)*MEMORY[0x1E4F1C530];
  specialized Set._Variant.insert(_:)(&v6, v3);

  if (v2)
  {
    long long v6 = 0u;
    long long v7 = 0u;
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v1);
    *((void *)&v7 + 1) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDate);
    *(void *)&long long v6 = v4;
  }
  return specialized Dictionary.subscript.setter((uint64_t)&v6, v3);
}

uint64_t URLResourceValues.attributeModificationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x1E4F1C518], a1);
}

id URLResourceValues.linkCount.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E4F1C6B8]);
}

uint64_t URLResourceValues.localizedTypeDescription.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E4F1C6D0]);
}

id URLResourceValues.labelNumber.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E4F1C6B0]);
}

uint64_t key path getter for URLResourceValues.labelNumber : URLResourceValues@<X0>(uint64_t a1@<X8>)
{
  char v2 = (void *)*MEMORY[0x1E4F1C6B0];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = URLResourceValues._get(_:)(v2);
  LOBYTE(v2) = v4;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v2 & 1;
  return result;
}

uint64_t URLResourceValues.labelNumber.setter(uint64_t a1, char a2)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E4F1C6B0], a1, a2 & 1);
}

uint64_t (*URLResourceValues.labelNumber.modify(uint64_t a1))(uint64_t a1)
{
  id v3 = (void *)*MEMORY[0x1E4F1C6B0];
  *(void *)(a1 + 16) = v1;
  *(void *)(a1 + 24) = v3;
  *(void *)a1 = URLResourceValues._get(_:)(v3);
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return URLResourceValues.labelNumber.modify;
}

uint64_t URLResourceValues.labelNumber.modify(uint64_t a1)
{
  return URLResourceValues._set(_:newValue:)(*(void **)(a1 + 24), *(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t URLResourceValues.localizedLabel.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E4F1C6C0]);
}

uint64_t URLResourceValues.fileResourceIdentifier.getter()
{
  return URLResourceValues.fileResourceIdentifier.getter(MEMORY[0x1E4F1C5A0]);
}

uint64_t URLResourceValues.volumeIdentifier.getter()
{
  return URLResourceValues.fileResourceIdentifier.getter(MEMORY[0x1E4F1C820]);
}

uint64_t URLResourceValues.fileIdentifier.getter()
{
  return URLResourceValues.fileIdentifier.getter(MEMORY[0x1E4F1C568]);
}

uint64_t URLResourceValues.fileContentIdentifier.getter()
{
  return URLResourceValues.fileIdentifier.getter(MEMORY[0x1E4F1C560]);
}

id URLResourceValues.preferredIOBlockSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E4F1C708]);
}

uint64_t URLResourceValues.isReadable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C668]);
}

uint64_t URLResourceValues.isWritable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C6A8]);
}

uint64_t URLResourceValues.isExecutable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C640]);
}

uint64_t URLResourceValues.fileSecurity.getter()
{
  return URLResourceValues.fileSecurity.getter(MEMORY[0x1E4F1C5E8], &lazy cache variable for type metadata for NSFileSecurity);
}

uint64_t key path getter for URLResourceValues.fileSecurity : URLResourceValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = (void *)*MEMORY[0x1E4F1C5E8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized URLResourceValues._get<A>(_:)(v4, v3);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

void URLResourceValues.fileSecurity.setter(void *a1)
{
  specialized URLResourceValues.fileSecurity.setter(a1);
}

void (*URLResourceValues.fileSecurity.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1 = v3;
  v3[6] = v1;
  uint64_t v5 = *v1;
  if (*(void *)(v5 + 16))
  {
    id v6 = (id)*MEMORY[0x1E4F1C5E8];
    uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if (v8)
    {
      outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v7, v4);
    }
    else
    {
      *(_OWORD *)uint64_t v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSFileSecurity);
  int v9 = swift_dynamicCast();
  uint64_t v10 = *(void *)(v4 + 40);
  if (!v9) {
    uint64_t v10 = 0;
  }
  *(void *)(v4 + 32) = v10;
  return URLResourceValues.fileSecurity.modify;
}

void URLResourceValues.fileSecurity.modify(uint64_t a1, char a2)
{
  char v2 = *(void **)a1;
  uint64_t v4 = (void **)(*(void *)a1 + 32);
  uint64_t v3 = *v4;
  if (a2)
  {
    id v5 = v3;
    specialized URLResourceValues.fileSecurity.setter(v3);

    uint64_t v3 = *v4;
  }
  else
  {
    specialized URLResourceValues.fileSecurity.setter(*(void **)(*(void *)a1 + 32));
  }

  free(v2);
}

uint64_t URLResourceValues.isExcludedFromBackup.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C630]);
}

uint64_t (*URLResourceValues.isExcludedFromBackup.modify(uint64_t a1))()
{
  uint64_t v3 = (void *)*MEMORY[0x1E4F1C630];
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.path.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E4F1C700]);
}

uint64_t URLResourceValues.canonicalPath.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E4F1C520]);
}

uint64_t URLResourceValues.isMountTrigger.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C650]);
}

id URLResourceValues.documentIdentifier.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E4F1C550]);
}

uint64_t URLResourceValues.addedToDirectoryDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x1E4F1C508], a1);
}

uint64_t URLResourceValues.mayHaveExtendedAttributes.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C6D8]);
}

uint64_t URLResourceValues.isPurgeable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C660]);
}

uint64_t URLResourceValues.isSparse.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C678]);
}

uint64_t URLResourceValues.mayShareFileContent.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C6E0]);
}

uint64_t URLResourceValues.fileResourceType.getter()
{
  return URLResourceValues.fileProtection.getter(MEMORY[0x1E4F1C5C0], type metadata accessor for NSURLFileResourceType);
}

uint64_t URLResourceValues.fileProtection.getter(id *a1, void (*a2)(void))
{
  uint64_t v4 = *v2;
  if (*(void *)(v4 + 16))
  {
    id v5 = *a1;
    uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v7)
    {
      outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v9);
    }
    else
    {
      long long v9 = 0u;
      long long v10 = 0u;
    }
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  a2(0);
  if (swift_dynamicCast()) {
    return v11;
  }
  else {
    return 0;
  }
}

id URLResourceValues.directoryEntryCount.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E4F1C548]);
}

uint64_t URLResourceValues.volumeLocalizedFormatDescription.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E4F1C878]);
}

id URLResourceValues.volumeTotalCapacity.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E4F1C948]);
}

id URLResourceValues.volumeAvailableCapacity.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E4F1C810]);
}

uint64_t URLResourceValues.volumeAvailableCapacityForImportantUsage.getter()
{
  return URLResourceValues.fileIdentifier.getter(MEMORY[0x1E4F1C800]);
}

id URLResourceValues.volumeResourceCount.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E4F1C8A0]);
}

uint64_t URLResourceValues.volumeSupportsPersistentIDs.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C908]);
}

uint64_t URLResourceValues.volumeSupportsSymbolicLinks.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C930]);
}

uint64_t URLResourceValues.volumeSupportsHardLinks.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C8F0]);
}

uint64_t URLResourceValues.volumeSupportsJournaling.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C900]);
}

uint64_t URLResourceValues.volumeIsJournaling.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C850]);
}

uint64_t URLResourceValues.volumeSupportsSparseFiles.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C920]);
}

uint64_t URLResourceValues.volumeSupportsZeroRuns.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C940]);
}

uint64_t URLResourceValues.volumeSupportsRootDirectoryDates.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C918]);
}

uint64_t URLResourceValues.volumeSupportsVolumeSizes.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C938]);
}

uint64_t URLResourceValues.volumeSupportsRenaming.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C910]);
}

uint64_t URLResourceValues.volumeSupportsAdvisoryFileLocking.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C8B8]);
}

uint64_t URLResourceValues.volumeSupportsExtendedSecurity.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C8E0]);
}

uint64_t URLResourceValues.volumeIsBrowsable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C830]);
}

id URLResourceValues.volumeMaximumFileSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E4F1C888]);
}

uint64_t URLResourceValues.volumeIsEjectable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C838]);
}

uint64_t URLResourceValues.volumeIsRemovable.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C868]);
}

uint64_t URLResourceValues.volumeIsInternal.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C848]);
}

uint64_t URLResourceValues.volumeIsAutomounted.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C828]);
}

uint64_t URLResourceValues.volumeIsLocal.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C858]);
}

uint64_t URLResourceValues.volumeIsReadOnly.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C860]);
}

uint64_t URLResourceValues.volumeCreationDate.getter@<X0>(uint64_t a1@<X8>)
{
  return URLResourceValues.creationDate.getter(MEMORY[0x1E4F1C818], a1);
}

uint64_t URLResourceValues.volumeURLForRemounting.getter@<X0>(void *a1@<X8>)
{
  return URLResourceValues.parentDirectory.getter(MEMORY[0x1E4F1C958], a1);
}

uint64_t URLResourceValues.volumeUUIDString.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E4F1C968]);
}

uint64_t URLResourceValues.volumeName.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E4F1C898]);
}

uint64_t key path getter for URLResourceValues.name : URLResourceValues@<X0>(uint64_t *a1@<X0>, void **a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *a1;
  id v5 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized URLResourceValues._get<A>(_:)(v5, v4);
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v6;
  a3[1] = v8;
  return result;
}

uint64_t key path setter for URLResourceValues.name : URLResourceValues(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, id *a5)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  specialized URLResourceValues.name.setter(v6, v7, a5);

  return swift_bridgeObjectRelease();
}

uint64_t URLResourceValues.volumeName.setter(uint64_t a1, uint64_t a2)
{
  specialized URLResourceValues.name.setter(a1, a2, MEMORY[0x1E4F1C898]);

  return swift_bridgeObjectRelease();
}

uint64_t (*URLResourceValues.volumeName.modify(void *a1))()
{
  char v2 = v1;
  uint64_t v4 = malloc(0x50uLL);
  id v5 = v4;
  *a1 = v4;
  uint64_t v6 = v4 + 3;
  uint64_t v7 = *v1;
  uint64_t v8 = (void *)*MEMORY[0x1E4F1C898];
  *((void *)v4 + 8) = v2;
  *((void *)v4 + 9) = v8;
  if (*(void *)(v7 + 16))
  {
    id v9 = v8;
    uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    if (v11)
    {
      outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v10, (uint64_t)v5);
    }
    else
    {
      *id v5 = 0u;
      v5[1] = 0u;
    }
  }
  else
  {
    _OWORD *v4 = 0u;
    v4[1] = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  int v12 = swift_dynamicCast();
  long long v13 = 0uLL;
  if (v12) {
    long long v13 = *v6;
  }
  v5[2] = v13;
  return URLResourceValues.name.modify;
}

void URLResourceValues.name.modify(id **a1, char a2)
{
  char v2 = *a1;
  id v3 = (*a1)[5];
  id v4 = (*a1)[9];
  if (a2)
  {
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v7, v4);

    if (v3)
    {
      uint64_t v5 = String._bridgeToObjectiveCImpl()();
      *((void *)&v8 + 1) = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
      *(void *)&long long v7 = v5;
    }
    else
    {
      long long v7 = 0u;
      long long v8 = 0u;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v7, v2[9]);
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Set._Variant.insert(_:)(&v7, v4);

    if (v3)
    {
      uint64_t v6 = String._bridgeToObjectiveCImpl()();
      *((void *)&v8 + 1) = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
      *(void *)&long long v7 = v6;
    }
    else
    {
      long long v7 = 0u;
      long long v8 = 0u;
    }
    specialized Dictionary.subscript.setter((uint64_t)&v7, v2[9]);
  }
  swift_bridgeObjectRelease();

  free(v2);
}

uint64_t URLResourceValues.volumeLocalizedName.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E4F1C880]);
}

uint64_t URLResourceValues.volumeIsEncrypted.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C840]);
}

uint64_t URLResourceValues.volumeIsRootFileSystem.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C870]);
}

uint64_t URLResourceValues.volumeSupportsCompression.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C8D0]);
}

uint64_t URLResourceValues.volumeSupportsFileCloning.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C8E8]);
}

uint64_t URLResourceValues.volumeSupportsSwapRenaming.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C928]);
}

uint64_t URLResourceValues.volumeSupportsExclusiveRenaming.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C8D8]);
}

uint64_t URLResourceValues.volumeSupportsImmutableFiles.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C8F8]);
}

uint64_t URLResourceValues.volumeSupportsAccessPermissions.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C8B0]);
}

uint64_t URLResourceValues.volumeTypeName.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E4F1C950]);
}

id URLResourceValues.volumeSubtype.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E4F1C8A8]);
}

uint64_t URLResourceValues.volumeMountFromLocation.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E4F1C890]);
}

uint64_t URLResourceValues.isUbiquitousItem.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C690]);
}

uint64_t URLResourceValues.ubiquitousItemHasUnresolvedConflicts.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C768]);
}

uint64_t URLResourceValues.ubiquitousItemIsDownloading.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C778]);
}

uint64_t URLResourceValues.ubiquitousItemIsUploaded.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C790]);
}

uint64_t URLResourceValues.ubiquitousItemIsUploading.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C798]);
}

uint64_t URLResourceValues.ubiquitousItemDownloadingStatus.getter()
{
  return URLResourceValues.fileProtection.getter(MEMORY[0x1E4F1C758], type metadata accessor for NSURLUbiquitousItemDownloadingStatus);
}

uint64_t URLResourceValues.ubiquitousItemDownloadingError.getter()
{
  return URLResourceValues.fileSecurity.getter(MEMORY[0x1E4F1C740], (unint64_t *)&lazy cache variable for type metadata for NSError);
}

uint64_t URLResourceValues.fileSecurity.getter(id *a1, unint64_t *a2)
{
  uint64_t v4 = *v2;
  if (*(void *)(v4 + 16))
  {
    id v5 = *a1;
    uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v7)
    {
      outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v9);
    }
    else
    {
      long long v9 = 0u;
      long long v10 = 0u;
    }
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for NSMorphologyPronoun(0, a2);
  if (swift_dynamicCast()) {
    return v11;
  }
  else {
    return 0;
  }
}

uint64_t URLResourceValues.ubiquitousItemUploadingError.getter()
{
  return URLResourceValues.fileSecurity.getter(MEMORY[0x1E4F1C7A0], (unint64_t *)&lazy cache variable for type metadata for NSError);
}

uint64_t URLResourceValues.ubiquitousItemDownloadRequested.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C738]);
}

uint64_t URLResourceValues.ubiquitousItemContainerDisplayName.getter()
{
  return URLResourceValues.localizedName.getter(MEMORY[0x1E4F1C730]);
}

uint64_t URLResourceValues.ubiquitousItemIsExcludedFromSync.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C780]);
}

uint64_t key path getter for URLResourceValues.isPackage : URLResourceValues@<X0>(void **a1@<X3>, unsigned char *a2@<X8>)
{
  id v3 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v4 = URLResourceValues._get(_:)(v3);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t URLResourceValues.ubiquitousItemIsExcludedFromSync.setter(unsigned __int8 a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E4F1C780], a1);
}

uint64_t (*URLResourceValues.ubiquitousItemIsExcludedFromSync.modify(uint64_t a1))()
{
  id v3 = (void *)*MEMORY[0x1E4F1C780];
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = URLResourceValues._get(_:)(v3);
  return URLResourceValues.isPackage.modify;
}

uint64_t URLResourceValues.isPackage.modify(uint64_t a1)
{
  return URLResourceValues._set(_:newValue:)(*(void **)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t URLResourceValues.ubiquitousItemIsShared.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C788]);
}

uint64_t URLResourceValues.ubiquitousSharedItemCurrentUserRole.getter()
{
  return URLResourceValues.fileProtection.getter(MEMORY[0x1E4F1C7B0], type metadata accessor for NSURLUbiquitousSharedItemRole);
}

uint64_t URLResourceValues.ubiquitousSharedItemCurrentUserPermissions.getter()
{
  return URLResourceValues.fileProtection.getter(MEMORY[0x1E4F1C7A8], type metadata accessor for NSURLUbiquitousSharedItemPermissions);
}

uint64_t URLResourceValues.ubiquitousSharedItemOwnerNameComponents.getter@<X0>(void *a1@<X8>)
{
  return URLResourceValues.ubiquitousSharedItemOwnerNameComponents.getter(MEMORY[0x1E4F1C7C0], a1);
}

uint64_t URLResourceValues.ubiquitousSharedItemMostRecentEditorNameComponents.getter@<X0>(void *a1@<X8>)
{
  return URLResourceValues.ubiquitousSharedItemOwnerNameComponents.getter(MEMORY[0x1E4F1C7B8], a1);
}

uint64_t URLResourceValues.ubiquitousSharedItemOwnerNameComponents.getter@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  if (*(void *)(v4 + 16))
  {
    id v5 = *a1;
    uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v7)
    {
      outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v9);
    }
    else
    {
      long long v9 = 0u;
      long long v10 = 0u;
    }
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
    *a2 = 0;
  }
  return result;
}

uint64_t URLResourceValues.fileProtection.getter()
{
  return URLResourceValues.fileProtection.getter(MEMORY[0x1E4F1C590], type metadata accessor for NSURLFileProtectionType);
}

id URLResourceValues.fileSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E4F1C5F8]);
}

id URLResourceValues.fileAllocatedSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E4F1C558]);
}

id URLResourceValues.totalFileSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E4F1C720]);
}

id URLResourceValues.totalFileAllocatedSize.getter()
{
  return URLResourceValues.linkCount.getter(MEMORY[0x1E4F1C718]);
}

id URLResourceValues.linkCount.getter(void **a1)
{
  return URLResourceValues._get(_:)(*a1);
}

uint64_t URLResourceValues.isAliasFile.getter()
{
  return URLResourceValues._get(_:)((void *)*MEMORY[0x1E4F1C610]);
}

void URL.init(string:encodingInvalidCharacters:)(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  if (!_foundation_swift_url_feature_enabled())
  {
    uint64_t v12 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v12)
    {
      id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB10]), sel_initWithString_encodingInvalidCharacters_, String._bridgeToObjectiveCImpl()(), a3 & 1);
      swift_unknownObjectRelease();
      if (v13)
      {
        uint64_t v11 = (uint64_t)static URL._converted(from:)(v13);

        Swift::Int v9 = 0;
        goto LABEL_9;
      }
    }
LABEL_10:
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_11;
  }
  Swift::Int v8 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(a1, a2, a3 & 1);
  if (!v8) {
    goto LABEL_10;
  }
  Swift::Int v9 = v8;
  uint64_t v10 = swift_retain();
  uint64_t v11 = specialized static URL._cfURL(from:baseURL:)(v10);
  swift_release();
LABEL_9:
  *a4 = v11;
  a4[1] = v9;
LABEL_11:
  a4[2] = 0;
}

void URL.init(fileURLWithPath:isDirectory:relativeTo:)(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  Swift::Int v9 = *(void **)a4;
  uint64_t v10 = *(void *)(a4 + 8);
  uint64_t v11 = *(void *)(a4 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    BOOL v18 = (a3 & 1) == 0;
    v17[0] = v9;
    v17[1] = v10;
    void v17[2] = v11;
    swift_bridgeObjectRetain();
    outlined copy of URL?((uint64_t)v9);
    URL.init(filePath:directoryHint:relativeTo:)(a1, a2, (unsigned __int8 *)&v18, (uint64_t)v17, &v19);
    uint64_t v12 = v19;
    long long v13 = v20;
  }
  else
  {
    uint64_t v14 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v14) {
      swift_bridgeObjectRetain();
    }
    uint64_t v15 = String._bridgeToObjectiveCImpl()();
    outlined copy of URL?((uint64_t)v9);
    swift_bridgeObjectRelease();
    if (v9)
    {
      swift_release();
      swift_release();
    }
    id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB10]), sel_initFileURLWithPath_isDirectory_relativeToURL_, v15, a3 & 1, v9);
    swift_unknownObjectRelease();

    uint64_t v12 = static URL._converted(from:)(v16);
    long long v13 = 0uLL;
  }
  *(void *)a5 = v12;
  *(_OWORD *)(a5 + 8) = v13;
}

void URL.init(fileURLWithPath:relativeTo:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7 = *(void **)a3;
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(a3 + 16);
  if (_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v16 = 2;
    v15[0] = v7;
    v15[1] = v8;
    v15[2] = v9;
    swift_bridgeObjectRetain();
    outlined copy of URL?((uint64_t)v7);
    URL.init(filePath:directoryHint:relativeTo:)(a1, a2, &v16, (uint64_t)v15, &v17);
    uint64_t v10 = v17;
    long long v11 = v18;
  }
  else
  {
    uint64_t v12 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (v12) {
      swift_bridgeObjectRetain();
    }
    uint64_t v13 = String._bridgeToObjectiveCImpl()();
    outlined copy of URL?((uint64_t)v7);
    swift_bridgeObjectRelease();
    if (v7)
    {
      swift_release();
      swift_release();
    }
    id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB10]), sel_initFileURLWithPath_relativeToURL_, v13, v7);
    swift_unknownObjectRelease();

    uint64_t v10 = static URL._converted(from:)(v14);
    long long v11 = 0uLL;
  }
  *(void *)a4 = v10;
  *(_OWORD *)(a4 + 8) = v11;
}

void URL.init(dataRepresentation:relativeTo:isAbsolute:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void **a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  unint64_t v7 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((int)a1 == a1 >> 32) {
        goto LABEL_30;
      }
      goto LABEL_7;
    case 2uLL:
      if (*(void *)(a1 + 16) != *(void *)(a1 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_30;
    case 3uLL:
      goto LABEL_30;
    default:
      if ((a2 & 0xFF000000000000) == 0) {
        goto LABEL_30;
      }
LABEL_7:
      if (!_foundation_swift_url_feature_enabled())
      {
        if (a4)
        {
          if (!v7)
          {
            char v43 = (void *)a1;
            LOWORD(v44) = a2;
            BYTE2(v44) = BYTE2(a2);
            BYTE3(v44) = BYTE3(a2);
            BYTE4(v44) = BYTE4(a2);
            BYTE5(v44) = BYTE5(a2);
            id v30 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
            outlined copy of URL?((uint64_t)v6);
            long long v20 = (char *)objc_msgSend(v30, sel_initWithBytes_length_, &v43, BYTE6(a2));
LABEL_34:
            unint64_t v31 = v20;
            if (!v6)
            {
LABEL_36:
              id v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB10]), sel_initAbsoluteURLWithDataRepresentation_relativeToURL_, v31, v6);
LABEL_43:
              char v36 = v32;
              outlined consume of Data._Representation(a1, a2);

              unint64_t v37 = static URL._converted(from:)(v36);
              a5[1] = 0;
              a5[2] = 0;
              *a5 = v37;
              return;
            }
LABEL_35:
            swift_release();
            swift_release();
            goto LABEL_36;
          }
          if (v7 != 1)
          {
            uint64_t v33 = *(void *)(a1 + 16);
            uint64_t v34 = *(void *)(a1 + 24);
            outlined copy of Data._Representation(a1, a2);
            outlined copy of URL?((uint64_t)v6);
            swift_retain();
            swift_retain();
            unint64_t v31 = __DataStorage.bridgedReference(_:)(v33, v34);
            swift_release();
            swift_release();
            if (!v6) {
              goto LABEL_36;
            }
            goto LABEL_35;
          }
          if (a1 >> 32 >= (int)a1)
          {
            outlined copy of Data._Representation(a1, a2);
            outlined copy of URL?((uint64_t)v6);
            long long v20 = __DataStorage.bridgedReference(_:)((int)a1, a1 >> 32);
            goto LABEL_34;
          }
          __break(1u);
LABEL_47:
          __break(1u);
        }
        if (v7)
        {
          if (v7 != 1)
          {
            uint64_t v38 = *(void *)(a1 + 16);
            uint64_t v39 = *(void *)(a1 + 24);
            outlined copy of Data._Representation(a1, a2);
            outlined copy of URL?((uint64_t)v6);
            swift_retain();
            swift_retain();
            unint64_t v31 = __DataStorage.bridgedReference(_:)(v38, v39);
            swift_release();
            swift_release();
            if (!v6) {
              goto LABEL_42;
            }
            goto LABEL_41;
          }
          if (a1 >> 32 < (int)a1) {
            goto LABEL_47;
          }
          outlined copy of Data._Representation(a1, a2);
          outlined copy of URL?((uint64_t)v6);
          unint64_t v23 = __DataStorage.bridgedReference(_:)((int)a1, a1 >> 32);
        }
        else
        {
          char v43 = (void *)a1;
          LOWORD(v44) = a2;
          BYTE2(v44) = BYTE2(a2);
          BYTE3(v44) = BYTE3(a2);
          BYTE4(v44) = BYTE4(a2);
          BYTE5(v44) = BYTE5(a2);
          id v35 = objc_allocWithZone(MEMORY[0x1E4F1C9B8]);
          outlined copy of URL?((uint64_t)v6);
          unint64_t v23 = (char *)objc_msgSend(v35, sel_initWithBytes_length_, &v43, BYTE6(a2));
        }
        unint64_t v31 = v23;
        if (!v6)
        {
LABEL_42:
          id v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB10]), sel_initWithDataRepresentation_relativeToURL_, v31, v6);
          goto LABEL_43;
        }
LABEL_41:
        swift_release();
        swift_release();
        goto LABEL_42;
      }
      long long v11 = specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
      if (v12 == 1)
      {
        outlined copy of Data._Representation(a1, a2);
        uint64_t v13 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
        id v14 = (unsigned __int8 *)(v13 + 32);
        uint64_t v15 = *(void *)(v13 + 16);
        uint64_t v16 = static String._tryFromUTF8(_:)();
        if (v17)
        {
          long long v18 = (void (*)(unsigned char *, void))v16;
          unint64_t v19 = v17;
          swift_release();
          outlined consume of Data._Representation(a1, a2);
          goto LABEL_17;
        }
        long long v18 = specialized String.init<A, B>(_validating:as:)(v14, v15);
        unint64_t v19 = v24;
        swift_release();
        outlined consume of Data._Representation(a1, a2);
        if (!v19)
        {
LABEL_24:
          uint64_t v22 = 0;
          goto LABEL_25;
        }
      }
      else
      {
        long long v18 = v11;
        unint64_t v19 = v12;
        if (!v12) {
          goto LABEL_24;
        }
      }
LABEL_17:
      id v40 = 0;
      unint64_t v41 = 0;
      uint64_t v42 = 0;
      URL.init(string:relativeTo:)((uint64_t)v18, v19, &v40, (uint64_t *)&v43);
      swift_bridgeObjectRelease();
      char v21 = v43;
      unint64_t v19 = v44;
      uint64_t v22 = v45;
      if (!v43)
      {
LABEL_25:
        id v25 = specialized String.init<A>(bytes:encoding:)(a1, a2, 5);
        if (!v26) {
          goto LABEL_30;
        }
        uint64_t v27 = (uint64_t)v25;
        unint64_t v28 = v26;
        id v40 = 0;
        unint64_t v41 = v19;
        uint64_t v42 = v22;
        outlined copy of URL?(0);
        URL.init(string:relativeTo:)(v27, v28, &v40, (uint64_t *)&v43);
        swift_bridgeObjectRelease();
        outlined consume of URL?(0);
        outlined consume of URL?(0);
        char v21 = v43;
        if (!v43)
        {
LABEL_30:
          *a5 = 0;
          a5[1] = 0;
          a5[2] = 0;
          return;
        }
        unint64_t v19 = v44;
        uint64_t v22 = v45;
      }
      swift_retain();
      id v29 = v21;
      swift_retain();
      if (a4)
      {
        id v40 = v29;
        unint64_t v41 = v19;
        uint64_t v42 = v22;
        URL.absoluteURL.getter(&v43);
        outlined consume of URL?(v21);

        swift_release();
        swift_release();
        char v21 = v43;
        unint64_t v19 = v44;
        uint64_t v22 = v45;
      }
      else
      {
        outlined consume of URL?(v21);
      }
      *a5 = v21;
      a5[1] = v19;
      a5[2] = v22;
      return;
  }
}

void URL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X4>, void *a6@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  long long v11 = *(void **)a4;
  uint64_t v12 = *(void *)(a4 + 8);
  uint64_t v13 = *(void *)(a4 + 16);
  char v26 = 0;
  id v30 = v11;
  uint64_t v31 = v12;
  uint64_t v32 = v13;
  id v14 = objc_allocWithZone(MEMORY[0x1E4F1CB10]);
  outlined copy of Data._Representation(a1, a2);
  outlined copy of URL?((uint64_t)v11);
  id v15 = specialized @nonobjc NSURL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)(a1, a2, a3, &v30, (uint64_t)&v26);
  outlined consume of Data._Representation(a1, a2);
  if (!v6)
  {
    unint64_t v24 = a6;
    uint64_t v16 = static URL._converted(from:)(v15);

    *a5 = v26;
    unint64_t v17 = v16;
    if (_foundation_swift_url_feature_enabled())
    {
      id v18 = objc_msgSend(v17, sel_relativeString);
      id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      unint64_t v21 = v20;

      Swift::Int v22 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)((uint64_t)v19, v21, 1);
      swift_bridgeObjectRelease();
      if (!v22)
      {

        *unint64_t v24 = 0;
        v24[1] = 0;
        v24[2] = 0;
        return;
      }
      if (*(unsigned char *)(v22 + 48))
      {
        if (v11)
        {
          uint64_t v27 = v11;
          uint64_t v28 = v12;
          uint64_t v29 = v13;
          URL.absoluteURL.getter(&v30);
          uint64_t v23 = v31;

          swift_release();
LABEL_11:
          *unint64_t v24 = v17;
          v24[1] = v22;
          v24[2] = v23;
          swift_retain();
          swift_release();

          return;
        }
      }
      else
      {
        swift_retain();
        String.subscript.getter();
        swift_release();
        swift_bridgeObjectRelease();
      }
      uint64_t v23 = 0;
      goto LABEL_11;
    }
    uint64_t v23 = 0;
    Swift::Int v22 = 0;
    goto LABEL_11;
  }
}

{
  uint64_t v6;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  char v17;
  void *v18;
  id v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  Swift::Int v23;
  void *v24;
  uint64_t v25;
  void *v26;
  char v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  id v35 = *MEMORY[0x1E4F143B8];
  long long v11 = *(void **)a4;
  uint64_t v12 = *(void *)(a4 + 8);
  uint64_t v13 = *(void *)(a4 + 16);
  uint64_t v28 = 0;
  uint64_t v32 = v11;
  uint64_t v33 = v12;
  uint64_t v34 = v13;
  id v14 = objc_allocWithZone(MEMORY[0x1E4F1CB10]);
  outlined copy of Data._Representation(a1, a2);
  outlined copy of URL?((uint64_t)v11);
  id v15 = specialized @nonobjc NSURL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)(a1, a2, a3, &v32, (uint64_t)&v28);
  outlined consume of Data._Representation(a1, a2);
  if (!v6)
  {
    char v26 = a6;
    uint64_t v16 = static URL._converted(from:)(v15);

    unint64_t v17 = v28;
    *a5 = v28;
    id v18 = v16;
    if (_foundation_swift_url_feature_enabled())
    {
      *a5 = v17;
      id v19 = objc_msgSend(v18, sel_relativeString);

      unint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      Swift::Int v22 = v21;

      uint64_t v23 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)((uint64_t)v20, v22, 1);
      swift_bridgeObjectRelease();
      if (!v23)
      {
        __break(1u);
        return;
      }
      unint64_t v24 = v26;
      if (*(unsigned char *)(v23 + 48))
      {
        if (v11)
        {
          uint64_t v29 = v11;
          id v30 = v12;
          uint64_t v31 = v13;
          URL.absoluteURL.getter(&v32);
          id v25 = v33;

          swift_release();
LABEL_10:
          *unint64_t v24 = v18;
          v24[1] = v23;
          v24[2] = v25;
          return;
        }
      }
      else
      {
        swift_retain();
        String.subscript.getter();
        swift_release();
        swift_bridgeObjectRelease();
      }
      id v25 = 0;
      goto LABEL_10;
    }

    uint64_t v23 = 0;
    id v25 = 0;
    unint64_t v24 = v26;
    goto LABEL_10;
  }
}

__n128 URL.init(resolvingAliasFileAt:options:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = *(void **)a1;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v8 = *(void **)(a1 + 16);
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURL);
  v13[0] = v7;
  v13[1] = v6;
  v13[2] = v8;
  swift_retain();
  id v9 = v7;
  swift_retain();
  id v10 = @nonobjc NSURL.__allocating_init(resolvingAliasFileAt:options:)(v13, a2);
  if (!v3)
  {
    uint64_t v12 = v10;
    URL.init(reference:)(v10, &v14);

    __n128 result = v15;
    *(void *)a3 = v14;
    *(__n128 *)(a3 + 8) = result;
  }
  return result;
}

id @nonobjc NSURL.__allocating_init(resolvingAliasFileAt:options:)(void **a1, uint64_t a2)
{
  v7[1] = *(id *)MEMORY[0x1E4F143B8];
  char v2 = *a1;
  v7[0] = 0;
  id v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_URLByResolvingAliasFileAtURL_options_error_, v2, a2, v7);
  if (v3)
  {
    id v4 = v7[0];
  }
  else
  {
    if (v7[0])
    {
      v7[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v5 = (id)_nilObjCError;
    }
    swift_willThrow();
  }

  swift_release();
  swift_release();
  return v3;
}

uint64_t URL.dataRepresentation.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!result)
  {
    id v7 = objc_msgSend(v1, sel_dataRepresentation);
    if (!v7) {
      return 0;
    }
    id v8 = v7;
    id v6 = specialized Data.init(referencing:)(v8);

    return (uint64_t)v6;
  }
  if (v2)
  {
    unint64_t v4 = *(void *)(v2 + 16);
    unint64_t v5 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    return specialized Data.init<A>(_:)(v4, v5);
  }
  __break(1u);
  return result;
}

void URL.encodedHost.getter()
{
  uint64_t v1 = *(unsigned char **)(v0 + 8);
  if (v1)
  {
    if ((v1[72] != 1 || v1[96] != 1 || v1[120] != 1 || (v1[144] & 1) == 0 || (uint64_t v1 = *(unsigned char **)(v0 + 16)) != 0)
      && (v1[120] & 1) == 0)
    {
      uint64_t v2 = String.subscript.getter();
      MEMORY[0x185301F50](v2);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

Swift::String_optional __swiftcall URL.host(percentEncoded:)(Swift::Bool percentEncoded)
{
  id v3 = *(void **)v1;
  unint64_t v4 = *(unsigned char **)(v1 + 8);
  unint64_t v5 = *(unsigned char **)(v1 + 16);
  if (!_foundation_swift_url_feature_enabled())
  {
    id v16 = objc_msgSend(v3, sel__cfurl);
    unint64_t v17 = (void *)_CFURLCopyHostName();
    if (v17)
    {
      id v18 = v17;
      unint64_t v8 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      unint64_t v9 = v19;
    }
    else
    {

LABEL_24:
      unint64_t v8 = 0;
      unint64_t v9 = 0;
    }
    goto LABEL_49;
  }
  uint64_t v88 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
  uint64_t v89 = (uint64_t)v4;
  unint64_t v90 = (unint64_t)v5;
  URL.encodedHost.getter();
  unint64_t v8 = v6;
  unint64_t v9 = v7;
  if (!v7) {
    goto LABEL_49;
  }
  if (v4)
  {
    if (v4[72] == 1 && v4[96] == 1 && v4[120] == 1 && v4[144] == 1)
    {
      if (!v5)
      {
        if (percentEncoded) {
          goto LABEL_12;
        }
        goto LABEL_48;
      }
      unint64_t v4 = v5;
    }
    if (percentEncoded)
    {
      if (!v4[218])
      {
LABEL_12:
        uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
        if ((v7 & 0x2000000000000000) != 0) {
          uint64_t v11 = HIBYTE(v7) & 0xF;
        }
        else {
          uint64_t v11 = v6 & 0xFFFFFFFFFFFFLL;
        }
        if (!v11)
        {
          swift_bridgeObjectRelease();
          unint64_t v13 = 0;
          unint64_t v15 = 0xE000000000000000;
          goto LABEL_56;
        }
        if ((v7 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain_n();
          goto LABEL_35;
        }
        if ((v7 & 0x2000000000000000) != 0)
        {
          uint64_t v88 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v6;
          uint64_t v89 = v7 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v94 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          uint64_t v95 = 0;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v88, HIBYTE(v9) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v94, 0, (unsigned __int8 *)&v88, HIBYTE(v9) & 0xF, (uint64_t *)&v92);
          unint64_t v13 = v92;
          unint64_t v15 = v93;
          swift_release();
        }
        else
        {
          if ((v6 & 0x1000000000000000) != 0)
          {
            uint64_t v12 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            uint64_t v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
            uint64_t v10 = v43;
          }
          uint64_t v88 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          uint64_t v89 = 0;
          swift_bridgeObjectRetain_n();
          unint64_t v13 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v12, v10, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v88, 0, v12, v10);
          unint64_t v15 = v14;
        }
        swift_bridgeObjectRelease();
        if (v15 == 1)
        {
LABEL_35:
          uint64_t v88 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v8;
          uint64_t v89 = v9;
          lazy protocol witness table accessor for type String and conformance String();
          StringProtocol._ephemeralString.getter();
          uint64_t v27 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v28 = objc_msgSend(v27, sel__fastCharacterContents);
          id v29 = v27;
          if (v28)
          {
            uint64_t v88 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v8;
            uint64_t v89 = v9;
            StringProtocol._ephemeralString.getter();
            id v30 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v31 = objc_msgSend(v30, sel_length);
            uint64_t v32 = swift_unknownObjectRelease();
            MEMORY[0x1F4188790](v32);
            LOBYTE(v86) = 0;
            MEMORY[0x1F4188790](v33);
            v84[2] = v28;
            v84[3] = v31;
            unint64_t v13 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v28, (uint64_t)v31, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), v34, partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), (uint64_t)v84);
            unint64_t v15 = v35;
            swift_bridgeObjectRelease_n();
            if (v15) {
              goto LABEL_55;
            }
            goto LABEL_49;
          }
          uint64_t v88 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v8;
          uint64_t v89 = v9;
          swift_bridgeObjectRetain();
          uint64_t v37 = String.init<A>(_:)();
          unint64_t v38 = v36;
          if ((v36 & 0x1000000000000000) != 0)
          {
            uint64_t v37 = static String._copying(_:)();
            unint64_t v45 = v44;
            swift_bridgeObjectRelease();
            unint64_t v38 = v45;
            if ((v45 & 0x2000000000000000) == 0) {
              goto LABEL_44;
            }
          }
          else if ((v36 & 0x2000000000000000) == 0)
          {
LABEL_44:
            if ((v37 & 0x1000000000000000) == 0) {
              goto LABEL_102;
            }
            uint64_t v39 = (unsigned __int8 *)((v38 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v40 = v37 & 0xFFFFFFFFFFFFLL;
            while (1)
            {
              uint64_t v88 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
              uint64_t v89 = 0;
              unint64_t v13 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v39, v40, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v88, 0, v39, v40);
              unint64_t v15 = v41;
LABEL_54:
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              if (!v15) {
                goto LABEL_49;
              }
LABEL_55:
              swift_bridgeObjectRelease();
LABEL_56:
              if ((v15 & 0x2000000000000000) != 0) {
                unint64_t v8 = HIBYTE(v15) & 0xF;
              }
              else {
                unint64_t v8 = v13 & 0xFFFFFFFFFFFFLL;
              }
              if (!v8)
              {
                swift_bridgeObjectRelease();
                unint64_t v9 = 0xE000000000000000;
                goto LABEL_49;
              }
              Swift::Int v46 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v13, v15);
              if ((v46 & 1) == 0)
              {
                uint64_t v88 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v13;
                uint64_t v89 = v15;
                MEMORY[0x1F4188790](v46);
                char v86 = &v88;
                LOBYTE(v87) = 4;
                swift_bridgeObjectRetain();
                char v51 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (uint64_t)v85, v13, v15);
                if (v52)
                {
                  unint64_t v8 = (unint64_t)v51;
                  unint64_t v9 = v52;
                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  unint64_t v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v88;
                  unint64_t v54 = v89;
                  swift_bridgeObjectRetain();
                  unint64_t v8 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((unint64_t)v53, v54, 4u);
                  unint64_t v9 = v55;
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                }
                goto LABEL_49;
              }
              uint64_t v6 = specialized Collection.first.getter(v13, v15);
              if ((v6 & 0x100) != 0) {
                goto LABEL_104;
              }
              if (v6 != 91) {
                break;
              }
              if ((v15 & 0x1000000000000000) != 0) {
                goto LABEL_95;
              }
              unint64_t v47 = (v8 << 16) - 65532;
              LOBYTE(v48) = 1;
LABEL_65:
              if ((v47 & 0xC) == 4 << v48) {
                unint64_t v47 = _StringGuts._slowEnsureMatchingEncoding(_:)(v47, v13, v15);
              }
              unint64_t v9 = v47 >> 16;
              if (v47 >> 16 < v8)
              {
                if ((v15 & 0x1000000000000000) != 0)
                {
                  char v50 = String.UTF8View._foreignSubscript(position:)();
                }
                else
                {
                  if ((v15 & 0x2000000000000000) == 0)
                  {
                    if ((v13 & 0x1000000000000000) != 0)
                    {
                      uint64_t v49 = (v15 & 0xFFFFFFFFFFFFFFFLL) + 32;
                      goto LABEL_72;
                    }
                    goto LABEL_100;
                  }
                  uint64_t v88 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v13;
                  uint64_t v89 = v15 & 0xFFFFFFFFFFFFFFLL;
                  char v50 = *((unsigned char *)&v88 + v9);
                }
                goto LABEL_79;
              }
              __break(1u);
LABEL_98:
              __break(1u);
              while (1)
              {
                __break(1u);
LABEL_100:
                uint64_t v49 = _StringObject.sharedUTF8.getter();
LABEL_72:
                char v50 = *(unsigned char *)(v49 + v9);
LABEL_79:
                if (v50 != 93) {
                  goto LABEL_98;
                }
                unint64_t v56 = specialized Collection<>.firstIndex(of:)(0x25u, v13, v15);
                if (v57)
                {
                  swift_bridgeObjectRetain();
                  if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v13, v15) & 1) == 0)
                  {
                    swift_bridgeObjectRelease_n();
                    goto LABEL_24;
                  }
                  uint64_t v88 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v13;
                  uint64_t v89 = v15;
                  unint64_t v8 = String.init<A>(_:)();
                  unint64_t v9 = v58;
                  goto LABEL_93;
                }
                unint64_t v9 = v56;
                if ((v15 & 0x1000000000000000) != 0) {
                  break;
                }
                unint64_t v8 = (v8 << 16) - 65532;
LABEL_87:
                if (v8 >> 14 >= v9 >> 14)
                {
                  swift_bridgeObjectRetain_n();
                  unint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))String.subscript.getter();
                  unint64_t v62 = v61;
                  uint64_t v88 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v60;
                  uint64_t v89 = v63;
                  unint64_t v90 = v64;
                  unint64_t v91 = v61;
                  MEMORY[0x1F4188790](v60);
                  char v86 = &v88;
                  LOBYTE(v87) = 8;
                  unint64_t v68 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t)v85, v66, v67, v65, v62);
                  if (v69)
                  {
                    uint64_t v70 = (uint64_t)v68;
                    unint64_t v71 = v69;
                  }
                  else
                  {
                    unint64_t v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v88;
                    unint64_t v73 = v89;
                    unint64_t v74 = v90;
                    unint64_t v75 = v91;
                    swift_bridgeObjectRetain();
                    uint64_t v70 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((unint64_t)v72, v73, v74, v75, 8u);
                    unint64_t v71 = v76;
                    swift_bridgeObjectRelease();
                  }
                  uint64_t v77 = String.subscript.getter();
                  uint64_t v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x185301F50](v77);
                  uint64_t v80 = v79;
                  swift_bridgeObjectRelease();
                  uint64_t v88 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v78;
                  uint64_t v89 = v80;
                  v81._countAndFlagsBits = v70;
                  v81._object = v71;
                  String.append(_:)(v81);
                  swift_bridgeObjectRelease();
                  v82._countAndFlagsBits = 93;
                  v82._object = (void *)0xE100000000000000;
                  String.append(_:)(v82);
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  unint64_t v8 = (unint64_t)v88;
                  unint64_t v9 = v89;
LABEL_93:
                  swift_bridgeObjectRelease();
                  goto LABEL_49;
                }
              }
              Swift::Int v59 = String.UTF8View._foreignCount()();
              if (!__OFSUB__(v59, 1))
              {
                unint64_t v8 = MEMORY[0x185302230](15, v59 - 1, v13, v15);
                goto LABEL_87;
              }
              __break(1u);
LABEL_102:
              uint64_t v39 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
            }
            __break(1u);
LABEL_95:
            uint64_t v6 = String.UTF8View._foreignCount()();
            unint64_t v7 = v6 - 1;
            if (__OFSUB__(v6, 1)) {
              goto LABEL_105;
            }
            uint64_t v48 = (v13 >> 59) & 1;
            unint64_t v47 = MEMORY[0x185302230](15, v7, v13, v15);
            goto LABEL_65;
          }
          uint64_t v88 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v37;
          uint64_t v89 = v38 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v94 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          uint64_t v95 = 0;
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v88, HIBYTE(v38) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v94, 0, (unsigned __int8 *)&v88, HIBYTE(v38) & 0xF, (uint64_t *)&v92);
          unint64_t v13 = v92;
          unint64_t v15 = v93;
          swift_release();
          goto LABEL_54;
        }
        swift_bridgeObjectRelease_n();
        if (v15) {
          goto LABEL_55;
        }
LABEL_49:
        uint64_t v6 = v8;
        unint64_t v7 = v9;
        goto LABEL_106;
      }
    }
    else if (v4[218])
    {
      uint64_t v20 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0) {
        uint64_t v20 = v6 & 0xFFFFFFFFFFFFLL;
      }
      if (v20)
      {
        uint64_t v88 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v6;
        uint64_t v89 = v7;
        MEMORY[0x1F4188790](v6);
        char v86 = &v88;
        uint64_t v87 = MEMORY[0x1E4FBC870];
        unint64_t v21 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v85, v8, v9);
        if (v22 == 1)
        {
          uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v88;
          unint64_t v24 = v89;
          swift_bridgeObjectRetain();
          unint64_t v8 = (unint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((Swift::Int)v23, v24, MEMORY[0x1E4FBC870]);
          unint64_t v26 = v25;
          swift_bridgeObjectRelease();
        }
        else
        {
          unint64_t v8 = (unint64_t)v21;
          unint64_t v26 = v22;
        }
        swift_bridgeObjectRelease();
        unint64_t v9 = v26;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v8 = 0;
        unint64_t v9 = 0xE000000000000000;
      }
      goto LABEL_49;
    }
LABEL_48:
    uint64_t v88 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v6;
    uint64_t v89 = v7;
    unint64_t v8 = String.init<A>(_:)();
    unint64_t v9 = v42;
    goto LABEL_49;
  }
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  result.value._object = (void *)v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall URL.user(percentEncoded:)(Swift::Bool percentEncoded)
{
  id v3 = *(void **)v1;
  unint64_t v4 = *(unsigned char **)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = _foundation_swift_url_feature_enabled();
  if (v6)
  {
    if (!v4)
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v4[72] != 1
      || v4[96] == 1
      && v4[120] == 1
      && (v4[144] == 1 ? (BOOL v8 = v5 == 0) : (BOOL v8 = 1), !v8 && (*(unsigned char *)(v5 + 72) & 1) == 0))
    {
      uint64_t v9 = String.subscript.getter();
      unint64_t v13 = v9;
      unint64_t v14 = v10;
      unint64_t v15 = v11;
      unint64_t v16 = v12;
      if (percentEncoded)
      {
        id v17 = (id)MEMORY[0x185301F50](v9, v10, v11, v12);
        unint64_t v19 = v18;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v33 = v9;
        unint64_t v34 = v10;
        unint64_t v35 = v11;
        unint64_t v36 = v12;
        if ((v9 ^ v10) >> 14)
        {
          MEMORY[0x1F4188790](v9);
          v32[2] = &v33;
          v32[3] = MEMORY[0x1E4FBC870];
          swift_bridgeObjectRetain();
          unint64_t v24 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5((void *(*)(void *__return_ptr, void, void))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v32, v13, v14, v15, v16);
          if (v25 == 1)
          {
            unint64_t v26 = v33;
            unint64_t v27 = v34;
            unint64_t v28 = v35;
            unint64_t v29 = v36;
            swift_bridgeObjectRetain();
            id v17 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v26, v27, v28, v29, MEMORY[0x1E4FBC870]);
            unint64_t v19 = v30;
            swift_bridgeObjectRelease();
          }
          else
          {
            id v17 = v24;
            unint64_t v19 = v25;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          id v17 = 0;
          unint64_t v19 = 0xE000000000000000;
        }
      }
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  id v20 = objc_msgSend(v3, sel__cfurl);
  unint64_t v21 = (void *)_CFURLCopyUserName();
  if (!v21)
  {

LABEL_16:
    id v17 = 0;
    unint64_t v19 = 0;
    goto LABEL_17;
  }
  unint64_t v22 = v21;
  id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  unint64_t v19 = v23;

LABEL_17:
  uint64_t v6 = (uint64_t)v17;
  unint64_t v7 = (void *)v19;
LABEL_25:
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall URL.password(percentEncoded:)(Swift::Bool percentEncoded)
{
  id v3 = *(void **)v1;
  unint64_t v4 = *(unsigned char **)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = _foundation_swift_url_feature_enabled();
  if (v6)
  {
    if (!v4)
    {
      __break(1u);
      goto LABEL_26;
    }
    char v8 = v4[96];
    if (v4[72] == 1)
    {
      if (!v4[96]) {
        goto LABEL_12;
      }
      if (v4[120] != 1) {
        goto LABEL_17;
      }
      if (v4[144] != 1 || v5 == 0) {
        goto LABEL_17;
      }
      char v8 = *(unsigned char *)(v5 + 96);
    }
    if ((v8 & 1) == 0)
    {
LABEL_12:
      uint64_t v10 = String.subscript.getter();
      unint64_t v14 = v10;
      unint64_t v15 = v11;
      unint64_t v16 = v12;
      unint64_t v17 = v13;
      if (percentEncoded)
      {
        id v18 = (id)MEMORY[0x185301F50](v10, v11, v12, v13);
        unint64_t v20 = v19;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v34 = v10;
        unint64_t v35 = v11;
        unint64_t v36 = v12;
        unint64_t v37 = v13;
        if ((v10 ^ v11) >> 14)
        {
          MEMORY[0x1F4188790](v10);
          v33[2] = &v34;
          v33[3] = MEMORY[0x1E4FBC870];
          swift_bridgeObjectRetain();
          unint64_t v25 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5((void *(*)(void *__return_ptr, void, void))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v33, v14, v15, v16, v17);
          if (v26 == 1)
          {
            unint64_t v27 = v34;
            unint64_t v28 = v35;
            unint64_t v29 = v36;
            unint64_t v30 = v37;
            swift_bridgeObjectRetain();
            id v18 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v27, v28, v29, v30, MEMORY[0x1E4FBC870]);
            unint64_t v20 = v31;
            swift_bridgeObjectRelease();
          }
          else
          {
            id v18 = v25;
            unint64_t v20 = v26;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          id v18 = 0;
          unint64_t v20 = 0xE000000000000000;
        }
      }
      goto LABEL_18;
    }
LABEL_17:
    id v18 = 0;
    unint64_t v20 = 0;
    goto LABEL_18;
  }
  id v21 = objc_msgSend(v3, sel__cfurl);
  unint64_t v22 = (void *)_CFURLCopyPassword();
  if (!v22)
  {

    goto LABEL_17;
  }
  unint64_t v23 = v22;
  id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  unint64_t v20 = v24;

LABEL_18:
  uint64_t v6 = (uint64_t)v18;
  unint64_t v7 = (void *)v20;
LABEL_26:
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall URL.query(percentEncoded:)(Swift::Bool percentEncoded)
{
  id v3 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = _foundation_swift_url_feature_enabled();
  if (v6)
  {
    if (!v4)
    {
      __break(1u);
      goto LABEL_29;
    }
    if (*(unsigned char *)(v4 + 192) != 1) {
      goto LABEL_18;
    }
    if (*(unsigned char *)(v4 + 168)) {
      uint64_t v8 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else {
      uint64_t v8 = String.subscript.getter();
    }
    uint64_t v15 = MEMORY[0x185301F50](v8);
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v18 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0) {
      uint64_t v18 = v15 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v19 = v18 || v5 == 0;
    if (!v19 && (*(unsigned char *)(v5 + 192) & 1) == 0)
    {
LABEL_18:
      uint64_t v20 = String.subscript.getter();
      unint64_t v24 = v20;
      unint64_t v25 = v21;
      unint64_t v26 = v22;
      unint64_t v27 = v23;
      if (percentEncoded)
      {
        id v12 = (id)MEMORY[0x185301F50](v20, v21, v22, v23);
        unint64_t v14 = v28;
      }
      else
      {
        unint64_t v38 = v20;
        unint64_t v39 = v21;
        unint64_t v40 = v22;
        unint64_t v41 = v23;
        if (!((v20 ^ v21) >> 14))
        {
          swift_bridgeObjectRelease();
          id v12 = 0;
          unint64_t v14 = 0xE000000000000000;
          goto LABEL_27;
        }
        MEMORY[0x1F4188790](v20);
        v37[2] = &v38;
        v37[3] = MEMORY[0x1E4FBC870];
        swift_bridgeObjectRetain();
        unint64_t v29 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5((void *(*)(void *__return_ptr, void, void))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v37, v24, v25, v26, v27);
        if (v30 == 1)
        {
          unint64_t v31 = v38;
          unint64_t v32 = v39;
          unint64_t v33 = v40;
          unint64_t v34 = v41;
          swift_bridgeObjectRetain();
          id v12 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v31, v32, v33, v34, MEMORY[0x1E4FBC870]);
          unint64_t v14 = v35;
          swift_bridgeObjectRelease();
        }
        else
        {
          id v12 = v29;
          unint64_t v14 = v30;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  id v9 = objc_msgSend(v3, sel__cfurl);
  String = (void *)_CFURLCopyQueryString();
  if (!String)
  {

LABEL_17:
    id v12 = 0;
    unint64_t v14 = 0;
    goto LABEL_27;
  }
  unint64_t v11 = String;
  id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(String);
  unint64_t v14 = v13;

LABEL_27:
  uint64_t v6 = (uint64_t)v12;
  unint64_t v7 = (void *)v14;
LABEL_29:
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

Swift::String_optional __swiftcall URL.fragment(percentEncoded:)(Swift::Bool percentEncoded)
{
  id v3 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  if (!_foundation_swift_url_feature_enabled())
  {
    id v16 = objc_msgSend(v3, sel__cfurl);
    unint64_t v17 = (void *)_CFURLCopyFragment();
    if (v17)
    {
      uint64_t v18 = v17;
      id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      unint64_t v15 = v19;

      goto LABEL_10;
    }

LABEL_9:
    id v13 = 0;
    unint64_t v15 = 0;
    goto LABEL_10;
  }
  if (!v4)
  {
    __break(1u);
    JUMPOUT(0x181F062D4);
  }
  if (*(unsigned char *)(v4 + 216)) {
    goto LABEL_9;
  }
  uint64_t v5 = String.subscript.getter();
  unint64_t v9 = v5;
  unint64_t v10 = v6;
  unint64_t v11 = v7;
  unint64_t v12 = v8;
  if (percentEncoded)
  {
    id v13 = (id)MEMORY[0x185301F50](v5, v6, v7, v8);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v31 = v5;
    unint64_t v32 = v6;
    unint64_t v33 = v7;
    unint64_t v34 = v8;
    if ((v5 ^ v6) >> 14)
    {
      MEMORY[0x1F4188790](v5);
      v30[2] = &v31;
      v30[3] = MEMORY[0x1E4FBC870];
      swift_bridgeObjectRetain();
      unint64_t v22 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5((void *(*)(void *__return_ptr, void, void))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v30, v9, v10, v11, v12);
      if (v23 == 1)
      {
        unint64_t v24 = v31;
        unint64_t v25 = v32;
        unint64_t v26 = v33;
        unint64_t v27 = v34;
        swift_bridgeObjectRetain();
        id v13 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v24, v25, v26, v27, MEMORY[0x1E4FBC870]);
        unint64_t v15 = v28;
        swift_bridgeObjectRelease();
      }
      else
      {
        id v13 = v22;
        unint64_t v15 = v23;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      id v13 = 0;
      unint64_t v15 = 0xE000000000000000;
    }
  }
LABEL_10:
  uint64_t v20 = (uint64_t)v13;
  unint64_t v21 = (void *)v15;
  result.value._object = v21;
  result.value._countAndFlagsBits = v20;
  return result;
}

uint64_t URL.deletingPathExtension()@<X0>(uint64_t a1@<X8>)
{
  id v3 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!result)
  {
    swift_retain();
    id v8 = v3;
    swift_retain();
    if (!_foundation_swift_url_feature_enabled())
    {
      id v13 = objc_msgSend(v8, sel__parameterString);
      if (v13)
      {
        unint64_t v14 = v13;
        id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        unint64_t v17 = v16;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v18 = objc_msgSend(v8, sel_path)) != 0)
        {
          unint64_t v19 = v18;
          id v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
          uint64_t v21 = v5;
          uint64_t v23 = v22;

          *(void *)&v107[0] = v20;
          *((void *)&v107[0] + 1) = v23;
          swift_bridgeObjectRetain();
          v24._uint64_t countAndFlagsBits = 59;
          v24._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v24);
          uint64_t v5 = v21;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v25._uint64_t countAndFlagsBits = (uint64_t)v15;
          v25._unint64_t object = v17;
          String.append(_:)(v25);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          *(void *)&v107[0] = 59;
          *((void *)&v107[0] + 1) = 0xE100000000000000;
          v69._uint64_t countAndFlagsBits = (uint64_t)v15;
          v69._unint64_t object = v17;
          String.append(_:)(v69);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
        unint64_t v68 = *((void *)&v107[0] + 1);
        unint64_t v66 = *(void *)&v107[0];
      }
      else
      {
        id v70 = objc_msgSend(v8, sel_path);
        if (v70)
        {
          unint64_t v71 = v70;
          unint64_t v66 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
          unint64_t v68 = v72;
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();

          unint64_t v66 = 0;
          unint64_t v68 = 0xE000000000000000;
        }
      }
      goto LABEL_53;
    }
    uint64_t v93 = a1;
    *(void *)&v107[1] = v5;
    id v9 = v8;
    swift_retain();
    uint64_t v94 = v5;
    swift_retain();
    Swift::String v10 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v10._countAndFlagsBits;
    v107[0] = v10;
    swift_bridgeObjectRetain();
    id v92 = v9;
    if (String.count.getter() <= 1)
    {
      unint64_t object = (unint64_t)v10._object;
    }
    else
    {
      unint64_t object = (unint64_t)v10._object;
      if ((specialized BidirectionalCollection.last.getter(v10._countAndFlagsBits, (unint64_t)v10._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        unint64_t object = *((void *)&v107[0] + 1);
        uint64_t countAndFlagsBits = *(void *)&v107[0];
      }
    }
    *(void *)&long long v102 = Set.init(minimumCapacity:)();
    uint64_t v59 = specialized Set._Variant.insert(_:)(v97, 0x2FuLL);
    uint64_t v60 = v102;
    uint64_t v61 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v61 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v61)
    {
      *(void *)&long long v102 = countAndFlagsBits;
      *((void *)&v102 + 1) = object;
      MEMORY[0x1F4188790](v59);
      uint64_t v90 = (uint64_t)&v102;
      uint64_t v91 = v60;
      swift_bridgeObjectRetain();
      unint64_t v62 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v89, countAndFlagsBits, object);
      if (v63 == 1)
      {
        unint64_t v65 = *((void *)&v102 + 1);
        Swift::Int v64 = v102;
        swift_bridgeObjectRetain();
        unint64_t v66 = (unint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v64, v65, v60);
        unint64_t v68 = v67;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v66 = (unint64_t)v62;
        unint64_t v68 = v63;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v73 = v92;
      if (!v68)
      {
        uint64_t v74 = v94;
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v66 = 0;
        unint64_t v68 = 0xE000000000000000;
        goto LABEL_52;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v66 = 0;
      unint64_t v68 = 0xE000000000000000;
      unint64_t v73 = v92;
    }
    uint64_t v74 = v94;
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_52:
    swift_release();
    swift_release();

    a1 = v93;
    uint64_t v5 = v74;
LABEL_53:
    swift_bridgeObjectRelease();
    uint64_t v75 = HIBYTE(v68) & 0xF;
    if ((v68 & 0x2000000000000000) == 0) {
      uint64_t v75 = v66 & 0xFFFFFFFFFFFFLL;
    }
    if (v75 && (id v76 = objc_msgSend(v8, sel_URLByDeletingPathExtension)) != 0)
    {
      uint64_t v77 = v76;
      URL.init(reference:)(v76, v107);

      id v78 = *(id *)&v107[0];
      URL.init(reference:)(v78, v107);

      swift_release();
      uint64_t result = swift_release();
      long long v79 = *(_OWORD *)((char *)v107 + 8);
      *(void *)a1 = *(void *)&v107[0];
      *(_OWORD *)(a1 + 8) = v79;
    }
    else
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v4;
      *(void *)(a1 + 16) = v5;
      id v80 = v8;
      swift_retain();
      return swift_retain();
    }
    return result;
  }
  if (!v4) {
    goto LABEL_66;
  }
  if (*(unsigned char *)(v4 + 168)) {
    uint64_t v7 = MEMORY[0x185302C80](0, 0xE000000000000000);
  }
  else {
    uint64_t v7 = String.subscript.getter();
  }
  uint64_t v26 = MEMORY[0x185301F50](v7);
  unint64_t v28 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v29 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000) == 0) {
    uint64_t v29 = v26 & 0xFFFFFFFFFFFFLL;
  }
  if (v29)
  {
    char v30 = *(unsigned char *)(v4 + 218);
    char v121 = 1;
    char v120 = 1;
    char v119 = 1;
    char v118 = 1;
    char v117 = 1;
    char v116 = 1;
    char v115 = 1;
    char v114 = 1;
    char v113 = 1;
    char v112 = 1;
    char v111 = 1;
    char v110 = v30;
    char v109 = 0;
    if (*(unsigned char *)(v4 + 168))
    {
      swift_retain();
      uint64_t v31 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else
    {
      swift_retain();
      uint64_t v31 = String.subscript.getter();
    }
    uint64_t v33 = MEMORY[0x185301F50](v31);
    unint64_t v35 = v34;
    swift_bridgeObjectRelease();
    unint64_t v36 = String.pathExtension.getter(v33, v35);
    unint64_t v38 = v37;
    uint64_t v39 = swift_bridgeObjectRelease();
    uint64_t v40 = HIBYTE(v38) & 0xF;
    if ((v38 & 0x2000000000000000) == 0) {
      uint64_t v40 = v36 & 0xFFFFFFFFFFFFLL;
    }
    if (v40)
    {
      uint64_t v41 = v5;
      LOBYTE(v107[0]) = 46;
      MEMORY[0x1F4188790](v39);
      uint64_t v90 = (uint64_t)v107;
      swift_bridgeObjectRetain();
      specialized BidirectionalCollection.lastIndex(where:)((unint64_t)_sSTsSQ7ElementRpzrlE8containsySbABFSbABXEfU_SS8UTF8ViewV_TG5TA_0, (uint64_t)v89, v33, v35);
      char v43 = v42;
      swift_bridgeObjectRelease();
      if ((v43 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v44 = String.subscript.getter();
        uint64_t v46 = v45;
        uint64_t v48 = v47;
        uint64_t v50 = v49;
        swift_bridgeObjectRelease();
        uint64_t v33 = MEMORY[0x185301F50](v44, v46, v48, v50);
        unint64_t v52 = v51;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v35 = v52;
      }
      uint64_t v5 = v41;
    }
    char v120 = 0;
    char v114 = 0;
    if ((v35 & 0x1000000000000000) != 0)
    {
      uint64_t v94 = v5;
      uint64_t v81 = a1;
      *(void *)&v107[0] = v33;
      *((void *)&v107[0] + 1) = v35;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      Swift::String v82 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      unint64_t v83 = (unsigned __int16 *)objc_msgSend(v82, sel__fastCharacterContents);
      id v84 = v82;
      if (v83)
      {
        *(void *)&v107[0] = v33;
        *((void *)&v107[0] + 1) = v35;
        StringProtocol._ephemeralString.getter();
        uint64_t v85 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v86 = objc_msgSend(v85, sel_length);
        swift_unknownObjectRelease();
        char v87 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v83, (uint64_t)v86, 0x10u, 1);
      }
      else
      {
        char v87 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v33, v35, 0x10u, 1);
      }
      char v88 = v87;
      swift_bridgeObjectRelease_n();
      a1 = v81;
      uint64_t v5 = v94;
      if (v88)
      {
LABEL_35:
        swift_bridgeObjectRelease();
        *(void *)&long long v102 = v4;
        BYTE8(v102) = v120;
        BYTE9(v102) = v119;
        BYTE10(v102) = v118;
        BYTE11(v102) = v117;
        BYTE12(v102) = v116;
        BYTE13(v102) = v115;
        BYTE14(v102) = v114;
        HIBYTE(v102) = v113;
        v103[0] = v112;
        memset(&v103[8], 0, 64);
        uint64_t v104 = 0;
        LOBYTE(v105) = v111;
        *((void *)&v105 + 1) = v33;
        *(void *)&v106[0] = v35;
        *(_OWORD *)((char *)v106 + 8) = 0u;
        *(_OWORD *)((char *)&v106[1] + 8) = 0u;
        BYTE8(v106[2]) = v110;
        BYTE9(v106[2]) = v109;
        v107[0] = v102;
        v107[1] = *(_OWORD *)v103;
        v107[4] = *(_OWORD *)&v103[48];
        v107[5] = 0uLL;
        v107[2] = *(_OWORD *)&v103[16];
        v107[3] = *(_OWORD *)&v103[32];
        *(_OWORD *)((char *)v108 + 10) = *(_OWORD *)((char *)&v106[1] + 10);
        v107[7] = v106[0];
        v108[0] = v106[1];
        v107[6] = v105;
        v97[6] = v105;
        v97[7] = v106[0];
        v98[0] = v106[1];
        *(_OWORD *)((char *)v98 + 10) = *(_OWORD *)((char *)&v106[1] + 10);
        v97[2] = *(_OWORD *)&v103[16];
        v97[3] = *(_OWORD *)&v103[32];
        v97[4] = *(_OWORD *)&v103[48];
        v97[5] = 0uLL;
        v97[0] = v102;
        v97[1] = *(_OWORD *)v103;
        uint64_t v99 = (uint64_t)v3;
        uint64_t v100 = v4;
        uint64_t v101 = v5;
        outlined retain of URLComponents((uint64_t)v107);
        URL.baseURL.getter(v96);
        unint64_t v55 = (void *)v96[0];
        v95[0] = v96[0];
        v95[1] = v96[1];
        v95[2] = v96[2];
        URLComponents.url(relativeTo:)((uint64_t)v95, &v99);
        outlined consume of URL?(v55);
        uint64_t result = outlined release of URLComponents((uint64_t)&v102);
        uint64_t v56 = v99;
        if (v99)
        {
          uint64_t v58 = v100;
          uint64_t v57 = v101;
          uint64_t result = outlined release of URLComponents((uint64_t)&v102);
          *(void *)a1 = v56;
          *(void *)(a1 + 8) = v58;
          *(void *)(a1 + 16) = v57;
          return result;
        }
        goto LABEL_67;
      }
    }
    else
    {
      if ((v35 & 0x2000000000000000) != 0)
      {
        uint64_t v54 = HIBYTE(v35) & 0xF;
        *(void *)&v107[0] = v33;
        *((void *)&v107[0] + 1) = v35 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v53 = (char *)v107;
      }
      else if ((v33 & 0x1000000000000000) != 0)
      {
        unint64_t v53 = (char *)((v35 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v54 = v33 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        unint64_t v53 = (char *)_StringObject.sharedUTF8.getter();
      }
      if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v53, v54, 0x10u, 1)) {
        goto LABEL_35;
      }
    }
    swift_bridgeObjectRelease();
    LODWORD(v91) = 0;
    uint64_t v90 = 897;
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    return result;
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  swift_retain();
  id v32 = v3;

  return swift_retain();
}

Swift::Void __swiftcall URL.deleteLastPathComponent()()
{
  URL.deleteLastPathComponent()((void (*)(uint64_t *__return_ptr))URL.deletingLastPathComponent());
}

Swift::Void __swiftcall URL.deletePathExtension()()
{
  URL.deleteLastPathComponent()((void (*)(uint64_t *__return_ptr))URL.deletingPathExtension());
}

Swift::Void __swiftcall URL.standardize()()
{
  uint64_t v1 = *(void **)v0;
  URL.standardized.getter(&v2);

  swift_release();
  swift_release();
  *(void *)uint64_t v0 = v2;
  *(_OWORD *)(v0 + 8) = v3;
}

Swift::Void __swiftcall URL.resolveSymlinksInPath()()
{
  URL.deleteLastPathComponent()((void (*)(uint64_t *__return_ptr))URL.resolvingSymlinksInPath());
}

double URL.deleteLastPathComponent()(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v2 = *(void **)v1;
  a1(&v4);

  swift_release();
  swift_release();
  *(void *)uint64_t v1 = v4;
  double result = *(double *)&v5;
  *(_OWORD *)(v1 + 8) = v5;
  return result;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.checkPromisedItemIsReachable()()
{
  return URL.checkResourceIsReachable()((SEL *)&selRef_checkPromisedItemIsReachableAndReturnError_) & 1;
}

uint64_t URL.setTemporaryResourceValue(_:forKey:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  objc_msgSend(v4, sel_setTemporaryResourceValue_forKey_, _bridgeAnythingToObjectiveC<A>(_:)(), a2);

  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall URL.removeAllCachedResourceValues()()
{
  objc_msgSend(*v0, sel_removeAllCachedResourceValues);
}

uint64_t URL.promisedItemResourceValues(forKeys:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return URL.resourceValues(forKeys:)(a1, (SEL *)&selRef_promisedItemResourceValuesForKeys_error_, a2);
}

id URL.bookmarkData(options:includingResourceValuesForKeys:relativeTo:)(uint64_t a1, void *a2, id *a3)
{
  uint64_t v4 = a2;
  v14[1] = *(id *)MEMORY[0x1E4F143B8];
  id v6 = *a3;
  uint64_t v7 = *v3;
  if (a2)
  {
    uint64_t v8 = swift_bridgeObjectRetain();
    specialized _copyCollectionToContiguousArray<A>(_:)(v8);
    swift_bridgeObjectRelease();
    type metadata accessor for NSURLResourceKey(0);
    uint64_t v4 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }
  if (v6) {
    id v6 = v6;
  }
  v14[0] = 0;
  id v9 = objc_msgSend(v7, sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_, a1, v4, v6, v14);

  if (v9)
  {
    id v10 = v14[0];
    id v11 = v9;
    id v9 = specialized Data.init(referencing:)(v11);
  }
  else
  {
    if (v14[0])
    {
      v14[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v12 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v9;
}

void static URL.resourceValues(forKeys:fromBookmarkData:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v8);
  swift_bridgeObjectRelease();
  type metadata accessor for NSURLResourceKey(0);
  uint64_t v9 = _ContiguousArrayBuffer._asCocoaArray()();
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2) {
        __break(1u);
      }
      swift_retain();
      id v11 = __DataStorage.bridgedReference(_:)((int)a2, a2 >> 32);
      outlined consume of Data._Representation(a2, a3);
      break;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v13 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      id v11 = __DataStorage.bridgedReference(_:)(v12, v13);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      id v10 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      uint64_t v16 = a2;
      __int16 v17 = a3;
      char v18 = BYTE2(a3);
      char v19 = BYTE3(a3);
      char v20 = BYTE4(a3);
      char v21 = BYTE5(a3);
      id v10 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v16, BYTE6(a3));
LABEL_7:
      id v11 = v10;
      break;
  }
  id v14 = objc_msgSend(self, sel_resourceValuesForKeys_fromBookmarkData_, v9, v11);
  swift_unknownObjectRelease();

  if (v14)
  {
    uint64_t v15 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v14);

    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v15 = 0;
    a1 = 0;
  }
  *a4 = v15;
  a4[1] = a1;
}

id static URL.writeBookmarkData(_:to:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a3;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 >= (int)a1)
      {
        swift_retain();
        uint64_t v7 = __DataStorage.bridgedReference(_:)((int)a1, a1 >> 32);
        outlined consume of Data._Representation(a1, a2);
        goto LABEL_8;
      }
      __break(1u);
      goto LABEL_16;
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v7 = __DataStorage.bridgedReference(_:)(v9, v8);
      swift_release();
      swift_release();
      goto LABEL_8;
    case 3uLL:
      id v6 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      id v14 = (id)a1;
      __int16 v15 = a2;
      char v16 = BYTE2(a2);
      char v17 = BYTE3(a2);
      char v18 = BYTE4(a2);
      char v19 = BYTE5(a2);
      id v6 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v14, BYTE6(a2));
LABEL_7:
      uint64_t v7 = v6;
LABEL_8:
      id v10 = self;
      id v14 = 0;
      unsigned int v11 = objc_msgSend(v10, sel_writeBookmarkData_toURL_options_error_, v7, v3, 0, &v14);

      if (v11) {
        return v14;
      }
      if (v14)
      {
        v14;
      }
      else
      {
        if (one-time initialization token for _nilObjCError != -1) {
LABEL_16:
        }
          swift_once();
        id v13 = (id)_nilObjCError;
      }
      return (id)swift_willThrow();
  }
}

id static URL.bookmarkData(withContentsOf:)(id *a1)
{
  v8[1] = *(id *)MEMORY[0x1E4F143B8];
  id v1 = *a1;
  v8[0] = 0;
  id v2 = objc_msgSend(self, sel_bookmarkDataWithContentsOfURL_error_, v1, v8);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = v8[0];
    id v5 = v3;
    id v1 = specialized Data.init(referencing:)(v5);
  }
  else
  {
    if (v8[0])
    {
      v8[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v6 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v1;
}

Swift::Void __swiftcall URL.stopAccessingSecurityScopedResource()()
{
  objc_msgSend(*v0, sel_stopAccessingSecurityScopedResource);
}

uint64_t URL.hashValue.getter()
{
  id v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  id v4 = v1;
  NSObject.hash(into:)();

  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!result) {
    return Hasher._finalize()();
  }
  if (v2)
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v3)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    return Hasher._finalize()();
  }
  __break(1u);
  return result;
}

void static URL.currentDirectoryOrNil()(void *a1@<X8>)
{
  id v2 = objc_msgSend(self, sel_defaultManager);
  id v3 = objc_msgSend(v2, sel_currentDirectoryPath);

  uint64_t v4 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  unint64_t v6 = v5;

  if ((specialized Collection.first.getter(v4, v6) & 0x1FF) != 0x2F
    && (specialized Collection.first.getter(v4, v6) & 0x1FF) != 0x7E)
  {
    swift_bridgeObjectRelease();
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  int v7 = _foundation_swift_url_feature_enabled();
  uint64_t v8 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0x2000000000000000) != 0) {
    uint64_t v9 = HIBYTE(v6) & 0xF;
  }
  else {
    uint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    if (!v9) {
      swift_bridgeObjectRelease();
    }
    id v24 = objc_allocWithZone(MEMORY[0x1E4F1CB10]);
    uint64_t v25 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v26 = objc_msgSend(v24, sel_initFileURLWithPath_isDirectory_relativeToURL_, v25, 1, 0);
    swift_unknownObjectRelease();
    unint64_t v27 = static URL._converted(from:)(v26);

    uint64_t v28 = 0;
    uint64_t v29 = 0;
    goto LABEL_35;
  }
  if (v9)
  {
    unint64_t v69 = v4;
    unint64_t v70 = v6;
    if ((specialized Collection.first.getter(v4, v6) & 0x1FF) == 0x2F
      || (uint64_t v10 = specialized Collection.first.getter(v4, v6), (v10 & 0x1FF) == 0x7E))
    {
      unsigned int v11 = 0;
      uint64_t v12 = 0;
      uint64_t v36 = 0;
      int v13 = 1;
      if ((v6 & 0x2000000000000000) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      static URL.currentDirectoryOrNil()(&v56, v10);
      int v13 = 0;
      uint64_t v12 = *((void *)&v56 + 1);
      unsigned int v11 = (void *)v56;
      uint64_t v36 = v57;
      if ((v6 & 0x2000000000000000) == 0)
      {
LABEL_12:
        if (v8 && (specialized BidirectionalCollection.last.getter(v4, v6) & 0x1FF) != 0x2F)
        {
          v14._uint64_t countAndFlagsBits = 47;
          v14._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v14);
        }
        char v15 = 0;
        char v68 = 1;
        char v63 = 1;
        long long v56 = 0uLL;
        LOBYTE(v57) = 0;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        uint64_t v62 = 0;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        __int16 v67 = 0;
        if (v13)
        {
          v16.value._uint64_t countAndFlagsBits = 1701603686;
          v16.value._unint64_t object = (void *)0xE400000000000000;
          URLComponents._URLComponents.setScheme(_:)(v16);
          if (v17)
          {
LABEL_42:

            int v35 = 0;
            uint64_t v34 = 714;
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return;
          }
          BYTE8(v56) = 0;
          BYTE12(v56) = 0;
          HIBYTE(v67) = 0;
          uint64_t v18 = swift_bridgeObjectRelease();
          long long v61 = xmmword_182107DC0;
          LOBYTE(v52) = 37;
          MEMORY[0x1F4188790](v18);
          uint64_t v34 = (uint64_t)&v52;
          char v15 = specialized Sequence.contains(where:)((uint64_t (*)(void *))_sSTsSQ7ElementRpzrlE8containsySbABFSbABXEfU_SS8UTF8ViewV_TG5TA_0, (uint64_t)&v33, 0, 0xE000000000000000);
          LOBYTE(v67) = v15 & 1;
        }
        uint64_t v37 = v12;
        unint64_t v38 = v11;
        unint64_t v19 = v69;
        char v17 = (void *)v70;
        uint64_t v20 = HIBYTE(v70) & 0xF;
        if ((v70 & 0x2000000000000000) == 0) {
          uint64_t v20 = v69 & 0xFFFFFFFFFFFFLL;
        }
        if (v20)
        {
          swift_bridgeObjectRetain();
          unint64_t v21 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v19, (unint64_t)v17);
          unint64_t v23 = v22;
          swift_bridgeObjectRelease();
        }
        else
        {
          unint64_t v21 = 0;
          unint64_t v23 = 0xE000000000000000;
        }
        swift_bridgeObjectRelease();
        if ((v13 & 1) == 0)
        {
          *(void *)&long long v52 = v56;
          BYTE8(v52) = 0;
          *(_DWORD *)((char *)&v52 + 9) = *(_DWORD *)((char *)&v56 + 9);
          *(_WORD *)((char *)&v52 + 13) = BYTE13(v56);
          HIBYTE(v52) = HIBYTE(v56);
          LOBYTE(v53[0]) = v57;
          *(_OWORD *)((char *)v53 + 8) = v58;
          *(_OWORD *)((char *)&v53[1] + 8) = v59;
          *(_OWORD *)((char *)&v53[2] + 8) = v60;
          *(_OWORD *)((char *)&v53[3] + 8) = v61;
          *((void *)&v53[4] + 1) = v62;
          LOBYTE(v54) = v63;
          *((void *)&v54 + 1) = v21;
          *(void *)&v55[0] = v23;
          *(_OWORD *)((char *)v55 + 8) = v65;
          *(_OWORD *)((char *)&v55[1] + 8) = v66;
          BYTE8(v55[2]) = v15 & 1;
          BYTE9(v55[2]) = HIBYTE(v67);
          long long v46 = v54;
          long long v47 = v55[0];
          v48[0] = v55[1];
          *(_OWORD *)((char *)v48 + 10) = *(_OWORD *)((char *)&v55[1] + 10);
          long long v42 = v53[1];
          long long v43 = v53[2];
          long long v44 = v53[3];
          long long v45 = v53[4];
          long long v40 = v52;
          long long v41 = v53[0];
          id v32 = v38;
          v39[0] = v38;
          v39[1] = v37;
          v39[2] = v36;
          URLComponents.url(relativeTo:)((uint64_t)v39, (uint64_t *)&v49);
          unint64_t v27 = v49;
          if (v49)
          {
            uint64_t v28 = v50;
            uint64_t v29 = v51;
            outlined release of URLComponents((uint64_t)&v52);
            uint64_t v31 = v32;
            goto LABEL_34;
          }
          goto LABEL_41;
        }
        *(void *)&long long v52 = v56;
        BYTE8(v52) = 0;
        *(_DWORD *)((char *)&v52 + 9) = *(_DWORD *)((char *)&v56 + 9);
        *(_WORD *)((char *)&v52 + 13) = BYTE13(v56);
        HIBYTE(v52) = HIBYTE(v56);
        LOBYTE(v53[0]) = v57;
        *(_OWORD *)((char *)v53 + 8) = v58;
        *(_OWORD *)((char *)&v53[1] + 8) = v59;
        *(_OWORD *)((char *)&v53[2] + 8) = v60;
        *(_OWORD *)((char *)&v53[3] + 8) = v61;
        *((void *)&v53[4] + 1) = v62;
        LOBYTE(v54) = v63;
        *((void *)&v54 + 1) = v21;
        *(void *)&v55[0] = v23;
        *(_OWORD *)((char *)v55 + 8) = v65;
        *(_OWORD *)((char *)&v55[1] + 8) = v66;
        BYTE8(v55[2]) = v15 & 1;
        BYTE9(v55[2]) = HIBYTE(v67);
        long long v46 = v54;
        long long v47 = v55[0];
        v48[0] = v55[1];
        *(_OWORD *)((char *)v48 + 10) = *(_OWORD *)((char *)&v55[1] + 10);
        long long v42 = v53[1];
        long long v43 = v53[2];
        long long v44 = v53[3];
        long long v45 = v53[4];
        long long v40 = v52;
        long long v41 = v53[0];
        URLComponents.url.getter((uint64_t *)&v49);
        unint64_t v27 = v49;
        if (v49)
        {
          uint64_t v28 = v50;
          uint64_t v29 = v51;
          outlined release of URLComponents((uint64_t)&v52);
          uint64_t v31 = v38;
LABEL_34:
          outlined consume of URL?(v31);
          swift_bridgeObjectRelease();
          goto LABEL_35;
        }
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    uint64_t v8 = HIBYTE(v6) & 0xF;
    goto LABEL_12;
  }
  uint64_t v30 = swift_bridgeObjectRelease();
  static URL.currentDirectoryOrNil()(&v56, v30);
  char v17 = (void *)v56;
  long long v52 = v56;
  *(void *)&v53[0] = v57;
  outlined copy of URL?(v56);
  URL.init(string:relativeTo:)(0, 0xE000000000000000, (id *)&v52, (uint64_t *)&v56);
  outlined consume of URL?(v17);
  unint64_t v27 = (void *)v56;
  if (!(void)v56)
  {
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v28 = *((void *)&v56 + 1);
  uint64_t v29 = v57;
  outlined consume of URL?(v17);
LABEL_35:
  *a1 = v27;
  a1[1] = v28;
  a1[2] = v29;
}

uint64_t specialized URL.appending<A>(path:directoryHint:encodingSlashes:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, unsigned char *a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v115 = a7;
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  v147._uint64_t countAndFlagsBits = a1;
  v147._unint64_t object = a2;
  swift_bridgeObjectRetain();
  uint64_t v13 = String.init<A>(_:)();
  if (!a6) {
LABEL_109:
  }
    __break(1u);
  unint64_t v15 = v13;
  unint64_t v16 = v14;
  char v17 = a6[168];
  char v111 = a8;
  uint64_t v113 = a3;
  id v114 = a5;
  if (v17)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = MEMORY[0x185302C80](0, 0xE000000000000000);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = String.subscript.getter();
  }
  uint64_t v19 = MEMORY[0x185301F50](v18);
  unint64_t v21 = v20;
  swift_bridgeObjectRelease();
  v131._uint64_t countAndFlagsBits = v19;
  v131._unint64_t object = (void *)v21;
  uint64_t v22 = HIBYTE(v21) & 0xF;
  uint64_t v112 = v19;
  if ((v21 & 0x2000000000000000) == 0) {
    uint64_t v22 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (v22 && (specialized Collection.first.getter(v15, v16) & 0x1FF) != 0x2F)
  {
    v147._uint64_t countAndFlagsBits = 47;
    v147._unint64_t object = (void *)0xE100000000000000;
    v27._uint64_t countAndFlagsBits = v15;
    v27._unint64_t object = (void *)v16;
    String.append(_:)(v27);
    unint64_t v15 = 47;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    unint64_t v23 = 1;
    unint64_t v16 = 0xE100000000000000;
LABEL_13:
    if ((v16 & 0xF00000000000000) != 0) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v23 = 0;
  if ((v16 & 0x2000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((v15 & 0xFFFFFFFFFFFFLL) != 0)
  {
LABEL_11:
    swift_bridgeObjectRetain();
    unint64_t v24 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v15, v16);
    id v26 = v25;
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_14:
  unint64_t v24 = 0;
  id v26 = (char *)0xE000000000000000;
LABEL_15:
  char v116 = a6;
  unint64_t v110 = v16;
  if (a4)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = specialized _copyCollectionToContiguousArray<A>(_:)(v24, (unint64_t)v26);
    swift_bridgeObjectRelease();
    uint64_t v138 = v28;
    v134[0] = &outlined read-only object #0 of specialized URL.appending<A>(path:directoryHint:encodingSlashes:);
    id v135 = &outlined read-only object #1 of specialized URL.appending<A>(path:directoryHint:encodingSlashes:);
    unint64_t v29 = *(void *)(v28 + 16);
    if (v29 < v23)
    {
      __break(1u);
    }
    else
    {
      char v117 = v26;
      id v26 = (char *)(v28 + 32);
      v147._uint64_t countAndFlagsBits = v28;
      v147._unint64_t object = (void *)(v28 + 32);
      uint64_t v148 = v23;
      unint64_t v149 = (2 * v29) | 1;
      swift_bridgeObjectRetain();
      unint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>);
      unint64_t v15 = (unint64_t)&demangling cache variable for type metadata for [UInt8];
      unint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>, (uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>);
      uint64_t v107 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance [A], &demangling cache variable for type metadata for [UInt8]);
      uint64_t v108 = MEMORY[0x1E4FBC370];
      RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
      unint64_t v30 = *(void *)(v28 + 16);
      if (v30 >= v23)
      {
        if (&v26[v23] != (char *)v147._object + v148) {
          goto LABEL_19;
        }
        if ((uint64_t)(v149 >> 1) < v148)
        {
LABEL_106:
          __break(1u);
          goto LABEL_107;
        }
        if (v23 == v148 && v30 == v149 >> 1)
        {
          swift_unknownObjectRelease();
        }
        else
        {
LABEL_19:
          specialized Array.replaceSubrange<A>(_:with:)(v23, v30, v147._countAndFlagsBits, (uint64_t)v147._object, v148, v149);
          swift_unknownObjectRelease();
        }
        char v31 = v113;
        unint64_t v24 = static String._fromUTF8Repairing(_:)();
        id v26 = v32;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_102;
  }
  char v31 = v113;
LABEL_22:
  uint64_t v28 = v115;
  if ((specialized BidirectionalCollection.last.getter(v112, v21) & 0x1FF) == 0x2F
    || (specialized Collection.first.getter(v24, (unint64_t)v26) & 0x1FF) == 0x2F)
  {
    __int16 v33 = specialized BidirectionalCollection.last.getter(v112, v21);
    swift_bridgeObjectRelease();
    if ((v33 & 0x1FF) == 0x2F && (specialized Collection.first.getter(v24, (unint64_t)v26) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 47;
    v34._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v34);
  }
  unint64_t v15 = (unint64_t)&v138;
  unint64_t v16 = (unint64_t)v134;
  v35._uint64_t countAndFlagsBits = v24;
  char v117 = v26;
  v35._unint64_t object = v26;
  String.append(_:)(v35);
  uint64_t countAndFlagsBits = v131._countAndFlagsBits;
  unint64_t object = v131._object;
  int v38 = specialized BidirectionalCollection.last.getter(v131._countAndFlagsBits, (unint64_t)v131._object) & 0x1FF;
  switch(v31)
  {
    case 1:
      goto LABEL_88;
    case 2:
      swift_retain();
      id v39 = v114;
      swift_retain();
      if (_foundation_swift_url_feature_enabled())
      {
        v147._uint64_t countAndFlagsBits = (uint64_t)v39;
        v147._unint64_t object = v116;
        uint64_t v148 = v115;
        URL.scheme.getter();
        if (!v40)
        {
          swift_release();
          swift_release();

          if (v38 != 47) {
            goto LABEL_88;
          }
          goto LABEL_86;
        }
        Swift::String v41 = String.lowercased()();
        swift_bridgeObjectRelease();
        if (v41._countAndFlagsBits == 1701603686 && v41._object == (void *)0xE400000000000000)
        {
          uint64_t v28 = v115;
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          goto LABEL_39;
        }
        char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v28 = v115;
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        if ((v45 & 1) == 0)
        {
LABEL_50:
          if (v38 != 47) {
            goto LABEL_88;
          }
          goto LABEL_86;
        }
      }
      else
      {
        unsigned __int8 v42 = objc_msgSend(v39, sel_isFileURL);
        swift_release();
        swift_release();

        if ((v42 & 1) == 0) {
          goto LABEL_50;
        }
      }
LABEL_39:
      if ((specialized Collection.first.getter(v131._countAndFlagsBits, (unint64_t)v131._object) & 0x1FF) != 0x2F)
      {
        if ((specialized Collection.first.getter(v131._countAndFlagsBits, (unint64_t)v131._object) & 0x1FF) == 0x2F)
        {
LABEL_107:
          __break(1u);
          goto LABEL_108;
        }
        if (v28)
        {
          if (*(unsigned char *)(v28 + 168))
          {
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v44 = MEMORY[0x185302C80](0, 0xE000000000000000);
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v28 = v115;
            uint64_t v44 = String.subscript.getter();
          }
          unint64_t v51 = MEMORY[0x185301F50](v44);
          unint64_t v53 = v52;
          swift_bridgeObjectRelease();
          if (*(unsigned char *)(v28 + 72) == 1
            && (*(unsigned char *)(v28 + 96) & 1) != 0
            && *(unsigned char *)(v28 + 120) == 1
            && (*(unsigned char *)(v28 + 144) & 1) != 0)
          {
            goto LABEL_66;
          }
          uint64_t v54 = HIBYTE(v53) & 0xF;
          if ((v53 & 0x2000000000000000) == 0) {
            uint64_t v54 = v51 & 0xFFFFFFFFFFFFLL;
          }
          if (v54)
          {
LABEL_66:
            uint64_t v55 = specialized Collection.first.getter(v131._countAndFlagsBits, (unint64_t)v131._object);
            if ((v55 & 0x1FF) == 0x2F)
            {
              swift_release();
              swift_bridgeObjectRelease();
              uint64_t v113 = 0;
            }
            else
            {
              LOBYTE(v147._countAndFlagsBits) = 47;
              MEMORY[0x1F4188790](v55);
              uint64_t v107 = (uint64_t)&v147;
              swift_bridgeObjectRetain();
              specialized BidirectionalCollection.lastIndex(where:)((unint64_t)_sSTsSQ7ElementRpzrlE8containsySbABFSbABXEfU_SS8UTF8ViewV_TG5TA_0, (uint64_t)v106, v51, v53);
              uint64_t v113 = 0;
              if (v56)
              {
                swift_release();
                swift_bridgeObjectRelease_n();
              }
              else
              {
                swift_bridgeObjectRetain();
                String.index(after:)();
                uint64_t v57 = String.subscript.getter();
                long long v59 = v58;
                uint64_t v61 = v60;
                uint64_t v112 = v62;
                swift_bridgeObjectRelease();
                uint64_t v138 = 0;
                unint64_t v139 = 0xE000000000000000;
                uint64_t v63 = String.count.getter();
                uint64_t v109 = v61;
                uint64_t v64 = v112;
                uint64_t v65 = Substring.distance(from:to:)();
                BOOL v66 = __OFADD__(v63, v65);
                uint64_t v67 = v63 + v65;
                if (v66)
                {
LABEL_108:
                  __break(1u);
                  goto LABEL_109;
                }
                MEMORY[0x185301FA0](v67);
                v147._uint64_t countAndFlagsBits = v57;
                v147._unint64_t object = v59;
                uint64_t v148 = v109;
                unint64_t v149 = v64;
                lazy protocol witness table accessor for type Substring and conformance Substring();
                String.append<A>(contentsOf:)();
                v147._uint64_t countAndFlagsBits = countAndFlagsBits;
                v147._unint64_t object = object;
                String.append<A>(contentsOf:)();
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                uint64_t countAndFlagsBits = v138;
                unint64_t object = (void *)v139;
              }
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            v147._uint64_t countAndFlagsBits = 47;
            v147._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v131);
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v113 = 0;
            unint64_t object = v147._object;
            uint64_t countAndFlagsBits = v147._countAndFlagsBits;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          uint64_t v113 = 0;
        }
        v147._uint64_t countAndFlagsBits = countAndFlagsBits;
        v147._unint64_t object = object;
        swift_bridgeObjectRetain();
        if (String.count.getter() < 2)
        {
          unint64_t v68 = (unint64_t)object;
        }
        else
        {
          unint64_t v68 = (unint64_t)object;
          if ((specialized BidirectionalCollection.last.getter(countAndFlagsBits, (unint64_t)object) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
            unint64_t v68 = (unint64_t)v147._object;
            uint64_t countAndFlagsBits = v147._countAndFlagsBits;
          }
        }
        uint64_t v138 = Set.init(minimumCapacity:)();
        uint64_t v69 = specialized Set._Variant.insert(_:)(v134, 0x2FuLL);
        uint64_t v47 = v138;
        uint64_t v70 = HIBYTE(v68) & 0xF;
        if ((v68 & 0x2000000000000000) == 0) {
          uint64_t v70 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }
        if (v70)
        {
          uint64_t v138 = countAndFlagsBits;
          unint64_t v139 = v68;
          MEMORY[0x1F4188790](v69);
          uint64_t v107 = (uint64_t)&v138;
          uint64_t v108 = v47;
          swift_bridgeObjectRetain();
          uint64_t v49 = countAndFlagsBits;
          unint64_t v50 = v68;
          goto LABEL_81;
        }
LABEL_83:
        swift_bridgeObjectRelease();
        uint64_t v28 = v115;
        goto LABEL_85;
      }
      Swift::String v147 = v131;
      swift_bridgeObjectRetain_n();
      if (String.count.getter() < 2)
      {
        unint64_t v43 = (unint64_t)v131._object;
      }
      else
      {
        unint64_t v43 = (unint64_t)v131._object;
        if ((specialized BidirectionalCollection.last.getter(v131._countAndFlagsBits, (unint64_t)v131._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          unint64_t v43 = (unint64_t)v147._object;
          uint64_t countAndFlagsBits = v147._countAndFlagsBits;
        }
      }
      uint64_t v138 = Set.init(minimumCapacity:)();
      uint64_t v46 = specialized Set._Variant.insert(_:)(v134, 0x2FuLL);
      uint64_t v47 = v138;
      uint64_t v48 = HIBYTE(v43) & 0xF;
      if ((v43 & 0x2000000000000000) == 0) {
        uint64_t v48 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (!v48) {
        goto LABEL_83;
      }
      uint64_t v138 = countAndFlagsBits;
      unint64_t v139 = v43;
      MEMORY[0x1F4188790](v46);
      uint64_t v107 = (uint64_t)&v138;
      uint64_t v108 = v47;
      swift_bridgeObjectRetain();
      uint64_t v49 = countAndFlagsBits;
      unint64_t v50 = v43;
LABEL_81:
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v106, v49, v50);
      if (v71 == 1)
      {
        Swift::Int v72 = v138;
        unint64_t v73 = v139;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v72, v73, v47);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v28 = v115;
LABEL_85:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LOBYTE(v147._countAndFlagsBits) = 0;
      id v74 = objc_msgSend(self, sel_defaultManager);
      objc_msgSend(v74, sel_fileExistsAtPath_isDirectory_, String._bridgeToObjectiveCImpl()(), &v147);
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease();
      if ((v147._countAndFlagsBits & 1) == 0) {
        goto LABEL_88;
      }
LABEL_86:
      if ((specialized BidirectionalCollection.last.getter(v131._countAndFlagsBits, (unint64_t)v131._object) & 0x1FF) != 0x2F)
      {
        v75._uint64_t countAndFlagsBits = 47;
        v75._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v75);
      }
LABEL_88:
      id v26 = v116;
      char v76 = v116[218];
      char v130 = 1;
      char v128 = 1;
      char v127 = 1;
      char v126 = 1;
      char v125 = 1;
      char v124 = 1;
      char v122 = 1;
      char v121 = 1;
      char v120 = 1;
      char v119 = v76;
      char v118 = 0;
      unint64_t v21 = v131._countAndFlagsBits;
      unint64_t v24 = (unint64_t)v131._object;
      char v129 = 0;
      char v123 = 0;
      if (((uint64_t)v131._object & 0x1000000000000000) == 0)
      {
        if (((uint64_t)v131._object & 0x2000000000000000) != 0)
        {
          uint64_t v78 = ((unint64_t)v131._object >> 56) & 0xF;
          v147._uint64_t countAndFlagsBits = v131._countAndFlagsBits;
          v147._unint64_t object = (void *)((uint64_t)v131._object & 0xFFFFFFFFFFFFFFLL);
          uint64_t v77 = (char *)&v147;
          goto LABEL_93;
        }
        if ((v131._countAndFlagsBits & 0x1000000000000000) != 0)
        {
          uint64_t v77 = (char *)(((uint64_t)v131._object & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v78 = v131._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          goto LABEL_93;
        }
LABEL_102:
        uint64_t v77 = (char *)_StringObject.sharedUTF8.getter();
LABEL_93:
        BOOL v79 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v77, v78, 0x10u, 1);
        swift_retain();
        swift_bridgeObjectRetain();
        if (v79) {
          goto LABEL_94;
        }
        goto LABEL_105;
      }
      Swift::String v147 = v131;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      swift_retain();
      StringProtocol._ephemeralString.getter();
      uint64_t v99 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v100 = (unsigned __int16 *)objc_msgSend(v99, sel__fastCharacterContents);
      id v101 = v99;
      if (v100)
      {
        v147._uint64_t countAndFlagsBits = v21;
        v147._unint64_t object = (void *)v24;
        StringProtocol._ephemeralString.getter();
        long long v102 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v103 = objc_msgSend(v102, sel_length);
        swift_unknownObjectRelease();
        char v104 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v100, (uint64_t)v103, 0x10u, 1);
      }
      else
      {
        char v104 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, v24, 0x10u, 1);
      }
      char v105 = v104;
      swift_bridgeObjectRelease_n();
      uint64_t v28 = v115;
      id v26 = v116;
      if ((v105 & 1) == 0)
      {
LABEL_105:
        swift_bridgeObjectRelease();
        LODWORD(v108) = 0;
        uint64_t v107 = 897;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_106;
      }
LABEL_94:
      swift_bridgeObjectRelease();
      char v80 = v120;
      char v81 = v119;
      char v82 = v118;
      uint64_t v138 = (uint64_t)v26;
      LOBYTE(v139) = v129;
      BYTE1(v139) = v128;
      BYTE2(v139) = v127;
      BYTE3(v139) = v126;
      BYTE4(v139) = v125;
      BYTE5(v139) = v124;
      BYTE6(v139) = v123;
      HIBYTE(v139) = v122;
      char v140 = v121;
      *(_OWORD *)(v16 + 216) = 0u;
      *(_OWORD *)(v16 + 232) = 0u;
      *(_OWORD *)(v16 + 248) = 0u;
      *(_OWORD *)(v15 + 72) = 0u;
      uint64_t v141 = 0;
      char v142 = v80;
      unint64_t v143 = v21;
      unint64_t v144 = v24;
      *(_OWORD *)(v15 + 120) = 0u;
      *(_OWORD *)(v15 + 136) = 0u;
      char v145 = v81;
      char v146 = v82;
      long long v83 = *(_OWORD *)(v15 + 16);
      long long v84 = *(_OWORD *)v15;
      long long v85 = v83;
      *(_OWORD *)(v15 + 160) = *(_OWORD *)v15;
      *(_OWORD *)(v15 + 176) = v83;
      long long v86 = *(_OWORD *)(v15 + 48);
      long long v88 = *(_OWORD *)(v15 + 64);
      long long v87 = *(_OWORD *)(v15 + 80);
      *(_OWORD *)(v15 + 224) = v88;
      *(_OWORD *)(v15 + 240) = v87;
      long long v90 = *(_OWORD *)(v15 + 32);
      long long v89 = *(_OWORD *)(v15 + 48);
      *(_OWORD *)(v15 + 192) = v90;
      *(_OWORD *)(v15 + 208) = v89;
      *(_OWORD *)((char *)v152 + 10) = *(_OWORD *)(v15 + 138);
      long long v91 = *(_OWORD *)(v15 + 112);
      v152[0] = *(_OWORD *)(v15 + 128);
      long long v92 = *(_OWORD *)(v15 + 112);
      long long v93 = *(_OWORD *)(v15 + 80);
      long long v150 = *(_OWORD *)(v15 + 96);
      long long v151 = v92;
      *(_OWORD *)(v16 + 96) = v150;
      *(_OWORD *)(v16 + 112) = v91;
      *(_OWORD *)(v16 + 128) = *(_OWORD *)(v15 + 128);
      *(_OWORD *)(v16 + 138) = *(_OWORD *)(v15 + 138);
      *(_OWORD *)(v16 + 32) = v90;
      *(_OWORD *)(v16 + 48) = v86;
      *(_OWORD *)(v16 + 64) = v88;
      *(_OWORD *)(v16 + 80) = v93;
      *(_OWORD *)unint64_t v16 = v84;
      *(_OWORD *)(v16 + 16) = v85;
      id v94 = v114;
      id v135 = v114;
      long long v136 = v26;
      uint64_t v137 = v28;
      outlined retain of URLComponents((uint64_t)&v147);
      URL.baseURL.getter(v133);
      uint64_t v95 = (void *)v133[0];
      v132[0] = v133[0];
      v132[1] = v133[1];
      v132[2] = v133[2];
      URLComponents.url(relativeTo:)((uint64_t)v132, (uint64_t *)&v135);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of URL?(v95);
      outlined release of URLComponents((uint64_t)&v138);
      outlined release of URLComponents((uint64_t)&v138);
      id v96 = v135;
      if (v135)
      {
        id v26 = v136;
        uint64_t v28 = v137;
      }
      else
      {
        swift_retain();
        id v96 = v94;
        swift_retain();
      }
      uint64_t v97 = v111;
      *char v111 = v96;
      v97[1] = v26;
      v97[2] = v28;
      return swift_bridgeObjectRelease();
    case 3:
      goto LABEL_50;
    default:
      goto LABEL_86;
  }
}

uint64_t URL.appending<A>(path:directoryHint:encodingSlashes:)@<X0>(uint64_t a1@<X0>, char a2@<W2>, void *a3@<X8>)
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  double v6 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (void *)*v8;
  uint64_t v10 = *(void *)(v3 + 8);
  id v122 = *(id *)v3;
  unsigned int v11 = *(unsigned char **)(v3 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v14, v13, v6);
  uint64_t v15 = String.init<A>(_:)();
  if (!v10) {
LABEL_110:
  }
    __break(1u);
  uint64_t v17 = v15;
  unint64_t v18 = v16;
  char v19 = *(unsigned char *)(v10 + 168);
  char v124 = v11;
  char v119 = a3;
  char v121 = v9;
  if (v19)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = MEMORY[0x185302C80](0, 0xE000000000000000);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = String.subscript.getter();
  }
  uint64_t v21 = MEMORY[0x185301F50](v20);
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  uint64_t v139 = v21;
  unint64_t v140 = v23;
  uint64_t v24 = HIBYTE(v23) & 0xF;
  uint64_t v120 = v21;
  if ((v23 & 0x2000000000000000) == 0) {
    uint64_t v24 = v21 & 0xFFFFFFFFFFFFLL;
  }
  if (!v24 || (specialized Collection.first.getter(v17, v18) & 0x1FF) == 0x2F)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v25 = 0;
    if ((v18 & 0x2000000000000000) == 0) {
      goto LABEL_10;
    }
LABEL_13:
    if ((v18 & 0xF00000000000000) != 0) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  uint64_t v156 = 47;
  unint64_t v157 = 0xE100000000000000;
  v29._uint64_t countAndFlagsBits = v17;
  v29._unint64_t object = (void *)v18;
  String.append(_:)(v29);
  uint64_t v17 = v156;
  unint64_t v30 = v157;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  unint64_t v25 = 1;
  unint64_t v18 = v30;
  if ((v30 & 0x2000000000000000) != 0) {
    goto LABEL_13;
  }
LABEL_10:
  if ((v17 & 0xFFFFFFFFFFFFLL) != 0)
  {
LABEL_11:
    swift_bridgeObjectRetain();
    uint64_t v26 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v17, v18);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v26 = 0;
  uint64_t v28 = (void *)0xE000000000000000;
LABEL_15:
  unint64_t v123 = v10;
  v118[1] = v18;
  if (a2)
  {
    swift_bridgeObjectRetain();
    unint64_t v31 = specialized _copyCollectionToContiguousArray<A>(_:)(v26, (unint64_t)v28);
    swift_bridgeObjectRelease();
    uint64_t v147 = v31;
    v143[0] = &outlined read-only object #0 of URL.appending<A>(path:directoryHint:encodingSlashes:);
    id v144 = &outlined read-only object #1 of URL.appending<A>(path:directoryHint:encodingSlashes:);
    unint64_t v32 = *(void *)(v31 + 16);
    if (v32 < v25)
    {
      __break(1u);
    }
    else
    {
      char v125 = v28;
      uint64_t v10 = v31 + 32;
      uint64_t v156 = v31;
      unint64_t v157 = v31 + 32;
      uint64_t v158 = v25;
      unint64_t v159 = (2 * v32) | 1;
      swift_bridgeObjectRetain();
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>);
      uint64_t v17 = (uint64_t)&demangling cache variable for type metadata for [UInt8];
      unint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      uint64_t v28 = (void *)lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>, (uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>);
      uint64_t v116 = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [UInt8] and conformance [A], &demangling cache variable for type metadata for [UInt8]);
      uint64_t v117 = MEMORY[0x1E4FBC370];
      RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
      unint64_t v33 = *(void *)(v31 + 16);
      if (v33 >= v25)
      {
        if (v10 + v25 != v157 + v158) {
          goto LABEL_19;
        }
        if ((uint64_t)(v159 >> 1) < v158)
        {
LABEL_107:
          __break(1u);
          goto LABEL_108;
        }
        if (v25 == v158 && v33 == v159 >> 1)
        {
          swift_unknownObjectRelease();
        }
        else
        {
LABEL_19:
          specialized Array.replaceSubrange<A>(_:with:)(v25, v33, v156, v157, v158, v159);
          swift_unknownObjectRelease();
        }
        uint64_t v34 = v120;
        uint64_t v26 = static String._fromUTF8Repairing(_:)();
        uint64_t v36 = v35;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v28 = v36;
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_103;
  }
  uint64_t v34 = v120;
LABEL_22:
  if ((specialized BidirectionalCollection.last.getter(v34, v23) & 0x1FF) == 0x2F
    || (specialized Collection.first.getter(v26, (unint64_t)v28) & 0x1FF) == 0x2F)
  {
    __int16 v37 = specialized BidirectionalCollection.last.getter(v34, v23);
    swift_bridgeObjectRelease();
    if ((v37 & 0x1FF) == 0x2F && (specialized Collection.first.getter(v26, (unint64_t)v28) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 47;
    v38._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v38);
  }
  unint64_t v25 = (unint64_t)&v156;
  uint64_t v17 = (uint64_t)&v147;
  unint64_t v18 = (unint64_t)v143;
  v39._uint64_t countAndFlagsBits = v26;
  char v125 = v28;
  v39._unint64_t object = v28;
  String.append(_:)(v39);
  uint64_t v41 = v139;
  unint64_t v40 = v140;
  int v42 = specialized BidirectionalCollection.last.getter(v139, v140) & 0x1FF;
  switch((unint64_t)v121)
  {
    case 1uLL:
      goto LABEL_88;
    case 2uLL:
      char v121 = (void *)v40;
      uint64_t v43 = (uint64_t)v124;
      swift_retain();
      id v44 = v122;
      unint64_t v45 = v123;
      swift_retain();
      if (_foundation_swift_url_feature_enabled())
      {
        uint64_t v156 = (uint64_t)v44;
        unint64_t v157 = v45;
        uint64_t v158 = v43;
        URL.scheme.getter();
        if (!v46)
        {
          swift_release();
          swift_release();

          unint64_t v25 = (unint64_t)&v156;
          if (v42 != 47) {
            goto LABEL_88;
          }
          goto LABEL_86;
        }
        Swift::String v47 = String.lowercased()();
        swift_bridgeObjectRelease();
        if (v47._countAndFlagsBits == 1701603686 && v47._object == (void *)0xE400000000000000)
        {
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          uint64_t v48 = v121;
          goto LABEL_39;
        }
        char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        unint64_t v25 = (unint64_t)&v156;
        uint64_t v48 = v121;
        if ((v53 & 1) == 0)
        {
LABEL_50:
          if (v42 != 47) {
            goto LABEL_88;
          }
          goto LABEL_86;
        }
      }
      else
      {
        unsigned __int8 v49 = objc_msgSend(v44, sel_isFileURL);
        swift_release();
        swift_release();

        uint64_t v48 = v121;
        if ((v49 & 1) == 0) {
          goto LABEL_50;
        }
      }
LABEL_39:
      if ((specialized Collection.first.getter(v41, (unint64_t)v48) & 0x1FF) != 0x2F)
      {
        if ((specialized Collection.first.getter(v41, (unint64_t)v48) & 0x1FF) == 0x2F)
        {
LABEL_108:
          __break(1u);
          goto LABEL_109;
        }
        unint64_t v51 = v124;
        if (v124)
        {
          if (v124[168])
          {
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v52 = MEMORY[0x185302C80](0, 0xE000000000000000);
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_retain();
            uint64_t v52 = String.subscript.getter();
          }
          unint64_t v60 = MEMORY[0x185301F50](v52);
          unint64_t v62 = v61;
          swift_bridgeObjectRelease();
          if (v51[72] == 1 && (v124[96] & 1) != 0 && v124[120] == 1 && (v124[144] & 1) != 0) {
            goto LABEL_66;
          }
          uint64_t v63 = HIBYTE(v62) & 0xF;
          if ((v62 & 0x2000000000000000) == 0) {
            uint64_t v63 = v60 & 0xFFFFFFFFFFFFLL;
          }
          if (v63)
          {
LABEL_66:
            uint64_t v64 = specialized Collection.first.getter(v41, (unint64_t)v48);
            if ((v64 & 0x1FF) == 0x2F)
            {
              swift_release();
              swift_bridgeObjectRelease();
              char v121 = 0;
            }
            else
            {
              LOBYTE(v156) = 47;
              MEMORY[0x1F4188790](v64);
              uint64_t v116 = (uint64_t)&v156;
              swift_bridgeObjectRetain();
              specialized BidirectionalCollection.lastIndex(where:)((unint64_t)_sSTsSQ7ElementRpzrlE8containsySbABFSbABXEfU_SS8UTF8ViewV_TG5TA_0, (uint64_t)&v118[-4], v60, v62);
              char v121 = 0;
              if (v66)
              {
                swift_release();
                swift_bridgeObjectRelease_n();
              }
              else
              {
                swift_bridgeObjectRetain();
                String.index(after:)();
                uint64_t v67 = String.subscript.getter();
                unint64_t v69 = v68;
                uint64_t v71 = v70;
                uint64_t v120 = v72;
                swift_bridgeObjectRelease();
                uint64_t v147 = 0;
                unint64_t v148 = 0xE000000000000000;
                uint64_t v73 = String.count.getter();
                v118[0] = v71;
                unint64_t v74 = v120;
                uint64_t v75 = Substring.distance(from:to:)();
                BOOL v76 = __OFADD__(v73, v75);
                uint64_t v77 = v73 + v75;
                if (v76)
                {
LABEL_109:
                  __break(1u);
                  goto LABEL_110;
                }
                MEMORY[0x185301FA0](v77);
                uint64_t v156 = v67;
                unint64_t v157 = v69;
                uint64_t v158 = v118[0];
                unint64_t v159 = v74;
                lazy protocol witness table accessor for type Substring and conformance Substring();
                String.append<A>(contentsOf:)();
                uint64_t v156 = v41;
                unint64_t v157 = (unint64_t)v48;
                String.append<A>(contentsOf:)();
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                uint64_t v41 = v147;
                uint64_t v48 = (void *)v148;
              }
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v156 = 47;
            unint64_t v157 = 0xE100000000000000;
            v65._uint64_t countAndFlagsBits = v41;
            v65._unint64_t object = v48;
            String.append(_:)(v65);
            swift_bridgeObjectRelease();
            swift_release();
            char v121 = 0;
            uint64_t v41 = v156;
            uint64_t v48 = (void *)v157;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          char v121 = 0;
        }
        uint64_t v156 = v41;
        unint64_t v157 = (unint64_t)v48;
        swift_bridgeObjectRetain();
        if (String.count.getter() <= 1)
        {
          unint64_t v78 = (unint64_t)v48;
        }
        else
        {
          unint64_t v78 = (unint64_t)v48;
          if ((specialized BidirectionalCollection.last.getter(v41, (unint64_t)v48) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
            uint64_t v41 = v156;
            unint64_t v78 = v157;
          }
        }
        uint64_t v147 = Set.init(minimumCapacity:)();
        uint64_t v79 = specialized Set._Variant.insert(_:)(v143, 0x2FuLL);
        uint64_t v55 = v147;
        uint64_t v80 = HIBYTE(v78) & 0xF;
        if ((v78 & 0x2000000000000000) == 0) {
          uint64_t v80 = v41 & 0xFFFFFFFFFFFFLL;
        }
        if (v80)
        {
          uint64_t v147 = v41;
          unint64_t v148 = v78;
          MEMORY[0x1F4188790](v79);
          uint64_t v116 = (uint64_t)&v147;
          uint64_t v117 = v55;
          swift_bridgeObjectRetain();
          uint64_t v57 = &v118[-4];
          uint64_t v58 = v41;
          unint64_t v59 = v78;
          goto LABEL_81;
        }
LABEL_83:
        swift_bridgeObjectRelease();
        unint64_t v25 = (unint64_t)&v156;
        goto LABEL_85;
      }
      uint64_t v156 = v41;
      unint64_t v157 = (unint64_t)v48;
      swift_bridgeObjectRetain_n();
      if (String.count.getter() < 2)
      {
        unint64_t v50 = (unint64_t)v48;
      }
      else
      {
        unint64_t v50 = (unint64_t)v48;
        if ((specialized BidirectionalCollection.last.getter(v41, (unint64_t)v48) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t v41 = v156;
          unint64_t v50 = v157;
        }
      }
      uint64_t v147 = Set.init(minimumCapacity:)();
      uint64_t v54 = specialized Set._Variant.insert(_:)(v143, 0x2FuLL);
      uint64_t v55 = v147;
      uint64_t v56 = HIBYTE(v50) & 0xF;
      if ((v50 & 0x2000000000000000) == 0) {
        uint64_t v56 = v41 & 0xFFFFFFFFFFFFLL;
      }
      if (!v56) {
        goto LABEL_83;
      }
      uint64_t v147 = v41;
      unint64_t v148 = v50;
      MEMORY[0x1F4188790](v54);
      uint64_t v116 = (uint64_t)&v147;
      uint64_t v117 = v55;
      swift_bridgeObjectRetain();
      uint64_t v57 = &v118[-4];
      uint64_t v58 = v41;
      unint64_t v59 = v50;
LABEL_81:
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))_sSy10FoundationE26removingURLPercentEncoding33_A90579D1FA072CB135F95EF00BA464509excludingSSSgShys5UInt8VG_tFAESRyAGGXEfU_SS_TG5TA_0, (uint64_t)v57, v58, v59);
      if (v81 == 1)
      {
        Swift::Int v82 = v147;
        unint64_t v83 = v148;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v82, v83, v55);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v25 = (unint64_t)&v156;
LABEL_85:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LOBYTE(v156) = 0;
      id v84 = objc_msgSend(self, sel_defaultManager);
      objc_msgSend(v84, sel_fileExistsAtPath_isDirectory_, String._bridgeToObjectiveCImpl()(), &v156);
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease();
      if ((v156 & 1) == 0) {
        goto LABEL_88;
      }
LABEL_86:
      if ((specialized BidirectionalCollection.last.getter(v139, v140) & 0x1FF) != 0x2F)
      {
        v85._uint64_t countAndFlagsBits = 47;
        v85._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v85);
      }
LABEL_88:
      uint64_t v10 = v123;
      char v86 = *(unsigned char *)(v123 + 218);
      char v138 = 1;
      char v136 = 1;
      char v135 = 1;
      char v134 = 1;
      char v133 = 1;
      char v132 = 1;
      char v130 = 1;
      char v129 = 1;
      char v128 = 1;
      char v127 = v86;
      char v126 = 0;
      unint64_t v31 = v139;
      uint64_t v26 = v140;
      char v137 = 0;
      char v131 = 0;
      if ((v140 & 0x1000000000000000) == 0)
      {
        if ((v140 & 0x2000000000000000) != 0)
        {
          uint64_t v156 = v139;
          unint64_t v157 = v140 & 0xFFFFFFFFFFFFFFLL;
          BOOL v89 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)((char *)&v156, HIBYTE(v140) & 0xF, 0x10u, 1);
          uint64_t v28 = v119;
          unint64_t v23 = (unint64_t)v124;
LABEL_94:
          swift_retain();
          swift_bridgeObjectRetain();
          if (v89) {
            goto LABEL_95;
          }
          goto LABEL_106;
        }
        uint64_t v28 = v119;
        unint64_t v23 = (unint64_t)v124;
        if ((v139 & 0x1000000000000000) != 0)
        {
          long long v87 = (char *)((v140 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v88 = v139 & 0xFFFFFFFFFFFFLL;
LABEL_92:
          BOOL v89 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v87, v88, 0x10u, 1);
          goto LABEL_94;
        }
LABEL_103:
        long long v87 = (char *)_StringObject.sharedUTF8.getter();
        goto LABEL_92;
      }
      uint64_t v156 = v139;
      unint64_t v157 = v140;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      swift_retain();
      StringProtocol._ephemeralString.getter();
      uint64_t v109 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      unint64_t v110 = (unsigned __int16 *)objc_msgSend(v109, sel__fastCharacterContents);
      id v111 = v109;
      if (v110)
      {
        uint64_t v156 = v31;
        unint64_t v157 = v26;
        StringProtocol._ephemeralString.getter();
        uint64_t v112 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v113 = objc_msgSend(v112, sel_length);
        swift_unknownObjectRelease();
        char v114 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v110, (uint64_t)v113, 0x10u, 1);
      }
      else
      {
        char v114 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v31, v26, 0x10u, 1);
      }
      char v115 = v114;
      swift_bridgeObjectRelease_n();
      uint64_t v28 = v119;
      uint64_t v10 = v123;
      unint64_t v23 = (unint64_t)v124;
      unint64_t v25 = (unint64_t)&v156;
      if ((v115 & 1) == 0)
      {
LABEL_106:
        swift_bridgeObjectRelease();
        LODWORD(v117) = 0;
        uint64_t v116 = 897;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_107;
      }
LABEL_95:
      swift_bridgeObjectRelease();
      char v90 = v128;
      char v91 = v127;
      char v92 = v126;
      uint64_t v147 = v10;
      LOBYTE(v148) = v137;
      BYTE1(v148) = v136;
      BYTE2(v148) = v135;
      BYTE3(v148) = v134;
      BYTE4(v148) = v133;
      BYTE5(v148) = v132;
      BYTE6(v148) = v131;
      HIBYTE(v148) = v130;
      char v149 = v129;
      *(_OWORD *)(v18 + 216) = 0u;
      *(_OWORD *)(v18 + 232) = 0u;
      *(_OWORD *)(v18 + 248) = 0u;
      *(_OWORD *)(v17 + 72) = 0u;
      uint64_t v150 = 0;
      char v151 = v90;
      unint64_t v152 = v31;
      uint64_t v153 = v26;
      *(_OWORD *)(v17 + 120) = 0u;
      *(_OWORD *)(v17 + 136) = 0u;
      char v154 = v91;
      char v155 = v92;
      long long v93 = *(_OWORD *)(v17 + 16);
      long long v94 = *(_OWORD *)v17;
      long long v95 = v93;
      *(_OWORD *)(v17 + 160) = *(_OWORD *)v17;
      *(_OWORD *)(v17 + 176) = v93;
      long long v96 = *(_OWORD *)(v17 + 48);
      long long v98 = *(_OWORD *)(v17 + 64);
      long long v97 = *(_OWORD *)(v17 + 80);
      *(_OWORD *)(v17 + 224) = v98;
      *(_OWORD *)(v17 + 240) = v97;
      long long v100 = *(_OWORD *)(v17 + 32);
      long long v99 = *(_OWORD *)(v17 + 48);
      *(_OWORD *)(v17 + 192) = v100;
      *(_OWORD *)(v17 + 208) = v99;
      *(_OWORD *)(v25 + 138) = *(_OWORD *)(v17 + 138);
      long long v101 = *(_OWORD *)(v17 + 112);
      *(_OWORD *)(v25 + 128) = *(_OWORD *)(v17 + 128);
      long long v103 = *(_OWORD *)(v17 + 96);
      long long v102 = *(_OWORD *)(v17 + 112);
      long long v104 = *(_OWORD *)(v17 + 80);
      *(_OWORD *)(v25 + 96) = v103;
      *(_OWORD *)(v25 + 112) = v102;
      *(_OWORD *)(v18 + 96) = v103;
      *(_OWORD *)(v18 + 112) = v101;
      *(_OWORD *)(v18 + 128) = *(_OWORD *)(v17 + 128);
      *(_OWORD *)(v18 + 138) = *(_OWORD *)(v17 + 138);
      *(_OWORD *)(v18 + 32) = v100;
      *(_OWORD *)(v18 + 48) = v96;
      *(_OWORD *)(v18 + 64) = v98;
      *(_OWORD *)(v18 + 80) = v104;
      *(_OWORD *)unint64_t v18 = v94;
      *(_OWORD *)(v18 + 16) = v95;
      id v105 = v122;
      id v144 = v122;
      uint64_t v145 = v10;
      unint64_t v146 = v23;
      outlined retain of URLComponents((uint64_t)&v156);
      URL.baseURL.getter(v142);
      id v106 = (void *)v142[0];
      v141[0] = v142[0];
      v141[1] = v142[1];
      v141[2] = v142[2];
      URLComponents.url(relativeTo:)((uint64_t)v141, (uint64_t *)&v144);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of URL?(v106);
      outlined release of URLComponents((uint64_t)&v147);
      outlined release of URLComponents((uint64_t)&v147);
      id v107 = v144;
      if (v144)
      {
        uint64_t v10 = v145;
        unint64_t v23 = v146;
      }
      else
      {
        swift_retain();
        id v107 = v105;
        swift_retain();
      }
      *uint64_t v28 = v107;
      v28[1] = v10;
      v28[2] = v23;
      return swift_bridgeObjectRelease();
    case 3uLL:
      goto LABEL_50;
    default:
      goto LABEL_86;
  }
}

double URL.append<A>(component:directoryHint:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  return URL.append<A>(path:directoryHint:)(a1, a2, a3, a4, (void (*)(uint64_t *__return_ptr, uint64_t, char *))URL.appending<A>(component:directoryHint:));
}

uint64_t URL.appending(queryItems:)@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  *(void *)&long long v40 = *(void *)v1;
  *((void *)&v40 + 1) = v3;
  *(void *)&long long v41 = v5;
  uint64_t v6 = URL.absoluteString.getter();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v6, v7, 1, (uint64_t)v30);
  outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)&v31, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v31) == 1) {
    goto LABEL_6;
  }
  long long v46 = v37;
  long long v47 = v38;
  v48[0] = v39[0];
  *(_OWORD *)((char *)v48 + 10) = *(_OWORD *)((char *)v39 + 10);
  long long v42 = v33;
  long long v43 = v34;
  long long v44 = v35;
  long long v45 = v36;
  long long v40 = v31;
  long long v41 = v32;
  v19[6] = v37;
  v19[7] = v38;
  v20[0] = v39[0];
  *(_OWORD *)((char *)v20 + 10) = *(_OWORD *)((char *)v39 + 10);
  v19[2] = v33;
  v19[3] = v34;
  v19[4] = v35;
  v19[5] = v36;
  v19[0] = v31;
  v19[1] = v32;
  long long v27 = v37;
  long long v28 = v38;
  v29[0] = v39[0];
  *(_OWORD *)((char *)v29 + 10) = *(_OWORD *)((char *)v39 + 10);
  long long v23 = v33;
  long long v24 = v34;
  long long v25 = v35;
  long long v26 = v36;
  long long v21 = v31;
  long long v22 = v32;
  outlined retain of URLComponents((uint64_t)v19);
  unint64_t v8 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(0);
  outlined release of URLComponents?(v30);
  uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
  if (v8) {
    uint64_t v9 = (void *)v8;
  }
  unint64_t v18 = v9;
  uint64_t v10 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v10);
  v49.value._rawValue = v18;
  URLComponents._URLComponents.setQueryItems(_:)(v49);
  swift_bridgeObjectRelease();
  v16[6] = v27;
  v16[7] = v28;
  v17[0] = v29[0];
  *(_OWORD *)((char *)v17 + 10) = *(_OWORD *)((char *)v29 + 10);
  v16[2] = v23;
  v16[3] = v24;
  v16[4] = v25;
  v16[5] = v26;
  v16[0] = v21;
  v16[1] = v22;
  URLComponents.url.getter(&v14);
  uint64_t result = outlined release of URLComponents((uint64_t)v16);
  if (!v14)
  {
LABEL_6:
    *a1 = v4;
    a1[1] = v3;
    a1[2] = v5;
    swift_retain();
    id v13 = v4;
    return swift_retain();
  }
  else
  {
    long long v12 = v15;
    *a1 = v14;
    *(_OWORD *)(a1 + 1) = v12;
  }
  return result;
}

Swift::Void __swiftcall URL.append(queryItems:)(Swift::OpaquePointer queryItems)
{
  id v2 = *(void **)v1;
  URL.appending(queryItems:)(&v3);

  swift_release();
  swift_release();
  *(void *)uint64_t v1 = v3;
  *(_OWORD *)(v1 + 8) = v4;
}

void static URL.currentDirectory()(void *a1@<X8>)
{
  id v2 = objc_msgSend(self, sel_defaultManager);
  id v3 = objc_msgSend(v2, sel_currentDirectoryPath);

  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  unint64_t v6 = v5;

  unsigned __int8 v8 = 0;
  memset(v7, 0, sizeof(v7));
  URL.init(filePath:directoryHint:relativeTo:)((uint64_t)v4, v6, &v8, (uint64_t)v7, a1);
}

void static URL.homeDirectory.getter(void *a1@<X8>)
{
  id v2 = NSHomeDirectory();
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  unint64_t v5 = v4;

  unsigned __int8 v7 = 0;
  memset(v6, 0, sizeof(v6));
  URL.init(filePath:directoryHint:relativeTo:)((uint64_t)v3, v5, &v7, (uint64_t)v6, a1);
}

void static URL.homeDirectory(forUser:)(uint64_t a1@<X8>)
{
  id v2 = (NSString *)String._bridgeToObjectiveCImpl()();
  id v3 = NSHomeDirectoryForUser(v2);
  swift_unknownObjectRelease();
  if (v3)
  {
    id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    unint64_t v6 = v5;

    unsigned __int8 v10 = 0;
    memset(v9, 0, sizeof(v9));
    URL.init(filePath:directoryHint:relativeTo:)((uint64_t)v4, v6, &v10, (uint64_t)v9, &v11);
    uint64_t v7 = v11;
    long long v8 = v12;
  }
  else
  {
    uint64_t v7 = 0;
    long long v8 = 0uLL;
  }
  *(void *)a1 = v7;
  *(_OWORD *)(a1 + 8) = v8;
}

void static URL.cachesDirectory.getter(void *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend(self, sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 13, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        unint64_t v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        unsigned __int8 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      [(NSArray *)v3 copy];
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      unint64_t v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v5 = (void *)MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
        goto LABEL_15;
      }
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    [(NSArray *)v3 copy];
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    long long v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  unint64_t v6 = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, 1uLL, 1);
  if (v6)
  {
    id v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      long long v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  long long v8 = (void *)MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned __int8 v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.applicationDirectory.getter(void *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend(self, sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 1, 2);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        unint64_t v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        unsigned __int8 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      [(NSArray *)v3 copy];
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      unint64_t v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v5 = (void *)MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
        goto LABEL_15;
      }
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    [(NSArray *)v3 copy];
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    long long v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  unint64_t v6 = NSSearchPathForDirectoriesInDomains(NSApplicationDirectory, 2uLL, 1);
  if (v6)
  {
    id v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      long long v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  long long v8 = (void *)MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned __int8 v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.userDirectory.getter(void *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend(self, sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 7, 2);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        unint64_t v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        unsigned __int8 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      [(NSArray *)v3 copy];
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      unint64_t v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v5 = (void *)MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
        goto LABEL_15;
      }
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    [(NSArray *)v3 copy];
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    long long v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  unint64_t v6 = NSSearchPathForDirectoriesInDomains(NSUserDirectory, 2uLL, 1);
  if (v6)
  {
    id v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      long long v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  long long v8 = (void *)MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned __int8 v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.documentsDirectory.getter(void *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend(self, sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 9, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        unint64_t v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        unsigned __int8 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      [(NSArray *)v3 copy];
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      unint64_t v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v5 = (void *)MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
        goto LABEL_15;
      }
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    [(NSArray *)v3 copy];
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    long long v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  unint64_t v6 = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, 1uLL, 1);
  if (v6)
  {
    id v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      long long v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  long long v8 = (void *)MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned __int8 v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.desktopDirectory.getter(void *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend(self, sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 12, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        unint64_t v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        unsigned __int8 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      [(NSArray *)v3 copy];
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      unint64_t v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v5 = (void *)MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
        goto LABEL_15;
      }
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    [(NSArray *)v3 copy];
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    long long v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  unint64_t v6 = NSSearchPathForDirectoriesInDomains(NSDesktopDirectory, 1uLL, 1);
  if (v6)
  {
    id v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      long long v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  long long v8 = (void *)MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned __int8 v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.downloadsDirectory.getter(void *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend(self, sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 15, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        unint64_t v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        unsigned __int8 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      [(NSArray *)v3 copy];
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      unint64_t v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v5 = (void *)MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
        goto LABEL_15;
      }
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    [(NSArray *)v3 copy];
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    long long v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  unint64_t v6 = NSSearchPathForDirectoriesInDomains(NSDownloadsDirectory, 1uLL, 1);
  if (v6)
  {
    id v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      long long v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  long long v8 = (void *)MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned __int8 v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.moviesDirectory.getter(void *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend(self, sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 17, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        unint64_t v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        unsigned __int8 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      [(NSArray *)v3 copy];
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      unint64_t v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v5 = (void *)MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
        goto LABEL_15;
      }
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    [(NSArray *)v3 copy];
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    long long v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  unint64_t v6 = NSSearchPathForDirectoriesInDomains(NSMoviesDirectory, 1uLL, 1);
  if (v6)
  {
    id v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      long long v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  long long v8 = (void *)MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned __int8 v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.musicDirectory.getter(void *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend(self, sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 18, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        unint64_t v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        unsigned __int8 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      [(NSArray *)v3 copy];
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      unint64_t v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v5 = (void *)MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
        goto LABEL_15;
      }
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    [(NSArray *)v3 copy];
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    long long v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  unint64_t v6 = NSSearchPathForDirectoriesInDomains(NSMusicDirectory, 1uLL, 1);
  if (v6)
  {
    id v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      long long v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  long long v8 = (void *)MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned __int8 v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.picturesDirectory.getter(void *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend(self, sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 19, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        unint64_t v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        unsigned __int8 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      [(NSArray *)v3 copy];
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      unint64_t v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v5 = (void *)MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
        goto LABEL_15;
      }
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    [(NSArray *)v3 copy];
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    long long v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  unint64_t v6 = NSSearchPathForDirectoriesInDomains(NSPicturesDirectory, 1uLL, 1);
  if (v6)
  {
    id v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      long long v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  long long v8 = (void *)MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned __int8 v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.sharedPublicDirectory.getter(void *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend(self, sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 21, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        unint64_t v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        unsigned __int8 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      [(NSArray *)v3 copy];
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      unint64_t v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v5 = (void *)MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
        goto LABEL_15;
      }
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    [(NSArray *)v3 copy];
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    long long v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  unint64_t v6 = NSSearchPathForDirectoriesInDomains(NSSharedPublicDirectory, 1uLL, 1);
  if (v6)
  {
    id v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      long long v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  long long v8 = (void *)MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned __int8 v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void static URL.trashDirectory.getter(void *a1@<X8>)
{
  if (_foundation_swift_url_feature_enabled())
  {
    id v2 = objc_msgSend(self, sel_defaultManager);
    id v3 = (NSArray *)objc_msgSend(v2, sel_URLsForDirectory_inDomains_, 102, 1);

    if (v3)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<URL>);
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        unint64_t v5 = (void *)v4;

        if (!v5[2]) {
          goto LABEL_20;
        }
LABEL_15:
        unsigned __int8 v10 = (void *)v5[4];
        uint64_t v9 = v5[5];
        uint64_t v11 = v5[6];
        swift_retain();
        id v12 = v10;
        swift_retain();
        swift_bridgeObjectRelease();
        *a1 = v12;
        a1[1] = v9;
        a1[2] = v11;
        return;
      }
      swift_unknownObjectRelease();
      [(NSArray *)v3 copy];
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      unint64_t v5 = (void *)specialized _arrayForceCast<A, B>(_:)(v15);

      swift_bridgeObjectRelease();
      if (v5[2]) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v5 = (void *)MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
        goto LABEL_15;
      }
    }
LABEL_20:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_21:
    swift_unknownObjectRelease();
    [(NSArray *)v3 copy];
    unint64_t v16 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    long long v8 = (void *)specialized _arrayForceCast<A, B>(_:)(v16);

    swift_bridgeObjectRelease();
    if (!v8[2]) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  unint64_t v6 = NSSearchPathForDirectoriesInDomains(NSTrashDirectory, 1uLL, 1);
  if (v6)
  {
    id v3 = v6;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v7 = swift_dynamicCastClass();
    if (v7)
    {
      long long v8 = (void *)v7;

      if (!v8[2]) {
        goto LABEL_22;
      }
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  long long v8 = (void *)MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_17:
  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned __int8 v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

void URL.init(for:in:appropriateFor:create:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v8 = *a3;
  id v9 = objc_msgSend(self, sel_defaultManager);
  if (v8)
  {
    id v10 = v8;
    outlined consume of URL?(v8);
  }
  else
  {
    id v10 = 0;
  }
  id v18 = 0;
  id v11 = objc_msgSend(v9, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, a1, a2, v10, a4 & 1, &v18);

  id v12 = v18;
  if (v11)
  {
    URL.init(reference:)(v11, &v18);
    id v13 = v18;
    long long v16 = v19;
    id v14 = v12;

    *(void *)a5 = v13;
    *(_OWORD *)(a5 + 8) = v16;
  }
  else
  {
    if (v18)
    {
      v18;
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v15 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
}

BOOL static URL.DirectoryHint.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void URL.DirectoryHint.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int URL.DirectoryHint.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double static URL._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  outlined consume of URL?(*(void **)a2);
  URL.init(reference:)(a1, &v5);
  *(void *)a2 = v5;
  double result = *(double *)&v6;
  *(_OWORD *)(a2 + 8) = v6;
  return result;
}

uint64_t static URL._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  outlined consume of URL?(*(void **)a2);
  URL.init(reference:)(a1, &v5);
  *(void *)a2 = v5;
  *(_OWORD *)(a2 + 8) = v6;
  return 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance URL(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1)
  {
    URL.init(reference:)(a1, &v4);
    long long v3 = v5;
    *(void *)a2 = v4;
    *(_OWORD *)(a2 + 8) = v3;
  }
  else
  {
    __break(1u);
  }
}

uint64_t NSURL._toCustomAnyHashable()()
{
  URL.init(reference:)(v0, &v2);
  lazy protocol witness table accessor for type URL and conformance URL();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURL()
{
  Swift::UInt v1 = *v0;
  URL.init(reference:)(v1, &v2);
  lazy protocol witness table accessor for type URL and conformance URL();
  AnyHashable.init<A>(_:)();
}

uint64_t URL.customPlaygroundQuickLook.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = URL.absoluteString.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 32) = 17;
  return result;
}

uint64_t protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance URL@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = URL.absoluteString.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 32) = 17;
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URL.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized URL.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URL.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URL.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

void URL.init(fileReferenceLiteralResourceName:)(uint64_t a1@<X8>)
{
  id v2 = objc_msgSend(self, sel_mainBundle);
  uint64_t v3 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v2, sel_URLForResource_withExtension_, v3, 0);

  swift_unknownObjectRelease();
  if (v4)
  {
    URL.init(reference:)(v4, &v6);

    long long v5 = v7;
    *(void *)a1 = v6;
    *(_OWORD *)(a1 + 8) = v5;
  }
  else
  {
    __break(1u);
  }
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x185302230](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      char v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      uint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(unint64_t *a1, unint64_t a2)
{
  char v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *char v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *char v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  char v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *char v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *char v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(_DWORD *a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(_DWORD *)(v9 + 4 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(_DWORD *)(v9 + 4 * v8) != a2);
  }
  uint64_t result = 0;
  LODWORD(a2) = *(_DWORD *)(*(void *)(*v2 + 48) + 4 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(unint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v10 = *v5;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = *(void *)(v10 + 48);
    uint64_t v15 = v14 + 32 * v13;
    BOOL v16 = *(void *)(v15 + 16) == a4 && *(void *)(v15 + 24) == a5;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = (unint64_t *)(*(void *)(*v5 + 48) + 32 * v13);
      unint64_t v18 = v17[1];
      unint64_t v19 = v17[2];
      unint64_t v20 = v17[3];
      *a1 = *v17;
      a1[1] = v18;
      a1[2] = v19;
      a1[3] = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v22 = ~v12;
    while (1)
    {
      unint64_t v13 = (v13 + 1) & v22;
      if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
        break;
      }
      uint64_t v23 = v14 + 32 * v13;
      BOOL v24 = *(void *)(v23 + 16) == a4 && *(void *)(v23 + 24) == a5;
      if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v27 = *v5;
  *uint64_t v5 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, a4, a5, v13, isUniquelyReferenced_nonNull_native);
  *uint64_t v5 = v27;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  uint64_t result = 1;
  a1[2] = a4;
  a1[3] = a5;
  return result;
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<_BPlistEncodingFormat.Reference>);
  uint64_t v3 = static _SetStorage.convert(_:capacity:)();
  __CocoaSet.makeIterator()();
  uint64_t v4 = __CocoaSet.Iterator.next()();
  if (!v4) {
    goto LABEL_70;
  }
  uint64_t v5 = v4;
  type metadata accessor for _BPlistEncodingFormat.Reference();
  uint64_t v46 = v2;
  while (2)
  {
    v47[0] = v5;
    swift_dynamicCast();
    if (*(void *)(v3 + 24) > *(void *)(v3 + 16)) {
      goto LABEL_7;
    }
    Swift::Int v6 = (void *)v2;
    Swift::UInt v7 = static _SetStorage.resize(original:capacity:move:)();
    Swift::UInt v14 = v7;
    if (!*(void *)(v3 + 16)) {
      goto LABEL_6;
    }
    int64_t v15 = 0;
    BOOL v16 = (void *)(v3 + 56);
    uint64_t v17 = 1 << *(unsigned char *)(v3 + 32);
    if (v17 < 64) {
      uint64_t v18 = ~(-1 << v17);
    }
    else {
      uint64_t v18 = -1;
    }
    unint64_t v19 = v18 & *(void *)(v3 + 56);
    int64_t v20 = (unint64_t)(v17 + 63) >> 6;
    Swift::UInt v21 = v7 + 56;
    while (1)
    {
      if (v19)
      {
        unint64_t v23 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        unint64_t v24 = v23 | (v15 << 6);
        goto LABEL_36;
      }
      int64_t v9 = v15 + 1;
      if (__OFADD__(v15, 1)) {
        goto LABEL_74;
      }
      if (v9 >= v20) {
        break;
      }
      unint64_t v25 = v16[v9];
      ++v15;
      if (!v25)
      {
        int64_t v15 = v9 + 1;
        if (v9 + 1 >= v20) {
          break;
        }
        unint64_t v25 = v16[v15];
        if (!v25)
        {
          int64_t v15 = v9 + 2;
          if (v9 + 2 >= v20) {
            break;
          }
          unint64_t v25 = v16[v15];
          if (!v25)
          {
            int64_t v15 = v9 + 3;
            if (v9 + 3 >= v20) {
              break;
            }
            unint64_t v25 = v16[v15];
            if (!v25)
            {
              v9 += 4;
              if (v9 >= v20) {
                break;
              }
              unint64_t v25 = v16[v9];
              if (!v25)
              {
                while (1)
                {
                  int64_t v15 = v9 + 1;
                  if (__OFADD__(v9, 1)) {
                    goto LABEL_75;
                  }
                  if (v15 >= v20) {
                    goto LABEL_68;
                  }
                  unint64_t v25 = v16[v15];
                  ++v9;
                  if (v25) {
                    goto LABEL_35;
                  }
                }
              }
              int64_t v15 = v9;
            }
          }
        }
      }
LABEL_35:
      unint64_t v19 = (v25 - 1) & v25;
      unint64_t v24 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_36:
      uint64_t v26 = *(void *)(*(void *)(v3 + 48) + 8 * v24);
      Hasher.init(_seed:)();
      uint64_t v8 = *(void *)(v26 + 16);
      Swift::Int v6 = *(void **)(v26 + 24);
      Swift::UInt v7 = *(void *)(v26 + 32);
      LODWORD(v9) = *(unsigned __int8 *)(v26 + 40);
      switch(v9 >> 4)
      {
        case 0u:
          Hasher._combine(_:)(v7);
          goto LABEL_51;
        case 1u:
        case 2u:
          Hasher._combine(_:)(*(void *)(v26 + 16));
          goto LABEL_51;
        case 3u:
        case 7u:
          if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            Swift::UInt64 v27 = *(void *)(v26 + 16);
          }
          else {
            Swift::UInt64 v27 = 0;
          }
          Hasher._combine(_:)(v27);
          goto LABEL_51;
        case 4u:
          if ((v8 & 0x7FFFFF) == 0 && (*(void *)(v26 + 16) & 0x7F800000) == 0) {
            Swift::UInt32 v29 = 0;
          }
          else {
            Swift::UInt32 v29 = *(void *)(v26 + 16);
          }
          Hasher._combine(_:)(v29);
          goto LABEL_51;
        case 8u:
          Data.hash(into:)((uint64_t)v47, v8, *(void *)(v26 + 24));
LABEL_51:
          Swift::Int v6 = v47;
          Swift::UInt v7 = Hasher._finalize()();
          uint64_t v30 = -1 << *(unsigned char *)(v14 + 32);
          Swift::UInt v31 = v7 & ~v30;
          Swift::UInt v32 = v31 >> 6;
          if (((-1 << v31) & ~*(void *)(v21 + 8 * (v31 >> 6))) != 0)
          {
            unint64_t v22 = __clz(__rbit64((-1 << v31) & ~*(void *)(v21 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
            goto LABEL_17;
          }
          LOBYTE(v9) = 0;
          unint64_t v33 = (unint64_t)(63 - v30) >> 6;
          break;
        default:
          goto LABEL_76;
      }
      do
      {
        if (++v32 == v33 && (v9 & 1) != 0)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          uint64_t v42 = v7;
          uint64_t v43 = v8;
          unsigned __int8 v44 = v9;
          swift_retain();
          outlined copy of _BPlistEncodingFormat.Reference.Backing(v43, (unint64_t)v6, v42, v44);
          _StringGuts.grow(_:)(79);
          v45._unint64_t object = (void *)0x80000001823AEEA0;
          v45._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
          String.append(_:)(v45);
          _print_unlocked<A, B>(_:_:)();
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x181F0D6F4);
        }
        BOOL v34 = v32 == v33;
        if (v32 == v33) {
          Swift::UInt v32 = 0;
        }
        LOBYTE(v9) = v34 | v9;
        uint64_t v35 = *(void *)(v21 + 8 * v32);
      }
      while (v35 == -1);
      unint64_t v22 = __clz(__rbit64(~v35)) + (v32 << 6);
LABEL_17:
      *(void *)(v21 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(void *)(*(void *)(v14 + 48) + 8 * v22) = v26;
      ++*(void *)(v14 + 16);
    }
LABEL_68:
    uint64_t v40 = 1 << *(unsigned char *)(v3 + 32);
    if (v40 > 63) {
      bzero((void *)(v3 + 56), ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    }
    else {
      *BOOL v16 = -1 << v40;
    }
    uint64_t v2 = v46;
    *(void *)(v3 + 16) = 0;
LABEL_6:
    swift_release();
    uint64_t v3 = v14;
LABEL_7:
    Hasher.init(_seed:)();
    _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v47);
    Swift::Int v6 = v47;
    Swift::UInt v7 = Hasher._finalize()();
    int64_t v9 = v3 + 56;
    uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
    Swift::UInt v11 = v7 & ~v10;
    Swift::UInt v12 = v11 >> 6;
    if (((-1 << v11) & ~*(void *)(v3 + 56 + 8 * (v11 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v11) & ~*(void *)(v3 + 56 + 8 * (v11 >> 6)))) | v11 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v10) >> 6;
      do
      {
        if (++v12 == v37 && (v36 & 1) != 0) {
          goto LABEL_73;
        }
        BOOL v38 = v12 == v37;
        if (v12 == v37) {
          Swift::UInt v12 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v9 + 8 * v12);
      }
      while (v39 == -1);
      unint64_t v13 = __clz(__rbit64(~v39)) + (v12 << 6);
    }
    *(void *)(v9 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v3 + 48) + 8 * v13) = v47[9];
    ++*(void *)(v3 + 16);
    uint64_t v5 = __CocoaSet.Iterator.next()();
    if (v5) {
      continue;
    }
    break;
  }
LABEL_70:
  swift_release();
  return v3;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v5);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

__n128 specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, void *a2)
{
  AnyHashable._rawHashValue(seed:)(a2[5]);
  unint64_t v4 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << v4;
  uint64_t v5 = a2[6] + 40 * v4;
  __n128 result = *(__n128 *)a1;
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a1;
  *(_OWORD *)(v5 + 16) = v7;
  *(void *)(v5 + 32) = *(void *)(a1 + 32);
  ++a2[2];
  return result;
}

unint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, char a6)
{
  unint64_t v9 = a3;
  uint64_t v10 = *v6;
  unint64_t v11 = *(void *)(*v6 + 16);
  unint64_t v12 = *(void *)(*v6 + 24);
  if (v12 > v11 && (a6 & 1) != 0)
  {
    uint64_t v13 = *v6;
    goto LABEL_121;
  }
  unint64_t v99 = result;
  unint64_t v100 = a2;
  uint64_t v105 = *v6;
  long long v98 = v6;
  if ((a6 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Locale.NumberingSystem>);
    if (v12 > v11)
    {
      uint64_t v39 = static _SetStorage.copy(original:)();
      uint64_t v13 = v39;
      if (!*(void *)(v10 + 16)) {
        goto LABEL_102;
      }
      __n128 result = v39 + 56;
      uint64_t v40 = v10 + 56;
      unint64_t v41 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
      if (v13 != v10 || result >= v40 + 8 * v41) {
        __n128 result = (unint64_t)memmove((void *)result, (const void *)(v10 + 56), 8 * v41);
      }
      int64_t v42 = 0;
      *(void *)(v13 + 16) = *(void *)(v10 + 16);
      uint64_t v43 = 1 << *(unsigned char *)(v10 + 32);
      uint64_t v44 = -1;
      if (v43 < 64) {
        uint64_t v44 = ~(-1 << v43);
      }
      unint64_t v45 = v44 & *(void *)(v10 + 56);
      int64_t v46 = (unint64_t)(v43 + 63) >> 6;
      while (1)
      {
        if (v45)
        {
          unint64_t v47 = __clz(__rbit64(v45));
          v45 &= v45 - 1;
          unint64_t v48 = v47 | (v42 << 6);
        }
        else
        {
          int64_t v55 = v42 + 1;
          if (__OFADD__(v42, 1)) {
            goto LABEL_126;
          }
          unint64_t v9 = a3;
          if (v55 >= v46) {
            goto LABEL_102;
          }
          unint64_t v56 = *(void *)(v40 + 8 * v55);
          ++v42;
          if (!v56)
          {
            int64_t v42 = v55 + 1;
            if (v55 + 1 >= v46) {
              goto LABEL_102;
            }
            unint64_t v56 = *(void *)(v40 + 8 * v42);
            if (!v56)
            {
              int64_t v42 = v55 + 2;
              if (v55 + 2 >= v46) {
                goto LABEL_102;
              }
              unint64_t v56 = *(void *)(v40 + 8 * v42);
              if (!v56)
              {
                int64_t v42 = v55 + 3;
                if (v55 + 3 >= v46) {
                  goto LABEL_102;
                }
                unint64_t v56 = *(void *)(v40 + 8 * v42);
                if (!v56)
                {
                  int64_t v57 = v55 + 4;
                  if (v57 >= v46) {
                    goto LABEL_102;
                  }
                  unint64_t v56 = *(void *)(v40 + 8 * v57);
                  if (!v56)
                  {
                    while (1)
                    {
                      int64_t v42 = v57 + 1;
                      if (__OFADD__(v57, 1)) {
                        goto LABEL_130;
                      }
                      if (v42 >= v46) {
                        break;
                      }
                      unint64_t v56 = *(void *)(v40 + 8 * v42);
                      ++v57;
                      if (v56) {
                        goto LABEL_65;
                      }
                    }
LABEL_102:
                    swift_release();
                    uint64_t *v98 = v13;
LABEL_120:
                    __n128 result = v99;
                    a2 = v100;
LABEL_121:
                    *(void *)(v13 + 8 * (a5 >> 6) + 56) |= 1 << a5;
                    long long v93 = (unint64_t *)(*(void *)(v13 + 48) + 32 * a5);
                    *long long v93 = result;
                    v93[1] = a2;
                    v93[2] = v9;
                    v93[3] = a4;
                    uint64_t v94 = *(void *)(v13 + 16);
                    BOOL v95 = __OFADD__(v94, 1);
                    uint64_t v96 = v94 + 1;
                    if (!v95)
                    {
                      *(void *)(v13 + 16) = v96;
                      return result;
                    }
LABEL_128:
                    __break(1u);
                    goto LABEL_129;
                  }
                  int64_t v42 = v57;
                }
              }
            }
          }
LABEL_65:
          unint64_t v45 = (v56 - 1) & v56;
          unint64_t v48 = __clz(__rbit64(v56)) + (v42 << 6);
        }
        uint64_t v49 = 32 * v48;
        unint64_t v50 = (void *)(*(void *)(v10 + 48) + v49);
        uint64_t v51 = v50[1];
        uint64_t v52 = v50[2];
        uint64_t v53 = v50[3];
        uint64_t v54 = (void *)(*(void *)(v13 + 48) + v49);
        *uint64_t v54 = *v50;
        v54[1] = v51;
        v54[2] = v52;
        v54[3] = v53;
        swift_bridgeObjectRetain();
        __n128 result = swift_bridgeObjectRetain();
      }
    }
    uint64_t v59 = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v13 = v59;
    if (*(void *)(v10 + 16))
    {
      unint64_t v97 = a4;
      uint64_t v60 = 1 << *(unsigned char *)(v10 + 32);
      uint64_t v61 = v10 + 56;
      if (v60 < 64) {
        uint64_t v62 = ~(-1 << v60);
      }
      else {
        uint64_t v62 = -1;
      }
      unint64_t v63 = v62 & *(void *)(v10 + 56);
      int64_t v103 = (unint64_t)(v60 + 63) >> 6;
      uint64_t v64 = v59 + 56;
      __n128 result = swift_retain();
      int64_t v65 = 0;
      while (1)
      {
        if (v63)
        {
          unint64_t v68 = __clz(__rbit64(v63));
          v63 &= v63 - 1;
          unint64_t v69 = v68 | (v65 << 6);
        }
        else
        {
          int64_t v70 = v65 + 1;
          if (__OFADD__(v65, 1)) {
            goto LABEL_127;
          }
          if (v70 >= v103) {
            goto LABEL_123;
          }
          unint64_t v71 = *(void *)(v61 + 8 * v70);
          ++v65;
          if (!v71)
          {
            int64_t v65 = v70 + 1;
            if (v70 + 1 >= v103) {
              goto LABEL_123;
            }
            unint64_t v71 = *(void *)(v61 + 8 * v65);
            if (!v71)
            {
              int64_t v65 = v70 + 2;
              if (v70 + 2 >= v103) {
                goto LABEL_123;
              }
              unint64_t v71 = *(void *)(v61 + 8 * v65);
              if (!v71)
              {
                int64_t v65 = v70 + 3;
                if (v70 + 3 >= v103) {
                  goto LABEL_123;
                }
                unint64_t v71 = *(void *)(v61 + 8 * v65);
                if (!v71)
                {
                  int64_t v72 = v70 + 4;
                  if (v72 >= v103) {
                    goto LABEL_123;
                  }
                  unint64_t v71 = *(void *)(v61 + 8 * v72);
                  if (!v71)
                  {
                    while (1)
                    {
                      int64_t v65 = v72 + 1;
                      if (__OFADD__(v72, 1)) {
                        goto LABEL_131;
                      }
                      if (v65 >= v103) {
                        break;
                      }
                      unint64_t v71 = *(void *)(v61 + 8 * v65);
                      ++v72;
                      if (v71) {
                        goto LABEL_92;
                      }
                    }
LABEL_123:
                    swift_release_n();
                    a4 = v97;
LABEL_106:
                    *Swift::Int v6 = v13;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    swift_bridgeObjectRelease();
                    Swift::Int v85 = Hasher._finalize()();
                    uint64_t v86 = -1 << *(unsigned char *)(v13 + 32);
                    a5 = v85 & ~v86;
                    if ((*(void *)(v13 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a5))
                    {
                      uint64_t v87 = *(void *)(v13 + 48);
                      uint64_t v88 = v87 + 32 * a5;
                      BOOL v89 = *(void *)(v88 + 16) == v9 && *(void *)(v88 + 24) == a4;
                      if (v89 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
LABEL_119:
                        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                        __break(1u);
                      }
                      else
                      {
                        uint64_t v90 = ~v86;
                        while (1)
                        {
                          a5 = (a5 + 1) & v90;
                          if (((*(void *)(v13 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a5) & 1) == 0) {
                            break;
                          }
                          uint64_t v91 = v87 + 32 * a5;
                          BOOL v92 = *(void *)(v91 + 16) == v9 && *(void *)(v91 + 24) == a4;
                          if (v92 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                            goto LABEL_119;
                          }
                        }
                      }
                    }
                    goto LABEL_120;
                  }
                  int64_t v65 = v72;
                }
              }
            }
          }
LABEL_92:
          unint64_t v63 = (v71 - 1) & v71;
          unint64_t v69 = __clz(__rbit64(v71)) + (v65 << 6);
        }
        uint64_t v73 = (uint64_t *)(*(void *)(v10 + 48) + 32 * v69);
        uint64_t v74 = *v73;
        uint64_t v75 = v73[1];
        uint64_t v77 = v73[2];
        uint64_t v76 = v73[3];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        __n128 result = Hasher._finalize()();
        uint64_t v78 = -1 << *(unsigned char *)(v13 + 32);
        unint64_t v79 = result & ~v78;
        unint64_t v80 = v79 >> 6;
        if (((-1 << v79) & ~*(void *)(v64 + 8 * (v79 >> 6))) != 0)
        {
          unint64_t v66 = __clz(__rbit64((-1 << v79) & ~*(void *)(v64 + 8 * (v79 >> 6)))) | v79 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_74;
        }
        char v81 = 0;
        unint64_t v82 = (unint64_t)(63 - v78) >> 6;
        do
        {
          if (++v80 == v82 && (v81 & 1) != 0)
          {
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
            goto LABEL_128;
          }
          BOOL v83 = v80 == v82;
          if (v80 == v82) {
            unint64_t v80 = 0;
          }
          v81 |= v83;
          uint64_t v84 = *(void *)(v64 + 8 * v80);
        }
        while (v84 == -1);
        unint64_t v66 = __clz(__rbit64(~v84)) + (v80 << 6);
LABEL_74:
        *(void *)(v64 + ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v66;
        uint64_t v67 = (void *)(*(void *)(v13 + 48) + 32 * v66);
        void *v67 = v74;
        v67[1] = v75;
        v67[2] = v77;
        v67[3] = v76;
        ++*(void *)(v13 + 16);
        unint64_t v9 = a3;
        uint64_t v10 = v105;
      }
    }
LABEL_105:
    swift_release();
    goto LABEL_106;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Locale.NumberingSystem>);
  uint64_t v14 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v13 = v14;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_105;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v10 + 32);
  long long v101 = (void *)(v10 + 56);
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & *(void *)(v10 + 56);
  int64_t v102 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v18 = v14 + 56;
  __n128 result = swift_retain();
  int64_t v19 = 0;
  while (1)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v19 << 6);
      goto LABEL_30;
    }
    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      goto LABEL_125;
    }
    if (v24 >= v102)
    {
LABEL_66:
      swift_release();
      uint64_t v58 = 1 << *(unsigned char *)(v10 + 32);
      unint64_t v9 = a3;
      if (v58 > 63) {
        bzero(v101, ((unint64_t)(v58 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *long long v101 = -1 << v58;
      }
      *(void *)(v10 + 16) = 0;
      goto LABEL_105;
    }
    unint64_t v25 = v101[v24];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v24 + 1;
      if (v24 + 1 >= v102) {
        goto LABEL_66;
      }
      unint64_t v25 = v101[v19];
      if (!v25)
      {
        int64_t v19 = v24 + 2;
        if (v24 + 2 >= v102) {
          goto LABEL_66;
        }
        unint64_t v25 = v101[v19];
        if (!v25)
        {
          int64_t v19 = v24 + 3;
          if (v24 + 3 >= v102) {
            goto LABEL_66;
          }
          unint64_t v25 = v101[v19];
          if (!v25) {
            break;
          }
        }
      }
    }
LABEL_29:
    unint64_t v17 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_30:
    Swift::UInt64 v27 = (uint64_t *)(*(void *)(v10 + 48) + 32 * v23);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    uint64_t v30 = v27[2];
    uint64_t v31 = v27[3];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    __n128 result = Hasher._finalize()();
    uint64_t v32 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v18 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v33) & ~*(void *)(v18 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_124;
        }
        BOOL v37 = v34 == v36;
        if (v34 == v36) {
          unint64_t v34 = 0;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v18 + 8 * v34);
      }
      while (v38 == -1);
      unint64_t v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(void *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    Swift::UInt v21 = (void *)(*(void *)(v13 + 48) + 32 * v20);
    *Swift::UInt v21 = v28;
    v21[1] = v29;
    void v21[2] = v30;
    v21[3] = v31;
    ++*(void *)(v13 + 16);
    uint64_t v10 = v105;
  }
  int64_t v26 = v24 + 4;
  if (v26 >= v102) {
    goto LABEL_66;
  }
  unint64_t v25 = v101[v26];
  if (v25)
  {
    int64_t v19 = v26;
    goto LABEL_29;
  }
  while (1)
  {
    int64_t v19 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v19 >= v102) {
      goto LABEL_66;
    }
    unint64_t v25 = v101[v19];
    ++v26;
    if (v25) {
      goto LABEL_29;
    }
  }
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
  return result;
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  uint64_t result = String.init<A>(_:)();
  uint64_t v8 = result;
  unint64_t v9 = v7;
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = static String._copying(_:)();
    unint64_t v14 = v13;
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v9 = v14;
    if ((v14 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((v7 & 0x2000000000000000) == 0)
  {
LABEL_3:
    if ((v8 & 0x1000000000000000) != 0)
    {
      uint64_t v10 = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    unint64_t v12 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v10, v11, a5);
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  uint64_t v15 = HIBYTE(v9) & 0xF;
  uint64_t v40 = v8;
  uint64_t v41 = v9 & 0xFFFFFFFFFFFFFFLL;
  if (v8 == 43)
  {
    if (v15)
    {
      uint64_t v25 = v15 - 1;
      if (v25)
      {
        uint64_t v17 = 0;
        unsigned __int8 v26 = a5 + 48;
        unsigned __int8 v27 = a5 + 55;
        unsigned __int8 v28 = a5 + 87;
        if (a5 > 10)
        {
          unsigned __int8 v26 = 58;
        }
        else
        {
          unsigned __int8 v28 = 97;
          unsigned __int8 v27 = 65;
        }
        uint64_t v29 = (unsigned __int8 *)&v40 + 1;
        do
        {
          unsigned int v30 = *v29;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              unint64_t v12 = 0;
              if (v30 < 0x61 || v30 >= v28) {
                goto LABEL_66;
              }
              char v31 = -87;
            }
            else
            {
              char v31 = -55;
            }
          }
          else
          {
            char v31 = -48;
          }
          uint64_t v32 = v17 * a5;
          if ((unsigned __int128)(v17 * (__int128)a5) >> 64 != (v17 * a5) >> 63) {
            goto LABEL_65;
          }
          uint64_t v17 = v32 + (v30 + v31);
          if (__OFADD__(v32, (v30 + v31))) {
            goto LABEL_65;
          }
          ++v29;
          --v25;
        }
        while (v25);
LABEL_64:
        unint64_t v12 = (unsigned __int8 *)v17;
        goto LABEL_66;
      }
LABEL_65:
      unint64_t v12 = 0;
LABEL_66:
      swift_bridgeObjectRelease();
      return (uint64_t)v12;
    }
  }
  else
  {
    if (v8 != 45)
    {
      if (v15)
      {
        uint64_t v17 = 0;
        unsigned __int8 v33 = a5 + 48;
        unsigned __int8 v34 = a5 + 55;
        unsigned __int8 v35 = a5 + 87;
        if (a5 > 10)
        {
          unsigned __int8 v33 = 58;
        }
        else
        {
          unsigned __int8 v35 = 97;
          unsigned __int8 v34 = 65;
        }
        unint64_t v36 = &v40;
        while (1)
        {
          unsigned int v37 = *(unsigned __int8 *)v36;
          if (v37 < 0x30 || v37 >= v33)
          {
            if (v37 < 0x41 || v37 >= v34)
            {
              unint64_t v12 = 0;
              if (v37 < 0x61 || v37 >= v35) {
                goto LABEL_66;
              }
              char v38 = -87;
            }
            else
            {
              char v38 = -55;
            }
          }
          else
          {
            char v38 = -48;
          }
          uint64_t v39 = v17 * a5;
          if ((unsigned __int128)(v17 * (__int128)a5) >> 64 != (v17 * a5) >> 63) {
            goto LABEL_65;
          }
          uint64_t v17 = v39 + (v37 + v38);
          if (__OFADD__(v39, (v37 + v38))) {
            goto LABEL_65;
          }
          unint64_t v36 = (uint64_t *)((char *)v36 + 1);
          if (!--v15) {
            goto LABEL_64;
          }
        }
      }
      goto LABEL_65;
    }
    if (v15)
    {
      uint64_t v16 = v15 - 1;
      if (v16)
      {
        uint64_t v17 = 0;
        unsigned __int8 v18 = a5 + 48;
        unsigned __int8 v19 = a5 + 55;
        unsigned __int8 v20 = a5 + 87;
        if (a5 > 10)
        {
          unsigned __int8 v18 = 58;
        }
        else
        {
          unsigned __int8 v20 = 97;
          unsigned __int8 v19 = 65;
        }
        Swift::UInt v21 = (unsigned __int8 *)&v40 + 1;
        while (1)
        {
          unsigned int v22 = *v21;
          if (v22 < 0x30 || v22 >= v18)
          {
            if (v22 < 0x41 || v22 >= v19)
            {
              unint64_t v12 = 0;
              if (v22 < 0x61 || v22 >= v20) {
                goto LABEL_66;
              }
              char v23 = -87;
            }
            else
            {
              char v23 = -55;
            }
          }
          else
          {
            char v23 = -48;
          }
          uint64_t v24 = v17 * a5;
          if ((unsigned __int128)(v17 * (__int128)a5) >> 64 != (v17 * a5) >> 63) {
            goto LABEL_65;
          }
          uint64_t v17 = v24 - (v22 + v23);
          if (__OFSUB__(v24, (v22 + v23))) {
            goto LABEL_65;
          }
          ++v21;
          if (!--v16) {
            goto LABEL_64;
          }
        }
      }
      goto LABEL_65;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  unsigned __int8 v25;
  BOOL v26;
  uint64_t v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 *v31;
  unsigned int v32;
  char v33;
  unint64_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  uint64_t *v39;
  unsigned int v40;
  char v41;
  unint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  uint64_t v44 = a1;
  unint64_t v45 = a2;
  int64_t v46 = a3;
  unint64_t v47 = a4;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  uint64_t result = String.init<A>(_:)();
  uint64_t v8 = result;
  unint64_t v9 = v7;
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = static String._copying(_:)();
    unint64_t v14 = v13;
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v9 = v14;
    if ((v14 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((v7 & 0x2000000000000000) == 0)
  {
LABEL_3:
    if ((v8 & 0x1000000000000000) != 0)
    {
      uint64_t v10 = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    unint64_t v12 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v10, v11, a5);
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  uint64_t v15 = HIBYTE(v9) & 0xF;
  uint64_t v44 = v8;
  unint64_t v45 = v9 & 0xFFFFFFFFFFFFFFLL;
  if (v8 == 43)
  {
    if (v15)
    {
      unsigned __int8 v27 = v15 - 1;
      if (v27)
      {
        uint64_t v17 = 0;
        unsigned __int8 v28 = a5 + 48;
        uint64_t v29 = a5 + 55;
        unsigned int v30 = a5 + 87;
        if (a5 > 10)
        {
          unsigned __int8 v28 = 58;
        }
        else
        {
          unsigned int v30 = 97;
          uint64_t v29 = 65;
        }
        char v31 = (unsigned __int8 *)&v44 + 1;
        do
        {
          uint64_t v32 = *v31;
          if (v32 < 0x30 || v32 >= v28)
          {
            if (v32 < 0x41 || v32 >= v29)
            {
              unint64_t v12 = 0;
              if (v32 < 0x61 || v32 >= v30) {
                goto LABEL_67;
              }
              unsigned __int8 v33 = -87;
            }
            else
            {
              unsigned __int8 v33 = -55;
            }
          }
          else
          {
            unsigned __int8 v33 = -48;
          }
          if (!is_mul_ok(v17, a5)) {
            goto LABEL_66;
          }
          unsigned __int8 v34 = v17 * a5;
          unsigned __int8 v35 = v32 + v33;
          unsigned __int8 v26 = __CFADD__(v34, v35);
          uint64_t v17 = v34 + v35;
          if (v26) {
            goto LABEL_66;
          }
          ++v31;
          --v27;
        }
        while (v27);
LABEL_65:
        unint64_t v12 = (unsigned __int8 *)v17;
        goto LABEL_67;
      }
LABEL_66:
      unint64_t v12 = 0;
LABEL_67:
      swift_bridgeObjectRelease();
      return (uint64_t)v12;
    }
  }
  else
  {
    if (v8 != 45)
    {
      if (v15)
      {
        uint64_t v17 = 0;
        unint64_t v36 = a5 + 48;
        unsigned int v37 = a5 + 55;
        char v38 = a5 + 87;
        if (a5 > 10)
        {
          unint64_t v36 = 58;
        }
        else
        {
          char v38 = 97;
          unsigned int v37 = 65;
        }
        uint64_t v39 = &v44;
        while (1)
        {
          uint64_t v40 = *(unsigned __int8 *)v39;
          if (v40 < 0x30 || v40 >= v36)
          {
            if (v40 < 0x41 || v40 >= v37)
            {
              unint64_t v12 = 0;
              if (v40 < 0x61 || v40 >= v38) {
                goto LABEL_67;
              }
              uint64_t v41 = -87;
            }
            else
            {
              uint64_t v41 = -55;
            }
          }
          else
          {
            uint64_t v41 = -48;
          }
          if (!is_mul_ok(v17, a5)) {
            goto LABEL_66;
          }
          uint64_t v42 = v17 * a5;
          uint64_t v43 = v40 + v41;
          unsigned __int8 v26 = __CFADD__(v42, v43);
          uint64_t v17 = v42 + v43;
          if (v26) {
            goto LABEL_66;
          }
          uint64_t v39 = (uint64_t *)((char *)v39 + 1);
          if (!--v15) {
            goto LABEL_65;
          }
        }
      }
      goto LABEL_66;
    }
    if (v15)
    {
      uint64_t v16 = v15 - 1;
      if (v16)
      {
        uint64_t v17 = 0;
        unsigned __int8 v18 = a5 + 48;
        unsigned __int8 v19 = a5 + 55;
        unsigned __int8 v20 = a5 + 87;
        if (a5 > 10)
        {
          unsigned __int8 v18 = 58;
        }
        else
        {
          unsigned __int8 v20 = 97;
          unsigned __int8 v19 = 65;
        }
        Swift::UInt v21 = (unsigned __int8 *)&v44 + 1;
        while (1)
        {
          unsigned int v22 = *v21;
          if (v22 < 0x30 || v22 >= v18)
          {
            if (v22 < 0x41 || v22 >= v19)
            {
              unint64_t v12 = 0;
              if (v22 < 0x61 || v22 >= v20) {
                goto LABEL_67;
              }
              char v23 = -87;
            }
            else
            {
              char v23 = -55;
            }
          }
          else
          {
            char v23 = -48;
          }
          if (!is_mul_ok(v17, a5)) {
            goto LABEL_66;
          }
          uint64_t v24 = v17 * a5;
          uint64_t v25 = v22 + v23;
          unsigned __int8 v26 = v24 >= v25;
          uint64_t v17 = v24 - v25;
          if (!v26) {
            goto LABEL_66;
          }
          ++v21;
          if (!--v16) {
            goto LABEL_65;
          }
        }
      }
      goto LABEL_66;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  unint64_t result = String.init<A>(_:)();
  uint64_t v8 = result;
  unint64_t v9 = v7;
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = static String._copying(_:)();
    unint64_t v16 = v15;
    unint64_t result = swift_bridgeObjectRelease();
    unint64_t v9 = v16;
    if ((v16 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((v7 & 0x2000000000000000) == 0)
  {
LABEL_3:
    if ((v8 & 0x1000000000000000) != 0)
    {
      uint64_t v10 = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    unint64_t v12 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v10, v11, a5);
    unsigned int v13 = v12;
    uint64_t v14 = ((unint64_t)v12 >> 32) & 1;
    goto LABEL_6;
  }
  uint64_t v17 = HIBYTE(v9) & 0xF;
  uint64_t v46 = v8;
  uint64_t v47 = v9 & 0xFFFFFFFFFFFFFFLL;
  if (v8 == 43)
  {
    if (v17)
    {
      uint64_t v29 = v17 - 1;
      if (v29)
      {
        unsigned int v19 = 0;
        unsigned __int8 v30 = a5 + 48;
        unsigned __int8 v31 = a5 + 55;
        unsigned __int8 v32 = a5 + 87;
        if (a5 > 10)
        {
          unsigned __int8 v30 = 58;
        }
        else
        {
          unsigned __int8 v32 = 97;
          unsigned __int8 v31 = 65;
        }
        unsigned __int8 v33 = (unsigned __int8 *)&v46 + 1;
        do
        {
          unsigned int v34 = *v33;
          if (v34 < 0x30 || v34 >= v30)
          {
            if (v34 < 0x41 || v34 >= v31)
            {
              unsigned int v13 = 0;
              LOBYTE(v14) = 1;
              if (v34 < 0x61 || v34 >= v32) {
                goto LABEL_6;
              }
              char v35 = -87;
            }
            else
            {
              char v35 = -55;
            }
          }
          else
          {
            char v35 = -48;
          }
          unint64_t v36 = v19 * (unint64_t)a5;
          if ((v36 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_67;
          }
          unsigned __int8 v37 = v34 + v35;
          BOOL v28 = __CFADD__(v36, v37);
          unsigned int v19 = v36 + v37;
          if (v28) {
            goto LABEL_67;
          }
          ++v33;
          --v29;
        }
        while (v29);
LABEL_66:
        LOBYTE(v14) = 0;
        unsigned int v13 = v19;
        goto LABEL_6;
      }
      goto LABEL_67;
    }
  }
  else
  {
    if (v8 != 45)
    {
      if (v17)
      {
        unsigned int v19 = 0;
        unsigned __int8 v38 = a5 + 48;
        unsigned __int8 v39 = a5 + 55;
        unsigned __int8 v40 = a5 + 87;
        if (a5 > 10)
        {
          unsigned __int8 v38 = 58;
        }
        else
        {
          unsigned __int8 v40 = 97;
          unsigned __int8 v39 = 65;
        }
        uint64_t v41 = &v46;
        while (1)
        {
          unsigned int v42 = *(unsigned __int8 *)v41;
          if (v42 < 0x30 || v42 >= v38)
          {
            if (v42 < 0x41 || v42 >= v39)
            {
              unsigned int v13 = 0;
              LOBYTE(v14) = 1;
              if (v42 < 0x61 || v42 >= v40) {
                goto LABEL_6;
              }
              char v43 = -87;
            }
            else
            {
              char v43 = -55;
            }
          }
          else
          {
            char v43 = -48;
          }
          unint64_t v44 = v19 * (unint64_t)a5;
          if ((v44 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_67;
          }
          unsigned __int8 v45 = v42 + v43;
          BOOL v28 = __CFADD__(v44, v45);
          unsigned int v19 = v44 + v45;
          if (v28) {
            goto LABEL_67;
          }
          uint64_t v41 = (uint64_t *)((char *)v41 + 1);
          if (!--v17) {
            goto LABEL_66;
          }
        }
      }
      goto LABEL_67;
    }
    if (v17)
    {
      uint64_t v18 = v17 - 1;
      if (v18)
      {
        unsigned int v19 = 0;
        unsigned __int8 v20 = a5 + 48;
        unsigned __int8 v21 = a5 + 55;
        unsigned __int8 v22 = a5 + 87;
        if (a5 > 10)
        {
          unsigned __int8 v20 = 58;
        }
        else
        {
          unsigned __int8 v22 = 97;
          unsigned __int8 v21 = 65;
        }
        char v23 = (unsigned __int8 *)&v46 + 1;
        while (1)
        {
          unsigned int v24 = *v23;
          if (v24 < 0x30 || v24 >= v20)
          {
            if (v24 < 0x41 || v24 >= v21)
            {
              unsigned int v13 = 0;
              LOBYTE(v14) = 1;
              if (v24 < 0x61 || v24 >= v22) {
                goto LABEL_6;
              }
              char v25 = -87;
            }
            else
            {
              char v25 = -55;
            }
          }
          else
          {
            char v25 = -48;
          }
          unint64_t v26 = v19 * (unint64_t)a5;
          if ((v26 & 0xFFFFFFFF00000000) != 0) {
            break;
          }
          unsigned __int8 v27 = v24 + v25;
          BOOL v28 = v26 >= v27;
          unsigned int v19 = v26 - v27;
          if (!v28) {
            break;
          }
          ++v23;
          if (!--v18) {
            goto LABEL_66;
          }
        }
      }
LABEL_67:
      unsigned int v13 = 0;
      LOBYTE(v14) = 1;
LABEL_6:
      swift_bridgeObjectRelease();
      LOBYTE(v46) = v14;
      return v13 | ((unint64_t)v14 << 32);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              if (!is_mul_ok(v9, a3)) {
                return 0;
              }
              unint64_t v14 = v9 * a3;
              unsigned __int8 v15 = v11 + v12;
              BOOL v16 = v14 >= v15;
              unint64_t v9 = v14 - v15;
              if (!v16) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
    if (a2)
    {
      unsigned __int8 v26 = a3 + 48;
      unsigned __int8 v27 = a3 + 55;
      unsigned __int8 v28 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v26 = 58;
      }
      else
      {
        unsigned __int8 v28 = 97;
        unsigned __int8 v27 = 65;
      }
      if (result)
      {
        unint64_t v29 = 0;
        do
        {
          unsigned int v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              uint64_t v13 = 0;
              if (v30 < 0x61 || v30 >= v28) {
                return (unsigned __int8 *)v13;
              }
              char v31 = -87;
            }
            else
            {
              char v31 = -55;
            }
          }
          else
          {
            char v31 = -48;
          }
          if (!is_mul_ok(v29, a3)) {
            return 0;
          }
          unint64_t v32 = v29 * a3;
          unsigned __int8 v33 = v30 + v31;
          BOOL v16 = __CFADD__(v32, v33);
          unint64_t v29 = v32 + v33;
          if (v16) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v29;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  uint64_t v17 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v18 = a3 + 48;
  unsigned __int8 v19 = a3 + 55;
  unsigned __int8 v20 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v18 = 58;
  }
  else
  {
    unsigned __int8 v20 = 97;
    unsigned __int8 v19 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  unsigned __int8 v21 = result + 1;
  do
  {
    unsigned int v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        uint64_t v13 = 0;
        if (v22 < 0x61 || v22 >= v20) {
          return (unsigned __int8 *)v13;
        }
        char v23 = -87;
      }
      else
      {
        char v23 = -55;
      }
    }
    else
    {
      char v23 = -48;
    }
    if (!is_mul_ok(v9, a3)) {
      return 0;
    }
    unint64_t v24 = v9 * a3;
    unsigned __int8 v25 = v22 + v23;
    BOOL v16 = __CFADD__(v24, v25);
    unint64_t v9 = v24 + v25;
    if (v16) {
      return 0;
    }
    ++v21;
    --v17;
  }
  while (v17);
  return (unsigned __int8 *)v9;
}

BOOL _sSKsSQ7ElementRpzrlE9lastIndex2of0C0QzSgAB_tFSbABXEfU_SS8UTF8ViewV_TG5TA_0(unsigned __int8 *a1)
{
  return *a1 == **(unsigned __int8 **)(v1 + 16);
}

uint64_t specialized static URL._cfURL(from:baseURL:)(uint64_t a1)
{
  int v3 = 81920;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  if ((*(unsigned char *)(a1 + 48) & 1) == 0)
  {
    int64_t v7 = *(void *)(a1 + 32);
    uint64_t i = *(void **)(a1 + 40);
    uint64_t v78 = *(void *)(a1 + 16);
    uint64_t v79 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    unsigned __int8 v8 = &v78;
    uint64_t v9 = StringProtocol._toUTF16Offsets(_:)();
    uint64_t v12 = v11 - v9;
    if (__OFSUB__(v11, v9))
    {
      __break(1u);
      goto LABEL_70;
    }
    unsigned __int8 v8 = (uint64_t *)v9;
    uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v1 = i[2];
    unint64_t v10 = i[3];
    int64_t v7 = v1 + 1;
    if (v1 >= v10 >> 1) {
      goto LABEL_71;
    }
    goto LABEL_7;
  }
  for (uint64_t i = (void *)MEMORY[0x1E4FBC860]; (*(unsigned char *)(a1 + 72) & 1) == 0; ++v3)
  {
    unint64_t v1 = *(void *)(a1 + 56);
    int64_t v7 = *(void *)(a1 + 64);
    uint64_t v78 = v5;
    uint64_t v79 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    unsigned __int8 v8 = &v78;
    uint64_t v14 = StringProtocol._toUTF16Offsets(_:)();
    uint64_t v12 = v15 - v14;
    if (!__OFSUB__(v15, v14))
    {
      BOOL v16 = (uint64_t *)v14;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_10;
      }
      goto LABEL_73;
    }
LABEL_70:
    __break(1u);
LABEL_71:
    uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v7, 1, i);
LABEL_7:
    i[2] = v7;
    uint64_t v13 = &i[2 * v1];
    v13[4] = v8;
    v13[5] = v12;
  }
  if (*(unsigned char *)(a1 + 96)) {
    goto LABEL_18;
  }
  do
  {
    uint64_t v78 = v5;
    uint64_t v79 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    BOOL v16 = &v78;
    uint64_t v20 = StringProtocol._toUTF16Offsets(_:)();
    uint64_t v12 = v21 - v20;
    if (!__OFSUB__(v21, v20))
    {
      unsigned int v22 = (uint64_t *)v20;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_15;
      }
      goto LABEL_75;
    }
    __break(1u);
LABEL_73:
    uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, i[2] + 1, 1, i);
LABEL_10:
    v3 |= 2u;
    unint64_t v18 = i[2];
    unint64_t v17 = i[3];
    if (v18 >= v17 >> 1) {
      uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, i);
    }
    i[2] = v18 + 1;
    unsigned __int8 v19 = &i[2 * v18];
    v19[4] = v16;
    v19[5] = v12;
  }
  while ((*(unsigned char *)(a1 + 96) & 1) == 0);
  while (1)
  {
LABEL_18:
    char v26 = *(unsigned char *)(a1 + 144);
    if (!v26) {
      v3 |= 0x10u;
    }
    uint64_t v77 = v5;
    if ((*(unsigned char *)(a1 + 120) & 1) == 0)
    {
      if ((*(void *)(a1 + 112) ^ *(void *)(a1 + 104)) >> 14) {
        BOOL v27 = 0;
      }
      else {
        BOOL v27 = (v3 & 0x16) == 0;
      }
      if (v27)
      {
        if (*(unsigned char *)(a1 + 144)) {
          break;
        }
        goto LABEL_33;
      }
      uint64_t v78 = v5;
      uint64_t v79 = v4;
      uint64_t v76 = v4;
      lazy protocol witness table accessor for type String and conformance String();
      unsigned __int8 v28 = &v78;
      uint64_t v29 = StringProtocol._toUTF16Offsets(_:)();
      uint64_t v31 = v30 - v29;
      if (__OFSUB__(v30, v29))
      {
        __break(1u);
      }
      else
      {
        unsigned __int8 v28 = (uint64_t *)v29;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
LABEL_27:
          v3 |= 8u;
          unint64_t v33 = i[2];
          unint64_t v32 = i[3];
          if (v33 >= v32 >> 1) {
            uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, i);
          }
          i[2] = v33 + 1;
          unsigned int v34 = &i[2 * v33];
          v34[4] = v28;
          v34[5] = v31;
          uint64_t v5 = v77;
          uint64_t v4 = v76;
          goto LABEL_30;
        }
      }
      uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, i[2] + 1, 1, i);
      goto LABEL_27;
    }
LABEL_30:
    if (v26) {
      break;
    }
LABEL_33:
    uint64_t v78 = v5;
    uint64_t v79 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    unsigned int v22 = &v78;
    uint64_t v35 = StringProtocol._toUTF16Offsets(_:)();
    uint64_t v12 = v36 - v35;
    if (!__OFSUB__(v36, v35))
    {
      unsigned __int8 v37 = (uint64_t *)v35;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_35;
      }
      goto LABEL_78;
    }
    __break(1u);
LABEL_75:
    uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, i[2] + 1, 1, i);
LABEL_15:
    v3 |= 4u;
    unint64_t v24 = i[2];
    unint64_t v23 = i[3];
    if (v24 >= v23 >> 1) {
      uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, i);
    }
    i[2] = v24 + 1;
    unsigned __int8 v25 = &i[2 * v24];
    _OWORD v25[4] = v22;
    v25[5] = v12;
  }
  while (1)
  {
    char v41 = *(unsigned char *)(a1 + 168);
    if ((v41 & 1) == 0) {
      break;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, i[2] + 1, 1, i);
    }
    unint64_t v43 = i[2];
    unint64_t v42 = i[3];
    if (v43 >= v42 >> 1) {
      uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, i);
    }
    i[2] = v43 + 1;
    *(_OWORD *)&i[2 * v43 + 4] = xmmword_18218B600;
    if (*(unsigned char *)(a1 + 192)) {
      goto LABEL_44;
    }
LABEL_53:
    uint64_t v54 = v5;
    uint64_t v5 = *(void *)(a1 + 176);
    uint64_t v78 = v54;
    uint64_t v79 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    unsigned __int8 v37 = &v78;
    uint64_t v55 = StringProtocol._toUTF16Offsets(_:)();
    uint64_t v12 = v56 - v55;
    if (!__OFSUB__(v56, v55))
    {
      int64_t v57 = (uint64_t *)v55;
      unint64_t v59 = i[2];
      unint64_t v58 = i[3];
      int64_t v60 = v59 + 1;
      if (v59 >= v58 >> 1) {
        goto LABEL_80;
      }
      goto LABEL_55;
    }
LABEL_77:
    __break(1u);
LABEL_78:
    uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, i[2] + 1, 1, i);
LABEL_35:
    unint64_t v39 = i[2];
    unint64_t v38 = i[3];
    if (v39 >= v38 >> 1) {
      uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, i);
    }
    i[2] = v39 + 1;
    unsigned __int8 v40 = &i[2 * v39];
    v40[4] = v37;
    v40[5] = v12;
  }
  uint64_t v78 = v5;
  uint64_t v79 = v4;
  lazy protocol witness table accessor for type String and conformance String();
  unsigned __int8 v37 = &v78;
  uint64_t v48 = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v12 = v49 - v48;
  if (__OFSUB__(v49, v48))
  {
    __break(1u);
    goto LABEL_77;
  }
  uint64_t v50 = v48;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, i[2] + 1, 1, i);
  }
  unint64_t v52 = i[2];
  unint64_t v51 = i[3];
  if (v52 >= v51 >> 1) {
    uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v51 > 1), v52 + 1, 1, i);
  }
  i[2] = v52 + 1;
  uint64_t v53 = &i[2 * v52];
  v53[4] = v50;
  _OWORD v53[5] = v12;
  uint64_t v5 = v77;
  if ((*(unsigned char *)(a1 + 192) & 1) == 0) {
    goto LABEL_53;
  }
LABEL_44:
  if (*(unsigned char *)(a1 + 216))
  {
LABEL_45:
    if (v41) {
      goto LABEL_46;
    }
LABEL_60:
    unint64_t v44 = String.subscript.getter();
  }
  else
  {
    while (1)
    {
      uint64_t v62 = v5;
      unint64_t v59 = *(void *)(a1 + 200);
      int64_t v60 = *(void *)(a1 + 208);
      uint64_t v78 = v62;
      uint64_t v79 = v4;
      lazy protocol witness table accessor for type String and conformance String();
      int64_t v57 = &v78;
      uint64_t v63 = StringProtocol._toUTF16Offsets(_:)();
      uint64_t v12 = v64 - v63;
      if (!__OFSUB__(v64, v63)) {
        break;
      }
      __break(1u);
LABEL_80:
      uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v58 > 1), v60, 1, i);
LABEL_55:
      i[2] = v60;
      uint64_t v61 = &i[2 * v59];
      v61[4] = v57;
      v61[5] = v12;
      uint64_t v5 = v77;
      if (*(unsigned char *)(a1 + 216)) {
        goto LABEL_45;
      }
    }
    uint64_t v65 = v63;
    unint64_t v67 = i[2];
    unint64_t v66 = i[3];
    if (v67 >= v66 >> 1) {
      uint64_t i = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v66 > 1), v67 + 1, 1, i);
    }
    i[2] = v67 + 1;
    unint64_t v68 = &i[2 * v67];
    v68[4] = v65;
    v68[5] = v12;
    if ((v41 & 1) == 0) {
      goto LABEL_60;
    }
LABEL_46:
    unint64_t v44 = MEMORY[0x185302C80](0, 0xE000000000000000);
  }
  unint64_t v69 = v44;
  unint64_t v70 = v45;
  unint64_t v71 = v46;
  unint64_t v72 = v47;
  if ((v44 ^ v45) >= 0x4000)
  {
    swift_bridgeObjectRetain();
    Substring.UTF8View.index(before:)();
    Substring.UTF8View.subscript.getter();
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }
  if (*(unsigned char *)(a1 + 217)) {
LABEL_65:
  }
    specialized Sequence<>.starts<A>(with:)((uint64_t)&outlined read-only object #0 of static URL._cfURL(from:baseURL:), v69, v70, v71, v72);
  else {
    specialized Sequence<>.starts<A>(with:)((uint64_t)&outlined read-only object #0 of static URL._cfURL(from:baseURL:), v44, v45, v46, v47);
  }
  unint64_t v73 = i[2];
  String._bridgeToObjectiveCImpl()();
  if (v73 >= 0x100)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v74 = _CFURLCreateWithRangesAndFlags();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return v74;
  }
  return result;
}

void (*specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4))(char *, void)
{
  *(void *)&v41[5] = *MEMORY[0x1E4F143B8];
  if ((a3 & 0x2000000000000000) != 0) {
    unint64_t v6 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v36 = 4 * v6;
  uint64_t v7 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  uint64_t v8 = 4 << v7;
  uint64_t v33 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v34 = a3 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  int v32 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = 15;
  while (1)
  {
    if (v36 == v11 >> 14) {
      goto LABEL_147;
    }
    unint64_t v13 = v11 & 0xC;
    unint64_t v14 = v11;
    if (v13 == v8) {
      unint64_t v14 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
    }
    unint64_t v15 = v14 >> 16;
    if (v14 >> 16 >= v6) {
      goto LABEL_152;
    }
    if ((a3 & 0x1000000000000000) != 0)
    {
      char v17 = String.UTF8View._foreignSubscript(position:)();
      if (v13 == v8) {
        goto LABEL_18;
      }
    }
    else if ((a3 & 0x2000000000000000) != 0)
    {
      unint64_t v37 = a2;
      uint64_t v38 = v34;
      char v17 = *((unsigned char *)&v37 + v15);
      if (v13 == v8) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v16 = v33;
      if ((a2 & 0x1000000000000000) == 0) {
        uint64_t v16 = _StringObject.sharedUTF8.getter();
      }
      char v17 = *(unsigned char *)(v16 + v15);
      if (v13 == v8)
      {
LABEL_18:
        unint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
        if ((a3 & 0x1000000000000000) == 0) {
          goto LABEL_23;
        }
        goto LABEL_19;
      }
    }
    if ((a3 & 0x1000000000000000) == 0)
    {
LABEL_23:
      unint64_t v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_24;
    }
LABEL_19:
    if (v6 <= v11 >> 16) {
      goto LABEL_154;
    }
    unint64_t v11 = String.UTF8View._foreignIndex(after:)();
LABEL_24:
    if (v17 == 37)
    {
      if (v9) {
        goto LABEL_150;
      }
LABEL_26:
      if (v36 == v11 >> 14) {
        goto LABEL_150;
      }
      unint64_t v18 = v11 & 0xC;
      unint64_t v19 = v11;
      if (v18 == v8) {
        unint64_t v19 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
      }
      unint64_t v20 = v19 >> 16;
      if (v19 >> 16 < v6)
      {
        if ((a3 & 0x1000000000000000) != 0)
        {
          char v17 = String.UTF8View._foreignSubscript(position:)();
          if (v18 == v8) {
            goto LABEL_35;
          }
        }
        else if ((a3 & 0x2000000000000000) != 0)
        {
          unint64_t v37 = a2;
          uint64_t v38 = v34;
          char v17 = *((unsigned char *)&v37 + v20);
          if (v18 == v8) {
            goto LABEL_35;
          }
        }
        else
        {
          uint64_t v21 = v33;
          if ((a2 & 0x1000000000000000) == 0) {
            uint64_t v21 = _StringObject.sharedUTF8.getter();
          }
          char v17 = *(unsigned char *)(v21 + v20);
          if (v18 == v8)
          {
LABEL_35:
            unint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
            if ((a3 & 0x1000000000000000) != 0)
            {
LABEL_36:
              if (v6 <= v11 >> 16) {
                goto LABEL_154;
              }
              unint64_t v11 = String.UTF8View._foreignIndex(after:)();
LABEL_63:
              if (v17 != 37)
              {
                uint64_t v9 = 2;
                goto LABEL_65;
              }
LABEL_150:
              swift_bridgeObjectRelease();
              return 0;
            }
LABEL_62:
            unint64_t v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
            goto LABEL_63;
          }
        }
        if ((a3 & 0x1000000000000000) != 0) {
          goto LABEL_36;
        }
        goto LABEL_62;
      }
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }
    if (!v9) {
      break;
    }
LABEL_65:
    switch(v17)
    {
      case '0':
        int v12 = 0;
        if (v9 == 1) {
          goto LABEL_130;
        }
        if (v9 != 2) {
          goto LABEL_7;
        }
        goto LABEL_8;
      case '1':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            int v12 = 16;
            goto LABEL_8;
          }
LABEL_7:
          int v12 = v32;
          goto LABEL_8;
        }
        int v12 = 1;
        goto LABEL_130;
      case '2':
        if (v9 != 1)
        {
          if (v9 != 2) {
            goto LABEL_7;
          }
          int v12 = 32;
          goto LABEL_8;
        }
        int v12 = 2;
        goto LABEL_130;
      case '3':
        if (v9 == 1)
        {
          int v12 = 3;
LABEL_130:
          if ((((_WORD)v12 + v32) & 0x100) == 0)
          {
            int v27 = v12 + v32;
            if (!specialized Set.contains(_:)(v12 + v32, a4))
            {
              *(unsigned char *)(a1 + v10) = v27;
              BOOL v22 = __OFADD__(v10++, 1);
              if (!v22)
              {
                int v12 = 0;
                goto LABEL_8;
              }
              goto LABEL_157;
            }
            if (!__OFADD__(v10, 2))
            {
              if (v10 + 2 >= v10)
              {
                LOBYTE(v39) = 37;
                HIBYTE(v39) = specialized StringProtocol.hexToAscii(_:)(v27 >> 4);
                char v40 = v17;
                if (a1)
                {
                  unint64_t v28 = a1 + v10;
                  if ((unint64_t)&v39 < a1 + v10 + 3 && v28 < (unint64_t)v41)
                  {
                    _fatalErrorMessage(_:_:file:line:flags:)();
                    __break(1u);
                    JUMPOUT(0x181F1253CLL);
                  }
                  __int16 v29 = v39;
                  *(unsigned char *)(v28 + 2) = v40;
                  *(_WORD *)unint64_t v28 = v29;
                }
                BOOL v22 = __OFADD__(v10, 3);
                v10 += 3;
                if (!v22)
                {
                  int v12 = v27;
                  goto LABEL_8;
                }
LABEL_159:
                __break(1u);
                __break(1u);
                __break(1u);
                goto LABEL_160;
              }
LABEL_158:
              __break(1u);
              goto LABEL_159;
            }
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
            goto LABEL_158;
          }
LABEL_155:
          __break(1u);
          goto LABEL_156;
        }
        if (v9 != 2) {
          goto LABEL_7;
        }
        int v12 = 48;
LABEL_8:
        int v32 = v12;
        --v9;
        break;
      case '4':
        if (v9 != 1)
        {
          if (v9 != 2) {
            goto LABEL_7;
          }
          int v12 = 64;
          goto LABEL_8;
        }
        int v12 = 4;
        goto LABEL_130;
      case '5':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            int v12 = 80;
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        int v12 = 5;
        goto LABEL_130;
      case '6':
        if (v9 != 1)
        {
          if (v9 != 2) {
            goto LABEL_7;
          }
          int v12 = 96;
          goto LABEL_8;
        }
        int v12 = 6;
        goto LABEL_130;
      case '7':
        if (v9 != 1)
        {
          if (v9 != 2) {
            goto LABEL_7;
          }
          int v12 = 112;
          goto LABEL_8;
        }
        int v12 = 7;
        goto LABEL_130;
      case '8':
        if (v9 != 1)
        {
          if (v9 != 2) {
            goto LABEL_7;
          }
          int v12 = 128;
          goto LABEL_8;
        }
        int v12 = 8;
        goto LABEL_130;
      case '9':
        if (v9 != 1)
        {
          if (v9 != 2) {
            goto LABEL_7;
          }
          int v12 = 144;
          goto LABEL_8;
        }
        int v12 = 9;
        goto LABEL_130;
      case 'A':
      case 'a':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            int v12 = 160;
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        int v12 = 10;
        goto LABEL_130;
      case 'B':
      case 'b':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            int v12 = 176;
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        int v12 = 11;
        goto LABEL_130;
      case 'C':
      case 'c':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            int v12 = 192;
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        int v12 = 12;
        goto LABEL_130;
      case 'D':
      case 'd':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            int v12 = 208;
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        int v12 = 13;
        goto LABEL_130;
      case 'E':
      case 'e':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            int v12 = 224;
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        int v12 = 14;
        goto LABEL_130;
      case 'F':
      case 'f':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            int v12 = 240;
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        int v12 = 15;
        goto LABEL_130;
      default:
        goto LABEL_150;
    }
  }
  while (1)
  {
    *(unsigned char *)(a1 + v10) = v17;
    BOOL v22 = __OFADD__(v10++, 1);
    if (v22) {
      goto LABEL_153;
    }
    if (v36 == v11 >> 14) {
      break;
    }
    unint64_t v23 = v11 & 0xC;
    unint64_t v24 = v11;
    if (v23 == v8) {
      unint64_t v24 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
    }
    unint64_t v25 = v24 >> 16;
    if (v24 >> 16 >= v6) {
      goto LABEL_152;
    }
    if ((a3 & 0x1000000000000000) != 0)
    {
      char v17 = String.UTF8View._foreignSubscript(position:)();
      if (v23 == v8) {
        goto LABEL_52;
      }
    }
    else if ((a3 & 0x2000000000000000) != 0)
    {
      unint64_t v37 = a2;
      uint64_t v38 = v34;
      char v17 = *((unsigned char *)&v37 + v25);
      if (v23 == v8) {
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v26 = v33;
      if ((a2 & 0x1000000000000000) == 0) {
        uint64_t v26 = _StringObject.sharedUTF8.getter();
      }
      char v17 = *(unsigned char *)(v26 + v25);
      if (v23 == v8)
      {
LABEL_52:
        unint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
        if ((a3 & 0x1000000000000000) == 0) {
          goto LABEL_40;
        }
        goto LABEL_56;
      }
    }
    if ((a3 & 0x1000000000000000) == 0)
    {
LABEL_40:
      unint64_t v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_41;
    }
LABEL_56:
    if (v6 <= v11 >> 16) {
      goto LABEL_154;
    }
    unint64_t v11 = String.UTF8View._foreignIndex(after:)();
LABEL_41:
    if (v17 == 37) {
      goto LABEL_26;
    }
  }
  uint64_t v9 = 0;
LABEL_147:
  swift_bridgeObjectRelease();
  if (!v9)
  {
    if ((v10 & 0x8000000000000000) == 0) {
      return specialized String.init<A, B>(_validating:as:)(0, v10, a1);
    }
LABEL_160:
    __break(1u);
  }
  return 0;
}

void (*specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(Swift::Int isStackAllocationSafe, unint64_t a2, uint64_t a3))(char *, void)
{
  unint64_t v5 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x1000000000000000) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
    uint64_t v6 = isStackAllocationSafe;
    if (isStackAllocationSafe < 0) {
      __break(1u);
    }
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v6 = HIBYTE(a2) & 0xF;
  }
  else
  {
    uint64_t v6 = isStackAllocationSafe & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < 1025 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    return specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((uint64_t)v11 - v7, v5, a2, a3);
  }
  else
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v8 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v9, v5, a2, a3);
    MEMORY[0x185309510](v9, -1, -1);
  }
  return v8;
}

uint64_t partial apply for closure #1 in URL.withUnsafeFileSystemRepresentation<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

void (*specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6))(char *, void)
{
  *(void *)&v29[5] = *MEMORY[0x1E4F143B8];
  unint64_t v26 = a3 >> 14;
  if (a3 >> 14 == a2 >> 14)
  {
    uint64_t v6 = 0;
    return specialized String.init<A, B>(_validating:as:)(0, v6, a1);
  }
  uint64_t v11 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v11) = 1;
  }
  uint64_t v12 = 4 << v11;
  uint64_t v13 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    uint64_t v13 = a4 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v24 = v13;
  uint64_t v25 = v12;
  swift_bridgeObjectRetain();
  uint64_t v14 = 0;
  LOBYTE(v15) = 0;
  uint64_t v6 = 0;
  unint64_t v16 = a2;
  do
  {
    char v18 = Substring.UTF8View.subscript.getter();
    if ((v16 & 0xC) == v25)
    {
      unint64_t v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(v16, a4, a5);
      if ((a5 & 0x1000000000000000) == 0)
      {
LABEL_15:
        unint64_t v16 = (v16 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_19;
      }
    }
    else if ((a5 & 0x1000000000000000) == 0)
    {
      goto LABEL_15;
    }
    if (v24 <= v16 >> 16) {
      goto LABEL_115;
    }
    unint64_t v16 = String.UTF8View._foreignIndex(after:)();
LABEL_19:
    if (v18 == 37)
    {
      if (v14 || v26 == v16 >> 14)
      {
LABEL_110:
        swift_bridgeObjectRelease();
        return 0;
      }
      char v18 = Substring.UTF8View.subscript.getter();
      if ((v16 & 0xC) == v25)
      {
        unint64_t v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(v16, a4, a5);
        if ((a5 & 0x1000000000000000) == 0) {
          goto LABEL_24;
        }
      }
      else if ((a5 & 0x1000000000000000) == 0)
      {
LABEL_24:
        unint64_t v16 = (v16 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_31:
        if (v18 == 37) {
          goto LABEL_110;
        }
        uint64_t v14 = 2;
        goto LABEL_33;
      }
      if (v24 <= v16 >> 16) {
        goto LABEL_115;
      }
      unint64_t v16 = String.UTF8View._foreignIndex(after:)();
      goto LABEL_31;
    }
    if (!v14)
    {
      *(unsigned char *)(a1 + v6) = v18;
      BOOL v19 = __OFADD__(v6++, 1);
      if (v19) {
        goto LABEL_117;
      }
      uint64_t v14 = 0;
      continue;
    }
LABEL_33:
    switch(v18)
    {
      case '0':
        __int16 v17 = 0;
        if (v14 == 1) {
          goto LABEL_97;
        }
        if (v14 != 2) {
          goto LABEL_11;
        }
        goto LABEL_10;
      case '1':
        if (v14 == 1)
        {
          __int16 v17 = 1;
          goto LABEL_97;
        }
        if (v14 == 2)
        {
          LOBYTE(v17) = 16;
          goto LABEL_10;
        }
        goto LABEL_11;
      case '2':
        if (v14 == 1)
        {
          __int16 v17 = 2;
          goto LABEL_97;
        }
        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = 32;
        goto LABEL_10;
      case '3':
        if (v14 == 1)
        {
          __int16 v17 = 3;
          goto LABEL_97;
        }
        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = 48;
        goto LABEL_10;
      case '4':
        if (v14 == 1)
        {
          __int16 v17 = 4;
          goto LABEL_97;
        }
        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = 64;
        goto LABEL_10;
      case '5':
        if (v14 == 1)
        {
          __int16 v17 = 5;
          goto LABEL_97;
        }
        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = 80;
        goto LABEL_10;
      case '6':
        if (v14 == 1)
        {
          __int16 v17 = 6;
          goto LABEL_97;
        }
        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = 96;
        goto LABEL_10;
      case '7':
        if (v14 == 1)
        {
          __int16 v17 = 7;
          goto LABEL_97;
        }
        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = 112;
        goto LABEL_10;
      case '8':
        if (v14 == 1)
        {
          __int16 v17 = 8;
          goto LABEL_97;
        }
        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = 0x80;
        goto LABEL_10;
      case '9':
        if (v14 == 1)
        {
          __int16 v17 = 9;
          goto LABEL_97;
        }
        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = -112;
        goto LABEL_10;
      case 'A':
      case 'a':
        if (v14 == 1)
        {
          __int16 v17 = 10;
          goto LABEL_97;
        }
        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = -96;
        goto LABEL_10;
      case 'B':
      case 'b':
        if (v14 == 1)
        {
          __int16 v17 = 11;
          goto LABEL_97;
        }
        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = -80;
        goto LABEL_10;
      case 'C':
      case 'c':
        if (v14 == 1)
        {
          __int16 v17 = 12;
          goto LABEL_97;
        }
        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = -64;
        goto LABEL_10;
      case 'D':
      case 'd':
        if (v14 == 1)
        {
          __int16 v17 = 13;
          goto LABEL_97;
        }
        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = -48;
        goto LABEL_10;
      case 'E':
      case 'e':
        if (v14 == 1)
        {
          __int16 v17 = 14;
          goto LABEL_97;
        }
        if (v14 != 2) {
          goto LABEL_11;
        }
        LOBYTE(v17) = -32;
        goto LABEL_10;
      case 'F':
      case 'f':
        if (v14 == 1)
        {
          __int16 v17 = 15;
LABEL_97:
          __int16 v15 = v17 + v15;
          if ((v15 & 0x100) != 0) {
            goto LABEL_116;
          }
          if (specialized Set.contains(_:)(v15, a6))
          {
            if (__OFADD__(v6, 2)) {
              goto LABEL_118;
            }
            if (v6 + 2 < v6) {
              goto LABEL_120;
            }
            LOBYTE(v27) = 37;
            HIBYTE(v27) = specialized StringProtocol.hexToAscii(_:)(v15 >> 4);
            char v28 = v18;
            if (a1)
            {
              unint64_t v20 = a1 + v6;
              if ((unint64_t)&v27 < a1 + v6 + 3 && v20 < (unint64_t)v29)
              {
                _fatalErrorMessage(_:_:file:line:flags:)();
                __break(1u);
                JUMPOUT(0x181F12D80);
              }
              __int16 v21 = v27;
              *(unsigned char *)(v20 + 2) = v28;
              *(_WORD *)unint64_t v20 = v21;
            }
            BOOL v19 = __OFADD__(v6, 3);
            v6 += 3;
            if (v19) {
              goto LABEL_121;
            }
          }
          else
          {
            *(unsigned char *)(a1 + v6) = v15;
            BOOL v19 = __OFADD__(v6++, 1);
            if (v19) {
              goto LABEL_119;
            }
            LOBYTE(v15) = 0;
          }
        }
        else if (v14 == 2)
        {
          LOBYTE(v17) = -16;
LABEL_10:
          LOBYTE(v15) = v17;
        }
LABEL_11:
        --v14;
        break;
      default:
        goto LABEL_110;
    }
  }
  while (v26 != v16 >> 14);
  swift_bridgeObjectRelease();
  if (v14) {
    return 0;
  }
  if (v6 < 0)
  {
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
  }
  return specialized String.init<A, B>(_validating:as:)(0, v6, a1);
}

void (*specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5))(char *, void)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  uint64_t isStackAllocationSafe = specialized Collection.count.getter(a1, a2, a3, a4);
  if (isStackAllocationSafe < 0) {
    __break(1u);
  }
  if (isStackAllocationSafe < 1025
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    return specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((uint64_t)v15 - v11, a1, a2, a3, a4, a5);
  }
  else
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v12 = specialized closure #1 in StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v13, a1, a2, a3, a4, a5);
    MEMORY[0x185309510](v13, -1, -1);
  }
  return v12;
}

uint64_t specialized URL.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702060386 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65766974616C6572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized URLResourceValues.fileSecurity.setter(void *a1)
{
  BOOL v2 = (void *)*MEMORY[0x1E4F1C5E8];
  if (a1)
  {
    *((void *)&v8 + 1) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSFileSecurity);
    *(void *)&long long v7 = a1;
  }
  else
  {
    long long v7 = 0u;
    long long v8 = 0u;
  }
  id v3 = a1;
  id v4 = v2;
  specialized Set._Variant.insert(_:)(v6, v4);

  outlined init with copy of Any?((uint64_t)&v7, (uint64_t)v6);
  specialized Dictionary.subscript.setter((uint64_t)v6, v4);
  return outlined destroy of Any?((uint64_t)&v7);
}

uint64_t specialized URLResourceValues.name.setter(uint64_t a1, uint64_t a2, id *a3)
{
  id v4 = *a3;
  specialized Set._Variant.insert(_:)(&v7, v4);

  if (a2)
  {
    uint64_t v5 = String._bridgeToObjectiveCImpl()();
    *((void *)&v8 + 1) = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
    *(void *)&long long v7 = v5;
  }
  else
  {
    long long v7 = 0u;
    long long v8 = 0u;
  }
  return specialized Dictionary.subscript.setter((uint64_t)&v7, v4);
}

id specialized @nonobjc NSURL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, uint64_t a5)
{
  char v6 = v5;
  v16[1] = *(id *)MEMORY[0x1E4F143B8];
  v10.super.isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v11 = *a4;
  if (*a4)
  {
    swift_release();
    swift_release();
  }
  v16[0] = 0;
  id v12 = objc_msgSend(v6, sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_, v10.super.isa, a3, v11, a5, v16);

  if (v12)
  {
    id v13 = v16[0];
  }
  else
  {
    if (v16[0])
    {
      v16[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v14 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v12;
}

unint64_t lazy protocol witness table accessor for type URL.DirectoryHint and conformance URL.DirectoryHint()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.DirectoryHint and conformance URL.DirectoryHint;
  if (!lazy protocol witness table cache variable for type URL.DirectoryHint and conformance URL.DirectoryHint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.DirectoryHint and conformance URL.DirectoryHint);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for URL(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type URL and conformance URL();
  a1[2] = lazy protocol witness table accessor for type URL and conformance URL();
  a1[3] = lazy protocol witness table accessor for type URL and conformance URL();
  unint64_t result = lazy protocol witness table accessor for type URL and conformance URL();
  a1[4] = result;
  return result;
}

uint64_t sub_181F135E8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLResourceValues.name : URLResourceValues(a1, MEMORY[0x1E4F1C6E8], a2);
}

uint64_t sub_181F13608(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for URLResourceValues.name : URLResourceValues(a1, a2, a3, a4, MEMORY[0x1E4F1C6E8]);
}

uint64_t sub_181F13628@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x1E4F1C658], a1);
}

uint64_t sub_181F13648(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E4F1C658], *a1);
}

uint64_t sub_181F13680@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x1E4F1C698], a1);
}

uint64_t sub_181F136A0(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E4F1C698], *a1);
}

uint64_t sub_181F136D8@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x1E4F1C648], a1);
}

uint64_t sub_181F136F8(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E4F1C648], *a1);
}

uint64_t sub_181F13730@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x1E4F1C608], a1);
}

uint64_t sub_181F13750(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E4F1C608], *a1);
}

void *sub_181F13788@<X0>(uint64_t a1@<X8>)
{
  return keypath_get_39Tm((void *(*)(uint64_t *__return_ptr))URLResourceValues.creationDate.getter, a1);
}

uint64_t sub_181F137A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_40Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))URLResourceValues.creationDate.setter);
}

void *sub_181F137B8@<X0>(uint64_t a1@<X8>)
{
  return keypath_get_39Tm((void *(*)(uint64_t *__return_ptr))URLResourceValues.contentAccessDate.getter, a1);
}

void *keypath_get_39Tm@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  unint64_t result = a1(&v5);
  char v4 = v6;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_181F13820(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_40Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))URLResourceValues.contentAccessDate.setter);
}

void *sub_181F13838@<X0>(uint64_t a1@<X8>)
{
  return keypath_get_39Tm((void *(*)(uint64_t *__return_ptr))URLResourceValues.contentModificationDate.getter, a1);
}

uint64_t sub_181F13850(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_40Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))URLResourceValues.contentModificationDate.setter);
}

uint64_t keypath_set_40Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *))
{
  char v5 = *((unsigned char *)a1 + 8);
  uint64_t v7 = *a1;
  char v8 = v5;
  return a5(&v7);
}

uint64_t sub_181F138B0(uint64_t a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E4F1C6B0], *(void *)a1, *(unsigned char *)(a1 + 8));
}

void sub_181F138EC(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  specialized URLResourceValues.fileSecurity.setter(v1);
}

uint64_t sub_181F1393C@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x1E4F1C630], a1);
}

uint64_t sub_181F1395C(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E4F1C630], *a1);
}

uint64_t sub_181F13994@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLResourceValues.name : URLResourceValues(a1, MEMORY[0x1E4F1C898], a2);
}

uint64_t sub_181F139B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for URLResourceValues.name : URLResourceValues(a1, a2, a3, a4, MEMORY[0x1E4F1C898]);
}

uint64_t sub_181F139D4@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for URLResourceValues.isPackage : URLResourceValues(MEMORY[0x1E4F1C780], a1);
}

uint64_t sub_181F139F4(unsigned __int8 *a1)
{
  return URLResourceValues._set(_:newValue:)((void *)*MEMORY[0x1E4F1C780], *a1);
}

unsigned char *storeEnumTagSinglePayload for URL.DirectoryHint(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F13AF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = a3(a1, a2, *(void *)(v4 + 24));
  if (!v5)
  {
    *a4 = result;
    a4[1] = v8;
  }
  return result;
}

uint64_t _NSRange.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v67 = a1;
  uint64_t v7 = *(void *)(a4 + 8);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v63 = v8;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v61 = *(void *)(v10 - 8);
  uint64_t v62 = v10;
  MEMORY[0x1F4188790](v10);
  unint64_t v59 = (char *)&v51 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  id v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v54 = (char *)&v51 - v15;
  uint64_t v53 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v16);
  char v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  __int16 v21 = (char *)&v51 - v20;
  uint64_t v60 = v7;
  uint64_t v22 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v22);
  uint64_t v58 = a3;
  uint64_t v65 = a2;
  swift_getAssociatedConformanceWitness();
  uint64_t v55 = type metadata accessor for Range();
  uint64_t v57 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  unint64_t v52 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  unint64_t v26 = (char *)&v51 - v25;
  MEMORY[0x1F4188790](v27);
  uint64_t v56 = (char *)&v51 - v28;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v64 = a4;
  dispatch thunk of static FixedWidthInteger.max.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v31 = v53;
    uint64_t v30 = v54;
    unint64_t v51 = v26;
    int v32 = v13;
    uint64_t v33 = v18;
    uint64_t v34 = TupleTypeMetadata2;
    uint64_t v35 = &v54[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
    v36(v54, v21, AssociatedTypeWitness);
    unint64_t v37 = v35;
    v36(v35, v33, AssociatedTypeWitness);
    uint64_t v38 = &v32[*(int *)(v34 + 48)];
    __int16 v39 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v39(v32, v30, AssociatedTypeWitness);
    v39(v38, v35, AssociatedTypeWitness);
    char v40 = v52;
    v36(v52, v32, AssociatedTypeWitness);
    uint64_t v53 = *(void *)(v31 + 8);
    ((void (*)(char *, uint64_t))v53)(v38, AssociatedTypeWitness);
    char v41 = &v32[*(int *)(TupleTypeMetadata2 + 48)];
    v36(v32, v30, AssociatedTypeWitness);
    v36(v41, v37, AssociatedTypeWitness);
    uint64_t v42 = v55;
    v36(&v40[*(int *)(v55 + 36)], v41, AssociatedTypeWitness);
    ((void (*)(char *, uint64_t))v53)(v32, AssociatedTypeWitness);
    uint64_t v43 = v57;
    unint64_t v44 = v51;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v51, v40, v42);
    uint64_t v45 = v62;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v68 = v63;
    uint64_t v69 = AssociatedConformanceWitness;
    swift_getWitnessTable();
    uint64_t v47 = (uint64_t)v56;
    uint64_t v48 = v65;
    dispatch thunk of RangeExpression.relative<A>(to:)();
    TupleTypeMetadata2 = *(void *)(v43 + 8);
    ((void (*)(char *, uint64_t))TupleTypeMetadata2)(v44, v42);
    uint64_t v60 = specialized numericCast<A, B>(_:)(v47, AssociatedTypeWitness, v60);
    uint64_t v49 = (uint64_t)v59;
    dispatch thunk of Strideable.distance(to:)();
    uint64_t v50 = swift_getAssociatedConformanceWitness();
    specialized numericCast<A, B>(_:)(v49, v45, *(void *)(v50 + 8));
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v49, v45);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(v67, v48);
    ((void (*)(uint64_t, uint64_t))TupleTypeMetadata2)(v47, v42);
    return v60;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Range<>.init(_:)(uint64_t result, uint64_t a2)
{
  if (result == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  if (!__OFADD__(result, a2)) {
    return result;
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall _NSRange.contains(_:)(Swift::Int a1)
{
  if (a1 >= v1)
  {
    if (__OFSUB__(a1, v1)) {
      __break(1u);
    }
    else {
      LOBYTE(a1) = a1 - v1 < v2;
    }
  }
  else
  {
    LOBYTE(a1) = 0;
  }
  return a1;
}

void _NSRange.hash(into:)(int a1, Swift::UInt a2, Swift::UInt a3)
{
}

BOOL static _NSRange.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

Swift::Int _NSRange.hashValue.getter(Swift::UInt a1, Swift::UInt a2)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _NSRange()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _NSRange()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _NSRange()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t _NSRange.description.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 8236;
  v1._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 125;
  v3._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 123;
}

uint64_t _NSRange.debugDescription.getter(uint64_t a1)
{
  if (a1 == 0x7FFFFFFFFFFFFFFFLL)
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)v6, "{NSNotFound, ");
    HIWORD(v6[1]) = -4864;
  }
  else
  {
    v6[0] = 123;
    v6[1] = 0xE100000000000000;
    v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._uint64_t countAndFlagsBits = 8236;
    v2._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v2);
  }
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 125;
  v4._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v6[0];
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _NSRange()
{
  return _NSRange.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _NSRange()
{
  return _NSRange.debugDescription.getter(*v0);
}

const __CFCharacterSet *_NSRange.init(_:)(uint64_t a1, unint64_t a2)
{
  v14[8] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSScanner), sel_initWithString_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  CFCharacterSetRef result = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
  if (!result)
  {
    __break(1u);
    return result;
  }
  CFCharacterSetRef v5 = result;
  type metadata accessor for __CharacterSetStorage();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v5;
  *(unsigned char *)(inited + 24) = 0;
  [(__CFCharacterSet *)v5 copy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSCharacterSet();
  swift_dynamicCast();
  objc_msgSend(v3, sel__deprecated_scanUpToCharactersFromSet_intoString_, v13, 0);

  if (!objc_msgSend(v3, sel_isAtEnd))
  {
    id v13 = 0;
    id v7 = objc_msgSend(v3, sel__deprecated_scanLocation);
    if (objc_msgSend(v3, sel_scanInteger_, &v13) && !objc_msgSend(v3, sel_isAtEnd))
    {
      unsigned int v8 = objc_msgSend(v3, sel__deprecated_scanString_intoString_, String._bridgeToObjectiveCImpl()(), 0);
      swift_unknownObjectRelease();
      if (!v8)
      {
LABEL_15:
        objc_msgSend(*(id *)(inited + 16), sel_copy);
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        swift_dynamicCast();
        objc_msgSend(v3, sel__deprecated_scanUpToCharactersFromSet_intoString_, *(void *)&v12, 0);

        if (!objc_msgSend(v3, sel_isAtEnd))
        {
          v14[0] = 0.0;
          id v9 = objc_msgSend(v3, sel__deprecated_scanLocation);
          if (objc_msgSend(v3, sel_scanInteger_, v14))
          {
            if ((objc_msgSend(v3, sel_isAtEnd) & 1) != 0
              || (unsigned int v10 = objc_msgSend(v3, sel__deprecated_scanString_intoString_, String._bridgeToObjectiveCImpl()(), 0), swift_unknownObjectRelease(), !v10))
            {

              swift_release();
            }
            else
            {
              objc_msgSend(v3, sel__deprecated_setScanLocation_, v9);
              double v12 = 0.0;
              unsigned int v11 = objc_msgSend(v3, sel__deprecated_scanDouble_, &v12);

              swift_release();
              if (!v11 || v12 <= -9.22337204e18 || v12 >= 9.22337204e18 || v12 != trunc(v12)) {
                return 0;
              }
              *(void *)&v14[0] = (uint64_t)v12;
            }
            return (const __CFCharacterSet *)v13;
          }
        }
        goto LABEL_24;
      }
      objc_msgSend(v3, sel__deprecated_setScanLocation_, v7);
      v14[0] = 0.0;
      if (objc_msgSend(v3, sel__deprecated_scanDouble_, v14)
        && v14[0] > -9.22337204e18
        && v14[0] < 9.22337204e18
        && v14[0] == trunc(v14[0]))
      {
        id v13 = (id)(uint64_t)v14[0];
        goto LABEL_15;
      }
    }
LABEL_24:

    swift_release();
    return 0;
  }
  swift_setDeallocating();

  return 0;
}

uint64_t _NSRange.upperBound.getter(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall _NSRange.formUnion(_:)(__C::_NSRange a1)
{
  Swift::Int location = *v1;
  Swift::Int v3 = v1[1];
  BOOL v4 = __OFADD__(*v1, v3);
  Swift::Int v5 = *v1 + v3;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (__OFADD__(a1.location, a1.length))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v5 <= a1.location + a1.length) {
    Swift::Int v5 = a1.location + a1.length;
  }
  if (location >= a1.location) {
    Swift::Int location = a1.location;
  }
  BOOL v4 = __OFSUB__(v5, location);
  Swift::Int v6 = v5 - location;
  if (!v4)
  {
    *Swift::String v1 = location;
    v1[1] = v6;
    return;
  }
LABEL_11:
  __break(1u);
}

__C::_NSRange __swiftcall _NSRange.union(_:)(__C::_NSRange result)
{
  Swift::Int v3 = v1 + v2;
  if (__OFADD__(v1, v2))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (__OFADD__(result.location, result.length))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  if (v3 <= result.location + result.length) {
    Swift::Int v3 = result.location + result.length;
  }
  if (v1 < result.location) {
    result.Swift::Int location = v1;
  }
  result.length = v3 - result.location;
  if (__OFSUB__(v3, result.location)) {
    goto LABEL_11;
  }
  return result;
}

uint64_t _NSRange.toRange()(uint64_t result, uint64_t a2)
{
  if (result == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  BOOL v3 = __OFADD__(result, a2);
  uint64_t v4 = result + a2;
  if (v3)
  {
    __break(1u);
  }
  else if (v4 >= result)
  {
    return result;
  }
  __break(1u);
  return result;
}

uint64_t Range<>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MEMORY[0x1F4188790](a1);
  MEMORY[0x1F4188790](v6);
  if (v7 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v8 = type metadata accessor for Range();
    id v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    return v9(a3, 1, 1, v8);
  }
  else
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = dispatch thunk of BinaryInteger.init<A>(_:)();
    if (__OFADD__(a1, a2))
    {
      __break(1u);
    }
    else
    {
      dispatch thunk of BinaryInteger.init<A>(_:)();
      Range.init(uncheckedBounds:)();
      uint64_t v11 = type metadata accessor for Range();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a3, 0, 1, v11);
    }
  }
  return result;
}

uint64_t Range<>.init<A>(_:_genericIn:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)v13 - v7;
  dispatch thunk of StringProtocol.utf16.getter();
  if (a1 == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_5;
  }
  v13[1] = a3;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Collection.startIndex.getter();
  unint64_t v15 = v16;
  dispatch thunk of Collection.endIndex.getter();
  v13[2] = v14;
  dispatch thunk of BidirectionalCollection.index(_:offsetBy:limitedBy:)();
  if (v18 == 1
    || (unint64_t v9 = v17,
        unint64_t v16 = v17,
        dispatch thunk of Collection.endIndex.getter(),
        unint64_t v14 = v15,
        dispatch thunk of BidirectionalCollection.index(_:offsetBy:limitedBy:)(),
        v18 == 1)
    || (unint64_t v10 = v17, dispatch thunk of Collection.startIndex.getter(), v9 >> 14 < v17 >> 14))
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
    return 0;
  }
  dispatch thunk of Collection.endIndex.getter();
  unint64_t v12 = v17;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  if (v10 >> 14 > v12 >> 14) {
    return 0;
  }
  if (v10 >> 14 >= v9 >> 14) {
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t Range<>.init<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Range<>.init<A>(_:_genericIn:)(a1, a2, a3);
}

uint64_t _NSRange.customMirror.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v8 - 8);
  unint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = a1;
  v15[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_182106040;
  *(void *)(v11 + 32) = 0x6E6F697461636F6CLL;
  *(void *)(v11 + 40) = 0xE800000000000000;
  uint64_t v12 = MEMORY[0x1E4FBB550];
  *(void *)(v11 + 48) = a1;
  *(void *)(v11 + 72) = v12;
  *(void *)(v11 + 80) = 0x6874676E656CLL;
  *(void *)(v11 + 120) = v12;
  *(void *)(v11 + 88) = 0xE600000000000000;
  *(void *)(v11 + 96) = a2;
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v10, 1, 1, v13);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBC430], v4);
  type metadata accessor for _NSRange(0);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance _NSRange()
{
  return _NSRange.customMirror.getter(*v0, v0[1]);
}

uint64_t _NSRange.customPlaygroundQuickLook.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  *(unsigned char *)(a3 + 32) = 14;
  return result;
}

__n128 protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance _NSRange@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[2].n128_u8[0] = 14;
  return result;
}

uint64_t _NSRange.init(from:)(void *a1)
{
  return specialized _NSRange.init(from:)(a1);
}

uint64_t _NSRange.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance _NSRange@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized _NSRange.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _NSRange(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t specialized _NSRange.init(from:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  uint64_t v2 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v2;
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    uint64_t v3 = 65;
  }
  else {
    uint64_t v3 = 83;
  }
  if (a2 <= 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = a2;
  }
  if (v4 >= 9) {
    uint64_t v5 = 9;
  }
  else {
    uint64_t v5 = v4;
  }
  if (v5 != 1)
  {
    swift_bridgeObjectRetain_n();
    v6._uint64_t countAndFlagsBits = v3;
    v6._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    if (v5 != 2)
    {
      swift_bridgeObjectRetain();
      v7._uint64_t countAndFlagsBits = v3;
      v7._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      if (v5 != 3)
      {
        swift_bridgeObjectRetain();
        v8._uint64_t countAndFlagsBits = v3;
        v8._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v8);
        swift_bridgeObjectRelease();
        if (v5 != 4)
        {
          swift_bridgeObjectRetain();
          v9._uint64_t countAndFlagsBits = v3;
          v9._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v9);
          swift_bridgeObjectRelease();
          if (v5 != 5)
          {
            swift_bridgeObjectRetain();
            v10._uint64_t countAndFlagsBits = v3;
            v10._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v10);
            swift_bridgeObjectRelease();
            if (v5 != 6)
            {
              swift_bridgeObjectRetain();
              v11._uint64_t countAndFlagsBits = v3;
              v11._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v11);
              swift_bridgeObjectRelease();
              if (v5 != 7)
              {
                swift_bridgeObjectRetain();
                v12._uint64_t countAndFlagsBits = v3;
                v12._unint64_t object = (void *)0xE100000000000000;
                String.append(_:)(v12);
                swift_bridgeObjectRelease();
                if (v5 != 8)
                {
                  swift_bridgeObjectRetain();
                  v13._uint64_t countAndFlagsBits = v3;
                  v13._unint64_t object = (void *)0xE100000000000000;
                  String.append(_:)(v13);
                  swift_bridgeObjectRelease();
                }
              }
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

unsigned char *static Date.FormatStyle.Symbol.TimeZone.genericName(_:)@<X0>(unsigned char *result@<X0>, char *a2@<X8>)
{
  if (*result) {
    char v2 = 7;
  }
  else {
    char v2 = 6;
  }
  *a2 = v2;
  return result;
}

uint64_t Date.FormatStyle.Symbol.SymbolType.DayPeriodOption.rawValue.getter(char a1)
{
  uint64_t result = 97;
  switch(a1)
  {
    case 1:
      uint64_t result = 1633771873;
      break;
    case 2:
      uint64_t result = 0x6161616161;
      break;
    case 3:
      uint64_t result = 98;
      break;
    case 4:
      uint64_t result = 1650614882;
      break;
    case 5:
      uint64_t result = 0x6262626262;
      break;
    case 6:
      uint64_t result = 66;
      break;
    case 7:
      uint64_t result = 1111638594;
      break;
    case 8:
      uint64_t result = 0x4242424242;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.rawValue.getter(uint64_t a1, char a2)
{
  if (a2) {
    uint64_t v2 = 65;
  }
  else {
    uint64_t v2 = 83;
  }
  if (a1 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = a1;
  }
  if (v3 >= 9) {
    uint64_t v4 = 9;
  }
  else {
    uint64_t v4 = v3;
  }
  if (v4 != 1)
  {
    swift_bridgeObjectRetain();
    v5._uint64_t countAndFlagsBits = v2;
    v5._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    if (v4 != 2)
    {
      v6._uint64_t countAndFlagsBits = v2;
      v6._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      if (v4 != 3)
      {
        v7._uint64_t countAndFlagsBits = v2;
        v7._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v7);
        if (v4 != 4)
        {
          v8._uint64_t countAndFlagsBits = v2;
          v8._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v8);
          if (v4 != 5)
          {
            v9._uint64_t countAndFlagsBits = v2;
            v9._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v9);
            if (v4 != 6)
            {
              v10._uint64_t countAndFlagsBits = v2;
              v10._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v10);
              if (v4 != 7)
              {
                v11._uint64_t countAndFlagsBits = v2;
                v11._unint64_t object = (void *)0xE100000000000000;
                String.append(_:)(v11);
                if (v4 != 8)
                {
                  v12._uint64_t countAndFlagsBits = v2;
                  v12._unint64_t object = (void *)0xE100000000000000;
                  String.append(_:)(v12);
                }
              }
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(char a1)
{
  uint64_t result = 122;
  switch(a1)
  {
    case 1:
      uint64_t result = 2054847098;
      break;
    case 2:
      uint64_t result = 90;
      break;
    case 3:
      uint64_t result = 1515870810;
      break;
    case 4:
      uint64_t result = 0x5A5A5A5A5ALL;
      break;
    case 5:
      uint64_t result = 79;
      break;
    case 6:
      uint64_t result = 118;
      break;
    case 7:
      uint64_t result = 1987475062;
      break;
    case 8:
      uint64_t result = 86;
      break;
    case 9:
      uint64_t result = 22102;
      break;
    case 10:
      uint64_t result = 5658198;
      break;
    case 11:
      uint64_t result = 1448498774;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *static Date.FormatStyle.Symbol.TimeZone.specificName(_:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void Date.FormatStyle.Symbol.Era.hash(into:)()
{
  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.Era.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Era()
{
  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Era()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Year.hash(into:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  if (v1 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v2 = *(void *)v0;
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v2, v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.Year.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v1, v2);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.Year()
{
  uint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v1, v2);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Year()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  if (v1 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v2 = *(void *)v0;
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v2, v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Year()
{
  uint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v1, v2);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.YearForWeekOfYear.hash(into:)()
{
  if (*(unsigned char *)(v0 + 9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v1 = *(void *)v0;
    char v2 = *(unsigned char *)(v0 + 8);
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = 10;
      if (v1 < 10) {
        uint64_t v3 = v1;
      }
      if (v3 <= 1) {
        uint64_t v4 = 1;
      }
      else {
        uint64_t v4 = v3;
      }
      MEMORY[0x185302340](89, 0xE100000000000000, v4);
    }
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

BOOL static Date.FormatStyle.Symbol.YearForWeekOfYear.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static Date.FormatStyle.Symbol.YearForWeekOfYear.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, void, void))specialized == infix<A>(_:_:));
}

Swift::Int Date.FormatStyle.Symbol.YearForWeekOfYear.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      uint64_t v4 = 10;
      if (v1 < 10) {
        uint64_t v4 = v1;
      }
      if (v4 <= 1) {
        uint64_t v5 = 1;
      }
      else {
        uint64_t v5 = v4;
      }
      MEMORY[0x185302340](89, 0xE100000000000000, v5);
    }
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.YearForWeekOfYear()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      uint64_t v4 = 10;
      if (v1 < 10) {
        uint64_t v4 = v1;
      }
      if (v4 <= 1) {
        uint64_t v5 = 1;
      }
      else {
        uint64_t v5 = v4;
      }
      MEMORY[0x185302340](89, 0xE100000000000000, v5);
    }
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.YearForWeekOfYear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.YearForWeekOfYear(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void))specialized == infix<A>(_:_:));
}

void Date.FormatStyle.Symbol.CyclicYear.hash(into:)()
{
  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.CyclicYear.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.CyclicYear()
{
  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.CyclicYear()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Quarter.hash(into:)()
{
  if (*v0 == 5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

BOOL static Date.FormatStyle.Symbol.Quarter.== infix(_:_:)(unsigned char *a1, unsigned __int8 *a2)
{
  return static Date.FormatStyle.Symbol.Quarter.== infix(_:_:)(a1, a2, (uint64_t (*)(void))specialized == infix<A>(_:_:));
}

Swift::Int Date.FormatStyle.Symbol.Quarter.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Quarter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Quarter(unsigned char *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Quarter(a1, a2, a3, a4, (uint64_t (*)(void))specialized == infix<A>(_:_:));
}

void Date.FormatStyle.Symbol.Month.hash(into:)()
{
  if (*v0 == 5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

BOOL static Date.FormatStyle.Symbol.Month.== infix(_:_:)(unsigned char *a1, unsigned __int8 *a2)
{
  return static Date.FormatStyle.Symbol.Quarter.== infix(_:_:)(a1, a2, (uint64_t (*)(void))specialized == infix<A>(_:_:));
}

BOOL static Date.FormatStyle.Symbol.Quarter.== infix(_:_:)(unsigned char *a1, unsigned __int8 *a2, uint64_t (*a3)(void))
{
  int v3 = *a2;
  if (*a1 != 5) {
    return v3 != 5 && (a3() & 1) != 0;
  }
  return v3 == 5;
}

Swift::Int Date.FormatStyle.Symbol.Month.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Month()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 5)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Month(unsigned char *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Quarter(a1, a2, a3, a4, (uint64_t (*)(void))specialized == infix<A>(_:_:));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Quarter(unsigned char *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  int v5 = *a2;
  if (*a1 != 5) {
    return v5 != 5 && (a5() & 1) != 0;
  }
  return v5 == 5;
}

void Date.FormatStyle.Symbol.Week.hash(into:)()
{
  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.Week.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Week()
{
  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Week()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Day.hash(into:)()
{
  if (*(unsigned char *)(v0 + 9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v1 = *(void *)v0;
    char v2 = *(unsigned char *)(v0 + 8);
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = 10;
      if (v1 < 10) {
        uint64_t v3 = v1;
      }
      if (v3 <= 1) {
        uint64_t v4 = 1;
      }
      else {
        uint64_t v4 = v3;
      }
      MEMORY[0x185302340](103, 0xE100000000000000, v4);
    }
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

BOOL static Date.FormatStyle.Symbol.Day.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static Date.FormatStyle.Symbol.YearForWeekOfYear.== infix(_:_:)(a1, a2, (uint64_t (*)(void, void, void, void))specialized == infix<A>(_:_:));
}

BOOL static Date.FormatStyle.Symbol.YearForWeekOfYear.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void))
{
  if ((*(unsigned char *)(a1 + 9) & 1) == 0) {
    return (*(unsigned char *)(a2 + 9) & 1) == 0
  }
        && (a3(*(void *)a1, *(unsigned char *)(a1 + 8) & 1, *(void *)a2, *(unsigned char *)(a2 + 8) & 1) & 1) != 0;
  return (*(unsigned char *)(a2 + 9) & 1) != 0;
}

Swift::Int Date.FormatStyle.Symbol.Day.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      uint64_t v4 = 10;
      if (v1 < 10) {
        uint64_t v4 = v1;
      }
      if (v4 <= 1) {
        uint64_t v5 = 1;
      }
      else {
        uint64_t v5 = v4;
      }
      MEMORY[0x185302340](103, 0xE100000000000000, v5);
    }
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Day()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 1) == 0)
    {
      uint64_t v4 = 10;
      if (v1 < 10) {
        uint64_t v4 = v1;
      }
      if (v4 <= 1) {
        uint64_t v5 = 1;
      }
      else {
        uint64_t v5 = v4;
      }
      MEMORY[0x185302340](103, 0xE100000000000000, v5);
    }
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Day(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.YearForWeekOfYear(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void))specialized == infix<A>(_:_:));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.YearForWeekOfYear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void))
{
  if ((*(unsigned char *)(a1 + 9) & 1) == 0) {
    return (*(unsigned char *)(a2 + 9) & 1) == 0
  }
        && (a5(*(void *)a1, *(unsigned char *)(a1 + 8) & 1, *(void *)a2, *(unsigned char *)(a2 + 8) & 1) & 1) != 0;
  return *(unsigned char *)(a2 + 9) != 0;
}

void Date.FormatStyle.Symbol.DayOfYear.hash(into:)()
{
  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.DayOfYear.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.DayOfYear()
{
  if (*v0 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.DayOfYear()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Weekday.hash(into:)()
{
  if (*v0 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

BOOL static Date.FormatStyle.Symbol.Weekday.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 != 6) {
    return v3 != 6 && (specialized == infix<A>(_:_:)(v2, v3) & 1) != 0;
  }
  return v3 == 6;
}

Swift::Int Date.FormatStyle.Symbol.Weekday.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Weekday()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.Weekday(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 != 6) {
    return v3 != 6 && (specialized == infix<A>(_:_:)(v2, v3) & 1) != 0;
  }
  return v3 == 6;
}

void Date.FormatStyle.Symbol.DayPeriod.hash(into:)()
{
  if (*v0 == 9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)();
  }
}

BOOL static Date.FormatStyle.Symbol.DayPeriod.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 != 9) {
    return v3 != 9 && (specialized == infix<A>(_:_:)(v2, v3) & 1) != 0;
  }
  return v3 == 9;
}

Swift::Int Date.FormatStyle.Symbol.DayPeriod.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.DayPeriod()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.DayPeriod()
{
  if (*v0 == 9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.DayPeriod()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 9)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)();
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.DayPeriod(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 != 9) {
    return v3 != 9 && (specialized == infix<A>(_:_:)(v2, v3) & 1) != 0;
  }
  return v3 == 9;
}

void Date.FormatStyle.Symbol.Hour.hash(into:)()
{
  int v1 = *v0;
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.Hour.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.Hour()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Hour()
{
  int v1 = *v0;
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Hour()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Minute.hash(into:)()
{
  if (*v0 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.Minute.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Minute()
{
  if (*v0 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Minute()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.Second.hash(into:)()
{
  if (*v0 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.Second.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.Second()
{
  if (*v0 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.Second()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void Date.FormatStyle.Symbol.SecondFraction.hash(into:)(uint64_t a1)
{
  int v3 = *(unsigned __int8 *)(v1 + 8);
  if (v3 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v4 = *(void *)v1;
    char v5 = v3 & 1;
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v4, v5);
  }
}

uint64_t static Date.FormatStyle.Symbol.SecondFraction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (v2 == 255)
  {
    if (v3 == 255) {
      return 1;
    }
  }
  else if (v3 != 255 && (specialized == infix<A>(_:_:)(*(void *)a1, v2 & 1, *(void *)a2, v3 & 1) & 1) != 0)
  {
    return 1;
  }
  return 0;
}

Swift::Int Date.FormatStyle.Symbol.SecondFraction.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)((uint64_t)v4, v1, v2 & 1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SecondFraction()
{
  uint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)((uint64_t)v4, v1, v2 & 1);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SecondFraction(uint64_t a1)
{
  int v3 = *(unsigned __int8 *)(v1 + 8);
  if (v3 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v4 = *(void *)v1;
    char v5 = v3 & 1;
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v4, v5);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SecondFraction()
{
  uint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)((uint64_t)v4, v1, v2 & 1);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SecondFraction(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (v2 == 255)
  {
    if (v3 == 255) {
      return 1;
    }
  }
  else if (v3 != 255 && (specialized == infix<A>(_:_:)(*(void *)a1, v2 & 1, *(void *)a2, v3 & 1) & 1) != 0)
  {
    return 1;
  }
  return 0;
}

void Date.FormatStyle.Symbol.TimeZone.hash(into:)()
{
  int v1 = *v0;
  if (v1 == 12)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int Date.FormatStyle.Symbol.TimeZone.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 12)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.TimeZone()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 12)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.TimeZone()
{
  int v1 = *v0;
  if (v1 == 12)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.TimeZone()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 12)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t Date.FormatStyle.Symbol.StandaloneQuarter.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static Date.FormatStyle.Symbol.StandaloneQuarter.== infix(_:_:)(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 113;
  switch(v2)
  {
    case 1:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 29041;
      break;
    case 2:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v4 = 7434609;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1903260017;
      break;
    case 4:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v4 = 0x7171717171;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE100000000000000;
  uint64_t v6 = 113;
  switch(*a2)
  {
    case 1:
      unint64_t v5 = 0xE200000000000000;
      if (v4 == 29041) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v5 = 0xE300000000000000;
      if (v4 != 7434609) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v5 = 0xE400000000000000;
      uint64_t v6 = 1903260017;
      goto LABEL_12;
    case 4:
      unint64_t v5 = 0xE500000000000000;
      if (v4 != 0x7171717171) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v4 != v6) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int Date.FormatStyle.Symbol.StandaloneQuarter.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.StandaloneQuarter()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.StandaloneQuarter()
{
  return Hasher._finalize()();
}

uint64_t Date.FormatStyle.Symbol.StandaloneMonth.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static Date.FormatStyle.Symbol.StandaloneMonth.== infix(_:_:)(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 76;
  switch(v2)
  {
    case 1:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 19532;
      break;
    case 2:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v4 = 5000268;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1280068684;
      break;
    case 4:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v4 = 0x4C4C4C4C4CLL;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE100000000000000;
  uint64_t v6 = 76;
  switch(*a2)
  {
    case 1:
      unint64_t v5 = 0xE200000000000000;
      if (v4 == 19532) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v5 = 0xE300000000000000;
      if (v4 != 5000268) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v5 = 0xE400000000000000;
      uint64_t v6 = 1280068684;
      goto LABEL_12;
    case 4:
      unint64_t v5 = 0xE500000000000000;
      if (v4 != 0x4C4C4C4C4CLL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v4 != v6) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int Date.FormatStyle.Symbol.StandaloneMonth.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.StandaloneMonth()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.StandaloneMonth()
{
  return Hasher._finalize()();
}

uint64_t Date.FormatStyle.Symbol.StandaloneWeekday.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static Date.FormatStyle.Symbol.StandaloneWeekday.== infix(_:_:)(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 99;
  switch(v2)
  {
    case 1:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v4 = 6513507;
      break;
    case 2:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v4 = 1667457891;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v4 = 0x6363636363;
      break;
    case 4:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v4 = 0x636363636363;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE100000000000000;
  uint64_t v6 = 99;
  switch(*a2)
  {
    case 1:
      unint64_t v5 = 0xE300000000000000;
      if (v4 == 6513507) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v5 = 0xE400000000000000;
      if (v4 != 1667457891) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v5 = 0xE500000000000000;
      uint64_t v6 = 0x6363636363;
      goto LABEL_12;
    case 4:
      unint64_t v5 = 0xE600000000000000;
      if (v4 != 0x636363636363) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v4 != v6) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int Date.FormatStyle.Symbol.StandaloneWeekday.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.StandaloneWeekday()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.StandaloneWeekday()
{
  return Hasher._finalize()();
}

uint64_t Date.FormatStyle.Symbol.VerbatimHour.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static Date.FormatStyle.Symbol.VerbatimHour.== infix(_:_:)(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int Date.FormatStyle.Symbol.VerbatimHour.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.VerbatimHour()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.EraOption.init(rawValue:);
  unint64_t result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.EraOption(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE100000000000000;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1195853639;
  if (v2 != 1)
  {
    uint64_t v5 = 0x4747474747;
    unint64_t v4 = 0xE500000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 71;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.EraOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.YearOption.init(rawValue:)(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.YearOption@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(*(void *)v1, *(unsigned char *)(v1 + 8));
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v1, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v1, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.YearOption(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v6 = v5;
  if (v4 == Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v2, v3) && v6 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = specialized Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption.init(rawValue:)();
  __int16 v4 = v3;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 9) = HIBYTE(v4) & 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  if (*(unsigned char *)(v1 + 8) == 1)
  {
    if (v3) {
      uint64_t result = 22873;
    }
    else {
      uint64_t result = 89;
    }
    if (v3) {
      unint64_t v5 = 0xE200000000000000;
    }
    else {
      unint64_t v5 = 0xE100000000000000;
    }
  }
  else
  {
    if (v3 >= 10) {
      uint64_t v3 = 10;
    }
    if (v3 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v3;
    }
    uint64_t result = MEMORY[0x185302340](89, 0xE100000000000000, v6);
  }
  *a1 = result;
  a1[1] = v5;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(0, *(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  uint64_t v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 8) != 1)
  {
    if (v1 >= 10) {
      uint64_t v1 = 10;
    }
    if (v1 <= 1) {
      uint64_t v2 = 1;
    }
    else {
      uint64_t v2 = v1;
    }
    MEMORY[0x185302340](89, 0xE100000000000000, v2);
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.CyclicYearOption.init(rawValue:);
  unint64_t result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE100000000000000;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1431655765;
  if (v2 != 1)
  {
    uint64_t v5 = 0x5555555555;
    unint64_t v4 = 0xE500000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 85;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.QuarterOption.init(rawValue:);
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE100000000000000;
  uint64_t v3 = 81;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 20817;
      goto LABEL_3;
    case 2:
      *a1 = 5329233;
      a1[1] = 0xE300000000000000;
      break;
    case 3:
      *a1 = 1364283729;
      a1[1] = 0xE400000000000000;
      break;
    case 4:
      *a1 = 0x5151515151;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.QuarterOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption.init(rawValue:);
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE100000000000000;
  uint64_t v3 = 113;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 29041;
      goto LABEL_3;
    case 2:
      *a1 = 7434609;
      a1[1] = 0xE300000000000000;
      break;
    case 3:
      *a1 = 1903260017;
      a1[1] = 0xE400000000000000;
      break;
    case 4:
      *a1 = 0x7171717171;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:);
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE100000000000000;
  uint64_t v3 = 77;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 19789;
      goto LABEL_3;
    case 2:
      *a1 = 5066061;
      a1[1] = 0xE300000000000000;
      break;
    case 3:
      *a1 = 1296911693;
      a1[1] = 0xE400000000000000;
      break;
    case 4:
      *a1 = 0x4D4D4D4D4DLL;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.MonthOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption.init(rawValue:);
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE100000000000000;
  uint64_t v3 = 76;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 19532;
      goto LABEL_3;
    case 2:
      *a1 = 5000268;
      a1[1] = 0xE300000000000000;
      break;
    case 3:
      *a1 = 1280068684;
      a1[1] = 0xE400000000000000;
      break;
    case 4:
      *a1 = 0x4C4C4C4C4CLL;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.WeekOption.init(rawValue:);
  unint64_t result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE100000000000000;
  unint64_t v4 = 0xE200000000000000;
  uint64_t v5 = 30583;
  if (v2 != 1)
  {
    uint64_t v5 = 87;
    unint64_t v4 = 0xE100000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 119;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.DayOfYearOption.init(rawValue:);
  unint64_t result = specialized String.Comparator.CodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE100000000000000;
  unint64_t v4 = 0xE200000000000000;
  uint64_t v5 = 17476;
  if (v2 != 1)
  {
    uint64_t v5 = 4473924;
    unint64_t v4 = 0xE300000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 68;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOfYearOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.DayOption.init(rawValue:)(*a1, a1[1]);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayOption@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  if (*(unsigned char *)(v1 + 8) == 1)
  {
    unint64_t v4 = 0xE200000000000000;
    uint64_t v5 = 25700;
    if (v3 != 1)
    {
      uint64_t v5 = 70;
      unint64_t v4 = 0xE100000000000000;
    }
    if (v3) {
      uint64_t result = v5;
    }
    else {
      uint64_t result = 100;
    }
    if (v3) {
      unint64_t v7 = v4;
    }
    else {
      unint64_t v7 = 0xE100000000000000;
    }
  }
  else
  {
    if (v3 >= 10) {
      uint64_t v3 = 10;
    }
    if (v3 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v3;
    }
    uint64_t result = MEMORY[0x185302340](103, 0xE100000000000000, v8);
  }
  *a1 = result;
  a1[1] = v7;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(0, *(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption()
{
  uint64_t v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 8) != 1)
  {
    if (v1 >= 10) {
      uint64_t v1 = 10;
    }
    if (v1 <= 1) {
      uint64_t v2 = 1;
    }
    else {
      uint64_t v2 = v1;
    }
    MEMORY[0x185302340](103, 0xE100000000000000, v2);
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.DayOption(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.WeekdayOption.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE300000000000000;
  uint64_t v3 = 4539717;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1162167621;
      goto LABEL_3;
    case 2:
      *a1 = 0x4545454545;
      a1[1] = 0xE500000000000000;
      break;
    case 3:
      *a1 = 0x454545454545;
      a1[1] = 0xE600000000000000;
      break;
    case 4:
      *a1 = 101;
      a1[1] = 0xE100000000000000;
      break;
    case 5:
      *a1 = 25957;
      a1[1] = 0xE200000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.WeekdayOption()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption.init(rawValue:);
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE100000000000000;
  uint64_t v3 = 99;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE300000000000000;
      uint64_t v3 = 6513507;
      goto LABEL_3;
    case 2:
      *a1 = 1667457891;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0x6363636363;
      a1[1] = 0xE500000000000000;
      break;
    case 4:
      *a1 = 0x636363636363;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.DayPeriodOption.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Date.FormatStyle.Symbol.SymbolType.DayPeriodOption.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.DayPeriodOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(a1, a2, a3, a4, (uint64_t (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.HourOption.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.HourOption@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(a1, a2, (void (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(a1, a2, a3, (void (*)(void))Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(a1, a2, a3, (void (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE100000000000000;
  uint64_t v3 = 104;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 26728;
      goto LABEL_3;
    case 2:
      *a1 = 72;
      a1[1] = 0xE100000000000000;
      break;
    case 3:
      *a1 = 18504;
      a1[1] = 0xE200000000000000;
      break;
    case 4:
      *a1 = 75;
      a1[1] = 0xE100000000000000;
      break;
    case 5:
      *a1 = 19275;
      a1[1] = 0xE200000000000000;
      break;
    case 6:
      *a1 = 107;
      a1[1] = 0xE100000000000000;
      break;
    case 7:
      *a1 = 27499;
      a1[1] = 0xE200000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.MinuteOption.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption(uint64_t *a1@<X8>)
{
  uint64_t v2 = 109;
  if (*v1) {
    uint64_t v2 = 28013;
  }
  unint64_t v3 = 0xE100000000000000;
  if (*v1) {
    unint64_t v3 = 0xE200000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.MinuteOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.SecondOption.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption(uint64_t *a1@<X8>)
{
  uint64_t v2 = 115;
  if (*v1) {
    uint64_t v2 = 29555;
  }
  unint64_t v3 = 0xE100000000000000;
  if (*v1) {
    unint64_t v3 = 0xE200000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondOption()
{
  return Hasher._finalize()();
}

uint64_t Date.FormatStyle.Symbol.SymbolType.hash(into:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  switch(a3 >> 3)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(a2, a3 & 7);
      goto LABEL_39;
    case 2:
      Hasher._combine(_:)(2uLL);
      if (a3) {
        goto LABEL_39;
      }
      uint64_t v6 = 10;
      if (a2 < 10) {
        uint64_t v6 = a2;
      }
      if (v6 <= 1) {
        uint64_t v7 = 1;
      }
      else {
        uint64_t v7 = v6;
      }
      uint64_t v8 = 89;
      break;
    case 3:
      Hasher._combine(_:)(3uLL);
      goto LABEL_39;
    case 4:
      Hasher._combine(_:)(4uLL);
      goto LABEL_39;
    case 5:
      Hasher._combine(_:)(5uLL);
      goto LABEL_39;
    case 6:
      Hasher._combine(_:)(6uLL);
      goto LABEL_39;
    case 7:
      Hasher._combine(_:)(7uLL);
      goto LABEL_39;
    case 8:
      Hasher._combine(_:)(8uLL);
      goto LABEL_39;
    case 9:
      Hasher._combine(_:)(9uLL);
      if (a3) {
        goto LABEL_39;
      }
      uint64_t v9 = 10;
      if (a2 < 10) {
        uint64_t v9 = a2;
      }
      if (v9 <= 1) {
        uint64_t v7 = 1;
      }
      else {
        uint64_t v7 = v9;
      }
      uint64_t v8 = 103;
      break;
    case 10:
      Hasher._combine(_:)(0xAuLL);
      goto LABEL_39;
    case 11:
      Hasher._combine(_:)(0xBuLL);
      goto LABEL_39;
    case 12:
      Hasher._combine(_:)(0xCuLL);
      goto LABEL_39;
    case 13:
      Hasher._combine(_:)(0xDuLL);
      return specialized RawRepresentable<>.hash(into:)();
    case 14:
      Hasher._combine(_:)(0xEuLL);
      Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(a2);
      goto LABEL_39;
    case 15:
      Hasher._combine(_:)(0xFuLL);
      goto LABEL_39;
    case 16:
      Hasher._combine(_:)(0x10uLL);
      goto LABEL_39;
    case 17:
      Hasher._combine(_:)(0x11uLL);
      return specialized RawRepresentable<>.hash(into:)(a1, a2, a3 & 1);
    case 18:
      Hasher._combine(_:)(0x12uLL);
      Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(a2);
      goto LABEL_39;
    default:
      Hasher._combine(_:)(0);
      goto LABEL_39;
  }
  MEMORY[0x185302340](v8, 0xE100000000000000, v7);
LABEL_39:
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.init(rawValue:)(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.rawValue.getter(*(void *)v1, *(unsigned char *)(v1 + 8));
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.SecondFractionOption(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(a1, a2, a3, a4, (uint64_t (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  if (v7 == a5(v6) && v9 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(a1, a2, (void (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(a1, a2, a3, (void (*)(void))Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(*v4);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(a1, a2, a3, (void (*)(uint64_t))Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType.HourOption(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol.SymbolType()
{
  uint64_t v1 = *(void *)v0;
  unsigned __int8 v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.SymbolType.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Date.FormatStyle.Symbol.SymbolType(uint64_t a1)
{
  return Date.FormatStyle.Symbol.SymbolType.hash(into:)(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol.SymbolType()
{
  uint64_t v1 = *(void *)v0;
  unsigned __int8 v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.SymbolType.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.FormatStyle.Symbol.SymbolType(uint64_t a1, uint64_t a2)
{
  return specialized static Date.FormatStyle.Symbol.SymbolType.== infix(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t Date.FormatStyle.Symbol.hash(into:)(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  unsigned int v3 = *(unsigned __int8 *)(v1 + 8);
  switch(v3 >> 3)
  {
    case 1u:
      Hasher._combine(_:)(1uLL);
      Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v2, v3 & 7);
      goto LABEL_39;
    case 2u:
      Hasher._combine(_:)(2uLL);
      if (v3) {
        goto LABEL_39;
      }
      uint64_t v5 = 10;
      if (v2 < 10) {
        uint64_t v5 = v2;
      }
      if (v5 <= 1) {
        uint64_t v6 = 1;
      }
      else {
        uint64_t v6 = v5;
      }
      uint64_t v7 = 89;
      break;
    case 3u:
      Hasher._combine(_:)(3uLL);
      goto LABEL_39;
    case 4u:
      Hasher._combine(_:)(4uLL);
      goto LABEL_39;
    case 5u:
      Hasher._combine(_:)(5uLL);
      goto LABEL_39;
    case 6u:
      Hasher._combine(_:)(6uLL);
      goto LABEL_39;
    case 7u:
      Hasher._combine(_:)(7uLL);
      goto LABEL_39;
    case 8u:
      Hasher._combine(_:)(8uLL);
      goto LABEL_39;
    case 9u:
      Hasher._combine(_:)(9uLL);
      if (v3) {
        goto LABEL_39;
      }
      uint64_t v8 = 10;
      if (v2 < 10) {
        uint64_t v8 = v2;
      }
      if (v8 <= 1) {
        uint64_t v6 = 1;
      }
      else {
        uint64_t v6 = v8;
      }
      uint64_t v7 = 103;
      break;
    case 0xAu:
      Hasher._combine(_:)(0xAuLL);
      goto LABEL_39;
    case 0xBu:
      Hasher._combine(_:)(0xBuLL);
      goto LABEL_39;
    case 0xCu:
      Hasher._combine(_:)(0xCuLL);
      goto LABEL_39;
    case 0xDu:
      Hasher._combine(_:)(0xDuLL);
      return specialized RawRepresentable<>.hash(into:)();
    case 0xEu:
      Hasher._combine(_:)(0xEuLL);
      Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v2);
      goto LABEL_39;
    case 0xFu:
      Hasher._combine(_:)(0xFuLL);
      goto LABEL_39;
    case 0x10u:
      Hasher._combine(_:)(0x10uLL);
      goto LABEL_39;
    case 0x11u:
      Hasher._combine(_:)(0x11uLL);
      return specialized RawRepresentable<>.hash(into:)(a1, v2, v3 & 1);
    case 0x12u:
      Hasher._combine(_:)(0x12uLL);
      Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v2);
      goto LABEL_39;
    default:
      Hasher._combine(_:)(0);
      goto LABEL_39;
  }
  MEMORY[0x185302340](v7, 0xE100000000000000, v6);
LABEL_39:
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int Date.FormatStyle.Symbol.hashValue.getter()
{
  char v1 = *((unsigned char *)v0 + 8);
  uint64_t v4 = *v0;
  char v5 = v1;
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date.FormatStyle.Symbol()
{
  char v1 = *((unsigned char *)v0 + 8);
  uint64_t v4 = *v0;
  char v5 = v1;
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.FormatStyle.Symbol()
{
  char v1 = *((unsigned char *)v0 + 8);
  uint64_t v4 = *v0;
  char v5 = v1;
  Hasher.init(_seed:)();
  Date.FormatStyle.Symbol.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

void static Date.FormatStyle.Symbol.Year.twoDigits.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(unsigned char *)(a1 + 8) = 3;
}

uint64_t static Date.FormatStyle.Symbol.Year.extended(minimumLength:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 2;
  return result;
}

void static Date.FormatStyle.Symbol.YearForWeekOfYear.twoDigits.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(_WORD *)(a1 + 8) = 1;
}

uint64_t static Date.FormatStyle.Symbol.YearForWeekOfYear.padded(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(_WORD *)(a2 + 8) = 0;
  return result;
}

void static Date.FormatStyle.Symbol.CyclicYear.wide.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static Date.FormatStyle.Symbol.Month.narrow.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static Date.FormatStyle.Symbol.StandaloneMonth.defaultDigits.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static Date.FormatStyle.Symbol.StandaloneMonth.twoDigits.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static Date.FormatStyle.Symbol.StandaloneMonth.abbreviated.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static Date.FormatStyle.Symbol.StandaloneMonth.wide.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static Date.FormatStyle.Symbol.StandaloneMonth.narrow.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static Date.FormatStyle.Symbol.Day.ordinalOfDayInMonth.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 2;
  *(_WORD *)(a1 + 8) = 1;
}

BOOL static Date.FormatStyle.Symbol.DayPeriod.Width.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Date.FormatStyle.Symbol.DayPeriod.Width.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Date.FormatStyle.Symbol.DayPeriod.Width.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unsigned char *static Date.FormatStyle.Symbol.DayPeriod.standard(_:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unsigned char *static Date.FormatStyle.Symbol.DayPeriod.with12s(_:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result + 3;
  return result;
}

unsigned char *static Date.FormatStyle.Symbol.DayPeriod.conversational(_:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0x70806u >> (8 * *result);
  return result;
}

void static Date.FormatStyle.Symbol.Hour.AMPMStyle.wide.getter(void *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Date.FormatStyle.Symbol.Hour.AMPMStyle.encode(to:)(void *a1)
{
  return Date.FormatStyle.Symbol.Hour.AMPMStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
}

uint64_t Date.FormatStyle.Symbol.Hour.AMPMStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.Symbol.Hour.AMPMStyle.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.Hour.AMPMStyle@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.Symbol.Hour.AMPMStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.Hour.AMPMStyle(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.Hour.AMPMStyle(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
}

void *static Date.FormatStyle.Symbol.Hour.twoDigits(amPM:)@<X0>(void *result@<X0>, unsigned char *a2@<X8>)
{
  if (*result >= 4uLL)
  {
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = 0x3010507u >> (8 * *result);
  }
  return result;
}

void *static Date.FormatStyle.Symbol.Hour.conversationalDefaultDigits(amPM:)@<X0>(void *result@<X0>, unsigned char *a2@<X8>)
{
  if (*result >= 4uLL)
  {
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = 0xA080C06u >> (8 * *result);
  }
  return result;
}

void *static Date.FormatStyle.Symbol.Hour.conversationalTwoDigits(amPM:)@<X0>(void *result@<X0>, unsigned char *a2@<X8>)
{
  if (*result >= 4uLL)
  {
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = 0xB090D07u >> (8 * *result);
  }
  return result;
}

void static Date.FormatStyle.Symbol.Hour.defaultDigitsNoAMPM.getter(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

void static Date.FormatStyle.Symbol.Hour.twoDigitsNoAMPM.getter(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

void static Date.FormatStyle.Symbol.VerbatimHour.HourCycle.oneBased.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void Date.FormatStyle.Symbol.VerbatimHour.HourCycle.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static Date.FormatStyle.Symbol.VerbatimHour.HourCycle.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Date.FormatStyle.Symbol.VerbatimHour.HourCycle.encode(to:)(void *a1)
{
  return Date.FormatStyle.Symbol.Hour.AMPMStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
}

uint64_t Date.FormatStyle.Symbol.VerbatimHour.HourCycle.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.Symbol.Hour.AMPMStyle.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.Symbol.VerbatimHour.HourCycle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.Hour.AMPMStyle(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Date.FormatStyle.Symbol.VerbatimHour.Clock.encode(to:)(void *a1)
{
  return Date.FormatStyle.Symbol.Hour.AMPMStyle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
}

uint64_t Date.FormatStyle.Symbol.Hour.AMPMStyle.encode(to:)(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v10 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v10();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Date.FormatStyle.Symbol.VerbatimHour.Clock.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.Symbol.Hour.AMPMStyle.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys, a2);
}

uint64_t Date.FormatStyle.Symbol.Hour.AMPMStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  Swift::String v13 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v14 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v4)
  {
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v7);
    *Swift::String v13 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.FormatStyle.Symbol.VerbatimHour.Clock@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Date.FormatStyle.Symbol.VerbatimHour.Clock.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.VerbatimHour.Clock(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.Hour.AMPMStyle(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.FormatStyle.Symbol.Hour.AMPMStyle(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v12 = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void *static Date.FormatStyle.Symbol.VerbatimHour.defaultDigits(clock:hourCycle:)@<X0>(void *result@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  uint64_t v3 = *a2;
  if (*result == 1)
  {
    if (v3) {
      char v4 = 6;
    }
    else {
      char v4 = 2;
    }
    goto LABEL_7;
  }
  if (!*result)
  {
    char v4 = 4 * (v3 == 0);
LABEL_7:
    *a3 = v4;
    return result;
  }
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *static Date.FormatStyle.Symbol.VerbatimHour.twoDigits(clock:hourCycle:)@<X0>(void *result@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  uint64_t v3 = *a2;
  if (*result == 1)
  {
    if (v3) {
      char v4 = 7;
    }
    else {
      char v4 = 3;
    }
LABEL_9:
    *a3 = v4;
    return result;
  }
  if (!*result)
  {
    if (v3) {
      char v4 = 1;
    }
    else {
      char v4 = 5;
    }
    goto LABEL_9;
  }
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static Date.FormatStyle.Symbol.SecondFraction.fractional(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t static Date.FormatStyle.Symbol.SecondFraction.milliseconds(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

BOOL static Date.FormatStyle.Symbol.TimeZone.Width.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Date.FormatStyle.Symbol.TimeZone.Width.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Date.FormatStyle.Symbol.TimeZone.Width.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unsigned char *static Date.FormatStyle.Symbol.TimeZone.iso8601(_:)@<X0>(unsigned char *result@<X0>, char *a2@<X8>)
{
  if (*result) {
    char v2 = 4;
  }
  else {
    char v2 = 2;
  }
  *a2 = v2;
  return result;
}

unsigned char *static Date.FormatStyle.Symbol.TimeZone.localizedGMT(_:)@<X0>(unsigned char *result@<X0>, char *a2@<X8>)
{
  if (*result) {
    char v2 = 3;
  }
  else {
    char v2 = 5;
  }
  *a2 = v2;
  return result;
}

unsigned char *static Date.FormatStyle.Symbol.TimeZone.identifier(_:)@<X0>(unsigned char *result@<X0>, char *a2@<X8>)
{
  if (*result) {
    char v2 = 9;
  }
  else {
    char v2 = 8;
  }
  *a2 = v2;
  return result;
}

void static Date.FormatStyle.Symbol.TimeZone.exemplarLocation.getter(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

void static Date.FormatStyle.Symbol.TimeZone.genericLocation.getter(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

void static Date.FormatStyle.Symbol.YearForWeekOfYear.omitted.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void static Date.FormatStyle.Symbol.CyclicYear.omitted.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static Date.FormatStyle.Symbol.Month.omitted.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

void static Date.FormatStyle.Symbol.DayPeriod.omitted.getter(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

void static Date.FormatStyle.Symbol.Hour.omitted.getter(unsigned char *a1@<X8>)
{
  *a1 = 14;
}

void static Date.FormatStyle.Symbol.SecondFraction.omitted.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = -1;
}

void static Date.FormatStyle.Symbol.TimeZone.omitted.getter(unsigned char *a1@<X8>)
{
  *a1 = 12;
}

uint64_t specialized static Date.FormatStyle.Symbol.SymbolType.== infix(_:_:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v6 = a1;
  switch(a2 >> 3)
  {
    case 1:
      if ((a4 & 0xF8) == 8)
      {
        uint64_t v15 = a4 & 7;
        switch(a2 & 7)
        {
          case 1:
            if (a1 >= 10) {
              uint64_t v6 = 10;
            }
            if (v6 <= 1) {
              uint64_t v16 = 1;
            }
            else {
              uint64_t v16 = v6;
            }
            uint64_t v17 = 114;
            goto LABEL_163;
          case 2:
            if (a1 >= 10) {
              uint64_t v6 = 10;
            }
            if (v6 <= 1) {
              uint64_t v16 = 1;
            }
            else {
              uint64_t v16 = v6;
            }
            uint64_t v17 = 117;
            goto LABEL_163;
          case 3:
            if (a1) {
              uint64_t v43 = 31097;
            }
            else {
              uint64_t v43 = 121;
            }
            if (a1) {
              unint64_t v45 = 0xE200000000000000;
            }
            else {
              unint64_t v45 = 0xE100000000000000;
            }
            goto LABEL_170;
          default:
            if (a1 >= 10) {
              uint64_t v6 = 10;
            }
            if (v6 <= 1) {
              uint64_t v16 = 1;
            }
            else {
              uint64_t v16 = v6;
            }
            uint64_t v17 = 121;
LABEL_163:
            uint64_t v43 = MEMORY[0x185302340](v17, 0xE100000000000000, v16);
            unint64_t v45 = v44;
LABEL_170:
            switch(v15)
            {
              case 1:
                uint64_t v49 = 10;
                if (a3 < 10) {
                  uint64_t v49 = a3;
                }
                if (v49 <= 1) {
                  uint64_t v47 = 1;
                }
                else {
                  uint64_t v47 = v49;
                }
                uint64_t v48 = 114;
                goto LABEL_189;
              case 2:
                uint64_t v50 = 10;
                if (a3 < 10) {
                  uint64_t v50 = a3;
                }
                if (v50 <= 1) {
                  uint64_t v47 = 1;
                }
                else {
                  uint64_t v47 = v50;
                }
                uint64_t v48 = 117;
                goto LABEL_189;
              case 3:
                if (a3) {
                  uint64_t v51 = 31097;
                }
                else {
                  uint64_t v51 = 121;
                }
                if (a3) {
                  unint64_t v53 = 0xE200000000000000;
                }
                else {
                  unint64_t v53 = 0xE100000000000000;
                }
                goto LABEL_196;
              default:
                uint64_t v46 = 10;
                if (a3 < 10) {
                  uint64_t v46 = a3;
                }
                if (v46 <= 1) {
                  uint64_t v47 = 1;
                }
                else {
                  uint64_t v47 = v46;
                }
                uint64_t v48 = 121;
LABEL_189:
                uint64_t v51 = MEMORY[0x185302340](v48, 0xE100000000000000, v47);
                unint64_t v53 = v52;
LABEL_196:
                if (v43 != v51 || v45 != v53) {
                  goto LABEL_198;
                }
                goto LABEL_289;
            }
        }
      }
      return 0;
    case 2:
      if ((a4 & 0xF8) != 0x10) {
        return 0;
      }
      if (a2)
      {
        if (a1) {
          uint64_t v19 = 22873;
        }
        else {
          uint64_t v19 = 89;
        }
        if (a1) {
          unint64_t v21 = 0xE200000000000000;
        }
        else {
          unint64_t v21 = 0xE100000000000000;
        }
      }
      else
      {
        if (a1 >= 10) {
          uint64_t v6 = 10;
        }
        if (v6 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v6;
        }
        uint64_t v19 = MEMORY[0x185302340](89, 0xE100000000000000, v18);
        unint64_t v21 = v20;
      }
      if (a4)
      {
        if (a3) {
          uint64_t v34 = 22873;
        }
        else {
          uint64_t v34 = 89;
        }
        if (a3) {
          unint64_t v36 = 0xE200000000000000;
        }
        else {
          unint64_t v36 = 0xE100000000000000;
        }
      }
      else
      {
        uint64_t v32 = 10;
        if (a3 < 10) {
          uint64_t v32 = a3;
        }
        if (v32 <= 1) {
          uint64_t v33 = 1;
        }
        else {
          uint64_t v33 = v32;
        }
        uint64_t v34 = MEMORY[0x185302340](89, 0xE100000000000000, v33);
        unint64_t v36 = v35;
      }
      if (v19 == v34 && v21 == v36) {
        goto LABEL_289;
      }
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v37 & 1;
    case 3:
      if ((a4 & 0xF8) != 0x18) {
        return 0;
      }
      int v22 = a1;
      if ((_BYTE)a1)
      {
        if (a1 == 1) {
          uint64_t v8 = 1431655765;
        }
        else {
          uint64_t v8 = 0x5555555555;
        }
        if (v22 == 1) {
          unint64_t v9 = 0xE400000000000000;
        }
        else {
          unint64_t v9 = 0xE500000000000000;
        }
      }
      else
      {
        unint64_t v9 = 0xE100000000000000;
        uint64_t v8 = 85;
      }
      if ((_BYTE)a3)
      {
        BOOL v38 = a3 == 1;
        unint64_t v39 = 0xE400000000000000;
        uint64_t v40 = 1431655765;
        unint64_t v41 = 0xE500000000000000;
        uint64_t v42 = 0x5555555555;
        goto LABEL_138;
      }
      unint64_t v29 = 0xE100000000000000;
      uint64_t v28 = 85;
      goto LABEL_144;
    case 4:
      if ((a4 & 0xF8) != 0x20) {
        return 0;
      }
      unint64_t v10 = 0xE100000000000000;
      uint64_t v11 = 81;
      switch((char)v6)
      {
        case 1:
          unint64_t v10 = 0xE200000000000000;
          uint64_t v11 = 20817;
          break;
        case 2:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 5329233;
          break;
        case 3:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1364283729;
          break;
        case 4:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v11 = 0x5151515151;
          break;
        default:
          break;
      }
      unint64_t v55 = 0xE100000000000000;
      uint64_t v56 = 81;
      switch((char)a3)
      {
        case 1:
          unint64_t v55 = 0xE200000000000000;
          uint64_t v56 = 20817;
          break;
        case 2:
          unint64_t v55 = 0xE300000000000000;
          uint64_t v56 = 5329233;
          break;
        case 3:
          unint64_t v55 = 0xE400000000000000;
          uint64_t v56 = 1364283729;
          break;
        case 4:
          unint64_t v55 = 0xE500000000000000;
          uint64_t v56 = 0x5151515151;
          break;
        default:
          goto LABEL_287;
      }
      goto LABEL_287;
    case 5:
      if ((a4 & 0xF8) != 0x28) {
        return 0;
      }
      unint64_t v10 = 0xE100000000000000;
      uint64_t v11 = 113;
      switch((char)v6)
      {
        case 1:
          unint64_t v10 = 0xE200000000000000;
          uint64_t v11 = 29041;
          break;
        case 2:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 7434609;
          break;
        case 3:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1903260017;
          break;
        case 4:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v11 = 0x7171717171;
          break;
        default:
          break;
      }
      unint64_t v55 = 0xE100000000000000;
      uint64_t v56 = 113;
      switch((char)a3)
      {
        case 1:
          unint64_t v55 = 0xE200000000000000;
          uint64_t v56 = 29041;
          break;
        case 2:
          unint64_t v55 = 0xE300000000000000;
          uint64_t v56 = 7434609;
          break;
        case 3:
          unint64_t v55 = 0xE400000000000000;
          uint64_t v56 = 1903260017;
          break;
        case 4:
          unint64_t v55 = 0xE500000000000000;
          uint64_t v56 = 0x7171717171;
          break;
        default:
          goto LABEL_287;
      }
      goto LABEL_287;
    case 6:
      if ((a4 & 0xF8) != 0x30) {
        return 0;
      }
      unint64_t v10 = 0xE100000000000000;
      uint64_t v11 = 77;
      switch((char)v6)
      {
        case 1:
          unint64_t v10 = 0xE200000000000000;
          uint64_t v11 = 19789;
          break;
        case 2:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 5066061;
          break;
        case 3:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1296911693;
          break;
        case 4:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v11 = 0x4D4D4D4D4DLL;
          break;
        default:
          break;
      }
      unint64_t v55 = 0xE100000000000000;
      uint64_t v56 = 77;
      switch((char)a3)
      {
        case 1:
          unint64_t v55 = 0xE200000000000000;
          uint64_t v56 = 19789;
          break;
        case 2:
          unint64_t v55 = 0xE300000000000000;
          uint64_t v56 = 5066061;
          break;
        case 3:
          unint64_t v55 = 0xE400000000000000;
          uint64_t v56 = 1296911693;
          break;
        case 4:
          unint64_t v55 = 0xE500000000000000;
          uint64_t v56 = 0x4D4D4D4D4DLL;
          break;
        default:
          goto LABEL_287;
      }
      goto LABEL_287;
    case 7:
      if ((a4 & 0xF8) != 0x38) {
        return 0;
      }
      unint64_t v10 = 0xE100000000000000;
      uint64_t v11 = 76;
      switch((char)v6)
      {
        case 1:
          unint64_t v10 = 0xE200000000000000;
          uint64_t v11 = 19532;
          break;
        case 2:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 5000268;
          break;
        case 3:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1280068684;
          break;
        case 4:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v11 = 0x4C4C4C4C4CLL;
          break;
        default:
          break;
      }
      unint64_t v55 = 0xE100000000000000;
      uint64_t v56 = 76;
      switch((char)a3)
      {
        case 1:
          unint64_t v55 = 0xE200000000000000;
          uint64_t v56 = 19532;
          break;
        case 2:
          unint64_t v55 = 0xE300000000000000;
          uint64_t v56 = 5000268;
          break;
        case 3:
          unint64_t v55 = 0xE400000000000000;
          uint64_t v56 = 1280068684;
          break;
        case 4:
          unint64_t v55 = 0xE500000000000000;
          uint64_t v56 = 0x4C4C4C4C4CLL;
          break;
        default:
          goto LABEL_287;
      }
      goto LABEL_287;
    case 8:
      if ((a4 & 0xF8) != 0x40) {
        return 0;
      }
      int v23 = a1;
      if ((_BYTE)a1)
      {
        if (a1 == 1) {
          uint64_t v8 = 30583;
        }
        else {
          uint64_t v8 = 87;
        }
        if (v23 == 1) {
          unint64_t v9 = 0xE200000000000000;
        }
        else {
          unint64_t v9 = 0xE100000000000000;
        }
      }
      else
      {
        unint64_t v9 = 0xE100000000000000;
        uint64_t v8 = 119;
      }
      if ((_BYTE)a3)
      {
        BOOL v38 = a3 == 1;
        unint64_t v39 = 0xE200000000000000;
        uint64_t v40 = 30583;
        unint64_t v41 = 0xE100000000000000;
        uint64_t v42 = 87;
        goto LABEL_138;
      }
      unint64_t v29 = 0xE100000000000000;
      uint64_t v28 = 119;
      goto LABEL_144;
    case 9:
      if ((a4 & 0xF8) != 0x48) {
        return 0;
      }
      char v24 = a2 & 1;
      char v25 = a4 & 1;
      return specialized == infix<A>(_:_:)(a1, v24, a3, v25);
    case 10:
      if ((a4 & 0xF8) != 0x50) {
        return 0;
      }
      int v27 = a1;
      if ((_BYTE)a1)
      {
        if (a1 == 1) {
          uint64_t v8 = 17476;
        }
        else {
          uint64_t v8 = 4473924;
        }
        if (v27 == 1) {
          unint64_t v9 = 0xE200000000000000;
        }
        else {
          unint64_t v9 = 0xE300000000000000;
        }
      }
      else
      {
        unint64_t v9 = 0xE100000000000000;
        uint64_t v8 = 68;
      }
      if ((_BYTE)a3)
      {
        BOOL v38 = a3 == 1;
        unint64_t v39 = 0xE200000000000000;
        uint64_t v40 = 17476;
        unint64_t v41 = 0xE300000000000000;
        uint64_t v42 = 4473924;
        goto LABEL_138;
      }
      unint64_t v29 = 0xE100000000000000;
      uint64_t v28 = 68;
      goto LABEL_144;
    case 11:
      if ((a4 & 0xF8) != 0x58) {
        return 0;
      }
      return specialized == infix<A>(_:_:)(a1, a3);
    case 12:
      if ((a4 & 0xF8) != 0x60) {
        return 0;
      }
      unint64_t v10 = 0xE100000000000000;
      uint64_t v11 = 99;
      switch((char)v6)
      {
        case 1:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 6513507;
          break;
        case 2:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1667457891;
          break;
        case 3:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v11 = 0x6363636363;
          break;
        case 4:
          unint64_t v10 = 0xE600000000000000;
          uint64_t v11 = 0x636363636363;
          break;
        default:
          break;
      }
      unint64_t v55 = 0xE100000000000000;
      uint64_t v56 = 99;
      switch((char)a3)
      {
        case 1:
          unint64_t v55 = 0xE300000000000000;
          uint64_t v56 = 6513507;
          break;
        case 2:
          unint64_t v55 = 0xE400000000000000;
          uint64_t v56 = 1667457891;
          break;
        case 3:
          unint64_t v55 = 0xE500000000000000;
          uint64_t v56 = 0x6363636363;
          break;
        case 4:
          unint64_t v55 = 0xE600000000000000;
          uint64_t v56 = 0x636363636363;
          break;
        default:
          goto LABEL_287;
      }
      goto LABEL_287;
    case 13:
      if ((a4 & 0xF8) != 0x68) {
        return 0;
      }
      return specialized == infix<A>(_:_:)(a1, a3);
    case 14:
      if ((a4 & 0xF8) != 0x70) {
        return 0;
      }
      unint64_t v10 = 0xE100000000000000;
      uint64_t v11 = 106;
      switch((char)v6)
      {
        case 1:
          unint64_t v10 = 0xE200000000000000;
          uint64_t v11 = 27242;
          break;
        case 2:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 6974058;
          break;
        case 3:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1785358954;
          break;
        case 4:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v11 = 0x6A6A6A6A6ALL;
          break;
        case 5:
          unint64_t v10 = 0xE600000000000000;
          uint64_t v11 = 0x6A6A6A6A6A6ALL;
          break;
        case 6:
          uint64_t v11 = 74;
          break;
        case 7:
          unint64_t v10 = 0xE200000000000000;
          uint64_t v11 = 19018;
          break;
        case 8:
          uint64_t v11 = 67;
          break;
        case 9:
          unint64_t v10 = 0xE200000000000000;
          uint64_t v11 = 17219;
          break;
        case 10:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 4408131;
          break;
        case 11:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1128481603;
          break;
        case 12:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v11 = 0x4343434343;
          break;
        case 13:
          unint64_t v10 = 0xE600000000000000;
          uint64_t v11 = 0x434343434343;
          break;
        default:
          break;
      }
      unint64_t v55 = 0xE100000000000000;
      uint64_t v56 = 106;
      switch((char)a3)
      {
        case 1:
          unint64_t v55 = 0xE200000000000000;
          uint64_t v56 = 27242;
          break;
        case 2:
          unint64_t v55 = 0xE300000000000000;
          uint64_t v56 = 6974058;
          break;
        case 3:
          unint64_t v55 = 0xE400000000000000;
          uint64_t v56 = 1785358954;
          break;
        case 4:
          unint64_t v55 = 0xE500000000000000;
          uint64_t v56 = 0x6A6A6A6A6ALL;
          break;
        case 5:
          unint64_t v55 = 0xE600000000000000;
          uint64_t v56 = 0x6A6A6A6A6A6ALL;
          break;
        case 6:
          uint64_t v56 = 74;
          break;
        case 7:
          unint64_t v55 = 0xE200000000000000;
          uint64_t v56 = 19018;
          break;
        case 8:
          uint64_t v56 = 67;
          break;
        case 9:
          unint64_t v55 = 0xE200000000000000;
          uint64_t v56 = 17219;
          break;
        case 10:
          unint64_t v55 = 0xE300000000000000;
          uint64_t v56 = 4408131;
          break;
        case 11:
          unint64_t v55 = 0xE400000000000000;
          uint64_t v56 = 1128481603;
          break;
        case 12:
          unint64_t v55 = 0xE500000000000000;
          uint64_t v56 = 0x4343434343;
          break;
        case 13:
          unint64_t v55 = 0xE600000000000000;
          uint64_t v56 = 0x434343434343;
          break;
        default:
          goto LABEL_287;
      }
      goto LABEL_287;
    case 15:
      if ((a4 & 0xF8) != 0x78) {
        return 0;
      }
      BOOL v12 = (a1 & 1) == 0;
      uint64_t v13 = 28013;
      uint64_t v14 = 109;
      goto LABEL_84;
    case 16:
      if ((a4 & 0xF8) != 0x80) {
        return 0;
      }
      BOOL v12 = (a1 & 1) == 0;
      uint64_t v13 = 29555;
      uint64_t v14 = 115;
LABEL_84:
      if (v12) {
        uint64_t v8 = v14;
      }
      else {
        uint64_t v8 = v13;
      }
      if (v12) {
        unint64_t v9 = 0xE100000000000000;
      }
      else {
        unint64_t v9 = 0xE200000000000000;
      }
      if (a3) {
        uint64_t v28 = v13;
      }
      else {
        uint64_t v28 = v14;
      }
      if (a3) {
        unint64_t v29 = 0xE200000000000000;
      }
      else {
        unint64_t v29 = 0xE100000000000000;
      }
      goto LABEL_144;
    case 17:
      if ((a4 & 0xF8) != 0x88) {
        return 0;
      }
      char v30 = a2 & 1;
      char v31 = a4 & 1;
      return specialized == infix<A>(_:_:)(a1, v30, a3, v31);
    case 18:
      if ((a4 & 0xF8) != 0x90) {
        return 0;
      }
      unint64_t v10 = 0xE100000000000000;
      uint64_t v11 = 122;
      switch((char)v6)
      {
        case 1:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 2054847098;
          break;
        case 2:
          uint64_t v11 = 90;
          break;
        case 3:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1515870810;
          break;
        case 4:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v11 = 0x5A5A5A5A5ALL;
          break;
        case 5:
          uint64_t v11 = 79;
          break;
        case 6:
          uint64_t v11 = 118;
          break;
        case 7:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1987475062;
          break;
        case 8:
          uint64_t v11 = 86;
          break;
        case 9:
          unint64_t v10 = 0xE200000000000000;
          uint64_t v11 = 22102;
          break;
        case 10:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 5658198;
          break;
        case 11:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1448498774;
          break;
        default:
          break;
      }
      unint64_t v55 = 0xE100000000000000;
      uint64_t v56 = 122;
      switch((char)a3)
      {
        case 1:
          unint64_t v55 = 0xE400000000000000;
          uint64_t v56 = 2054847098;
          break;
        case 2:
          uint64_t v56 = 90;
          break;
        case 3:
          unint64_t v55 = 0xE400000000000000;
          uint64_t v56 = 1515870810;
          break;
        case 4:
          unint64_t v55 = 0xE500000000000000;
          uint64_t v56 = 0x5A5A5A5A5ALL;
          break;
        case 5:
          uint64_t v56 = 79;
          break;
        case 6:
          uint64_t v56 = 118;
          break;
        case 7:
          unint64_t v55 = 0xE400000000000000;
          uint64_t v56 = 1987475062;
          break;
        case 8:
          uint64_t v56 = 86;
          break;
        case 9:
          unint64_t v55 = 0xE200000000000000;
          uint64_t v56 = 22102;
          break;
        case 10:
          unint64_t v55 = 0xE300000000000000;
          uint64_t v56 = 5658198;
          break;
        case 11:
          unint64_t v55 = 0xE400000000000000;
          uint64_t v56 = 1448498774;
          break;
        default:
          break;
      }
LABEL_287:
      if (v11 == v56 && v10 == v55) {
        goto LABEL_289;
      }
      char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v57 & 1;
    default:
      if (a4 >= 8u) {
        return 0;
      }
      int v7 = a1;
      if ((_BYTE)a1)
      {
        if (a1 == 1) {
          uint64_t v8 = 1195853639;
        }
        else {
          uint64_t v8 = 0x4747474747;
        }
        if (v7 == 1) {
          unint64_t v9 = 0xE400000000000000;
        }
        else {
          unint64_t v9 = 0xE500000000000000;
        }
      }
      else
      {
        unint64_t v9 = 0xE100000000000000;
        uint64_t v8 = 71;
      }
      if ((_BYTE)a3)
      {
        BOOL v38 = a3 == 1;
        unint64_t v39 = 0xE400000000000000;
        uint64_t v40 = 1195853639;
        unint64_t v41 = 0xE500000000000000;
        uint64_t v42 = 0x4747474747;
LABEL_138:
        if (v38) {
          uint64_t v28 = v40;
        }
        else {
          uint64_t v28 = v42;
        }
        if (v38) {
          unint64_t v29 = v39;
        }
        else {
          unint64_t v29 = v41;
        }
      }
      else
      {
        unint64_t v29 = 0xE100000000000000;
        uint64_t v28 = 71;
      }
LABEL_144:
      if (v8 == v28 && v9 == v29)
      {
LABEL_289:
        swift_bridgeObjectRelease_n();
        return 1;
      }
      else
      {
LABEL_198:
        char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v54 & 1;
      }
  }
}

uint64_t specialized static Date.FormatStyle.Symbol.CyclicYear.== infix(_:_:)(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 3)
  {
    if (v3 == 3) {
      return 1;
    }
  }
  else if (v3 != 3)
  {
    if (*a1)
    {
      if (v2 == 1)
      {
        unint64_t v4 = 0xE400000000000000;
        uint64_t v5 = 1431655765;
      }
      else
      {
        unint64_t v4 = 0xE500000000000000;
        uint64_t v5 = 0x5555555555;
      }
    }
    else
    {
      unint64_t v4 = 0xE100000000000000;
      uint64_t v5 = 85;
    }
    unint64_t v6 = 0xE400000000000000;
    uint64_t v7 = 1431655765;
    if (v3 != 1)
    {
      uint64_t v7 = 0x5555555555;
      unint64_t v6 = 0xE500000000000000;
    }
    if (*a2) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 85;
    }
    if (*a2) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = 0xE100000000000000;
    }
    if (v5 == v8 && v4 == v9)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11) {
      return 1;
    }
  }
  return 0;
}

uint64_t specialized static Date.FormatStyle.Symbol.Era.== infix(_:_:)(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 3)
  {
    if (v3 == 3) {
      return 1;
    }
  }
  else if (v3 != 3)
  {
    if (*a1)
    {
      if (v2 == 1)
      {
        unint64_t v4 = 0xE400000000000000;
        uint64_t v5 = 1195853639;
      }
      else
      {
        unint64_t v4 = 0xE500000000000000;
        uint64_t v5 = 0x4747474747;
      }
    }
    else
    {
      unint64_t v4 = 0xE100000000000000;
      uint64_t v5 = 71;
    }
    unint64_t v6 = 0xE400000000000000;
    uint64_t v7 = 1195853639;
    if (v3 != 1)
    {
      uint64_t v7 = 0x4747474747;
      unint64_t v6 = 0xE500000000000000;
    }
    if (*a2) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 71;
    }
    if (*a2) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = 0xE100000000000000;
    }
    if (v5 == v8 && v4 == v9)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11) {
      return 1;
    }
  }
  return 0;
}

uint64_t specialized static Date.FormatStyle.Symbol.Hour.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 14) {
    return v3 == 14;
  }
  if (v3 == 14) {
    return 0;
  }
  uint64_t v5 = Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v2);
  uint64_t v7 = v6;
  if (v5 != Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v3) || v7 != v8)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v10 & 1) != 0;
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t specialized static Date.FormatStyle.Symbol.Week.== infix(_:_:)(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 3)
  {
    if (v3 == 3) {
      return 1;
    }
  }
  else if (v3 != 3)
  {
    if (*a1)
    {
      if (v2 == 1)
      {
        unint64_t v4 = 0xE200000000000000;
        uint64_t v5 = 30583;
      }
      else
      {
        unint64_t v4 = 0xE100000000000000;
        uint64_t v5 = 87;
      }
    }
    else
    {
      unint64_t v4 = 0xE100000000000000;
      uint64_t v5 = 119;
    }
    unint64_t v6 = 0xE200000000000000;
    uint64_t v7 = 30583;
    if (v3 != 1)
    {
      uint64_t v7 = 87;
      unint64_t v6 = 0xE100000000000000;
    }
    if (*a2) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 119;
    }
    if (*a2) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = 0xE100000000000000;
    }
    if (v5 == v8 && v4 == v9)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11) {
      return 1;
    }
  }
  return 0;
}

BOOL specialized static Date.FormatStyle.Symbol.Year.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (v3 == 255)
  {
    if (v4 != 255) {
      return 0;
    }
  }
  else
  {
    if (v4 == 255) {
      return 0;
    }
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(*(void *)a1, v3);
    uint64_t v8 = v7;
    if (v6 != Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v5, v4) || v8 != v9)
    {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (v11 & 1) != 0;
    }
    swift_bridgeObjectRelease_n();
  }
  return 1;
}

uint64_t specialized static Date.FormatStyle.Symbol.Minute.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 2) {
    return v3 == 2;
  }
  if (v3 == 2) {
    return 0;
  }
  if (v2) {
    uint64_t v5 = 28013;
  }
  else {
    uint64_t v5 = 109;
  }
  if (v2) {
    unint64_t v6 = 0xE200000000000000;
  }
  else {
    unint64_t v6 = 0xE100000000000000;
  }
  if (v3) {
    uint64_t v7 = 28013;
  }
  else {
    uint64_t v7 = 109;
  }
  if (v3) {
    unint64_t v8 = 0xE200000000000000;
  }
  else {
    unint64_t v8 = 0xE100000000000000;
  }
  if (v5 != v7 || v6 != v8)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v10 & 1) != 0;
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t specialized static Date.FormatStyle.Symbol.Second.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 2) {
    return v3 == 2;
  }
  if (v3 == 2) {
    return 0;
  }
  if (v2) {
    uint64_t v5 = 29555;
  }
  else {
    uint64_t v5 = 115;
  }
  if (v2) {
    unint64_t v6 = 0xE200000000000000;
  }
  else {
    unint64_t v6 = 0xE100000000000000;
  }
  if (v3) {
    uint64_t v7 = 29555;
  }
  else {
    uint64_t v7 = 115;
  }
  if (v3) {
    unint64_t v8 = 0xE200000000000000;
  }
  else {
    unint64_t v8 = 0xE100000000000000;
  }
  if (v5 != v7 || v6 != v8)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v10 & 1) != 0;
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t specialized static Date.FormatStyle.Symbol.TimeZone.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 12) {
    return v3 == 12;
  }
  if (v3 == 12) {
    return 0;
  }
  uint64_t v5 = Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v2);
  uint64_t v7 = v6;
  if (v5 != Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v3) || v7 != v8)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v10 & 1) != 0;
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t specialized static Date.FormatStyle.Symbol.DayOfYear.== infix(_:_:)(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 3)
  {
    if (v3 == 3) {
      return 1;
    }
  }
  else if (v3 != 3)
  {
    if (*a1)
    {
      if (v2 == 1)
      {
        unint64_t v4 = 0xE200000000000000;
        uint64_t v5 = 17476;
      }
      else
      {
        unint64_t v4 = 0xE300000000000000;
        uint64_t v5 = 4473924;
      }
    }
    else
    {
      unint64_t v4 = 0xE100000000000000;
      uint64_t v5 = 68;
    }
    unint64_t v6 = 0xE200000000000000;
    uint64_t v7 = 17476;
    if (v3 != 1)
    {
      uint64_t v7 = 4473924;
      unint64_t v6 = 0xE300000000000000;
    }
    if (*a2) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 68;
    }
    if (*a2) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = 0xE100000000000000;
    }
    if (v5 == v8 && v4 == v9)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11) {
      return 1;
    }
  }
  return 0;
}

uint64_t specialized static Date.FormatStyle.Symbol.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v5 = *(void *)a2;
  unsigned int v6 = *(unsigned __int8 *)(a2 + 8);
  switch(v4 >> 3)
  {
    case 1u:
      if ((v6 & 0xF8) == 8)
      {
        uint64_t v15 = v6 & 7;
        switch(v4 & 7)
        {
          case 1u:
            uint64_t v49 = 10;
            if (v3 < 10) {
              uint64_t v49 = v3;
            }
            if (v49 <= 1) {
              uint64_t v17 = 1;
            }
            else {
              uint64_t v17 = v49;
            }
            uint64_t v18 = 114;
            goto LABEL_155;
          case 2u:
            uint64_t v50 = 10;
            if (v3 < 10) {
              uint64_t v50 = v3;
            }
            if (v50 <= 1) {
              uint64_t v17 = 1;
            }
            else {
              uint64_t v17 = v50;
            }
            uint64_t v18 = 117;
            goto LABEL_155;
          case 3u:
            if (v3) {
              uint64_t v21 = 31097;
            }
            else {
              uint64_t v21 = 121;
            }
            if (v3) {
              unint64_t v23 = 0xE200000000000000;
            }
            else {
              unint64_t v23 = 0xE100000000000000;
            }
            goto LABEL_162;
          default:
            uint64_t v16 = 10;
            if (v3 < 10) {
              uint64_t v16 = v3;
            }
            if (v16 <= 1) {
              uint64_t v17 = 1;
            }
            else {
              uint64_t v17 = v16;
            }
            uint64_t v18 = 121;
LABEL_155:
            uint64_t v21 = MEMORY[0x185302340](v18, 0xE100000000000000, v17);
            unint64_t v23 = v51;
LABEL_162:
            switch(v15)
            {
              case 1:
                uint64_t v53 = 10;
                if (v5 < 10) {
                  uint64_t v53 = v5;
                }
                if (v53 <= 1) {
                  uint64_t v37 = 1;
                }
                else {
                  uint64_t v37 = v53;
                }
                uint64_t v38 = 114;
                goto LABEL_181;
              case 2:
                uint64_t v54 = 10;
                if (v5 < 10) {
                  uint64_t v54 = v5;
                }
                if (v54 <= 1) {
                  uint64_t v37 = 1;
                }
                else {
                  uint64_t v37 = v54;
                }
                uint64_t v38 = 117;
                goto LABEL_181;
              case 3:
                BOOL v39 = v5 == 0;
                uint64_t v40 = 31097;
                uint64_t v41 = 121;
                goto LABEL_184;
              default:
                uint64_t v52 = 10;
                if (v5 < 10) {
                  uint64_t v52 = v5;
                }
                if (v52 <= 1) {
                  uint64_t v37 = 1;
                }
                else {
                  uint64_t v37 = v52;
                }
                uint64_t v38 = 121;
                goto LABEL_181;
            }
        }
      }
      return 0;
    case 2u:
      if ((v6 & 0xF8) != 0x10) {
        return 0;
      }
      if (v4)
      {
        if (v3) {
          uint64_t v21 = 22873;
        }
        else {
          uint64_t v21 = 89;
        }
        if (v3) {
          unint64_t v23 = 0xE200000000000000;
        }
        else {
          unint64_t v23 = 0xE100000000000000;
        }
      }
      else
      {
        uint64_t v19 = 10;
        if (v3 < 10) {
          uint64_t v19 = v3;
        }
        if (v19 <= 1) {
          uint64_t v20 = 1;
        }
        else {
          uint64_t v20 = v19;
        }
        uint64_t v21 = MEMORY[0x185302340](89, 0xE100000000000000, v20);
        unint64_t v23 = v22;
      }
      if (v6)
      {
        BOOL v39 = v5 == 0;
        uint64_t v40 = 22873;
        uint64_t v41 = 89;
LABEL_184:
        if (v39) {
          uint64_t v58 = v41;
        }
        else {
          uint64_t v58 = v40;
        }
        if (v39) {
          unint64_t v57 = 0xE100000000000000;
        }
        else {
          unint64_t v57 = 0xE200000000000000;
        }
        if (v21 != v58) {
          goto LABEL_192;
        }
      }
      else
      {
        uint64_t v36 = 10;
        if (v5 < 10) {
          uint64_t v36 = v5;
        }
        if (v36 <= 1) {
          uint64_t v37 = 1;
        }
        else {
          uint64_t v37 = v36;
        }
        uint64_t v38 = 89;
LABEL_181:
        uint64_t v55 = MEMORY[0x185302340](v38, 0xE100000000000000, v37);
        unint64_t v57 = v56;
        if (v21 != v55) {
          goto LABEL_192;
        }
      }
      if (v23 == v57) {
        goto LABEL_297;
      }
      goto LABEL_192;
    case 3u:
      if ((v6 & 0xF8) != 0x18) {
        return 0;
      }
      int v24 = v3;
      if ((_BYTE)v3)
      {
        if (v3 == 1) {
          uint64_t v8 = 1431655765;
        }
        else {
          uint64_t v8 = 0x5555555555;
        }
        if (v24 == 1) {
          unint64_t v9 = 0xE400000000000000;
        }
        else {
          unint64_t v9 = 0xE500000000000000;
        }
      }
      else
      {
        unint64_t v9 = 0xE100000000000000;
        uint64_t v8 = 85;
      }
      if (*(void *)a2)
      {
        BOOL v42 = *(void *)a2 == 1;
        unint64_t v43 = 0xE400000000000000;
        uint64_t v44 = 1431655765;
        unint64_t v45 = 0xE500000000000000;
        uint64_t v46 = 0x5555555555;
        goto LABEL_130;
      }
      unint64_t v48 = 0xE100000000000000;
      uint64_t v47 = 85;
      break;
    case 4u:
      if ((v6 & 0xF8) != 0x20) {
        return 0;
      }
      unint64_t v10 = 0xE100000000000000;
      uint64_t v11 = 81;
      switch((char)v3)
      {
        case 1:
          unint64_t v10 = 0xE200000000000000;
          uint64_t v11 = 20817;
          break;
        case 2:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 5329233;
          break;
        case 3:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1364283729;
          break;
        case 4:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v11 = 0x5151515151;
          break;
        default:
          break;
      }
      unint64_t v60 = 0xE100000000000000;
      uint64_t v61 = 81;
      switch(*(void *)a2)
      {
        case 1u:
          unint64_t v60 = 0xE200000000000000;
          uint64_t v61 = 20817;
          break;
        case 2u:
          unint64_t v60 = 0xE300000000000000;
          uint64_t v61 = 5329233;
          break;
        case 3u:
          unint64_t v60 = 0xE400000000000000;
          uint64_t v61 = 1364283729;
          break;
        case 4u:
          unint64_t v60 = 0xE500000000000000;
          uint64_t v61 = 0x5151515151;
          break;
        default:
          goto LABEL_295;
      }
      goto LABEL_295;
    case 5u:
      if ((v6 & 0xF8) != 0x28) {
        return 0;
      }
      unint64_t v10 = 0xE100000000000000;
      uint64_t v11 = 113;
      switch((char)v3)
      {
        case 1:
          unint64_t v10 = 0xE200000000000000;
          uint64_t v11 = 29041;
          break;
        case 2:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 7434609;
          break;
        case 3:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1903260017;
          break;
        case 4:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v11 = 0x7171717171;
          break;
        default:
          break;
      }
      unint64_t v60 = 0xE100000000000000;
      uint64_t v61 = 113;
      switch(*(void *)a2)
      {
        case 1u:
          unint64_t v60 = 0xE200000000000000;
          uint64_t v61 = 29041;
          break;
        case 2u:
          unint64_t v60 = 0xE300000000000000;
          uint64_t v61 = 7434609;
          break;
        case 3u:
          unint64_t v60 = 0xE400000000000000;
          uint64_t v61 = 1903260017;
          break;
        case 4u:
          unint64_t v60 = 0xE500000000000000;
          uint64_t v61 = 0x7171717171;
          break;
        default:
          goto LABEL_295;
      }
      goto LABEL_295;
    case 6u:
      if ((v6 & 0xF8) != 0x30) {
        return 0;
      }
      unint64_t v10 = 0xE100000000000000;
      uint64_t v11 = 77;
      switch((char)v3)
      {
        case 1:
          unint64_t v10 = 0xE200000000000000;
          uint64_t v11 = 19789;
          break;
        case 2:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 5066061;
          break;
        case 3:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1296911693;
          break;
        case 4:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v11 = 0x4D4D4D4D4DLL;
          break;
        default:
          break;
      }
      unint64_t v60 = 0xE100000000000000;
      uint64_t v61 = 77;
      switch(*(void *)a2)
      {
        case 1u:
          unint64_t v60 = 0xE200000000000000;
          uint64_t v61 = 19789;
          break;
        case 2u:
          unint64_t v60 = 0xE300000000000000;
          uint64_t v61 = 5066061;
          break;
        case 3u:
          unint64_t v60 = 0xE400000000000000;
          uint64_t v61 = 1296911693;
          break;
        case 4u:
          unint64_t v60 = 0xE500000000000000;
          uint64_t v61 = 0x4D4D4D4D4DLL;
          break;
        default:
          goto LABEL_295;
      }
      goto LABEL_295;
    case 7u:
      if ((v6 & 0xF8) != 0x38) {
        return 0;
      }
      unint64_t v10 = 0xE100000000000000;
      uint64_t v11 = 76;
      switch((char)v3)
      {
        case 1:
          unint64_t v10 = 0xE200000000000000;
          uint64_t v11 = 19532;
          break;
        case 2:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 5000268;
          break;
        case 3:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1280068684;
          break;
        case 4:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v11 = 0x4C4C4C4C4CLL;
          break;
        default:
          break;
      }
      unint64_t v60 = 0xE100000000000000;
      uint64_t v61 = 76;
      switch(*(void *)a2)
      {
        case 1u:
          unint64_t v60 = 0xE200000000000000;
          uint64_t v61 = 19532;
          break;
        case 2u:
          unint64_t v60 = 0xE300000000000000;
          uint64_t v61 = 5000268;
          break;
        case 3u:
          unint64_t v60 = 0xE400000000000000;
          uint64_t v61 = 1280068684;
          break;
        case 4u:
          unint64_t v60 = 0xE500000000000000;
          uint64_t v61 = 0x4C4C4C4C4CLL;
          break;
        default:
          goto LABEL_295;
      }
      goto LABEL_295;
    case 8u:
      if ((v6 & 0xF8) != 0x40) {
        return 0;
      }
      int v25 = v3;
      if ((_BYTE)v3)
      {
        if (v3 == 1) {
          uint64_t v8 = 30583;
        }
        else {
          uint64_t v8 = 87;
        }
        if (v25 == 1) {
          unint64_t v9 = 0xE200000000000000;
        }
        else {
          unint64_t v9 = 0xE100000000000000;
        }
      }
      else
      {
        unint64_t v9 = 0xE100000000000000;
        uint64_t v8 = 119;
      }
      if (*(void *)a2)
      {
        BOOL v42 = *(void *)a2 == 1;
        unint64_t v43 = 0xE200000000000000;
        uint64_t v44 = 30583;
        unint64_t v45 = 0xE100000000000000;
        uint64_t v46 = 87;
        goto LABEL_130;
      }
      unint64_t v48 = 0xE100000000000000;
      uint64_t v47 = 119;
      break;
    case 9u:
      return (v6 & 0xF8) == 0x48 && (specialized == infix<A>(_:_:)(v3, v4 & 1, v5, v6 & 1) & 1) != 0;
    case 0xAu:
      if ((v6 & 0xF8) != 0x50) {
        return 0;
      }
      int v26 = v3;
      if ((_BYTE)v3)
      {
        if (v3 == 1) {
          uint64_t v8 = 17476;
        }
        else {
          uint64_t v8 = 4473924;
        }
        if (v26 == 1) {
          unint64_t v9 = 0xE200000000000000;
        }
        else {
          unint64_t v9 = 0xE300000000000000;
        }
      }
      else
      {
        unint64_t v9 = 0xE100000000000000;
        uint64_t v8 = 68;
      }
      if (*(void *)a2)
      {
        BOOL v42 = *(void *)a2 == 1;
        unint64_t v43 = 0xE200000000000000;
        uint64_t v44 = 17476;
        unint64_t v45 = 0xE300000000000000;
        uint64_t v46 = 4473924;
        goto LABEL_130;
      }
      unint64_t v48 = 0xE100000000000000;
      uint64_t v47 = 68;
      break;
    case 0xBu:
      if ((v6 & 0xF8) != 0x58) {
        return 0;
      }
      uint64_t v27 = 4539717;
      unint64_t v28 = 0xE300000000000000;
      uint64_t v29 = v3;
      uint64_t v30 = 4539717;
      switch(v29)
      {
        case 1:
          unint64_t v28 = 0xE400000000000000;
          uint64_t v30 = 1162167621;
          break;
        case 2:
          unint64_t v28 = 0xE500000000000000;
          uint64_t v30 = 0x4545454545;
          break;
        case 3:
          unint64_t v28 = 0xE600000000000000;
          uint64_t v30 = 0x454545454545;
          break;
        case 4:
          unint64_t v28 = 0xE100000000000000;
          uint64_t v30 = 101;
          break;
        case 5:
          unint64_t v28 = 0xE200000000000000;
          uint64_t v30 = 25957;
          break;
        default:
          break;
      }
      unint64_t v62 = 0xE300000000000000;
      switch(*(void *)a2)
      {
        case 1u:
          unint64_t v62 = 0xE400000000000000;
          uint64_t v27 = 1162167621;
          break;
        case 2u:
          unint64_t v62 = 0xE500000000000000;
          uint64_t v27 = 0x4545454545;
          break;
        case 3u:
          unint64_t v62 = 0xE600000000000000;
          uint64_t v27 = 0x454545454545;
          break;
        case 4u:
          unint64_t v62 = 0xE100000000000000;
          uint64_t v27 = 101;
          break;
        case 5u:
          unint64_t v62 = 0xE200000000000000;
          uint64_t v27 = 25957;
          break;
        default:
          break;
      }
      if (v30 != v27 || v28 != v62) {
        goto LABEL_299;
      }
      goto LABEL_297;
    case 0xCu:
      if ((v6 & 0xF8) != 0x60) {
        return 0;
      }
      unint64_t v10 = 0xE100000000000000;
      uint64_t v11 = 99;
      switch((char)v3)
      {
        case 1:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 6513507;
          break;
        case 2:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1667457891;
          break;
        case 3:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v11 = 0x6363636363;
          break;
        case 4:
          unint64_t v10 = 0xE600000000000000;
          uint64_t v11 = 0x636363636363;
          break;
        default:
          break;
      }
      unint64_t v60 = 0xE100000000000000;
      uint64_t v61 = 99;
      switch(*(void *)a2)
      {
        case 1u:
          unint64_t v60 = 0xE300000000000000;
          uint64_t v61 = 6513507;
          break;
        case 2u:
          unint64_t v60 = 0xE400000000000000;
          uint64_t v61 = 1667457891;
          break;
        case 3u:
          unint64_t v60 = 0xE500000000000000;
          uint64_t v61 = 0x6363636363;
          break;
        case 4u:
          unint64_t v60 = 0xE600000000000000;
          uint64_t v61 = 0x636363636363;
          break;
        default:
          goto LABEL_295;
      }
      goto LABEL_295;
    case 0xDu:
      return (v6 & 0xF8) == 0x68 && (specialized == infix<A>(_:_:)(v3, *(void *)a2) & 1) != 0;
    case 0xEu:
      if ((v6 & 0xF8) != 0x70) {
        return 0;
      }
      unint64_t v10 = 0xE100000000000000;
      uint64_t v11 = 106;
      switch((char)v3)
      {
        case 1:
          unint64_t v10 = 0xE200000000000000;
          uint64_t v11 = 27242;
          break;
        case 2:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 6974058;
          break;
        case 3:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1785358954;
          break;
        case 4:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v11 = 0x6A6A6A6A6ALL;
          break;
        case 5:
          unint64_t v10 = 0xE600000000000000;
          uint64_t v11 = 0x6A6A6A6A6A6ALL;
          break;
        case 6:
          uint64_t v11 = 74;
          break;
        case 7:
          unint64_t v10 = 0xE200000000000000;
          uint64_t v11 = 19018;
          break;
        case 8:
          uint64_t v11 = 67;
          break;
        case 9:
          unint64_t v10 = 0xE200000000000000;
          uint64_t v11 = 17219;
          break;
        case 10:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 4408131;
          break;
        case 11:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1128481603;
          break;
        case 12:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v11 = 0x4343434343;
          break;
        case 13:
          unint64_t v10 = 0xE600000000000000;
          uint64_t v11 = 0x434343434343;
          break;
        default:
          break;
      }
      unint64_t v60 = 0xE100000000000000;
      uint64_t v61 = 106;
      switch(*(void *)a2)
      {
        case 1u:
          unint64_t v60 = 0xE200000000000000;
          uint64_t v61 = 27242;
          break;
        case 2u:
          unint64_t v60 = 0xE300000000000000;
          uint64_t v61 = 6974058;
          break;
        case 3u:
          unint64_t v60 = 0xE400000000000000;
          uint64_t v61 = 1785358954;
          break;
        case 4u:
          unint64_t v60 = 0xE500000000000000;
          uint64_t v61 = 0x6A6A6A6A6ALL;
          break;
        case 5u:
          unint64_t v60 = 0xE600000000000000;
          uint64_t v61 = 0x6A6A6A6A6A6ALL;
          break;
        case 6u:
          uint64_t v61 = 74;
          break;
        case 7u:
          unint64_t v60 = 0xE200000000000000;
          uint64_t v61 = 19018;
          break;
        case 8u:
          uint64_t v61 = 67;
          break;
        case 9u:
          unint64_t v60 = 0xE200000000000000;
          uint64_t v61 = 17219;
          break;
        case 0xAu:
          unint64_t v60 = 0xE300000000000000;
          uint64_t v61 = 4408131;
          break;
        case 0xBu:
          unint64_t v60 = 0xE400000000000000;
          uint64_t v61 = 1128481603;
          break;
        case 0xCu:
          unint64_t v60 = 0xE500000000000000;
          uint64_t v61 = 0x4343434343;
          break;
        case 0xDu:
          unint64_t v60 = 0xE600000000000000;
          uint64_t v61 = 0x434343434343;
          break;
        default:
          goto LABEL_295;
      }
      goto LABEL_295;
    case 0xFu:
      if ((v6 & 0xF8) != 0x78) {
        return 0;
      }
      BOOL v12 = (v3 & 1) == 0;
      uint64_t v13 = 28013;
      uint64_t v14 = 109;
      goto LABEL_81;
    case 0x10u:
      if ((v6 & 0xF8) != 0x80) {
        return 0;
      }
      BOOL v12 = (v3 & 1) == 0;
      uint64_t v13 = 29555;
      uint64_t v14 = 115;
LABEL_81:
      if (v12) {
        uint64_t v31 = v14;
      }
      else {
        uint64_t v31 = v13;
      }
      if (v12) {
        unint64_t v32 = 0xE100000000000000;
      }
      else {
        unint64_t v32 = 0xE200000000000000;
      }
      if (v5) {
        uint64_t v33 = v13;
      }
      else {
        uint64_t v33 = v14;
      }
      if (v5) {
        unint64_t v34 = 0xE200000000000000;
      }
      else {
        unint64_t v34 = 0xE100000000000000;
      }
      if (v31 != v33 || v32 != v34) {
        goto LABEL_192;
      }
      goto LABEL_297;
    case 0x11u:
      return (v6 & 0xF8) == 0x88 && (specialized == infix<A>(_:_:)(v3, v4 & 1, v5, v6 & 1) & 1) != 0;
    case 0x12u:
      if ((v6 & 0xF8) != 0x90) {
        return 0;
      }
      unint64_t v10 = 0xE100000000000000;
      uint64_t v11 = 122;
      switch((char)v3)
      {
        case 1:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 2054847098;
          break;
        case 2:
          uint64_t v11 = 90;
          break;
        case 3:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1515870810;
          break;
        case 4:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v11 = 0x5A5A5A5A5ALL;
          break;
        case 5:
          uint64_t v11 = 79;
          break;
        case 6:
          uint64_t v11 = 118;
          break;
        case 7:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1987475062;
          break;
        case 8:
          uint64_t v11 = 86;
          break;
        case 9:
          unint64_t v10 = 0xE200000000000000;
          uint64_t v11 = 22102;
          break;
        case 10:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 5658198;
          break;
        case 11:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1448498774;
          break;
        default:
          break;
      }
      unint64_t v60 = 0xE100000000000000;
      uint64_t v61 = 122;
      switch(*(void *)a2)
      {
        case 1u:
          unint64_t v60 = 0xE400000000000000;
          uint64_t v61 = 2054847098;
          break;
        case 2u:
          uint64_t v61 = 90;
          break;
        case 3u:
          unint64_t v60 = 0xE400000000000000;
          uint64_t v61 = 1515870810;
          break;
        case 4u:
          unint64_t v60 = 0xE500000000000000;
          uint64_t v61 = 0x5A5A5A5A5ALL;
          break;
        case 5u:
          uint64_t v61 = 79;
          break;
        case 6u:
          uint64_t v61 = 118;
          break;
        case 7u:
          unint64_t v60 = 0xE400000000000000;
          uint64_t v61 = 1987475062;
          break;
        case 8u:
          uint64_t v61 = 86;
          break;
        case 9u:
          unint64_t v60 = 0xE200000000000000;
          uint64_t v61 = 22102;
          break;
        case 0xAu:
          unint64_t v60 = 0xE300000000000000;
          uint64_t v61 = 5658198;
          break;
        case 0xBu:
          unint64_t v60 = 0xE400000000000000;
          uint64_t v61 = 1448498774;
          break;
        default:
          break;
      }
LABEL_295:
      if (v11 == v61 && v10 == v60) {
        goto LABEL_297;
      }
LABEL_299:
      char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (v64 & 1) != 0;
    default:
      if (v6 >= 8) {
        return 0;
      }
      int v7 = v3;
      if ((_BYTE)v3)
      {
        if (v3 == 1) {
          uint64_t v8 = 1195853639;
        }
        else {
          uint64_t v8 = 0x4747474747;
        }
        if (v7 == 1) {
          unint64_t v9 = 0xE400000000000000;
        }
        else {
          unint64_t v9 = 0xE500000000000000;
        }
      }
      else
      {
        unint64_t v9 = 0xE100000000000000;
        uint64_t v8 = 71;
      }
      if (*(void *)a2)
      {
        BOOL v42 = *(void *)a2 == 1;
        unint64_t v43 = 0xE400000000000000;
        uint64_t v44 = 1195853639;
        unint64_t v45 = 0xE500000000000000;
        uint64_t v46 = 0x4747474747;
LABEL_130:
        if (v42) {
          uint64_t v47 = v44;
        }
        else {
          uint64_t v47 = v46;
        }
        if (v42) {
          unint64_t v48 = v43;
        }
        else {
          unint64_t v48 = v45;
        }
      }
      else
      {
        unint64_t v48 = 0xE100000000000000;
        uint64_t v47 = 71;
      }
      break;
  }
  if (v8 == v47 && v9 == v48)
  {
LABEL_297:
    swift_bridgeObjectRelease_n();
    return 1;
  }
LABEL_192:
  char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v59 & 1) != 0;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Era and conformance Date.FormatStyle.Symbol.Era()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Era and conformance Date.FormatStyle.Symbol.Era;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Era and conformance Date.FormatStyle.Symbol.Era)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Era and conformance Date.FormatStyle.Symbol.Era);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Year and conformance Date.FormatStyle.Symbol.Year()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Year and conformance Date.FormatStyle.Symbol.Year;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Year and conformance Date.FormatStyle.Symbol.Year)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Year and conformance Date.FormatStyle.Symbol.Year);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.YearForWeekOfYear and conformance Date.FormatStyle.Symbol.YearForWeekOfYear()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.YearForWeekOfYear and conformance Date.FormatStyle.Symbol.YearForWeekOfYear;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.YearForWeekOfYear and conformance Date.FormatStyle.Symbol.YearForWeekOfYear)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.YearForWeekOfYear and conformance Date.FormatStyle.Symbol.YearForWeekOfYear);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.CyclicYear and conformance Date.FormatStyle.Symbol.CyclicYear()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.CyclicYear and conformance Date.FormatStyle.Symbol.CyclicYear;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.CyclicYear and conformance Date.FormatStyle.Symbol.CyclicYear)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.CyclicYear and conformance Date.FormatStyle.Symbol.CyclicYear);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Quarter and conformance Date.FormatStyle.Symbol.Quarter()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Quarter and conformance Date.FormatStyle.Symbol.Quarter;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Quarter and conformance Date.FormatStyle.Symbol.Quarter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Quarter and conformance Date.FormatStyle.Symbol.Quarter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Month and conformance Date.FormatStyle.Symbol.Month()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Month and conformance Date.FormatStyle.Symbol.Month;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Month and conformance Date.FormatStyle.Symbol.Month)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Month and conformance Date.FormatStyle.Symbol.Month);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Week and conformance Date.FormatStyle.Symbol.Week()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Week and conformance Date.FormatStyle.Symbol.Week;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Week and conformance Date.FormatStyle.Symbol.Week)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Week and conformance Date.FormatStyle.Symbol.Week);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Day and conformance Date.FormatStyle.Symbol.Day()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Day and conformance Date.FormatStyle.Symbol.Day;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Day and conformance Date.FormatStyle.Symbol.Day)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Day and conformance Date.FormatStyle.Symbol.Day);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.DayOfYear and conformance Date.FormatStyle.Symbol.DayOfYear()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayOfYear and conformance Date.FormatStyle.Symbol.DayOfYear;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayOfYear and conformance Date.FormatStyle.Symbol.DayOfYear)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayOfYear and conformance Date.FormatStyle.Symbol.DayOfYear);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Weekday and conformance Date.FormatStyle.Symbol.Weekday()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Weekday and conformance Date.FormatStyle.Symbol.Weekday;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Weekday and conformance Date.FormatStyle.Symbol.Weekday)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Weekday and conformance Date.FormatStyle.Symbol.Weekday);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.DayPeriod and conformance Date.FormatStyle.Symbol.DayPeriod()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod and conformance Date.FormatStyle.Symbol.DayPeriod;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod and conformance Date.FormatStyle.Symbol.DayPeriod)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod and conformance Date.FormatStyle.Symbol.DayPeriod);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour and conformance Date.FormatStyle.Symbol.Hour()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour and conformance Date.FormatStyle.Symbol.Hour;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour and conformance Date.FormatStyle.Symbol.Hour)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour and conformance Date.FormatStyle.Symbol.Hour);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Minute and conformance Date.FormatStyle.Symbol.Minute()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Minute and conformance Date.FormatStyle.Symbol.Minute;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Minute and conformance Date.FormatStyle.Symbol.Minute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Minute and conformance Date.FormatStyle.Symbol.Minute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Second and conformance Date.FormatStyle.Symbol.Second()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Second and conformance Date.FormatStyle.Symbol.Second;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Second and conformance Date.FormatStyle.Symbol.Second)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Second and conformance Date.FormatStyle.Symbol.Second);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SecondFraction and conformance Date.FormatStyle.Symbol.SecondFraction()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SecondFraction and conformance Date.FormatStyle.Symbol.SecondFraction;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SecondFraction and conformance Date.FormatStyle.Symbol.SecondFraction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SecondFraction and conformance Date.FormatStyle.Symbol.SecondFraction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.TimeZone and conformance Date.FormatStyle.Symbol.TimeZone()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone and conformance Date.FormatStyle.Symbol.TimeZone;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone and conformance Date.FormatStyle.Symbol.TimeZone)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone and conformance Date.FormatStyle.Symbol.TimeZone);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.StandaloneQuarter and conformance Date.FormatStyle.Symbol.StandaloneQuarter()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneQuarter and conformance Date.FormatStyle.Symbol.StandaloneQuarter;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneQuarter and conformance Date.FormatStyle.Symbol.StandaloneQuarter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneQuarter and conformance Date.FormatStyle.Symbol.StandaloneQuarter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.StandaloneMonth and conformance Date.FormatStyle.Symbol.StandaloneMonth()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneMonth and conformance Date.FormatStyle.Symbol.StandaloneMonth;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneMonth and conformance Date.FormatStyle.Symbol.StandaloneMonth)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneMonth and conformance Date.FormatStyle.Symbol.StandaloneMonth);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.StandaloneWeekday and conformance Date.FormatStyle.Symbol.StandaloneWeekday()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneWeekday and conformance Date.FormatStyle.Symbol.StandaloneWeekday;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneWeekday and conformance Date.FormatStyle.Symbol.StandaloneWeekday)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.StandaloneWeekday and conformance Date.FormatStyle.Symbol.StandaloneWeekday);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour and conformance Date.FormatStyle.Symbol.VerbatimHour()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour and conformance Date.FormatStyle.Symbol.VerbatimHour;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour and conformance Date.FormatStyle.Symbol.VerbatimHour)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour and conformance Date.FormatStyle.Symbol.VerbatimHour);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol and conformance Date.FormatStyle.Symbol()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol and conformance Date.FormatStyle.Symbol;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol and conformance Date.FormatStyle.Symbol)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol and conformance Date.FormatStyle.Symbol);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.DayPeriod.Width and conformance Date.FormatStyle.Symbol.DayPeriod.Width()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod.Width and conformance Date.FormatStyle.Symbol.DayPeriod.Width;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod.Width and conformance Date.FormatStyle.Symbol.DayPeriod.Width)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.DayPeriod.Width and conformance Date.FormatStyle.Symbol.DayPeriod.Width);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.Hour.AMPMStyle and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.Hour.AMPMStyle and conformance Date.FormatStyle.Symbol.Hour.AMPMStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.HourCycle and conformance Date.FormatStyle.Symbol.VerbatimHour.HourCycle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.VerbatimHour.Clock and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.VerbatimHour.Clock and conformance Date.FormatStyle.Symbol.VerbatimHour.Clock);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.TimeZone.Width and conformance Date.FormatStyle.Symbol.TimeZone.Width()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone.Width and conformance Date.FormatStyle.Symbol.TimeZone.Width;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone.Width and conformance Date.FormatStyle.Symbol.TimeZone.Width)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.TimeZone.Width and conformance Date.FormatStyle.Symbol.TimeZone.Width);
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol()
{
  return &type metadata for Date.FormatStyle.Symbol;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Era()
{
  return &type metadata for Date.FormatStyle.Symbol.Era;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Year(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Year(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = ~(_BYTE)a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.YearForWeekOfYear(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.YearForWeekOfYear(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 10) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.YearForWeekOfYear()
{
  return &type metadata for Date.FormatStyle.Symbol.YearForWeekOfYear;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.CyclicYear()
{
  return &type metadata for Date.FormatStyle.Symbol.CyclicYear;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Quarter()
{
  return &type metadata for Date.FormatStyle.Symbol.Quarter;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Quarter(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  if (*a1 <= 5u) {
    int v6 = 5;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 6;
  if (*a1 < 5u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.Week()
{
  return &type metadata for Date.FormatStyle.Symbol.Week;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Era(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  if (*a1 <= 3u) {
    int v6 = 3;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 4;
  if (*a1 < 3u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Era(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F230C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.DayOfYear()
{
  return &type metadata for Date.FormatStyle.Symbol.DayOfYear;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Weekday(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  if (*a1 <= 6u) {
    int v6 = 6;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 7;
  if (*a1 < 6u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Weekday(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F2326CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.DayPeriod(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  if (*a1 <= 9u) {
    int v6 = 9;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 10;
  if (*a1 < 9u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Date.FormatStyle.Symbol.DayPeriod(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F23400);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.DayPeriod()
{
  return &type metadata for Date.FormatStyle.Symbol.DayPeriod;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Hour(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  if (*a1 <= 0xEu) {
    int v6 = 14;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 15;
  if (*a1 < 0xEu) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Hour(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *unint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F235A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.Minute(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  if (*a1 <= 2u) {
    int v6 = 2;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 3;
  if (*a1 < 2u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.SecondFraction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.SecondFraction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = ~(_BYTE)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SecondFraction()
{
  return &type metadata for Date.FormatStyle.Symbol.SecondFraction;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.TimeZone(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  if (*a1 <= 0xCu) {
    int v6 = 12;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 13;
  if (*a1 < 0xCu) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Date.FormatStyle.Symbol.TimeZone(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F23880);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.TimeZone()
{
  return &type metadata for Date.FormatStyle.Symbol.TimeZone;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.StandaloneQuarter()
{
  return &type metadata for Date.FormatStyle.Symbol.StandaloneQuarter;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.StandaloneMonth()
{
  return &type metadata for Date.FormatStyle.Symbol.StandaloneMonth;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.StandaloneWeekday()
{
  return &type metadata for Date.FormatStyle.Symbol.StandaloneWeekday;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour()
{
  return &type metadata for Date.FormatStyle.Symbol.VerbatimHour;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.DayPeriod.Width()
{
  return &type metadata for Date.FormatStyle.Symbol.DayPeriod.Width;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle()
{
  return &type metadata for Date.FormatStyle.Symbol.VerbatimHour.HourCycle;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.Clock()
{
  return &type metadata for Date.FormatStyle.Symbol.VerbatimHour.Clock;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.TimeZone.Width()
{
  return &type metadata for Date.FormatStyle.Symbol.TimeZone.Width;
}

unsigned char *storeEnumTagSinglePayload for Date.FormatStyle.Symbol.VerbatimHour(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F23A10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F23BD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Date.FormatStyle.Symbol.TimeZone.Width(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F23CC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.HourOption(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F23DBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.DayPeriodOption(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F23EB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Quarter(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F23FA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Date.FormatStyle.Symbol.StandaloneQuarter(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F24098);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.CyclicYearOption;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.YearOption(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol.SymbolType.YearOption(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for Date.FormatStyle.Symbol.SymbolType.YearOption(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for Date.FormatStyle.Symbol.SymbolType.YearOption(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)unint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

unsigned char *storeEnumTagSinglePayload for Date.FormatStyle.Symbol.Minute(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F24268);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Date.FormatStyle.Symbol(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x2E && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 46);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 8) >> 3) & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(a1 + 8) >> 2) & 1))) ^ 0x3F;
  if (v3 >= 0x2D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Date.FormatStyle.Symbol(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x2D)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 46;
    if (a3 >= 0x2E) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x2E) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(unsigned char *)(result + 8) = 4 * (((-a2 & 0x20) != 0) - 2 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for Date.FormatStyle.Symbol.SymbolType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8) >> 3;
}

uint64_t destructiveProjectEnumData for Date.FormatStyle.Symbol.SymbolType(uint64_t result)
{
  *(unsigned char *)(result + 8) &= 7u;
  return result;
}

uint64_t destructiveInjectEnumTag for Date.FormatStyle.Symbol.SymbolType(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = *(unsigned char *)(result + 8) & 3 | (8 * a2);
  return result;
}

ValueMetadata *type metadata accessor for Date.FormatStyle.Symbol.SymbolType()
{
  return &type metadata for Date.FormatStyle.Symbol.SymbolType;
}

void *type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys()
{
  return &unk_1ECA46648;
}

void *type metadata accessor for Date.FormatStyle.Symbol.VerbatimHour.HourCycle.CodingKeys()
{
  return &unk_1ECA46590;
}

unsigned char *storeEnumTagSinglePayload for Date.FormatStyle.Symbol.VerbatimHour.Clock.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181F24438);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Date.FormatStyle.Symbol.Hour.AMPMStyle.CodingKeys()
{
  return &unk_1ECA46A58;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType and conformance Date.FormatStyle.Symbol.SymbolType()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType and conformance Date.FormatStyle.Symbol.SymbolType;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType and conformance Date.FormatStyle.Symbol.SymbolType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType and conformance Date.FormatStyle.Symbol.SymbolType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption and conformance Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.CyclicYearOption and conformance Date.FormatStyle.Symbol.SymbolType.CyclicYearOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneQuarterOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneMonthOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption and conformance Date.FormatStyle.Symbol.SymbolType.StandaloneWeekdayOption);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption and conformance Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption);
  }
  return result;
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  swift_bridgeObjectRetain();
  Swift::String_optional v7 = String.Iterator.next()();
  uint64_t countAndFlagsBits = v7.value._countAndFlagsBits;
  if (v7.value._object)
  {
    unint64_t object = v7.value._object;
    do
    {
      if (countAndFlagsBits == a3 && object == a4)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) == 0)
        {
          uint64_t v11 = 0;
          goto LABEL_10;
        }
      }
      Swift::String_optional v10 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v10.value._countAndFlagsBits;
      unint64_t object = v10.value._object;
    }
    while (v10.value._object);
  }
  uint64_t v11 = 1;
LABEL_10:
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized Date.FormatStyle.Symbol.SymbolType.YearForWeekOfYearOption.init(rawValue:)()
{
  swift_bridgeObjectRetain();
  Swift::String_optional v1 = String.Iterator.next()();
  uint64_t countAndFlagsBits = v1.value._countAndFlagsBits;
  if (v1.value._object)
  {
    unint64_t object = v1.value._object;
    do
    {
      if (countAndFlagsBits == 89 && object == (void *)0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      Swift::String_optional v4 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
      unint64_t object = v4.value._object;
    }
    while (v4.value._object);
  }
  swift_bridgeObjectRelease();
  if (String.count.getter() == 1) {
    return 0;
  }
  if (String.count.getter() == 2) {
    return 1;
  }
  return String.count.getter();
}

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.init(rawValue:)(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xC) {
    return 12;
  }
  else {
    return v3;
  }
}

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.HourOption.init(rawValue:)(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.HourOption.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xE) {
    return 14;
  }
  else {
    return v3;
  }
}

uint64_t specialized Date.FormatStyle.Symbol.SymbolType.YearOption.init(rawValue:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = specialized Collection.first.getter(a1, a2);
  if (!v5) {
    goto LABEL_27;
  }
  uint64_t v6 = v4;
  Swift::String_optional v7 = v5;
  if (v4 == 121 && v5 == (void *)0xE100000000000000) {
    goto LABEL_18;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v10 = v6 == 114 && v7 == (void *)0xE100000000000000;
  if ((v8 & 1) == 0
    && !v10
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && ((v6 != 117 || v7 != (void *)0xE100000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
     || (specialized Sequence.allSatisfy(_:)(a1, a2, v6, v7) & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_27:
    uint64_t v11 = 0;
    goto LABEL_28;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (!v10) {
      _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  if (String.count.getter() != 1)
  {
    if (String.count.getter() == 2)
    {
      uint64_t v11 = 1;
      goto LABEL_28;
    }
LABEL_25:
    uint64_t v11 = String.count.getter();
    goto LABEL_28;
  }
  uint64_t v11 = 0;
LABEL_28:
  swift_bridgeObjectRelease();
  return v11;
}

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.WeekdayOption.init(rawValue:)(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.WeekdayOption.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.DayPeriodOption.init(rawValue:)(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.DayPeriodOption.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption.init(rawValue:)(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Date.FormatStyle.Symbol.SymbolType.VerbatimHourOption.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t specialized Date.FormatStyle.Symbol.SymbolType.SecondFractionOption.init(rawValue:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = specialized Collection.first.getter(a1, a2);
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v6 = v4;
  Swift::String_optional v7 = v5;
  if ((specialized Sequence.allSatisfy(_:)(a1, a2, v4, v5) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  if ((v6 != 83 || v7 != (void *)0xE100000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v6 == 65 && v7 == (void *)0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_14:
      uint64_t v8 = String.count.getter();
      goto LABEL_9;
    }
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_14;
    }
LABEL_8:
    uint64_t v8 = 0;
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = String.count.getter();
LABEL_9:
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t specialized Date.FormatStyle.Symbol.SymbolType.MonthOption.init(rawValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  unint64_t object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._unint64_t object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 5) {
    return 5;
  }
  else {
    return v5;
  }
}

uint64_t specialized Date.FormatStyle.Symbol.SymbolType.DayOption.init(rawValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 100 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25700 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 70 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    swift_bridgeObjectRetain();
    Swift::String_optional v7 = String.Iterator.next()();
    uint64_t countAndFlagsBits = v7.value._countAndFlagsBits;
    if (v7.value._object)
    {
      unint64_t object = v7.value._object;
      do
      {
        if (countAndFlagsBits == 103 && object == (void *)0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v9 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return 0;
          }
        }
        Swift::String_optional v10 = String.Iterator.next()();
        uint64_t countAndFlagsBits = v10.value._countAndFlagsBits;
        unint64_t object = v10.value._object;
      }
      while (v10.value._object);
    }
    swift_bridgeObjectRelease();
    uint64_t v4 = String.count.getter();
    swift_bridgeObjectRelease();
  }
  return v4;
}

void *specialized Collection<>.indices.getter@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  unint64_t v5 = result[8];
  if (v5) {
    uint64_t v6 = result[10];
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 < 0 || v6 < a2) {
    goto LABEL_112;
  }
  uint64_t v8 = a3;
  unint64_t v9 = (unint64_t)result;
  uint64_t v10 = result[11];
  uint64_t v54 = result[9];
  if (v5)
  {
    if (result[10] > a2 && *(_WORD *)(v5 + 16) != 0)
    {
      uint64_t v53 = result[10];
      uint64_t v51 = result[11];
      uint64_t v30 = *(unsigned __int8 *)(v5 + 18);
      if (*(unsigned char *)(v5 + 18))
      {
        swift_unknownObjectRetain_n();
        unint64_t result = (void *)swift_retain();
        uint64_t v14 = a2;
        unint64_t v31 = v5;
        while (1)
        {
          uint64_t v33 = *(unsigned __int16 *)(v31 + 16);
          if (!*(_WORD *)(v31 + 16)) {
            goto LABEL_42;
          }
          uint64_t v34 = *(void *)(v31 + 40);
          BOOL v23 = __OFSUB__(v14, v34);
          uint64_t v35 = v14 - v34;
          if (v23) {
            goto LABEL_107;
          }
          if (__OFADD__(v35, 1)) {
            goto LABEL_108;
          }
          if (v35 + 1 < 1)
          {
            uint64_t v33 = 0;
            goto LABEL_43;
          }
          if (v33 == 1) {
            break;
          }
          uint64_t v36 = (uint64_t *)(v31 + 64);
          uint64_t v37 = 1;
          while (1)
          {
            uint64_t v38 = *v36;
            v36 += 3;
            uint64_t v14 = v35 - v38;
            if (__OFSUB__(v35, v38))
            {
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
              goto LABEL_106;
            }
            if (__OFADD__(v14, 1)) {
              goto LABEL_103;
            }
            if (v14 + 1 < 1) {
              break;
            }
            ++v37;
            uint64_t v35 = v14;
            if (v33 == v37) {
              goto LABEL_42;
            }
          }
          uint64_t v33 = v37;
          uint64_t v14 = v35;
LABEL_43:
          char v32 = (4 * *(unsigned char *)(v31 + 18) + 8) & 0x3C;
          uint64_t v30 = ((-15 << v32) - 1) & v30 | (v33 << v32);
          uint64_t v13 = *(void *)(v31 + 24 + 24 * v33);
          swift_unknownObjectRetain();
          unint64_t result = (void *)swift_unknownObjectRelease();
          unint64_t v31 = v13;
          if (!*(unsigned char *)(v13 + 18)) {
            goto LABEL_61;
          }
        }
        uint64_t v14 = v35;
LABEL_42:
        if (!v14) {
          goto LABEL_43;
        }
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
        goto LABEL_115;
      }
      swift_unknownObjectRetain_n();
      unint64_t result = (void *)swift_retain();
      uint64_t v14 = a2;
      uint64_t v13 = v5;
LABEL_61:
      uint64_t v39 = *(unsigned __int16 *)(v13 + 16);
      if (*(_WORD *)(v13 + 16))
      {
        uint64_t v40 = *(void *)(v13 + 24);
        BOOL v23 = __OFSUB__(v14, v40);
        uint64_t v41 = v14 - v40;
        if (v23) {
          goto LABEL_120;
        }
        if (__OFADD__(v41, 1))
        {
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
          goto LABEL_123;
        }
        if (v41 + 1 < 1)
        {
          uint64_t v39 = 0;
LABEL_86:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v12 = v30 & 0xFFFFFFFFFFFFF0FFLL | (v39 << 8);
          uint64_t v10 = v51;
          uint64_t v8 = a3;
          goto LABEL_13;
        }
        if (v39 != 1)
        {
          uint64_t v46 = (uint64_t *)(v13 + 48);
          uint64_t v47 = 1;
          while (1)
          {
            uint64_t v48 = *v46;
            v46 += 3;
            uint64_t v14 = v41 - v48;
            if (__OFSUB__(v41, v48)) {
              goto LABEL_113;
            }
            if (__OFADD__(v14, 1)) {
              goto LABEL_114;
            }
            if (v14 + 1 < 1) {
              break;
            }
            ++v47;
            uint64_t v41 = v14;
            if (v39 == v47) {
              goto LABEL_85;
            }
          }
          uint64_t v39 = v47;
          uint64_t v14 = v41;
          goto LABEL_86;
        }
        uint64_t v14 = v41;
      }
LABEL_85:
      if (v14) {
        goto LABEL_118;
      }
      goto LABEL_86;
    }
  }
  swift_unknownObjectRetain_n();
  swift_retain();
  unint64_t v12 = specialized Rope._endPath.getter(v5);
  unint64_t result = (void *)swift_unknownObjectRelease();
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (!v5)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a2;
    goto LABEL_14;
  }
LABEL_13:
  swift_unknownObjectRetain();
  uint64_t v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v12, v13, v5, v54);
  unint64_t result = (void *)swift_unknownObjectRelease_n();
  uint64_t v16 = a2 - v14;
  if (__OFSUB__(a2, v14))
  {
    __break(1u);
    goto LABEL_89;
  }
LABEL_14:
  a4[3] = v10;
  a4[4] = v12;
  a4[5] = v13;
  a4[6] = v15;
  a4[7] = v16;
  uint64_t v15 = *(void *)(v9 + 64);
  uint64_t v17 = *(void *)(v9 + 72);
  uint64_t v18 = *(void *)(v9 + 80);
  unint64_t v9 = *(void *)(v9 + 88);
  if (a2 != v8)
  {
    unint64_t v28 = swift_unknownObjectRetain();
    unint64_t result = (void *)specialized Rope._endPath.getter(v28);
    unint64_t v29 = (unint64_t)result;
    if (v15)
    {
      unint64_t result = (void *)swift_unknownObjectRelease();
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
    }
LABEL_72:
    a4[8] = v9;
    a4[9] = v29;
    a4[10] = v8;
    a4[11] = v17;
    a4[12] = v18;
    return result;
  }
  if (!v15)
  {
    if (a2 > 0) {
      goto LABEL_119;
    }
LABEL_70:
    swift_unknownObjectRetain_n();
    unint64_t v29 = specialized Rope._endPath.getter(v15);
    unint64_t result = (void *)swift_unknownObjectRelease();
    uint64_t v8 = 0;
    uint64_t v13 = 0;
    if (!v15) {
      goto LABEL_98;
    }
    goto LABEL_71;
  }
  if (v18 < a2) {
    goto LABEL_117;
  }
  if (!*(_WORD *)(v15 + 16) || v18 <= a2) {
    goto LABEL_70;
  }
  uint64_t v53 = v17;
  uint64_t v54 = v9;
  uint64_t v19 = *(unsigned __int8 *)(v15 + 18);
  if (!*(unsigned char *)(v15 + 18))
  {
    unint64_t result = (void *)swift_unknownObjectRetain_n();
    unint64_t v9 = 0;
    uint64_t v13 = a2;
    uint64_t v8 = v15;
    uint64_t v42 = *(unsigned __int16 *)(v15 + 16);
    if (*(_WORD *)(v15 + 16)) {
      goto LABEL_75;
    }
LABEL_96:
    if (!v13)
    {
      while (1)
      {
LABEL_97:
        swift_unknownObjectRelease();
        unint64_t result = (void *)swift_unknownObjectRelease();
        unint64_t v29 = v9 | (v42 << 8);
        uint64_t v17 = v53;
        unint64_t v9 = v54;
        if (v15)
        {
LABEL_71:
          swift_unknownObjectRetain();
          uint64_t v17 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v29, v8, v15, v17);
          unint64_t result = (void *)swift_unknownObjectRelease_n();
          uint64_t v18 = a2 - v13;
          if (!__OFSUB__(a2, v13)) {
            goto LABEL_72;
          }
        }
        else
        {
LABEL_98:
          uint64_t v17 = 0;
          uint64_t v18 = a2 - v13;
          if (!__OFSUB__(a2, v13)) {
            goto LABEL_72;
          }
        }
        __break(1u);
LABEL_101:
        uint64_t v42 = v44;
        uint64_t v13 = v43;
      }
    }
    goto LABEL_124;
  }
  unint64_t result = (void *)swift_unknownObjectRetain_n();
  uint64_t v13 = a2;
  uint64_t v8 = v15;
  do
  {
    uint64_t v21 = *(unsigned __int16 *)(v8 + 16);
    if (*(_WORD *)(v8 + 16))
    {
      uint64_t v22 = *(void *)(v8 + 40);
      BOOL v23 = __OFSUB__(v13, v22);
      uint64_t v24 = v13 - v22;
      if (v23) {
        goto LABEL_110;
      }
      if (__OFADD__(v24, 1)) {
        goto LABEL_111;
      }
      if (v24 + 1 < 1)
      {
        uint64_t v21 = 0;
        goto LABEL_23;
      }
      if (v21 != 1)
      {
        int v25 = (uint64_t *)(v8 + 64);
        uint64_t v26 = 1;
        while (1)
        {
          uint64_t v27 = *v25;
          v25 += 3;
          uint64_t v13 = v24 - v27;
          if (__OFSUB__(v24, v27)) {
            goto LABEL_104;
          }
          if (__OFADD__(v13, 1)) {
            goto LABEL_105;
          }
          if (v13 + 1 < 1) {
            break;
          }
          ++v26;
          uint64_t v24 = v13;
          if (v21 == v26) {
            goto LABEL_22;
          }
        }
        uint64_t v21 = v26;
        uint64_t v13 = v24;
        goto LABEL_23;
      }
      uint64_t v13 = v24;
    }
LABEL_22:
    if (v13) {
      goto LABEL_109;
    }
LABEL_23:
    char v20 = (4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C;
    uint64_t v19 = ((-15 << v20) - 1) & v19 | (v21 << v20);
    uint64_t v8 = *(void *)(v8 + 24 + 24 * v21);
    swift_unknownObjectRetain();
    unint64_t result = (void *)swift_unknownObjectRelease();
  }
  while (*(unsigned char *)(v8 + 18));
  unint64_t v9 = v19 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v42 = *(unsigned __int16 *)(v8 + 16);
  if (!*(_WORD *)(v8 + 16)) {
    goto LABEL_96;
  }
LABEL_75:
  uint64_t v45 = *(void *)(v8 + 24);
  BOOL v23 = __OFSUB__(v13, v45);
  uint64_t v43 = v13 - v45;
  if (v23) {
    goto LABEL_122;
  }
  if (!__OFADD__(v43, 1))
  {
    if (v43 + 1 >= 1)
    {
      if (v42 == 1)
      {
        uint64_t v13 = v43;
        goto LABEL_96;
      }
      uint64_t v49 = (uint64_t *)(v8 + 48);
      uint64_t v44 = 1;
      while (1)
      {
        uint64_t v50 = *v49;
        v49 += 3;
        uint64_t v13 = v43 - v50;
        if (__OFSUB__(v43, v50)) {
          break;
        }
        if (__OFADD__(v13, 1)) {
          goto LABEL_116;
        }
        if (v13 + 1 < 1) {
          goto LABEL_101;
        }
        ++v44;
        uint64_t v43 = v13;
        if (v42 == v44) {
          goto LABEL_96;
        }
      }
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }
LABEL_89:
    uint64_t v42 = 0;
    goto LABEL_97;
  }
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.indices.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  if (a1)
  {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 18);
    swift_unknownObjectRetain();
    uint64_t v10 = a2;
    uint64_t v11 = a3;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v9 = 0;
  }
  a5[4] = a4;
  a5[5] = v9;
  a5[7] = 0;
  a5[8] = 0;
  a5[6] = 0;
  unint64_t v12 = swift_unknownObjectRetain();
  unint64_t v13 = specialized Rope._endPath.getter(v12);
  uint64_t result = swift_unknownObjectRelease();
  a5[9] = a4;
  a5[10] = v13;
  a5[11] = 0;
  a5[12] = v10;
  a5[13] = v11;
  return result;
}

uint64_t specialized Collection<>.indices.getter@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[5];
  *(_OWORD *)(a1 + 64) = v1[4];
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v1[6];
  long long v4 = v1[1];
  *(_OWORD *)a1 = *v1;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = v1[3];
  *(_OWORD *)(a1 + 32) = v1[2];
  *(_OWORD *)(a1 + 48) = v5;
  outlined retain of Locale((uint64_t)v1);
  uint64_t v6 = BigString.Index.utf8Offset.getter();
  if (v6 < 0 || (*(void *)(a1 + 112) = (v6 << 16) | 4, uint64_t result = BigString.Index.utf8Offset.getter(), result < 0))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 120) = (result << 16) | 4;
  }
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6 = a2[8];
  if (v6) {
    uint64_t v7 = a2[10];
  }
  else {
    uint64_t v7 = 0;
  }
  if (a3 < 0) {
    goto LABEL_120;
  }
  uint64_t v8 = a3;
  if (v7 < a3) {
    goto LABEL_120;
  }
  uint64_t v9 = a4;
  uint64_t v11 = result;
  uint64_t v12 = a2[9];
  uint64_t v60 = a2[11];
  if (v6)
  {
    if (a2[10] > a3 && *(_WORD *)(v6 + 16) != 0)
    {
      uint64_t v58 = a3;
      uint64_t v59 = a2[9];
      uint64_t v56 = a4;
      uint64_t v57 = result;
      uint64_t v18 = *(unsigned __int8 *)(v6 + 18);
      if (*(unsigned char *)(v6 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v16 = v58;
        unint64_t v19 = v6;
        while (1)
        {
          uint64_t v21 = *(unsigned __int16 *)(v19 + 16);
          if (!*(_WORD *)(v19 + 16)) {
            goto LABEL_17;
          }
          uint64_t v22 = *(void *)(v19 + 40);
          BOOL v23 = __OFSUB__(v16, v22);
          uint64_t v24 = v16 - v22;
          if (v23) {
            goto LABEL_115;
          }
          if (__OFADD__(v24, 1))
          {
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
            goto LABEL_122;
          }
          if (v24 + 1 >= 1) {
            break;
          }
          uint64_t v21 = 0;
LABEL_18:
          char v20 = (4 * *(unsigned char *)(v19 + 18) + 8) & 0x3C;
          uint64_t v18 = ((-15 << v20) - 1) & v18 | (v21 << v20);
          uint64_t v17 = *(void *)(v19 + 24 + 24 * v21);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          unint64_t v19 = v17;
          if (!*(unsigned char *)(v17 + 18)) {
            goto LABEL_33;
          }
        }
        if (v21 != 1)
        {
          int v25 = (uint64_t *)(v19 + 64);
          uint64_t v26 = 1;
          while (1)
          {
            uint64_t v27 = *v25;
            v25 += 3;
            uint64_t v16 = v24 - v27;
            if (__OFSUB__(v24, v27))
            {
              __break(1u);
LABEL_111:
              __break(1u);
              goto LABEL_112;
            }
            if (__OFADD__(v16, 1)) {
              goto LABEL_111;
            }
            if (v16 + 1 < 1) {
              break;
            }
            ++v26;
            uint64_t v24 = v16;
            if (v21 == v26) {
              goto LABEL_17;
            }
          }
          uint64_t v21 = v26;
          uint64_t v16 = v24;
          goto LABEL_18;
        }
        uint64_t v16 = v24;
LABEL_17:
        if (v16) {
          goto LABEL_114;
        }
        goto LABEL_18;
      }
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v16 = v58;
      uint64_t v17 = v6;
LABEL_33:
      uint64_t v28 = *(unsigned __int16 *)(v17 + 16);
      if (*(_WORD *)(v17 + 16))
      {
        uint64_t v29 = *(void *)(v17 + 24);
        BOOL v23 = __OFSUB__(v16, v29);
        uint64_t v30 = v16 - v29;
        uint64_t v9 = v56;
        if (v23)
        {
LABEL_131:
          __break(1u);
          goto LABEL_132;
        }
        if (__OFADD__(v30, 1))
        {
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }
        if (v30 + 1 < 1)
        {
          uint64_t v28 = 0;
        }
        else
        {
          if (v28 == 1)
          {
            uint64_t v16 = v30;
            goto LABEL_46;
          }
          unint64_t v31 = (uint64_t *)(v17 + 48);
          uint64_t v32 = 1;
          while (1)
          {
            uint64_t v33 = *v31;
            v31 += 3;
            uint64_t v16 = v30 - v33;
            if (__OFSUB__(v30, v33)) {
              goto LABEL_124;
            }
            if (__OFADD__(v16, 1)) {
              goto LABEL_125;
            }
            if (v16 + 1 < 1) {
              break;
            }
            ++v32;
            uint64_t v30 = v16;
            if (v28 == v32) {
              goto LABEL_46;
            }
          }
          uint64_t v28 = v32;
          uint64_t v16 = v30;
        }
LABEL_47:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v15 = v18 & 0xFFFFFFFFFFFFF0FFLL | (v28 << 8);
        uint64_t v11 = v57;
        uint64_t v8 = v58;
        goto LABEL_48;
      }
      uint64_t v9 = v56;
LABEL_46:
      if (v16)
      {
LABEL_130:
        __break(1u);
        goto LABEL_131;
      }
      goto LABEL_47;
    }
  }
  unint64_t v14 = swift_unknownObjectRetain_n();
  unint64_t v15 = specialized Rope._endPath.getter(v14);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v16 = 0;
  if (!v6) {
    goto LABEL_49;
  }
  uint64_t v59 = v12;
  uint64_t v17 = 0;
LABEL_48:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v60, v15, v17, v6, v59);
  uint64_t result = swift_unknownObjectRelease_n();
LABEL_49:
  uint64_t v34 = v8 - v16;
  if (__OFSUB__(v8, v16))
  {
    __break(1u);
LABEL_79:
    unint64_t v44 = v8 & 0xFFFFFFFFFFFFF0FFLL;
    uint64_t v9 = v56;
    uint64_t v8 = v58;
    uint64_t v45 = *(unsigned __int16 *)(v34 + 16);
    if (*(_WORD *)(v34 + 16)) {
      goto LABEL_84;
    }
LABEL_96:
    if (v15)
    {
LABEL_136:
      __break(1u);
      return result;
    }
    goto LABEL_97;
  }
  unint64_t v6 = a2[8];
  uint64_t v35 = a2[10];
  if (v8 != v9)
  {
    unint64_t v43 = swift_unknownObjectRetain();
    uint64_t result = specialized Rope._endPath.getter(v43);
    if (v6) {
      uint64_t result = swift_unknownObjectRelease();
    }
    else {
      uint64_t v35 = 0;
    }
    goto LABEL_102;
  }
  uint64_t v59 = a2[9];
  uint64_t v60 = a2[11];
  if (!v6)
  {
    if (v8 > 0)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
LABEL_81:
    swift_unknownObjectRetain_n();
    unint64_t v46 = specialized Rope._endPath.getter(v6);
    uint64_t result = swift_unknownObjectRelease();
    unint64_t v15 = 0;
    if (!v6) {
      goto LABEL_101;
    }
    uint64_t v55 = v34;
    uint64_t v34 = 0;
    goto LABEL_99;
  }
  if (v35 < v8)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  if (!*(_WORD *)(v6 + 16) || v35 <= v8) {
    goto LABEL_81;
  }
  uint64_t v55 = v34;
  uint64_t v57 = v11;
  uint64_t v58 = v8;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 18);
  if (*(unsigned char *)(v6 + 18))
  {
    uint64_t v56 = v9;
    uint64_t result = swift_unknownObjectRetain_n();
    unint64_t v15 = v58;
    uint64_t v34 = v6;
    while (1)
    {
      uint64_t v37 = *(unsigned __int16 *)(v34 + 16);
      if (!*(_WORD *)(v34 + 16)) {
        goto LABEL_58;
      }
      uint64_t v38 = *(void *)(v34 + 40);
      BOOL v23 = __OFSUB__(v15, v38);
      unint64_t v39 = v15 - v38;
      if (v23) {
        goto LABEL_118;
      }
      if (__OFADD__(v39, 1)) {
        goto LABEL_119;
      }
      if ((uint64_t)(v39 + 1) >= 1) {
        break;
      }
      uint64_t v37 = 0;
LABEL_59:
      char v36 = (4 * *(unsigned char *)(v34 + 18) + 8) & 0x3C;
      uint64_t v8 = ((-15 << v36) - 1) & v8 | (v37 << v36);
      uint64_t v34 = *(void *)(v34 + 24 + 24 * v37);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      if (!*(unsigned char *)(v34 + 18)) {
        goto LABEL_79;
      }
    }
    if (v37 != 1)
    {
      uint64_t v40 = (uint64_t *)(v34 + 64);
      uint64_t v41 = 1;
      while (1)
      {
        uint64_t v42 = *v40;
        v40 += 3;
        unint64_t v15 = v39 - v42;
        if (__OFSUB__(v39, v42)) {
          break;
        }
        if (__OFADD__(v15, 1)) {
          goto LABEL_113;
        }
        if ((uint64_t)(v15 + 1) < 1)
        {
          uint64_t v37 = v41;
          unint64_t v15 = v39;
          goto LABEL_59;
        }
        ++v41;
        unint64_t v39 = v15;
        if (v37 == v41) {
          goto LABEL_58;
        }
      }
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
      goto LABEL_116;
    }
    unint64_t v15 = v39;
LABEL_58:
    if (v15) {
      goto LABEL_117;
    }
    goto LABEL_59;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  unint64_t v44 = 0;
  uint64_t v8 = v58;
  unint64_t v15 = v58;
  uint64_t v34 = v6;
  uint64_t v45 = *(unsigned __int16 *)(v6 + 16);
  if (!*(_WORD *)(v6 + 16)) {
    goto LABEL_96;
  }
LABEL_84:
  uint64_t v47 = *(void *)(v34 + 24);
  BOOL v23 = __OFSUB__(v15, v47);
  unint64_t v48 = v15 - v47;
  if (v23)
  {
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
  if (__OFADD__(v48, 1))
  {
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }
  if ((uint64_t)(v48 + 1) >= 1)
  {
    if (v45 != 1)
    {
      uint64_t v49 = (uint64_t *)(v34 + 48);
      uint64_t v50 = 1;
      while (1)
      {
        uint64_t v51 = *v49;
        v49 += 3;
        unint64_t v15 = v48 - v51;
        if (__OFSUB__(v48, v51)) {
          goto LABEL_127;
        }
        if (__OFADD__(v15, 1)) {
          goto LABEL_128;
        }
        if ((uint64_t)(v15 + 1) < 1)
        {
          uint64_t v45 = v50;
          unint64_t v15 = v48;
          goto LABEL_97;
        }
        ++v50;
        unint64_t v48 = v15;
        if (v45 == v50) {
          goto LABEL_96;
        }
      }
    }
    unint64_t v15 = v48;
    goto LABEL_96;
  }
  uint64_t v45 = 0;
LABEL_97:
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  if (!v6)
  {
    uint64_t v11 = v57;
    goto LABEL_100;
  }
  unint64_t v46 = v44 | (v45 << 8);
  uint64_t v11 = v57;
LABEL_99:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v60, v46, v34, v6, v59);
  uint64_t result = swift_unknownObjectRelease_n();
LABEL_100:
  uint64_t v34 = v55;
LABEL_101:
  uint64_t v35 = v8 - v15;
  if (__OFSUB__(v8, v15))
  {
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }
LABEL_102:
  if (v35 < v34) {
    goto LABEL_121;
  }
  uint64_t v52 = *(void *)(v11 + 32);
  if (v52 < v34)
  {
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
  uint64_t v53 = *(void *)(v11 + 72);
  if (v35 < v53) {
    goto LABEL_123;
  }
  *(void *)(a5 + 88) = v8;
  *(void *)(a5 + 96) = v9;
  long long v54 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)a5 = *(_OWORD *)v11;
  *(_OWORD *)(a5 + 16) = v54;
  *(void *)(a5 + 32) = v52;
  *(_OWORD *)(a5 + 40) = *(_OWORD *)(v11 + 40);
  *(_OWORD *)(a5 + 56) = *(_OWORD *)(v11 + 56);
  *(void *)(a5 + 72) = v53;
  *(void *)(a5 + 80) = a2;

  return swift_retain();
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (a2) {
    uint64_t v12 = a4;
  }
  else {
    uint64_t v12 = 0;
  }
  swift_unknownObjectRetain();
  specialized Rope._endPath.getter(a2);
  uint64_t result = swift_unknownObjectRelease();
  if (v12 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v14 = *(void *)(a1 + 32);
  if (v14 < 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v15 = *(void *)(a1 + 72);
  if (v12 < v15)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  *(void *)(a6 + 88) = a3;
  *(void *)(a6 + 96) = a4;
  *(void *)(a6 + 104) = a5;
  long long v16 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a6 = *(_OWORD *)a1;
  *(_OWORD *)(a6 + 16) = v16;
  *(void *)(a6 + 32) = v14;
  *(_OWORD *)(a6 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a6 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a6 + 72) = v15;
  *(void *)(a6 + 80) = a2;

  return swift_unknownObjectRetain();
}

uint64_t specialized Collection<>.subscript.getter@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = BigString.Index.utf8Offset.getter();
  if (v7 < 0) {
    goto LABEL_12;
  }
  uint64_t v8 = v7;
  uint64_t v9 = BigString.Index.utf8Offset.getter();
  if (v9 < 0) {
    goto LABEL_12;
  }
  unint64_t v10 = 4 * (v9 & 0xFFFFFFFFFFFFLL);
  unint64_t v11 = 4 * (v8 & 0xFFFFFFFFFFFFLL);
  if (v10 < v11)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v11 > a1 >> 14)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v10 < a2 >> 14)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  long long v12 = v3[5];
  *(_OWORD *)(a3 + 80) = v3[4];
  *(_OWORD *)(a3 + 96) = v12;
  *(_OWORD *)(a3 + 112) = v3[6];
  long long v13 = v3[1];
  *(_OWORD *)(a3 + 16) = *v3;
  *(_OWORD *)(a3 + 32) = v13;
  long long v14 = v3[3];
  *(_OWORD *)(a3 + 48) = v3[2];
  *(_OWORD *)(a3 + 64) = v14;
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;

  return outlined retain of Locale((uint64_t)v3);
}

uint64_t Range<>.init<A, B>(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, ValueMetadata *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  void (*v35)(unint64_t *__return_ptr, ValueMetadata *);
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void (**v44)(char *, void, ValueMetadata *);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (**v58)(char *, void, ValueMetadata *);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  long long v63;
  uint64_t v64;
  uint64_t v65;
  long long v66;
  long long v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;

  unint64_t v62 = a6;
  Description = (void (**)(char *, void, ValueMetadata *))a4[-1].Description;
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 - 8);
  double v19 = MEMORY[0x1F4188790](v18);
  (*(void (**)(char *, uint64_t, double))(v17 + 16))((char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<String.Index>);
  if (swift_dynamicCast())
  {
    long long v21 = v63;
    Description[2](v15, a2, a4);
    Range<>.init<A>(_range:in:)(v21, *((unint64_t *)&v21 + 1), (uint64_t)v15, a4, v62, (uint64_t)&v63);
    ((void (*)(uint64_t, ValueMetadata *))Description[1])(a2, a4);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a3);
    uint64_t v23 = v65;
    if (v65 != 2)
    {
      long long v25 = v66;
      long long v24 = v67;
      uint64_t v26 = v64;
      long long v27 = v63;
LABEL_9:
      *(_OWORD *)a7 = v27;
      *(void *)(a7 + 16) = v26;
      *(void *)(a7 + 24) = v23;
      *(_OWORD *)(a7 + 32) = v25;
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t v56 = a5;
  uint64_t v57 = a3;
  uint64_t v55 = v17;
  uint64_t v49 = v15;
  uint64_t v58 = Description;
  uint64_t v60 = a1;
  uint64_t v61 = a7;
  uint64_t v28 = v62;
  uint64_t v29 = (void *)AttributedStringProtocol.__guts.getter(a4, v62);
  uint64_t v30 = v29[2];
  long long v54 = v29[3];
  uint64_t v53 = v29[4];
  uint64_t v52 = v29[5];
  uint64_t v51 = v29[6];
  uint64_t v50 = v29[7];
  unint64_t v48 = v30;
  swift_unknownObjectRetain();
  swift_release();
  (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t))(v28 + 32))(&v63, a4, v28);
  long long v31 = v63;
  uint64_t v32 = v28;
  uint64_t v34 = v64;
  uint64_t v33 = v65;
  uint64_t v35 = *(void (**)(unint64_t *__return_ptr, ValueMetadata *))(v32 + 40);
  uint64_t v59 = a2;
  v35(&v74, a4);
  char v36 = v74;
  uint64_t v37 = v75;
  unint64_t v39 = v76;
  uint64_t v38 = v77;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *(void *)&uint64_t v63 = v48;
    *((void *)&v63 + 1) = v54;
    char v64 = v53;
    uint64_t v65 = v52;
    *(void *)&unint64_t v66 = v51;
    *((void *)&v66 + 1) = v50;
    uint64_t v67 = v31;
    uint64_t v68 = v34;
    uint64_t v69 = v33;
    unint64_t v70 = v36;
    unint64_t v71 = v37;
    unint64_t v72 = v39;
    unint64_t v73 = v38;
    lazy protocol witness table accessor for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString();
    uint64_t v40 = v60;
    uint64_t v41 = v57;
    dispatch thunk of RangeExpression.relative<A>(to:)();
    uint64_t v42 = v74;
    unint64_t v43 = v75;
    unint64_t v44 = v58;
    uint64_t v45 = (uint64_t)v49;
    unint64_t v46 = v59;
    v58[2](v49, v59, a4);
    Range<>.init<A>(_range:in:)(v42, v43, v45, a4, v62, (uint64_t)&v63);
    swift_unknownObjectRelease();
    ((void (*)(uint64_t, ValueMetadata *))v44[1])(v46, a4);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(v40, v41);
    uint64_t v23 = v65;
    if (v65 != 2)
    {
      long long v25 = v66;
      long long v24 = v67;
      uint64_t v26 = v64;
      long long v27 = v63;
      a7 = v61;
      goto LABEL_9;
    }
    a7 = v61;
LABEL_7:
    *(void *)a7 = 0;
    *(void *)(a7 + 8) = 0;
    *(void *)(a7 + 16) = 0;
    *(void *)(a7 + 24) = 2;
    long long v24 = 0uLL;
    *(_OWORD *)(a7 + 32) = 0u;
LABEL_10:
    *(_OWORD *)(a7 + 48) = v24;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t String.init(_:)(_OWORD *a1)
{
  long long v1 = a1[3];
  long long v46 = a1[2];
  long long v47 = v1;
  long long v2 = a1[8];
  long long v3 = a1[6];
  long long v51 = a1[7];
  long long v52 = v2;
  long long v4 = a1[5];
  long long v48 = a1[4];
  long long v49 = v4;
  long long v50 = v3;
  long long v5 = a1[1];
  v45[0] = *a1;
  v45[1] = v5;
  long long v38 = v45[0];
  long long v39 = v5;
  long long v40 = v46;
  long long v41 = v47;
  unint64_t v6 = (_OWORD *)v48;
  long long v7 = *(_OWORD *)(v48 + 16);
  long long v8 = *(_OWORD *)(v48 + 48);
  v42[1] = *(_OWORD *)(v48 + 32);
  v42[2] = v8;
  v42[0] = v7;
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v45);
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v45);
  outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v45);
  outlined retain of Locale((uint64_t)v42);
  BigString.subscript.getter();
  outlined release of Locale((uint64_t)v42);
  uint64_t v9 = BigSubstring.startIndex.getter();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v16 = BigSubstring.endIndex.getter();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  outlined release of Locale((uint64_t)&v25);
  outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v45);
  outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v45);
  uint64_t v30 = v9;
  uint64_t v31 = v11;
  uint64_t v32 = v13;
  uint64_t v33 = v15;
  uint64_t v34 = v16;
  uint64_t v35 = v18;
  uint64_t v36 = v20;
  uint64_t v37 = v22;
  long long v23 = v6[2];
  long long v27 = v6[1];
  long long v28 = v23;
  long long v29 = v6[3];
  v43[1] = v23;
  v43[2] = v29;
  v43[0] = v27;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v43, (uint64_t)v44);
  outlined retain of Locale((uint64_t)v44);
  BigSubstring.init(_unchecked:in:)();
  outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v45);
  outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v45);
  return MEMORY[0x185302040](v26);
}

uint64_t Range<>.init<A>(_:in:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v8 = (char *)&v18 - v12;
  unint64_t v9 = *((void *)a1 + 4);
  char v10 = a1[64];
  uint64_t v11 = *((void *)a1 + 9);
  LOBYTE(v12) = a1[104];
  if (v10 & 1) != 0 || (a1[104])
  {
LABEL_6:
    uint64_t v15 = *((void *)a1 + 12);
    uint64_t v16 = *((void *)a1 + 7);
    long long v17 = *((_OWORD *)a1 + 1);
    v24[0] = *(_OWORD *)a1;
    v24[1] = v17;
    unint64_t v25 = v9;
    long long v26 = *(_OWORD *)(a1 + 40);
    uint64_t v27 = v16;
    char v28 = v10;
    uint64_t v29 = v11;
    long long v30 = *((_OWORD *)a1 + 5);
    uint64_t v31 = v15;
    char v32 = v12;
    AttributedString.MarkdownSourcePosition.calculateOffsets<A>(within:)(a2, a3, v33);
    outlined init with take of LocalePreferences?((uint64_t)v33, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for (start: AttributedString.MarkdownSourcePosition.Offsets, end: AttributedString.MarkdownSourcePosition.Offsets)?);
    if (v28 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
      return 0;
    }
    unint64_t v19 = v25;
    dispatch thunk of StringProtocol.utf8.getter();
    dispatch thunk of Collection.startIndex.getter();
    unint64_t v21 = v22;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of Collection.index(_:offsetBy:)();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    v18(v8, AssociatedTypeWitness);
    unint64_t v9 = v23;
    dispatch thunk of StringProtocol.utf8.getter();
    uint64_t result = dispatch thunk of Collection.startIndex.getter();
    unint64_t v20 = v21;
    if (!__OFADD__(v19, 1))
    {
      dispatch thunk of Collection.index(_:offsetBy:)();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v8, AssociatedTypeWitness);
      if (v22 >> 14 >= v9 >> 14) {
        return v9;
      }
LABEL_14:
      __break(1u);
      return result;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v19 = *((void *)a1 + 9);
  dispatch thunk of StringProtocol.utf8.getter();
  dispatch thunk of Collection.startIndex.getter();
  unint64_t v23 = v33[0];
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Collection.index(_:offsetBy:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v7 + 8);
  v7 += 8;
  uint64_t v18 = v13;
  v13(v8, AssociatedTypeWitness);
  unint64_t v9 = *(void *)&v24[0];
  dispatch thunk of StringProtocol.utf8.getter();
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  unint64_t v22 = v23;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
    goto LABEL_13;
  }
  a1 = v8;
  dispatch thunk of Collection.index(_:offsetBy:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
  v18(v8, AssociatedTypeWitness);
  uint64_t v12 = v33[0] >> 14;
  if (v33[0] >> 14 < v9 >> 14)
  {
    __break(1u);
    goto LABEL_6;
  }
  return v9;
}

uint64_t protocol witness for static ObjectiveCConvertibleAttributedStringKey.objectiveCValue(for:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute()
{
  uint64_t v0 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t static ObjectiveCConvertibleAttributedStringKey<>.objectiveCValue(for:)()
{
  swift_getAssociatedTypeWitness();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v0 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static ObjectiveCConvertibleAttributedStringKey.value(for:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return specialized static ObjectiveCConvertibleAttributedStringKey<>.value(for:)(a1, a2);
}

uint64_t specialized static ObjectiveCConvertibleAttributedStringKey<>.value(for:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  v16._uint64_t countAndFlagsBits = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t result = AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component.init(rawValue:)(v16, &v15);
  char v4 = v15;
  if (v15 != 7) {
    goto LABEL_8;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v5 = objc_allocWithZone((Class)NSError);
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v5, sel_initWithDomain_code_userInfo_, v6, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v8 = objc_msgSend(v7, sel_domain);
  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    a2 = v12;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      __break(1u);
LABEL_8:
      *a2 = v4;
      return result;
    }
  }
  return swift_willThrow();
}

uint64_t static ObjectiveCConvertibleAttributedStringKey<>.value(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v8 = (char *)v21 - v7;
  v21[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v21[1] = v9;
  dispatch thunk of RawRepresentable.init(rawValue:)();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, AssociatedTypeWitness) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v8, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v11 = objc_allocWithZone((Class)NSError);
  uint64_t v12 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v14 = objc_msgSend(v13, sel_domain);
  id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v17 = v16;

  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
    return swift_willThrow();
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v20) {
    return swift_willThrow();
  }
  __break(1u);
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  void v21[2];

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v21 - v8;
  v21[1] = objc_msgSend(a1, sel_integerValue, v7);
  dispatch thunk of RawRepresentable.init(rawValue:)();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v9, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v11 = objc_allocWithZone((Class)NSError);
  uint64_t v12 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v14 = objc_msgSend(v13, sel_domain);
  id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v17 = v16;

  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
    return swift_willThrow();
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v20) {
    return swift_willThrow();
  }
  __break(1u);
  return result;
}

uint64_t String.init(_characters:)(uint64_t a1)
{
  long long v1 = *(_OWORD **)a1;
  long long v2 = *(_OWORD *)(a1 + 24);
  long long v10 = *(_OWORD *)(a1 + 8);
  long long v11 = v2;
  long long v3 = *(_OWORD *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 40);
  long long v13 = v3;
  long long v4 = v1[2];
  long long v7 = v1[1];
  long long v8 = v4;
  long long v9 = v1[3];
  v14[0] = v7;
  v14[1] = v4;
  id v14[2] = v9;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v14, (uint64_t)v15);
  outlined retain of Locale((uint64_t)v15);
  BigSubstring.init(_unchecked:in:)();
  swift_release();
  return MEMORY[0x185302040](&v6);
}

id static ObjectiveCConvertibleAttributedStringKey<>.objectiveCValue(for:)()
{
  swift_getAssociatedTypeWitness();
  dispatch thunk of RawRepresentable.rawValue.getter();
  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, v1);
}

double AttributeContainer.init<A>(_:including:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  AttributeContainer.init<A>(_:including:)(a1, a2, &v6);
  swift_release();
  if (!v3)
  {
    double result = *(double *)&v6;
    *a3 = v6;
  }
  return result;
}

uint64_t Dictionary<>.init(_:)(long long *a1)
{
  long long v3 = *a1;
  uint64_t Default = _loadDefaultAttributes()((uint64_t)a1);
  return specialized Dictionary<>.init(_:attributeTable:options:)((uint64_t *)&v3, Default, 1);
}

uint64_t Dictionary<>.init<A>(_:includingOnly:)(long long *a1, uint64_t a2, uint64_t a3)
{
  return Dictionary<>.init<A>(_:including:)(a1, a2, a3);
}

{
  void *v3;
  long long v5;

  uint64_t v5 = *a1;
  long long v3 = static AttributeScope.scopeDescription.getter(a3);
  swift_bridgeObjectRelease();
  return specialized Dictionary<>.init(_:attributeTable:options:)((uint64_t *)&v5, (uint64_t)v3, 0);
}

unint64_t lazy protocol witness table accessor for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString;
  if (!lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString;
  if (!lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._IndexConverterFromString and conformance AttributedString._IndexConverterFromString);
  }
  return result;
}

uint64_t NSAttributedString.init<A>(_:includingOnly:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return NSAttributedString.init<A>(_:including:)(a1, a2, a3);
}

{
  uint64_t v4;

  long long v4 = *a1;
  return NSAttributedString.init<A>(_:including:)(&v4, a2, a3);
}

uint64_t String.Index.init<A>(_:within:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  long long v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = BigString.Index.utf8Offset.getter();
  BigString.Index._isUTF16TrailingSurrogate.getter();
  if (v8 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, a3);
    uint64_t v9 = String.Index.init<A>(_:within:)();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, a3);
    return v9;
  }
  return result;
}

uint64_t AttributedString.Index.init<A>(_:within:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  long long v10 = (_OWORD *)AttributedStringProtocol.__guts.getter(a3, a4);
  long long v11 = v10[1];
  long long v12 = v10[3];
  v36[1] = v10[2];
  v36[2] = v12;
  v36[0] = v11;
  long long v13 = v10[1];
  v37[1] = v10[2];
  v37[2] = v12;
  v37[0] = v13;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v37, (uint64_t)v38);
  outlined retain of Locale((uint64_t)v38);
  swift_release();
  uint64_t v14 = BigString.index(from:)(a1);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  outlined release of Locale((uint64_t)v36);
  if (v20 == 2
    || ((*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t))(a4 + 32))(v39, a3, a4),
        (static BigString.Index.< infix(_:_:)() & 1) != 0)
    || ((*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t))(a4 + 40))(v39, a3, a4),
        (static BigString.Index.< infix(_:_:)() & 1) != 0))
  {
    uint64_t result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a3[-1].Description + 1))(a2, a3);
  }
  else
  {
    unint64_t v23 = (_OWORD *)AttributedStringProtocol.__guts.getter(a3, a4);
    long long v24 = v23[1];
    long long v25 = v23[3];
    v35[1] = v23[2];
    v35[2] = v25;
    v35[0] = v24;
    long long v26 = v23[1];
    v39[1] = v23[2];
    _OWORD v39[2] = v25;
    v39[0] = v26;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v39, (uint64_t)v40);
    outlined retain of Locale((uint64_t)v40);
    swift_release();
    uint64_t v27 = MEMORY[0x185301530](v14, v16, v18, v20);
    uint64_t v34 = v28;
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    outlined release of Locale((uint64_t)v35);
    char v33 = static BigString.Index.== infix(_:_:)();
    uint64_t result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a3[-1].Description + 1))(a2, a3);
    if (v33)
    {
      *a5 = v27;
      a5[1] = v34;
      a5[2] = v30;
      uint64_t v22 = v32;
      goto LABEL_6;
    }
  }
  *a5 = 0;
  a5[1] = 0;
  uint64_t v22 = 2;
  a5[2] = 0;
LABEL_6:
  a5[3] = v22;
  return result;
}

uint64_t _NSRange.init<A, B>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, ValueMetadata *a4, uint64_t a5, uint64_t a6)
{
  void (*v21)(void *__return_ptr, ValueMetadata *, uint64_t);
  uint64_t v22;
  void (*v23)(void *__return_ptr, ValueMetadata *, uint64_t);
  char *v24;
  char v25;
  char v26;
  void (*v27)(char *, ValueMetadata *);
  void *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  long long v33;
  long long v34;
  long long v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, ValueMetadata *);
  void v39[6];
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, ValueMetadata *);
  ValueMetadata *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void v52[10];
  void v53[10];
  void v54[8];
  char v55[48];
  char v56[48];
  unsigned char v57[48];

  long long v50 = a2;
  unint64_t v43 = a4;
  Description = a4[-1].Description;
  MEMORY[0x1F4188790](a4);
  unint64_t v44 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v39 - v13;
  (*(void (**)(void *__return_ptr, double))(v15 + 56))(v53, v12);
  v52[0] = v53[0];
  *(_OWORD *)&v52[1] = *(_OWORD *)&v53[1];
  *(_OWORD *)&v52[3] = *(_OWORD *)&v53[3];
  *(_OWORD *)&v52[5] = *(_OWORD *)&v53[5];
  *(_OWORD *)&v52[7] = *(_OWORD *)&v53[7];
  v52[9] = v53[9];
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  long long v40 = a3;
  long long v41 = a1;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  swift_release();
  uint64_t v17 = v54[0];
  uint64_t v16 = v54[1];
  uint64_t v18 = v54[2];
  uint64_t v19 = v54[3];
  long long v48 = v54[5];
  long long v49 = v54[4];
  long long v46 = v54[7];
  long long v47 = v54[6];
  long long v51 = Description;
  uint64_t v42 = (void (*)(char *, uint64_t, ValueMetadata *))Description[2];
  uint64_t v20 = v43;
  v42(v14, v50, v43);
  unint64_t v21 = *(void (**)(void *__return_ptr, ValueMetadata *, uint64_t))(a6 + 32);
  uint64_t v45 = a6;
  uint64_t v22 = a6;
  v39[1] = a6 + 32;
  unint64_t v23 = v21;
  v21(v53, v20, v22);
  v39[4] = v16;
  v39[5] = v17;
  long long v24 = v44;
  _OWORD v39[2] = v19;
  long long v39[3] = v18;
  long long v25 = static BigString.Index.< infix(_:_:)();
  v42(v24, (uint64_t)v14, v20);
  if (v25)
  {
    long long v38 = (void (*)(char *, ValueMetadata *))v51[1];
    v38(v24, v20);
    uint64_t result = ((uint64_t (*)(char *, ValueMetadata *))v38)(v14, v20);
    goto LABEL_6;
  }
  (*(void (**)(void *__return_ptr, ValueMetadata *))(v45 + 40))(v53, v20);
  long long v26 = static BigString.Index.< infix(_:_:)();
  uint64_t v28 = v51 + 1;
  uint64_t v27 = (void (*)(char *, ValueMetadata *))v51[1];
  v27(v24, v20);
  uint64_t result = ((uint64_t (*)(char *, ValueMetadata *))v27)(v14, v20);
  if (v26)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v30 = v45;
  uint64_t v31 = v50;
  uint64_t v32 = (_OWORD *)AttributedStringProtocol.__guts.getter(v20, v45);
  char v33 = v32[1];
  uint64_t v34 = v32[3];
  *(_OWORD *)&v52[2] = v32[2];
  *(_OWORD *)&v52[4] = v34;
  *(_OWORD *)long long v52 = v33;
  uint64_t v35 = v32[1];
  *(_OWORD *)&v53[2] = v32[2];
  *(_OWORD *)&v53[4] = v34;
  *(_OWORD *)uint64_t v53 = v35;
  outlined init with take of any PredicateExpression<Self.Output == B1>((long long *)v53, (uint64_t)v57);
  outlined retain of Locale((uint64_t)v57);
  swift_release();
  BigString.utf16.getter();
  BigString.startIndex.getter();
  unint64_t v44 = (char *)v27;
  long long v51 = v28;
  v23(v54, v20, v30);
  uint64_t v36 = BigString.UTF16View.distance(from:to:)();
  outlined release of Locale((uint64_t)v55);
  BigString.utf16.getter();
  BigString.startIndex.getter();
  uint64_t v37 = BigString.UTF16View.distance(from:to:)();
  outlined release of Locale((uint64_t)v56);
  BigString.utf16.getter();
  BigString.UTF16View.distance(from:to:)();
  outlined release of Locale((uint64_t)v52);
  outlined release of Locale((uint64_t)v54);
  ((void (*)(uint64_t, ValueMetadata *))v44)(v31, v20);
  (*(void (**)(uint64_t))(*(void *)(v40 - 8) + 8))(v41);
  uint64_t result = v37 - v36;
  if (__OFSUB__(v37, v36)) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t _NSRange.init<A>(_:in:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(result + 40);
  LOBYTE(v6) = *(unsigned char *)(result + 64);
  uint64_t v7 = *(void *)(result + 72);
  uint64_t v9 = *(void *)(result + 88);
  uint64_t v8 = *(void *)(result + 96);
  LOBYTE(v10) = *(unsigned char *)(result + 104);
  if (v6 & 1) != 0 || (*(unsigned char *)(result + 104)) {
    goto LABEL_9;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
  uint64_t v6 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
LABEL_14:
    __break(1u);
  }
  else
  {
    while (1)
    {
      uint64_t v10 = v5;
      if (v6 == v9)
      {
        uint64_t v10 = v5 + v8;
        if (__OFADD__(v5, v8)) {
          break;
        }
      }
      if (!__OFSUB__(v10, v5)) {
        return v5;
      }
      __break(1u);
LABEL_9:
      uint64_t v11 = *(void *)(result + 80);
      uint64_t v12 = *(void *)(result + 32);
      long long v13 = *(_OWORD *)(result + 16);
      v14[0] = *(_OWORD *)result;
      v14[1] = v13;
      uint64_t v15 = v12;
      uint64_t v16 = v5;
      long long v17 = *(_OWORD *)(result + 48);
      char v18 = v6;
      uint64_t v19 = v7;
      uint64_t v20 = v11;
      uint64_t v21 = v9;
      uint64_t v22 = v8;
      char v23 = v10;
      AttributedString.MarkdownSourcePosition.calculateOffsets<A>(within:)(a2, a3, v24);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
      uint64_t result = outlined init with take of LocalePreferences?((uint64_t)v24, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for (start: AttributedString.MarkdownSourcePosition.Offsets, end: AttributedString.MarkdownSourcePosition.Offsets)?);
      if (v18) {
        return 0x7FFFFFFFFFFFFFFFLL;
      }
      uint64_t v5 = *((void *)&v14[0] + 1);
      uint64_t v7 = v15;
      uint64_t v8 = *((void *)&v17 + 1);
      uint64_t v9 = v17;
      uint64_t v6 = v15 + 1;
      if (__OFADD__(v15, 1)) {
        goto LABEL_14;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance AttributedString._IndexConverterFromString@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (result < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a1 = (result << 16) | 4;
  }
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance AttributedString._IndexConverterFromString@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (result < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a1 = (result << 16) | 4;
  }
  return result;
}

uint64_t protocol witness for Collection.subscript.getter in conformance AttributedString._IndexConverterFromString@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString._IndexConverterFromString@<X0>(uint64_t a1@<X8>)
{
  return specialized Collection<>.indices.getter(a1);
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance AttributedString._IndexConverterFromString()
{
  return specialized Collection.isEmpty.getter() & 1;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString._IndexConverterFromString@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized Collection.index(_:offsetBy:)(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  if (a5 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = a5;
    if (!a5)
    {
LABEL_5:
      *a6 = result;
      a6[1] = a2;
      a6[2] = a3;
      a6[3] = a4;
      return result;
    }
    while ((BigString.Index.utf8Offset.getter() & 0x8000000000000000) == 0)
    {
      Substring.index(after:)();
      uint64_t result = BigString.Index.init(_utf8Offset:)();
      if (!--v6) {
        goto LABEL_5;
      }
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:)(unint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    goto LABEL_15;
  }
  uint64_t v3 = a2;
  if (!a2) {
    return a1;
  }
  uint64_t v5 = *v2;
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[2];
  uint64_t v8 = v2[3];
  uint64_t v13 = v2[5];
  uint64_t v14 = v2[4];
  uint64_t v12 = v8;
  while ((a1 & 0xC) != 8)
  {
    uint64_t v30 = v5;
    uint64_t v31 = v6;
    uint64_t v32 = v7;
    uint64_t v33 = v8;
    uint64_t v34 = v14;
    uint64_t v35 = v13;
    BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
    BigString.endIndex.getter();
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_14;
    }
LABEL_10:
    uint64_t v18 = v5;
    uint64_t v19 = v6;
    uint64_t v20 = v7;
    uint64_t v21 = v8;
    uint64_t v22 = v14;
    uint64_t v23 = v13;
    BigString.index(after:)();
    uint64_t v10 = BigString.Index.utf8Offset.getter();
    if (v10 < 0) {
      goto LABEL_16;
    }
    a1 = (v10 << 16) | 4;
    if (!--v3) {
      return a1;
    }
  }
  uint64_t v24 = v5;
  uint64_t v25 = v6;
  uint64_t v26 = v7;
  uint64_t v27 = v8;
  uint64_t v28 = v14;
  uint64_t v29 = v13;
  BigString.utf16.getter();
  uint64_t v9 = BigString.UTF16View.count.getter();
  outlined release of Locale((uint64_t)v15);
  if (v9 >= (uint64_t)(a1 >> 16))
  {
    BigString.utf16.getter();
    BigString.startIndex.getter();
    BigString.UTF16View.index(_:offsetBy:)();
    outlined release of Locale((uint64_t)v16);
    if ((unsigned __int16)a1 >> 14)
    {
      BigString.utf8.getter();
      BigString.UTF8View.index(_:offsetBy:)();
      outlined release of Locale((uint64_t)v17);
    }
    uint64_t v8 = v12;
    goto LABEL_10;
  }
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString._IndexConverterFromString@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  if (a5 < 0)
  {
    __break(1u);
LABEL_9:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v6 = a5;
    uint64_t v10 = result;
    if (a5)
    {
      while (1)
      {
        uint64_t result = static BigString.Index.== infix(_:_:)();
        if (result) {
          break;
        }
        if (BigString.Index.utf8Offset.getter() < 0) {
          goto LABEL_9;
        }
        Substring.index(after:)();
        uint64_t result = BigString.Index.init(_utf8Offset:)();
        uint64_t v10 = result;
        a2 = v11;
        a3 = v12;
        a4 = v13;
        if (!--v6) {
          goto LABEL_6;
        }
      }
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      a6[3] = 2;
    }
    else
    {
LABEL_6:
      *a6 = v10;
      a6[1] = a2;
      a6[2] = a3;
      a6[3] = a4;
    }
  }
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 < 0) {
    goto LABEL_16;
  }
  uint64_t v4 = a2;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = v3;
  while (1)
  {
    if ((a1 ^ a3) < 0x4000) {
      return 0;
    }
    uint64_t v7 = v6[1];
    uint64_t v8 = v6[2];
    uint64_t v9 = v6[3];
    uint64_t v11 = v6[4];
    uint64_t v10 = v6[5];
    uint64_t v20 = *v6;
    uint64_t v18 = v9;
    uint64_t v19 = v8;
    if ((a1 & 0xC) == 8) {
      break;
    }
    uint64_t v36 = *v6;
    uint64_t v37 = v7;
    uint64_t v38 = v8;
    uint64_t v39 = v9;
    uint64_t v12 = v11;
    uint64_t v40 = v11;
    uint64_t v41 = v10;
    uint64_t v13 = v10;
    BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
    BigString.endIndex.getter();
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_15;
    }
LABEL_11:
    uint64_t v24 = v20;
    uint64_t v25 = v7;
    uint64_t v26 = v19;
    uint64_t v27 = v18;
    uint64_t v28 = v12;
    uint64_t v29 = v13;
    BigString.index(after:)();
    uint64_t v15 = BigString.Index.utf8Offset.getter();
    if (v15 < 0) {
      goto LABEL_17;
    }
    a1 = (v15 << 16) | 4;
    if (!--v4) {
      return a1;
    }
  }
  uint64_t v30 = *v6;
  uint64_t v31 = v7;
  uint64_t v32 = v8;
  uint64_t v33 = v9;
  uint64_t v12 = v11;
  uint64_t v34 = v11;
  uint64_t v35 = v10;
  uint64_t v13 = v10;
  BigString.utf16.getter();
  uint64_t v14 = BigString.UTF16View.count.getter();
  outlined release of Locale((uint64_t)v21);
  if (v14 >= (uint64_t)(a1 >> 16))
  {
    BigString.utf16.getter();
    BigString.startIndex.getter();
    BigString.UTF16View.index(_:offsetBy:)();
    outlined release of Locale((uint64_t)v22);
    if ((unsigned __int16)a1 >> 14)
    {
      BigString.utf8.getter();
      BigString.UTF8View.index(_:offsetBy:)();
      outlined release of Locale((uint64_t)v23);
    }
    goto LABEL_11;
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance AttributedString._IndexConverterFromString(unint64_t *a1, unint64_t *a2)
{
  return specialized Collection.distance(from:to:)(*a1, *a2);
}

uint64_t specialized Collection.distance(from:to:)()
{
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (static BigString.Index.== infix(_:_:)()) {
    return 0;
  }
  if ((BigString.Index.utf8Offset.getter() & 0x8000000000000000) == 0)
  {
    Substring.index(after:)();
    BigString.Index.init(_utf8Offset:)();
    if (static BigString.Index.== infix(_:_:)()) {
      return 1;
    }
    for (uint64_t i = 1; ; ++i)
    {
      uint64_t v0 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if (BigString.Index.utf8Offset.getter() < 0) {
        goto LABEL_14;
      }
      Substring.index(after:)();
      BigString.Index.init(_utf8Offset:)();
      if (static BigString.Index.== infix(_:_:)()) {
        return v0;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_14:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Collection.distance(from:to:)(unint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2 >> 14;
  if (a2 >> 14 < a1 >> 14)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (a1 >> 14 != v3)
  {
    unint64_t v5 = a1;
    uint64_t v6 = 0;
    long long v7 = v2[1];
    long long v14 = *v2;
    long long v15 = v7;
    long long v16 = v2[2];
    while (1)
    {
      uint64_t v4 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        break;
      }
      if ((v5 & 0xC) == 8)
      {
        BigString.utf16.getter();
        uint64_t v8 = BigString.UTF16View.count.getter();
        outlined release of Locale((uint64_t)v11);
        if (v8 < (uint64_t)(v5 >> 16)) {
          goto LABEL_15;
        }
        BigString.utf16.getter();
        BigString.startIndex.getter();
        BigString.UTF16View.index(_:offsetBy:)();
        outlined release of Locale((uint64_t)v12);
        if ((unsigned __int16)v5 >> 14)
        {
          BigString.utf8.getter();
          BigString.UTF8View.index(_:offsetBy:)();
          outlined release of Locale((uint64_t)v13);
        }
      }
      else
      {
        BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
        BigString.endIndex.getter();
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_16;
        }
      }
      BigString.index(after:)();
      uint64_t v9 = BigString.Index.utf8Offset.getter();
      if (v9 < 0) {
        goto LABEL_18;
      }
      unint64_t v5 = (v9 << 16) | 4;
      ++v6;
      if (v3 == ((4 * v9) & 0x3FFFFFFFFFFFFLL)) {
        return v4;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  return 0;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AttributedString._IndexConverterFromString(void *result, void *a2)
{
  unint64_t v2 = *result >> 14;
  if (v2 < *a2 >> 14 || v2 >= a2[1] >> 14) {
    __break(1u);
  }
  return result;
}

{
  unint64_t v2;

  unint64_t v2 = *result >> 14;
  if (v2 < *a2 >> 14 || a2[1] >> 14 < v2) {
    __break(1u);
  }
  return result;
}

{
  if (*result >> 14 < *a2 >> 14 || a2[1] >> 14 < result[1] >> 14) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance AttributedString._IndexConverterFromString@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  BigString.index(from:)(*a1);
  if (v3 == 2)
  {
    __break(1u);
  }
  else
  {
    BigString.index(after:)();
    uint64_t result = BigString.Index.utf8Offset.getter();
    if ((result & 0x8000000000000000) == 0)
    {
      *a2 = (result << 16) | 4;
      return result;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance AttributedString._IndexConverterFromString(uint64_t *a1)
{
  long long v3 = v1[1];
  long long v11 = *v1;
  long long v12 = v3;
  long long v13 = v1[2];
  uint64_t v4 = *a1;
  uint64_t v5 = (unint64_t)*a1 >> 16;
  if ((*a1 & 0xC) != 8)
  {
    BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
    BigString.endIndex.getter();
    if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
      goto LABEL_6;
    }
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  BigString.utf16.getter();
  uint64_t v6 = BigString.UTF16View.count.getter();
  outlined release of Locale((uint64_t)v8);
  if (v6 < v5)
  {
    __break(1u);
    goto LABEL_9;
  }
  BigString.utf16.getter();
  BigString.startIndex.getter();
  BigString.UTF16View.index(_:offsetBy:)();
  outlined release of Locale((uint64_t)v9);
  if ((unsigned __int16)v4 >> 14)
  {
    BigString.utf8.getter();
    BigString.UTF8View.index(_:offsetBy:)();
    outlined release of Locale((uint64_t)v10);
  }
LABEL_6:
  BigString.index(after:)();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    *a1 = (result << 16) | 4;
    return result;
  }
LABEL_10:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString._IndexConverterFromString@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[6];
  uint64_t v17 = v1[5];
  uint64_t v18 = v1[4];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v10 = v1[9];
  uint64_t v15 = v1[11];
  uint64_t v16 = v1[10];
  uint64_t v11 = v1[12];
  uint64_t v12 = v1[13];
  uint64_t v14 = v11;
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (result < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
    a1[4] = v18;
    a1[5] = v17;
    a1[6] = v7;
    a1[7] = v8;
    a1[8] = v9;
    a1[9] = v10;
    a1[10] = v16;
    a1[11] = v15;
    a1[12] = v14;
    a1[13] = v12;
    a1[14] = (result << 16) | 4;
  }
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance AttributedString._IndexConverterFromString()
{
  uint64_t v0 = BigString.Index.utf8Offset.getter();
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = BigString.Index.utf8Offset.getter();
    if ((v2 & 0x8000000000000000) == 0) {
      return specialized Collection.distance(from:to:)((v1 << 16) | 4, (v2 << 16) | 4);
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString._IndexConverterFromString()
{
  long long v1 = v0[5];
  id v6[4] = v0[4];
  v6[5] = v1;
  v6[6] = v0[6];
  long long v2 = v0[1];
  v6[0] = *v0;
  v6[1] = v2;
  long long v3 = v0[3];
  void v6[2] = v0[2];
  void v6[3] = v3;
  uint64_t v4 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v6);
  outlined release of Locale((uint64_t)v6);
  return v4;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString._IndexConverterFromString(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString._IndexConverterFromString@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

uint64_t Range<>.init<A>(_:in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, ValueMetadata *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  if (result == 0x7FFFFFFFFFFFFFFFLL || result < 0 || a2 < 0)
  {
    uint64_t result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a4[-1].Description + 1))(a3, a4);
  }
  else
  {
    uint64_t v9 = result + a2;
    if (__OFADD__(result, a2))
    {
      __break(1u);
      return result;
    }
    uint64_t v11 = (_OWORD *)AttributedStringProtocol.__guts.getter(a4, a5);
    long long v12 = v11[1];
    long long v13 = v11[3];
    v35[1] = v11[2];
    v35[2] = v13;
    v35[0] = v12;
    long long v14 = v11[1];
    v36[1] = v11[2];
    v36[2] = v13;
    v36[0] = v14;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v36, (uint64_t)v37);
    outlined retain of Locale((uint64_t)v37);
    swift_release();
    BigString.utf16.getter();
    uint64_t v15 = BigString.UTF16View.count.getter();
    outlined release of Locale((uint64_t)v32);
    if (v15 < v9) {
      goto LABEL_7;
    }
    BigString.utf16.getter();
    BigString.startIndex.getter();
    uint64_t v16 = BigString.UTF16View.index(_:offsetBy:)();
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    outlined release of Locale((uint64_t)v33);
    BigString.utf16.getter();
    uint64_t v29 = BigString.UTF16View.index(_:offsetBy:)();
    uint64_t v30 = v23;
    uint64_t v25 = v24;
    uint64_t v28 = v26;
    outlined release of Locale((uint64_t)v34);
    (*(void (**)(uint64_t *__return_ptr, ValueMetadata *, uint64_t))(a5 + 32))(&v31, a4, a5);
    if (static BigString.Index.< infix(_:_:)())
    {
LABEL_7:
      (*((void (**)(uint64_t, ValueMetadata *))a4[-1].Description + 1))(a3, a4);
      uint64_t result = outlined release of Locale((uint64_t)v35);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, ValueMetadata *, uint64_t))(a5 + 40))(&v31, a4, a5);
      char v27 = static BigString.Index.< infix(_:_:)();
      outlined release of Locale((uint64_t)v35);
      uint64_t result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a4[-1].Description + 1))(a3, a4);
      if ((v27 & 1) == 0)
      {
        *a6 = v16;
        a6[1] = v18;
        a6[2] = v20;
        a6[3] = v22;
        a6[4] = v29;
        a6[5] = v30;
        a6[6] = v25;
        a6[7] = v28;
        return result;
      }
    }
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  a6[3] = 2;
  *((_OWORD *)a6 + 2) = 0u;
  *((_OWORD *)a6 + 3) = 0u;
  return result;
}

uint64_t Range<>.init<A>(_range:in:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, ValueMetadata *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  long long v12 = (_OWORD *)AttributedStringProtocol.__guts.getter(a4, a5);
  long long v13 = v12[1];
  long long v14 = v12[3];
  v38[1] = v12[2];
  v38[2] = v14;
  v38[0] = v13;
  long long v15 = v12[1];
  v39[1] = v12[2];
  _OWORD v39[2] = v14;
  v39[0] = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v39, (uint64_t)v40);
  outlined retain of Locale((uint64_t)v40);
  swift_release();
  uint64_t v16 = BigString.index(from:)(a1);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  outlined release of Locale((uint64_t)v38);
  if (v22 == 2) {
    goto LABEL_5;
  }
  uint64_t v23 = (_OWORD *)AttributedStringProtocol.__guts.getter(a4, a5);
  long long v24 = v23[1];
  long long v25 = v23[3];
  v37[1] = v23[2];
  v37[2] = v25;
  v37[0] = v24;
  long long v26 = v23[1];
  v41[1] = v23[2];
  v41[2] = v25;
  v41[0] = v26;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v41, (uint64_t)v42);
  outlined retain of Locale((uint64_t)v42);
  swift_release();
  uint64_t v27 = BigString.index(from:)(a2);
  uint64_t v34 = v28;
  uint64_t v35 = v27;
  uint64_t v33 = v29;
  uint64_t v31 = v30;
  outlined release of Locale((uint64_t)v37);
  if (v31 == 2
    || ((*(void (**)(uint64_t *__return_ptr, ValueMetadata *, uint64_t))(a5 + 32))(&v36, a4, a5),
        (static BigString.Index.< infix(_:_:)() & 1) != 0)
    || ((*(void (**)(uint64_t *__return_ptr, ValueMetadata *, uint64_t))(a5 + 40))(&v36, a4, a5),
        (static BigString.Index.< infix(_:_:)() & 1) != 0))
  {
LABEL_5:
    uint64_t result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a4[-1].Description + 1))(a3, a4);
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    *(void *)(a6 + 24) = 2;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
  }
  else
  {
    uint64_t result = (*((uint64_t (**)(uint64_t, ValueMetadata *))a4[-1].Description + 1))(a3, a4);
    *(void *)a6 = v16;
    *(void *)(a6 + 8) = v18;
    *(void *)(a6 + 16) = v20;
    *(void *)(a6 + 24) = v22;
    *(void *)(a6 + 32) = v35;
    *(void *)(a6 + 40) = v34;
    *(void *)(a6 + 48) = v33;
    *(void *)(a6 + 56) = v31;
  }
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance AttributedString._IndexConverterFromAttributedString@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = BigString.Index.init(_utf8Offset:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance AttributedString._IndexConverterFromAttributedString@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = BigString.Index.init(_utf8Offset:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance AttributedString._IndexConverterFromAttributedString(_OWORD *a1, _OWORD *a2))(void, void)
{
  long long v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t protocol witness for Collection.subscript.getter in conformance AttributedString._IndexConverterFromAttributedString@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v15 = a1[4];
  uint64_t v16 = a1[1];
  uint64_t v13 = a1[6];
  uint64_t v14 = a1[5];
  uint64_t v12 = a1[7];
  uint64_t v7 = v2[1];
  uint64_t v9 = v2[2];
  uint64_t v10 = *v2;
  uint64_t v11 = v2[3];
  BigString.Index.init(_utf8Offset:)();
  BigString.Index.init(_utf8Offset:)();
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  a2[8] = v10;
  a2[9] = v7;
  a2[10] = v9;
  a2[11] = v11;
  *a2 = v4;
  a2[1] = v16;
  a2[2] = v5;
  a2[3] = v6;
  a2[4] = v15;
  a2[5] = v14;
  a2[6] = v13;
  a2[7] = v12;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString._IndexConverterFromAttributedString@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  *(void *)(a1 + 32) = BigString.Index.init(_utf8Offset:)();
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  uint64_t result = BigString.Index.init(_utf8Offset:)();
  *(void *)(a1 + 64) = result;
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v9;
  *(void *)(a1 + 88) = v10;
  return result;
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance AttributedString._IndexConverterFromAttributedString()
{
  BigString.Index.init(_utf8Offset:)();
  BigString.Index.init(_utf8Offset:)();

  return static BigString.Index.== infix(_:_:)();
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString._IndexConverterFromAttributedString@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized Collection.index(_:offsetBy:)(*a1, a1[1], a1[2], a1[3], a2, a3);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString._IndexConverterFromAttributedString@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a1[1], a1[2], a1[3], a2, a3);
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance AttributedString._IndexConverterFromAttributedString()
{
  return specialized Collection.distance(from:to:)();
}

uint64_t protocol witness for Collection.index(after:) in conformance AttributedString._IndexConverterFromAttributedString@<X0>(uint64_t *a1@<X8>)
{
  if (BigString.Index.utf8Offset.getter() < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    Substring.index(after:)();
    uint64_t result = BigString.Index.init(_utf8Offset:)();
    *a1 = result;
    a1[1] = v3;
    a1[2] = v4;
    a1[3] = v5;
  }
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance AttributedString._IndexConverterFromAttributedString(uint64_t *a1)
{
  if (BigString.Index.utf8Offset.getter() < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    Substring.index(after:)();
    uint64_t result = BigString.Index.init(_utf8Offset:)();
    *a1 = result;
    a1[1] = v3;
    a1[2] = v4;
    a1[3] = v5;
  }
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance AttributedString._IndexConverterFromAttributedString@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  __n128 v10 = *(__n128 *)(v1 + 1);
  uint64_t v4 = v1[3];
  uint64_t v5 = BigString.Index.init(_utf8Offset:)();
  *(void *)a1 = v3;
  __n128 result = v10;
  *(__n128 *)(a1 + 8) = v10;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance AttributedString._IndexConverterFromAttributedString()
{
  return specialized Collection.distance(from:to:)();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString._IndexConverterFromAttributedString()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1], v0[2], v0[3]);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString._IndexConverterFromAttributedString(void *a1, uint64_t *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2], v3[3]);
}

uint64_t Range<>.init<A, B>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  __n128 v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 - 8);
  double v14 = MEMORY[0x1F4188790](v13);
  (*(void (**)(char *, uint64_t, double))(v12 + 16))((char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a4);
    unint64_t v16 = Substring.init<A>(_:)();
    uint64_t v18 = specialized Range<>.init(_range:in:)((uint64_t)&v34, v16, v17);
    char v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a2, a4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a4);
    unint64_t v21 = Substring.init<A>(_:)();
    unint64_t v23 = v22;
    uint64_t v29 = a2;
    unint64_t v30 = v21;
    unint64_t v31 = v22;
    uint64_t v32 = v24;
    uint64_t v33 = v25;
    lazy protocol witness table accessor for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString();
    dispatch thunk of RangeExpression.relative<A>(to:)();
    uint64_t v18 = specialized Range<>.init(_range:in:)((uint64_t)&v34, v21, v23);
    char v20 = v26;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v29, a4);
  }
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a3);
  if (v20) {
    return 0;
  }
  return v18;
}

unint64_t lazy protocol witness table accessor for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString;
  if (!lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._IndexConverterFromAttributedString and conformance AttributedString._IndexConverterFromAttributedString);
  }
  return result;
}

uint64_t specialized Range<>.init(_range:in:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = BigString.Index.utf8Offset.getter();
  char isUTF16Trailing = BigString.Index._isUTF16TrailingSurrogate.getter();
  if (v3 < 0) {
    goto LABEL_12;
  }
  uint64_t v5 = 0x4000;
  if (isUTF16Trailing) {
    uint64_t v6 = 0x4000;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = BigString.Index.utf8Offset.getter();
  if ((BigString.Index._isUTF16TrailingSurrogate.getter() & 1) == 0) {
    uint64_t v5 = 0;
  }
  if (v7 < 0)
  {
LABEL_12:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    unint64_t v8 = v6 | (v3 << 16);
    swift_bridgeObjectRelease();
    if (v8 >> 14 >= a2 >> 14 && a3 >> 14 >= (v5 | (unint64_t)(v7 << 16)) >> 14) {
      return v8 | 4;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t dispatch thunk of static ObjectiveCConvertibleAttributedStringKey.objectiveCValue(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static ObjectiveCConvertibleAttributedStringKey.value(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t destroy for AttributedString._IndexConverterFromAttributedString()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttributedString._IndexConverterFromAttributedString(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AttributedString._IndexConverterFromAttributedString(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AttributedString._IndexConverterFromAttributedString(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString._IndexConverterFromAttributedString(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString._IndexConverterFromAttributedString(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedString._IndexConverterFromAttributedString()
{
  return &type metadata for AttributedString._IndexConverterFromAttributedString;
}

uint64_t initializeWithCopy for AttributedString._IndexConverterFromString(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v3;
  long long v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString._IndexConverterFromString(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  long long v4 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  return a1;
}

uint64_t assignWithTake for AttributedString._IndexConverterFromString(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString._IndexConverterFromString(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 112)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString._IndexConverterFromString(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedString._IndexConverterFromString()
{
  return &type metadata for AttributedString._IndexConverterFromString;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString._IndexConverterFromString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<AttributedString._IndexConverterFromString> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<AttributedString._IndexConverterFromString>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString._IndexConverterFromAttributedString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<AttributedString._IndexConverterFromAttributedString> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<AttributedString._IndexConverterFromAttributedString>);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString._IndexConverterFromAttributedString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString._IndexConverterFromAttributedString> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString._IndexConverterFromAttributedString>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString._IndexConverterFromAttributedString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<AttributedString._IndexConverterFromAttributedString> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString._IndexConverterFromAttributedString>);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in AttributedString._IndexConverterFromString()
{
  return MEMORY[0x1E4FBB138];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString._IndexConverterFromString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString._IndexConverterFromString> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString._IndexConverterFromString>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString._IndexConverterFromString()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<AttributedString._IndexConverterFromString> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString._IndexConverterFromString>);
}

uint64_t sub_181F2BB78()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 128, 7);
}

uint64_t sub_181F2BBB8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

id URLResource.bundle.getter()
{
  return *v0;
}

uint64_t URLResource.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLResource.subdirectory.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLResource.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 40);
  return swift_unknownObjectRetain();
}

__n128 URLResource.locale.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v1 + 40) = *a1;
  return result;
}

uint64_t (*URLResource.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 URLResource.init(name:subdirectory:locale:bundle:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = a6;
  *(void *)(a7 + 8) = a1;
  *(void *)(a7 + 16) = a2;
  *(void *)(a7 + 24) = a3;
  *(void *)(a7 + 32) = a4;
  __n128 result = *a5;
  *(__n128 *)(a7 + 40) = *a5;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URLResource.CodingKeys()
{
  uint64_t result = 1701667182;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6365726964627573;
      break;
    case 2:
      uint64_t result = 0x656C61636F6CLL;
      break;
    case 3:
      uint64_t result = 0x6150656C646E7562;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URLResource.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized URLResource.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URLResource.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URLResource.CodingKeys and conformance URLResource.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URLResource.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URLResource.CodingKeys and conformance URLResource.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t URLResource.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URLResource.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = *(void **)v1;
  uint64_t v20 = *(void *)(v1 + 24);
  uint64_t v9 = *(void *)(v1 + 32);
  uint64_t v18 = v8;
  uint64_t v19 = v9;
  long long v17 = *(_OWORD *)(v1 + 40);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1;
  uint64_t v13 = v12;
  __swift_project_boxed_opaque_existential_1(v11, v10);
  lazy protocol witness table accessor for type URLResource.CodingKeys and conformance URLResource.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v21) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v13);
  }
  double v14 = v18;
  LOBYTE(v21) = 1;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  long long v21 = v17;
  char v22 = 2;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  id v15 = objc_msgSend(v14, sel_bundlePath);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v15);

  LOBYTE(v21) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v13);
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type URLResource.CodingKeys and conformance URLResource.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLResource.CodingKeys and conformance URLResource.CodingKeys);
  }
  return result;
}

void URLResource.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URLResource.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URLResource.CodingKeys and conformance URLResource.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    LOBYTE(v38) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    LOBYTE(v38) = 1;
    swift_bridgeObjectRetain();
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v37 = v13;
    uint64_t v34 = v12;
    uint64_t v36 = v11;
    char v39 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    swift_bridgeObjectRetain();
    uint64_t v35 = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v14 = v38;
    LOBYTE(v38) = 3;
    long long v32 = v14;
    uint64_t v33 = v14;
    swift_unknownObjectRetain();
    uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v18 = v17;
    id v19 = objc_allocWithZone((Class)NSBundle);
    uint64_t v29 = v16;
    id v30 = v19;
    unint64_t v31 = v18;
    id v20 = objc_msgSend(v19, sel_initWithPath_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    uint64_t v21 = v36;
    if (v20)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      id v22 = v20;
      *(void *)a2 = v22;
      *(void *)(a2 + 8) = v9;
      uint64_t v23 = v34;
      *(void *)(a2 + 16) = v21;
      *(void *)(a2 + 24) = v23;
      *(void *)(a2 + 32) = v37;
      *(_OWORD *)(a2 + 40) = v32;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v34 = type metadata accessor for DecodingError();
      swift_allocError();
      *(void *)&long long v32 = v24;
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      dispatch thunk of Decoder.codingPath.getter();
      *(void *)&long long v38 = 0;
      *((void *)&v38 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      *(void *)&long long v38 = 0xD00000000000001FLL;
      *((void *)&v38 + 1) = 0x80000001823B3C00;
      v25._uint64_t countAndFlagsBits = v29;
      v25._unint64_t object = v31;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._uint64_t countAndFlagsBits = 39;
      v26._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      uint64_t v27 = v32;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void))(*(void *)(v34 - 8) + 104))(v27, *MEMORY[0x1E4FBBA78]);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v15 = v35;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      swift_bridgeObjectRelease();
      if (!v15) {
        swift_bridgeObjectRelease();
      }
      swift_unknownObjectRelease();
    }
  }
}

uint64_t URLResource.hash(into:)(uint64_t a1)
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned char *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  unsigned char v42[144];
  unsigned char v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  char v60;
  void v61[18];
  unsigned char v62[144];
  unsigned char v63[152];
  uint64_t vars8;

  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 48);
  id v5 = *(id *)v1;
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v4) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
    swift_unknownObjectRetain();
    v9(v61, ObjectType, v4);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62);
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v63) == 1)
    {
      Hasher._combine(_:)(0);
      return swift_unknownObjectRelease();
    }
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v43);
    Hasher._combine(_:)(1u);
    if (v43[0] == 2)
    {
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = v43[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v10);
    uint64_t v11 = v44;
    if (v44)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v11 + 16));
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v13 = v11 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v13 += 16;
          --v12;
        }
        while (v12);
        swift_bridgeObjectRelease();
        if (!v45)
        {
LABEL_18:
          Hasher._combine(_:)(0);
          if (!v46) {
            goto LABEL_19;
          }
          goto LABEL_26;
        }
LABEL_25:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_19:
          Hasher._combine(_:)(0);
          long long v14 = v47;
          if (!v47) {
            goto LABEL_20;
          }
          goto LABEL_27;
        }
LABEL_26:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        long long v14 = v47;
        if (!v47)
        {
LABEL_20:
          Hasher._combine(_:)(0);
          uint64_t v15 = v48;
          if (!v48)
          {
LABEL_21:
            Hasher._combine(_:)(0);
            goto LABEL_29;
          }
LABEL_28:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v15);
          swift_bridgeObjectRelease();
LABEL_29:
          uint64_t v18 = v49;
          long long v17 = v50;
          id v20 = v51;
          id v19 = v52;
          uint64_t v21 = v53;
          if (v49)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            id v22 = v17;
            uint64_t v23 = v20;
            uint64_t v24 = v19;
            Swift::String v25 = v21;
            Swift::String v26 = v18;
            _CFObject.hash(into:)();
            if (v17) {
              goto LABEL_31;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            unint64_t v31 = v21;
            long long v32 = v17;
            uint64_t v33 = v20;
            uint64_t v34 = v19;
            if (v17)
            {
LABEL_31:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              uint64_t v27 = v17;
              _CFObject.hash(into:)();

              if (v20) {
                goto LABEL_32;
              }
              goto LABEL_37;
            }
          }
          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_32:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            uint64_t v28 = v20;
            _CFObject.hash(into:)();

            if (v19) {
              goto LABEL_33;
            }
            goto LABEL_38;
          }
LABEL_37:
          Hasher._combine(_:)(0);
          if (v19)
          {
LABEL_33:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            uint64_t v29 = v19;
            _CFObject.hash(into:)();

            if (v21)
            {
LABEL_34:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              id v30 = v21;
              _CFObject.hash(into:)();

              goto LABEL_40;
            }
LABEL_39:
            Hasher._combine(_:)(0);
            id v30 = 0;
LABEL_40:

            uint64_t v35 = v54;
            if (v35)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)(a1, v35);
              swift_bridgeObjectRelease();
              uint64_t v36 = v55;
              if (v55) {
                goto LABEL_42;
              }
            }
            else
            {
              Hasher._combine(_:)(0);
              uint64_t v36 = v55;
              if (v55)
              {
LABEL_42:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)(a1, v36);
                swift_bridgeObjectRelease();
                if (v56)
                {
LABEL_43:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_47:
                  if (v57 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    uint64_t v37 = v57 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v37);
                  }
                  if (v58 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }
                  else
                  {
                    long long v38 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v38);
                  }
                  if (v59 == 2)
                  {
                    char v39 = 0;
                  }
                  else
                  {
                    char v39 = v59 & 1;
                    Hasher._combine(_:)(1u);
                  }
                  Hasher._combine(_:)(v39);
                  if (v60 == 2)
                  {
                    uint64_t v40 = 0;
                  }
                  else
                  {
                    uint64_t v41 = v60 & 1;
                    Hasher._combine(_:)(1u);
                    uint64_t v40 = v41;
                  }
                  Hasher._combine(_:)(v40);
                  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  return swift_unknownObjectRelease();
                }
LABEL_46:
                Hasher._combine(_:)(0);
                goto LABEL_47;
              }
            }
            Hasher._combine(_:)(0);
            if (v56) {
              goto LABEL_43;
            }
            goto LABEL_46;
          }
LABEL_38:
          Hasher._combine(_:)(0);
          if (v21) {
            goto LABEL_34;
          }
          goto LABEL_39;
        }
LABEL_27:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v14);
        swift_bridgeObjectRelease();
        uint64_t v15 = v48;
        if (!v48) {
          goto LABEL_21;
        }
        goto LABEL_28;
      }
      outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v42);
      uint64_t v16 = v42;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v16 = v43;
    }
    outlined retain of LocalePreferences(v16);
    if (!v45) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  Hasher._combine(_:)(1u);

  return swift_unknownObjectRelease();
}

Swift::Int URLResource.hashValue.getter()
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  unsigned char v42[144];
  unsigned char v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  char v60;
  void v61[18];
  unsigned char v62[144];
  unsigned char v63[144];
  unsigned char v64[72];

  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 48);
  Hasher.init(_seed:)();
  id v4 = v1;
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if (v6(ObjectType, v3))
  {
    Swift::UInt8 v7 = 1;
LABEL_8:
    Hasher._combine(_:)(v7);
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v8(v61, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62);
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v63) == 1)
  {
    Swift::UInt8 v7 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v43);
  Hasher._combine(_:)(1u);
  if (v43[0] == 2)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = v43[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  uint64_t v10 = v44;
  if (!v44)
  {
    Hasher._combine(_:)(0);
    uint64_t v15 = v43;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v10 + 16));
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v42);
    uint64_t v15 = v42;
LABEL_23:
    outlined retain of LocalePreferences(v15);
    if (!v45) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v46) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    uint64_t v13 = v47;
    if (!v47) {
      goto LABEL_19;
    }
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v64, v13);
    swift_bridgeObjectRelease();
    long long v14 = v48;
    if (!v48) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = v47;
  if (v47) {
    goto LABEL_26;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  long long v14 = v48;
  if (!v48)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v64, v14);
  swift_bridgeObjectRelease();
LABEL_28:
  long long v17 = v49;
  uint64_t v16 = v50;
  id v19 = v51;
  uint64_t v18 = v52;
  id v20 = v53;
  if (v49)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v21 = v16;
    id v22 = v19;
    uint64_t v23 = v18;
    uint64_t v24 = v20;
    Swift::String v25 = v17;
    _CFObject.hash(into:)();
    if (v16) {
      goto LABEL_30;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    id v30 = v20;
    unint64_t v31 = v16;
    long long v32 = v19;
    uint64_t v33 = v18;
    if (v16)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      Swift::String v26 = v16;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_31;
      }
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v27 = v19;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_32;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v20) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_37;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  uint64_t v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }
LABEL_38:
  Hasher._combine(_:)(0);
  uint64_t v29 = 0;
LABEL_39:

  uint64_t v34 = v54;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v64, v34);
    swift_bridgeObjectRelease();
    uint64_t v35 = v55;
    if (v55) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    if (v56) {
      goto LABEL_42;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(0);
  uint64_t v35 = v55;
  if (!v55) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v64, v35);
  swift_bridgeObjectRelease();
  if (!v56) {
    goto LABEL_45;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v57 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v36 = v57 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v37 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v59 == 2)
  {
    long long v38 = 0;
  }
  else
  {
    long long v38 = v59 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v60 == 2)
  {
    char v39 = 0;
  }
  else
  {
    uint64_t v40 = v60 & 1;
    Hasher._combine(_:)(1u);
    char v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v62, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URLResource()
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;
  void v59[18];
  unsigned char v60[144];
  unsigned char v61[144];
  unsigned char v62[72];

  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 48);
  Hasher.init(_seed:)();
  id v4 = v1;
  NSObject.hash(into:)();

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if (v6(ObjectType, v3))
  {
    Swift::UInt8 v7 = 1;
LABEL_8:
    Hasher._combine(_:)(v7);
    goto LABEL_58;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v8(v59, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v60);
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v61) == 1)
  {
    Swift::UInt8 v7 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)&v41);
  Hasher._combine(_:)(1u);
  if (v41 == 2)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = v41 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  uint64_t v10 = v42;
  if (!v42)
  {
    Hasher._combine(_:)(0);
LABEL_22:
    outlined retain of LocalePreferences(&v41);
    if (!v43) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v10 + 16));
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11) {
    goto LABEL_22;
  }
  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  if (!v43)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v44) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    uint64_t v13 = v45;
    if (!v45) {
      goto LABEL_19;
    }
LABEL_25:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v62, v13);
    swift_bridgeObjectRelease();
    long long v14 = v46;
    if (!v46) {
      goto LABEL_20;
    }
    goto LABEL_26;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = v45;
  if (v45) {
    goto LABEL_25;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  long long v14 = v46;
  if (!v46)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v62, v14);
  swift_bridgeObjectRelease();
LABEL_27:
  uint64_t v16 = v47;
  uint64_t v15 = v48;
  uint64_t v18 = v49;
  long long v17 = v50;
  id v19 = v51;
  if (v47)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v20 = v15;
    uint64_t v21 = v18;
    id v22 = v17;
    uint64_t v23 = v19;
    uint64_t v24 = v16;
    _CFObject.hash(into:)();
    if (v15) {
      goto LABEL_29;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v29 = v19;
    id v30 = v15;
    unint64_t v31 = v18;
    long long v32 = v17;
    if (v15)
    {
LABEL_29:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      Swift::String v25 = v15;
      _CFObject.hash(into:)();

      if (v18) {
        goto LABEL_30;
      }
      goto LABEL_35;
    }
  }
  Hasher._combine(_:)(0);
  if (v18)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    Swift::String v26 = v18;
    _CFObject.hash(into:)();

    if (v17) {
      goto LABEL_31;
    }
LABEL_36:
    Hasher._combine(_:)(0);
    if (v19) {
      goto LABEL_32;
    }
    goto LABEL_37;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  if (!v17) {
    goto LABEL_36;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  uint64_t v27 = v17;
  _CFObject.hash(into:)();

  if (v19)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v28 = v19;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  uint64_t v28 = 0;
LABEL_38:

  uint64_t v33 = v52;
  if (v33)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v62, v33);
    swift_bridgeObjectRelease();
    uint64_t v34 = v53;
    if (v53) {
      goto LABEL_40;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    if (v54) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }
  Hasher._combine(_:)(0);
  uint64_t v34 = v53;
  if (!v53) {
    goto LABEL_43;
  }
LABEL_40:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v62, v34);
  swift_bridgeObjectRelease();
  if (!v54) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v55 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v35 = v55 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }
  if (v56 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v36 = v56 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v57 == 2)
  {
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = v57 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v37);
  if (v58 == 2)
  {
    long long v38 = 0;
  }
  else
  {
    char v39 = v58 & 1;
    Hasher._combine(_:)(1u);
    long long v38 = v39;
  }
  Hasher._combine(_:)(v38);
  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v60, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_58:
  swift_unknownObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance URLResource(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URLResource(void *a1)
{
  return URLResource.encode(to:)(a1);
}

void URL.init(resource:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v59 = 46;
  *(void *)&long long v60 = 0xE100000000000000;
  uint64_t v58 = &v59;
  swift_bridgeObjectRetain();
  specialized BidirectionalCollection.lastIndex(where:)(partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v57, v4, v5);
  char v9 = v8;
  swift_bridgeObjectRelease();
  uint64_t v55 = v6;
  uint64_t v56 = a2;
  swift_bridgeObjectRetain();
  if (v9)
  {
    uint64_t v52 = 0;
    uint64_t v53 = 0;
  }
  else
  {
    uint64_t v10 = String.subscript.getter();
    uint64_t v12 = v11;
    uint64_t v13 = v3;
    uint64_t v15 = v14;
    uint64_t v16 = v4;
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    MEMORY[0x185301F50](v10, v12, v15, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v19 = String.index(after:)();
    unint64_t v20 = specialized Collection.suffix(from:)(v19, v16, v5);
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    swift_bridgeObjectRelease();
    uint64_t v27 = v22;
    uint64_t v3 = v13;
    uint64_t v52 = MEMORY[0x185301F50](v20, v27, v24, v26);
    uint64_t v53 = v28;
    swift_bridgeObjectRelease();
  }
  long long v54 = v3;
  id v29 = objc_msgSend(v3, sel_localizations, v52);
  if (!v29) {
    id v29 = (id)_ContiguousArrayBuffer._asCocoaArray()();
  }
  id v30 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_1821037E0;
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v59) = 1;
  uint64_t v33 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 416);
  swift_unknownObjectRetain();
  uint64_t v34 = v33(&v59, ObjectType, v7);
  uint64_t v36 = v35;
  swift_unknownObjectRelease();
  *(void *)(v31 + 32) = v34;
  *(void *)(v31 + 40) = v36;
  id v37 = objc_msgSend(v30, sel_preferredLocalizationsFromArray_forPreferences_, v29, _ContiguousArrayBuffer._asCocoaArray()());

  swift_unknownObjectRelease();
  if (!v37)
  {
    uint64_t v42 = MEMORY[0x1E4FBC860];
    uint64_t v40 = v54;
    uint64_t v39 = v55;
    uint64_t v41 = v53;
    if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
      goto LABEL_15;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v43 = 0;
    goto LABEL_16;
  }
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }
  uint64_t v38 = swift_dynamicCastClass();
  uint64_t v40 = v54;
  uint64_t v39 = v55;
  uint64_t v41 = v53;
  if (!v38)
  {
    swift_unknownObjectRelease();
    objc_msgSend(v37, sel_copy);
    unint64_t v44 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v42 = specialized _arrayForceCast<A, B>(_:)(v44);

    swift_bridgeObjectRelease();
    if (*(void *)(v42 + 16)) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  uint64_t v42 = v38;

  if (!*(void *)(v42 + 16)) {
    goto LABEL_13;
  }
LABEL_15:
  uint64_t v43 = *(void *)(v42 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_16:
  uint64_t v45 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  if (v41)
  {
    long long v46 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    if (v39) {
      goto LABEL_18;
    }
LABEL_21:
    long long v47 = 0;
    if (v43) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }
  long long v46 = 0;
  if (!v39) {
    goto LABEL_21;
  }
LABEL_18:
  long long v47 = (void *)String._bridgeToObjectiveCImpl()();
  if (v43)
  {
LABEL_19:
    long long v48 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
LABEL_22:
  long long v48 = 0;
LABEL_23:
  id v49 = objc_msgSend(v40, sel_URLForResource_withExtension_subdirectory_localization_, v45, v46, v47, v48);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if (v49)
  {
    URL.init(reference:)(v49, &v59);

    uint64_t v50 = v59;
    long long v51 = v60;
  }
  else
  {
    uint64_t v50 = 0;
    long long v51 = 0uLL;
  }
  *(void *)uint64_t v56 = v50;
  *(_OWORD *)(v56 + 8) = v51;
}

uint64_t specialized static URLResource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  long long v14 = *(_OWORD *)(a2 + 40);
  long long v15 = *(_OWORD *)(a1 + 40);
  type metadata accessor for NSObject();
  if ((static NSObject.== infix(_:_:)() & 1) == 0) {
    goto LABEL_12;
  }
  if (v2 != v6 || v4 != v8)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v11 = 0;
    if ((v10 & 1) == 0) {
      return v11 & 1;
    }
  }
  if (!v5)
  {
    if (!v9)
    {
LABEL_14:
      long long v16 = v14;
      long long v17 = v15;
      char v11 = specialized static Locale.== infix(_:_:)((uint64_t)&v17, (uint64_t)&v16);
      return v11 & 1;
    }
    goto LABEL_12;
  }
  if (!v9)
  {
LABEL_12:
    char v11 = 0;
    return v11 & 1;
  }
  if (v3 == v7 && v5 == v9) {
    goto LABEL_14;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  char v11 = 0;
  if (v12) {
    goto LABEL_14;
  }
  return v11 & 1;
}

unint64_t lazy protocol witness table accessor for type URLResource and conformance URLResource()
{
  unint64_t result = lazy protocol witness table cache variable for type URLResource and conformance URLResource;
  if (!lazy protocol witness table cache variable for type URLResource and conformance URLResource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLResource and conformance URLResource);
  }
  return result;
}

uint64_t destroy for URLResource(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for URLResource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  id v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for URLResource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 48) = v7;
  return a1;
}

uint64_t assignWithTake for URLResource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_unknownObjectRelease();
  *(void *)(a1 + 48) = v6;
  return a1;
}

ValueMetadata *type metadata accessor for URLResource()
{
  return &type metadata for URLResource;
}

unsigned char *storeEnumTagSinglePayload for URLResource.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F2E498);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for URLResource.CodingKeys()
{
  return &unk_1ECA32138;
}

uint64_t specialized URLResource.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6365726964627573 && a2 == 0xEC00000079726F74 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6150656C646E7562 && a2 == 0xEA00000000006874)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

double Locale.Components.init(languageCode:script:languageRegion:)@<D0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  long long v4 = a1[1];
  *(_OWORD *)a4 = *a1;
  *(_OWORD *)(a4 + 16) = v4;
  long long v5 = a2[1];
  *(_OWORD *)(a4 + 32) = *a2;
  *(_OWORD *)(a4 + 48) = v5;
  long long v6 = a3[1];
  *(_OWORD *)(a4 + 64) = *a3;
  *(_OWORD *)(a4 + 80) = v6;
  *(unsigned char *)(a4 + 96) = 16;
  double result = 0.0;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(_WORD *)(a4 + 200) = 1031;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 240) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 272) = 0u;
  *(_OWORD *)(a4 + 288) = 0u;
  *(_OWORD *)(a4 + 304) = 0u;
  *(_OWORD *)(a4 + 320) = 0u;
  *(_OWORD *)(a4 + 336) = 0u;
  return result;
}

uint64_t Locale.Weekday.rawValue.getter()
{
  return qword_182213FF8[*v0];
}

uint64_t Locale.HourCycle.rawValue.getter()
{
  return qword_182214030[*v0];
}

uint64_t static Locale.Subdivision.subdivision(for:)@<X0>(uint64_t *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = (void *)a1[1];
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = 2054847098;
  v3._unint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v3);
  Swift::String v5 = String.lowercased()();
  uint64_t result = v5._countAndFlagsBits;
  a2->_uint64_t countAndFlagsBits = v6;
  a2->_unint64_t object = v7;
  a2[1] = v5;
  return result;
}

uint64_t Locale.Variant.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E4FBB0F0], a3);
}

uint64_t Locale.Collation.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E4FBB0F0], a3);
}

uint64_t Locale.Currency.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E4FBB0F0], a3);
}

uint64_t Locale.NumberingSystem.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E4FBB0F0], a3);
}

uint64_t Locale.Weekday.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  unint64_t object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._unint64_t object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Locale.Weekday.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  char v7 = 7;
  if (v5 < 7) {
    char v7 = v5;
  }
  *a2 = v7;
  return result;
}

uint64_t Locale.HourCycle.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  unint64_t object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._unint64_t object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Locale.HourCycle.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  char v7 = 4;
  if (v5 < 4) {
    char v7 = v5;
  }
  *a2 = v7;
  return result;
}

uint64_t Locale.MeasurementSystem.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E4FBB0F0], a3);
}

uint64_t Locale.Region.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E4FBB100], a3);
}

uint64_t Locale.Subdivision.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E4FBB0F0], a3);
}

uint64_t Locale.LanguageCode.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.Variant.init(_:)(a1, a2, MEMORY[0x1E4FBB0F0], a3);
}

uint64_t Locale.Variant.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, void *a4@<X8>)
{
  uint64_t result = a3();
  *a4 = a1;
  a4[1] = a2;
  a4[2] = result;
  a4[3] = v8;
  return result;
}

uint64_t Locale.Currency.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.LanguageCode.init(stringLiteral:)(a1, a2, MEMORY[0x1E4FBB0F0], a3);
}

uint64_t Locale.NumberingSystem.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.LanguageCode.init(stringLiteral:)(a1, a2, MEMORY[0x1E4FBB0F0], a3);
}

uint64_t Locale.Script.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, Swift::String *a3@<X8>)
{
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v6 = String._capitalized()();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  a3->_uint64_t countAndFlagsBits = a1;
  a3->_unint64_t object = a2;
  a3[1] = v6;
  return result;
}

uint64_t Locale.Weekday.icuIndex.getter()
{
  char v1 = *v0;
  if (one-time initialization token for weekdays != -1) {
    swift_once();
  }
  BOOL v2 = static Locale.Weekday.weekdays;
  swift_bridgeObjectRetain();
  uint64_t v3 = specialized Collection<>.firstIndex(of:)(v1, (uint64_t)v2);
  char v5 = v4;
  uint64_t result = swift_bridgeObjectRelease();
  if (v5) {
    goto LABEL_7;
  }
  uint64_t result = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }
  return result;
}

uint64_t Locale.Weekday.init(_:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if ((result - 8) < 0xFFFFFFF9)
  {
    char v3 = 7;
LABEL_7:
    *a2 = v3;
    return result;
  }
  unsigned int v4 = result;
  if (one-time initialization token for weekdays != -1) {
    uint64_t result = swift_once();
  }
  if (*((void *)static Locale.Weekday.weekdays + 2) >= (unint64_t)v4)
  {
    char v3 = *((unsigned char *)static Locale.Weekday.weekdays + v4 + 31);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  unsigned int v2;
  char v4;

  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_10;
  }
  BOOL v2 = result;
  if (result > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    uint64_t result = swift_once();
    goto LABEL_6;
  }
  if ((result - 8) < 0xFFFFFFF9)
  {
    unsigned int v4 = 7;
LABEL_8:
    *a2 = v4;
    return result;
  }
  if (one-time initialization token for weekdays != -1) {
    goto LABEL_11;
  }
LABEL_6:
  if ((unint64_t)v2 <= *((void *)static Locale.Weekday.weekdays + 2))
  {
    unsigned int v4 = *((unsigned char *)static Locale.Weekday.weekdays + v2 + 31);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

Foundation::ICUCLDRKey __swiftcall ICUCLDRKey.init(_:)(Foundation::ICUCLDRKey result)
{
  *char v1 = result;
  return result;
}

uint64_t (*Locale.Components.languageComponents.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Locale.Components.calendar.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 96);
}

unsigned char *Locale.Components.calendar.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 96) = *result;
  return result;
}

uint64_t (*Locale.Components.calendar.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.collation.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[13];
  uint64_t v3 = v1[14];
  uint64_t v4 = v1[15];
  uint64_t v5 = v1[16];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.collation.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[13], v1[14]);
  __n128 result = v5;
  *(__n128 *)(v1 + 13) = v5;
  v1[15] = v2;
  v1[16] = v3;
  return result;
}

uint64_t (*Locale.Components.collation.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.currency.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[17];
  uint64_t v3 = v1[18];
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.currency.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[17], v1[18]);
  __n128 result = v5;
  *(__n128 *)(v1 + 17) = v5;
  v1[19] = v2;
  v1[20] = v3;
  return result;
}

uint64_t (*Locale.Components.currency.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.numberingSystem.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[21];
  uint64_t v3 = v1[22];
  uint64_t v4 = v1[23];
  uint64_t v5 = v1[24];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.numberingSystem.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[21], v1[22]);
  __n128 result = v5;
  *(__n128 *)(v1 + 21) = v5;
  v1[23] = v2;
  v1[24] = v3;
  return result;
}

uint64_t (*Locale.Components.numberingSystem.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Locale.Components.firstDayOfWeek.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 200);
}

unsigned char *Locale.Components.firstDayOfWeek.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 200) = *result;
  return result;
}

uint64_t (*Locale.Components.firstDayOfWeek.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Locale.Components.hourCycle.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 201);
}

unsigned char *Locale.Components.hourCycle.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 201) = *result;
  return result;
}

uint64_t (*Locale.Components.hourCycle.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.measurementSystem.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[26];
  uint64_t v3 = v1[27];
  uint64_t v4 = v1[28];
  uint64_t v5 = v1[29];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.measurementSystem.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[26], v1[27]);
  __n128 result = v5;
  *((__n128 *)v1 + 13) = v5;
  v1[28] = v2;
  v1[29] = v3;
  return result;
}

uint64_t (*Locale.Components.measurementSystem.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.region.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[30];
  uint64_t v3 = v1[31];
  uint64_t v4 = v1[32];
  uint64_t v5 = v1[33];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.region.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[30], v1[31]);
  __n128 result = v5;
  *((__n128 *)v1 + 15) = v5;
  v1[32] = v2;
  v1[33] = v3;
  return result;
}

uint64_t (*Locale.Components.region.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.subdivision.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[34];
  uint64_t v3 = v1[35];
  uint64_t v4 = v1[36];
  uint64_t v5 = v1[37];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.subdivision.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[34], v1[35]);
  __n128 result = v5;
  *((__n128 *)v1 + 17) = v5;
  v1[36] = v2;
  v1[37] = v3;
  return result;
}

uint64_t (*Locale.Components.subdivision.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 304);
  return swift_unknownObjectRetain();
}

uint64_t Locale.Components.timeZone.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 304) = v2;
  *(void *)(v1 + 312) = v3;
  return result;
}

uint64_t (*Locale.Components.timeZone.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Locale.Components.variant.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[40];
  uint64_t v3 = v1[41];
  uint64_t v4 = v1[42];
  uint64_t v5 = v1[43];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Locale.LanguageCode?(v2, v3);
}

__n128 Locale.Components.variant.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Locale.LanguageCode?(v1[40], v1[41]);
  __n128 result = v5;
  *((__n128 *)v1 + 20) = v5;
  v1[42] = v2;
  v1[43] = v3;
  return result;
}

uint64_t (*Locale.Components.variant.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

unint64_t Locale.Components.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7261646E656C6163;
      break;
    case 2:
      unint64_t result = 0x6F6974616C6C6F63;
      break;
    case 3:
      unint64_t result = 0x79636E6572727563;
      break;
    case 4:
      unint64_t result = 0x6E697265626D756ELL;
      break;
    case 5:
      unint64_t result = 0x7961447473726966;
      break;
    case 6:
      unint64_t result = 0x6C63794372756F68;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    case 8:
      unint64_t result = 0x6E6F69676572;
      break;
    case 9:
      unint64_t result = 0x7369766964627573;
      break;
    case 10:
      unint64_t result = 0x656E6F5A656D6974;
      break;
    case 11:
      unint64_t result = 0x746E6169726176;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Locale.Components.CodingKeys()
{
  return Locale.Components.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Locale.Components.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Locale.Components.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance Locale.Components.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 12;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Components.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Components.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Locale.Components.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Locale.Components.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  Swift::String v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = *v1;
  long long v40 = v1[1];
  long long v41 = v7;
  long long v8 = v1[2];
  long long v38 = v1[3];
  long long v39 = v8;
  long long v37 = v1[4];
  uint64_t v10 = *((void *)v1 + 10);
  uint64_t v9 = *((void *)v1 + 11);
  int v50 = *((unsigned __int8 *)v1 + 96);
  uint64_t v36 = *((void *)v1 + 13);
  uint64_t v35 = *((void *)v1 + 14);
  uint64_t v34 = *((void *)v1 + 15);
  uint64_t v33 = *((void *)v1 + 16);
  long long v31 = *(long long *)((char *)v1 + 136);
  long long v32 = *(long long *)((char *)v1 + 152);
  long long v29 = *(long long *)((char *)v1 + 168);
  long long v30 = *(long long *)((char *)v1 + 184);
  int v28 = *((unsigned __int8 *)v1 + 200);
  int v27 = *((unsigned __int8 *)v1 + 201);
  long long v25 = v1[13];
  long long v26 = v1[14];
  long long v23 = v1[15];
  long long v24 = v1[16];
  long long v21 = v1[17];
  long long v22 = v1[18];
  long long v20 = v1[19];
  long long v18 = v1[20];
  long long v19 = v1[21];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v43 = v41;
  long long v44 = v40;
  long long v45 = v39;
  long long v46 = v38;
  long long v47 = v37;
  uint64_t v48 = v10;
  uint64_t v49 = v9;
  char v51 = 0;
  lazy protocol witness table accessor for type Locale.Language.Components and conformance Locale.Language.Components();
  uint64_t v11 = v42;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v11) {
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  uint64_t v12 = v33;
  uint64_t v13 = v34;
  uint64_t v14 = v35;
  uint64_t v15 = v36;
  LOBYTE(v43) = v50;
  char v51 = 1;
  lazy protocol witness table accessor for type Calendar.Identifier and conformance Calendar.Identifier();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  *(void *)&long long v43 = v15;
  *((void *)&v43 + 1) = v14;
  *(void *)&long long v44 = v13;
  *((void *)&v44 + 1) = v12;
  char v51 = 2;
  lazy protocol witness table accessor for type Locale.Collation and conformance Locale.Collation();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v42 = v4;
  long long v43 = v31;
  long long v44 = v32;
  char v51 = 3;
  lazy protocol witness table accessor for type Locale.Currency and conformance Locale.Currency();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  long long v43 = v29;
  long long v44 = v30;
  char v51 = 4;
  lazy protocol witness table accessor for type Locale.NumberingSystem and conformance Locale.NumberingSystem();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v43) = v28;
  char v51 = 5;
  lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v43) = v27;
  char v51 = 6;
  lazy protocol witness table accessor for type Locale.HourCycle and conformance Locale.HourCycle();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  long long v43 = v25;
  long long v44 = v26;
  char v51 = 7;
  lazy protocol witness table accessor for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  long long v43 = v23;
  long long v44 = v24;
  char v51 = 8;
  lazy protocol witness table accessor for type Locale.Region and conformance Locale.Region();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  long long v43 = v21;
  long long v44 = v22;
  char v51 = 9;
  lazy protocol witness table accessor for type Locale.Subdivision and conformance Locale.Subdivision();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  long long v43 = v20;
  char v51 = 10;
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  long long v43 = v18;
  long long v44 = v19;
  char v51 = 11;
  lazy protocol witness table accessor for type Locale.Variant and conformance Locale.Variant();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(void, uint64_t))(v4 + 8))(0, v3);
}

Swift::Int Locale.Components.hashValue.getter()
{
  Hasher.init(_seed:)();
  Locale.Components.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t *Locale.Components.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Components.CodingKeys>);
  uint64_t v5 = *(void *)(v106 - 8);
  MEMORY[0x1F4188790](v106);
  long long v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v177 = v2;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    uint64_t v107 = 0;
    uint64_t v108 = 0;
    uint64_t v110 = 0;
    uint64_t v111 = 0;
    uint64_t v109 = 0;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
LABEL_4:
    outlined consume of Locale.LanguageCode?(v13, v12);
    outlined consume of Locale.LanguageCode?(v11, v10);
    outlined consume of Locale.LanguageCode?(v9, v8);
    outlined consume of Locale.LanguageCode?(v116, v117);
    outlined consume of Locale.LanguageCode?(v112, v113);
    outlined consume of Locale.LanguageCode?(v108, v109);
    swift_unknownObjectRelease();
    return (uint64_t *)outlined consume of Locale.LanguageCode?(0, 0);
  }
  uint64_t v105 = v5;
  LOBYTE(v120[0]) = 0;
  lazy protocol witness table accessor for type Locale.Language.Components and conformance Locale.Language.Components();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v177 = 0;
  char v81 = a2;
  unint64_t v82 = a1;
  uint64_t v15 = v125;
  uint64_t v16 = v126;
  uint64_t v17 = v127;
  uint64_t v18 = v128;
  uint64_t v19 = v129;
  uint64_t v99 = v130;
  uint64_t v100 = v123;
  uint64_t v20 = v131;
  uint64_t v21 = v132;
  LOBYTE(v120[0]) = 1;
  uint64_t v104 = v121;
  uint64_t v84 = v122;
  uint64_t v101 = v124;
  outlined copy of Locale.LanguageCode?(v121, v122);
  uint64_t v85 = v16;
  uint64_t v86 = v15;
  uint64_t v102 = v18;
  uint64_t v103 = v17;
  uint64_t v22 = v106;
  outlined copy of Locale.LanguageCode?(v15, v16);
  uint64_t v83 = v19;
  uint64_t v23 = v19;
  uint64_t v24 = v99;
  outlined copy of Locale.LanguageCode?(v23, v99);
  lazy protocol witness table accessor for type Calendar.Identifier and conformance Calendar.Identifier();
  uint64_t v25 = v177;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v105 + 8))(v7, v22);
    uint64_t v26 = v84;
    outlined consume of Locale.LanguageCode?(v104, v84);
    uint64_t v28 = v85;
    uint64_t v27 = v86;
    outlined consume of Locale.LanguageCode?(v86, v85);
    uint64_t v29 = v83;
    outlined consume of Locale.LanguageCode?(v83, v24);
    uint64_t v107 = 0;
    uint64_t v108 = 0;
    uint64_t v110 = 0;
    uint64_t v111 = 0;
    uint64_t v109 = 0;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    uint64_t v89 = 0;
    uint64_t v90 = 0;
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    uint64_t v30 = v29;
    uint64_t v31 = v24;
    uint64_t v177 = v25;
    uint64_t v32 = v30;
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
    outlined consume of Locale.LanguageCode?(v104, v26);
    outlined consume of Locale.LanguageCode?(v27, v28);
    outlined consume of Locale.LanguageCode?(v32, v31);
    uint64_t v13 = v95;
    uint64_t v12 = v96;
    uint64_t v10 = v92;
    uint64_t v11 = v91;
    uint64_t v8 = v88;
    uint64_t v9 = v94;
    goto LABEL_4;
  }
  uint64_t v79 = v21;
  uint64_t v80 = v20;
  int v33 = v121;
  LOBYTE(v120[0]) = 2;
  lazy protocol witness table accessor for type Locale.Collation and conformance Locale.Collation();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v34 = v121;
  uint64_t v35 = v122;
  uint64_t v36 = v123;
  uint64_t v37 = v124;
  LOBYTE(v120[0]) = 3;
  outlined copy of Locale.LanguageCode?(v121, v122);
  lazy protocol witness table accessor for type Locale.Currency and conformance Locale.Currency();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v97 = v36;
  uint64_t v98 = v37;
  uint64_t v95 = v34;
  uint64_t v96 = v35;
  uint64_t v38 = v121;
  uint64_t v39 = v122;
  uint64_t v40 = v123;
  uint64_t v41 = v124;
  LOBYTE(v120[0]) = 4;
  outlined copy of Locale.LanguageCode?(v121, v122);
  lazy protocol witness table accessor for type Locale.NumberingSystem and conformance Locale.NumberingSystem();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v92 = v39;
  uint64_t v93 = v40;
  uint64_t v91 = v38;
  uint64_t v87 = v41;
  uint64_t v42 = v122;
  uint64_t v43 = v123;
  uint64_t v44 = v124;
  LOBYTE(v120[0]) = 5;
  uint64_t v94 = v121;
  outlined copy of Locale.LanguageCode?(v121, v122);
  lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v89 = v43;
  uint64_t v90 = v44;
  uint64_t v88 = v42;
  int v45 = v121;
  LOBYTE(v120[0]) = 6;
  lazy protocol witness table accessor for type Locale.HourCycle and conformance Locale.HourCycle();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v46 = v121;
  LOBYTE(v120[0]) = 7;
  lazy protocol witness table accessor for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v47 = v94;
  uint64_t v177 = 0;
  int v77 = v46;
  int v78 = v45;
  uint64_t v48 = v121;
  uint64_t v49 = v122;
  uint64_t v50 = v123;
  uint64_t v51 = v124;
  LOBYTE(v120[0]) = 8;
  outlined copy of Locale.LanguageCode?(v121, v122);
  lazy protocol witness table accessor for type Locale.Region and conformance Locale.Region();
  uint64_t v52 = v177;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v177 = v52;
  uint64_t v118 = v50;
  uint64_t v119 = v51;
  uint64_t v116 = v48;
  uint64_t v117 = v49;
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v105 + 8))(v7, v106);
    outlined consume of Locale.LanguageCode?(v48, v49);
    outlined consume of Locale.LanguageCode?(v47, v88);
    outlined consume of Locale.LanguageCode?(v91, v92);
    outlined consume of Locale.LanguageCode?(v95, v96);
    uint64_t v26 = v84;
    outlined consume of Locale.LanguageCode?(v104, v84);
    uint64_t v28 = v85;
    uint64_t v27 = v86;
    outlined consume of Locale.LanguageCode?(v86, v85);
    uint64_t v32 = v83;
    uint64_t v31 = v99;
    outlined consume of Locale.LanguageCode?(v83, v99);
    uint64_t v107 = 0;
    uint64_t v108 = 0;
    uint64_t v110 = 0;
    uint64_t v111 = 0;
    uint64_t v109 = 0;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    goto LABEL_8;
  }
  int v53 = v33;
  uint64_t v54 = v87;
  LOBYTE(v120[0]) = 9;
  uint64_t v112 = v121;
  uint64_t v113 = v122;
  uint64_t v114 = v123;
  uint64_t v115 = v124;
  outlined copy of Locale.LanguageCode?(v121, v122);
  lazy protocol witness table accessor for type Locale.Subdivision and conformance Locale.Subdivision();
  uint64_t v55 = v177;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v177 = v55;
  if (v55)
  {
    (*(void (**)(char *, uint64_t))(v105 + 8))(v7, v106);
    outlined consume of Locale.LanguageCode?(v112, v113);
    outlined consume of Locale.LanguageCode?(v116, v117);
    outlined consume of Locale.LanguageCode?(v94, v88);
    outlined consume of Locale.LanguageCode?(v91, v92);
    outlined consume of Locale.LanguageCode?(v95, v96);
    uint64_t v26 = v84;
    outlined consume of Locale.LanguageCode?(v104, v84);
    uint64_t v28 = v85;
    uint64_t v27 = v86;
    outlined consume of Locale.LanguageCode?(v86, v85);
    uint64_t v32 = v83;
    uint64_t v31 = v99;
    outlined consume of Locale.LanguageCode?(v83, v99);
    uint64_t v107 = 0;
    uint64_t v108 = 0;
    uint64_t v110 = 0;
    uint64_t v111 = 0;
    uint64_t v109 = 0;
    goto LABEL_8;
  }
  LOBYTE(v120[0]) = 10;
  uint64_t v108 = v121;
  uint64_t v109 = v122;
  uint64_t v110 = v123;
  uint64_t v111 = v124;
  outlined copy of Locale.LanguageCode?(v121, v122);
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  uint64_t v56 = v177;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v177 = v56;
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v105 + 8))(v7, v106);
    outlined consume of Locale.LanguageCode?(v108, v109);
    outlined consume of Locale.LanguageCode?(v112, v113);
    outlined consume of Locale.LanguageCode?(v116, v117);
    outlined consume of Locale.LanguageCode?(v94, v88);
    outlined consume of Locale.LanguageCode?(v91, v92);
    outlined consume of Locale.LanguageCode?(v95, v96);
    uint64_t v26 = v84;
    outlined consume of Locale.LanguageCode?(v104, v84);
    uint64_t v28 = v85;
    uint64_t v27 = v86;
    outlined consume of Locale.LanguageCode?(v86, v85);
    uint64_t v32 = v83;
    uint64_t v31 = v99;
    outlined consume of Locale.LanguageCode?(v83, v99);
    uint64_t v107 = 0;
    goto LABEL_8;
  }
  uint64_t v57 = v121;
  uint64_t v58 = v122;
  char v169 = 11;
  lazy protocol witness table accessor for type Locale.Variant and conformance Locale.Variant();
  uint64_t v107 = v57;
  swift_unknownObjectRetain();
  uint64_t v59 = v177;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v177 = v59;
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v105 + 8))(v7, v106);
    swift_unknownObjectRelease();
    outlined consume of Locale.LanguageCode?(v108, v109);
    outlined consume of Locale.LanguageCode?(v112, v113);
    outlined consume of Locale.LanguageCode?(v116, v117);
    outlined consume of Locale.LanguageCode?(v94, v88);
    outlined consume of Locale.LanguageCode?(v91, v92);
    outlined consume of Locale.LanguageCode?(v95, v96);
    uint64_t v26 = v84;
    outlined consume of Locale.LanguageCode?(v104, v84);
    uint64_t v28 = v85;
    uint64_t v27 = v86;
    outlined consume of Locale.LanguageCode?(v86, v85);
    uint64_t v32 = v83;
    uint64_t v31 = v99;
    outlined consume of Locale.LanguageCode?(v83, v99);
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t))(v105 + 8))(v7, v106);
  uint64_t v60 = v170;
  uint64_t v61 = v171;
  uint64_t v62 = v172;
  uint64_t v106 = v173;
  outlined copy of Locale.LanguageCode?(v170, v171);
  outlined consume of Locale.LanguageCode?(0, 0);
  v120[0] = v104;
  v120[1] = v84;
  v120[2] = v100;
  v120[3] = v101;
  v120[4] = v86;
  v120[5] = v85;
  v120[6] = v103;
  v120[7] = v102;
  v120[8] = v83;
  v120[9] = v99;
  v120[10] = v80;
  v120[11] = v79;
  int v75 = v53;
  LOBYTE(v120[12]) = v53;
  v120[13] = v95;
  v120[14] = v96;
  v120[15] = v97;
  v120[16] = v98;
  v120[17] = v91;
  v120[18] = v92;
  v120[19] = v93;
  v120[20] = v54;
  v120[21] = v94;
  v120[22] = v88;
  v120[23] = v89;
  v120[24] = v90;
  LOBYTE(v120[25]) = v78;
  BYTE1(v120[25]) = v77;
  v120[26] = v116;
  v120[27] = v117;
  v120[28] = v118;
  v120[29] = v119;
  v120[30] = v112;
  v120[31] = v113;
  v120[32] = v114;
  v120[33] = v115;
  uint64_t v64 = v108;
  uint64_t v63 = v109;
  v120[34] = v108;
  v120[35] = v109;
  v120[36] = v110;
  v120[37] = v111;
  v120[38] = v107;
  uint64_t v76 = v58;
  v120[39] = v58;
  uint64_t v105 = v60;
  v120[40] = v60;
  uint64_t v73 = v62;
  uint64_t v74 = v61;
  v120[41] = v61;
  v120[42] = v62;
  v120[43] = v106;
  outlined retain of Locale.Components(v120);
  outlined consume of Locale.LanguageCode?(v60, v61);
  swift_unknownObjectRelease();
  outlined consume of Locale.LanguageCode?(v64, v63);
  outlined consume of Locale.LanguageCode?(v112, v113);
  outlined consume of Locale.LanguageCode?(v116, v117);
  outlined consume of Locale.LanguageCode?(v94, v88);
  outlined consume of Locale.LanguageCode?(v91, v92);
  outlined consume of Locale.LanguageCode?(v95, v96);
  uint64_t v65 = v100;
  uint64_t v66 = v101;
  outlined consume of Locale.LanguageCode?(v104, v84);
  uint64_t v68 = v102;
  uint64_t v67 = v103;
  outlined consume of Locale.LanguageCode?(v86, v85);
  uint64_t v69 = v83;
  uint64_t v70 = v99;
  uint64_t v72 = v79;
  uint64_t v71 = v80;
  outlined consume of Locale.LanguageCode?(v83, v99);
  memcpy(v81, v120, 0x160uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
  uint64_t v121 = v104;
  uint64_t v122 = v84;
  uint64_t v123 = v65;
  uint64_t v124 = v66;
  uint64_t v125 = v86;
  uint64_t v126 = v85;
  uint64_t v127 = v67;
  uint64_t v128 = v68;
  uint64_t v129 = v69;
  uint64_t v130 = v70;
  uint64_t v131 = v71;
  uint64_t v132 = v72;
  char v133 = v75;
  uint64_t v135 = v95;
  uint64_t v136 = v96;
  uint64_t v137 = v97;
  uint64_t v138 = v98;
  *(_DWORD *)char v134 = v176[0];
  *(_DWORD *)&v134[3] = *(_DWORD *)((char *)v176 + 3);
  uint64_t v139 = v91;
  uint64_t v140 = v92;
  uint64_t v141 = v93;
  uint64_t v142 = v87;
  uint64_t v143 = v94;
  uint64_t v144 = v88;
  uint64_t v145 = v89;
  uint64_t v146 = v90;
  char v147 = v78;
  char v148 = v77;
  int v149 = v174;
  __int16 v150 = v175;
  uint64_t v151 = v116;
  uint64_t v152 = v117;
  uint64_t v153 = v118;
  uint64_t v154 = v119;
  uint64_t v155 = v112;
  uint64_t v156 = v113;
  uint64_t v157 = v114;
  uint64_t v158 = v115;
  uint64_t v159 = v108;
  uint64_t v160 = v109;
  uint64_t v161 = v110;
  uint64_t v162 = v111;
  uint64_t v163 = v107;
  uint64_t v164 = v76;
  uint64_t v165 = v105;
  uint64_t v166 = v74;
  uint64_t v167 = v73;
  uint64_t v168 = v106;
  return outlined release of Locale.Components(&v121);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Locale.Components()
{
  Hasher.init(_seed:)();
  Locale.Components.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.Components()
{
  Hasher.init(_seed:)();
  Locale.Components.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t *protocol witness for Decodable.init(from:) in conformance Locale.Components@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return Locale.Components.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.Components(void *a1)
{
  return Locale.Components.encode(to:)(a1);
}

uint64_t Locale.Subdivision.debugDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Locale.LanguageCode.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x1E4FBB0F0]);
}

uint64_t (*Locale.LanguageCode.identifier.modify(void *a1))(void *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t Locale.LanguageCode.identifier.modify(void *a1, char a2)
{
  return Locale.LanguageCode.identifier.modify(a1, a2, MEMORY[0x1E4FBB0F0]);
}

BOOL static Locale.LanguageCode.IdentifierType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Locale.LanguageCode.IdentifierType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Locale.LanguageCode.IdentifierType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t one-time initialization function for unidentified()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.LanguageCode.unidentified = 6581877;
  *(void *)algn_1E8EDDB38 = 0xE300000000000000;
  xmmword_1E8EDDB40 = (__int128)v1;
  return result;
}

uint64_t static Locale.LanguageCode.unidentified.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for unidentified != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E8EDDB38;
  long long v3 = xmmword_1E8EDDB40;
  *(void *)a1 = static Locale.LanguageCode.unidentified;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for uncoded()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.LanguageCode.uncoded = 7563629;
  *(void *)algn_1E8EDDB58 = 0xE300000000000000;
  xmmword_1E8EDDB60 = (__int128)v1;
  return result;
}

uint64_t static Locale.LanguageCode.uncoded.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for uncoded != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E8EDDB58;
  long long v3 = xmmword_1E8EDDB60;
  *(void *)a1 = static Locale.LanguageCode.uncoded;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for multiple()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.LanguageCode.multiple = 7107949;
  *(void *)algn_1E8EDDB78 = 0xE300000000000000;
  xmmword_1E8EDDB80 = (__int128)v1;
  return result;
}

uint64_t static Locale.LanguageCode.multiple.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for multiple != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E8EDDB78;
  long long v3 = xmmword_1E8EDDB80;
  *(void *)a1 = static Locale.LanguageCode.multiple;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for unavailable()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.LanguageCode.unavailable = 7895162;
  *(void *)algn_1E8EDDB98 = 0xE300000000000000;
  xmmword_1E8EDDBA0 = (__int128)v1;
  return result;
}

uint64_t static Locale.LanguageCode.unavailable.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for unavailable != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E8EDDB98;
  long long v3 = xmmword_1E8EDDBA0;
  *(void *)a1 = static Locale.LanguageCode.unavailable;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.LanguageCode.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.LanguageCode.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Locale.LanguageCode.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.LanguageCode.CodingKeys>, MEMORY[0x1E4FBB0F0], (void (*)(void))lazy protocol witness table accessor for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys, a2);
}

uint64_t Locale.LanguageCode.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

{
  unsigned char v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Locale.LanguageCode()
{
  return String.hash(into:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.LanguageCode@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.LanguageCode(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.LanguageCode@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.LanguageCode(a1, MEMORY[0x1E4FBB0F0], a2);
}

uint64_t Locale.Script.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, Swift::String *a3@<X8>)
{
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v6 = String._capitalized()();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  a3->_uint64_t countAndFlagsBits = a1;
  a3->_unint64_t object = a2;
  a3[1] = v6;
  return result;
}

uint64_t (*Locale.Script.identifier.modify(void *a1))()
{
  long long v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = v1[1];
  *long long v3 = *v1;
  v3[1] = v4;
  swift_bridgeObjectRetain();
  return Locale.Script.identifier.modify;
}

uint64_t static Locale.Script.unknown.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for unknown != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E8EDDBB8;
  long long v3 = xmmword_1E8EDDBC0;
  *(void *)a1 = static Locale.Script.unknown;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Script.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Script.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Locale.Script.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Script.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Script.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys, a2);
}

uint64_t Locale.Script.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Script@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Script.init(from:)(a1, a2);
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.Script@<X0>(uint64_t *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v4 = *a1;
  long long v3 = (void *)a1[1];
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v5 = String._capitalized()();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  a2->_uint64_t countAndFlagsBits = v4;
  a2->_unint64_t object = v3;
  a2[1] = v5;
  return result;
}

void static Locale.Region.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 26482;
  a1[1] = 0xE200000000000000;
}

uint64_t Locale.Region.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x1E4FBB100]);
}

uint64_t (*Locale.Region.identifier.modify(void *a1))(void *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.Region.identifier.modify;
}

uint64_t Locale.Region.identifier.modify(void *a1, char a2)
{
  return Locale.LanguageCode.identifier.modify(a1, a2, MEMORY[0x1E4FBB100]);
}

uint64_t static Locale.Region.unknown.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for unknown != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E8EDDBD8;
  long long v3 = xmmword_1E8EDDBE0;
  *(void *)a1 = static Locale.Region.unknown;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t static Locale.Region.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Region.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Region.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Locale.Region.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Region.CodingKeys>, MEMORY[0x1E4FBB100], (void (*)(void))lazy protocol witness table accessor for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys, a2);
}

uint64_t Locale.Region.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

Swift::Int Locale.LanguageCode.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Region@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Region.init(from:)(a1, a2);
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.Region@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.LanguageCode(a1, MEMORY[0x1E4FBB100], a2);
}

void static Locale.Collation.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 28515;
  a1[1] = 0xE200000000000000;
}

void static Locale.Collation.legacyKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 0x6F6974616C6C6F63;
  a1[1] = 0xE90000000000006ELL;
}

uint64_t Locale.Collation.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.LanguageCode.init(stringLiteral:)(a1, a2, MEMORY[0x1E4FBB0F0], a3);
}

uint64_t key path setter for Locale.Script.identifier : Locale.Script(uint64_t *a1, Swift::String *a2)
{
  uint64_t v4 = *a1;
  long long v3 = (void *)a1[1];
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v5 = String._capitalized()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a2[1] = v5;
  uint64_t result = swift_bridgeObjectRelease();
  a2->_uint64_t countAndFlagsBits = v4;
  a2->_unint64_t object = v3;
  return result;
}

uint64_t Locale.Script.identifier.setter(uint64_t a1, void *a2)
{
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v5 = String._capitalized()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2[1] = v5;
  uint64_t result = swift_bridgeObjectRelease();
  v2->_uint64_t countAndFlagsBits = a1;
  v2->_unint64_t object = a2;
  return result;
}

uint64_t (*Locale.Collation.identifier.modify(void *a1))()
{
  long long v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = v1[1];
  *long long v3 = *v1;
  v3[1] = v4;
  swift_bridgeObjectRetain();
  return Locale.Script.identifier.modify;
}

void Locale.Script.identifier.modify(uint64_t **a1, char a2)
{
  long long v3 = *a1;
  uint64_t v5 = **a1;
  uint64_t v4 = (void *)(*a1)[1];
  v3[2] = v5;
  Swift::String v6 = (Swift::String *)v3[4];
  v3[3] = (uint64_t)v4;
  swift_bridgeObjectRetain_n();
  if (a2)
  {
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    Swift::String v7 = String._capitalized()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6[1] = v7;
    swift_bridgeObjectRelease();
    v6->_uint64_t countAndFlagsBits = v5;
    v6->_unint64_t object = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    String.init<A>(_:)();
    Swift::String v8 = String._capitalized()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6[1] = v8;
    swift_bridgeObjectRelease();
    v6->_uint64_t countAndFlagsBits = v5;
    v6->_unint64_t object = v4;
  }

  free(v3);
}

uint64_t one-time initialization function for searchRules()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.Collation.searchRules = 0x686372616573;
  *(void *)algn_1E8EDDBF8 = 0xE600000000000000;
  xmmword_1E8EDDC00 = (__int128)v1;
  return result;
}

uint64_t static Locale.Collation.searchRules.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for searchRules != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E8EDDBF8;
  long long v3 = xmmword_1E8EDDC00;
  *(void *)a1 = static Locale.Collation.searchRules;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for standard()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.Collation.standard = 0x647261646E617473;
  *(void *)algn_1E8EDDC18 = 0xE800000000000000;
  xmmword_1E8EDDC20 = (__int128)v1;
  return result;
}

uint64_t static Locale.Collation.standard.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for standard != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E8EDDC18;
  long long v3 = xmmword_1E8EDDC20;
  *(void *)a1 = static Locale.Collation.standard;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Collation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Collation.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Locale.Collation.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Script.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Collation.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys, a2);
}

uint64_t Locale.Script.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v23 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  uint64_t v22 = a4;
  if (v4)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    a3();
    dispatch thunk of Decoder.container<A>(keyedBy:)();
    LOBYTE(v24[0]) = 0;
    uint64_t v10 = v25;
    uint64_t countAndFlagsBits = KeyedDecodingContainer.decode(_:forKey:)();
    unint64_t object = v17;
    LOBYTE(v24[0]) = 1;
    uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v13 = v18;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v10);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v24, v24[3]);
    uint64_t v11 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v13 = v12;
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    v24[0] = v11;
    v24[1] = v13;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    Swift::String v14 = String._capitalized()();
    uint64_t countAndFlagsBits = v14._countAndFlagsBits;
    unint64_t object = v14._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = v22;
  *uint64_t v22 = v11;
  v19[1] = v13;
  v19[2] = countAndFlagsBits;
  v19[3] = (uint64_t)object;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Locale.Collation.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Collation@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Collation.init(from:)(a1, a2);
}

void static Locale.Currency.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 30051;
  a1[1] = 0xE200000000000000;
}

void static Locale.Currency.legacyKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 0x79636E6572727563;
  a1[1] = 0xE800000000000000;
}

uint64_t Locale.Currency.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x1E4FBB0F0]);
}

uint64_t (*Locale.Currency.identifier.modify(void *a1))(void *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Currency.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Currency.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Locale.Currency.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Currency.CodingKeys>, MEMORY[0x1E4FBB0F0], (void (*)(void))lazy protocol witness table accessor for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys, a2);
}

uint64_t Locale.Currency.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Currency@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Currency.init(from:)(a1, a2);
}

void static Locale.NumberingSystem.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 30062;
  a1[1] = 0xE200000000000000;
}

void static Locale.NumberingSystem.legacyKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 0x737265626D756ELL;
  a1[1] = 0xE700000000000000;
}

uint64_t Locale.NumberingSystem.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x1E4FBB0F0]);
}

uint64_t (*Locale.NumberingSystem.identifier.modify(void *a1))(void *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t one-time initialization function for latn()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.NumberingSystem.latn = 1853120876;
  qword_1E8EDDC38 = 0xE400000000000000;
  xmmword_1E8EDDC40 = (__int128)v1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.NumberingSystem.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.NumberingSystem.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Locale.NumberingSystem.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.NumberingSystem.CodingKeys>, MEMORY[0x1E4FBB0F0], (void (*)(void))lazy protocol witness table accessor for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys, a2);
}

uint64_t Locale.NumberingSystem.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.NumberingSystem@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.NumberingSystem.init(from:)(a1, a2);
}

void static Locale.Weekday.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 30566;
  a1[1] = 0xE200000000000000;
}

uint64_t static Locale.Weekday.weekdays.getter()
{
  if (one-time initialization token for weekdays != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Locale.Weekday(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Locale.Weekday@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Locale.Weekday.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Locale.Weekday(void *a1@<X8>)
{
  *a1 = qword_182213FF8[*v1];
  a1[1] = 0xE300000000000000;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Weekday()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.Weekday()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Locale.Weekday()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Locale.Weekday()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.Weekday()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

void static Locale.HourCycle.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 25448;
  a1[1] = 0xE200000000000000;
}

void static Locale.HourCycle.legacyKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 0x7372756F68;
  a1[1] = 0xE500000000000000;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Locale.HourCycle(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Locale.HourCycle@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  return Locale.HourCycle.init(rawValue:)(*a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Locale.HourCycle(void *a1@<X8>)
{
  *a1 = qword_182214030[*v1];
  a1[1] = 0xE300000000000000;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.HourCycle()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Locale.HourCycle()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Locale.HourCycle()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Locale.HourCycle()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.HourCycle()
{
  return Hasher._finalize()();
}

void static Locale.MeasurementSystem.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 29549;
  a1[1] = 0xE200000000000000;
}

void static Locale.MeasurementSystem.legacyKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 0x6572757361656DLL;
  a1[1] = 0xE700000000000000;
}

uint64_t Locale.MeasurementSystem.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.LanguageCode.init(stringLiteral:)(a1, a2, MEMORY[0x1E4FBB0F0], a3);
}

uint64_t Locale.MeasurementSystem.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x1E4FBB0F0]);
}

uint64_t (*Locale.MeasurementSystem.identifier.modify(void *a1))(void *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t one-time initialization function for metric()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.MeasurementSystem.metric = 0x63697274656DLL;
  *(void *)algn_1E8ED3188 = 0xE600000000000000;
  xmmword_1E8ED3190 = (__int128)v1;
  return result;
}

uint64_t static Locale.MeasurementSystem.measurementSystems.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.MeasurementSystem>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18210C6B0;
  if (one-time initialization token for metric != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)algn_1E8ED3188;
  long long v2 = xmmword_1E8ED3190;
  *(void *)(v0 + 32) = static Locale.MeasurementSystem.metric;
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v0 + 48) = v2;
  uint64_t v3 = one-time initialization token for us;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v4 = *(void *)algn_1E8ED61B8;
  long long v5 = xmmword_1E8ED61C0;
  *(void *)(v0 + 64) = static Locale.MeasurementSystem.us;
  *(void *)(v0 + 72) = v4;
  *(_OWORD *)(v0 + 80) = v5;
  uint64_t v6 = one-time initialization token for uk;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = unk_1E8ED2BA0;
  long long v8 = xmmword_1E8ED2BA8;
  *(void *)(v0 + 96) = static Locale.MeasurementSystem.uk;
  *(void *)(v0 + 104) = v7;
  *(_OWORD *)(v0 + 112) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.MeasurementSystem.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.MeasurementSystem.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Locale.MeasurementSystem.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.MeasurementSystem.CodingKeys>, MEMORY[0x1E4FBB0F0], (void (*)(void))lazy protocol witness table accessor for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys, a2);
}

uint64_t Locale.MeasurementSystem.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.MeasurementSystem@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.MeasurementSystem.init(from:)(a1, a2);
}

void static Locale.Subdivision.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 25715;
  a1[1] = 0xE200000000000000;
}

uint64_t Locale.Subdivision.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.LanguageCode.init(stringLiteral:)(a1, a2, MEMORY[0x1E4FBB0F0], a3);
}

uint64_t Locale.Subdivision._identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t Locale.Subdivision.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x1E4FBB0F0]);
}

uint64_t (*Locale.Subdivision.identifier.modify(void *a1))(void *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Locale.Subdivision.CodingKeys()
{
  if (*v0) {
    return 0x6669746E6564695FLL;
  }
  else {
    return 0xD000000000000015;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Locale.Subdivision.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Locale.Subdivision.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Subdivision.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Subdivision.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Locale.Subdivision.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Subdivision.CodingKeys>, MEMORY[0x1E4FBB0F0], (void (*)(void))lazy protocol witness table accessor for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys, a2);
}

uint64_t Locale.Subdivision.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Subdivision@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Subdivision.init(from:)(a1, a2);
}

void static Locale.Variant.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 24950;
  a1[1] = 0xE200000000000000;
}

uint64_t Locale.Variant.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return Locale.LanguageCode.init(stringLiteral:)(a1, a2, MEMORY[0x1E4FBB0F0], a3);
}

uint64_t key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = a5(*a1, v7);
  uint64_t v10 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a2[2] = v8;
  a2[3] = v10;
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v6;
  a2[1] = v7;
  return result;
}

uint64_t Locale.Variant.identifier.setter(uint64_t a1, uint64_t a2)
{
  return Locale.LanguageCode.identifier.setter(a1, a2, MEMORY[0x1E4FBB0F0]);
}

uint64_t Locale.LanguageCode.identifier.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = a3();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  v3[2] = v6;
  v3[3] = v8;
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v3 = a1;
  v3[1] = a2;
  return result;
}

uint64_t (*Locale.Variant.identifier.modify(void *a1))(void *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Locale.LanguageCode.identifier.modify;
}

uint64_t Locale.LanguageCode.identifier.modify(void *a1, char a2, uint64_t (*a3)(void, uint64_t))
{
  uint64_t v4 = a1[1];
  long long v5 = (void *)a1[2];
  uint64_t v6 = *a1;
  uint64_t v7 = a3(*a1, v4);
  uint64_t v9 = v8;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v5[2] = v7;
    v5[3] = v9;
    swift_bridgeObjectRelease();
    *long long v5 = v6;
    v5[1] = v4;
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v5[2] = v7;
    v5[3] = v9;
    uint64_t result = swift_bridgeObjectRelease();
    *long long v5 = v6;
    v5[1] = v4;
  }
  return result;
}

uint64_t one-time initialization function for posix()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.Variant.posix = 0x7869736F70;
  *(void *)algn_1E8EDDC58 = 0xE500000000000000;
  xmmword_1E8EDDC60 = (__int128)v1;
  return result;
}

uint64_t static Locale.Variant.posix.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for posix != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E8EDDC58;
  long long v3 = xmmword_1E8EDDC60;
  *(void *)a1 = static Locale.Variant.posix;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t Locale.LanguageCode.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Locale.Variant.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Locale.Variant.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Locale.Variant.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.LanguageCode.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Locale.Variant.CodingKeys>, MEMORY[0x1E4FBB0F0], (void (*)(void))lazy protocol witness table accessor for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys, a2);
}

uint64_t Locale.LanguageCode.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, void (*a4)(void)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v27 = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v5)
  {
    uint64_t v23 = a5;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    v27();
    dispatch thunk of Decoder.container<A>(keyedBy:)();
    LOBYTE(v26[0]) = 0;
    uint64_t v12 = v25;
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v17 = v16;
    LOBYTE(v26[0]) = 1;
    uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v12);

    a5 = v23;
    uint64_t v21 = v18;
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v26, v26[3]);
    uint64_t v21 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v20 = v13;
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    uint64_t v15 = a3(v21, v20);
    uint64_t v17 = v14;
    swift_bridgeObjectRelease();
  }
  *a5 = v21;
  a5[1] = v20;
  a5[2] = v15;
  a5[3] = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Locale.Variant.encode(to:)(void *a1)
{
  return Locale.LanguageCode.encode(to:)(a1);
}

Swift::Int Locale.Collation.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Locale.Variant@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Locale.Variant.init(from:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Locale.Collation()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Locale.LanguageCode@<X0>(void *a1@<X0>, uint64_t (*a2)(void, uint64_t)@<X3>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t result = a2(*a1, v5);
  *a3 = v4;
  a3[1] = v5;
  a3[2] = result;
  a3[3] = v7;
  return result;
}

Swift::Int ICULegacyKey.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ICUCLDRKey()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICULegacyKey()
{
  return Hasher._finalize()();
}

BOOL specialized static Locale.Components.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 96);
  uint64_t v87 = *(void *)(a1 + 128);
  uint64_t v88 = *(void *)(a1 + 112);
  uint64_t v85 = *(void *)(a1 + 144);
  uint64_t v86 = *(void *)(a1 + 120);
  uint64_t v82 = *(void *)(a1 + 152);
  uint64_t v83 = *(void *)(a1 + 104);
  uint64_t v84 = *(void *)(a1 + 160);
  uint64_t v74 = *(void *)(a1 + 168);
  uint64_t v81 = *(void *)(a1 + 176);
  uint64_t v77 = *(void *)(a1 + 184);
  uint64_t v78 = *(void *)(a1 + 136);
  uint64_t v79 = *(void *)(a1 + 192);
  int v72 = *(unsigned __int8 *)(a1 + 200);
  int v70 = *(unsigned __int8 *)(a1 + 201);
  uint64_t v68 = *(void *)(a1 + 216);
  uint64_t v65 = *(void *)(a1 + 224);
  uint64_t v66 = *(void *)(a1 + 232);
  uint64_t v62 = *(void *)(a1 + 248);
  uint64_t v57 = *(void *)(a1 + 256);
  uint64_t v59 = *(void *)(a1 + 208);
  uint64_t v60 = *(void *)(a1 + 264);
  uint64_t v46 = *(void *)(a1 + 272);
  uint64_t v54 = *(void *)(a1 + 280);
  uint64_t v49 = *(void *)(a1 + 288);
  uint64_t v51 = *(void *)(a1 + 240);
  uint64_t v52 = *(void *)(a1 + 296);
  uint64_t v44 = *(void *)(a1 + 304);
  uint64_t v3 = *(void *)(a1 + 312);
  long long v4 = *(_OWORD *)(a1 + 16);
  v90[0] = *(_OWORD *)a1;
  v90[1] = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  v90[2] = *(_OWORD *)(a1 + 32);
  v90[3] = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  uint64_t v34 = *(void *)(a1 + 320);
  uint64_t v41 = *(void *)(a1 + 328);
  uint64_t v42 = v3;
  uint64_t v37 = *(void *)(a1 + 336);
  uint64_t v39 = *(void *)(a1 + 344);
  v90[4] = *(_OWORD *)(a1 + 64);
  v90[5] = v6;
  long long v7 = *(_OWORD *)(a2 + 16);
  v89[0] = *(_OWORD *)a2;
  v89[1] = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  v89[2] = *(_OWORD *)(a2 + 32);
  v89[3] = v8;
  long long v9 = *(_OWORD *)(a2 + 80);
  int v10 = *(unsigned __int8 *)(a2 + 96);
  uint64_t v12 = *(void *)(a2 + 104);
  uint64_t v11 = *(void *)(a2 + 112);
  uint64_t v13 = *(void *)(a2 + 120);
  uint64_t v14 = *(void *)(a2 + 128);
  uint64_t v16 = *(void *)(a2 + 136);
  uint64_t v15 = *(void *)(a2 + 144);
  uint64_t v18 = *(void *)(a2 + 152);
  uint64_t v17 = *(void *)(a2 + 160);
  uint64_t v73 = *(void *)(a2 + 168);
  uint64_t v80 = *(void *)(a2 + 176);
  uint64_t v75 = *(void *)(a2 + 192);
  uint64_t v76 = *(void *)(a2 + 184);
  int v71 = *(unsigned __int8 *)(a2 + 200);
  int v69 = *(unsigned __int8 *)(a2 + 201);
  uint64_t v58 = *(void *)(a2 + 208);
  uint64_t v67 = *(void *)(a2 + 216);
  uint64_t v63 = *(void *)(a2 + 232);
  uint64_t v64 = *(void *)(a2 + 224);
  uint64_t v50 = *(void *)(a2 + 240);
  uint64_t v61 = *(void *)(a2 + 248);
  uint64_t v55 = *(void *)(a2 + 264);
  uint64_t v56 = *(void *)(a2 + 256);
  uint64_t v45 = *(void *)(a2 + 272);
  uint64_t v53 = *(void *)(a2 + 280);
  uint64_t v47 = *(void *)(a2 + 296);
  uint64_t v48 = *(void *)(a2 + 288);
  uint64_t v43 = *(void *)(a2 + 304);
  uint64_t v38 = *(void *)(a2 + 312);
  uint64_t v33 = *(void *)(a2 + 320);
  uint64_t v40 = *(void *)(a2 + 328);
  uint64_t v35 = *(void *)(a2 + 344);
  uint64_t v36 = *(void *)(a2 + 336);
  v89[4] = *(_OWORD *)(a2 + 64);
  v89[5] = v9;
  if (!specialized static Locale.Language.Components.== infix(_:_:)((uint64_t *)v90, (uint64_t *)v89)) {
    return 0;
  }
  if (v2 == 16)
  {
    if (v10 != 16) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (v10 == 16 || v2 != v10) {
      return result;
    }
  }
  if (!v88)
  {
    if (!v11)
    {
LABEL_14:
      if (v85)
      {
        if (v15)
        {
          if (v82 != v18 || v84 != v17)
          {
            char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL result = 0;
            if ((v21 & 1) == 0) {
              return result;
            }
          }
LABEL_23:
          if (v81)
          {
            if (v80)
            {
              if (v77 != v76 || v79 != v75)
              {
                char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
                BOOL result = 0;
                if ((v24 & 1) == 0) {
                  return result;
                }
              }
LABEL_32:
              if (v72 == 7)
              {
                if (v71 != 7) {
                  return 0;
                }
              }
              else if (v71 == 7 || (specialized == infix<A>(_:_:)(v72, v71) & 1) == 0)
              {
                return 0;
              }
              if (v70 == 4)
              {
                if (v69 != 4) {
                  return 0;
                }
              }
              else if (v69 == 4 || (specialized == infix<A>(_:_:)(v70, v69) & 1) == 0)
              {
                return 0;
              }
              if (v68)
              {
                if (v67)
                {
                  if (v65 != v64 || v66 != v63)
                  {
                    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    BOOL result = 0;
                    if ((v29 & 1) == 0) {
                      return result;
                    }
                  }
LABEL_55:
                  if (v62)
                  {
                    if (v61)
                    {
                      if (v57 != v56 || v60 != v55)
                      {
                        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL result = 0;
                        if ((v30 & 1) == 0) {
                          return result;
                        }
                      }
                      goto LABEL_64;
                    }
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }
                  else if (!v61)
                  {
LABEL_64:
                    if (v54)
                    {
                      if (v53)
                      {
                        if (v49 != v48 || v52 != v47)
                        {
                          char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          BOOL result = 0;
                          if ((v31 & 1) == 0) {
                            return result;
                          }
                        }
LABEL_73:
                        if (v44)
                        {
                          *(void *)&v90[0] = v44;
                          *((void *)&v90[0] + 1) = v42;
                          if (v43)
                          {
                            *(void *)&v89[0] = v43;
                            *((void *)&v89[0] + 1) = v38;
                            swift_unknownObjectRetain_n();
                            char v32 = specialized static TimeZone.== infix(_:_:)((uint64_t)v90, (uint64_t)v89);
                            swift_unknownObjectRelease();
                            swift_unknownObjectRelease();
                            if ((v32 & 1) == 0) {
                              return 0;
                            }
                            goto LABEL_80;
                          }
                          swift_unknownObjectRetain();
                        }
                        else if (!v43)
                        {
LABEL_80:
                          if (v41)
                          {
                            if (v40) {
                              return v37 == v36 && v39 == v35
                            }
                                  || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0;
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                          }
                          else if (!v40)
                          {
                            return 1;
                          }
                          uint64_t v25 = v33;
                          uint64_t v26 = v40;
                          outlined copy of Locale.LanguageCode?(v33, v40);
                          uint64_t v27 = v34;
                          uint64_t v28 = v41;
                          goto LABEL_37;
                        }
                        swift_unknownObjectRelease();
                        return 0;
                      }
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                    }
                    else if (!v53)
                    {
                      goto LABEL_73;
                    }
                    uint64_t v25 = v45;
                    uint64_t v26 = v53;
                    outlined copy of Locale.LanguageCode?(v45, v53);
                    uint64_t v27 = v46;
                    uint64_t v28 = v54;
LABEL_37:
                    outlined consume of Locale.LanguageCode?(v27, v28);
                    uint64_t v22 = v25;
                    uint64_t v23 = v26;
                    goto LABEL_38;
                  }
                  uint64_t v25 = v50;
                  uint64_t v26 = v61;
                  outlined copy of Locale.LanguageCode?(v50, v61);
                  uint64_t v27 = v51;
                  uint64_t v28 = v62;
                  goto LABEL_37;
                }
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else if (!v67)
              {
                goto LABEL_55;
              }
              uint64_t v25 = v58;
              uint64_t v26 = v67;
              outlined copy of Locale.LanguageCode?(v58, v67);
              uint64_t v27 = v59;
              uint64_t v28 = v68;
              goto LABEL_37;
            }
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else if (!v80)
          {
            goto LABEL_32;
          }
          uint64_t v25 = v73;
          uint64_t v26 = v80;
          outlined copy of Locale.LanguageCode?(v73, v80);
          uint64_t v27 = v74;
          uint64_t v28 = v81;
          goto LABEL_37;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else if (!v15)
      {
        goto LABEL_23;
      }
      outlined copy of Locale.LanguageCode?(v16, v15);
      outlined consume of Locale.LanguageCode?(v78, v85);
      uint64_t v22 = v16;
      uint64_t v23 = v15;
LABEL_38:
      outlined consume of Locale.LanguageCode?(v22, v23);
      return 0;
    }
LABEL_21:
    outlined copy of Locale.LanguageCode?(v12, v11);
    outlined consume of Locale.LanguageCode?(v83, v88);
    uint64_t v22 = v12;
    uint64_t v23 = v11;
    goto LABEL_38;
  }
  if (!v11)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_21;
  }
  if (v86 == v13 && v87 == v14) {
    goto LABEL_14;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v20) {
    goto LABEL_14;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Components.CodingKeys and conformance Locale.Components.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Collation and conformance Locale.Collation()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation;
  if (!lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation;
  if (!lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation;
  if (!lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation;
  if (!lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation;
  if (!lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation and conformance Locale.Collation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Currency and conformance Locale.Currency()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency;
  if (!lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency;
  if (!lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency;
  if (!lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency;
  if (!lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency;
  if (!lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency and conformance Locale.Currency);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.NumberingSystem and conformance Locale.NumberingSystem()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.HourCycle and conformance Locale.HourCycle()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle;
  if (!lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle;
  if (!lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle;
  if (!lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle;
  if (!lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.HourCycle and conformance Locale.HourCycle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem and conformance Locale.MeasurementSystem);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Subdivision and conformance Locale.Subdivision()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision and conformance Locale.Subdivision);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Variant and conformance Locale.Variant()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant;
  if (!lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant;
  if (!lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant;
  if (!lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant;
  if (!lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant;
  if (!lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant and conformance Locale.Variant);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode.CodingKeys and conformance Locale.LanguageCode.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Script.CodingKeys and conformance Locale.Script.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region.CodingKeys and conformance Locale.Region.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Collation.CodingKeys and conformance Locale.Collation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Currency.CodingKeys and conformance Locale.Currency.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.NumberingSystem.CodingKeys and conformance Locale.NumberingSystem.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.MeasurementSystem.CodingKeys and conformance Locale.MeasurementSystem.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Subdivision.CodingKeys and conformance Locale.Subdivision.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys;
  if (!lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Variant.CodingKeys and conformance Locale.Variant.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.LanguageCode.IdentifierType and conformance Locale.LanguageCode.IdentifierType()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.LanguageCode.IdentifierType and conformance Locale.LanguageCode.IdentifierType;
  if (!lazy protocol witness table cache variable for type Locale.LanguageCode.IdentifierType and conformance Locale.LanguageCode.IdentifierType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.LanguageCode.IdentifierType and conformance Locale.LanguageCode.IdentifierType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ICUCLDRKey and conformance ICUCLDRKey()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUCLDRKey and conformance ICUCLDRKey;
  if (!lazy protocol witness table cache variable for type ICUCLDRKey and conformance ICUCLDRKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUCLDRKey and conformance ICUCLDRKey);
  }
  return result;
}

uint64_t sub_181F3538C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_181F35398(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode(a1, a2, a3, a4, MEMORY[0x1E4FBB0F0]);
}

uint64_t sub_181F353C4(uint64_t *a1, Swift::String *a2)
{
  return key path setter for Locale.Script.identifier : Locale.Script(a1, a2);
}

uint64_t sub_181F353DC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode(a1, a2, a3, a4, MEMORY[0x1E4FBB100]);
}

uint64_t sub_181F35408(uint64_t *a1, Swift::String *a2)
{
  return key path setter for Locale.Script.identifier : Locale.Script(a1, a2);
}

uint64_t sub_181F35420(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode(a1, a2, a3, a4, MEMORY[0x1E4FBB0F0]);
}

uint64_t sub_181F3544C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode(a1, a2, a3, a4, MEMORY[0x1E4FBB0F0]);
}

uint64_t sub_181F35478(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode(a1, a2, a3, a4, MEMORY[0x1E4FBB0F0]);
}

uint64_t sub_181F354A4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode(a1, a2, a3, a4, MEMORY[0x1E4FBB0F0]);
}

uint64_t sub_181F354D0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Locale.LanguageCode.identifier : Locale.LanguageCode(a1, a2, a3, a4, MEMORY[0x1E4FBB0F0]);
}

uint64_t assignWithCopy for Locale.Components(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1);
      long long v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
  }
  long long v7 = (_OWORD *)(a1 + 32);
  long long v8 = (_OWORD *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v9)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 32);
      long long v10 = *(_OWORD *)(a2 + 48);
      *long long v7 = *v8;
      *(_OWORD *)(a1 + 48) = v10;
    }
  }
  else if (v9)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 48);
    *long long v7 = *v8;
    *(_OWORD *)(a1 + 48) = v11;
  }
  uint64_t v12 = (_OWORD *)(a1 + 64);
  uint64_t v13 = (_OWORD *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v14)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 64);
      long long v15 = *(_OWORD *)(a2 + 80);
      *uint64_t v12 = *v13;
      *(_OWORD *)(a1 + 80) = v15;
    }
  }
  else if (v14)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v16 = *(_OWORD *)(a2 + 80);
    *uint64_t v12 = *v13;
    *(_OWORD *)(a1 + 80) = v16;
  }
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v17 = (_OWORD *)(a1 + 104);
  uint64_t v18 = (_OWORD *)(a2 + 104);
  uint64_t v19 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112))
  {
    if (v19)
    {
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 104);
      long long v20 = *(_OWORD *)(a2 + 120);
      *uint64_t v17 = *v18;
      *(_OWORD *)(a1 + 120) = v20;
    }
  }
  else if (v19)
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v21 = *(_OWORD *)(a2 + 120);
    *uint64_t v17 = *v18;
    *(_OWORD *)(a1 + 120) = v21;
  }
  uint64_t v22 = (_OWORD *)(a1 + 136);
  uint64_t v23 = (_OWORD *)(a2 + 136);
  uint64_t v24 = *(void *)(a2 + 144);
  if (*(void *)(a1 + 144))
  {
    if (v24)
    {
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 136);
      long long v25 = *(_OWORD *)(a2 + 152);
      *uint64_t v22 = *v23;
      *(_OWORD *)(a1 + 152) = v25;
    }
  }
  else if (v24)
  {
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v26 = *(_OWORD *)(a2 + 152);
    *uint64_t v22 = *v23;
    *(_OWORD *)(a1 + 152) = v26;
  }
  uint64_t v27 = (_OWORD *)(a1 + 168);
  uint64_t v28 = (_OWORD *)(a2 + 168);
  uint64_t v29 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176))
  {
    if (v29)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 168);
      long long v30 = *(_OWORD *)(a2 + 184);
      *uint64_t v27 = *v28;
      *(_OWORD *)(a1 + 184) = v30;
    }
  }
  else if (v29)
  {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v31 = *(_OWORD *)(a2 + 184);
    *uint64_t v27 = *v28;
    *(_OWORD *)(a1 + 184) = v31;
  }
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(unsigned char *)(a1 + 201) = *(unsigned char *)(a2 + 201);
  char v32 = (_OWORD *)(a1 + 208);
  uint64_t v33 = (_OWORD *)(a2 + 208);
  uint64_t v34 = *(void *)(a2 + 216);
  if (*(void *)(a1 + 216))
  {
    if (v34)
    {
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 208);
      long long v35 = *(_OWORD *)(a2 + 224);
      *char v32 = *v33;
      *(_OWORD *)(a1 + 224) = v35;
    }
  }
  else if (v34)
  {
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v36 = *(_OWORD *)(a2 + 224);
    *char v32 = *v33;
    *(_OWORD *)(a1 + 224) = v36;
  }
  uint64_t v37 = (_OWORD *)(a1 + 240);
  uint64_t v38 = (_OWORD *)(a2 + 240);
  uint64_t v39 = *(void *)(a2 + 248);
  if (*(void *)(a1 + 248))
  {
    if (v39)
    {
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 240);
      long long v40 = *(_OWORD *)(a2 + 256);
      *uint64_t v37 = *v38;
      *(_OWORD *)(a1 + 256) = v40;
    }
  }
  else if (v39)
  {
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v41 = *(_OWORD *)(a2 + 256);
    *uint64_t v37 = *v38;
    *(_OWORD *)(a1 + 256) = v41;
  }
  uint64_t v42 = (_OWORD *)(a1 + 272);
  uint64_t v43 = (_OWORD *)(a2 + 272);
  uint64_t v44 = *(void *)(a2 + 280);
  if (*(void *)(a1 + 280))
  {
    if (v44)
    {
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 272);
      long long v45 = *(_OWORD *)(a2 + 288);
      *uint64_t v42 = *v43;
      *(_OWORD *)(a1 + 288) = v45;
    }
  }
  else if (v44)
  {
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v46 = *(_OWORD *)(a2 + 288);
    *uint64_t v42 = *v43;
    *(_OWORD *)(a1 + 288) = v46;
  }
  uint64_t v47 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 312) = v47;
  uint64_t v48 = (_OWORD *)(a1 + 320);
  uint64_t v49 = (_OWORD *)(a2 + 320);
  uint64_t v50 = *(void *)(a2 + 328);
  if (*(void *)(a1 + 328))
  {
    if (v50)
    {
      *(void *)(a1 + 320) = *(void *)(a2 + 320);
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1 + 320);
      long long v51 = *(_OWORD *)(a2 + 336);
      *uint64_t v48 = *v49;
      *(_OWORD *)(a1 + 336) = v51;
    }
  }
  else if (v50)
  {
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v52 = *(_OWORD *)(a2 + 336);
    *uint64_t v48 = *v49;
    *(_OWORD *)(a1 + 336) = v52;
  }
  return a1;
}

void *__swift_memcpy352_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x160uLL);
}

uint64_t assignWithTake for Locale.Components(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Locale.LanguageCode(a1);
  }
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_6:
  if (*(void *)(a1 + 40))
  {
    uint64_t v7 = *(void *)(a2 + 40);
    if (v7)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of Locale.LanguageCode(a1 + 32);
  }
  long long v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
LABEL_11:
  if (*(void *)(a1 + 72))
  {
    uint64_t v10 = *(void *)(a2 + 72);
    if (v10)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v10;
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    outlined destroy of Locale.LanguageCode(a1 + 64);
  }
  long long v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v12;
LABEL_16:
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  if (*(void *)(a1 + 112))
  {
    uint64_t v13 = *(void *)(a2 + 112);
    if (v13)
    {
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = v13;
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(a2 + 128);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = v14;
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    outlined destroy of Locale.LanguageCode(a1 + 104);
  }
  long long v15 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v15;
LABEL_21:
  if (*(void *)(a1 + 144))
  {
    uint64_t v16 = *(void *)(a2 + 144);
    if (v16)
    {
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = v16;
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v17;
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    outlined destroy of Locale.LanguageCode(a1 + 136);
  }
  long long v18 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v18;
LABEL_26:
  if (*(void *)(a1 + 176))
  {
    uint64_t v19 = *(void *)(a2 + 176);
    if (v19)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v19;
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v20;
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
    outlined destroy of Locale.LanguageCode(a1 + 168);
  }
  long long v21 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v21;
LABEL_31:
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  if (*(void *)(a1 + 216))
  {
    uint64_t v22 = *(void *)(a2 + 216);
    if (v22)
    {
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = v22;
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void *)(a2 + 232);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = v23;
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    outlined destroy of Locale.LanguageCode(a1 + 208);
  }
  long long v24 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v24;
LABEL_36:
  if (*(void *)(a1 + 248))
  {
    uint64_t v25 = *(void *)(a2 + 248);
    if (v25)
    {
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = v25;
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)(a2 + 264);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(void *)(a1 + 264) = v26;
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
    outlined destroy of Locale.LanguageCode(a1 + 240);
  }
  long long v27 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v27;
LABEL_41:
  if (*(void *)(a1 + 280))
  {
    uint64_t v28 = *(void *)(a2 + 280);
    if (v28)
    {
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 280) = v28;
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(a2 + 296);
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      *(void *)(a1 + 296) = v29;
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
    outlined destroy of Locale.LanguageCode(a1 + 272);
  }
  long long v30 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v30;
LABEL_46:
  uint64_t v31 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_unknownObjectRelease();
  *(void *)(a1 + 312) = v31;
  if (!*(void *)(a1 + 328))
  {
LABEL_50:
    long long v34 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v34;
    return a1;
  }
  uint64_t v32 = *(void *)(a2 + 328);
  if (!v32)
  {
    outlined destroy of Locale.LanguageCode(a1 + 320);
    goto LABEL_50;
  }
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = v32;
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v33;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Locale.Components(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 352)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Locale.Components(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 344) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 352) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 352) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Locale.LanguageCode.IdentifierType()
{
  return &type metadata for Locale.LanguageCode.IdentifierType;
}

ValueMetadata *type metadata accessor for Locale.Collation()
{
  return &type metadata for Locale.Collation;
}

ValueMetadata *type metadata accessor for Locale.Currency()
{
  return &type metadata for Locale.Currency;
}

ValueMetadata *type metadata accessor for Locale.NumberingSystem()
{
  return &type metadata for Locale.NumberingSystem;
}

unsigned char *storeEnumTagSinglePayload for Locale.Weekday(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F3616CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Locale.Weekday()
{
  return &type metadata for Locale.Weekday;
}

unsigned char *storeEnumTagSinglePayload for Locale.HourCycle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F36270);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Locale.Subdivision()
{
  return &type metadata for Locale.Subdivision;
}

ValueMetadata *type metadata accessor for Locale.Variant()
{
  return &type metadata for Locale.Variant;
}

ValueMetadata *type metadata accessor for ICUCLDRKey()
{
  return &type metadata for ICUCLDRKey;
}

ValueMetadata *type metadata accessor for Locale.Variant.CodingKeys()
{
  return &type metadata for Locale.Variant.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.Subdivision.CodingKeys()
{
  return &type metadata for Locale.Subdivision.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.MeasurementSystem.CodingKeys()
{
  return &type metadata for Locale.MeasurementSystem.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.NumberingSystem.CodingKeys()
{
  return &type metadata for Locale.NumberingSystem.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.Currency.CodingKeys()
{
  return &type metadata for Locale.Currency.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.Collation.CodingKeys()
{
  return &type metadata for Locale.Collation.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.Region.CodingKeys()
{
  return &type metadata for Locale.Region.CodingKeys;
}

ValueMetadata *type metadata accessor for Locale.Script.CodingKeys()
{
  return &type metadata for Locale.Script.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for Locale.LanguageCode.IdentifierType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F36414);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Locale.LanguageCode.CodingKeys()
{
  return &type metadata for Locale.LanguageCode.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for Locale.Components.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F36518);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Locale.Components.CodingKeys()
{
  return &unk_1ECA494F8;
}

uint64_t specialized Locale.Components.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x80000001823B3C20
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F6974616C6C6F63 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x79636E6572727563 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E697265626D756ELL && a2 == 0xEF6D657473795367 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7961447473726966 && a2 == 0xEE006B656557664FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6C63794372756F68 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001823B3C40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6E6F69676572 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x7369766964627573 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x746E6169726176 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 11;
    }
    else {
      return 12;
    }
  }
}

uint64_t specialized Locale.Subdivision.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000015 && a2 == 0x80000001823B3C60
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6669746E6564695FLL && a2 == 0xEB00000000726569)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t closure #1 in static _FileManagerImpl._setAttributes(_:at:followSymLinks:)(char *name, uint64_t a2, unint64_t a3, char *path, char a5)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2) {
        goto LABEL_76;
      }
      uint64_t v25 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (!v25) {
        goto LABEL_82;
      }
      uint64_t v26 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      if (__OFSUB__((int)a2, v26)) {
        goto LABEL_78;
      }
      if (*(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= (a2 >> 32) - (int)a2) {
        size_t v27 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v27 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
      }
      uint64_t result = setxattr(path, name, (const void *)(v25 + (int)a2 - v26), v27, 0, (a5 & 1) == 0);
      if (result != -1) {
        return result;
      }
      uint64_t v7 = String.init(cString:)();
      unint64_t v9 = v28;
      int v29 = MEMORY[0x185301870]();
      LODWORD(v22) = v29;
      uint64_t v11 = 4;
      switch(v29)
      {
        case 1:
        case 13:
          uint64_t v11 = 513;
          goto LABEL_68;
        case 2:
          goto LABEL_68;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_38;
        case 17:
          goto LABEL_65;
        case 28:
        case 69:
          uint64_t v11 = 640;
          goto LABEL_68;
        case 30:
          uint64_t v11 = 642;
          goto LABEL_68;
        case 63:
          uint64_t v11 = 514;
          goto LABEL_68;
        default:
          if (v29 == 102) {
            goto LABEL_37;
          }
LABEL_38:
          uint64_t v11 = 512;
          break;
      }
      goto LABEL_68;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v13 = *(void *)(a2 + 24);
      uint64_t v14 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      if (!v14)
      {
        if (!__OFSUB__(v13, v12)) {
          __break(1u);
        }
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        unint64_t v69 = 0;
        unint64_t v70 = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        unint64_t v69 = 0xD000000000000014;
        unint64_t v70 = 0x80000001823A9780;
LABEL_85:
        v67._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v67);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181F38158);
      }
      uint64_t v15 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      BOOL v16 = __OFSUB__(v12, v15);
      uint64_t v17 = v12 - v15;
      if (v16) {
        goto LABEL_77;
      }
      BOOL v16 = __OFSUB__(v13, v12);
      int64_t v18 = v13 - v12;
      if (v16) {
        goto LABEL_81;
      }
      if (*(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v18) {
        size_t v19 = v18;
      }
      else {
        size_t v19 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
      }
      uint64_t result = setxattr(path, name, (const void *)(v14 + v17), v19, 0, (a5 & 1) == 0);
      if (result == -1)
      {
        uint64_t v7 = String.init(cString:)();
        unint64_t v9 = v20;
        int v21 = MEMORY[0x185301870]();
        LODWORD(v22) = v21;
        uint64_t v11 = 4;
        switch(v21)
        {
          case 1:
          case 13:
            uint64_t v11 = 513;
            break;
          case 2:
            break;
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 14:
          case 15:
          case 16:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 29:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
            goto LABEL_35;
          case 17:
            goto LABEL_57;
          case 28:
          case 69:
            uint64_t v11 = 640;
            break;
          case 30:
            uint64_t v11 = 642;
            break;
          case 63:
            uint64_t v11 = 514;
            break;
          default:
            if (v21 == 102) {
              goto LABEL_37;
            }
LABEL_35:
            uint64_t v11 = 512;
            break;
        }
LABEL_60:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
        {
LABEL_84:
          unint64_t v69 = 0;
          unint64_t v70 = 0xE000000000000000;
          _StringGuts.grow(_:)(22);
          swift_bridgeObjectRelease();
          unint64_t v69 = 0xD000000000000014;
          unint64_t v70 = 0x80000001823A9780;
          LODWORD(value[0]) = v22;
          goto LABEL_85;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v49 = (int)POSIXErrorCode.rawValue.getter();
        id v50 = objc_allocWithZone((Class)NSError);
        uint64_t v51 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v22 = objc_msgSend(v50, sel_initWithDomain_code_userInfo_, v51, v49, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v52 = objc_msgSend(v22, sel_domain);
        id v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
        uint64_t v55 = v54;

        if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v55 == v56) {
          goto LABEL_71;
        }
        char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v57 & 1) == 0)
        {
          __break(1u);
LABEL_65:
          uint64_t v11 = 516;
LABEL_68:
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            uint64_t v58 = (int)POSIXErrorCode.rawValue.getter();
            id v59 = objc_allocWithZone((Class)NSError);
            uint64_t v60 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v22 = objc_msgSend(v59, sel_initWithDomain_code_userInfo_, v60, v58, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v61 = objc_msgSend(v22, sel_domain);
            id v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
            uint64_t v64 = v63;

            if (v62 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v64 == v65)
            {
LABEL_71:
              swift_bridgeObjectRelease_n();
              goto LABEL_72;
            }
            char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v66) {
              goto LABEL_72;
            }
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
          }
          goto LABEL_84;
        }
LABEL_72:
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v11, v7, v9, v22, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v69, 0, 0);
        return swift_willThrow();
      }
      return result;
    case 3uLL:
      memset(value, 0, 14);
      uint64_t result = setxattr(path, name, value, 0, 0, (a5 & 1) == 0);
      if (result != -1) {
        return result;
      }
      uint64_t v7 = String.init(cString:)();
      unint64_t v9 = v23;
      int v24 = MEMORY[0x185301870]();
      uint64_t v11 = 4;
      switch(v24)
      {
        case 1:
        case 13:
          uint64_t v11 = 513;
          goto LABEL_50;
        case 2:
          goto LABEL_50;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_33;
        case 17:
          goto LABEL_47;
        case 28:
        case 69:
          uint64_t v11 = 640;
          goto LABEL_50;
        case 30:
          uint64_t v11 = 642;
          goto LABEL_50;
        case 63:
          uint64_t v11 = 514;
          goto LABEL_50;
        default:
          if (v24 == 102) {
            goto LABEL_37;
          }
LABEL_33:
          uint64_t v11 = 512;
          break;
      }
      goto LABEL_50;
    default:
      value[0] = a2;
      LOWORD(value[1]) = a3;
      BYTE2(value[1]) = BYTE2(a3);
      BYTE3(value[1]) = BYTE3(a3);
      BYTE4(value[1]) = BYTE4(a3);
      BYTE5(value[1]) = BYTE5(a3);
      uint64_t result = setxattr(path, name, value, BYTE6(a3), 0, (a5 & 1) == 0);
      if (result != -1) {
        return result;
      }
      uint64_t v7 = String.init(cString:)();
      unint64_t v9 = v8;
      int v10 = MEMORY[0x185301870]();
      uint64_t v11 = 4;
      switch(v10)
      {
        case 1:
        case 13:
          uint64_t v11 = 513;
          goto LABEL_42;
        case 2:
          goto LABEL_42;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_31;
        case 17:
          uint64_t v11 = 516;
          goto LABEL_42;
        case 28:
        case 69:
          uint64_t v11 = 640;
          goto LABEL_42;
        case 30:
          uint64_t v11 = 642;
          goto LABEL_42;
        case 63:
          uint64_t v11 = 514;
          goto LABEL_42;
        default:
          if (v10 == 102)
          {
LABEL_37:
            id v22 = 0;
            uint64_t v11 = 512;
            goto LABEL_72;
          }
LABEL_31:
          uint64_t v11 = 512;
LABEL_42:
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_83;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v30 = (int)POSIXErrorCode.rawValue.getter();
          id v31 = objc_allocWithZone((Class)NSError);
          uint64_t v32 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v22 = objc_msgSend(v31, sel_initWithDomain_code_userInfo_, v32, v30, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v33 = objc_msgSend(v22, sel_domain);
          id v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
          uint64_t v36 = v35;

          if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v36 == v37) {
            goto LABEL_71;
          }
          char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v38) {
            goto LABEL_72;
          }
          __break(1u);
LABEL_47:
          uint64_t v11 = 516;
LABEL_50:
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_83;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v39 = (int)POSIXErrorCode.rawValue.getter();
          id v40 = objc_allocWithZone((Class)NSError);
          uint64_t v41 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v22 = objc_msgSend(v40, sel_initWithDomain_code_userInfo_, v41, v39, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v42 = objc_msgSend(v22, sel_domain);
          id v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
          uint64_t v45 = v44;

          if (v43 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v45 == v46) {
            goto LABEL_71;
          }
          char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v48) {
            goto LABEL_72;
          }
          __break(1u);
LABEL_57:
          uint64_t v11 = 516;
          break;
      }
      goto LABEL_60;
  }
}

uint64_t specialized static _FileManagerImpl._setAttributes(_:at:followSymLinks:)(uint64_t a1, const char *a2, char a3)
{
  uint64_t v6 = a1;
  uint64_t v183 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v172 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v173 = (unint64_t)(v8 + 63) >> 6;
  LODWORD(v176) = a3 & 1;
  LODWORD(v175) = v176 == 0;
  uint64_t v11 = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  v169[1] = MEMORY[0x1E4FBC848] + 8;
  uint64_t v177 = v11;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    uint64_t v18 = 16 * i;
    size_t v19 = (uint64_t *)(*(void *)(v6 + 48) + v18);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    id v22 = (uint64_t *)(*(void *)(v6 + 56) + v18);
    uint64_t v4 = *v22;
    unint64_t v3 = v22[1];
    MEMORY[0x1F4188790](v11);
    if ((v20 & 0x1000000000000000) == 0)
    {
      if ((v20 & 0x2000000000000000) != 0)
      {
        *(void *)name = v21;
        uint64_t v182 = v20 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v6 = v177;
        switch(v3 >> 62)
        {
          case 1uLL:
            if (v4 >> 32 < (int)v4) {
              goto LABEL_177;
            }
            uint64_t v31 = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
            if (!v31) {
              goto LABEL_198;
            }
            uint64_t v32 = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
            if (__OFSUB__((int)v4, v32)) {
              goto LABEL_181;
            }
            int v174 = v169;
            id v33 = (const void *)(v31 + (int)v4 - v32);
            if (*(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= (v4 >> 32) - (int)v4) {
              size_t v34 = (v4 >> 32) - (int)v4;
            }
            else {
              size_t v34 = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
            }
            outlined copy of Data._Representation(v4, v3);
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v4, v3);
            if (setxattr(a2, name, v33, v34, 0, (int)v175) != -1)
            {
              outlined consume of Data._Representation(v4, v3);
LABEL_43:
              uint64_t v6 = v177;
              goto LABEL_62;
            }
            uint64_t v69 = String.init(cString:)();
            uint64_t v176 = v70;
            int v71 = MEMORY[0x185301870]();
            int v72 = v71;
            uint64_t v73 = 4;
            switch(v71)
            {
              case 1:
              case 13:
                uint64_t v73 = 513;
                goto LABEL_160;
              case 2:
                goto LABEL_160;
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:
              case 14:
              case 15:
              case 16:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 25:
              case 26:
              case 27:
              case 29:
              case 31:
              case 32:
              case 33:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 64:
              case 65:
              case 66:
              case 67:
              case 68:
                goto LABEL_126;
              case 17:
                uint64_t v73 = 516;
                goto LABEL_160;
              case 28:
              case 69:
                uint64_t v73 = 640;
                goto LABEL_160;
              case 30:
                uint64_t v73 = 642;
                goto LABEL_160;
              case 63:
                uint64_t v73 = 514;
                goto LABEL_160;
              default:
                if (v71 == 102)
                {
                  id v120 = 0;
                  uint64_t v73 = 512;
                }
                else
                {
LABEL_126:
                  uint64_t v73 = 512;
LABEL_160:
                  __int16 v175 = (void *)v69;
                  if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
                  {
                    *(void *)&long long value = 0;
                    *((void *)&value + 1) = 0xE000000000000000;
                    _StringGuts.grow(_:)(22);
                    swift_bridgeObjectRelease();
                    *(void *)&long long value = 0xD000000000000014;
                    *((void *)&value + 1) = 0x80000001823A9780;
                    LODWORD(v179[0]) = v72;
                    goto LABEL_206;
                  }
                  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                  uint64_t v150 = (int)POSIXErrorCode.rawValue.getter();
                  id v151 = objc_allocWithZone((Class)NSError);
                  uint64_t v152 = String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  id v120 = objc_msgSend(v151, sel_initWithDomain_code_userInfo_, v152, v150, _NativeDictionary.bridged()());
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  id v153 = objc_msgSend(v120, sel_domain);
                  id v154 = static String._unconditionallyBridgeFromObjectiveC(_:)(v153);
                  uint64_t v156 = v155;

                  if (v154 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                    && v156 == v157)
                  {
                    swift_bridgeObjectRelease_n();
                    uint64_t v69 = (uint64_t)v175;
                  }
                  else
                  {
                    char v158 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v69 = (uint64_t)v175;
                    if ((v158 & 1) == 0)
                    {
LABEL_187:
                      __break(1u);
                      goto LABEL_188;
                    }
                  }
                }
                specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v73, v69, (unint64_t)v176, v120, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&value, 0, 0);
                swift_willThrow();
                outlined consume of Data._Representation(v4, v3);
                goto LABEL_184;
            }
          case 2uLL:
            int64_t v24 = *(void *)(v4 + 16);
            uint64_t v25 = *(void *)(v4 + 24);
            uint64_t v26 = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
            if (!v26) {
              goto LABEL_192;
            }
            uint64_t v27 = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
            BOOL v15 = __OFSUB__(v24, v27);
            uint64_t v28 = v24 - v27;
            if (v15) {
              goto LABEL_178;
            }
            BOOL v15 = __OFSUB__(v25, v24);
            int64_t v24 = v25 - v24;
            if (v15) {
              goto LABEL_194;
            }
            int v174 = v169;
            int v29 = (const void *)(v26 + v28);
            if (*(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v24) {
              size_t v30 = v24;
            }
            else {
              size_t v30 = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
            }
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v4, v3);
            swift_retain();
            swift_retain();
            if (setxattr(a2, name, v29, v30, 0, (int)v175) == -1)
            {
              uint64_t v74 = String.init(cString:)();
              uint64_t v176 = v75;
              int v76 = MEMORY[0x185301870]();
              int v77 = v76;
              uint64_t v78 = 4;
              switch(v76)
              {
                case 1:
                case 13:
                  uint64_t v78 = 513;
                  goto LABEL_169;
                case 2:
                  goto LABEL_169;
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 14:
                case 15:
                case 16:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 29:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                  goto LABEL_127;
                case 17:
                  uint64_t v78 = 516;
                  goto LABEL_169;
                case 28:
                case 69:
                  uint64_t v78 = 640;
                  goto LABEL_169;
                case 30:
                  uint64_t v78 = 642;
                  goto LABEL_169;
                case 63:
                  uint64_t v78 = 514;
                  goto LABEL_169;
                default:
                  if (v76 == 102)
                  {
                    id v121 = 0;
                    uint64_t v122 = 512;
                    uint64_t v123 = v176;
                  }
                  else
                  {
LABEL_127:
                    uint64_t v78 = 512;
LABEL_169:
                    int64_t v173 = v78;
                    __int16 v175 = (void *)v74;
                    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
                    {
                      *(void *)&long long value = 0;
                      *((void *)&value + 1) = 0xE000000000000000;
                      _StringGuts.grow(_:)(22);
                      swift_bridgeObjectRelease();
                      *(void *)&long long value = 0xD000000000000014;
                      *((void *)&value + 1) = 0x80000001823A9780;
                      LODWORD(v179[0]) = v77;
                      goto LABEL_206;
                    }
                    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                    uint64_t v159 = (int)POSIXErrorCode.rawValue.getter();
                    id v160 = objc_allocWithZone((Class)NSError);
                    uint64_t v161 = String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    id v121 = objc_msgSend(v160, sel_initWithDomain_code_userInfo_, v161, v159, _NativeDictionary.bridged()());
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    id v162 = objc_msgSend(v121, sel_domain);
                    id v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v162);
                    uint64_t v165 = v164;

                    if (v163 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                      && v165 == v166)
                    {
                      swift_bridgeObjectRelease_n();
                      uint64_t v74 = (uint64_t)v175;
                    }
                    else
                    {
                      char v167 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      uint64_t v74 = (uint64_t)v175;
                      if ((v167 & 1) == 0)
                      {
LABEL_188:
                        __break(1u);
                        goto LABEL_189;
                      }
                    }
                    uint64_t v123 = v176;
                    uint64_t v122 = v173;
                  }
                  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v122, v74, (unint64_t)v123, v121, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&value, 0, 0);
                  swift_willThrow();
                  swift_release();
                  swift_release();
                  goto LABEL_184;
              }
            }
            swift_release();
            swift_release();
            goto LABEL_43;
          case 3uLL:
            memset(v179, 0, 14);
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v4, v3);
            if (setxattr(a2, name, v179, 0, 0, (int)v175) != -1) {
              goto LABEL_62;
            }
            uint64_t v51 = (void *)String.init(cString:)();
            id v53 = v49;
            int v50 = MEMORY[0x185301870]();
            LODWORD(v55) = v50;
            uint64_t v56 = 4;
            switch(v50)
            {
              case 1:
              case 13:
                uint64_t v56 = 513;
                goto LABEL_131;
              case 2:
                goto LABEL_131;
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:
              case 14:
              case 15:
              case 16:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 25:
              case 26:
              case 27:
              case 29:
              case 31:
              case 32:
              case 33:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 64:
              case 65:
              case 66:
              case 67:
              case 68:
                goto LABEL_115;
              case 17:
                uint64_t v56 = 516;
                goto LABEL_131;
              case 28:
              case 69:
                uint64_t v56 = 640;
                goto LABEL_131;
              case 30:
                uint64_t v56 = 642;
                goto LABEL_131;
              case 63:
                uint64_t v56 = 514;
                goto LABEL_131;
              default:
                if (v50 == 102) {
                  goto LABEL_117;
                }
LABEL_115:
                uint64_t v56 = 512;
LABEL_131:
                __int16 v175 = v51;
                uint64_t v176 = v53;
                uint64_t v171 = v20;
                uint64_t v51 = v169;
                if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
                  goto LABEL_200;
                }
                static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                uint64_t v124 = (int)POSIXErrorCode.rawValue.getter();
                id v125 = objc_allocWithZone((Class)NSError);
                uint64_t v126 = String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                id v55 = objc_msgSend(v125, sel_initWithDomain_code_userInfo_, v126, v124, _NativeDictionary.bridged()());
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                id v127 = objc_msgSend(v55, sel_domain);
                id v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(v127);
                uint64_t v130 = v129;

                if (v128 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                  && v130 == v131)
                {
                  goto LABEL_142;
                }
                uint64_t v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                id v53 = v176;
                if (v20) {
                  goto LABEL_144;
                }
                __break(1u);
                break;
            }
LABEL_136:
            uint64_t v56 = 516;
            goto LABEL_139;
          default:
            v179[0] = v4;
            LOWORD(v179[1]) = v3;
            BYTE2(v179[1]) = BYTE2(v3);
            BYTE3(v179[1]) = BYTE3(v3);
            BYTE4(v179[1]) = BYTE4(v3);
            BYTE5(v179[1]) = BYTE5(v3);
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v4, v3);
            if (setxattr(a2, name, v179, BYTE6(v3), 0, (int)v175) != -1) {
              goto LABEL_62;
            }
            uint64_t v51 = (void *)String.init(cString:)();
            id v53 = v52;
            int v54 = MEMORY[0x185301870]();
            LODWORD(v55) = v54;
            uint64_t v56 = 4;
            break;
        }
        switch(v54)
        {
          case 1:
          case 13:
            uint64_t v56 = 513;
            goto LABEL_139;
          case 2:
            goto LABEL_139;
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 14:
          case 15:
          case 16:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 29:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48:
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
            goto LABEL_124;
          case 17:
            goto LABEL_136;
          case 28:
          case 69:
            uint64_t v56 = 640;
            goto LABEL_139;
          case 30:
            uint64_t v56 = 642;
            goto LABEL_139;
          case 63:
            uint64_t v56 = 514;
            goto LABEL_139;
          default:
            if (v54 == 102)
            {
LABEL_117:
              id v55 = 0;
              uint64_t v56 = 512;
            }
            else
            {
LABEL_124:
              uint64_t v56 = 512;
LABEL_139:
              __int16 v175 = v51;
              uint64_t v176 = v53;
              uint64_t v171 = v20;
              if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
              {
LABEL_200:
                *(void *)&long long value = 0;
                *((void *)&value + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(22);
                swift_bridgeObjectRelease();
                *(void *)&long long value = 0xD000000000000014;
                *((void *)&value + 1) = 0x80000001823A9780;
                Swift::Int32 v178 = (int)v55;
                goto LABEL_206;
              }
              static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
              uint64_t v132 = (int)POSIXErrorCode.rawValue.getter();
              id v133 = objc_allocWithZone((Class)NSError);
              uint64_t v134 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v55 = objc_msgSend(v133, sel_initWithDomain_code_userInfo_, v134, v132, _NativeDictionary.bridged()());
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              id v135 = objc_msgSend(v55, sel_domain);
              id v136 = static String._unconditionallyBridgeFromObjectiveC(_:)(v135);
              uint64_t v138 = v137;

              if (v136 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                && v138 == v139)
              {
LABEL_142:
                swift_bridgeObjectRelease_n();
                id v53 = v176;
              }
              else
              {
                char v140 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                id v53 = v176;
                if ((v140 & 1) == 0)
                {
                  __break(1u);
LABEL_186:
                  __break(1u);
                  goto LABEL_187;
                }
              }
LABEL_144:
              uint64_t v51 = v175;
            }
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v56, (uint64_t)v51, (unint64_t)v53, v55, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&value, 0, 0);
            goto LABEL_156;
        }
      }
      if ((v21 & 0x1000000000000000) != 0)
      {
        unint64_t v23 = (const char *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
        switch(v3 >> 62)
        {
          case 1uLL:
            if (v4 >> 32 < (int)v4) {
              goto LABEL_179;
            }
            uint64_t v43 = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
            if (!v43) {
              goto LABEL_199;
            }
            uint64_t v44 = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
            if (__OFSUB__((int)v4, v44)) {
              goto LABEL_182;
            }
            int v174 = v169;
            uint64_t v45 = (const void *)(v43 + (int)v4 - v44);
            if (*(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= (v4 >> 32) - (int)v4) {
              size_t v46 = (v4 >> 32) - (int)v4;
            }
            else {
              size_t v46 = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
            }
            outlined copy of Data._Representation(v4, v3);
            uint64_t v171 = v20;
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v4, v3);
            if (setxattr(a2, (const char *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32), v45, v46, 0, (int)v175) != -1)
            {
              outlined consume of Data._Representation(v4, v3);
              uint64_t v6 = v177;
LABEL_62:
              swift_bridgeObjectRelease();
              uint64_t v11 = outlined consume of Data._Representation(v4, v3);
              if (v10) {
                goto LABEL_4;
              }
              goto LABEL_5;
            }
            uint64_t v85 = String.init(cString:)();
            unint64_t v87 = v86;
            Swift::Int32 v61 = MEMORY[0x185301870]();
            CocoaError.Code.init(fileErrno:reading:)(v61, 0);
            uint64_t v88 = (uint64_t (*)(void))value;
            if (v61 == 102)
            {
              id v89 = 0;
LABEL_108:
              specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(v88, v85, v87, v89, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))name, 0, 0);
              swift_willThrow();
              outlined consume of Data._Representation(v4, v3);
              goto LABEL_184;
            }
            __int16 v175 = (void *)value;
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
              goto LABEL_201;
            }
            uint64_t v176 = @"NSPOSIXErrorDomain";
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            uint64_t v107 = (int)POSIXErrorCode.rawValue.getter();
            id v108 = objc_allocWithZone((Class)NSError);
            uint64_t v109 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v89 = objc_msgSend(v108, sel_initWithDomain_code_userInfo_, v109, v107, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v110 = objc_msgSend(v89, sel_domain);
            id v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
            uint64_t v113 = v112;

            if (v111 == static String._unconditionallyBridgeFromObjectiveC(_:)(v176) && v113 == v114)
            {
              swift_bridgeObjectRelease_n();
LABEL_107:
              uint64_t v88 = (uint64_t (*)(void))v175;
              goto LABEL_108;
            }
            char v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v117) {
              goto LABEL_107;
            }
            goto LABEL_191;
          case 2uLL:
            int64_t v24 = *(void *)(v4 + 16);
            uint64_t v25 = *(void *)(v4 + 24);
            uint64_t v35 = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
            if (!v35) {
              goto LABEL_195;
            }
            uint64_t v36 = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
            BOOL v15 = __OFSUB__(v24, v36);
            uint64_t v37 = v24 - v36;
            if (v15) {
              goto LABEL_180;
            }
            BOOL v15 = __OFSUB__(v25, v24);
            int64_t v38 = v25 - v24;
            if (v15) {
              goto LABEL_197;
            }
            int v174 = v169;
            uint64_t v39 = (const void *)(v35 + v37);
            uint64_t v40 = v20;
            if (*(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v38) {
              size_t v41 = v38;
            }
            else {
              size_t v41 = *(void *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
            }
            uint64_t v171 = v40;
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v4, v3);
            swift_retain();
            swift_retain();
            if (setxattr(a2, v23, v39, v41, 0, (int)v175) != -1)
            {
              swift_release();
              swift_release();
              uint64_t v6 = v177;
              goto LABEL_62;
            }
            uint64_t v79 = (__CFString *)String.init(cString:)();
            unint64_t v81 = v80;
            Swift::Int32 v82 = MEMORY[0x185301870]();
            CocoaError.Code.init(fileErrno:reading:)(v82, 0);
            uint64_t v83 = (uint64_t (*)(void))value;
            if (v82 == 102)
            {
              id v84 = 0;
LABEL_105:
              specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(v83, (uint64_t)v79, v81, v84, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))name, 0, 0);
              swift_willThrow();
              swift_release();
              swift_release();
              goto LABEL_184;
            }
            __int16 v175 = (void *)value;
            uint64_t v176 = v79;
            unint64_t v98 = v81;
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
              uint64_t v99 = (int)POSIXErrorCode.rawValue.getter();
              id v100 = objc_allocWithZone((Class)NSError);
              uint64_t v101 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v84 = objc_msgSend(v100, sel_initWithDomain_code_userInfo_, v101, v99, _NativeDictionary.bridged()());
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              id v102 = objc_msgSend(v84, sel_domain);
              id v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
              uint64_t v105 = v104;

              if (v103 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                && v105 == v106)
              {
                swift_bridgeObjectRelease_n();
                unint64_t v81 = v98;
LABEL_104:
                uint64_t v79 = v176;
                uint64_t v83 = (uint64_t (*)(void))v175;
                goto LABEL_105;
              }
              char v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v81 = v98;
              if (v116) {
                goto LABEL_104;
              }
LABEL_190:
              __break(1u);
LABEL_191:
              __break(1u);
LABEL_192:
              if (!__OFSUB__(v25, v24)) {
                __break(1u);
              }
LABEL_194:
              __break(1u);
LABEL_195:
              if (!__OFSUB__(v25, v24)) {
                __break(1u);
              }
LABEL_197:
              __break(1u);
LABEL_198:
              __break(1u);
LABEL_199:
              __break(1u);
            }
            *(void *)name = 0;
            uint64_t v182 = 0xE000000000000000;
            _StringGuts.grow(_:)(22);
            swift_bridgeObjectRelease();
            *(void *)name = 0xD000000000000014;
            uint64_t v182 = 0x80000001823A9780;
            LODWORD(v179[0]) = v82;
            break;
          case 3uLL:
            *(void *)((char *)&value + 6) = 0;
            *(void *)&long long value = 0;
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v4, v3);
            int v42 = setxattr(a2, (const char *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32), &value, 0, 0, (int)v175);
            uint64_t v6 = v177;
            if (v42 != -1) {
              goto LABEL_62;
            }
            char v57 = (__CFString *)String.init(cString:)();
            unint64_t v59 = v58;
            Swift::Int32 v60 = MEMORY[0x185301870]();
            Swift::Int32 v61 = v60;
            uint64_t v62 = 4;
            switch(v60)
            {
              case 1:
              case 13:
                uint64_t v62 = 513;
                goto LABEL_149;
              case 2:
                goto LABEL_149;
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:
              case 14:
              case 15:
              case 16:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 25:
              case 26:
              case 27:
              case 29:
              case 31:
              case 32:
              case 33:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 64:
              case 65:
              case 66:
              case 67:
              case 68:
                goto LABEL_125;
              case 17:
                uint64_t v62 = 516;
                goto LABEL_149;
              case 28:
              case 69:
                uint64_t v62 = 640;
                goto LABEL_149;
              case 30:
                uint64_t v62 = 642;
                goto LABEL_149;
              case 63:
                uint64_t v62 = 514;
                goto LABEL_149;
              default:
                if (v60 == 102)
                {
                  id v118 = 0;
                  uint64_t v119 = 512;
LABEL_155:
                  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v119, (uint64_t)v57, v59, v118, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))name, 0, 0);
                  goto LABEL_156;
                }
LABEL_125:
                uint64_t v62 = 512;
LABEL_149:
                int v174 = (void *)v62;
                __int16 v175 = (void *)v59;
                uint64_t v176 = v57;
                if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
                {
                  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
                  uint64_t v141 = (int)POSIXErrorCode.rawValue.getter();
                  id v142 = objc_allocWithZone((Class)NSError);
                  uint64_t v143 = String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  id v118 = objc_msgSend(v142, sel_initWithDomain_code_userInfo_, v143, v141, _NativeDictionary.bridged()());
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  id v144 = objc_msgSend(v118, sel_domain);
                  id v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
                  uint64_t v147 = v146;

                  if (v145 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                    && v147 == v148)
                  {
                    swift_bridgeObjectRelease_n();
LABEL_154:
                    unint64_t v59 = (unint64_t)v175;
                    char v57 = v176;
                    uint64_t v119 = (uint64_t)v174;
                    goto LABEL_155;
                  }
                  char v149 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (v149) {
                    goto LABEL_154;
                  }
                  goto LABEL_186;
                }
LABEL_201:
                *(void *)name = 0;
                uint64_t v182 = 0xE000000000000000;
                _StringGuts.grow(_:)(22);
                swift_bridgeObjectRelease();
                *(void *)name = 0xD000000000000014;
                uint64_t v182 = 0x80000001823A9780;
                LODWORD(v179[0]) = v61;
                break;
            }
            break;
          default:
            *(void *)&long long value = v4;
            WORD4(value) = v3;
            BYTE10(value) = BYTE2(v3);
            BYTE11(value) = BYTE3(v3);
            BYTE12(value) = BYTE4(v3);
            BYTE13(value) = BYTE5(v3);
            swift_bridgeObjectRetain();
            outlined copy of Data._Representation(v4, v3);
            if (setxattr(a2, (const char *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32), &value, BYTE6(v3), 0, (int)v175) != -1)
            {
              uint64_t v6 = v177;
              goto LABEL_62;
            }
            uint64_t v63 = (__CFString *)String.init(cString:)();
            unint64_t v65 = v64;
            Swift::Int32 v66 = MEMORY[0x185301870]();
            CocoaError.Code.init(fileErrno:reading:)(v66, 0);
            Swift::String v67 = (uint64_t (*)(void))v179[0];
            if (v66 == 102)
            {
              id v68 = 0;
LABEL_102:
              specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(v67, (uint64_t)v63, v65, v68, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))name, 0, 0);
LABEL_156:
              swift_willThrow();
              goto LABEL_184;
            }
            int v174 = (void *)v179[0];
            __int16 v175 = (void *)v65;
            uint64_t v176 = v63;
            uint64_t v171 = v20;
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) == 0)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
              uint64_t v90 = (int)POSIXErrorCode.rawValue.getter();
              id v91 = objc_allocWithZone((Class)NSError);
              uint64_t v92 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v68 = objc_msgSend(v91, sel_initWithDomain_code_userInfo_, v92, v90, _NativeDictionary.bridged()());
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              id v93 = objc_msgSend(v68, sel_domain);
              id v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
              uint64_t v96 = v95;

              if (v94 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
                && v96 == v97)
              {
                swift_bridgeObjectRelease_n();
              }
              else
              {
                char v115 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v115 & 1) == 0)
                {
LABEL_189:
                  __break(1u);
                  goto LABEL_190;
                }
              }
              unint64_t v65 = (unint64_t)v175;
              uint64_t v63 = v176;
              Swift::String v67 = (uint64_t (*)(void))v174;
              goto LABEL_102;
            }
            *(void *)name = 0;
            uint64_t v182 = 0xE000000000000000;
            _StringGuts.grow(_:)(22);
            swift_bridgeObjectRelease();
            *(void *)name = 0xD000000000000014;
            uint64_t v182 = 0x80000001823A9780;
            Swift::Int32 v178 = v66;
            break;
        }
LABEL_206:
        v168._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v168);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181F3A030);
      }
    }
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v4, v3);
    uint64_t v47 = v170;
    _StringGuts._slowWithCString<A>(_:)();
    uint64_t v170 = v47;
    if (v47) {
      goto LABEL_184;
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = outlined consume of Data._Representation(v4, v3);
    uint64_t v6 = v177;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v15 = __OFADD__(v12++, 1);
    if (v15)
    {
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
      goto LABEL_183;
    }
    if (v12 >= v173) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v172 + 8 * v12);
    if (!v16) {
      break;
    }
LABEL_15:
    unint64_t v10 = (v16 - 1) & v16;
  }
  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v173) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v172 + 8 * v17);
  if (v16) {
    goto LABEL_14;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v173) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v172 + 8 * v17);
  if (v16) {
    goto LABEL_14;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v173) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v172 + 8 * v17);
  if (v16)
  {
LABEL_14:
    int64_t v12 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v173) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v172 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_15;
    }
  }
LABEL_183:
  __break(1u);
LABEL_184:
  swift_release();
  outlined consume of Data._Representation(v4, v3);
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in static _FileManagerImpl._setAttributes(_:at:followSymLinks:)(char *a1)
{
  return closure #1 in static _FileManagerImpl._setAttributes(_:at:followSymLinks:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(char **)(v1 + 32), *(unsigned char *)(v1 + 40));
}

uint64_t specialized Collection.formIndex(after:)(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v145 = a1[2];
  uint64_t v146 = v2;
  uint64_t v130 = a1;
  uint64_t v147 = a1[3];
  long long v4 = *(_OWORD *)(v1 + 176);
  long long v196 = *(_OWORD *)(v1 + 160);
  long long v197 = v4;
  uint64_t v5 = *(void *)(v1 + 200);
  uint64_t v198 = *(void *)(v1 + 192);
  long long v6 = *(_OWORD *)(v1 + 112);
  long long v192 = *(_OWORD *)(v1 + 96);
  long long v193 = v6;
  long long v7 = *(_OWORD *)(v1 + 144);
  long long v194 = *(_OWORD *)(v1 + 128);
  long long v195 = v7;
  long long v8 = *(_OWORD *)(v1 + 48);
  v189[2] = *(_OWORD *)(v1 + 32);
  v189[3] = v8;
  long long v9 = *(_OWORD *)(v1 + 80);
  long long v190 = *(_OWORD *)(v1 + 64);
  long long v191 = v9;
  long long v10 = *(_OWORD *)(v1 + 16);
  v189[0] = *(_OWORD *)v1;
  v189[1] = v10;
  uint64_t v188 = v5;
  uint64_t v11 = *((void *)&v196 + 1);
  long long v12 = v197;
  uint64_t v13 = v198;
  outlined retain of AttributedString.Runs((uint64_t)v189);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_143;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
  uint64_t v140 = v188;
  if (!*(void *)(v188 + 16))
  {
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
    goto LABEL_147;
  }
  uint64_t v151 = *(void *)(v188 + 16);
  uint64_t v127 = v11;
  long long v128 = v12;
  uint64_t v129 = v13;
  uint64_t v15 = *(void *)&v189[0];
  uint64_t v16 = *(void *)(*(void *)&v189[0] + 64);
  uint64_t v17 = *(void *)(*(void *)&v189[0] + 72);
  uint64_t v18 = *(void *)(*(void *)&v189[0] + 80);
  uint64_t v148 = *(void *)(*(void *)&v189[0] + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v16) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  if (result < 0) {
    goto LABEL_146;
  }
  uint64_t v20 = result;
  if (v19 < result) {
    goto LABEL_146;
  }
  uint64_t v138 = v3;
  uint64_t v136 = v15;
  if (!v16 || result >= v18 || !*(_WORD *)(v16 + 16))
  {
    unint64_t v33 = swift_unknownObjectRetain();
    unint64_t v34 = specialized Rope._endPath.getter(v33);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v35 = 0;
    uint64_t v22 = 0;
    if (!v16)
    {
      uint64_t v36 = 0;
LABEL_49:
      uint64_t v143 = v20 - v22;
      if (__OFSUB__(v20, v22))
      {
LABEL_147:
        __break(1u);
        goto LABEL_148;
      }
      long long v43 = *(_OWORD *)(v15 + 16);
      long long v44 = *(_OWORD *)(v15 + 48);
      v199[1] = *(_OWORD *)(v15 + 32);
      v199[2] = v44;
      v199[0] = v43;
      long long v45 = *(_OWORD *)(v15 + 16);
      v200[1] = *(_OWORD *)(v15 + 32);
      v200[2] = v44;
      v200[0] = v45;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v200, (uint64_t)v201);
      outlined retain of Locale((uint64_t)v201);
      BigString.utf8.getter();
      uint64_t result = outlined release of Locale((uint64_t)v199);
      if (__OFSUB__(0, v22))
      {
LABEL_148:
        __break(1u);
        goto LABEL_149;
      }
      uint64_t v46 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v123 = v47;
      uint64_t v124 = v46;
      uint64_t v125 = v49;
      uint64_t v126 = v48;
      uint64_t result = outlined release of Locale((uint64_t)&v187);
      uint64_t v135 = *((void *)&v190 + 1);
      if (v36 >= *((uint64_t *)&v190 + 1))
      {
LABEL_149:
        __break(1u);
        goto LABEL_150;
      }
      if (v148 != *(void *)(v15 + 88))
      {
LABEL_150:
        __break(1u);
        goto LABEL_151;
      }
      unint64_t v144 = v34;
      int v50 = *(uint64_t **)(v15 + 64);
      if (v35)
      {
        unint64_t v51 = v144;
        unint64_t v52 = v35 + 24 * ((v144 >> ((4 * *(unsigned char *)(v35 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v53 = *(void *)(v52 + 40);
        uint64_t v152 = *(void *)(v52 + 32);
        swift_bridgeObjectRetain();
        uint64_t v122 = v53;
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v54 = v148;
        uint64_t v55 = v148;
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v51 = v144;
        specialized Rope._Node.subscript.getter(v144, (uint64_t)v50);
        uint64_t v152 = v56;
        uint64_t v122 = v57;
        uint64_t result = swift_unknownObjectRelease();
        int v50 = *(uint64_t **)(v15 + 64);
        uint64_t v55 = *(void *)(v15 + 88);
        uint64_t v54 = v148;
      }
      id v121 = (long long *)(v15 + 16);
      uint64_t v58 = v36 + 1;
      *(void *)&long long v172 = v54;
      *((void *)&v172 + 1) = v51;
      uint64_t v155 = (long long *)((char *)&v165 + 8);
      uint64_t v156 = &v175;
      *(void *)&long long v173 = v35;
      uint64_t v134 = (uint64_t *)(v140 + 40);
LABEL_57:
      if (v54 != v55) {
        goto LABEL_139;
      }
      uint64_t v139 = v55;
      uint64_t v142 = v35;
      if (v35)
      {
        unint64_t v59 = v144;
        unint64_t v60 = *(void *)(v35 + 24 * ((v144 >> ((4 * *(unsigned char *)(v35 + 18) + 8) & 0x3C)) & 0xF) + 24);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v59 = v144;
        unint64_t v60 = specialized Rope._Node.subscript.getter(v144, (uint64_t)v50);
      }
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (__OFADD__(v143, v60)) {
        goto LABEL_140;
      }
      uint64_t v133 = v143 + v60;
      if (v50)
      {
        unint64_t v61 = ((-15 << ((4 * *((unsigned char *)v50 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v50 + 18) | ((unint64_t)*((unsigned __int16 *)v50 + 8) << ((4 * *((unsigned char *)v50 + 18) + 8) & 0x3C));
        uint64_t result = swift_unknownObjectRetain();
      }
      else
      {
        unint64_t v61 = 0;
      }
      uint64_t v62 = v152;
      if (v59 >= v61) {
        goto LABEL_141;
      }
      if (v142)
      {
        char v63 = (4 * *(unsigned char *)(v142 + 18) + 8) & 0x3C;
        unint64_t v64 = ((v59 >> v63) & 0xF) + 1;
        if (v64 < *(unsigned __int16 *)(v142 + 16))
        {
          unint64_t v141 = (v64 << v63) | ((-15 << v63) - 1) & v59;
          uint64_t result = swift_unknownObjectRelease_n();
LABEL_72:
          int v50 = (uint64_t *)v173;
          uint64_t v69 = v151;
LABEL_80:
          if (v58 == v135)
          {
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
LABEL_121:
            if (v139 == *(void *)(v15 + 88))
            {
              if (v142)
              {
                unint64_t v101 = *(void *)(v142 + 24 * ((v59 >> ((4 * *(unsigned char *)(v142 + 18) + 8) & 0x3C)) & 0xF) + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                uint64_t v102 = *(void *)(v15 + 64);
                swift_unknownObjectRetain();
                unint64_t v101 = specialized Rope._Node.subscript.getter(v59, v102);
                swift_unknownObjectRelease();
              }
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              unint64_t v103 = v143 + v101;
              if (!__OFADD__(v143, v101))
              {
                long long v104 = *v121;
                long long v105 = v121[2];
                long long v164 = v121[1];
                long long v165 = v105;
                long long v163 = v104;
                long long v106 = *v121;
                long long v173 = v121[1];
                long long v174 = v105;
                long long v172 = v106;
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v172, (uint64_t)&v177);
                outlined retain of Locale((uint64_t)&v177);
                BigString.utf8.getter();
                outlined release of Locale((uint64_t)&v163);
                uint64_t result = BigString.Index.utf8Offset.getter();
                if (!__OFSUB__(v103, result))
                {
                  uint64_t v107 = BigString.UTF8View.index(_:offsetBy:)();
                  uint64_t v109 = v108;
                  uint64_t v111 = v110;
                  uint64_t v113 = v112;
                  outlined release of Locale((uint64_t)&v182);
                  uint64_t v114 = v127;
                  uint64_t v116 = *((void *)&v128 + 1);
                  uint64_t v117 = v128;
                  uint64_t v115 = v129;
                  if (static BigString.Index.< infix(_:_:)())
                  {
                    uint64_t v107 = v114;
                    uint64_t v109 = v117;
                    uint64_t v111 = v116;
                    uint64_t v113 = v115;
                  }
                  char v118 = static BigString.Index.< infix(_:_:)();
                  uint64_t result = outlined release of AttributedString.Runs((uint64_t)v189);
                  if ((v118 & 1) == 0)
                  {
                    uint64_t v119 = v130;
                    uint64_t *v130 = v107;
                    v119[1] = v109;
                    v119[2] = v111;
                    v119[3] = v113;
                    return result;
                  }
                  goto LABEL_154;
                }
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
                goto LABEL_157;
              }
LABEL_152:
              __break(1u);
              goto LABEL_153;
            }
LABEL_151:
            __break(1u);
            goto LABEL_152;
          }
          if ((void)v172 != *(void *)(v15 + 88)) {
            goto LABEL_142;
          }
          uint64_t v148 = v172;
          uint64_t v131 = v50;
          uint64_t v132 = v58;
          if (v50)
          {
            uint64_t v73 = &v50[3 * ((v141 >> ((4 * *((unsigned char *)v50 + 18) + 8) & 0x3C)) & 0xF)];
            uint64_t v74 = v73[4];
            uint64_t v75 = v73[5];
            swift_bridgeObjectRetain();
            uint64_t v137 = v75;
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v76 = *(void *)(v15 + 64);
            swift_unknownObjectRetain();
            uint64_t v69 = v151;
            uint64_t v62 = v152;
            specialized Rope._Node.subscript.getter(v141, v76);
            uint64_t v137 = v77;
            uint64_t v74 = v78;
            swift_unknownObjectRelease();
          }
          uint64_t result = swift_bridgeObjectRetain();
          uint64_t v79 = 0;
          unint64_t v80 = v134;
          uint64_t v157 = v74;
          while (1)
          {
            uint64_t v82 = v79 + 1;
            if (__OFADD__(v79, 1))
            {
              __break(1u);
LABEL_134:
              __break(1u);
              goto LABEL_135;
            }
            uint64_t v83 = *(v80 - 1);
            uint64_t v84 = *v80;
            if (*(void *)(v62 + 16))
            {
              swift_bridgeObjectRetain_n();
              unint64_t v85 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v84);
              if (v86)
              {
                outlined init with copy of AttributedString._AttributeValue(*(void *)(v62 + 56) + 72 * v85, (uint64_t)&v182);
              }
              else
              {
                uint64_t v186 = 0;
                long long v184 = 0u;
                long long v185 = 0u;
                long long v182 = 0u;
                long long v183 = 0u;
              }
              swift_bridgeObjectRelease();
              uint64_t v74 = v157;
              if (!*(void *)(v157 + 16))
              {
LABEL_95:
                uint64_t v181 = 0;
                long long v179 = 0u;
                long long v180 = 0u;
                long long v177 = 0u;
                long long v178 = 0u;
                goto LABEL_102;
              }
            }
            else
            {
              uint64_t v186 = 0;
              long long v184 = 0u;
              long long v185 = 0u;
              long long v182 = 0u;
              long long v183 = 0u;
              swift_bridgeObjectRetain();
              if (!*(void *)(v74 + 16)) {
                goto LABEL_95;
              }
            }
            swift_bridgeObjectRetain();
            unint64_t v87 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v84);
            if (v88)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v74 + 56) + 72 * v87, (uint64_t)&v177);
            }
            else
            {
              uint64_t v181 = 0;
              long long v179 = 0u;
              long long v180 = 0u;
              long long v177 = 0u;
              long long v178 = 0u;
            }
            swift_bridgeObjectRelease();
LABEL_102:
            int v50 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v182, (uint64_t)&v172, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v177, (uint64_t)v156, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!*((void *)&v173 + 1))
            {
              if (v176) {
                goto LABEL_119;
              }
              outlined destroy of Any?((uint64_t)&v172, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v177, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              uint64_t result = outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_89;
            }
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v172, (uint64_t)v171, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v176) {
              goto LABEL_118;
            }
            long long v89 = *((_OWORD *)v156 + 3);
            void v169[2] = *((_OWORD *)v156 + 2);
            v169[3] = v89;
            uint64_t v170 = v156[8];
            long long v90 = *((_OWORD *)v156 + 1);
            v169[0] = *(_OWORD *)v156;
            v169[1] = v90;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v171, (uint64_t)v168);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v169, (uint64_t)v167);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v168, (uint64_t)&v163, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v167, (uint64_t)v155, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (*((void *)&v164 + 1))
            {
              if (!v166)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v163);
LABEL_87:
                char v81 = 0;
                goto LABEL_88;
              }
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v163, (uint64_t)v160);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v155, (uint64_t)v159);
              uint64_t v91 = v161;
              uint64_t v150 = v162;
              char v149 = __swift_project_boxed_opaque_existential_1(v160, v161);
              id v154 = &v120;
              uint64_t v92 = *(void *)(v91 - 8);
              MEMORY[0x1F4188790](v149);
              id v94 = (char *)&v120 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v159, (uint64_t)&v158);
              uint64_t v95 = type metadata accessor for Optional();
              id v153 = &v120;
              uint64_t v96 = *(void *)(v95 - 8);
              MEMORY[0x1F4188790](v95);
              unint64_t v98 = (char *)&v120 - v97;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              int v99 = swift_dynamicCast();
              id v100 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v92 + 56);
              if (v99)
              {
                v100(v98, 0, 1, v91);
                (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v94, v98, v91);
                char v81 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v92 + 8))(v94, v91);
              }
              else
              {
                v100(v98, 1, 1, v91);
                (*(void (**)(char *, uint64_t))(v96 + 8))(v98, v95);
                char v81 = 0;
              }
              uint64_t v62 = v152;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v159);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v160);
              uint64_t v69 = v151;
            }
            else
            {
              if (v166)
              {
                outlined destroy of Any?((uint64_t)v155, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_87;
              }
              char v81 = 1;
            }
LABEL_88:
            outlined destroy of Any?((uint64_t)v167, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?((uint64_t)v168, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v169);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v171);
            outlined destroy of Any?((uint64_t)&v172, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v177, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t result = outlined destroy of Any?((uint64_t)&v182, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v81 & 1) == 0) {
              goto LABEL_120;
            }
LABEL_89:
            v80 += 2;
            ++v79;
            uint64_t v74 = v157;
            if (v82 == v69)
            {
              outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v188);
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v15 = v136;
              int v50 = *(uint64_t **)(v136 + 64);
              uint64_t v55 = *(void *)(v136 + 88);
              uint64_t v143 = v133;
              uint64_t v54 = v148;
              *(void *)&long long v172 = v148;
              *((void *)&v172 + 1) = v141;
              uint64_t v35 = (uint64_t)v131;
              unint64_t v144 = v141;
              *(void *)&long long v173 = v131;
              uint64_t v58 = v132 + 1;
              if (!__OFADD__(v132, 1)) {
                goto LABEL_57;
              }
              __break(1u);
LABEL_118:
              outlined destroy of AttributedString._AttributeValue((uint64_t)v171);
LABEL_119:
              outlined destroy of Any?((uint64_t)&v172, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?((uint64_t)&v177, v50);
              outlined destroy of Any?((uint64_t)&v182, v50);
LABEL_120:
              outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v188);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v15 = v136;
              unint64_t v59 = v144;
              goto LABEL_121;
            }
          }
        }
      }
      int v65 = *((unsigned __int8 *)v50 + 18);
      char v66 = (4 * v65 + 8) & 0x3C;
      uint64_t v67 = (v59 >> v66) & 0xF;
      *(void *)&long long v163 = v67;
      if (v65)
      {
        swift_unknownObjectRetain();
        char v68 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v50 + 3), (uint64_t *)&v163, (uint64_t)&v172, (uint64_t)v50, v65);
        uint64_t result = swift_unknownObjectRelease();
        if (v68)
        {
          uint64_t result = swift_unknownObjectRelease_n();
          unint64_t v141 = *((void *)&v172 + 1);
          uint64_t v62 = v152;
          goto LABEL_72;
        }
      }
      else
      {
        uint64_t v70 = v67 + 1;
        if (v67 + 1 < (unint64_t)*((unsigned __int16 *)v50 + 8))
        {
          uint64_t result = swift_unknownObjectRelease_n();
          unint64_t v141 = (v70 << v66) | ((-15 << v66) - 1) & v59;
LABEL_79:
          uint64_t v69 = v151;
          uint64_t v62 = v152;
          goto LABEL_80;
        }
      }
      if (v50)
      {
        int v71 = *((unsigned __int8 *)v50 + 18);
        uint64_t v72 = *((unsigned __int16 *)v50 + 8);
        uint64_t result = swift_unknownObjectRelease_n();
        unint64_t v141 = ((-15 << ((4 * v71 + 8) & 0x3C)) - 1) & v71 | (unint64_t)(v72 << ((4 * v71 + 8) & 0x3C));
      }
      else
      {
        unint64_t v141 = 0;
      }
      int v50 = 0;
      *(void *)&long long v172 = v139;
      goto LABEL_79;
    }
LABEL_31:
    swift_unknownObjectRetain();
    uint64_t v36 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v148, v34, v35, v16, v17);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_49;
  }
  uint64_t v157 = v17;
  uint64_t v21 = *(unsigned __int8 *)(v16 + 18);
  if (*(unsigned char *)(v16 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v22 = v20;
    uint64_t v23 = v16;
    while (1)
    {
      uint64_t v26 = *(unsigned __int16 *)(v23 + 16);
      if (!*(_WORD *)(v23 + 16)) {
        break;
      }
      uint64_t v27 = *(void *)(v23 + 40);
      BOOL v28 = __OFSUB__(v22, v27);
      uint64_t v29 = v22 - v27;
      if (v28) {
        goto LABEL_137;
      }
      if (__OFADD__(v29, 1)) {
        goto LABEL_138;
      }
      if (v29 + 1 < 1)
      {
        uint64_t v26 = 0;
        goto LABEL_16;
      }
      if (v26 == 1)
      {
        uint64_t v22 = v29;
        break;
      }
      size_t v30 = (uint64_t *)(v23 + 64);
      uint64_t v31 = 1;
      while (1)
      {
        uint64_t v32 = *v30;
        v30 += 3;
        uint64_t v22 = v29 - v32;
        if (__OFSUB__(v29, v32)) {
          goto LABEL_134;
        }
        if (__OFADD__(v22, 1))
        {
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        if (v22 + 1 < 1) {
          break;
        }
        ++v31;
        uint64_t v29 = v22;
        if (v26 == v31) {
          goto LABEL_15;
        }
      }
      uint64_t v26 = v31;
      uint64_t v22 = v29;
LABEL_16:
      char v24 = (4 * *(unsigned char *)(v23 + 18) + 8) & 0x3C;
      uint64_t v21 = ((-15 << v24) - 1) & v21 | (v26 << v24);
      uint64_t v25 = *(void *)(v23 + 24 + 24 * v26);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v23 = v25;
      if (!*(unsigned char *)(v25 + 18)) {
        goto LABEL_33;
      }
    }
LABEL_15:
    if (!v22) {
      goto LABEL_16;
    }
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v22 = v20;
  uint64_t v25 = v16;
LABEL_33:
  uint64_t v37 = *(unsigned __int16 *)(v25 + 16);
  if (*(_WORD *)(v25 + 16))
  {
    uint64_t v38 = *(void *)(v25 + 24);
    BOOL v28 = __OFSUB__(v22, v38);
    uint64_t v39 = v22 - v38;
    uint64_t v15 = v136;
    if (v28)
    {
LABEL_157:
      __break(1u);
      goto LABEL_158;
    }
    if (__OFADD__(v39, 1))
    {
LABEL_158:
      __break(1u);
      goto LABEL_159;
    }
    uint64_t v35 = v25;
    if (v39 + 1 < 1)
    {
      uint64_t v37 = 0;
LABEL_47:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v34 = v21 & 0xFFFFFFFFFFFFF0FFLL | (v37 << 8);
      uint64_t v17 = v157;
      goto LABEL_31;
    }
    if (v37 != 1)
    {
      uint64_t v40 = (uint64_t *)(v25 + 48);
      uint64_t v41 = 1;
      while (1)
      {
        uint64_t v42 = *v40;
        v40 += 3;
        uint64_t v22 = v39 - v42;
        if (__OFSUB__(v39, v42)) {
          goto LABEL_155;
        }
        if (__OFADD__(v22, 1)) {
          goto LABEL_156;
        }
        if (v22 + 1 < 1) {
          break;
        }
        ++v41;
        uint64_t v39 = v22;
        if (v37 == v41) {
          goto LABEL_46;
        }
      }
      uint64_t v37 = v41;
      uint64_t v22 = v39;
      goto LABEL_47;
    }
    uint64_t v22 = v39;
  }
  else
  {
    uint64_t v35 = v25;
    uint64_t v15 = v136;
  }
LABEL_46:
  if (!v22) {
    goto LABEL_47;
  }
LABEL_159:
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection.formIndex(before:)(uint64_t *a1)
{
  uint64_t v129 = *a1;
  uint64_t v120 = a1[1];
  uint64_t v126 = a1[2];
  uint64_t v124 = a1[3];
  long long v3 = *(_OWORD *)(v1 + 176);
  long long v169 = *(_OWORD *)(v1 + 160);
  long long v170 = v3;
  uint64_t v4 = *(void *)(v1 + 200);
  uint64_t v171 = *(void *)(v1 + 192);
  long long v5 = *(_OWORD *)(v1 + 112);
  v166[6] = *(_OWORD *)(v1 + 96);
  v166[7] = v5;
  long long v6 = *(_OWORD *)(v1 + 144);
  long long v167 = *(_OWORD *)(v1 + 128);
  long long v168 = v6;
  long long v7 = *(_OWORD *)(v1 + 48);
  v166[2] = *(_OWORD *)(v1 + 32);
  v166[3] = v7;
  long long v8 = *(_OWORD *)(v1 + 80);
  v166[4] = *(_OWORD *)(v1 + 64);
  v166[5] = v8;
  long long v9 = *(_OWORD *)(v1 + 16);
  v166[0] = *(_OWORD *)v1;
  v166[1] = v9;
  uint64_t v165 = v4;
  uint64_t v10 = *((void *)&v167 + 1);
  long long v11 = v168;
  uint64_t v12 = v169;
  outlined retain of AttributedString.Runs((uint64_t)v166);
  uint64_t v115 = v10;
  long long v116 = v11;
  uint64_t v117 = v12;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }
  uint64_t v118 = v165;
  uint64_t v14 = *(void *)(v165 + 16);
  if (!v14)
  {
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }
  uint64_t v114 = a1;
  uint64_t v15 = *(void *)&v166[0];
  uint64_t v16 = *(void *)(*(void *)&v166[0] + 64);
  uint64_t v17 = *(void *)(*(void *)&v166[0] + 72);
  uint64_t v18 = *(void *)(*(void *)&v166[0] + 80);
  *(void *)&long long v130 = *(void *)(*(void *)&v166[0] + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v19 = result - 1;
  if (__OFSUB__(result, 1))
  {
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }
  if (v16) {
    uint64_t v20 = v18;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v19 < 0 || v20 < v19) {
    goto LABEL_130;
  }
  uint64_t v125 = v14;
  if (!v16 || !*(_WORD *)(v16 + 16) || v19 >= v18)
  {
    unint64_t v33 = swift_unknownObjectRetain();
    *((void *)&v130 + 1) = specialized Rope._endPath.getter(v33);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v22 = 0;
    uint64_t v131 = 0;
    if (!v16)
    {
      uint64_t v34 = 0;
LABEL_50:
      uint64_t v121 = v19 - v22;
      if (__OFSUB__(v19, v22))
      {
LABEL_131:
        __break(1u);
        goto LABEL_132;
      }
      if ((void)v130 != *(void *)(v15 + 88))
      {
LABEL_132:
        __break(1u);
        goto LABEL_133;
      }
      if (v131)
      {
        uint64_t v41 = v131 + 24 * ((*((void *)&v130 + 1) >> ((4 * *(unsigned char *)(v131 + 18) + 8) & 0x3C)) & 0xFLL);
        uint64_t v42 = *(void *)(v41 + 32);
        uint64_t v43 = *(void *)(v41 + 40);
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v44 = *(void *)(v15 + 64);
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(*((unint64_t *)&v130 + 1), v44);
        uint64_t v43 = v45;
        uint64_t v42 = v46;
        uint64_t result = swift_unknownObjectRelease();
      }
      if (*((uint64_t *)&v166[0] + 1) >= v34)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_114:
        long long v92 = *(_OWORD *)(v15 + 16);
        long long v93 = *(_OWORD *)(v15 + 48);
        long long v142 = *(_OWORD *)(v15 + 32);
        long long v143 = v93;
        long long v141 = v92;
        long long v94 = *(_OWORD *)(v15 + 16);
        long long v151 = *(_OWORD *)(v15 + 32);
        long long v152 = v93;
        long long v150 = v94;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v150, (uint64_t)&v155);
        outlined retain of Locale((uint64_t)&v155);
        BigString.utf8.getter();
        outlined release of Locale((uint64_t)&v141);
        uint64_t result = BigString.Index.utf8Offset.getter();
        if (!__OFSUB__(v121, result))
        {
          uint64_t v95 = BigString.UTF8View.index(_:offsetBy:)();
          uint64_t v97 = v96;
          uint64_t v99 = v98;
          uint64_t v101 = v100;
          outlined release of Locale((uint64_t)&v160);
          uint64_t v102 = v115;
          long long v104 = v116;
          uint64_t v103 = v117;
          if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
          {
            uint64_t v95 = v102;
            uint64_t v99 = *((void *)&v104 + 1);
            uint64_t v97 = v104;
            uint64_t v101 = v103;
          }
          char v105 = static BigString.Index.< infix(_:_:)();
          uint64_t result = outlined release of AttributedString.Runs((uint64_t)v166);
          if ((v105 & 1) == 0)
          {
            long long v106 = v114;
            uint64_t *v114 = v95;
            v106[1] = v97;
            v106[2] = v99;
            _OWORD v106[3] = v101;
            return result;
          }
          goto LABEL_134;
        }
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
        goto LABEL_137;
      }
      uint64_t v108 = *((void *)&v166[0] + 1);
      uint64_t v109 = v43;
      uint64_t v134 = (long long *)((char *)&v143 + 8);
      uint64_t v135 = &v153;
      uint64_t v111 = (uint64_t *)(v118 + 40);
      uint64_t v113 = v15;
      uint64_t v133 = v42;
LABEL_57:
      uint64_t v47 = *(void *)(v15 + 64);
      uint64_t v48 = *(void *)(v15 + 88);
      unint64_t v49 = *((void *)&v130 + 1);
      long long v150 = v130;
      uint64_t v50 = v131;
      *(void *)&long long v151 = v131;
      if ((void)v130 != v48)
      {
LABEL_137:
        __break(1u);
        goto LABEL_138;
      }
      uint64_t v119 = v34;
      if (v47)
      {
        unint64_t v51 = *(unsigned __int8 *)(v47 + 18);
        uint64_t result = swift_unknownObjectRetain();
        unint64_t v49 = *((void *)&v130 + 1);
        uint64_t v50 = v131;
        if (*((void *)&v130 + 1) <= v51) {
          goto LABEL_138;
        }
      }
      else if (!*((void *)&v130 + 1))
      {
LABEL_138:
        __break(1u);
        goto LABEL_139;
      }
      if (v50)
      {
        char v52 = (4 * *(unsigned char *)(v50 + 18) + 8) & 0x3C;
        if (((v49 >> v52) & 0xF) != 0)
        {
          unint64_t v53 = ((((v49 >> v52) & 0xF) - 1) << v52) | ((-15 << v52) - 1) & v49;
          *((void *)&v150 + 1) = v53;
LABEL_69:
          char v58 = (4 * *(unsigned char *)(v50 + 18) + 8) & 0x3C;
          *((void *)&v130 + 1) = v53;
          uint64_t v131 = v50;
          unint64_t v59 = *(void *)(v50 + 24 * ((v53 >> v58) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char v60 = 0;
LABEL_73:
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if (__OFSUB__(v121, v59))
          {
LABEL_139:
            __break(1u);
            goto LABEL_140;
          }
          if ((void)v130 != *(void *)(v15 + 88))
          {
LABEL_140:
            __break(1u);
            goto LABEL_141;
          }
          uint64_t v110 = v121 - v59;
          if (v60)
          {
            uint64_t v61 = *(void *)(v15 + 64);
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(*((unint64_t *)&v130 + 1), v61);
            uint64_t v63 = v62;
            uint64_t v112 = v64;
            swift_unknownObjectRelease();
          }
          else
          {
            uint64_t v65 = v131 + 24 * ((*((void *)&v130 + 1) >> ((4 * *(unsigned char *)(v131 + 18) + 8) & 0x3C)) & 0xFLL);
            uint64_t v63 = *(void *)(v65 + 32);
            uint64_t v66 = *(void *)(v65 + 40);
            swift_bridgeObjectRetain();
            uint64_t v112 = v66;
            swift_bridgeObjectRetain();
          }
          uint64_t v67 = v133;
          --v119;
          uint64_t result = swift_bridgeObjectRetain();
          uint64_t v68 = 0;
          uint64_t v69 = v111;
          uint64_t v70 = v125;
          uint64_t v132 = v63;
          while (1)
          {
            uint64_t v72 = v68 + 1;
            if (__OFADD__(v68, 1)) {
              goto LABEL_122;
            }
            uint64_t v73 = *(v69 - 1);
            uint64_t v74 = *v69;
            if (*(void *)(v67 + 16))
            {
              swift_bridgeObjectRetain_n();
              unint64_t v75 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v74);
              if (v76)
              {
                outlined init with copy of AttributedString._AttributeValue(*(void *)(v67 + 56) + 72 * v75, (uint64_t)&v160);
              }
              else
              {
                uint64_t v164 = 0;
                long long v162 = 0u;
                long long v163 = 0u;
                long long v160 = 0u;
                long long v161 = 0u;
              }
              swift_bridgeObjectRelease();
              if (!*(void *)(v63 + 16))
              {
LABEL_88:
                uint64_t v159 = 0;
                long long v157 = 0u;
                long long v158 = 0u;
                long long v155 = 0u;
                long long v156 = 0u;
                goto LABEL_95;
              }
            }
            else
            {
              uint64_t v164 = 0;
              long long v162 = 0u;
              long long v163 = 0u;
              long long v160 = 0u;
              long long v161 = 0u;
              swift_bridgeObjectRetain();
              if (!*(void *)(v63 + 16)) {
                goto LABEL_88;
              }
            }
            swift_bridgeObjectRetain();
            unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v74);
            if (v78)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v63 + 56) + 72 * v77, (uint64_t)&v155);
            }
            else
            {
              uint64_t v159 = 0;
              long long v157 = 0u;
              long long v158 = 0u;
              long long v155 = 0u;
              long long v156 = 0u;
            }
            swift_bridgeObjectRelease();
            uint64_t v67 = v133;
LABEL_95:
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v160, (uint64_t)&v150, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v155, (uint64_t)v135, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!*((void *)&v151 + 1))
            {
              if (v154) {
                goto LABEL_112;
              }
              outlined destroy of Any?((uint64_t)&v150, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v155, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              uint64_t result = outlined destroy of Any?((uint64_t)&v160, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_82;
            }
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v150, (uint64_t)v149, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v154)
            {
              outlined destroy of AttributedString._AttributeValue((uint64_t)v149);
LABEL_112:
              outlined destroy of Any?((uint64_t)&v150, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?((uint64_t)&v155, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v160, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_113:
              outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v165);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v15 = v113;
              goto LABEL_114;
            }
            long long v79 = *((_OWORD *)v135 + 3);
            v147[2] = *((_OWORD *)v135 + 2);
            v147[3] = v79;
            uint64_t v148 = v135[8];
            long long v80 = *((_OWORD *)v135 + 1);
            v147[0] = *(_OWORD *)v135;
            v147[1] = v80;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v149, (uint64_t)v146);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v147, (uint64_t)v145);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v146, (uint64_t)&v141, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v145, (uint64_t)v134, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (*((void *)&v142 + 1))
            {
              if (!v144)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v141);
LABEL_80:
                char v71 = 0;
                goto LABEL_81;
              }
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v141, (uint64_t)v138);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v134, (uint64_t)v137);
              uint64_t v81 = v139;
              uint64_t v123 = v140;
              uint64_t v122 = __swift_project_boxed_opaque_existential_1(v138, v139);
              long long v128 = &v107;
              uint64_t v82 = *(void *)(v81 - 8);
              MEMORY[0x1F4188790](v122);
              uint64_t v84 = (char *)&v107 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v137, (uint64_t)&v136);
              uint64_t v85 = type metadata accessor for Optional();
              uint64_t v127 = &v107;
              uint64_t v86 = *(void *)(v85 - 8);
              MEMORY[0x1F4188790](v85);
              char v88 = (char *)&v107 - v87;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              int v89 = swift_dynamicCast();
              long long v90 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56);
              if (v89)
              {
                v90(v88, 0, 1, v81);
                (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v84, v88, v81);
                char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v81);
              }
              else
              {
                v90(v88, 1, 1, v81);
                (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v85);
                char v71 = 0;
              }
              uint64_t v70 = v125;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
              uint64_t v67 = v133;
            }
            else
            {
              if (v144)
              {
                outlined destroy of Any?((uint64_t)v134, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_80;
              }
              char v71 = 1;
            }
LABEL_81:
            outlined destroy of Any?((uint64_t)v145, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?((uint64_t)v146, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v147);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v149);
            outlined destroy of Any?((uint64_t)&v150, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v155, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t result = outlined destroy of Any?((uint64_t)&v160, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t v63 = v132;
            if ((v71 & 1) == 0) {
              goto LABEL_113;
            }
LABEL_82:
            v69 += 2;
            ++v68;
            if (v72 == v70)
            {
              outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v165);
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v91 = v110;
              uint64_t v121 = v110;
              uint64_t v34 = v119;
              uint64_t v15 = v113;
              if (v108 < v119) {
                goto LABEL_57;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v121 = v91;
              goto LABEL_114;
            }
          }
        }
      }
      int v54 = *(unsigned __int8 *)(v47 + 18);
      char v55 = (4 * v54 + 8) & 0x3C;
      uint64_t v56 = (v49 >> v55) & 0xF;
      *(void *)&long long v141 = v56;
      if (v54)
      {
        swift_unknownObjectRetain();
        char v57 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v47 + 16, v47 + 24, (uint64_t *)&v141, (uint64_t)&v150, v54);
        uint64_t result = swift_unknownObjectRelease();
        if (v57)
        {
          if ((void)v150 != (void)v130)
          {
LABEL_141:
            __break(1u);
            goto LABEL_142;
          }
          uint64_t v50 = v151;
          unint64_t v53 = *((void *)&v150 + 1);
          if ((void)v151) {
            goto LABEL_69;
          }
          goto LABEL_72;
        }
      }
      else if (v56)
      {
        unint64_t v53 = ((v56 - 1) << v55) | ((-15 << v55) - 1) & v49;
        *((void *)&v150 + 1) = v53;
        *(void *)&long long v151 = v47;
        uint64_t v50 = v47;
        if (v47) {
          goto LABEL_69;
        }
LABEL_72:
        swift_unknownObjectRetain();
        *((void *)&v130 + 1) = v53;
        unint64_t v59 = specialized Rope._Node.subscript.getter(v53, v47);
        swift_unknownObjectRelease();
        uint64_t v131 = 0;
        char v60 = 1;
        goto LABEL_73;
      }
LABEL_142:
      __break(1u);
      goto LABEL_143;
    }
LABEL_32:
    swift_unknownObjectRetain();
    uint64_t v34 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v130, *((unint64_t *)&v130 + 1), v131, v16, v17);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_50;
  }
  uint64_t v135 = (uint64_t *)v17;
  uint64_t v113 = v15;
  uint64_t v21 = *(unsigned __int8 *)(v16 + 18);
  if (*(unsigned char *)(v16 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v22 = v19;
    uint64_t v23 = v16;
    while (1)
    {
      uint64_t v26 = *(unsigned __int16 *)(v23 + 16);
      if (!*(_WORD *)(v23 + 16)) {
        break;
      }
      uint64_t v27 = *(void *)(v23 + 40);
      BOOL v28 = __OFSUB__(v22, v27);
      uint64_t v29 = v22 - v27;
      if (v28) {
        goto LABEL_124;
      }
      if (__OFADD__(v29, 1)) {
        goto LABEL_125;
      }
      if (v29 + 1 < 1)
      {
        uint64_t v26 = 0;
        goto LABEL_17;
      }
      if (v26 == 1)
      {
        uint64_t v22 = v29;
        break;
      }
      size_t v30 = (uint64_t *)(v23 + 64);
      uint64_t v31 = 1;
      while (1)
      {
        uint64_t v32 = *v30;
        v30 += 3;
        uint64_t v22 = v29 - v32;
        if (__OFSUB__(v29, v32))
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
          goto LABEL_123;
        }
        if (__OFADD__(v22, 1)) {
          goto LABEL_121;
        }
        if (v22 + 1 < 1) {
          break;
        }
        ++v31;
        uint64_t v29 = v22;
        if (v26 == v31) {
          goto LABEL_16;
        }
      }
      uint64_t v26 = v31;
      uint64_t v22 = v29;
LABEL_17:
      char v24 = (4 * *(unsigned char *)(v23 + 18) + 8) & 0x3C;
      uint64_t v21 = ((-15 << v24) - 1) & v21 | (v26 << v24);
      uint64_t v25 = *(void *)(v23 + 24 + 24 * v26);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v23 = v25;
      if (!*(unsigned char *)(v25 + 18)) {
        goto LABEL_34;
      }
    }
LABEL_16:
    if (!v22) {
      goto LABEL_17;
    }
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v22 = v19;
  uint64_t v25 = v16;
LABEL_34:
  uint64_t v35 = *(unsigned __int16 *)(v25 + 16);
  uint64_t v131 = v25;
  if (v35)
  {
    uint64_t v36 = *(void *)(v25 + 24);
    BOOL v28 = __OFSUB__(v22, v36);
    uint64_t v37 = v22 - v36;
    if (v28)
    {
LABEL_143:
      __break(1u);
      goto LABEL_144;
    }
    if (__OFADD__(v37, 1))
    {
LABEL_144:
      __break(1u);
      goto LABEL_145;
    }
    if (v37 + 1 < 1)
    {
      uint64_t v35 = 0;
LABEL_48:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      *((void *)&v130 + 1) = v21 & 0xFFFFFFFFFFFFF0FFLL | (v35 << 8);
      uint64_t v15 = v113;
      uint64_t v17 = (uint64_t)v135;
      goto LABEL_32;
    }
    if (v35 != 1)
    {
      uint64_t v38 = (uint64_t *)(v131 + 48);
      uint64_t v39 = 1;
      while (1)
      {
        uint64_t v40 = *v38;
        v38 += 3;
        uint64_t v22 = v37 - v40;
        if (__OFSUB__(v37, v40)) {
          goto LABEL_135;
        }
        if (__OFADD__(v22, 1)) {
          goto LABEL_136;
        }
        if (v22 + 1 < 1) {
          break;
        }
        ++v39;
        uint64_t v37 = v22;
        if (v35 == v39) {
          goto LABEL_47;
        }
      }
      uint64_t v35 = v39;
      uint64_t v22 = v37;
      goto LABEL_48;
    }
    uint64_t v22 = v37;
  }
LABEL_47:
  if (!v22) {
    goto LABEL_48;
  }
LABEL_145:
  __break(1u);
  return result;
}

uint64_t protocol witness for static AttributeScope.decodingConfiguration.getter in conformance _FoundationPlusScope<A>()
{
  return static AttributeScope.decodingConfiguration.getter();
}

uint64_t static AttributeScope.decodingConfiguration.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v3 = static AttributeScope.scopeDescription.getter(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for static DecodingConfigurationProviding.decodingConfiguration.getter in conformance _FoundationPlusScope<A>(uint64_t a1)
{
  return static AttributeScope.decodingConfiguration.getter(a1, &protocol witness table for _FoundationPlusScope<A>);
}

uint64_t specialized Rope.index(before:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v9[0] = result;
  v9[1] = a2;
  id v9[2] = a3;
  if (result != a7) {
    goto LABEL_11;
  }
  if (!a4)
  {
    if (a2) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(a4 + 18) >= a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
LABEL_4:
  if (!a3 || ((a2 >> ((4 * *(unsigned char *)(a3 + 18) + 8) & 0x3C)) & 0xF) == 0)
  {
    swift_unknownObjectRetain();
    char v8 = specialized Rope._Node.formPredecessor(of:)((uint64_t)v9, a4);
    uint64_t result = swift_unknownObjectRelease();
    if (v8) {
      return v9[0];
    }
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static AttributeScope.decodingConfiguration.getter in conformance AttributeScopes.FoundationAttributes@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for static AttributeScope.decodingConfiguration.getter in conformance AttributeScopes.FoundationAttributes((uint64_t (*)(void))specialized static AttributeScope.scopeDescription.getter, a1);
}

uint64_t specialized static EncodableAttributedStringKey<>.encode(_:to:)(int a1, void *a2)
{
  int v32 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys>);
  uint64_t v28 = *(void *)(v3 - 8);
  uint64_t v29 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v26 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys>);
  uint64_t v30 = *(void *)(v5 - 8);
  uint64_t v31 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v27 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys>);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  MEMORY[0x1F4188790](v7);
  long long v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys>);
  uint64_t v23 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys();
  char v17 = v32;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v17)
  {
    case 11:
      char v37 = 3;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys();
      uint64_t v18 = v26;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v29);
      break;
    case 10:
      char v34 = 1;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v25);
      break;
    case 9:
      char v33 = 0;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v10);
      break;
    default:
      char v36 = 2;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys();
      uint64_t v19 = v27;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      char v35 = v17;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit();
      uint64_t v20 = v31;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v20);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t specialized static EncodableAttributedStringKey<>.encode(_:to:)(unint64_t a1, unint64_t a2, unint64_t a3, void *a4)
{
  unint64_t v37 = a2;
  unint64_t v41 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys>);
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v40 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v38 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys>);
  unint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys>);
  uint64_t v33 = *(void *)(v11 - 8);
  uint64_t v34 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys>);
  uint64_t v32 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys>);
  uint64_t v42 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(BYTE4(a3))
  {
    case 1:
      LOBYTE(v44) = 1;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys();
      uint64_t v19 = v43;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v31 = v34;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v31);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v18, v19);
    case 2:
      LOBYTE(v44) = 2;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys();
      uint64_t v19 = v43;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v36;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v20);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v18, v19);
    case 3:
      unint64_t v21 = a3;
      int v22 = v41;
      unint64_t v23 = HIDWORD(v41);
      unint64_t v24 = HIWORD(v41);
      __int16 v25 = v37;
      unint64_t v26 = v37 >> 16;
      uint64_t v34 = HIDWORD(v37);
      unint64_t v35 = HIWORD(v37);
      LOBYTE(v44) = 3;
      __int16 v27 = v21;
      uint64_t v36 = v21 >> 16;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys();
      uint64_t v28 = v38;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      int v44 = v22;
      __int16 v45 = v23;
      __int16 v46 = v24;
      __int16 v47 = v25;
      __int16 v48 = v26;
      __int16 v49 = v34;
      __int16 v50 = v35;
      __int16 v51 = v27;
      __int16 v52 = v36;
      type metadata accessor for NSDecimal(0);
      lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, type metadata accessor for NSDecimal);
      uint64_t v29 = v40;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v29);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v18, v43);
    default:
      LOBYTE(v44) = 0;
      lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys();
      uint64_t v19 = v43;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v14);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v18, v19);
  }
}

void *specialized static EncodableAttributedStringKey<>.encode(_:to:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URL.CodingKeys>);
  uint64_t v18 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_retain();
  id v12 = a1;
  swift_retain();
  uint64_t result = (void *)_foundation_swift_url_feature_enabled();
  if (result)
  {
    if (!a2)
    {
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
  }
  else
  {
    id v14 = objc_msgSend(v12, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    swift_release();
    swift_release();
  }
  LOBYTE(v17) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v4)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v11, v9);
    return (void *)swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v16[0] = v12;
    v16[1] = a2;
    id v16[2] = a3;
    URL.baseURL.getter((uint64_t *)&v17);
    uint64_t v15 = v17;
    if (v17)
    {
      LOBYTE(v16[0]) = 0;
      lazy protocol witness table accessor for type URL and conformance URL();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v11, v9);
      return outlined consume of URL?(v15);
    }
    else
    {
      return (void *)(*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
    }
  }
}

uint64_t specialized static EncodableAttributedStringKey<>.encode(_:to:)(uint64_t a1, void *a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.MarkdownSourcePosition.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v13, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)v11, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    char v14 = 4;
    lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined init with take of LocalePreferences?(a1 + 72, (uint64_t)v12, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    outlined init with take of LocalePreferences?((uint64_t)v12, (uint64_t)v11, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    char v14 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void v9[2];

  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PresentationIntent.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PresentationIntent.IntentType]);
  lazy protocol witness table accessor for type [PresentationIntent.IntentType] and conformance <A> [A](&lazy protocol witness table cache variable for type [PresentationIntent.IntentType] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t specialized static EncodableAttributedStringKey<>.encode(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
  if (a2)
  {
    lazy protocol witness table accessor for type Morphology and conformance Morphology();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  }
  else
  {
    dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t specialized static EncodableAttributedStringKey<>.encode(_:to:)(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v14 = a2;
  int v8 = a1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Morphology.CodingKeys>);
  uint64_t v15 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v8 == 3
    || (LOBYTE(v17) = a1,
        char v16 = 0,
        lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender(),
        KeyedEncodingContainer.encode<A>(_:forKey:)(),
        !v4))
  {
    if (a3 == 14
      || (LOBYTE(v17) = a3,
          char v16 = 1,
          lazy protocol witness table accessor for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase(),
          KeyedEncodingContainer.encode<A>(_:forKey:)(),
          !v4))
    {
      if (BYTE1(a1) == 14
        || (LOBYTE(v17) = BYTE1(a1),
            char v16 = 2,
            lazy protocol witness table accessor for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech(),
            KeyedEncodingContainer.encode<A>(_:forKey:)(),
            !v4))
      {
        if (BYTE2(a1) == 6
          || (LOBYTE(v17) = BYTE2(a1),
              char v16 = 3,
              lazy protocol witness table accessor for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber(),
              KeyedEncodingContainer.encode<A>(_:forKey:)(),
              !v4))
        {
          if (!*(void *)(v14 + 16)
            || (uint64_t v17 = v14,
                char v16 = 4,
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Morphology._CustomPronoun]),
                lazy protocol witness table accessor for type [String : Morphology._CustomPronoun] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Morphology._CustomPronoun] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun), KeyedEncodingContainer.encode<A>(_:forKey:)(), !v4))
          {
            if (BYTE1(a3) == 3
              || (LOBYTE(v17) = BYTE1(a3),
                  char v16 = 5,
                  lazy protocol witness table accessor for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson(),
                  KeyedEncodingContainer.encode<A>(_:forKey:)(),
                  !v4))
            {
              if (BYTE2(a3) == 3
                || (LOBYTE(v17) = BYTE2(a3),
                    char v16 = 6,
                    lazy protocol witness table accessor for type Morphology.PronounType and conformance Morphology.PronounType(),
                    KeyedEncodingContainer.encode<A>(_:forKey:)(),
                    !v4))
              {
                if ((a3 & 0xFF000000) == 0x2000000
                  || (LOBYTE(v17) = BYTE3(a3) & 1,
                      char v16 = 7,
                      lazy protocol witness table accessor for type Morphology.Determination and conformance Morphology.Determination(),
                      KeyedEncodingContainer.encode<A>(_:forKey:)(),
                      !v4))
                {
                  if ((a3 & 0xFF00000000) != 0x200000000)
                  {
                    LOBYTE(v17) = BYTE4(a3) & 1;
                    char v16 = 8;
                    lazy protocol witness table accessor for type Morphology.Definiteness and conformance Morphology.Definiteness();
                    KeyedEncodingContainer.encode<A>(_:forKey:)();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v11, v9);
}

uint64_t static EncodableAttributedStringKey<>.encode(_:to:)()
{
  return dispatch thunk of Encodable.encode(to:)();
}

void protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LinkAttribute(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t specialized static DecodableAttributedStringKey<>.decode(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Morphology.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v20);
  __swift_project_boxed_opaque_existential_1(v20, v20[3]);
  lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v22 = 0;
    lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v9 = v19;
    char v22 = 1;
    lazy protocol witness table accessor for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v10 = v19;
    char v22 = 2;
    lazy protocol witness table accessor for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v11 = v19;
    char v22 = 3;
    lazy protocol witness table accessor for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v21 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Morphology._CustomPronoun]);
    char v22 = 4;
    lazy protocol witness table accessor for type [String : Morphology._CustomPronoun] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : Morphology._CustomPronoun] and conformance <> [A : B], (void (*)(void))lazy protocol witness table accessor for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v18 = v11;
    if (v19) {
      uint64_t v13 = v19;
    }
    else {
      uint64_t v13 = MEMORY[0x1E4FBC868];
    }
    char v22 = 5;
    lazy protocol witness table accessor for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v17 = v19;
    char v22 = 6;
    lazy protocol witness table accessor for type Morphology.PronounType and conformance Morphology.PronounType();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v16 = v19;
    char v22 = 7;
    lazy protocol witness table accessor for type Morphology.Determination and conformance Morphology.Determination();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v15 = v19;
    char v22 = 8;
    lazy protocol witness table accessor for type Morphology.Definiteness and conformance Morphology.Definiteness();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v14 = v19;
    *(unsigned char *)a2 = v9;
    *(unsigned char *)(a2 + 1) = v18;
    *(unsigned char *)(a2 + 2) = v21;
    *(void *)(a2 + 8) = v13;
    *(unsigned char *)(a2 + 16) = v10;
    *(unsigned char *)(a2 + 17) = v17;
    *(unsigned char *)(a2 + 18) = v16;
    *(unsigned char *)(a2 + 19) = v15;
    *(unsigned char *)(a2 + 20) = v14;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v13;
  long long v14;
  long long v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  long long v25;
  long long v26;
  unsigned __int8 v27;
  void v28[4];
  int v29;
  char v30;

  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.MarkdownSourcePosition.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v28);
  __swift_project_boxed_opaque_existential_1(v28, v28[3]);
  lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.CodingKeys and conformance AttributedString.MarkdownSourcePosition.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v25) = 0;
    char v9 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v25) = 1;
    char v10 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v25) = 2;
    int v11 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v25) = 3;
    unint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v30 = 4;
    unint64_t v24 = lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition.Offsets and conformance AttributedString.MarkdownSourcePosition.Offsets();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v21 = *((void *)&v25 + 1);
    char v22 = v25;
    uint64_t v19 = *((void *)&v26 + 1);
    uint64_t v20 = v26;
    uint64_t v29 = v27;
    uint64_t v30 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v13 = v27;
    char v14 = v25;
    int v15 = v26;
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v10;
    int v16 = v23;
    *(void *)(a2 + 16) = v11;
    *(void *)(a2 + 24) = v16;
    int v17 = v21;
    *(void *)(a2 + 32) = v22;
    *(void *)(a2 + 40) = v17;
    int v18 = v19;
    *(void *)(a2 + 48) = v20;
    *(void *)(a2 + 56) = v18;
    *(unsigned char *)(a2 + 64) = v29;
    *(_OWORD *)(a2 + 72) = v14;
    *(_OWORD *)(a2 + 88) = v15;
    *(unsigned char *)(a2 + 104) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

uint64_t specialized static DecodableAttributedStringKey<>.decode(from:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  int v44 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v37 = v3;
  uint64_t v38 = v4;
  MEMORY[0x1F4188790](v3);
  uint64_t v43 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys>);
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v40 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v42 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys>);
  uint64_t v35 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys>);
  uint64_t v36 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys>);
  uint64_t v41 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  int v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v46);
  __swift_project_boxed_opaque_existential_1(v46, v46[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.CodingKeys();
  uint64_t v17 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    int v18 = v13;
    uint64_t v33 = v11;
    uint64_t v34 = v8;
    uint64_t v19 = v42;
    uint64_t v20 = v43;
    uint64_t v45 = 0;
    uint64_t v21 = v41;
    char v22 = v44;
    uint64_t v23 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v23 + 16) == 1)
    {
      switch(*(unsigned char *)(v23 + 32))
      {
        case 1:
          char v47 = 1;
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.SpelledOutValueCodingKeys();
          uint64_t v28 = v45;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v28) {
            goto LABEL_12;
          }
          (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v34);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v14);
          *char v22 = 10;
          break;
        case 2:
          char v47 = 2;
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.UnitCodingKeys();
          uint64_t v29 = v45;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v29) {
            goto LABEL_12;
          }
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit();
          uint64_t v32 = v40;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v32);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v14);
          *char v22 = v47;
          break;
        case 3:
          char v47 = 3;
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ActualByteCountCodingKeys();
          uint64_t v30 = v45;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v30) {
            goto LABEL_12;
          }
          (*(void (**)(char *, uint64_t))(v38 + 8))(v20, v37);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v14);
          *int v44 = 11;
          break;
        default:
          char v47 = 0;
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.ValueCodingKeys();
          uint64_t v24 = v45;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v24)
          {
LABEL_12:
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v14);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v36 + 8))(v18, v33);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v14);
            *char v22 = 9;
          }
          break;
      }
    }
    else
    {
      uint64_t v25 = type metadata accessor for DecodingError();
      swift_allocError();
      __int16 v27 = v26;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *__int16 v27 = &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x1E4FBBA70], v25);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v14);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
}

void specialized static DecodableAttributedStringKey<>.decode(from:)(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<URL.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v26);
  __swift_project_boxed_opaque_existential_1(v26, v27);
  lazy protocol witness table accessor for type URL.CodingKeys and conformance URL.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    goto LABEL_3;
  }
  LOBYTE(v23) = 1;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  unint64_t v11 = v10;
  LOBYTE(v22[0]) = 0;
  lazy protocol witness table accessor for type URL and conformance URL();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v28 = v23;
  v22[0] = v23;
  v22[1] = v24;
  uint64_t v21 = v25;
  v22[2] = v25;
  URL.init(string:relativeTo:)(v9, v11, v22, (uint64_t *)&v23);
  swift_bridgeObjectRelease();
  uint64_t v12 = v23;
  if (!v23)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v20 = v17;
    __swift_project_boxed_opaque_existential_1(v26, v27);
    dispatch thunk of Decoder.codingPath.getter();
    uint64_t v18 = v20;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x1E4FBBA78], v16);
    swift_willThrow();
    outlined consume of URL?(v28);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_3:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    return;
  }
  uint64_t v14 = v24;
  uint64_t v13 = v25;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  outlined consume of URL?(v28);
  *a2 = v12;
  a2[1] = v14;
  a2[2] = v13;
  swift_retain();
  id v15 = v12;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  swift_release();
  swift_release();
}

uint64_t specialized static DecodableAttributedStringKey<>.decode(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  __int16 v51 = a2;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys>);
  uint64_t v50 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  char v55 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys>);
  uint64_t v49 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  int v54 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys>);
  uint64_t v47 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys>);
  uint64_t v52 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys>);
  uint64_t v53 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v60);
  __swift_project_boxed_opaque_existential_1(v60, v60[3]);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.CodingKeys();
  uint64_t v14 = v56;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v14)
  {
    uint64_t v44 = v5;
    uint64_t v45 = v7;
    uint64_t v16 = v54;
    id v15 = v55;
    uint64_t v56 = 0;
    uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v17 + 16) == 1)
    {
      uint64_t v18 = *(unsigned __int8 *)(v17 + 32);
      uint64_t v19 = v52;
      uint64_t v43 = v18;
      switch(v18)
      {
        case 1:
          LOBYTE(v57) = 1;
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.IntCodingKeys();
          uint64_t v27 = v45;
          uint64_t v28 = v56;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v28) {
            goto LABEL_13;
          }
          uint64_t v29 = v44;
          uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v47 + 8))(v27, v29);
          goto LABEL_9;
        case 2:
          LOBYTE(v57) = 2;
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DoubleCodingKeys();
          uint64_t v32 = v16;
          uint64_t v33 = v56;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v33) {
            goto LABEL_13;
          }
          uint64_t v34 = v46;
          KeyedDecodingContainer.decode(_:forKey:)();
          uint64_t v40 = v39;
          (*(void (**)(char *, uint64_t))(v49 + 8))(v32, v34);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v53 + 8))(v13, v11);
          uint64_t v30 = 0;
          int v31 = 0;
          uint64_t v21 = v40;
          goto LABEL_16;
        case 3:
          LOBYTE(v57) = 3;
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.DecimalCodingKeys();
          uint64_t v35 = v56;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v35) {
            goto LABEL_13;
          }
          type metadata accessor for NSDecimal(0);
          lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal, type metadata accessor for NSDecimal);
          uint64_t v37 = v48;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v38 = v53;
          (*(void (**)(char *, uint64_t))(v50 + 8))(v15, v37);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v11);
          int v31 = v59;
          uint64_t v30 = v58;
          uint64_t v21 = v57;
          goto LABEL_16;
        default:
          LOBYTE(v57) = 0;
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys and conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.UintCodingKeys();
          uint64_t v20 = v56;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v20)
          {
LABEL_13:
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v53 + 8))(v13, v11);
          }
          else
          {
            uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
            (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v8);
LABEL_9:
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v53 + 8))(v13, v11);
            uint64_t v30 = 0;
            int v31 = 0;
LABEL_16:
            uint64_t v41 = v51;
            *__int16 v51 = v21;
            v41[1] = v30;
            *((_DWORD *)v41 + 4) = v31;
            *((unsigned char *)v41 + 20) = v43;
          }
          break;
      }
    }
    else
    {
      char v22 = v13;
      uint64_t v23 = v11;
      uint64_t v24 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v26 = v25;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *unint64_t v26 = &type metadata for AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v26, *MEMORY[0x1E4FBBA70], v24);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v22, v23);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
}

uint64_t specialized static DecodableAttributedStringKey<>.decode(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v8);
  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v5 = v4;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t Default;
  uint64_t result;
  uint64_t v7;
  void v8[5];
  unsigned char v9[40];
  uint64_t v10;

  uint64_t v4 = outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v9);
  uint64_t Default = _loadDefaultAttributes()(v4);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v9, (uint64_t)v8);
  uint64_t v7 = Default;
  AttributedString.init(from:configuration:)(v8, &v7, &v10);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  if (!v2) {
    *a2 = v10;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  void v11[4];

  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PresentationIntent.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v11[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v11);
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  lazy protocol witness table accessor for type PresentationIntent.CodingKeys and conformance PresentationIntent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PresentationIntent.IntentType]);
    lazy protocol witness table accessor for type [PresentationIntent.IntentType] and conformance <A> [A](&lazy protocol witness table cache variable for type [PresentationIntent.IntentType] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type PresentationIntent.IntentType and conformance PresentationIntent.IntentType);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t static DecodableAttributedStringKey<>.decode(from:)(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v3);
  return dispatch thunk of Decodable.init(from:)();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute()
{
  return Int.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute(a1, a2);
}

{
  uint64_t v2;
  uint64_t result;
  unsigned char v5[40];

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v5);
  uint64_t result = Int.init(from:)();
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t static MarkdownDecodableAttributedStringKey<>.decodeMarkdown(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.MorphologyAttribute(unsigned __int16 *a1, void *a2)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.MorphologyAttribute(a1, a2);
}

{
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *((void *)a1 + 1), *((unsigned int *)a1 + 4) | ((unint64_t)*((unsigned __int8 *)a1 + 20) << 32), a2);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.MorphologyAttribute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute(uint64_t a1, void *a2)
{
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32), a2);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.InflectionRuleAttribute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v4);
  return InflectionRule.init(from:)(v4, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute()
{
  return Bool.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute(uint64_t a1)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v2);
  return AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value.init(from:)(v2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute()
{
  return String.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute(a1, a2);
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6[40];

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v6);
  uint64_t result = String.init(from:)();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(a1, a2, a3, (void (*)(uint64_t))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component and conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute.Component);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(a1, a2, a3, (void (*)(uint64_t))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(a1, a2, a3, (void (*)(uint64_t))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5 = outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v7);
  a4(v5);
  return dispatch thunk of Decodable.init(from:)();
}

uint64_t protocol witness for static AttributeScope.decodingConfiguration.getter in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for static AttributeScope.decodingConfiguration.getter in conformance AttributeScopes.FoundationAttributes((uint64_t (*)(void))specialized static AttributeScope.scopeDescription.getter, a1);
}

uint64_t protocol witness for static AttributeScope.decodingConfiguration.getter in conformance AttributeScopes.FoundationAttributes@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.DateFieldAttribute(char *a1, void *a2)
{
  char v2 = *a1;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  char v6 = v2;
  AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.rawValue.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

unint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.DateFieldAttribute@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v4);
  return AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(from:)(v4, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  v5[0] = _loadDefaultAttributes()((uint64_t)a1);
  v5[1] = v3;
  AttributedString.encode(to:configuration:)(a2, v5);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute()
{
  return dispatch thunk of Encodable.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for NSInlinePresentationIntent(0);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v6);
  lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, type metadata accessor for NSInlinePresentationIntent);
  uint64_t result = dispatch thunk of Decodable.init(from:)();
  if (!v2) {
    *a2 = v6[5];
  }
  return result;
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute(uint64_t *a1, void *a2)
{
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)(*a1, a2);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PresentationIntentAttribute@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute(_OWORD *a1, void *a2)
{
  long long v2 = a1[5];
  id v6[4] = a1[4];
  v7[0] = v2;
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)a1 + 89);
  long long v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  long long v4 = a1[3];
  void v6[2] = a1[2];
  void v6[3] = v4;
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)((uint64_t)v6, a2);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.MeasurementAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return dispatch thunk of Encodable.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.MeasurementAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(a1, a2, a3, (void (*)(uint64_t))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5 = outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v7);
  a4(v5);
  return dispatch thunk of Decodable.init(from:)();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute(unsigned __int8 *a1, void *a2)
{
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)(*a1, a2);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return dispatch thunk of Encodable.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.PersonNameComponentAttribute(a1, a2, a3, (void (*)(uint64_t))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute(uint64_t a1, void *a2)
{
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32), a2);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute(uint64_t a1, void *a2)
{
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateArgumentAttribute@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized static DecodableAttributedStringKey<>.decode(from:)(a1, a2);
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute()
{
  return Range<>.encode(to:)();
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedDateIntervalArgumentAttribute(uint64_t a1)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v2);
  lazy protocol witness table accessor for type Date and conformance Date();
  lazy protocol witness table accessor for type Date and conformance Date();
  return Range<>.init(from:)();
}

void *protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute(uint64_t a1, void *a2)
{
  return specialized static EncodableAttributedStringKey<>.encode(_:to:)(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), a2);
}

uint64_t static EncodableAttributedStringKey<>.encode(_:to:)(uint64_t a1, void *a2)
{
  v12[5] = *(id *)MEMORY[0x1E4F143B8];
  v12[0] = 0;
  id v3 = objc_msgSend(self, sel_archivedDataWithRootObject_requiringSecureCoding_error_, a1, 1, v12);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = v12[0];
    id v6 = v4;
    id v7 = specialized Data.init(referencing:)(v6);
    unint64_t v9 = v8;

    __swift_project_boxed_opaque_existential_1(a2, a2[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, (uint64_t)v12[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation((uint64_t)v7, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    if (v12[0])
    {
      v12[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v11 = (id)_nilObjCError;
    }
    return swift_willThrow();
  }
}

uint64_t AttributedString.encode(to:)(void *a1)
{
  uint64_t v3 = *v1;
  v5[0] = _loadDefaultAttributes()((uint64_t)a1);
  v5[1] = v3;
  AttributedString.encode(to:configuration:)(a1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t AttributedString.encode(to:configuration:)(void *a1, uint64_t *a2)
{
  uint64_t v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.AttributeKey>);
  uint64_t v5 = *(void *)(v204 - 8);
  MEMORY[0x1F4188790](v204);
  uint64_t v201 = (char *)&v189 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  v200 = (char *)&v189 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.CodingKeys>);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v189 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v2;
  uint64_t v15 = *(void *)(*v2 + 64);
  if (!v15) {
    goto LABEL_7;
  }
  uint64_t v16 = *(void *)(v14 + 72);
  if (!v16) {
    goto LABEL_7;
  }
  uint64_t v203 = *a2;
  uint64_t v253 = v5;
  int64_t v206 = v11;
  *(void *)&long long v207 = v10;
  if (v16 != 1)
  {
    uint64_t v23 = 1;
    goto LABEL_9;
  }
  uint64_t v17 = *(void *)(v14 + 80);
  unint64_t v18 = *(unsigned __int8 *)(v15 + 18);
  unint64_t v19 = swift_unknownObjectRetain_n();
  specialized Rope._endPath.getter(v19);
  swift_unknownObjectRelease();
  if (!v17) {
    goto LABEL_215;
  }
  swift_unknownObjectRetain();
  specialized Rope._Node.subscript.getter(v18, v15);
  uint64_t v21 = v20;
  swift_unknownObjectRelease_n();
  uint64_t v22 = *(void *)(v21 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v22)
  {
LABEL_7:
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    long long v24 = *(_OWORD *)(v14 + 32);
    v234[0] = *(_OWORD *)(v14 + 16);
    v234[1] = v24;
    long long v235 = *(_OWORD *)(v14 + 48);
    v251[1] = v24;
    v251[2] = v235;
    v251[0] = v234[0];
    outlined init with take of any PredicateExpression<Self.Output == B1>(v251, (uint64_t)v252);
    outlined retain of Locale((uint64_t)v252);
    MEMORY[0x185302050](v234);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v219, v221);
    uint64_t v25 = v208;
    dispatch thunk of SingleValueEncodingContainer.encode(_:)();
    uint64_t v208 = v25;
    swift_bridgeObjectRelease();
    unint64_t v26 = v219;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  uint64_t v23 = *(void *)(v14 + 64);
  uint64_t v16 = *(void *)(v14 + 72);
LABEL_9:
  uint64_t v228 = 0;
  memset(v227, 0, sizeof(v227));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (v23 && v16 > 10)
  {
    lazy protocol witness table accessor for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys();
    dispatch thunk of Encoder.container<A>(keyedBy:)();
    LOBYTE(v219[0]) = 0;
    uint64_t v27 = v207;
    KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
    LOBYTE(v211) = 1;
    KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
    ((void (*)(char *, uint64_t))v206[1])(v13, v27);
    outlined destroy of Any?((uint64_t)v227, &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
    outlined init with take of LocalePreferences?((uint64_t)v219, (uint64_t)v227, &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
  }
  else
  {
    dispatch thunk of Encoder.unkeyedContainer()();
  }
  long long v28 = *(_OWORD *)(v14 + 32);
  v248[0] = *(_OWORD *)(v14 + 16);
  v248[1] = v28;
  v248[2] = *(_OWORD *)(v14 + 48);
  swift_retain();
  outlined retain of Locale((uint64_t)v248);
  uint64_t v29 = BigString.startIndex.getter();
  int v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  outlined release of Locale((uint64_t)v248);
  swift_release();
  uint64_t v36 = *(void *)(v14 + 64);
  uint64_t v37 = *(void *)(v14 + 72);
  uint64_t v39 = *(void *)(v14 + 80);
  uint64_t v38 = *(void *)(v14 + 88);
  int64_t v206 = v33;
  *(void *)&long long v207 = v29;
  unint64_t v205 = v35;
  if (v36)
  {
    unint64_t v40 = *(unsigned __int8 *)(v36 + 18);
    uint64_t v41 = v38;
    swift_unknownObjectRetain();
    uint64_t v38 = v41;
  }
  else
  {
    unint64_t v40 = 0;
  }
  uint64_t v42 = 0;
  uint64_t v198 = (long long *)(v14 + 16);
  v219[0] = v36;
  v219[1] = v37;
  uint64_t v220 = v39;
  uint64_t v221 = v38;
  long long v190 = &v222;
  uint64_t v191 = 0;
  long long v192 = (void (**)(char *, uint64_t))(v253 + 8);
  uint64_t v222 = v38;
  unint64_t v223 = v40;
  unint64_t v226 = 0;
  uint64_t v195 = MEMORY[0x1E4FBC868];
  uint64_t v224 = 0;
  uint64_t v225 = 0;
  if (!v36) {
    goto LABEL_19;
  }
  while (2)
  {
    if (v42 == v39)
    {
LABEL_194:
      swift_unknownObjectRelease();
LABEL_195:
      outlined destroy of Any?((uint64_t)v227, &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
      goto LABEL_197;
    }
LABEL_20:
    if (v222 != v38) {
      goto LABEL_203;
    }
    uint64_t v202 = v42;
    uint64_t v199 = v38;
    long long v196 = v31;
    unint64_t v43 = v223;
    uint64_t v44 = v224;
    if (v224)
    {
      uint64_t v45 = (void *)(v224 + 24 * ((v223 >> ((4 * *(unsigned char *)(v224 + 18) + 8) & 0x3C)) & 0xF));
      unint64_t v47 = v45[3];
      uint64_t v46 = v45[4];
      uint64_t v48 = v45[5];
      uint64_t v49 = v225 + 1;
      BOOL v50 = __OFADD__(v225, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v50) {
        goto LABEL_204;
      }
      uint64_t v225 = v49;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v51 = v47;
      uint64_t v253 = v46;
      uint64_t v197 = v48;
    }
    else
    {
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v43, v36);
      uint64_t v53 = v52;
      uint64_t v55 = v54;
      swift_unknownObjectRelease();
      if (__OFADD__(v225, 1)) {
        goto LABEL_204;
      }
      uint64_t v197 = v55;
      uint64_t v253 = v53;
      ++v225;
      swift_unknownObjectRetain();
      unint64_t v51 = specialized Rope._Node.subscript.getter(v43, v36);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (__OFADD__(v202, v51))
    {
LABEL_205:
      __break(1u);
LABEL_206:
      __break(1u);
      goto LABEL_207;
    }
    unint64_t v226 = v202 + v51;
    if (!v36) {
      goto LABEL_213;
    }
    unint64_t v56 = ((-15 << ((4 * *(unsigned char *)(v36 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v36 + 18) | ((unint64_t)*(unsigned __int16 *)(v36 + 16) << ((4 * *(unsigned char *)(v36 + 18) + 8) & 0x3C));
    swift_unknownObjectRetain();
    if (v43 >= v56) {
      goto LABEL_213;
    }
    uint64_t v57 = v198;
    uint64_t v58 = v207;
    if (v44)
    {
      char v59 = (4 * *(unsigned char *)(v44 + 18) + 8) & 0x3C;
      unint64_t v60 = ((v43 >> v59) & 0xF) + 1;
      if (v60 < *(unsigned __int16 *)(v44 + 16))
      {
        unint64_t v223 = (v60 << v59) | ((-15 << v59) - 1) & v43;
LABEL_37:
        swift_unknownObjectRelease_n();
        goto LABEL_43;
      }
    }
    int v61 = *(unsigned __int8 *)(v36 + 18);
    char v62 = (4 * v61 + 8) & 0x3C;
    *(void *)&long long v211 = (v43 >> v62) & 0xF;
    if (v61)
    {
      swift_unknownObjectRetain();
      char v63 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v36 + 24, (uint64_t *)&v211, (uint64_t)v190, v36, v61);
      swift_unknownObjectRelease();
      if (v63) {
        goto LABEL_37;
      }
      int v65 = *(unsigned __int8 *)(v36 + 18);
    }
    else
    {
      unint64_t v64 = ((v43 >> v62) & 0xF) + 1;
      if (v64 < *(unsigned __int16 *)(v36 + 16))
      {
        unint64_t v223 = (v64 << v62) | ((-15 << v62) - 1) & v43;
        swift_unknownObjectRelease_n();
        uint64_t v224 = v36;
        goto LABEL_43;
      }
      int v65 = 0;
    }
    uint64_t v66 = *(unsigned __int16 *)(v36 + 16);
    char v67 = *(unsigned char *)(v36 + 18);
    swift_unknownObjectRelease_n();
    unint64_t v68 = ((-15 << ((4 * v67 + 8) & 0x3C)) - 1) & v65 | (unint64_t)(v66 << ((4 * v67 + 8) & 0x3C));
    uint64_t v57 = v198;
    uint64_t v222 = v199;
    unint64_t v223 = v68;
    uint64_t v224 = 0;
LABEL_43:
    long long v69 = *v57;
    long long v70 = v57[2];
    v247[1] = v57[1];
    v247[2] = v70;
    v247[0] = v69;
    long long v71 = *v57;
    long long v72 = v57[1];
    v249[2] = v70;
    v249[1] = v72;
    v249[0] = v71;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v249, (uint64_t)v250);
    outlined retain of Locale((uint64_t)v250);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v247);
    uint64_t v73 = v58;
    uint64_t v74 = v205;
    unint64_t v75 = v206;
    char v76 = v196;
    uint64_t v77 = BigString.UTF8View.index(_:offsetBy:)();
    long long v79 = v78;
    uint64_t v81 = v80;
    uint64_t v83 = v82;
    outlined release of Locale((uint64_t)&v231);
    uint64_t v199 = v81;
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_206;
    }
    uint64_t v236 = v73;
    v237 = v76;
    v238 = v75;
    v239 = v74;
    uint64_t v193 = v77;
    long long v194 = v79;
    uint64_t v240 = v77;
    v241 = v79;
    uint64_t v84 = (uint64_t *)v199;
    uint64_t v242 = v199;
    long long v196 = v83;
    v243 = v83;
    long long v85 = v198[1];
    long long v244 = *v198;
    long long v245 = v85;
    long long v246 = v198[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v232);
    MEMORY[0x185302030](&v233);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v229, v230);
    uint64_t v86 = v208;
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    uint64_t v208 = v86;
    if (v86)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_194;
    }
    swift_bridgeObjectRelease();
    uint64_t v87 = v253;
    uint64_t v88 = v203;
    if (!*(void *)(v253 + 16)) {
      goto LABEL_52;
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v227, (uint64_t)&v211, &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
    if (!*((void *)&v212 + 1))
    {
      outlined destroy of Any?((uint64_t)&v211, &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
LABEL_52:
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v229, v230);
      dispatch thunk of UnkeyedEncodingContainer.superEncoder()();
      __swift_project_boxed_opaque_existential_1(v217, v218);
      lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey();
      dispatch thunk of Encoder.container<A>(keyedBy:)();
      uint64_t v95 = v87 + 64;
      uint64_t v96 = 1 << *(unsigned char *)(v87 + 32);
      if (v96 < 64) {
        uint64_t v97 = ~(-1 << v96);
      }
      else {
        uint64_t v97 = -1;
      }
      unint64_t v98 = v97 & *(void *)(v87 + 64);
      *(void *)&long long v207 = (unint64_t)(v96 + 63) >> 6;
      swift_bridgeObjectRetain();
      uint64_t v99 = 0;
      uint64_t v202 = v87 + 64;
      while (1)
      {
        while (v98)
        {
          unint64_t v100 = __clz(__rbit64(v98));
          v98 &= v98 - 1;
          unint64_t v101 = v100 | (v99 << 6);
          if (*(void *)(v88 + 16)) {
            goto LABEL_75;
          }
        }
        BOOL v102 = __OFADD__(v99++, 1);
        if (v102)
        {
          __break(1u);
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
          goto LABEL_205;
        }
        if (v99 >= (uint64_t)v207) {
          goto LABEL_96;
        }
        unint64_t v103 = *(void *)(v95 + 8 * v99);
        if (!v103)
        {
          uint64_t v104 = v99 + 1;
          if (v99 + 1 >= (uint64_t)v207) {
            goto LABEL_96;
          }
          unint64_t v103 = *(void *)(v95 + 8 * v104);
          if (!v103)
          {
            uint64_t v104 = v99 + 2;
            if (v99 + 2 >= (uint64_t)v207) {
              goto LABEL_96;
            }
            unint64_t v103 = *(void *)(v95 + 8 * v104);
            if (!v103)
            {
              uint64_t v104 = v99 + 3;
              if (v99 + 3 >= (uint64_t)v207) {
                goto LABEL_96;
              }
              unint64_t v103 = *(void *)(v95 + 8 * v104);
              if (!v103)
              {
                uint64_t v104 = v99 + 4;
                if (v99 + 4 >= (uint64_t)v207) {
                  goto LABEL_96;
                }
                unint64_t v103 = *(void *)(v95 + 8 * v104);
                if (!v103)
                {
                  uint64_t v104 = v99 + 5;
                  if (v99 + 5 >= (uint64_t)v207)
                  {
LABEL_96:
                    uint64_t v84 = (uint64_t *)v199;
                    swift_release();
                    (*v192)(v201, v204);
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)v217);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    goto LABEL_154;
                  }
                  unint64_t v103 = *(void *)(v95 + 8 * v104);
                  if (!v103)
                  {
                    while (1)
                    {
                      uint64_t v99 = v104 + 1;
                      if (__OFADD__(v104, 1)) {
                        break;
                      }
                      if (v99 >= (uint64_t)v207) {
                        goto LABEL_96;
                      }
                      unint64_t v103 = *(void *)(v95 + 8 * v99);
                      ++v104;
                      if (v103) {
                        goto LABEL_74;
                      }
                    }
LABEL_207:
                    __break(1u);
LABEL_208:
                    __break(1u);
LABEL_209:
                    __break(1u);
                    goto LABEL_210;
                  }
                }
              }
            }
          }
          uint64_t v99 = v104;
        }
LABEL_74:
        unint64_t v98 = (v103 - 1) & v103;
        unint64_t v101 = __clz(__rbit64(v103)) + (v99 << 6);
        if (*(void *)(v88 + 16))
        {
LABEL_75:
          char v105 = (uint64_t *)(*(void *)(v87 + 48) + 16 * v101);
          uint64_t v106 = *v105;
          uint64_t v107 = v105[1];
          swift_bridgeObjectRetain();
          unint64_t v108 = specialized __RawDictionaryStorage.find<A>(_:)(v106, v107);
          if (v109)
          {
            uint64_t v110 = *(void *)(*(void *)(v88 + 56) + 16 * v108);
            uint64_t v111 = swift_conformsToProtocol2();
            if (v111) {
              uint64_t v112 = v110;
            }
            else {
              uint64_t v112 = 0;
            }
            if (v111) {
              uint64_t v113 = v111;
            }
            else {
              uint64_t v113 = 0;
            }
            if (v112)
            {
              *(void *)&long long v211 = v106;
              *((void *)&v211 + 1) = v107;
              *(void *)&long long v212 = 0;
              BYTE8(v212) = 1;
              KeyedEncodingContainer.superEncoder(forKey:)();
              swift_bridgeObjectRelease();
              uint64_t v114 = *(void *)(v113 + 8);
              uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
              unint64_t v205 = &v189;
              int64_t v206 = (uint64_t *)AssociatedTypeWitness;
              uint64_t v116 = *(void *)(AssociatedTypeWitness - 8);
              double v117 = MEMORY[0x1F4188790](AssociatedTypeWitness);
              uint64_t v119 = (char *)&v189 - v118;
              uint64_t v120 = (*(uint64_t (**)(uint64_t, uint64_t, double))(v114 + 24))(v112, v114, v117);
              uint64_t v122 = v253;
              if (*(void *)(v253 + 16)
                && (unint64_t v123 = specialized __RawDictionaryStorage.find<A>(_:)(v120, v121), (v124 & 1) != 0))
              {
                outlined init with copy of AttributedString._AttributeValue(*(void *)(v122 + 56) + 72 * v123, (uint64_t)&v211);
              }
              else
              {
                uint64_t v215 = 0;
                long long v213 = 0u;
                long long v214 = 0u;
                long long v211 = 0u;
                long long v212 = 0u;
              }
              swift_bridgeObjectRelease();
              if (!*((void *)&v212 + 1)) {
                goto LABEL_211;
              }
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v211, (uint64_t)v210);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              uint64_t v125 = v206;
              swift_dynamicCast();
              outlined destroy of AttributedString._AttributeValue((uint64_t)&v211);
              uint64_t v126 = v208;
              (*(void (**)(char *, void *, uint64_t, uint64_t))(v113 + 16))(v119, v216, v112, v113);
              uint64_t v208 = v126;
              if (v126)
              {
                (*(void (**)(char *, uint64_t *))(v116 + 8))(v119, v125);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v216);
                swift_release();
                (*v192)(v201, v204);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v217);
                goto LABEL_194;
              }
              (*(void (**)(char *, uint64_t *))(v116 + 8))(v119, v125);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v216);
              uint64_t v88 = v203;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            uint64_t v87 = v253;
            uint64_t v95 = v202;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
      }
    }
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v211, (uint64_t)v217);
    uint64_t v89 = v197;
    if (*(void *)(v195 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v90 = v195;
      unint64_t v91 = specialized __RawDictionaryStorage.find<A>(_:)(v87, v89);
      if (v92)
      {
        uint64_t v93 = *(void *)(*(void *)(v90 + 56) + 8 * v91);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v93 != v191)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v94 = v195;
          goto LABEL_152;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v217, v218);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    dispatch thunk of UnkeyedEncodingContainer.superEncoder()();
    __swift_project_boxed_opaque_existential_1(v216, v216[3]);
    lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey();
    dispatch thunk of Encoder.container<A>(keyedBy:)();
    uint64_t v127 = v87 + 64;
    uint64_t v128 = 1 << *(unsigned char *)(v87 + 32);
    if (v128 < 64) {
      uint64_t v129 = ~(-1 << v128);
    }
    else {
      uint64_t v129 = -1;
    }
    unint64_t v130 = v129 & *(void *)(v87 + 64);
    *(void *)&long long v207 = (unint64_t)(v128 + 63) >> 6;
    swift_bridgeObjectRetain();
    uint64_t v131 = 0;
    uint64_t v202 = v87 + 64;
    while (1)
    {
      while (v130)
      {
        unint64_t v132 = __clz(__rbit64(v130));
        v130 &= v130 - 1;
        unint64_t v133 = v132 | (v131 << 6);
        if (*(void *)(v88 + 16)) {
          goto LABEL_121;
        }
      }
      BOOL v102 = __OFADD__(v131++, 1);
      if (v102) {
        goto LABEL_202;
      }
      if (v131 >= (uint64_t)v207) {
        break;
      }
      unint64_t v134 = *(void *)(v127 + 8 * v131);
      if (!v134)
      {
        uint64_t v135 = v131 + 1;
        if (v131 + 1 >= (uint64_t)v207) {
          break;
        }
        unint64_t v134 = *(void *)(v127 + 8 * v135);
        if (!v134)
        {
          uint64_t v135 = v131 + 2;
          if (v131 + 2 >= (uint64_t)v207) {
            break;
          }
          unint64_t v134 = *(void *)(v127 + 8 * v135);
          if (!v134)
          {
            uint64_t v135 = v131 + 3;
            if (v131 + 3 >= (uint64_t)v207) {
              break;
            }
            unint64_t v134 = *(void *)(v127 + 8 * v135);
            if (!v134)
            {
              uint64_t v135 = v131 + 4;
              if (v131 + 4 >= (uint64_t)v207) {
                break;
              }
              unint64_t v134 = *(void *)(v127 + 8 * v135);
              if (!v134)
              {
                uint64_t v135 = v131 + 5;
                if (v131 + 5 >= (uint64_t)v207) {
                  break;
                }
                unint64_t v134 = *(void *)(v127 + 8 * v135);
                if (!v134)
                {
                  while (1)
                  {
                    uint64_t v131 = v135 + 1;
                    if (__OFADD__(v135, 1)) {
                      break;
                    }
                    if (v131 >= (uint64_t)v207) {
                      goto LABEL_142;
                    }
                    unint64_t v134 = *(void *)(v127 + 8 * v131);
                    ++v135;
                    if (v134) {
                      goto LABEL_120;
                    }
                  }
LABEL_210:
                  __break(1u);
LABEL_211:
                  outlined destroy of Any?((uint64_t)&v211, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  __break(1u);
LABEL_212:
                  outlined destroy of Any?((uint64_t)&v211, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  __break(1u);
LABEL_213:
                  __break(1u);
LABEL_214:
                  __break(1u);
LABEL_215:
                  swift_unknownObjectRelease();
                  __break(1u);
                  goto LABEL_216;
                }
              }
            }
          }
        }
        uint64_t v131 = v135;
      }
LABEL_120:
      unint64_t v130 = (v134 - 1) & v134;
      unint64_t v133 = __clz(__rbit64(v134)) + (v131 << 6);
      if (*(void *)(v88 + 16))
      {
LABEL_121:
        uint64_t v136 = (uint64_t *)(*(void *)(v87 + 48) + 16 * v133);
        uint64_t v137 = *v136;
        uint64_t v138 = v136[1];
        swift_bridgeObjectRetain();
        unint64_t v139 = specialized __RawDictionaryStorage.find<A>(_:)(v137, v138);
        if (v140)
        {
          uint64_t v141 = *(void *)(*(void *)(v88 + 56) + 16 * v139);
          uint64_t v142 = swift_conformsToProtocol2();
          if (v142) {
            uint64_t v143 = v141;
          }
          else {
            uint64_t v143 = 0;
          }
          if (v142) {
            uint64_t v144 = v142;
          }
          else {
            uint64_t v144 = 0;
          }
          if (v143)
          {
            *(void *)&long long v211 = v137;
            *((void *)&v211 + 1) = v138;
            *(void *)&long long v212 = 0;
            BYTE8(v212) = 1;
            KeyedEncodingContainer.superEncoder(forKey:)();
            swift_bridgeObjectRelease();
            uint64_t v145 = *(void *)(v144 + 8);
            unint64_t v205 = (uint64_t *)swift_getAssociatedTypeWitness();
            int64_t v206 = &v189;
            uint64_t v146 = *(v205 - 1);
            double v147 = MEMORY[0x1F4188790](v205);
            char v149 = (char *)&v189 - v148;
            uint64_t v150 = (*(uint64_t (**)(uint64_t, uint64_t, double))(v145 + 24))(v143, v145, v147);
            uint64_t v152 = v253;
            if (*(void *)(v253 + 16)
              && (unint64_t v153 = specialized __RawDictionaryStorage.find<A>(_:)(v150, v151), (v154 & 1) != 0))
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v152 + 56) + 72 * v153, (uint64_t)&v211);
            }
            else
            {
              uint64_t v215 = 0;
              long long v213 = 0u;
              long long v214 = 0u;
              long long v211 = 0u;
              long long v212 = 0u;
            }
            swift_bridgeObjectRelease();
            if (!*((void *)&v212 + 1)) {
              goto LABEL_212;
            }
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v211, (uint64_t)&v209);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            long long v155 = v205;
            swift_dynamicCast();
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v211);
            uint64_t v156 = v208;
            (*(void (**)(char *, unsigned char *, uint64_t, uint64_t))(v144 + 16))(v149, v210, v143, v144);
            uint64_t v208 = v156;
            if (v156)
            {
              (*(void (**)(char *, uint64_t *))(v146 + 8))(v149, v155);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
              swift_release();
              (*v192)(v200, v204);
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v216);
              swift_unknownObjectRelease();
              outlined destroy of Any?((uint64_t)v227, &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v217);
              goto LABEL_197;
            }
            (*(void (**)(char *, uint64_t *))(v146 + 8))(v149, v155);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
            uint64_t v88 = v203;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          uint64_t v87 = v253;
          uint64_t v127 = v202;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }
LABEL_142:
    swift_release();
    (*v192)(v200, v204);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v216);
    uint64_t v157 = v197;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v158 = v195;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v211 = v158;
    unint64_t v161 = specialized __RawDictionaryStorage.find<A>(_:)(v87, v157);
    uint64_t v162 = *(void *)(v158 + 16);
    BOOL v163 = (v160 & 1) == 0;
    uint64_t v164 = v162 + v163;
    if (__OFADD__(v162, v163)) {
      goto LABEL_208;
    }
    char v165 = v160;
    if (*(void *)(v158 + 24) < v164)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v164, isUniquelyReferenced_nonNull_native);
      uint64_t v94 = v211;
      unint64_t v166 = specialized __RawDictionaryStorage.find<A>(_:)(v253, v157);
      if ((v165 & 1) != (v167 & 1)) {
        goto LABEL_217;
      }
      unint64_t v161 = v166;
      uint64_t v168 = v191;
      uint64_t v84 = (uint64_t *)v199;
      if (v165)
      {
LABEL_146:
        *(void *)(*(void *)(v94 + 56) + 8 * v161) = v168;
        goto LABEL_150;
      }
LABEL_149:
      specialized _NativeDictionary._insert(at:key:value:)(v161, v253, v157, v168, (void *)v94);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_150:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (__OFADD__(v168, 1)) {
        goto LABEL_209;
      }
      uint64_t v191 = v168 + 1;
LABEL_152:
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v229, v230);
      uint64_t v169 = v208;
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      uint64_t v208 = v169;
      if (!v169)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v217);
        uint64_t v195 = v94;
LABEL_154:
        uint64_t v42 = v226;
        uint64_t v36 = v219[0];
        int v31 = v194;
        int64_t v206 = v84;
        *(void *)&long long v207 = v193;
        unint64_t v205 = v196;
        uint64_t v39 = v220;
        uint64_t v38 = v221;
        if (v219[0]) {
          continue;
        }
LABEL_19:
        if (!v42) {
          goto LABEL_195;
        }
        goto LABEL_20;
      }
      swift_unknownObjectRelease();
      outlined destroy of Any?((uint64_t)v227, &demangling cache variable for type metadata for UnkeyedEncodingContainer?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v217);
LABEL_197:
      swift_bridgeObjectRelease();
      unint64_t v26 = v229;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    }
    break;
  }
  uint64_t v168 = v191;
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v94 = v158;
    uint64_t v84 = (uint64_t *)v199;
    if (v160) {
      goto LABEL_146;
    }
    goto LABEL_149;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AttributedString._AttributeStorage, Int>);
  uint64_t v170 = static _DictionaryStorage.copy(original:)();
  uint64_t v94 = v170;
  if (!*(void *)(v158 + 16))
  {
LABEL_191:
    swift_bridgeObjectRelease();
    uint64_t v168 = v191;
    uint64_t v157 = v197;
    uint64_t v84 = (uint64_t *)v199;
    if (v165) {
      goto LABEL_146;
    }
    goto LABEL_149;
  }
  uint64_t v171 = (void *)(v170 + 64);
  uint64_t v172 = v195 + 64;
  unint64_t v173 = (unint64_t)((1 << *(unsigned char *)(v94 + 32)) + 63) >> 6;
  if (v94 != v195 || (unint64_t)v171 >= v172 + 8 * v173) {
    memmove(v171, (const void *)(v195 + 64), 8 * v173);
  }
  int64_t v174 = 0;
  uint64_t v175 = v195;
  *(void *)(v94 + 16) = *(void *)(v195 + 16);
  uint64_t v176 = 1 << *(unsigned char *)(v175 + 32);
  if (v176 < 64) {
    uint64_t v177 = ~(-1 << v176);
  }
  else {
    uint64_t v177 = -1;
  }
  unint64_t v178 = v177 & *(void *)(v175 + 64);
  int64_t v179 = (unint64_t)(v176 + 63) >> 6;
  while (2)
  {
    if (v178)
    {
      unint64_t v180 = __clz(__rbit64(v178));
      v178 &= v178 - 1;
      unint64_t v181 = v180 | (v174 << 6);
LABEL_165:
      uint64_t v182 = 16 * v181;
      uint64_t v183 = 8 * v181;
      uint64_t v184 = *(void *)(*(void *)(v175 + 56) + v183);
      uint64_t v185 = *(void *)(v94 + 48);
      long long v207 = *(_OWORD *)(*(void *)(v175 + 48) + v182);
      *(_OWORD *)(v185 + v182) = v207;
      *(void *)(*(void *)(v94 + 56) + v183) = v184;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      continue;
    }
    break;
  }
  BOOL v102 = __OFADD__(v174++, 1);
  if (v102) {
    goto LABEL_214;
  }
  if (v174 >= v179) {
    goto LABEL_191;
  }
  unint64_t v186 = *(void *)(v172 + 8 * v174);
  if (v186)
  {
LABEL_186:
    unint64_t v178 = (v186 - 1) & v186;
    unint64_t v181 = __clz(__rbit64(v186)) + (v174 << 6);
    goto LABEL_165;
  }
  if (v174 + 1 >= v179) {
    goto LABEL_191;
  }
  unint64_t v186 = *(void *)(v172 + 8 * (v174 + 1));
  if (v186)
  {
    ++v174;
    goto LABEL_186;
  }
  int64_t v187 = v174 + 2;
  if (v174 + 2 >= v179) {
    goto LABEL_191;
  }
  unint64_t v186 = *(void *)(v172 + 8 * v187);
  if (v186) {
    goto LABEL_185;
  }
  int64_t v187 = v174 + 3;
  if (v174 + 3 >= v179) {
    goto LABEL_191;
  }
  unint64_t v186 = *(void *)(v172 + 8 * v187);
  if (v186) {
    goto LABEL_185;
  }
  int64_t v187 = v174 + 4;
  if (v174 + 4 >= v179) {
    goto LABEL_191;
  }
  unint64_t v186 = *(void *)(v172 + 8 * v187);
  if (v186) {
    goto LABEL_185;
  }
  int64_t v187 = v174 + 5;
  if (v174 + 5 >= v179) {
    goto LABEL_191;
  }
  unint64_t v186 = *(void *)(v172 + 8 * v187);
  if (v186) {
    goto LABEL_185;
  }
  int64_t v187 = v174 + 6;
  if (v174 + 6 >= v179) {
    goto LABEL_191;
  }
  unint64_t v186 = *(void *)(v172 + 8 * v187);
  if (v186) {
    goto LABEL_185;
  }
  int64_t v187 = v174 + 7;
  if (v174 + 7 >= v179) {
    goto LABEL_191;
  }
  unint64_t v186 = *(void *)(v172 + 8 * v187);
  if (v186)
  {
LABEL_185:
    int64_t v174 = v187;
    uint64_t v175 = v195;
    goto LABEL_186;
  }
  while (1)
  {
    int64_t v174 = v187 + 1;
    if (__OFADD__(v187, 1)) {
      break;
    }
    if (v174 >= v179) {
      goto LABEL_191;
    }
    unint64_t v186 = *(void *)(v172 + 8 * v174);
    ++v187;
    uint64_t v175 = v195;
    if (v186) {
      goto LABEL_186;
    }
  }
LABEL_216:
  __break(1u);
LABEL_217:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AttributedString.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t Default = _loadDefaultAttributes()(a1);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v8);
  uint64_t v7 = Default;
  AttributedString.init(from:configuration:)(v8, &v7, &v9);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (!v2) {
    *a2 = v9;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributedString(void *a1)
{
  uint64_t v3 = *v1;
  v5[0] = _loadDefaultAttributes()((uint64_t)a1);
  v5[1] = v3;
  AttributedString.encode(to:configuration:)(a1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AttributedString.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AttributedString.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AttributedString.CodingKeys.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AttributedString.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1936618866;
  if (*v1) {
    uint64_t v2 = 0x7475626972747461;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xEE00656C62615465;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributedString.CodingKeys()
{
  if (*v0) {
    return 0x7475626972747461;
  }
  else {
    return 1936618866;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributedString.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  unint64_t object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._unint64_t object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AttributedString.CodingKeys.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AttributedString.AttributeKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = a1;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.AttributeKey(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.AttributeKey(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance AttributedString(void *a1, uint64_t *a2)
{
  return AttributedString.encode(to:configuration:)(a1, a2);
}

uint64_t protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance AttributedString@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return AttributedString.init(from:configuration:)(a1, a2, a3);
}

uint64_t AttributeContainer.encode(to:configuration:)(void *a1, uint64_t *a2)
{
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.AttributeKey>);
  uint64_t v42 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a2;
  uint64_t v8 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey();
  uint64_t v45 = v6;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v9 = v8 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v8 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v14 = 0;
  uint64_t v44 = v8;
  uint64_t v43 = v7;
  uint64_t v48 = v8 + 64;
  int64_t v47 = v13;
  while (1)
  {
    while (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      if (*(void *)(v7 + 16))
      {
LABEL_21:
        uint64_t v20 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v16);
        uint64_t v22 = *v20;
        uint64_t v21 = v20[1];
        swift_bridgeObjectRetain();
        unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v21);
        if (v24)
        {
          uint64_t v25 = *(void *)(*(void *)(v7 + 56) + 16 * v23);
          uint64_t v26 = swift_conformsToProtocol2();
          if (v26) {
            uint64_t v27 = v25;
          }
          else {
            uint64_t v27 = 0;
          }
          if (v26) {
            uint64_t v28 = v26;
          }
          else {
            uint64_t v28 = 0;
          }
          if (v27)
          {
            *(void *)&long long v52 = v22;
            *((void *)&v52 + 1) = v21;
            *(void *)&long long v53 = 0;
            BYTE8(v53) = 1;
            KeyedEncodingContainer.superEncoder(forKey:)();
            swift_bridgeObjectRelease();
            uint64_t v29 = *(void *)(v28 + 8);
            uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
            uint64_t v49 = &v42;
            uint64_t v50 = AssociatedTypeWitness;
            uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
            double v32 = MEMORY[0x1F4188790](AssociatedTypeWitness);
            uint64_t v34 = (char *)&v42 - v33;
            uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, double))(v29 + 24))(v27, v29, v32);
            if (*(void *)(v8 + 16)
              && (unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36), (v38 & 1) != 0))
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v8 + 56) + 72 * v37, (uint64_t)&v52);
            }
            else
            {
              uint64_t v56 = 0;
              long long v54 = 0u;
              long long v55 = 0u;
              long long v52 = 0u;
              long long v53 = 0u;
            }
            swift_bridgeObjectRelease();
            if (!*((void *)&v53 + 1)) {
              goto LABEL_47;
            }
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v52, (uint64_t)v51);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            uint64_t v39 = v50;
            swift_dynamicCast();
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v52);
            uint64_t v40 = v58;
            (*(void (**)(char *, unsigned char *, uint64_t, uint64_t))(v28 + 16))(v34, v57, v27, v28);
            uint64_t v58 = v40;
            if (v40)
            {
              (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v39);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
              swift_release();
              return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v45, v46);
            }
            (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v39);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
            uint64_t v8 = v44;
            uint64_t v7 = v43;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          uint64_t v9 = v48;
          int64_t v13 = v47;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v14 >= v13) {
      goto LABEL_42;
    }
    unint64_t v18 = *(void *)(v9 + 8 * v14);
    if (!v18) {
      break;
    }
LABEL_20:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
    if (*(void *)(v7 + 16)) {
      goto LABEL_21;
    }
  }
  int64_t v19 = v14 + 1;
  if (v14 + 1 >= v13) {
    goto LABEL_42;
  }
  unint64_t v18 = *(void *)(v9 + 8 * v19);
  if (v18) {
    goto LABEL_19;
  }
  int64_t v19 = v14 + 2;
  if (v14 + 2 >= v13) {
    goto LABEL_42;
  }
  unint64_t v18 = *(void *)(v9 + 8 * v19);
  if (v18) {
    goto LABEL_19;
  }
  int64_t v19 = v14 + 3;
  if (v14 + 3 >= v13) {
    goto LABEL_42;
  }
  unint64_t v18 = *(void *)(v9 + 8 * v19);
  if (v18) {
    goto LABEL_19;
  }
  int64_t v19 = v14 + 4;
  if (v14 + 4 >= v13)
  {
LABEL_42:
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v45, v46);
  }
  unint64_t v18 = *(void *)(v9 + 8 * v19);
  if (v18)
  {
LABEL_19:
    int64_t v14 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v13) {
      goto LABEL_42;
    }
    unint64_t v18 = *(void *)(v9 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_46:
  __break(1u);
LABEL_47:
  uint64_t result = outlined destroy of Any?((uint64_t)&v52, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  __break(1u);
  return result;
}

uint64_t AttributeContainer.init(from:configuration:)@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  char v63 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.AttributeKey>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.AttributeKey and conformance AttributedString.AttributeKey();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v3)
  {
LABEL_2:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v75 = 0;
    uint64_t v59 = v7;
    uint64_t v86 = MEMORY[0x1E4FBC868];
    uint64_t v87 = MEMORY[0x1E4FBC870];
    uint64_t v65 = v6;
    unint64_t v64 = v9;
    uint64_t v12 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v13 = *(void *)(v12 + 16);
    if (v13)
    {
      uint64_t v58 = a1;
      int64_t v14 = (unsigned char *)(v12 + 56);
      uint64_t v66 = v10;
      uint64_t v62 = v12;
      while (1)
      {
        if (*(void *)(v10 + 16))
        {
          uint64_t v16 = *((void *)v14 - 3);
          uint64_t v15 = *((void *)v14 - 2);
          uint64_t v17 = (char *)*((void *)v14 - 1);
          char v18 = *v14;
          swift_bridgeObjectRetain_n();
          unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v15);
          if (v20)
          {
            char v76 = v17;
            uint64_t v21 = *(void *)(*(void *)(v10 + 56) + 16 * v19);
            swift_bridgeObjectRelease();
            uint64_t v22 = swift_conformsToProtocol2();
            if (v22)
            {
              uint64_t v23 = v22;
            }
            else
            {
              uint64_t v21 = 0;
              uint64_t v23 = 0;
            }
            if (v21)
            {
              uint64_t v74 = *(void *)(v23 + 8);
              char v24 = v18;
              uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
              uint64_t v26 = type metadata accessor for Optional();
              uint64_t v73 = &v57;
              uint64_t v88 = v26;
              uint64_t v77 = *(void *)(v26 - 8);
              uint64_t v27 = *(void *)(v77 + 64);
              MEMORY[0x1F4188790](v26);
              uint64_t v28 = v15;
              uint64_t v30 = (char *)&v57 - v29;
              *(void *)&long long v78 = v16;
              *((void *)&v78 + 1) = v28;
              uint64_t v72 = v28;
              *(void *)&long long v79 = v76;
              BYTE8(v79) = v24;
              uint64_t v31 = v75;
              KeyedDecodingContainer.superDecoder(forKey:)();
              if (v31)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v59 + 8))(v64, v65);
                a1 = v58;
                goto LABEL_2;
              }
              (*(void (**)(long long *, uint64_t, uint64_t))(v23 + 16))(&v81, v21, v23);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v81);
              uint64_t v75 = 0;
              uint64_t v67 = *(void *)(AssociatedTypeWitness - 8);
              uint64_t v32 = v67;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v30, 0, 1, AssociatedTypeWitness);
              unint64_t v70 = (*(uint64_t (**)(uint64_t))(v74 + 24))(v21);
              unint64_t v71 = v33;
              long long v69 = &v57;
              uint64_t v34 = *(void *)(v32 + 64);
              MEMORY[0x1F4188790](v70);
              unint64_t v68 = (char *)&v57 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
              double v36 = MEMORY[0x1F4188790](v35);
              unint64_t v37 = (char *)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
              char v38 = *(void (**)(char *, char *, uint64_t, double))(v77 + 16);
              char v76 = v30;
              uint64_t v39 = AssociatedTypeWitness;
              uint64_t v40 = v67;
              v38(v37, v30, v88, v36);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v37, 1, v39) == 1)
              {
                uint64_t v41 = v77;
                uint64_t v42 = v88;
                (*(void (**)(char *, uint64_t))(v77 + 8))(v37, v88);
                uint64_t v85 = 0;
                long long v83 = 0u;
                long long v84 = 0u;
                long long v81 = 0u;
                long long v82 = 0u;
                uint64_t v43 = v41;
              }
              else
              {
                uint64_t v44 = *(uint64_t (**)(void))(v40 + 32);
                unint64_t v60 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
                uint64_t v45 = v68;
                uint64_t v46 = v44();
                int v61 = &v57;
                double v47 = MEMORY[0x1F4188790](v46);
                uint64_t v48 = (char *)&v57 - v60;
                uint64_t v49 = *(void (**)(char *, char *, uint64_t, double))(v40 + 16);
                v49((char *)&v57 - v60, v45, v39, v47);
                *((void *)&v79 + 1) = v39;
                uint64_t v50 = v74;
                *(void *)uint64_t v80 = swift_getAssociatedConformanceWitness();
                boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v78);
                ((void (*)(uint64_t *, char *, uint64_t))v49)(boxed_opaque_existential_1, v48, v39);
                (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v50 + 32))(&v81, v21, v50);
                *(_OWORD *)&v80[8] = v81;
                v80[24] = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 40))(v21, v50) & 1;
                uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 48))(v21, v50);
                long long v53 = *(void (**)(char *, uint64_t))(v40 + 8);
                v53(v48, v39);
                uint64_t v85 = v52;
                long long v83 = *(_OWORD *)v80;
                long long v84 = *(_OWORD *)&v80[16];
                long long v81 = v78;
                long long v82 = v79;
                v53(v68, v39);
                uint64_t v42 = v88;
                uint64_t v43 = v77;
              }
              specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v81, v70, v71);
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v43 + 8))(v76, v42);
              swift_bridgeObjectRelease();
              uint64_t v10 = v66;
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v10 = v66;
            }
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }
        }
        v14 += 32;
        if (!--v13)
        {
          swift_bridgeObjectRelease();
          uint64_t v54 = v86;
          uint64_t v55 = v87;
          a1 = v58;
          goto LABEL_21;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v54 = MEMORY[0x1E4FBC868];
    uint64_t v55 = MEMORY[0x1E4FBC870];
LABEL_21:
    uint64_t v56 = v63;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v64, v65);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v56 = v54;
    v56[1] = v55;
  }
  return result;
}

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance AttributeContainer(void *a1, uint64_t *a2)
{
  return AttributeContainer.encode(to:configuration:)(a1, a2);
}

uint64_t protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance AttributeContainer@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  return AttributeContainer.init(from:configuration:)(a1, a2, a3);
}

uint64_t CodableConfiguration<>.init(wrappedValue:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  swift_release();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v6(a3, a1, a2);
}

_WORD *specialized closure #1 in static Rope._Node.createInner(children:_:)(_WORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = (unsigned __int16)*result;
  uint64_t v9 = (void *)(a2 + 24 * (unsigned __int16)*result);
  *uint64_t v9 = a3;
  v9[1] = a4;
  id v9[2] = a5;
  if (v8 == 0xFFFF)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v10 = (void *)(a2 + 24 * (v8 + 1));
  *uint64_t v10 = a6;
  v10[1] = a7;
  v10[2] = a8;
  if (v8 == 65534)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  *uint64_t result = v8 + 2;
  swift_unknownObjectRetain();

  return (_WORD *)swift_unknownObjectRetain();
}

uint64_t *specialized closure #2 in Rope._Node.append(_:)(_WORD *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int16)*a1;
  uint64_t v5 = a2 + 24 * v4;
  uint64_t v7 = *(void *)(v5 - 24);
  uint64_t v6 = (uint64_t *)(v5 - 24);
  uint64_t result = v6 - 3;
  unint64_t v9 = *(unsigned __int16 *)(v7 + 16) + (unint64_t)*(unsigned __int16 *)(*(v6 - 3) + 16);
  if (v9 <= 0xF)
  {
    uint64_t v10 = v4 - 1;
    specialized static Rope._Node.redistributeChildren(_:_:to:)(result, v6, v9);
    specialized Rope._UnsafeHandle._removeChild(at:)(v10, a1, a2);
    return (uint64_t *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t specialized BidirectionalCollection._distance(from:to:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = a4;
  uint64_t v225 = a1;
  unint64_t v226 = a2;
  uint64_t v227 = a3;
  uint64_t v228 = a4;
  if (static BigString.Index.< infix(_:_:)())
  {
    uint64_t v181 = a1;
    uint64_t result = static BigString.Index.== infix(_:_:)();
    if ((result & 1) == 0)
    {
      uint64_t v18 = *(void *)(v8 + 200);
      uint64_t v241 = *(void *)(v8 + 192);
      long long v19 = *(_OWORD *)(v8 + 48);
      v232[2] = *(_OWORD *)(v8 + 32);
      v232[3] = v19;
      long long v20 = *(_OWORD *)(v8 + 112);
      long long v235 = *(_OWORD *)(v8 + 96);
      long long v236 = v20;
      long long v21 = *(_OWORD *)(v8 + 80);
      long long v233 = *(_OWORD *)(v8 + 64);
      long long v234 = v21;
      long long v22 = *(_OWORD *)(v8 + 176);
      long long v239 = *(_OWORD *)(v8 + 160);
      long long v240 = v22;
      long long v23 = *(_OWORD *)(v8 + 144);
      long long v237 = *(_OWORD *)(v8 + 128);
      long long v238 = v23;
      long long v24 = *(_OWORD *)(v8 + 16);
      v232[0] = *(_OWORD *)v8;
      v232[1] = v24;
      uint64_t v231 = v18;
      uint64_t v160 = *(void *)(v18 + 16);
      if (!v160)
      {
LABEL_228:
        __break(1u);
        goto LABEL_229;
      }
      v157[0] = a5;
      v157[1] = a6;
      uint64_t v174 = 0;
      uint64_t v175 = *((void *)&v233 + 1);
      uint64_t v185 = *(void **)&v232[0];
      unint64_t v166 = (long long *)(*(void *)&v232[0] + 16);
      v157[6] = v238;
      v157[7] = *((void *)&v237 + 1);
      v157[4] = v239;
      v157[5] = *((void *)&v238 + 1);
      uint64_t v170 = (void *)v240;
      uint64_t v171 = *((void *)&v239 + 1);
      long long v192 = (long long *)&v202;
      uint64_t v158 = (uint64_t *)(v18 + 40);
      uint64_t v159 = v18;
      uint64_t v168 = v241;
      uint64_t v169 = *((void *)&v240 + 1);
      uint64_t v25 = a3;
      uint64_t v26 = a2;
      uint64_t v27 = v181;
      _OWORD v157[2] = a7;
      v157[3] = a8;
      int64_t v187 = &v213;
      while (2)
      {
        BOOL v28 = __OFADD__(v174++, 1);
        if (v28) {
          goto LABEL_206;
        }
        outlined retain of AttributedString.Runs((uint64_t)v232);
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if (result)
        {
LABEL_207:
          __break(1u);
          goto LABEL_208;
        }
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if ((result & 1) == 0)
        {
LABEL_208:
          __break(1u);
LABEL_209:
          __break(1u);
          goto LABEL_210;
        }
        uint64_t v29 = v26;
        uint64_t v30 = v27;
        uint64_t v31 = v185[8];
        uint64_t v32 = v185[9];
        uint64_t v33 = v185[10];
        uint64_t v186 = v185[11];
        swift_unknownObjectRetain();
        uint64_t v181 = v30;
        uint64_t v177 = v29;
        uint64_t v178 = v25;
        uint64_t v179 = v13;
        uint64_t result = BigString.Index.utf8Offset.getter();
        if (v31) {
          uint64_t v34 = v33;
        }
        else {
          uint64_t v34 = 0;
        }
        if (result < 0) {
          goto LABEL_209;
        }
        uint64_t v35 = result;
        if (v34 < result) {
          goto LABEL_209;
        }
        if (!v31 || result >= v33 || !*(_WORD *)(v31 + 16))
        {
          unint64_t v48 = swift_unknownObjectRetain();
          unint64_t v190 = specialized Rope._endPath.getter(v48);
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v49 = 0;
          uint64_t v37 = 0;
          uint64_t v50 = v185;
          if (!v31)
          {
            uint64_t v51 = 0;
LABEL_70:
            uint64_t v184 = v35 - v37;
            if (__OFSUB__(v35, v37))
            {
LABEL_210:
              __break(1u);
              goto LABEL_211;
            }
            long long v61 = *v166;
            long long v62 = v166[2];
            v243[1] = v166[1];
            v243[2] = v62;
            v243[0] = v61;
            long long v63 = *v166;
            v244[1] = v166[1];
            v244[2] = v62;
            v244[0] = v63;
            outlined init with take of any PredicateExpression<Self.Output == B1>(v244, (uint64_t)v245);
            outlined retain of Locale((uint64_t)v245);
            BigString.utf8.getter();
            uint64_t result = outlined release of Locale((uint64_t)v243);
            if (__OFSUB__(0, v37))
            {
LABEL_211:
              __break(1u);
              goto LABEL_212;
            }
            uint64_t v64 = BigString.UTF8View.index(_:offsetBy:)();
            uint64_t v66 = v65;
            uint64_t v68 = v67;
            uint64_t v70 = v69;
            uint64_t result = outlined release of Locale((uint64_t)&v229);
            if (v51 >= v175)
            {
LABEL_212:
              __break(1u);
              goto LABEL_213;
            }
            if (v186 != v50[11])
            {
LABEL_213:
              __break(1u);
LABEL_214:
              __break(1u);
LABEL_215:
              __break(1u);
LABEL_216:
              __break(1u);
LABEL_217:
              __break(1u);
LABEL_218:
              __break(1u);
LABEL_219:
              __break(1u);
LABEL_220:
              __break(1u);
LABEL_221:
              __break(1u);
LABEL_222:
              __break(1u);
              goto LABEL_223;
            }
            uint64_t v161 = v70;
            uint64_t v162 = v68;
            uint64_t v163 = v66;
            uint64_t v164 = v64;
            uint64_t v71 = v50[8];
            if (v49)
            {
              unint64_t v72 = v190;
              unint64_t v73 = v49 + 24 * ((v190 >> ((4 * *(unsigned char *)(v49 + 18) + 8) & 0x3C)) & 0xF);
              uint64_t v74 = *(void *)(v73 + 40);
              uint64_t v194 = *(void *)(v73 + 32);
              swift_bridgeObjectRetain();
              uint64_t v165 = v74;
              uint64_t result = swift_bridgeObjectRetain();
              uint64_t v75 = v186;
              uint64_t v76 = v186;
            }
            else
            {
              swift_unknownObjectRetain();
              unint64_t v72 = v190;
              specialized Rope._Node.subscript.getter(v190, v71);
              uint64_t v194 = v77;
              uint64_t v165 = v78;
              uint64_t result = swift_unknownObjectRelease();
              uint64_t v71 = v50[8];
              uint64_t v76 = v50[11];
              uint64_t v75 = v186;
            }
            uint64_t v209 = v75;
            unint64_t v210 = v72;
            uint64_t v183 = v51 + 1;
            uint64_t v211 = v49;
            uint64_t v79 = (uint64_t)v187;
LABEL_78:
            if (v75 != v76) {
              goto LABEL_200;
            }
            uint64_t v176 = v76;
            unint64_t v190 = v72;
            if (v49)
            {
              unint64_t v80 = *(void *)(v49 + 24 * ((v72 >> ((4 * *(unsigned char *)(v49 + 18) + 8) & 0x3C)) & 0xF) + 24);
              swift_unknownObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              swift_unknownObjectRetain();
              unint64_t v80 = specialized Rope._Node.subscript.getter(v72, v71);
            }
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (__OFADD__(v184, v80)) {
              goto LABEL_201;
            }
            uint64_t v172 = v184 + v80;
            if (v71)
            {
              unint64_t v81 = ((-15 << ((4 * *(unsigned char *)(v71 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v71 + 18) | ((unint64_t)*(unsigned __int16 *)(v71 + 16) << ((4 * *(unsigned char *)(v71 + 18) + 8) & 0x3C));
              uint64_t result = swift_unknownObjectRetain();
            }
            else
            {
              unint64_t v81 = 0;
            }
            if (v190 >= v81) {
              goto LABEL_202;
            }
            uint64_t v182 = v49;
            if (v49)
            {
              char v82 = (4 * *(unsigned char *)(v49 + 18) + 8) & 0x3C;
              unint64_t v83 = ((v190 >> v82) & 0xF) + 1;
              if (v83 < *(unsigned __int16 *)(v49 + 16))
              {
                unint64_t v84 = (v83 << v82) | ((-15 << v82) - 1) & v190;
                unint64_t v210 = v84;
LABEL_110:
                uint64_t result = swift_unknownObjectRelease_n();
                uint64_t v71 = v211;
                goto LABEL_111;
              }
            }
            char v85 = (4 * *(unsigned char *)(v71 + 18) + 8) & 0x3C;
            unint64_t v86 = (v190 >> v85) & 0xF;
            if (*(unsigned char *)(v71 + 18))
            {
              uint64_t v87 = v71 + 24;
              uint64_t v88 = *(void *)(v71 + 24 + 24 * ((v190 >> v85) & 0xF));
              char v89 = (4 * *(unsigned char *)(v88 + 18) + 8) & 0x3C;
              unint64_t v90 = (v190 >> v89) & 0xF;
              if (*(unsigned char *)(v88 + 18))
              {
                uint64_t v193 = v71 + 24;
                uint64_t v91 = *(void *)(v88 + 24 + 24 * ((v190 >> v89) & 0xF));
                int v92 = *(unsigned __int8 *)(v91 + 18);
                char v93 = (4 * v92 + 8) & 0x3C;
                *(void *)&long long v200 = (v190 >> v93) & 0xF;
                if (v92)
                {
                  uint64_t v191 = (void *)(v88 + 24);
                  swift_unknownObjectRetain();
                  swift_unknownObjectRetain();
                  swift_unknownObjectRetain();
                  char v94 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v91 + 24, (uint64_t *)&v200, (uint64_t)&v209, v91, v92);
                  uint64_t result = swift_unknownObjectRelease();
                  if (v94)
                  {
                    unint64_t v84 = v210;
LABEL_101:
                    swift_unknownObjectRelease();
                    goto LABEL_102;
                  }
                }
                else
                {
                  unint64_t v95 = ((v190 >> v93) & 0xF) + 1;
                  if (v95 < *(unsigned __int16 *)(v91 + 16))
                  {
                    unint64_t v84 = (v95 << v93) | ((-15 << v93) - 1) & v190;
                    unint64_t v210 = v84;
                    uint64_t v211 = v91;
                    swift_unknownObjectRetain();
                    swift_unknownObjectRetain();
                    goto LABEL_101;
                  }
                  uint64_t v191 = (void *)(v88 + 24);
                  swift_unknownObjectRetain();
                  uint64_t result = swift_unknownObjectRetain();
                }
                unint64_t v96 = v90 + 1;
                if (v90 + 1 < *(unsigned __int16 *)(v88 + 16))
                {
                  uint64_t v97 = v191[3 * v96];
                  int v98 = *(unsigned __int8 *)(v97 + 18);
                  uint64_t v50 = v185;
                  if (((v98 + 1) >> 8)) {
                    goto LABEL_227;
                  }
                  unint64_t v84 = (v210 & ((-15 << v89) - 1) | (v96 << v89)) & ((-256 << (4 * ((v98 + 1) & 0xFu))) | 0xFF);
                  unint64_t v210 = v84;
                  if (v98)
                  {
                    unint64_t v99 = v84;
                    uint64_t v100 = (v84 >> ((4 * v98 + 8) & 0x3C)) & 0xF;
                    swift_unknownObjectRetain();
                    uint64_t v101 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v97 + 24, v100, v99);
                    swift_unknownObjectRelease();
                    uint64_t v97 = v101;
                    unint64_t v84 = v99;
                  }
                  uint64_t v79 = (uint64_t)v187;
                  uint64_t v49 = v182;
                  uint64_t v211 = v97;
                  swift_unknownObjectRelease();
                  goto LABEL_110;
                }
                uint64_t result = swift_unknownObjectRelease();
                uint64_t v50 = v185;
                uint64_t v87 = v193;
              }
              else
              {
                if (v90 + 1 < *(unsigned __int16 *)(v88 + 16))
                {
                  unint64_t v84 = ((v90 + 1) << v89) | ((-15 << v89) - 1) & v190;
                  unint64_t v210 = v84;
                  uint64_t v211 = v88;
                  swift_unknownObjectRetain();
LABEL_102:
                  uint64_t v50 = v185;
                  uint64_t v79 = (uint64_t)v187;
                  uint64_t v49 = v182;
                  goto LABEL_110;
                }
                uint64_t result = swift_unknownObjectRetain();
                uint64_t v50 = v185;
              }
              unint64_t v103 = v86 + 1;
              if (v86 + 1 < *(unsigned __int16 *)(v71 + 16))
              {
                uint64_t v104 = *(void *)(v87 + 24 * v103);
                int v105 = *(unsigned __int8 *)(v104 + 18);
                if (((v105 + 1) >> 8)) {
                  goto LABEL_226;
                }
                unint64_t v84 = (v210 & ((-15 << v85) - 1) | (v103 << v85)) & ((-256 << (4 * ((v105 + 1) & 0xFu))) | 0xFF);
                unint64_t v210 = v84;
                if (v105)
                {
                  uint64_t v106 = (v84 >> ((4 * v105 + 8) & 0x3C)) & 0xF;
                  uint64_t v107 = v104 + 24;
                  swift_unknownObjectRetain();
                  uint64_t v108 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v107, v106, v84);
                  swift_unknownObjectRelease();
                  uint64_t v173 = v108;
                }
                else
                {
                  uint64_t v173 = v104;
                }
                uint64_t v79 = (uint64_t)v187;
                uint64_t v49 = v182;
                uint64_t result = swift_unknownObjectRelease_n();
                uint64_t v102 = v194;
                uint64_t v71 = v173;
                goto LABEL_124;
              }
              uint64_t result = swift_unknownObjectRelease();
            }
            else if (v86 + 1 < *(unsigned __int16 *)(v71 + 16))
            {
              uint64_t result = swift_unknownObjectRelease_n();
              unint64_t v84 = ((v86 + 1) << v85) | ((-15 << v85) - 1) & v190;
              uint64_t v79 = (uint64_t)v187;
              uint64_t v49 = v182;
LABEL_111:
              uint64_t v102 = v194;
LABEL_124:
              if (v183 == v175)
              {
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
LABEL_165:
                if (v176 != v50[11]) {
                  goto LABEL_214;
                }
                if (v49)
                {
                  unint64_t v140 = *(void *)(v49 + 24 * ((v190 >> ((4 * *(unsigned char *)(v49 + 18) + 8) & 0x3C)) & 0xF) + 24);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  uint64_t v141 = v50[8];
                  unint64_t v142 = v190;
                  swift_unknownObjectRetain();
                  unint64_t v140 = specialized Rope._Node.subscript.getter(v142, v141);
                  swift_unknownObjectRelease();
                }
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
                unint64_t v143 = v184 + v140;
                if (__OFADD__(v184, v140)) {
                  goto LABEL_215;
                }
                long long v144 = *v166;
                long long v145 = v166[2];
                v242[1] = v166[1];
                v242[2] = v145;
                v242[0] = v144;
                long long v146 = *v166;
                v246[1] = v166[1];
                v246[2] = v145;
                v246[0] = v146;
                outlined init with take of any PredicateExpression<Self.Output == B1>(v246, (uint64_t)v247);
                outlined retain of Locale((uint64_t)v247);
                BigString.utf8.getter();
                outlined release of Locale((uint64_t)v242);
                uint64_t result = BigString.Index.utf8Offset.getter();
                if (__OFSUB__(v143, result)) {
                  goto LABEL_216;
                }
                uint64_t v147 = BigString.UTF8View.index(_:offsetBy:)();
                uint64_t v191 = v148;
                uint64_t v193 = v150;
                uint64_t v194 = v149;
                outlined release of Locale((uint64_t)&v230);
                uint64_t v152 = v170;
                uint64_t v151 = v171;
                uint64_t v13 = v168;
                uint64_t v153 = v169;
                char v154 = static BigString.Index.< infix(_:_:)();
                if (v154) {
                  uint64_t v27 = v151;
                }
                else {
                  uint64_t v27 = v147;
                }
                if (v154) {
                  uint64_t v26 = v152;
                }
                else {
                  uint64_t v26 = v191;
                }
                if (v154) {
                  uint64_t v25 = v153;
                }
                else {
                  uint64_t v25 = v194;
                }
                if ((v154 & 1) == 0) {
                  uint64_t v13 = v193;
                }
                char v155 = static BigString.Index.< infix(_:_:)();
                uint64_t result = outlined release of AttributedString.Runs((uint64_t)v232);
                if ((v155 & 1) == 0)
                {
                  uint64_t v225 = v27;
                  unint64_t v226 = v26;
                  uint64_t v227 = v25;
                  uint64_t v228 = v13;
                  uint64_t result = static BigString.Index.== infix(_:_:)();
                  if ((result & 1) == 0) {
                    continue;
                  }
                  return v174;
                }
                goto LABEL_217;
              }
              if (v209 != v50[11]) {
                goto LABEL_203;
              }
              uint64_t v186 = v209;
              uint64_t v173 = v71;
              if (v71)
              {
                unint64_t v111 = v71 + 24 * ((v84 >> ((4 * *(unsigned char *)(v71 + 18) + 8) & 0x3C)) & 0xF);
                uint64_t v113 = *(void *)(v111 + 32);
                uint64_t v112 = *(void *)(v111 + 40);
                swift_bridgeObjectRetain();
                uint64_t v180 = v112;
                swift_bridgeObjectRetain();
              }
              else
              {
                uint64_t v114 = v50[8];
                swift_unknownObjectRetain();
                specialized Rope._Node.subscript.getter(v84, v114);
                uint64_t v113 = v115;
                uint64_t v180 = v116;
                uint64_t v102 = v194;
                swift_unknownObjectRelease();
              }
              unint64_t v167 = v84;
              swift_bridgeObjectRetain();
              double v117 = v158;
              uint64_t v118 = v160;
              uint64_t v193 = v113;
              while (1)
              {
                uint64_t v121 = *(v117 - 1);
                uint64_t v120 = *v117;
                if (*(void *)(v102 + 16))
                {
                  swift_bridgeObjectRetain_n();
                  unint64_t v122 = specialized __RawDictionaryStorage.find<A>(_:)(v121, v120);
                  if (v123)
                  {
                    outlined init with copy of AttributedString._AttributeValue(*(void *)(v102 + 56) + 72 * v122, (uint64_t)&v220);
                  }
                  else
                  {
                    uint64_t v224 = 0;
                    long long v222 = 0u;
                    long long v223 = 0u;
                    long long v220 = 0u;
                    long long v221 = 0u;
                  }
                  swift_bridgeObjectRelease();
                }
                else
                {
                  uint64_t v224 = 0;
                  long long v222 = 0u;
                  long long v223 = 0u;
                  long long v220 = 0u;
                  long long v221 = 0u;
                  swift_bridgeObjectRetain();
                }
                uint64_t v124 = v193;
                if (*(void *)(v193 + 16))
                {
                  swift_bridgeObjectRetain();
                  unint64_t v125 = specialized __RawDictionaryStorage.find<A>(_:)(v121, v120);
                  if (v126)
                  {
                    outlined init with copy of AttributedString._AttributeValue(*(void *)(v124 + 56) + 72 * v125, (uint64_t)&v215);
                  }
                  else
                  {
                    uint64_t v219 = 0;
                    long long v217 = 0u;
                    long long v218 = 0u;
                    long long v215 = 0u;
                    long long v216 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  uint64_t v102 = v194;
                }
                else
                {
                  uint64_t v219 = 0;
                  long long v217 = 0u;
                  long long v218 = 0u;
                  long long v215 = 0u;
                  long long v216 = 0u;
                }
                swift_bridgeObjectRelease();
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v220, (uint64_t)&v209, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v215, v79, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!v212)
                {
                  if (v214) {
                    goto LABEL_163;
                  }
                  outlined destroy of Any?((uint64_t)&v209, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v215, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v220, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  goto LABEL_133;
                }
                outlined init with copy of (Hashable & Sendable)?((uint64_t)&v209, (uint64_t)v208, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!v214)
                {
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v208);
LABEL_163:
                  outlined destroy of Any?((uint64_t)&v209, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                  outlined destroy of Any?((uint64_t)&v215, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?((uint64_t)&v220, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_164:
                  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v231);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t result = swift_bridgeObjectRelease();
                  uint64_t v50 = v185;
                  uint64_t v49 = v182;
                  goto LABEL_165;
                }
                long long v127 = *(_OWORD *)(v79 + 48);
                v206[2] = *(_OWORD *)(v79 + 32);
                v206[3] = v127;
                uint64_t v207 = *(void *)(v79 + 64);
                long long v128 = *(_OWORD *)(v79 + 16);
                v206[0] = *(_OWORD *)v79;
                v206[1] = v128;
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v208, (uint64_t)v205);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v206, (uint64_t)v204);
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v205, (uint64_t)&v200, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                uint64_t v129 = v192;
                outlined init with copy of (Hashable & Sendable)?((uint64_t)v204, (uint64_t)v192, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                if (v201)
                {
                  if (!v203)
                  {
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v200);
LABEL_131:
                    char v119 = 0;
                    goto LABEL_132;
                  }
                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v200, (uint64_t)v197);
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v129, (uint64_t)v196);
                  uint64_t v130 = v198;
                  uint64_t v189 = v199;
                  uint64_t v188 = __swift_project_boxed_opaque_existential_1(v197, v198);
                  uint64_t v191 = v157;
                  uint64_t v131 = *(void *)(v130 - 8);
                  MEMORY[0x1F4188790](v188);
                  unint64_t v133 = (char *)v157 - ((v132 + 15) & 0xFFFFFFFFFFFFFFF0);
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v196, (uint64_t)&v195);
                  uint64_t v134 = type metadata accessor for Optional();
                  uint64_t v135 = *(void *)(v134 - 8);
                  MEMORY[0x1F4188790](v134);
                  uint64_t v137 = (char *)v157 - v136;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  int v138 = swift_dynamicCast();
                  unint64_t v139 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v131 + 56);
                  if (v138)
                  {
                    v139(v137, 0, 1, v130);
                    (*(void (**)(char *, char *, uint64_t))(v131 + 32))(v133, v137, v130);
                    char v119 = dispatch thunk of static Equatable.== infix(_:_:)();
                    (*(void (**)(char *, uint64_t))(v131 + 8))(v133, v130);
                  }
                  else
                  {
                    v139(v137, 1, 1, v130);
                    (*(void (**)(char *, uint64_t))(v135 + 8))(v137, v134);
                    char v119 = 0;
                  }
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v196);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v197);
                  uint64_t v79 = (uint64_t)v187;
                }
                else
                {
                  if (v203)
                  {
                    outlined destroy of Any?((uint64_t)v129, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                    goto LABEL_131;
                  }
                  char v119 = 1;
                }
LABEL_132:
                outlined destroy of Any?((uint64_t)v204, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of Any?((uint64_t)v205, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v206);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v208);
                outlined destroy of Any?((uint64_t)&v209, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v215, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?((uint64_t)&v220, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                uint64_t v102 = v194;
                if ((v119 & 1) == 0) {
                  goto LABEL_164;
                }
LABEL_133:
                v117 += 2;
                if (!--v118)
                {
                  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v231);
                  swift_bridgeObjectRelease();
                  uint64_t result = swift_bridgeObjectRelease();
                  uint64_t v50 = v185;
                  uint64_t v71 = v185[8];
                  uint64_t v76 = v185[11];
                  uint64_t v75 = v186;
                  uint64_t v209 = v186;
                  unint64_t v72 = v167;
                  unint64_t v210 = v167;
                  uint64_t v49 = v173;
                  uint64_t v211 = v173;
                  BOOL v28 = __OFADD__(v183++, 1);
                  uint64_t v184 = v172;
                  if (v28) {
                    goto LABEL_219;
                  }
                  goto LABEL_78;
                }
              }
            }
            if (v71)
            {
              int v109 = *(unsigned __int8 *)(v71 + 18);
              uint64_t v110 = *(unsigned __int16 *)(v71 + 16);
              uint64_t result = swift_unknownObjectRelease_n();
              unint64_t v84 = ((-15 << ((4 * v109 + 8) & 0x3C)) - 1) & v109 | (unint64_t)(v110 << ((4 * v109 + 8) & 0x3C));
            }
            else
            {
              unint64_t v84 = 0;
            }
            uint64_t v79 = (uint64_t)v187;
            uint64_t v49 = v182;
            uint64_t v102 = v194;
            uint64_t v71 = 0;
            uint64_t v209 = v176;
            goto LABEL_124;
          }
LABEL_42:
          swift_unknownObjectRetain();
          uint64_t v51 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v186, v190, v49, v31, v32);
          uint64_t result = swift_unknownObjectRelease_n();
          goto LABEL_70;
        }
        break;
      }
      uint64_t v193 = v33;
      uint64_t v194 = v32;
      uint64_t v36 = *(unsigned __int8 *)(v31 + 18);
      if (*(unsigned char *)(v31 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v37 = v35;
        uint64_t v38 = v31;
        while (1)
        {
          uint64_t v41 = *(unsigned __int16 *)(v38 + 16);
          if (!*(_WORD *)(v38 + 16)) {
            break;
          }
          uint64_t v42 = *(void *)(v38 + 40);
          uint64_t v43 = v37 - v42;
          if (__OFSUB__(v37, v42)) {
            goto LABEL_198;
          }
          if (__OFADD__(v43, 1)) {
            goto LABEL_199;
          }
          if (v43 + 1 <= 0)
          {
            uint64_t v41 = 0;
            goto LABEL_20;
          }
          if (v41 == 1)
          {
            v37 -= v42;
            break;
          }
          uint64_t v44 = *(void *)(v38 + 64);
          BOOL v28 = __OFSUB__(v43, v44);
          uint64_t v45 = v43 - v44;
          if (v28) {
            goto LABEL_204;
          }
          if (__OFADD__(v45, 1)) {
            goto LABEL_205;
          }
          if (v45 + 1 < 1)
          {
            uint64_t v41 = 1;
            uint64_t v37 = v43;
            goto LABEL_20;
          }
          if (v41 == 2)
          {
            uint64_t v37 = v45;
            break;
          }
          uint64_t v46 = (void *)(v38 + 88);
          uint64_t v47 = 2;
          while (1)
          {
            if (v41 == v47)
            {
              __break(1u);
LABEL_195:
              __break(1u);
LABEL_196:
              __break(1u);
              goto LABEL_197;
            }
            uint64_t v37 = v45 - *v46;
            if (__OFSUB__(v45, *v46)) {
              goto LABEL_195;
            }
            if (__OFADD__(v37, 1)) {
              goto LABEL_196;
            }
            if (v37 + 1 < 1) {
              break;
            }
            ++v47;
            v46 += 3;
            uint64_t v45 = v37;
            if (v41 == v47) {
              goto LABEL_19;
            }
          }
          uint64_t v41 = v47;
          uint64_t v37 = v45;
LABEL_20:
          char v39 = (4 * *(unsigned char *)(v38 + 18) + 8) & 0x3C;
          uint64_t v36 = ((-15 << v39) - 1) & v36 | (v41 << v39);
          uint64_t v40 = *(void *)(v38 + 24 + 24 * v41);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v38 = v40;
          if (!*(unsigned char *)(v40 + 18)) {
            goto LABEL_44;
          }
        }
LABEL_19:
        if (!v37) {
          goto LABEL_20;
        }
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
        goto LABEL_207;
      }
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v37 = v35;
      uint64_t v40 = v31;
LABEL_44:
      uint64_t v52 = *(unsigned __int16 *)(v40 + 16);
      if (*(_WORD *)(v40 + 16))
      {
        uint64_t v53 = *(void *)(v40 + 24);
        uint64_t v54 = v37 - v53;
        if (__OFSUB__(v37, v53))
        {
LABEL_224:
          __break(1u);
LABEL_225:
          __break(1u);
LABEL_226:
          __break(1u);
LABEL_227:
          __break(1u);
          goto LABEL_228;
        }
        if (__OFADD__(v54, 1)) {
          goto LABEL_225;
        }
        uint64_t v55 = v40;
        if (v54 + 1 <= 0)
        {
          uint64_t v52 = 0;
          uint64_t v32 = v194;
        }
        else
        {
          uint64_t v32 = v194;
          if (v52 == 1)
          {
            v37 -= v53;
            goto LABEL_51;
          }
          uint64_t v56 = *(void *)(v55 + 48);
          BOOL v28 = __OFSUB__(v54, v56);
          uint64_t v57 = v54 - v56;
          if (v28)
          {
LABEL_229:
            __break(1u);
            goto LABEL_230;
          }
          if (__OFADD__(v57, 1))
          {
LABEL_230:
            __break(1u);
            return result;
          }
          if (v57 + 1 < 1)
          {
            uint64_t v52 = 1;
            uint64_t v37 = v54;
          }
          else
          {
            if (v52 == 2)
            {
              uint64_t v37 = v57;
LABEL_51:
              if (v37)
              {
LABEL_223:
                __break(1u);
                goto LABEL_224;
              }
              goto LABEL_68;
            }
            uint64_t v58 = (void *)(v55 + 72);
            uint64_t v59 = 2;
            while (1)
            {
              if (v52 == v59) {
                goto LABEL_220;
              }
              uint64_t v37 = v57 - *v58;
              if (__OFSUB__(v57, *v58)) {
                goto LABEL_221;
              }
              if (__OFADD__(v37, 1)) {
                goto LABEL_222;
              }
              if (v37 + 1 < 1) {
                break;
              }
              ++v59;
              v58 += 3;
              uint64_t v57 = v37;
              if (v52 == v59) {
                goto LABEL_51;
              }
            }
            uint64_t v52 = v59;
            uint64_t v37 = v57;
          }
        }
LABEL_68:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v60 = v36 & 0xFFFFFFFFFFFFF0FFLL;
        uint64_t v49 = v55;
        unint64_t v190 = v60 | (v52 << 8);
        uint64_t v50 = v185;
        goto LABEL_42;
      }
      uint64_t v55 = v40;
      uint64_t v32 = v194;
      goto LABEL_51;
    }
  }
  else if (static BigString.Index.< infix(_:_:)())
  {
    uint64_t result = static BigString.Index.== infix(_:_:)();
    if ((result & 1) == 0)
    {
      uint64_t v156 = 0;
      while (1)
      {
        BOOL v28 = __OFSUB__(v156--, 1);
        if (v28) {
          break;
        }
        specialized BidirectionalCollection.formIndex(before:)(&v225);
        uint64_t result = static BigString.Index.== infix(_:_:)();
        if (result) {
          return v156;
        }
      }
      goto LABEL_218;
    }
  }
  return 0;
}

uint64_t *specialized BidirectionalCollection._distance(from:to:)(uint64_t *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *result;
  unint64_t v6 = result[1];
  uint64_t v7 = result[2];
  uint64_t v8 = result[3];
  uint64_t v9 = result[4];
  uint64_t v10 = *(void *)(a2 + 32);
  char v82 = a3;
  uint64_t v81 = v10;
  if (v9 >= v10)
  {
    if (v10 >= v9) {
      return 0;
    }
    uint64_t v49 = a5;
    uint64_t v11 = 0;
    while (1)
    {
      BOOL v13 = __OFSUB__(v11--, 1);
      if (v13) {
        goto LABEL_188;
      }
      uint64_t v51 = a3[8];
      if (v51)
      {
        if (v9 != a3[10]) {
          goto LABEL_130;
        }
      }
      else if (v9)
      {
LABEL_130:
        uint64_t v64 = a3[11];
        uint64_t v85 = v5;
        unint64_t v86 = v6;
        uint64_t v87 = v7;
        BOOL v13 = __OFSUB__(v8--, 1);
        if (v13) {
          goto LABEL_192;
        }
        if (v5 != v64) {
          goto LABEL_193;
        }
        uint64_t v80 = v5;
        if (v51)
        {
          unint64_t v65 = *(unsigned __int8 *)(v51 + 18);
          uint64_t result = (uint64_t *)swift_unknownObjectRetain();
        }
        else
        {
          unint64_t v65 = 0;
        }
        if (v6 <= v65) {
          goto LABEL_194;
        }
        if (v7)
        {
          char v66 = (4 * *(unsigned char *)(v7 + 18) + 8) & 0x3C;
          if (((v6 >> v66) & 0xF) != 0)
          {
            unint64_t v6 = ((((v6 >> v66) & 0xF) - 1) << v66) | ((-15 << v66) - 1) & v6;
            unint64_t v86 = v6;
            goto LABEL_143;
          }
        }
        int v67 = *(unsigned __int8 *)(v51 + 18);
        char v68 = (4 * v67 + 8) & 0x3C;
        uint64_t v69 = (v6 >> v68) & 0xF;
        uint64_t v84 = v69;
        if (v67)
        {
          swift_unknownObjectRetain();
          char v70 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v51 + 16, v51 + 24, &v84, (uint64_t)&v85, v67);
          uint64_t result = (uint64_t *)swift_unknownObjectRelease();
          if ((v70 & 1) == 0) {
            goto LABEL_199;
          }
          if (v85 != v5) {
            goto LABEL_195;
          }
          unint64_t v6 = v86;
          uint64_t v7 = v87;
          if (v87)
          {
LABEL_143:
            unint64_t v71 = *(void *)(v7 + 24 * ((v6 >> ((4 * *(unsigned char *)(v7 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_147:
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
            BOOL v13 = __OFSUB__(v9, v71);
            v9 -= v71;
            if (v13) {
              goto LABEL_196;
            }
            a3 = v82;
            uint64_t v49 = a5;
            uint64_t v50 = v81;
            goto LABEL_100;
          }
        }
        else
        {
          if (!v69) {
            goto LABEL_199;
          }
          unint64_t v6 = ((v69 - 1) << v68) | ((-15 << v68) - 1) & v6;
          unint64_t v86 = v6;
          uint64_t v7 = v51;
          if (v51) {
            goto LABEL_143;
          }
        }
        swift_unknownObjectRetain();
        unint64_t v71 = specialized Rope._Node.subscript.getter(v6, v51);
        swift_unknownObjectRelease();
        goto LABEL_147;
      }
      if (v51) {
        uint64_t v52 = a3[10];
      }
      else {
        uint64_t v52 = 0;
      }
      if (v49 < 0 || v52 < v49) {
        goto LABEL_197;
      }
      uint64_t v80 = a3[11];
      if (v51)
      {
        uint64_t v53 = a3[9];
        uint64_t v54 = *(unsigned __int8 *)(v51 + 18);
        if (*(_WORD *)(v51 + 16))
        {
          if (*(unsigned char *)(v51 + 18))
          {
            uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
            uint64_t v9 = v49;
            uint64_t v55 = v51;
            while (1)
            {
              uint64_t v58 = *(unsigned __int16 *)(v55 + 16);
              if (!*(_WORD *)(v55 + 16)) {
                goto LABEL_210;
              }
              uint64_t v59 = *(void *)(v55 + 40);
              BOOL v13 = __OFSUB__(v9, v59);
              uint64_t v60 = v9 - v59;
              if (v13) {
                goto LABEL_183;
              }
              if (v60 <= 0)
              {
                uint64_t v56 = 0;
              }
              else
              {
                if (v58 == 1) {
                  goto LABEL_212;
                }
                uint64_t v61 = *(void *)(v55 + 64);
                uint64_t v9 = v60 - v61;
                if (__OFSUB__(v60, v61)) {
                  goto LABEL_186;
                }
                if (v9 < 1)
                {
                  uint64_t v9 = v60;
                  uint64_t v56 = 1;
                }
                else
                {
                  if (v58 == 2) {
                    goto LABEL_212;
                  }
                  long long v62 = (void *)(v55 + 88);
                  uint64_t v56 = 2;
                  while (1)
                  {
                    if (v58 == v56)
                    {
                      __break(1u);
LABEL_171:
                      __break(1u);
                      goto LABEL_172;
                    }
                    uint64_t v63 = v9 - *v62;
                    if (__OFSUB__(v9, *v62)) {
                      goto LABEL_171;
                    }
                    if (v63 < 1) {
                      break;
                    }
                    ++v56;
                    v62 += 3;
                    uint64_t v9 = v63;
                    if (v58 == v56) {
                      goto LABEL_212;
                    }
                  }
                }
              }
              char v57 = (4 * *(unsigned char *)(v55 + 18) + 8) & 0x3C;
              uint64_t v54 = ((-15 << v57) - 1) & v54 | (v56 << v57);
              uint64_t v7 = *(void *)(v55 + 24 + 24 * v56);
              swift_unknownObjectRetain();
              uint64_t result = (uint64_t *)swift_unknownObjectRelease();
              uint64_t v55 = v7;
              if (!*(unsigned char *)(v7 + 18)) {
                goto LABEL_151;
              }
            }
          }
          uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
          uint64_t v54 = 0;
          uint64_t v9 = v49;
          uint64_t v7 = v51;
LABEL_151:
          uint64_t v72 = *(unsigned __int16 *)(v7 + 16);
          if (!*(_WORD *)(v7 + 16)) {
            goto LABEL_213;
          }
          uint64_t v73 = *(void *)(v7 + 24);
          BOOL v13 = __OFSUB__(v9, v73);
          uint64_t v74 = v9 - v73;
          if (v13) {
            goto LABEL_206;
          }
          if (v74 <= 0)
          {
            uint64_t v77 = 0;
          }
          else
          {
            if (v72 == 1) {
              goto LABEL_215;
            }
            uint64_t v75 = *(void *)(v7 + 48);
            uint64_t v9 = v74 - v75;
            if (__OFSUB__(v74, v75)) {
              goto LABEL_207;
            }
            if (v9 >= 1)
            {
              if (v72 == 2) {
                goto LABEL_215;
              }
              uint64_t v76 = (void *)(v7 + 72);
              uint64_t v77 = 2;
              while (v72 != v77)
              {
                uint64_t v78 = v9 - *v76;
                if (__OFSUB__(v9, *v76)) {
                  goto LABEL_185;
                }
                if (v78 < 1) {
                  goto LABEL_166;
                }
                ++v77;
                v76 += 3;
                uint64_t v9 = v78;
                if (v72 == v77) {
                  goto LABEL_215;
                }
              }
LABEL_184:
              __break(1u);
LABEL_185:
              __break(1u);
LABEL_186:
              __break(1u);
LABEL_187:
              __break(1u);
LABEL_188:
              __break(1u);
LABEL_189:
              __break(1u);
LABEL_190:
              __break(1u);
LABEL_191:
              __break(1u);
LABEL_192:
              __break(1u);
LABEL_193:
              __break(1u);
LABEL_194:
              __break(1u);
LABEL_195:
              __break(1u);
LABEL_196:
              __break(1u);
LABEL_197:
              __break(1u);
LABEL_198:
              __break(1u);
LABEL_199:
              __break(1u);
              goto LABEL_200;
            }
            uint64_t v9 = v74;
            uint64_t v77 = 1;
          }
LABEL_166:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v6 = v54 & 0xFFFFFFFFFFFFF0FFLL | (v77 << 8);
        }
        else
        {
          unint64_t v6 = ((-15 << ((4 * v54 + 8) & 0x3C)) - 1) & v54 | ((unint64_t)*(unsigned __int16 *)(v51 + 16) << ((4 * v54 + 8) & 0x3C));
          swift_unknownObjectRetain();
          uint64_t v9 = 0;
          uint64_t v7 = 0;
        }
        swift_unknownObjectRetain();
        uint64_t v8 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v80, v6, v7, v51, v53);
        uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        a3 = v82;
      }
      else
      {
        uint64_t v9 = 0;
        uint64_t v7 = 0;
        unint64_t v6 = 0;
        uint64_t v8 = 0;
      }
      BOOL v13 = __OFSUB__(v49, v9);
      uint64_t v9 = v49 - v9;
      uint64_t v50 = v81;
      if (v13) {
        goto LABEL_198;
      }
LABEL_100:
      uint64_t v5 = v80;
      if (v9 == v50) {
        return (uint64_t *)v11;
      }
    }
  }
  uint64_t v11 = 0;
  while (1)
  {
    BOOL v13 = __OFADD__(v11++, 1);
    if (v13) {
      goto LABEL_175;
    }
    uint64_t v14 = a3[8];
    uint64_t v15 = a3[11];
    uint64_t v85 = v5;
    unint64_t v86 = v6;
    uint64_t v87 = v7;
    BOOL v13 = __OFADD__(v8++, 1);
    if (v13)
    {
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
      goto LABEL_184;
    }
    if (v5 != v15) {
      goto LABEL_177;
    }
    if (v7)
    {
      unint64_t v16 = *(void *)(v7 + 24 * ((v6 >> ((4 * *(unsigned char *)(v7 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v16 = specialized Rope._Node.subscript.getter(v6, v14);
    }
    swift_bridgeObjectRelease();
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    BOOL v13 = __OFADD__(v9, v16);
    v9 += v16;
    if (v13) {
      goto LABEL_178;
    }
    if (v14)
    {
      unint64_t v17 = ((-15 << ((4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v14 + 18) | ((unint64_t)*(unsigned __int16 *)(v14 + 16) << ((4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C));
      uint64_t result = (uint64_t *)swift_unknownObjectRetain();
    }
    else
    {
      unint64_t v17 = 0;
    }
    uint64_t v18 = a5;
    if (v6 >= v17) {
      goto LABEL_179;
    }
    if (v7)
    {
      char v19 = (4 * *(unsigned char *)(v7 + 18) + 8) & 0x3C;
      unint64_t v20 = ((v6 >> v19) & 0xF) + 1;
      if (v20 < *(unsigned __int16 *)(v7 + 16))
      {
        unint64_t v6 = (v20 << v19) | ((-15 << v19) - 1) & v6;
        uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        goto LABEL_24;
      }
    }
    int v21 = *(unsigned __int8 *)(v14 + 18);
    char v22 = (4 * v21 + 8) & 0x3C;
    uint64_t v23 = (v6 >> v22) & 0xF;
    uint64_t v84 = v23;
    if (v21)
    {
      swift_unknownObjectRetain();
      char v24 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v14 + 24, &v84, (uint64_t)&v85, v14, v21);
      uint64_t result = (uint64_t *)swift_unknownObjectRelease();
      if (v24)
      {
        uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        uint64_t v5 = v85;
        unint64_t v6 = v86;
        uint64_t v7 = v87;
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v25 = v23 + 1;
      if (v23 + 1 < (unint64_t)*(unsigned __int16 *)(v14 + 16))
      {
        uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
        unint64_t v6 = (v25 << v22) | ((-15 << v22) - 1) & v6;
        uint64_t v7 = v14;
LABEL_24:
        a3 = v82;
        if (v9 < a5) {
          goto LABEL_3;
        }
        goto LABEL_30;
      }
    }
    if (v14)
    {
      int v26 = *(unsigned __int8 *)(v14 + 18);
      uint64_t v27 = *(unsigned __int16 *)(v14 + 16);
      uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
      unint64_t v6 = ((-15 << ((4 * v26 + 8) & 0x3C)) - 1) & v26 | (unint64_t)(v27 << ((4 * v26 + 8) & 0x3C));
    }
    else
    {
      unint64_t v6 = 0;
    }
    a3 = v82;
    uint64_t v7 = 0;
    uint64_t v85 = v5;
    if (v9 < a5)
    {
LABEL_3:
      uint64_t v12 = v81;
      goto LABEL_4;
    }
LABEL_30:
    uint64_t v28 = a3[8];
    if (a4 != a5)
    {
      uint64_t v5 = a3[11];
      uint64_t v12 = v81;
      if (v28)
      {
        uint64_t v7 = 0;
        uint64_t v8 = a3[9];
        uint64_t v9 = a3[10];
        unint64_t v6 = ((-15 << ((4 * *(unsigned char *)(v28 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v28 + 18) | ((unint64_t)*(unsigned __int16 *)(v28 + 16) << ((4 * *(unsigned char *)(v28 + 18) + 8) & 0x3C));
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v7 = 0;
        uint64_t v8 = 0;
        uint64_t v9 = 0;
      }
      goto LABEL_4;
    }
    if (v28) {
      uint64_t v29 = a3[10];
    }
    else {
      uint64_t v29 = 0;
    }
    if (a4 < 0 || v29 < a5) {
      goto LABEL_190;
    }
    uint64_t v30 = a3[11];
    if (v28) {
      break;
    }
    uint64_t v9 = 0;
    uint64_t v7 = 0;
    unint64_t v6 = 0;
    uint64_t v8 = 0;
LABEL_94:
    BOOL v13 = __OFSUB__(v18, v9);
    uint64_t v9 = v18 - v9;
    if (v13) {
      goto LABEL_191;
    }
    uint64_t v12 = v81;
    uint64_t v5 = v30;
LABEL_4:
    if (v9 == v12) {
      return (uint64_t *)v11;
    }
  }
  uint64_t v31 = a3[9];
  uint64_t v32 = *(unsigned __int8 *)(v28 + 18);
  if (!*(_WORD *)(v28 + 16) || a3[10] <= a5)
  {
    unint64_t v6 = ((-15 << ((4 * v32 + 8) & 0x3C)) - 1) & v32 | ((unint64_t)*(unsigned __int16 *)(v28 + 16) << ((4 * v32 + 8) & 0x3C));
    swift_unknownObjectRetain();
    uint64_t v9 = 0;
    uint64_t v7 = 0;
LABEL_93:
    swift_unknownObjectRetain();
    uint64_t v8 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v30, v6, v7, v28, v31);
    uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
    a3 = v82;
    uint64_t v18 = a5;
    goto LABEL_94;
  }
  if (*(unsigned char *)(v28 + 18))
  {
    uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    uint64_t v9 = a5;
    uint64_t v33 = v28;
    while (1)
    {
      uint64_t v35 = *(unsigned __int16 *)(v33 + 16);
      if (!*(_WORD *)(v33 + 16)) {
        goto LABEL_42;
      }
      uint64_t v36 = *(void *)(v33 + 40);
      uint64_t v37 = v9 - v36;
      if (__OFSUB__(v9, v36)) {
        goto LABEL_181;
      }
      if (__OFADD__(v37, 1)) {
        goto LABEL_182;
      }
      if (v37 + 1 <= 0)
      {
        uint64_t v35 = 0;
      }
      else
      {
        if (v35 == 1)
        {
          v9 -= v36;
LABEL_42:
          if (v9) {
            goto LABEL_180;
          }
          goto LABEL_43;
        }
        uint64_t v38 = *(void *)(v33 + 64);
        BOOL v13 = __OFSUB__(v37, v38);
        uint64_t v39 = v37 - v38;
        if (v13) {
          goto LABEL_187;
        }
        if (__OFADD__(v39, 1)) {
          goto LABEL_189;
        }
        if (v39 + 1 >= 1)
        {
          if (v35 != 2)
          {
            uint64_t v40 = (void *)(v33 + 88);
            uint64_t v41 = 2;
            while (v35 != v41)
            {
              uint64_t v9 = v39 - *v40;
              if (__OFSUB__(v39, *v40)) {
                goto LABEL_173;
              }
              if (__OFADD__(v9, 1)) {
                goto LABEL_174;
              }
              if (v9 + 1 < 1)
              {
                uint64_t v35 = v41;
                uint64_t v9 = v39;
                goto LABEL_43;
              }
              ++v41;
              v40 += 3;
              uint64_t v39 = v9;
              if (v35 == v41) {
                goto LABEL_42;
              }
            }
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
            goto LABEL_176;
          }
          uint64_t v9 = v39;
          goto LABEL_42;
        }
        uint64_t v35 = 1;
        uint64_t v9 = v37;
      }
LABEL_43:
      char v34 = (4 * *(unsigned char *)(v33 + 18) + 8) & 0x3C;
      uint64_t v32 = ((-15 << v34) - 1) & v32 | (v35 << v34);
      uint64_t v7 = *(void *)(v33 + 24 + 24 * v35);
      swift_unknownObjectRetain();
      uint64_t result = (uint64_t *)swift_unknownObjectRelease();
      uint64_t v33 = v7;
      if (!*(unsigned char *)(v7 + 18)) {
        goto LABEL_70;
      }
    }
  }
  uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
  uint64_t v32 = 0;
  uint64_t v9 = a5;
  uint64_t v7 = v28;
LABEL_70:
  uint64_t v42 = v31;
  uint64_t v43 = *(unsigned __int16 *)(v7 + 16);
  if (!*(_WORD *)(v7 + 16))
  {
LABEL_79:
    uint64_t v45 = v9;
    goto LABEL_80;
  }
  uint64_t v44 = *(void *)(v7 + 24);
  BOOL v13 = __OFSUB__(v9, v44);
  uint64_t v45 = v9 - v44;
  if (v13) {
    goto LABEL_204;
  }
  if (__OFADD__(v45, 1)) {
    goto LABEL_205;
  }
  if (v45 + 1 <= 0)
  {
    uint64_t v43 = 0;
LABEL_92:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v6 = v32 & 0xFFFFFFFFFFFFF0FFLL | (v43 << 8);
    uint64_t v31 = v42;
    goto LABEL_93;
  }
  if (v43 == 1)
  {
LABEL_80:
    if (v45) {
      goto LABEL_203;
    }
    uint64_t v9 = 0;
    goto LABEL_92;
  }
  uint64_t v46 = *(void *)(v7 + 48);
  uint64_t v9 = v45 - v46;
  if (__OFSUB__(v45, v46)) {
    goto LABEL_208;
  }
  if (__OFADD__(v9, 1)) {
    goto LABEL_209;
  }
  if (v9 + 1 < 1)
  {
    uint64_t v43 = 1;
    uint64_t v9 = v45;
    goto LABEL_92;
  }
  if (v43 == 2) {
    goto LABEL_79;
  }
  uint64_t v47 = (void *)(v7 + 72);
  uint64_t v48 = 2;
  while (v43 != v48)
  {
    uint64_t v45 = v9 - *v47;
    if (__OFSUB__(v9, *v47)) {
      goto LABEL_201;
    }
    if (__OFADD__(v45, 1)) {
      goto LABEL_202;
    }
    if (v45 + 1 < 1)
    {
      uint64_t v43 = v48;
      goto LABEL_92;
    }
    ++v48;
    v47 += 3;
    uint64_t v9 = v45;
    if (v43 == v48) {
      goto LABEL_80;
    }
  }
LABEL_200:
  __break(1u);
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
LABEL_204:
  __break(1u);
LABEL_205:
  __break(1u);
LABEL_206:
  __break(1u);
LABEL_207:
  __break(1u);
LABEL_208:
  __break(1u);
LABEL_209:
  __break(1u);
LABEL_210:
  if (!v9) {
    __break(1u);
  }
LABEL_212:
  __break(1u);
LABEL_213:
  if (!v9) {
    __break(1u);
  }
LABEL_215:
  __break(1u);
  return result;
}

char *specialized BidirectionalCollection._distance(from:to:)(void *a1, void **a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = a1[3];
  uint64_t result = (char *)*a1;
  uint64_t v7 = (char *)*a2;
  if ((uint64_t)result >= (uint64_t)*a2)
  {
LABEL_19:
    if ((uint64_t)v7 >= (uint64_t)result) {
      return 0;
    }
    uint64_t v11 = 0;
    unint64_t v16 = (char *)v4[1];
    while (1)
    {
      BOOL v12 = __OFSUB__(v11--, 1);
      if (v12) {
        break;
      }
      if (result == v16)
      {
        if (v5)
        {
          BOOL v12 = __OFSUB__(v5--, 1);
          if (v12) {
            goto LABEL_47;
          }
          char v17 = *(unsigned char *)(a3 + 24);
          uint64_t result = (char *)objc_msgSend(*(id *)(a3 + 16), sel_rangeAtIndex_, v5);
          unint64_t v16 = result;
          char v19 = &result[v18];
          BOOL v20 = __OFADD__(result, v18);
          if (v17)
          {
            if (v20) {
              goto LABEL_51;
            }
            if ((uint64_t)v19 < (uint64_t)result) {
              goto LABEL_52;
            }
          }
          else
          {
            if (v20) {
              goto LABEL_53;
            }
            if ((uint64_t)v19 < (uint64_t)result) {
              goto LABEL_54;
            }
          }
          uint64_t result = v19 - 1;
          if (__OFSUB__(v19, 1))
          {
            __break(1u);
            return 0;
          }
        }
        else
        {
          uint64_t result = v16;
        }
      }
      else
      {
        BOOL v12 = __OFSUB__(result--, 1);
        if (v12) {
          goto LABEL_46;
        }
      }
      if (result == v7) {
        return (char *)v11;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = (char *)v4[2];
    uint64_t v10 = v4[4];
    while (1)
    {
      uint64_t v11 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        break;
      }
      BOOL v12 = __OFADD__(result++, 1);
      if (v12) {
        goto LABEL_43;
      }
      if (result == v9)
      {
        uint64_t v13 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_44;
        }
        uint64_t result = v9;
        if (v13 != v10)
        {
          char v14 = *(unsigned char *)(a3 + 24);
          uint64_t result = (char *)objc_msgSend(*(id *)(a3 + 16), sel_rangeAtIndex_, v13);
          uint64_t v9 = &result[v15];
          uint64_t v4 = (void *)__OFADD__(result, v15);
          if (v14)
          {
            if (v4) {
              goto LABEL_48;
            }
            uint64_t v5 = v13;
            if ((uint64_t)v9 < (uint64_t)result) {
              goto LABEL_49;
            }
          }
          else
          {
            if (v4) {
              goto LABEL_50;
            }
            uint64_t v5 = v13;
            if ((uint64_t)v9 < (uint64_t)result)
            {
              __break(1u);
              goto LABEL_19;
            }
          }
        }
      }
      ++v8;
      if (result == v7) {
        return (char *)v11;
      }
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection._distance(from:to:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12 = a2;
  uint64_t v37 = result;
  unint64_t v38 = a2;
  uint64_t v39 = a3;
  if (a2 < a5)
  {
    uint64_t v13 = 0;
    uint64_t v35 = a7 + 24;
    while (1)
    {
      uint64_t v14 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      if (v37 != a10) {
        goto LABEL_50;
      }
      if (!a7
        || v12 >= (((-15 << ((4 * *(unsigned char *)(a7 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(a7 + 18) | ((unint64_t)*(unsigned __int16 *)(a7 + 16) << ((4 * *(unsigned char *)(a7 + 18) + 8) & 0x3C))))
      {
        goto LABEL_51;
      }
      if (v39
        && (char v15 = (4 * *(unsigned char *)(v39 + 18) + 8) & 0x3C,
            unint64_t v16 = ((v12 >> v15) & 0xF) + 1,
            v16 < *(unsigned __int16 *)(v39 + 16)))
      {
        unint64_t v12 = (v16 << v15) | ((-15 << v15) - 1) & v12;
        unint64_t v38 = v12;
      }
      else
      {
        char v17 = (4 * *(unsigned char *)(a7 + 18) + 8) & 0x3C;
        uint64_t v18 = (v12 >> v17) & 0xF;
        if (*(unsigned char *)(a7 + 18))
        {
          uint64_t v19 = *(void *)(v35 + 24 * ((v12 >> v17) & 0xF));
          int v20 = *(unsigned __int8 *)(v19 + 18);
          char v21 = (4 * v20 + 8) & 0x3C;
          unint64_t v36 = (v12 >> v21) & 0xF;
          if (v20)
          {
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            char v22 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v19 + 24, (uint64_t *)&v36, (uint64_t)&v37, v19, v20);
            uint64_t result = swift_unknownObjectRelease();
            if (v22)
            {
              unint64_t v12 = v38;
LABEL_27:
              uint64_t result = swift_unknownObjectRelease();
              goto LABEL_4;
            }
          }
          else
          {
            unint64_t v23 = ((v12 >> v21) & 0xF) + 1;
            if (v23 < *(unsigned __int16 *)(v19 + 16))
            {
              unint64_t v12 = (v23 << v21) | ((-15 << v21) - 1) & v12;
              unint64_t v38 = v12;
              uint64_t v39 = v19;
              swift_unknownObjectRetain();
              goto LABEL_27;
            }
            uint64_t result = swift_unknownObjectRetain();
          }
          uint64_t v24 = v18 + 1;
          if (v18 + 1 >= (unint64_t)*(unsigned __int16 *)(a7 + 16))
          {
            uint64_t result = swift_unknownObjectRelease();
LABEL_29:
            unint64_t v12 = ((-15 << ((4 * *(unsigned char *)(a7 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(a7 + 18) | ((unint64_t)*(unsigned __int16 *)(a7 + 16) << ((4 * *(unsigned char *)(a7 + 18) + 8) & 0x3C));
            uint64_t v37 = a10;
            unint64_t v38 = v12;
            uint64_t v39 = 0;
            goto LABEL_4;
          }
          uint64_t v25 = *(void *)(v35 + 24 * v24);
          int v26 = *(unsigned __int8 *)(v25 + 18);
          if (((v26 + 1) >> 8)) {
            goto LABEL_56;
          }
          unint64_t v12 = (v38 & ((-15 << v17) - 1) | (v24 << v17)) & ((-256 << (4 * ((v26 + 1) & 0xFu))) | 0xFF);
          unint64_t v38 = v12;
          if (v26)
          {
            uint64_t v27 = (v12 >> ((4 * v26 + 8) & 0x3C)) & 0xF;
            swift_unknownObjectRetain();
            uint64_t v28 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v25 + 24, v27, v12);
            swift_unknownObjectRelease();
            uint64_t v25 = v28;
          }
          uint64_t v39 = v25;
          goto LABEL_27;
        }
        if (v18 + 1 >= (unint64_t)*(unsigned __int16 *)(a7 + 16)) {
          goto LABEL_29;
        }
        unint64_t v12 = ((v18 + 1) << v17) | ((-15 << v17) - 1) & v12;
        unint64_t v38 = v12;
        uint64_t v39 = a7;
      }
LABEL_4:
      ++v13;
      if (v12 == a5) {
        return v14;
      }
    }
  }
  if (a5 >= a2)
  {
    return 0;
  }
  else
  {
    uint64_t v14 = 0;
    while (1)
    {
      if (__OFSUB__(v14--, 1)) {
        goto LABEL_52;
      }
      if (v37 != a10) {
        break;
      }
      if (a7)
      {
        if (v12 <= *(unsigned __int8 *)(a7 + 18)) {
          goto LABEL_54;
        }
      }
      else if (!v12)
      {
        goto LABEL_54;
      }
      if (v39 && (char v30 = (4 * *(unsigned char *)(v39 + 18) + 8) & 0x3C, ((v12 >> v30) & 0xF) != 0))
      {
        unint64_t v12 = ((((v12 >> v30) & 0xF) - 1) << v30) | ((-15 << v30) - 1) & v12;
        unint64_t v38 = v12;
      }
      else
      {
        int v31 = *(unsigned __int8 *)(a7 + 18);
        char v32 = (4 * v31 + 8) & 0x3C;
        uint64_t v33 = (v12 >> v32) & 0xF;
        unint64_t v36 = v33;
        if (v31)
        {
          swift_unknownObjectRetain();
          char v34 = specialized closure #1 in Rope._Node.formPredecessor(of:)(a7 + 16, a7 + 24, (uint64_t *)&v36, (uint64_t)&v37, v31);
          uint64_t result = swift_unknownObjectRelease();
          if ((v34 & 1) == 0) {
            goto LABEL_55;
          }
          unint64_t v12 = v38;
        }
        else
        {
          if (!v33) {
            goto LABEL_55;
          }
          unint64_t v12 = ((v33 - 1) << v32) | ((-15 << v32) - 1) & v12;
          unint64_t v38 = v12;
          uint64_t v39 = a7;
        }
      }
      if (v12 == a5) {
        return v14;
      }
    }
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
  }
  return result;
}

uint64_t specialized BidirectionalCollection._distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (static BigString.Index.< infix(_:_:)())
  {
    uint64_t result = static BigString.Index.== infix(_:_:)();
    if ((result & 1) == 0)
    {
      uint64_t v10 = 0;
      uint64_t v11 = *((void *)v4 + 25);
      uint64_t v62 = *((void *)v4 + 24);
      long long v12 = v4[11];
      long long v60 = v4[10];
      long long v61 = v12;
      long long v13 = v4[7];
      long long v56 = v4[6];
      long long v57 = v13;
      long long v14 = v4[9];
      long long v58 = v4[8];
      long long v59 = v14;
      long long v15 = v4[3];
      long long v52 = v4[2];
      long long v53 = v15;
      long long v16 = v4[5];
      long long v54 = v4[4];
      long long v55 = v16;
      long long v17 = v4[1];
      long long v50 = *v4;
      long long v51 = v17;
      uint64_t v18 = *((void *)v4 + 26);
      while (1)
      {
        uint64_t v19 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          break;
        }
        long long v43 = v60;
        long long v44 = v61;
        uint64_t v45 = v62;
        long long v39 = v56;
        long long v40 = v57;
        long long v41 = v58;
        long long v42 = v59;
        long long v35 = v52;
        long long v36 = v53;
        long long v37 = v54;
        long long v38 = v55;
        long long v33 = v50;
        long long v34 = v51;
        uint64_t v29 = a1;
        uint64_t v30 = a2;
        uint64_t v31 = a3;
        uint64_t v32 = a4;
        outlined retain of AttributedString.Runs((uint64_t)&v50);
        AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)(&v29, v11, v18, &v46);
        outlined release of AttributedString.Runs((uint64_t)&v50);
        a1 = v46;
        a2 = v47;
        a3 = v48;
        a4 = v49;
        uint64_t result = static BigString.Index.== infix(_:_:)();
        ++v10;
        if (result) {
          return v19;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
      return result;
    }
  }
  else if (static BigString.Index.< infix(_:_:)())
  {
    uint64_t result = static BigString.Index.== infix(_:_:)();
    if ((result & 1) == 0)
    {
      uint64_t v19 = 0;
      uint64_t v20 = *((void *)v4 + 25);
      uint64_t v62 = *((void *)v4 + 24);
      long long v21 = v4[11];
      long long v60 = v4[10];
      long long v61 = v21;
      long long v22 = v4[7];
      long long v56 = v4[6];
      long long v57 = v22;
      long long v23 = v4[9];
      long long v58 = v4[8];
      long long v59 = v23;
      long long v24 = v4[3];
      long long v52 = v4[2];
      long long v53 = v24;
      long long v25 = v4[5];
      long long v54 = v4[4];
      long long v55 = v25;
      long long v26 = v4[1];
      long long v50 = *v4;
      long long v51 = v26;
      uint64_t v27 = *((void *)v4 + 26);
      while (!__OFSUB__(v19--, 1))
      {
        long long v43 = v60;
        long long v44 = v61;
        uint64_t v45 = v62;
        long long v39 = v56;
        long long v40 = v57;
        long long v41 = v58;
        long long v42 = v59;
        long long v35 = v52;
        long long v36 = v53;
        long long v37 = v54;
        long long v38 = v55;
        long long v33 = v50;
        long long v34 = v51;
        uint64_t v29 = a1;
        uint64_t v30 = a2;
        uint64_t v31 = a3;
        uint64_t v32 = a4;
        outlined retain of AttributedString.Runs((uint64_t)&v50);
        AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:)(&v29, v20, v27, &v46);
        outlined release of AttributedString.Runs((uint64_t)&v50);
        a1 = v46;
        a2 = v47;
        a3 = v48;
        a4 = v49;
        uint64_t result = static BigString.Index.== infix(_:_:)();
        if (result) {
          return v19;
        }
      }
      goto LABEL_16;
    }
  }
  return 0;
}

uint64_t dispatch thunk of static EncodableAttributedStringKey.encode(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static DecodableAttributedStringKey.decode(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static MarkdownDecodableAttributedStringKey.decodeMarkdown(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static MarkdownDecodableAttributedStringKey.markdownName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for AttributeScopeCodableConfiguration()
{
  return &type metadata for AttributeScopeCodableConfiguration;
}

unsigned char *storeEnumTagSinglePayload for AttributedString.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F45E20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [PresentationIntent.IntentType] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PresentationIntent.IntentType]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.AlternateDescriptionAttribute()
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.AgreementConceptAttribute()
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.ReferentConceptAttribute();
}

void *protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.ImageURLAttribute(uint64_t a1, void *a2)
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedURLArgumentAttribute(a1, a2);
}

BOOL static NSScanner.NumberRepresentation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void NSScanner.NumberRepresentation.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int NSScanner.NumberRepresentation.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

id key path setter for NSScanner.currentIndex : NSScanner(uint64_t a1, id *a2)
{
  id v2 = *a2;
  id v3 = objc_msgSend(*a2, sel_string);
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v7 = StringProtocol._toUTF16Offset(_:)();
  swift_bridgeObjectRelease();
  return objc_msgSend(v2, sel__deprecated_setScanLocation_, v7, v4, v6);
}

id NSScanner.currentIndex.setter()
{
  Swift::UInt v1 = v0;
  id v2 = objc_msgSend(v0, sel_string);
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v5 = v4;

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v6 = StringProtocol._toUTF16Offset(_:)();
  swift_bridgeObjectRelease();
  return objc_msgSend(v1, sel__deprecated_setScanLocation_, v6, v3, v5);
}

void (*NSScanner.currentIndex.modify(void *a1))(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[3] = v2;
  id v5 = objc_msgSend(v2, sel_string);
  unint64_t v6 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  unint64_t v8 = v7;

  void *v4 = v6;
  v4[1] = v8;
  objc_msgSend(v2, sel__deprecated_scanLocation);
  v4[4] = lazy protocol witness table accessor for type String and conformance String();
  unint64_t v9 = StringProtocol._toUTF16Index(_:)();
  unint64_t v10 = v9;
  uint64_t v11 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v11 = v6 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v12 = 4 * v11;
  if (4 * v11 != v9 >> 14)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t result = (void (*)(uint64_t))String.Index.samePosition(in:)();
      if ((v15 & 1) == 0) {
        break;
      }
      uint64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        return result;
      }
      void *v4 = v6;
      v4[1] = v8;
      long long v17 = (char *)objc_msgSend(v2, sel__deprecated_scanLocation);
      BOOL v18 = __OFADD__(v17, v16);
      uint64_t result = (void (*)(uint64_t))&v17[v16];
      if (v18) {
        goto LABEL_11;
      }
      unint64_t v10 = StringProtocol._toUTF16Index(_:)();
      ++v13;
    }
    while (v12 != v10 >> 14);
  }
  swift_bridgeObjectRelease();
  _OWORD v4[2] = v10;
  return NSScanner.currentIndex.modify;
}

void NSScanner.currentIndex.modify(uint64_t a1)
{
  Swift::UInt v1 = *(void **)a1;
  id v2 = objc_msgSend(*(id *)(*(void *)a1 + 24), sel_string);
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v5 = v4;

  unint64_t v6 = (void *)v1[3];
  *Swift::UInt v1 = v3;
  v1[1] = v5;
  uint64_t v7 = StringProtocol._toUTF16Offset(_:)();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel__deprecated_setScanLocation_, v7);

  free(v1);
}

unint64_t NSScanner.scanInt32(representation:)(char *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  char v2 = *a1;
  int v7 = 0x7FFFFFFF;
  if (v2)
  {
    unsigned int v6 = -1;
    if (objc_msgSend(v1, sel__deprecated_scanHexInt32_, &v6))
    {
      LODWORD(v3) = v6;
      if (v6 >= 0x7FFFFFFF) {
        LODWORD(v3) = 0x7FFFFFFF;
      }
      goto LABEL_7;
    }
LABEL_8:
    uint64_t v3 = 0;
    unsigned __int8 v4 = 1;
    return v3 | ((unint64_t)v4 << 32);
  }
  if (!objc_msgSend(v1, sel__deprecated_scanInt32_, &v7)) {
    goto LABEL_8;
  }
  LODWORD(v3) = v7;
LABEL_7:
  unsigned __int8 v4 = 0;
  uint64_t v3 = v3;
  return v3 | ((unint64_t)v4 << 32);
}

unint64_t NSScanner.scanFloat(representation:)(char *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  char v2 = *a1;
  unsigned int v6 = 2139095039;
  if ((v2 & 1) == 0)
  {
    if ((objc_msgSend(v1, sel__deprecated_scanFloat_, &v6) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    unsigned __int8 v4 = 0;
    uint64_t v3 = v6;
    return v3 | ((unint64_t)v4 << 32);
  }
  if (objc_msgSend(v1, sel_scanHexFloat_, &v6)) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v3 = 0;
  unsigned __int8 v4 = 1;
  return v3 | ((unint64_t)v4 << 32);
}

uint64_t NSScanner.scanDouble(representation:)(char *a1)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  char v2 = *a1;
  v4[0] = 0x7FEFFFFFFFFFFFFFLL;
  if (v2)
  {
    if (!objc_msgSend(v1, sel_scanHexDouble_, v4)) {
      return 0;
    }
  }
  else if ((objc_msgSend(v1, sel__deprecated_scanDouble_, v4) & 1) == 0)
  {
    return 0;
  }
  return v4[0];
}

void __swiftcall NSScanner.scanDecimal()(NSDecimal_optional *__return_ptr retstr)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  v2[1] = 0;
  int v3 = 0;
  objc_msgSend(v1, sel__deprecated_scanDecimal_, v2);
}

void NSScanner.scanCharacters(from:)(uint64_t *a1)
{
  char v2 = v1;
  uint64_t v71 = *a1;
  id v3 = objc_msgSend(v1, sel_charactersToBeSkipped);
  id v69 = v1;
  if (v3)
  {
    id v4 = v3;
    objc_msgSend(v4, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for CFCharacterSetRef(0);
    swift_dynamicCast();
    type metadata accessor for __CharacterSetStorage();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v72;
    *(unsigned char *)(v5 + 24) = 0;

    id v6 = objc_msgSend(v2, sel_string);
    id v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    unint64_t v70 = v7;

    id v8 = objc_msgSend(v2, sel_string);
    unint64_t v9 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    unint64_t v11 = v10;

    objc_msgSend(v2, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v12 = StringProtocol._toUTF16Index(_:)();
    unint64_t v13 = v12;
    uint64_t v14 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0) {
      uint64_t v14 = v9 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v15 = 4 * v14;
    if (4 * v14 != v12 >> 14)
    {
      uint64_t v16 = 0;
      do
      {
        String.Index.samePosition(in:)();
        if ((v17 & 1) == 0) {
          break;
        }
        if (__OFADD__(v16, 1))
        {
          __break(1u);
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        if (__OFADD__(objc_msgSend(v69, sel__deprecated_scanLocation, v68), v16 + 1)) {
          goto LABEL_49;
        }
        unint64_t v13 = StringProtocol._toUTF16Index(_:)();
        ++v16;
      }
      while (v15 != v13 >> 14);
    }
    swift_bridgeObjectRelease();
    unint64_t v18 = specialized Collection.suffix(from:)(v13, (uint64_t)v68, v70);
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    if (v20 >> 14 == v18 >> 14)
    {
      swift_bridgeObjectRelease();
LABEL_25:
      char v2 = v69;
      id v34 = objc_msgSend(v69, sel_string, v68);
      uint64_t v35 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      unint64_t v37 = v36;
      swift_release();

      swift_bridgeObjectRelease();
      uint64_t v38 = HIBYTE(v37) & 0xF;
      if ((v37 & 0x2000000000000000) == 0) {
        uint64_t v38 = v35;
      }
      uint64_t v39 = v38 << 16;
      if ((v37 & 0x1000000000000000) == 0 || (v35 & 0x800000000000000) != 0) {
        unint64_t v26 = v39 | 7;
      }
      else {
        unint64_t v26 = v39 | 0xB;
      }
    }
    else
    {
      swift_retain();
      unint64_t v26 = v18;
      while (1)
      {
        uint64_t v31 = Substring.subscript.getter();
        unint64_t v33 = v32;
        swift_retain();
        LOBYTE(v31) = specialized Sequence.allSatisfy(_:)(v31, v33, v5);
        swift_bridgeObjectRelease();
        if ((v31 & 1) == 0) {
          break;
        }
        unint64_t v26 = Substring.index(after:)();
        if (v20 >> 14 == v26 >> 14)
        {
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_25;
        }
      }
      swift_bridgeObjectRelease();
      swift_release_n();
      char v2 = v69;
    }
  }
  else
  {
    id v21 = objc_msgSend(v1, sel_string);
    unint64_t v22 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    unint64_t v24 = v23;

    objc_msgSend(v2, sel__deprecated_scanLocation);
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v25 = StringProtocol._toUTF16Index(_:)();
    unint64_t v26 = v25;
    uint64_t v27 = HIBYTE(v24) & 0xF;
    if ((v24 & 0x2000000000000000) == 0) {
      uint64_t v27 = v22 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v28 = 4 * v27;
    if (4 * v27 != v25 >> 14)
    {
      uint64_t v29 = 0;
      do
      {
        String.Index.samePosition(in:)();
        if ((v30 & 1) == 0) {
          break;
        }
        if (__OFADD__(v29, 1))
        {
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        if (__OFADD__(objc_msgSend(v2, sel__deprecated_scanLocation), v29 + 1)) {
          goto LABEL_51;
        }
        unint64_t v26 = StringProtocol._toUTF16Index(_:)();
        ++v29;
      }
      while (v28 != v26 >> 14);
    }
    swift_bridgeObjectRelease();
  }
  id v40 = objc_msgSend(v2, sel_string, v68);
  id v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  unint64_t v43 = v42;

  unint64_t v44 = specialized Collection.suffix(from:)(v26, (uint64_t)v41, v43);
  unint64_t v46 = v45;
  swift_bridgeObjectRelease();
  if (v46 >> 14 == v44 >> 14)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    long long v51 = v69;
    id v52 = objc_msgSend(v69, sel_string);
    uint64_t v53 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    unint64_t v55 = v54;

    swift_bridgeObjectRelease();
    uint64_t v56 = HIBYTE(v55) & 0xF;
    if ((v55 & 0x2000000000000000) == 0) {
      uint64_t v56 = v53;
    }
    uint64_t v57 = v56 << 16;
    if ((v55 & 0x1000000000000000) == 0 || (v53 & 0x800000000000000) != 0) {
      unint64_t v47 = v57 | 7;
    }
    else {
      unint64_t v47 = v57 | 0xB;
    }
  }
  else
  {
    swift_retain();
    unint64_t v47 = v44;
    while (1)
    {
      uint64_t v48 = Substring.subscript.getter();
      unint64_t v50 = v49;
      swift_retain();
      LOBYTE(v48) = specialized Sequence.allSatisfy(_:)(v48, v50, v71);
      swift_bridgeObjectRelease();
      if ((v48 & 1) == 0) {
        break;
      }
      unint64_t v47 = Substring.index(after:)();
      if (v46 >> 14 == v47 >> 14)
      {
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_38;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    long long v51 = v69;
  }
  if (v26 >> 14 != v47 >> 14)
  {
    id v58 = objc_msgSend(v51, sel_string);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v58);

    if (v47 >> 14 < v26 >> 14)
    {
LABEL_52:
      __break(1u);
    }
    else
    {
      uint64_t v59 = String.subscript.getter();
      uint64_t v61 = v60;
      uint64_t v63 = v62;
      uint64_t v65 = v64;
      swift_bridgeObjectRelease();
      id v66 = objc_msgSend(v51, (SEL)&selRef_setLanguageCode_);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v66);

      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v67 = StringProtocol._toUTF16Offset(_:)();
      swift_bridgeObjectRelease();
      objc_msgSend(v51, sel__deprecated_setScanLocation_, v67);
      MEMORY[0x185301F50](v59, v61, v63, v65);
      swift_bridgeObjectRelease();
    }
  }
}

unint64_t lazy protocol witness table accessor for type NSScanner.NumberRepresentation and conformance NSScanner.NumberRepresentation()
{
  unint64_t result = lazy protocol witness table cache variable for type NSScanner.NumberRepresentation and conformance NSScanner.NumberRepresentation;
  if (!lazy protocol witness table cache variable for type NSScanner.NumberRepresentation and conformance NSScanner.NumberRepresentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSScanner.NumberRepresentation and conformance NSScanner.NumberRepresentation);
  }
  return result;
}

uint64_t sub_181F470B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NSScanner.currentIndex.getter();
  *a1 = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for NSScanner.NumberRepresentation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F471B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

BOOL static PredicateExpressions.ArithmeticOperator.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PredicateExpressions.ArithmeticOperator.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressions.ArithmeticOperator.CodingKeys()
{
  uint64_t v1 = 0x7463617274627573;
  if (*v0 != 1) {
    uint64_t v1 = 0x796C7069746C756DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 6579297;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressions.ArithmeticOperator.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PredicateExpressions.ArithmeticOperator.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ArithmeticOperator.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ArithmeticOperator.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PredicateExpressions.ArithmeticOperator.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys>);
  uint64_t v24 = *(void *)(v4 - 8);
  uint64_t v25 = v4;
  MEMORY[0x1F4188790](v4);
  unint64_t v23 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ArithmeticOperator.SubtractCodingKeys>);
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v22 = v6;
  MEMORY[0x1F4188790](v6);
  id v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ArithmeticOperator.AddCodingKeys>);
  uint64_t v19 = *(void *)(v9 - 8);
  uint64_t v20 = v9;
  MEMORY[0x1F4188790](v9);
  unint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ArithmeticOperator.CodingKeys>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v16 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v16)
  {
    if (v16 == 1)
    {
      char v27 = 1;
      lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v22);
    }
    else
    {
      char v28 = 2;
      lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys();
      char v17 = v23;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v17, v25);
    }
  }
  else
  {
    char v26 = 0;
    lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys);
  }
  return result;
}

Swift::Int PredicateExpressions.ArithmeticOperator.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t PredicateExpressions.ArithmeticOperator.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys>);
  uint64_t v33 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  unint64_t v37 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ArithmeticOperator.SubtractCodingKeys>);
  uint64_t v32 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ArithmeticOperator.AddCodingKeys>);
  uint64_t v31 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  id v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ArithmeticOperator.CodingKeys>);
  uint64_t v36 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.CodingKeys and conformance PredicateExpressions.ArithmeticOperator.CodingKeys();
  uint64_t v12 = (uint64_t)v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v29 = v6;
  uint64_t v30 = 0;
  uint64_t v14 = v37;
  uint64_t v13 = v38;
  uint64_t v39 = a1;
  uint64_t v15 = v11;
  uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v16 + 16) != 1)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *unint64_t v23 = &type metadata for PredicateExpressions.ArithmeticOperator;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, *MEMORY[0x1E4FBBA70], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v9);
    a1 = v39;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  int v17 = *(unsigned __int8 *)(v16 + 32);
  if (*(unsigned char *)(v16 + 32))
  {
    if (v17 == 1)
    {
      char v41 = 1;
      lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.SubtractCodingKeys and conformance PredicateExpressions.ArithmeticOperator.SubtractCodingKeys();
      uint64_t v18 = v30;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v35;
      uint64_t v19 = v36;
      uint64_t v30 = v18;
      if (v18)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
LABEL_12:
        a1 = v39;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      }
      (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v34);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
    }
    else
    {
      char v42 = 2;
      lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys and conformance PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys();
      uint64_t v25 = v30;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v35;
      uint64_t v26 = v36;
      uint64_t v30 = v25;
      if (v25)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
        goto LABEL_12;
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v13);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
    }
  }
  else
  {
    char v40 = 0;
    lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator.AddCodingKeys and conformance PredicateExpressions.ArithmeticOperator.AddCodingKeys();
    uint64_t v24 = v30;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v30 = v24;
    if (v24)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v9);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v9);
    uint64_t v20 = v35;
  }
  *uint64_t v20 = v17;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.ArithmeticOperator@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return PredicateExpressions.ArithmeticOperator.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.ArithmeticOperator(void *a1)
{
  return PredicateExpressions.ArithmeticOperator.encode(to:)(a1);
}

void PredicateExpressions.Arithmetic.op.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t PredicateExpressions.Arithmetic.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

uint64_t PredicateExpressions.Arithmetic.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 64));
}

uint64_t PredicateExpressions.Arithmetic.init(lhs:rhs:op:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  char v11 = *a3;
  uint64_t v12 = type metadata accessor for PredicateExpressions.Arithmetic();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(&a6[*(int *)(v12 + 60)], a1, a4);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(&a6[*(int *)(v12 + 64)], a2, a5);
  *a6 = v11;
  return result;
}

uint64_t PredicateExpressions.Arithmetic.evaluate(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v21 = a3;
  uint64_t v6 = a2[4];
  uint64_t v7 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v19 - v13;
  uint64_t v15 = *a1;
  uint64_t v23 = v15;
  uint64_t v16 = v22;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, double))(v6 + 16))(&v23, v7, v6, v12);
  if (!v16)
  {
    uint64_t v23 = v15;
    (*(void (**)(uint64_t *, void))(a2[5] + 16))(&v23, a2[3]);
    if (*v3)
    {
      if (*v3 == 1) {
        dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      }
      else {
        dispatch thunk of static Numeric.* infix(_:_:)();
      }
    }
    else
    {
      dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
    }
    uint64_t v18 = *(void (**)(char *, uint64_t))(v20 + 8);
    v18(v10, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, uint64_t))v18)(v14, AssociatedTypeWitness);
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Arithmetic<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.Arithmetic.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_Arithmetic<A, B>(lhs:rhs:op:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  char v11 = *a3;
  uint64_t v12 = type metadata accessor for PredicateExpressions.Arithmetic();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(&a6[*(int *)(v12 + 60)], a1, a4);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(&a6[*(int *)(v12 + 64)], a2, a5);
  *a6 = v11;
  return result;
}

uint64_t PredicateExpressions.Arithmetic.description.getter()
{
  BYTE8(v6) = 0;
  _StringGuts.grow(_:)(42);
  v1._unint64_t object = (void *)0x80000001823B3E10;
  v1._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 0x74617265706F202CLL;
  v2._unint64_t object = (void *)0xEC000000203A726FLL;
  String.append(_:)(v2);
  *(void *)&long long v6 = *v0;
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 0x203A736872202CLL;
  v3._unint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._uint64_t countAndFlagsBits = 41;
  v4._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return *(void *)((char *)&v6 + 1);
}

uint64_t PredicateExpressions.Arithmetic<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator);
  }
  return result;
}

uint64_t PredicateExpressions.Arithmetic<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v36 = a4;
  uint64_t v31 = a6;
  uint64_t v32 = a5;
  uint64_t v33 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v35 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38[0] = v14;
  v38[1] = v15;
  v38[2] = v16;
  uint64_t v39 = v17;
  uint64_t v40 = v18;
  uint64_t v19 = type metadata accessor for PredicateExpressions.Arithmetic();
  uint64_t v30 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v29 - v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v22 = v37;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v22) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  unint64_t v37 = a1;
  uint64_t v29 = v21;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
  uint64_t v23 = v35;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v36 = v19;
  (*(void (**)(unsigned char *, char *, uint64_t))(v34 + 32))(&v29[*(int *)(v19 + 60)], v23, a2);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(unsigned char *, char *, uint64_t))(v33 + 32))(&v29[*(int *)(v36 + 64)], v10, a3);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
  lazy protocol witness table accessor for type PredicateExpressions.ArithmeticOperator and conformance PredicateExpressions.ArithmeticOperator();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v24 = (uint64_t)v37;
  uint64_t v25 = v29;
  *uint64_t v29 = v41;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  uint64_t v26 = v30;
  uint64_t v27 = v36;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v30 + 16))(v31, v25, v36);
  __swift_destroy_boxed_opaque_existential_1(v24);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v26 + 8))(v25, v27);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Arithmetic<A, B>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Arithmetic<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.Arithmetic<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Arithmetic<A, B>(void *a1)
{
  return PredicateExpressions.Arithmetic<>.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for PredicateExpressions.ArithmeticOperator()
{
  return &type metadata for PredicateExpressions.ArithmeticOperator;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Arithmetic(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  if (v5 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v4 + 84);
  }
  if (v12 <= 0xFD) {
    unsigned int v13 = 253;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  int v14 = a2 - v13;
  if (a2 <= v13) {
    goto LABEL_28;
  }
  uint64_t v15 = ((v10 + v11 + ((v9 + 1) & ~v9)) & ~v11) + *(void *)(*(void *)(v6 - 8) + 64);
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)&a1[v15];
      if (!v17) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)&a1[v15];
      if (!*(_WORD *)&a1[v15]) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_28:
      if (v12 > 0xFD)
      {
        uint64_t v24 = (unint64_t)&a1[v9 + 1] & ~v9;
        if (v5 == v13) {
          return (*(uint64_t (**)(uint64_t))(v4 + 48))(v24);
        }
        else {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))((v24 + v10 + v11) & ~v11, v8, v6);
        }
      }
      else
      {
        unsigned int v23 = *a1;
        if (v23 >= 3) {
          return v23 - 2;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v17 = a1[v15];
  if (!a1[v15]) {
    goto LABEL_28;
  }
LABEL_18:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 <= 3) {
      int v21 = v15;
    }
    else {
      int v21 = 4;
    }
    switch(v21)
    {
      case 2:
        int v22 = *(unsigned __int16 *)a1;
        break;
      case 3:
        int v22 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)a1;
        break;
      default:
        int v22 = *a1;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  return v13 + (v22 | v20) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.Arithmetic(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= 0xFD) {
    unsigned int v14 = 253;
  }
  else {
    unsigned int v14 = v13;
  }
  size_t v15 = ((v11 + v12 + ((v10 + 1) & ~v10)) & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v16 = a3 >= v14;
  unsigned int v17 = a3 - v14;
  if (v17 != 0 && v16)
  {
    if (v15 <= 3)
    {
      unsigned int v21 = ((v17 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
      if (HIWORD(v21))
      {
        int v18 = 4;
      }
      else if (v21 >= 0x100)
      {
        int v18 = 2;
      }
      else
      {
        int v18 = v21 > 1;
      }
    }
    else
    {
      int v18 = 1;
    }
  }
  else
  {
    int v18 = 0;
  }
  if (v14 < a2)
  {
    unsigned int v19 = ~v14 + a2;
    if (v15 < 4)
    {
      int v20 = (v19 >> (8 * v15)) + 1;
      if (v15)
      {
        int v22 = v19 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        a1[v15] = v20;
        return;
      case 2:
        *(_WORD *)&a1[v15] = v20;
        return;
      case 3:
        goto LABEL_46;
      case 4:
        *(_DWORD *)&a1[v15] = v20;
        return;
      default:
        return;
    }
  }
  switch(v18)
  {
    case 1:
      a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x181F491F8);
    case 4:
      *(_DWORD *)&a1[v15] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v13 > 0xFD)
        {
          unint64_t v23 = (unint64_t)&a1[v10 + 1] & ~v10;
          if (v7 == v14)
          {
            uint64_t v24 = *(void (**)(unint64_t))(v6 + 56);
            v24(v23);
          }
          else
          {
            unint64_t v25 = (v23 + v11 + v12) & ~v12;
            uint64_t v26 = *(void (**)(unint64_t))(v9 + 56);
            v26(v25);
          }
        }
        else
        {
          *a1 = a2 + 2;
        }
      }
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for PredicateExpressions.ArithmeticOperator(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181F492ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PredicateExpressions.ArithmeticOperator.CodingKeys()
{
  return &unk_1ECA3D9A8;
}

void *type metadata accessor for PredicateExpressions.ArithmeticOperator.AddCodingKeys()
{
  return &unk_1ECA3DA38;
}

void *type metadata accessor for PredicateExpressions.ArithmeticOperator.SubtractCodingKeys()
{
  return &unk_1ECA3DA78;
}

void *type metadata accessor for PredicateExpressions.ArithmeticOperator.MultiplyCodingKeys()
{
  return &unk_1ECA3DA58;
}

uint64_t specialized PredicateExpressions.ArithmeticOperator.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6579297 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7463617274627573 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x796C7069746C756DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void _FileManagerImpl.getRelationship(_:ofDirectoryAt:toItemAt:)(uint64_t *a1, id *a2, id *a3)
{
  uint64_t v280 = *MEMORY[0x1E4F143B8];
  id v259 = *a3;
  id v266 = *a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  int v3 = (void *)swift_allocObject();
  unsigned int v4 = (void *)*MEMORY[0x1E4F1C5A0];
  v3[4] = *MEMORY[0x1E4F1C5A0];
  v270 = v3 + 4;
  uint64_t v5 = (void *)*MEMORY[0x1E4F1C820];
  char v6 = (void *)*MEMORY[0x1E4F1C628];
  v3[5] = *MEMORY[0x1E4F1C820];
  v3[6] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  uint64_t v7 = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = v7 + 56;
  id v257 = v4;
  id v253 = v5;
  id v264 = v6;
  uint64_t v9 = 0;
  uint64_t v275 = v7;
  do
  {
    uint64_t v11 = (void *)v270[v9];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    Hasher.init(_seed:)();
    id v12 = v11;
    uint64_t v10 = v275;
    String.hash(into:)();
    Swift::Int v13 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    uint64_t v14 = -1 << *(unsigned char *)(v275 + 32);
    unint64_t v15 = v13 & ~v14;
    unint64_t v16 = v15 >> 6;
    uint64_t v17 = *(void *)(v8 + 8 * (v15 >> 6));
    uint64_t v18 = 1 << v15;
    if (((1 << v15) & v17) != 0)
    {
      id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v275 + 48) + 8 * v15));
      uint64_t v21 = v20;
      if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(v11) && v21 == v22) {
        goto LABEL_2;
      }
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v24) {
        goto LABEL_3;
      }
      uint64_t v14 = ~v14;
      unint64_t v15 = (v15 + 1) & v14;
      unint64_t v16 = v15 >> 6;
      uint64_t v17 = *(void *)(v8 + 8 * (v15 >> 6));
      uint64_t v18 = 1 << v15;
      uint64_t v10 = v275;
      if ((v17 & (1 << v15)) != 0)
      {
        id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v275 + 48) + 8 * v15));
        uint64_t v27 = v26;
        if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)(v11) && v27 == v28) {
          goto LABEL_2;
        }
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v30) {
          goto LABEL_3;
        }
        unint64_t v15 = (v15 + 1) & v14;
        unint64_t v16 = v15 >> 6;
        uint64_t v17 = *(void *)(v8 + 8 * (v15 >> 6));
        uint64_t v18 = 1 << v15;
        uint64_t v10 = v275;
        if ((v17 & (1 << v15)) != 0)
        {
          id v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v275 + 48) + 8 * v15));
          uint64_t v33 = v32;
          if (v31 == static String._unconditionallyBridgeFromObjectiveC(_:)(v11) && v33 == v34)
          {
LABEL_2:
            swift_bridgeObjectRelease_n();
          }
          else
          {
            while (1)
            {
              char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v35) {
                break;
              }
              unint64_t v15 = (v15 + 1) & v14;
              unint64_t v16 = v15 >> 6;
              uint64_t v17 = *(void *)(v8 + 8 * (v15 >> 6));
              uint64_t v18 = 1 << v15;
              uint64_t v10 = v275;
              if ((v17 & (1 << v15)) == 0) {
                goto LABEL_28;
              }
              id v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v275 + 48) + 8 * v15));
              uint64_t v38 = v37;
              if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)(v11) && v38 == v39) {
                goto LABEL_2;
              }
            }
          }
LABEL_3:

          uint64_t v10 = v275;
          goto LABEL_4;
        }
      }
    }
LABEL_28:
    *(void *)(v8 + 8 * v16) = v18 | v17;
    *(void *)(*(void *)(v10 + 48) + 8 * v15) = v12;
    uint64_t v41 = *(void *)(v10 + 16);
    BOOL v42 = __OFADD__(v41, 1);
    uint64_t v43 = v41 + 1;
    if (v42)
    {
      __break(1u);
LABEL_232:
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v246 = (id)_nilObjCError;
LABEL_235:
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      swift_release_n();

      return;
    }
    *(void *)(v10 + 16) = v43;
LABEL_4:
    ++v9;
  }
  while (v9 != 3);
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v44 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v44);
  swift_release();
  *(void *)&long long v278 = 0;
  id v45 = objc_msgSend(v266, sel_resourceValuesForKeys_error_, _ContiguousArrayBuffer._asCocoaArray()(), &v278);
  swift_unknownObjectRelease();
  unint64_t v46 = (void *)v278;
  if (!v45)
  {
    if (!(void)v278)
    {
      if (one-time initialization token for _nilObjCError != -1) {
        goto LABEL_246;
      }
      goto LABEL_69;
    }
    (id)v278;
LABEL_70:
    swift_willThrow();
    swift_release();
    return;
  }
  uint64_t v47 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v45);
  id v48 = v46;

  *(void *)&long long v278 = v47;
  *((void *)&v278 + 1) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v49 = URLResourceValues._get(_:)(v264);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v49 & 1) == 0)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v50 = 2;
    goto LABEL_92;
  }
  uint64_t v265 = v47;
  long long v51 = (void *)swift_allocObject();
  id v52 = (void *)*MEMORY[0x1E4F1C568];
  v51[4] = *MEMORY[0x1E4F1C568];
  v271 = v51 + 4;
  v51[5] = v257;
  v51[6] = v253;
  uint64_t v53 = static _SetStorage.allocate(capacity:)();
  uint64_t v54 = v53 + 56;
  id v55 = v52;
  id v258 = v257;
  id v254 = v253;
  uint64_t v56 = 0;
  v267 = (void *)(v53 + 56);
  while (2)
  {
    uint64_t v57 = (void *)v271[v56];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    Hasher.init(_seed:)();
    id v58 = v57;
    String.hash(into:)();
    Swift::Int v59 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    uint64_t v60 = -1 << *(unsigned char *)(v53 + 32);
    unint64_t v61 = v59 & ~v60;
    unint64_t v62 = v61 >> 6;
    uint64_t v63 = *(void *)(v54 + 8 * (v61 >> 6));
    uint64_t v64 = 1 << v61;
    if (((1 << v61) & v63) == 0) {
      goto LABEL_62;
    }
    id v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v53 + 48) + 8 * v61));
    uint64_t v67 = v66;
    if (v65 == static String._unconditionallyBridgeFromObjectiveC(_:)(v57) && v67 == v68) {
      goto LABEL_36;
    }
    char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v70) {
      goto LABEL_37;
    }
    uint64_t v71 = ~v60;
    unint64_t v61 = (v61 + 1) & v71;
    unint64_t v62 = v61 >> 6;
    uint64_t v54 = v53 + 56;
    uint64_t v63 = v267[v61 >> 6];
    uint64_t v64 = 1 << v61;
    if ((v63 & (1 << v61)) == 0) {
      goto LABEL_62;
    }
    id v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v53 + 48) + 8 * v61));
    uint64_t v74 = v73;
    if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)(v57) && v74 == v75) {
      goto LABEL_36;
    }
    char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v77) {
      goto LABEL_37;
    }
    unint64_t v61 = (v61 + 1) & v71;
    unint64_t v62 = v61 >> 6;
    uint64_t v54 = v53 + 56;
    uint64_t v63 = v267[v61 >> 6];
    uint64_t v64 = 1 << v61;
    if ((v63 & (1 << v61)) == 0)
    {
LABEL_62:
      *(void *)(v54 + 8 * v62) = v64 | v63;
      *(void *)(*(void *)(v53 + 48) + 8 * v61) = v58;
      uint64_t v88 = *(void *)(v53 + 16);
      BOOL v42 = __OFADD__(v88, 1);
      uint64_t v89 = v88 + 1;
      if (v42)
      {
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        swift_once();
LABEL_69:
        id v99 = (id)_nilObjCError;
        goto LABEL_70;
      }
      *(void *)(v53 + 16) = v89;
      goto LABEL_38;
    }
    id v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v53 + 48) + 8 * v61));
    uint64_t v80 = v79;
    if (v78 == static String._unconditionallyBridgeFromObjectiveC(_:)(v57) && v80 == v81)
    {
LABEL_36:
      swift_bridgeObjectRelease_n();
      goto LABEL_37;
    }
    while (1)
    {
      char v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v82) {
        break;
      }
      unint64_t v61 = (v61 + 1) & v71;
      unint64_t v62 = v61 >> 6;
      uint64_t v54 = v53 + 56;
      uint64_t v63 = v267[v61 >> 6];
      uint64_t v64 = 1 << v61;
      if ((v63 & (1 << v61)) == 0) {
        goto LABEL_62;
      }
      id v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v53 + 48) + 8 * v61));
      uint64_t v85 = v84;
      if (v83 == static String._unconditionallyBridgeFromObjectiveC(_:)(v57) && v85 == v86) {
        goto LABEL_36;
      }
    }
LABEL_37:

    uint64_t v54 = v53 + 56;
LABEL_38:
    if (++v56 != 3) {
      continue;
    }
    break;
  }
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v90 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v90);
  swift_release();
  uint64_t v91 = _ContiguousArrayBuffer._asCocoaArray()();
  *(void *)&long long v278 = 0;
  id v92 = objc_msgSend(v259, sel_resourceValuesForKeys_error_, v91, &v278);
  swift_unknownObjectRelease();
  char v93 = (void *)v278;
  if (!v92)
  {
    if ((void)v278)
    {
      (id)v278;
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
LABEL_249:
      }
        swift_once();
      id v109 = (id)_nilObjCError;
    }
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v94 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v92);
  id v95 = v93;

  if (*(void *)(v94 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v96 = v258;
    uint64_t v97 = specialized __RawDictionaryStorage.find<A>(_:)(v96);
    if (v98)
    {
      outlined init with copy of Any(*(void *)(v94 + 56) + 32 * v97, (uint64_t)&v278);
    }
    else
    {
      long long v278 = 0u;
      long long v279 = 0u;
    }
  }
  else
  {
    long long v278 = 0u;
    long long v279 = 0u;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSCopying & NSSecureCoding & NSObject);
  if (swift_dynamicCast())
  {
    uint64_t v100 = v276;
  }
  else
  {
    uint64_t v100 = 0;
    v276 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v100)
  {
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
    goto LABEL_256;
  }
  if (*(void *)(v265 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v101 = v258;
    uint64_t v102 = specialized __RawDictionaryStorage.find<A>(_:)(v101);
    if (v103)
    {
      outlined init with copy of Any(*(void *)(v265 + 56) + 32 * v102, (uint64_t)&v278);
    }
    else
    {
      long long v278 = 0u;
      long long v279 = 0u;
    }
  }
  else
  {
    long long v278 = 0u;
    long long v279 = 0u;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  if (swift_dynamicCast())
  {
    uint64_t v104 = v276;
  }
  else
  {
    uint64_t v104 = 0;
    v276 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v104) {
    goto LABEL_255;
  }
  unsigned __int8 v105 = objc_msgSend(v100, sel_isEqual_, v104);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v105 & 1) == 0)
  {
    if (*(void *)(v94 + 16))
    {
      id v106 = v254;
      uint64_t v107 = specialized __RawDictionaryStorage.find<A>(_:)(v106);
      if (v108)
      {
        outlined init with copy of Any(*(void *)(v94 + 56) + 32 * v107, (uint64_t)&v278);
      }
      else
      {
        long long v278 = 0u;
        long long v279 = 0u;
      }
    }
    else
    {
      long long v278 = 0u;
      long long v279 = 0u;
    }
    if (swift_dynamicCast())
    {
      uint64_t v110 = v276;
    }
    else
    {
      uint64_t v110 = 0;
      v276 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v110)
    {
      if (*(void *)(v265 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v111 = v254;
        uint64_t v112 = specialized __RawDictionaryStorage.find<A>(_:)(v111);
        if (v113)
        {
          outlined init with copy of Any(*(void *)(v265 + 56) + 32 * v112, (uint64_t)&v278);
        }
        else
        {
          long long v278 = 0u;
          long long v279 = 0u;
        }
      }
      else
      {
        long long v278 = 0u;
        long long v279 = 0u;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      if (swift_dynamicCast()) {
        uint64_t v114 = v276;
      }
      else {
        uint64_t v114 = 0;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v114)
      {
        unsigned __int8 v115 = objc_msgSend(v110, sel_isEqual_, v114);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if ((v115 & 1) == 0) {
          goto LABEL_32;
        }
        v250 = (void *)*MEMORY[0x1E4F1C6A0];
        v249 = (void *)*MEMORY[0x1E4F1C6F8];
        id v272 = v259;
        swift_retain();
        swift_retain();
        while (1)
        {
          v260 = (void *)swift_allocObject();
          v260[4] = v250;
          uint64_t v116 = static _SetStorage.allocate(capacity:)();
          double v117 = (void *)v260[4];
          id v273 = v272;
          swift_retain();
          swift_retain();
          id v255 = v250;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
          Hasher.init(_seed:)();
          id v268 = v117;
          String.hash(into:)();
          Swift::Int v118 = Hasher._finalize()();
          swift_bridgeObjectRelease();
          uint64_t v119 = -1 << *(unsigned char *)(v116 + 32);
          unint64_t v120 = v118 & ~v119;
          unint64_t v121 = v120 >> 6;
          uint64_t v252 = v116 + 56;
          uint64_t v122 = *(void *)(v116 + 56 + 8 * (v120 >> 6));
          uint64_t v123 = 1 << v120;
          if (((1 << v120) & v122) != 0)
          {
            id v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v116 + 48) + 8 * v120));
            uint64_t v126 = v125;
            if (v124 == static String._unconditionallyBridgeFromObjectiveC(_:)(v117) && v126 == v127)
            {
LABEL_146:
              swift_bridgeObjectRelease_n();
LABEL_147:

              uint64_t v14 = (uint64_t)v273;
              goto LABEL_148;
            }
            char v129 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v129) {
              goto LABEL_147;
            }
            uint64_t v130 = ~v119;
            unint64_t v120 = (v120 + 1) & ~v119;
            unint64_t v121 = v120 >> 6;
            uint64_t v131 = v116 + 56;
            uint64_t v122 = *(void *)(v252 + 8 * (v120 >> 6));
            uint64_t v123 = 1 << v120;
            if ((v122 & (1 << v120)) != 0)
            {
              id v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v116 + 48) + 8 * v120));
              uint64_t v134 = v133;
              if (v132 == static String._unconditionallyBridgeFromObjectiveC(_:)(v117) && v134 == v135) {
                goto LABEL_146;
              }
              char v137 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v137) {
                goto LABEL_147;
              }
              unint64_t v120 = (v120 + 1) & v130;
              unint64_t v121 = v120 >> 6;
              uint64_t v122 = *(void *)(v252 + 8 * (v120 >> 6));
              uint64_t v123 = 1 << v120;
              if ((v122 & (1 << v120)) != 0)
              {
                id v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v116 + 48)
                                                                                       + 8 * v120));
                uint64_t v140 = v139;
                if (v138 == static String._unconditionallyBridgeFromObjectiveC(_:)(v117) && v140 == v141) {
                  goto LABEL_146;
                }
                char v144 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v144) {
                  goto LABEL_147;
                }
                unint64_t v120 = (v120 + 1) & v130;
                unint64_t v121 = v120 >> 6;
                uint64_t v131 = v116 + 56;
                while (1)
                {
                  uint64_t v122 = *(void *)(v252 + 8 * v121);
                  uint64_t v123 = 1 << v120;
                  if ((v122 & (1 << v120)) == 0) {
                    break;
                  }
                  id v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v116 + 48)
                                                                                         + 8 * v120));
                  uint64_t v147 = v146;
                  if (v145 == static String._unconditionallyBridgeFromObjectiveC(_:)(v117) && v147 == v148) {
                    goto LABEL_146;
                  }
                  char v150 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (v150) {
                    goto LABEL_147;
                  }
                  unint64_t v120 = (v120 + 1) & v130;
                  unint64_t v121 = v120 >> 6;
                }
              }
            }
          }
          else
          {
            uint64_t v131 = v116 + 56;
          }
          *(void *)(v131 + 8 * v121) = v123 | v122;
          uint64_t v14 = (uint64_t)v273;
          *(void *)(*(void *)(v116 + 48) + 8 * v120) = v268;
          uint64_t v142 = *(void *)(v116 + 16);
          BOOL v42 = __OFADD__(v142, 1);
          uint64_t v143 = v142 + 1;
          if (v42) {
            goto LABEL_245;
          }
          *(void *)(v116 + 16) = v143;
LABEL_148:
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          uint64_t v151 = swift_bridgeObjectRetain();
          specialized _copyCollectionToContiguousArray<A>(_:)(v151);
          swift_release();
          uint64_t v152 = _ContiguousArrayBuffer._asCocoaArray()();
          *(void *)&long long v278 = 0;
          id v153 = objc_msgSend((id)v14, sel_resourceValuesForKeys_error_, v152, &v278);
          swift_unknownObjectRelease();
          char v154 = (void *)v278;
          if (!v153)
          {
            if (!(void)v278) {
              goto LABEL_232;
            }
            (id)v278;
            goto LABEL_235;
          }
          uint64_t v155 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v153);
          id v156 = v154;
          swift_release();
          swift_release();

          *(void *)&long long v278 = v155;
          *((void *)&v278 + 1) = v116;
          char v157 = URLResourceValues._get(_:)(v255);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v157 == 2)
          {
            __break(1u);
LABEL_251:
            __break(1u);
LABEL_252:
            __break(1u);
LABEL_253:
            __break(1u);
            goto LABEL_254;
          }
          if (v157)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *a1 = 2;
            swift_release();
            swift_release();

            return;
          }
          v261 = (void *)swift_allocObject();
          v261[4] = v249;
          uint64_t v158 = static _SetStorage.allocate(capacity:)();
          uint64_t v159 = (void *)v261[4];
          id v269 = (id)v14;
          swift_retain();
          swift_retain();
          id v160 = v249;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v159);
          Hasher.init(_seed:)();
          id v274 = v159;
          String.hash(into:)();
          Swift::Int v161 = Hasher._finalize()();
          swift_bridgeObjectRelease();
          uint64_t v162 = -1 << *(unsigned char *)(v158 + 32);
          unint64_t v163 = v161 & ~v162;
          unint64_t v164 = v163 >> 6;
          uint64_t v165 = v158 + 56;
          uint64_t v166 = *(void *)(v158 + 56 + 8 * (v163 >> 6));
          uint64_t v167 = 1 << v163;
          if (((1 << v163) & v166) == 0)
          {
LABEL_172:
            *(void *)(v165 + 8 * v164) = v167 | v166;
            *(void *)(*(void *)(v158 + 48) + 8 * v163) = v274;
            uint64_t v189 = *(void *)(v158 + 16);
            BOOL v42 = __OFADD__(v189, 1);
            uint64_t v190 = v189 + 1;
            if (v42)
            {
              __break(1u);
LABEL_248:
              __break(1u);
              goto LABEL_249;
            }
            *(void *)(v158 + 16) = v190;
            goto LABEL_174;
          }
          id v168 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v158 + 48) + 8 * v163));
          uint64_t v170 = v169;
          if (v168 != static String._unconditionallyBridgeFromObjectiveC(_:)(v159) || v170 != v171)
          {
            char v172 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v172) {
              goto LABEL_156;
            }
            uint64_t v173 = ~v162;
            unint64_t v163 = (v163 + 1) & ~v162;
            unint64_t v164 = v163 >> 6;
            uint64_t v166 = *(void *)(v165 + 8 * (v163 >> 6));
            uint64_t v167 = 1 << v163;
            if ((v166 & (1 << v163)) == 0) {
              goto LABEL_172;
            }
            id v174 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v158 + 48) + 8 * v163));
            uint64_t v176 = v175;
            if (v174 != static String._unconditionallyBridgeFromObjectiveC(_:)(v159) || v176 != v177)
            {
              char v178 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v178) {
                goto LABEL_156;
              }
              unint64_t v163 = (v163 + 1) & v173;
              unint64_t v164 = v163 >> 6;
              uint64_t v166 = *(void *)(v165 + 8 * (v163 >> 6));
              uint64_t v167 = 1 << v163;
              if ((v166 & (1 << v163)) == 0) {
                goto LABEL_172;
              }
              id v179 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v158 + 48) + 8 * v163));
              uint64_t v181 = v180;
              if (v179 != static String._unconditionallyBridgeFromObjectiveC(_:)(v159) || v181 != v182)
              {
                do
                {
                  char v183 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (v183) {
                    goto LABEL_156;
                  }
                  unint64_t v163 = (v163 + 1) & v173;
                  unint64_t v164 = v163 >> 6;
                  uint64_t v166 = *(void *)(v165 + 8 * (v163 >> 6));
                  uint64_t v167 = 1 << v163;
                  if ((v166 & (1 << v163)) == 0) {
                    goto LABEL_172;
                  }
                  id v184 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v158 + 48)
                                                                                         + 8 * v163));
                  uint64_t v186 = v185;
                }
                while (v184 != static String._unconditionallyBridgeFromObjectiveC(_:)(v159) || v186 != v187);
              }
            }
          }
          swift_bridgeObjectRelease_n();
LABEL_156:

LABEL_174:
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          uint64_t v191 = swift_bridgeObjectRetain();
          specialized _copyCollectionToContiguousArray<A>(_:)(v191);
          swift_release();
          uint64_t v192 = _ContiguousArrayBuffer._asCocoaArray()();
          *(void *)&long long v278 = 0;
          id v193 = objc_msgSend(v269, sel_resourceValuesForKeys_error_, v192, &v278);
          swift_unknownObjectRelease();
          uint64_t v194 = (void *)v278;
          if (!v193)
          {
            if ((void)v278)
            {
              (id)v278;
            }
            else
            {
              if (one-time initialization token for _nilObjCError != -1) {
                swift_once();
              }
              id v247 = (id)_nilObjCError;
            }
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release_n();
            swift_release_n();

            return;
          }
          uint64_t v195 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v193);
          id v196 = v194;
          swift_release();
          swift_release();

          v277 = (void *)v195;
          URLResourceValues.parentDirectory.getter(&v278);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v272 = (id)v278;
          if (!(void)v278) {
            goto LABEL_251;
          }
          uint64_t v256 = swift_allocObject();
          *(void *)(v256 + 32) = v258;
          uint64_t v197 = static _SetStorage.allocate(capacity:)();
          uint64_t v198 = *(void **)(v256 + 32);
          id v251 = v258;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v198);
          Hasher.init(_seed:)();
          id v262 = v198;
          String.hash(into:)();
          Swift::Int v199 = Hasher._finalize()();
          swift_bridgeObjectRelease();
          uint64_t v200 = -1 << *(unsigned char *)(v197 + 32);
          unint64_t v201 = v199 & ~v200;
          unint64_t v202 = v201 >> 6;
          uint64_t v203 = v197 + 56;
          uint64_t v204 = *(void *)(v197 + 56 + 8 * (v201 >> 6));
          uint64_t v205 = 1 << v201;
          if (((1 << v201) & v204) != 0)
          {
            id v206 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v197 + 48) + 8 * v201));
            uint64_t v208 = v207;
            if (v206 == static String._unconditionallyBridgeFromObjectiveC(_:)(v198) && v208 == v209) {
              goto LABEL_179;
            }
            char v210 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v210) {
              goto LABEL_181;
            }
            uint64_t v211 = ~v200;
            unint64_t v201 = (v201 + 1) & ~v200;
            unint64_t v202 = v201 >> 6;
            uint64_t v204 = *(void *)(v203 + 8 * (v201 >> 6));
            uint64_t v205 = 1 << v201;
            if ((v204 & (1 << v201)) != 0)
            {
              id v212 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v197 + 48) + 8 * v201));
              uint64_t v214 = v213;
              if (v212 == static String._unconditionallyBridgeFromObjectiveC(_:)(v198) && v214 == v215) {
                goto LABEL_179;
              }
              char v216 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v216) {
                goto LABEL_181;
              }
              unint64_t v201 = (v201 + 1) & v211;
              unint64_t v202 = v201 >> 6;
              uint64_t v204 = *(void *)(v203 + 8 * (v201 >> 6));
              uint64_t v205 = 1 << v201;
              if ((v204 & (1 << v201)) != 0)
              {
                id v217 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v197 + 48)
                                                                                       + 8 * v201));
                uint64_t v219 = v218;
                if (v217 == static String._unconditionallyBridgeFromObjectiveC(_:)(v198) && v219 == v220)
                {
LABEL_179:
                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  while (1)
                  {
                    char v221 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (v221) {
                      break;
                    }
                    unint64_t v201 = (v201 + 1) & v211;
                    unint64_t v202 = v201 >> 6;
                    uint64_t v204 = *(void *)(v203 + 8 * (v201 >> 6));
                    uint64_t v205 = 1 << v201;
                    if ((v204 & (1 << v201)) == 0) {
                      goto LABEL_197;
                    }
                    id v222 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v197 + 48)
                                                                                           + 8 * v201));
                    uint64_t v224 = v223;
                    if (v222 == static String._unconditionallyBridgeFromObjectiveC(_:)(v198) && v224 == v225) {
                      goto LABEL_179;
                    }
                  }
                }
LABEL_181:

                goto LABEL_199;
              }
            }
          }
LABEL_197:
          *(void *)(v203 + 8 * v202) = v205 | v204;
          *(void *)(*(void *)(v197 + 48) + 8 * v201) = v262;
          uint64_t v227 = *(void *)(v197 + 16);
          BOOL v42 = __OFADD__(v227, 1);
          uint64_t v228 = v227 + 1;
          if (v42) {
            goto LABEL_248;
          }
          *(void *)(v197 + 16) = v228;
LABEL_199:
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          uint64_t v229 = swift_bridgeObjectRetain();
          specialized _copyCollectionToContiguousArray<A>(_:)(v229);
          swift_release();
          uint64_t v230 = _ContiguousArrayBuffer._asCocoaArray()();
          *(void *)&long long v278 = 0;
          id v231 = objc_msgSend(v272, sel_resourceValuesForKeys_error_, v230, &v278);
          swift_unknownObjectRelease();
          uint64_t v232 = (void *)v278;
          if (!v231)
          {
            if ((void)v278)
            {
              (id)v278;
            }
            else
            {
              if (one-time initialization token for _nilObjCError != -1) {
                swift_once();
              }
              id v248 = (id)_nilObjCError;
            }
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_release();

            outlined consume of URL?(v272);
            return;
          }
          uint64_t v233 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v231);
          id v234 = v232;

          if (*(void *)(v233 + 16))
          {
            long long v235 = v251;
            id v236 = v251;
            uint64_t v237 = specialized __RawDictionaryStorage.find<A>(_:)(v236);
            uint64_t v238 = v265;
            if (v239)
            {
              outlined init with copy of Any(*(void *)(v233 + 56) + 32 * v237, (uint64_t)&v278);
            }
            else
            {
              long long v278 = 0u;
              long long v279 = 0u;
            }
          }
          else
          {
            long long v278 = 0u;
            long long v279 = 0u;
            uint64_t v238 = v265;
            long long v235 = v251;
          }
          if (swift_dynamicCast())
          {
            long long v240 = v277;
          }
          else
          {
            long long v240 = 0;
            v277 = 0;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v240) {
            goto LABEL_252;
          }
          if (*(void *)(v238 + 16))
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v241 = v235;
            uint64_t v242 = specialized __RawDictionaryStorage.find<A>(_:)(v241);
            if (v243)
            {
              outlined init with copy of Any(*(void *)(v238 + 56) + 32 * v242, (uint64_t)&v278);
            }
            else
            {
              long long v278 = 0u;
              long long v279 = 0u;
            }
          }
          else
          {
            long long v278 = 0u;
            long long v279 = 0u;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          if (swift_dynamicCast()) {
            long long v244 = v277;
          }
          else {
            long long v244 = 0;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v244) {
            goto LABEL_253;
          }
          unsigned __int8 v245 = objc_msgSend(v240, sel_isEqual_, v244);
          swift_unknownObjectRelease();
          if (v245)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *a1 = 0;
            swift_release();
            swift_release();

            outlined consume of URL?(v272);
            swift_unknownObjectRelease();
            return;
          }
          swift_unknownObjectRelease();
          swift_release();
          swift_release();
        }
      }
LABEL_257:
      __break(1u);
      return;
    }
LABEL_256:
    __break(1u);
    goto LABEL_257;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v50 = 1;
LABEL_92:
  *a1 = v50;
}

uint64_t _FileManagerImpl.getRelationship(_:of:in:toItemAt:)(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v5 = v4;
  v24[3] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v9 = *a4;
  uint64_t v10 = MEMORY[0x185309640](v4);
  if (!v10) {
    goto LABEL_22;
  }
  uint64_t v11 = (void *)v10;
  if (a3) {
    id v12 = 0;
  }
  else {
    id v12 = v9;
  }
  v24[0] = 0;
  id v13 = objc_msgSend(v11, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, a2, a3, v12, 0, v24);

  id v14 = v24[0];
  if (v13)
  {
    URL.init(reference:)(v13, v24);
    id v15 = v24[0];
    id v16 = v14;

    uint64_t v17 = (void *)MEMORY[0x185309640](v5);
    if (v17)
    {
      uint64_t v18 = v17;
      v24[0] = 0;
      unsigned __int8 v19 = objc_msgSend(v17, sel_getRelationship_ofDirectoryAtURL_toItemAtURL_error_, a1, v15, v9, v24);

      if (v19)
      {
        id v20 = v24[0];
      }
      else
      {
        if (v24[0])
        {
          v24[0];
        }
        else
        {
          if (one-time initialization token for _nilObjCError != -1) {
            swift_once();
          }
          id v23 = (id)_nilObjCError;
        }
        swift_willThrow();
      }

      swift_release();
      return swift_release();
    }
LABEL_22:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181F4B654);
  }
  if (v24[0])
  {
    v24[0];
  }
  else
  {
    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
    id v21 = (id)_nilObjCError;
  }
  return swift_willThrow();
}

uint64_t sub_181F4B87C()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t specialized AttributedString.Guts.getUniformValue<A>(in:key:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v152 = 0;
  long long v150 = 0u;
  long long v151 = 0u;
  long long v148 = 0u;
  long long v149 = 0u;
  uint64_t v4 = BigString.Index.utf8Offset.getter();
  uint64_t result = BigString.Index.utf8Offset.getter();
  char v6 = *(uint64_t **)(v1 + 64);
  uint64_t v7 = *(void *)(v2 + 80);
  if (v6) {
    uint64_t v8 = *(void *)(v2 + 80);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v4 < 0 || v8 < v4)
  {
LABEL_359:
    __break(1u);
    goto LABEL_360;
  }
  int64_t v9 = result;
  uint64_t v10 = *(void *)(v2 + 72);
  unint64_t v11 = *(void *)(v2 + 88);
  uint64_t v120 = v2;
  uint64_t v125 = v4;
  uint64_t v126 = result;
  uint64_t v118 = a1;
  *(void *)&long long v128 = v11;
  if (v6 && *((_WORD *)v6 + 8) && v4 < v7)
  {
    unint64_t v11 = *((unsigned __int8 *)v6 + 18);
    if (*((unsigned char *)v6 + 18))
    {
      swift_unknownObjectRetain_n();
      uint64_t result = swift_retain_n();
      unint64_t v12 = v4;
      uint64_t v13 = (uint64_t)v6;
      while (1)
      {
        unint64_t v16 = *(unsigned __int16 *)(v13 + 16);
        if (!*(_WORD *)(v13 + 16)) {
          goto LABEL_12;
        }
        uint64_t v17 = *(void *)(v13 + 40);
        BOOL v18 = __OFSUB__(v12, v17);
        unint64_t v19 = v12 - v17;
        if (v18) {
          goto LABEL_342;
        }
        if (__OFADD__(v19, 1))
        {
LABEL_343:
          __break(1u);
LABEL_344:
          __break(1u);
LABEL_345:
          __break(1u);
LABEL_346:
          __break(1u);
LABEL_347:
          __break(1u);
LABEL_348:
          __break(1u);
LABEL_349:
          __break(1u);
LABEL_350:
          __break(1u);
LABEL_351:
          __break(1u);
LABEL_352:
          __break(1u);
LABEL_353:
          __break(1u);
          goto LABEL_354;
        }
        if ((uint64_t)(v19 + 1) <= 0)
        {
          unint64_t v16 = 0;
        }
        else
        {
          if (v16 == 1) {
            goto LABEL_11;
          }
          uint64_t v20 = *(void *)(v13 + 64);
          unint64_t v12 = v19 - v20;
          if (__OFSUB__(v19, v20)) {
            goto LABEL_357;
          }
          if (__OFADD__(v12, 1))
          {
LABEL_358:
            __break(1u);
            goto LABEL_359;
          }
          if ((uint64_t)(v12 + 1) < 1)
          {
            unint64_t v16 = 1;
            unint64_t v12 = v19;
          }
          else
          {
            if (v16 == 2) {
              goto LABEL_12;
            }
            uint64_t v21 = *(void *)(v13 + 88);
            BOOL v18 = __OFSUB__(v12, v21);
            unint64_t v19 = v12 - v21;
            if (v18) {
              goto LABEL_372;
            }
            if (__OFADD__(v19, 1)) {
              goto LABEL_373;
            }
            if ((uint64_t)(v19 + 1) >= 1)
            {
              if (v16 != 3)
              {
                uint64_t v22 = 3;
                if (v16 > 3) {
                  uint64_t v22 = *(unsigned __int16 *)(v13 + 16);
                }
                id v23 = (void *)(v13 + 112);
                uint64_t v24 = 3;
                while (1)
                {
                  if (v22 == v24) {
                    goto LABEL_349;
                  }
                  unint64_t v12 = v19 - *v23;
                  if (__OFSUB__(v19, *v23)) {
                    goto LABEL_350;
                  }
                  if (__OFADD__(v12, 1)) {
                    goto LABEL_351;
                  }
                  if ((uint64_t)(v12 + 1) < 1) {
                    break;
                  }
                  ++v24;
                  v23 += 3;
                  unint64_t v19 = v12;
                  if (v16 == v24) {
                    goto LABEL_12;
                  }
                }
                unint64_t v16 = v24;
                unint64_t v12 = v19;
                goto LABEL_13;
              }
LABEL_11:
              unint64_t v12 = v19;
LABEL_12:
              if (v12) {
                goto LABEL_341;
              }
              goto LABEL_13;
            }
            unint64_t v16 = 2;
          }
        }
LABEL_13:
        char v14 = (4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C;
        unint64_t v11 = ((-15 << v14) - 1) & v11 | (v16 << v14);
        uint64_t v15 = *(void *)(v13 + 24 + 24 * v16);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v13 = v15;
        if (!*(unsigned char *)(v15 + 18)) {
          goto LABEL_43;
        }
      }
    }
    swift_unknownObjectRetain_n();
    uint64_t result = swift_retain_n();
    unint64_t v12 = v4;
    uint64_t v15 = (uint64_t)v6;
LABEL_43:
    unint64_t v26 = *(unsigned __int16 *)(v15 + 16);
    if (!*(_WORD *)(v15 + 16))
    {
      uint64_t v2 = v120;
      goto LABEL_50;
    }
    uint64_t v27 = *(void *)(v15 + 24);
    BOOL v18 = __OFSUB__(v12, v27);
    unint64_t v28 = v12 - v27;
    uint64_t v2 = v120;
    if (!v18)
    {
      if (!__OFADD__(v28, 1))
      {
        if ((uint64_t)(v28 + 1) <= 0)
        {
LABEL_52:
          unint64_t v26 = 0;
          goto LABEL_74;
        }
        if (v26 == 1) {
          goto LABEL_48;
        }
        uint64_t v29 = *(void *)(v15 + 48);
        unint64_t v12 = v28 - v29;
        if (__OFSUB__(v28, v29)) {
          goto LABEL_390;
        }
        if (__OFADD__(v12, 1))
        {
LABEL_391:
          __break(1u);
LABEL_392:
          __break(1u);
LABEL_393:
          __break(1u);
LABEL_394:
          __break(1u);
          goto LABEL_395;
        }
        if ((uint64_t)(v12 + 1) < 1)
        {
          unint64_t v26 = 1;
          goto LABEL_72;
        }
        if (v26 == 2) {
          goto LABEL_50;
        }
        uint64_t v30 = *(void *)(v15 + 72);
        BOOL v18 = __OFSUB__(v12, v30);
        unint64_t v28 = v12 - v30;
        if (v18) {
          goto LABEL_394;
        }
        if (__OFADD__(v28, 1))
        {
LABEL_395:
          __break(1u);
LABEL_396:
          __break(1u);
LABEL_397:
          __break(1u);
          return result;
        }
        if ((uint64_t)(v28 + 1) < 1)
        {
          unint64_t v26 = 2;
          goto LABEL_74;
        }
        if (v26 == 3)
        {
LABEL_48:
          unint64_t v12 = v28;
LABEL_50:
          if (!v12) {
            goto LABEL_74;
          }
          __break(1u);
          goto LABEL_52;
        }
        uint64_t v31 = 3;
        if (v26 <= 3) {
          uint64_t v32 = 3;
        }
        else {
          uint64_t v32 = *(unsigned __int16 *)(v15 + 16);
        }
        uint64_t v33 = (void *)(v15 + 96);
        while (v32 != v31)
        {
          unint64_t v12 = v28 - *v33;
          if (__OFSUB__(v28, *v33)) {
            goto LABEL_383;
          }
          if (__OFADD__(v12, 1)) {
            goto LABEL_384;
          }
          if ((uint64_t)(v12 + 1) < 1) {
            goto LABEL_336;
          }
          ++v31;
          v33 += 3;
          unint64_t v28 = v12;
          if (v26 == v31) {
            goto LABEL_50;
          }
        }
        goto LABEL_382;
      }
LABEL_379:
      __break(1u);
LABEL_380:
      __break(1u);
LABEL_381:
      __break(1u);
LABEL_382:
      __break(1u);
LABEL_383:
      __break(1u);
LABEL_384:
      __break(1u);
LABEL_385:
      __break(1u);
LABEL_386:
      __break(1u);
      goto LABEL_387;
    }
LABEL_378:
    __break(1u);
    goto LABEL_379;
  }
  swift_retain_n();
  unint64_t v25 = swift_unknownObjectRetain_n();
  *((void *)&v128 + 1) = specialized Rope._endPath.getter(v25);
  swift_unknownObjectRelease();
  uint64_t v15 = 0;
  unint64_t v12 = 0;
  if (!v6) {
    goto LABEL_75;
  }
LABEL_41:
  swift_unknownObjectRetain();
  uint64_t v127 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v128, *((unint64_t *)&v128 + 1), v15, (uint64_t)v6, v10);
  swift_release();
  uint64_t result = swift_unknownObjectRelease_n();
LABEL_76:
  uint64_t v10 = v125 - v12;
  if (__OFSUB__(v125, v12))
  {
LABEL_360:
    __break(1u);
LABEL_361:
    __break(1u);
LABEL_362:
    __break(1u);
LABEL_363:
    __break(1u);
LABEL_364:
    __break(1u);
LABEL_365:
    __break(1u);
LABEL_366:
    __break(1u);
LABEL_367:
    __break(1u);
LABEL_368:
    __break(1u);
LABEL_369:
    __break(1u);
LABEL_370:
    __break(1u);
LABEL_371:
    __break(1u);
LABEL_372:
    __break(1u);
LABEL_373:
    __break(1u);
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
LABEL_377:
    __break(1u);
    goto LABEL_378;
  }
  int64_t v34 = v125;
  uint64_t v122 = 0x80000001823AA0D0;
  uint64_t v123 = (long long *)((char *)&v136 + 8);
  while (1)
  {
    uint64_t v36 = *(void *)(v2 + 64);
    if (v34 != v9)
    {
      if (v36) {
        int64_t v43 = *(void *)(v2 + 80);
      }
      else {
        int64_t v43 = 0;
      }
      goto LABEL_145;
    }
    if (v36) {
      int64_t v37 = *(void *)(v2 + 80);
    }
    else {
      int64_t v37 = 0;
    }
    if (v37 < v34) {
      goto LABEL_339;
    }
    if (v36)
    {
      uint64_t v38 = *(void *)(v2 + 88);
      uint64_t v39 = *(unsigned __int16 *)(v36 + 16);
      unint64_t v11 = *(unsigned __int8 *)(v36 + 18);
      BOOL v40 = v34 >= *(void *)(v2 + 80) || v39 == 0;
      id v124 = *(uint64_t **)(v2 + 72);
      uint64_t v121 = v38;
      if (v40)
      {
        char v6 = (uint64_t *)(((-15 << ((4 * v11 + 8) & 0x3C)) - 1) & v11 | (unint64_t)(v39 << ((4 * v11 + 8) & 0x3C)));
        swift_unknownObjectRetain();
        uint64_t v41 = 0;
        uint64_t v42 = 0;
LABEL_142:
        swift_unknownObjectRetain();
        specialized Rope._Node.distanceFromStart<A>(to:in:)(v121, (unint64_t)v6, v42, v36, (uint64_t)v124);
        uint64_t result = swift_unknownObjectRelease_n();
        int64_t v34 = v125;
        goto LABEL_143;
      }
      if (v11)
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v41 = v34;
        char v6 = (uint64_t *)v36;
        while (1)
        {
          unint64_t v28 = *((unsigned __int16 *)v6 + 8);
          if (*((_WORD *)v6 + 8))
          {
            uint64_t v45 = v6[5];
            BOOL v18 = __OFSUB__(v41, v45);
            uint64_t v31 = v41 - v45;
            if (v18) {
              goto LABEL_321;
            }
            if (__OFADD__(v31, 1)) {
              goto LABEL_322;
            }
            if (v31 + 1 <= 0)
            {
              unint64_t v28 = 0;
              goto LABEL_101;
            }
            if (v28 != 1)
            {
              uint64_t v46 = v6[8];
              uint64_t v41 = v31 - v46;
              if (__OFSUB__(v31, v46))
              {
                __break(1u);
LABEL_338:
                __break(1u);
LABEL_339:
                __break(1u);
LABEL_340:
                __break(1u);
LABEL_341:
                __break(1u);
LABEL_342:
                __break(1u);
                goto LABEL_343;
              }
              if (__OFADD__(v41, 1)) {
                goto LABEL_338;
              }
              if (v41 + 1 < 1)
              {
                unint64_t v28 = 1;
                uint64_t v41 = v31;
                goto LABEL_101;
              }
              if (v28 == 2) {
                goto LABEL_100;
              }
              uint64_t v47 = v6[11];
              BOOL v18 = __OFSUB__(v41, v47);
              uint64_t v31 = v41 - v47;
              if (v18) {
                goto LABEL_352;
              }
              if (__OFADD__(v31, 1)) {
                goto LABEL_353;
              }
              if (v31 + 1 < 1)
              {
                unint64_t v28 = 2;
                goto LABEL_101;
              }
              if (v28 != 3)
              {
                uint64_t v48 = 3;
                if (v28 > 3) {
                  uint64_t v48 = *((unsigned __int16 *)v6 + 8);
                }
                char v49 = v6 + 14;
                uint64_t v50 = 3;
                while (1)
                {
                  if (v48 == v50) {
                    goto LABEL_333;
                  }
                  uint64_t v41 = v31 - *v49;
                  if (__OFSUB__(v31, *v49)) {
                    goto LABEL_334;
                  }
                  if (__OFADD__(v41, 1)) {
                    goto LABEL_335;
                  }
                  if (v41 + 1 < 1) {
                    break;
                  }
                  ++v50;
                  v49 += 3;
                  uint64_t v31 = v41;
                  if (v28 == v50) {
                    goto LABEL_100;
                  }
                }
                unint64_t v28 = v50;
                uint64_t v41 = v31;
                goto LABEL_101;
              }
            }
            uint64_t v41 = v31;
          }
LABEL_100:
          if (v41)
          {
            __break(1u);
LABEL_321:
            __break(1u);
LABEL_322:
            __break(1u);
LABEL_323:
            __break(1u);
LABEL_324:
            __break(1u);
            goto LABEL_325;
          }
LABEL_101:
          char v44 = (4 * *((unsigned char *)v6 + 18) + 8) & 0x3C;
          unint64_t v11 = ((-15 << v44) - 1) & v11 | (v28 << v44);
          uint64_t v42 = v6[3 * v28 + 3];
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          char v6 = (uint64_t *)v42;
          if (!*(unsigned char *)(v42 + 18)) {
            goto LABEL_129;
          }
        }
      }
      uint64_t result = swift_unknownObjectRetain_n();
      unint64_t v11 = 0;
      uint64_t v41 = v34;
      uint64_t v42 = v36;
LABEL_129:
      unint64_t v51 = *(unsigned __int16 *)(v42 + 16);
      if (!*(_WORD *)(v42 + 16)) {
        goto LABEL_140;
      }
      uint64_t v52 = *(void *)(v42 + 24);
      BOOL v18 = __OFSUB__(v41, v52);
      uint64_t v53 = v41 - v52;
      if (v18) {
        goto LABEL_362;
      }
      if (__OFADD__(v53, 1)) {
        goto LABEL_363;
      }
      if (v53 + 1 <= 0)
      {
        unint64_t v51 = 0;
      }
      else
      {
        if (v51 == 1)
        {
LABEL_134:
          uint64_t v41 = v53;
          goto LABEL_140;
        }
        uint64_t v54 = *(void *)(v42 + 48);
        uint64_t v41 = v53 - v54;
        if (__OFSUB__(v53, v54)) {
          goto LABEL_374;
        }
        if (__OFADD__(v41, 1)) {
          goto LABEL_375;
        }
        if (v41 + 1 < 1)
        {
          unint64_t v51 = 1;
          uint64_t v41 = v53;
        }
        else
        {
          if (v51 == 2)
          {
LABEL_140:
            if (v41) {
              goto LABEL_361;
            }
            goto LABEL_141;
          }
          uint64_t v95 = *(void *)(v42 + 72);
          BOOL v18 = __OFSUB__(v41, v95);
          uint64_t v53 = v41 - v95;
          if (v18) {
            goto LABEL_385;
          }
          if (__OFADD__(v53, 1)) {
            goto LABEL_386;
          }
          if (v53 + 1 < 1)
          {
            unint64_t v51 = 2;
          }
          else
          {
            if (v51 == 3) {
              goto LABEL_134;
            }
            uint64_t v96 = 3;
            if (v51 > 3) {
              uint64_t v96 = *(unsigned __int16 *)(v42 + 16);
            }
            uint64_t v97 = (void *)(v42 + 96);
            uint64_t v98 = 3;
            while (1)
            {
              if (v96 == v98) {
                goto LABEL_368;
              }
              uint64_t v41 = v53 - *v97;
              if (__OFSUB__(v53, *v97)) {
                goto LABEL_369;
              }
              if (__OFADD__(v41, 1)) {
                goto LABEL_370;
              }
              if (v41 + 1 < 1) {
                break;
              }
              ++v98;
              v97 += 3;
              uint64_t v53 = v41;
              if (v51 == v98) {
                goto LABEL_140;
              }
            }
            unint64_t v51 = v98;
            uint64_t v41 = v53;
          }
        }
      }
LABEL_141:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      char v6 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFF0FFLL | (v51 << 8));
      goto LABEL_142;
    }
    uint64_t v41 = 0;
LABEL_143:
    int64_t v43 = v34 - v41;
    if (__OFSUB__(v34, v41)) {
      goto LABEL_340;
    }
    int64_t v9 = v126;
LABEL_145:
    if (v10 == v43)
    {
      swift_release();
      return outlined init with take of AttributedString._AttributeValue?((uint64_t)&v148, v118);
    }
    unint64_t v28 = *(void *)(v2 + 88);
    uint64_t v31 = v128;
    if ((void)v128 != v28) {
      goto LABEL_323;
    }
    if (v15)
    {
      id v55 = (void *)(v15 + 24 * ((*((void *)&v128 + 1) >> ((4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C)) & 0xFLL));
      char v6 = (uint64_t *)v55[4];
      uint64_t v56 = v55[5];
      unint64_t v11 = v55[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      id v124 = (uint64_t *)v56;
    }
    else
    {
      uint64_t v57 = *(void *)(v2 + 64);
      swift_unknownObjectRetain();
      unint64_t v58 = *((void *)&v128 + 1);
      specialized Rope._Node.subscript.getter(*((unint64_t *)&v128 + 1), v57);
      char v6 = v59;
      uint64_t v61 = v60;
      uint64_t result = swift_unknownObjectRelease();
      if ((void)v128 != *(void *)(v2 + 88)) {
        goto LABEL_344;
      }
      id v124 = (uint64_t *)v61;
      uint64_t v62 = *(void *)(v2 + 64);
      swift_unknownObjectRetain();
      unint64_t v11 = specialized Rope._Node.subscript.getter(v58, v62);
      int64_t v34 = v125;
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v28 = v10 + v11;
    if (__OFADD__(v10, v11)) {
      goto LABEL_324;
    }
    if (v9 >= v10) {
      uint64_t v31 = v10;
    }
    else {
      uint64_t v31 = v9;
    }
    if (v10 < v34) {
      uint64_t v31 = v34;
    }
    if ((uint64_t)v28 <= v34) {
      unint64_t v63 = v34;
    }
    else {
      unint64_t v63 = v10 + v11;
    }
    if (v9 >= (uint64_t)v28) {
      unint64_t v28 = v63;
    }
    else {
      unint64_t v28 = v9;
    }
    if (v31 == v28)
    {
LABEL_325:
      __break(1u);
LABEL_326:
      __break(1u);
LABEL_327:
      __break(1u);
LABEL_328:
      __break(1u);
LABEL_329:
      __break(1u);
LABEL_330:
      __break(1u);
LABEL_331:
      __break(1u);
LABEL_332:
      __break(1u);
LABEL_333:
      __break(1u);
LABEL_334:
      __break(1u);
LABEL_335:
      __break(1u);
LABEL_336:
      unint64_t v26 = v31;
LABEL_72:
      unint64_t v12 = v28;
LABEL_74:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      *((void *)&v128 + 1) = v11 & 0xFFFFFFFFFFFFF0FFLL | (v26 << 8);
      int64_t v9 = v126;
      if (v6) {
        goto LABEL_41;
      }
LABEL_75:
      uint64_t result = swift_release();
      uint64_t v127 = 0;
      goto LABEL_76;
    }
    uint64_t v64 = *(void *)(v2 + 64);
    unint64_t v11 = *(void *)(v2 + 72);
    unint64_t v28 = *(void *)(v2 + 88);
    unint64_t v65 = *((void *)&v128 + 1);
    uint64_t v31 = v128;
    long long v134 = v128;
    *(void *)&long long v135 = v15;
    if (__OFADD__(v127, 1)) {
      goto LABEL_326;
    }
    if ((void)v128 != v28) {
      goto LABEL_327;
    }
    ++v127;
    if (v15)
    {
      unint64_t v11 = *(void *)(v15 + 24 * ((*((void *)&v128 + 1) >> ((4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      swift_retain();
      swift_unknownObjectRetain();
      unint64_t v11 = specialized Rope._Node.subscript.getter(v65, v64);
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v18 = __OFADD__(v10, v11);
    v10 += v11;
    if (v18) {
      goto LABEL_328;
    }
    if (v64)
    {
      unint64_t v66 = ((-15 << ((4 * *(unsigned char *)(v64 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v64 + 18) | ((unint64_t)*(unsigned __int16 *)(v64 + 16) << ((4 * *(unsigned char *)(v64 + 18) + 8) & 0x3C));
      uint64_t result = swift_unknownObjectRetain();
    }
    else
    {
      unint64_t v66 = 0;
    }
    int64_t v34 = v125;
    if (*((void *)&v128 + 1) >= v66) {
      goto LABEL_329;
    }
    if (v15)
    {
      char v67 = (4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C;
      unint64_t v68 = ((*((void *)&v128 + 1) >> v67) & 0xFLL) + 1;
      if (v68 < *(unsigned __int16 *)(v15 + 16))
      {
        *((void *)&v128 + 1) = (v68 << v67) | ((-15 << v67) - 1) & *((void *)&v128 + 1);
        uint64_t result = swift_unknownObjectRelease_n();
        int64_t v9 = v126;
        if (v10 < v126) {
          goto LABEL_236;
        }
        goto LABEL_177;
      }
    }
    uint64_t v15 = *(unsigned __int8 *)(v64 + 18);
    char v72 = (4 * v15 + 8) & 0x3C;
    *(void *)&long long v143 = (*((void *)&v128 + 1) >> v72) & 0xFLL;
    int64_t v9 = v126;
    if (v15)
    {
      unint64_t v11 = v64 + 24;
      swift_unknownObjectRetain();
      uint64_t v15 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v64 + 24, (uint64_t *)&v143, (uint64_t)&v134, v64, v15);
      uint64_t result = swift_unknownObjectRelease();
      if (v15)
      {
        uint64_t result = swift_unknownObjectRelease_n();
        *((void *)&v128 + 1) = *((void *)&v134 + 1);
        if (v10 < v9) {
          goto LABEL_236;
        }
        goto LABEL_177;
      }
    }
    else
    {
      unint64_t v82 = ((*((void *)&v128 + 1) >> v72) & 0xFLL) + 1;
      if (v82 < *(unsigned __int16 *)(v64 + 16))
      {
        *((void *)&v128 + 1) = (v82 << v72) | ((-15 << v72) - 1) & *((void *)&v128 + 1);
        *((void *)&v134 + 1) = *((void *)&v128 + 1);
        uint64_t result = swift_unknownObjectRelease_n();
        *(void *)&long long v135 = v64;
        if (v10 < v9) {
          goto LABEL_236;
        }
        goto LABEL_177;
      }
    }
    if (v64)
    {
      uint64_t v15 = *(unsigned __int8 *)(v64 + 18);
      uint64_t v83 = *(unsigned __int16 *)(v64 + 16);
      uint64_t result = swift_unknownObjectRelease_n();
      char v84 = (4 * v15 + 8) & 0x3C;
      uint64_t v85 = ((-15 << v84) - 1) & v15;
      uint64_t v86 = v83 << v84;
      int64_t v9 = v126;
      uint64_t v87 = v85 | v86;
    }
    else
    {
      uint64_t v87 = 0;
    }
    *(void *)&long long v134 = v128;
    *((void *)&v134 + 1) = v87;
    *((void *)&v128 + 1) = v87;
    *(void *)&long long v135 = 0;
    if (v10 < v9)
    {
LABEL_236:
      *(void *)&long long v128 = v134;
      uint64_t v15 = v135;
      swift_release();
      if (!v6[2]) {
        goto LABEL_301;
      }
      goto LABEL_299;
    }
LABEL_177:
    uint64_t v69 = *(void *)(v2 + 64);
    if (v34 == v9)
    {
      uint64_t v10 = *(void *)(v2 + 80);
      if (v69) {
        int64_t v70 = *(void *)(v2 + 80);
      }
      else {
        int64_t v70 = 0;
      }
      if (v70 < v34) {
        goto LABEL_347;
      }
      *(void *)&long long v128 = *(void *)(v2 + 88);
      if (!v69)
      {
        uint64_t result = swift_release();
        uint64_t v71 = 0;
        uint64_t v15 = 0;
        *((void *)&v128 + 1) = 0;
        uint64_t v127 = 0;
        goto LABEL_297;
      }
      uint64_t v127 = *(void *)(v2 + 72);
      unint64_t v11 = *(unsigned __int8 *)(v69 + 18);
      if (v34 >= v10 || !*(_WORD *)(v69 + 16))
      {
        unint64_t v11 = ((-15 << ((4 * v11 + 8) & 0x3C)) - 1) & v11 | ((unint64_t)*(unsigned __int16 *)(v69 + 16) << ((4 * v11 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v71 = 0;
        uint64_t v15 = 0;
LABEL_296:
        swift_unknownObjectRetain();
        *((void *)&v128 + 1) = v11;
        uint64_t v127 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v128, v11, v15, v69, v127);
        swift_release();
        uint64_t result = swift_unknownObjectRelease_n();
LABEL_297:
        uint64_t v10 = v34 - v71;
        if (__OFSUB__(v34, v71)) {
          goto LABEL_348;
        }
        if (!v6[2]) {
          goto LABEL_301;
        }
        goto LABEL_299;
      }
      if (*(unsigned char *)(v69 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v71 = v34;
        uint64_t v2 = v69;
        while (1)
        {
          unint64_t v28 = *(unsigned __int16 *)(v2 + 16);
          if (!*(_WORD *)(v2 + 16)) {
            goto LABEL_192;
          }
          uint64_t v74 = *(void *)(v2 + 40);
          BOOL v18 = __OFSUB__(v71, v74);
          uint64_t v31 = v71 - v74;
          if (v18) {
            goto LABEL_331;
          }
          if (__OFADD__(v31, 1)) {
            goto LABEL_332;
          }
          if (v31 + 1 <= 0)
          {
            unint64_t v28 = 0;
          }
          else
          {
            if (v28 == 1) {
              goto LABEL_191;
            }
            uint64_t v75 = *(void *)(v2 + 64);
            uint64_t v71 = v31 - v75;
            if (__OFSUB__(v31, v75)) {
              goto LABEL_345;
            }
            if (__OFADD__(v71, 1)) {
              goto LABEL_346;
            }
            if (v71 + 1 < 1)
            {
              unint64_t v28 = 1;
              uint64_t v71 = v31;
            }
            else
            {
              if (v28 == 2) {
                goto LABEL_192;
              }
              uint64_t v76 = *(void *)(v2 + 88);
              uint64_t v77 = v71 - v76;
              if (__OFSUB__(v71, v76)) {
                goto LABEL_364;
              }
              uint64_t v31 = v77 + 1;
              if (__OFADD__(v77, 1)) {
                goto LABEL_365;
              }
              if (v31 < 1)
              {
                unint64_t v28 = 2;
              }
              else
              {
                if (v28 == 3)
                {
                  uint64_t v71 = v77;
                  goto LABEL_192;
                }
                uint64_t v78 = *(void *)(v2 + 112);
                BOOL v18 = __OFSUB__(v77, v78);
                uint64_t v31 = v77 - v78;
                if (v18) {
                  goto LABEL_376;
                }
                if (__OFADD__(v31, 1)) {
                  goto LABEL_377;
                }
                if (v31 + 1 >= 1)
                {
                  if (v28 != 4)
                  {
                    uint64_t v79 = 4;
                    if (v28 > 4) {
                      uint64_t v79 = *(unsigned __int16 *)(v2 + 16);
                    }
                    uint64_t v80 = (void *)(v2 + 136);
                    uint64_t v81 = 4;
                    while (v79 != v81)
                    {
                      uint64_t v71 = v31 - *v80;
                      if (__OFSUB__(v31, *v80)) {
                        goto LABEL_355;
                      }
                      if (__OFADD__(v71, 1)) {
                        goto LABEL_356;
                      }
                      if (v71 + 1 < 1)
                      {
                        unint64_t v28 = v81;
                        uint64_t v71 = v31;
                        goto LABEL_193;
                      }
                      ++v81;
                      v80 += 3;
                      uint64_t v31 = v71;
                      if (v28 == v81) {
                        goto LABEL_192;
                      }
                    }
LABEL_354:
                    __break(1u);
LABEL_355:
                    __break(1u);
LABEL_356:
                    __break(1u);
LABEL_357:
                    __break(1u);
                    goto LABEL_358;
                  }
LABEL_191:
                  uint64_t v71 = v31;
LABEL_192:
                  if (v71) {
                    goto LABEL_330;
                  }
                  goto LABEL_193;
                }
                unint64_t v28 = 3;
                uint64_t v71 = v77;
              }
            }
          }
LABEL_193:
          char v73 = (4 * *(unsigned char *)(v2 + 18) + 8) & 0x3C;
          unint64_t v11 = ((-15 << v73) - 1) & v11 | (v28 << v73);
          uint64_t v15 = *(void *)(v2 + 24 + 24 * v28);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v2 = v15;
          if (!*(unsigned char *)(v15 + 18)) {
            goto LABEL_243;
          }
        }
      }
      uint64_t result = swift_unknownObjectRetain_n();
      unint64_t v11 = 0;
      uint64_t v71 = v34;
      uint64_t v15 = v69;
LABEL_243:
      unint64_t v91 = *(unsigned __int16 *)(v15 + 16);
      if (!*(_WORD *)(v15 + 16))
      {
        uint64_t v93 = v71;
        uint64_t v2 = v120;
        goto LABEL_254;
      }
      uint64_t v92 = *(void *)(v15 + 24);
      BOOL v18 = __OFSUB__(v71, v92);
      uint64_t v93 = v71 - v92;
      uint64_t v2 = v120;
      if (v18) {
        goto LABEL_367;
      }
      if (__OFADD__(v93, 1)) {
        goto LABEL_371;
      }
      if (v93 + 1 <= 0)
      {
        unint64_t v91 = 0;
      }
      else
      {
        if (v91 == 1)
        {
LABEL_254:
          if (v93) {
            goto LABEL_366;
          }
          uint64_t v71 = 0;
          goto LABEL_295;
        }
        uint64_t v94 = *(void *)(v15 + 48);
        uint64_t v71 = v93 - v94;
        if (__OFSUB__(v93, v94)) {
          goto LABEL_380;
        }
        if (__OFADD__(v71, 1)) {
          goto LABEL_381;
        }
        if (v71 + 1 < 1)
        {
          unint64_t v91 = 1;
          uint64_t v71 = v93;
        }
        else
        {
          if (v91 == 2)
          {
LABEL_252:
            uint64_t v93 = v71;
            goto LABEL_254;
          }
          uint64_t v99 = *(void *)(v15 + 72);
          BOOL v18 = __OFSUB__(v71, v99);
          uint64_t v93 = v71 - v99;
          if (v18) {
            goto LABEL_392;
          }
          if (__OFADD__(v93, 1)) {
            goto LABEL_393;
          }
          if (v93 + 1 < 1)
          {
            unint64_t v91 = 2;
          }
          else
          {
            if (v91 == 3) {
              goto LABEL_254;
            }
            uint64_t v100 = *(void *)(v15 + 96);
            uint64_t v71 = v93 - v100;
            if (__OFSUB__(v93, v100)) {
              goto LABEL_396;
            }
            if (__OFADD__(v71, 1)) {
              goto LABEL_397;
            }
            if (v71 + 1 >= 1)
            {
              if (v91 != 4)
              {
                if (v91 <= 4) {
                  uint64_t v101 = 4;
                }
                else {
                  uint64_t v101 = *(unsigned __int16 *)(v15 + 16);
                }
                uint64_t v102 = (void *)(v15 + 120);
                uint64_t v103 = 4;
                while (v101 != v103)
                {
                  uint64_t v93 = v71 - *v102;
                  if (__OFSUB__(v71, *v102)) {
                    goto LABEL_388;
                  }
                  if (__OFADD__(v93, 1)) {
                    goto LABEL_389;
                  }
                  if (v93 + 1 < 1)
                  {
                    unint64_t v91 = v103;
                    goto LABEL_295;
                  }
                  ++v103;
                  v102 += 3;
                  uint64_t v71 = v93;
                  if (v91 == v103) {
                    goto LABEL_254;
                  }
                }
LABEL_387:
                __break(1u);
LABEL_388:
                __break(1u);
LABEL_389:
                __break(1u);
LABEL_390:
                __break(1u);
                goto LABEL_391;
              }
              goto LABEL_252;
            }
            unint64_t v91 = 3;
            uint64_t v71 = v93;
          }
        }
      }
LABEL_295:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v11 = v11 & 0xFFFFFFFFFFFFF0FFLL | (v91 << 8);
      int64_t v9 = v126;
      goto LABEL_296;
    }
    *(void *)&long long v128 = *(void *)(v2 + 88);
    if (v69)
    {
      uint64_t v10 = *(void *)(v2 + 80);
      uint64_t v127 = *(void *)(v2 + 72);
      int v88 = *(unsigned __int8 *)(v69 + 18);
      unint64_t v11 = *(unsigned __int16 *)(v69 + 16);
      swift_release();
      uint64_t v15 = 0;
      char v89 = (4 * v88 + 8) & 0x3C;
      uint64_t v90 = ((-15 << v89) - 1) & v88;
      int64_t v9 = v126;
      *((void *)&v128 + 1) = v90 | (v11 << v89);
      if (!v6[2]) {
        goto LABEL_301;
      }
    }
    else
    {
      swift_release();
      *((void *)&v128 + 1) = 0;
      uint64_t v15 = 0;
      uint64_t v127 = 0;
      uint64_t v10 = 0;
      if (!v6[2]) {
        goto LABEL_301;
      }
    }
LABEL_299:
    unint64_t v104 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000002CLL, v122);
    if (v105)
    {
      outlined init with copy of AttributedString._AttributeValue(v6[7] + 72 * v104, (uint64_t)&v134);
      goto LABEL_302;
    }
LABEL_301:
    uint64_t v138 = 0;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v135 = 0u;
    long long v134 = 0u;
LABEL_302:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*((void *)&v135 + 1))
    {
      swift_release();
      outlined destroy of Any?((uint64_t)&v148, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = outlined destroy of Any?((uint64_t)&v134, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_319;
    }
    long long v145 = v136;
    long long v146 = v137;
    uint64_t v147 = v138;
    long long v143 = v134;
    long long v144 = v135;
    char v6 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v148, (uint64_t)&v134, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!*((void *)&v135 + 1))
    {
      outlined destroy of Any?((uint64_t)&v148, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      char v35 = &v134;
LABEL_79:
      uint64_t result = outlined destroy of Any?((uint64_t)v35, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_80;
    }
    v141[2] = v136;
    void v141[3] = v137;
    uint64_t v142 = v138;
    v141[0] = v134;
    v141[1] = v135;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v143, (uint64_t)v140);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v141, (uint64_t)v139);
    unint64_t v11 = (unint64_t)&demangling cache variable for type metadata for (Hashable & Sendable)?;
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v140, (uint64_t)&v134, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v139, (uint64_t)v123, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!*((void *)&v135 + 1))
    {
      if (v138)
      {
        outlined destroy of Any?((uint64_t)v123, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        goto LABEL_317;
      }
      outlined destroy of Any?((uint64_t)v139, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v140, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v141);
      char v35 = &v148;
      goto LABEL_79;
    }
    if (!v138) {
      break;
    }
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v134, (uint64_t)v131);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v123, (uint64_t)v130);
    uint64_t v106 = v132;
    uint64_t v121 = v133;
    uint64_t v119 = __swift_project_boxed_opaque_existential_1(v131, v132);
    id v124 = &v117;
    uint64_t v107 = *(void *)(v106 - 8);
    MEMORY[0x1F4188790](v119);
    id v109 = (char *)&v117 - ((v108 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v130, (uint64_t)&v129);
    uint64_t v110 = type metadata accessor for Optional();
    uint64_t v111 = *(void *)(v110 - 8);
    MEMORY[0x1F4188790](v110);
    char v113 = (char *)&v117 - v112;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    int v114 = swift_dynamicCast();
    unsigned __int8 v115 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56);
    if (v114)
    {
      v115(v113, 0, 1, v106);
      (*(void (**)(char *, char *, uint64_t))(v107 + 32))(v109, v113, v106);
      unint64_t v11 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v107 + 8))(v109, v106);
    }
    else
    {
      v115(v113, 1, 1, v106);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v113, v110);
      unint64_t v11 = 0;
    }
    uint64_t v2 = v120;
    int64_t v9 = v126;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v130);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v131);
    char v6 = &demangling cache variable for type metadata for (Hashable & Sendable)?;
    outlined destroy of Any?((uint64_t)v139, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v140, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)v141);
    uint64_t result = outlined destroy of Any?((uint64_t)&v148, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    int64_t v34 = v125;
    if ((v11 & 1) == 0) {
      goto LABEL_318;
    }
LABEL_80:
    long long v150 = v145;
    long long v151 = v146;
    uint64_t v152 = v147;
    long long v148 = v143;
    long long v149 = v144;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v134);
LABEL_317:
  outlined destroy of Any?((uint64_t)v139, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of Any?((uint64_t)v140, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v141);
  outlined destroy of Any?((uint64_t)&v148, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_318:
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v143);
  uint64_t result = swift_release();
LABEL_319:
  uint64_t v116 = (_OWORD *)v118;
  *(void *)(v118 + 64) = 0;
  v116[2] = 0u;
  v116[3] = 0u;
  _OWORD *v116 = 0u;
  v116[1] = 0u;
  return result;
}

uint64_t specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(char a1)
{
  uint64_t v2 = v1;
  char v14 = &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
  unint64_t v15 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component();
  v13[0] = a1;
  long long v16 = xmmword_182106C90;
  char v17 = 1;
  uint64_t v18 = 0;
  long long v4 = *(_OWORD *)(v2 + 32);
  long long v24 = *(_OWORD *)(v2 + 16);
  long long v25 = v4;
  long long v26 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v19);
  long long v5 = *(_OWORD *)(v2 + 32);
  long long v21 = *(_OWORD *)(v2 + 16);
  long long v22 = v5;
  long long v23 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v20);
  uint64_t v6 = BigString.Index.utf8Offset.getter();
  uint64_t v7 = BigString.Index.utf8Offset.getter();
  void v12[2] = 0xD00000000000001DLL;
  void v12[3] = 0x80000001823A86F0;
  v12[4] = v13;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v12, (void *)v2, v6, v7);
  swift_release();
  uint64_t v8 = *((void *)&v16 + 1);
  if (*((void *)&v16 + 1) != 1)
  {
    uint64_t v9 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = v9;
    *(void *)(inited + 40) = v8;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v6, v7, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v13);
}

{
  uint64_t v1;
  uint64_t v2;
  char v3;
  long long v4;
  long long v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  void v12[5];
  unsigned char v13[24];
  ValueMetadata *v14;
  unint64_t v15;
  long long v16;
  char v17;
  uint64_t v18;
  unsigned char v19[48];
  unsigned char v20[48];
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;

  uint64_t v2 = v1;
  int v3 = a1 & 1;
  char v14 = &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  unint64_t v15 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
  v13[0] = v3;
  long long v16 = xmmword_182106C90;
  char v17 = 1;
  uint64_t v18 = 0;
  long long v4 = *(_OWORD *)(v2 + 32);
  long long v24 = *(_OWORD *)(v2 + 16);
  long long v25 = v4;
  long long v26 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v19);
  long long v5 = *(_OWORD *)(v2 + 32);
  long long v21 = *(_OWORD *)(v2 + 16);
  long long v22 = v5;
  long long v23 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v20);
  uint64_t v6 = BigString.Index.utf8Offset.getter();
  uint64_t v7 = BigString.Index.utf8Offset.getter();
  void v12[2] = 0xD00000000000001FLL;
  void v12[3] = 0x80000001823AC880;
  v12[4] = v13;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v12, (void *)v2, v6, v7);
  swift_release();
  uint64_t v8 = *((void *)&v16 + 1);
  if (*((void *)&v16 + 1) != 1)
  {
    uint64_t v9 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = v9;
    *(void *)(inited + 40) = v8;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v6, v7, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v13);
}

{
  uint64_t v1;
  uint64_t v2;
  long long v4;
  long long v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  void v12[5];
  unsigned char v13[24];
  ValueMetadata *v14;
  unint64_t v15;
  long long v16;
  char v17;
  uint64_t v18;
  unsigned char v19[48];
  unsigned char v20[48];
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;

  uint64_t v2 = v1;
  char v14 = &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  unint64_t v15 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field();
  v13[0] = a1;
  long long v16 = xmmword_182106C90;
  char v17 = 1;
  uint64_t v18 = 0;
  long long v4 = *(_OWORD *)(v2 + 32);
  long long v24 = *(_OWORD *)(v2 + 16);
  long long v25 = v4;
  long long v26 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v19);
  long long v5 = *(_OWORD *)(v2 + 32);
  long long v21 = *(_OWORD *)(v2 + 16);
  long long v22 = v5;
  long long v23 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v20);
  uint64_t v6 = BigString.Index.utf8Offset.getter();
  uint64_t v7 = BigString.Index.utf8Offset.getter();
  void v12[2] = 0xD000000000000021;
  void v12[3] = 0x80000001823AE490;
  v12[4] = v13;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v12, (void *)v2, v6, v7);
  swift_release();
  uint64_t v8 = *((void *)&v16 + 1);
  if (*((void *)&v16 + 1) != 1)
  {
    uint64_t v9 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = v9;
    *(void *)(inited + 40) = v8;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v6, v7, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v13);
}

uint64_t specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(uint64_t a1)
{
  uint64_t v2 = v1;
  void v16[3] = &type metadata for AttributedString;
  v16[4] = lazy protocol witness table accessor for type AttributedString and conformance AttributedString();
  v16[0] = a1;
  long long v17 = xmmword_182106C90;
  char v18 = 1;
  uint64_t v19 = 0;
  uint64_t v4 = one-time initialization token for name;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_1E8ED5EE0;
  uint64_t v15 = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
  long long v5 = *(_OWORD *)(v2 + 32);
  v21[6] = *(_OWORD *)(v2 + 16);
  v21[7] = v5;
  v21[8] = *(_OWORD *)(v2 + 48);
  swift_bridgeObjectRetain();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v20);
  long long v6 = *(_OWORD *)(v2 + 32);
  v21[3] = *(_OWORD *)(v2 + 16);
  v21[4] = v6;
  v21[5] = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v21);
  uint64_t v7 = BigString.Index.utf8Offset.getter();
  uint64_t v8 = BigString.Index.utf8Offset.getter();
  MEMORY[0x1F4188790](v8);
  v13[2] = v15;
  void v13[3] = v14;
  v13[4] = v16;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v13, (void *)v2, v7, v8);
  swift_release();
  uint64_t v9 = *((void *)&v17 + 1);
  if (*((void *)&v17 + 1) != 1)
  {
    uint64_t v10 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = v10;
    *(void *)(inited + 40) = v9;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v7, v8, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v16);
}

{
  _OWORD *v1;
  void *v2;
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  void v11[5];
  void v12[5];
  long long v13;
  char v14;
  uint64_t v15;
  unsigned char v16[48];
  unsigned char v17[48];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;

  uint64_t v2 = v1;
  v12[4] = MEMORY[0x1E4FBB560];
  void v12[3] = MEMORY[0x1E4FBB550];
  v12[0] = a1;
  uint64_t v13 = xmmword_182106C90;
  uint64_t v14 = 1;
  uint64_t v15 = 0;
  int v3 = v1[2];
  long long v21 = v1[1];
  long long v22 = v3;
  long long v23 = v1[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v16);
  uint64_t v4 = v1[2];
  char v18 = v1[1];
  uint64_t v19 = v4;
  uint64_t v20 = v1[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v17);
  long long v5 = BigString.Index.utf8Offset.getter();
  long long v6 = BigString.Index.utf8Offset.getter();
  void v11[2] = 0xD000000000000012;
  v11[3] = 0x80000001823A8610;
  uint64_t v11[4] = v12;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v11, v2, v5, v6);
  swift_release();
  uint64_t v7 = *((void *)&v13 + 1);
  if (*((void *)&v13 + 1) != 1)
  {
    uint64_t v8 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = v8;
    *(void *)(inited + 40) = v7;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v5, v6, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v12);
}

{
  uint64_t v1;
  long long v2;
  long long v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  void v10[7];
  uint64_t v11;
  uint64_t v12;
  void v13[5];
  long long v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[10];

  void v13[3] = MEMORY[0x1E4FBB550];
  v13[4] = MEMORY[0x1E4FBB560];
  v13[0] = a1;
  uint64_t v14 = xmmword_182106C90;
  uint64_t v15 = 1;
  long long v16 = 0;
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  unint64_t v11 = qword_1E8ED5E80;
  unint64_t v12 = static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name;
  uint64_t v2 = *(_OWORD *)(v1 + 32);
  v18[6] = *(_OWORD *)(v1 + 16);
  void v18[7] = v2;
  v18[8] = *(_OWORD *)(v1 + 48);
  swift_bridgeObjectRetain();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v17);
  int v3 = *(_OWORD *)(v1 + 32);
  v18[3] = *(_OWORD *)(v1 + 16);
  v18[4] = v3;
  v18[5] = *(_OWORD *)(v1 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v18);
  uint64_t v4 = BigString.Index.utf8Offset.getter();
  long long v5 = BigString.Index.utf8Offset.getter();
  MEMORY[0x1F4188790](v5);
  v10[2] = v12;
  v10[3] = v11;
  v10[4] = v13;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v10, (void *)v1, v4, v5);
  swift_release();
  long long v6 = *((void *)&v14 + 1);
  if (*((void *)&v14 + 1) != 1)
  {
    uint64_t v7 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = v7;
    *(void *)(inited + 40) = v6;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v4, v5, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v13);
}

{
  uint64_t v1;
  long long v2;
  long long v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  void v10[7];
  uint64_t v11;
  uint64_t v12;
  void v13[5];
  long long v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[10];

  void v13[3] = MEMORY[0x1E4FBB550];
  v13[4] = MEMORY[0x1E4FBB560];
  v13[0] = a1;
  uint64_t v14 = xmmword_182106C90;
  uint64_t v15 = 1;
  long long v16 = 0;
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  unint64_t v11 = qword_1E8ED5EB0;
  unint64_t v12 = static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name;
  uint64_t v2 = *(_OWORD *)(v1 + 32);
  v18[6] = *(_OWORD *)(v1 + 16);
  void v18[7] = v2;
  v18[8] = *(_OWORD *)(v1 + 48);
  swift_bridgeObjectRetain();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v17);
  int v3 = *(_OWORD *)(v1 + 32);
  v18[3] = *(_OWORD *)(v1 + 16);
  v18[4] = v3;
  v18[5] = *(_OWORD *)(v1 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v18);
  uint64_t v4 = BigString.Index.utf8Offset.getter();
  long long v5 = BigString.Index.utf8Offset.getter();
  MEMORY[0x1F4188790](v5);
  v10[2] = v12;
  v10[3] = v11;
  v10[4] = v13;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v10, (void *)v1, v4, v5);
  swift_release();
  long long v6 = *((void *)&v14 + 1);
  if (*((void *)&v14 + 1) != 1)
  {
    uint64_t v7 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = v7;
    *(void *)(inited + 40) = v6;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v4, v5, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v13);
}

{
  uint64_t v1;
  long long v2;
  long long v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  void v10[7];
  uint64_t v11;
  uint64_t v12;
  void v13[5];
  long long v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[10];

  void v13[3] = MEMORY[0x1E4FBB550];
  v13[4] = MEMORY[0x1E4FBB560];
  v13[0] = a1;
  uint64_t v14 = xmmword_182106C90;
  uint64_t v15 = 1;
  long long v16 = 0;
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  unint64_t v11 = qword_1E8ED5E98;
  unint64_t v12 = static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name;
  uint64_t v2 = *(_OWORD *)(v1 + 32);
  v18[6] = *(_OWORD *)(v1 + 16);
  void v18[7] = v2;
  v18[8] = *(_OWORD *)(v1 + 48);
  swift_bridgeObjectRetain();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v17);
  int v3 = *(_OWORD *)(v1 + 32);
  v18[3] = *(_OWORD *)(v1 + 16);
  v18[4] = v3;
  v18[5] = *(_OWORD *)(v1 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v18);
  uint64_t v4 = BigString.Index.utf8Offset.getter();
  long long v5 = BigString.Index.utf8Offset.getter();
  MEMORY[0x1F4188790](v5);
  v10[2] = v12;
  v10[3] = v11;
  v10[4] = v13;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v10, (void *)v1, v4, v5);
  swift_release();
  long long v6 = *((void *)&v14 + 1);
  if (*((void *)&v14 + 1) != 1)
  {
    uint64_t v7 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = v7;
    *(void *)(inited + 40) = v6;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v4, v5, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v13);
}

uint64_t specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(_OWORD *a1)
{
  uint64_t v2 = v1;
  v19[3] = &type metadata for AttributedString.MarkdownSourcePosition;
  v19[4] = lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition();
  uint64_t v4 = (_OWORD *)swift_allocObject();
  v19[0] = v4;
  long long v5 = a1[5];
  void v4[5] = a1[4];
  v4[6] = v5;
  *(_OWORD *)((char *)v4 + 105) = *(_OWORD *)((char *)a1 + 89);
  long long v6 = a1[1];
  v4[1] = *a1;
  void v4[2] = v6;
  long long v7 = a1[3];
  v4[3] = a1[2];
  v4[4] = v7;
  long long v20 = xmmword_182106C90;
  char v21 = 1;
  uint64_t v22 = 0;
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  uint64_t v17 = qword_1E8ED5F08;
  uint64_t v18 = static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name;
  long long v8 = *(_OWORD *)(v2 + 32);
  v24[6] = *(_OWORD *)(v2 + 16);
  v24[7] = v8;
  v24[8] = *(_OWORD *)(v2 + 48);
  swift_bridgeObjectRetain();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v23);
  long long v9 = *(_OWORD *)(v2 + 32);
  v24[3] = *(_OWORD *)(v2 + 16);
  id v24[4] = v9;
  v24[5] = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v24);
  uint64_t v10 = BigString.Index.utf8Offset.getter();
  uint64_t v11 = BigString.Index.utf8Offset.getter();
  MEMORY[0x1F4188790](v11);
  id v16[2] = v18;
  void v16[3] = v17;
  v16[4] = v19;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v16, (void *)v2, v10, v11);
  swift_release();
  uint64_t v12 = *((void *)&v20 + 1);
  if (*((void *)&v20 + 1) != 1)
  {
    uint64_t v13 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = v13;
    *(void *)(inited + 40) = v12;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v10, v11, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v19);
}

uint64_t specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)()
{
  void v12[3] = &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value;
  v12[4] = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value();
  long long v13 = xmmword_182106C90;
  char v14 = 1;
  uint64_t v15 = 0;
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1E8ED5B58;
  uint64_t v11 = static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name;
  long long v1 = *(_OWORD *)(v0 + 32);
  v17[6] = *(_OWORD *)(v0 + 16);
  v17[7] = v1;
  void v17[8] = *(_OWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v16);
  long long v2 = *(_OWORD *)(v0 + 32);
  void v17[3] = *(_OWORD *)(v0 + 16);
  v17[4] = v2;
  v17[5] = *(_OWORD *)(v0 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v17);
  uint64_t v3 = BigString.Index.utf8Offset.getter();
  uint64_t v4 = BigString.Index.utf8Offset.getter();
  MEMORY[0x1F4188790](v4);
  id v9[2] = v11;
  void v9[3] = v10;
  uint64_t v9[4] = v12;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply, (uint64_t)v9, (void *)v0, v3, v4);
  swift_release();
  uint64_t v5 = *((void *)&v13 + 1);
  if (*((void *)&v13 + 1) != 1)
  {
    uint64_t v6 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = v6;
    *(void *)(inited + 40) = v5;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v3, v4, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v12);
}

uint64_t specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v23 = &type metadata for InflectionRule;
  unint64_t v24 = lazy protocol witness table accessor for type InflectionRule and conformance InflectionRule();
  v20[0] = a1;
  v20[1] = a2;
  char v22 = BYTE4(a3);
  int v21 = a3;
  long long v25 = xmmword_182106C90;
  char v26 = 1;
  uint64_t v27 = 0;
  uint64_t v8 = one-time initialization token for name;
  swift_bridgeObjectRetain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v18 = qword_1E8ED5E58;
  uint64_t v19 = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
  long long v9 = *(_OWORD *)(v4 + 32);
  v29[6] = *(_OWORD *)(v4 + 16);
  v29[7] = v9;
  v29[8] = *(_OWORD *)(v4 + 48);
  swift_bridgeObjectRetain();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v28);
  long long v10 = *(_OWORD *)(v4 + 32);
  v29[3] = *(_OWORD *)(v4 + 16);
  void v29[4] = v10;
  v29[5] = *(_OWORD *)(v4 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v29);
  uint64_t v11 = BigString.Index.utf8Offset.getter();
  uint64_t v12 = BigString.Index.utf8Offset.getter();
  MEMORY[0x1F4188790](v12);
  _OWORD v17[2] = v19;
  void v17[3] = v18;
  v17[4] = v20;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)((uint64_t)partial apply for closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:), (uint64_t)v17, (void *)v4, v11, v12);
  swift_release();
  uint64_t v13 = *((void *)&v25 + 1);
  if (*((void *)&v25 + 1) != 1)
  {
    uint64_t v14 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = v14;
    *(void *)(inited + 40) = v13;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v11, v12, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v20);
}

unint64_t specialized AttributedString._AttributeStorage.subscript.getter@<X0>(unint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(result + 16)
    && (unint64_t v3 = result,
        uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001DLL, 0x80000001823A86F0),
        (v4 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v3 + 56) + 72 * result, (uint64_t)v6);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v6, (uint64_t)&v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    swift_dynamicCast();
    return outlined destroy of AttributedString._AttributeValue((uint64_t)v6);
  }
  else
  {
    *a2 = 12;
  }
  return result;
}

double specialized AttributedString._AttributeStorage.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for name == -1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    goto LABEL_9;
  }
  swift_once();
  if (!*(void *)(a1 + 16)) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v4 = qword_1E8ED5E58;
  uint64_t v5 = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
  if (v7)
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v6, (uint64_t)&v10);
    swift_bridgeObjectRelease();
    if (*((void *)&v11 + 1))
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v10, (uint64_t)v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      swift_dynamicCast();
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v10);
      return result;
    }
  }
  else
  {
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    swift_bridgeObjectRelease();
  }
LABEL_9:
  outlined destroy of Any?((uint64_t)&v10, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  double result = 0.0;
  *(_OWORD *)a2 = xmmword_182106C90;
  *(unsigned char *)(a2 + 20) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  double result;
  unsigned char v9[40];
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  uint64_t v14;

  if (one-time initialization token for name == -1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    goto LABEL_9;
  }
  swift_once();
  if (!*(void *)(a1 + 16)) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v4 = qword_1E8ED5F08;
  uint64_t v5 = static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
  if (v7)
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v6, (uint64_t)&v10);
    swift_bridgeObjectRelease();
    if (*((void *)&v11 + 1))
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v10, (uint64_t)v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      swift_dynamicCast();
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v10);
      *(unsigned char *)(a2 + 105) = 0;
      return result;
    }
  }
  else
  {
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    swift_bridgeObjectRelease();
  }
LABEL_9:
  outlined destroy of Any?((uint64_t)&v10, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  double result = 0.0;
  *(_OWORD *)(a2 + 89) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(unsigned char *)(a2 + 105) = 1;
  return result;
}

uint64_t specialized AttributedString._AttributeStorage.subscript.getter@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, void *a5@<X8>)
{
  if (*a2 == -1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    goto LABEL_9;
  }
  swift_once();
  if (!*(void *)(a1 + 16)) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v9 = *a3;
  uint64_t v10 = *a4;
  swift_bridgeObjectRetain();
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
  if (v12)
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v11, (uint64_t)&v15);
    swift_bridgeObjectRelease();
    if (*((void *)&v16 + 1))
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v15, (uint64_t)v14);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      swift_dynamicCast();
      return outlined destroy of AttributedString._AttributeValue((uint64_t)&v15);
    }
  }
  else
  {
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    swift_bridgeObjectRelease();
  }
LABEL_9:
  uint64_t result = outlined destroy of Any?((uint64_t)&v15, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  *a5 = 0;
  a5[1] = 0;
  *(void *)((char *)a5 + 13) = 0;
  return result;
}

uint64_t specialized AttributedString.Runs.AttributesSlice1.subscript.getter(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v193 = a4;
  uint64_t v194 = a6;
  uint64_t v191 = a5;
  uint64_t v167 = a2;
  uint64_t v169 = a1;
  long long v8 = v6[9];
  long long v9 = v6[11];
  long long v255 = v6[10];
  long long v256 = v9;
  long long v10 = v6[5];
  long long v11 = v6[7];
  long long v251 = v6[6];
  long long v252 = v11;
  long long v13 = v6[7];
  long long v12 = v6[8];
  long long v14 = v12;
  long long v254 = v6[9];
  long long v253 = v12;
  long long v15 = v6[1];
  long long v16 = v6[3];
  long long v247 = v6[2];
  long long v248 = v16;
  long long v18 = v6[3];
  long long v17 = v6[4];
  long long v19 = v17;
  long long v250 = v6[5];
  long long v249 = v17;
  long long v20 = *v6;
  long long v21 = *v6;
  v246[1] = v6[1];
  v246[0] = v20;
  long long v22 = v6[11];
  long long v234 = v255;
  long long v235 = v22;
  long long v230 = v251;
  long long v231 = v13;
  long long v232 = v14;
  long long v233 = v8;
  long long v227 = v247;
  long long v228 = v18;
  v229[0] = v19;
  v229[1] = v10;
  uint64_t v23 = *((void *)v6 + 25);
  uint64_t v257 = *((void *)v6 + 24);
  uint64_t v24 = *((void *)v6 + 26);
  uint64_t v236 = *((void *)v6 + 24);
  long long v225 = v21;
  long long v226 = v15;
  *(void *)&long long v215 = a3;
  *((void *)&v215 + 1) = a4;
  *(void *)&long long v216 = a5;
  *((void *)&v216 + 1) = a6;
  outlined retain of AttributedString.Runs((uint64_t)v246);
  uint64_t v196 = v23;
  uint64_t v204 = v24;
  AttributedString.Runs._slicedRunBoundary(roundingDown:attributeNames:constraints:)((uint64_t *)&v220, (uint64_t *)&v215, v23, v24, (uint64_t *)&v240);
  unint64_t v168 = *((void *)&v240 + 1);
  uint64_t v173 = v240;
  uint64_t v174 = v241;
  outlined release of AttributedString.Runs((uint64_t)v246);
  uint64_t v171 = *((void *)&v220 + 1);
  uint64_t v172 = v220;
  uint64_t v175 = *((void *)&v221 + 1);
  uint64_t v170 = v221;
  uint64_t v25 = *((void *)&v253 + 1);
  uint64_t v26 = *((void *)&v254 + 1);
  uint64_t v28 = *((void *)&v255 + 1);
  unint64_t v27 = v255;
  unint64_t v30 = *((void *)&v256 + 1);
  uint64_t v29 = v256;
  uint64_t v31 = v257;
  outlined retain of AttributedString.Runs((uint64_t)v246);
  uint64_t v195 = a3;
  uint64_t v32 = v191;
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_214:
    __break(1u);
    goto LABEL_215;
  }
  uint64_t v26 = v194;
  uint64_t v25 = v191;
  if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
  {
LABEL_215:
    __break(1u);
    goto LABEL_216;
  }
  uint64_t v197 = *(void *)(v196 + 16);
  if (!v197)
  {
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
    goto LABEL_218;
  }
  uint64_t v176 = v31;
  unint64_t v177 = v30;
  uint64_t v178 = v29;
  uint64_t v179 = v28;
  uint64_t v33 = *(void *)(*(void *)&v246[0] + 64);
  uint64_t v31 = *(void *)(*(void *)&v246[0] + 72);
  uint64_t v29 = *(void *)(*(void *)&v246[0] + 80);
  unint64_t v27 = *(void *)(*(void *)&v246[0] + 88);
  uint64_t v32 = *(void *)&v246[0];
  swift_unknownObjectRetain();
  uint64_t v25 = v29;
  uint64_t v34 = BigString.Index.utf8Offset.getter();
  if (v33) {
    uint64_t v35 = v29;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v34 < 0) {
    goto LABEL_217;
  }
  uint64_t v26 = v34;
  if (v35 < v34) {
    goto LABEL_217;
  }
  uint64_t v200 = v32;
  unint64_t v192 = v27;
  if (!v33 || v34 >= v29 || !*(_WORD *)(v33 + 16))
  {
    unint64_t v48 = swift_unknownObjectRetain();
    unint64_t v27 = specialized Rope._endPath.getter(v48);
    swift_unknownObjectRelease();
    uint64_t v29 = 0;
    uint64_t v36 = 0;
    if (!v33)
    {
      uint64_t v31 = 0;
LABEL_66:
      uint64_t v58 = v197;
      uint64_t v190 = v26 - v36;
      if (__OFSUB__(v26, v36))
      {
LABEL_218:
        __break(1u);
        goto LABEL_219;
      }
      long long v59 = *(_OWORD *)(v32 + 16);
      long long v60 = *(_OWORD *)(v32 + 32);
      long long v264 = *(_OWORD *)(v32 + 48);
      v263[1] = v60;
      v263[0] = v59;
      long long v61 = *(_OWORD *)(v32 + 16);
      long long v62 = *(_OWORD *)(v32 + 32);
      v265[2] = v264;
      v265[1] = v62;
      v265[0] = v61;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v265, (uint64_t)v266);
      outlined retain of Locale((uint64_t)v266);
      uint64_t v25 = (uint64_t)v263;
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v263);
      if (__OFSUB__(0, v36))
      {
LABEL_219:
        __break(1u);
        goto LABEL_220;
      }
      uint64_t v25 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v165 = v64;
      unint64_t v166 = v63;
      uint64_t v164 = v65;
      outlined release of Locale((uint64_t)&v237);
      uint64_t v186 = *((void *)&v249 + 1);
      if (v31 >= *((uint64_t *)&v249 + 1))
      {
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }
      uint64_t v162 = v25;
      uint64_t v26 = v192;
      if (v192 != *(void *)(v32 + 88))
      {
LABEL_221:
        __break(1u);
        goto LABEL_222;
      }
      uint64_t v207 = v31;
      uint64_t v25 = *(void *)(v32 + 64);
      uint64_t v31 = *(void *)(v32 + 72);
      if (v29)
      {
        unint64_t v66 = v27;
        unint64_t v67 = v29 + 24 * ((v27 >> ((4 * *(unsigned char *)(v29 + 18) + 8) & 0x3C)) & 0xF);
        unint64_t v27 = *(void *)(v67 + 40);
        uint64_t v201 = *(void *)(v67 + 32);
        swift_bridgeObjectRetain();
        unint64_t v163 = v27;
        swift_bridgeObjectRetain();
        uint64_t v68 = v192;
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v66 = v27;
        specialized Rope._Node.subscript.getter(v27, v25);
        uint64_t v201 = v69;
        unint64_t v163 = v70;
        swift_unknownObjectRelease();
        uint64_t v25 = *(void *)(v32 + 64);
        uint64_t v31 = *(void *)(v32 + 72);
        uint64_t v68 = *(void *)(v32 + 88);
      }
      Swift::Int v161 = (long long *)(v32 + 16);
      uint64_t v189 = v207 + 1;
      *(void *)&long long v225 = v192;
      *((void *)&v225 + 1) = v66;
      uint64_t v205 = (long long *)&v243;
      id v206 = (_OWORD *)((char *)v229 + 8);
      *(void *)&long long v226 = v29;
      uint64_t v185 = v196 + 40;
LABEL_74:
      if (v26 != v68) {
        goto LABEL_208;
      }
      uint64_t v188 = v68;
      if (v29)
      {
        unint64_t v71 = v29 + 24 * ((v66 >> ((4 * *(unsigned char *)(v29 + 18) + 8) & 0x3C)) & 0xF);
        unint64_t v72 = *(void *)(v71 + 24);
        uint64_t v26 = *(void *)(v71 + 32);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v72 = specialized Rope._Node.subscript.getter(v66, v25);
        uint64_t v26 = v73;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v27 = v190 + v72;
      if (__OFADD__(v190, v72)) {
        goto LABEL_209;
      }
      if (v25)
      {
        unint64_t v74 = ((-15 << ((4 * *(unsigned char *)(v25 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v25 + 18) | ((unint64_t)*(unsigned __int16 *)(v25 + 16) << ((4 * *(unsigned char *)(v25 + 18) + 8) & 0x3C));
        swift_unknownObjectRetain();
      }
      else
      {
        unint64_t v74 = 0;
      }
      uint64_t v26 = v201;
      if (v66 >= v74) {
        goto LABEL_210;
      }
      if (v29)
      {
        char v75 = (4 * *(unsigned char *)(v29 + 18) + 8) & 0x3C;
        unint64_t v76 = ((v66 >> v75) & 0xF) + 1;
        if (v76 < *(unsigned __int16 *)(v29 + 16))
        {
          uint64_t v31 = (v76 << v75) | ((-15 << v75) - 1) & v66;
          swift_unknownObjectRelease_n();
LABEL_89:
          uint64_t v25 = v226;
LABEL_97:
          if (v189 == v186)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_138:
            if (v188 == *(void *)(v32 + 88))
            {
              if (v29)
              {
                unint64_t v108 = v29 + 24 * ((v66 >> ((4 * *(unsigned char *)(v29 + 18) + 8) & 0x3C)) & 0xF);
                uint64_t v25 = *(void *)(v108 + 24);
                uint64_t v26 = *(void *)(v108 + 40);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                uint64_t v109 = *(void *)(v32 + 64);
                swift_unknownObjectRetain();
                uint64_t v25 = specialized Rope._Node.subscript.getter(v66, v109);
                uint64_t v26 = v110;
                swift_unknownObjectRelease();
              }
              unint64_t v27 = v166;
              uint64_t v29 = v164;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v111 = v190 + v25;
              uint64_t v112 = v161;
              if (!__OFADD__(v190, v25))
              {
                long long v113 = *v161;
                long long v114 = v161[1];
                long long v262 = v161[2];
                long long v261 = v114;
                long long v260 = v113;
                long long v115 = *v161;
                long long v116 = v161[1];
                v267[2] = v262;
                v267[1] = v116;
                v267[0] = v115;
                outlined init with take of any PredicateExpression<Self.Output == B1>(v267, (uint64_t)v268);
                outlined retain of Locale((uint64_t)v268);
                uint64_t v25 = (uint64_t)&v260;
                BigString.utf8.getter();
                outlined release of Locale((uint64_t)&v260);
                uint64_t v26 = v162;
                if (!__OFSUB__(v111, BigString.Index.utf8Offset.getter()))
                {
                  uint64_t v117 = BigString.UTF8View.index(_:offsetBy:)();
                  uint64_t v26 = v118;
                  unint64_t v27 = v119;
                  uint64_t v121 = v120;
                  outlined release of Locale((uint64_t)&v238);
                  uint64_t v31 = v178;
                  uint64_t v122 = v179;
                  uint64_t v124 = v176;
                  unint64_t v123 = v177;
                  char v125 = static BigString.Index.< infix(_:_:)();
                  if (v125) {
                    uint64_t v126 = v122;
                  }
                  else {
                    uint64_t v126 = v117;
                  }
                  if (v125)
                  {
                    uint64_t v26 = v31;
                    unint64_t v27 = v123;
                    uint64_t v121 = v124;
                  }
                  uint64_t v32 = v126;
                  long long v127 = *v112;
                  long long v128 = v112[1];
                  long long v259 = v112[2];
                  v258[1] = v128;
                  v258[0] = v127;
                  long long v129 = *v112;
                  v269[1] = v112[1];
                  v269[2] = v259;
                  v269[0] = v129;
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v269, (uint64_t)v270);
                  outlined retain of Locale((uint64_t)v270);
                  uint64_t v29 = v194;
                  uint64_t v130 = v195;
                  uint64_t v25 = v193;
                  uint64_t v131 = v191;
                  if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
                  {
                    *(void *)&long long v215 = v130;
                    *((void *)&v215 + 1) = v25;
                    *(void *)&long long v216 = v131;
                    *((void *)&v216 + 1) = v29;
                    *(void *)&long long v217 = v32;
                    *((void *)&v217 + 1) = v26;
                    *(void *)&long long v218 = v27;
                    *((void *)&v218 + 1) = v121;
                    uint64_t v31 = *(void *)(v204 + 16);
                    uint64_t v207 = v32;
                    if (v31 && (static BigString.Index.== infix(_:_:)() & 1) == 0)
                    {
                      swift_bridgeObjectRetain();
                      uint64_t v25 = 40;
                      uint64_t v132 = v31;
                      while (*(void *)(v204 + v25))
                      {
                        swift_bridgeObjectRelease();
                        v25 += 16;
                        if (!--v132)
                        {
                          swift_bridgeObjectRelease();
                          uint64_t v133 = v193;
                          uint64_t v32 = v195;
LABEL_159:
                          uint64_t v134 = 0;
                          *(void *)&long long v208 = v32;
                          *((void *)&v208 + 1) = v133;
                          *(void *)&long long v209 = v131;
                          *((void *)&v209 + 1) = v29;
                          *(void *)&long long v210 = v207;
                          *((void *)&v210 + 1) = v26;
                          uint64_t v135 = 40;
                          *(void *)&long long v211 = v27;
                          *((void *)&v211 + 1) = v121;
                          while (1)
                          {
                            uint64_t v136 = v134 + 1;
                            if (__OFADD__(v134, 1)) {
                              goto LABEL_204;
                            }
                            if (*(void *)(v204 + v135))
                            {
                              long long v137 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
                              uint64_t v138 = (char *)MEMORY[0x1E4FBC860];
                              do
                              {
                                unint64_t v139 = *v137;
                                if (*v137)
                                {
                                  uint64_t v140 = *(v137 - 1);
                                  if ((v139 & 0x2000000000000000) != 0 ? HIBYTE(v139) & 0xF : v140 & 0xFFFFFFFFFFFFLL)
                                  {
                                    if ((v139 & 0x1000000000000000) != 0)
                                    {
                                      int v142 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                                    }
                                    else
                                    {
                                      if ((v139 & 0x2000000000000000) != 0)
                                      {
                                        *(void *)&long long v225 = *(v137 - 1);
                                        *((void *)&v225 + 1) = v139 & 0xFFFFFFFFFFFFFFLL;
                                        swift_bridgeObjectRetain();
                                      }
                                      else
                                      {
                                        if ((v140 & 0x1000000000000000) == 0) {
                                          _StringObject.sharedUTF8.getter();
                                        }
                                        swift_bridgeObjectRetain();
                                      }
                                      int v142 = _decodeScalar(_:startingAt:)();
                                      swift_bridgeObjectRelease();
                                    }
                                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                                      uint64_t v138 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v138 + 2) + 1, 1, v138);
                                    }
                                    unint64_t v144 = *((void *)v138 + 2);
                                    unint64_t v143 = *((void *)v138 + 3);
                                    if (v144 >= v143 >> 1) {
                                      uint64_t v138 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v143 > 1), v144 + 1, 1, v138);
                                    }
                                    *((void *)v138 + 2) = v144 + 1;
                                    *(_DWORD *)&v138[4 * v144 + 32] = v142;
                                  }
                                }
                                v137 += 2;
                                --v31;
                              }
                              while (v31);
                              swift_bridgeObjectRelease();
                              BigString.unicodeScalars.getter();
                              BigString.UnicodeScalarView.subscript.getter();
                              outlined release of Locale((uint64_t)v245);
                              uint64_t v145 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v138);
                              uint64_t v32 = v146;
                              uint64_t v25 = v147;
                              uint64_t v29 = v148;
                              swift_bridgeObjectRelease();
                              outlined release of Locale((uint64_t)&v225);
                              if (v29 == 2) {
                                goto LABEL_185;
                              }
                              char v155 = static BigString.Index.< infix(_:_:)();
                              outlined release of Locale((uint64_t)v258);
                              uint64_t result = outlined release of AttributedString.Runs((uint64_t)v246);
                              if (v155) {
                                goto LABEL_240;
                              }
                              uint64_t v207 = v145;
                              uint64_t v26 = v32;
                              unint64_t v27 = v25;
                              goto LABEL_186;
                            }
                            v135 += 16;
                            ++v134;
                            if (v136 == v31) {
                              goto LABEL_185;
                            }
                          }
                        }
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease_n();
                      BigString.utf8.getter();
                      BigString.UTF8View.subscript.getter();
                      outlined release of Locale((uint64_t)&v239);
                      uint64_t v32 = v195;
                      uint64_t v133 = v193;
                      uint64_t result = static BigString.Index.< infix(_:_:)();
                      if (result) {
                        goto LABEL_238;
                      }
                      v213[0] = v32;
                      v213[1] = v133;
                      v213[2] = v131;
                      v213[3] = v29;
                      v213[4] = v32;
                      v213[5] = v133;
                      v213[6] = v131;
                      v213[7] = v29;
                      specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)v213, (uint64_t *)&v225);
                      outlined release of Locale((uint64_t)&v240);
                      uint64_t v25 = *((void *)&v228 + 1);
                      if (*((void *)&v228 + 1) == 2) {
                        goto LABEL_159;
                      }
                      uint64_t v26 = *((void *)&v227 + 1);
                      unint64_t v27 = v228;
                      uint64_t v207 = v227;
                      uint64_t result = static BigString.Index.< infix(_:_:)();
                      uint64_t v121 = v25;
                      if ((result & 1) == 0) {
                        goto LABEL_159;
                      }
                      goto LABEL_239;
                    }
LABEL_185:
                    outlined release of Locale((uint64_t)v258);
                    outlined release of AttributedString.Runs((uint64_t)v246);
                    uint64_t v29 = v121;
LABEL_186:
                    uint64_t v31 = v175;
                    if (v173 == *(void *)(v200 + 88))
                    {
                      if (v174)
                      {
                        uint64_t v25 = *(void *)(v174 + 24 * ((v168 >> ((4 * *(unsigned char *)(v174 + 18) + 8) & 0x3C)) & 0xF) + 32);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        uint64_t v149 = *(void *)(v200 + 64);
                        swift_unknownObjectRetain();
                        specialized Rope._Node.subscript.getter(v168, v149);
                        uint64_t v25 = v150;
                        swift_unknownObjectRelease();
                      }
                      uint64_t v32 = v207;
                      if (one-time initialization token for name == -1)
                      {
                        if (!*(void *)(v25 + 16))
                        {
LABEL_228:
                          uint64_t v224 = 0;
                          long long v222 = 0u;
                          long long v223 = 0u;
                          long long v220 = 0u;
                          long long v221 = 0u;
                          goto LABEL_229;
                        }
LABEL_192:
                        uint64_t v151 = qword_1E8ED5EE0;
                        uint64_t v152 = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
                        swift_bridgeObjectRetain();
                        unint64_t v153 = specialized __RawDictionaryStorage.find<A>(_:)(v152, v151);
                        if (v154)
                        {
                          outlined init with copy of AttributedString._AttributeValue(*(void *)(v25 + 56) + 72 * v153, (uint64_t)&v220);
                        }
                        else
                        {
                          uint64_t v224 = 0;
                          long long v222 = 0u;
                          long long v223 = 0u;
                          long long v220 = 0u;
                          long long v221 = 0u;
                        }
                        uint64_t v32 = v207;
                        swift_bridgeObjectRelease();
                        if (*((void *)&v221 + 1))
                        {
                          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v220, (uint64_t)&v214);
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                          swift_dynamicCast();
                          outlined destroy of AttributedString._AttributeValue((uint64_t)&v220);
LABEL_230:
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          uint64_t v157 = v171;
                          uint64_t v156 = v172;
                          uint64_t v158 = v170;
                          uint64_t result = static BigString.Index.< infix(_:_:)();
                          if ((result & 1) == 0)
                          {
                            uint64_t v159 = v167;
                            void *v167 = v156;
                            v159[1] = v157;
                            v159[2] = v158;
                            long long v159[3] = v31;
                            v159[4] = v32;
                            v159[5] = v26;
                            v159[6] = v27;
                            v159[7] = v29;
                            return result;
                          }
                          __break(1u);
LABEL_233:
                          __break(1u);
LABEL_234:
                          __break(1u);
LABEL_235:
                          __break(1u);
                          goto LABEL_236;
                        }
LABEL_229:
                        outlined destroy of Any?((uint64_t)&v220, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                        void *v169 = 0;
                        goto LABEL_230;
                      }
LABEL_227:
                      swift_once();
                      if (!*(void *)(v25 + 16)) {
                        goto LABEL_228;
                      }
                      goto LABEL_192;
                    }
LABEL_226:
                    __break(1u);
                    goto LABEL_227;
                  }
LABEL_225:
                  __break(1u);
                  goto LABEL_226;
                }
LABEL_224:
                __break(1u);
                goto LABEL_225;
              }
LABEL_223:
              __break(1u);
              goto LABEL_224;
            }
LABEL_222:
            __break(1u);
            goto LABEL_223;
          }
          if ((void)v225 != *(void *)(v32 + 88)) {
            goto LABEL_211;
          }
          unint64_t v183 = v66;
          uint64_t v184 = v29;
          unint64_t v192 = v225;
          unint64_t v181 = v31;
          unint64_t v182 = v27;
          uint64_t v180 = v25;
          if (v25)
          {
            unint64_t v84 = v25 + 24 * (((unint64_t)v31 >> ((4 * *(unsigned char *)(v25 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v25 = *(void *)(v84 + 32);
            uint64_t v85 = *(void *)(v84 + 40);
            swift_bridgeObjectRetain();
            uint64_t v187 = v85;
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v86 = *(void *)(v32 + 64);
            swift_unknownObjectRetain();
            uint64_t v26 = v201;
            specialized Rope._Node.subscript.getter(v31, v86);
            uint64_t v187 = v87;
            uint64_t v25 = v88;
            swift_unknownObjectRelease();
          }
          swift_bridgeObjectRetain();
          uint64_t v89 = 0;
          uint64_t v29 = v185;
          uint64_t v207 = v25;
          while (1)
          {
            uint64_t v31 = v89 + 1;
            if (__OFADD__(v89, 1))
            {
              __break(1u);
LABEL_201:
              __break(1u);
              goto LABEL_202;
            }
            unint64_t v27 = *(void *)(v29 - 8);
            uint64_t v91 = *(void *)v29;
            if (*(void *)(v26 + 16))
            {
              swift_bridgeObjectRetain_n();
              unint64_t v92 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v91);
              if (v93)
              {
                outlined init with copy of AttributedString._AttributeValue(*(void *)(v26 + 56) + 72 * v92, (uint64_t)&v220);
              }
              else
              {
                uint64_t v224 = 0;
                long long v222 = 0u;
                long long v223 = 0u;
                long long v220 = 0u;
                long long v221 = 0u;
              }
              swift_bridgeObjectRelease();
              uint64_t v25 = v207;
              if (!*(void *)(v207 + 16))
              {
LABEL_112:
                uint64_t v219 = 0;
                long long v217 = 0u;
                long long v218 = 0u;
                long long v215 = 0u;
                long long v216 = 0u;
                goto LABEL_119;
              }
            }
            else
            {
              uint64_t v224 = 0;
              long long v222 = 0u;
              long long v223 = 0u;
              long long v220 = 0u;
              long long v221 = 0u;
              swift_bridgeObjectRetain();
              if (!*(void *)(v25 + 16)) {
                goto LABEL_112;
              }
            }
            swift_bridgeObjectRetain();
            unint64_t v94 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v91);
            if (v95)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v25 + 56) + 72 * v94, (uint64_t)&v215);
            }
            else
            {
              uint64_t v219 = 0;
              long long v217 = 0u;
              long long v218 = 0u;
              long long v215 = 0u;
              long long v216 = 0u;
            }
            swift_bridgeObjectRelease();
LABEL_119:
            uint64_t v25 = (uint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v220, (uint64_t)&v225, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v215, (uint64_t)v206, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!*((void *)&v226 + 1))
            {
              if ((void)v230) {
                goto LABEL_136;
              }
              outlined destroy of Any?((uint64_t)&v225, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v215, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v220, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_106;
            }
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v225, (uint64_t)v213, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!(void)v230) {
              goto LABEL_135;
            }
            long long v96 = v206[3];
            long long v210 = v206[2];
            long long v211 = v96;
            uint64_t v212 = *((void *)v206 + 8);
            long long v97 = v206[1];
            long long v208 = *v206;
            long long v209 = v97;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v213, (uint64_t)v269);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v208, (uint64_t)v267);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v269, (uint64_t)&v240, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v267, (uint64_t)v205, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v242)
            {
              if (!v244)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v240);
LABEL_104:
                char v90 = 0;
                goto LABEL_105;
              }
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v240, (uint64_t)&v260);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v205, (uint64_t)v258);
              uint64_t v98 = *((void *)&v261 + 1);
              uint64_t v199 = v262;
              uint64_t v198 = __swift_project_boxed_opaque_existential_1(&v260, *((uint64_t *)&v261 + 1));
              uint64_t v203 = &v160;
              uint64_t v99 = *(void *)(v98 - 8);
              MEMORY[0x1F4188790](v198);
              uint64_t v101 = (char *)&v160 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v258, (uint64_t)v245);
              uint64_t v102 = type metadata accessor for Optional();
              unint64_t v202 = &v160;
              uint64_t v103 = *(void *)(v102 - 8);
              MEMORY[0x1F4188790](v102);
              char v105 = (char *)&v160 - v104;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              int v106 = swift_dynamicCast();
              uint64_t v107 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56);
              if (v106)
              {
                v107(v105, 0, 1, v98);
                (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v101, v105, v98);
                char v90 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v98);
              }
              else
              {
                v107(v105, 1, 1, v98);
                (*(void (**)(char *, uint64_t))(v103 + 8))(v105, v102);
                char v90 = 0;
              }
              uint64_t v32 = v200;
              uint64_t v26 = v201;
              uint64_t v25 = (uint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v258);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v260);
              uint64_t v58 = v197;
            }
            else
            {
              if (v244)
              {
                outlined destroy of Any?((uint64_t)v205, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_104;
              }
              char v90 = 1;
            }
LABEL_105:
            unint64_t v27 = (unint64_t)&demangling cache variable for type metadata for (Hashable & Sendable)?;
            outlined destroy of Any?((uint64_t)v267, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?((uint64_t)v269, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v208);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v213);
            outlined destroy of Any?((uint64_t)&v225, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v215, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v220, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v90 & 1) == 0) {
              goto LABEL_137;
            }
LABEL_106:
            v29 += 16;
            ++v89;
            uint64_t v25 = v207;
            if (v31 == v58)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v25 = *(void *)(v32 + 64);
              uint64_t v31 = *(void *)(v32 + 72);
              uint64_t v68 = *(void *)(v32 + 88);
              unint64_t v66 = v181;
              uint64_t v26 = v192;
              *(void *)&long long v225 = v192;
              *((void *)&v225 + 1) = v181;
              uint64_t v29 = v180;
              *(void *)&long long v226 = v180;
              BOOL v44 = __OFADD__(v189++, 1);
              uint64_t v190 = v182;
              if (!v44) {
                goto LABEL_74;
              }
              __break(1u);
LABEL_135:
              outlined destroy of AttributedString._AttributeValue((uint64_t)v213);
LABEL_136:
              outlined destroy of Any?((uint64_t)&v225, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?((uint64_t)&v215, (uint64_t *)v25);
              outlined destroy of Any?((uint64_t)&v220, (uint64_t *)v25);
LABEL_137:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v66 = v183;
              uint64_t v29 = v184;
              goto LABEL_138;
            }
          }
        }
      }
      int v77 = *(unsigned __int8 *)(v25 + 18);
      char v78 = (4 * v77 + 8) & 0x3C;
      uint64_t v79 = (v66 >> v78) & 0xF;
      *(void *)&long long v240 = v79;
      if (v77)
      {
        swift_unknownObjectRetain();
        char v80 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v25 + 24, (uint64_t *)&v240, (uint64_t)&v225, v25, v77);
        swift_unknownObjectRelease();
        if (v80)
        {
          swift_unknownObjectRelease_n();
          uint64_t v31 = *((void *)&v225 + 1);
          uint64_t v26 = v201;
          goto LABEL_89;
        }
      }
      else
      {
        uint64_t v81 = v79 + 1;
        if (v79 + 1 < (unint64_t)*(unsigned __int16 *)(v25 + 16))
        {
          swift_unknownObjectRelease_n();
          uint64_t v31 = (v81 << v78) | ((-15 << v78) - 1) & v66;
LABEL_96:
          uint64_t v26 = v201;
          goto LABEL_97;
        }
      }
      if (v25)
      {
        int v82 = *(unsigned __int8 *)(v25 + 18);
        uint64_t v83 = *(unsigned __int16 *)(v25 + 16);
        swift_unknownObjectRelease_n();
        uint64_t v31 = ((-15 << ((4 * v82 + 8) & 0x3C)) - 1) & v82 | (unint64_t)(v83 << ((4 * v82 + 8) & 0x3C));
      }
      else
      {
        uint64_t v31 = 0;
      }
      uint64_t v25 = 0;
      *(void *)&long long v225 = v188;
      goto LABEL_96;
    }
LABEL_38:
    swift_unknownObjectRetain();
    uint64_t v31 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v192, v27, v29, v33, v31);
    swift_unknownObjectRelease_n();
    goto LABEL_66;
  }
  uint64_t v207 = v31;
  uint64_t v29 = *(unsigned __int8 *)(v33 + 18);
  if (*(unsigned char *)(v33 + 18))
  {
    swift_unknownObjectRetain_n();
    uint64_t v32 = -15;
    uint64_t v31 = 24;
    uint64_t v36 = v26;
    unint64_t v27 = v33;
    while (1)
    {
      uint64_t v40 = *(unsigned __int16 *)(v27 + 16);
      if (!*(_WORD *)(v27 + 16)) {
        break;
      }
      uint64_t v41 = *(void *)(v27 + 40);
      uint64_t v42 = v36 - v41;
      if (__OFSUB__(v36, v41)) {
        goto LABEL_206;
      }
      if (__OFADD__(v42, 1)) {
        goto LABEL_207;
      }
      if (v42 + 1 <= 0)
      {
        uint64_t v40 = 0;
        goto LABEL_16;
      }
      if (v40 == 1)
      {
        v36 -= v41;
        break;
      }
      uint64_t v43 = *(void *)(v27 + 64);
      BOOL v44 = __OFSUB__(v42, v43);
      uint64_t v45 = v42 - v43;
      if (v44) {
        goto LABEL_212;
      }
      if (__OFADD__(v45, 1)) {
        goto LABEL_213;
      }
      if (v45 + 1 < 1)
      {
        uint64_t v40 = 1;
        uint64_t v36 = v42;
        goto LABEL_16;
      }
      if (v40 == 2)
      {
        uint64_t v36 = v45;
        break;
      }
      uint64_t v46 = (void *)(v27 + 88);
      uint64_t v47 = 2;
      while (1)
      {
        if (v40 == v47) {
          goto LABEL_201;
        }
        uint64_t v36 = v45 - *v46;
        if (__OFSUB__(v45, *v46))
        {
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
          goto LABEL_205;
        }
        if (__OFADD__(v36, 1)) {
          goto LABEL_203;
        }
        if (v36 + 1 < 1) {
          break;
        }
        ++v47;
        v46 += 3;
        uint64_t v45 = v36;
        if (v40 == v47) {
          goto LABEL_15;
        }
      }
      uint64_t v40 = v47;
      uint64_t v36 = v45;
LABEL_16:
      char v37 = (4 * *(unsigned char *)(v27 + 18) + 8) & 0x3C;
      uint64_t v29 = ((-15 << v37) - 1) & v29 | (v40 << v37);
      unint64_t v38 = *(void *)(v27 + 24 + 24 * v40);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v27 = v38;
      if (!*(unsigned char *)(v38 + 18)) {
        goto LABEL_40;
      }
    }
LABEL_15:
    if (!v36) {
      goto LABEL_16;
    }
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
    goto LABEL_214;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v36 = v26;
  unint64_t v38 = v33;
LABEL_40:
  uint64_t v49 = *(unsigned __int16 *)(v38 + 16);
  if (!*(_WORD *)(v38 + 16))
  {
    uint64_t v52 = v38;
    uint64_t v32 = v200;
    goto LABEL_47;
  }
  uint64_t v50 = *(void *)(v38 + 24);
  uint64_t v51 = v36 - v50;
  uint64_t v32 = v200;
  if (__OFSUB__(v36, v50))
  {
LABEL_236:
    __break(1u);
LABEL_237:
    __break(1u);
LABEL_238:
    __break(1u);
LABEL_239:
    __break(1u);
LABEL_240:
    __break(1u);
    goto LABEL_241;
  }
  if (__OFADD__(v51, 1)) {
    goto LABEL_237;
  }
  uint64_t v52 = v38;
  if (v51 + 1 <= 0) {
    goto LABEL_49;
  }
  if (v49 == 1)
  {
    v36 -= v50;
LABEL_47:
    if (!v36)
    {
LABEL_64:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v57 = v29 & 0xFFFFFFFFFFFFF0FFLL;
      uint64_t v29 = v52;
      unint64_t v27 = v57 | (v49 << 8);
      uint64_t v31 = v207;
      goto LABEL_38;
    }
    __break(1u);
LABEL_49:
    uint64_t v49 = 0;
    goto LABEL_64;
  }
  uint64_t v53 = *(void *)(v38 + 48);
  BOOL v44 = __OFSUB__(v51, v53);
  uint64_t v54 = v51 - v53;
  if (v44)
  {
LABEL_241:
    __break(1u);
    goto LABEL_242;
  }
  if (!__OFADD__(v54, 1))
  {
    if (v54 + 1 < 1)
    {
      uint64_t v49 = 1;
      uint64_t v36 = v51;
      goto LABEL_64;
    }
    if (v49 != 2)
    {
      id v55 = (void *)(v38 + 72);
      uint64_t v56 = 2;
      while (1)
      {
        if (v49 == v56) {
          goto LABEL_233;
        }
        uint64_t v36 = v54 - *v55;
        if (__OFSUB__(v54, *v55)) {
          goto LABEL_234;
        }
        if (__OFADD__(v36, 1)) {
          goto LABEL_235;
        }
        if (v36 + 1 < 1) {
          break;
        }
        ++v56;
        v55 += 3;
        uint64_t v54 = v36;
        if (v49 == v56) {
          goto LABEL_47;
        }
      }
      uint64_t v49 = v56;
      uint64_t v36 = v54;
      goto LABEL_64;
    }
    uint64_t v36 = v54;
    goto LABEL_47;
  }
LABEL_242:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString.Runs.AttributesSlice1.subscript.getter(_OWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v203 = a6;
  uint64_t v201 = a5;
  uint64_t v206 = a4;
  uint64_t v7 = a3;
  unint64_t v177 = a2;
  uint64_t v179 = a1;
  long long v8 = v6[9];
  long long v9 = v6[11];
  long long v265 = v6[10];
  long long v266 = v9;
  long long v10 = v6[5];
  long long v11 = v6[7];
  long long v261 = v6[6];
  long long v262 = v11;
  long long v13 = v6[7];
  long long v12 = v6[8];
  long long v14 = v12;
  long long v264 = v6[9];
  long long v263 = v12;
  long long v15 = v6[1];
  long long v16 = v6[3];
  long long v257 = v6[2];
  long long v258 = v16;
  long long v18 = v6[3];
  long long v17 = v6[4];
  long long v19 = v17;
  long long v260 = v6[5];
  long long v259 = v17;
  long long v20 = *v6;
  long long v21 = *v6;
  v256[1] = v6[1];
  v256[0] = v20;
  long long v22 = v6[11];
  long long v244 = v265;
  long long v245 = v22;
  long long v240 = v261;
  long long v241 = v13;
  long long v242 = v14;
  long long v243 = v8;
  long long v237 = v257;
  long long v238 = v18;
  v239[0] = v19;
  v239[1] = v10;
  uint64_t v23 = *((void *)v6 + 25);
  uint64_t v267 = *((void *)v6 + 24);
  uint64_t v24 = *((void *)v6 + 26);
  uint64_t v246 = *((void *)v6 + 24);
  long long v235 = v21;
  long long v236 = v15;
  *(void *)&long long v225 = a3;
  *((void *)&v225 + 1) = a4;
  *(void *)&long long v226 = a5;
  *((void *)&v226 + 1) = a6;
  outlined retain of AttributedString.Runs((uint64_t)v256);
  uint64_t v207 = v23;
  uint64_t v204 = v24;
  AttributedString.Runs._slicedRunBoundary(roundingDown:attributeNames:constraints:)((uint64_t *)&v230, (uint64_t *)&v225, v23, v24, (uint64_t *)&v250);
  unint64_t v178 = *((void *)&v250 + 1);
  uint64_t v183 = v250;
  uint64_t v184 = v251;
  outlined release of AttributedString.Runs((uint64_t)v256);
  uint64_t v181 = *((void *)&v230 + 1);
  uint64_t v182 = v230;
  unint64_t v185 = *((void *)&v231 + 1);
  uint64_t v180 = v231;
  uint64_t v25 = *((void *)&v263 + 1);
  uint64_t v27 = *((void *)&v265 + 1);
  uint64_t v26 = v265;
  uint64_t v28 = *((void *)&v266 + 1);
  unint64_t v29 = v266;
  uint64_t v30 = v267;
  outlined retain of AttributedString.Runs((uint64_t)v256);
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_214:
    __break(1u);
    goto LABEL_215;
  }
  uint64_t v200 = v7;
  uint64_t v26 = v203;
  if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
  {
LABEL_215:
    __break(1u);
    goto LABEL_216;
  }
  if (!*(void *)(v207 + 16))
  {
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
    goto LABEL_218;
  }
  uint64_t v210 = *(void *)(v207 + 16);
  uint64_t v186 = v30;
  unint64_t v187 = v28;
  unint64_t v188 = v29;
  uint64_t v189 = v27;
  uint64_t v25 = *(void *)(*(void *)&v256[0] + 64);
  uint64_t v28 = *(void *)(*(void *)&v256[0] + 72);
  uint64_t v208 = *(void *)&v256[0];
  uint64_t v31 = *(void *)(*(void *)&v256[0] + 80);
  uint64_t v209 = *(void *)(*(void *)&v256[0] + 88);
  swift_unknownObjectRetain();
  uint64_t v32 = BigString.Index.utf8Offset.getter();
  if (v25) {
    uint64_t v33 = v31;
  }
  else {
    uint64_t v33 = 0;
  }
  if (v32 < 0) {
    goto LABEL_217;
  }
  uint64_t v34 = v32;
  if (v33 < v32) {
    goto LABEL_217;
  }
  if (!v25 || v32 >= v31 || !*(_WORD *)(v25 + 16))
  {
    unint64_t v46 = swift_unknownObjectRetain();
    unint64_t v29 = specialized Rope._endPath.getter(v46);
    swift_unknownObjectRelease();
    uint64_t v7 = 0;
    uint64_t v30 = 0;
    if (!v25)
    {
      uint64_t v26 = 0;
LABEL_66:
      uint64_t v199 = v34 - v30;
      if (__OFSUB__(v34, v30))
      {
LABEL_218:
        __break(1u);
        goto LABEL_219;
      }
      uint64_t v54 = v208;
      long long v55 = *(_OWORD *)(v208 + 16);
      long long v56 = *(_OWORD *)(v208 + 32);
      long long v274 = *(_OWORD *)(v208 + 48);
      v273[1] = v56;
      v273[0] = v55;
      long long v57 = *(_OWORD *)(v208 + 16);
      long long v58 = *(_OWORD *)(v208 + 32);
      v275[2] = v274;
      v275[1] = v58;
      v275[0] = v57;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v275, (uint64_t)v276);
      outlined retain of Locale((uint64_t)v276);
      uint64_t v25 = (uint64_t)v273;
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v273);
      if (__OFSUB__(0, v30))
      {
LABEL_219:
        __break(1u);
        goto LABEL_220;
      }
      uint64_t v25 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v60 = v59;
      uint64_t v62 = v61;
      uint64_t v28 = v63;
      outlined release of Locale((uint64_t)&v247);
      uint64_t v194 = *((void *)&v259 + 1);
      if (v26 >= *((uint64_t *)&v259 + 1))
      {
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }
      if (v209 != *(void *)(v208 + 88))
      {
LABEL_221:
        __break(1u);
        goto LABEL_222;
      }
      unint64_t v202 = v29;
      uint64_t v172 = v28;
      uint64_t v173 = v62;
      uint64_t v174 = v60;
      uint64_t v175 = v25;
      uint64_t v25 = *(void *)(v208 + 64);
      unint64_t v29 = *(void *)(v208 + 72);
      uint64_t v30 = v7;
      if (v7)
      {
        unint64_t v64 = v202;
        unint64_t v65 = v7 + 24 * ((v202 >> ((4 * *(unsigned char *)(v7 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v7 = *(void *)(v65 + 32);
        uint64_t v66 = *(void *)(v65 + 40);
        swift_bridgeObjectRetain();
        uint64_t v176 = v66;
        swift_bridgeObjectRetain();
        uint64_t v67 = v209;
        uint64_t v68 = v209;
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v64 = v202;
        specialized Rope._Node.subscript.getter(v202, v25);
        uint64_t v7 = v69;
        uint64_t v176 = v70;
        swift_unknownObjectRelease();
        uint64_t v25 = *(void *)(v208 + 64);
        unint64_t v29 = *(void *)(v208 + 72);
        uint64_t v68 = *(void *)(v208 + 88);
        uint64_t v67 = v209;
      }
      uint64_t v171 = (long long *)(v208 + 16);
      uint64_t v198 = v26 + 1;
      uint64_t v28 = (uint64_t)v239 + 8;
      *(void *)&long long v235 = v67;
      *((void *)&v235 + 1) = v64;
      long long v216 = (long long *)&v253;
      *(void *)&long long v236 = v30;
      uint64_t v193 = (uint64_t *)(v207 + 40);
      uint64_t v26 = v210;
      uint64_t v205 = v7;
      uint64_t v213 = (char *)v239 + 8;
LABEL_74:
      if (v67 != v68) {
        goto LABEL_208;
      }
      uint64_t v196 = v68;
      if (v30)
      {
        unint64_t v29 = v202;
        unint64_t v71 = v30 + 24 * ((v202 >> ((4 * *(unsigned char *)(v30 + 18) + 8) & 0x3C)) & 0xF);
        unint64_t v72 = *(void *)(v71 + 24);
        uint64_t v28 = *(void *)(v71 + 40);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v29 = v202;
        unint64_t v72 = specialized Rope._Node.subscript.getter(v202, v25);
        uint64_t v28 = v73;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (__OFADD__(v199, v72)) {
        goto LABEL_209;
      }
      uint64_t v191 = v199 + v72;
      if (v25)
      {
        unint64_t v74 = ((-15 << ((4 * *(unsigned char *)(v25 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v25 + 18) | ((unint64_t)*(unsigned __int16 *)(v25 + 16) << ((4 * *(unsigned char *)(v25 + 18) + 8) & 0x3C));
        swift_unknownObjectRetain();
      }
      else
      {
        unint64_t v74 = 0;
      }
      uint64_t v28 = (uint64_t)v213;
      if (v29 >= v74) {
        goto LABEL_210;
      }
      if (v30)
      {
        char v75 = (4 * *(unsigned char *)(v30 + 18) + 8) & 0x3C;
        unint64_t v76 = ((v29 >> v75) & 0xF) + 1;
        if (v76 < *(unsigned __int16 *)(v30 + 16))
        {
          unint64_t v197 = (v76 << v75) | ((-15 << v75) - 1) & v29;
          swift_unknownObjectRelease_n();
LABEL_89:
          uint64_t v25 = v236;
LABEL_97:
          if (v198 == v194)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_138:
            if (v196 == *(void *)(v54 + 88))
            {
              if (v30)
              {
                uint64_t v25 = *(void *)(v30 + 24 * ((v29 >> ((4 * *(unsigned char *)(v30 + 18) + 8) & 0x3C)) & 0xF) + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                uint64_t v112 = *(void *)(v54 + 64);
                swift_unknownObjectRetain();
                uint64_t v25 = specialized Rope._Node.subscript.getter(v29, v112);
                swift_unknownObjectRelease();
              }
              uint64_t v26 = v175;
              uint64_t v30 = v172;
              uint64_t v28 = v173;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v113 = v199 + v25;
              if (!__OFADD__(v199, v25))
              {
                long long v114 = v171;
                long long v115 = *v171;
                long long v116 = v171[1];
                long long v272 = v171[2];
                long long v271 = v116;
                long long v270 = v115;
                long long v117 = *v171;
                long long v118 = v171[1];
                v277[2] = v272;
                v277[1] = v118;
                v277[0] = v117;
                outlined init with take of any PredicateExpression<Self.Output == B1>(v277, (uint64_t)v278);
                outlined retain of Locale((uint64_t)v278);
                uint64_t v25 = (uint64_t)&v270;
                BigString.utf8.getter();
                outlined release of Locale((uint64_t)&v270);
                if (!__OFSUB__(v113, BigString.Index.utf8Offset.getter()))
                {
                  uint64_t v119 = BigString.UTF8View.index(_:offsetBy:)();
                  uint64_t v7 = v120;
                  uint64_t v26 = v121;
                  uint64_t v123 = v122;
                  outlined release of Locale((uint64_t)&v248);
                  uint64_t v125 = v188;
                  uint64_t v124 = v189;
                  uint64_t v126 = v186;
                  unint64_t v29 = v187;
                  char v127 = static BigString.Index.< infix(_:_:)();
                  if (v127) {
                    uint64_t v128 = v124;
                  }
                  else {
                    uint64_t v128 = v119;
                  }
                  if (v127)
                  {
                    uint64_t v7 = v125;
                    uint64_t v26 = v29;
                    uint64_t v123 = v126;
                  }
                  uint64_t v30 = v128;
                  long long v129 = *v114;
                  long long v130 = v114[1];
                  long long v269 = v114[2];
                  v268[1] = v130;
                  v268[0] = v129;
                  long long v131 = *v114;
                  v279[1] = v114[1];
                  v279[2] = v269;
                  v279[0] = v131;
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v279, (uint64_t)v280);
                  outlined retain of Locale((uint64_t)v280);
                  uint64_t v132 = v200;
                  uint64_t v25 = v201;
                  uint64_t v28 = v206;
                  uint64_t v133 = v203;
                  if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
                  {
                    *(void *)&long long v225 = v132;
                    *((void *)&v225 + 1) = v28;
                    *(void *)&long long v226 = v25;
                    *((void *)&v226 + 1) = v133;
                    *(void *)&long long v227 = v30;
                    *((void *)&v227 + 1) = v7;
                    *(void *)&long long v228 = v26;
                    *((void *)&v228 + 1) = v123;
                    uint64_t v134 = v204;
                    unint64_t v29 = *(void *)(v204 + 16);
                    uint64_t v217 = v7;
                    if (v29 && (static BigString.Index.== infix(_:_:)() & 1) == 0)
                    {
                      swift_bridgeObjectRetain();
                      uint64_t v25 = 40;
                      unint64_t v135 = v29;
                      while (*(void *)(v134 + v25))
                      {
                        swift_bridgeObjectRelease();
                        v25 += 16;
                        if (!--v135)
                        {
                          swift_bridgeObjectRelease();
                          uint64_t v7 = v200;
                          uint64_t v136 = v201;
                          uint64_t v28 = v206;
LABEL_159:
                          uint64_t v137 = 0;
                          *(void *)&long long v218 = v7;
                          *((void *)&v218 + 1) = v28;
                          *(void *)&long long v219 = v136;
                          *((void *)&v219 + 1) = v133;
                          *(void *)&long long v220 = v30;
                          *((void *)&v220 + 1) = v217;
                          uint64_t v138 = 40;
                          *(void *)&long long v221 = v26;
                          *((void *)&v221 + 1) = v123;
                          while (1)
                          {
                            uint64_t v139 = v137 + 1;
                            if (__OFADD__(v137, 1)) {
                              goto LABEL_204;
                            }
                            if (*(void *)(v204 + v138))
                            {
                              uint64_t v140 = v30;
                              uint64_t v141 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
                              int v142 = (char *)MEMORY[0x1E4FBC860];
                              do
                              {
                                unint64_t v143 = *v141;
                                if (*v141)
                                {
                                  uint64_t v144 = *(v141 - 1);
                                  if ((v143 & 0x2000000000000000) != 0 ? HIBYTE(v143) & 0xF : v144 & 0xFFFFFFFFFFFFLL)
                                  {
                                    if ((v143 & 0x1000000000000000) != 0)
                                    {
                                      int v146 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                                    }
                                    else
                                    {
                                      if ((v143 & 0x2000000000000000) != 0)
                                      {
                                        *(void *)&long long v235 = *(v141 - 1);
                                        *((void *)&v235 + 1) = v143 & 0xFFFFFFFFFFFFFFLL;
                                        swift_bridgeObjectRetain();
                                      }
                                      else
                                      {
                                        if ((v144 & 0x1000000000000000) == 0) {
                                          _StringObject.sharedUTF8.getter();
                                        }
                                        swift_bridgeObjectRetain();
                                      }
                                      int v146 = _decodeScalar(_:startingAt:)();
                                      swift_bridgeObjectRelease();
                                    }
                                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                                      int v142 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v142 + 2) + 1, 1, v142);
                                    }
                                    unint64_t v148 = *((void *)v142 + 2);
                                    unint64_t v147 = *((void *)v142 + 3);
                                    if (v148 >= v147 >> 1) {
                                      int v142 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v147 > 1), v148 + 1, 1, v142);
                                    }
                                    *((void *)v142 + 2) = v148 + 1;
                                    *(_DWORD *)&v142[4 * v148 + 32] = v146;
                                  }
                                }
                                v141 += 2;
                                --v29;
                              }
                              while (v29);
                              swift_bridgeObjectRelease();
                              BigString.unicodeScalars.getter();
                              BigString.UnicodeScalarView.subscript.getter();
                              outlined release of Locale((uint64_t)v255);
                              uint64_t v149 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v142);
                              uint64_t v7 = v150;
                              uint64_t v25 = v151;
                              uint64_t v28 = v152;
                              swift_bridgeObjectRelease();
                              outlined release of Locale((uint64_t)&v235);
                              uint64_t v30 = v140;
                              if (v28 == 2) {
                                goto LABEL_185;
                              }
                              char v164 = static BigString.Index.< infix(_:_:)();
                              outlined release of Locale((uint64_t)v268);
                              uint64_t result = outlined release of AttributedString.Runs((uint64_t)v256);
                              if (v164) {
                                goto LABEL_240;
                              }
                              uint64_t v30 = v149;
                              uint64_t v26 = v25;
                              uint64_t v153 = v183;
                              uint64_t v154 = v184;
                              goto LABEL_186;
                            }
                            v138 += 16;
                            ++v137;
                            if (v139 == v29) {
                              goto LABEL_185;
                            }
                          }
                        }
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease_n();
                      BigString.utf8.getter();
                      BigString.UTF8View.subscript.getter();
                      outlined release of Locale((uint64_t)&v249);
                      uint64_t v7 = v200;
                      uint64_t v136 = v201;
                      uint64_t v28 = v206;
                      uint64_t result = static BigString.Index.< infix(_:_:)();
                      if (result) {
                        goto LABEL_238;
                      }
                      v223[0] = v7;
                      v223[1] = v28;
                      v223[2] = v136;
                      v223[3] = v133;
                      v223[4] = v7;
                      v223[5] = v28;
                      v223[6] = v136;
                      v223[7] = v133;
                      specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)v223, (uint64_t *)&v235);
                      outlined release of Locale((uint64_t)&v250);
                      uint64_t v25 = *((void *)&v238 + 1);
                      if (*((void *)&v238 + 1) == 2) {
                        goto LABEL_159;
                      }
                      uint64_t v30 = v237;
                      uint64_t v26 = v238;
                      uint64_t v217 = *((void *)&v237 + 1);
                      uint64_t result = static BigString.Index.< infix(_:_:)();
                      uint64_t v123 = v25;
                      if ((result & 1) == 0) {
                        goto LABEL_159;
                      }
                      goto LABEL_239;
                    }
LABEL_185:
                    outlined release of Locale((uint64_t)v268);
                    outlined release of AttributedString.Runs((uint64_t)v256);
                    uint64_t v28 = v123;
                    uint64_t v153 = v183;
                    uint64_t v154 = v184;
                    uint64_t v7 = v217;
LABEL_186:
                    unint64_t v29 = v185;
                    if (v153 == *(void *)(v208 + 88))
                    {
                      if (v154)
                      {
                        uint64_t v25 = *(void *)(v154 + 24 * ((v178 >> ((4 * *(unsigned char *)(v154 + 18) + 8) & 0x3C)) & 0xF) + 32);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        uint64_t v155 = v30;
                        uint64_t v156 = *(void *)(v208 + 64);
                        swift_unknownObjectRetain();
                        specialized Rope._Node.subscript.getter(v178, v156);
                        uint64_t v25 = v157;
                        uint64_t v30 = v155;
                        swift_unknownObjectRelease();
                      }
                      if (one-time initialization token for name == -1)
                      {
                        if (!*(void *)(v25 + 16))
                        {
LABEL_228:
                          uint64_t v234 = 0;
                          long long v232 = 0u;
                          long long v233 = 0u;
                          long long v230 = 0u;
                          long long v231 = 0u;
                          goto LABEL_229;
                        }
LABEL_192:
                        uint64_t v158 = v7;
                        uint64_t v159 = v30;
                        uint64_t v160 = qword_1E8ED5E58;
                        uint64_t v161 = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
                        swift_bridgeObjectRetain();
                        unint64_t v162 = specialized __RawDictionaryStorage.find<A>(_:)(v161, v160);
                        if (v163)
                        {
                          outlined init with copy of AttributedString._AttributeValue(*(void *)(v25 + 56) + 72 * v162, (uint64_t)&v230);
                        }
                        else
                        {
                          uint64_t v234 = 0;
                          long long v232 = 0u;
                          long long v233 = 0u;
                          long long v230 = 0u;
                          long long v231 = 0u;
                        }
                        uint64_t v7 = v158;
                        swift_bridgeObjectRelease();
                        uint64_t v30 = v159;
                        if (*((void *)&v231 + 1))
                        {
                          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v230, (uint64_t)&v224);
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                          swift_dynamicCast();
                          outlined destroy of AttributedString._AttributeValue((uint64_t)&v230);
LABEL_230:
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          uint64_t v167 = v181;
                          uint64_t v166 = v182;
                          uint64_t v168 = v180;
                          uint64_t result = static BigString.Index.< infix(_:_:)();
                          if ((result & 1) == 0)
                          {
                            uint64_t v169 = v177;
                            void *v177 = v166;
                            v169[1] = v167;
                            void v169[2] = v168;
                            v169[3] = v29;
                            _OWORD v169[4] = v30;
                            v169[5] = v7;
                            v169[6] = v26;
                            v169[7] = v28;
                            return result;
                          }
                          __break(1u);
LABEL_233:
                          __break(1u);
LABEL_234:
                          __break(1u);
LABEL_235:
                          __break(1u);
                          goto LABEL_236;
                        }
LABEL_229:
                        outlined destroy of Any?((uint64_t)&v230, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                        uint64_t v165 = v179;
                        _OWORD *v179 = xmmword_182106C90;
                        *((unsigned char *)v165 + 20) = 0;
                        *((_DWORD *)v165 + 4) = 0;
                        goto LABEL_230;
                      }
LABEL_227:
                      swift_once();
                      if (!*(void *)(v25 + 16)) {
                        goto LABEL_228;
                      }
                      goto LABEL_192;
                    }
LABEL_226:
                    __break(1u);
                    goto LABEL_227;
                  }
LABEL_225:
                  __break(1u);
                  goto LABEL_226;
                }
LABEL_224:
                __break(1u);
                goto LABEL_225;
              }
LABEL_223:
              __break(1u);
              goto LABEL_224;
            }
LABEL_222:
            __break(1u);
            goto LABEL_223;
          }
          if ((void)v235 != *(void *)(v54 + 88)) {
            goto LABEL_211;
          }
          uint64_t v209 = v235;
          uint64_t v192 = v30;
          uint64_t v190 = v25;
          if (v25)
          {
            unint64_t v87 = v25 + 24 * ((v197 >> ((4 * *(unsigned char *)(v25 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v25 = *(void *)(v87 + 32);
            uint64_t v88 = *(void *)(v87 + 40);
            swift_bridgeObjectRetain();
            uint64_t v195 = v88;
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v89 = *(void *)(v54 + 64);
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v197, v89);
            uint64_t v195 = v90;
            uint64_t v25 = v91;
            swift_unknownObjectRelease();
          }
          swift_bridgeObjectRetain();
          uint64_t v30 = 0;
          unint64_t v92 = v193;
          uint64_t v217 = v25;
          while (1)
          {
            unint64_t v29 = v30 + 1;
            if (__OFADD__(v30, 1))
            {
              __break(1u);
LABEL_201:
              __break(1u);
              goto LABEL_202;
            }
            uint64_t v95 = *(v92 - 1);
            uint64_t v94 = *v92;
            if (*(void *)(v7 + 16))
            {
              swift_bridgeObjectRetain_n();
              unint64_t v96 = specialized __RawDictionaryStorage.find<A>(_:)(v95, v94);
              if (v97)
              {
                outlined init with copy of AttributedString._AttributeValue(*(void *)(v7 + 56) + 72 * v96, (uint64_t)&v230);
              }
              else
              {
                uint64_t v234 = 0;
                long long v232 = 0u;
                long long v233 = 0u;
                long long v230 = 0u;
                long long v231 = 0u;
              }
              swift_bridgeObjectRelease();
              uint64_t v25 = v217;
              if (!*(void *)(v217 + 16))
              {
LABEL_112:
                uint64_t v229 = 0;
                long long v227 = 0u;
                long long v228 = 0u;
                long long v225 = 0u;
                long long v226 = 0u;
                goto LABEL_119;
              }
            }
            else
            {
              uint64_t v234 = 0;
              long long v232 = 0u;
              long long v233 = 0u;
              long long v230 = 0u;
              long long v231 = 0u;
              swift_bridgeObjectRetain();
              if (!*(void *)(v25 + 16)) {
                goto LABEL_112;
              }
            }
            swift_bridgeObjectRetain();
            unint64_t v98 = specialized __RawDictionaryStorage.find<A>(_:)(v95, v94);
            if (v99)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v25 + 56) + 72 * v98, (uint64_t)&v225);
            }
            else
            {
              uint64_t v229 = 0;
              long long v227 = 0u;
              long long v228 = 0u;
              long long v225 = 0u;
              long long v226 = 0u;
            }
            swift_bridgeObjectRelease();
LABEL_119:
            uint64_t v25 = (uint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v230, (uint64_t)&v235, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v225, v28, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!*((void *)&v236 + 1))
            {
              if ((void)v240) {
                goto LABEL_136;
              }
              outlined destroy of Any?((uint64_t)&v235, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v225, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v230, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_106;
            }
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v235, (uint64_t)v223, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!(void)v240) {
              goto LABEL_135;
            }
            long long v100 = *(_OWORD *)(v28 + 48);
            long long v220 = *(_OWORD *)(v28 + 32);
            long long v221 = v100;
            uint64_t v222 = *(void *)(v28 + 64);
            long long v101 = *(_OWORD *)(v28 + 16);
            long long v218 = *(_OWORD *)v28;
            long long v219 = v101;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v223, (uint64_t)v279);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v218, (uint64_t)v277);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v279, (uint64_t)&v250, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v277, (uint64_t)v216, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v252)
            {
              if (!v254)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v250);
LABEL_104:
                char v93 = 0;
                goto LABEL_105;
              }
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v250, (uint64_t)&v270);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v216, (uint64_t)v268);
              uint64_t v102 = *((void *)&v271 + 1);
              uint64_t v212 = v272;
              long long v211 = __swift_project_boxed_opaque_existential_1(&v270, *((uint64_t *)&v271 + 1));
              long long v215 = &v170;
              uint64_t v103 = *(void *)(v102 - 8);
              MEMORY[0x1F4188790](v211);
              char v105 = (char *)&v170 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v268, (uint64_t)v255);
              uint64_t v106 = type metadata accessor for Optional();
              uint64_t v214 = &v170;
              uint64_t v107 = *(void *)(v106 - 8);
              MEMORY[0x1F4188790](v106);
              uint64_t v109 = (char *)&v170 - v108;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              int v110 = swift_dynamicCast();
              uint64_t v111 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v103 + 56);
              if (v110)
              {
                v111(v109, 0, 1, v102);
                (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v105, v109, v102);
                char v93 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v103 + 8))(v105, v102);
              }
              else
              {
                v111(v109, 1, 1, v102);
                (*(void (**)(char *, uint64_t))(v107 + 8))(v109, v106);
                char v93 = 0;
              }
              uint64_t v26 = v210;
              uint64_t v7 = v205;
              uint64_t v25 = (uint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v268);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v270);
              uint64_t v28 = (uint64_t)v213;
            }
            else
            {
              if (v254)
              {
                outlined destroy of Any?((uint64_t)v216, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_104;
              }
              char v93 = 1;
            }
LABEL_105:
            outlined destroy of Any?((uint64_t)v277, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?((uint64_t)v279, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v218);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v223);
            outlined destroy of Any?((uint64_t)&v235, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v225, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v230, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v93 & 1) == 0) {
              goto LABEL_137;
            }
LABEL_106:
            v92 += 2;
            ++v30;
            uint64_t v25 = v217;
            if (v29 == v26)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v54 = v208;
              uint64_t v67 = v209;
              uint64_t v25 = *(void *)(v208 + 64);
              unint64_t v29 = *(void *)(v208 + 72);
              uint64_t v68 = *(void *)(v208 + 88);
              uint64_t v199 = v191;
              *(void *)&long long v235 = v209;
              *((void *)&v235 + 1) = v197;
              uint64_t v30 = v190;
              unint64_t v202 = v197;
              *(void *)&long long v236 = v190;
              BOOL v42 = __OFADD__(v198++, 1);
              if (!v42) {
                goto LABEL_74;
              }
              __break(1u);
LABEL_135:
              outlined destroy of AttributedString._AttributeValue((uint64_t)v223);
LABEL_136:
              outlined destroy of Any?((uint64_t)&v235, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?((uint64_t)&v225, (uint64_t *)v25);
              outlined destroy of Any?((uint64_t)&v230, (uint64_t *)v25);
LABEL_137:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v54 = v208;
              uint64_t v30 = v192;
              unint64_t v29 = v202;
              goto LABEL_138;
            }
          }
        }
      }
      int v77 = *(unsigned __int8 *)(v25 + 18);
      char v78 = (4 * v77 + 8) & 0x3C;
      uint64_t v79 = (v29 >> v78) & 0xF;
      *(void *)&long long v250 = v79;
      if (v77)
      {
        swift_unknownObjectRetain();
        char v80 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v25 + 24, (uint64_t *)&v250, (uint64_t)&v235, v25, v77);
        swift_unknownObjectRelease();
        uint64_t v54 = v208;
        if (v80)
        {
          swift_unknownObjectRelease_n();
          unint64_t v197 = *((void *)&v235 + 1);
          goto LABEL_89;
        }
      }
      else
      {
        uint64_t v81 = v79 + 1;
        if (v79 + 1 < (unint64_t)*(unsigned __int16 *)(v25 + 16))
        {
          swift_unknownObjectRelease_n();
          unint64_t v197 = (v81 << v78) | ((-15 << v78) - 1) & v29;
          uint64_t v54 = v208;
          goto LABEL_97;
        }
        uint64_t v54 = v208;
      }
      if (v25)
      {
        int v82 = *(unsigned __int8 *)(v25 + 18);
        uint64_t v83 = *(unsigned __int16 *)(v25 + 16);
        swift_unknownObjectRelease_n();
        char v84 = (4 * v82 + 8) & 0x3C;
        uint64_t v85 = ((-15 << v84) - 1) & v82;
        uint64_t v86 = v83 << v84;
        uint64_t v54 = v208;
        unint64_t v197 = v85 | v86;
      }
      else
      {
        unint64_t v197 = 0;
      }
      uint64_t v25 = 0;
      *(void *)&long long v235 = v196;
      goto LABEL_97;
    }
LABEL_38:
    swift_unknownObjectRetain();
    uint64_t v26 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v209, v29, v7, v25, v28);
    swift_unknownObjectRelease_n();
    goto LABEL_66;
  }
  uint64_t v217 = v28;
  uint64_t v28 = *(unsigned __int8 *)(v25 + 18);
  if (*(unsigned char *)(v25 + 18))
  {
    swift_unknownObjectRetain_n();
    uint64_t v7 = -15;
    unint64_t v29 = 24;
    uint64_t v30 = v34;
    uint64_t v26 = v25;
    while (1)
    {
      uint64_t v38 = *(unsigned __int16 *)(v26 + 16);
      if (!*(_WORD *)(v26 + 16)) {
        break;
      }
      uint64_t v39 = *(void *)(v26 + 40);
      uint64_t v40 = v30 - v39;
      if (__OFSUB__(v30, v39)) {
        goto LABEL_206;
      }
      if (__OFADD__(v40, 1)) {
        goto LABEL_207;
      }
      if (v40 + 1 <= 0)
      {
        uint64_t v38 = 0;
        goto LABEL_16;
      }
      if (v38 == 1)
      {
        v30 -= v39;
        break;
      }
      uint64_t v41 = *(void *)(v26 + 64);
      BOOL v42 = __OFSUB__(v40, v41);
      uint64_t v43 = v40 - v41;
      if (v42) {
        goto LABEL_212;
      }
      if (__OFADD__(v43, 1)) {
        goto LABEL_213;
      }
      if (v43 + 1 < 1)
      {
        uint64_t v38 = 1;
        uint64_t v30 = v40;
        goto LABEL_16;
      }
      if (v38 == 2)
      {
        uint64_t v30 = v43;
        break;
      }
      BOOL v44 = (void *)(v26 + 88);
      uint64_t v45 = 2;
      while (1)
      {
        if (v38 == v45) {
          goto LABEL_201;
        }
        uint64_t v30 = v43 - *v44;
        if (__OFSUB__(v43, *v44))
        {
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
          goto LABEL_205;
        }
        if (__OFADD__(v30, 1)) {
          goto LABEL_203;
        }
        if (v30 + 1 < 1) {
          break;
        }
        ++v45;
        v44 += 3;
        uint64_t v43 = v30;
        if (v38 == v45) {
          goto LABEL_15;
        }
      }
      uint64_t v38 = v45;
      uint64_t v30 = v43;
LABEL_16:
      char v35 = (4 * *(unsigned char *)(v26 + 18) + 8) & 0x3C;
      uint64_t v28 = ((-15 << v35) - 1) & v28 | (v38 << v35);
      uint64_t v36 = *(void *)(v26 + 24 + 24 * v38);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v26 = v36;
      if (!*(unsigned char *)(v36 + 18)) {
        goto LABEL_40;
      }
    }
LABEL_15:
    if (!v30) {
      goto LABEL_16;
    }
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
    goto LABEL_214;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v30 = v34;
  uint64_t v36 = v25;
LABEL_40:
  uint64_t v47 = *(unsigned __int16 *)(v36 + 16);
  if (!*(_WORD *)(v36 + 16))
  {
    uint64_t v7 = v36;
    goto LABEL_47;
  }
  uint64_t v48 = *(void *)(v36 + 24);
  uint64_t v49 = v30 - v48;
  if (__OFSUB__(v30, v48))
  {
LABEL_236:
    __break(1u);
LABEL_237:
    __break(1u);
LABEL_238:
    __break(1u);
LABEL_239:
    __break(1u);
LABEL_240:
    __break(1u);
    goto LABEL_241;
  }
  if (__OFADD__(v49, 1)) {
    goto LABEL_237;
  }
  uint64_t v7 = v36;
  if (v49 + 1 <= 0) {
    goto LABEL_49;
  }
  if (v47 == 1)
  {
    v30 -= v48;
LABEL_47:
    if (!v30)
    {
LABEL_64:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v29 = v28 & 0xFFFFFFFFFFFFF0FFLL | (v47 << 8);
      uint64_t v28 = v217;
      goto LABEL_38;
    }
    __break(1u);
LABEL_49:
    uint64_t v47 = 0;
    goto LABEL_64;
  }
  uint64_t v50 = *(void *)(v36 + 48);
  BOOL v42 = __OFSUB__(v49, v50);
  uint64_t v51 = v49 - v50;
  if (v42)
  {
LABEL_241:
    __break(1u);
    goto LABEL_242;
  }
  if (!__OFADD__(v51, 1))
  {
    if (v51 + 1 < 1)
    {
      uint64_t v47 = 1;
      uint64_t v30 = v49;
      goto LABEL_64;
    }
    if (v47 != 2)
    {
      uint64_t v52 = (void *)(v36 + 72);
      uint64_t v53 = 2;
      while (1)
      {
        if (v47 == v53) {
          goto LABEL_233;
        }
        uint64_t v30 = v51 - *v52;
        if (__OFSUB__(v51, *v52)) {
          goto LABEL_234;
        }
        if (__OFADD__(v30, 1)) {
          goto LABEL_235;
        }
        if (v30 + 1 < 1) {
          break;
        }
        ++v53;
        v52 += 3;
        uint64_t v51 = v30;
        if (v47 == v53) {
          goto LABEL_47;
        }
      }
      uint64_t v47 = v53;
      uint64_t v30 = v51;
      goto LABEL_64;
    }
    uint64_t v30 = v51;
    goto LABEL_47;
  }
LABEL_242:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString.Runs.AttributesSlice1.subscript.getter(unint64_t a1, void *a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v200 = a6;
  unint64_t v198 = a5;
  uint64_t v204 = a4;
  uint64_t v175 = a2;
  unint64_t v189 = a1;
  long long v8 = v6[9];
  long long v9 = v6[11];
  long long v262 = v6[10];
  long long v263 = v9;
  long long v10 = v6[5];
  long long v11 = v6[7];
  long long v258 = v6[6];
  long long v259 = v11;
  long long v13 = v6[7];
  long long v12 = v6[8];
  long long v14 = v12;
  long long v261 = v6[9];
  long long v260 = v12;
  long long v15 = v6[1];
  long long v16 = v6[3];
  long long v254 = v6[2];
  long long v255 = v16;
  long long v18 = v6[3];
  long long v17 = v6[4];
  long long v19 = v17;
  long long v257 = v6[5];
  long long v256 = v17;
  long long v20 = *v6;
  long long v21 = *v6;
  v253[1] = v6[1];
  v253[0] = v20;
  long long v22 = v6[11];
  long long v241 = v262;
  long long v242 = v22;
  long long v237 = v258;
  long long v238 = v13;
  long long v239 = v14;
  long long v240 = v8;
  long long v234 = v254;
  long long v235 = v18;
  v236[0] = v19;
  v236[1] = v10;
  uint64_t v23 = *((void *)v6 + 25);
  unint64_t v264 = *((void *)v6 + 24);
  uint64_t v24 = *((void *)v6 + 26);
  uint64_t v243 = *((void *)v6 + 24);
  long long v232 = v21;
  long long v233 = v15;
  *(void *)&long long v222 = a3;
  *((void *)&v222 + 1) = a4;
  *(void *)&long long v223 = a5;
  *((void *)&v223 + 1) = a6;
  outlined retain of AttributedString.Runs((uint64_t)v253);
  uint64_t v202 = v23;
  uint64_t v190 = v24;
  AttributedString.Runs._slicedRunBoundary(roundingDown:attributeNames:constraints:)((uint64_t *)&v227, (uint64_t *)&v222, v23, v24, (uint64_t *)&v247);
  unint64_t v176 = *((void *)&v247 + 1);
  uint64_t v180 = v247;
  uint64_t v181 = v248;
  outlined release of AttributedString.Runs((uint64_t)v253);
  uint64_t v178 = *((void *)&v227 + 1);
  uint64_t v179 = v227;
  unint64_t v182 = *((void *)&v228 + 1);
  uint64_t v177 = v228;
  uint64_t v25 = *((void *)&v260 + 1);
  uint64_t v27 = *((void *)&v261 + 1);
  unint64_t v26 = v261;
  int64_t v29 = *((void *)&v262 + 1);
  uint64_t v28 = (uint64_t *)v262;
  unint64_t v31 = *((void *)&v263 + 1);
  uint64_t v30 = v263;
  unint64_t v32 = v264;
  outlined retain of AttributedString.Runs((uint64_t)v253);
  unint64_t v201 = a3;
  uint64_t v33 = v198;
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_218:
    __break(1u);
    goto LABEL_219;
  }
  uint64_t v27 = v200;
  unint64_t v26 = v198;
  if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
  {
LABEL_219:
    __break(1u);
    goto LABEL_220;
  }
  if (!*(void *)(v202 + 16))
  {
LABEL_220:
    __break(1u);
LABEL_221:
    __break(1u);
    goto LABEL_222;
  }
  uint64_t v209 = *(void *)(v202 + 16);
  unint64_t v183 = v32;
  unint64_t v184 = v31;
  uint64_t v185 = v30;
  int64_t v186 = v29;
  uint64_t v33 = *(void *)&v253[0];
  uint64_t v25 = *(void *)(*(void *)&v253[0] + 64);
  uint64_t v28 = *(uint64_t **)(*(void *)&v253[0] + 72);
  int64_t v29 = *(void *)(*(void *)&v253[0] + 80);
  uint64_t v203 = *(void *)(*(void *)&v253[0] + 88);
  swift_unknownObjectRetain();
  uint64_t v34 = BigString.Index.utf8Offset.getter();
  if (v25) {
    int64_t v35 = v29;
  }
  else {
    int64_t v35 = 0;
  }
  if (v34 < 0) {
    goto LABEL_221;
  }
  uint64_t v27 = v34;
  if (v35 < v34) {
    goto LABEL_221;
  }
  uint64_t v207 = v33;
  if (!v25 || v34 >= v29 || !*(_WORD *)(v25 + 16))
  {
    unint64_t v47 = swift_unknownObjectRetain();
    unint64_t v32 = specialized Rope._endPath.getter(v47);
    swift_unknownObjectRelease();
    uint64_t v30 = 0;
    uint64_t v36 = 0;
    if (!v25)
    {
      uint64_t v28 = 0;
LABEL_66:
      uint64_t v197 = v27 - v36;
      if (__OFSUB__(v27, v36))
      {
LABEL_222:
        __break(1u);
        goto LABEL_223;
      }
      long long v57 = *(_OWORD *)(v33 + 16);
      long long v58 = *(_OWORD *)(v33 + 32);
      long long v271 = *(_OWORD *)(v33 + 48);
      v270[1] = v58;
      v270[0] = v57;
      long long v59 = *(_OWORD *)(v33 + 16);
      long long v60 = *(_OWORD *)(v33 + 32);
      v272[2] = v271;
      v272[1] = v60;
      v272[0] = v59;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v272, (uint64_t)v273);
      outlined retain of Locale((uint64_t)v273);
      uint64_t v25 = (uint64_t)v270;
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v270);
      if (__OFSUB__(0, v36))
      {
LABEL_223:
        __break(1u);
        goto LABEL_224;
      }
      uint64_t v25 = BigString.UTF8View.index(_:offsetBy:)();
      int64_t v173 = v62;
      uint64_t v174 = v61;
      uint64_t v172 = v63;
      outlined release of Locale((uint64_t)&v244);
      unint64_t v64 = (char *)*((void *)&v256 + 1);
      if ((uint64_t)v28 >= *((uint64_t *)&v256 + 1))
      {
LABEL_224:
        __break(1u);
        goto LABEL_225;
      }
      if (v203 != *(void *)(v33 + 88))
      {
LABEL_225:
        __break(1u);
        goto LABEL_226;
      }
      unint64_t v199 = v32;
      uint64_t v169 = v25;
      uint64_t v25 = *(void *)(v33 + 64);
      unint64_t v32 = *(void *)(v33 + 72);
      unint64_t v26 = *(void *)(v33 + 80);
      if (v30)
      {
        int64_t v29 = v199;
        unint64_t v65 = v30 + 24 * ((v199 >> ((4 * *(unsigned char *)(v30 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v66 = *(void *)(v65 + 40);
        int64_t v208 = *(void *)(v65 + 32);
        swift_bridgeObjectRetain();
        uint64_t v171 = v66;
        swift_bridgeObjectRetain();
        uint64_t v67 = v203;
        uint64_t v68 = v203;
        uint64_t v27 = v209;
      }
      else
      {
        swift_unknownObjectRetain();
        int64_t v29 = v199;
        specialized Rope._Node.subscript.getter(v199, v25);
        int64_t v208 = v69;
        uint64_t v171 = v70;
        swift_unknownObjectRelease();
        uint64_t v25 = *(void *)(v33 + 64);
        unint64_t v32 = *(void *)(v33 + 72);
        unint64_t v26 = *(void *)(v33 + 80);
        uint64_t v68 = *(void *)(v33 + 88);
        uint64_t v27 = v209;
        uint64_t v67 = v203;
      }
      uint64_t v170 = v33 + 16;
      uint64_t v196 = (char *)v28 + 1;
      *(void *)&long long v232 = v67;
      *((void *)&v232 + 1) = v29;
      uint64_t v212 = (long long *)&v250;
      uint64_t v213 = (_OWORD *)((char *)v236 + 8);
      *(void *)&long long v233 = v30;
      uint64_t v192 = v202 + 40;
      uint64_t v168 = v64;
LABEL_74:
      if (v67 != v68) {
        goto LABEL_212;
      }
      uint64_t v194 = v68;
      if (v30)
      {
        unint64_t v32 = v199;
        unint64_t v71 = (void *)(v30 + 24 * ((v199 >> ((4 * *(unsigned char *)(v30 + 18) + 8) & 0x3C)) & 0xF));
        unint64_t v26 = v71[3];
        uint64_t v28 = (uint64_t *)v71[4];
        int64_t v29 = v71[5];
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v32 = v199;
        unint64_t v26 = specialized Rope._Node.subscript.getter(v199, v25);
        uint64_t v28 = v72;
        int64_t v29 = v73;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (__OFADD__(v197, v26)) {
        goto LABEL_213;
      }
      uint64_t v188 = v197 + v26;
      if (v25)
      {
        unint64_t v26 = ((-15 << ((4 * *(unsigned char *)(v25 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v25 + 18) | ((unint64_t)*(unsigned __int16 *)(v25 + 16) << ((4 * *(unsigned char *)(v25 + 18) + 8) & 0x3C));
        swift_unknownObjectRetain();
      }
      else
      {
        unint64_t v26 = 0;
      }
      int64_t v29 = v208;
      if (v32 >= v26) {
        goto LABEL_214;
      }
      if (v30)
      {
        char v74 = (4 * *(unsigned char *)(v30 + 18) + 8) & 0x3C;
        unint64_t v75 = ((v32 >> v74) & 0xF) + 1;
        if (v75 < *(unsigned __int16 *)(v30 + 16))
        {
          unint64_t v195 = (v75 << v74) | ((-15 << v74) - 1) & v32;
          swift_unknownObjectRelease_n();
LABEL_89:
          uint64_t v25 = v233;
LABEL_97:
          if (v196 == v64)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_138:
            if (v194 == *(void *)(v33 + 88))
            {
              if (v30)
              {
                unint64_t v104 = v30 + 24 * ((v32 >> ((4 * *(unsigned char *)(v30 + 18) + 8) & 0x3C)) & 0xF);
                uint64_t v25 = *(void *)(v104 + 24);
                uint64_t v27 = *(void *)(v104 + 40);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                uint64_t v105 = *(void *)(v33 + 64);
                swift_unknownObjectRetain();
                uint64_t v25 = specialized Rope._Node.subscript.getter(v32, v105);
                uint64_t v27 = v106;
                swift_unknownObjectRelease();
              }
              int64_t v29 = v173;
              uint64_t v28 = v174;
              uint64_t v30 = v172;
              uint64_t v33 = v170;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v26 = v197 + v25;
              if (!__OFADD__(v197, v25))
              {
                long long v107 = *(_OWORD *)v33;
                long long v108 = *(_OWORD *)(v33 + 16);
                long long v269 = *(_OWORD *)(v33 + 32);
                long long v268 = v108;
                long long v267 = v107;
                long long v109 = *(_OWORD *)v33;
                long long v110 = *(_OWORD *)(v33 + 16);
                v274[2] = v269;
                v274[1] = v110;
                v274[0] = v109;
                outlined init with take of any PredicateExpression<Self.Output == B1>(v274, (uint64_t)v275);
                outlined retain of Locale((uint64_t)v275);
                uint64_t v25 = (uint64_t)&v267;
                BigString.utf8.getter();
                outlined release of Locale((uint64_t)&v267);
                uint64_t v27 = v169;
                if (!__OFSUB__(v26, BigString.Index.utf8Offset.getter()))
                {
                  uint64_t v111 = BigString.UTF8View.index(_:offsetBy:)();
                  uint64_t v113 = v112;
                  uint64_t v28 = v114;
                  int64_t v29 = v115;
                  outlined release of Locale((uint64_t)&v245);
                  uint64_t v117 = v185;
                  int64_t v116 = v186;
                  int64_t v118 = v183;
                  unint64_t v32 = v184;
                  char v119 = static BigString.Index.< infix(_:_:)();
                  if (v119) {
                    uint64_t v120 = v116;
                  }
                  else {
                    uint64_t v120 = v111;
                  }
                  if (v119) {
                    uint64_t v121 = v117;
                  }
                  else {
                    uint64_t v121 = v113;
                  }
                  uint64_t v27 = v120;
                  unint64_t v122 = v198;
                  if (v119)
                  {
                    uint64_t v28 = (uint64_t *)v32;
                    int64_t v29 = v118;
                  }
                  long long v123 = *(_OWORD *)v33;
                  long long v124 = *(_OWORD *)(v33 + 16);
                  long long v266 = *(_OWORD *)(v33 + 32);
                  v265[1] = v124;
                  v265[0] = v123;
                  long long v125 = *(_OWORD *)v33;
                  long long v126 = *(_OWORD *)(v33 + 16);
                  uint64_t v33 = v121;
                  v276[1] = v126;
                  v276[2] = v266;
                  v276[0] = v125;
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v276, (uint64_t)v277);
                  outlined retain of Locale((uint64_t)v277);
                  uint64_t v30 = v200;
                  unint64_t v26 = v201;
                  uint64_t v25 = v204;
                  if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
                  {
                    *(void *)&long long v222 = v26;
                    *((void *)&v222 + 1) = v25;
                    *(void *)&long long v223 = v122;
                    *((void *)&v223 + 1) = v30;
                    *(void *)&long long v224 = v27;
                    *((void *)&v224 + 1) = v33;
                    *(void *)&long long v225 = v28;
                    *((void *)&v225 + 1) = v29;
                    uint64_t v127 = v27;
                    uint64_t v128 = v190;
                    unint64_t v32 = *(void *)(v190 + 16);
                    uint64_t v213 = (long long *)v33;
                    uint64_t v214 = (uint64_t *)v127;
                    if (v32 && (static BigString.Index.== infix(_:_:)() & 1) == 0)
                    {
                      swift_bridgeObjectRetain();
                      uint64_t v25 = 40;
                      unint64_t v145 = v32;
                      while (*(void *)(v128 + v25))
                      {
                        swift_bridgeObjectRelease();
                        v25 += 16;
                        if (!--v145)
                        {
                          swift_bridgeObjectRelease();
                          unint64_t v26 = v189;
                          uint64_t v33 = v204;
                          unint64_t v146 = v201;
LABEL_175:
                          uint64_t v148 = 0;
                          *(void *)&long long v215 = v146;
                          *((void *)&v215 + 1) = v33;
                          *(void *)&long long v216 = v122;
                          *((void *)&v216 + 1) = v30;
                          *(void *)&long long v217 = v214;
                          *((void *)&v217 + 1) = v213;
                          uint64_t v149 = 40;
                          *(void *)&long long v218 = v28;
                          *((void *)&v218 + 1) = v29;
                          uint64_t v27 = v190;
                          while (1)
                          {
                            uint64_t v150 = v148 + 1;
                            if (__OFADD__(v148, 1)) {
                              goto LABEL_208;
                            }
                            if (*(void *)(v190 + v149))
                            {
                              swift_bridgeObjectRetain();
                              uint64_t v151 = (unint64_t *)(v27 + 40);
                              uint64_t v152 = (char *)MEMORY[0x1E4FBC860];
                              do
                              {
                                unint64_t v153 = *v151;
                                if (*v151)
                                {
                                  uint64_t v154 = *(v151 - 1);
                                  if ((v153 & 0x2000000000000000) != 0 ? HIBYTE(v153) & 0xF : v154 & 0xFFFFFFFFFFFFLL)
                                  {
                                    if ((v153 & 0x1000000000000000) != 0)
                                    {
                                      int v156 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                                    }
                                    else
                                    {
                                      if ((v153 & 0x2000000000000000) != 0)
                                      {
                                        *(void *)&long long v232 = *(v151 - 1);
                                        *((void *)&v232 + 1) = v153 & 0xFFFFFFFFFFFFFFLL;
                                        swift_bridgeObjectRetain();
                                      }
                                      else
                                      {
                                        if ((v154 & 0x1000000000000000) == 0) {
                                          _StringObject.sharedUTF8.getter();
                                        }
                                        swift_bridgeObjectRetain();
                                      }
                                      int v156 = _decodeScalar(_:startingAt:)();
                                      swift_bridgeObjectRelease();
                                    }
                                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                                      uint64_t v152 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v152 + 2) + 1, 1, v152);
                                    }
                                    unint64_t v158 = *((void *)v152 + 2);
                                    unint64_t v157 = *((void *)v152 + 3);
                                    if (v158 >= v157 >> 1) {
                                      uint64_t v152 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v157 > 1), v158 + 1, 1, v152);
                                    }
                                    *((void *)v152 + 2) = v158 + 1;
                                    *(_DWORD *)&v152[4 * v158 + 32] = v156;
                                  }
                                }
                                v151 += 2;
                                --v32;
                              }
                              while (v32);
                              swift_bridgeObjectRelease();
                              BigString.unicodeScalars.getter();
                              BigString.UnicodeScalarView.subscript.getter();
                              outlined release of Locale((uint64_t)v252);
                              uint64_t v27 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v152);
                              uint64_t v33 = v159;
                              uint64_t v25 = v160;
                              uint64_t v30 = v161;
                              swift_bridgeObjectRelease();
                              outlined release of Locale((uint64_t)&v232);
                              unint64_t v26 = v189;
                              if (v30 == 2) {
                                goto LABEL_156;
                              }
                              char v162 = static BigString.Index.< infix(_:_:)();
                              outlined release of Locale((uint64_t)v265);
                              uint64_t result = outlined release of AttributedString.Runs((uint64_t)v253);
                              if (v162) {
                                goto LABEL_244;
                              }
                              uint64_t v28 = (uint64_t *)v25;
                              unint64_t v26 = v189;
                              uint64_t v129 = v180;
                              uint64_t v130 = v181;
                              goto LABEL_157;
                            }
                            v149 += 16;
                            ++v148;
                            if (v150 == v32) {
                              goto LABEL_156;
                            }
                          }
                        }
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease_n();
                      BigString.utf8.getter();
                      BigString.UTF8View.subscript.getter();
                      outlined release of Locale((uint64_t)&v246);
                      unint64_t v146 = v201;
                      uint64_t v33 = v204;
                      uint64_t result = static BigString.Index.< infix(_:_:)();
                      if (result) {
                        goto LABEL_242;
                      }
                      v220[0] = v146;
                      v220[1] = v33;
                      v220[2] = v122;
                      v220[3] = v30;
                      v220[4] = v146;
                      v220[5] = v33;
                      v220[6] = v122;
                      v220[7] = v30;
                      specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)v220, (uint64_t *)&v232);
                      outlined release of Locale((uint64_t)&v247);
                      uint64_t v25 = *((void *)&v235 + 1);
                      unint64_t v26 = v189;
                      if (*((void *)&v235 + 1) == 2) {
                        goto LABEL_175;
                      }
                      uint64_t v28 = (uint64_t *)v235;
                      uint64_t v213 = (long long *)*((void *)&v234 + 1);
                      uint64_t v214 = (uint64_t *)v234;
                      uint64_t result = static BigString.Index.< infix(_:_:)();
                      int64_t v29 = v25;
                      if ((result & 1) == 0) {
                        goto LABEL_175;
                      }
                      goto LABEL_243;
                    }
                    unint64_t v26 = v189;
LABEL_156:
                    outlined release of Locale((uint64_t)v265);
                    outlined release of AttributedString.Runs((uint64_t)v253);
                    uint64_t v30 = v29;
                    uint64_t v129 = v180;
                    uint64_t v130 = v181;
                    uint64_t v33 = (uint64_t)v213;
                    uint64_t v27 = (uint64_t)v214;
LABEL_157:
                    unint64_t v32 = v182;
                    if (v129 == *(void *)(v207 + 88))
                    {
                      if (v130)
                      {
                        uint64_t v131 = v130 + 24 * ((v176 >> ((4 * *(unsigned char *)(v130 + 18) + 8) & 0x3C)) & 0xF);
                        uint64_t v25 = *(void *)(v131 + 32);
                        int64_t v29 = *(void *)(v131 + 40);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        uint64_t v132 = *(void *)(v207 + 64);
                        swift_unknownObjectRetain();
                        specialized Rope._Node.subscript.getter(v176, v132);
                        uint64_t v25 = v133;
                        int64_t v29 = v134;
                        swift_unknownObjectRelease();
                      }
                      if (one-time initialization token for name == -1)
                      {
                        if (!*(void *)(v25 + 16))
                        {
LABEL_232:
                          uint64_t v231 = 0;
                          long long v229 = 0u;
                          long long v230 = 0u;
                          long long v227 = 0u;
                          long long v228 = 0u;
                          goto LABEL_233;
                        }
LABEL_163:
                        uint64_t v214 = (uint64_t *)v29;
                        unint64_t v135 = v32;
                        uint64_t v136 = v27;
                        uint64_t v137 = v30;
                        unint64_t v138 = v26;
                        uint64_t v139 = v28;
                        uint64_t v140 = v33;
                        uint64_t v141 = qword_1E8ED5B58;
                        uint64_t v142 = static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name;
                        swift_bridgeObjectRetain();
                        unint64_t v143 = specialized __RawDictionaryStorage.find<A>(_:)(v142, v141);
                        if (v144)
                        {
                          outlined init with copy of AttributedString._AttributeValue(*(void *)(v25 + 56) + 72 * v143, (uint64_t)&v227);
                        }
                        else
                        {
                          uint64_t v231 = 0;
                          long long v229 = 0u;
                          long long v230 = 0u;
                          long long v227 = 0u;
                          long long v228 = 0u;
                        }
                        uint64_t v33 = v140;
                        swift_bridgeObjectRelease();
                        uint64_t v28 = v139;
                        unint64_t v26 = v138;
                        uint64_t v30 = v137;
                        uint64_t v27 = v136;
                        unint64_t v32 = v135;
                        if (*((void *)&v228 + 1))
                        {
                          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v227, (uint64_t)&v221);
                          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                          swift_dynamicCast();
                          outlined destroy of AttributedString._AttributeValue((uint64_t)&v227);
                          char v147 = 0;
LABEL_234:
                          *(unsigned char *)unint64_t v26 = v147;
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          uint64_t v164 = v178;
                          uint64_t v163 = v179;
                          uint64_t v165 = v177;
                          uint64_t result = static BigString.Index.< infix(_:_:)();
                          if ((result & 1) == 0)
                          {
                            uint64_t v166 = v175;
                            void *v175 = v163;
                            v166[1] = v164;
                            v166[2] = v165;
                            v166[3] = v32;
                            v166[4] = v27;
                            v166[5] = v33;
                            v166[6] = v28;
                            v166[7] = v30;
                            return result;
                          }
                          __break(1u);
LABEL_237:
                          __break(1u);
LABEL_238:
                          __break(1u);
LABEL_239:
                          __break(1u);
                          goto LABEL_240;
                        }
LABEL_233:
                        outlined destroy of Any?((uint64_t)&v227, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                        char v147 = 1;
                        goto LABEL_234;
                      }
LABEL_231:
                      swift_once();
                      if (!*(void *)(v25 + 16)) {
                        goto LABEL_232;
                      }
                      goto LABEL_163;
                    }
LABEL_230:
                    __break(1u);
                    goto LABEL_231;
                  }
LABEL_229:
                  __break(1u);
                  goto LABEL_230;
                }
LABEL_228:
                __break(1u);
                goto LABEL_229;
              }
LABEL_227:
              __break(1u);
              goto LABEL_228;
            }
LABEL_226:
            __break(1u);
            goto LABEL_227;
          }
          if ((void)v232 != *(void *)(v33 + 88)) {
            goto LABEL_215;
          }
          uint64_t v203 = v232;
          uint64_t v191 = v30;
          uint64_t v187 = v25;
          if (v25)
          {
            unint64_t v83 = v25 + 24 * ((v195 >> ((4 * *(unsigned char *)(v25 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v25 = *(void *)(v83 + 32);
            unint64_t v26 = *(void *)(v83 + 40);
            swift_bridgeObjectRetain();
            unint64_t v193 = v26;
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v84 = *(void *)(v33 + 64);
            unint64_t v26 = *(void *)(v33 + 72);
            uint64_t v28 = *(uint64_t **)(v33 + 80);
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v195, v84);
            unint64_t v193 = v85;
            uint64_t v25 = v86;
            swift_unknownObjectRelease();
          }
          swift_bridgeObjectRetain();
          uint64_t v87 = 0;
          uint64_t v30 = v192;
          uint64_t v214 = (uint64_t *)v25;
          while (1)
          {
            unint64_t v32 = v87 + 1;
            if (__OFADD__(v87, 1))
            {
              __break(1u);
LABEL_205:
              __break(1u);
              goto LABEL_206;
            }
            uint64_t v28 = *(uint64_t **)(v30 - 8);
            unint64_t v26 = *(void *)v30;
            if (*(void *)(v29 + 16))
            {
              swift_bridgeObjectRetain_n();
              unint64_t v88 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v28, v26);
              if (v89)
              {
                outlined init with copy of AttributedString._AttributeValue(*(void *)(v29 + 56) + 72 * v88, (uint64_t)&v227);
              }
              else
              {
                uint64_t v231 = 0;
                long long v229 = 0u;
                long long v230 = 0u;
                long long v227 = 0u;
                long long v228 = 0u;
              }
              swift_bridgeObjectRelease();
              uint64_t v25 = (uint64_t)v214;
              if (!v214[2])
              {
LABEL_112:
                uint64_t v226 = 0;
                long long v224 = 0u;
                long long v225 = 0u;
                long long v222 = 0u;
                long long v223 = 0u;
                goto LABEL_119;
              }
            }
            else
            {
              uint64_t v231 = 0;
              long long v229 = 0u;
              long long v230 = 0u;
              long long v227 = 0u;
              long long v228 = 0u;
              swift_bridgeObjectRetain();
              if (!*(void *)(v25 + 16)) {
                goto LABEL_112;
              }
            }
            swift_bridgeObjectRetain();
            unint64_t v90 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v28, v26);
            if (v91)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v25 + 56) + 72 * v90, (uint64_t)&v222);
            }
            else
            {
              uint64_t v226 = 0;
              long long v224 = 0u;
              long long v225 = 0u;
              long long v222 = 0u;
              long long v223 = 0u;
            }
            swift_bridgeObjectRelease();
LABEL_119:
            uint64_t v25 = (uint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v227, (uint64_t)&v232, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v222, (uint64_t)v213, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!*((void *)&v233 + 1))
            {
              if ((void)v237) {
                goto LABEL_136;
              }
              outlined destroy of Any?((uint64_t)&v232, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v222, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?((uint64_t)&v227, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_106;
            }
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v232, (uint64_t)v220, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!(void)v237) {
              goto LABEL_135;
            }
            long long v92 = v213[3];
            long long v217 = v213[2];
            long long v218 = v92;
            uint64_t v219 = *((void *)v213 + 8);
            long long v93 = v213[1];
            long long v215 = *v213;
            long long v216 = v93;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v220, (uint64_t)v276);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v215, (uint64_t)v274);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v276, (uint64_t)&v247, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?((uint64_t)v274, (uint64_t)v212, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v249)
            {
              if (!v251)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v247);
LABEL_104:
                unint64_t v26 = 0;
                goto LABEL_105;
              }
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v247, (uint64_t)&v267);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v212, (uint64_t)v265);
              uint64_t v94 = *((void *)&v268 + 1);
              uint64_t v206 = v269;
              uint64_t v205 = __swift_project_boxed_opaque_existential_1(&v267, *((uint64_t *)&v268 + 1));
              long long v211 = &v167;
              uint64_t v95 = *(void *)(v94 - 8);
              MEMORY[0x1F4188790](v205);
              char v97 = (char *)&v167 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v265, (uint64_t)v252);
              uint64_t v98 = type metadata accessor for Optional();
              uint64_t v210 = &v167;
              uint64_t v99 = *(void *)(v98 - 8);
              MEMORY[0x1F4188790](v98);
              long long v101 = (char *)&v167 - v100;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              int v102 = swift_dynamicCast();
              uint64_t v103 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56);
              if (v102)
              {
                v103(v101, 0, 1, v94);
                (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v97, v101, v94);
                unint64_t v26 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v95 + 8))(v97, v94);
              }
              else
              {
                v103(v101, 1, 1, v94);
                (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v98);
                unint64_t v26 = 0;
              }
              uint64_t v33 = v207;
              uint64_t v27 = v209;
              uint64_t v25 = (uint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v265);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v267);
              int64_t v29 = v208;
            }
            else
            {
              if (v251)
              {
                outlined destroy of Any?((uint64_t)v212, &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_104;
              }
              unint64_t v26 = 1;
            }
LABEL_105:
            uint64_t v28 = &demangling cache variable for type metadata for (Hashable & Sendable)?;
            outlined destroy of Any?((uint64_t)v274, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?((uint64_t)v276, &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v215);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v220);
            outlined destroy of Any?((uint64_t)&v232, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v222, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v227, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v26 & 1) == 0) {
              goto LABEL_137;
            }
LABEL_106:
            v30 += 16;
            ++v87;
            uint64_t v25 = (uint64_t)v214;
            if (v32 == v27)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v25 = *(void *)(v33 + 64);
              unint64_t v32 = *(void *)(v33 + 72);
              unint64_t v26 = *(void *)(v33 + 80);
              uint64_t v68 = *(void *)(v33 + 88);
              uint64_t v197 = v188;
              uint64_t v67 = v203;
              *(void *)&long long v232 = v203;
              *((void *)&v232 + 1) = v195;
              uint64_t v30 = v187;
              unint64_t v199 = v195;
              *(void *)&long long v233 = v187;
              BOOL v43 = __OFADD__(v196++, 1);
              unint64_t v64 = v168;
              if (!v43) {
                goto LABEL_74;
              }
              __break(1u);
LABEL_135:
              outlined destroy of AttributedString._AttributeValue((uint64_t)v220);
LABEL_136:
              outlined destroy of Any?((uint64_t)&v232, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?((uint64_t)&v222, (uint64_t *)v25);
              outlined destroy of Any?((uint64_t)&v227, (uint64_t *)v25);
LABEL_137:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v30 = v191;
              unint64_t v32 = v199;
              goto LABEL_138;
            }
          }
        }
      }
      int v76 = *(unsigned __int8 *)(v25 + 18);
      char v77 = (4 * v76 + 8) & 0x3C;
      uint64_t v78 = (v32 >> v77) & 0xF;
      *(void *)&long long v247 = v78;
      if (v76)
      {
        uint64_t v28 = (uint64_t *)(v25 + 24);
        swift_unknownObjectRetain();
        unint64_t v26 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v25 + 24, (uint64_t *)&v247, (uint64_t)&v232, v25, v76);
        swift_unknownObjectRelease();
        uint64_t v27 = v209;
        if (v26)
        {
          swift_unknownObjectRelease_n();
          unint64_t v195 = *((void *)&v232 + 1);
          goto LABEL_89;
        }
      }
      else
      {
        unint64_t v26 = v78 + 1;
        if (v78 + 1 < (unint64_t)*(unsigned __int16 *)(v25 + 16))
        {
          swift_unknownObjectRelease_n();
          unint64_t v195 = (v26 << v77) | ((-15 << v77) - 1) & v32;
          uint64_t v27 = v209;
          goto LABEL_97;
        }
        uint64_t v27 = v209;
      }
      if (v25)
      {
        unint64_t v26 = *(unsigned __int8 *)(v25 + 18);
        uint64_t v79 = *(unsigned __int16 *)(v25 + 16);
        swift_unknownObjectRelease_n();
        char v80 = (4 * v26 + 8) & 0x3C;
        uint64_t v81 = ((-15 << v80) - 1) & v26;
        uint64_t v82 = v79 << v80;
        uint64_t v27 = v209;
        unint64_t v195 = v81 | v82;
      }
      else
      {
        unint64_t v195 = 0;
      }
      uint64_t v25 = 0;
      *(void *)&long long v232 = v194;
      goto LABEL_97;
    }
LABEL_38:
    swift_unknownObjectRetain();
    uint64_t v28 = (uint64_t *)specialized Rope._Node.distanceFromStart<A>(to:in:)(v203, v32, v30, v25, (uint64_t)v28);
    swift_unknownObjectRelease_n();
    goto LABEL_66;
  }
  uint64_t v214 = v28;
  uint64_t v30 = *(unsigned __int8 *)(v25 + 18);
  if (*(unsigned char *)(v25 + 18))
  {
    swift_unknownObjectRetain_n();
    uint64_t v33 = -15;
    unint64_t v32 = 24;
    uint64_t v36 = v27;
    uint64_t v28 = (uint64_t *)v25;
    while (1)
    {
      uint64_t v39 = *((unsigned __int16 *)v28 + 8);
      if (!*((_WORD *)v28 + 8)) {
        break;
      }
      uint64_t v40 = v28[5];
      uint64_t v41 = v36 - v40;
      if (__OFSUB__(v36, v40)) {
        goto LABEL_210;
      }
      if (__OFADD__(v41, 1)) {
        goto LABEL_211;
      }
      if (v41 + 1 <= 0)
      {
        uint64_t v39 = 0;
        goto LABEL_16;
      }
      if (v39 == 1)
      {
        v36 -= v40;
        break;
      }
      uint64_t v42 = v28[8];
      BOOL v43 = __OFSUB__(v41, v42);
      uint64_t v44 = v41 - v42;
      if (v43) {
        goto LABEL_216;
      }
      if (__OFADD__(v44, 1)) {
        goto LABEL_217;
      }
      if (v44 + 1 < 1)
      {
        uint64_t v39 = 1;
        uint64_t v36 = v41;
        goto LABEL_16;
      }
      if (v39 == 2)
      {
        uint64_t v36 = v44;
        break;
      }
      uint64_t v45 = v28 + 11;
      uint64_t v46 = 2;
      while (1)
      {
        if (v39 == v46) {
          goto LABEL_205;
        }
        uint64_t v36 = v44 - *v45;
        if (__OFSUB__(v44, *v45))
        {
LABEL_206:
          __break(1u);
LABEL_207:
          __break(1u);
LABEL_208:
          __break(1u);
          goto LABEL_209;
        }
        if (__OFADD__(v36, 1)) {
          goto LABEL_207;
        }
        if (v36 + 1 < 1) {
          break;
        }
        ++v46;
        v45 += 3;
        uint64_t v44 = v36;
        if (v39 == v46) {
          goto LABEL_15;
        }
      }
      uint64_t v39 = v46;
      uint64_t v36 = v44;
LABEL_16:
      char v37 = (4 * *((unsigned char *)v28 + 18) + 8) & 0x3C;
      uint64_t v30 = ((-15 << v37) - 1) & v30 | (v39 << v37);
      unint64_t v26 = v28[3 * v39 + 3];
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v28 = (uint64_t *)v26;
      if (!*(unsigned char *)(v26 + 18)) {
        goto LABEL_40;
      }
    }
LABEL_15:
    if (!v36) {
      goto LABEL_16;
    }
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
    goto LABEL_218;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v36 = v27;
  unint64_t v26 = v25;
LABEL_40:
  uint64_t v48 = *(unsigned __int16 *)(v26 + 16);
  if (!*(_WORD *)(v26 + 16))
  {
    unint64_t v51 = v26;
    uint64_t v33 = v207;
    goto LABEL_47;
  }
  uint64_t v49 = *(void *)(v26 + 24);
  uint64_t v50 = v36 - v49;
  uint64_t v33 = v207;
  if (__OFSUB__(v36, v49))
  {
LABEL_240:
    __break(1u);
LABEL_241:
    __break(1u);
LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
    goto LABEL_245;
  }
  if (__OFADD__(v50, 1)) {
    goto LABEL_241;
  }
  unint64_t v51 = v26;
  if (v50 + 1 <= 0) {
    goto LABEL_49;
  }
  if (v48 == 1)
  {
    v36 -= v49;
LABEL_47:
    if (!v36)
    {
LABEL_64:
      swift_unknownObjectRelease();
      unint64_t v26 = v51;
      swift_unknownObjectRelease();
      unint64_t v56 = v30 & 0xFFFFFFFFFFFFF0FFLL;
      uint64_t v30 = v51;
      unint64_t v32 = v56 | (v48 << 8);
      uint64_t v28 = v214;
      goto LABEL_38;
    }
    __break(1u);
LABEL_49:
    uint64_t v48 = 0;
    goto LABEL_64;
  }
  uint64_t v52 = *(void *)(v26 + 48);
  BOOL v43 = __OFSUB__(v50, v52);
  uint64_t v53 = v50 - v52;
  if (v43)
  {
LABEL_245:
    __break(1u);
    goto LABEL_246;
  }
  if (!__OFADD__(v53, 1))
  {
    if (v53 + 1 < 1)
    {
      uint64_t v48 = 1;
      uint64_t v36 = v50;
      goto LABEL_64;
    }
    if (v48 != 2)
    {
      uint64_t v54 = (void *)(v26 + 72);
      uint64_t v55 = 2;
      while (1)
      {
        if (v48 == v55) {
          goto LABEL_237;
        }
        uint64_t v36 = v53 - *v54;
        if (__OFSUB__(v53, *v54)) {
          goto LABEL_238;
        }
        if (__OFADD__(v36, 1)) {
          goto LABEL_239;
        }
        if (v36 + 1 < 1) {
          break;
        }
        ++v55;
        v54 += 3;
        uint64_t v53 = v36;
        if (v48 == v55) {
          goto LABEL_47;
        }
      }
      uint64_t v48 = v55;
      uint64_t v36 = v53;
      goto LABEL_64;
    }
    uint64_t v36 = v53;
    goto LABEL_47;
  }
LABEL_246:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString.Runs.AttributesSlice4.index(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v172 = a4;
  uint64_t v177 = a2;
  uint64_t v178 = a3;
  uint64_t v159 = a5;
  long long v7 = *(_OWORD *)(v5 + 176);
  long long v217 = *(_OWORD *)(v5 + 160);
  long long v218 = v7;
  uint64_t v8 = *(void *)(v5 + 200);
  uint64_t v219 = *(void *)(v5 + 192);
  long long v9 = *(_OWORD *)(v5 + 112);
  v214[6] = *(_OWORD *)(v5 + 96);
  v214[7] = v9;
  long long v10 = *(_OWORD *)(v5 + 128);
  long long v216 = *(_OWORD *)(v5 + 144);
  long long v215 = v10;
  long long v11 = *(_OWORD *)(v5 + 48);
  v214[2] = *(_OWORD *)(v5 + 32);
  v214[3] = v11;
  long long v12 = *(_OWORD *)(v5 + 64);
  v214[5] = *(_OWORD *)(v5 + 80);
  v214[4] = v12;
  long long v13 = *(_OWORD *)(v5 + 16);
  v214[0] = *(_OWORD *)v5;
  v214[1] = v13;
  uint64_t v213 = v8;
  uint64_t v212 = *(void *)(v5 + 208);
  uint64_t v14 = *((void *)&v215 + 1);
  long long v15 = v216;
  uint64_t v16 = v217;
  outlined retain of AttributedString.Runs((uint64_t)v214);
  uint64_t v160 = v14;
  long long v161 = v15;
  uint64_t v162 = v16;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0) {
    goto LABEL_191;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_192:
    __break(1u);
    goto LABEL_193;
  }
  uint64_t v164 = v213;
  uint64_t v18 = *(void *)(v213 + 16);
  if (!v18)
  {
LABEL_193:
    __break(1u);
    goto LABEL_194;
  }
  uint64_t v19 = *(void *)&v214[0];
  uint64_t v20 = *(void *)(*(void *)&v214[0] + 64);
  uint64_t v21 = *(void *)(*(void *)&v214[0] + 72);
  uint64_t v22 = *(void *)(*(void *)&v214[0] + 80);
  uint64_t v179 = *(void *)(*(void *)&v214[0] + 88);
  swift_unknownObjectRetain();
  uint64_t v171 = a1;
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v23 = result - 1;
  if (__OFSUB__(result, 1))
  {
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
LABEL_196:
    __break(1u);
LABEL_197:
    __break(1u);
LABEL_198:
    __break(1u);
    goto LABEL_199;
  }
  if (v20) {
    uint64_t v24 = v22;
  }
  else {
    uint64_t v24 = 0;
  }
  if (v23 < 0 || v24 < v23) {
    goto LABEL_195;
  }
  if (!v20 || !*(_WORD *)(v20 + 16) || v23 >= v22)
  {
    unint64_t v38 = swift_unknownObjectRetain();
    unint64_t v39 = specialized Rope._endPath.getter(v38);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v174 = 0;
    uint64_t v26 = 0;
    unint64_t v173 = v39;
    if (!v20) {
      goto LABEL_178;
    }
    goto LABEL_39;
  }
  uint64_t v181 = v21;
  uint64_t v165 = v18;
  uint64_t v158 = v19;
  uint64_t v25 = *(unsigned __int8 *)(v20 + 18);
  if (!*(unsigned char *)(v20 + 18)) {
    goto LABEL_121;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v26 = v23;
  uint64_t v27 = v20;
  do
  {
    uint64_t v30 = *(unsigned __int16 *)(v27 + 16);
    if (*(_WORD *)(v27 + 16))
    {
      uint64_t v31 = *(void *)(v27 + 40);
      uint64_t v32 = v26 - v31;
      if (__OFSUB__(v26, v31))
      {
LABEL_187:
        __break(1u);
        goto LABEL_188;
      }
      if (__OFADD__(v32, 1))
      {
LABEL_188:
        __break(1u);
        goto LABEL_189;
      }
      if (v32 + 1 <= 0)
      {
        uint64_t v30 = 0;
        goto LABEL_17;
      }
      if (v30 == 1)
      {
        v26 -= v31;
      }
      else
      {
        uint64_t v33 = *(void *)(v27 + 64);
        BOOL v34 = __OFSUB__(v32, v33);
        uint64_t v35 = v32 - v33;
        if (v34)
        {
LABEL_189:
          __break(1u);
          goto LABEL_190;
        }
        if (__OFADD__(v35, 1))
        {
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
          goto LABEL_192;
        }
        if (v35 + 1 < 1)
        {
          uint64_t v30 = 1;
          uint64_t v26 = v32;
          goto LABEL_17;
        }
        if (v30 != 2)
        {
          uint64_t v36 = (void *)(v27 + 88);
          uint64_t v37 = 2;
          while (1)
          {
            if (v30 == v37) {
              goto LABEL_182;
            }
            uint64_t v26 = v35 - *v36;
            if (__OFSUB__(v35, *v36)) {
              goto LABEL_183;
            }
            if (__OFADD__(v26, 1)) {
              goto LABEL_184;
            }
            if (v26 + 1 < 1) {
              break;
            }
            ++v37;
            v36 += 3;
            uint64_t v35 = v26;
            if (v30 == v37) {
              goto LABEL_16;
            }
          }
          uint64_t v30 = v37;
          uint64_t v26 = v35;
          goto LABEL_17;
        }
        uint64_t v26 = v35;
      }
    }
LABEL_16:
    if (v26) {
      goto LABEL_186;
    }
LABEL_17:
    char v28 = (4 * *(unsigned char *)(v27 + 18) + 8) & 0x3C;
    uint64_t v25 = ((-15 << v28) - 1) & v25 | (v30 << v28);
    uint64_t v29 = *(void *)(v27 + 24 + 24 * v30);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v27 = v29;
  }
  while (*(unsigned char *)(v29 + 18));
  while (1)
  {
    uint64_t v120 = *(unsigned __int16 *)(v29 + 16);
    uint64_t v174 = v29;
    if (v120)
    {
      uint64_t v128 = *(void *)(v29 + 24);
      uint64_t v129 = v26 - v128;
      uint64_t v116 = v172;
      uint64_t v19 = v158;
      if (__OFSUB__(v26, v128)) {
        goto LABEL_208;
      }
      uint64_t v21 = v181;
      if (__OFADD__(v129, 1)) {
        goto LABEL_209;
      }
      if (v129 + 1 <= 0)
      {
        uint64_t v120 = 0;
        goto LABEL_177;
      }
      if (v120 == 1)
      {
        v26 -= v128;
      }
      else
      {
        uint64_t v150 = *(void *)(v174 + 48);
        BOOL v34 = __OFSUB__(v129, v150);
        uint64_t v151 = v129 - v150;
        if (v34) {
          goto LABEL_212;
        }
        if (__OFADD__(v151, 1)) {
          goto LABEL_213;
        }
        if (v151 + 1 < 1)
        {
          uint64_t v120 = 1;
          uint64_t v26 = v129;
          goto LABEL_177;
        }
        if (v120 != 2)
        {
          uint64_t v152 = (void *)(v174 + 72);
          uint64_t v153 = 2;
          while (1)
          {
            if (v120 == v153) {
              goto LABEL_205;
            }
            uint64_t v26 = v151 - *v152;
            if (__OFSUB__(v151, *v152)) {
              goto LABEL_206;
            }
            if (__OFADD__(v26, 1)) {
              goto LABEL_207;
            }
            if (v26 + 1 < 1) {
              break;
            }
            ++v153;
            v152 += 3;
            uint64_t v151 = v26;
            if (v120 == v153) {
              goto LABEL_129;
            }
          }
          uint64_t v120 = v153;
          uint64_t v26 = v151;
          goto LABEL_177;
        }
        uint64_t v26 = v151;
      }
    }
    else
    {
      uint64_t v116 = v172;
      uint64_t v19 = v158;
      uint64_t v21 = v181;
    }
LABEL_129:
    if (v26)
    {
      __break(1u);
LABEL_131:
      uint64_t v121 = v20;
LABEL_132:
      uint64_t v130 = 0;
      v187[0] = v25;
      v187[1] = v181;
      v187[2] = v21;
      v187[3] = v23;
      v187[4] = v26;
      v187[5] = v19;
      uint64_t v131 = (void *)(v22 + 40);
      v187[6] = v121;
      v187[7] = v120;
      while (1)
      {
        uint64_t v132 = v130 + 1;
        if (__OFADD__(v130, 1)) {
          goto LABEL_185;
        }
        if (*v131)
        {
          uint64_t v180 = (long long *)v25;
          swift_bridgeObjectRetain();
          uint64_t v133 = (unint64_t *)(v22 + 40);
          int64_t v134 = (char *)MEMORY[0x1E4FBC860];
          do
          {
            unint64_t v135 = *v133;
            if (*v133)
            {
              uint64_t v136 = *(v133 - 1);
              if ((v135 & 0x2000000000000000) != 0 ? HIBYTE(v135) & 0xF : v136 & 0xFFFFFFFFFFFFLL)
              {
                if ((v135 & 0x1000000000000000) != 0)
                {
                  int v138 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                }
                else
                {
                  if ((v135 & 0x2000000000000000) != 0)
                  {
                    uint64_t v188 = *(v133 - 1);
                    uint64_t v189 = v135 & 0xFFFFFFFFFFFFFFLL;
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    if ((v136 & 0x1000000000000000) == 0) {
                      _StringObject.sharedUTF8.getter();
                    }
                    swift_bridgeObjectRetain();
                  }
                  int v138 = _decodeScalar(_:startingAt:)();
                  swift_bridgeObjectRelease();
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  int64_t v134 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v134 + 2) + 1, 1, v134);
                }
                unint64_t v140 = *((void *)v134 + 2);
                unint64_t v139 = *((void *)v134 + 3);
                if (v140 >= v139 >> 1) {
                  int64_t v134 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v139 > 1), v140 + 1, 1, v134);
                }
                *((void *)v134 + 2) = v140 + 1;
                *(_DWORD *)&v134[4 * v140 + 32] = v138;
              }
            }
            v133 += 2;
            --v116;
          }
          while (v116);
          outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v212);
          BigString.unicodeScalars.getter();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)v211);
          uint64_t v141 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v134);
          uint64_t v143 = v142;
          uint64_t v145 = v144;
          uint64_t v147 = v146;
          swift_bridgeObjectRelease();
          outlined release of Locale((uint64_t)&v188);
          uint64_t v25 = (uint64_t)v180;
          uint64_t v115 = v181;
          if (v147 == 2) {
            goto LABEL_158;
          }
          char v149 = static BigString.Index.< infix(_:_:)();
          outlined release of Locale((uint64_t)&v220);
          uint64_t result = outlined release of AttributedString.Runs((uint64_t)v214);
          if (v149) {
            goto LABEL_211;
          }
          uint64_t v25 = v141;
          uint64_t v115 = v143;
          uint64_t v21 = v145;
          goto LABEL_159;
        }
        v131 += 2;
        ++v130;
        if (v132 == v116)
        {
          uint64_t v115 = v181;
          goto LABEL_158;
        }
      }
    }
LABEL_177:
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    unint64_t v39 = v25 & 0xFFFFFFFFFFFFF0FFLL | (v120 << 8);
    uint64_t v18 = v165;
    unint64_t v173 = v39;
    if (v20)
    {
LABEL_39:
      swift_unknownObjectRetain();
      uint64_t v170 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v179, v39, v174, v20, v21);
      uint64_t result = swift_unknownObjectRelease_n();
      uint64_t v40 = v23 - v26;
      if (__OFSUB__(v23, v26)) {
        goto LABEL_180;
      }
    }
    else
    {
LABEL_178:
      uint64_t v170 = 0;
      uint64_t v40 = v23 - v26;
      if (__OFSUB__(v23, v26))
      {
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
        goto LABEL_187;
      }
    }
    if (v179 != *(void *)(v19 + 88)) {
      goto LABEL_196;
    }
    if (v174)
    {
      uint64_t v41 = v174 + 24 * ((v173 >> ((4 * *(unsigned char *)(v174 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v42 = *(void *)(v41 + 32);
      uint64_t v43 = *(void *)(v41 + 40);
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v44 = *(void *)(v19 + 64);
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v173, v44);
      uint64_t v42 = v45;
      uint64_t v43 = v46;
      uint64_t result = swift_unknownObjectRelease();
    }
    if (*((uint64_t *)&v214[0] + 1) < v170) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_103:
    long long v93 = *(_OWORD *)(v19 + 16);
    long long v94 = *(_OWORD *)(v19 + 32);
    long long v224 = *(_OWORD *)(v19 + 48);
    v223[1] = v94;
    v223[0] = v93;
    long long v95 = *(_OWORD *)(v19 + 16);
    v225[1] = *(_OWORD *)(v19 + 32);
    v225[2] = v224;
    v225[0] = v95;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v225, (uint64_t)v226);
    outlined retain of Locale((uint64_t)v226);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v223);
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (__OFSUB__(v40, result)) {
      goto LABEL_197;
    }
    uint64_t v96 = (long long *)(v19 + 16);
    uint64_t v97 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v99 = v98;
    uint64_t v21 = v100;
    uint64_t v23 = v101;
    outlined release of Locale((uint64_t)&v204);
    uint64_t v25 = v160;
    uint64_t v104 = *((void *)&v161 + 1);
    uint64_t v102 = v161;
    uint64_t v103 = v162;
    char v105 = static BigString.Index.< infix(_:_:)();
    if (v105)
    {
      uint64_t v25 = v97;
      uint64_t v106 = v99;
    }
    else
    {
      uint64_t v106 = v102;
    }
    uint64_t v107 = v177;
    uint64_t v108 = v178;
    if ((v105 & 1) == 0)
    {
      uint64_t v21 = v104;
      uint64_t v23 = v103;
    }
    uint64_t v110 = v171;
    uint64_t v109 = v172;
    long long v111 = *v96;
    long long v112 = v96[1];
    long long v222 = v96[2];
    long long v221 = v112;
    long long v220 = v111;
    long long v113 = *v96;
    long long v114 = v96[1];
    uint64_t v115 = v106;
    long long v183 = v114;
    long long v184 = v222;
    long long v182 = v113;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v182, (uint64_t)v227);
    outlined retain of Locale((uint64_t)v227);
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_198;
    }
    *(void *)&long long v199 = v25;
    *((void *)&v199 + 1) = v115;
    *(void *)&long long v200 = v21;
    *((void *)&v200 + 1) = v23;
    *(void *)&long long v201 = v110;
    *((void *)&v201 + 1) = v107;
    *(void *)&long long v202 = v108;
    *((void *)&v202 + 1) = v109;
    uint64_t v22 = v212;
    uint64_t v116 = *(void *)(v212 + 16);
    if (!v116 || (static BigString.Index.== infix(_:_:)() & 1) != 0)
    {
LABEL_158:
      outlined release of Locale((uint64_t)&v220);
      uint64_t result = outlined release of AttributedString.Runs((uint64_t)v214);
      uint64_t v147 = v23;
LABEL_159:
      uint64_t v148 = v159;
      uint64_t *v159 = v25;
      v148[1] = v115;
      v148[2] = v21;
      v148[3] = v147;
      return result;
    }
    uint64_t v181 = v115;
    swift_bridgeObjectRetain();
    uint64_t v117 = (uint64_t *)(v22 + 40);
    uint64_t v118 = v116;
    while (1)
    {
      uint64_t v119 = *v117;
      v117 += 2;
      swift_bridgeObjectRelease();
      if (!v119) {
        break;
      }
      if (!--v118)
      {
        uint64_t result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v212);
        uint64_t v26 = v171;
        uint64_t v120 = v172;
        uint64_t v19 = v177;
        uint64_t v121 = v178;
        goto LABEL_132;
      }
    }
    swift_bridgeObjectRelease();
    outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v212);
    BigString.startIndex.getter();
    uint64_t v26 = v171;
    uint64_t v120 = v172;
    uint64_t v19 = v177;
    uint64_t v20 = v178;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0) {
      goto LABEL_131;
    }
    BigString.utf8.getter();
    unint64_t v122 = (long long *)BigString.UTF8View.index(before:)();
    uint64_t v179 = v123;
    uint64_t v180 = v122;
    uint64_t v175 = v125;
    unint64_t v176 = v124;
    outlined release of Locale((uint64_t)&v205);
    BigString.utf8.getter();
    BigString.UTF8View.subscript.getter();
    uint64_t v126 = v178;
    outlined release of Locale((uint64_t)v206);
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_210;
    }
    *(void *)&long long v194 = v180;
    *((void *)&v194 + 1) = v179;
    *(void *)&long long v195 = v176;
    *((void *)&v195 + 1) = v175;
    *(void *)&long long v196 = v26;
    *((void *)&v196 + 1) = v19;
    *(void *)&long long v197 = v126;
    *((void *)&v197 + 1) = v120;
    specialized BidirectionalCollection<>._getBlock(for:in:)(1, (uint64_t)&v194, &v188);
    uint64_t result = outlined release of Locale((uint64_t)&v207);
    uint64_t v20 = v191;
    uint64_t v121 = v178;
    if (v191 == 2) {
      goto LABEL_132;
    }
    uint64_t v25 = v188;
    uint64_t v21 = v190;
    uint64_t v127 = v178;
    uint64_t v181 = v189;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    uint64_t v121 = v127;
    uint64_t v23 = v20;
    if ((result & 1) == 0) {
      goto LABEL_132;
    }
    __break(1u);
LABEL_121:
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v26 = v23;
    uint64_t v29 = v20;
  }
  v154[0] = *((void *)&v214[0] + 1);
  v154[1] = v43;
  uint64_t v180 = (long long *)&v209;
  int v156 = (uint64_t *)(v164 + 40);
  uint64_t v158 = v19;
  uint64_t v165 = v18;
  uint64_t v168 = v42;
  uint64_t v169 = &v192;
LABEL_46:
  uint64_t v163 = v40;
  uint64_t v47 = *(void *)(v19 + 64);
  uint64_t v48 = *(void *)(v19 + 88);
  unint64_t v49 = v173;
  uint64_t v50 = v174;
  uint64_t v188 = v179;
  uint64_t v189 = v173;
  uint64_t v190 = v174;
  if (v179 != v48)
  {
LABEL_199:
    __break(1u);
    goto LABEL_200;
  }
  if (v47)
  {
    unint64_t v51 = *(unsigned __int8 *)(v47 + 18);
    uint64_t result = swift_unknownObjectRetain();
    if (v49 <= v51)
    {
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
      goto LABEL_203;
    }
  }
  else if (!v173)
  {
    goto LABEL_200;
  }
  if (v50)
  {
    char v52 = (4 * *(unsigned char *)(v50 + 18) + 8) & 0x3C;
    if (((v49 >> v52) & 0xF) != 0)
    {
      unint64_t v53 = ((((v49 >> v52) & 0xF) - 1) << v52) | ((-15 << v52) - 1) & v49;
      uint64_t v189 = v53;
      goto LABEL_58;
    }
  }
  int v54 = *(unsigned __int8 *)(v47 + 18);
  char v55 = (4 * v54 + 8) & 0x3C;
  uint64_t v56 = (v49 >> v55) & 0xF;
  *(void *)&long long v207 = v56;
  if (v54)
  {
    swift_unknownObjectRetain();
    char v57 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v47 + 16, v47 + 24, (uint64_t *)&v207, (uint64_t)&v188, v54);
    uint64_t result = swift_unknownObjectRelease();
    if (v57)
    {
      if (v188 != v179) {
        goto LABEL_201;
      }
      unint64_t v53 = v189;
      uint64_t v50 = v190;
      if (v190)
      {
LABEL_58:
        char v58 = (4 * *(unsigned char *)(v50 + 18) + 8) & 0x3C;
        unint64_t v173 = v53;
        unint64_t v59 = *(void *)(v50 + 24 * ((v53 >> v58) & 0xF) + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v60 = 0;
        goto LABEL_62;
      }
LABEL_61:
      swift_unknownObjectRetain();
      unint64_t v173 = v53;
      unint64_t v59 = specialized Rope._Node.subscript.getter(v53, v47);
      swift_unknownObjectRelease();
      char v60 = 1;
LABEL_62:
      uint64_t v61 = v163;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (__OFSUB__(v61, v59)) {
        goto LABEL_202;
      }
      if (v179 == *(void *)(v19 + 88))
      {
        uint64_t v174 = v50;
        uint64_t v155 = v61 - v59;
        if (v60)
        {
          uint64_t v62 = *(void *)(v19 + 64);
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v173, v62);
          uint64_t v157 = v63;
          uint64_t v65 = v64;
          swift_unknownObjectRelease();
        }
        else
        {
          unint64_t v66 = v50 + 24 * ((v173 >> ((4 * *(unsigned char *)(v50 + 18) + 8) & 0x3C)) & 0xF);
          uint64_t v65 = *(void *)(v66 + 32);
          uint64_t v67 = *(void *)(v66 + 40);
          swift_bridgeObjectRetain();
          uint64_t v157 = v67;
          swift_bridgeObjectRetain();
        }
        uint64_t v68 = v168;
        --v170;
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v69 = 0;
        uint64_t v70 = v156;
        uint64_t v71 = (uint64_t)v169;
        uint64_t v181 = v65;
        while (1)
        {
          uint64_t v73 = v69 + 1;
          if (__OFADD__(v69, 1)) {
            goto LABEL_181;
          }
          uint64_t v74 = *(v70 - 1);
          uint64_t v75 = *v70;
          if (*(void *)(v68 + 16))
          {
            swift_bridgeObjectRetain_n();
            unint64_t v76 = specialized __RawDictionaryStorage.find<A>(_:)(v74, v75);
            if (v77)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v68 + 56) + 72 * v76, (uint64_t)&v199);
            }
            else
            {
              uint64_t v203 = 0;
              long long v201 = 0u;
              long long v202 = 0u;
              long long v199 = 0u;
              long long v200 = 0u;
            }
            swift_bridgeObjectRelease();
            uint64_t v65 = v181;
            if (!*(void *)(v181 + 16))
            {
LABEL_77:
              uint64_t v198 = 0;
              long long v196 = 0u;
              long long v197 = 0u;
              long long v194 = 0u;
              long long v195 = 0u;
              goto LABEL_84;
            }
          }
          else
          {
            uint64_t v203 = 0;
            long long v201 = 0u;
            long long v202 = 0u;
            long long v199 = 0u;
            long long v200 = 0u;
            swift_bridgeObjectRetain();
            if (!*(void *)(v65 + 16)) {
              goto LABEL_77;
            }
          }
          swift_bridgeObjectRetain();
          unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(v74, v75);
          if (v79)
          {
            outlined init with copy of AttributedString._AttributeValue(*(void *)(v65 + 56) + 72 * v78, (uint64_t)&v194);
          }
          else
          {
            uint64_t v198 = 0;
            long long v196 = 0u;
            long long v197 = 0u;
            long long v194 = 0u;
            long long v195 = 0u;
          }
          swift_bridgeObjectRelease();
LABEL_84:
          swift_bridgeObjectRelease();
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v199, (uint64_t)&v188, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v194, v71, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v191)
          {
            if (v193) {
              goto LABEL_101;
            }
            outlined destroy of Any?((uint64_t)&v188, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v194, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            uint64_t result = outlined destroy of Any?((uint64_t)&v199, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            goto LABEL_71;
          }
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v188, (uint64_t)v187, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v193)
          {
            outlined destroy of AttributedString._AttributeValue((uint64_t)v187);
LABEL_101:
            outlined destroy of Any?((uint64_t)&v188, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?((uint64_t)&v194, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v199, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_102:
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v213);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v19 = v158;
            uint64_t v40 = v163;
            goto LABEL_103;
          }
          long long v80 = *(_OWORD *)(v71 + 48);
          long long v184 = *(_OWORD *)(v71 + 32);
          long long v185 = v80;
          uint64_t v186 = *(void *)(v71 + 64);
          long long v81 = *(_OWORD *)(v71 + 16);
          long long v182 = *(_OWORD *)v71;
          long long v183 = v81;
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v187, (uint64_t)v225);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v182, (uint64_t)v223);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v225, (uint64_t)&v207, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v223, (uint64_t)v180, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          if (v208)
          {
            if (!v210)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v207);
LABEL_69:
              char v72 = 0;
              goto LABEL_70;
            }
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v207, (uint64_t)&v220);
            outlined init with take of any PredicateExpression<Self.Output == B1>(v180, (uint64_t)v211);
            uint64_t v82 = *((void *)&v221 + 1);
            uint64_t v167 = v222;
            uint64_t v166 = __swift_project_boxed_opaque_existential_1(&v220, *((uint64_t *)&v221 + 1));
            unint64_t v176 = v154;
            uint64_t v83 = *(void *)(v82 - 8);
            MEMORY[0x1F4188790](v166);
            unint64_t v85 = (char *)v154 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v211, (uint64_t)v206);
            uint64_t v86 = type metadata accessor for Optional();
            uint64_t v175 = v154;
            uint64_t v87 = *(void *)(v86 - 8);
            MEMORY[0x1F4188790](v86);
            char v89 = (char *)v154 - v88;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            int v90 = swift_dynamicCast();
            char v91 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56);
            if (v90)
            {
              v91(v89, 0, 1, v82);
              (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v85, v89, v82);
              char v72 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v83 + 8))(v85, v82);
            }
            else
            {
              v91(v89, 1, 1, v82);
              (*(void (**)(char *, uint64_t))(v87 + 8))(v89, v86);
              char v72 = 0;
            }
            uint64_t v68 = v168;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v211);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v220);
            uint64_t v18 = v165;
            uint64_t v71 = (uint64_t)v169;
          }
          else
          {
            if (v210)
            {
              outlined destroy of Any?((uint64_t)v180, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              goto LABEL_69;
            }
            char v72 = 1;
          }
LABEL_70:
          outlined destroy of Any?((uint64_t)v223, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of Any?((uint64_t)v225, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v182);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v187);
          outlined destroy of Any?((uint64_t)&v188, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v194, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          uint64_t result = outlined destroy of Any?((uint64_t)&v199, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if ((v72 & 1) == 0) {
            goto LABEL_102;
          }
LABEL_71:
          v70 += 2;
          ++v69;
          uint64_t v65 = v181;
          if (v73 == v18)
          {
            outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v213);
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v92 = v155;
            uint64_t v40 = v155;
            uint64_t v19 = v158;
            if (v154[0] < v170) {
              goto LABEL_46;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v40 = v92;
            goto LABEL_103;
          }
        }
      }
LABEL_203:
      __break(1u);
    }
  }
  else if (v56)
  {
    unint64_t v53 = ((v56 - 1) << v55) | ((-15 << v55) - 1) & v49;
    uint64_t v189 = v53;
    uint64_t v190 = v47;
    uint64_t v50 = v47;
    if (v47) {
      goto LABEL_58;
    }
    goto LABEL_61;
  }
  __break(1u);
LABEL_205:
  __break(1u);
LABEL_206:
  __break(1u);
LABEL_207:
  __break(1u);
LABEL_208:
  __break(1u);
LABEL_209:
  __break(1u);
LABEL_210:
  __break(1u);
LABEL_211:
  __break(1u);
LABEL_212:
  __break(1u);
LABEL_213:
  __break(1u);
  return result;
}

uint64_t specialized AttributedString.Runs.AttributesSlice4.subscript.getter(_OWORD *a1, void *a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, unint64_t a7, uint64_t a8)
{
  uint64_t v390 = a8;
  unint64_t v391 = a7;
  v394 = a6;
  v360 = a4;
  v361 = a1;
  v362 = a2;
  v363 = a3;
  long long v10 = *v8;
  long long v11 = v8[1];
  long long v12 = v8[2];
  v455[3] = v8[3];
  v455[2] = v12;
  v455[0] = v10;
  v455[1] = v11;
  long long v13 = v8[4];
  long long v14 = v8[5];
  long long v15 = v8[6];
  long long v459 = v8[7];
  long long v458 = v15;
  long long v456 = v13;
  long long v457 = v14;
  long long v16 = v8[8];
  long long v17 = v8[9];
  long long v18 = v8[10];
  long long v19 = v8[11];
  uint64_t v20 = *((void *)v8 + 24);
  uint64_t v392 = *((void *)v8 + 25);
  uint64_t v464 = v20;
  long long v463 = v19;
  long long v462 = v18;
  long long v460 = v16;
  long long v461 = v17;
  uint64_t v387 = *((void *)v8 + 26);
  uint64_t v21 = *((void *)&v16 + 1);
  uint64_t v22 = (uint64_t *)*((void *)&v17 + 1);
  uint64_t v23 = v17;
  uint64_t v25 = *((void *)&v18 + 1);
  uint64_t v24 = (void *)v18;
  int64_t v27 = *((void *)&v19 + 1);
  int64_t v26 = v19;
  uint64_t v28 = v20;
  outlined retain of AttributedString.Runs((uint64_t)v455);
  v386 = a5;
  uint64_t v389 = v21;
  uint64_t v395 = v23;
  v396 = v22;
  v397 = v24;
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_381:
    __break(1u);
    goto LABEL_382;
  }
  uint64_t v373 = v28;
  int64_t v374 = v27;
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_382:
    __break(1u);
    goto LABEL_383;
  }
  uint64_t v29 = v25;
  uint64_t v30 = specialized Array._getCount()(v392);
  if (!v30)
  {
LABEL_383:
    __break(1u);
LABEL_384:
    __break(1u);
    goto LABEL_385;
  }
  uint64_t v25 = v30;
  int64_t v377 = v26;
  int64_t v26 = *(void *)(*(void *)&v455[0] + 64);
  uint64_t v22 = *(uint64_t **)(*(void *)&v455[0] + 72);
  uint64_t v398 = *(void *)&v455[0];
  uint64_t v23 = *(void *)(*(void *)&v455[0] + 80);
  uint64_t v384 = *(void *)(*(void *)&v455[0] + 88);
  swift_unknownObjectRetain();
  uint64_t v31 = BigString.Index.utf8Offset.getter();
  if (v26) {
    uint64_t v32 = v23;
  }
  else {
    uint64_t v32 = 0;
  }
  if (v31 < 0) {
    goto LABEL_384;
  }
  uint64_t v33 = v31;
  if (v32 < v31) {
    goto LABEL_384;
  }
  uint64_t v372 = v29;
  uint64_t v393 = v25;
  if (v26 && v31 < v23 && *(_WORD *)(v26 + 16))
  {
    v401 = v22;
    uint64_t v34 = *(unsigned __int8 *)(v26 + 18);
    if (*(unsigned char *)(v26 + 18))
    {
      swift_unknownObjectRetain_n();
      uint64_t v35 = v33;
      uint64_t v22 = (uint64_t *)v26;
      while (1)
      {
        uint64_t v38 = *((unsigned __int16 *)v22 + 8);
        if (!*((_WORD *)v22 + 8)) {
          break;
        }
        uint64_t v39 = v22[5];
        uint64_t v40 = v35 - v39;
        if (__OFSUB__(v35, v39)) {
          goto LABEL_368;
        }
        if (__OFADD__(v40, 1)) {
          goto LABEL_369;
        }
        if (v40 + 1 <= 0)
        {
          uint64_t v38 = 0;
          goto LABEL_16;
        }
        if (v38 == 1)
        {
          v35 -= v39;
          break;
        }
        uint64_t v41 = v22[8];
        BOOL v42 = __OFSUB__(v40, v41);
        uint64_t v43 = v40 - v41;
        if (v42) {
          goto LABEL_377;
        }
        if (__OFADD__(v43, 1)) {
          goto LABEL_378;
        }
        if (v43 + 1 < 1)
        {
          uint64_t v38 = 1;
          uint64_t v35 = v40;
          goto LABEL_16;
        }
        if (v38 == 2)
        {
          uint64_t v35 = v43;
          break;
        }
        uint64_t v44 = v22 + 11;
        uint64_t v45 = 2;
        while (1)
        {
          if (v38 == v45) {
            goto LABEL_358;
          }
          uint64_t v35 = v43 - *v44;
          if (__OFSUB__(v43, *v44))
          {
LABEL_359:
            __break(1u);
LABEL_360:
            __break(1u);
LABEL_361:
            __break(1u);
LABEL_362:
            __break(1u);
LABEL_363:
            __break(1u);
LABEL_364:
            __break(1u);
LABEL_365:
            __break(1u);
            goto LABEL_366;
          }
          if (__OFADD__(v35, 1)) {
            goto LABEL_360;
          }
          if (v35 + 1 < 1) {
            break;
          }
          ++v45;
          v44 += 3;
          uint64_t v43 = v35;
          if (v38 == v45) {
            goto LABEL_15;
          }
        }
        uint64_t v38 = v45;
        uint64_t v35 = v43;
LABEL_16:
        char v36 = (4 * *((unsigned char *)v22 + 18) + 8) & 0x3C;
        uint64_t v34 = ((-15 << v36) - 1) & v34 | (v38 << v36);
        uint64_t v25 = v22[3 * v38 + 3];
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v22 = (uint64_t *)v25;
        if (!*(unsigned char *)(v25 + 18)) {
          goto LABEL_40;
        }
      }
LABEL_15:
      if (!v35) {
        goto LABEL_16;
      }
LABEL_366:
      __break(1u);
LABEL_367:
      __break(1u);
LABEL_368:
      __break(1u);
LABEL_369:
      __break(1u);
LABEL_370:
      __break(1u);
LABEL_371:
      __break(1u);
LABEL_372:
      __break(1u);
LABEL_373:
      __break(1u);
LABEL_374:
      __break(1u);
LABEL_375:
      __break(1u);
LABEL_376:
      __break(1u);
LABEL_377:
      __break(1u);
LABEL_378:
      __break(1u);
LABEL_379:
      __break(1u);
LABEL_380:
      __break(1u);
      goto LABEL_381;
    }
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v35 = v33;
    uint64_t v25 = v26;
LABEL_40:
    uint64_t v49 = *(unsigned __int16 *)(v25 + 16);
    uint64_t v47 = v25;
    if (!*(_WORD *)(v25 + 16)) {
      goto LABEL_59;
    }
    uint64_t v50 = *(void *)(v25 + 24);
    uint64_t v51 = v35 - v50;
    if (__OFSUB__(v35, v50))
    {
LABEL_447:
      __break(1u);
      goto LABEL_448;
    }
    if (__OFADD__(v51, 1))
    {
LABEL_448:
      __break(1u);
      goto LABEL_449;
    }
    if (v51 + 1 <= 0)
    {
      uint64_t v49 = 0;
    }
    else
    {
      if (v49 == 1)
      {
        v35 -= v50;
        goto LABEL_59;
      }
      uint64_t v52 = *(void *)(v25 + 48);
      BOOL v42 = __OFSUB__(v51, v52);
      uint64_t v53 = v51 - v52;
      if (v42)
      {
LABEL_456:
        __break(1u);
        goto LABEL_457;
      }
      if (__OFADD__(v53, 1))
      {
LABEL_457:
        __break(1u);
        goto LABEL_458;
      }
      if (v53 + 1 < 1)
      {
        uint64_t v49 = 1;
        uint64_t v35 = v51;
      }
      else
      {
        if (v49 == 2)
        {
          uint64_t v35 = v53;
LABEL_59:
          if (v35)
          {
LABEL_446:
            __break(1u);
            goto LABEL_447;
          }
          goto LABEL_60;
        }
        int v54 = (void *)(v25 + 72);
        uint64_t v55 = 2;
        while (1)
        {
          if (v49 == v55) {
            goto LABEL_439;
          }
          uint64_t v35 = v53 - *v54;
          if (__OFSUB__(v53, *v54)) {
            goto LABEL_440;
          }
          if (__OFADD__(v35, 1)) {
            goto LABEL_441;
          }
          if (v35 + 1 < 1) {
            break;
          }
          ++v55;
          v54 += 3;
          uint64_t v53 = v35;
          if (v49 == v55) {
            goto LABEL_59;
          }
        }
        uint64_t v49 = v55;
        uint64_t v35 = v53;
      }
    }
LABEL_60:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v25 = v34 & 0xFFFFFFFFFFFFF0FFLL | (v49 << 8);
    uint64_t v22 = v401;
    goto LABEL_38;
  }
  unint64_t v46 = swift_unknownObjectRetain();
  uint64_t v25 = specialized Rope._endPath.getter(v46);
  swift_unknownObjectRelease();
  uint64_t v47 = 0;
  uint64_t v35 = 0;
  if (v26)
  {
LABEL_38:
    swift_unknownObjectRetain();
    uint64_t v48 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v384, v25, v47, v26, (uint64_t)v22);
    swift_unknownObjectRelease_n();
    goto LABEL_62;
  }
  uint64_t v48 = 0;
LABEL_62:
  uint64_t v23 = (uint64_t)v386;
  int64_t v26 = v377;
  unint64_t v383 = v33 - v35;
  if (__OFSUB__(v33, v35))
  {
LABEL_385:
    __break(1u);
    goto LABEL_386;
  }
  long long v56 = *(_OWORD *)(v398 + 16);
  long long v57 = *(_OWORD *)(v398 + 32);
  long long v488 = *(_OWORD *)(v398 + 48);
  v487[1] = v57;
  v487[0] = v56;
  long long v58 = *(_OWORD *)(v398 + 16);
  long long v59 = *(_OWORD *)(v398 + 32);
  v489[2] = v488;
  v489[1] = v59;
  v489[0] = v58;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v489, (uint64_t)v490);
  outlined retain of Locale((uint64_t)v490);
  uint64_t v22 = (uint64_t *)v487;
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v487);
  if (__OFSUB__(0, v35))
  {
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
    goto LABEL_388;
  }
  unint64_t v368 = v25;
  v376 = (long long *)(v398 + 16);
  uint64_t v60 = v47;
  uint64_t v25 = v390;
  uint64_t v61 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v379 = v62;
  uint64_t v375 = v63;
  uint64_t v371 = v64;
  outlined release of Locale((uint64_t)&v431);
  uint64_t v22 = v386;
  unint64_t v369 = v391;
  int64_t v370 = (int64_t)v394;
  v378 = (void *)*((void *)&v456 + 1);
  uint64_t v359 = v47;
  if (v48 == *((void *)&v456 + 1))
  {
LABEL_171:
    outlined release of AttributedString.Runs((uint64_t)v455);
    uint64_t v358 = v25;
    goto LABEL_172;
  }
  int64_t v65 = *((void *)&v455[0] + 1);
  uint64_t v66 = *(void *)(v398 + 64);
  uint64_t v67 = *(void *)(v398 + 72);
  uint64_t v68 = *(void *)(v398 + 80);
  uint64_t v69 = *(void *)(v398 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v384, v368, v60, v66, v67, v68, v69);
  int64_t v71 = v70;
  uint64_t v73 = v72;
  uint64_t result = swift_unknownObjectRelease();
  int64_t v365 = v65;
  if (v65 >= v48)
  {
    unint64_t v115 = v383;
LABEL_121:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v116 = v115;
    goto LABEL_125;
  }
  v399 = (long long *)&v453;
  v400 = v417;
  v364 = (uint64_t *)(v392 + 40);
  unint64_t v74 = v368;
  uint64_t v25 = v393;
  unint64_t v75 = v383;
  int64_t v382 = v71;
  v357 = v73;
  uint64_t v358 = v61;
LABEL_67:
  uint64_t v76 = *(void *)(v398 + 64);
  uint64_t v77 = *(void *)(v398 + 88);
  uint64_t v409 = v384;
  uint64_t v410 = v74;
  unint64_t v411 = v60;
  if (v384 != v77) {
    goto LABEL_434;
  }
  int64_t v370 = v48;
  if (v76)
  {
    unint64_t v78 = *(unsigned __int8 *)(v76 + 18);
    unint64_t v79 = v74;
    uint64_t result = swift_unknownObjectRetain();
    unint64_t v74 = v79;
    if (v79 <= v78) {
      goto LABEL_435;
    }
  }
  else if (!v74)
  {
    goto LABEL_435;
  }
  if (!v60 || (char v80 = (4 * *(unsigned char *)(v60 + 18) + 8) & 0x3C, ((v74 >> v80) & 0xF) == 0))
  {
    int v82 = *(unsigned __int8 *)(v76 + 18);
    char v83 = (4 * v82 + 8) & 0x3C;
    uint64_t v84 = (v74 >> v83) & 0xF;
    *(void *)&long long v451 = v84;
    if (v82)
    {
      swift_unknownObjectRetain();
      char v85 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v76 + 16, v76 + 24, (uint64_t *)&v451, (uint64_t)&v409, v82);
      uint64_t result = swift_unknownObjectRelease();
      if ((v85 & 1) == 0) {
        goto LABEL_445;
      }
      if (v409 != v384) {
        goto LABEL_436;
      }
      uint64_t v60 = v411;
      unint64_t v81 = v410;
      uint64_t v25 = v393;
      if (v411) {
        goto LABEL_79;
      }
    }
    else
    {
      if (!v84) {
        goto LABEL_445;
      }
      unint64_t v81 = ((v84 - 1) << v83) | ((-15 << v83) - 1) & v74;
      uint64_t v410 = v81;
      unint64_t v411 = v76;
      uint64_t v60 = v76;
      if (v76) {
        goto LABEL_79;
      }
    }
    swift_unknownObjectRetain();
    unint64_t v369 = v81;
    unint64_t v87 = specialized Rope._Node.subscript.getter(v81, v76);
    swift_unknownObjectRelease();
    uint64_t v366 = 0;
    char v88 = 1;
    goto LABEL_83;
  }
  unint64_t v81 = ((((v74 >> v80) & 0xF) - 1) << v80) | ((-15 << v80) - 1) & v74;
  uint64_t v410 = v81;
LABEL_79:
  char v86 = (4 * *(unsigned char *)(v60 + 18) + 8) & 0x3C;
  unint64_t v369 = v81;
  uint64_t v366 = v60;
  unint64_t v87 = *(void *)(v60 + 24 * ((v81 >> v86) & 0xF) + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v88 = 0;
LABEL_83:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFSUB__(v75, v87)) {
    goto LABEL_437;
  }
  if (v384 != *(void *)(v398 + 88)) {
    goto LABEL_438;
  }
  unint64_t v356 = v75 - v87;
  unint64_t v383 = v75;
  if (v88)
  {
    uint64_t v89 = *(void *)(v398 + 64);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v369, v89);
    v367 = v90;
    uint64_t v22 = v91;
    swift_unknownObjectRelease();
  }
  else
  {
    unint64_t v92 = v366 + 24 * ((v369 >> ((4 * *(unsigned char *)(v366 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v22 = *(uint64_t **)(v92 + 32);
    long long v93 = *(uint64_t **)(v92 + 40);
    swift_bridgeObjectRetain();
    v367 = v93;
    swift_bridgeObjectRetain();
  }
  int64_t v26 = v382;
  --v370;
  swift_bridgeObjectRetain();
  uint64_t v94 = 0;
  long long v95 = v364;
  v401 = v22;
  while (1)
  {
    uint64_t v23 = v94 + 1;
    if (__OFADD__(v94, 1)) {
      goto LABEL_365;
    }
    uint64_t v97 = *(v95 - 1);
    uint64_t v98 = *v95;
    if (*(void *)(v26 + 16))
    {
      swift_bridgeObjectRetain_n();
      unint64_t v99 = specialized __RawDictionaryStorage.find<A>(_:)(v97, v98);
      if (v100)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v26 + 56) + 72 * v99, (uint64_t)&v445);
      }
      else
      {
        uint64_t v449 = 0;
        long long v448 = 0u;
        long long v447 = 0u;
        long long v446 = 0u;
        long long v445 = 0u;
      }
      swift_bridgeObjectRelease();
      uint64_t v22 = v401;
      if (!v401[2])
      {
LABEL_98:
        uint64_t v439 = 0;
        long long v438 = 0u;
        long long v437 = 0u;
        long long v436 = 0u;
        long long v435 = 0u;
        goto LABEL_105;
      }
    }
    else
    {
      uint64_t v449 = 0;
      long long v448 = 0u;
      long long v447 = 0u;
      long long v446 = 0u;
      long long v445 = 0u;
      swift_bridgeObjectRetain();
      if (!v22[2]) {
        goto LABEL_98;
      }
    }
    swift_bridgeObjectRetain();
    unint64_t v101 = specialized __RawDictionaryStorage.find<A>(_:)(v97, v98);
    if (v102)
    {
      outlined init with copy of AttributedString._AttributeValue(v22[7] + 72 * v101, (uint64_t)&v435);
    }
    else
    {
      uint64_t v439 = 0;
      long long v438 = 0u;
      long long v437 = 0u;
      long long v436 = 0u;
      long long v435 = 0u;
    }
    swift_bridgeObjectRelease();
LABEL_105:
    swift_bridgeObjectRelease();
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v445, (uint64_t)&v409, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v435, (uint64_t)v400, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v412)
    {
      if (v418) {
        goto LABEL_123;
      }
      outlined destroy of Any?((uint64_t)&v409, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v435, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?((uint64_t)&v445, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      goto LABEL_92;
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v409, (uint64_t)&v424, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if (!v418) {
      break;
    }
    long long v103 = *((_OWORD *)v400 + 3);
    long long v421 = *((_OWORD *)v400 + 2);
    long long v422 = v103;
    uint64_t v423 = *((void *)v400 + 8);
    long long v104 = *((_OWORD *)v400 + 1);
    long long v419 = *(_OWORD *)v400;
    long long v420 = v104;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v424, (uint64_t)v407);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v419, (uint64_t)&v402);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v407, (uint64_t)&v451, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v402, (uint64_t)v399, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (!v452)
    {
      if (!v454)
      {
        char v96 = 1;
        goto LABEL_91;
      }
      outlined destroy of Any?((uint64_t)v399, &demangling cache variable for type metadata for (Hashable & Sendable)?);
LABEL_90:
      char v96 = 0;
      goto LABEL_91;
    }
    if (!v454)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v451);
      goto LABEL_90;
    }
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v451, (uint64_t)v476);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v399, (uint64_t)v475);
    uint64_t v105 = v477;
    uint64_t v381 = v478;
    v380 = __swift_project_boxed_opaque_existential_1(v476, v477);
    v388 = v355;
    uint64_t v106 = *(void *)(v105 - 8);
    MEMORY[0x1F4188790](v380);
    uint64_t v108 = (char *)v355 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v475, (uint64_t)v472);
    uint64_t v109 = type metadata accessor for Optional();
    unint64_t v385 = (unint64_t)v355;
    uint64_t v110 = *(void *)(v109 - 8);
    MEMORY[0x1F4188790](v109);
    long long v112 = (char *)v355 - v111;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    int v113 = swift_dynamicCast();
    long long v114 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56);
    if (v113)
    {
      v114(v112, 0, 1, v105);
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v108, v112, v105);
      char v96 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v106 + 8))(v108, v105);
    }
    else
    {
      v114(v112, 1, 1, v105);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v109);
      char v96 = 0;
    }
    int64_t v26 = v382;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v475);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v476);
    uint64_t v25 = v393;
LABEL_91:
    outlined destroy of Any?((uint64_t)&v402, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v407, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v419);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v424);
    outlined destroy of Any?((uint64_t)&v409, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v435, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    outlined destroy of Any?((uint64_t)&v445, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    if ((v96 & 1) == 0) {
      goto LABEL_124;
    }
LABEL_92:
    v95 += 2;
    ++v94;
    uint64_t v22 = v401;
    if (v23 == v25)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v115 = v356;
      unint64_t v75 = v356;
      unint64_t v74 = v369;
      uint64_t v48 = v370;
      uint64_t v60 = v366;
      if (v365 >= v370) {
        goto LABEL_121;
      }
      goto LABEL_67;
    }
  }
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v424);
LABEL_123:
  outlined destroy of Any?((uint64_t)&v409, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  outlined destroy of Any?((uint64_t)&v435, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v445, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_124:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v116 = v383;
LABEL_125:
  uint64_t v117 = v376;
  long long v118 = *v376;
  long long v119 = v376[1];
  long long v486 = v376[2];
  v485[1] = v119;
  v485[0] = v118;
  long long v120 = *v376;
  long long v121 = v376[1];
  v491[2] = v486;
  v491[1] = v121;
  v491[0] = v120;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v491, (uint64_t)v492);
  outlined retain of Locale((uint64_t)v492);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v485);
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(v116, result))
  {
LABEL_432:
    __break(1u);
LABEL_433:
    __break(1u);
LABEL_434:
    __break(1u);
LABEL_435:
    __break(1u);
LABEL_436:
    __break(1u);
LABEL_437:
    __break(1u);
LABEL_438:
    __break(1u);
LABEL_439:
    __break(1u);
LABEL_440:
    __break(1u);
LABEL_441:
    __break(1u);
LABEL_442:
    __break(1u);
LABEL_443:
    __break(1u);
LABEL_444:
    __break(1u);
LABEL_445:
    __break(1u);
    goto LABEL_446;
  }
  uint64_t v122 = BigString.UTF8View.index(_:offsetBy:)();
  int64_t v124 = v123;
  unint64_t v126 = v125;
  uint64_t v128 = v127;
  outlined release of Locale((uint64_t)&v441);
  uint64_t v129 = v389;
  uint64_t v130 = v395;
  unint64_t v131 = (unint64_t)v396;
  uint64_t v132 = v397;
  char v133 = static BigString.Index.< infix(_:_:)();
  if (v133) {
    uint64_t v134 = v122;
  }
  else {
    uint64_t v134 = v129;
  }
  uint64_t v379 = v134;
  if (v133) {
    int64_t v135 = v124;
  }
  else {
    int64_t v135 = v130;
  }
  if (v133)
  {
    unint64_t v131 = v126;
    uint64_t v136 = v128;
  }
  else
  {
    uint64_t v136 = (uint64_t)v132;
  }
  long long v137 = v117[1];
  long long v482 = *v117;
  long long v483 = v137;
  long long v484 = v117[2];
  BigString.unicodeScalars.getter();
  uint64_t v138 = BigString.UnicodeScalarView.index(after:)();
  uint64_t v139 = v379;
  uint64_t v140 = v138;
  int64_t v26 = v141;
  uint64_t v25 = v142;
  uint64_t v144 = v143;
  outlined release of Locale((uint64_t)&v442);
  long long v145 = *v117;
  long long v146 = v117[1];
  long long v474 = v117[2];
  v473[1] = v146;
  v473[0] = v145;
  long long v147 = *v117;
  long long v148 = v117[1];
  uint64_t v149 = v140;
  uint64_t v150 = v136;
  v493[2] = v474;
  v493[1] = v148;
  v493[0] = v147;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v493, (uint64_t)v494);
  outlined retain of Locale((uint64_t)v494);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_433;
  }
  v476[0] = v139;
  v476[1] = v135;
  v476[2] = v131;
  uint64_t v477 = v136;
  uint64_t v478 = v149;
  int64_t v479 = v26;
  uint64_t v480 = v25;
  uint64_t v481 = v144;
  uint64_t v151 = specialized Array._getCount()(v387);
  unint64_t v369 = v131;
  int64_t v370 = v135;
  if (!v151)
  {
    v401 = (uint64_t *)v136;
    uint64_t v23 = (uint64_t)v386;
    goto LABEL_170;
  }
  uint64_t v152 = v151;
  v400 = (unsigned char *)v149;
  char v153 = static BigString.Index.== infix(_:_:)();
  uint64_t v23 = (uint64_t)v386;
  if (v153)
  {
    v401 = (uint64_t *)v150;
    goto LABEL_170;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = 0;
  uint64_t v23 = 40;
  while (1)
  {
    uint64_t v154 = (char *)v22 + 1;
    if (__OFADD__(v22, 1)) {
      goto LABEL_372;
    }
    if (!*(void *)(v387 + v23)) {
      break;
    }
    swift_bridgeObjectRelease();
    v23 += 16;
    uint64_t v22 = (uint64_t *)((char *)v22 + 1);
    if (v154 == (char *)v152)
    {
      swift_bridgeObjectRelease();
      uint64_t v23 = (uint64_t)v386;
      uint64_t v155 = (uint64_t)v400;
      goto LABEL_151;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  BigString.startIndex.getter();
  uint64_t v155 = (uint64_t)v400;
  if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
  {
LABEL_150:
    uint64_t v23 = (uint64_t)v386;
    goto LABEL_151;
  }
  BigString.utf8.getter();
  v399 = (long long *)BigString.UTF8View.index(before:)();
  unint64_t v157 = v156;
  uint64_t v159 = v158;
  v401 = v160;
  outlined release of Locale((uint64_t)&v443);
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  long long v161 = v399;
  outlined release of Locale((uint64_t)&v444);
  unint64_t v385 = v157;
  v388 = v159;
  uint64_t v162 = v401;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  uint64_t v23 = (uint64_t)v386;
  if (result) {
    goto LABEL_460;
  }
  v475[0] = v161;
  v475[1] = v385;
  v475[2] = v388;
  v475[3] = v162;
  v475[4] = v155;
  v475[5] = v26;
  v475[6] = v25;
  v475[7] = v144;
  specialized BidirectionalCollection<>._getBlock(for:in:)(1, (uint64_t)v475, &v409);
  outlined release of Locale((uint64_t)&v445);
  if (v412 != 2)
  {
    uint64_t v379 = v409;
    unint64_t v369 = v411;
    int64_t v370 = v410;
    uint64_t v150 = v412;
    if (static BigString.Index.< infix(_:_:)())
    {
      __break(1u);
      goto LABEL_150;
    }
  }
LABEL_151:
  v472[0] = v379;
  v472[1] = v370;
  v472[2] = v369;
  v472[3] = v150;
  v472[4] = v155;
  v472[5] = v26;
  v472[6] = v25;
  v472[7] = v144;
  BOOL v163 = specialized Collection<>._containsScalarConstraint.getter(v387);
  v401 = (uint64_t *)v150;
  if (!v163)
  {
LABEL_170:
    outlined release of Locale((uint64_t)v473);
    int64_t v26 = v377;
    uint64_t v22 = (uint64_t *)v379;
    uint64_t v25 = (uint64_t)v401;
    goto LABEL_171;
  }
  uint64_t result = specialized static Array._allocateUninitialized(_:)(0);
  *(void *)&long long v451 = result;
  if (v152 < 1)
  {
LABEL_453:
    __break(1u);
LABEL_454:
    __break(1u);
LABEL_455:
    __break(1u);
    goto LABEL_456;
  }
  uint64_t v164 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
  do
  {
    unint64_t v169 = *v164;
    if (*v164)
    {
      uint64_t v170 = *(v164 - 1);
      if ((v169 & 0x2000000000000000) != 0 ? HIBYTE(v169) & 0xF : v170 & 0xFFFFFFFFFFFFLL)
      {
        if ((v169 & 0x1000000000000000) != 0)
        {
          int v165 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v169 & 0x2000000000000000) != 0)
          {
            uint64_t v409 = *(v164 - 1);
            uint64_t v410 = v169 & 0xFFFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain();
          }
          else
          {
            if ((v170 & 0x1000000000000000) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            swift_bridgeObjectRetain();
          }
          int v165 = _decodeScalar(_:startingAt:)();
          swift_bridgeObjectRelease();
        }
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v166 = *(void *)(v451 + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v166);
        uint64_t v167 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v166, v165);
        destructiveProjectEnumData for PredicateCodableError(v167, v168);
      }
    }
    v164 += 2;
    --v152;
  }
  while (v152);
  swift_bridgeObjectRelease();
  uint64_t v172 = v451;
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v450);
  uint64_t v173 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)(v172);
  int64_t v175 = v174;
  unint64_t v177 = v176;
  uint64_t v179 = v178;
  swift_bridgeObjectRelease();
  outlined release of Locale((uint64_t)&v451);
  uint64_t v23 = (uint64_t)v386;
  if (v179 == 2) {
    goto LABEL_170;
  }
  uint64_t v358 = v179;
  char v201 = static BigString.Index.< infix(_:_:)();
  outlined release of Locale((uint64_t)v473);
  uint64_t result = outlined release of AttributedString.Runs((uint64_t)v455);
  if (v201) {
    goto LABEL_461;
  }
  unint64_t v369 = v177;
  int64_t v370 = v175;
  uint64_t v22 = (uint64_t *)v173;
  int64_t v26 = v377;
LABEL_172:
  outlined retain of AttributedString.Runs((uint64_t)v455);
  if (static BigString.Index.< infix(_:_:)()) {
    goto LABEL_387;
  }
  if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
  {
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
    goto LABEL_390;
  }
  uint64_t v379 = (uint64_t)v22;
  uint64_t v22 = *(uint64_t **)(v398 + 64);
  uint64_t v180 = *(void *)(v398 + 72);
  uint64_t v25 = *(void *)(v398 + 80);
  int64_t v26 = *(void *)(v398 + 88);
  swift_unknownObjectRetain();
  uint64_t v181 = BigString.Index.utf8Offset.getter();
  if (v22) {
    uint64_t v182 = v25;
  }
  else {
    uint64_t v182 = 0;
  }
  if (v181 < 0) {
    goto LABEL_389;
  }
  uint64_t v183 = v181;
  if (v182 < v181) {
    goto LABEL_389;
  }
  unint64_t v383 = v26;
  if (!v22 || v181 >= v25 || !*((_WORD *)v22 + 8))
  {
    unint64_t v194 = swift_unknownObjectRetain();
    unint64_t v385 = specialized Rope._endPath.getter(v194);
    swift_unknownObjectRelease();
    uint64_t v184 = 0;
    uint64_t v195 = 0;
    if (v22) {
      goto LABEL_208;
    }
    int64_t v26 = 0;
LABEL_239:
    int64_t v382 = v183 - v184;
    if (__OFSUB__(v183, v184))
    {
LABEL_390:
      __break(1u);
      goto LABEL_391;
    }
    long long v204 = *v376;
    long long v205 = v376[1];
    long long v471 = v376[2];
    v470[1] = v205;
    v470[0] = v204;
    long long v206 = *v376;
    long long v207 = v376[1];
    v495[2] = v471;
    v495[1] = v207;
    v495[0] = v206;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v495, (uint64_t)v496);
    outlined retain of Locale((uint64_t)v496);
    uint64_t v22 = (uint64_t *)v470;
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v470);
    if (__OFSUB__(0, v184))
    {
LABEL_391:
      __break(1u);
      goto LABEL_392;
    }
    uint64_t v22 = (uint64_t *)BigString.UTF8View.index(_:offsetBy:)();
    unint64_t v209 = v208;
    uint64_t v23 = v210;
    uint64_t v25 = v211;
    outlined release of Locale((uint64_t)&v432);
    if (v26 >= (uint64_t)v378)
    {
LABEL_392:
      __break(1u);
      goto LABEL_393;
    }
    v355[1] = v25;
    v355[2] = v23;
    unint64_t v356 = v209;
    v357 = v22;
    uint64_t v212 = (void *)v398;
    uint64_t v213 = *(void *)(v398 + 64);
    uint64_t v214 = *(void *)(v398 + 72);
    uint64_t v215 = *(void *)(v398 + 80);
    uint64_t v216 = *(void *)(v398 + 88);
    swift_unknownObjectRetain();
    uint64_t v217 = v383;
    unint64_t v218 = v385;
    specialized Rope.subscript.getter(v383, v385, v195, v213, v214, v215, v216);
    uint64_t v23 = v219;
    v355[3] = v220;
    swift_unknownObjectRelease();
    uint64_t v221 = v195;
    uint64_t v22 = (uint64_t *)v212[8];
    v380 = (void *)(v26 + 1);
    int64_t v26 = v212[10];
    unint64_t v222 = v212[11];
    v399 = (long long *)((char *)&v437 + 8);
    v400 = v417;
    uint64_t v25 = v393;
    v367 = (uint64_t *)(v392 + 40);
    unint64_t v223 = v222;
    uint64_t v409 = v217;
    uint64_t v410 = v218;
    unint64_t v411 = v195;
    uint64_t v395 = v23;
LABEL_243:
    if (v217 != v223) {
      goto LABEL_373;
    }
    uint64_t v375 = v223;
    uint64_t v224 = v25;
    uint64_t v381 = v221;
    if (v221)
    {
      unint64_t v225 = v385;
      uint64_t v226 = (void *)(v221 + 24 * ((v385 >> ((4 * *(unsigned char *)(v221 + 18) + 8) & 0x3C)) & 0xF));
      uint64_t v23 = v226[3];
      int64_t v26 = v226[4];
      uint64_t v25 = v226[5];
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v225 = v385;
      uint64_t v23 = specialized Rope._Node.subscript.getter(v385, (uint64_t)v22);
      int64_t v26 = v227;
      uint64_t v25 = v228;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (__OFADD__(v382, v23)) {
      goto LABEL_374;
    }
    uint64_t v366 = v382 + v23;
    if (v22)
    {
      unint64_t v229 = ((-15 << ((4 * *((unsigned char *)v22 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v22 + 18) | ((unint64_t)*((unsigned __int16 *)v22 + 8) << ((4 * *((unsigned char *)v22 + 18) + 8) & 0x3C));
      swift_unknownObjectRetain();
    }
    else
    {
      unint64_t v229 = 0;
    }
    uint64_t v25 = v224;
    uint64_t v23 = v395;
    if (v225 >= v229) {
      goto LABEL_375;
    }
    if (v381)
    {
      char v230 = (4 * *(unsigned char *)(v381 + 18) + 8) & 0x3C;
      unint64_t v231 = ((v225 >> v230) & 0xF) + 1;
      if (v231 < *(unsigned __int16 *)(v381 + 16))
      {
        unint64_t v232 = (v231 << v230) | ((-15 << v230) - 1) & v225;
        swift_unknownObjectRelease_n();
LABEL_258:
        uint64_t v22 = (uint64_t *)v411;
LABEL_266:
        if (v380 == v378)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_307:
          uint64_t v22 = *(uint64_t **)(v398 + 64);
          uint64_t v266 = *(void *)(v398 + 72);
          uint64_t v267 = *(void *)(v398 + 80);
          uint64_t v268 = *(void *)(v398 + 88);
          swift_unknownObjectRetain();
          unint64_t v269 = specialized Rope.subscript.getter(v375, v225, v381, (uint64_t)v22, v266, v267, v268);
          uint64_t v23 = v270;
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          BOOL v42 = __OFADD__(v382, v269);
          unint64_t v271 = v382 + v269;
          uint64_t v25 = v356;
          int64_t v26 = (int64_t)v357;
          if (!v42)
          {
            uint64_t v23 = (uint64_t)v376;
            long long v272 = *v376;
            long long v273 = v376[1];
            long long v469 = v376[2];
            long long v468 = v273;
            long long v467 = v272;
            long long v274 = *v376;
            long long v275 = v376[1];
            v497[2] = v469;
            v497[1] = v275;
            v497[0] = v274;
            outlined init with take of any PredicateExpression<Self.Output == B1>(v497, (uint64_t)v498);
            outlined retain of Locale((uint64_t)v498);
            uint64_t v22 = (uint64_t *)&v467;
            BigString.utf8.getter();
            outlined release of Locale((uint64_t)&v467);
            if (!__OFSUB__(v271, BigString.Index.utf8Offset.getter()))
            {
              uint64_t v276 = BigString.UTF8View.index(_:offsetBy:)();
              long long v278 = v277;
              int64_t v26 = v279;
              uint64_t v25 = v280;
              outlined release of Locale((uint64_t)&v433);
              uint64_t v281 = v372;
              uint64_t v282 = v373;
              int64_t v283 = v377;
              int64_t v284 = v374;
              char v285 = static BigString.Index.< infix(_:_:)();
              if (v285) {
                uint64_t v286 = v281;
              }
              else {
                uint64_t v286 = v276;
              }
              if (v285)
              {
                long long v278 = (uint64_t *)v283;
                int64_t v26 = v284;
                uint64_t v287 = v282;
              }
              else
              {
                uint64_t v287 = v25;
              }
              uint64_t v288 = v390;
              unint64_t v289 = v391;
              long long v290 = *(_OWORD *)v23;
              long long v291 = *(_OWORD *)(v23 + 16);
              long long v466 = *(_OWORD *)(v23 + 32);
              v465[1] = v291;
              v465[0] = v290;
              long long v292 = *(_OWORD *)v23;
              long long v293 = *(_OWORD *)(v23 + 16);
              uint64_t v23 = v286;
              v499[1] = v293;
              v499[2] = v466;
              v499[0] = v292;
              outlined init with take of any PredicateExpression<Self.Output == B1>(v499, (uint64_t)v500);
              outlined retain of Locale((uint64_t)v500);
              v294 = v386;
              uint64_t v22 = v394;
              if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
              {
                *(void *)&long long v419 = v294;
                *((void *)&v419 + 1) = v22;
                *(void *)&long long v420 = v289;
                *((void *)&v420 + 1) = v288;
                *(void *)&long long v421 = v23;
                *((void *)&v421 + 1) = v278;
                *(void *)&long long v422 = v26;
                *((void *)&v422 + 1) = v287;
                uint64_t v295 = specialized Array._getCount()(v387);
                v401 = v278;
                if (v295)
                {
                  uint64_t v25 = v295;
                  if ((static BigString.Index.== infix(_:_:)() & 1) == 0)
                  {
                    uint64_t v296 = v387;
                    swift_bridgeObjectRetain();
                    uint64_t v22 = 0;
                    uint64_t v297 = 40;
                    while (1)
                    {
                      v298 = (char *)v22 + 1;
                      if (__OFADD__(v22, 1)) {
                        goto LABEL_364;
                      }
                      if (!*(void *)(v296 + v297)) {
                        break;
                      }
                      swift_bridgeObjectRelease();
                      v297 += 16;
                      uint64_t v22 = (uint64_t *)((char *)v22 + 1);
                      if (v298 == (char *)v25)
                      {
                        swift_bridgeObjectRelease();
                        uint64_t v299 = v390;
                        v300 = v394;
                        v301 = v386;
LABEL_326:
                        *(void *)&long long v402 = v301;
                        *((void *)&v402 + 1) = v300;
                        *(void *)&long long v403 = v289;
                        *((void *)&v403 + 1) = v299;
                        *(void *)&long long v404 = v23;
                        *((void *)&v404 + 1) = v401;
                        *(void *)&long long v405 = v26;
                        *((void *)&v405 + 1) = v287;
                        uint64_t v303 = v387;
                        if (!specialized Collection<>._containsScalarConstraint.getter(v387)) {
                          goto LABEL_344;
                        }
                        uint64_t result = specialized static Array._allocateUninitialized(_:)(0);
                        *(void *)&long long v424 = result;
                        if (v25 < 1) {
                          goto LABEL_452;
                        }
                        swift_bridgeObjectRetain();
                        v304 = (unint64_t *)(v303 + 40);
                        do
                        {
                          unint64_t v309 = *v304;
                          if (*v304)
                          {
                            uint64_t v310 = *(v304 - 1);
                            if ((v309 & 0x2000000000000000) != 0 ? HIBYTE(v309) & 0xF : v310 & 0xFFFFFFFFFFFFLL)
                            {
                              if ((v309 & 0x1000000000000000) != 0)
                              {
                                int v305 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                              }
                              else
                              {
                                if ((v309 & 0x2000000000000000) != 0)
                                {
                                  uint64_t v409 = *(v304 - 1);
                                  uint64_t v410 = v309 & 0xFFFFFFFFFFFFFFLL;
                                  swift_bridgeObjectRetain();
                                }
                                else
                                {
                                  if ((v310 & 0x1000000000000000) == 0) {
                                    _StringObject.sharedUTF8.getter();
                                  }
                                  swift_bridgeObjectRetain();
                                }
                                int v305 = _decodeScalar(_:startingAt:)();
                                swift_bridgeObjectRelease();
                              }
                              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                              uint64_t v306 = *(void *)(v424 + 16);
                              specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v306);
                              uint64_t v307 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v306, v305);
                              destructiveProjectEnumData for PredicateCodableError(v307, v308);
                            }
                          }
                          v304 += 2;
                          --v25;
                        }
                        while (v25);
                        swift_bridgeObjectRelease();
                        uint64_t v322 = v424;
                        BigString.unicodeScalars.getter();
                        BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)v440);
                        uint64_t v323 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)(v322);
                        v325 = v324;
                        int64_t v327 = v326;
                        uint64_t v25 = v328;
                        swift_bridgeObjectRelease();
                        outlined release of Locale((uint64_t)&v409);
                        v312 = (void *)v398;
                        if (v25 == 2) {
                          goto LABEL_345;
                        }
                        char v329 = static BigString.Index.< infix(_:_:)();
                        outlined release of Locale((uint64_t)v465);
                        uint64_t result = outlined release of AttributedString.Runs((uint64_t)v455);
                        if (v329) {
                          goto LABEL_455;
                        }
                        uint64_t v23 = v323;
                        v401 = v325;
                        int64_t v26 = v327;
                        goto LABEL_346;
                      }
                    }
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease_n();
                    BigString.utf8.getter();
                    BigString.UTF8View.subscript.getter();
                    outlined release of Locale((uint64_t)&v434);
                    v301 = v386;
                    v300 = v394;
                    uint64_t v299 = v390;
                    uint64_t result = static BigString.Index.< infix(_:_:)();
                    if (result) {
                      goto LABEL_451;
                    }
                    v407[0] = v301;
                    v407[1] = v300;
                    v407[2] = v289;
                    v407[3] = v299;
                    v407[4] = v301;
                    v407[5] = v300;
                    v407[6] = v289;
                    v407[7] = v299;
                    specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)v407, &v409);
                    outlined release of Locale((uint64_t)&v435);
                    uint64_t v302 = v416;
                    if (v416 != 2)
                    {
                      uint64_t v23 = v413;
                      int64_t v26 = v415;
                      v401 = v414;
                      uint64_t result = static BigString.Index.< infix(_:_:)();
                      uint64_t v287 = v302;
                      if (result) {
                        goto LABEL_454;
                      }
                    }
                    goto LABEL_326;
                  }
                }
LABEL_344:
                v312 = (void *)v398;
LABEL_345:
                outlined release of Locale((uint64_t)v465);
                outlined release of AttributedString.Runs((uint64_t)v455);
                uint64_t v25 = v287;
LABEL_346:
                uint64_t v314 = v312[8];
                uint64_t v313 = v312[9];
                uint64_t v315 = v312[10];
                uint64_t v316 = v312[11];
                swift_unknownObjectRetain();
                specialized Rope.subscript.getter(v384, v368, v359, v314, v313, v315, v316);
                uint64_t v22 = v317;
                swift_unknownObjectRelease();
                if (one-time initialization token for name == -1)
                {
                  if (!v22[2])
                  {
LABEL_397:
                    uint64_t v428 = 0;
                    long long v426 = 0u;
                    long long v427 = 0u;
                    long long v424 = 0u;
                    long long v425 = 0u;
                    goto LABEL_398;
                  }
LABEL_348:
                  uint64_t v318 = qword_1E8ED5E58;
                  uint64_t v319 = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
                  swift_bridgeObjectRetain();
                  unint64_t v320 = specialized __RawDictionaryStorage.find<A>(_:)(v319, v318);
                  if (v321)
                  {
                    outlined init with copy of AttributedString._AttributeValue(v22[7] + 72 * v320, (uint64_t)&v424);
                  }
                  else
                  {
                    uint64_t v428 = 0;
                    long long v426 = 0u;
                    long long v427 = 0u;
                    long long v424 = 0u;
                    long long v425 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (*((void *)&v425 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v424, (uint64_t)v408);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v424);
                    goto LABEL_399;
                  }
LABEL_398:
                  outlined destroy of Any?((uint64_t)&v424, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  v330 = v361;
                  _OWORD *v361 = xmmword_182106C90;
                  *((unsigned char *)v330 + 20) = 0;
                  *((_DWORD *)v330 + 4) = 0;
LABEL_399:
                  if (one-time initialization token for name == -1)
                  {
                    if (v22[2]) {
                      goto LABEL_401;
                    }
                  }
                  else
                  {
                    swift_once();
                    if (v22[2])
                    {
LABEL_401:
                      uint64_t v331 = qword_1E8ED5EB0;
                      uint64_t v332 = static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name;
                      swift_bridgeObjectRetain();
                      unint64_t v333 = specialized __RawDictionaryStorage.find<A>(_:)(v332, v331);
                      if (v334)
                      {
                        outlined init with copy of AttributedString._AttributeValue(v22[7] + 72 * v333, (uint64_t)&v424);
                      }
                      else
                      {
                        uint64_t v428 = 0;
                        long long v426 = 0u;
                        long long v427 = 0u;
                        long long v424 = 0u;
                        long long v425 = 0u;
                      }
                      swift_bridgeObjectRelease();
                      if (*((void *)&v425 + 1))
                      {
                        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v424, (uint64_t)v408);
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                        swift_dynamicCast();
                        outlined destroy of AttributedString._AttributeValue((uint64_t)&v424);
                        char v335 = 0;
                        goto LABEL_409;
                      }
LABEL_408:
                      outlined destroy of Any?((uint64_t)&v424, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      uint64_t v429 = 0;
                      char v335 = 1;
LABEL_409:
                      char v430 = v335;
                      if (one-time initialization token for name == -1)
                      {
                        if (v22[2]) {
                          goto LABEL_411;
                        }
                      }
                      else
                      {
                        swift_once();
                        if (v22[2])
                        {
LABEL_411:
                          uint64_t v336 = qword_1E8ED5E98;
                          uint64_t v337 = static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name;
                          swift_bridgeObjectRetain();
                          unint64_t v338 = specialized __RawDictionaryStorage.find<A>(_:)(v337, v336);
                          if (v339)
                          {
                            outlined init with copy of AttributedString._AttributeValue(v22[7] + 72 * v338, (uint64_t)&v424);
                          }
                          else
                          {
                            uint64_t v428 = 0;
                            long long v426 = 0u;
                            long long v427 = 0u;
                            long long v424 = 0u;
                            long long v425 = 0u;
                          }
                          swift_bridgeObjectRelease();
                          if (*((void *)&v425 + 1))
                          {
                            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v424, (uint64_t)v408);
                            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                            v340 = v362;
                            swift_dynamicCast();
                            outlined destroy of AttributedString._AttributeValue((uint64_t)&v424);
                            char v341 = 0;
                            goto LABEL_419;
                          }
LABEL_418:
                          outlined destroy of Any?((uint64_t)&v424, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                          v340 = v362;
                          void *v362 = 0;
                          char v341 = 1;
LABEL_419:
                          *((unsigned char *)v340 + 8) = v341;
                          if (one-time initialization token for name == -1)
                          {
                            if (v22[2]) {
                              goto LABEL_421;
                            }
                          }
                          else
                          {
                            swift_once();
                            if (v22[2])
                            {
LABEL_421:
                              uint64_t v342 = qword_1E8ED5E80;
                              uint64_t v343 = static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name;
                              swift_bridgeObjectRetain();
                              unint64_t v344 = specialized __RawDictionaryStorage.find<A>(_:)(v343, v342);
                              if (v345)
                              {
                                outlined init with copy of AttributedString._AttributeValue(v22[7] + 72 * v344, (uint64_t)&v424);
                              }
                              else
                              {
                                uint64_t v428 = 0;
                                long long v426 = 0u;
                                long long v427 = 0u;
                                long long v424 = 0u;
                                long long v425 = 0u;
                              }
                              swift_bridgeObjectRelease();
                              if (*((void *)&v425 + 1))
                              {
                                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v424, (uint64_t)v408);
                                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                                v346 = v363;
                                swift_dynamicCast();
                                outlined destroy of AttributedString._AttributeValue((uint64_t)&v424);
                                char v347 = 0;
LABEL_429:
                                *((unsigned char *)v346 + 8) = v347;
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                v348 = v401;
                                uint64_t v349 = v379;
                                unint64_t v351 = v369;
                                int64_t v350 = v370;
                                uint64_t v352 = v23;
                                uint64_t v353 = v358;
                                uint64_t result = static BigString.Index.< infix(_:_:)();
                                if ((result & 1) == 0)
                                {
                                  v354 = v360;
                                  uint64_t *v360 = v349;
                                  v354[1] = v350;
                                  v354[2] = v351;
                                  v354[3] = v353;
                                  v354[4] = v352;
                                  v354[5] = (uint64_t)v348;
                                  v354[6] = v26;
                                  v354[7] = v25;
                                  return v429;
                                }
                                __break(1u);
                                goto LABEL_432;
                              }
LABEL_428:
                              outlined destroy of Any?((uint64_t)&v424, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                              v346 = v363;
                              void *v363 = 0;
                              char v347 = 1;
                              goto LABEL_429;
                            }
                          }
                          uint64_t v428 = 0;
                          long long v426 = 0u;
                          long long v427 = 0u;
                          long long v424 = 0u;
                          long long v425 = 0u;
                          goto LABEL_428;
                        }
                      }
                      uint64_t v428 = 0;
                      long long v426 = 0u;
                      long long v427 = 0u;
                      long long v424 = 0u;
                      long long v425 = 0u;
                      goto LABEL_418;
                    }
                  }
                  uint64_t v428 = 0;
                  long long v426 = 0u;
                  long long v427 = 0u;
                  long long v424 = 0u;
                  long long v425 = 0u;
                  goto LABEL_408;
                }
LABEL_396:
                swift_once();
                if (!v22[2]) {
                  goto LABEL_397;
                }
                goto LABEL_348;
              }
LABEL_395:
              __break(1u);
              goto LABEL_396;
            }
LABEL_394:
            __break(1u);
            goto LABEL_395;
          }
LABEL_393:
          __break(1u);
          goto LABEL_394;
        }
        if (v409 != *(void *)(v398 + 88)) {
          goto LABEL_376;
        }
        unint64_t v383 = v409;
        v364 = v22;
        int64_t v365 = v232;
        if (v22)
        {
          long long v240 = &v22[3 * ((v232 >> ((4 * *((unsigned char *)v22 + 18) + 8) & 0x3C)) & 0xF)];
          uint64_t v22 = (uint64_t *)v240[4];
          uint64_t v241 = v240[5];
          swift_bridgeObjectRetain();
          uint64_t v371 = v241;
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v242 = *(void *)(v398 + 64);
          swift_unknownObjectRetain();
          uint64_t v23 = v395;
          specialized Rope._Node.subscript.getter(v232, v242);
          uint64_t v371 = v243;
          uint64_t v22 = v244;
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRetain();
        uint64_t v245 = 0;
        uint64_t v246 = v367;
        v401 = v22;
        while (1)
        {
          int64_t v26 = v245 + 1;
          if (__OFADD__(v245, 1))
          {
            __break(1u);
LABEL_358:
            __break(1u);
            goto LABEL_359;
          }
          uint64_t v249 = *(v246 - 1);
          uint64_t v248 = *v246;
          if (*(void *)(v23 + 16))
          {
            swift_bridgeObjectRetain_n();
            unint64_t v250 = specialized __RawDictionaryStorage.find<A>(_:)(v249, v248);
            if (v251)
            {
              outlined init with copy of AttributedString._AttributeValue(*(void *)(v23 + 56) + 72 * v250, (uint64_t)&v424);
            }
            else
            {
              uint64_t v428 = 0;
              long long v426 = 0u;
              long long v427 = 0u;
              long long v424 = 0u;
              long long v425 = 0u;
            }
            swift_bridgeObjectRelease();
            uint64_t v22 = v401;
            if (!v401[2])
            {
LABEL_281:
              uint64_t v423 = 0;
              long long v421 = 0u;
              long long v422 = 0u;
              long long v419 = 0u;
              long long v420 = 0u;
              goto LABEL_288;
            }
          }
          else
          {
            uint64_t v428 = 0;
            long long v426 = 0u;
            long long v427 = 0u;
            long long v424 = 0u;
            long long v425 = 0u;
            swift_bridgeObjectRetain();
            if (!v22[2]) {
              goto LABEL_281;
            }
          }
          swift_bridgeObjectRetain();
          unint64_t v252 = specialized __RawDictionaryStorage.find<A>(_:)(v249, v248);
          if (v253)
          {
            outlined init with copy of AttributedString._AttributeValue(v22[7] + 72 * v252, (uint64_t)&v419);
          }
          else
          {
            uint64_t v423 = 0;
            long long v421 = 0u;
            long long v422 = 0u;
            long long v419 = 0u;
            long long v420 = 0u;
          }
          swift_bridgeObjectRelease();
LABEL_288:
          uint64_t v22 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
          swift_bridgeObjectRelease();
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v424, (uint64_t)&v409, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v419, (uint64_t)v400, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v412)
          {
            if (v418) {
              goto LABEL_305;
            }
            outlined destroy of Any?((uint64_t)&v409, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v419, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?((uint64_t)&v424, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            goto LABEL_275;
          }
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v409, (uint64_t)v407, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (!v418) {
            goto LABEL_304;
          }
          long long v254 = *((_OWORD *)v400 + 3);
          long long v404 = *((_OWORD *)v400 + 2);
          long long v405 = v254;
          uint64_t v406 = *((void *)v400 + 8);
          long long v255 = *((_OWORD *)v400 + 1);
          long long v402 = *(_OWORD *)v400;
          long long v403 = v255;
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v407, (uint64_t)v499);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v402, (uint64_t)v497);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v499, (uint64_t)&v435, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v497, (uint64_t)v399, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          if (*((void *)&v436 + 1))
          {
            if (!v439)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v435);
LABEL_273:
              char v247 = 0;
              goto LABEL_274;
            }
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v435, (uint64_t)&v467);
            outlined init with take of any PredicateExpression<Self.Output == B1>(v399, (uint64_t)v465);
            uint64_t v256 = *((void *)&v468 + 1);
            uint64_t v389 = v469;
            v388 = __swift_project_boxed_opaque_existential_1(&v467, *((uint64_t *)&v468 + 1));
            v397 = v355;
            uint64_t v257 = *(void *)(v256 - 8);
            MEMORY[0x1F4188790](v388);
            long long v259 = (char *)v355 - ((v258 + 15) & 0xFFFFFFFFFFFFFFF0);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v465, (uint64_t)v440);
            uint64_t v260 = type metadata accessor for Optional();
            v396 = v355;
            uint64_t v261 = *(void *)(v260 - 8);
            MEMORY[0x1F4188790](v260);
            long long v263 = (char *)v355 - v262;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            int v264 = swift_dynamicCast();
            long long v265 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v257 + 56);
            if (v264)
            {
              v265(v263, 0, 1, v256);
              (*(void (**)(char *, char *, uint64_t))(v257 + 32))(v259, v263, v256);
              char v247 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v257 + 8))(v259, v256);
            }
            else
            {
              v265(v263, 1, 1, v256);
              (*(void (**)(char *, uint64_t))(v261 + 8))(v263, v260);
              char v247 = 0;
            }
            uint64_t v25 = v393;
            uint64_t v23 = v395;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v465);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v467);
          }
          else
          {
            if (v439)
            {
              outlined destroy of Any?((uint64_t)v399, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              goto LABEL_273;
            }
            char v247 = 1;
          }
LABEL_274:
          outlined destroy of Any?((uint64_t)v497, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of Any?((uint64_t)v499, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v402);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v407);
          outlined destroy of Any?((uint64_t)&v409, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v419, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v424, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if ((v247 & 1) == 0) {
            goto LABEL_306;
          }
LABEL_275:
          v246 += 2;
          ++v245;
          uint64_t v22 = v401;
          if (v26 == v25)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v22 = *(uint64_t **)(v398 + 64);
            int64_t v26 = *(void *)(v398 + 80);
            unint64_t v223 = *(void *)(v398 + 88);
            int64_t v382 = v366;
            uint64_t v217 = v383;
            uint64_t v409 = v383;
            uint64_t v410 = v365;
            uint64_t v221 = (uint64_t)v364;
            unint64_t v385 = v365;
            unint64_t v411 = (unint64_t)v364;
            BOOL v42 = __OFADD__(v380, 1);
            v380 = (void *)((char *)v380 + 1);
            if (!v42) {
              goto LABEL_243;
            }
            __break(1u);
LABEL_304:
            outlined destroy of AttributedString._AttributeValue((uint64_t)v407);
LABEL_305:
            outlined destroy of Any?((uint64_t)&v409, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
            outlined destroy of Any?((uint64_t)&v419, v22);
            outlined destroy of Any?((uint64_t)&v424, v22);
LABEL_306:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v225 = v385;
            goto LABEL_307;
          }
        }
      }
    }
    int v233 = *((unsigned __int8 *)v22 + 18);
    char v234 = (4 * v233 + 8) & 0x3C;
    uint64_t v235 = (v225 >> v234) & 0xF;
    *(void *)&long long v435 = v235;
    if (v233)
    {
      int64_t v26 = (int64_t)(v22 + 3);
      swift_unknownObjectRetain();
      char v236 = specialized closure #1 in Rope._Node.formSuccessor(of:)((uint64_t)(v22 + 3), (uint64_t *)&v435, (uint64_t)&v409, (uint64_t)v22, v233);
      swift_unknownObjectRelease();
      if (v236)
      {
        swift_unknownObjectRelease_n();
        unint64_t v232 = v410;
        uint64_t v23 = v395;
        goto LABEL_258;
      }
    }
    else
    {
      uint64_t v237 = v235 + 1;
      if (v235 + 1 < (unint64_t)*((unsigned __int16 *)v22 + 8))
      {
        swift_unknownObjectRelease_n();
        unint64_t v232 = (v237 << v234) | ((-15 << v234) - 1) & v225;
LABEL_265:
        uint64_t v23 = v395;
        goto LABEL_266;
      }
    }
    if (v22)
    {
      int v238 = *((unsigned __int8 *)v22 + 18);
      uint64_t v239 = *((unsigned __int16 *)v22 + 8);
      swift_unknownObjectRelease_n();
      unint64_t v232 = ((-15 << ((4 * v238 + 8) & 0x3C)) - 1) & v238 | (unint64_t)(v239 << ((4 * v238 + 8) & 0x3C));
    }
    else
    {
      unint64_t v232 = 0;
    }
    uint64_t v22 = 0;
    uint64_t v409 = v375;
    goto LABEL_265;
  }
  v401 = (uint64_t *)v180;
  uint64_t v23 = *((unsigned __int8 *)v22 + 18);
  if (*((unsigned char *)v22 + 18))
  {
    swift_unknownObjectRetain_n();
    uint64_t v184 = v183;
    int64_t v185 = (int64_t)v22;
    while (1)
    {
      uint64_t v187 = *(unsigned __int16 *)(v185 + 16);
      if (!*(_WORD *)(v185 + 16)) {
        goto LABEL_185;
      }
      uint64_t v188 = *(void *)(v185 + 40);
      uint64_t v189 = v184 - v188;
      if (__OFSUB__(v184, v188)) {
        goto LABEL_370;
      }
      if (__OFADD__(v189, 1)) {
        goto LABEL_371;
      }
      if (v189 + 1 <= 0)
      {
        uint64_t v187 = 0;
      }
      else
      {
        if (v187 == 1)
        {
          v184 -= v188;
          goto LABEL_185;
        }
        uint64_t v190 = *(void *)(v185 + 64);
        BOOL v42 = __OFSUB__(v189, v190);
        uint64_t v191 = v189 - v190;
        if (v42) {
          goto LABEL_379;
        }
        if (__OFADD__(v191, 1)) {
          goto LABEL_380;
        }
        if (v191 + 1 < 1)
        {
          uint64_t v187 = 1;
          uint64_t v184 = v189;
        }
        else
        {
          if (v187 == 2)
          {
            uint64_t v184 = v191;
LABEL_185:
            if (v184) {
              goto LABEL_367;
            }
            goto LABEL_186;
          }
          uint64_t v192 = (void *)(v185 + 88);
          uint64_t v193 = 2;
          while (1)
          {
            if (v187 == v193) {
              goto LABEL_361;
            }
            uint64_t v184 = v191 - *v192;
            if (__OFSUB__(v191, *v192)) {
              goto LABEL_362;
            }
            if (__OFADD__(v184, 1)) {
              goto LABEL_363;
            }
            if (v184 + 1 < 1) {
              break;
            }
            ++v193;
            v192 += 3;
            uint64_t v191 = v184;
            if (v187 == v193) {
              goto LABEL_185;
            }
          }
          uint64_t v187 = v193;
          uint64_t v184 = v191;
        }
      }
LABEL_186:
      char v186 = (4 * *(unsigned char *)(v185 + 18) + 8) & 0x3C;
      uint64_t v23 = ((-15 << v186) - 1) & v23 | (v187 << v186);
      int64_t v26 = *(void *)(v185 + 24 + 24 * v187);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      int64_t v185 = v26;
      if (!*(unsigned char *)(v26 + 18)) {
        goto LABEL_210;
      }
    }
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v184 = v183;
  int64_t v26 = (int64_t)v22;
LABEL_210:
  uint64_t v196 = *(unsigned __int16 *)(v26 + 16);
  if (!*(_WORD *)(v26 + 16))
  {
    uint64_t v180 = (uint64_t)v401;
    goto LABEL_217;
  }
  uint64_t v197 = *(void *)(v26 + 24);
  uint64_t v198 = v184 - v197;
  uint64_t v180 = (uint64_t)v401;
  if (__OFSUB__(v184, v197))
  {
LABEL_449:
    __break(1u);
    goto LABEL_450;
  }
  if (__OFADD__(v198, 1))
  {
LABEL_450:
    __break(1u);
LABEL_451:
    __break(1u);
LABEL_452:
    __break(1u);
    goto LABEL_453;
  }
  if (v198 + 1 <= 0)
  {
LABEL_219:
    uint64_t v196 = 0;
    goto LABEL_237;
  }
  if (v196 == 1)
  {
    v184 -= v197;
    goto LABEL_217;
  }
  uint64_t v199 = *(void *)(v26 + 48);
  BOOL v42 = __OFSUB__(v198, v199);
  uint64_t v200 = v198 - v199;
  if (v42)
  {
LABEL_458:
    __break(1u);
    goto LABEL_459;
  }
  if (!__OFADD__(v200, 1))
  {
    if (v200 + 1 < 1)
    {
      uint64_t v196 = 1;
      uint64_t v184 = v198;
    }
    else if (v196 == 2)
    {
      uint64_t v184 = v200;
LABEL_217:
      if (v184)
      {
        __break(1u);
        goto LABEL_219;
      }
    }
    else
    {
      long long v202 = (void *)(v26 + 72);
      uint64_t v203 = 2;
      while (1)
      {
        if (v196 == v203) {
          goto LABEL_442;
        }
        uint64_t v184 = v200 - *v202;
        if (__OFSUB__(v200, *v202)) {
          goto LABEL_443;
        }
        if (__OFADD__(v184, 1)) {
          goto LABEL_444;
        }
        if (v184 + 1 < 1) {
          break;
        }
        ++v203;
        v202 += 3;
        uint64_t v200 = v184;
        if (v196 == v203) {
          goto LABEL_217;
        }
      }
      uint64_t v196 = v203;
      uint64_t v184 = v200;
    }
LABEL_237:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v385 = v23 & 0xFFFFFFFFFFFFF0FFLL | (v196 << 8);
    uint64_t v23 = (uint64_t)v386;
    uint64_t v195 = v26;
LABEL_208:
    swift_unknownObjectRetain();
    int64_t v26 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v383, v385, v195, (uint64_t)v22, v180);
    swift_unknownObjectRelease_n();
    goto LABEL_239;
  }
LABEL_459:
  __break(1u);
LABEL_460:
  __break(1u);
LABEL_461:
  __break(1u);
  return result;
}

uint64_t specialized _NSRange.init<A>(_:in:)(uint64_t a1, _OWORD *a2)
{
  long long v3 = a2[2];
  v14[0] = a2[1];
  v14[1] = v3;
  long long v15 = a2[3];
  v16[0] = v14[0];
  v16[1] = v3;
  id v16[2] = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v16, (uint64_t)v17);
  outlined retain of Locale((uint64_t)v17);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v14);
  long long v4 = a2[2];
  v12[0] = a2[1];
  v12[1] = v4;
  long long v13 = a2[3];
  v18[0] = v12[0];
  v18[1] = v4;
  v18[2] = v13;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v18, (uint64_t)v19);
  outlined retain of Locale((uint64_t)v19);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v12);
  long long v5 = a2[2];
  v10[0] = a2[1];
  v10[1] = v5;
  long long v11 = a2[3];
  v20[0] = v10[0];
  v20[1] = v5;
  void v20[2] = v11;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v20, (uint64_t)v21);
  outlined retain of Locale((uint64_t)v21);
  swift_release();
  BigString.utf16.getter();
  BigString.startIndex.getter();
  uint64_t v6 = BigString.UTF16View.distance(from:to:)();
  outlined release of Locale((uint64_t)&v8);
  BigString.utf16.getter();
  BigString.UTF16View.distance(from:to:)();
  outlined release of Locale((uint64_t)v10);
  outlined release of Locale((uint64_t)v9);
  return v6;
}

uint64_t AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, void *a6@<X8>)
{
  uint64_t v100 = *(void *)(a1 + 8);
  uint64_t v85 = a2[1];
  uint64_t v86 = *a2;
  uint64_t v87 = a2[4];
  uint64_t v117 = (const void *)a2[3];
  long long v119 = (void *)a2[5];
  uint64_t v112 = a2[6];
  uint64_t v115 = a2[7];
  uint64_t v108 = (void *)a2[2];
  uint64_t v110 = (void *)a2[8];
  uint64_t v9 = a2[10];
  uint64_t v106 = (void *)a2[9];
  uint64_t v10 = a2[11];
  unint64_t v11 = a2[12];
  long long v12 = (_OWORD *)*v6;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  uint64_t v89 = (const void *)(v13 + 16);
  int v90 = v12;
  long long v14 = v12[2];
  v133[0] = v12[1];
  v133[1] = v14;
  v133[2] = v12[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v133);
  MEMORY[0x185302050](v133);
  id v15 = objc_allocWithZone((Class)NSMutableString);
  uint64_t v16 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v88 = objc_msgSend(v15, sel_initWithString_, v16);
  swift_unknownObjectRelease();
  uint64_t v92 = a3;
  uint64_t v93 = v13;
  if (a4)
  {
    uint64_t v96 = v9;
    uint64_t v17 = *(void *)(a4 + 16);
    uint64_t v18 = MEMORY[0x1E4FBC860];
    if (v17)
    {
      uint64_t v83 = v10;
      *(void *)&long long v127 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      long long v19 = (unsigned char *)(a4 + 48);
      do
      {
        if (*v19 == 1)
        {
          id v20 = objc_allocWithZone((Class)NSString);
          uint64_t v21 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRetain();
          objc_msgSend(v20, sel_initWithString_, v21);
          swift_unknownObjectRelease();
          outlined consume of InflectionConcept();
        }
        else
        {
          swift_bridgeObjectRetain();
          _ContiguousArrayBuffer._asCocoaArray()();
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v19 += 24;
        --v17;
      }
      while (v17);
      uint64_t v18 = v127;
      swift_bridgeObjectRelease();
      a3 = v92;
      uint64_t v10 = v83;
    }
    uint64_t v9 = v96;
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v22 = v115;
  uint64_t isEscapingClosureAtFileLocation = (uint64_t)v119;
  uint64_t ObjectType = swift_getObjectType();
  long long v95 = (void *)(*(uint64_t (**)(uint64_t))(v100 + 488))(ObjectType);
  if ((unint64_t)a3 >> 62)
  {
    uint64_t v28 = a3 & 0xFFFFFFFFFFFFFF8;
    if (a3 < 0) {
      uint64_t v28 = a3;
    }
    uint64_t v94 = v28;
    swift_bridgeObjectRetain();
    int64_t v26 = v110;
    uint64_t v25 = v112;
    if (v18) {
      goto LABEL_13;
    }
LABEL_18:
    uint64_t v97 = 0;
    goto LABEL_19;
  }
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for _NSAttributedStringReplacement);
  swift_bridgeObjectRetain();
  uint64_t v94 = _ContiguousArrayBuffer._asCocoaArray()();
  int64_t v26 = v110;
  uint64_t v25 = v112;
  if (!v18) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v27 = v18 & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)v18 >> 62) {
    goto LABEL_103;
  }
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  uint64_t v97 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
LABEL_19:
  while (2)
  {
    id v29 = 0;
    switch(v11)
    {
      case 0uLL:
        id v30 = objc_msgSend(self, sel_neutral);
        goto LABEL_26;
      case 1uLL:
        id v30 = objc_msgSend(self, sel_feminine);
        goto LABEL_26;
      case 2uLL:
        id v30 = objc_msgSend(self, sel_masculine);
        goto LABEL_26;
      case 3uLL:
        id v30 = objc_msgSend(self, sel_currentUser);
LABEL_26:
        id v29 = v30;
        goto LABEL_75;
      case 4uLL:
        goto LABEL_75;
      default:
        *(void *)&long long v127 = v86;
        *((void *)&v127 + 1) = v85;
        *(void *)&long long v128 = v108;
        *((void *)&v128 + 1) = v117;
        *(void *)&long long v129 = v87;
        *((void *)&v129 + 1) = isEscapingClosureAtFileLocation;
        *(void *)&long long v130 = v25;
        *((void *)&v130 + 1) = v22;
        *(void *)&long long v131 = v26;
        *((void *)&v131 + 1) = v106;
        *(void *)&long long v132 = v9;
        *((void *)&v132 + 1) = v10;
        if (v85)
        {
          outlined copy of TermOfAddress._TermOfAddress(v86, v85, (uint64_t)v108, (uint64_t)v117, v87, isEscapingClosureAtFileLocation, v25, v22, (uint64_t)v26, (uint64_t)v106, v9, v10, v11);
          uint64_t v31 = v86;
          int64_t v26 = v110;
          uint64_t v32 = v85;
LABEL_29:
          uint64_t v34 = v31;
          outlined copy of Locale.LanguageCode?(v31, v32);
          swift_bridgeObjectRelease();
          outlined consume of Locale.LanguageCode?(v34, v32);
          outlined consume of Locale.LanguageCode?(v87, (uint64_t)v119);
          outlined consume of Locale.LanguageCode?((uint64_t)v26, (uint64_t)v106);
          goto LABEL_30;
        }
        outlined copy of TermOfAddress?(v86, 0, (uint64_t)v108, (uint64_t)v117, v87, isEscapingClosureAtFileLocation, v25, v22, (uint64_t)v26, (uint64_t)v106, v9, v10, v11);
        outlined copy of Locale.LanguageCode?(v86, 0);
        outlined copy of Locale.LanguageCode?(v87, (uint64_t)v119);
        outlined copy of Locale.LanguageCode?((uint64_t)v26, (uint64_t)v106);
        specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v127);
        uint64_t v101 = v33;
        outlined consume of Locale.LanguageCode?(v86, 0);
        outlined consume of Locale.LanguageCode?(v87, (uint64_t)v119);
        outlined consume of Locale.LanguageCode?((uint64_t)v26, (uint64_t)v106);
        if (v101)
        {
          String.lowercased()();
          uint64_t v32 = 0;
          uint64_t v31 = v86;
          goto LABEL_29;
        }
        long long v123 = v129;
        long long v124 = v130;
        long long v125 = v131;
        long long v126 = v132;
        long long aBlock = v127;
        long long v122 = v128;
        Locale.Language.maximalIdentifier.getter();
        outlined consume of Locale.LanguageCode?(v86, 0);
        outlined consume of Locale.LanguageCode?(v87, (uint64_t)v119);
        outlined consume of Locale.LanguageCode?((uint64_t)v26, (uint64_t)v106);
LABEL_30:
        uint64_t v35 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v36 = *(void *)(v11 + 16);
        if (v36)
        {
          *(void *)&long long aBlock = MEMORY[0x1E4FBC860];
          specialized ContiguousArray.reserveCapacity(_:)();
          uint64_t v37 = 0;
          unint64_t v98 = v11;
          while (1)
          {
            uint64_t v120 = v36;
            uint64_t v113 = v37;
            uint64_t v39 = v11 + v37;
            uint64_t v40 = *(unsigned __int8 *)(v39 + 48);
            uint64_t v41 = *(unsigned __int8 *)(v39 + 49);
            uint64_t v42 = *(unsigned __int8 *)(v39 + 50);
            uint64_t v43 = *(unsigned __int8 *)(v39 + 64);
            uint64_t v107 = *(unsigned __int8 *)(v39 + 66);
            int v44 = *(unsigned __int8 *)(v39 + 67);
            int v109 = *(unsigned __int8 *)(v39 + 68);
            uint64_t v45 = *(void *)(v39 + 80);
            uint64_t v111 = *(void *)(v39 + 72);
            uint64_t v102 = *(unsigned int *)(v39 + 88);
            uint64_t v104 = *(unsigned __int8 *)(v39 + 92);
            long long v118 = (void *)String._bridgeToObjectiveCImpl()();
            id v46 = objc_allocWithZone((Class)NSMorphology);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v47 = objc_msgSend(v46, sel_init);
            uint64_t v48 = v47;
            if (v40 == 3)
            {
              if (v42 == 6) {
                goto LABEL_36;
              }
            }
            else
            {
              objc_msgSend(v47, sel_setGrammaticalGender_, v40 + 1);
              if (v42 == 6)
              {
LABEL_36:
                if (v41 != 14) {
                  goto LABEL_53;
                }
                goto LABEL_37;
              }
            }
            objc_msgSend(v48, sel_setNumber_, v42 + 1);
            if (v41 != 14)
            {
LABEL_53:
              objc_msgSend(v48, sel_setPartOfSpeech_, v41 + 1);
              if (v43 == 14) {
                goto LABEL_39;
              }
LABEL_38:
              objc_msgSend(v48, sel_setGrammaticalCase_, v43 + 1);
              goto LABEL_39;
            }
LABEL_37:
            if (v43 != 14) {
              goto LABEL_38;
            }
LABEL_39:
            unint64_t v11 = v98;
            if (v44 != 2) {
              objc_msgSend(v48, sel_setDetermination_, (v44 & 1) + 1);
            }
            if (v107 != 3) {
              objc_msgSend(v48, sel_setPronounType_, v107 + 1);
            }
            swift_bridgeObjectRelease();
            if (v109 != 2)
            {
              if (v109) {
                uint64_t v49 = 2;
              }
              else {
                uint64_t v49 = 1;
              }
              objc_msgSend(v48, sel_setDefiniteness_, v49);
            }
            if (v45)
            {
              id v50 = objc_allocWithZone((Class)NSMorphology);
              swift_bridgeObjectRetain();
              id v51 = objc_msgSend(v50, sel_init);
              uint64_t v38 = v51;
              if (v111 == 3) {
                id v52 = v51;
              }
              else {
                objc_msgSend(v51, sel_setGrammaticalGender_, v111 + 1);
              }
              if ((v111 & 0xFF0000) != 0x60000) {
                objc_msgSend(v38, sel_setNumber_, BYTE2(v111) + 1);
              }
              if ((v111 & 0xFF00) != 0xE00) {
                objc_msgSend(v38, sel_setPartOfSpeech_, BYTE1(v111) + 1);
              }
              unint64_t v53 = v102 | (v104 << 32);
              if (v102 != 14) {
                objc_msgSend(v38, sel_setGrammaticalCase_, v102 + 1);
              }
              if ((v102 & 0xFF000000) != 0x2000000) {
                objc_msgSend(v38, sel_setDetermination_, ((v53 >> 24) & 1) + 1);
              }
              if (BYTE2(v102) != 3) {
                objc_msgSend(v38, sel_setPronounType_, BYTE2(v102) + 1);
              }
              if (v104 == 2)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease_n();
              }
              else
              {
                if ((v53 & 0x100000000) != 0) {
                  uint64_t v54 = 2;
                }
                else {
                  uint64_t v54 = 1;
                }
                objc_msgSend(v38, sel_setDefiniteness_, v54);
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v38 = 0;
            }
            objc_msgSend(objc_allocWithZone((Class)NSMorphologyPronoun), sel_initWithPronoun_morphology_dependentMorphology_, v118, v48, v38);

            swift_unknownObjectRelease();
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            uint64_t v37 = v113 + 64;
            uint64_t v36 = v120 - 1;
            if (v120 == 1)
            {
              uint64_t v55 = aBlock;
              swift_bridgeObjectRelease();
              uint64_t v13 = v93;
              if (!((unint64_t)v55 >> 62)) {
                goto LABEL_73;
              }
LABEL_88:
              if (v55 >= 0) {
                v55 &= 0xFFFFFFFFFFFFFF8uLL;
              }
              goto LABEL_74;
            }
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v55 = MEMORY[0x1E4FBC860];
        if (MEMORY[0x1E4FBC860] >> 62) {
          goto LABEL_88;
        }
LABEL_73:
        type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
        uint64_t v55 = _ContiguousArrayBuffer._asCocoaArray()();
LABEL_74:
        id v29 = objc_msgSend(self, sel_localizedForLanguageIdentifier_withPronouns_, v35, v55);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
LABEL_75:
        *(void *)&long long v123 = partial apply for closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
        *((void *)&v123 + 1) = v13;
        long long v119 = v29;
        *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v122 = thunk for @escaping @callee_guaranteed () -> (@unowned Int);
        *((void *)&v122 + 1) = &block_descriptor_125;
        uint64_t v117 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        uint64_t v56 = swift_allocObject();
        *(void *)(v56 + 16) = partial apply for closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
        *(void *)(v56 + 24) = v13;
        *(void *)&long long v123 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()partial apply;
        *((void *)&v123 + 1) = v56;
        *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v122 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
        *((void *)&v122 + 1) = &block_descriptor_133_0;
        unint64_t v116 = _Block_copy(&aBlock);
        swift_retain();
        uint64_t v78 = v56;
        swift_retain();
        swift_release();
        uint64_t v57 = swift_allocObject();
        *(void *)(v57 + 16) = partial apply for closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
        *(void *)(v57 + 24) = v13;
        *(void *)&long long v123 = thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()partial apply;
        *((void *)&v123 + 1) = v57;
        *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v122 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
        *((void *)&v122 + 1) = &block_descriptor_141;
        long long v114 = _Block_copy(&aBlock);
        swift_retain();
        uint64_t v79 = v57;
        swift_retain();
        swift_release();
        uint64_t v58 = swift_allocObject();
        *(void *)(v58 + 16) = v89;
        uint64_t v59 = swift_allocObject();
        *(void *)(v59 + 16) = closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(void *)(v59 + 24) = v58;
        *(void *)&long long v123 = thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()partial apply;
        *((void *)&v123 + 1) = v59;
        *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v122 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
        *((void *)&v122 + 1) = &block_descriptor_152;
        uint64_t v110 = _Block_copy(&aBlock);
        uint64_t v80 = v59;
        swift_retain();
        swift_release();
        uint64_t v60 = swift_allocObject();
        *(void *)(v60 + 16) = v89;
        uint64_t v61 = swift_allocObject();
        *(void *)(v61 + 16) = closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(void *)(v61 + 24) = v60;
        *(void *)&long long v123 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ()partial apply;
        *((void *)&v123 + 1) = v61;
        *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v122 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
        *((void *)&v122 + 1) = &block_descriptor_163;
        uint64_t v108 = _Block_copy(&aBlock);
        uint64_t v81 = v61;
        swift_retain();
        swift_release();
        uint64_t v62 = swift_allocObject();
        *(void *)(v62 + 16) = v89;
        uint64_t v63 = swift_allocObject();
        *(void *)(v63 + 16) = closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(void *)(v63 + 24) = v62;
        *(void *)&long long v123 = thunk for @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool)partial apply;
        *((void *)&v123 + 1) = v63;
        *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v122 = thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool);
        *((void *)&v122 + 1) = &block_descriptor_174_0;
        uint64_t v106 = _Block_copy(&aBlock);
        uint64_t v82 = v63;
        swift_retain();
        swift_release();
        uint64_t v64 = swift_allocObject();
        *(void *)(v64 + 16) = v89;
        uint64_t v65 = swift_allocObject();
        *(void *)(v65 + 16) = closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(void *)(v65 + 24) = v64;
        *(void *)&long long v123 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)partial apply;
        *((void *)&v123 + 1) = v65;
        *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v122 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?);
        *((void *)&v122 + 1) = &block_descriptor_185;
        uint64_t v105 = _Block_copy(&aBlock);
        uint64_t v84 = v65;
        swift_retain();
        swift_release();
        uint64_t v66 = swift_allocObject();
        *(void *)(v66 + 16) = v89;
        uint64_t v67 = swift_allocObject();
        *(void *)(v67 + 16) = closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(void *)(v67 + 24) = v66;
        *(void *)&long long v123 = thunk for @callee_guaranteed (@unowned _NSRange) -> (@owned String)partial apply;
        *((void *)&v123 + 1) = v67;
        *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v122 = thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@owned String);
        *((void *)&v122 + 1) = &block_descriptor_196;
        unint64_t v99 = _Block_copy(&aBlock);
        uint64_t v85 = v67;
        swift_retain();
        swift_release();
        uint64_t v68 = swift_allocObject();
        *(void *)(v68 + 16) = v88;
        uint64_t v69 = swift_allocObject();
        *(void *)(v69 + 16) = closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(void *)(v69 + 24) = v68;
        *(void *)&long long v123 = thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()partial apply;
        *((void *)&v123 + 1) = v69;
        *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v122 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
        *((void *)&v122 + 1) = &block_descriptor_207;
        int64_t v26 = _Block_copy(&aBlock);
        id v70 = v88;
        uint64_t v86 = v69;
        swift_retain();
        swift_release();
        uint64_t v71 = swift_allocObject();
        *(void *)(v71 + 16) = v89;
        *(void *)(v71 + 24) = v70;
        uint64_t v72 = swift_allocObject();
        *(void *)(v72 + 16) = closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(void *)(v72 + 24) = v71;
        *(void *)&long long v123 = thunk for @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ()partial apply;
        *((void *)&v123 + 1) = v72;
        *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v122 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ();
        *((void *)&v122 + 1) = &block_descriptor_218;
        id v88 = _Block_copy(&aBlock);
        id v103 = v70;
        uint64_t v87 = v72;
        swift_retain();
        swift_release();
        *(void *)&long long v123 = destructiveProjectEnumData for PredicateCodableError;
        *((void *)&v123 + 1) = 0;
        *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v122 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed NSAttributedStringKey, @in_guaranteed Any) -> ();
        *((void *)&v122 + 1) = &block_descriptor_221;
        uint64_t v18 = (uint64_t)_Block_copy(&aBlock);
        swift_release();
        uint64_t v73 = swift_allocObject();
        *(void *)(v73 + 16) = v90;
        *(void *)(v73 + 24) = v92;
        unint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
        *(void *)(v11 + 24) = v73;
        *(void *)&long long v123 = thunk for @callee_guaranteed (@in_guaranteed Any) -> (@out Any?)partial apply;
        *((void *)&v123 + 1) = v11;
        *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v122 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> (@out Any?);
        *((void *)&v122 + 1) = &block_descriptor_232;
        uint64_t v89 = _Block_copy(&aBlock);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_release();
        uint64_t v13 = (uint64_t)v99;
        uint64_t v25 = (uint64_t)v106;
        uint64_t v22 = (uint64_t)v108;
        uint64_t v27 = (uint64_t)v110;
        uint64_t v9 = (uint64_t)v114;
        uint64_t v10 = (uint64_t)v116;
        _NSInflect((uint64_t)v95, v94, (uint64_t)v97, (uint64_t)v119, (uint64_t)v117, a5 & 1, (uint64_t)v116, (uint64_t)v114, (uint64_t)v110, (uint64_t)v108, (uint64_t)v106, (uint64_t)v105, (uint64_t)v99, (uint64_t)v26, (uint64_t)v88, v18, (uint64_t)v89);

        _Block_release((const void *)v18);
        _Block_release(v88);
        _Block_release(v26);
        _Block_release(v99);
        _Block_release(v105);
        _Block_release(v106);
        _Block_release(v108);
        _Block_release(v110);
        _Block_release(v114);
        _Block_release(v116);
        _Block_release(v117);

        swift_unknownObjectRelease();
        _Block_release(v89);
        uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if (isEscapingClosureAtFileLocation)
        {
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
          goto LABEL_102;
        }
        if (swift_isEscapingClosureAtFileLocation()) {
          goto LABEL_93;
        }
        uint64_t v27 = v87;
        uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if (isEscapingClosureAtFileLocation) {
          goto LABEL_94;
        }
        uint64_t v27 = v86;
        uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if (isEscapingClosureAtFileLocation) {
          goto LABEL_95;
        }
        uint64_t v27 = v85;
        uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if (isEscapingClosureAtFileLocation) {
          goto LABEL_96;
        }
        uint64_t v27 = v84;
        uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if (isEscapingClosureAtFileLocation) {
          goto LABEL_97;
        }
        uint64_t v27 = v82;
        uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if (isEscapingClosureAtFileLocation) {
          goto LABEL_98;
        }
        uint64_t v27 = v81;
        uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if (isEscapingClosureAtFileLocation) {
          goto LABEL_99;
        }
        uint64_t v27 = v80;
        uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if (isEscapingClosureAtFileLocation) {
          goto LABEL_100;
        }
        uint64_t v27 = v79;
        uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if (isEscapingClosureAtFileLocation) {
          goto LABEL_101;
        }
        uint64_t v27 = v78;
        uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if (isEscapingClosureAtFileLocation)
        {
LABEL_102:
          __break(1u);
LABEL_103:
          if (v18 >= 0) {
            uint64_t v76 = (void *)v27;
          }
          else {
            uint64_t v76 = (void *)v18;
          }
          uint64_t v97 = v76;
          continue;
        }
        uint64_t v74 = *(void *)(v93 + 16);
        swift_retain();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release_n();
        *a6 = v74;
        swift_release();
        swift_release();
        swift_release();
        return swift_release();
    }
  }
}

uint64_t Range<>.init(_:in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  long long v5 = (_OWORD *)*a3;
  if (result != 0x7FFFFFFFFFFFFFFFLL && (result & 0x8000000000000000) == 0 && (a2 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = result + a2;
    if (__OFADD__(result, a2))
    {
      __break(1u);
      return result;
    }
    long long v7 = v5[1];
    long long v8 = v5[3];
    v32[1] = v5[2];
    v32[2] = v8;
    v32[0] = v7;
    long long v9 = v5[1];
    v33[1] = v5[2];
    v33[2] = v8;
    v33[0] = v9;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v33, (uint64_t)v34);
    outlined retain of Locale((uint64_t)v34);
    BigString.utf16.getter();
    outlined release of Locale((uint64_t)v32);
    uint64_t v10 = BigString.UTF16View.count.getter();
    outlined release of Locale((uint64_t)&v28);
    if (v10 >= v6)
    {
      long long v11 = v5[1];
      long long v12 = v5[3];
      v31[1] = v5[2];
      v31[2] = v12;
      v31[0] = v11;
      long long v13 = v5[1];
      v35[1] = v5[2];
      v35[2] = v12;
      v35[0] = v13;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v35, (uint64_t)v36);
      outlined retain of Locale((uint64_t)v36);
      swift_release();
      BigString.utf16.getter();
      BigString.startIndex.getter();
      uint64_t v14 = BigString.UTF16View.index(_:offsetBy:)();
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      uint64_t v20 = v19;
      outlined release of Locale((uint64_t)v29);
      BigString.utf16.getter();
      uint64_t v21 = BigString.UTF16View.index(_:offsetBy:)();
      uint64_t v23 = v22;
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      outlined release of Locale((uint64_t)v31);
      uint64_t result = outlined release of Locale((uint64_t)v30);
      *a4 = v14;
      a4[1] = v16;
      a4[2] = v18;
      a4[3] = v20;
      a4[4] = v21;
      a4[5] = v23;
      a4[6] = v25;
      a4[7] = v27;
      return result;
    }
  }
  uint64_t result = swift_release();
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = 2;
  *((_OWORD *)a4 + 2) = 0u;
  *((_OWORD *)a4 + 3) = 0u;
  return result;
}

uint64_t one-time initialization function for language()
{
  uint64_t result = String._bridgeToObjectiveCImpl()();
  static NSAttributedStringKey.language = result;
  return result;
}

uint64_t AttributedString.inflected()@<X0>(void *a1@<X8>)
{
  unint64_t v232 = a1;
  long long v2 = &v325;
  double v3 = *v1;
  if (one-time initialization token for cache != -1) {
    goto LABEL_45;
  }
  while (1)
  {
    uint64_t v296 = static LocaleCache.cache;
    uint64_t v4 = LocaleCache.current.getter();
    uint64_t v233 = v5;
    uint64_t v234 = v4;
    long long v6 = *(_OWORD *)(*(void *)&v3 + 32);
    v2[114] = *(_OWORD *)(*(void *)&v3 + 16);
    v2[115] = v6;
    v2[116] = *(_OWORD *)(*(void *)&v3 + 48);
    swift_retain();
    outlined retain of Locale((uint64_t)v400);
    id v7 = (id)BigString.startIndex.getter();
    uint64_t v9 = v8;
    long long v11 = v10;
    uint64_t v13 = v12;
    outlined release of Locale((uint64_t)v400);
    long long v14 = *(_OWORD *)(*(void *)&v3 + 16);
    v2[112] = *(_OWORD *)(*(void *)&v3 + 32);
    long long v15 = *(_OWORD *)(*(void *)&v3 + 48);
    v2[113] = v15;
    v2[111] = v14;
    long long v16 = *(_OWORD *)(*(void *)&v3 + 16);
    long long v17 = *(_OWORD *)(*(void *)&v3 + 32);
    v2[119] = v15;
    v2[118] = v17;
    v2[117] = v16;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v401, (uint64_t)v402);
    outlined retain of Locale((uint64_t)v402);
    uint64_t v18 = BigString.endIndex.getter();
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    outlined release of Locale((uint64_t)&v399);
    swift_release();
    id v258 = v11;
    uint64_t v25 = v13;
    if (static BigString.Index.< infix(_:_:)())
    {
      __break(1u);
      goto LABEL_47;
    }
    uint64_t v256 = v9;
    uint64_t v257 = v24;
    uint64_t v333 = MEMORY[0x1E4FBC860];
    long long v26 = *(_OWORD *)(*(void *)&v3 + 32);
    v398[0] = *(_OWORD *)(*(void *)&v3 + 16);
    v398[1] = v26;
    v398[2] = *(_OWORD *)(*(void *)&v3 + 48);
    swift_retain();
    outlined retain of Locale((uint64_t)v398);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v398);
    long long v27 = *(_OWORD *)(*(void *)&v3 + 16);
    v396[1] = *(_OWORD *)(*(void *)&v3 + 32);
    long long v397 = *(_OWORD *)(*(void *)&v3 + 48);
    v396[0] = v27;
    long long v28 = *(_OWORD *)(*(void *)&v3 + 16);
    long long v29 = *(_OWORD *)(*(void *)&v3 + 32);
    v403[2] = v397;
    v403[1] = v29;
    v403[0] = v28;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v403, (uint64_t)v404);
    outlined retain of Locale((uint64_t)v404);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v396);
    id v385 = v7;
    uint64_t v386 = v256;
    id v387 = v258;
    uint64_t v388 = v13;
    uint64_t v389 = v18;
    uint64_t v390 = v20;
    uint64_t v391 = v22;
    uint64_t v392 = v257;
    long long v30 = *(_OWORD *)(*(void *)&v3 + 32);
    long long v393 = *(_OWORD *)(*(void *)&v3 + 16);
    long long v394 = v30;
    uint64_t v245 = (long long *)(*(void *)&v3 + 16);
    long long v395 = *(_OWORD *)(*(void *)&v3 + 48);
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v334);
    uint64_t v31 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    uint64_t v38 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    uint64_t v44 = v43;
    outlined release of Locale((uint64_t)&v335);
    swift_release_n();
    uint64_t v377 = v31;
    uint64_t v378 = v33;
    uint64_t v379 = v35;
    uint64_t v380 = v37;
    uint64_t v381 = v38;
    uint64_t v382 = v40;
    uint64_t v383 = v42;
    uint64_t v384 = v44;
    AttributedString.Runs.init(_:in:)(*(uint64_t *)&v3, &v308);
    long long v329 = v313;
    long long v330 = v314;
    long long v331 = v315;
    long long v332 = v316;
    long long v325 = v309;
    long long v326 = v310;
    long long v327 = v311;
    long long v328 = v312;
    uint64_t v246 = v308;
    double v248 = v3;
    uint64_t v45 = v317;
    uint64_t v46 = v318;
    id v47 = v319;
    uint64_t v48 = v320;
    uint64_t v49 = v321;
    uint64_t v50 = v322;
    uint64_t v51 = v323;
    id v52 = v324;
    char v53 = static BigString.Index.== infix(_:_:)();
    uint64_t v54 = (uint64_t)v246;
    double v55 = v45;
    uint64_t v56 = v49;
    uint64_t v57 = v52;
    uint64_t v25 = MEMORY[0x1E4FBC860];
    uint64_t v58 = v48;
    uint64_t v20 = MEMORY[0x1E4FBC860];
    double v59 = v248;
    if (v53) {
      break;
    }
    uint64_t v242 = v297;
    uint64_t v243 = (char *)&v277 + 8;
    uint64_t v240 = v46;
    uint64_t v241 = &v260;
    double v244 = *(double *)&v55;
    uint64_t v60 = v55;
    uint64_t v61 = v46;
    uint64_t v62 = v47;
    uint64_t v63 = v58;
    uint64_t v64 = v49;
    uint64_t v65 = v50;
    uint64_t v66 = v51;
    id v67 = v57;
    uint64_t v238 = (uint64_t)v58;
    uint64_t v239 = (uint64_t)v47;
    long long v255 = v56;
    uint64_t v236 = v51;
    uint64_t v237 = v50;
    id v258 = v57;
    while (1)
    {
      uint64_t v253 = v61;
      double v254 = *(double *)&v60;
      unint64_t v250 = v62;
      char v251 = v63;
      long long v82 = v329;
      long long v81 = v330;
      long long v83 = v328;
      uint64_t v84 = v241;
      *((_OWORD *)v241 + 4) = v329;
      *((_OWORD *)v84 + 5) = v81;
      long long v85 = v330;
      long long v87 = v331;
      long long v86 = v332;
      *((_OWORD *)v84 + 6) = v331;
      *((_OWORD *)v84 + 7) = v86;
      long long v88 = v326;
      *(_OWORD *)uint64_t v84 = v325;
      *((_OWORD *)v84 + 1) = v88;
      long long v89 = v328;
      long long v91 = v325;
      long long v90 = v326;
      long long v92 = v327;
      *((_OWORD *)v84 + 2) = v327;
      *((_OWORD *)v84 + 3) = v89;
      uint64_t v93 = v243;
      double v94 = *(id *)&v244;
      *((_OWORD *)v243 + 4) = v82;
      v93[5] = v85;
      long long v95 = v332;
      v93[6] = v87;
      v93[7] = v95;
      *uint64_t v93 = v91;
      v93[1] = v90;
      v93[2] = v92;
      v93[3] = v83;
      uint64_t v96 = (uint64_t)v246;
      *(void *)&long long v277 = v246;
      id v284 = v94;
      uint64_t v285 = v46;
      uint64_t v286 = v47;
      uint64_t v287 = v58;
      uint64_t v288 = v64;
      uint64_t v289 = v65;
      uint64_t v290 = v66;
      id v291 = v67;
      long long v273 = v60;
      uint64_t v274 = v61;
      long long v275 = v62;
      uint64_t v276 = v63;
      uint64_t v97 = v58;
      AttributedString.Runs.subscript.getter(&v292);
      uint64_t v98 = v65;
      double v3 = v292;
      unint64_t v249 = v293;
      long long v99 = v330;
      uint64_t v100 = v242;
      v242[4] = v329;
      v100[5] = v99;
      long long v101 = v332;
      v100[6] = v331;
      v100[7] = v101;
      long long v102 = v326;
      _OWORD *v100 = v325;
      v100[1] = v102;
      long long v103 = v328;
      v100[2] = v327;
      v100[3] = v103;
      uint64_t v296 = v96;
      id v298 = v94;
      uint64_t v299 = v46;
      v300 = v47;
      v301 = v97;
      uint64_t v302 = v255;
      uint64_t v303 = v98;
      uint64_t v304 = v66;
      id v305 = v258;
      uint64_t v306 = &outlined read-only object #0 of AttributedString.inflected();
      uint64_t v307 = MEMORY[0x1E4FBC860];
      uint64_t v259 = v96;
      id v265 = v94;
      uint64_t v266 = v46;
      uint64_t v267 = v47;
      uint64_t v268 = v97;
      long long v2 = v255;
      unint64_t v269 = v255;
      uint64_t v270 = v98;
      uint64_t v271 = v66;
      id v272 = v258;
      double v292 = v254;
      unint64_t v293 = v253;
      uint64_t v105 = v250;
      uint64_t v104 = v251;
      v294 = v250;
      uint64_t v295 = v251;
      swift_retain();
      outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v296);
      AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)((uint64_t *)&v292, (uint64_t)&outlined read-only object #0 of AttributedString.inflected(), MEMORY[0x1E4FBC860], (uint64_t *)&v277);
      swift_release();
      outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v296);
      double v76 = *((double *)&v277 + 1);
      double v252 = *(double *)&v277;
      uint64_t v256 = *((void *)&v278 + 1);
      uint64_t v257 = v278;
      if (static BigString.Index.< infix(_:_:)()) {
        break;
      }
      char v247 = (const void *)specialized AttributedString._AttributeStorage.subscript.getter(*(uint64_t *)&v3);
      char v107 = v106;
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v64 = v2;
      if ((v107 & 1) == 0)
      {
        uint64_t v108 = v245;
        long long v109 = v245[1];
        v376[0] = *v245;
        v376[1] = v109;
        v376[2] = v245[2];
        swift_retain();
        outlined retain of Locale((uint64_t)v376);
        BigString.startIndex.getter();
        outlined release of Locale((uint64_t)v376);
        long long v110 = *v108;
        v374[1] = v108[1];
        long long v375 = v108[2];
        v374[0] = v110;
        long long v111 = *v108;
        long long v112 = v108[1];
        v405[2] = v375;
        v405[1] = v112;
        v405[0] = v111;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v405, (uint64_t)v406);
        outlined retain of Locale((uint64_t)v406);
        BigString.endIndex.getter();
        outlined release of Locale((uint64_t)v374);
        long long v113 = *v108;
        v372[1] = v108[1];
        long long v373 = v108[2];
        v372[0] = v113;
        long long v114 = *v108;
        long long v115 = v108[1];
        v407[2] = v373;
        v407[1] = v115;
        v407[0] = v114;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v407, (uint64_t)v408);
        outlined retain of Locale((uint64_t)v408);
        swift_release();
        BigString.utf16.getter();
        BigString.startIndex.getter();
        uint64_t v117 = v253;
        double v116 = v254;
        unint64_t v249 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)&v336);
        BigString.utf16.getter();
        double v118 = *(void **)&v252;
        uint64_t v235 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)v372);
        outlined release of Locale((uint64_t)&v337);
        long long v119 = v108[1];
        v371[0] = *v108;
        v371[1] = v119;
        v371[2] = v108[2];
        swift_retain();
        outlined retain of Locale((uint64_t)v371);
        BigString.startIndex.getter();
        outlined release of Locale((uint64_t)v371);
        long long v120 = *v108;
        v369[1] = v108[1];
        long long v370 = v108[2];
        v369[0] = v120;
        long long v121 = *v108;
        long long v122 = v108[1];
        v409[2] = v370;
        v409[1] = v122;
        v409[0] = v121;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v409, (uint64_t)v410);
        outlined retain of Locale((uint64_t)v410);
        BigString.endIndex.getter();
        outlined release of Locale((uint64_t)v369);
        double v344 = v116;
        uint64_t v345 = v117;
        v346 = v105;
        char v347 = v104;
        v348 = v118;
        double v254 = v76;
        double v349 = v76;
        uint64_t v350 = v257;
        uint64_t v351 = v256;
        long long v123 = v108[1];
        long long v366 = *v108;
        long long v367 = v123;
        long long v368 = v108[2];
        double v124 = v248;
        swift_retain_n();
        BigString.unicodeScalars.getter();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)&v338);
        uint64_t v125 = BigSubstring.UnicodeScalarView.startIndex.getter();
        uint64_t v253 = v126;
        uint64_t v128 = v127;
        uint64_t v130 = v129;
        uint64_t v131 = BigSubstring.UnicodeScalarView.endIndex.getter();
        uint64_t v133 = v132;
        uint64_t v135 = v134;
        uint64_t v137 = v136;
        outlined release of Locale((uint64_t)&v339);
        swift_release_n();
        uint64_t v358 = v125;
        uint64_t v359 = v253;
        uint64_t v360 = v128;
        uint64_t v361 = v130;
        uint64_t v362 = v131;
        uint64_t v363 = v133;
        uint64_t v364 = v135;
        uint64_t v365 = v137;
        swift_retain();
        specialized AttributedString.Guts.getUniformValue<A>(in:key:)((uint64_t)&v277);
        if (*((void *)&v278 + 1))
        {
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v277, (uint64_t)&v259);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          swift_dynamicCast();
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v277);
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v277, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          unint64_t v293 = 0;
          double v292 = 0.0;
          LODWORD(v294) = 0;
          BYTE4(v294) = -1;
        }
        swift_release_n();
        uint64_t v138 = v245;
        if (BYTE4(v294) == 255)
        {
          long long v139 = v245[1];
          v357[0] = *v245;
          v357[1] = v139;
          v357[2] = v245[2];
          swift_retain();
          outlined retain of Locale((uint64_t)v357);
          BigString.startIndex.getter();
          outlined release of Locale((uint64_t)v357);
          long long v140 = *v138;
          v355[1] = v138[1];
          long long v356 = v138[2];
          v355[0] = v140;
          long long v141 = *v138;
          long long v142 = v138[1];
          v411[2] = v356;
          v411[1] = v142;
          v411[0] = v141;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v411, (uint64_t)v412);
          outlined retain of Locale((uint64_t)v412);
          BigString.endIndex.getter();
          outlined release of Locale((uint64_t)v355);
          long long v143 = v138[1];
          long long v352 = *v138;
          long long v353 = v143;
          long long v354 = v138[2];
          swift_retain_n();
          BigString.unicodeScalars.getter();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v340);
          uint64_t v253 = BigSubstring.UnicodeScalarView.startIndex.getter();
          char v251 = v144;
          uint64_t v146 = v145;
          uint64_t v148 = v147;
          uint64_t v149 = BigSubstring.UnicodeScalarView.endIndex.getter();
          uint64_t v151 = v150;
          uint64_t v153 = v152;
          uint64_t v155 = v154;
          outlined release of Locale((uint64_t)&v341);
          swift_release_n();
          v342[14] = v253;
          v342[15] = v251;
          v342[16] = v146;
          v342[17] = v148;
          v342[18] = v149;
          v342[19] = v151;
          v342[20] = v153;
          v342[21] = v155;
          long long v156 = *v138;
          long long v157 = v138[2];
          v343[1] = v138[1];
          v343[2] = v157;
          v343[0] = v156;
          swift_retain_n();
          outlined retain of Locale((uint64_t)v343);
          BigString.subscript.getter();
          outlined release of Locale((uint64_t)v343);
          uint64_t v158 = BigSubstring.startIndex.getter();
          uint64_t v253 = v159;
          uint64_t v161 = v160;
          uint64_t v163 = v162;
          uint64_t v164 = BigSubstring.endIndex.getter();
          uint64_t v166 = v165;
          uint64_t v168 = v167;
          uint64_t v170 = v169;
          outlined release of Locale((uint64_t)v342);
          swift_release_n();
          *(double *)&long long v277 = v124;
          *((void *)&v277 + 1) = v158;
          *(void *)&long long v278 = v253;
          *((void *)&v278 + 1) = v161;
          *(void *)&long long v279 = v163;
          *((void *)&v279 + 1) = v164;
          uint64_t v280 = v166;
          uint64_t v281 = v168;
          uint64_t v282 = v170;
          uint64_t v283 = 0;
          lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
          String.init<A>(_:)();
          uint64_t v171 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v172 = 0;
          *((void *)&v278 + 1) = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
          *(void *)&long long v277 = v171;
        }
        else
        {
          switch((v294 | ((unint64_t)BYTE4(v294) << 32)) >> 32)
          {
            case 1uLL:
              id v173 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithLongLong_, *(void *)&v292);
              break;
            case 2uLL:
              double v174 = v292;
              goto LABEL_23;
            case 3uLL:
              NSDecimal.doubleValue.getter(*(unint64_t *)&v292, v293, v294);
              double v174 = v175;
LABEL_23:
              id v173 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, v174);
              break;
            default:
              id v173 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedLongLong_, *(void *)&v292);
              break;
          }
          id v176 = v173;
          *((void *)&v278 + 1) = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          *(void *)&long long v277 = v176;
          uint64_t v172 = 1;
        }
        outlined init with copy of (Hashable & Sendable)?((uint64_t)&v277, (uint64_t)&v259, (uint64_t *)&demangling cache variable for type metadata for Any?);
        unint64_t v177 = v262;
        if (v262)
        {
          uint64_t v68 = __swift_project_boxed_opaque_existential_1(&v259, (uint64_t)v262);
          uint64_t v69 = *(v177 - 1);
          double v70 = MEMORY[0x1F4188790](v68);
          uint64_t v72 = (char *)v228 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, double))(v69 + 16))(v72, v70);
          uint64_t v73 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(char *, void *))(v69 + 8))(v72, v177);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v259);
        }
        else
        {
          uint64_t v73 = 0;
        }
        uint64_t v64 = v255;
        id v74 = objc_allocWithZone((Class)_NSAttributedStringReplacement);
        objc_msgSend(v74, sel_initWithIndex_specifierRangeInFormatString_replacementRangeInResult_replacementKind_argument_, v247, 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL, v249, v235, v172, v73);
        uint64_t v75 = swift_unknownObjectRelease();
        MEMORY[0x185302590](v75);
        if (*(void *)((v333 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v333 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        outlined destroy of Any?((uint64_t)&v277, (uint64_t *)&demangling cache variable for type metadata for Any?);
        double v76 = v254;
      }
      *(double *)&double v77 = v252;
      uint64_t v79 = v256;
      uint64_t v78 = v257;
      uint64_t v66 = v236;
      uint64_t v65 = v237;
      id v67 = v258;
      char v80 = static BigString.Index.== infix(_:_:)();
      uint64_t v60 = v77;
      uint64_t v61 = *(void *)&v76;
      uint64_t v62 = (void *)v78;
      uint64_t v63 = (void *)v79;
      id v47 = (void *)v239;
      uint64_t v46 = v240;
      uint64_t v58 = (void *)v238;
      if (v80)
      {
        uint64_t v57 = v67;
        uint64_t v20 = v333;
        uint64_t v50 = v65;
        double v59 = v248;
        uint64_t v56 = v64;
        uint64_t v25 = MEMORY[0x1E4FBC860];
        uint64_t v51 = v66;
        *(double *)&double v55 = v244;
        uint64_t v54 = (uint64_t)v246;
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_45:
    swift_once();
  }
LABEL_28:
  v297[4] = v329;
  v297[5] = v330;
  v297[6] = v331;
  v297[7] = v332;
  v297[0] = v325;
  v297[1] = v326;
  v297[2] = v327;
  v297[3] = v328;
  uint64_t v296 = v54;
  id v298 = v55;
  uint64_t v299 = v46;
  v300 = v47;
  v301 = v58;
  uint64_t v302 = v56;
  uint64_t v303 = v50;
  uint64_t v304 = v51;
  id v305 = v57;
  uint64_t v306 = &outlined read-only object #0 of AttributedString.inflected();
  uint64_t v307 = v25;
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v296);
  uint64_t v22 = swift_allocObject();
  *(double *)(v22 + 16) = v59;
  uint64_t v9 = v22 + 16;
  long long v178 = v245[1];
  long long v277 = *v245;
  long long v278 = v178;
  long long v279 = v245[2];
  swift_retain();
  outlined retain of Locale((uint64_t)&v277);
  MEMORY[0x185302050](&v277);
  id v179 = objc_allocWithZone((Class)NSMutableString);
  uint64_t v180 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v179, sel_initWithString_, v180);
  swift_unknownObjectRelease();
  uint64_t ObjectType = swift_getObjectType();
  id v258 = (id)(*(uint64_t (**)(uint64_t))(v233 + 488))(ObjectType);
  if (!((unint64_t)v20 >> 62))
  {
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for _NSAttributedStringReplacement);
    swift_bridgeObjectRetain();
    uint64_t v257 = _ContiguousArrayBuffer._asCocoaArray()();
    goto LABEL_30;
  }
LABEL_47:
  uint64_t v225 = v20 & 0xFFFFFFFFFFFFFF8;
  if (v20 < 0) {
    uint64_t v225 = v20;
  }
  uint64_t v257 = v225;
  swift_bridgeObjectRetain();
LABEL_30:
  uint64_t v253 = v20;
  if ((v25 & 0xC000000000000000) != 0)
  {
    uint64_t v256 = v25;
  }
  else
  {
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    uint64_t v256 = _ContiguousArrayBuffer._asCocoaArray()();
  }
  double v254 = COERCE_DOUBLE(objc_msgSend(self, sel_currentUser));
  long long v263 = partial apply for closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  uint64_t v264 = v22;
  uint64_t v259 = MEMORY[0x1E4F143A8];
  uint64_t v260 = 1107296256;
  uint64_t v261 = thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  uint64_t v262 = &block_descriptor_22;
  long long v255 = (long long *)_Block_copy(&v259);
  swift_retain();
  swift_release();
  uint64_t v182 = swift_allocObject();
  *(void *)(v182 + 16) = partial apply for closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v182 + 24) = v22;
  long long v263 = _sSo21NSAttributedStringKeyaSo8_NSRangeVypSgADSpy10ObjectiveC8ObjCBoolVGIegnyy_Iggyg_AbdedIIegnyy_Ieggyg_TRTA_0;
  uint64_t v264 = v182;
  uint64_t v259 = MEMORY[0x1E4F143A8];
  uint64_t v260 = 1107296256;
  uint64_t v261 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
  uint64_t v262 = &block_descriptor_6_2;
  double v252 = COERCE_DOUBLE(_Block_copy(&v259));
  swift_retain();
  uint64_t v230 = v182;
  swift_retain();
  swift_release();
  uint64_t v183 = swift_allocObject();
  *(void *)(v183 + 16) = partial apply for closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v183 + 24) = v22;
  long long v263 = _sSo8_NSRangeVypSgABSpy10ObjectiveC8ObjCBoolVGIegnyy_Igyg_AbcbGIegnyy_Iegyg_TRTA_0;
  uint64_t v264 = v183;
  uint64_t v259 = MEMORY[0x1E4F143A8];
  uint64_t v260 = 1107296256;
  uint64_t v261 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
  uint64_t v262 = &block_descriptor_12_2;
  char v251 = _Block_copy(&v259);
  uint64_t v229 = v22;
  swift_retain();
  uint64_t v231 = v183;
  swift_retain();
  swift_release();
  uint64_t v184 = swift_allocObject();
  *(void *)(v184 + 16) = v9;
  uint64_t v185 = swift_allocObject();
  *(void *)(v185 + 16) = partial apply for closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v185 + 24) = v184;
  v228[8] = v184;
  long long v263 = _sSo8_NSRangeVSo27NSLocalizedNumberFormatRuleCABSpy10ObjectiveC8ObjCBoolVGIeggyy_Igyg_AbdbHIeggyy_Iegyg_TRTA_0;
  uint64_t v264 = v185;
  uint64_t v259 = MEMORY[0x1E4F143A8];
  uint64_t v260 = 1107296256;
  uint64_t v261 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
  uint64_t v262 = &block_descriptor_21;
  unint64_t v250 = _Block_copy(&v259);
  uint64_t v233 = v185;
  swift_retain();
  swift_release();
  uint64_t v186 = swift_allocObject();
  *(void *)(v186 + 16) = v9;
  uint64_t v187 = swift_allocObject();
  *(void *)(v187 + 16) = partial apply for closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v187 + 24) = v186;
  v228[7] = v186;
  long long v263 = _sSo21NSAttributedStringKeyaSo8_NSRangeVIggy_AbDIeggy_TRTA_0;
  uint64_t v264 = v187;
  uint64_t v259 = MEMORY[0x1E4F143A8];
  uint64_t v260 = 1107296256;
  uint64_t v261 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
  uint64_t v262 = &block_descriptor_30;
  unint64_t v249 = (unint64_t)_Block_copy(&v259);
  uint64_t v235 = v187;
  swift_retain();
  swift_release();
  uint64_t v188 = swift_allocObject();
  *(void *)(v188 + 16) = v9;
  uint64_t v189 = swift_allocObject();
  *(void *)(v189 + 16) = partial apply for closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v189 + 24) = v188;
  v228[6] = v188;
  long long v263 = _sSo8_NSRangeVSbIgyd_ABSbIegyd_TRTA_0;
  uint64_t v264 = v189;
  uint64_t v259 = MEMORY[0x1E4F143A8];
  uint64_t v260 = 1107296256;
  uint64_t v261 = thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool);
  uint64_t v262 = &block_descriptor_39;
  char v247 = _Block_copy(&v259);
  uint64_t v236 = v189;
  swift_retain();
  swift_release();
  uint64_t v190 = swift_allocObject();
  *(void *)(v190 + 16) = v9;
  uint64_t v191 = swift_allocObject();
  *(void *)(v191 + 16) = partial apply for closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v191 + 24) = v190;
  v228[5] = v190;
  long long v263 = _sSo21NSAttributedStringKeyaSo8_NSRangeVypSgIggyr_AbdEIeggyr_TRTA_0;
  uint64_t v264 = v191;
  uint64_t v259 = MEMORY[0x1E4F143A8];
  uint64_t v260 = 1107296256;
  uint64_t v261 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?);
  uint64_t v262 = &block_descriptor_48;
  uint64_t v246 = _Block_copy(&v259);
  uint64_t v237 = v191;
  swift_retain();
  swift_release();
  uint64_t v192 = swift_allocObject();
  *(void *)(v192 + 16) = v9;
  uint64_t v193 = swift_allocObject();
  *(void *)(v193 + 16) = partial apply for closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v193 + 24) = v192;
  v228[4] = v192;
  long long v263 = _sSo8_NSRangeVSSIgyo_ABSSIegyo_TRTA_0;
  uint64_t v264 = v193;
  uint64_t v259 = MEMORY[0x1E4F143A8];
  uint64_t v260 = 1107296256;
  uint64_t v261 = thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@owned String);
  uint64_t v262 = &block_descriptor_57;
  uint64_t v245 = (long long *)_Block_copy(&v259);
  uint64_t v238 = v193;
  swift_retain();
  swift_release();
  uint64_t v194 = swift_allocObject();
  *(void *)(v194 + 16) = v7;
  uint64_t v195 = v7;
  uint64_t v196 = swift_allocObject();
  *(void *)(v196 + 16) = partial apply for closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v196 + 24) = v194;
  v228[3] = v194;
  long long v263 = _sSo8_NSRangeVSSSgABSpy10ObjectiveC8ObjCBoolVGIeggyy_Igyg_AbcbGIeggyy_Iegyg_TRTA_0;
  uint64_t v264 = v196;
  uint64_t v259 = MEMORY[0x1E4F143A8];
  uint64_t v260 = 1107296256;
  uint64_t v261 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
  uint64_t v262 = &block_descriptor_66;
  uint64_t v197 = _Block_copy(&v259);
  id v198 = v195;
  uint64_t v239 = v196;
  swift_retain();
  swift_release();
  uint64_t v199 = swift_allocObject();
  *(void *)(v199 + 16) = v9;
  *(void *)(v199 + 24) = v198;
  uint64_t v200 = swift_allocObject();
  *(void *)(v200 + 16) = partial apply for closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v200 + 24) = v199;
  v228[2] = v199;
  long long v263 = _sSo8_NSRangeVypIgyn_ABypIegyn_TRTA_0;
  uint64_t v264 = v200;
  uint64_t v259 = MEMORY[0x1E4F143A8];
  uint64_t v260 = 1107296256;
  uint64_t v261 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ();
  uint64_t v262 = &block_descriptor_75;
  char v201 = _Block_copy(&v259);
  double v244 = COERCE_DOUBLE(v198);
  uint64_t v240 = v200;
  swift_retain();
  swift_release();
  long long v263 = (uint64_t (*)())destructiveProjectEnumData for PredicateCodableError;
  uint64_t v264 = 0;
  uint64_t v259 = MEMORY[0x1E4F143A8];
  uint64_t v260 = 1107296256;
  uint64_t v261 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed NSAttributedStringKey, @in_guaranteed Any) -> ();
  uint64_t v262 = &block_descriptor_78;
  long long v202 = (uint64_t *)_Block_copy(&v259);
  uint64_t v241 = v202;
  swift_release();
  uint64_t v203 = swift_allocObject();
  uint64_t v204 = v253;
  *(double *)(v203 + 16) = v248;
  *(void *)(v203 + 24) = v204;
  uint64_t v205 = swift_allocObject();
  *(void *)(v205 + 16) = partial apply for closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v205 + 24) = v203;
  v228[1] = v203;
  long long v263 = _sypypSgIgnr_ypAAIegnr_TRTA_0;
  uint64_t v264 = v205;
  uint64_t v243 = (char *)v205;
  uint64_t v259 = MEMORY[0x1E4F143A8];
  uint64_t v260 = 1107296256;
  uint64_t v261 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> (@out Any?);
  uint64_t v262 = &block_descriptor_87;
  long long v206 = _Block_copy(&v259);
  uint64_t v242 = v206;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  uint64_t v226 = (uint64_t)v202;
  uint64_t v227 = (uint64_t)v206;
  long long v207 = v245;
  unint64_t v208 = v246;
  unint64_t v209 = v247;
  uint64_t v210 = (const void *)v249;
  uint64_t v211 = v250;
  uint64_t v212 = v251;
  double v213 = *(const void **)&v252;
  _NSInflect((uint64_t)v258, v257, v256, *(uint64_t *)&v254, (uint64_t)v255, 0, *(uint64_t *)&v252, (uint64_t)v251, (uint64_t)v250, v249, (uint64_t)v247, (uint64_t)v246, (uint64_t)v245, (uint64_t)v197, (uint64_t)v201, v226, v227);

  _Block_release(v241);
  _Block_release(v201);
  _Block_release(v197);
  _Block_release(v207);
  _Block_release(v208);
  _Block_release(v209);
  _Block_release(v210);
  _Block_release(v211);
  _Block_release(v212);
  _Block_release(v213);
  _Block_release(v255);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  _Block_release(v242);
  LOBYTE(v212) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v212)
  {
    __break(1u);
    goto LABEL_52;
  }
  if (swift_isEscapingClosureAtFileLocation())
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  char v215 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v215)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  char v216 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v216)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  char v217 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v217)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  char v218 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v218)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  char v219 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v219)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  char v220 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v220)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  char v221 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v221)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  char v222 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v222)
  {
LABEL_61:
    __break(1u);
    JUMPOUT(0x181F5AF4CLL);
  }
  uint64_t v223 = *(void *)(v229 + 16);
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release_n();
  *unint64_t v232 = v223;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t AttributedString.inflected(locale:userTermOfAddress:inflectionConcepts:)@<X0>(long long *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v209 = a4;
  uint64_t v210 = a3;
  long long v208 = *a1;
  uint64_t v5 = *a2;
  uint64_t v206 = a2[1];
  uint64_t v207 = v5;
  uint64_t v6 = a2[2];
  uint64_t v204 = a2[3];
  uint64_t v205 = v6;
  uint64_t v7 = a2[4];
  uint64_t v202 = a2[5];
  uint64_t v203 = v7;
  uint64_t v8 = a2[6];
  uint64_t v200 = a2[7];
  uint64_t v201 = v8;
  uint64_t v9 = a2[8];
  uint64_t v198 = a2[9];
  uint64_t v199 = v9;
  uint64_t v10 = a2[10];
  uint64_t v196 = a2[11];
  uint64_t v197 = v10;
  uint64_t v195 = a2[12];
  long long v11 = *(_OWORD **)v4;
  long long v12 = *(_OWORD *)(*(void *)v4 + 16);
  long long v13 = *(_OWORD *)(*(void *)v4 + 32);
  v378[2] = *(_OWORD *)(*(void *)v4 + 48);
  v378[1] = v13;
  v378[0] = v12;
  swift_retain();
  outlined retain of Locale((uint64_t)v378);
  uint64_t v14 = BigString.startIndex.getter();
  uint64_t v16 = v15;
  unint64_t v18 = v17;
  uint64_t v20 = v19;
  outlined release of Locale((uint64_t)v378);
  long long v21 = v11[1];
  long long v22 = v11[2];
  long long v377 = v11[3];
  v376[1] = v22;
  v376[0] = v21;
  long long v23 = v11[1];
  long long v24 = v11[2];
  v379[2] = v377;
  v379[1] = v24;
  v379[0] = v23;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v379, (uint64_t)v380);
  outlined retain of Locale((uint64_t)v380);
  uint64_t v25 = BigString.endIndex.getter();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  outlined release of Locale((uint64_t)v376);
  swift_release();
  uint64_t v232 = v20;
  if (static BigString.Index.< infix(_:_:)()) {
    goto LABEL_29;
  }
  unint64_t v231 = v18;
  uint64_t v310 = MEMORY[0x1E4FBC860];
  long long v32 = v11[2];
  v375[0] = v11[1];
  v375[1] = v32;
  v375[2] = v11[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v375);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v375);
  long long v33 = v11[1];
  long long v34 = v11[2];
  long long v374 = v11[3];
  v373[1] = v34;
  v373[0] = v33;
  long long v35 = v11[1];
  long long v36 = v11[2];
  v381[2] = v374;
  v381[1] = v36;
  v381[0] = v35;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v381, (uint64_t)v382);
  outlined retain of Locale((uint64_t)v382);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v373);
  uint64_t v362 = v14;
  uint64_t v363 = v16;
  unint64_t v364 = v18;
  uint64_t v365 = v232;
  uint64_t v366 = v25;
  uint64_t v367 = v27;
  uint64_t v368 = v29;
  uint64_t v369 = v31;
  long long v37 = v11[2];
  long long v370 = v11[1];
  long long v371 = v37;
  uint64_t v211 = v11 + 1;
  long long v372 = v11[3];
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v311);
  uint64_t v38 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v45 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  outlined release of Locale((uint64_t)&v312);
  swift_release_n();
  uint64_t v354 = v38;
  uint64_t v355 = v40;
  uint64_t v356 = v42;
  uint64_t v357 = v44;
  uint64_t v358 = v45;
  uint64_t v359 = v47;
  uint64_t v360 = v49;
  uint64_t v361 = v51;
  AttributedString.Runs.init(_:in:)((uint64_t)v11, &v285);
  long long v306 = v290;
  long long v307 = v291;
  long long v308 = v292;
  long long v309 = v293;
  long long v302 = v286;
  long long v303 = v287;
  long long v304 = v288;
  long long v305 = v289;
  uint64_t v52 = v285;
  unint64_t v53 = v294;
  unint64_t v54 = v295;
  uint64_t v55 = v296;
  uint64_t v56 = v297;
  uint64_t v57 = v299;
  uint64_t v58 = v300;
  uint64_t v59 = v301;
  uint64_t v223 = v298;
  char v60 = static BigString.Index.== infix(_:_:)();
  uint64_t v61 = v57;
  uint64_t v62 = MEMORY[0x1E4FBC860];
  uint64_t v63 = MEMORY[0x1E4FBC860];
  if ((v60 & 1) == 0)
  {
    uint64_t v221 = v52;
    unint64_t v222 = v53;
    char v216 = &v248;
    char v217 = v11;
    uint64_t v214 = (char *)&v233 + 8;
    char v215 = v274;
    unint64_t v64 = v53;
    uint64_t v219 = v55;
    unint64_t v220 = v54;
    unint64_t v65 = v54;
    uint64_t v66 = v55;
    uint64_t v218 = v56;
    uint64_t v67 = v56;
    uint64_t v68 = v223;
    uint64_t v69 = v61;
    uint64_t v70 = v58;
    uint64_t v71 = v59;
    uint64_t v212 = v59;
    uint64_t v213 = v61;
    uint64_t v232 = v58;
    while (1)
    {
      uint64_t v229 = v67;
      unint64_t v230 = v65;
      uint64_t v228 = v66;
      unint64_t v231 = v64;
      long long v85 = v306;
      long long v86 = v307;
      long long v87 = v307;
      long long v88 = v214;
      *((_OWORD *)v214 + 4) = v306;
      v88[5] = v86;
      long long v89 = v308;
      long long v90 = v309;
      long long v91 = v309;
      v88[6] = v308;
      v88[7] = v90;
      long long v92 = v302;
      long long v93 = v303;
      long long v94 = v303;
      _OWORD *v88 = v302;
      v88[1] = v93;
      long long v95 = v304;
      long long v96 = v305;
      long long v97 = v305;
      v88[2] = v304;
      v88[3] = v96;
      uint64_t v98 = v216;
      *((_OWORD *)v216 + 4) = v85;
      *((_OWORD *)v98 + 5) = v87;
      *((_OWORD *)v98 + 6) = v89;
      *((_OWORD *)v98 + 7) = v91;
      *(_OWORD *)uint64_t v98 = v92;
      *((_OWORD *)v98 + 1) = v94;
      *((_OWORD *)v98 + 2) = v95;
      *((_OWORD *)v98 + 3) = v97;
      uint64_t v100 = v221;
      uint64_t v99 = v222;
      uint64_t v247 = v221;
      unint64_t v260 = v222;
      uint64_t v102 = v219;
      uint64_t v101 = v220;
      unint64_t v261 = v220;
      uint64_t v262 = v219;
      uint64_t v103 = v218;
      uint64_t v263 = v218;
      uint64_t v264 = v68;
      uint64_t v265 = v69;
      uint64_t v266 = v70;
      uint64_t v267 = v71;
      unint64_t v243 = v64;
      unint64_t v244 = v65;
      uint64_t v245 = v66;
      uint64_t v246 = v67;
      AttributedString.Runs.subscript.getter(&v268);
      unint64_t v226 = v269;
      uint64_t v104 = v71;
      unint64_t v224 = v268;
      uint64_t v225 = v272;
      long long v105 = v307;
      char v106 = v215;
      v215[4] = v306;
      v106[5] = v105;
      long long v107 = v309;
      v106[6] = v308;
      v106[7] = v107;
      long long v108 = v303;
      *char v106 = v302;
      v106[1] = v108;
      long long v109 = v305;
      v106[2] = v304;
      _OWORD v106[3] = v109;
      uint64_t v273 = v100;
      unint64_t v275 = v99;
      unint64_t v276 = v101;
      uint64_t v277 = v102;
      uint64_t v278 = v103;
      uint64_t v279 = v68;
      uint64_t v280 = v69;
      uint64_t v281 = v232;
      uint64_t v282 = v71;
      uint64_t v283 = &outlined read-only object #0 of AttributedString.inflected(locale:userTermOfAddress:inflectionConcepts:);
      uint64_t v110 = MEMORY[0x1E4FBC860];
      uint64_t v284 = MEMORY[0x1E4FBC860];
      *(void *)&long long v233 = v100;
      uint64_t v235 = v99;
      uint64_t v236 = v101;
      uint64_t v237 = v102;
      uint64_t v238 = v103;
      uint64_t v239 = v68;
      uint64_t v240 = v69;
      uint64_t v241 = v232;
      uint64_t v242 = v104;
      unint64_t v268 = v231;
      unint64_t v269 = v230;
      uint64_t v270 = v228;
      uint64_t v271 = v229;
      swift_retain();
      outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v273);
      AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)((uint64_t *)&v268, (uint64_t)&outlined read-only object #0 of AttributedString.inflected(locale:userTermOfAddress:inflectionConcepts:), v110, &v247);
      swift_release();
      outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v273);
      uint64_t v111 = v250;
      uint64_t v81 = v247;
      unint64_t v82 = v248;
      uint64_t v78 = v249;
      if (static BigString.Index.< infix(_:_:)()) {
        break;
      }
      uint64_t v227 = v111;
      uint64_t v112 = specialized AttributedString._AttributeStorage.subscript.getter(v224);
      char v114 = v113;
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v70 = v232;
      if ((v114 & 1) == 0)
      {
        unint64_t v226 = v112;
        long long v115 = v211;
        long long v116 = v211[1];
        v353[0] = *v211;
        v353[1] = v116;
        v353[2] = v211[2];
        swift_retain();
        outlined retain of Locale((uint64_t)v353);
        BigString.startIndex.getter();
        outlined release of Locale((uint64_t)v353);
        long long v117 = *v115;
        long long v118 = v115[1];
        long long v352 = v115[2];
        v351[1] = v118;
        v351[0] = v117;
        long long v119 = *v115;
        long long v120 = v115[1];
        v383[2] = v352;
        v383[1] = v120;
        v383[0] = v119;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v383, (uint64_t)v384);
        outlined retain of Locale((uint64_t)v384);
        BigString.endIndex.getter();
        outlined release of Locale((uint64_t)v351);
        long long v121 = *v115;
        long long v122 = v115[1];
        long long v350 = v115[2];
        v349[1] = v122;
        v349[0] = v121;
        long long v123 = *v115;
        long long v124 = v115[1];
        v385[2] = v350;
        v385[1] = v124;
        v385[0] = v123;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v385, (uint64_t)v386);
        outlined retain of Locale((uint64_t)v386);
        swift_release();
        BigString.utf16.getter();
        BigString.startIndex.getter();
        unint64_t v126 = v230;
        unint64_t v125 = v231;
        uint64_t v225 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)&v313);
        BigString.utf16.getter();
        uint64_t v127 = v227;
        unint64_t v224 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)v349);
        outlined release of Locale((uint64_t)&v314);
        long long v128 = v115[1];
        v348[0] = *v115;
        v348[1] = v128;
        v348[2] = v115[2];
        uint64_t v129 = (uint64_t)v217;
        swift_retain();
        outlined retain of Locale((uint64_t)v348);
        BigString.startIndex.getter();
        outlined release of Locale((uint64_t)v348);
        long long v130 = *v115;
        long long v131 = v115[1];
        long long v347 = v115[2];
        v346[1] = v131;
        v346[0] = v130;
        long long v132 = *v115;
        long long v133 = v115[1];
        v387[2] = v347;
        v387[1] = v133;
        v387[0] = v132;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v387, (uint64_t)v388);
        outlined retain of Locale((uint64_t)v388);
        BigString.endIndex.getter();
        outlined release of Locale((uint64_t)v346);
        unint64_t v321 = v125;
        unint64_t v322 = v126;
        uint64_t v323 = v228;
        uint64_t v324 = v229;
        unint64_t v230 = v82;
        unint64_t v231 = v81;
        uint64_t v325 = v81;
        unint64_t v326 = v82;
        uint64_t v229 = v78;
        uint64_t v327 = v78;
        uint64_t v328 = v127;
        long long v134 = v115[1];
        long long v343 = *v115;
        long long v344 = v134;
        long long v345 = v115[2];
        uint64_t v135 = v129;
        swift_retain_n();
        BigString.unicodeScalars.getter();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)&v315);
        uint64_t v136 = BigSubstring.UnicodeScalarView.startIndex.getter();
        uint64_t v138 = v137;
        uint64_t v140 = v139;
        uint64_t v142 = v141;
        uint64_t v143 = BigSubstring.UnicodeScalarView.endIndex.getter();
        uint64_t v145 = v144;
        uint64_t v147 = v146;
        uint64_t v149 = v148;
        outlined release of Locale((uint64_t)&v316);
        swift_release_n();
        uint64_t v335 = v136;
        uint64_t v336 = v138;
        uint64_t v337 = v140;
        uint64_t v338 = v142;
        uint64_t v339 = v143;
        uint64_t v340 = v145;
        uint64_t v341 = v147;
        uint64_t v342 = v149;
        swift_retain();
        specialized AttributedString.Guts.getUniformValue<A>(in:key:)((uint64_t)&v247);
        if (v250)
        {
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v247, (uint64_t)&v233);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          swift_dynamicCast();
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v247);
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v247, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          unint64_t v269 = 0;
          *(double *)&unint64_t v268 = 0.0;
          LODWORD(v270) = 0;
          BYTE4(v270) = -1;
        }
        swift_release_n();
        if (BYTE4(v270) == 255)
        {
          uint64_t v150 = v211;
          long long v151 = v211[1];
          v334[0] = *v211;
          v334[1] = v151;
          v334[2] = v211[2];
          swift_retain();
          outlined retain of Locale((uint64_t)v334);
          BigString.startIndex.getter();
          outlined release of Locale((uint64_t)v334);
          long long v152 = *v150;
          long long v153 = v150[1];
          long long v333 = v150[2];
          v332[1] = v153;
          v332[0] = v152;
          long long v154 = *v150;
          v389[1] = v150[1];
          v389[2] = v333;
          v389[0] = v154;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v389, (uint64_t)v390);
          outlined retain of Locale((uint64_t)v390);
          BigString.endIndex.getter();
          outlined release of Locale((uint64_t)v332);
          long long v155 = v150[1];
          long long v329 = *v150;
          long long v330 = v155;
          long long v331 = v150[2];
          swift_retain_n();
          BigString.unicodeScalars.getter();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v317);
          uint64_t v228 = BigSubstring.UnicodeScalarView.startIndex.getter();
          uint64_t v157 = v156;
          uint64_t v159 = v158;
          uint64_t v161 = v160;
          uint64_t v162 = BigSubstring.UnicodeScalarView.endIndex.getter();
          uint64_t v164 = v163;
          uint64_t v166 = v165;
          uint64_t v168 = v167;
          outlined release of Locale((uint64_t)&v318);
          swift_release_n();
          v319[14] = v228;
          v319[15] = v157;
          v319[16] = v159;
          v319[17] = v161;
          v319[18] = v162;
          v319[19] = v164;
          v319[20] = v166;
          v319[21] = v168;
          long long v169 = *v150;
          long long v170 = v150[1];
          v320[2] = v150[2];
          v320[1] = v170;
          v320[0] = v169;
          swift_retain_n();
          outlined retain of Locale((uint64_t)v320);
          BigString.subscript.getter();
          outlined release of Locale((uint64_t)v320);
          uint64_t v171 = BigSubstring.startIndex.getter();
          uint64_t v173 = v172;
          uint64_t v175 = v174;
          uint64_t v177 = v176;
          uint64_t v178 = BigSubstring.endIndex.getter();
          uint64_t v180 = v179;
          uint64_t v182 = v181;
          uint64_t v184 = v183;
          outlined release of Locale((uint64_t)v319);
          swift_release_n();
          uint64_t v247 = v135;
          uint64_t v248 = v171;
          uint64_t v249 = v173;
          uint64_t v250 = v175;
          uint64_t v251 = v177;
          uint64_t v252 = v178;
          uint64_t v253 = v180;
          uint64_t v254 = v182;
          uint64_t v255 = v184;
          uint64_t v256 = 0;
          lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
          String.init<A>(_:)();
          uint64_t v185 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v186 = 0;
          uint64_t v250 = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
          uint64_t v247 = v185;
        }
        else
        {
          switch((v270 | ((unint64_t)BYTE4(v270) << 32)) >> 32)
          {
            case 1uLL:
              id v187 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithLongLong_, v268);
              break;
            case 2uLL:
              double v188 = *(double *)&v268;
              goto LABEL_22;
            case 3uLL:
              NSDecimal.doubleValue.getter(v268, v269, v270);
              double v188 = v189;
LABEL_22:
              id v187 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, v188);
              break;
            default:
              id v187 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedLongLong_, v268);
              break;
          }
          uint64_t v190 = (uint64_t)v187;
          uint64_t v250 = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          uint64_t v247 = v190;
          uint64_t v186 = 1;
        }
        unint64_t v191 = v226;
        outlined init with copy of (Hashable & Sendable)?((uint64_t)&v247, (uint64_t)&v233, (uint64_t *)&demangling cache variable for type metadata for Any?);
        uint64_t v192 = v234;
        if (v234)
        {
          uint64_t v72 = __swift_project_boxed_opaque_existential_1(&v233, v234);
          uint64_t v73 = *(void *)(v192 - 8);
          double v74 = MEMORY[0x1F4188790](v72);
          double v76 = (char *)&v194 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, double))(v73 + 16))(v76, v74);
          uint64_t v77 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(char *, uint64_t))(v73 + 8))(v76, v192);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v233);
        }
        else
        {
          uint64_t v77 = 0;
        }
        uint64_t v70 = v232;
        uint64_t v78 = v229;
        id v79 = objc_allocWithZone((Class)_NSAttributedStringReplacement);
        objc_msgSend(v79, sel_initWithIndex_specifierRangeInFormatString_replacementRangeInResult_replacementKind_argument_, v191, 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL, v225, v224, v186, v77);
        uint64_t v80 = swift_unknownObjectRelease();
        MEMORY[0x185302590](v80);
        if (*(void *)((v310 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v310 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        outlined destroy of Any?((uint64_t)&v247, (uint64_t *)&demangling cache variable for type metadata for Any?);
        unint64_t v82 = v230;
        uint64_t v81 = v231;
      }
      uint64_t v83 = v227;
      uint64_t v68 = v223;
      uint64_t v71 = v212;
      uint64_t v69 = v213;
      char v84 = static BigString.Index.== infix(_:_:)();
      unint64_t v64 = v81;
      unint64_t v65 = v82;
      uint64_t v66 = v78;
      uint64_t v67 = v83;
      if (v84)
      {
        uint64_t v63 = v310;
        uint64_t v61 = v69;
        uint64_t v52 = v221;
        unint64_t v53 = v222;
        uint64_t v58 = v70;
        uint64_t v55 = v219;
        unint64_t v54 = v220;
        uint64_t v59 = v71;
        long long v11 = v217;
        uint64_t v56 = v218;
        uint64_t v62 = MEMORY[0x1E4FBC860];
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
    JUMPOUT(0x181F5BF08);
  }
LABEL_27:
  v274[4] = v306;
  v274[5] = v307;
  v274[6] = v308;
  v274[7] = v309;
  v274[0] = v302;
  v274[1] = v303;
  v274[2] = v304;
  long long v274[3] = v305;
  uint64_t v273 = v52;
  unint64_t v275 = v53;
  unint64_t v276 = v54;
  uint64_t v277 = v55;
  uint64_t v278 = v56;
  uint64_t v279 = v223;
  uint64_t v280 = v61;
  uint64_t v281 = v58;
  uint64_t v282 = v59;
  uint64_t v283 = &outlined read-only object #0 of AttributedString.inflected(locale:userTermOfAddress:inflectionConcepts:);
  uint64_t v284 = v62;
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v273);
  unint64_t v268 = (unint64_t)v11;
  long long v233 = v208;
  uint64_t v247 = v207;
  uint64_t v248 = v206;
  uint64_t v249 = v205;
  uint64_t v250 = v204;
  uint64_t v251 = v203;
  uint64_t v252 = v202;
  uint64_t v253 = v201;
  uint64_t v254 = v200;
  uint64_t v255 = v199;
  uint64_t v256 = v198;
  uint64_t v257 = v197;
  uint64_t v258 = v196;
  uint64_t v259 = v195;
  AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)((uint64_t)&v233, &v247, v63, v210, 0, v209);
  return swift_bridgeObjectRelease();
}

uint64_t closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1)
{
  long long v1 = *(_OWORD **)(a1 + 16);
  long long v2 = v1[1];
  long long v3 = v1[3];
  v8[1] = v1[2];
  id v8[2] = v3;
  v8[0] = v2;
  long long v4 = v1[1];
  v9[1] = v1[2];
  id v9[2] = v3;
  v9[0] = v4;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v9, (uint64_t)v10);
  outlined retain of Locale((uint64_t)v10);
  BigString.utf16.getter();
  outlined release of Locale((uint64_t)v8);
  uint64_t v5 = BigString.UTF16View.count.getter();
  outlined release of Locale((uint64_t)&v7);
  return v5;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)(uint64_t a1)
{
  long long v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  return v3;
}

uint64_t closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t, char *), uint64_t a5, uint64_t a6)
{
  *(void *)&long long v31 = *(void *)(a6 + 16);
  swift_retain();
  uint64_t result = Range<>.init(_:in:)(a2, a3, &v31, (uint64_t *)&v26);
  if (v28 == 2) {
    return result;
  }
  long long v31 = v26;
  uint64_t v32 = v27;
  uint64_t v33 = v28;
  long long v34 = v29;
  long long v35 = v30;
  id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflect");
  uint64_t v15 = v14;
  if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v15 == v16)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      if (one-time initialization token for inflectionAlternative != -1) {
        swift_once();
      }
      id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)static NSAttributedStringKey.inflectionAlternative);
      uint64_t v21 = v20;
      if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v21 == v22)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v24 & 1) == 0) {
          return result;
        }
      }
      uint64_t v25 = *(_OWORD **)(a6 + 16);
      swift_retain();
      swift_retain();
      swift_retain();
      specialized AttributedString.enumerate<A>(_:in:editor:)(&v31, v25, a4, a5, a6);
      goto LABEL_17;
    }
  }
  long long v23 = *(_OWORD **)(a6 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  specialized AttributedString.enumerate<A>(_:in:editor:)(&v31, v23, a4, a5, a6);
LABEL_17:
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, void *a2, int a3, int a4, void *aBlock)
{
  uint64_t v6 = *(void (**)(void))(a1 + 32);
  uint64_t v7 = _Block_copy(aBlock);
  *(void *)(swift_allocObject() + 16) = v7;
  id v8 = a2;
  v6();
  swift_release();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v9 = v18;
  if (v18)
  {
    uint64_t v10 = __swift_project_boxed_opaque_existential_1(v17, v18);
    uint64_t v11 = *(void *)(v9 - 8);
    double v12 = MEMORY[0x1F4188790](v10);
    uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v11 + 16))(v14, v12);
    uint64_t v15 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    uint64_t v15 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 16))(a5, v15, a2, a3, a4);
  return swift_unknownObjectRelease();
}

uint64_t closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t, char *), uint64_t a4, uint64_t a5)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  *(void *)&v99[0] = *(void *)(a5 + 16);
  swift_retain();
  uint64_t result = Range<>.init(_:in:)(a1, a2, v99, (uint64_t *)&v86);
  uint64_t v9 = v88;
  if (v88 != 2)
  {
    uint64_t v10 = v90;
    uint64_t v11 = v91;
    uint64_t v12 = v87;
    long long v64 = v86;
    long long v65 = v89;
    uint64_t v13 = *(_OWORD **)(a5 + 16);
    long long v14 = v13[1];
    long long v15 = v13[2];
    v120[2] = v13[3];
    v120[1] = v15;
    v120[0] = v14;
    swift_retain_n();
    swift_retain();
    uint64_t v63 = a5;
    swift_retain();
    outlined retain of Locale((uint64_t)v120);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v120);
    long long v16 = v13[1];
    v118[1] = v13[2];
    long long v119 = v13[3];
    v118[0] = v16;
    long long v17 = v13[1];
    long long v18 = v13[2];
    v121[2] = v119;
    v121[1] = v18;
    v121[0] = v17;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v121, (uint64_t)v122);
    outlined retain of Locale((uint64_t)v122);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v118);
    long long v109 = v64;
    uint64_t v110 = v12;
    uint64_t v111 = v9;
    long long v112 = v65;
    uint64_t v113 = v10;
    uint64_t v114 = v11;
    long long v19 = v13[2];
    long long v115 = v13[1];
    long long v116 = v19;
    long long v117 = v13[3];
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v92);
    uint64_t v20 = BigSubstring.UnicodeScalarView.startIndex.getter();
    *(void *)&long long v65 = v21;
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    uint64_t v26 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    outlined release of Locale((uint64_t)v93);
    swift_release_n();
    uint64_t v101 = v20;
    uint64_t v102 = v65;
    uint64_t v103 = v23;
    uint64_t v104 = v25;
    uint64_t v105 = v26;
    uint64_t v106 = v28;
    uint64_t v107 = v30;
    uint64_t v108 = v32;
    AttributedString.Runs.init(_:in:)((uint64_t)v13, &v70);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_18210C6A0;
    if (one-time initialization token for name != -1) {
      swift_once();
    }
    uint64_t v34 = qword_1E8ED5E58;
    *(void *)(v33 + 32) = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
    *(void *)(v33 + 40) = v34;
    uint64_t v35 = one-time initialization token for name;
    swift_bridgeObjectRetain();
    if (v35 != -1) {
      swift_once();
    }
    uint64_t v36 = qword_1E8ED5EB0;
    *(void *)(v33 + 48) = static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name;
    *(void *)(v33 + 56) = v36;
    uint64_t v37 = one-time initialization token for name;
    swift_bridgeObjectRetain();
    uint64_t v38 = v63;
    if (v37 != -1) {
      swift_once();
    }
    uint64_t v39 = qword_1E8ED5E98;
    *(void *)(v33 + 64) = static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name;
    *(void *)(v33 + 72) = v39;
    uint64_t v40 = one-time initialization token for name;
    swift_bridgeObjectRetain();
    if (v40 != -1) {
      swift_once();
    }
    uint64_t v41 = qword_1E8ED5E80;
    *(void *)(v33 + 80) = static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name;
    *(void *)(v33 + 88) = v41;
    v83[10] = v80;
    v83[11] = v81;
    v83[6] = v76;
    v83[7] = v77;
    v83[8] = v78;
    v83[9] = v79;
    v83[2] = v72;
    v83[3] = v73;
    v83[4] = v74;
    v83[5] = v75;
    v83[0] = v70;
    v83[1] = v71;
    *(void *)&long long v84 = v82;
    *((void *)&v84 + 1) = v33;
    uint64_t v85 = MEMORY[0x1E4FBC860];
    uint64_t v100 = MEMORY[0x1E4FBC860];
    v99[10] = v80;
    v99[11] = v81;
    v99[6] = v76;
    v99[7] = v77;
    v99[8] = v78;
    v99[9] = v79;
    v99[2] = v72;
    v99[3] = v73;
    v99[4] = v74;
    v99[5] = v75;
    v99[0] = v70;
    v99[1] = v71;
    v99[12] = v84;
    swift_bridgeObjectRetain();
    uint64_t v42 = specialized Sequence.compactMap<A>(_:)((uint64_t)v99);
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v83);
    uint64_t v43 = v42[2];
    if (v43)
    {
      char v44 = 0;
      uint64_t v45 = v43 - 1;
      for (unint64_t i = v42 + 6; ; i += 9)
      {
        if (v44)
        {
          if (!v45)
          {
            swift_release();
            goto LABEL_20;
          }
          char v44 = 1;
        }
        else
        {
          uint64_t v47 = (void *)i[6];
          v69[3] = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSInflectionRule);
          v69[0] = v47;
          v68[3] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
          v68[0] = swift_allocObject();
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v69, v68[0] + 16, (uint64_t *)&demangling cache variable for type metadata for Any?);
          v66[0] = 0;
          outlined init with copy of Any((uint64_t)v68, (uint64_t)v67);
          uint64_t v48 = *(_OWORD **)(v38 + 16);
          long long v49 = v48[1];
          long long v50 = v48[3];
          v98[1] = v48[2];
          _OWORD v98[2] = v50;
          v98[0] = v49;
          id v51 = v47;
          swift_retain();
          outlined retain of Locale((uint64_t)v98);
          BigString.startIndex.getter();
          outlined release of Locale((uint64_t)v98);
          long long v52 = v48[1];
          long long v53 = v48[3];
          v97[1] = v48[2];
          v97[2] = v53;
          v97[0] = v52;
          long long v54 = v48[1];
          long long v55 = v48[2];
          v123[2] = v53;
          v123[1] = v55;
          v123[0] = v54;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v123, (uint64_t)v124);
          outlined retain of Locale((uint64_t)v124);
          BigString.endIndex.getter();
          outlined release of Locale((uint64_t)v97);
          long long v56 = v48[1];
          long long v57 = v48[3];
          v96[1] = v48[2];
          v96[2] = v57;
          v96[0] = v56;
          long long v58 = v48[1];
          long long v59 = v48[2];
          v125[2] = v57;
          v125[1] = v59;
          v125[0] = v58;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v125, (uint64_t)v126);
          outlined retain of Locale((uint64_t)v126);
          swift_release();
          BigString.utf16.getter();
          BigString.startIndex.getter();
          uint64_t v60 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v94);
          BigString.utf16.getter();
          uint64_t v61 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v96);
          outlined release of Locale((uint64_t)v95);
          a3(v67, v60, v61, v66);
          outlined destroy of Any?((uint64_t)v67, (uint64_t *)&demangling cache variable for type metadata for Any?);
          char v44 = v66[0];
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);

          outlined destroy of Any?((uint64_t)v69, (uint64_t *)&demangling cache variable for type metadata for Any?);
          if (!v45)
          {
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_22;
          }
          uint64_t v38 = v63;
        }
        --v45;
      }
    }
    swift_release();
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_22:
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(a1, a2, a3, a4, (uint64_t)&unk_1ECA5B7D0, (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ());
}

uint64_t closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, void (*a3)(id, uint64_t, uint64_t, char *), uint64_t a4, uint64_t *a5)
{
  uint64_t v11 = *a5;
  swift_retain();
  uint64_t result = Range<>.init(_:in:)(a1, a2, &v11, (uint64_t *)&v12);
  if (v13 != 2)
  {
    uint64_t v11 = *a5;
    swift_retain();
    swift_retain();
    specialized AttributedString.enumerateFormattableRanges(in:editor:)(&v12, (uint64_t)&v11, a3, a4, (uint64_t)a5);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(a1, a2, a3, a4, (uint64_t)&unk_1ECA5B7A8, (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ());
}

uint64_t closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v218 = *(_OWORD **)a4;
  swift_retain();
  uint64_t result = Range<>.init(_:in:)(a2, a3, &v218, v229);
  uint64_t v9 = v230;
  if (v230 == 2) {
    return result;
  }
  uint64_t v214 = v229[0];
  uint64_t v215 = v229[1];
  uint64_t v216 = v229[2];
  uint64_t v10 = v231;
  uint64_t v11 = v232;
  uint64_t v13 = v233;
  uint64_t v12 = v234;
  id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflect");
  uint64_t v16 = v15;
  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v16 == v17)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19)
  {
LABEL_16:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v30 = *(void **)a4;
      long long v31 = *(_OWORD *)(*(void *)a4 + 16);
      long long v32 = *(_OWORD *)(*(void *)a4 + 48);
      long long v256 = *(_OWORD *)(*(void *)a4 + 32);
      long long v257 = v32;
      long long v255 = v31;
      uint64_t v33 = v30[8];
      uint64_t v209 = v30[9];
      uint64_t v34 = v30[10];
      uint64_t v35 = v30[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v255);
      swift_unknownObjectRetain();
      *(void *)a4 = AttributedString.Guts.init(string:runs:)(&v255, v33, v209, v34, v35);
      swift_release();
    }
    uint64_t v36 = *(_OWORD **)a4;
    long long v37 = *(_OWORD *)(*(void *)a4 + 16);
    long long v38 = *(_OWORD *)(*(void *)a4 + 48);
    long long v253 = *(_OWORD *)(*(void *)a4 + 32);
    long long v254 = v38;
    long long v252 = v37;
    swift_retain();
    outlined retain of Locale((uint64_t)&v252);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v252);
    long long v39 = v36[1];
    long long v40 = v36[3];
    long long v250 = v36[2];
    long long v251 = v40;
    long long v249 = v39;
    long long v41 = v36[1];
    long long v259 = v36[2];
    long long v260 = v40;
    long long v258 = v41;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v258, (uint64_t)v261);
    outlined retain of Locale((uint64_t)v261);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v249);
    swift_release();
    uint64_t v42 = *(_OWORD **)a4;
    uint64_t v238 = v214;
    uint64_t v239 = v215;
    uint64_t v240 = v216;
    uint64_t v241 = v9;
    uint64_t v242 = v10;
    uint64_t v243 = v11;
    uint64_t v244 = v13;
    uint64_t v245 = v12;
    long long v43 = v42[2];
    long long v246 = v42[1];
    long long v247 = v43;
    long long v248 = v42[3];
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v228);
    uint64_t v44 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    uint64_t v50 = v49;
    uint64_t v51 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v53 = v52;
    uint64_t v55 = v54;
    uint64_t v57 = v56;
    outlined release of Locale((uint64_t)v229);
    swift_release();
    uint64_t v218 = v42;
    uint64_t v219 = v44;
    uint64_t v220 = v46;
    uint64_t v221 = v48;
    uint64_t v222 = v50;
    uint64_t v223 = v51;
    uint64_t v224 = v53;
    uint64_t v225 = v55;
    uint64_t v226 = v57;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    long long v58 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    long long v59 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v59);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v58, (uint64_t *)&v235);
    os_unfair_lock_unlock(v59);
    swift_release();
    uint64_t v60 = v235;
    uint64_t v227 = v235;
    BigString.init()();
    v217[0] = 0;
    MEMORY[0x185309530](v217, 8);
    uint64_t v61 = v217[0];
    type metadata accessor for AttributedString.Guts();
    uint64_t v62 = swift_allocObject();
    if (BigString.isEmpty.getter())
    {
      long long v63 = v236;
      *(_OWORD *)(v62 + 16) = v235;
      *(_OWORD *)(v62 + 32) = v63;
      *(_OWORD *)(v62 + 48) = v237;
      *(void *)(v62 + 64) = 0;
      *(void *)(v62 + 72) = 0;
      *(void *)(v62 + 80) = 0;
      *(void *)(v62 + 88) = v61;
      *(void *)a4 = v62;
      swift_release();
      specialized AttributedSubstring.subscript.setter(0, 1, 0);
      goto LABEL_29;
    }
    __break(1u);
LABEL_57:
    swift_once();
LABEL_26:
    long long v92 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    long long v93 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v93);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v92, (uint64_t *)&v235);
    os_unfair_lock_unlock(v93);
    swift_release();
    uint64_t v60 = v235;
    uint64_t v227 = v235;
    BigString.init()();
    v217[0] = 0;
    MEMORY[0x185309530](v217, 8);
    uint64_t v94 = v217[0];
    type metadata accessor for AttributedString.Guts();
    uint64_t v95 = swift_allocObject();
    if (BigString.isEmpty.getter())
    {
      long long v96 = v236;
      *(_OWORD *)(v95 + 16) = v235;
      *(_OWORD *)(v95 + 32) = v96;
      *(_OWORD *)(v95 + 48) = v237;
      *(void *)(v95 + 64) = 0;
      *(void *)(v95 + 72) = 0;
      *(void *)(v95 + 80) = 0;
      *(void *)(v95 + 88) = v94;
      *(void *)a4 = v95;
      swift_release();
      long long v97 = specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:);
      uint64_t v98 = (void (*)(uint64_t, uint64_t, uint64_t))specialized AttributedString._InternalRunsSlice.updateEach(with:);
LABEL_28:
      specialized AttributedSubstring.subscript.setter(0, 1, (uint64_t (*)(uint64_t, long long *))v97, v98);
      goto LABEL_29;
    }
    __break(1u);
LABEL_59:
    swift_once();
LABEL_36:
    long long v128 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    uint64_t v129 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v129);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v128, (uint64_t *)&v235);
    os_unfair_lock_unlock(v129);
    swift_release();
    uint64_t v60 = v235;
    uint64_t v227 = v235;
    BigString.init()();
    v217[0] = 0;
    MEMORY[0x185309530](v217, 8);
    uint64_t v130 = v217[0];
    type metadata accessor for AttributedString.Guts();
    uint64_t v131 = swift_allocObject();
    if (BigString.isEmpty.getter())
    {
      long long v132 = v236;
      *(_OWORD *)(v131 + 16) = v235;
      *(_OWORD *)(v131 + 32) = v132;
      *(_OWORD *)(v131 + 48) = v237;
      *(void *)(v131 + 64) = 0;
      *(void *)(v131 + 72) = 0;
      *(void *)(v131 + 80) = 0;
      *(void *)(v131 + 88) = v130;
      *(void *)a4 = v131;
      swift_release();
      long long v97 = specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:);
      uint64_t v98 = (void (*)(uint64_t, uint64_t, uint64_t))specialized AttributedString._InternalRunsSlice.updateEach(with:);
      goto LABEL_28;
    }
    __break(1u);
LABEL_61:
    swift_once();
LABEL_45:
    uint64_t v166 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    uint64_t v167 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v167);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v166, (uint64_t *)&v235);
    os_unfair_lock_unlock(v167);
    swift_release();
    uint64_t v60 = v235;
    uint64_t v227 = v235;
    BigString.init()();
    v217[0] = 0;
    MEMORY[0x185309530](v217, 8);
    uint64_t v168 = v217[0];
    type metadata accessor for AttributedString.Guts();
    uint64_t v169 = swift_allocObject();
    if (BigString.isEmpty.getter())
    {
      long long v170 = v236;
      *(_OWORD *)(v169 + 16) = v235;
      *(_OWORD *)(v169 + 32) = v170;
      *(_OWORD *)(v169 + 48) = v237;
      *(void *)(v169 + 64) = 0;
      *(void *)(v169 + 72) = 0;
      *(void *)(v169 + 80) = 0;
      *(void *)(v169 + 88) = v168;
      *(void *)a4 = v169;
      swift_release();
      long long v97 = specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:);
      uint64_t v98 = (void (*)(uint64_t, uint64_t, uint64_t))specialized AttributedString._InternalRunsSlice.updateEach(with:);
      goto LABEL_28;
    }
    __break(1u);
LABEL_63:
    swift_once();
LABEL_54:
    uint64_t v204 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    uint64_t v205 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v205);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v204, (uint64_t *)&v235);
    os_unfair_lock_unlock(v205);
    swift_release();
    uint64_t v60 = v235;
    uint64_t v227 = v235;
    BigString.init()();
    v217[0] = 0;
    MEMORY[0x185309530](v217, 8);
    uint64_t v206 = v217[0];
    type metadata accessor for AttributedString.Guts();
    uint64_t v207 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0)
    {
      __break(1u);
      goto LABEL_65;
    }
    long long v208 = v236;
    *(_OWORD *)(v207 + 16) = v235;
    *(_OWORD *)(v207 + 32) = v208;
    *(_OWORD *)(v207 + 48) = v237;
    *(void *)(v207 + 64) = 0;
    *(void *)(v207 + 72) = 0;
    *(void *)(v207 + 80) = 0;
    *(void *)(v207 + 88) = v206;
    *(void *)a4 = v207;
    swift_release();
    specialized AttributedSubstring.subscript.setter(1);
LABEL_29:
    if (v227 == v60)
    {
      *(void *)a4 = v218;
      return swift_release();
    }
LABEL_65:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  id v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflectionAgreementConcept");
  uint64_t v22 = v21;
  if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v22 == v23)
  {
    swift_bridgeObjectRelease_n();
LABEL_23:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      long long v64 = *(void **)a4;
      long long v65 = *(_OWORD *)(*(void *)a4 + 16);
      long long v66 = *(_OWORD *)(*(void *)a4 + 48);
      long long v256 = *(_OWORD *)(*(void *)a4 + 32);
      long long v257 = v66;
      long long v255 = v65;
      uint64_t v67 = v64[8];
      uint64_t v210 = v64[9];
      uint64_t v68 = v64[10];
      uint64_t v69 = v64[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v255);
      swift_unknownObjectRetain();
      *(void *)a4 = AttributedString.Guts.init(string:runs:)(&v255, v67, v210, v68, v69);
      swift_release();
    }
    long long v70 = *(_OWORD **)a4;
    long long v71 = *(_OWORD *)(*(void *)a4 + 16);
    long long v72 = *(_OWORD *)(*(void *)a4 + 48);
    long long v253 = *(_OWORD *)(*(void *)a4 + 32);
    long long v254 = v72;
    long long v252 = v71;
    swift_retain();
    outlined retain of Locale((uint64_t)&v252);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v252);
    long long v73 = v70[1];
    long long v74 = v70[3];
    long long v250 = v70[2];
    long long v251 = v74;
    long long v249 = v73;
    long long v75 = v70[1];
    long long v259 = v70[2];
    long long v260 = v74;
    long long v258 = v75;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v258, (uint64_t)v261);
    outlined retain of Locale((uint64_t)v261);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v249);
    swift_release();
    long long v76 = *(_OWORD **)a4;
    uint64_t v238 = v214;
    uint64_t v239 = v215;
    uint64_t v240 = v216;
    uint64_t v241 = v9;
    uint64_t v242 = v10;
    uint64_t v243 = v11;
    uint64_t v244 = v13;
    uint64_t v245 = v12;
    long long v77 = v76[2];
    long long v246 = v76[1];
    long long v247 = v77;
    long long v248 = v76[3];
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v228);
    uint64_t v78 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v80 = v79;
    uint64_t v82 = v81;
    uint64_t v84 = v83;
    uint64_t v85 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v87 = v86;
    uint64_t v89 = v88;
    uint64_t v91 = v90;
    outlined release of Locale((uint64_t)v229);
    swift_release();
    uint64_t v218 = v76;
    uint64_t v219 = v78;
    uint64_t v220 = v80;
    uint64_t v221 = v82;
    uint64_t v222 = v84;
    uint64_t v223 = v85;
    uint64_t v224 = v87;
    uint64_t v225 = v89;
    uint64_t v226 = v91;
    if (one-time initialization token for currentIdentity == -1) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }
  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v25) {
    goto LABEL_23;
  }
  id v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflectionAgreementArgument");
  uint64_t v28 = v27;
  if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v28 == v29)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_33;
  }
  char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v99)
  {
LABEL_33:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v100 = *(void **)a4;
      long long v101 = *(_OWORD *)(*(void *)a4 + 16);
      long long v102 = *(_OWORD *)(*(void *)a4 + 48);
      long long v256 = *(_OWORD *)(*(void *)a4 + 32);
      long long v257 = v102;
      long long v255 = v101;
      uint64_t v103 = v100[8];
      uint64_t v211 = v100[9];
      uint64_t v104 = v100[10];
      uint64_t v105 = v100[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v255);
      swift_unknownObjectRetain();
      *(void *)a4 = AttributedString.Guts.init(string:runs:)(&v255, v103, v211, v104, v105);
      swift_release();
    }
    uint64_t v106 = *(_OWORD **)a4;
    long long v107 = *(_OWORD *)(*(void *)a4 + 16);
    long long v108 = *(_OWORD *)(*(void *)a4 + 48);
    long long v253 = *(_OWORD *)(*(void *)a4 + 32);
    long long v254 = v108;
    long long v252 = v107;
    swift_retain();
    outlined retain of Locale((uint64_t)&v252);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v252);
    long long v109 = v106[1];
    long long v110 = v106[3];
    long long v250 = v106[2];
    long long v251 = v110;
    long long v249 = v109;
    long long v111 = v106[1];
    long long v259 = v106[2];
    long long v260 = v110;
    long long v258 = v111;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v258, (uint64_t)v261);
    outlined retain of Locale((uint64_t)v261);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v249);
    swift_release();
    long long v112 = *(_OWORD **)a4;
    uint64_t v238 = v214;
    uint64_t v239 = v215;
    uint64_t v240 = v216;
    uint64_t v241 = v9;
    uint64_t v242 = v10;
    uint64_t v243 = v11;
    uint64_t v244 = v13;
    uint64_t v245 = v12;
    long long v113 = v112[2];
    long long v246 = v112[1];
    long long v247 = v113;
    long long v248 = v112[3];
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v228);
    uint64_t v114 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v116 = v115;
    uint64_t v118 = v117;
    uint64_t v120 = v119;
    uint64_t v121 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v123 = v122;
    uint64_t v125 = v124;
    uint64_t v127 = v126;
    outlined release of Locale((uint64_t)v229);
    swift_release();
    uint64_t v218 = v112;
    uint64_t v219 = v114;
    uint64_t v220 = v116;
    uint64_t v221 = v118;
    uint64_t v222 = v120;
    uint64_t v223 = v121;
    uint64_t v224 = v123;
    uint64_t v225 = v125;
    uint64_t v226 = v127;
    if (one-time initialization token for currentIdentity == -1) {
      goto LABEL_36;
    }
    goto LABEL_59;
  }
  id v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflectionReferentConcept");
  uint64_t v135 = v134;
  if (v133 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v135 == v136)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_42;
  }
  char v137 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v137)
  {
LABEL_42:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v138 = *(void **)a4;
      long long v139 = *(_OWORD *)(*(void *)a4 + 16);
      long long v140 = *(_OWORD *)(*(void *)a4 + 48);
      long long v256 = *(_OWORD *)(*(void *)a4 + 32);
      long long v257 = v140;
      long long v255 = v139;
      uint64_t v141 = v138[8];
      uint64_t v212 = v138[9];
      uint64_t v142 = v138[10];
      uint64_t v143 = v138[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v255);
      swift_unknownObjectRetain();
      *(void *)a4 = AttributedString.Guts.init(string:runs:)(&v255, v141, v212, v142, v143);
      swift_release();
    }
    uint64_t v144 = *(_OWORD **)a4;
    long long v145 = *(_OWORD *)(*(void *)a4 + 16);
    long long v146 = *(_OWORD *)(*(void *)a4 + 48);
    long long v253 = *(_OWORD *)(*(void *)a4 + 32);
    long long v254 = v146;
    long long v252 = v145;
    swift_retain();
    outlined retain of Locale((uint64_t)&v252);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v252);
    long long v147 = v144[1];
    long long v148 = v144[3];
    long long v250 = v144[2];
    long long v251 = v148;
    long long v249 = v147;
    long long v149 = v144[1];
    long long v259 = v144[2];
    long long v260 = v148;
    long long v258 = v149;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v258, (uint64_t)v261);
    outlined retain of Locale((uint64_t)v261);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v249);
    swift_release();
    uint64_t v150 = *(_OWORD **)a4;
    uint64_t v238 = v214;
    uint64_t v239 = v215;
    uint64_t v240 = v216;
    uint64_t v241 = v9;
    uint64_t v242 = v10;
    uint64_t v243 = v11;
    uint64_t v244 = v13;
    uint64_t v245 = v12;
    long long v151 = v150[2];
    long long v246 = v150[1];
    long long v247 = v151;
    long long v248 = v150[3];
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v228);
    uint64_t v152 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v154 = v153;
    uint64_t v156 = v155;
    uint64_t v158 = v157;
    uint64_t v159 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v161 = v160;
    uint64_t v163 = v162;
    uint64_t v165 = v164;
    outlined release of Locale((uint64_t)v229);
    swift_release();
    uint64_t v218 = v150;
    uint64_t v219 = v152;
    uint64_t v220 = v154;
    uint64_t v221 = v156;
    uint64_t v222 = v158;
    uint64_t v223 = v159;
    uint64_t v224 = v161;
    uint64_t v225 = v163;
    uint64_t v226 = v165;
    if (one-time initialization token for currentIdentity == -1) {
      goto LABEL_45;
    }
    goto LABEL_61;
  }
  id v171 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedNumberFormat");
  uint64_t v173 = v172;
  if (v171 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v173 == v174)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_51;
  }
  char v175 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v175)
  {
LABEL_51:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v176 = *(void **)a4;
      long long v177 = *(_OWORD *)(*(void *)a4 + 16);
      long long v178 = *(_OWORD *)(*(void *)a4 + 48);
      long long v256 = *(_OWORD *)(*(void *)a4 + 32);
      long long v257 = v178;
      long long v255 = v177;
      uint64_t v179 = v176[8];
      uint64_t v213 = v176[9];
      uint64_t v180 = v176[10];
      uint64_t v181 = v176[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v255);
      swift_unknownObjectRetain();
      *(void *)a4 = AttributedString.Guts.init(string:runs:)(&v255, v179, v213, v180, v181);
      swift_release();
    }
    uint64_t v182 = *(_OWORD **)a4;
    long long v183 = *(_OWORD *)(*(void *)a4 + 16);
    long long v184 = *(_OWORD *)(*(void *)a4 + 48);
    long long v253 = *(_OWORD *)(*(void *)a4 + 32);
    long long v254 = v184;
    long long v252 = v183;
    swift_retain();
    outlined retain of Locale((uint64_t)&v252);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v252);
    long long v185 = v182[1];
    long long v186 = v182[3];
    long long v250 = v182[2];
    long long v251 = v186;
    long long v249 = v185;
    long long v187 = v182[1];
    long long v259 = v182[2];
    long long v260 = v186;
    long long v258 = v187;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v258, (uint64_t)v261);
    outlined retain of Locale((uint64_t)v261);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v249);
    swift_release();
    double v188 = *(_OWORD **)a4;
    uint64_t v238 = v214;
    uint64_t v239 = v215;
    uint64_t v240 = v216;
    uint64_t v241 = v9;
    uint64_t v242 = v10;
    uint64_t v243 = v11;
    uint64_t v244 = v13;
    uint64_t v245 = v12;
    long long v189 = v188[2];
    long long v246 = v188[1];
    long long v247 = v189;
    long long v248 = v188[3];
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v228);
    uint64_t v190 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v192 = v191;
    uint64_t v194 = v193;
    uint64_t v196 = v195;
    uint64_t v197 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v199 = v198;
    uint64_t v201 = v200;
    uint64_t v203 = v202;
    outlined release of Locale((uint64_t)v229);
    swift_release();
    uint64_t v218 = v188;
    uint64_t v219 = v190;
    uint64_t v220 = v192;
    uint64_t v221 = v194;
    uint64_t v222 = v196;
    uint64_t v223 = v197;
    uint64_t v224 = v199;
    uint64_t v225 = v201;
    uint64_t v226 = v203;
    if (one-time initialization token for currentIdentity == -1) {
      goto LABEL_54;
    }
    goto LABEL_63;
  }
  return result;
}

uint64_t specialized AttributedSubstring.subscript.setter(char a1)
{
  uint64_t v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v4 = *(void **)v1;
    long long v5 = *(_OWORD *)(*(void *)v1 + 16);
    long long v6 = *(_OWORD *)(*(void *)v1 + 48);
    v26[1] = *(_OWORD *)(*(void *)v1 + 32);
    v26[2] = v6;
    v26[0] = v5;
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    uint64_t v9 = v4[10];
    uint64_t v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v26);
    swift_unknownObjectRetain();
    *(void *)uint64_t v2 = AttributedString.Guts.init(string:runs:)(v26, v7, v8, v9, v10);
    swift_release();
  }
  if (a1 != 2) {
    return specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(a1 & 1);
  }
  uint64_t v11 = *(_OWORD **)v2;
  long long v12 = *(_OWORD *)(*(void *)v2 + 32);
  long long v20 = *(_OWORD *)(*(void *)v2 + 16);
  long long v21 = v12;
  long long v22 = v11[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v18);
  long long v13 = v11[2];
  long long v23 = v11[1];
  long long v24 = v13;
  long long v25 = v11[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v19);
  uint64_t v14 = BigString.Index.utf8Offset.getter();
  uint64_t v15 = BigString.Index.utf8Offset.getter();
  uint64_t v16 = (void *)swift_retain();
  specialized AttributedString._InternalRunsSlice.updateEach(with:)(v16, v14, v15);
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  long long v12;
  long long v13;
  long long v15;
  long long v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  unsigned char v21[48];
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  _OWORD v29[4];

  uint64_t v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v4 = *(void **)v1;
    long long v5 = *(_OWORD *)(*(void *)v1 + 16);
    long long v6 = *(_OWORD *)(*(void *)v1 + 48);
    v29[1] = *(_OWORD *)(*(void *)v1 + 32);
    _OWORD v29[2] = v6;
    v29[0] = v5;
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    uint64_t v9 = v4[10];
    uint64_t v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v29);
    swift_unknownObjectRetain();
    *(void *)uint64_t v2 = AttributedString.Guts.init(string:runs:)(v29, v7, v8, v9, v10);
    swift_release();
  }
  uint64_t v11 = *(_OWORD **)v2;
  if (a1)
  {
    uint64_t v15 = v11[2];
    long long v22 = v11[1];
    long long v23 = v15;
    long long v24 = v11[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)&v20);
    uint64_t v16 = v11[2];
    id v26 = v11[1];
    uint64_t v27 = v16;
    uint64_t v28 = v11[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v21);
    uint64_t v17 = BigString.Index.utf8Offset.getter();
    uint64_t v18 = (void *)BigString.Index.utf8Offset.getter();
    char v19 = (void *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v19, v17, v18);
    return swift_release();
  }
  else
  {
    long long v12 = *(_OWORD *)(v2 + 24);
    long long v22 = *(_OWORD *)(v2 + 8);
    long long v23 = v12;
    long long v13 = *(_OWORD *)(v2 + 56);
    long long v24 = *(_OWORD *)(v2 + 40);
    long long v25 = v13;
    return specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)();
  }
}