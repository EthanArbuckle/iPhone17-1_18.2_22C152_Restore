unint64_t instantiation function for generic protocol witness table for AttributedSubstring(uint64_t a1)
{
  unint64_t result;

  *(void *)(a1 + 16) = lazy protocol witness table accessor for type AttributedSubstring and conformance AttributedSubstring();
  result = lazy protocol witness table accessor for type AttributedSubstring and conformance AttributedSubstring();
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedSubstring and conformance AttributedSubstring()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring;
  if (!lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring;
  if (!lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring;
  if (!lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in ICULegacyNumberFormatter.Signature()
{
  return lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType(&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.Signature and conformance ICULegacyNumberFormatter.Signature, (void (*)(uint64_t))type metadata accessor for ICULegacyNumberFormatter.Signature);
}

uint64_t lazy protocol witness table accessor for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t _NSProcessInfoGetThermalState()
{
  if (_NSProcessInfoGetThermalState_once != -1) {
    dispatch_once(&_NSProcessInfoGetThermalState_once, &__block_literal_global_155);
  }
  return atomic_load(&_NSProcessInfoGetThermalState_currentState);
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  uint64_t v1 = v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return (NSNumber)objc_msgSend(v2, sel_initWithUnsignedLongLong_, v1);
}

uint64_t type metadata completion function for NSTimer.TimerPublisher.Inner()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for _XMLPlistEncodingFormat.Reference.Box()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

double one-time initialization function for paragraphSeparators()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[UInt8]>);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1821037E0;
  *(void *)(v0 + 32) = &outlined read-only object #0 of one-time initialization function for paragraphSeparators;
  static String.paragraphSeparators = v0;
  return result;
}

id _BridgedStoredNSError.errorCode.getter(uint64_t a1, uint64_t a2)
{
  id v2 = (void *)(*(uint64_t (**)(void))(a2 + 64))();
  id v3 = objc_msgSend(v2, sel_code);

  return v3;
}

unint64_t instantiation function for generic protocol witness table for Date.ISO8601FormatStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle();
  a1[2] = lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle();
  unint64_t result = lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ISO8601FormatStyle and conformance Date.ISO8601FormatStyle);
  }
  return result;
}

void specialized NSDecimal.init(_:)(double a1)
{
  if ((~*(void *)&a1 & 0x7FF0000000000000) != 0)
  {
    if (a1 == 0.0)
    {
      memset(v17, 0, 20);
      return;
    }
    double v3 = -a1;
    if (a1 >= 0.0) {
      double v3 = a1;
    }
    memset(v17, 0, 20);
    unsigned __int8 v4 = 0;
    if (v3 < 1.84467441e19)
    {
      while (1)
      {
        double v3 = v3 * 10.0;
        --v4;
        if (v3 >= 1.84467441e19) {
          break;
        }
        if (v4 == 128)
        {
LABEL_18:
          long long v16 = 0uLL;
          _So9NSDecimala__exponent_setter(0, &v15);
          _So9NSDecimala__length_setter(0, &v15);
          _So9NSDecimala__isNegative_setter(1, &v15);
          _So9NSDecimala__isCompact_setter_0(0, &v15);
          _So9NSDecimala__reserved_setter(&v15);
          int v1 = HIDWORD(v16);
          uint64_t v2 = *(void *)((char *)&v16 + 4);
          goto LABEL_4;
        }
      }
    }
    if (v3 >= 1.84467441e19)
    {
      while (1)
      {
        double v3 = v3 / 10.0;
        ++v4;
        if (v3 < 1.84467441e19) {
          break;
        }
        if (v4 == 127) {
          goto LABEL_18;
        }
      }
    }
    if (v3 <= 1.84467441e19)
    {
      if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
      {
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      if (v3 <= -1.0)
      {
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      if (v3 >= 1.84467441e19)
      {
LABEL_41:
        __break(1u);
        return;
      }
      unint64_t v5 = (unint64_t)v3;
      if (!(unint64_t)v3)
      {
        uint64_t v9 = 0;
LABEL_35:
        BOOL v14 = a1 < 0.0;
        _So9NSDecimala__length_setter(v9, v17);
        _So9NSDecimala__isNegative_setter(v14, v17);
        _So9NSDecimala__isCompact_setter_0(0, v17);
        _So9NSDecimala__exponent_setter((char)v4, v17);
        NSDecimal.compact()();
        return;
      }
    }
    else
    {
      unint64_t v5 = -2048;
    }
    __int16 v6 = 0;
    __int16 v7 = 0;
    __int16 v8 = 0;
    LODWORD(v9) = 0;
    __int16 v10 = WORD1(v17[1]);
    __int16 v11 = v17[1];
    __int16 v12 = HIWORD(v17[0]);
    __int16 v13 = WORD2(v17[0]);
    while (2)
    {
      switch((int)v9)
      {
        case 1:
          __int16 v12 = v5;
          goto LABEL_25;
        case 2:
          __int16 v11 = v5;
          goto LABEL_25;
        case 3:
          __int16 v10 = v5;
          goto LABEL_25;
        case 4:
          __int16 v6 = v5;
          goto LABEL_25;
        case 5:
          __int16 v7 = v5;
          goto LABEL_25;
        case 6:
          __int16 v8 = v5;
          goto LABEL_25;
        case 7:
          WORD1(v17[1]) = v10;
          LOWORD(v17[1]) = v11;
          HIWORD(v17[0]) = v12;
          uint64_t v9 = 8;
          goto LABEL_34;
        default:
          __int16 v13 = v5;
LABEL_25:
          uint64_t v9 = (v9 + 1);
          v5 >>= 16;
          if (v5) {
            continue;
          }
          WORD1(v17[1]) = v10;
          LOWORD(v17[1]) = v11;
          HIWORD(v17[0]) = v12;
LABEL_34:
          WORD2(v17[0]) = v13;
          WORD1(v17[2]) = v5;
          LOWORD(v17[2]) = v8;
          HIWORD(v17[1]) = v7;
          WORD2(v17[1]) = v6;
          break;
      }
      goto LABEL_35;
    }
  }
  if ((*(void *)&a1 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    __break(1u);
    goto LABEL_39;
  }
  *(_OWORD *)((char *)v17 + 4) = 0uLL;
  _So9NSDecimala__exponent_setter(0, v17);
  _So9NSDecimala__length_setter(0, v17);
  _So9NSDecimala__isNegative_setter(1, v17);
  _So9NSDecimala__isCompact_setter_0(0, v17);
  _So9NSDecimala__reserved_setter(v17);
  int v1 = v17[2];
  uint64_t v2 = v17[1];
LABEL_4:
  v17[1] = v2;
  LODWORD(v17[2]) = v1;
}

uint64_t _NSDecimalSubtract(_:_:_:_:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  v152[3] = *MEMORY[0x1E4F143B8];
  int v4 = *a2;
  __int16 v112 = *((_WORD *)a2 + 2);
  __int16 v114 = *((_WORD *)a2 + 3);
  unsigned __int16 v116 = *((_WORD *)a2 + 4);
  __int16 v118 = *((_WORD *)a2 + 5);
  __int16 v120 = *((_WORD *)a2 + 6);
  unsigned __int16 v122 = *((_WORD *)a2 + 8);
  unsigned __int16 v124 = *((_WORD *)a2 + 7);
  unsigned __int16 v126 = *((_WORD *)a2 + 9);
  LODWORD(v5) = *(_DWORD *)a3;
  LOWORD(v6) = *(_WORD *)(a3 + 4);
  LOWORD(v7) = *(_WORD *)(a3 + 6);
  unsigned __int16 v8 = *(_WORD *)(a3 + 8);
  LOWORD(v9) = *(_WORD *)(a3 + 10);
  LOWORD(v10) = *(_WORD *)(a3 + 12);
  LOWORD(v11) = *(_WORD *)(a3 + 14);
  LOWORD(v12) = *(_WORD *)(a3 + 16);
  unsigned __int16 v13 = *(_WORD *)(a3 + 18);
  LODWORD(v152[0]) = v5;
  WORD2(v152[0]) = v6;
  HIWORD(v152[0]) = v7;
  LOWORD(v152[1]) = v8;
  WORD1(v152[1]) = v9;
  WORD2(v152[1]) = v10;
  HIWORD(v152[1]) = v11;
  LOWORD(v152[2]) = v12;
  WORD1(v152[2]) = v13;
  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  unsigned __int16 v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  unsigned __int16 v149 = v11;
  unsigned __int16 v150 = v12;
  unsigned __int16 v151 = v13;
  if (_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v5;
    WORD2(v146) = v6;
    HIWORD(v146) = v7;
    unsigned __int16 v147 = v8;
    LOWORD(v148) = v9;
    HIWORD(v148) = v10;
    unsigned __int16 v149 = v11;
    unsigned __int16 v150 = v12;
    unsigned __int16 v151 = v13;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v146);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, v152);
    LODWORD(v5) = v152[0];
    LOWORD(v6) = WORD2(v152[0]);
    LOWORD(v7) = HIWORD(v152[0]);
    unsigned __int16 v8 = v152[1];
    LOWORD(v9) = WORD1(v152[1]);
    LOWORD(v10) = WORD2(v152[1]);
    LOWORD(v11) = HIWORD(v152[1]);
    LOWORD(v12) = v152[2];
    unsigned __int16 v13 = WORD1(v152[2]);
  }
  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  unsigned __int16 v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  unsigned __int16 v149 = v124;
  unsigned __int16 v150 = v122;
  unsigned __int16 v151 = v126;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v4;
    WORD2(v146) = v112;
    HIWORD(v146) = v114;
    unsigned __int16 v147 = v116;
    LOWORD(v148) = v118;
    HIWORD(v148) = v120;
    unsigned __int16 v149 = v124;
    unsigned __int16 v150 = v122;
    unsigned __int16 v151 = v126;
    if (_So9NSDecimala__isNegative_getter(&v146)) {
      goto LABEL_19;
    }
  }
  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  unsigned __int16 v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  unsigned __int16 v149 = v11;
  unsigned __int16 v150 = v12;
  unsigned __int16 v151 = v13;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v146) = v5;
    WORD2(v146) = v6;
    HIWORD(v146) = v7;
    unsigned __int16 v147 = v8;
    LOWORD(v148) = v9;
    HIWORD(v148) = v10;
    unsigned __int16 v149 = v11;
    unsigned __int16 v150 = v12;
    unsigned __int16 v151 = v13;
    if (_So9NSDecimala__isNegative_getter(&v146)) {
      goto LABEL_19;
    }
  }
  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  unsigned __int16 v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  unsigned __int16 v149 = v124;
  unsigned __int16 v150 = v122;
  unsigned __int16 v151 = v126;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    uint64_t v45 = a1;
    unsigned __int16 v18 = v8;
    unsigned __int16 v19 = v13;
LABEL_27:
    uint64_t v43 = 0;
    *(_DWORD *)uint64_t v45 = v5;
    *(_WORD *)(v45 + 4) = v6;
    *(_WORD *)(v45 + 6) = v7;
    *(_WORD *)(v45 + 8) = v18;
    *(_WORD *)(v45 + 10) = v9;
    *(_WORD *)(v45 + 12) = v10;
    *(_WORD *)(v45 + 14) = v11;
    *(_WORD *)(v45 + 16) = v12;
    *(_WORD *)(v45 + 18) = v19;
    return v43;
  }
  LODWORD(v146) = v5;
  WORD2(v146) = v6;
  HIWORD(v146) = v7;
  unsigned __int16 v147 = v8;
  LOWORD(v148) = v9;
  HIWORD(v148) = v10;
  unsigned __int16 v149 = v11;
  unsigned __int16 v150 = v12;
  unsigned __int16 v151 = v13;
  if (!_So9NSDecimala__length_getter(&v146))
  {
    LODWORD(v5) = v4;
    LOWORD(v6) = v112;
    LOWORD(v7) = v114;
    unsigned __int16 v18 = v116;
    LOWORD(v9) = v118;
    LOWORD(v10) = v120;
    LOWORD(v12) = v122;
    LOWORD(v11) = v124;
    unsigned __int16 v19 = v126;
    goto LABEL_26;
  }
  LODWORD(v146) = v4;
  WORD2(v146) = v112;
  HIWORD(v146) = v114;
  unsigned __int16 v147 = v116;
  LOWORD(v148) = v118;
  HIWORD(v148) = v120;
  unsigned __int16 v149 = v124;
  unsigned __int16 v150 = v122;
  unsigned __int16 v151 = v126;
  LODWORD(v140) = v5;
  WORD2(v140) = v6;
  HIWORD(v140) = v7;
  unsigned __int16 v141 = v8;
  LOWORD(v142) = v9;
  HIWORD(v142) = v10;
  unsigned __int16 v143 = v11;
  unsigned __int16 v144 = v12;
  unsigned __int16 v145 = v13;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v146, (uint64_t)&v140);
  uint64_t v15 = WORD2(v146);
  uint64_t v16 = HIWORD(v148);
  uint64_t v113 = v146;
  uint64_t v134 = v146;
  uint64_t v125 = v147;
  uint64_t v127 = HIWORD(v146);
  unsigned __int16 v135 = v147;
  uint64_t v119 = v149;
  uint64_t v121 = (unsigned __int16)v148;
  unsigned int v136 = v148;
  unsigned __int16 v137 = v149;
  int v117 = v150;
  unsigned __int16 v138 = v150;
  int v123 = v151;
  unsigned __int16 v139 = v151;
  int v17 = _So9NSDecimala__length_getter(&v134);
  uint64_t v5 = v140;
  uint64_t v6 = WORD2(v140);
  uint64_t v7 = HIWORD(v140);
  unsigned __int16 v18 = v141;
  uint64_t v9 = (unsigned __int16)v142;
  uint64_t v10 = HIWORD(v142);
  uint64_t v11 = v143;
  int v12 = v144;
  unsigned __int16 v19 = v145;
  if (!v17)
  {
LABEL_26:
    uint64_t v45 = a1;
    goto LABEL_27;
  }
  __int16 v115 = v16;
  uint64_t v134 = v140;
  unsigned __int16 v135 = v141;
  unsigned int v136 = v142;
  unsigned __int16 v137 = v143;
  unsigned __int16 v138 = v144;
  unsigned __int16 v139 = v145;
  int v108 = v145;
  uint64_t v107 = v141;
  if (!_So9NSDecimala__length_getter(&v134))
  {
    LODWORD(v5) = v113;
    LOWORD(v10) = v16;
    LOWORD(v6) = v15;
    LOWORD(v7) = v127;
    unsigned __int16 v18 = v125;
    LOWORD(v11) = v119;
    LOWORD(v9) = v121;
    LOWORD(v12) = v117;
    unsigned __int16 v19 = v123;
    goto LABEL_26;
  }
  LODWORD(v134) = v113;
  WORD2(v134) = v15;
  HIWORD(v134) = v127;
  unsigned __int16 v135 = v125;
  LOWORD(v136) = v121;
  HIWORD(v136) = v16;
  unsigned __int16 v137 = v119;
  unsigned __int16 v138 = v117;
  unsigned __int16 v139 = v123;
  *(_DWORD *)v129 = v113;
  *(_WORD *)&v129[4] = v15;
  *(_DWORD *)&v129[6] = __PAIR32__(v125, v127);
  unsigned int v130 = __PAIR32__(v16, v121);
  unsigned __int16 v131 = v119;
  unsigned __int16 v132 = v117;
  unsigned __int16 v133 = v123;
  int v104 = _So9NSDecimala__isNegative_getter(v129);
  *(_DWORD *)v129 = v5;
  __int16 v106 = v6;
  *(_WORD *)&v129[4] = v6;
  *(_WORD *)&v129[6] = v7;
  *(_WORD *)&v129[8] = v107;
  LOWORD(v130) = v9;
  HIWORD(v130) = v10;
  unsigned __int16 v131 = v11;
  unsigned __int16 v132 = v12;
  unsigned __int16 v133 = v108;
  if (v104 == _So9NSDecimala__isNegative_getter(v129))
  {
    *(_DWORD *)v129 = v113;
    *(_WORD *)&v129[4] = v15;
    *(_WORD *)&v129[6] = v127;
    *(_WORD *)&v129[8] = v125;
    LOWORD(v130) = v121;
    HIWORD(v130) = v16;
    unsigned __int16 v131 = v119;
    unsigned __int16 v132 = v117;
    unsigned __int16 v133 = v123;
    uint64_t v20 = _So9NSDecimala__isNegative_getter(v129);
    _So9NSDecimala__isNegative_setter(v20, &v134);
    NSDecimal.asVariableLengthInteger()(v113 | (v15 << 32) | (v127 << 48), v125 | (v121 << 16) | (v16 << 32) | (v119 << 48), v117 | (v123 << 16));
    uint64_t v22 = v21;
    NSDecimal.asVariableLengthInteger()(v5 | (v6 << 32) | (v7 << 48), v107 | (v9 << 16) | (v10 << 32) | (v11 << 48), v12 | (v108 << 16));
    uint64_t v25 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v22, v23, 9, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v26 = *(void *)(v25 + 16);
    if (v26 <= 8)
    {
LABEL_54:
      _So9NSDecimala__length_setter(v26, &v134);
      v82._rawValue = (void *)v25;
LABEL_146:
      NSDecimal.copyVariableLengthInteger(_:)(v82);
      if (v98)
      {
        v40 = v98;
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
      swift_bridgeObjectRelease();
      _So9NSDecimala__isCompact_setter(&v134);
      NSDecimal.compact()();
      LODWORD(v5) = v134;
      LOWORD(v6) = WORD2(v134);
      LOWORD(v7) = HIWORD(v134);
      unsigned __int16 v18 = v135;
      LOWORD(v9) = v136;
      LOWORD(v10) = HIWORD(v136);
      LOWORD(v11) = v137;
      LOWORD(v12) = v138;
      unsigned __int16 v19 = v139;
      goto LABEL_26;
    }
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v25, a4);
    uint64_t v28 = v27;
    uint64_t v128 = v29;
    swift_bridgeObjectRelease();
    int v30 = v134;
    __int16 v31 = WORD2(v134);
    __int16 v32 = HIWORD(v134);
    unsigned __int16 v33 = v135;
    __int16 v34 = v136;
    __int16 v35 = HIWORD(v136);
    unsigned __int16 v36 = v137;
    unsigned __int16 v37 = v138;
    unsigned __int16 v38 = v139;
    *(void *)v129 = v134;
    *(_WORD *)&v129[8] = v135;
    unsigned int v130 = v136;
    unsigned __int16 v131 = v137;
    unsigned __int16 v132 = v138;
    unsigned __int16 v133 = v139;
    int v39 = _So9NSDecimala__exponent_getter(v129);
    if (v28 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v28 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v39, v28))
        {
          if (v39 + (int)v28 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_19:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            v40 = (void *)swift_allocError();
            unsigned char *v41 = 0;
            swift_willThrow();
            goto LABEL_20;
          }
          *(_DWORD *)v129 = v30;
          *(_WORD *)&v129[4] = v31;
          *(_WORD *)&v129[6] = v32;
          *(_WORD *)&v129[8] = v33;
          LOWORD(v130) = v34;
          HIWORD(v130) = v35;
          unsigned __int16 v131 = v36;
          unsigned __int16 v132 = v37;
          unsigned __int16 v133 = v38;
          int v79 = _So9NSDecimala__exponent_getter(v129);
          BOOL v80 = __OFADD__(v79, v28);
          uint64_t v81 = (v79 + v28);
          if (!v80)
          {
            _So9NSDecimala__exponent_setter(v81, &v134);
            uint64_t v25 = v128;
            unint64_t v26 = *(void *)(v128 + 16);
            if (HIDWORD(v26)) {
              goto LABEL_162;
            }
            goto LABEL_54;
          }
          __break(1u);
          goto LABEL_160;
        }
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
      }
LABEL_155:
      __break(1u);
      goto LABEL_156;
    }
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
  __int16 v99 = v15;
  unint64_t v110 = v113 | (v15 << 32) | (v127 << 48);
  unint64_t v105 = v125 | (v121 << 16) | (v16 << 32) | (v119 << 48);
  unsigned int v103 = v117 | (v123 << 16);
  NSDecimal.asVariableLengthInteger()(v110, v105, v103);
  uint64_t v48 = v47;
  unint64_t v101 = v107 | (v9 << 16) | (v10 << 32) | (v11 << 48);
  unint64_t v102 = v5 | (v6 << 32) | (v7 << 48);
  unsigned int v100 = v12 | (v108 << 16);
  NSDecimal.asVariableLengthInteger()(v102, v101, v100);
  uint64_t v50 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v48, v49);
  swift_bridgeObjectRelease();
  uint64_t v28 = v50;
  swift_bridgeObjectRelease();
  __int16 v51 = v115;
  if (v50 == -1)
  {
    LOWORD(v125) = v12;
    LOWORD(v127) = v11;
    NSDecimal.asVariableLengthInteger()(v102, v101, v100);
    uint64_t v53 = v52;
    NSDecimal.asVariableLengthInteger()(v110, v105, v103);
    uint64_t v28 = v54;
    uint64_t v55 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    uint64_t v57 = v55;
    *(void *)(v55 + 32) = 0;
    v58 = (_WORD *)(v55 + 32);
    *(void *)(v55 + 16) = 8;
    *(void *)(v55 + 40) = 0;
    unint64_t v59 = *(void *)(v53 + 16);
    unint64_t v60 = *(void *)(v28 + 16);
    if (v60 >= v59) {
      uint64_t v61 = *(void *)(v53 + 16);
    }
    else {
      uint64_t v61 = *(void *)(v28 + 16);
    }
    if (v61)
    {
      unsigned int v62 = (*(unsigned __int16 *)(v53 + 32) | 0x10000) - *(unsigned __int16 *)(v28 + 32);
      int v63 = HIWORD(v62);
      _WORD *v58 = *(_WORD *)(v53 + 32) - *(_WORD *)(v28 + 32);
      uint64_t v64 = v61 - 1;
      if (v64)
      {
        unsigned int v62 = v63 + *(unsigned __int16 *)(v53 + 34) - *(unsigned __int16 *)(v28 + 34) + 0xFFFF;
        int v63 = HIWORD(v62);
        *(_WORD *)(v55 + 34) = v62;
        if (v64 == 1)
        {
          unint64_t v65 = 2;
        }
        else
        {
          unsigned int v56 = *(unsigned __int16 *)(v28 + 36);
          unsigned int v62 = v63 + *(unsigned __int16 *)(v53 + 36) - v56 + 0xFFFF;
          int v63 = HIWORD(v62);
          *(_WORD *)(v55 + 36) = v62;
          if (v64 == 2)
          {
            unint64_t v65 = 3;
          }
          else
          {
            unsigned int v62 = v63 + *(unsigned __int16 *)(v53 + 38) - *(unsigned __int16 *)(v28 + 38) + 0xFFFF;
            int v63 = HIWORD(v62);
            *(_WORD *)(v55 + 38) = v62;
            if (v64 == 3)
            {
              unint64_t v65 = 4;
            }
            else
            {
              unsigned int v56 = *(unsigned __int16 *)(v28 + 40);
              unsigned int v62 = v63 + *(unsigned __int16 *)(v53 + 40) - v56 + 0xFFFF;
              int v63 = HIWORD(v62);
              *(_WORD *)(v55 + 40) = v62;
              if (v64 == 4)
              {
                unint64_t v65 = 5;
              }
              else
              {
                unsigned int v62 = v63 + *(unsigned __int16 *)(v53 + 42) - *(unsigned __int16 *)(v28 + 42) + 0xFFFF;
                int v63 = HIWORD(v62);
                *(_WORD *)(v55 + 42) = v62;
                if (v64 == 5)
                {
                  unint64_t v65 = 6;
                }
                else
                {
                  unsigned int v56 = *(unsigned __int16 *)(v28 + 44);
                  unsigned int v62 = v63 + *(unsigned __int16 *)(v53 + 44) - v56 + 0xFFFF;
                  int v63 = HIWORD(v62);
                  *(_WORD *)(v55 + 44) = v62;
                  if (v64 == 6)
                  {
                    unint64_t v65 = 7;
                  }
                  else
                  {
                    int v85 = v63 + *(unsigned __int16 *)(v53 + 46) - *(unsigned __int16 *)(v28 + 46);
                    unsigned int v62 = v85 + 0xFFFF;
                    *(_WORD *)(v55 + 46) = v85 - 1;
                    if (v64 != 7)
                    {
LABEL_160:
                      __break(1u);
                      goto LABEL_161;
                    }
                    unsigned int v56 = v53;
                    int v63 = HIWORD(v62);
                    unint64_t v65 = 8;
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        unint64_t v65 = 1;
      }
      if (v65 >= v59) {
        goto LABEL_97;
      }
      if (!HIWORD(v62))
      {
        while (v65 < *(void *)(v55 + 16))
        {
          int v86 = *(unsigned __int16 *)(v53 + 32 + 2 * v65);
          unsigned int v56 = v86 + 0xFFFF;
          v58[v65] = v86 - 1;
          if (v59 - 1 == v65) {
            goto LABEL_104;
          }
          ++v65;
          if (v86) {
            goto LABEL_90;
          }
        }
        goto LABEL_152;
      }
    }
    else
    {
      if (!v59)
      {
        if (v60)
        {
          unint64_t v65 = 0;
          int v63 = 1;
          goto LABEL_98;
        }
        uint64_t v83 = 8;
        goto LABEL_107;
      }
      unint64_t v65 = 0;
    }
LABEL_90:
    uint64_t v74 = v53 + 32;
    if (v65 <= v59) {
      unint64_t v76 = v59;
    }
    else {
      unint64_t v76 = v65;
    }
    while (v76 != v65)
    {
      if (v65 >= *(void *)(v55 + 16)) {
        goto LABEL_114;
      }
      v58[v65] = *(_WORD *)(v74 + 2 * v65);
      if ((uint64_t)++v65 >= (uint64_t)v59)
      {
        int v63 = 1;
LABEL_97:
        if ((uint64_t)v65 < (uint64_t)v60)
        {
          while (1)
          {
LABEL_98:
            if (v65 >= v60) {
              goto LABEL_157;
            }
            unint64_t v59 = *(void *)(v55 + 16);
            if (v65 < v59) {
              break;
            }
LABEL_103:
            __break(1u);
LABEL_104:
            int v63 = HIWORD(v56);
            unint64_t v65 = v59;
            if ((uint64_t)v59 >= (uint64_t)v60) {
              goto LABEL_105;
            }
          }
          unsigned int v87 = v63 + (*(unsigned __int16 *)(v28 + 32 + 2 * v65) ^ 0xFFFF);
          --v60;
          unint64_t v59 = v28 + 34;
          while (1)
          {
            int v63 = HIWORD(v87);
            v58[v65] = v87;
            if (v60 == v65) {
              break;
            }
            unsigned int v87 = v63 + (*(unsigned __int16 *)(v59 + 2 * v65++) ^ 0xFFFF);
            if (v65 >= *(void *)(v55 + 16)) {
              goto LABEL_103;
            }
          }
        }
LABEL_105:
        if (!v63) {
          goto LABEL_112;
        }
        uint64_t v83 = *(void *)(v55 + 16);
        if (v83)
        {
LABEL_107:
          if (!v58[v83 - 1])
          {
            do
            {
              *(void *)(v55 + 16) = v83 - 1;
              if (v83 == 1) {
                break;
              }
            }
            while (!*(unsigned __int16 *)(v55 + 28 + 2 * v83--));
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v89 = *(void *)(v57 + 16);
        if (!HIDWORD(v89))
        {
          _So9NSDecimala__length_setter(v89, &v134);
          *(_DWORD *)v129 = v5;
          *(_WORD *)&v129[4] = v106;
          *(_WORD *)&v129[6] = v7;
          *(_WORD *)&v129[8] = v107;
          LOWORD(v130) = v9;
          HIWORD(v130) = v10;
          unsigned __int16 v131 = v127;
          unsigned __int16 v132 = v125;
          unsigned __int16 v133 = v108;
          goto LABEL_145;
        }
LABEL_162:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_163:
        type metadata accessor for NSComparisonResult(0);
        *(void *)v129 = v28;
        uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        return result;
      }
    }
    __break(1u);
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  if (!v50)
  {
    LODWORD(v5) = 0;
    LOWORD(v6) = 0;
    LOWORD(v7) = 0;
    unsigned __int16 v18 = 0;
    LOWORD(v9) = 0;
    LOWORD(v10) = 0;
    LOWORD(v11) = 0;
    LOWORD(v12) = 0;
    unsigned __int16 v19 = 0;
    goto LABEL_26;
  }
  if (v50 != 1) {
    goto LABEL_163;
  }
  NSDecimal.asVariableLengthInteger()(v110, v105, v103);
  uint64_t v28 = v66;
  NSDecimal.asVariableLengthInteger()(v102, v101, v100);
  uint64_t v7 = v67;
  uint64_t v68 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  uint64_t v57 = v68;
  *(void *)(v68 + 32) = 0;
  v58 = (_WORD *)(v68 + 32);
  *(void *)(v68 + 16) = 8;
  *(void *)(v68 + 40) = 0;
  unint64_t v59 = *(void *)(v28 + 16);
  unint64_t v60 = *(void *)(v7 + 16);
  if (v60 >= v59) {
    uint64_t v69 = *(void *)(v28 + 16);
  }
  else {
    uint64_t v69 = *(void *)(v7 + 16);
  }
  __int16 v70 = v125;
  unsigned __int16 v71 = v123;
  int v72 = v113;
  __int16 v73 = v121;
  if (v69)
  {
    uint64_t v74 = v28 + 32;
    unsigned int v75 = (*(unsigned __int16 *)(v28 + 32) | 0x10000) - *(unsigned __int16 *)(v7 + 32);
    LODWORD(v76) = HIWORD(v75);
    _WORD *v58 = *(_WORD *)(v28 + 32) - *(_WORD *)(v7 + 32);
    unint64_t v65 = v69 - 1;
    __int16 v77 = v127;
    if (!v65)
    {
      unint64_t v78 = 1;
      goto LABEL_118;
    }
    unsigned int v75 = v76 + *(unsigned __int16 *)(v28 + 34) - *(unsigned __int16 *)(v7 + 34) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 34) = v75;
    if (v65 == 1)
    {
      unint64_t v78 = 2;
      goto LABEL_118;
    }
    unsigned int v56 = *(unsigned __int16 *)(v7 + 36);
    unsigned int v75 = v76 + *(unsigned __int16 *)(v28 + 36) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 36) = v75;
    if (v65 == 2)
    {
      unint64_t v78 = 3;
      goto LABEL_118;
    }
    unsigned int v75 = v76 + *(unsigned __int16 *)(v28 + 38) - *(unsigned __int16 *)(v7 + 38) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 38) = v75;
    if (v65 == 3)
    {
      unint64_t v78 = 4;
      goto LABEL_118;
    }
    unsigned int v56 = *(unsigned __int16 *)(v7 + 40);
    unsigned int v75 = v76 + *(unsigned __int16 *)(v28 + 40) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 40) = v75;
    if (v65 == 4)
    {
      unint64_t v78 = 5;
      goto LABEL_118;
    }
    unsigned int v75 = v76 + *(unsigned __int16 *)(v28 + 42) - *(unsigned __int16 *)(v7 + 42) + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 42) = v75;
    if (v65 == 5)
    {
      unint64_t v78 = 6;
      goto LABEL_118;
    }
    unsigned int v56 = *(unsigned __int16 *)(v7 + 44);
    unsigned int v75 = v76 + *(unsigned __int16 *)(v28 + 44) - v56 + 0xFFFF;
    LODWORD(v76) = HIWORD(v75);
    *(_WORD *)(v68 + 44) = v75;
    if (v65 == 6)
    {
      unint64_t v78 = 7;
LABEL_117:
      __int16 v70 = v125;
      __int16 v77 = v127;
      unsigned __int16 v71 = v123;
      int v72 = v113;
      __int16 v51 = v115;
      __int16 v73 = v121;
LABEL_118:
      if (v78 >= v59) {
        goto LABEL_130;
      }
      if (!HIWORD(v75))
      {
        while (v78 < *(void *)(v57 + 16))
        {
          int v92 = *(unsigned __int16 *)(v74 + 2 * v78);
          unsigned int v56 = v92 + 0xFFFF;
          v58[v78] = v92 - 1;
          if (v59 - 1 == v78) {
            goto LABEL_137;
          }
          ++v78;
          if (v92) {
            goto LABEL_123;
          }
        }
        goto LABEL_153;
      }
      goto LABEL_123;
    }
LABEL_115:
    int v91 = v76 + *(unsigned __int16 *)(v28 + 46) - *(unsigned __int16 *)(v7 + 46);
    unsigned int v75 = v91 + 0xFFFF;
    *(_WORD *)(v57 + 46) = v91 - 1;
    if (v65 != 7)
    {
LABEL_161:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_162;
    }
    LODWORD(v76) = HIWORD(v75);
    unint64_t v78 = 8;
    goto LABEL_117;
  }
  __int16 v77 = v127;
  if (!v59)
  {
    if (v60)
    {
      unint64_t v78 = 0;
      LODWORD(v76) = 1;
      goto LABEL_131;
    }
    uint64_t v84 = 8;
LABEL_140:
    if (!v58[v84 - 1])
    {
      do
      {
        *(void *)(v57 + 16) = v84 - 1;
        if (v84 == 1) {
          break;
        }
      }
      while (!*(unsigned __int16 *)(v57 + 28 + 2 * v84--));
    }
LABEL_143:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v96 = *(void *)(v57 + 16);
    if (HIDWORD(v96)) {
      goto LABEL_162;
    }
    _So9NSDecimala__length_setter(v96, &v134);
    *(_DWORD *)v129 = v72;
    *(_WORD *)&v129[4] = v99;
    *(_WORD *)&v129[6] = v77;
    *(_WORD *)&v129[8] = v70;
    LOWORD(v130) = v73;
    HIWORD(v130) = v51;
    unsigned __int16 v131 = v119;
    unsigned __int16 v132 = v117;
    unsigned __int16 v133 = v71;
LABEL_145:
    uint64_t v97 = _So9NSDecimala__isNegative_getter(v129);
    _So9NSDecimala__isNegative_setter(v97, &v134);
    v82._rawValue = (void *)v57;
    goto LABEL_146;
  }
  unint64_t v78 = 0;
LABEL_123:
  if (v78 <= v59) {
    unint64_t v93 = v59;
  }
  else {
    unint64_t v93 = v78;
  }
  do
  {
    if (v93 == v78)
    {
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
    if (v78 >= *(void *)(v57 + 16)) {
      goto LABEL_151;
    }
    v58[v78] = *(_WORD *)(v28 + 32 + 2 * v78);
    ++v78;
  }
  while ((uint64_t)v78 < (uint64_t)v59);
  LODWORD(v76) = 1;
LABEL_130:
  if ((uint64_t)v78 < (uint64_t)v60)
  {
    while (1)
    {
LABEL_131:
      if (v78 >= v60) {
        goto LABEL_158;
      }
      unint64_t v59 = *(void *)(v57 + 16);
      if (v78 < v59) {
        break;
      }
LABEL_136:
      __break(1u);
LABEL_137:
      LODWORD(v76) = HIWORD(v56);
      unint64_t v78 = v59;
      if ((uint64_t)v59 >= (uint64_t)v60) {
        goto LABEL_138;
      }
    }
    unsigned int v94 = v76 + (*(unsigned __int16 *)(v7 + 32 + 2 * v78) ^ 0xFFFF);
    --v60;
    unint64_t v59 = v7 + 34;
    while (1)
    {
      LODWORD(v76) = HIWORD(v94);
      v58[v78] = v94;
      if (v60 == v78) {
        break;
      }
      unsigned int v94 = v76 + (*(unsigned __int16 *)(v59 + 2 * v78++) ^ 0xFFFF);
      if (v78 >= *(void *)(v57 + 16)) {
        goto LABEL_136;
      }
    }
  }
LABEL_138:
  if (v76)
  {
    uint64_t v84 = *(void *)(v57 + 16);
    if (v84) {
      goto LABEL_140;
    }
    goto LABEL_143;
  }
LABEL_112:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  v40 = (void *)swift_allocError();
  unsigned char *v90 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_20:
  v152[0] = v40;
  id v42 = v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast()) {
    uint64_t v43 = qword_18218CCE0[(char)v146];
  }
  else {
    uint64_t v43 = 0;
  }
  *(_OWORD *)((char *)v152 + 4) = 0uLL;
  _So9NSDecimala__exponent_setter(0, v152);
  _So9NSDecimala__length_setter(0, v152);
  _So9NSDecimala__isNegative_setter(1, v152);
  _So9NSDecimala__isCompact_setter(v152);
  _So9NSDecimala__reserved_setter(v152);
  long long v44 = *(_OWORD *)((char *)v152 + 4);
  *(_DWORD *)a1 = v152[0];
  *(_OWORD *)(a1 + 4) = v44;

  return v43;
}

uint64_t _So9NSDecimala__isNegative_setter(uint64_t result, _DWORD *a2)
{
  *a2 = *a2 & 0xFFFFEFFF | ((result & 1) << 12);
  return result;
}

_DWORD *_So9NSDecimala__isNegative_setter_0(_DWORD *result)
{
  *result |= 0x1000u;
  return result;
}

uint64_t specialized static NSDecimal._compare(lhs:rhs:)(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unsigned int v10 = a1;
  uint64_t v221 = *MEMORY[0x1E4F143B8];
  unint64_t v218 = a1;
  unint64_t v200 = HIDWORD(a1);
  unint64_t v203 = HIWORD(a1);
  unsigned __int16 v206 = a2;
  unint64_t v219 = a2;
  unint64_t v11 = a2 >> 16;
  unint64_t v12 = HIDWORD(a2);
  unint64_t v13 = HIWORD(a2);
  unsigned int v14 = HIWORD(a3);
  uint64_t v199 = HIDWORD(a4);
  unsigned int v220 = a3;
  int v15 = _So9NSDecimala__length_getter(&v218);
  unint64_t v16 = a4;
  __int16 v17 = a6;
  unsigned int v18 = HIWORD(a6);
  unint64_t v19 = HIDWORD(a5);
  unint64_t v20 = a5 >> 16;
  unint64_t v21 = HIWORD(v16);
  unint64_t v210 = HIWORD(v16);
  __int16 v196 = v14;
  if (!v15)
  {
    LODWORD(v218) = v10;
    WORD2(v218) = v200;
    HIWORD(v218) = v203;
    LOWORD(v219) = v206;
    WORD1(v219) = v11;
    WORD2(v219) = v12;
    HIWORD(v219) = v13;
    LOWORD(v220) = a3;
    HIWORD(v220) = v14;
    __int16 v39 = v17;
    int v191 = v16;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v218);
    LODWORD(v16) = v191;
    __int16 v17 = v39;
    unint64_t v20 = a5 >> 16;
    LOWORD(v21) = v210;
    unint64_t v19 = HIDWORD(a5);
    if (isNegative_getter)
    {
      LODWORD(v218) = v191;
      WORD2(v218) = v199;
      HIWORD(v218) = v210;
      unint64_t v219 = a5;
      LOWORD(v220) = v17;
      HIWORD(v220) = v18;
      __int16 v41 = v17;
      if (!_So9NSDecimala__length_getter(&v218))
      {
        LODWORD(v218) = v191;
        WORD2(v218) = v199;
        HIWORD(v218) = v210;
        unint64_t v219 = a5;
        LOWORD(v220) = v41;
        HIWORD(v220) = v18;
        if (_So9NSDecimala__isNegative_getter(&v218)) {
          return 0;
        }
      }
      return -1;
    }
  }
  unsigned __int16 v192 = v11;
  unsigned __int16 v193 = v12;
  __int16 v194 = v13;
  LODWORD(v195) = a3;
  LODWORD(v218) = v16;
  WORD2(v218) = v199;
  HIWORD(v218) = v21;
  LOWORD(v219) = a5;
  WORD1(v219) = v20;
  WORD2(v219) = v19;
  HIWORD(v219) = HIWORD(a5);
  LOWORD(v220) = v17;
  HIWORD(v220) = v18;
  __int16 v22 = v18;
  unint64_t v23 = HIWORD(a5);
  __int16 v24 = v19;
  __int16 v25 = v20;
  __int16 v26 = v17;
  unsigned int v27 = v16;
  if (!_So9NSDecimala__length_getter(&v218))
  {
    LODWORD(v218) = v27;
    WORD2(v218) = v199;
    HIWORD(v218) = v210;
    LOWORD(v219) = a5;
    WORD1(v219) = v25;
    WORD2(v219) = v24;
    HIWORD(v219) = HIWORD(a5);
    LOWORD(v220) = v26;
    HIWORD(v220) = v22;
    if (_So9NSDecimala__isNegative_getter(&v218)) {
      return 1;
    }
  }
  unsigned int v190 = v10;
  LODWORD(v218) = v10;
  WORD2(v218) = v200;
  HIWORD(v218) = v203;
  LOWORD(v219) = v206;
  WORD1(v219) = v11;
  WORD2(v219) = v193;
  HIWORD(v219) = v194;
  LOWORD(v220) = a3;
  HIWORD(v220) = v196;
  unsigned int v28 = _So9NSDecimala__isNegative_getter(&v218);
  LODWORD(v218) = v27;
  WORD2(v218) = v199;
  HIWORD(v218) = v210;
  LOWORD(v219) = a5;
  WORD1(v219) = v25;
  WORD2(v219) = v24;
  HIWORD(v219) = HIWORD(a5);
  LOWORD(v220) = v26;
  HIWORD(v220) = v22;
  if (_So9NSDecimala__isNegative_getter(&v218) < v28) {
    return -1;
  }
  LODWORD(v218) = v10;
  WORD2(v218) = v200;
  HIWORD(v218) = v203;
  LOWORD(v219) = v206;
  WORD1(v219) = v192;
  WORD2(v219) = v193;
  HIWORD(v219) = v194;
  LOWORD(v220) = a3;
  HIWORD(v220) = v196;
  unsigned int v29 = _So9NSDecimala__isNegative_getter(&v218);
  LODWORD(v218) = v27;
  WORD2(v218) = v199;
  HIWORD(v218) = v210;
  LOWORD(v219) = a5;
  WORD1(v219) = v25;
  WORD2(v219) = v24;
  HIWORD(v219) = HIWORD(a5);
  LOWORD(v220) = v26;
  HIWORD(v220) = v22;
  if (v29 < _So9NSDecimala__isNegative_getter(&v218)) {
    return 1;
  }
  LODWORD(v218) = v10;
  WORD2(v218) = v200;
  HIWORD(v218) = v203;
  LOWORD(v219) = v206;
  WORD1(v219) = v192;
  WORD2(v219) = v193;
  HIWORD(v219) = v194;
  LOWORD(v220) = a3;
  HIWORD(v220) = v196;
  if (!_So9NSDecimala__length_getter(&v218))
  {
    LODWORD(v218) = v27;
    WORD2(v218) = v199;
    HIWORD(v218) = v210;
    LOWORD(v219) = a5;
    WORD1(v219) = v25;
    WORD2(v219) = v24;
    HIWORD(v219) = HIWORD(a5);
    LOWORD(v220) = v26;
    HIWORD(v220) = v22;
    if (_So9NSDecimala__length_getter(&v218)) {
      return -1;
    }
    else {
      return 0;
    }
  }
  LODWORD(v218) = v27;
  WORD2(v218) = v199;
  HIWORD(v218) = v210;
  __int16 v189 = a5;
  LOWORD(v219) = a5;
  WORD1(v219) = v25;
  WORD2(v219) = v24;
  HIWORD(v219) = HIWORD(a5);
  LOWORD(v220) = v26;
  HIWORD(v220) = v22;
  if (!_So9NSDecimala__length_getter(&v218))
  {
    LODWORD(v218) = v10;
    WORD2(v218) = v200;
    HIWORD(v218) = v203;
    LOWORD(v219) = v206;
    WORD1(v219) = v192;
    WORD2(v219) = v193;
    HIWORD(v219) = v194;
    LOWORD(v220) = a3;
    HIWORD(v220) = v196;
    return _So9NSDecimala__length_getter(&v218) != 0;
  }
  LODWORD(v218) = v10;
  WORD2(v218) = v200;
  HIWORD(v218) = v203;
  LOWORD(v219) = v206;
  WORD1(v219) = v192;
  WORD2(v219) = v193;
  HIWORD(v219) = v194;
  LOWORD(v220) = a3;
  HIWORD(v220) = v196;
  LODWORD(v215) = v27;
  WORD2(v215) = v199;
  HIWORD(v215) = v210;
  LOWORD(v216) = a5;
  WORD1(v216) = v25;
  WORD2(v216) = v24;
  HIWORD(v216) = HIWORD(a5);
  LOWORD(v217) = v26;
  HIWORD(v217) = v22;
  *(_DWORD *)v214 = v10;
  *(_WORD *)&v214[4] = v200;
  *(_DWORD *)&v214[6] = __PAIR32__(v206, v203);
  *(_DWORD *)&v214[10] = __PAIR32__(v193, v192);
  *(_WORD *)&v214[14] = v194;
  *(_WORD *)&v214[16] = a3;
  *(_WORD *)&v214[18] = v196;
  int v30 = _So9NSDecimala__exponent_getter(v214);
  *(_DWORD *)v214 = v27;
  *(_WORD *)&v214[4] = v199;
  *(_WORD *)&v214[6] = v210;
  *(_WORD *)&v214[8] = v189;
  *(_WORD *)&v214[10] = v25;
  *(_WORD *)&v214[12] = v24;
  *(_WORD *)&v214[14] = v23;
  *(_WORD *)&v214[16] = v26;
  *(_WORD *)&v214[18] = v22;
  int v31 = _So9NSDecimala__exponent_getter(v214);
  int v32 = v30 - v31;
  if (v30 == v31) {
    goto LABEL_179;
  }
  uint64_t v33 = v32;
  if (v32 < 0)
  {
    unsigned int v38 = v27;
    __int16 v34 = (char *)&v215 + 4;
    uint64_t v33 = -v33;
    uint64_t v36 = (uint64_t)&v215;
    unsigned __int16 v37 = &v218;
    unsigned __int16 v35 = v199;
  }
  else
  {
    __int16 v34 = (char *)&v218 + 4;
    unsigned __int16 v35 = v200;
    uint64_t v36 = (uint64_t)&v218;
    unsigned __int16 v37 = &v215;
    unsigned int v38 = v190;
  }
  unint64_t v44 = v38 | ((unint64_t)v35 << 32) | ((unint64_t)*((unsigned __int16 *)v34 + 1) << 48);
  unint64_t v45 = *(void *)(v34 + 4);
  unsigned int v46 = *((_DWORD *)v34 + 3);
  NSDecimal.asVariableLengthInteger()(v44, v45, v46);
  uint64_t v48 = v47;
  if (!v33) {
    goto LABEL_80;
  }
  LODWORD(v201) = v46;
  unint64_t v204 = v45;
  unint64_t v207 = v44;
  v211 = v37;
  uint64_t v42 = specialized abs<A>(_:)(v33);
  uint64_t v49 = one-time initialization token for powerOfTen;
  swift_bridgeObjectRetain();
  if (v49 != -1) {
    goto LABEL_335;
  }
  while (1)
  {
    uint64_t v50 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
    rawValue = powerOfTen._rawValue;
    uint64_t v52 = *((void *)powerOfTen._rawValue + 2);
    if (v52 > v42) {
      break;
    }
    uint64_t v195 = v33;
    if (!v52) {
      goto LABEL_345;
    }
    uint64_t v33 = v52 - 1;
    uint64_t v54 = v48;
    while (1)
    {
      BOOL v59 = __OFSUB__(v42, v33);
      v42 -= v33;
      if (v59) {
        goto LABEL_333;
      }
      uint64_t v60 = v50[196];
      if ((unint64_t)v52 > *(void *)(v60 + 16)) {
        break;
      }
      uint64_t v61 = *(void *)(v54 + 16);
      if (v61 && (v58 = *(void *)(v60 + 8 * v33 + 32), (uint64_t v53 = *(char **)(v58 + 16)) != 0))
      {
        if (__OFADD__(v61, v53)) {
          goto LABEL_346;
        }
        uint64_t v197 = v48;
        uint64_t v199 = v36;
        if ((uint64_t)&v53[v61] >= 8) {
          uint64_t v57 = 8;
        }
        else {
          uint64_t v57 = (uint64_t)&v53[v61];
        }
        if (v57 < 0) {
          goto LABEL_390;
        }
        swift_bridgeObjectRetain();
        uint64_t v62 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v62 + 16) = v57;
        uint64_t v36 = v62 + 32;
        bzero((void *)(v62 + 32), 2 * v57);
        uint64_t v64 = 0;
        uint64_t v65 = v58 + 32;
        do
        {
          unsigned int v66 = 0;
          uint64_t v67 = 0;
          uint64_t v68 = v64++;
          do
          {
            uint64_t v71 = (uint64_t)&v68[v67];
            if (__OFADD__(v67, v68))
            {
              __break(1u);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_177;
            }
            if (v71 >= v57)
            {
              if (v66) {
                goto LABEL_77;
              }
              unsigned int v66 = *(unsigned __int16 *)(v65 + 2 * (void)v68);
              if (*(_WORD *)(v65 + 2 * (void)v68))
              {
                unsigned int v66 = *(unsigned __int16 *)(v54 + 2 * v67 + 32);
                if (*(_WORD *)(v54 + 2 * v67 + 32)) {
                  goto LABEL_77;
                }
              }
            }
            else
            {
              if (v71 < 0)
              {
                __break(1u);
LABEL_282:
                __break(1u);
LABEL_283:
                uint64_t v135 = v63;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_284;
              }
              if ((unint64_t)v71 >= *(void *)(v62 + 16)) {
                goto LABEL_282;
              }
              uint64_t v69 = 2 * v71;
              unsigned int v70 = v66
                  + *(unsigned __int16 *)(v36 + v69)
                  + *(unsigned __int16 *)(v54 + 2 * v67 + 32) * *(unsigned __int16 *)(v65 + 2 * (void)v68);
              unsigned int v66 = HIWORD(v70);
              *(_WORD *)(v36 + v69) = v70;
            }
            ++v67;
          }
          while (v61 != v67);
          if (v66)
          {
            BOOL v59 = __OFADD__(v61, v68);
            uint64_t v72 = (uint64_t)&v68[v61];
            if (v59) {
              goto LABEL_350;
            }
            if (v72 >= v57) {
              goto LABEL_77;
            }
            if (v72 < 0) {
              goto LABEL_351;
            }
            if ((unint64_t)v72 >= *(void *)(v62 + 16)) {
              goto LABEL_352;
            }
            *(_WORD *)(v36 + 2 * v72) = v66;
          }
        }
        while (v64 != v53);
        uint64_t v73 = *(void *)(v62 + 16);
        if (v73 && !*(_WORD *)(v36 + 2 * v73 - 2))
        {
          uint64_t v74 = v73 + 14;
          do
          {
            *(void *)(v62 + 16) = v74 - 15;
            if (v74 == 15) {
              break;
            }
          }
          while (!*(unsigned __int16 *)(v62 + 2 * v74--));
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v54 = v62;
        uint64_t v48 = v197;
        uint64_t v36 = v199;
        uint64_t v50 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v54 = MEMORY[0x1E4FBC860];
      }
      if (v52 > v42)
      {
        rawValue = (void *)v50[196];
        uint64_t v53 = 0;
        uint64_t v33 = v195;
        if (v42 < 0) {
          goto LABEL_76;
        }
        goto LABEL_27;
      }
    }
LABEL_334:
    __break(1u);
LABEL_335:
    swift_once();
  }
  uint64_t v53 = 0;
  uint64_t v54 = v48;
  if (v42 < 0)
  {
LABEL_76:
    __break(1u);
LABEL_77:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    uint64_t v57 = swift_allocError();
    *unint64_t v76 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    uint64_t v53 = 0;
    uint64_t v36 = v199;
    uint64_t v33 = v195;
    goto LABEL_114;
  }
LABEL_27:
  if ((unint64_t)v42 >= rawValue[2])
  {
LABEL_344:
    __break(1u);
LABEL_345:
    __break(1u);
LABEL_346:
    __break(1u);
LABEL_347:
    __break(1u);
LABEL_348:
    __break(1u);
LABEL_349:
    __break(1u);
LABEL_350:
    __break(1u);
LABEL_351:
    __break(1u);
LABEL_352:
    __break(1u);
LABEL_353:
    __break(1u);
LABEL_354:
    __break(1u);
    goto LABEL_355;
  }
  unint64_t v55 = *(void *)(v54 + 16);
  if (!v55 || (uint64_t v56 = rawValue[v42 + 4], (v57 = *(void *)(v56 + 16)) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v48 = MEMORY[0x1E4FBC860];
    goto LABEL_79;
  }
  uint64_t v58 = v55 + v57;
  if (__OFADD__(v55, v57)) {
    goto LABEL_356;
  }
  if (v58 > 7)
  {
    uint64_t v58 = 8;
LABEL_85:
    swift_bridgeObjectRetain();
    uint64_t v48 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v48 + 16) = v58;
    bzero((void *)(v48 + 32), 2 * v58);
    goto LABEL_86;
  }
  if (v58 < 0) {
    goto LABEL_390;
  }
  if (v58) {
    goto LABEL_85;
  }
  swift_bridgeObjectRetain();
  uint64_t v48 = MEMORY[0x1E4FBC860];
LABEL_86:
  uint64_t v79 = 0;
  uint64_t v80 = v56 + 32;
  uint64_t v81 = v48 + 32;
  while (1)
  {
    if (v79 == v57) {
      goto LABEL_349;
    }
    unsigned int v82 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = v79 + 1;
    do
    {
      if (v55 == v83) {
        goto LABEL_291;
      }
      uint64_t v87 = v83 + v79;
      if (__OFADD__(v83, v79))
      {
LABEL_292:
        __break(1u);
        goto LABEL_293;
      }
      if (v87 >= v58)
      {
        if (v82) {
          goto LABEL_113;
        }
        unsigned int v82 = *(unsigned __int16 *)(v80 + 2 * v79);
        if (*(_WORD *)(v80 + 2 * v79))
        {
          unsigned int v82 = *(unsigned __int16 *)(v54 + 2 * v83 + 32);
          if (*(_WORD *)(v54 + 2 * v83 + 32)) {
            goto LABEL_113;
          }
        }
      }
      else
      {
        if (v87 < 0) {
          goto LABEL_326;
        }
        if ((unint64_t)v87 >= *(void *)(v48 + 16))
        {
LABEL_327:
          __break(1u);
LABEL_328:
          __break(1u);
LABEL_329:
          __break(1u);
LABEL_279:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_177;
        }
        uint64_t v85 = 2 * v87;
        unsigned int v86 = v82
            + *(unsigned __int16 *)(v81 + v85)
            + *(unsigned __int16 *)(v54 + 2 * v83 + 32) * *(unsigned __int16 *)(v80 + 2 * v79);
        unsigned int v82 = HIWORD(v86);
        *(_WORD *)(v81 + v85) = v86;
      }
      ++v83;
    }
    while (v55 != v83);
    if (!v82) {
      goto LABEL_107;
    }
    BOOL v59 = __OFADD__(v55, v79);
    uint64_t v88 = v55 + v79;
    if (v59) {
      goto LABEL_359;
    }
    if (v88 >= v58) {
      break;
    }
    if (v88 < 0) {
      goto LABEL_360;
    }
    if ((unint64_t)v88 >= *(void *)(v48 + 16)) {
      goto LABEL_361;
    }
    *(_WORD *)(v81 + 2 * v88) = v82;
LABEL_107:
    uint64_t v79 = v84;
    if (v84 == v57)
    {
      uint64_t v89 = *(void *)(v48 + 16);
      if (v89 && !*(_WORD *)(v81 + 2 * v89 - 2))
      {
        do
        {
          *(void *)(v48 + 16) = v89 - 1;
          if (v89 == 1) {
            break;
          }
        }
        while (!*(unsigned __int16 *)(v48 + 28 + 2 * v89--));
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_79:
      unsigned __int16 v37 = v211;
LABEL_80:
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v48);
      if (v53) {
        goto LABEL_177;
      }
      unint64_t v77 = *(void *)(v48 + 16);
      swift_bridgeObjectRelease();
      if (!HIDWORD(v77))
      {
        _So9NSDecimala__length_setter(v77, (_DWORD *)v36);
        *(_DWORD *)v214 = *(_DWORD *)v37;
        *(_OWORD *)&v214[4] = *(_OWORD *)((char *)v37 + 4);
        uint64_t v78 = _So9NSDecimala__exponent_getter(v214);
LABEL_83:
        _So9NSDecimala__exponent_setter(v78, (unsigned char *)v36);
        _So9NSDecimala__isCompact_setter_0(0, (_DWORD *)v36);
        goto LABEL_179;
      }
      goto LABEL_391;
    }
  }
LABEL_113:
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  uint64_t v57 = swift_allocError();
  *int v91 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  uint64_t v53 = 0;
LABEL_114:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  NSDecimal.asVariableLengthInteger()(v207, v204, v201);
  uint64_t v93 = *(void *)(v92 + 16);
  swift_bridgeObjectRelease();
  double v94 = floor((double)(8 - v93) * 4.81647993);
  if ((~*(void *)&v94 & 0x7FF0000000000000) == 0) {
    goto LABEL_340;
  }
  uint64_t v48 = (uint64_t)&demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
  uint64_t v58 = (uint64_t)v211;
  if (v94 <= -9.22337204e18)
  {
LABEL_341:
    __break(1u);
    goto LABEL_342;
  }
  if (v94 >= 9.22337204e18)
  {
LABEL_342:
    __break(1u);
    goto LABEL_343;
  }
  uint64_t v52 = (uint64_t)v94;
  NSDecimal.asVariableLengthInteger()(*v211, v211[1], *((_DWORD *)v211 + 4));
  BOOL v59 = __OFSUB__(v52, v33);
  uint64_t v33 = v52 - v33;
  if (v59)
  {
LABEL_343:
    __break(1u);
    goto LABEL_344;
  }
  unint64_t v96 = v95;
  if (!v33)
  {
    uint64_t v42 = v95;
    goto LABEL_176;
  }
  unint64_t v204 = v52;
  uint64_t v52 = specialized abs<A>(_:)(v33);
  uint64_t v97 = powerOfTen._rawValue;
  uint64_t v57 = *((void *)powerOfTen._rawValue + 2);
  unint64_t v207 = v96;
  uint64_t v199 = v36;
  if (v57 > v52)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = v96;
    if (v52 < 0) {
      goto LABEL_275;
    }
    goto LABEL_121;
  }
  if (!v57) {
    goto LABEL_357;
  }
  uint64_t v58 = v57 - 1;
  swift_bridgeObjectRetain();
  uint64_t v36 = v96;
  uint64_t v201 = v33;
LABEL_135:
  uint64_t v101 = *(void *)(v48 + 1568);
  if ((unint64_t)v57 > *(void *)(v101 + 16)) {
    goto LABEL_339;
  }
  uint64_t v54 = *(void *)(v101 + 8 * v58 + 32);
  if (v33 < 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v117 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v36, v54, 8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v36 = v117;
    goto LABEL_134;
  }
  uint64_t v102 = *(void *)(v36 + 16);
  if (!v102 || (uint64_t v103 = *(void *)(v54 + 16)) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v36 = MEMORY[0x1E4FBC860];
    uint64_t v33 = v201;
    goto LABEL_134;
  }
  uint64_t v198 = v58;
  if (__OFADD__(v102, v103)) {
    goto LABEL_358;
  }
  if (v102 + v103 >= 8) {
    uint64_t v58 = 8;
  }
  else {
    uint64_t v58 = v102 + v103;
  }
  if (v58 < 0) {
    goto LABEL_390;
  }
  swift_bridgeObjectRetain();
  uint64_t v48 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v48 + 16) = v58;
  uint64_t v104 = v48 + 32;
  bzero((void *)(v48 + 32), 2 * v58);
  uint64_t v105 = 0;
  uint64_t v106 = v54 + 32;
LABEL_145:
  unsigned int v107 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = v105++;
  while (1)
  {
    uint64_t v112 = v108 + v109;
    if (__OFADD__(v108, v109)) {
      break;
    }
    if (v112 >= v58)
    {
      if (v107) {
        goto LABEL_171;
      }
      unsigned int v107 = *(unsigned __int16 *)(v106 + 2 * v109);
      if (*(_WORD *)(v106 + 2 * v109))
      {
        unsigned int v107 = *(unsigned __int16 *)(v36 + 2 * v108 + 32);
        if (*(_WORD *)(v36 + 2 * v108 + 32)) {
          goto LABEL_171;
        }
      }
    }
    else
    {
      if (v112 < 0) {
        goto LABEL_328;
      }
      if ((unint64_t)v112 >= *(void *)(v48 + 16)) {
        goto LABEL_329;
      }
      uint64_t v110 = 2 * v112;
      unsigned int v111 = v107
           + *(unsigned __int16 *)(v104 + v110)
           + *(unsigned __int16 *)(v36 + 2 * v108 + 32) * *(unsigned __int16 *)(v106 + 2 * v109);
      unsigned int v107 = HIWORD(v111);
      *(_WORD *)(v104 + v110) = v111;
    }
    if (v102 == ++v108)
    {
      if (!v107) {
        goto LABEL_163;
      }
      BOOL v59 = __OFADD__(v102, v109);
      uint64_t v113 = v102 + v109;
      if (v59) {
        goto LABEL_366;
      }
      if (v113 >= v58)
      {
LABEL_171:
        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
        uint64_t v118 = swift_allocError();
        *uint64_t v119 = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __int16 v120 = (void *)v118;
        goto LABEL_178;
      }
      if (v113 < 0) {
        goto LABEL_369;
      }
      if ((unint64_t)v113 >= *(void *)(v48 + 16)) {
        goto LABEL_370;
      }
      *(_WORD *)(v104 + 2 * v113) = v107;
LABEL_163:
      if (v105 == v103)
      {
        uint64_t v114 = *(void *)(v48 + 16);
        if (v114 && !*(_WORD *)(v104 + 2 * v114 - 2))
        {
          uint64_t v115 = v114 + 14;
          do
          {
            *(void *)(v48 + 16) = v115 - 15;
            if (v115 == 15) {
              break;
            }
          }
          while (!*(unsigned __int16 *)(v48 + 2 * v115--));
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v36 = v48;
        uint64_t v48 = 0x1E8ED5000;
        uint64_t v33 = v201;
        uint64_t v58 = v198;
LABEL_134:
        v52 -= v58;
        if (v57 <= v52) {
          goto LABEL_135;
        }
        uint64_t v97 = *(void **)(v48 + 1568);
        if (v52 < 0)
        {
LABEL_275:
          __break(1u);
          goto LABEL_276;
        }
LABEL_121:
        if ((unint64_t)v52 < v97[2])
        {
          uint64_t v98 = v97[v52 + 4];
          if (v33 < 0)
          {
            swift_bridgeObjectRetain();
            uint64_t v42 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v36, v98, 8);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_174;
          }
          uint64_t v99 = *(void *)(v36 + 16);
          if (!v99 || (uint64_t v57 = *(void *)(v98 + 16)) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v42 = MEMORY[0x1E4FBC860];
            goto LABEL_175;
          }
          uint64_t v100 = v99 + v57;
          if (__OFADD__(v99, v57)) {
            goto LABEL_373;
          }
          if (v100 > 7)
          {
            uint64_t v100 = 8;
          }
          else
          {
            if (v100 < 0) {
              goto LABEL_390;
            }
            if (!v100)
            {
              swift_bridgeObjectRetain();
              uint64_t v42 = MEMORY[0x1E4FBC860];
LABEL_205:
              uint64_t v138 = 0;
              uint64_t v139 = v98 + 32;
              uint64_t v140 = v42 + 32;
LABEL_206:
              if (v138 == v57) {
                goto LABEL_371;
              }
              unsigned int v141 = 0;
              uint64_t v142 = 0;
              uint64_t v143 = v138 + 1;
              while (v99 != v142)
              {
                uint64_t v144 = v142 + v138;
                if (__OFADD__(v142, v138)) {
                  goto LABEL_332;
                }
                if (v144 >= v100)
                {
                  if (v141) {
                    goto LABEL_231;
                  }
                  unsigned int v141 = *(unsigned __int16 *)(v139 + 2 * v138);
                  if (*(_WORD *)(v139 + 2 * v138))
                  {
                    unsigned int v141 = *(unsigned __int16 *)(v36 + 2 * v142 + 32);
                    if (*(_WORD *)(v36 + 2 * v142 + 32)) {
                      goto LABEL_231;
                    }
                  }
                }
                else
                {
                  if (v144 < 0)
                  {
                    __break(1u);
LABEL_337:
                    __break(1u);
LABEL_338:
                    __break(1u);
LABEL_339:
                    __break(1u);
LABEL_340:
                    __break(1u);
                    goto LABEL_341;
                  }
                  if ((unint64_t)v144 >= *(void *)(v42 + 16)) {
                    goto LABEL_337;
                  }
                  uint64_t v145 = 2 * v144;
                  unsigned int v146 = v141
                       + *(unsigned __int16 *)(v140 + v145)
                       + *(unsigned __int16 *)(v36 + 2 * v142 + 32) * *(unsigned __int16 *)(v139 + 2 * v138);
                  unsigned int v141 = HIWORD(v146);
                  *(_WORD *)(v140 + v145) = v146;
                }
                if (v99 == ++v142)
                {
                  if (!v141) {
                    goto LABEL_225;
                  }
                  BOOL v59 = __OFADD__(v99, v138);
                  uint64_t v147 = v99 + v138;
                  if (v59) {
                    goto LABEL_374;
                  }
                  if (v147 >= v100)
                  {
LABEL_231:
                    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                    uint64_t v150 = swift_allocError();
                    *unsigned __int16 v151 = 0;
                    swift_willThrow();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    __int16 v120 = (void *)v150;
                    goto LABEL_178;
                  }
                  if (v147 < 0) {
                    goto LABEL_375;
                  }
                  if ((unint64_t)v147 >= *(void *)(v42 + 16)) {
                    goto LABEL_376;
                  }
                  *(_WORD *)(v140 + 2 * v147) = v141;
LABEL_225:
                  uint64_t v138 = v143;
                  if (v143 == v57)
                  {
                    uint64_t v148 = *(void *)(v42 + 16);
                    if (v148 && !*(_WORD *)(v140 + 2 * v148 - 2))
                    {
                      do
                      {
                        *(void *)(v42 + 16) = v148 - 1;
                        if (v148 == 1) {
                          break;
                        }
                      }
                      while (!*(unsigned __int16 *)(v42 + 28 + 2 * v148--));
                    }
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
LABEL_174:
                    swift_bridgeObjectRelease();
LABEL_175:
                    uint64_t v36 = v199;
                    uint64_t v58 = (uint64_t)v211;
                    uint64_t v52 = v204;
LABEL_176:
                    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v42);
                    if (!v53) {
                      goto LABEL_184;
                    }
LABEL_177:
                    swift_bridgeObjectRelease();
                    __int16 v120 = v53;
                    goto LABEL_178;
                  }
                  goto LABEL_206;
                }
              }
              __break(1u);
LABEL_332:
              __break(1u);
LABEL_333:
              __break(1u);
              goto LABEL_334;
            }
          }
          swift_bridgeObjectRetain();
          uint64_t v42 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v42 + 16) = v100;
          bzero((void *)(v42 + 32), 2 * v100);
          goto LABEL_205;
        }
LABEL_355:
        __break(1u);
LABEL_356:
        __break(1u);
LABEL_357:
        __break(1u);
LABEL_358:
        __break(1u);
LABEL_359:
        __break(1u);
LABEL_360:
        __break(1u);
LABEL_361:
        __break(1u);
LABEL_362:
        __break(1u);
        goto LABEL_363;
      }
      goto LABEL_145;
    }
  }
  __break(1u);
LABEL_324:
  uint64_t v132 = *(void *)(v48 + 1568);
  if (v102 < 0) {
    goto LABEL_325;
  }
  while (2)
  {
    if ((unint64_t)v102 >= *(void *)(v132 + 16)) {
      goto LABEL_377;
    }
    uint64_t v33 = *(void *)(v132 + 8 * v102 + 32);
    if (v52 < 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v63 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v58, v33, 8);
      if (v53) {
        goto LABEL_279;
      }
      goto LABEL_283;
    }
    uint64_t v54 = v52;
    uint64_t v57 = *(void *)(v58 + 16);
    if (!v57 || (uint64_t v52 = *(void *)(v33 + 16)) == 0)
    {
LABEL_276:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v135 = MEMORY[0x1E4FBC860];
      goto LABEL_277;
    }
    unint64_t v55 = v36;
    uint64_t v134 = v57 + v52;
    if (__OFADD__(v57, v52)) {
      goto LABEL_386;
    }
    if (v134 > 7)
    {
LABEL_293:
      uint64_t v134 = 8;
      goto LABEL_294;
    }
    if (v134 < 0) {
      goto LABEL_390;
    }
    if (!v134)
    {
      swift_bridgeObjectRetain();
      uint64_t v135 = MEMORY[0x1E4FBC860];
      goto LABEL_295;
    }
LABEL_294:
    swift_bridgeObjectRetain();
    uint64_t v135 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v135 + 16) = v134;
    bzero((void *)(v135 + 32), 2 * v134);
LABEL_295:
    uint64_t v175 = 0;
    uint64_t v176 = v33 + 32;
    uint64_t v177 = v135 + 32;
    while (2)
    {
      if (v175 == v52) {
        goto LABEL_385;
      }
      unsigned int v178 = 0;
      uint64_t v179 = 0;
      uint64_t v180 = v175 + 1;
      do
      {
        if (v57 == v179) {
          goto LABEL_353;
        }
        uint64_t v183 = v179 + v175;
        if (__OFADD__(v179, v175)) {
          goto LABEL_354;
        }
        if (v183 >= v134)
        {
          if (v178) {
            goto LABEL_322;
          }
          unsigned int v178 = *(unsigned __int16 *)(v176 + 2 * v175);
          if (*(_WORD *)(v176 + 2 * v175))
          {
            unsigned int v178 = *(unsigned __int16 *)(v58 + 2 * v179 + 32);
            if (*(_WORD *)(v58 + 2 * v179 + 32)) {
              goto LABEL_322;
            }
          }
        }
        else
        {
          if (v183 < 0) {
            goto LABEL_367;
          }
          if ((unint64_t)v183 >= *(void *)(v135 + 16)) {
            goto LABEL_368;
          }
          uint64_t v181 = 2 * v183;
          unsigned int v182 = v178
               + *(unsigned __int16 *)(v177 + v181)
               + *(unsigned __int16 *)(v58 + 2 * v179 + 32) * *(unsigned __int16 *)(v176 + 2 * v175);
          unsigned int v178 = HIWORD(v182);
          *(_WORD *)(v177 + v181) = v182;
        }
        ++v179;
      }
      while (v57 != v179);
      if (!v178)
      {
LABEL_316:
        uint64_t v175 = v180;
        if (v180 != v52) {
          continue;
        }
        uint64_t v185 = *(void *)(v135 + 16);
        if (v185 && !*(_WORD *)(v177 + 2 * v185 - 2))
        {
          do
          {
            *(void *)(v135 + 16) = v185 - 1;
            if (v185 == 1) {
              break;
            }
          }
          while (!*(unsigned __int16 *)(v135 + 28 + 2 * v185--));
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v36 = v55;
LABEL_277:
        uint64_t v52 = v54;
        goto LABEL_284;
      }
      break;
    }
    BOOL v59 = __OFADD__(v57, v175);
    uint64_t v184 = v57 + v175;
    if (v59) {
      goto LABEL_387;
    }
    if (v184 < v134)
    {
      if (v184 < 0) {
        goto LABEL_388;
      }
      if ((unint64_t)v184 >= *(void *)(v135 + 16)) {
        goto LABEL_389;
      }
      *(_WORD *)(v177 + 2 * v184) = v178;
      goto LABEL_316;
    }
LABEL_322:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    uint64_t v187 = swift_allocError();
    unsigned char *v188 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __int16 v120 = (void *)v187;
LABEL_178:

LABEL_179:
    while (2)
    {
      uint64_t v58 = v218;
      uint64_t v57 = WORD2(v218);
      __int16 v208 = v219;
      uint64_t v36 = WORD1(v219);
      uint64_t v52 = WORD2(v219);
      __int16 v212 = v220;
      uint64_t v48 = HIWORD(v218);
      __int16 v121 = HIWORD(v219);
      uint64_t v33 = HIWORD(v220);
      NSDecimal.asVariableLengthInteger()(v218 | ((unint64_t)WORD2(v218) << 32) | ((unint64_t)HIWORD(v218) << 48), (unsigned __int16)v219 | ((unint64_t)WORD1(v219) << 16) | ((unint64_t)WORD2(v219) << 32) | ((unint64_t)HIWORD(v219) << 48), (unsigned __int16)v220 | (HIWORD(v220) << 16));
      uint64_t v123 = v122;
      NSDecimal.asVariableLengthInteger()(v215, v216, v217);
      uint64_t v53 = (char *)v124;
      uint64_t v42 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v123, v124);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_DWORD *)v214 = v58;
      *(_WORD *)&v214[4] = v57;
      *(_WORD *)&v214[6] = v48;
      *(_WORD *)&v214[8] = v208;
      *(_WORD *)&v214[10] = v36;
      *(_WORD *)&v214[12] = v52;
      *(_WORD *)&v214[14] = v121;
      *(_WORD *)&v214[16] = v212;
      *(_WORD *)&v214[18] = v33;
      if (!_So9NSDecimala__isNegative_getter(v214)) {
        return v42;
      }
      switch(v42)
      {
        case -1:
          return 1;
        case 1:
          return -1;
        case 0:
          return v42;
      }
      type metadata accessor for NSComparisonResult(0);
      *(void *)v214 = v42;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
LABEL_184:
      unint64_t v125 = *(void *)(v42 + 16);
      swift_bridgeObjectRelease();
      if (v125 >> 31) {
        goto LABEL_362;
      }
      _So9NSDecimala__length_setter(v125, (_DWORD *)v58);
      if (v33 < (uint64_t)0xFFFFFFFF80000000)
      {
LABEL_363:
        __break(1u);
        goto LABEL_364;
      }
      if (v33 > 0x7FFFFFFF)
      {
LABEL_364:
        __break(1u);
        goto LABEL_365;
      }
      *(_DWORD *)v214 = *(_DWORD *)v58;
      *(_OWORD *)&v214[4] = *(_OWORD *)(v58 + 4);
      int v126 = _So9NSDecimala__exponent_getter(v214);
      BOOL v59 = __OFSUB__(v126, v33);
      uint64_t v127 = (v126 - v33);
      if (v59)
      {
LABEL_365:
        __break(1u);
LABEL_366:
        __break(1u);
LABEL_367:
        __break(1u);
LABEL_368:
        __break(1u);
LABEL_369:
        __break(1u);
LABEL_370:
        __break(1u);
LABEL_371:
        __break(1u);
      }
      _So9NSDecimala__exponent_setter(v127, (unsigned char *)v58);
      _So9NSDecimala__isCompact_setter_0(0, (_DWORD *)v58);
      *(_DWORD *)v214 = *(_DWORD *)v58;
      *(_OWORD *)&v214[4] = *(_OWORD *)(v58 + 4);
      int v128 = _So9NSDecimala__length_getter(v214);
      uint64_t v129 = *(unsigned __int16 *)(v36 + 4);
      uint64_t v130 = *(unsigned __int16 *)(v36 + 6);
      if (!v128)
      {
        int v136 = *(_DWORD *)(v36 + 16);
        *(_DWORD *)v214 = *(_DWORD *)v36;
        *(_WORD *)&v214[4] = v129;
        *(_WORD *)&v214[6] = v130;
        *(void *)&v214[8] = *(void *)(v36 + 8);
        *(_DWORD *)&v214[16] = v136;
        uint64_t v137 = _So9NSDecimala__exponent_getter(v214);
        _So9NSDecimala__exponent_setter(v137, (unsigned char *)v58);
        continue;
      }
      break;
    }
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v36 | (unint64_t)(v129 << 32) | (v130 << 48), *(void *)(v36 + 8), *(_DWORD *)(v36 + 16));
    uint64_t v54 = v131;
    if (v52)
    {
      uint64_t v102 = specialized abs<A>(_:)(v52);
      uint64_t v132 = *(void *)(v48 + 1568);
      uint64_t v133 = *(void *)(v132 + 16);
      if (v133 > v102)
      {
        swift_bridgeObjectRetain();
        uint64_t v58 = v54;
        if ((v102 & 0x8000000000000000) == 0) {
          continue;
        }
LABEL_325:
        __break(1u);
LABEL_326:
        __break(1u);
        goto LABEL_327;
      }
      if (v133)
      {
        uint64_t v152 = v133 - 1;
        swift_bridgeObjectRetain();
        uint64_t v58 = v54;
        uint64_t v209 = v133;
        uint64_t v213 = v133 - 1;
        while (1)
        {
          uint64_t v153 = *(void *)(v48 + 1568);
          if ((unint64_t)v133 > *(void *)(v153 + 16)) {
            break;
          }
          uint64_t v57 = *(void *)(v153 + 8 * v152 + 32);
          if (v52 < 0)
          {
            uint64_t v171 = v52;
            swift_bridgeObjectRetain();
            uint64_t v172 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v58, v57, 8);
            if (v53) {
              goto LABEL_279;
            }
            uint64_t v173 = v172;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v58 = v173;
            uint64_t v52 = v171;
          }
          else
          {
            uint64_t v154 = *(void *)(v58 + 16);
            if (v154 && (uint64_t v155 = *(void *)(v57 + 16)) != 0)
            {
              uint64_t v202 = v54;
              if (__OFADD__(v154, v155)) {
                goto LABEL_379;
              }
              uint64_t v205 = v52;
              if (v154 + v155 >= 8) {
                uint64_t v156 = 8;
              }
              else {
                uint64_t v156 = v154 + v155;
              }
              if (v156 < 0) {
                goto LABEL_390;
              }
              swift_bridgeObjectRetain();
              uint64_t v157 = static Array._allocateBufferUninitialized(minimumCapacity:)();
              *(void *)(v157 + 16) = v156;
              uint64_t v158 = v157 + 32;
              bzero((void *)(v157 + 32), 2 * v156);
              uint64_t v159 = 0;
              uint64_t v160 = v57 + 32;
              do
              {
                unsigned int v161 = 0;
                uint64_t v162 = 0;
                uint64_t v163 = v159++;
                do
                {
                  uint64_t v164 = v162 + v163;
                  if (__OFADD__(v162, v163)) {
                    goto LABEL_338;
                  }
                  if (v164 >= v156)
                  {
                    if (v161) {
                      goto LABEL_171;
                    }
                    unsigned int v161 = *(unsigned __int16 *)(v160 + 2 * v163);
                    if (*(_WORD *)(v160 + 2 * v163))
                    {
                      unsigned int v161 = *(unsigned __int16 *)(v58 + 2 * v162 + 32);
                      if (*(_WORD *)(v58 + 2 * v162 + 32)) {
                        goto LABEL_171;
                      }
                    }
                  }
                  else
                  {
                    if (v164 < 0) {
                      goto LABEL_347;
                    }
                    if ((unint64_t)v164 >= *(void *)(v157 + 16)) {
                      goto LABEL_348;
                    }
                    uint64_t v165 = 2 * v164;
                    unsigned int v166 = v161
                         + *(unsigned __int16 *)(v158 + v165)
                         + *(unsigned __int16 *)(v58 + 2 * v162 + 32) * *(unsigned __int16 *)(v160 + 2 * v163);
                    unsigned int v161 = HIWORD(v166);
                    *(_WORD *)(v158 + v165) = v166;
                  }
                  ++v162;
                }
                while (v154 != v162);
                if (v161)
                {
                  BOOL v59 = __OFADD__(v154, v163);
                  uint64_t v167 = v154 + v163;
                  if (v59) {
                    goto LABEL_382;
                  }
                  if (v167 >= v156) {
                    goto LABEL_171;
                  }
                  if (v167 < 0) {
                    goto LABEL_383;
                  }
                  if ((unint64_t)v167 >= *(void *)(v157 + 16)) {
                    goto LABEL_384;
                  }
                  *(_WORD *)(v158 + 2 * v167) = v161;
                }
              }
              while (v159 != v155);
              uint64_t v168 = *(void *)(v157 + 16);
              if (v168 && !*(_WORD *)(v158 + 2 * v168 - 2))
              {
                uint64_t v169 = v168 + 14;
                do
                {
                  *(void *)(v157 + 16) = v169 - 15;
                  if (v169 == 15) {
                    break;
                  }
                }
                while (!*(unsigned __int16 *)(v157 + 2 * v169--));
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v58 = v157;
              uint64_t v48 = 0x1E8ED5000;
              uint64_t v54 = v202;
              uint64_t v52 = v205;
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v58 = MEMORY[0x1E4FBC860];
            }
            uint64_t v133 = v209;
          }
          uint64_t v152 = v213;
          v102 -= v213;
          if (v133 > v102) {
            goto LABEL_324;
          }
        }
        __break(1u);
LABEL_373:
        __break(1u);
LABEL_374:
        __break(1u);
LABEL_375:
        __break(1u);
LABEL_376:
        __break(1u);
LABEL_377:
        __break(1u);
      }
      __break(1u);
LABEL_379:
      __break(1u);
LABEL_380:
      __break(1u);
      goto LABEL_381;
    }
    break;
  }
  uint64_t v135 = v131;
LABEL_284:
  NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v135);
  if (v53) {
    goto LABEL_177;
  }
  unint64_t v55 = *(void *)(v135 + 16);
  swift_bridgeObjectRelease();
  if (!HIDWORD(v55))
  {
    _So9NSDecimala__length_setter(v55, (_DWORD *)v36);
    if (v52 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_380;
    }
    if (v52 <= 0x7FFFFFFF)
    {
      *(_DWORD *)v214 = *(_DWORD *)v36;
      *(_OWORD *)&v214[4] = *(_OWORD *)(v36 + 4);
      int v174 = _So9NSDecimala__exponent_getter(v214);
      BOOL v59 = __OFSUB__(v174, v52);
      uint64_t v78 = (v174 - v52);
      if (!v59) {
        goto LABEL_83;
      }
      __break(1u);
LABEL_291:
      __break(1u);
      goto LABEL_292;
    }
LABEL_381:
    __break(1u);
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
LABEL_384:
    __break(1u);
LABEL_385:
    __break(1u);
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
LABEL_390:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
LABEL_391:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _So9NSDecimala__isNegative_getter(_DWORD *a1)
{
  return (*a1 >> 12) & 1;
}

uint64_t specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 16);
  if (!v6) {
    goto LABEL_11;
  }
  unint64_t v8 = a2;
  if (specialized static NSDecimal._integerCompare(lhs:rhs:)(a1, a2) == -1) {
    return MEMORY[0x1E4FBC860];
  }
  if (v6 != 1)
  {
    uint64_t v5 = (char *)(v8 + 32);
    unint64_t v4 = *(void *)(a1 + 16);
    LODWORD(v15) = 0x10000 / (*(unsigned __int16 *)(v8 + 32 + 2 * v6 - 2) + 1);
    if (!v4)
    {
      uint64_t v11 = MEMORY[0x1E4FBC860];
      goto LABEL_21;
    }
    uint64_t v11 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v11 + 16) = v4;
    bzero((void *)(v11 + 32), 2 * v4);
    unsigned int v16 = v15 * *(unsigned __int16 *)(a1 + 32);
    unsigned int v17 = HIWORD(v16);
    *(_WORD *)(v11 + 32) = v15 * *(_WORD *)(a1 + 32);
    unint64_t v18 = v4 - 1;
    if (v4 != 1)
    {
      unint64_t v19 = (_WORD *)(v11 + 34);
      unint64_t v20 = (unsigned __int16 *)(a1 + 34);
      do
      {
        int v21 = *v20++;
        unsigned int v16 = v17 + v15 * v21;
        unsigned int v17 = HIWORD(v16);
        *v19++ = v16;
        --v18;
      }
      while (v18);
    }
    if (v16 < 0x10000) {
      goto LABEL_21;
    }
    unint64_t v22 = *(void *)(v11 + 24);
    unint64_t v23 = v4 + 1;
    if (v4 < v22 >> 1) {
      goto LABEL_19;
    }
    while (1)
    {
      uint64_t v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23, 1, (char *)v11);
LABEL_19:
      *(void *)(v11 + 16) = v23;
      *(_WORD *)(v11 + 2 * v4 + 32) = v17;
LABEL_21:
      unint64_t v23 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v23 + 16) = v6;
      bzero((void *)(v23 + 32), 2 * v6);
      int v24 = *(unsigned __int16 *)v5;
      uint64_t v5 = (char *)v23;
      unsigned int v25 = v15 * v24;
      LODWORD(v23) = HIWORD(v25);
      *((_WORD *)v5 + 16) = v25;
      unint64_t v26 = v6 - 1;
      if (v6 != 1)
      {
        unsigned int v27 = v5 + 34;
        unsigned int v28 = (unsigned __int16 *)(v8 + 34);
        do
        {
          int v29 = *v28++;
          unsigned int v25 = v23 + v15 * v29;
          LODWORD(v23) = HIWORD(v25);
          *v27++ = v25;
          --v26;
        }
        while (v26);
      }
      if (v25 < 0x10000)
      {
        unint64_t v8 = v6;
        goto LABEL_28;
      }
      unint64_t v30 = *((void *)v5 + 3);
      unint64_t v8 = v6 + 1;
      if (v6 >= v30 >> 1) {
LABEL_138:
      }
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v8, 1, v5);
      *((void *)v5 + 2) = v8;
      *(_WORD *)&v5[2 * v6 + 32] = v23;
LABEL_28:
      unint64_t v6 = *(void *)(v11 + 16);
      swift_bridgeObjectRetain();
      if (v6 == v4)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 + 1, 1, (char *)v11);
        }
        unint64_t v32 = *(void *)(v11 + 16);
        unint64_t v31 = *(void *)(v11 + 24);
        unint64_t v6 = v32 + 1;
        if (v32 >= v31 >> 1) {
          uint64_t v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, (char *)v11);
        }
        *(void *)(v11 + 16) = v6;
        *(_WORD *)(v11 + 2 * v32 + 32) = 0;
        unint64_t v8 = *((void *)v5 + 2);
      }
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_133:
      }
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
      unint64_t v23 = *((void *)v5 + 2);
      unint64_t v33 = *((void *)v5 + 3);
      unint64_t v4 = v23 + 1;
      if (v23 >= v33 >> 1) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v23 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v4;
      __int16 v34 = v5 + 32;
      *(_WORD *)&v5[2 * v23 + 32] = 0;
      unint64_t v30 = v8 - 1;
      if (v8 - 1 > v23)
      {
        __break(1u);
        goto LABEL_135;
      }
      uint64_t v15 = *(void *)(v11 + 16);
      unsigned int v17 = *(unsigned __int16 *)&v34[2 * v30];
      unint64_t v22 = v8 - 2;
      uint64_t v80 = v5 + 32;
      if (v8 >= 2) {
        break;
      }
      while (1)
      {
        if (a3 < 0)
        {
LABEL_142:
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        unsigned int v74 = 0;
        if (!a3) {
          goto LABEL_42;
        }
LABEL_46:
        unint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v4 + 16) = a3;
        bzero((void *)(v4 + 32), 2 * a3);
        __int16 v34 = v5 + 32;
        uint64_t v35 = v15 - v8;
        if (((v15 - v8) & 0x8000000000000000) == 0) {
          break;
        }
LABEL_43:
        __break(1u);
      }
LABEL_47:
      if (v15 == v8)
      {
LABEL_48:
        uint64_t v36 = *(void *)(v4 + 16);
        if (v36 && !*(_WORD *)(v4 + 2 * v36 + 30))
        {
          uint64_t v37 = v36 + 14;
          do
          {
            *(void *)(v4 + 16) = v37 - 15;
            if (v37 == 15) {
              break;
            }
          }
          while (!*(unsigned __int16 *)(v4 + 2 * v37--));
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v4;
      }
      if (v17)
      {
        a3 = 0;
        unint64_t v83 = v6 - v8;
        unint64_t v73 = v8;
        unint64_t v81 = v6 + ~v8;
        unint64_t v79 = v8 + 1;
        unint64_t v76 = v6;
        uint64_t v77 = v35;
        unsigned int v75 = v17;
LABEL_56:
        if (a3 == v35) {
          goto LABEL_124;
        }
        unint64_t v30 = v6 - a3;
        if (v6 == a3) {
          goto LABEL_125;
        }
        unint64_t v39 = v6 - a3 - 1;
        unint64_t v40 = *(void *)(v11 + 16);
        if (v39 >= v40) {
          goto LABEL_126;
        }
        if (v30 - 2 >= v40) {
          goto LABEL_127;
        }
        uint64_t v41 = v11 + 32;
        unsigned int v42 = *(unsigned __int16 *)(v11 + 32 + 2 * (v30 - 2)) | (*(unsigned __int16 *)(v11 + 32 + 2 * v39) << 16);
        unsigned int v43 = v42 / v17;
        int v44 = v42 % v17;
        unsigned int v82 = v43;
        if (v43 != 0x10000)
        {
          unint64_t v45 = v74 * (unint64_t)v43;
          if ((v45 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_130;
          }
          if (v30 - 3 >= v40) {
            goto LABEL_131;
          }
          if ((*(unsigned __int16 *)(v41 + 2 * (v30 - 3)) | (v44 << 16)) >= v45) {
            goto LABEL_73;
          }
        }
        BOOL v46 = v82-- != 0;
        if (!v46) {
          goto LABEL_129;
        }
        unsigned int v47 = v44 + v17;
        if (HIWORD(v47))
        {
LABEL_73:
          unsigned int v49 = 0;
          unint64_t v23 = 0;
          uint64_t v78 = a3 + 1;
          int v50 = 1;
          while (v23 < *((void *)v5 + 2))
          {
            unint64_t v51 = *(unsigned __int16 *)&v34[2 * v23] * (unint64_t)v82;
            if ((v51 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_111;
            }
            unint64_t v8 = (unint64_t)v5;
            uint64_t v5 = (char *)(v51 + v49);
            if (__CFADD__(v51, v49)) {
              goto LABEL_112;
            }
            unint64_t v52 = v83 + v23;
            if (__OFADD__(v83, v23)) {
              goto LABEL_113;
            }
            BOOL v53 = __OFSUB__(v52, a3);
            uint64_t v54 = v52 - a3;
            if (v53) {
              goto LABEL_114;
            }
            unint64_t v6 = v54 - 1;
            if (__OFSUB__(v54, 1)) {
              goto LABEL_115;
            }
            if ((v81 & 0x8000000000000000) != 0) {
              goto LABEL_116;
            }
            if (v6 >= *(void *)(v11 + 16)) {
              goto LABEL_117;
            }
            int v55 = *(unsigned __int16 *)(v11 + 2 * v6 + 32);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v11 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
            }
            ++v23;
            unsigned int v49 = v5 >> 16;
            unsigned int v56 = v50 - (unsigned __int16)v5 + v55 + 0xFFFF;
            int v50 = HIWORD(v56);
            uint64_t v57 = v11 + 32;
            *(_WORD *)(v11 + 32 + 2 * v6) = v56;
            __int16 v34 = v80;
            uint64_t v5 = (char *)v8;
            if (v79 == v23)
            {
              if (!v50)
              {
                BOOL v46 = v82-- != 0;
                uint64_t v35 = v77;
                if (!v46) {
                  goto LABEL_132;
                }
                unsigned int v58 = 0;
                uint64_t v59 = 0;
                uint64_t v60 = *(void *)(v8 + 16);
                unint64_t v8 = v73;
                unint64_t v6 = v76;
                unsigned int v17 = v75;
                while (v60 != v59)
                {
                  uint64_t v61 = v83 + v59;
                  if (__OFADD__(v83, v59)) {
                    goto LABEL_119;
                  }
                  BOOL v53 = __OFSUB__(v61, a3);
                  uint64_t v62 = v61 - a3;
                  if (v53) {
                    goto LABEL_120;
                  }
                  BOOL v53 = __OFSUB__(v62, 1);
                  unint64_t v63 = v62 - 1;
                  if (v53) {
                    goto LABEL_121;
                  }
                  if ((v63 & 0x8000000000000000) != 0) {
                    goto LABEL_122;
                  }
                  if (v63 >= *(void *)(v11 + 16)) {
                    goto LABEL_123;
                  }
                  int v64 = *(unsigned __int16 *)&v80[2 * v59];
                  uint64_t v65 = v59 + 1;
                  uint64_t v66 = 2 * v63;
                  unsigned int v67 = v58 + v64 + *(unsigned __int16 *)(v57 + 2 * v63);
                  unsigned int v58 = HIWORD(v67);
                  *(_WORD *)(v57 + v66) = v67;
                  uint64_t v59 = v65;
                  if (v73 == v65) {
                    goto LABEL_98;
                  }
                }
                goto LABEL_118;
              }
              unint64_t v6 = v76;
              uint64_t v35 = v77;
              unsigned int v17 = v75;
LABEL_98:
              if (v82 >= 0x10000) {
                goto LABEL_10;
              }
              unint64_t v68 = v35 + ~a3;
              if (v68 >= *(void *)(v4 + 16)) {
                goto LABEL_128;
              }
              *(_WORD *)(v4 + 32 + 2 * v68) = v82;
              --v81;
              ++a3;
              if (v78 != v35) {
                goto LABEL_56;
              }
              goto LABEL_48;
            }
          }
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }
        if (v82 == 0x10000) {
          goto LABEL_71;
        }
        unint64_t v48 = v74 * (unint64_t)v82;
        if ((v48 & 0xFFFFFFFF00000000) != 0)
        {
LABEL_136:
          __break(1u);
        }
        else
        {
          v30 -= 3;
          if (v30 < v40)
          {
            if ((*(unsigned __int16 *)(v41 + 2 * v30) | (v47 << 16)) >= v48) {
              goto LABEL_73;
            }
LABEL_71:
            BOOL v46 = v82 != 0;
            unint64_t v30 = --v82;
            if (v46) {
              goto LABEL_73;
            }
LABEL_135:
            __break(1u);
            goto LABEL_136;
          }
        }
        __break(1u);
        goto LABEL_138;
      }
LABEL_140:
      __break(1u);
    }
    if (v22 > v23)
    {
      __break(1u);
      goto LABEL_140;
    }
    if (a3 < 0) {
      goto LABEL_142;
    }
    unint64_t v22 = *(unsigned __int16 *)&v34[2 * v22];
    unsigned int v74 = v22;
    if (a3) {
      goto LABEL_46;
    }
LABEL_42:
    unint64_t v4 = MEMORY[0x1E4FBC860];
    uint64_t v35 = v15 - v8;
    if (((v15 - v8) & 0x8000000000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  unsigned int v10 = *(unsigned __int16 *)(v8 + 32);
  if (!*(_WORD *)(v8 + 32))
  {
LABEL_11:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *unsigned int v14 = 2;
    swift_willThrow();
    return v4;
  }
  a3 = v3;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    unint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    unint64_t v6 = v4 + 30;
    *(void *)(v4 + 16) = v11;
    unint64_t v8 = 2 * v11;
    bzero((void *)(v4 + 32), 2 * v11);
    unsigned int v12 = *(unsigned __int16 *)(2 * v11 + a1 + 30);
    int v13 = v12 / v10;
    while (1)
    {
      if ((unint64_t)(v11 - 1) >= *(void *)(v4 + 16))
      {
        __break(1u);
        goto LABEL_110;
      }
      *(_WORD *)(v6 + 2 * v11) = v13;
      if (v11 == 1) {
        break;
      }
      unsigned int v12 = *(unsigned __int16 *)(a1 + 28 + 2 * v11) | ((v12 % v10) << 16);
      int v13 = v12 / v10;
      --v11;
      if ((v12 / v10) >> 16)
      {
LABEL_10:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_11;
      }
    }
  }
  else
  {
    unint64_t v4 = MEMORY[0x1E4FBC860];
  }
  uint64_t v69 = *(void *)(v4 + 16);
  if (v69 && !*(_WORD *)(v4 + 2 * v69 + 30))
  {
    uint64_t v70 = v69 + 14;
    do
    {
      *(void *)(v4 + 16) = v70 - 15;
      if (v70 == 15) {
        break;
      }
    }
    while (!*(unsigned __int16 *)(v4 + 2 * v70--));
  }
  return v4;
}

uint64_t specialized static NSDecimal._integerCompare(lhs:rhs:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a2 + 16);
  if (v3 < v2) {
    return 1;
  }
  if (v2 >= v3)
  {
    if (v2)
    {
      uint64_t v5 = 2 * v2 - 2;
      unsigned int v6 = *(unsigned __int16 *)(a1 + v5 + 32);
      unsigned int v7 = *(unsigned __int16 *)(a2 + v5 + 32);
      if (v7 < v6) {
        return 1;
      }
      if (v6 < v7) {
        return -1;
      }
      uint64_t v8 = v2 - 2;
      uint64_t v9 = a1 + 28;
      uint64_t result = 1;
      while (v2 != 1)
      {
        if (v8 >= (uint64_t)v3)
        {
          __break(1u);
          return result;
        }
        unsigned int v10 = *(unsigned __int16 *)(v9 + 2 * v2);
        unsigned int v11 = *(unsigned __int16 *)(a2 + 28 + 2 * v2);
        if (v11 < v10) {
          return result;
        }
        --v2;
        if (v10 < v11) {
          return -1;
        }
      }
    }
    return 0;
  }
  return -1;
}

uint64_t URLResourceValues._set(_:newValue:)(void *a1, unsigned __int8 a2)
{
  int v2 = a2;
  id v3 = a1;
  specialized Set._Variant.insert(_:)(&v9, v3);

  if (v2 == 2)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    id v4 = v3;
  }
  else
  {
    id v5 = objc_allocWithZone((Class)NSNumber);
    id v6 = v3;
    id v7 = objc_msgSend(v5, sel_initWithBool_, v2 & 1);
    *((void *)&v10 + 1) = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    *(void *)&long long v9 = v7;
    id v4 = v6;
  }
  return specialized Dictionary.subscript.setter((uint64_t)&v9, v4);
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  id v3 = v2;
  uint64_t v6 = *v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v3;
    *id v3 = 0x8000000000000000;
    id v24 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v24, v9, isUniquelyReferenced_nonNull_native);
    *id v3 = v28;
    swift_bridgeObjectRelease();
    *a1 = v24;
    return 1;
  }
  id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v6 + 48) + 8 * v9));
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)(a2) && v12 == v13)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      uint64_t v16 = ~v8;
      do
      {
        unint64_t v9 = (v9 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          goto LABEL_15;
        }
        id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v6 + 48) + 8 * v9));
        uint64_t v19 = v18;
        if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(a2) && v19 == v20) {
          goto LABEL_16;
        }
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v22 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  unint64_t v26 = *(void **)(*(void *)(*v3 + 48) + 8 * v9);
  *a1 = v26;
  id v27 = v26;
  return 0;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  id v4 = v3;
  uint64_t v6 = (void *)result;
  uint64_t v7 = *v3;
  unint64_t v8 = *(void *)(*v3 + 16);
  unint64_t v9 = *(void *)(*v3 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
  {
    uint64_t v10 = *v3;
    goto LABEL_120;
  }
  int v91 = (void *)result;
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
    uint64_t v11 = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v10 = v11;
    if (*(void *)(v7 + 16))
    {
      uint64_t v12 = 1 << *(unsigned char *)(v7 + 32);
      uint64_t v92 = (void *)(v7 + 56);
      if (v12 < 64) {
        uint64_t v13 = ~(-1 << v12);
      }
      else {
        uint64_t v13 = -1;
      }
      unint64_t v14 = v13 & *(void *)(v7 + 56);
      int64_t v94 = (unint64_t)(v12 + 63) >> 6;
      uint64_t v15 = v11 + 56;
      swift_retain();
      int64_t v16 = 0;
      while (1)
      {
        if (v14)
        {
          unint64_t v18 = __clz(__rbit64(v14));
          v14 &= v14 - 1;
          unint64_t v19 = v18 | (v16 << 6);
        }
        else
        {
          int64_t v20 = v16 + 1;
          if (__OFADD__(v16, 1)) {
            goto LABEL_125;
          }
          if (v20 >= v94)
          {
LABEL_66:
            swift_release();
            uint64_t v50 = 1 << *(unsigned char *)(v7 + 32);
            uint64_t v6 = v91;
            if (v50 > 63) {
              bzero(v92, ((unint64_t)(v50 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            }
            else {
              *uint64_t v92 = -1 << v50;
            }
            *(void *)(v7 + 16) = 0;
            break;
          }
          unint64_t v21 = v92[v20];
          ++v16;
          if (!v21)
          {
            int64_t v16 = v20 + 1;
            if (v20 + 1 >= v94) {
              goto LABEL_66;
            }
            unint64_t v21 = v92[v16];
            if (!v21)
            {
              int64_t v16 = v20 + 2;
              if (v20 + 2 >= v94) {
                goto LABEL_66;
              }
              unint64_t v21 = v92[v16];
              if (!v21)
              {
                int64_t v16 = v20 + 3;
                if (v20 + 3 >= v94) {
                  goto LABEL_66;
                }
                unint64_t v21 = v92[v16];
                if (!v21)
                {
                  int64_t v22 = v20 + 4;
                  if (v22 >= v94) {
                    goto LABEL_66;
                  }
                  unint64_t v21 = v92[v22];
                  if (!v21)
                  {
                    while (1)
                    {
                      int64_t v16 = v22 + 1;
                      if (__OFADD__(v22, 1)) {
                        break;
                      }
                      if (v16 >= v94) {
                        goto LABEL_66;
                      }
                      unint64_t v21 = v92[v16];
                      ++v22;
                      if (v21) {
                        goto LABEL_29;
                      }
                    }
LABEL_129:
                    __break(1u);
LABEL_130:
                    __break(1u);
LABEL_131:
                    __break(1u);
LABEL_132:
                    swift_bridgeObjectRelease_n();
                    goto LABEL_133;
                  }
                  int64_t v16 = v22;
                }
              }
            }
          }
LABEL_29:
          unint64_t v14 = (v21 - 1) & v21;
          unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
        }
        unint64_t v23 = *(void **)(*(void *)(v7 + 48) + 8 * v19);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        Hasher.init(_seed:)();
        String.hash(into:)();
        Swift::Int v24 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        uint64_t v25 = -1 << *(unsigned char *)(v10 + 32);
        unint64_t v26 = v24 & ~v25;
        unint64_t v27 = v26 >> 6;
        if (((-1 << v26) & ~*(void *)(v15 + 8 * (v26 >> 6))) != 0)
        {
          unint64_t v17 = __clz(__rbit64((-1 << v26) & ~*(void *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v28 = 0;
          unint64_t v29 = (unint64_t)(63 - v25) >> 6;
          do
          {
            if (++v27 == v29 && (v28 & 1) != 0)
            {
              __break(1u);
              goto LABEL_124;
            }
            BOOL v30 = v27 == v29;
            if (v27 == v29) {
              unint64_t v27 = 0;
            }
            v28 |= v30;
            uint64_t v31 = *(void *)(v15 + 8 * v27);
          }
          while (v31 == -1);
          unint64_t v17 = __clz(__rbit64(~v31)) + (v27 << 6);
        }
        *(void *)(v15 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
        *(void *)(*(void *)(v10 + 48) + 8 * v17) = v23;
        ++*(void *)(v10 + 16);
      }
    }
LABEL_105:
    swift_release();
    goto LABEL_106;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
  if (v9 > v8)
  {
    unint64_t v32 = v3;
    uint64_t v33 = static _SetStorage.copy(original:)();
    uint64_t v10 = v33;
    if (!*(void *)(v7 + 16)) {
      goto LABEL_102;
    }
    __int16 v34 = (void *)(v33 + 56);
    uint64_t v35 = v7 + 56;
    unint64_t v36 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
    if (v10 != v7 || (unint64_t)v34 >= v35 + 8 * v36) {
      memmove(v34, (const void *)(v7 + 56), 8 * v36);
    }
    int64_t v37 = 0;
    *(void *)(v10 + 16) = *(void *)(v7 + 16);
    uint64_t v38 = 1 << *(unsigned char *)(v7 + 32);
    uint64_t v39 = -1;
    if (v38 < 64) {
      uint64_t v39 = ~(-1 << v38);
    }
    unint64_t v40 = v39 & *(void *)(v7 + 56);
    int64_t v41 = (unint64_t)(v38 + 63) >> 6;
    while (1)
    {
      if (v40)
      {
        unint64_t v42 = __clz(__rbit64(v40));
        v40 &= v40 - 1;
        unint64_t v43 = v42 | (v37 << 6);
      }
      else
      {
        int64_t v47 = v37 + 1;
        if (__OFADD__(v37, 1)) {
          goto LABEL_126;
        }
        if (v47 >= v41) {
          goto LABEL_102;
        }
        unint64_t v48 = *(void *)(v35 + 8 * v47);
        ++v37;
        if (!v48)
        {
          int64_t v37 = v47 + 1;
          if (v47 + 1 >= v41) {
            goto LABEL_102;
          }
          unint64_t v48 = *(void *)(v35 + 8 * v37);
          if (!v48)
          {
            int64_t v37 = v47 + 2;
            if (v47 + 2 >= v41) {
              goto LABEL_102;
            }
            unint64_t v48 = *(void *)(v35 + 8 * v37);
            if (!v48)
            {
              int64_t v37 = v47 + 3;
              if (v47 + 3 >= v41) {
                goto LABEL_102;
              }
              unint64_t v48 = *(void *)(v35 + 8 * v37);
              if (!v48)
              {
                int64_t v49 = v47 + 4;
                if (v49 >= v41) {
                  goto LABEL_102;
                }
                unint64_t v48 = *(void *)(v35 + 8 * v49);
                if (!v48)
                {
                  while (1)
                  {
                    int64_t v37 = v49 + 1;
                    if (__OFADD__(v49, 1)) {
                      goto LABEL_130;
                    }
                    if (v37 >= v41) {
                      break;
                    }
                    unint64_t v48 = *(void *)(v35 + 8 * v37);
                    ++v49;
                    if (v48) {
                      goto LABEL_65;
                    }
                  }
LABEL_102:
                  uint64_t result = swift_release();
                  *unint64_t v32 = v10;
LABEL_120:
                  *(void *)(v10 + 8 * (a2 >> 6) + 56) |= 1 << a2;
                  *(void *)(*(void *)(v10 + 48) + 8 * a2) = v6;
                  uint64_t v88 = *(void *)(v10 + 16);
                  BOOL v89 = __OFADD__(v88, 1);
                  uint64_t v90 = v88 + 1;
                  if (!v89)
                  {
                    *(void *)(v10 + 16) = v90;
                    return result;
                  }
LABEL_128:
                  __break(1u);
                  goto LABEL_129;
                }
                int64_t v37 = v49;
              }
            }
          }
        }
LABEL_65:
        unint64_t v40 = (v48 - 1) & v48;
        unint64_t v43 = __clz(__rbit64(v48)) + (v37 << 6);
      }
      uint64_t v44 = 8 * v43;
      unint64_t v45 = *(void **)(*(void *)(v7 + 48) + v44);
      *(void *)(*(void *)(v10 + 48) + v44) = v45;
      id v46 = v45;
    }
  }
  uint64_t v51 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v10 = v51;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_105;
  }
  uint64_t v52 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v93 = (void *)(v7 + 56);
  if (v52 < 64) {
    uint64_t v53 = ~(-1 << v52);
  }
  else {
    uint64_t v53 = -1;
  }
  unint64_t v54 = v53 & *(void *)(v7 + 56);
  int64_t v95 = (unint64_t)(v52 + 63) >> 6;
  uint64_t v55 = v51 + 56;
  swift_retain();
  int64_t v56 = 0;
  while (v54)
  {
    unint64_t v58 = __clz(__rbit64(v54));
    v54 &= v54 - 1;
    unint64_t v59 = v58 | (v56 << 6);
LABEL_93:
    unint64_t v63 = *(void **)(*(void *)(v7 + 48) + 8 * v59);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    Hasher.init(_seed:)();
    id v64 = v63;
    String.hash(into:)();
    Swift::Int v65 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    uint64_t v66 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v67 = v65 & ~v66;
    unint64_t v68 = v67 >> 6;
    if (((-1 << v67) & ~*(void *)(v55 + 8 * (v67 >> 6))) != 0)
    {
      unint64_t v57 = __clz(__rbit64((-1 << v67) & ~*(void *)(v55 + 8 * (v67 >> 6)))) | v67 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_74;
    }
    char v69 = 0;
    unint64_t v70 = (unint64_t)(63 - v66) >> 6;
    do
    {
      if (++v68 == v70 && (v69 & 1) != 0)
      {
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
        goto LABEL_128;
      }
      BOOL v71 = v68 == v70;
      if (v68 == v70) {
        unint64_t v68 = 0;
      }
      v69 |= v71;
      uint64_t v72 = *(void *)(v55 + 8 * v68);
    }
    while (v72 == -1);
    unint64_t v57 = __clz(__rbit64(~v72)) + (v68 << 6);
LABEL_74:
    *(void *)(v55 + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v57;
    *(void *)(*(void *)(v10 + 48) + 8 * v57) = v64;
    ++*(void *)(v10 + 16);
  }
  int64_t v60 = v56 + 1;
  if (__OFADD__(v56, 1)) {
    goto LABEL_127;
  }
  if (v60 >= v95)
  {
    swift_release_n();
    uint64_t v6 = v91;
    goto LABEL_106;
  }
  uint64_t v6 = v91;
  unint64_t v61 = v93[v60];
  ++v56;
  if (v61) {
    goto LABEL_92;
  }
  int64_t v56 = v60 + 1;
  if (v60 + 1 >= v95) {
    goto LABEL_123;
  }
  unint64_t v61 = v93[v56];
  if (v61) {
    goto LABEL_92;
  }
  int64_t v56 = v60 + 2;
  if (v60 + 2 >= v95) {
    goto LABEL_123;
  }
  unint64_t v61 = v93[v56];
  if (v61) {
    goto LABEL_92;
  }
  int64_t v56 = v60 + 3;
  if (v60 + 3 >= v95) {
    goto LABEL_123;
  }
  unint64_t v61 = v93[v56];
  if (v61)
  {
LABEL_92:
    unint64_t v54 = (v61 - 1) & v61;
    unint64_t v59 = __clz(__rbit64(v61)) + (v56 << 6);
    goto LABEL_93;
  }
  int64_t v62 = v60 + 4;
  if (v62 >= v95) {
    goto LABEL_123;
  }
  unint64_t v61 = v93[v62];
  if (v61)
  {
    int64_t v56 = v62;
    goto LABEL_92;
  }
  while (1)
  {
    int64_t v56 = v62 + 1;
    if (__OFADD__(v62, 1)) {
      goto LABEL_131;
    }
    if (v56 >= v95) {
      break;
    }
    unint64_t v61 = v93[v56];
    ++v62;
    if (v61) {
      goto LABEL_92;
    }
  }
LABEL_123:
  swift_release_n();
LABEL_106:
  *id v4 = v10;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v73 = Hasher._finalize()();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v74 = -1 << *(unsigned char *)(v10 + 32);
  a2 = v73 & ~v74;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
    goto LABEL_120;
  }
  id v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v10 + 48) + 8 * a2));
  uint64_t v77 = v76;
  if (v75 == static String._unconditionallyBridgeFromObjectiveC(_:)(v6) && v77 == v78) {
    goto LABEL_132;
  }
  char v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v80 & 1) == 0)
  {
    uint64_t v81 = ~v74;
    do
    {
      a2 = (a2 + 1) & v81;
      if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_120;
      }
      id v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v10 + 48) + 8 * a2));
      uint64_t v84 = v83;
      if (v82 == static String._unconditionallyBridgeFromObjectiveC(_:)(v6) && v84 == v85) {
        goto LABEL_132;
      }
      char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    while ((v87 & 1) == 0);
  }
LABEL_133:
  type metadata accessor for NSURLResourceKey(0);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AttributedString.characters.getter@<X0>(void *a1@<X8>)
{
  id v3 = *(_OWORD **)v1;
  long long v4 = *(_OWORD *)(*(void *)v1 + 16);
  long long v5 = *(_OWORD *)(*(void *)v1 + 48);
  v25[1] = *(_OWORD *)(*(void *)v1 + 32);
  v25[2] = v5;
  v25[0] = v4;
  swift_retain_n();
  outlined retain of Locale((uint64_t)v25);
  uint64_t v6 = BigString.startIndex.getter();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  outlined release of Locale((uint64_t)v25);
  long long v13 = v3[1];
  long long v14 = v3[3];
  v24[1] = v3[2];
  v24[2] = v14;
  v24[0] = v13;
  long long v15 = v3[1];
  v26[1] = v3[2];
  v26[2] = v14;
  v26[0] = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v26, (uint64_t)v27);
  outlined retain of Locale((uint64_t)v27);
  uint64_t v16 = BigString.endIndex.getter();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  outlined release of Locale((uint64_t)v24);
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v6;
  a1[2] = v8;
  a1[3] = v10;
  a1[4] = v12;
  a1[5] = v16;
  a1[6] = v18;
  a1[7] = v20;
  a1[8] = v22;
  a1[9] = 0;
  return result;
}

void addNotificationToQueue(void *a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v6 = (void *)a1[2];
    if (!v6) {
      return;
    }
    v16.version = 0;
    v16.info = a1;
    v16.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1E4F1C280];
    v16.release = (void (__cdecl *)(const void *))MEMORY[0x1E4F1C278];
    v16.copyDescription = (CFStringRef (__cdecl *)(const void *))MEMORY[0x1E4F1C220];
    uint64_t v7 = (void (__cdecl *)(CFRunLoopObserverRef, CFRunLoopActivity, void *))__NSPostASAPQueueNotes;
    CFOptionFlags v8 = 130;
  }
  else
  {
    uint64_t v6 = (void *)a1[3];
    if (!v6) {
      return;
    }
    v16.version = 0;
    v16.info = a1;
    v16.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1E4F1C280];
    v16.release = (void (__cdecl *)(const void *))MEMORY[0x1E4F1C278];
    v16.copyDescription = (CFStringRef (__cdecl *)(const void *))MEMORY[0x1E4F1C220];
    uint64_t v7 = (void (__cdecl *)(CFRunLoopObserverRef, CFRunLoopActivity, void *))__NSPostIdleQueueNotes;
    CFOptionFlags v8 = 32;
  }
  uint64_t v9 = CFRunLoopObserverCreate(0, v8, 0, 0, v7, &v16);
  objc_msgSend(v6, "addObject:", a2, v16.version, v16.info, v16.retain, v16.release, v16.copyDescription, v17);
  if (a3 && [a3 count]) {
    id v10 = (id)[a3 copy];
  }
  else {
    id v10 = (id)[MEMORY[0x1E4F1C978] arrayWithObject:*MEMORY[0x1E4F1C3A0]];
  }
  uint64_t v11 = v10;
  [v6 addObject:v10];
  uint64_t v12 = [v11 count];
  if (v12 >= 1)
  {
    uint64_t v13 = v12;
    for (uint64_t i = 0; i != v13; ++i)
    {
      Current = CFRunLoopGetCurrent();
      CFRunLoopAddObserver(Current, v9, (CFRunLoopMode)[v11 objectAtIndex:i]);
    }
  }
  CFRelease(v9);
}

uint64_t type metadata completion function for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy()
{
  uint64_t result = type metadata accessor for FloatingPointRoundingRule();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)(uint64_t *a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, long long *a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v25 = a1[1];
  uint64_t v26 = *a1;
  uint64_t v24 = a1[2];
  long long v27 = *a4;
  uint64_t v9 = *(void **)a5;
  uint64_t v10 = *(void *)(a5 + 8);
  uint64_t v11 = *(void *)(a5 + 16);
  char v12 = *(unsigned char *)(a5 + 24);
  uint64_t v13 = StaticString.description.getter();
  uint64_t v15 = v14;
  LocalizedStringResource.BundleDescription.resolvedURL.getter((uint64_t)v28);
  outlined consume of LocalizedStringResource.BundleDescription(v9, v10, v11, v12);
  CFRunLoopObserverContext v16 = (void *)v28[0];
  uint64_t v17 = v28[1];
  uint64_t v18 = v28[2];
  swift_retain();
  id v19 = v16;
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    URL.scheme.getter();
    if (v20)
    {
      Swift::String v21 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v21._countAndFlagsBits == 1701603686 && v21._object == (void *)0xE400000000000000)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
LABEL_9:
        *(void *)a6 = v13;
        *(void *)(a6 + 8) = v15;
        *(void *)(a6 + 16) = v26;
        *(void *)(a6 + 24) = v25;
        *(void *)(a6 + 32) = v24;
        *(void *)(a6 + 40) = a2;
        *(void *)(a6 + 48) = a3;
        *(_OWORD *)(a6 + 56) = v27;
        *(void *)(a6 + 72) = v19;
        *(void *)(a6 + 80) = v17;
        *(void *)(a6 + 96) = 0;
        *(void *)(a6 + 104) = 0;
        *(void *)(a6 + 88) = v18;
        return;
      }
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      if (v23) {
        goto LABEL_9;
      }
    }
    else
    {
      swift_release();
      swift_release();
    }
  }
  else
  {
    unsigned __int8 v22 = objc_msgSend(v19, sel_isFileURL);
    swift_release();
    swift_release();

    if (v22) {
      goto LABEL_9;
    }
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type IndexSet.RangeView and conformance IndexSet.RangeView()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView;
  if (!lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Region and conformance Locale.Region()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region;
  if (!lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region;
  if (!lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region;
  if (!lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region;
  if (!lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region;
  if (!lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Region and conformance Locale.Region);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Components and conformance Locale.Components()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Components and conformance Locale.Components;
  if (!lazy protocol witness table cache variable for type Locale.Components and conformance Locale.Components)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Locale.Components and conformance Locale.Components);
  }
  return result;
}

char *NSLog(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();

  return specialized withVaList<A>(_:_:)(a3);
}

unint64_t lazy protocol witness table accessor for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy;
  if (!lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.SignDisplayStrategy and conformance NumberFormatStyleConfiguration.SignDisplayStrategy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _XMLPlistEncodingFormat.Reference and conformance _XMLPlistEncodingFormat.Reference()
{
  unint64_t result = lazy protocol witness table cache variable for type _XMLPlistEncodingFormat.Reference and conformance _XMLPlistEncodingFormat.Reference;
  if (!lazy protocol witness table cache variable for type _XMLPlistEncodingFormat.Reference and conformance _XMLPlistEncodingFormat.Reference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _XMLPlistEncodingFormat.Reference and conformance _XMLPlistEncodingFormat.Reference);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationIntent and conformance PresentationIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent;
  if (!lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent;
  if (!lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationIntent and conformance PresentationIntent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.UnicodeScalarView and conformance AttributedString.UnicodeScalarView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.CodingKeys and conformance AttributedString.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DateComponents and conformance DateComponents()
{
  unint64_t result = lazy protocol witness table cache variable for type DateComponents and conformance DateComponents;
  if (!lazy protocol witness table cache variable for type DateComponents and conformance DateComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DateComponents and conformance DateComponents;
  if (!lazy protocol witness table cache variable for type DateComponents and conformance DateComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DateComponents and conformance DateComponents;
  if (!lazy protocol witness table cache variable for type DateComponents and conformance DateComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DateComponents and conformance DateComponents;
  if (!lazy protocol witness table cache variable for type DateComponents and conformance DateComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DateComponents and conformance DateComponents;
  if (!lazy protocol witness table cache variable for type DateComponents and conformance DateComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet()
{
  unint64_t result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet;
  if (!lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting()
{
  unint64_t result = lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSONEncoder.OutputFormatting and conformance JSONEncoder.OutputFormatting);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for ListFormatStyle<A, B>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t type metadata completion function for Duration.TimeFormatStyle()
{
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Attributed(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for Duration.TimeFormatStyle.Attributed(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for Duration.TimeFormatStyle.Attributed);
}

void *initializeWithCopy for NSKeyValueObservedChange(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (unint64_t)a1 + v5 + 8;
  uint64_t v17 = ~v5;
  unint64_t v7 = (unint64_t)a2 + v5 + 8;
  uint64_t v18 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v18(v7 & ~v5, 1, v3))
  {
    int v8 = *(_DWORD *)(v4 + 84);
    size_t v9 = *(void *)(v4 + 64);
    if (v8) {
      size_t v10 = *(void *)(v4 + 64);
    }
    else {
      size_t v10 = v9 + 1;
    }
    memcpy((void *)(v6 & ~v5), (const void *)(v7 & ~v5), v10);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 16))(v6 & ~v5, v7 & ~v5, v3);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v4 + 56))(v6 & ~v5, 0, 1, v3);
    int v8 = *(_DWORD *)(v4 + 84);
    size_t v9 = *(void *)(v4 + 64);
  }
  if (v8) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = v9 + 1;
  }
  char v12 = (void *)(((v6 | v5) + v11) & v17);
  uint64_t v13 = (const void *)(((v7 | v5) + v11) & v17);
  if (v18((unint64_t)v13, 1, v3))
  {
    memcpy(v12, v13, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v4 + 16))(v12, v13, v3);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v4 + 56))(v12, 0, 1, v3);
  }
  unint64_t v14 = ((unint64_t)v12 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v13 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  swift_retain();
  return a1;
}

uint64_t one-time initialization function for uk()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.MeasurementSystem.uk = 0x6D65747379736B75;
  unk_1E8ED2BA0 = 0xE800000000000000;
  xmmword_1E8ED2BA8 = (__int128)v1;
  return result;
}

uint64_t type metadata completion function for Duration.TimeFormatStyle.Pattern()
{
  uint64_t result = type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for Duration.TimeFormatStyle.Pattern.Fields);
}

uint64_t URLComponents.query.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(unsigned char *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 15) = 0;
  if (!a2)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 120) = a1;
    *(void *)(v3 + 128) = a2;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v27 = a1;
    uint64_t v28 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    size_t v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    size_t v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents);
    id v12 = v10;
    if (v11)
    {
      unint64_t v27 = a1;
      uint64_t v28 = a2;
      StringProtocol._ephemeralString.getter();
      uint64_t v13 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v13, sel_length);
      swift_unknownObjectRelease();
      char v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v11, (uint64_t)v14, 0x40u, 0);
    }
    else
    {
      char v15 = specialized Sequence.allSatisfy(_:)(a1, a2, 64);
    }
    char v16 = v15;
    uint64_t v8 = swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v27 = a1;
      uint64_t v28 = a2 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v6 = (char *)&v27;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      unint64_t v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 0);
    if (v8) {
      goto LABEL_8;
    }
  }
  uint64_t v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    unint64_t v27 = a1;
    uint64_t v28 = a2;
    MEMORY[0x1F4188790](v8);
    v25[2] = &v27;
    char v26 = 64;
    swift_bridgeObjectRetain();
    uint64_t v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v25, a1, a2);
    if (v19)
    {
      unint64_t v20 = (unint64_t)v18;
      unint64_t v21 = v19;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      unint64_t v22 = v27;
      unint64_t v23 = v28;
      swift_bridgeObjectRetain();
      unint64_t v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
      unint64_t v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v3 + 120) = v20;
  *(void *)(v3 + 128) = v21;
  return result;
}

void __initializeUnitDict_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F1C9E8] sharedKeySetForKeys:&unk_1ECAB8240];
  _MergedGlobals_8 = (uint64_t)(id)[MEMORY[0x1E4F1CA60] dictionaryWithSharedKeySet:v0];
  uint64_t v1 = [&unk_1ECAB8240 count];
  uint64_t v2 = (uint64_t *)malloc_type_malloc(8 * v1, 0x80040B8603338uLL);
  uint64_t v3 = (uint64_t *)malloc_type_malloc(8 * v1, 0x80040B8603338uLL);
  objc_msgSend(&unk_1ECAB8240, "getObjects:range:", v2, 0, v1);
  objc_msgSend(&unk_1ECAB8258, "getObjects:range:", v3, 0, v1);
  if (v1 >= 1)
  {
    uint64_t v4 = v3;
    uint64_t v5 = v2;
    do
    {
      uint64_t v7 = *v4++;
      uint64_t v6 = v7;
      uint64_t v8 = *v5++;
      [(id)_MergedGlobals_8 setObject:v6 forKey:v8];
      --v1;
    }
    while (v1);
  }
  free(v2);

  free(v3);
}

uint64_t AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  swift_bridgeObjectRetain();
  id v12 = (void *)swift_retain();
  specialized AttributedString._InternalRunsSlice.updateEach(with:)(v12, a3, a4, a1, a2);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if ((a5 & 1) == 0) {
    return result;
  }
  uint64_t v14 = *(void *)(v6 + 80);
  if (!*(void *)(v6 + 64))
  {
    unint64_t v46 = swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v46);
    return swift_unknownObjectRelease();
  }
  unint64_t v15 = swift_unknownObjectRetain_n();
  specialized Rope._endPath.getter(v15);
  uint64_t result = swift_unknownObjectRelease_n();
  if (!v14 || a3 == a4) {
    return result;
  }
  long long v16 = *(_OWORD *)(v6 + 32);
  v232[0] = *(_OWORD *)(v6 + 16);
  v232[1] = v16;
  long long v233 = *(_OWORD *)(v6 + 48);
  v234[0] = v232[0];
  v234[1] = v16;
  v234[2] = v233;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v234, (uint64_t)v235);
  outlined retain of Locale((uint64_t)v235);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v232);
  long long v17 = *(_OWORD *)(v6 + 32);
  v230[0] = *(_OWORD *)(v6 + 16);
  v230[1] = v17;
  long long v231 = *(_OWORD *)(v6 + 48);
  v236[0] = v230[0];
  v236[1] = v17;
  v236[2] = v231;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v236, (uint64_t)v237);
  outlined retain of Locale((uint64_t)v237);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v230);
  uint64_t v18 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  outlined release of Locale((uint64_t)v205);
  long long v25 = *(_OWORD *)(v6 + 32);
  v228[0] = *(_OWORD *)(v6 + 16);
  v228[1] = v25;
  long long v229 = *(_OWORD *)(v6 + 48);
  v238[0] = v228[0];
  v238[1] = v25;
  v238[2] = v229;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v238, (uint64_t)v239);
  outlined retain of Locale((uint64_t)v239);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v228);
  uint64_t v174 = a4;
  uint64_t v175 = a3;
  if (__OFSUB__(a4, a3)) {
    goto LABEL_258;
  }
  char v26 = (long long *)(v6 + 16);
  uint64_t v27 = v18;
  uint64_t v28 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v176 = (void *)v6;
  uint64_t v29 = v20;
  uint64_t v31 = v30;
  uint64_t v32 = v22;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  outlined release of Locale((uint64_t)v206);
  v221[0] = v27;
  v221[1] = v29;
  v221[2] = v32;
  v221[3] = v24;
  v221[4] = v28;
  v221[5] = v31;
  v221[6] = v34;
  v221[7] = v36;
  long long v37 = v26[1];
  long long v225 = *v26;
  long long v226 = v37;
  long long v227 = v26[2];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v207);
  long long v38 = v26[1];
  long long v222 = *v26;
  long long v223 = v38;
  v186 = v26;
  long long v224 = v26[2];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingUp:)();
  outlined release of Locale((uint64_t)v208);
  int64_t v39 = BigString.Index.utf8Offset.getter();
  uint64_t v189 = BigString.Index.utf8Offset.getter();
  if (v189 < v39)
  {
LABEL_259:
    __break(1u);
    goto LABEL_260;
  }
  uint64_t v40 = v176[8];
  if (v40) {
    int64_t v41 = v176[10];
  }
  else {
    int64_t v41 = 0;
  }
  if (v39 < 0 || v41 < v39)
  {
LABEL_260:
    __break(1u);
LABEL_261:
    __break(1u);
    goto LABEL_262;
  }
  uint64_t v42 = v176[9];
  unint64_t v43 = (_OWORD *)v176[11];
  if (v40 && *(_WORD *)(v40 + 16) && v39 < v176[10])
  {
    v188 = (long long *)v176[9];
    uint64_t v36 = *(unsigned __int8 *)(v40 + 18);
    if (!*(unsigned char *)(v40 + 18)) {
      goto LABEL_215;
    }
    swift_unknownObjectRetain_n();
    swift_retain_n();
    int64_t v44 = v39;
    uint64_t v45 = v40;
    while (1)
    {
      uint64_t v49 = *(unsigned __int16 *)(v45 + 16);
      if (*(_WORD *)(v45 + 16))
      {
        uint64_t v50 = *(void *)(v45 + 40);
        int64_t v51 = v44 - v50;
        if (__OFSUB__(v44, v50)) {
          goto LABEL_252;
        }
        if (__OFADD__(v51, 1)) {
          goto LABEL_253;
        }
        if (v51 + 1 <= 0)
        {
          uint64_t v49 = 0;
          goto LABEL_22;
        }
        if (v49 == 1)
        {
          v44 -= v50;
        }
        else
        {
          uint64_t v52 = *(void *)(v45 + 64);
          BOOL v53 = __OFSUB__(v51, v52);
          int64_t v54 = v51 - v52;
          if (v53) {
            goto LABEL_256;
          }
          if (__OFADD__(v54, 1)) {
            goto LABEL_257;
          }
          if (v54 + 1 < 1)
          {
            uint64_t v49 = 1;
            int64_t v44 = v51;
            goto LABEL_22;
          }
          if (v49 != 2)
          {
            uint64_t v55 = (void *)(v45 + 88);
            uint64_t v56 = 2;
            while (1)
            {
              if (v49 == v56) {
                goto LABEL_246;
              }
              int64_t v44 = v54 - *v55;
              if (__OFSUB__(v54, *v55)) {
                goto LABEL_247;
              }
              if (__OFADD__(v44, 1)) {
                goto LABEL_248;
              }
              if (v44 + 1 < 1) {
                break;
              }
              ++v56;
              v55 += 3;
              int64_t v54 = v44;
              if (v49 == v56) {
                goto LABEL_21;
              }
            }
            uint64_t v49 = v56;
            int64_t v44 = v54;
            goto LABEL_22;
          }
          int64_t v44 = v54;
        }
      }
LABEL_21:
      if (v44) {
        goto LABEL_251;
      }
LABEL_22:
      char v47 = (4 * *(unsigned char *)(v45 + 18) + 8) & 0x3C;
      uint64_t v36 = ((-15 << v47) - 1) & v36 | (v49 << v47);
      uint64_t v48 = *(void *)(v45 + 24 + 24 * v49);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      uint64_t v45 = v48;
      if (!*(unsigned char *)(v48 + 18)) {
        goto LABEL_216;
      }
    }
  }
  swift_retain_n();
  unint64_t v57 = swift_unknownObjectRetain_n();
  unint64_t v58 = specialized Rope._endPath.getter(v57);
  swift_unknownObjectRelease();
  uint64_t v48 = 0;
  int64_t v44 = 0;
  if (!v40) {
    goto LABEL_238;
  }
  while (1)
  {
    swift_unknownObjectRetain();
    uint64_t v59 = specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v43, v58, v48, v40, v42);
    swift_release();
    swift_unknownObjectRelease_n();
    int64_t v61 = v39 - v44;
    if (!__OFSUB__(v39, v44)) {
      break;
    }
    while (1)
    {
      __break(1u);
LABEL_241:
      uint64_t v168 = v60;
      int64_t v44 = v61;
LABEL_237:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v58 = v36 & 0xFFFFFFFFFFFFF0FFLL | (v168 << 8);
      uint64_t v42 = (uint64_t)v188;
      if (v40) {
        break;
      }
LABEL_238:
      swift_release();
      uint64_t v59 = 0;
      int64_t v61 = v39 - v44;
      if (!__OFSUB__(v39, v44)) {
        goto LABEL_45;
      }
    }
  }
LABEL_45:
  *(void *)&long long v200 = v176;
  *((void *)&v200 + 1) = v39;
  *(void *)&long long v201 = v189;
  *((void *)&v201 + 1) = v43;
  *(void *)&long long v202 = v58;
  *((void *)&v202 + 1) = v48;
  uint64_t v203 = v59;
  int64_t v204 = v61;
  specialized IndexingIterator.next()();
  if (!v62)
  {
    uint64_t v184 = MEMORY[0x1E4FBC868];
    goto LABEL_184;
  }
  uint64_t v40 = v62;
  uint64_t v48 = v63;
  uint64_t v36 = (uint64_t)&v191;
  uint64_t v184 = MEMORY[0x1E4FBC868];
  unint64_t v43 = v197;
  v188 = &v191;
  while (2)
  {
    long long v66 = v186[1];
    v219[0] = *v186;
    v219[1] = v66;
    long long v220 = v186[2];
    v241[0] = v219[0];
    v241[1] = v66;
    v241[2] = v220;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v241, (uint64_t)v242);
    outlined retain of Locale((uint64_t)v242);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v219);
    BigString.UTF8View.index(_:offsetBy:)();
    outlined release of Locale((uint64_t)v209);
    uint64_t v187 = v40 + 64;
    uint64_t v67 = 1 << *(unsigned char *)(v40 + 32);
    if (v67 < 64) {
      uint64_t v68 = ~(-1 << v67);
    }
    else {
      uint64_t v68 = -1;
    }
    unint64_t v69 = v68 & *(void *)(v40 + 64);
    int64_t v39 = (unint64_t)(v67 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    int64_t v71 = 0;
    do
    {
      if (v69)
      {
        unint64_t v72 = __clz(__rbit64(v69));
        v69 &= v69 - 1;
        unint64_t v73 = v72 | (v71 << 6);
      }
      else
      {
        int64_t v75 = v71 + 1;
        if (__OFADD__(v71, 1))
        {
          __break(1u);
          goto LABEL_229;
        }
        if (v75 >= v39) {
          goto LABEL_182;
        }
        unint64_t v76 = *(void *)(v187 + 8 * v75);
        ++v71;
        if (!v76)
        {
          int64_t v71 = v75 + 1;
          if (v75 + 1 >= v39) {
            goto LABEL_182;
          }
          unint64_t v76 = *(void *)(v187 + 8 * v71);
          if (!v76)
          {
            int64_t v71 = v75 + 2;
            if (v75 + 2 >= v39) {
              goto LABEL_182;
            }
            unint64_t v76 = *(void *)(v187 + 8 * v71);
            if (!v76)
            {
              int64_t v71 = v75 + 3;
              if (v75 + 3 >= v39) {
                goto LABEL_182;
              }
              unint64_t v76 = *(void *)(v187 + 8 * v71);
              if (!v76)
              {
                int64_t v71 = v75 + 4;
                if (v75 + 4 >= v39) {
                  goto LABEL_182;
                }
                unint64_t v76 = *(void *)(v187 + 8 * v71);
                if (!v76)
                {
                  int64_t v77 = v75 + 5;
                  if (v77 >= v39) {
                    goto LABEL_182;
                  }
                  unint64_t v76 = *(void *)(v187 + 8 * v77);
                  if (!v76)
                  {
                    while (1)
                    {
                      int64_t v71 = v77 + 1;
                      if (__OFADD__(v77, 1)) {
                        goto LABEL_255;
                      }
                      if (v71 >= v39) {
                        break;
                      }
                      unint64_t v76 = *(void *)(v187 + 8 * v71);
                      ++v77;
                      if (v76) {
                        goto LABEL_73;
                      }
                    }
LABEL_182:
                    swift_release();
                    swift_bridgeObjectRelease_n();
                    swift_bridgeObjectRelease_n();
                    goto LABEL_48;
                  }
                  int64_t v71 = v77;
                }
              }
            }
          }
        }
LABEL_73:
        unint64_t v69 = (v76 - 1) & v76;
        unint64_t v73 = __clz(__rbit64(v76)) + (v71 << 6);
      }
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v40 + 56) + 72 * v73, (uint64_t)&v196);
      long long v192 = v197[1];
      long long v193 = v198;
      *(void *)&long long v194 = v199;
      long long v190 = v196;
      long long v191 = v197[0];
      unint64_t v74 = v198;
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v190);
    }
    while (v74 < 2);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
    if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
      goto LABEL_47;
    }
    while (2)
    {
      long long v78 = v186[1];
      long long v216 = *v186;
      long long v217 = v78;
      long long v218 = v186[2];
      BigString.unicodeScalars.getter();
      LODWORD(v189) = BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v210);
      long long v79 = v186[1];
      long long v213 = *v186;
      long long v214 = v79;
      long long v215 = v186[2];
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.index(after:)();
      outlined release of Locale((uint64_t)v211);
      uint64_t v80 = 1 << *(unsigned char *)(v40 + 32);
      if (v80 < 64) {
        uint64_t v81 = ~(-1 << v80);
      }
      else {
        uint64_t v81 = -1;
      }
      unint64_t v82 = v81 & *(void *)(v40 + 64);
      int64_t v39 = (unint64_t)(v80 + 63) >> 6;
      swift_bridgeObjectRetain();
      int64_t v83 = 0;
      if (!v82)
      {
LABEL_86:
        int64_t v89 = v83 + 1;
        if (!__OFADD__(v83, 1))
        {
          if (v89 >= v39)
          {
            int64_t v91 = v83;
          }
          else
          {
            unint64_t v90 = *(void *)(v187 + 8 * v89);
            if (v90)
            {
LABEL_89:
              unint64_t v82 = (v90 - 1) & v90;
              unint64_t v85 = __clz(__rbit64(v90)) + (v89 << 6);
              int64_t v83 = v89;
              goto LABEL_85;
            }
            int64_t v91 = v83 + 1;
            if (v83 + 2 < v39)
            {
              unint64_t v90 = *(void *)(v187 + 8 * (v83 + 2));
              if (v90)
              {
                int64_t v89 = v83 + 2;
                goto LABEL_89;
              }
              int64_t v91 = v83 + 2;
              if (v83 + 3 < v39)
              {
                unint64_t v90 = *(void *)(v187 + 8 * (v83 + 3));
                if (v90)
                {
                  int64_t v89 = v83 + 3;
                  goto LABEL_89;
                }
                int64_t v89 = v83 + 4;
                int64_t v91 = v83 + 3;
                if (v83 + 4 < v39)
                {
                  unint64_t v90 = *(void *)(v187 + 8 * v89);
                  if (v90) {
                    goto LABEL_89;
                  }
                  while (v39 - 5 != v83)
                  {
                    unint64_t v90 = *(void *)(v40 + 104 + 8 * v83++);
                    if (v90)
                    {
                      int64_t v89 = v83 + 4;
                      goto LABEL_89;
                    }
                  }
                  int64_t v91 = v39 - 1;
                }
              }
            }
          }
          unint64_t v82 = 0;
          uint64_t v195 = 0;
          long long v193 = 0u;
          long long v194 = 0u;
          long long v191 = 0u;
          long long v192 = 0u;
          int64_t v83 = v91;
          long long v190 = 0u;
          goto LABEL_92;
        }
        __break(1u);
LABEL_215:
        swift_unknownObjectRetain_n();
        swift_retain_n();
        int64_t v44 = v39;
        uint64_t v48 = v40;
LABEL_216:
        uint64_t v168 = *(unsigned __int16 *)(v48 + 16);
        if (!*(_WORD *)(v48 + 16)) {
          goto LABEL_236;
        }
        uint64_t v169 = *(void *)(v48 + 24);
        int64_t v70 = v44 - v169;
        if (__OFSUB__(v44, v169))
        {
LABEL_268:
          __break(1u);
          goto LABEL_269;
        }
        if (__OFADD__(v70, 1))
        {
LABEL_269:
          __break(1u);
          goto LABEL_270;
        }
        if (v70 + 1 <= 0)
        {
          uint64_t v168 = 0;
          goto LABEL_237;
        }
        if (v168 == 1)
        {
          v44 -= v169;
          goto LABEL_236;
        }
        uint64_t v170 = *(void *)(v48 + 48);
        BOOL v53 = __OFSUB__(v70, v170);
        int64_t v61 = v70 - v170;
        if (v53)
        {
LABEL_270:
          __break(1u);
LABEL_271:
          __break(1u);
LABEL_272:
          __break(1u);
LABEL_273:
          __break(1u);
LABEL_274:
          __break(1u);
          goto LABEL_275;
        }
        if (__OFADD__(v61, 1)) {
          goto LABEL_271;
        }
        if (v61 + 1 < 1)
        {
LABEL_229:
          uint64_t v168 = 1;
          int64_t v44 = v70;
          goto LABEL_237;
        }
        if (v168 == 2)
        {
          int64_t v44 = v61;
LABEL_236:
          if (!v44) {
            goto LABEL_237;
          }
LABEL_267:
          __break(1u);
          goto LABEL_268;
        }
        uint64_t v171 = (void *)(v48 + 72);
        uint64_t v60 = 2;
        while (v168 != v60)
        {
          int64_t v44 = v61 - *v171;
          if (__OFSUB__(v61, *v171)) {
            goto LABEL_265;
          }
          if (__OFADD__(v44, 1)) {
            goto LABEL_266;
          }
          if (v44 + 1 < 1) {
            goto LABEL_241;
          }
          ++v60;
          v171 += 3;
          int64_t v61 = v44;
          if (v168 == v60) {
            goto LABEL_236;
          }
        }
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
        goto LABEL_267;
      }
      while (1)
      {
        unint64_t v84 = __clz(__rbit64(v82));
        v82 &= v82 - 1;
        unint64_t v85 = v84 | (v83 << 6);
LABEL_85:
        uint64_t v86 = *(void *)(v40 + 56);
        char v87 = (void *)(*(void *)(v40 + 48) + 16 * v85);
        uint64_t v88 = v87[1];
        *(void *)&long long v190 = *v87;
        *((void *)&v190 + 1) = v88;
        outlined init with copy of AttributedString._AttributeValue(v86 + 72 * v85, (uint64_t)&v191);
        swift_bridgeObjectRetain();
LABEL_92:
        outlined init with take of LocalePreferences?((uint64_t)&v190, (uint64_t)&v196, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
        uint64_t v92 = *((void *)&v196 + 1);
        if (!*((void *)&v196 + 1)) {
          break;
        }
        uint64_t v93 = v196;
        uint64_t v95 = *((void *)&v198 + 1);
        unint64_t v94 = v199;
        outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v198 + 1), v199);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v197);
        if (v94 < 2) {
          goto LABEL_83;
        }
        uint64_t v96 = HIBYTE(v94) & 0xF;
        if ((v94 & 0x2000000000000000) == 0) {
          uint64_t v96 = v95 & 0xFFFFFFFFFFFFLL;
        }
        if (v96)
        {
          if ((v94 & 0x1000000000000000) != 0)
          {
            int v98 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          }
          else if ((v94 & 0x2000000000000000) != 0)
          {
            if ((v95 & 0x80) != 0)
            {
              switch(__clz(~(_BYTE)v95))
              {
                case 0x1Au:
                  int v98 = (v95 >> 8) & 0x3F | ((v95 & 0x1F) << 6);
                  break;
                case 0x1Bu:
                  int v98 = (v95 >> 2) & 0xFC0 | ((v95 & 0xF) << 12) | WORD1(v95) & 0x3F;
                  break;
                case 0x1Cu:
                  int v98 = (16 * v95) & 0x3F000 | ((v95 & 0xF) << 18) | (v95 >> 10) & 0xFC0 | BYTE3(v95) & 0x3F;
                  break;
                default:
                  goto LABEL_105;
              }
            }
            else
            {
LABEL_105:
              int v98 = v95;
            }
          }
          else
          {
            if ((v95 & 0x1000000000000000) != 0) {
              uint64_t v97 = (char *)((v94 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }
            else {
              uint64_t v97 = (char *)_StringObject.sharedUTF8.getter();
            }
            int v98 = *v97;
            if (*v97 < 0)
            {
              switch(__clz(v98 ^ 0xFF))
              {
                case 0x1Au:
                  int v98 = v97[1] & 0x3F | ((v98 & 0x1F) << 6);
                  break;
                case 0x1Bu:
                  int v98 = ((v98 & 0xF) << 12) | ((v97[1] & 0x3F) << 6) | v97[2] & 0x3F;
                  break;
                case 0x1Cu:
                  int v98 = ((v98 & 0xF) << 18) | ((v97[1] & 0x3F) << 12) | ((v97[2] & 0x3F) << 6) | v97[3] & 0x3F;
                  break;
                default:
                  break;
              }
            }
          }
          outlined consume of AttributedString.AttributeRunBoundaries?(v95, v94);
          BOOL v99 = v98 == v189;
          uint64_t v36 = (uint64_t)&v191;
          if (v99) {
            goto LABEL_83;
          }
          uint64_t v100 = BigString.Index.utf8Offset.getter();
          uint64_t v182 = BigString.Index.utf8Offset.getter();
          uint64_t v183 = v100;
          if (v182 < v100)
          {
            __break(1u);
LABEL_243:
            __break(1u);
LABEL_244:
            __break(1u);
LABEL_245:
            __break(1u);
LABEL_246:
            __break(1u);
LABEL_247:
            __break(1u);
LABEL_248:
            __break(1u);
LABEL_249:
            __break(1u);
LABEL_250:
            __break(1u);
LABEL_251:
            __break(1u);
LABEL_252:
            __break(1u);
LABEL_253:
            __break(1u);
LABEL_254:
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            __break(1u);
LABEL_257:
            __break(1u);
LABEL_258:
            __break(1u);
            goto LABEL_259;
          }
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v190 = v184;
          unint64_t v103 = specialized __RawDictionaryStorage.find<A>(_:)(v93, v92);
          uint64_t v104 = *(void *)(v184 + 16);
          char v179 = v102;
          BOOL v105 = (v102 & 1) == 0;
          uint64_t v106 = v104 + v105;
          if (__OFADD__(v104, v105)) {
            goto LABEL_243;
          }
          if (*(void *)(v184 + 24) >= v106)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              uint64_t v107 = v184;
              char v110 = v102;
            }
            else
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [Range<Int>]>);
              unint64_t v178 = v103;
              uint64_t v124 = static _DictionaryStorage.copy(original:)();
              uint64_t v107 = v124;
              char v110 = v179;
              if (*(void *)(v184 + 16))
              {
                unint64_t v125 = (char *)(v124 + 64);
                int v126 = (char *)(v184 + 64);
                unint64_t v127 = (unint64_t)((1 << *(unsigned char *)(v107 + 32)) + 63) >> 6;
                uint64_t v172 = v184 + 64;
                if (v107 != v184 || v125 >= &v126[8 * v127]) {
                  memmove(v125, v126, 8 * v127);
                }
                int64_t v128 = 0;
                uint64_t v181 = v107;
                *(void *)(v107 + 16) = *(void *)(v184 + 16);
                uint64_t v129 = 1 << *(unsigned char *)(v184 + 32);
                if (v129 < 64) {
                  uint64_t v130 = ~(-1 << v129);
                }
                else {
                  uint64_t v130 = -1;
                }
                unint64_t v131 = v130 & *(void *)(v184 + 64);
                int64_t v173 = (unint64_t)(v129 + 63) >> 6;
                while (1)
                {
                  if (v131)
                  {
                    unint64_t v132 = __clz(__rbit64(v131));
                    v131 &= v131 - 1;
                    int64_t v133 = v128;
                    unint64_t v134 = v132 | (v128 << 6);
                  }
                  else
                  {
                    int64_t v141 = v128 + 1;
                    if (__OFADD__(v128, 1)) {
                      goto LABEL_272;
                    }
                    uint64_t v107 = v181;
                    unint64_t v103 = v178;
                    if (v141 >= v173) {
                      break;
                    }
                    unint64_t v142 = *(void *)(v172 + 8 * v141);
                    int64_t v143 = v128 + 1;
                    if (!v142)
                    {
                      int64_t v143 = v128 + 2;
                      if (v128 + 2 >= v173) {
                        break;
                      }
                      unint64_t v142 = *(void *)(v172 + 8 * v143);
                      if (!v142)
                      {
                        int64_t v143 = v128 + 3;
                        if (v128 + 3 >= v173) {
                          break;
                        }
                        unint64_t v142 = *(void *)(v172 + 8 * v143);
                        if (!v142)
                        {
                          int64_t v143 = v128 + 4;
                          if (v128 + 4 >= v173) {
                            break;
                          }
                          unint64_t v142 = *(void *)(v172 + 8 * v143);
                          if (!v142)
                          {
                            int64_t v143 = v128 + 5;
                            if (v128 + 5 >= v173) {
                              break;
                            }
                            unint64_t v142 = *(void *)(v172 + 8 * v143);
                            if (!v142)
                            {
                              uint64_t v144 = v128 + 6;
                              if (v128 + 6 >= v173) {
                                break;
                              }
                              unint64_t v142 = *(void *)(v172 + 8 * v144);
                              if (!v142)
                              {
                                uint64_t v107 = v181;
                                unint64_t v103 = v178;
                                char v110 = v179;
                                while (1)
                                {
                                  int64_t v143 = v144 + 1;
                                  if (__OFADD__(v144, 1)) {
                                    goto LABEL_273;
                                  }
                                  if (v143 >= v173) {
                                    goto LABEL_181;
                                  }
                                  unint64_t v142 = *(void *)(v172 + 8 * v143);
                                  ++v144;
                                  if (v142) {
                                    goto LABEL_180;
                                  }
                                }
                              }
                              int64_t v143 = v128 + 6;
                            }
                          }
                        }
                      }
                    }
LABEL_180:
                    unint64_t v131 = (v142 - 1) & v142;
                    int64_t v133 = v143;
                    unint64_t v134 = __clz(__rbit64(v142)) + (v143 << 6);
                  }
                  uint64_t v135 = 16 * v134;
                  int v136 = (void *)(*(void *)(v184 + 48) + 16 * v134);
                  uint64_t v137 = v136[1];
                  uint64_t v138 = 8 * v134;
                  uint64_t v139 = *(void *)(*(void *)(v184 + 56) + v138);
                  uint64_t v140 = (void *)(*(void *)(v181 + 48) + v135);
                  *uint64_t v140 = *v136;
                  v140[1] = v137;
                  *(void *)(*(void *)(v181 + 56) + v138) = v139;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  char v110 = v179;
                  int64_t v128 = v133;
                }
              }
LABEL_181:
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v106, isUniquelyReferenced_nonNull_native);
            uint64_t v107 = v190;
            unint64_t v108 = specialized __RawDictionaryStorage.find<A>(_:)(v93, v92);
            char v110 = v179;
            if ((v179 & 1) != (v109 & 1)) {
              goto LABEL_276;
            }
            unint64_t v103 = v108;
          }
          swift_bridgeObjectRelease();
          if ((v110 & 1) == 0)
          {
            *(void *)(v107 + 8 * (v103 >> 6) + 64) |= 1 << v103;
            unsigned int v111 = (uint64_t *)(*(void *)(v107 + 48) + 16 * v103);
            *unsigned int v111 = v93;
            v111[1] = v92;
            *(void *)(*(void *)(v107 + 56) + 8 * v103) = MEMORY[0x1E4FBC860];
            uint64_t v112 = *(void *)(v107 + 16);
            BOOL v53 = __OFADD__(v112, 1);
            uint64_t v113 = v112 + 1;
            if (v53) {
              goto LABEL_245;
            }
            *(void *)(v107 + 16) = v113;
            swift_bridgeObjectRetain();
          }
          uint64_t v180 = v107;
          uint64_t v114 = *(void *)(v107 + 56);
          unint64_t v177 = v103;
          uint64_t v115 = *(void **)(v114 + 8 * v103);
          unint64_t v116 = v115[2];
          if (v116 && (unint64_t v117 = v116 - 1, v115[2 * v116 + 3] == v183))
          {
            if (v182 < v115[2 * v117 + 4]) {
              goto LABEL_249;
            }
            uint64_t v185 = v115[2 * v117 + 4];
            char v118 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v114 + 8 * v177) = v115;
            if ((v118 & 1) == 0)
            {
              uint64_t v115 = specialized _ArrayBuffer._consumeAndCreateNew()(v115);
              *(void *)(v114 + 8 * v177) = v115;
            }
            uint64_t v119 = v185;
            if (v116 > v115[2]) {
              goto LABEL_250;
            }
            __int16 v120 = &v115[2 * v117];
          }
          else
          {
            char v121 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v114 + 8 * v177) = v115;
            if ((v121 & 1) == 0)
            {
              uint64_t v115 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v115[2] + 1, 1, v115);
              *(void *)(v114 + 8 * v177) = v115;
            }
            unint64_t v123 = v115[2];
            unint64_t v122 = v115[3];
            if (v123 >= v122 >> 1)
            {
              uint64_t v115 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v122 > 1), v123 + 1, 1, v115);
              *(void *)(v114 + 8 * v177) = v115;
            }
            v115[2] = v123 + 1;
            __int16 v120 = &v115[2 * v123];
            uint64_t v119 = v183;
          }
          v120[4] = v119;
          v120[5] = v182;
          swift_bridgeObjectRelease_n();
          uint64_t v184 = v180;
          uint64_t v36 = (uint64_t)&v191;
          if (!v82) {
            goto LABEL_86;
          }
        }
        else
        {
          outlined consume of AttributedString.AttributeRunBoundaries?(v95, v94);
LABEL_83:
          swift_bridgeObjectRelease();
          if (!v82) {
            goto LABEL_86;
          }
        }
      }
      swift_release();
      if (static BigString.Index.< infix(_:_:)()) {
        continue;
      }
      break;
    }
LABEL_47:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_48:
    specialized IndexingIterator.next()();
    uint64_t v40 = v64;
    uint64_t v48 = v65;
    if (v64) {
      continue;
    }
    break;
  }
LABEL_184:
  swift_release();
  int64_t v145 = 0;
  uint64_t v146 = v184;
  uint64_t v147 = v184 + 64;
  uint64_t v148 = 1 << *(unsigned char *)(v184 + 32);
  uint64_t v149 = -1;
  if (v148 < 64) {
    uint64_t v149 = ~(-1 << v148);
  }
  unint64_t v150 = v149 & *(void *)(v184 + 64);
  int64_t v151 = (unint64_t)(v148 + 63) >> 6;
  while (2)
  {
    if (v150)
    {
      unint64_t v152 = __clz(__rbit64(v150));
      v150 &= v150 - 1;
      unint64_t v153 = v152 | (v145 << 6);
LABEL_203:
      uint64_t v157 = *(void *)(*(void *)(v146 + 56) + 8 * v153);
      uint64_t v158 = *(void *)(v157 + 16);
      if (v158)
      {
        uint64_t v159 = (uint64_t *)(*(void *)(v146 + 48) + 16 * v153);
        uint64_t v161 = *v159;
        uint64_t v160 = v159[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v162 = (void *)(v157 + 40);
        do
        {
          AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v161, v160, *(v162 - 1), *v162, 0);
          v162 += 2;
          --v158;
        }
        while (v158);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v146 = v184;
      }
      continue;
    }
    break;
  }
  int64_t v154 = v145 + 1;
  if (__OFADD__(v145, 1)) {
    goto LABEL_244;
  }
  if (v154 < v151)
  {
    unint64_t v155 = *(void *)(v147 + 8 * v154);
    ++v145;
    if (!v155)
    {
      int64_t v145 = v154 + 1;
      if (v154 + 1 >= v151) {
        goto LABEL_207;
      }
      unint64_t v155 = *(void *)(v147 + 8 * v145);
      if (!v155)
      {
        int64_t v145 = v154 + 2;
        if (v154 + 2 >= v151) {
          goto LABEL_207;
        }
        unint64_t v155 = *(void *)(v147 + 8 * v145);
        if (!v155)
        {
          int64_t v156 = v154 + 3;
          if (v156 >= v151) {
            goto LABEL_207;
          }
          unint64_t v155 = *(void *)(v147 + 8 * v156);
          if (!v155)
          {
            while (1)
            {
              int64_t v145 = v156 + 1;
              if (__OFADD__(v156, 1)) {
                goto LABEL_254;
              }
              if (v145 >= v151) {
                goto LABEL_207;
              }
              unint64_t v155 = *(void *)(v147 + 8 * v145);
              ++v156;
              if (v155) {
                goto LABEL_202;
              }
            }
          }
          int64_t v145 = v156;
        }
      }
    }
LABEL_202:
    unint64_t v150 = (v155 - 1) & v155;
    unint64_t v153 = __clz(__rbit64(v155)) + (v145 << 6);
    goto LABEL_203;
  }
LABEL_207:
  swift_release();
  long long v196 = 0uLL;
  uint64_t v163 = AttributedString.Guts._constrainedAttributes(at:with:)(v175, (uint64_t *)&v196);
  long long v164 = v186[1];
  long long v200 = *v186;
  long long v201 = v164;
  long long v202 = v186[2];
  long long v190 = v200;
  long long v191 = v164;
  long long v192 = v202;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v190, (uint64_t)v240);
  outlined retain of Locale((uint64_t)v240);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)&v200);
  specialized BidirectionalCollection<>._getBlock(for:in:)(3, (uint64_t)v221, (uint64_t *)&v196);
  outlined release of Locale((uint64_t)v212);
  if (*((void *)&v197[0] + 1) == 2) {
    goto LABEL_274;
  }
  if (*((void *)&v198 + 1) == 2)
  {
LABEL_275:
    __break(1u);
LABEL_276:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  if (static BigString.Index.< infix(_:_:)()) {
    goto LABEL_261;
  }
  uint64_t v165 = BigString.Index.utf8Offset.getter();
  uint64_t v166 = BigString.Index.utf8Offset.getter();
  if (v165 > v175)
  {
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
    goto LABEL_264;
  }
  uint64_t v167 = v166;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized AttributedString._InternalRunsSlice.updateEach(with:)(v176, v165, v175, v163);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v167 < v174) {
    goto LABEL_263;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized AttributedString._InternalRunsSlice.updateEach(with:)(v176, v174, v167, v163);
  swift_release();
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease_n();
}

uint64_t base witness table accessor for Equatable in NSSearchPathDomainMask()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSSearchPathDomainMask and conformance NSSearchPathDomainMask, type metadata accessor for NSSearchPathDomainMask);
}

id @objc static NSLocale._isoLanguageCodes.getter(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)_ContiguousArrayBuffer._asCocoaArray()();

  return v3;
}

uint64_t type metadata completion function for _AttributedStringFromMarkdownCreatorConcrete()
{
  return swift_initClassMetadata2();
}

uint64_t StringProtocol.compare<A>(_:options:range:locale:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  int v58 = a5;
  uint64_t v55 = a4;
  uint64_t v56 = a3;
  unint64_t v57 = a2;
  uint64_t v12 = *(void *)(a8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v25 = MEMORY[0x1F4188790](v20);
  if (!*v22)
  {
    id v54 = v21;
    uint64_t v27 = v24;
    (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v53 - v23, v9, a7, v25);
    unint64_t v28 = Substring.init<A>(_:)();
    unint64_t v30 = v29;
    unint64_t v32 = v31;
    unint64_t v34 = v33;
    if ((v58 & 1) == 0)
    {
      unint64_t v28 = Substring.subscript.getter();
      unint64_t v30 = v35;
      unint64_t v32 = v36;
      unint64_t v38 = v37;
      swift_bridgeObjectRelease();
      unint64_t v34 = v38;
    }
    unint64_t v39 = v57;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v27, a8);
    unint64_t v40 = Substring.init<A>(_:)();
    id v44 = (id)Substring._unlocalizedCompare(other:options:)(v40, v41, v42, v43, v39, v28, v30, v32, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v44;
  }
  uint64_t v26 = v22[1];
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  id v54 = (id)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v53 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v9, a7);
  if (v58)
  {
    dispatch thunk of Collection.startIndex.getter();
    unint64_t v45 = v60;
    dispatch thunk of Collection.endIndex.getter();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, a7);
    if (v59 >> 14 < v45 >> 14) {
      goto LABEL_12;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, a7);
  }
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v48 = v47 - result;
  if (!__OFSUB__(v47, result))
  {
    uint64_t v49 = result;
    uint64_t ObjectType = swift_getObjectType();
    int64_t v51 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 488);
    swift_unknownObjectRetain();
    uint64_t v52 = (void *)v51(ObjectType, v26);
    swift_unknownObjectRelease();
    id v44 = objc_msgSend(v54, sel_compare_options_range_locale_, v53, v57, v49, v48, v52);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    return (uint64_t)v44;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t Substring._unlocalizedCompare(other:options:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, unint64_t a9)
{
  if (!a5)
  {
    if (a8 == a3)
    {
      BOOL v18 = a9 == a4 && a6 >> 16 == a1 >> 16;
      if (v18 && a7 >> 16 == a2 >> 16) {
        return 0;
      }
    }
    uint64_t v17 = 1;
    if (_stringCompareInternal(_:_:_:_:expecting:)()) {
      return -1;
    }
    if ((_stringCompareInternal(_:_:_:_:expecting:)() & 1) == 0) {
      return 0;
    }
    return v17;
  }
  if ((a5 & 2) != 0)
  {
    unsigned int v22 = (a5 >> 9) & 1;
    uint64_t v25 = (a5 >> 6) & 1;
    int v24 = a5 & 1;
    uint64_t v23 = (a5 >> 8) & 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v17 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(a1, a2, a3, a4, v23, (a5 >> 7) & 1, v24, v25, v22, a6, a7, a8, a9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((a5 & 0x200) == 0) {
      return v17;
    }
  }
  else
  {
    uint64_t v17 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(a1, a2, a3, a4, (a5 >> 8) & 1, (a5 >> 7) & 1, a5 & 1, (a5 >> 6) & 1, (a5 & 0x200) != 0, a6, a7, a8, a9);
    if ((a5 & 0x200) == 0) {
      return v17;
    }
  }
  if (!v17)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v21 = Substring.UnicodeScalarView._compare(_:)(a1, a2, a3, a4, a6, a7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v21;
  }
  return v17;
}

uint64_t static PredicateExpressions.KeyPath.kind<A>(_:collectionType:)@<X0>(char *a1@<X8>)
{
  type metadata accessor for PartialKeyPath();
  swift_dynamicCastClassUnconditional();
  swift_getKeyPath();
  type metadata accessor for AnyKeyPath();
  swift_retain();
  char v2 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if ((v2 & 1) == 0)
  {
    swift_getKeyPath();
    swift_retain();
    char v3 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    uint64_t v4 = swift_release();
    if ((v3 & 1) == 0)
    {
      MEMORY[0x1F4188790](v4);
      swift_getKeyPath();
      swift_retain();
      char v5 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      swift_release();
      if ((v5 & 1) == 0)
      {
        swift_getKeyPath();
        swift_retain();
        char v7 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        swift_release();
        if (v7) {
          goto LABEL_9;
        }
        swift_getKeyPath();
        swift_retain();
        char v8 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        uint64_t v9 = swift_release();
        if ((v8 & 1) != 0
          || (MEMORY[0x1F4188790](v9),
              swift_getKeyPath(),
              swift_retain(),
              char v10 = dispatch thunk of static Equatable.== infix(_:_:)(),
              swift_release(),
              uint64_t v11 = swift_release(),
              (v10 & 1) != 0))
        {
LABEL_9:
          uint64_t result = swift_release();
          char v12 = 1;
        }
        else
        {
          MEMORY[0x1F4188790](v11);
          swift_getKeyPath();
          swift_retain();
          char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
          swift_release();
          uint64_t v14 = swift_release();
          if (v13)
          {
            uint64_t result = swift_release();
            char v12 = 2;
          }
          else
          {
            MEMORY[0x1F4188790](v14);
            swift_getKeyPath();
            swift_retain();
            char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
            swift_release();
            swift_release();
            if (v15)
            {
              uint64_t result = swift_release();
              char v12 = 3;
            }
            else
            {
              uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
              if (swift_conformsToProtocol2()) {
                uint64_t v17 = AssociatedTypeWitness;
              }
              else {
                uint64_t v17 = 0;
              }
              if (v17)
              {
                static PredicateExpressions.KeyPath.kind<A, B>(_:hashableElementType:)(a1);
                return swift_release();
              }
              uint64_t result = swift_release();
              char v12 = 4;
            }
          }
        }
        *a1 = v12;
        return result;
      }
    }
  }
  uint64_t result = swift_release();
  *a1 = 0;
  return result;
}

Swift::Void __swiftcall URL.appendPathComponent(_:)(Swift::String a1)
{
  char v2 = v1;
  object = a1._object;
  unint64_t countAndFlagsBits = a1._countAndFlagsBits;
  id v5 = (id)*v1;
  uint64_t v6 = (unsigned char *)v1[1];
  uint64_t v7 = v1[2];
  if (_foundation_swift_url_feature_enabled())
  {
    if (_foundation_swift_url_feature_enabled())
    {
      specialized URL.appending<A>(path:directoryHint:encodingSlashes:)(countAndFlagsBits, object, 2, 0, v5, v6, v7, &v96);

LABEL_6:
      swift_release();
      swift_release();
LABEL_25:
      uint64_t v6 = (unsigned char *)*((void *)&v96 + 1);
      id v5 = (id)v96;
      uint64_t v7 = *(void *)v97;
      goto LABEL_26;
    }
    v9._unint64_t countAndFlagsBits = 47;
    v9._object = (void *)0xE100000000000000;
    Swift::Bool v10 = String.hasSuffix(_:)(v9);
    swift_retain();
    id v5 = v5;
    swift_retain();
    if (_foundation_swift_url_feature_enabled())
    {
      *(void *)&long long v96 = v5;
      *((void *)&v96 + 1) = v6;
      *(void *)uint64_t v97 = v7;
      URL.scheme.getter();
      if (v11)
      {
        Swift::String v12 = String.lowercased()();
        swift_bridgeObjectRelease();
        if (v12._countAndFlagsBits == 1701603686 && v12._object == (void *)0xE400000000000000)
        {
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        if (v24)
        {
LABEL_21:
          *(void *)&long long v96 = countAndFlagsBits;
          *((void *)&v96 + 1) = object;
          swift_bridgeObjectRetain();
          String.init<A>(_:)();
          uint64_t v25 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v26 = objc_msgSend(v5, sel_URLByAppendingPathComponent_, v25);
          swift_unknownObjectRelease();
          if (!v26)
          {
            LODWORD(v27) = 2;
LABEL_27:
            *(void *)&long long v96 = v5;
            *((void *)&v96 + 1) = v6;
            *(void *)uint64_t v97 = v7;
            uint64_t v29 = URL.absoluteString.getter();
            specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v29, v30, 1, (uint64_t)v86);
            outlined init with take of LocalePreferences?((uint64_t)v86, (uint64_t)v85, &demangling cache variable for type metadata for URLComponents._URLComponents?);
            outlined init with take of LocalePreferences?((uint64_t)v86, (uint64_t)&v87, &demangling cache variable for type metadata for URLComponents._URLComponents?);
            if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v87) != 1)
            {
              long long v98 = v93;
              *(_OWORD *)BOOL v99 = v94;
              *(_OWORD *)&v99[16] = v95[0];
              *(_OWORD *)&v99[26] = *(_OWORD *)((char *)v95 + 10);
              *(_OWORD *)&v97[16] = v89;
              *(_OWORD *)&v97[32] = v90;
              *(_OWORD *)&v97[48] = v91;
              *(_OWORD *)&v97[64] = v92;
              long long v96 = v87;
              *(_OWORD *)uint64_t v97 = v88;
              outlined init with take of LocalePreferences?((uint64_t)v85, (uint64_t)v84, &demangling cache variable for type metadata for URLComponents._URLComponents?);
              outlined retain of URLComponents((uint64_t)v84);
              URLComponents._URLComponents.path.getter();
              outlined release of URLComponents?(v86);
              unint64_t v31 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              unint64_t v73 = countAndFlagsBits;
              unint64_t v74 = (unint64_t)object;
              swift_bridgeObjectRetain();
              String.init<A>(_:)();
              uint64_t v32 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v33 = objc_msgSend(v31, sel_stringByAppendingPathComponent_, v32);
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              unint64_t v34 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
              unint64_t v36 = v35;

              unint64_t v37 = (v36 & 0x2000000000000000) != 0 ? HIBYTE(v36) & 0xF : v34 & 0xFFFFFFFFFFFFLL;
              outlined init with take of LocalePreferences?((uint64_t)&v98 + 8, (uint64_t)v100, &demangling cache variable for type metadata for String?);
              if (v37)
              {
                swift_bridgeObjectRetain();
                unint64_t v37 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v34, v36);
                unint64_t v39 = v38;
                swift_bridgeObjectRelease();
              }
              else
              {
                unint64_t v39 = 0xE000000000000000;
              }
              outlined release of String((uint64_t)v100);
              if (!v27
                || v27 == 2
                || (v49._unint64_t countAndFlagsBits = 47, v49._object = (void *)0xE100000000000000, String.hasSuffix(_:)(v49)))
              {
                swift_bridgeObjectRelease();
              }
              else
              {
                unint64_t v73 = v34;
                unint64_t v74 = v36;
                swift_bridgeObjectRetain();
                v50._unint64_t countAndFlagsBits = 47;
                v50._object = (void *)0xE100000000000000;
                String.append(_:)(v50);
                swift_bridgeObjectRelease();
                unint64_t v51 = HIBYTE(v36) & 0xF;
                if ((v36 & 0x2000000000000000) == 0) {
                  unint64_t v51 = v73 & 0xFFFFFFFFFFFFLL;
                }
                if (v51)
                {
                  unint64_t v37 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v73, v74);
                  unint64_t v53 = v52;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unint64_t v39 = v53;
                }
                else
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unint64_t v37 = 0;
                  unint64_t v39 = 0xE000000000000000;
                }
              }
              unint64_t v73 = v96;
              LOBYTE(v74) = 0;
              *(_DWORD *)((char *)&v74 + 1) = *(_DWORD *)((char *)&v96 + 9);
              *(_WORD *)((char *)&v74 + 5) = BYTE13(v96);
              HIBYTE(v74) = HIBYTE(v96);
              char v75 = v97[0];
              *(_OWORD *)unint64_t v76 = *(_OWORD *)&v97[8];
              *(_OWORD *)&v76[16] = *(_OWORD *)&v97[24];
              *(_OWORD *)&v76[32] = *(_OWORD *)&v97[40];
              *(_OWORD *)&v76[48] = *(_OWORD *)&v97[56];
              *(void *)&v76[64] = *(void *)&v97[72];
              char v77 = v98;
              unint64_t v78 = v37;
              unint64_t v79 = v39;
              long long v80 = *(_OWORD *)&v99[8];
              long long v81 = *(_OWORD *)&v99[24];
              char v82 = v99[40];
              char v83 = v99[41];
              URLComponents.url.getter(&v70);
              outlined release of URLComponents((uint64_t)&v73);
              uint64_t v46 = v70;
              if (v70)
              {
                uint64_t v48 = v71;
                uint64_t v47 = v72;
                swift_release();
                swift_release();

                goto LABEL_43;
              }
            }
            goto LABEL_26;
          }
LABEL_24:
          URL.init(reference:)(v26, &v96);
          swift_release();
          swift_release();

          goto LABEL_25;
        }
      }
      else
      {
        swift_release();
        swift_release();
      }
    }
    else
    {
      unsigned __int8 v23 = objc_msgSend(v5, sel_isFileURL);
      swift_release();
      swift_release();

      if (v23) {
        goto LABEL_21;
      }
    }
    uint64_t v27 = v10;
    *(void *)&long long v96 = countAndFlagsBits;
    *((void *)&v96 + 1) = object;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    uint64_t v28 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v26 = objc_msgSend(v5, sel_URLByAppendingPathComponent_isDirectory_, v28, v27);
    swift_unknownObjectRelease();
    if (!v26) {
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  id v8 = objc_msgSend(v5, sel_URLByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v8)
  {
    URL.init(reference:)(v8, &v96);

    goto LABEL_6;
  }
  *(void *)&long long v96 = v5;
  *((void *)&v96 + 1) = v6;
  *(void *)uint64_t v97 = v7;
  uint64_t v13 = URL.absoluteString.getter();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v13, v14, 1, (uint64_t)v86);
  outlined init with take of LocalePreferences?((uint64_t)v86, (uint64_t)v85, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?((uint64_t)v86, (uint64_t)&v87, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v87) != 1)
  {
    long long v98 = v93;
    *(_OWORD *)BOOL v99 = v94;
    *(_OWORD *)&v99[16] = v95[0];
    *(_OWORD *)&v99[26] = *(_OWORD *)((char *)v95 + 10);
    *(_OWORD *)&v97[16] = v89;
    *(_OWORD *)&v97[32] = v90;
    *(_OWORD *)&v97[48] = v91;
    *(_OWORD *)&v97[64] = v92;
    long long v96 = v87;
    *(_OWORD *)uint64_t v97 = v88;
    outlined init with take of LocalePreferences?((uint64_t)v85, (uint64_t)v84, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v84);
    URLComponents._URLComponents.path.getter();
    outlined release of URLComponents?(v86);
    char v15 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v16 = objc_msgSend(v15, sel_stringByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v17 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    unint64_t v19 = v18;

    uint64_t v20 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000) == 0) {
      uint64_t v20 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (v20)
    {
      unint64_t v21 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v17, v19);
      unint64_t v68 = v22;
      unint64_t v69 = v21;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v68 = 0xE000000000000000;
      unint64_t v69 = 0;
    }
    char v66 = v99[40];
    char v67 = v99[41];
    uint64_t v64 = *(void *)&v99[32];
    uint64_t v65 = *(void *)&v99[24];
    uint64_t v62 = *(void *)&v99[16];
    uint64_t v63 = *(void *)&v99[8];
    char v61 = v98;
    long long v60 = *(_OWORD *)&v97[64];
    long long v59 = *(_OWORD *)&v97[48];
    long long v58 = *(_OWORD *)&v97[32];
    uint64_t v57 = *(void *)&v97[8];
    long long v56 = *(_OWORD *)&v97[16];
    char v54 = HIBYTE(v96);
    char v55 = v97[0];
    unsigned __int8 v40 = BYTE13(v96);
    char v41 = BYTE12(v96);
    char v42 = BYTE11(v96);
    char v43 = BYTE10(v96);
    char v44 = BYTE9(v96);
    unint64_t v45 = v96;
    outlined init with take of LocalePreferences?((uint64_t)&v98 + 8, (uint64_t)v100, &demangling cache variable for type metadata for String?);
    outlined release of String((uint64_t)v100);
    unint64_t v73 = v45;
    LOBYTE(v74) = 0;
    BYTE1(v74) = v44;
    BYTE2(v74) = v43;
    BYTE3(v74) = v42;
    BYTE4(v74) = v41;
    *(_WORD *)((char *)&v74 + 5) = v40;
    HIBYTE(v74) = v54;
    char v75 = v55;
    *(void *)unint64_t v76 = v57;
    *(_OWORD *)&v76[8] = v56;
    *(_OWORD *)&v76[24] = v58;
    *(_OWORD *)&v76[40] = v59;
    *(_OWORD *)&v76[56] = v60;
    char v77 = v61;
    unint64_t v78 = v69;
    unint64_t v79 = v68;
    *(void *)&long long v80 = v63;
    *((void *)&v80 + 1) = v62;
    *(void *)&long long v81 = v65;
    *((void *)&v81 + 1) = v64;
    char v82 = v66;
    char v83 = v67;
    URLComponents.url.getter(&v70);
    outlined release of URLComponents((uint64_t)&v73);
    uint64_t v46 = v70;
    if (v70)
    {
      uint64_t v48 = v71;
      uint64_t v47 = v72;

      swift_release();
      swift_release();
LABEL_43:
      id v5 = (id)v46;
      uint64_t v6 = v48;
      uint64_t v7 = v47;
    }
  }
LABEL_26:
  *char v2 = v5;
  v2[1] = v6;
  v2[2] = v7;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(uint64_t a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(unsigned char *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    char v2 = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v51;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      if ((v2 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v19 = *(void *)(v16 + 56) + 24 * v12;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v19, *(void *)(v19 + 8), *(unsigned char *)(v19 + 16));
      *(void *)uint64_t v19 = a1;
      *(void *)(v19 + 8) = 0;
      *(unsigned char *)(v19 + 16) = 2;
LABEL_47:
      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v16 = v51;
      if (v11) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0, 2, (void *)v16);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v20 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v20;
  if (!*(void *)(v51 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
  unint64_t v21 = (char *)(v20 + 64);
  unint64_t v22 = (char *)(v51 + 64);
  unint64_t v23 = (unint64_t)((1 << *(unsigned char *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v51 + 64;
  if (v16 != v51 || v21 >= &v22[8 * v23]) {
    memmove(v21, v22, 8 * v23);
  }
  int64_t v24 = 0;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v25 = 1 << *(unsigned char *)(v51 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v27 = v26 & *(void *)(v51 + 64);
  int64_t v45 = (unint64_t)(v25 + 63) >> 6;
  while (1)
  {
    if (v27)
    {
      uint64_t v48 = (v27 - 1) & v27;
      int64_t v49 = v24;
      unint64_t v28 = __clz(__rbit64(v27)) | (v24 << 6);
      goto LABEL_19;
    }
    int64_t v39 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v39 >= v45) {
      goto LABEL_45;
    }
    unint64_t v40 = *(void *)(v44 + 8 * v39);
    int64_t v41 = v24 + 1;
    if (!v40)
    {
      int64_t v41 = v24 + 2;
      if (v24 + 2 >= v45) {
        goto LABEL_45;
      }
      unint64_t v40 = *(void *)(v44 + 8 * v41);
      if (!v40)
      {
        int64_t v41 = v24 + 3;
        if (v24 + 3 >= v45) {
          goto LABEL_45;
        }
        unint64_t v40 = *(void *)(v44 + 8 * v41);
        if (!v40)
        {
          int64_t v41 = v24 + 4;
          if (v24 + 4 >= v45) {
            goto LABEL_45;
          }
          unint64_t v40 = *(void *)(v44 + 8 * v41);
          if (!v40)
          {
            int64_t v41 = v24 + 5;
            if (v24 + 5 >= v45) {
              goto LABEL_45;
            }
            unint64_t v40 = *(void *)(v44 + 8 * v41);
            if (!v40)
            {
              int64_t v41 = v24 + 6;
              if (v24 + 6 >= v45) {
                goto LABEL_45;
              }
              unint64_t v40 = *(void *)(v44 + 8 * v41);
              if (!v40)
              {
                int64_t v41 = v24 + 7;
                if (v24 + 7 >= v45) {
                  goto LABEL_45;
                }
                unint64_t v40 = *(void *)(v44 + 8 * v41);
                if (!v40)
                {
                  int64_t v41 = v24 + 8;
                  if (v24 + 8 >= v45) {
                    goto LABEL_45;
                  }
                  unint64_t v40 = *(void *)(v44 + 8 * v41);
                  if (!v40) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    uint64_t v48 = (v40 - 1) & v40;
    int64_t v49 = v41;
    unint64_t v28 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_19:
    uint64_t v29 = 24 * v28;
    uint64_t v30 = *(void *)(v51 + 48) + v29;
    uint64_t v31 = *(void *)v30;
    unint64_t v32 = *(void *)(v30 + 8);
    uint64_t v33 = *(void *)(v51 + 56) + v29;
    uint64_t v46 = *(void *)v33;
    uint64_t v34 = *(void *)v33;
    unint64_t v47 = *(void *)(v33 + 8);
    uint64_t v35 = *(void *)(v16 + 48) + v29;
    char v36 = *(unsigned char *)(v30 + 16);
    char v37 = *(unsigned char *)(v33 + 16);
    *(void *)uint64_t v35 = *(void *)v30;
    *(void *)(v35 + 8) = v32;
    *(unsigned char *)(v35 + 16) = v36;
    uint64_t v38 = *(void *)(v16 + 56) + v29;
    *(void *)uint64_t v38 = v34;
    *(void *)(v38 + 8) = v47;
    *(unsigned char *)(v38 + 16) = v37;
    outlined copy of _XMLPlistEncodingFormat.Reference(v31, v32, v36);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v37);
    unint64_t v27 = v48;
    int64_t v24 = v49;
  }
  uint64_t v42 = v24 + 9;
  if (v24 + 9 >= v45) {
    goto LABEL_45;
  }
  unint64_t v40 = *(void *)(v44 + 8 * v42);
  if (v40)
  {
    int64_t v41 = v24 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v41 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      break;
    }
    if (v41 >= v45) {
      goto LABEL_45;
    }
    unint64_t v40 = *(void *)(v44 + 8 * v41);
    ++v42;
    if (v40) {
      goto LABEL_44;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v51;

  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(unsigned char *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    char v2 = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v51;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      if ((v2 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v19 = *(void *)(v16 + 56) + 24 * v12;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v19, *(void *)(v19 + 8), *(unsigned char *)(v19 + 16));
      *(void *)uint64_t v19 = a1;
      *(void *)(v19 + 8) = 0;
      *(unsigned char *)(v19 + 16) = 1;
LABEL_47:
      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v16 = v51;
      if (v11) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0, 1, (void *)v16);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v20 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v20;
  if (!*(void *)(v51 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
  unint64_t v21 = (char *)(v20 + 64);
  unint64_t v22 = (char *)(v51 + 64);
  unint64_t v23 = (unint64_t)((1 << *(unsigned char *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v51 + 64;
  if (v16 != v51 || v21 >= &v22[8 * v23]) {
    memmove(v21, v22, 8 * v23);
  }
  int64_t v24 = 0;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v25 = 1 << *(unsigned char *)(v51 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v27 = v26 & *(void *)(v51 + 64);
  int64_t v45 = (unint64_t)(v25 + 63) >> 6;
  while (1)
  {
    if (v27)
    {
      uint64_t v48 = (v27 - 1) & v27;
      int64_t v49 = v24;
      unint64_t v28 = __clz(__rbit64(v27)) | (v24 << 6);
      goto LABEL_19;
    }
    int64_t v39 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v39 >= v45) {
      goto LABEL_45;
    }
    unint64_t v40 = *(void *)(v44 + 8 * v39);
    int64_t v41 = v24 + 1;
    if (!v40)
    {
      int64_t v41 = v24 + 2;
      if (v24 + 2 >= v45) {
        goto LABEL_45;
      }
      unint64_t v40 = *(void *)(v44 + 8 * v41);
      if (!v40)
      {
        int64_t v41 = v24 + 3;
        if (v24 + 3 >= v45) {
          goto LABEL_45;
        }
        unint64_t v40 = *(void *)(v44 + 8 * v41);
        if (!v40)
        {
          int64_t v41 = v24 + 4;
          if (v24 + 4 >= v45) {
            goto LABEL_45;
          }
          unint64_t v40 = *(void *)(v44 + 8 * v41);
          if (!v40)
          {
            int64_t v41 = v24 + 5;
            if (v24 + 5 >= v45) {
              goto LABEL_45;
            }
            unint64_t v40 = *(void *)(v44 + 8 * v41);
            if (!v40)
            {
              int64_t v41 = v24 + 6;
              if (v24 + 6 >= v45) {
                goto LABEL_45;
              }
              unint64_t v40 = *(void *)(v44 + 8 * v41);
              if (!v40)
              {
                int64_t v41 = v24 + 7;
                if (v24 + 7 >= v45) {
                  goto LABEL_45;
                }
                unint64_t v40 = *(void *)(v44 + 8 * v41);
                if (!v40)
                {
                  int64_t v41 = v24 + 8;
                  if (v24 + 8 >= v45) {
                    goto LABEL_45;
                  }
                  unint64_t v40 = *(void *)(v44 + 8 * v41);
                  if (!v40) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    uint64_t v48 = (v40 - 1) & v40;
    int64_t v49 = v41;
    unint64_t v28 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_19:
    uint64_t v29 = 24 * v28;
    uint64_t v30 = *(void *)(v51 + 48) + v29;
    uint64_t v31 = *(void *)v30;
    unint64_t v32 = *(void *)(v30 + 8);
    uint64_t v33 = *(void *)(v51 + 56) + v29;
    uint64_t v46 = *(void *)v33;
    uint64_t v34 = *(void *)v33;
    unint64_t v47 = *(void *)(v33 + 8);
    uint64_t v35 = *(void *)(v16 + 48) + v29;
    char v36 = *(unsigned char *)(v30 + 16);
    char v37 = *(unsigned char *)(v33 + 16);
    *(void *)uint64_t v35 = *(void *)v30;
    *(void *)(v35 + 8) = v32;
    *(unsigned char *)(v35 + 16) = v36;
    uint64_t v38 = *(void *)(v16 + 56) + v29;
    *(void *)uint64_t v38 = v34;
    *(void *)(v38 + 8) = v47;
    *(unsigned char *)(v38 + 16) = v37;
    outlined copy of _XMLPlistEncodingFormat.Reference(v31, v32, v36);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v37);
    unint64_t v27 = v48;
    int64_t v24 = v49;
  }
  uint64_t v42 = v24 + 9;
  if (v24 + 9 >= v45) {
    goto LABEL_45;
  }
  unint64_t v40 = *(void *)(v44 + 8 * v42);
  if (v40)
  {
    int64_t v41 = v24 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v41 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      break;
    }
    if (v41 >= v45) {
      goto LABEL_45;
    }
    unint64_t v40 = *(void *)(v44 + 8 * v41);
    ++v42;
    if (v40) {
      goto LABEL_44;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void protocol witness for Subscription.request(_:) in conformance NSTimer.TimerPublisher.Inner<A>(uint64_t a1)
{
}

void NSTimer.TimerPublisher.Inner.request(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v14 - v7;
  unint64_t v9 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(v3 + 120));
  os_unfair_lock_lock(v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, (uint64_t)v1 + *(void *)(*v1 + 96), v5);
  LODWORD(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v8, 1, v4);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v4 == 1) {
    goto LABEL_11;
  }
  uint64_t v10 = *(void *)(*v1 + 104);
  uint64_t v11 = *(uint64_t *)((char *)v1 + v10);
  static Subscribers.Demand.unlimited.getter();
  if (static Subscribers.Demand.== infix(_:_:)()) {
    goto LABEL_11;
  }
  static Subscribers.Demand.unlimited.getter();
  char v12 = static Subscribers.Demand.== infix(_:_:)();
  uint64_t v13 = static Subscribers.Demand.unlimited.getter();
  if (v12)
  {
LABEL_10:
    *(uint64_t *)((char *)v1 + v10) = v13;
LABEL_11:
    os_unfair_lock_unlock(v9);
    return;
  }
  if (static Subscribers.Demand.== infix(_:_:)()) {
    goto LABEL_8;
  }
  if ((v11 | a1) < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v13 = v11 + a1;
  if (__OFADD__(v11, a1))
  {
LABEL_8:
    uint64_t v13 = static Subscribers.Demand.unlimited.getter();
    goto LABEL_10;
  }
  if ((v13 & 0x8000000000000000) == 0) {
    goto LABEL_10;
  }
LABEL_13:
  __break(1u);
}

uint64_t specialized Data.init(bytesNoCopy:count:deallocator:)(unint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v5 = *a3;
  if (*a3 >= 4)
  {
    uint64_t v7 = (void (*)(unint64_t, uint64_t))*a3;
    uint64_t v6 = a3[1];
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = (void (*)(unint64_t, uint64_t))off_1ECA5B2C8[v5];
    if (a2)
    {
LABEL_3:
      type metadata accessor for __DataStorage();
      uint64_t v8 = (void *)swift_allocObject();
      outlined copy of Data.Deallocator(v5);
      swift_retain();
      __DataStorage.init(bytes:length:copy:deallocator:offset:)(a1, a2, 0, v7, v6, 0);
      uint64_t v9 = specialized Data._Representation.init(_:count:)(v8, a2);
      swift_release();
      goto LABEL_9;
    }
  }
  if (v5 >= 4) {
    uint64_t v10 = (uint64_t (*)())*a3;
  }
  else {
    uint64_t v10 = off_1ECA5B2C8[v5];
  }
  outlined copy of Data.Deallocator(*a3);
  outlined copy of Data.Deallocator(v5);
  ((void (*)(unint64_t, void))v10)(a1, 0);
  swift_release();
  swift_release();
  uint64_t v9 = 0;
LABEL_9:
  outlined consume of Data.Deallocator(v5);
  return v9;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(uint64_t a1, uint64_t a2)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1, a2);
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 8);
  unint64_t v6 = *(void *)(v2 + 16);
  int v7 = *(unsigned __int8 *)(v2 + 24);
  swift_bridgeObjectRetain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v5, v6, v7);
  uint64_t v8 = dispatch thunk of CodingKey.stringValue.getter();
  if (v7 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v10 = v8;
  unint64_t v11 = v9;
  swift_bridgeObjectRetain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v5, v6, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = 0x8000000000000000;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11, 0);
  uint64_t v15 = *(void *)(v54 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    char v3 = v13;
    if (*(void *)(v54 + 24) < v17)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, isUniquelyReferenced_nonNull_native);
      uint64_t v18 = v54;
      uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11, 0);
      if ((v3 & 1) != (v20 & 1)) {
        goto LABEL_51;
      }
      unint64_t v14 = v19;
      if ((v3 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v21 = *(void *)(v18 + 56) + 24 * v14;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v21, *(void *)(v21 + 8), *(unsigned char *)(v21 + 16));
      *(void *)uint64_t v21 = a1;
      *(void *)(v21 + 8) = a2;
      *(unsigned char *)(v21 + 16) = 0;
LABEL_47:
      *(void *)(v5 + 16) = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, 7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, 7);
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v18 = v54;
      if (v13) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v14, v10, v11, 0, a1, a2, 0, (void *)v18);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  unint64_t v46 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v22 = static _DictionaryStorage.copy(original:)();
  uint64_t v18 = v22;
  if (!*(void *)(v54 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    unint64_t v14 = v46;
    if (v3) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
  unint64_t v23 = (char *)(v22 + 64);
  int64_t v24 = (char *)(v54 + 64);
  unint64_t v25 = (unint64_t)((1 << *(unsigned char *)(v18 + 32)) + 63) >> 6;
  uint64_t v47 = v54 + 64;
  if (v18 != v54 || v23 >= &v24[8 * v25]) {
    memmove(v23, v24, 8 * v25);
  }
  int64_t v26 = 0;
  *(void *)(v18 + 16) = *(void *)(v54 + 16);
  uint64_t v27 = 1 << *(unsigned char *)(v54 + 32);
  uint64_t v28 = -1;
  if (v27 < 64) {
    uint64_t v28 = ~(-1 << v27);
  }
  unint64_t v29 = v28 & *(void *)(v54 + 64);
  int64_t v48 = (unint64_t)(v27 + 63) >> 6;
  while (1)
  {
    if (v29)
    {
      uint64_t v51 = (v29 - 1) & v29;
      int64_t v52 = v26;
      unint64_t v30 = __clz(__rbit64(v29)) | (v26 << 6);
      goto LABEL_19;
    }
    int64_t v41 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v41 >= v48) {
      goto LABEL_45;
    }
    unint64_t v42 = *(void *)(v47 + 8 * v41);
    int64_t v43 = v26 + 1;
    if (!v42)
    {
      int64_t v43 = v26 + 2;
      if (v26 + 2 >= v48) {
        goto LABEL_45;
      }
      unint64_t v42 = *(void *)(v47 + 8 * v43);
      if (!v42)
      {
        int64_t v43 = v26 + 3;
        if (v26 + 3 >= v48) {
          goto LABEL_45;
        }
        unint64_t v42 = *(void *)(v47 + 8 * v43);
        if (!v42)
        {
          int64_t v43 = v26 + 4;
          if (v26 + 4 >= v48) {
            goto LABEL_45;
          }
          unint64_t v42 = *(void *)(v47 + 8 * v43);
          if (!v42)
          {
            int64_t v43 = v26 + 5;
            if (v26 + 5 >= v48) {
              goto LABEL_45;
            }
            unint64_t v42 = *(void *)(v47 + 8 * v43);
            if (!v42)
            {
              int64_t v43 = v26 + 6;
              if (v26 + 6 >= v48) {
                goto LABEL_45;
              }
              unint64_t v42 = *(void *)(v47 + 8 * v43);
              if (!v42)
              {
                int64_t v43 = v26 + 7;
                if (v26 + 7 >= v48) {
                  goto LABEL_45;
                }
                unint64_t v42 = *(void *)(v47 + 8 * v43);
                if (!v42)
                {
                  int64_t v43 = v26 + 8;
                  if (v26 + 8 >= v48) {
                    goto LABEL_45;
                  }
                  unint64_t v42 = *(void *)(v47 + 8 * v43);
                  if (!v42) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    uint64_t v51 = (v42 - 1) & v42;
    int64_t v52 = v43;
    unint64_t v30 = __clz(__rbit64(v42)) + (v43 << 6);
LABEL_19:
    uint64_t v31 = 24 * v30;
    uint64_t v32 = *(void *)(v54 + 48) + v31;
    uint64_t v33 = *(void *)v32;
    unint64_t v34 = *(void *)(v32 + 8);
    uint64_t v35 = *(void *)(v54 + 56) + v31;
    uint64_t v49 = *(void *)v35;
    uint64_t v36 = *(void *)v35;
    unint64_t v50 = *(void *)(v35 + 8);
    uint64_t v37 = *(void *)(v18 + 48) + v31;
    char v38 = *(unsigned char *)(v32 + 16);
    char v39 = *(unsigned char *)(v35 + 16);
    *(void *)uint64_t v37 = *(void *)v32;
    *(void *)(v37 + 8) = v34;
    *(unsigned char *)(v37 + 16) = v38;
    uint64_t v40 = *(void *)(v18 + 56) + v31;
    *(void *)uint64_t v40 = v36;
    *(void *)(v40 + 8) = v50;
    *(unsigned char *)(v40 + 16) = v39;
    outlined copy of _XMLPlistEncodingFormat.Reference(v33, v34, v38);
    outlined copy of _XMLPlistEncodingFormat.Reference(v49, v50, v39);
    unint64_t v29 = v51;
    int64_t v26 = v52;
  }
  uint64_t v44 = v26 + 9;
  if (v26 + 9 >= v48) {
    goto LABEL_45;
  }
  unint64_t v42 = *(void *)(v47 + 8 * v44);
  if (v42)
  {
    int64_t v43 = v26 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v43 = v44 + 1;
    if (__OFADD__(v44, 1)) {
      break;
    }
    if (v43 >= v48) {
      goto LABEL_45;
    }
    unint64_t v42 = *(void *)(v47 + 8 * v43);
    ++v44;
    if (v42) {
      goto LABEL_44;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id NSDictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    unint64_t v33 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    unint64_t v3 = a1 + 32;
    unint64_t v4 = (unint64_t)v28;
    uint64_t v5 = a1 + 32;
    int64_t v26 = v2;
    unint64_t v6 = v2;
    do
    {
      outlined init with copy of (Hashable & Sendable)?(v5, (uint64_t)v30, &demangling cache variable for type metadata for (Any, Any));
      outlined init with copy of Any((uint64_t)v30, (uint64_t)v27);
      outlined init with copy of Any((uint64_t)&v32, (uint64_t)v28);
      uint64_t v7 = v29;
      uint64_t v2 = __swift_project_boxed_opaque_existential_1(v28, v29);
      uint64_t isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      if (isClassOrObjCExistentialType)
      {
        if (*(void *)(*(void *)(v7 - 8) + 64) != 8)
        {
          __break(1u);
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
        swift_unknownObjectRetain();
      }
      else
      {
        v25[1] = v25;
        double v9 = MEMORY[0x1F4188790](isClassOrObjCExistentialType);
        (*(void (**)(char *, void *, uint64_t, double))(v11 + 16))((char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v7, v9);
        _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
      outlined destroy of Any?((uint64_t)v30, &demangling cache variable for type metadata for (Any, Any));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v5 += 64;
      unint64_t v6 = (void *)((char *)v6 - 1);
    }
    while (v6);
    unint64_t v4 = v33;
    v27[0] = MEMORY[0x1E4FBC860];
    uint64_t v2 = v26;
    specialized ContiguousArray.reserveCapacity(_:)();
    char v12 = v2;
    do
    {
      outlined init with copy of (Hashable & Sendable)?(v3, (uint64_t)v30, &demangling cache variable for type metadata for (Any, Any));
      uint64_t v13 = v31;
      unint64_t v14 = __swift_project_boxed_opaque_existential_1(v30, v31);
      uint64_t v15 = _swift_isClassOrObjCExistentialType();
      if (v15)
      {
        if (*(void *)(*(void *)(v13 - 8) + 64) != 8) {
          goto LABEL_27;
        }
        swift_unknownObjectRetain();
      }
      else
      {
        double v16 = MEMORY[0x1F4188790](v15);
        (*(void (**)(char *, void *, uint64_t, double))(v18 + 16))((char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v14, v13, v16);
        _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      }
      outlined destroy of Any?((uint64_t)v30, &demangling cache variable for type metadata for (Any, Any));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v3 += 64;
      char v12 = (void *)((char *)v12 - 1);
    }
    while (v12);
    unint64_t v3 = v27[0];
    swift_bridgeObjectRelease();
    if (!(v4 >> 62)) {
      goto LABEL_16;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v3 = MEMORY[0x1E4FBC860];
    unint64_t v4 = MEMORY[0x1E4FBC860];
    if (!(MEMORY[0x1E4FBC860] >> 62))
    {
LABEL_16:
      uint64_t v19 = v4 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = -8;
    if (!(v3 >> 62)) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
LABEL_28:
  uint64_t v19 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v4);
  swift_bridgeObjectRelease_n();
LABEL_17:
  uint64_t v20 = v19 + 32;
  if (!(v3 >> 62))
  {
LABEL_18:
    uint64_t v21 = v3 & 0xFFFFFFFFFFFFFF8;
    goto LABEL_19;
  }
LABEL_24:
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = -8;
    goto LABEL_20;
  }
  uint64_t v21 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v3);
  swift_bridgeObjectRelease_n();
LABEL_19:
  uint64_t v22 = v21 + 32;
LABEL_20:
  id v23 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithObjects_forKeys_count_, v20, v22, v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v23;
}

uint64_t type metadata completion function for ListFormatStyle()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(void *a1, uint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      *(void *)&long long __dst = *a1;
      *((void *)&__dst + 1) = v4 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_1821115B0;
      char v8 = specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)((int *)&__dst, a2, a3, a4);
      swift_bridgeObjectRelease();
      uint64_t v10 = *((void *)&__dst + 1) | 0x4000000000000000;
      *a1 = __dst;
      a1[1] = v10;
      break;
    case 2uLL:
      *(void *)&long long __dst = *a1;
      *((void *)&__dst + 1) = v4 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_1821115B0;
      char v8 = specialized Data.LargeSlice.withUnsafeMutableBytes<A>(_:)((uint64_t *)&__dst, a2, a3, a4);
      swift_bridgeObjectRelease();
      unint64_t v9 = *((void *)&__dst + 1) | 0x8000000000000000;
      *a1 = __dst;
      a1[1] = v9;
      break;
    case 3uLL:
      *(void *)((char *)&__dst + 7) = 0;
      *(void *)&long long __dst = 0;
      specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a2, a3, (char *)&__dst, 0);
      if (a4 == 2) {
        char v8 = _allASCII(_:)((char *)&__dst, 0);
      }
      else {
        char v8 = a4 & 1;
      }
      swift_bridgeObjectRelease();
      break;
    default:
      *(void *)&long long __dst = *a1;
      WORD4(__dst) = v4;
      BYTE10(__dst) = BYTE2(v4);
      BYTE11(__dst) = BYTE3(v4);
      BYTE12(__dst) = BYTE4(v4);
      BYTE13(__dst) = BYTE5(v4);
      uint64_t v7 = BYTE6(v4);
      BYTE14(__dst) = BYTE6(v4);
      specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a2, a3, (char *)&__dst, BYTE6(v4));
      if (a4 == 2) {
        char v8 = _allASCII(_:)((char *)&__dst, v7);
      }
      else {
        char v8 = a4 & 1;
      }
      uint64_t v11 = __dst;
      uint64_t v12 = DWORD2(__dst);
      uint64_t v13 = BYTE12(__dst);
      uint64_t v14 = BYTE13(__dst);
      uint64_t v15 = BYTE14(__dst);
      swift_bridgeObjectRelease();
      *a1 = v11;
      a1[1] = v12 | (v13 << 32) | (v14 << 40) | (v15 << 48);
      break;
  }
  return v8 & 1;
}

uint64_t specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(uint64_t a1, unint64_t a2, char *__dst, int64_t a4)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    if (__dst)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _StringGuts.copyUTF8(into:)();
      if ((v12 & 1) == 0)
      {
        uint64_t v9 = v11;
        swift_bridgeObjectRelease();
        return v9;
      }
      goto LABEL_19;
    }
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v7 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      int64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v7 = (char *)_StringObject.sharedUTF8.getter();
    }
    return specialized closure #1 in UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(v7, v8, __dst, a4);
  }
  uint64_t v9 = HIBYTE(a2) & 0xF;
  __src[0] = a1;
  __src[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v9) {
    return v9;
  }
  if (v9 > a4)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (!__dst) {
    return v9;
  }
  if (__src >= (void *)&__dst[v9] || (char *)__src + v9 <= __dst)
  {
    memcpy(__dst, __src, HIBYTE(a2) & 0xF);
    return v9;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static Locale.MeasurementSystem.metric.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for metric != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E8ED3188;
  long long v3 = xmmword_1E8ED3190;
  *(void *)a1 = static Locale.MeasurementSystem.metric;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t static Locale.MeasurementSystem.us.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for us != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E8ED61B8;
  long long v3 = xmmword_1E8ED61C0;
  *(void *)a1 = static Locale.MeasurementSystem.us;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

void sub_181A653E8(_Unwind_Exception *a1)
{
}

void sub_181A65408(void *a1)
{
}

uint64_t NSProcessInfoNotifyThermalState(int a1)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  uint64_t result = notify_get_state(a1, v4);
  if (result)
  {
    atomic_exchange((atomic_ullong *volatile)&_NSProcessInfoGetThermalState_currentState, 0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    if ((uint64_t)v4[0] <= 29)
    {
      uint64_t v3 = 2;
      if (v4[0] != 20) {
        uint64_t v3 = 0;
      }
      if (v4[0] == 10) {
        unint64_t v2 = 1;
      }
      else {
        unint64_t v2 = v3;
      }
    }
    else if (v4[0] == 30 || v4[0] == 40 || v4[0] == 50)
    {
      unint64_t v2 = 3;
    }
    else
    {
      unint64_t v2 = 0;
    }
    uint64_t result = +[_NSSwiftProcessInfo updateThermalState:](_NSSwiftProcessInfo, "updateThermalState:");
    if (atomic_exchange((atomic_ullong *volatile)&_NSProcessInfoGetThermalState_currentState, v2) != v2) {
      return [+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter") postNotificationName:@"NSProcessInfoThermalStateDidChangeNotification" object:+[NSProcessInfo processInfo]];
    }
  }
  return result;
}

uint64_t closure #1 in static _NSSwiftProcessInfo.cancelThermalStateNotifyNotification()(uint64_t result)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0)
  {
    uint64_t v1 = result;
    uint64_t result = notify_cancel(*(_DWORD *)(result + 12));
    *(_DWORD *)(v1 + 12) = 0;
    *(unsigned char *)(v1 + 16) = 1;
  }
  return result;
}

uint64_t static _NSSwiftProcessInfo.updateThermalState(_:)(uint64_t a1)
{
  if (one-time initialization token for _globalState != -1) {
    a1 = swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static _NSSwiftProcessInfo._globalState;
  MEMORY[0x1F4188790](a1);
  swift_retain();
  os_unfair_lock_lock(v1 + 11);
  partial apply for closure #1 in static _NSSwiftProcessInfo.updateThermalState(_:)((uint64_t)&v1[4]);
  os_unfair_lock_unlock(v1 + 11);
  return swift_release();
}

uint64_t partial apply for closure #1 in static _NSSwiftProcessInfo.updateThermalState(_:)(uint64_t a1)
{
  return closure #1 in static _NSSwiftProcessInfo.updateThermalState(_:)(a1, *(void *)(v1 + 16));
}

uint64_t closure #1 in static _NSSwiftProcessInfo.updateThermalState(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v2 = HIDWORD(a2);
  if (HIDWORD(a2))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    switch((int)a2)
    {
      case 10:
        uint64_t v2 = 1;
        break;
      case 20:
        uint64_t v2 = 2;
        break;
      case 30:
      case 40:
      case 50:
        uint64_t v2 = 3;
        break;
      default:
        break;
    }
    *(void *)uint64_t result = v2;
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

uint64_t _NSDecimalAdd(_:_:_:_:)(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  v161[3] = *MEMORY[0x1E4F143B8];
  __int16 v4 = *((_WORD *)a2 + 2);
  __int16 v5 = *((_WORD *)a2 + 3);
  __int16 v6 = *((_WORD *)a2 + 4);
  __int16 v7 = *((_WORD *)a2 + 5);
  __int16 v8 = *((_WORD *)a2 + 6);
  __int16 v9 = *((_WORD *)a2 + 7);
  __int16 v10 = *((_WORD *)a2 + 8);
  int v11 = *a3;
  __int16 v12 = *((_WORD *)a3 + 2);
  __int16 v13 = *((_WORD *)a3 + 3);
  __int16 v14 = *((_WORD *)a3 + 4);
  __int16 v15 = *((_WORD *)a3 + 5);
  __int16 v16 = *((_WORD *)a3 + 6);
  __int16 v17 = *((_WORD *)a3 + 7);
  __int16 v18 = *((_WORD *)a3 + 8);
  __int16 v19 = *((_WORD *)a3 + 9);
  int v146 = *a2;
  __int16 v149 = *((_WORD *)a2 + 9);
  LODWORD(v161[0]) = *a2;
  __int16 v144 = v4;
  WORD2(v161[0]) = v4;
  __int16 v142 = v5;
  HIWORD(v161[0]) = v5;
  __int16 v140 = v6;
  LOWORD(v161[1]) = v6;
  __int16 v138 = v7;
  WORD1(v161[1]) = v7;
  __int16 v136 = v8;
  WORD2(v161[1]) = v8;
  __int16 v134 = v9;
  HIWORD(v161[1]) = v9;
  LOWORD(v161[2]) = v10;
  WORD1(v161[2]) = v149;
  if (!_So9NSDecimala__length_getter(v161))
  {
    LODWORD(v161[0]) = v146;
    WORD2(v161[0]) = v144;
    HIWORD(v161[0]) = v142;
    LOWORD(v161[1]) = v140;
    WORD1(v161[1]) = v138;
    WORD2(v161[1]) = v136;
    HIWORD(v161[1]) = v134;
    LOWORD(v161[2]) = v10;
    WORD1(v161[2]) = v149;
    if (_So9NSDecimala__isNegative_getter(v161)) {
      goto LABEL_17;
    }
  }
  LODWORD(v161[0]) = v11;
  WORD2(v161[0]) = v12;
  HIWORD(v161[0]) = v13;
  LOWORD(v161[1]) = v14;
  WORD1(v161[1]) = v15;
  WORD2(v161[1]) = v16;
  HIWORD(v161[1]) = v17;
  LOWORD(v161[2]) = v18;
  WORD1(v161[2]) = v19;
  if (!_So9NSDecimala__length_getter(v161))
  {
    LODWORD(v161[0]) = v11;
    WORD2(v161[0]) = v12;
    HIWORD(v161[0]) = v13;
    LOWORD(v161[1]) = v14;
    WORD1(v161[1]) = v15;
    WORD2(v161[1]) = v16;
    HIWORD(v161[1]) = v17;
    LOWORD(v161[2]) = v18;
    WORD1(v161[2]) = v19;
    if (_So9NSDecimala__isNegative_getter(v161)) {
      goto LABEL_17;
    }
  }
  LODWORD(v161[0]) = v146;
  WORD2(v161[0]) = v144;
  HIWORD(v161[0]) = v142;
  LOWORD(v161[1]) = v140;
  WORD1(v161[1]) = v138;
  WORD2(v161[1]) = v136;
  HIWORD(v161[1]) = v134;
  LOWORD(v161[2]) = v10;
  WORD1(v161[2]) = v149;
  if (!_So9NSDecimala__length_getter(v161))
  {
    uint64_t v60 = 0;
    *(_DWORD *)a1 = v11;
    *(_WORD *)(a1 + 4) = v12;
    *(_WORD *)(a1 + 6) = v13;
    *(_WORD *)(a1 + 8) = v14;
    *(_WORD *)(a1 + 10) = v15;
    *(_WORD *)(a1 + 12) = v16;
    *(_WORD *)(a1 + 14) = v17;
    *(_WORD *)(a1 + 16) = v18;
    *(_WORD *)(a1 + 18) = v19;
    return v60;
  }
  LODWORD(v161[0]) = v11;
  WORD2(v161[0]) = v12;
  HIWORD(v161[0]) = v13;
  LOWORD(v161[1]) = v14;
  WORD1(v161[1]) = v15;
  WORD2(v161[1]) = v16;
  HIWORD(v161[1]) = v17;
  LOWORD(v161[2]) = v18;
  WORD1(v161[2]) = v19;
  if (!_So9NSDecimala__length_getter(v161))
  {
    *(_DWORD *)a1 = v146;
    *(_WORD *)(a1 + 4) = v144;
    *(_WORD *)(a1 + 6) = v142;
    *(_WORD *)(a1 + 8) = v140;
    *(_WORD *)(a1 + 10) = v138;
    *(_WORD *)(a1 + 12) = v136;
    *(_WORD *)(a1 + 14) = v134;
    *(_WORD *)(a1 + 16) = v10;
    uint64_t v60 = 0;
    *(_WORD *)(a1 + 18) = v149;
    return v60;
  }
  LODWORD(v161[0]) = v146;
  WORD2(v161[0]) = v144;
  HIWORD(v161[0]) = v142;
  LOWORD(v161[1]) = v140;
  WORD1(v161[1]) = v138;
  WORD2(v161[1]) = v136;
  HIWORD(v161[1]) = v134;
  LOWORD(v161[2]) = v10;
  WORD1(v161[2]) = v149;
  LODWORD(v158) = v11;
  WORD2(v158) = v12;
  HIWORD(v158) = v13;
  LOWORD(v159) = v14;
  WORD1(v159) = v15;
  WORD2(v159) = v16;
  HIWORD(v159) = v17;
  LOWORD(v160) = v18;
  HIWORD(v160) = v19;
  char v20 = specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)v161, (uint64_t)&v158);
  uint64_t v21 = LODWORD(v161[0]);
  uint64_t v22 = LOWORD(v161[1]);
  uint64_t v23 = WORD1(v161[1]);
  uint64_t v24 = WORD2(v161[1]);
  int v25 = WORD1(v161[2]);
  unint64_t v155 = v161[0];
  uint64_t v143 = HIWORD(v161[0]);
  uint64_t v145 = WORD2(v161[0]);
  uint64_t v156 = v161[1];
  uint64_t v150 = HIWORD(v161[1]);
  int v147 = LOWORD(v161[2]);
  int v157 = v161[2];
  int v26 = _So9NSDecimala__length_getter(&v155);
  int v27 = v158;
  __int16 v28 = WORD2(v158);
  __int16 v29 = HIWORD(v158);
  __int16 v30 = v159;
  __int16 v31 = WORD1(v159);
  uint64_t v32 = WORD2(v159);
  uint64_t v33 = HIWORD(v159);
  __int16 v34 = v160;
  __int16 v35 = HIWORD(v160);
  if (!v26) {
    goto LABEL_147;
  }
  __int16 v127 = v25;
  unint64_t v155 = v158;
  uint64_t v156 = v159;
  int v157 = v160;
  int v129 = HIWORD(v160);
  int v130 = (unsigned __int16)v160;
  uint64_t v128 = v158;
  uint64_t v139 = HIWORD(v158);
  uint64_t v141 = WORD2(v158);
  uint64_t v135 = WORD1(v159);
  uint64_t v137 = (unsigned __int16)v159;
  if (!_So9NSDecimala__length_getter(&v155))
  {
    int v27 = v21;
    __int16 v28 = v145;
    __int16 v29 = v143;
    __int16 v30 = v22;
    __int16 v31 = v23;
    LOWORD(v32) = v24;
    LOWORD(v33) = v150;
    __int16 v34 = v147;
    __int16 v35 = v25;
LABEL_147:
    uint64_t v70 = a1;
    goto LABEL_148;
  }
  char v124 = v20;
  LODWORD(v155) = v21;
  WORD2(v155) = v145;
  HIWORD(v155) = v143;
  LOWORD(v156) = v22;
  WORD1(v156) = v23;
  WORD2(v156) = v24;
  HIWORD(v156) = v150;
  LOWORD(v157) = v147;
  HIWORD(v157) = v25;
  unint64_t v152 = __PAIR64__(__PAIR32__(v143, v145), v21);
  LOWORD(v153) = v22;
  WORD1(v153) = v23;
  __int16 v125 = v24;
  WORD2(v153) = v24;
  HIWORD(v153) = v150;
  LOWORD(v154) = v147;
  HIWORD(v154) = v25;
  uint64_t v36 = v33;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(&v152);
  LODWORD(v152) = v128;
  WORD2(v152) = v141;
  HIWORD(v152) = v139;
  LOWORD(v153) = v137;
  WORD1(v153) = v135;
  WORD2(v153) = v32;
  HIWORD(v153) = v36;
  LOWORD(v154) = v130;
  HIWORD(v154) = v129;
  uint64_t v126 = v32;
  if (isNegative_getter == _So9NSDecimala__isNegative_getter(&v152))
  {
    LODWORD(v152) = v21;
    WORD2(v152) = v145;
    HIWORD(v152) = v143;
    LOWORD(v153) = v22;
    WORD1(v153) = v23;
    WORD2(v153) = v24;
    HIWORD(v153) = v150;
    LOWORD(v154) = v147;
    HIWORD(v154) = v25;
    uint64_t v38 = _So9NSDecimala__isNegative_getter(&v152);
    _So9NSDecimala__isNegative_setter(v38, &v155);
    NSDecimal.asVariableLengthInteger()(v21 | (v145 << 32) | (v143 << 48), v22 | (v23 << 16) | (v24 << 32) | (v150 << 48), v147 | (v25 << 16));
    uint64_t v40 = v39;
    NSDecimal.asVariableLengthInteger()(v128 | (v141 << 32) | (v139 << 48), v137 | (v135 << 16) | (v126 << 32) | (v36 << 48), v130 | (v129 << 16));
    uint64_t v43 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v40, v41, 9, v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v44 = *(void *)(v43 + 16);
    if (v44 <= 8)
    {
      v46._rawValue = (void *)v43;
LABEL_29:
      _So9NSDecimala__length_setter(v44, &v155);
LABEL_144:
      NSDecimal.copyVariableLengthInteger(_:)(v46);
      if (v117)
      {
        uint64_t v57 = v117;
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
      swift_bridgeObjectRelease();
      _So9NSDecimala__isCompact_setter(&v155);
      NSDecimal.compact()();
      int v27 = v155;
      __int16 v28 = WORD2(v155);
      __int16 v29 = HIWORD(v155);
      __int16 v30 = v156;
      __int16 v31 = WORD1(v156);
      LOWORD(v32) = WORD2(v156);
      LOWORD(v33) = HIWORD(v156);
      __int16 v34 = v157;
      __int16 v35 = HIWORD(v157);
      goto LABEL_147;
    }
    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v43, a4);
    v46._rawValue = v45;
    uint64_t v48 = v47;
    swift_bridgeObjectRelease();
    int v49 = v155;
    __int16 v50 = WORD2(v155);
    __int16 v51 = HIWORD(v155);
    __int16 v52 = v156;
    __int16 v53 = WORD1(v156);
    __int16 v54 = WORD2(v156);
    __int16 v55 = HIWORD(v156);
    unint64_t v152 = v155;
    uint64_t v153 = v156;
    __int16 v148 = HIWORD(v157);
    __int16 v151 = v157;
    int v154 = v157;
    int v56 = _So9NSDecimala__exponent_getter((char *)&v152);
    if (v48 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v48 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v56, v48))
        {
          if (v56 + (int)v48 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_17:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            uint64_t v57 = (void *)swift_allocError();
            unsigned char *v58 = 0;
            swift_willThrow();
            goto LABEL_18;
          }
          LODWORD(v152) = v49;
          WORD2(v152) = v50;
          HIWORD(v152) = v51;
          LOWORD(v153) = v52;
          WORD1(v153) = v53;
          WORD2(v153) = v54;
          HIWORD(v153) = v55;
          LOWORD(v154) = v151;
          HIWORD(v154) = v148;
          int v100 = _So9NSDecimala__exponent_getter((char *)&v152);
          BOOL v101 = __OFADD__(v100, v48);
          uint64_t v102 = (v100 + v48);
          if (!v101)
          {
            _So9NSDecimala__exponent_setter(v102, &v155);
            unint64_t v44 = *((void *)v46._rawValue + 2);
            char v20 = v124;
            if (HIDWORD(v44)) {
              goto LABEL_163;
            }
            goto LABEL_29;
          }
          __break(1u);
          goto LABEL_161;
        }
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
      }
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  __int16 v120 = v23;
  int v121 = v21;
  LOWORD(v123) = v22;
  unint64_t v62 = v22 | (v23 << 16) | (v24 << 32) | (v150 << 48);
  unint64_t v132 = v21 | (v145 << 32) | (v143 << 48);
  unsigned int v122 = v147 | (v25 << 16);
  NSDecimal.asVariableLengthInteger()(v132, v62, v122);
  uint64_t v64 = v63;
  unint64_t v65 = v128 | (v141 << 32) | (v139 << 48);
  uint64_t v66 = v36;
  unint64_t v67 = v137 | (v135 << 16) | (v32 << 32) | (v36 << 48);
  unsigned int v68 = v130 | (v129 << 16);
  NSDecimal.asVariableLengthInteger()(v65, v67, v68);
  uint64_t v48 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v64, v69);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v48 == -1)
  {
    uint64_t v123 = v66;
    uint64_t v48 = v141;
    char v71 = v124;
    NSDecimal.asVariableLengthInteger()(v65, v67, v68);
    uint64_t v73 = v72;
    NSDecimal.asVariableLengthInteger()(v132, v62, v122);
    uint64_t v75 = v74;
    uint64_t v76 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v46._rawValue = (void *)v76;
    *(void *)(v76 + 32) = 0;
    unint64_t v78 = (_WORD *)(v76 + 32);
    *(void *)(v76 + 16) = 8;
    *(void *)(v76 + 40) = 0;
    unint64_t v79 = *(void *)(v73 + 16);
    unint64_t v80 = *(void *)(v75 + 16);
    if (v80 >= v79) {
      uint64_t v81 = *(void *)(v73 + 16);
    }
    else {
      uint64_t v81 = *(void *)(v75 + 16);
    }
    if (v81)
    {
      unsigned int v82 = (*(unsigned __int16 *)(v73 + 32) | 0x10000) - *(unsigned __int16 *)(v75 + 32);
      int v83 = HIWORD(v82);
      *unint64_t v78 = *(_WORD *)(v73 + 32) - *(_WORD *)(v75 + 32);
      uint64_t v84 = v81 - 1;
      int v85 = v128;
      __int16 v86 = v141;
      if (v84)
      {
        unsigned int v82 = v83 + *(unsigned __int16 *)(v73 + 34) - *(unsigned __int16 *)(v75 + 34) + 0xFFFF;
        int v83 = HIWORD(v82);
        *(_WORD *)(v76 + 34) = v82;
        char v20 = v124;
        if (v84 == 1)
        {
          unint64_t v87 = 2;
        }
        else
        {
          unsigned int v77 = *(unsigned __int16 *)(v75 + 36);
          unsigned int v82 = v83 + *(unsigned __int16 *)(v73 + 36) - v77 + 0xFFFF;
          int v83 = HIWORD(v82);
          *(_WORD *)(v76 + 36) = v82;
          if (v84 == 2)
          {
            unint64_t v87 = 3;
          }
          else
          {
            unsigned int v82 = v83 + *(unsigned __int16 *)(v73 + 38) - *(unsigned __int16 *)(v75 + 38) + 0xFFFF;
            int v83 = HIWORD(v82);
            *(_WORD *)(v76 + 38) = v82;
            if (v84 == 3)
            {
              unint64_t v87 = 4;
            }
            else
            {
              unsigned int v77 = *(unsigned __int16 *)(v75 + 40);
              unsigned int v82 = v83 + *(unsigned __int16 *)(v73 + 40) - v77 + 0xFFFF;
              int v83 = HIWORD(v82);
              *(_WORD *)(v76 + 40) = v82;
              if (v84 == 4)
              {
                unint64_t v87 = 5;
              }
              else
              {
                unsigned int v82 = v83 + *(unsigned __int16 *)(v73 + 42) - *(unsigned __int16 *)(v75 + 42) + 0xFFFF;
                int v83 = HIWORD(v82);
                *(_WORD *)(v76 + 42) = v82;
                if (v84 == 5)
                {
                  unint64_t v87 = 6;
                }
                else
                {
                  unsigned int v77 = *(unsigned __int16 *)(v75 + 44);
                  unsigned int v82 = v83 + *(unsigned __int16 *)(v73 + 44) - v77 + 0xFFFF;
                  int v83 = HIWORD(v82);
                  *(_WORD *)(v76 + 44) = v82;
                  if (v84 == 6)
                  {
                    unint64_t v87 = 7;
                  }
                  else
                  {
                    int v105 = v83 + *(unsigned __int16 *)(v73 + 46) - *(unsigned __int16 *)(v75 + 46);
                    unsigned int v82 = v105 + 0xFFFF;
                    *(_WORD *)(v76 + 46) = v105 - 1;
                    if (v84 != 7)
                    {
LABEL_161:
                      __break(1u);
                      goto LABEL_162;
                    }
                    int v83 = HIWORD(v82);
                    unint64_t v87 = 8;
                  }
                  char v20 = v124;
                  int v85 = v128;
                  __int16 v86 = v141;
                }
              }
            }
          }
        }
      }
      else
      {
        unint64_t v87 = 1;
        char v20 = v124;
      }
      uint64_t v48 = v123;
      if (v87 >= v79) {
        goto LABEL_95;
      }
      if (!HIWORD(v82))
      {
        while (v87 < *(void *)(v76 + 16))
        {
          int v106 = *(unsigned __int16 *)(v73 + 32 + 2 * v87);
          unsigned int v77 = v106 + 0xFFFF;
          v78[v87] = v106 - 1;
          if (v79 - 1 == v87) {
            goto LABEL_102;
          }
          ++v87;
          if (v106) {
            goto LABEL_88;
          }
        }
        goto LABEL_153;
      }
    }
    else
    {
      int v85 = v128;
      __int16 v86 = v141;
      if (!v79)
      {
        char v20 = v124;
        if (v80)
        {
          unint64_t v87 = 0;
          int v83 = 1;
          uint64_t v48 = v123;
          goto LABEL_96;
        }
        uint64_t v103 = 8;
        uint64_t v48 = v123;
        goto LABEL_105;
      }
      unint64_t v87 = 0;
      char v20 = v124;
      uint64_t v48 = v123;
    }
LABEL_88:
    uint64_t v92 = v73 + 32;
    if (v87 <= v79) {
      unint64_t v94 = v79;
    }
    else {
      unint64_t v94 = v87;
    }
    while (v94 != v87)
    {
      if (v87 >= *(void *)(v76 + 16)) {
        goto LABEL_112;
      }
      v78[v87] = *(_WORD *)(v92 + 2 * v87);
      if ((uint64_t)++v87 >= (uint64_t)v79)
      {
        int v83 = 1;
LABEL_95:
        if ((uint64_t)v87 < (uint64_t)v80)
        {
          while (1)
          {
LABEL_96:
            if (v87 >= v80) {
              goto LABEL_158;
            }
            unint64_t v79 = *(void *)(v76 + 16);
            if (v87 < v79) {
              break;
            }
LABEL_101:
            __break(1u);
LABEL_102:
            int v83 = HIWORD(v77);
            unint64_t v87 = v79;
            if ((uint64_t)v79 >= (uint64_t)v80) {
              goto LABEL_103;
            }
          }
          unsigned int v107 = v83 + (*(unsigned __int16 *)(v75 + 32 + 2 * v87) ^ 0xFFFF);
          --v80;
          unint64_t v79 = v75 + 34;
          while (1)
          {
            int v83 = HIWORD(v107);
            v78[v87] = v107;
            if (v80 == v87) {
              break;
            }
            unsigned int v107 = v83 + (*(unsigned __int16 *)(v79 + 2 * v87++) ^ 0xFFFF);
            if (v87 >= *(void *)(v76 + 16)) {
              goto LABEL_101;
            }
          }
        }
LABEL_103:
        if (!v83) {
          goto LABEL_150;
        }
        uint64_t v103 = *(void *)(v76 + 16);
        if (v103)
        {
LABEL_105:
          if (!v78[v103 - 1])
          {
            do
            {
              *(void *)(v76 + 16) = v103 - 1;
              if (v103 == 1) {
                break;
              }
            }
            while (!*(unsigned __int16 *)(v76 + 28 + 2 * v103--));
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v109 = *((void *)v46._rawValue + 2);
        if (!HIDWORD(v109))
        {
          _So9NSDecimala__length_setter(v109, &v155);
          LODWORD(v152) = v85;
          WORD2(v152) = v86;
          HIWORD(v152) = v139;
          LOWORD(v153) = v137;
          WORD1(v153) = v135;
          WORD2(v153) = v126;
          HIWORD(v153) = v48;
          LOWORD(v154) = v130;
          HIWORD(v154) = v129;
          goto LABEL_143;
        }
LABEL_163:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_164:
        type metadata accessor for NSComparisonResult(0);
        unint64_t v152 = v48;
        uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        return result;
      }
    }
    __break(1u);
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  if (!v48)
  {
    int v27 = 0;
    __int16 v28 = 0;
    __int16 v29 = 0;
    __int16 v30 = 0;
    __int16 v31 = 0;
    LOWORD(v32) = 0;
    LOWORD(v33) = 0;
    __int16 v34 = 0;
    __int16 v35 = 0;
    uint64_t v70 = a1;
    char v20 = v124;
LABEL_148:
    *(_DWORD *)uint64_t v70 = v27;
    *(_WORD *)(v70 + 4) = v28;
    *(_WORD *)(v70 + 6) = v29;
    *(_WORD *)(v70 + 8) = v30;
    *(_WORD *)(v70 + 10) = v31;
    *(_WORD *)(v70 + 12) = v32;
    *(_WORD *)(v70 + 14) = v33;
    *(_WORD *)(v70 + 16) = v34;
    uint64_t v60 = v20 & 1;
    *(_WORD *)(v70 + 18) = v35;
    return v60;
  }
  char v71 = v124;
  if (v48 != 1) {
    goto LABEL_164;
  }
  NSDecimal.asVariableLengthInteger()(v132, v62, v122);
  uint64_t v48 = v88;
  NSDecimal.asVariableLengthInteger()(v65, v67, v68);
  uint64_t v75 = v89;
  uint64_t v90 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  v46._rawValue = (void *)v90;
  *(void *)(v90 + 32) = 0;
  unint64_t v78 = (_WORD *)(v90 + 32);
  *(void *)(v90 + 16) = 8;
  *(void *)(v90 + 40) = 0;
  unint64_t v79 = *(void *)(v48 + 16);
  unint64_t v80 = *(void *)(v75 + 16);
  if (v80 >= v79) {
    uint64_t v91 = *(void *)(v48 + 16);
  }
  else {
    uint64_t v91 = *(void *)(v75 + 16);
  }
  if (v91)
  {
    uint64_t v92 = v48 + 32;
    unsigned int v93 = (*(unsigned __int16 *)(v48 + 32) | 0x10000) - *(unsigned __int16 *)(v75 + 32);
    LODWORD(v94) = HIWORD(v93);
    *unint64_t v78 = *(_WORD *)(v48 + 32) - *(_WORD *)(v75 + 32);
    unint64_t v87 = v91 - 1;
    __int16 v95 = v123;
    __int16 v96 = v127;
    int v97 = v121;
    if (!v87)
    {
      unint64_t v98 = 1;
      char v20 = v124;
      goto LABEL_116;
    }
    unsigned int v93 = v94 + *(unsigned __int16 *)(v48 + 34) - *(unsigned __int16 *)(v75 + 34) + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 34) = v93;
    char v20 = v124;
    if (v87 == 1)
    {
      unint64_t v98 = 2;
      goto LABEL_116;
    }
    unsigned int v77 = *(unsigned __int16 *)(v75 + 36);
    unsigned int v93 = v94 + *(unsigned __int16 *)(v48 + 36) - v77 + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 36) = v93;
    if (v87 == 2)
    {
      unint64_t v98 = 3;
      goto LABEL_116;
    }
    unsigned int v93 = v94 + *(unsigned __int16 *)(v48 + 38) - *(unsigned __int16 *)(v75 + 38) + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 38) = v93;
    if (v87 == 3)
    {
      unint64_t v98 = 4;
      goto LABEL_116;
    }
    unsigned int v77 = *(unsigned __int16 *)(v75 + 40);
    unsigned int v93 = v94 + *(unsigned __int16 *)(v48 + 40) - v77 + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 40) = v93;
    if (v87 == 4)
    {
      unint64_t v98 = 5;
      goto LABEL_116;
    }
    unsigned int v93 = v94 + *(unsigned __int16 *)(v48 + 42) - *(unsigned __int16 *)(v75 + 42) + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 42) = v93;
    if (v87 == 5)
    {
      unint64_t v98 = 6;
      goto LABEL_116;
    }
    unsigned int v77 = *(unsigned __int16 *)(v75 + 44);
    unsigned int v93 = v94 + *(unsigned __int16 *)(v48 + 44) - v77 + 0xFFFF;
    LODWORD(v94) = HIWORD(v93);
    *(_WORD *)(v90 + 44) = v93;
    if (v87 == 6)
    {
      unint64_t v98 = 7;
LABEL_115:
      char v20 = v71;
      __int16 v95 = v123;
      __int16 v96 = v127;
      int v97 = v121;
LABEL_116:
      __int16 v99 = v145;
      if (v98 >= v79) {
        goto LABEL_128;
      }
      if (!HIWORD(v93))
      {
        while (v98 < *((void *)v46._rawValue + 2))
        {
          int v111 = *(unsigned __int16 *)(v92 + 2 * v98);
          unsigned int v77 = v111 + 0xFFFF;
          v78[v98] = v111 - 1;
          if (v79 - 1 == v98) {
            goto LABEL_135;
          }
          ++v98;
          if (v111) {
            goto LABEL_121;
          }
        }
        goto LABEL_154;
      }
      goto LABEL_121;
    }
LABEL_113:
    int v110 = v94 + *(unsigned __int16 *)(v48 + 46) - *(unsigned __int16 *)(v75 + 46);
    unsigned int v93 = v110 + 0xFFFF;
    *((_WORD *)v46._rawValue + 23) = v110 - 1;
    if (v87 != 7)
    {
LABEL_162:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_163;
    }
    LODWORD(v94) = HIWORD(v93);
    unint64_t v98 = 8;
    goto LABEL_115;
  }
  __int16 v95 = v123;
  __int16 v96 = v127;
  int v97 = v121;
  if (!v79)
  {
    char v20 = v124;
    if (v80)
    {
      unint64_t v98 = 0;
      LODWORD(v94) = 1;
      __int16 v99 = v145;
      goto LABEL_129;
    }
    uint64_t v104 = 8;
    __int16 v99 = v145;
LABEL_138:
    if (!v78[v104 - 1])
    {
      do
      {
        *((void *)v46._rawValue + 2) = v104 - 1;
        if (v104 == 1) {
          break;
        }
      }
      while (!*((unsigned __int16 *)v46._rawValue + v104-- + 14));
    }
LABEL_141:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v115 = *((void *)v46._rawValue + 2);
    if (HIDWORD(v115)) {
      goto LABEL_163;
    }
    _So9NSDecimala__length_setter(v115, &v155);
    LODWORD(v152) = v97;
    WORD2(v152) = v99;
    HIWORD(v152) = v143;
    LOWORD(v153) = v95;
    WORD1(v153) = v120;
    WORD2(v153) = v125;
    HIWORD(v153) = v150;
    LOWORD(v154) = v147;
    HIWORD(v154) = v96;
LABEL_143:
    uint64_t v116 = _So9NSDecimala__isNegative_getter(&v152);
    _So9NSDecimala__isNegative_setter(v116, &v155);
    goto LABEL_144;
  }
  unint64_t v98 = 0;
  char v20 = v124;
  __int16 v99 = v145;
LABEL_121:
  if (v98 <= v79) {
    unint64_t v112 = v79;
  }
  else {
    unint64_t v112 = v98;
  }
  do
  {
    if (v112 == v98)
    {
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
      goto LABEL_155;
    }
    if (v98 >= *((void *)v46._rawValue + 2)) {
      goto LABEL_152;
    }
    v78[v98] = *(_WORD *)(v48 + 32 + 2 * v98);
    ++v98;
  }
  while ((uint64_t)v98 < (uint64_t)v79);
  LODWORD(v94) = 1;
LABEL_128:
  if ((uint64_t)v98 < (uint64_t)v80)
  {
    while (1)
    {
LABEL_129:
      if (v98 >= v80) {
        goto LABEL_159;
      }
      unint64_t v79 = *((void *)v46._rawValue + 2);
      if (v98 < v79) {
        break;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      LODWORD(v94) = HIWORD(v77);
      unint64_t v98 = v79;
      if ((uint64_t)v79 >= (uint64_t)v80) {
        goto LABEL_136;
      }
    }
    unsigned int v113 = v94 + (*(unsigned __int16 *)(v75 + 32 + 2 * v98) ^ 0xFFFF);
    --v80;
    unint64_t v79 = v75 + 34;
    while (1)
    {
      LODWORD(v94) = HIWORD(v113);
      v78[v98] = v113;
      if (v80 == v98) {
        break;
      }
      unsigned int v113 = v94 + (*(unsigned __int16 *)(v79 + 2 * v98++) ^ 0xFFFF);
      if (v98 >= *((void *)v46._rawValue + 2)) {
        goto LABEL_134;
      }
    }
  }
LABEL_136:
  if (v94)
  {
    uint64_t v104 = *((void *)v46._rawValue + 2);
    if (v104) {
      goto LABEL_138;
    }
    goto LABEL_141;
  }
LABEL_150:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  uint64_t v57 = (void *)swift_allocError();
  *uint64_t v119 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_18:
  v161[0] = v57;
  id v59 = v57;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast()) {
    uint64_t v60 = qword_18218CCE0[(char)v158];
  }
  else {
    uint64_t v60 = 0;
  }
  *(_OWORD *)((char *)v161 + 4) = 0uLL;
  _So9NSDecimala__exponent_setter(0, v161);
  _So9NSDecimala__length_setter(0, v161);
  _So9NSDecimala__isNegative_setter(1, v161);
  _So9NSDecimala__isCompact_setter(v161);
  _So9NSDecimala__reserved_setter(v161);
  long long v61 = *(_OWORD *)((char *)v161 + 4);
  *(_DWORD *)a1 = v161[0];
  *(_OWORD *)(a1 + 4) = v61;

  return v60;
}

uint64_t specialized static NSDecimal._normalize(a:b:roundingMode:)(int *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  unsigned int v6 = *a1;
  unsigned int v180 = *a1;
  long long v181 = *(_OWORD *)(a1 + 1);
  int v7 = _So9NSDecimala__exponent_getter((char *)&v180);
  unsigned int v8 = *(_DWORD *)a2;
  unsigned int v180 = *(_DWORD *)a2;
  long long v181 = *(_OWORD *)(a2 + 4);
  int v9 = _So9NSDecimala__exponent_getter((char *)&v180);
  int v10 = v7 - v9;
  if (v7 == v9) {
    return v10 & 1;
  }
  BOOL v11 = v10 < 0;
  if (v10 >= 0) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = (v9 - v7);
  }
  if (v10 >= 0) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = (uint64_t)a1;
  }
  uint64_t v182 = v13;
  if (v11) {
    uint64_t v14 = v8;
  }
  else {
    uint64_t v14 = v6;
  }
  if (!v11) {
    a2 = (uint64_t)a1;
  }
  uint64_t v15 = v14 | ((unint64_t)*(unsigned __int16 *)(a2 + 4) << 32) | ((unint64_t)*(unsigned __int16 *)(a2 + 6) << 48);
  unint64_t v16 = *(void *)(a2 + 8);
  LODWORD(v174) = *(_DWORD *)(a2 + 16);
  NSDecimal.asVariableLengthInteger()(v15, v16, v174);
  unint64_t v18 = v17;
  uint64_t v19 = specialized abs<A>(_:)(v12);
  uint64_t v20 = one-time initialization token for powerOfTen;
  swift_bridgeObjectRetain();
  if (v20 != -1) {
    goto LABEL_322;
  }
LABEL_14:
  uint64_t v21 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
  rawValue = powerOfTen._rawValue;
  uint64_t v23 = *((void *)powerOfTen._rawValue + 2);
  unint64_t v176 = v15;
  char v179 = (_DWORD *)a2;
  uint64_t v171 = v12;
  uint64_t v175 = v16;
  if (v23 > v19)
  {
    unint64_t v16 = v18;
    if ((v19 & 0x8000000000000000) == 0) {
      goto LABEL_16;
    }
LABEL_256:
    __break(1u);
LABEL_304:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *uint64_t v165 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_305;
  }
  if (!v23) {
    goto LABEL_332;
  }
  a2 = v23 - 1;
  unint64_t v16 = v18;
  do
  {
    BOOL v28 = __OFSUB__(v19, a2);
    v19 -= a2;
    if (v28)
    {
      __break(1u);
LABEL_321:
      __break(1u);
LABEL_322:
      swift_once();
      goto LABEL_14;
    }
    uint64_t v29 = v21[196];
    if ((unint64_t)v23 > *(void *)(v29 + 16)) {
      goto LABEL_321;
    }
    uint64_t v12 = *(void *)(v16 + 16);
    if (!v12 || (uint64_t v15 = *(void *)(v29 + 8 * a2 + 32), (v21 = *(uint64_t **)(v15 + 16)) == 0))
    {
      swift_bridgeObjectRelease();
      unint64_t v16 = MEMORY[0x1E4FBC860];
      uint64_t v21 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
      continue;
    }
    if (__OFADD__(v12, v21)) {
      goto LABEL_333;
    }
    uint64_t v167 = a2;
    uint64_t v168 = v3;
    unint64_t v170 = v18;
    if ((uint64_t)v21 + v12 >= 8) {
      uint64_t v25 = 8;
    }
    else {
      uint64_t v25 = (uint64_t)v21 + v12;
    }
    if (v25 < 0) {
      goto LABEL_378;
    }
    swift_bridgeObjectRetain();
    uint64_t v30 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v30 + 16) = v25;
    uint64_t v31 = v30 + 32;
    bzero((void *)(v30 + 32), 2 * v25);
    uint64_t v32 = 0;
    uint64_t v33 = v15 + 32;
    do
    {
      unsigned int v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = v32;
      uint64_t v32 = (uint64_t *)((char *)v32 + 1);
      do
      {
        uint64_t v39 = (uint64_t)v36 + v35;
        if (__OFADD__(v35, v36))
        {
          __break(1u);
          swift_bridgeObjectRelease();
LABEL_305:
          swift_bridgeObjectRelease();
LABEL_306:
          swift_bridgeObjectRelease();
          return v10 & 1;
        }
        if (v39 >= v25)
        {
          if (v34) {
            goto LABEL_67;
          }
          unsigned int v34 = *(unsigned __int16 *)(v33 + 2 * (void)v36);
          if (*(_WORD *)(v33 + 2 * (void)v36))
          {
            unsigned int v34 = *(unsigned __int16 *)(v16 + 2 * v35 + 32);
            if (*(_WORD *)(v16 + 2 * v35 + 32)) {
              goto LABEL_67;
            }
          }
        }
        else
        {
          if (v39 < 0)
          {
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            uint64_t v111 = 8;
LABEL_276:
            swift_bridgeObjectRetain();
            uint64_t v112 = static Array._allocateBufferUninitialized(minimumCapacity:)();
            *(void *)(v112 + 16) = v111;
            bzero((void *)(v112 + 32), 2 * v111);
            goto LABEL_277;
          }
          if ((unint64_t)v39 >= *(void *)(v30 + 16)) {
            goto LABEL_272;
          }
          uint64_t v37 = 2 * v39;
          unsigned int v38 = v34
              + *(unsigned __int16 *)(v31 + v37)
              + *(unsigned __int16 *)(v16 + 2 * v35 + 32) * *(unsigned __int16 *)(v33 + 2 * (void)v36);
          unsigned int v34 = HIWORD(v38);
          *(_WORD *)(v31 + v37) = v38;
        }
        ++v35;
      }
      while (v12 != v35);
      if (!v34) {
        continue;
      }
      BOOL v28 = __OFADD__(v12, v36);
      uint64_t v40 = (uint64_t)v36 + v12;
      if (v28) {
        goto LABEL_337;
      }
      if (v40 >= v25)
      {
LABEL_67:
        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
        unint64_t v44 = (void *)swift_allocError();
        *int64_t v45 = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
        uint64_t v46 = 0;
        uint64_t v21 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
        goto LABEL_101;
      }
      if (v40 < 0) {
        goto LABEL_338;
      }
      if ((unint64_t)v40 >= *(void *)(v30 + 16)) {
        goto LABEL_339;
      }
      *(_WORD *)(v31 + 2 * v40) = v34;
    }
    while (v32 != v21);
    uint64_t v41 = *(void *)(v30 + 16);
    if (v41)
    {
      uint64_t v21 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
      a2 = v167;
      if (*(_WORD *)(v31 + 2 * v41 - 2))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v16 = v30;
        uint64_t v3 = v168;
      }
      else
      {
        uint64_t v42 = v41 + 14;
        uint64_t v3 = v168;
        do
        {
          *(void *)(v30 + 16) = v42 - 15;
          if (v42 == 15) {
            break;
          }
        }
        while (!*(unsigned __int16 *)(v30 + 2 * v42--));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v16 = v30;
      }
      unint64_t v18 = v170;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v16 = v30;
      uint64_t v3 = v168;
      unint64_t v18 = v170;
      uint64_t v21 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
      a2 = v167;
    }
  }
  while (v23 <= v19);
  rawValue = (void *)v21[196];
  if (v19 < 0) {
    goto LABEL_256;
  }
LABEL_16:
  if ((unint64_t)v19 >= rawValue[2]) {
    goto LABEL_331;
  }
  uint64_t v24 = v3;
  uint64_t v25 = *(void *)(v16 + 16);
  if (!v25 || (uint64_t v19 = rawValue[v19 + 4], (v26 = *(void *)(v19 + 16)) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v47._rawValue = (void *)MEMORY[0x1E4FBC860];
    uint64_t v48 = v179;
    goto LABEL_69;
  }
  uint64_t v15 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
LABEL_343:
    __break(1u);
    goto LABEL_344;
  }
  if (v15 > 7)
  {
    uint64_t v15 = 8;
  }
  else
  {
    if (v15 < 0) {
      goto LABEL_378;
    }
    if (!v15)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = MEMORY[0x1E4FBC860];
      goto LABEL_74;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v27 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v27 + 16) = v15;
  bzero((void *)(v27 + 32), 2 * v15);
LABEL_74:
  uint64_t v54 = 0;
  uint64_t v55 = v19 + 32;
  uint64_t v56 = v27 + 32;
  while (2)
  {
    if (v54 == v26) {
      goto LABEL_336;
    }
    unsigned int v57 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = v54 + 1;
    do
    {
      if (v25 == v58) {
        goto LABEL_273;
      }
      uint64_t v60 = v58 + v54;
      if (__OFADD__(v58, v54)) {
        goto LABEL_274;
      }
      if (v60 >= v15)
      {
        if (v57) {
          goto LABEL_100;
        }
        unsigned int v57 = *(unsigned __int16 *)(v55 + 2 * v54);
        if (*(_WORD *)(v55 + 2 * v54))
        {
          unsigned int v57 = *(unsigned __int16 *)(v16 + 2 * v58 + 32);
          if (*(_WORD *)(v16 + 2 * v58 + 32)) {
            goto LABEL_100;
          }
        }
      }
      else
      {
        if (v60 < 0) {
          goto LABEL_312;
        }
        if ((unint64_t)v60 >= *(void *)(v27 + 16)) {
          goto LABEL_313;
        }
        uint64_t v61 = 2 * v60;
        unsigned int v62 = v57
            + *(unsigned __int16 *)(v56 + v61)
            + *(unsigned __int16 *)(v16 + 2 * v58 + 32) * *(unsigned __int16 *)(v55 + 2 * v54);
        unsigned int v57 = HIWORD(v62);
        *(_WORD *)(v56 + v61) = v62;
      }
      ++v58;
    }
    while (v25 != v58);
    if (!v57)
    {
LABEL_94:
      uint64_t v54 = v59;
      if (v59 != v26) {
        continue;
      }
      uint64_t v64 = *(void *)(v27 + 16);
      if (v64 && !*(_WORD *)(v56 + 2 * v64 - 2))
      {
        do
        {
          *(void *)(v27 + 16) = v64 - 1;
          if (v64 == 1) {
            break;
          }
        }
        while (!*(unsigned __int16 *)(v27 + 28 + 2 * v64--));
      }
      goto LABEL_309;
    }
    break;
  }
  BOOL v28 = __OFADD__(v25, v54);
  uint64_t v63 = v25 + v54;
  if (v28) {
    goto LABEL_346;
  }
  if (v63 < v15)
  {
    if (v63 < 0) {
      goto LABEL_347;
    }
    if ((unint64_t)v63 >= *(void *)(v27 + 16)) {
      goto LABEL_348;
    }
    *(_WORD *)(v56 + 2 * v63) = v57;
    goto LABEL_94;
  }
LABEL_100:
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  unint64_t v44 = (void *)swift_allocError();
  *uint64_t v66 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  uint64_t v46 = 0;
LABEL_101:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  NSDecimal.asVariableLengthInteger()(v176, v175, v174);
  uint64_t v68 = *(void *)(v67 + 16);
  swift_bridgeObjectRelease();
  double v69 = floor((double)(8 - v68) * 4.81647993);
  uint64_t v70 = v182;
  if ((~*(void *)&v69 & 0x7FF0000000000000) == 0) {
    goto LABEL_327;
  }
  if (v69 <= -9.22337204e18)
  {
LABEL_328:
    __break(1u);
    goto LABEL_329;
  }
  if (v69 >= 9.22337204e18)
  {
LABEL_329:
    __break(1u);
    goto LABEL_330;
  }
  uint64_t v71 = (uint64_t)v69;
  NSDecimal.asVariableLengthInteger()(*(void *)v182, *(void *)(v182 + 8), *(_DWORD *)(v182 + 16));
  uint64_t v175 = v71;
  uint64_t v73 = v71 - v171;
  if (__OFSUB__(v71, v171))
  {
LABEL_330:
    __break(1u);
LABEL_331:
    __break(1u);
LABEL_332:
    __break(1u);
LABEL_333:
    __break(1u);
LABEL_334:
    __break(1u);
LABEL_335:
    __break(1u);
LABEL_336:
    __break(1u);
LABEL_337:
    __break(1u);
LABEL_338:
    __break(1u);
LABEL_339:
    __break(1u);
LABEL_340:
    __break(1u);
LABEL_341:
    __break(1u);
LABEL_342:
    __break(1u);
    goto LABEL_343;
  }
  if (!v73)
  {
    uint64_t v24 = v72;
    uint64_t v81 = (uint64_t *)v179;
    goto LABEL_165;
  }
  uint64_t v177 = v72;
  uint64_t v24 = specialized abs<A>(_:)(v71 - v171);
  uint64_t v74 = v21[196];
  uint64_t v75 = *(void *)(v74 + 16);
  uint64_t v174 = v73;
  if (v75 > v24)
  {
    uint64_t v76 = v177;
    swift_bridgeObjectRetain();
    if (v24 < 0) {
      goto LABEL_259;
    }
    goto LABEL_108;
  }
  if (!v75)
  {
LABEL_344:
    __break(1u);
LABEL_345:
    __break(1u);
LABEL_346:
    __break(1u);
LABEL_347:
    __break(1u);
LABEL_348:
    __break(1u);
LABEL_349:
    __break(1u);
LABEL_350:
    __break(1u);
LABEL_351:
    __break(1u);
LABEL_352:
    __break(1u);
LABEL_353:
    __break(1u);
LABEL_354:
    __break(1u);
LABEL_355:
    __break(1u);
LABEL_356:
    __break(1u);
LABEL_357:
    __break(1u);
LABEL_358:
    __break(1u);
LABEL_359:
    __break(1u);
    goto LABEL_360;
  }
  uint64_t v27 = v75 - 1;
  uint64_t v76 = v177;
  swift_bridgeObjectRetain();
  uint64_t v172 = v75;
  while (2)
  {
    uint64_t v82 = v21[196];
    if ((unint64_t)v75 > *(void *)(v82 + 16)) {
      goto LABEL_326;
    }
    uint64_t v83 = *(void *)(v82 + 8 * v27 + 32);
    if (v73 < 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v98 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v76, v83, 8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v76 = v98;
      uint64_t v75 = v172;
      goto LABEL_121;
    }
    uint64_t v169 = v46;
    uint64_t v84 = *(void *)(v76 + 16);
    if (!v84 || (uint64_t v85 = *(void *)(v83 + 16)) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v76 = MEMORY[0x1E4FBC860];
      uint64_t v46 = v169;
      goto LABEL_121;
    }
    if (__OFADD__(v84, v85)) {
      goto LABEL_345;
    }
    if (v84 + v85 >= 8) {
      uint64_t v86 = 8;
    }
    else {
      uint64_t v86 = v84 + v85;
    }
    if (v86 < 0) {
      goto LABEL_378;
    }
    swift_bridgeObjectRetain();
    uint64_t v21 = (uint64_t *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v21[2] = v86;
    unint64_t v87 = v21 + 4;
    bzero(v21 + 4, 2 * v86);
    uint64_t v88 = 0;
    uint64_t v89 = v83 + 32;
    do
    {
      unsigned int v90 = 0;
      uint64_t v91 = 0;
      uint64_t v92 = v88++;
      do
      {
        uint64_t v95 = v91 + v92;
        if (__OFADD__(v91, v92))
        {
          __break(1u);
LABEL_309:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v48 = v179;
          v47._rawValue = (void *)v27;
LABEL_69:
          uint64_t v49 = v182;
          __int16 v50 = v47._rawValue;
          NSDecimal.copyVariableLengthInteger(_:)(v47);
          if (!v51)
          {
            unint64_t v52 = v50[2];
            swift_bridgeObjectRelease();
            if (HIDWORD(v52)) {
              goto LABEL_379;
            }
            _So9NSDecimala__length_setter(v52, v48);
            unsigned int v180 = *(_DWORD *)v49;
            long long v181 = *(_OWORD *)(v49 + 4);
            uint64_t v53 = _So9NSDecimala__exponent_getter((char *)&v180);
            _So9NSDecimala__exponent_setter(v53, v48);
            _So9NSDecimala__isCompact_setter_0(0, v48);
            LOBYTE(v10) = 0;
            return v10 & 1;
          }
          goto LABEL_306;
        }
        if (v95 >= v86)
        {
          if (v90) {
            goto LABEL_304;
          }
          unsigned int v90 = *(unsigned __int16 *)(v89 + 2 * v92);
          if (*(_WORD *)(v89 + 2 * v92))
          {
            unsigned int v90 = *(unsigned __int16 *)(v76 + 2 * v91 + 32);
            if (*(_WORD *)(v76 + 2 * v91 + 32)) {
              goto LABEL_304;
            }
          }
        }
        else
        {
          if (v95 < 0) {
            goto LABEL_314;
          }
          if (v95 >= (unint64_t)v21[2]) {
            goto LABEL_315;
          }
          uint64_t v93 = 2 * v95;
          unsigned int v94 = v90
              + *(unsigned __int16 *)((char *)v87 + v93)
              + *(unsigned __int16 *)(v76 + 2 * v91 + 32) * *(unsigned __int16 *)(v89 + 2 * v92);
          unsigned int v90 = HIWORD(v94);
          *(_WORD *)((char *)v87 + v93) = v94;
        }
        ++v91;
      }
      while (v84 != v91);
      if (!v90) {
        continue;
      }
      BOOL v28 = __OFADD__(v84, v92);
      uint64_t v96 = v84 + v92;
      if (v28) {
        goto LABEL_353;
      }
      if (v96 >= v86) {
        goto LABEL_304;
      }
      if (v96 < 0) {
        goto LABEL_356;
      }
      if (v96 >= (unint64_t)v21[2]) {
        goto LABEL_357;
      }
      *((_WORD *)v87 + v96) = v90;
    }
    while (v88 != v85);
    uint64_t v97 = v21[2];
    if (v97)
    {
      uint64_t v46 = v169;
      uint64_t v75 = v172;
      if (*((_WORD *)v87 + v97 - 1))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v76 = (uint64_t)v21;
        uint64_t v21 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
        uint64_t v73 = v174;
      }
      else
      {
        uint64_t v99 = v97 + 14;
        uint64_t v73 = v174;
        do
        {
          v21[2] = v99 - 15;
          if (v99 == 15) {
            break;
          }
        }
        while (!*((unsigned __int16 *)v21 + v99--));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v76 = (uint64_t)v21;
        uint64_t v21 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v76 = (uint64_t)v21;
      uint64_t v46 = v169;
      uint64_t v21 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
      uint64_t v75 = v172;
      uint64_t v73 = v174;
    }
LABEL_121:
    v24 -= v27;
    if (v75 <= v24) {
      continue;
    }
    break;
  }
  uint64_t v74 = v21[196];
  if (v24 < 0)
  {
LABEL_259:
    __break(1u);
    goto LABEL_260;
  }
LABEL_108:
  if ((unint64_t)v24 >= *(void *)(v74 + 16)) {
    goto LABEL_342;
  }
  uint64_t v77 = *(void *)(v74 + 8 * v24 + 32);
  if (v174 < 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v76, v77, 8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_163;
  }
  uint64_t v78 = *(void *)(v76 + 16);
  if (!v78 || (uint64_t v79 = *(void *)(v77 + 16)) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = MEMORY[0x1E4FBC860];
LABEL_163:
    uint64_t v81 = (uint64_t *)v179;
    goto LABEL_164;
  }
  uint64_t v80 = v78 + v79;
  if (__OFADD__(v78, v79))
  {
LABEL_360:
    __break(1u);
LABEL_361:
    __break(1u);
LABEL_362:
    __break(1u);
LABEL_363:
    __break(1u);
    goto LABEL_364;
  }
  if (v80 > 7)
  {
    uint64_t v80 = 8;
LABEL_187:
    swift_bridgeObjectRetain();
    uint64_t v24 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v24 + 16) = v80;
    bzero((void *)(v24 + 32), 2 * v80);
    goto LABEL_188;
  }
  if (v80 < 0) {
    goto LABEL_378;
  }
  if (v80) {
    goto LABEL_187;
  }
  swift_bridgeObjectRetain();
  uint64_t v24 = MEMORY[0x1E4FBC860];
LABEL_188:
  uint64_t v115 = 0;
  uint64_t v116 = v77 + 32;
  uint64_t v117 = v24 + 32;
  do
  {
    if (v115 == v79) {
      goto LABEL_358;
    }
    unsigned int v118 = 0;
    uint64_t v119 = 0;
    uint64_t v120 = v115 + 1;
    do
    {
      if (v78 == v119) {
        goto LABEL_316;
      }
      uint64_t v123 = v119 + v115;
      if (__OFADD__(v119, v115)) {
        goto LABEL_317;
      }
      if (v123 >= v80)
      {
        if (v118) {
          goto LABEL_304;
        }
        unsigned int v118 = *(unsigned __int16 *)(v116 + 2 * v115);
        if (*(_WORD *)(v116 + 2 * v115))
        {
          unsigned int v118 = *(unsigned __int16 *)(v76 + 2 * v119 + 32);
          if (*(_WORD *)(v76 + 2 * v119 + 32)) {
            goto LABEL_304;
          }
        }
      }
      else
      {
        if (v123 < 0)
        {
          __break(1u);
LABEL_324:
          __break(1u);
LABEL_325:
          __break(1u);
LABEL_326:
          __break(1u);
LABEL_327:
          __break(1u);
          goto LABEL_328;
        }
        if ((unint64_t)v123 >= *(void *)(v24 + 16)) {
          goto LABEL_324;
        }
        uint64_t v121 = 2 * v123;
        unsigned int v122 = v118
             + *(unsigned __int16 *)(v117 + v121)
             + *(unsigned __int16 *)(v76 + 2 * v119 + 32) * *(unsigned __int16 *)(v116 + 2 * v115);
        unsigned int v118 = HIWORD(v122);
        *(_WORD *)(v117 + v121) = v122;
      }
      ++v119;
    }
    while (v78 != v119);
    if (v118)
    {
      BOOL v28 = __OFADD__(v78, v115);
      uint64_t v124 = v78 + v115;
      if (v28) {
        goto LABEL_361;
      }
      if (v124 >= v80) {
        goto LABEL_304;
      }
      if (v124 < 0) {
        goto LABEL_362;
      }
      if ((unint64_t)v124 >= *(void *)(v24 + 16)) {
        goto LABEL_363;
      }
      *(_WORD *)(v117 + 2 * v124) = v118;
    }
    uint64_t v115 = v120;
  }
  while (v120 != v79);
  uint64_t v125 = *(void *)(v24 + 16);
  if (!v125) {
    goto LABEL_318;
  }
  uint64_t v81 = (uint64_t *)v179;
  if (!*(_WORD *)(v117 + 2 * v125 - 2))
  {
    do
    {
      *(void *)(v24 + 16) = v125 - 1;
      if (v125 == 1) {
        break;
      }
    }
    while (!*(unsigned __int16 *)(v24 + 28 + 2 * v125--));
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  while (2)
  {
    swift_bridgeObjectRelease();
LABEL_164:
    uint64_t v70 = v182;
    uint64_t v73 = v174;
LABEL_165:
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v24);
    if (v101) {
      goto LABEL_306;
    }
    unint64_t v102 = *(void *)(v24 + 16);
    swift_bridgeObjectRelease();
    if (v102 >> 31) {
      goto LABEL_349;
    }
    _So9NSDecimala__length_setter(v102, (_DWORD *)v70);
    if (v73 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_350;
    }
    if (v73 > 0x7FFFFFFF) {
      goto LABEL_351;
    }
    unsigned int v180 = *(_DWORD *)v70;
    long long v181 = *(_OWORD *)(v70 + 4);
    int v103 = _So9NSDecimala__exponent_getter((char *)&v180);
    BOOL v28 = __OFSUB__(v103, v73);
    uint64_t v104 = (v103 - v73);
    if (v28) {
      goto LABEL_352;
    }
    _So9NSDecimala__exponent_setter(v104, (unsigned char *)v70);
    _So9NSDecimala__isCompact_setter_0(0, (_DWORD *)v70);
    unsigned int v180 = *(_DWORD *)v70;
    long long v181 = *(_OWORD *)(v70 + 4);
    int v105 = _So9NSDecimala__length_getter(&v180);
    uint64_t v106 = *((unsigned __int16 *)v81 + 2);
    uint64_t v107 = *((unsigned __int16 *)v81 + 3);
    if (!v105)
    {
      unsigned int v113 = *((_DWORD *)v81 + 4);
      unsigned int v180 = *(_DWORD *)v81;
      LOWORD(v181) = v106;
      WORD1(v181) = v107;
      *(void *)((char *)&v181 + 4) = v81[1];
      HIDWORD(v181) = v113;
      uint64_t v114 = _So9NSDecimala__exponent_getter((char *)&v180);
      _So9NSDecimala__exponent_setter(v114, (unsigned char *)v70);
LABEL_269:
      LOBYTE(v10) = 1;
      return v10 & 1;
    }
    NSDecimal.asVariableLengthInteger()(*(unsigned int *)v81 | (unint64_t)(v106 << 32) | (v107 << 48), v81[1], *((_DWORD *)v81 + 4));
    if (!v175)
    {
      uint64_t v112 = v108;
      goto LABEL_263;
    }
    uint64_t v178 = v108;
    uint64_t v24 = specialized abs<A>(_:)(v175);
    uint64_t v109 = v21[196];
    uint64_t v110 = *(void *)(v109 + 16);
    if (v110 > v24)
    {
      uint64_t v15 = v178;
      swift_bridgeObjectRetain();
      if ((v24 & 0x8000000000000000) == 0) {
        goto LABEL_175;
      }
LABEL_311:
      __break(1u);
LABEL_312:
      __break(1u);
LABEL_313:
      __break(1u);
LABEL_314:
      __break(1u);
LABEL_315:
      __break(1u);
LABEL_316:
      __break(1u);
LABEL_317:
      __break(1u);
LABEL_318:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v81 = (uint64_t *)v179;
      continue;
    }
    break;
  }
  if (!v110) {
    goto LABEL_365;
  }
  uint64_t v127 = v110 - 1;
  uint64_t v15 = v178;
  swift_bridgeObjectRetain();
  do
  {
    uint64_t v128 = v21[196];
    if ((unint64_t)v110 > *(void *)(v128 + 16)) {
      goto LABEL_359;
    }
    uint64_t v129 = *(void *)(v128 + 8 * v127 + 32);
    if (v175 < 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v148 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v15, v129, 8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = v148;
    }
    else
    {
      uint64_t v130 = *(void *)(v15 + 16);
      if (v130 && (uint64_t v131 = *(void *)(v129 + 16)) != 0)
      {
        uint64_t v174 = v127;
        if (__OFADD__(v130, v131)) {
          goto LABEL_366;
        }
        uint64_t v132 = *(void *)(v129 + 16);
        uint64_t v173 = v110;
        if (v130 + v131 >= 8) {
          uint64_t v133 = 8;
        }
        else {
          uint64_t v133 = v130 + v131;
        }
        if (v133 < 0) {
          goto LABEL_378;
        }
        swift_bridgeObjectRetain();
        uint64_t v182 = v129;
        uint64_t v134 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v134 + 16) = v133;
        uint64_t v135 = v134 + 32;
        bzero((void *)(v134 + 32), 2 * v133);
        uint64_t v136 = 0;
        uint64_t v137 = v182 + 32;
        do
        {
          unsigned int v138 = 0;
          uint64_t v139 = 0;
          uint64_t v140 = v136++;
          do
          {
            uint64_t v141 = v139 + v140;
            if (__OFADD__(v139, v140)) {
              goto LABEL_325;
            }
            if (v141 >= v133)
            {
              if (v138) {
                goto LABEL_304;
              }
              unsigned int v138 = *(unsigned __int16 *)(v137 + 2 * v140);
              if (*(_WORD *)(v137 + 2 * v140))
              {
                unsigned int v138 = *(unsigned __int16 *)(v15 + 2 * v139 + 32);
                if (*(_WORD *)(v15 + 2 * v139 + 32)) {
                  goto LABEL_304;
                }
              }
            }
            else
            {
              if (v141 < 0) {
                goto LABEL_334;
              }
              if ((unint64_t)v141 >= *(void *)(v134 + 16)) {
                goto LABEL_335;
              }
              uint64_t v142 = 2 * v141;
              unsigned int v143 = v138
                   + *(unsigned __int16 *)(v135 + v142)
                   + *(unsigned __int16 *)(v15 + 2 * v139 + 32) * *(unsigned __int16 *)(v137 + 2 * v140);
              unsigned int v138 = HIWORD(v143);
              *(_WORD *)(v135 + v142) = v143;
            }
            ++v139;
          }
          while (v130 != v139);
          if (v138)
          {
            BOOL v28 = __OFADD__(v130, v140);
            uint64_t v144 = v130 + v140;
            if (v28) {
              goto LABEL_370;
            }
            if (v144 >= v133) {
              goto LABEL_304;
            }
            if (v144 < 0) {
              goto LABEL_371;
            }
            if ((unint64_t)v144 >= *(void *)(v134 + 16)) {
              goto LABEL_372;
            }
            *(_WORD *)(v135 + 2 * v144) = v138;
          }
        }
        while (v136 != v132);
        uint64_t v145 = *(void *)(v134 + 16);
        if (v145 && !*(_WORD *)(v135 + 2 * v145 - 2))
        {
          uint64_t v146 = v145 + 14;
          do
          {
            *(void *)(v134 + 16) = v146 - 15;
            if (v146 == 15) {
              break;
            }
          }
          while (!*(unsigned __int16 *)(v134 + 2 * v146--));
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v15 = v134;
        uint64_t v21 = &demangling cache variable for type metadata for _ContiguousArrayStorage<NSNotificationCenter.Notifications.NotificationWrapper>;
        uint64_t v110 = v173;
        uint64_t v127 = v174;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v15 = MEMORY[0x1E4FBC860];
      }
    }
    v24 -= v127;
  }
  while (v110 <= v24);
  uint64_t v109 = v21[196];
  if (v24 < 0) {
    goto LABEL_311;
  }
LABEL_175:
  if ((unint64_t)v24 >= *(void *)(v109 + 16))
  {
LABEL_364:
    __break(1u);
LABEL_365:
    __break(1u);
LABEL_366:
    __break(1u);
    goto LABEL_367;
  }
  uint64_t v21 = v81;
  uint64_t v19 = *(void *)(v109 + 8 * v24 + 32);
  if (v175 < 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v112 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v15, v19, 8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_262;
  }
  uint64_t v25 = *(void *)(v15 + 16);
  if (!v25 || (unint64_t v16 = *(void *)(v19 + 16)) == 0)
  {
LABEL_260:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v112 = MEMORY[0x1E4FBC860];
LABEL_262:
    uint64_t v81 = v21;
LABEL_263:
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v112);
    if (v149) {
      goto LABEL_306;
    }
    unint64_t v150 = *(void *)(v112 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v150)) {
      goto LABEL_379;
    }
    _So9NSDecimala__length_setter(v150, v81);
    if (v175 >= (uint64_t)0xFFFFFFFF80000000)
    {
      if (v175 <= 0x7FFFFFFF)
      {
        unsigned int v180 = *(_DWORD *)v81;
        long long v181 = *(_OWORD *)((char *)v81 + 4);
        int v151 = _So9NSDecimala__exponent_getter((char *)&v180);
        BOOL v28 = __OFSUB__(v151, v175);
        uint64_t v152 = (v151 - v175);
        if (!v28)
        {
          _So9NSDecimala__exponent_setter(v152, v81);
          _So9NSDecimala__isCompact_setter_0(0, v81);
          goto LABEL_269;
        }
LABEL_369:
        __break(1u);
LABEL_370:
        __break(1u);
LABEL_371:
        __break(1u);
LABEL_372:
        __break(1u);
        goto LABEL_373;
      }
LABEL_368:
      __break(1u);
      goto LABEL_369;
    }
LABEL_367:
    __break(1u);
    goto LABEL_368;
  }
  uint64_t v111 = v25 + v16;
  if (__OFADD__(v25, v16))
  {
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
    goto LABEL_377;
  }
  if (v111 > 7) {
    goto LABEL_275;
  }
  if (v111 < 0) {
    goto LABEL_378;
  }
  if (v111) {
    goto LABEL_276;
  }
  swift_bridgeObjectRetain();
  uint64_t v112 = MEMORY[0x1E4FBC860];
LABEL_277:
  uint64_t v153 = 0;
  uint64_t v154 = v19 + 32;
  uint64_t v155 = v112 + 32;
  while (2)
  {
    if (v153 == v16)
    {
LABEL_373:
      __break(1u);
      goto LABEL_374;
    }
    unsigned int v156 = 0;
    uint64_t v157 = 0;
    uint64_t v158 = v153 + 1;
    do
    {
      if (v25 == v157) {
        goto LABEL_340;
      }
      uint64_t v161 = v157 + v153;
      if (__OFADD__(v157, v153)) {
        goto LABEL_341;
      }
      if (v161 >= v111)
      {
        if (v156) {
          goto LABEL_304;
        }
        unsigned int v156 = *(unsigned __int16 *)(v154 + 2 * v153);
        if (*(_WORD *)(v154 + 2 * v153))
        {
          unsigned int v156 = *(unsigned __int16 *)(v15 + 2 * v157 + 32);
          if (*(_WORD *)(v15 + 2 * v157 + 32)) {
            goto LABEL_304;
          }
        }
      }
      else
      {
        if (v161 < 0) {
          goto LABEL_354;
        }
        if ((unint64_t)v161 >= *(void *)(v112 + 16)) {
          goto LABEL_355;
        }
        uint64_t v159 = 2 * v161;
        unsigned int v160 = v156
             + *(unsigned __int16 *)(v155 + v159)
             + *(unsigned __int16 *)(v15 + 2 * v157 + 32) * *(unsigned __int16 *)(v154 + 2 * v153);
        unsigned int v156 = HIWORD(v160);
        *(_WORD *)(v155 + v159) = v160;
      }
      ++v157;
    }
    while (v25 != v157);
    if (!v156)
    {
LABEL_298:
      uint64_t v153 = v158;
      if (v158 != v16) {
        continue;
      }
      uint64_t v163 = *(void *)(v112 + 16);
      if (v163 && !*(_WORD *)(v155 + 2 * v163 - 2))
      {
        do
        {
          *(void *)(v112 + 16) = v163 - 1;
          if (v163 == 1) {
            break;
          }
        }
        while (!*(unsigned __int16 *)(v112 + 28 + 2 * v163--));
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_262;
    }
    break;
  }
  BOOL v28 = __OFADD__(v25, v153);
  uint64_t v162 = v25 + v153;
  if (v28) {
    goto LABEL_375;
  }
  if (v162 >= v111) {
    goto LABEL_304;
  }
  if (v162 < 0) {
    goto LABEL_376;
  }
  if ((unint64_t)v162 < *(void *)(v112 + 16))
  {
    *(_WORD *)(v155 + 2 * v162) = v156;
    goto LABEL_298;
  }
LABEL_377:
  __break(1u);
LABEL_378:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_379:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSDecimal.copyVariableLengthInteger(_:)(Swift::OpaquePointer a1)
{
  unint64_t v2 = *((void *)a1._rawValue + 2);
  if (v2 <= 8)
  {
    _So9NSDecimala__length_setter(*((void *)a1._rawValue + 2), (_DWORD *)v1);
    switch(v2)
    {
      case 0uLL:
        *(void *)(v1 + 12) = 0;
        *(void *)(v1 + 4) = 0;
        break;
      case 1uLL:
        *(_WORD *)(v1 + 4) = *((_WORD *)a1._rawValue + 16);
        *(void *)(v1 + 6) = 0;
        *(void *)(v1 + 12) = 0;
        break;
      case 2uLL:
        *(_DWORD *)(v1 + 4) = *((_DWORD *)a1._rawValue + 8);
        *(void *)(v1 + 8) = 0;
        *(_DWORD *)(v1 + 16) = 0;
        break;
      case 3uLL:
        __int16 v5 = *((_WORD *)a1._rawValue + 18);
        *(_DWORD *)(v1 + 4) = *((_DWORD *)a1._rawValue + 8);
        *(_WORD *)(v1 + 8) = v5;
        *(void *)(v1 + 10) = 0;
        *(_WORD *)(v1 + 18) = 0;
        break;
      case 4uLL:
        *(void *)(v1 + 4) = *((void *)a1._rawValue + 4);
        *(void *)(v1 + 12) = 0;
        break;
      case 5uLL:
        __int16 v6 = *((_WORD *)a1._rawValue + 20);
        *(void *)(v1 + 4) = *((void *)a1._rawValue + 4);
        *(_WORD *)(v1 + 12) = v6;
        *(_DWORD *)(v1 + 14) = 0;
        *(_WORD *)(v1 + 18) = 0;
        break;
      case 6uLL:
        unsigned int v7 = *((_DWORD *)a1._rawValue + 10);
        *(void *)(v1 + 4) = *((void *)a1._rawValue + 4);
        *(void *)(v1 + 12) = v7;
        break;
      case 7uLL:
        int v8 = *((_DWORD *)a1._rawValue + 10);
        unsigned __int16 v9 = *((_WORD *)a1._rawValue + 22);
        *(void *)(v1 + 4) = *((void *)a1._rawValue + 4);
        *(_DWORD *)(v1 + 12) = v8;
        *(_DWORD *)(v1 + 16) = v9;
        break;
      case 8uLL:
        *(_OWORD *)(v1 + 4) = *((_OWORD *)a1._rawValue + 2);
        break;
      default:
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *uint64_t v3 = 0;
    swift_willThrow();
  }
}

uint64_t specialized abs<A>(_:)(uint64_t result)
{
  if (result < 0)
  {
    BOOL v1 = __OFSUB__(0, result);
    uint64_t result = -result;
    if (v1) {
      __break(1u);
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError;
  if (!lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError;
  if (!lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError);
  }
  return result;
}

uint64_t specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X8>)
{
  unint64_t v7 = *(void *)(a1 + 16);
  int64_t v8 = *(void *)(a2 + 16);
  if (v8 >= v7) {
    uint64_t v9 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 16);
  }
  if (a3 < 0) {
    goto LABEL_62;
  }
  if (a3)
  {
    uint64_t v13 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v13 + 16) = a3;
    bzero((void *)(v13 + 32), 2 * a3);
    uint64_t v22 = v13;
    if (v9)
    {
LABEL_7:
      unint64_t v14 = *(void *)(v13 + 16);
      if (v14)
      {
        unint64_t v4 = 0;
        unsigned int v6 = *(unsigned __int16 *)(a2 + 32) + *(unsigned __int16 *)(a1 + 32);
        while (1)
        {
          unsigned int v5 = HIWORD(v6);
          *(_WORD *)(v13 + 32 + 2 * v4) = v6;
          a4 = v4 + 1;
          if (v9 - 1 == v4) {
            break;
          }
          uint64_t v15 = 2 * v4;
          v5 += *(unsigned __int16 *)(a1 + 34 + v15);
          unsigned int v6 = v5 + *(unsigned __int16 *)(a2 + 34 + v15);
          unint64_t v4 = a4;
          if (a4 >= v14) {
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        __break(1u);
      }
      uint64_t v22 = v13;
      if (a4 >= v7)
      {
LABEL_30:
        if ((uint64_t)a4 >= v8) {
          goto LABEL_49;
        }
LABEL_31:
        if (v5)
        {
          while ((int64_t)a4 < *(void *)(v13 + 16))
          {
            int v18 = *(unsigned __int16 *)(a2 + 32 + 2 * a4);
            *(_WORD *)(v13 + 2 * a4 + 32) = v18 + 1;
            if (v8 - 1 == a4)
            {
              uint64_t v22 = v13;
              if ((v18 + 1) >> 16) {
                goto LABEL_50;
              }
              goto LABEL_47;
            }
            ++a4;
            if (v18 != 0xFFFF)
            {
              uint64_t v22 = v13;
              goto LABEL_36;
            }
          }
          goto LABEL_59;
        }
LABEL_36:
        if ((uint64_t)a4 >= v8) {
          goto LABEL_54;
        }
        goto LABEL_39;
      }
      if (v6 >= 0x10000)
      {
        while (v4 + 1 < *(void *)(v13 + 16))
        {
          int v16 = *(unsigned __int16 *)(a1 + 34 + 2 * v4);
          *(_WORD *)(v13 + 2 * v4 + 34) = v16 + 1;
          if (v7 - 2 == v4)
          {
            unsigned int v5 = (v16 + 1) >> 16;
            uint64_t v22 = v13;
            a4 = v7;
            if ((uint64_t)v7 < v8) {
              goto LABEL_31;
            }
            goto LABEL_49;
          }
          ++v4;
          if (v16 != 0xFFFF)
          {
            uint64_t v22 = v13;
            a4 = v4 + 1;
            goto LABEL_18;
          }
        }
        goto LABEL_60;
      }
LABEL_18:
      if ((uint64_t)a4 >= (uint64_t)v7)
      {
        unsigned int v5 = 0;
        if ((uint64_t)a4 >= v8)
        {
LABEL_49:
          int64_t v8 = a4;
          if (v5)
          {
LABEL_50:
            if (v8 > a3)
            {
              swift_bridgeObjectRelease();
              lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
              swift_allocError();
              *uint64_t v20 = 0;
              return swift_willThrow();
            }
            if ((unint64_t)v8 >= *(void *)(v13 + 16)) {
              goto LABEL_61;
            }
            *(_WORD *)(v13 + 2 * v8 + 32) = 1;
            uint64_t v22 = v13;
            a4 = v8 + 1;
          }
          else
          {
LABEL_47:
            a4 = v8;
          }
LABEL_54:
          specialized RangeReplaceableCollection<>.removeLast(_:)(*(void *)(v13 + 16) - a4);
          return v22;
        }
        goto LABEL_31;
      }
LABEL_23:
      if (a4 <= v7) {
        unint64_t v17 = v7;
      }
      else {
        unint64_t v17 = a4;
      }
      while (v17 != a4)
      {
        if (a4 >= *(void *)(v13 + 16)) {
          goto LABEL_56;
        }
        *(_WORD *)(v13 + 2 * a4 + 32) = *(_WORD *)(a1 + 32 + 2 * a4);
        if ((uint64_t)++a4 >= (uint64_t)v7)
        {
          unsigned int v5 = 0;
          uint64_t v22 = v13;
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    uint64_t v22 = MEMORY[0x1E4FBC860];
    if (v9) {
      goto LABEL_7;
    }
  }
  a4 = 0;
  if (v7) {
    goto LABEL_23;
  }
  if (!v8) {
    goto LABEL_54;
  }
LABEL_39:
  if (a4 <= v8) {
    unint64_t v19 = v8;
  }
  else {
    unint64_t v19 = a4;
  }
  while (v19 != a4)
  {
    if (a4 >= *(void *)(v13 + 16)) {
      goto LABEL_58;
    }
    *(_WORD *)(v13 + 2 * a4 + 32) = *(_WORD *)(a2 + 32 + 2 * a4);
    if ((uint64_t)++a4 >= v8)
    {
      uint64_t v22 = v13;
      goto LABEL_54;
    }
  }
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    unint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[2 * a1 + 32];
    uint64_t v15 = &v4[2 * a2 + 32];
    if (a1 != a2 || result >= &v15[2 * v14]) {
      uint64_t result = (char *)memmove(result, v15, 2 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *unint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    unint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[4 * a1 + 32];
    uint64_t v15 = &v4[4 * a2 + 32];
    if (a1 != a2 || result >= &v15[4 * v14]) {
      uint64_t result = (char *)memmove(result, v15, 4 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *unint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    unint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = v12 - a2;
  if (__OFSUB__(v12, a2)) {
    goto LABEL_27;
  }
  if ((v13 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[a1 + 32];
    uint64_t v14 = &v4[a2 + 32];
    if (a1 != a2 || result >= &v14[v13]) {
      uint64_t result = (char *)memmove(result, v14, v13);
    }
    uint64_t v15 = *((void *)v4 + 2);
    uint64_t v16 = __OFADD__(v15, v8);
    uint64_t v17 = v15 + v8;
    if (!v16)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *unint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static AttributedString.+ infix(_:_:)@<X0>(void *a1@<X0>, _OWORD **a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (_OWORD *)*a1;
  uint64_t v23 = *a2;
  *a3 = *a1;
  long long v4 = v3[1];
  long long v5 = v3[3];
  v32[1] = v3[2];
  v32[2] = v5;
  v32[0] = v4;
  swift_retain();
  outlined retain of Locale((uint64_t)v32);
  uint64_t v6 = BigString.endIndex.getter();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  outlined release of Locale((uint64_t)v32);
  long long v13 = v3[1];
  long long v14 = v3[3];
  v31[1] = v3[2];
  v31[2] = v14;
  v31[0] = v13;
  swift_retain();
  outlined retain of Locale((uint64_t)v31);
  uint64_t v15 = BigString.endIndex.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  outlined release of Locale((uint64_t)v31);
  swift_release();
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    *(void *)&long long v24 = v6;
    *((void *)&v24 + 1) = v8;
    uint64_t v25 = v10;
    uint64_t v26 = v12;
    uint64_t v27 = v15;
    uint64_t v28 = v17;
    uint64_t v29 = v19;
    uint64_t v30 = v21;
    return specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v24, v23);
  }
  return result;
}

uint64_t _AttributedStringFromMarkdownCreatorConcrete.append(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  _AttributedStringFromMarkdownCreatorConcrete.processAttributes(_:)(a3, (uint64_t)&v28);
  uint64_t v5 = v28;
  uint64_t v6 = v29;
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v27, v5, v6, (uint64_t *)v37);
  uint64_t v26 = *(void *)&v37[0];
  uint64_t v7 = *(_OWORD **)(v3 + direct field offset for _AttributedStringFromMarkdownCreatorConcrete.str);
  long long v8 = v7[1];
  long long v9 = v7[3];
  v37[1] = v7[2];
  v37[2] = v9;
  v37[0] = v8;
  swift_retain();
  outlined retain of Locale((uint64_t)v37);
  uint64_t v10 = BigString.endIndex.getter();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  outlined release of Locale((uint64_t)v37);
  swift_release();
  long long v17 = v7[2];
  v36[0] = v7[1];
  v36[1] = v17;
  v36[2] = v7[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v36);
  uint64_t v18 = BigString.endIndex.getter();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  outlined release of Locale((uint64_t)v36);
  swift_release();
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t v28 = v10;
    uint64_t v29 = v12;
    uint64_t v30 = v14;
    uint64_t v31 = v16;
    uint64_t v32 = v18;
    uint64_t v33 = v20;
    uint64_t v34 = v22;
    uint64_t v35 = v24;
    specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v28, v26);
    return swift_release();
  }
  return result;
}

uint64_t specialized AttributedString.replaceSubrange<A, B>(_:with:)(_OWORD *a1, _OWORD *a2)
{
  uint64_t v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v6 = *(void **)v2;
    long long v7 = *(_OWORD *)(*(void *)v2 + 16);
    long long v8 = *(_OWORD *)(*(void *)v2 + 48);
    v25[1] = *(_OWORD *)(*(void *)v2 + 32);
    void v25[2] = v8;
    v25[0] = v7;
    uint64_t v9 = v6[8];
    uint64_t v10 = v6[9];
    uint64_t v11 = v6[10];
    uint64_t v12 = v6[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v25);
    swift_unknownObjectRetain();
    *(void *)uint64_t v3 = AttributedString.Guts.init(string:runs:)(v25, v9, v10, v11, v12);
    swift_release();
  }
  uint64_t v13 = *(_OWORD **)v3;
  long long v14 = *(_OWORD *)(*(void *)v3 + 16);
  long long v15 = *(_OWORD *)(*(void *)v3 + 48);
  v24[1] = *(_OWORD *)(*(void *)v3 + 32);
  v24[2] = v15;
  v24[0] = v14;
  swift_retain();
  outlined retain of Locale((uint64_t)v24);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v24);
  long long v16 = v13[1];
  long long v17 = v13[3];
  v23[1] = v13[2];
  v23[2] = v17;
  v23[0] = v16;
  long long v18 = v13[1];
  v26[1] = v13[2];
  v26[2] = v17;
  v26[0] = v18;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v26, (uint64_t)v27);
  outlined retain of Locale((uint64_t)v27);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v23);
  swift_release();
  long long v19 = a1[1];
  v22[0] = *a1;
  v22[1] = v19;
  long long v20 = a1[3];
  v22[2] = a1[2];
  v22[3] = v20;
  return specialized AttributedString.Guts.replaceSubrange<A>(_:with:)((uint64_t)v22, a2);
}

uint64_t specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(uint64_t a1, _OWORD *a2)
{
  long long v3 = a2[2];
  v97[0] = a2[1];
  v97[1] = v3;
  v97[2] = a2[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v97);
  uint64_t v4 = BigString.startIndex.getter();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  outlined release of Locale((uint64_t)v97);
  long long v11 = a2[2];
  v95[0] = a2[1];
  v95[1] = v11;
  long long v96 = a2[3];
  v98[0] = v95[0];
  v98[1] = v11;
  v98[2] = v96;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v98, (uint64_t)v99);
  outlined retain of Locale((uint64_t)v99);
  uint64_t v12 = BigString.endIndex.getter();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  outlined release of Locale((uint64_t)v95);
  uint64_t v84 = v4;
  uint64_t v85 = v6;
  uint64_t v86 = v8;
  uint64_t v87 = v10;
  uint64_t v88 = v12;
  uint64_t v89 = v14;
  uint64_t v90 = v16;
  uint64_t v91 = v18;
  long long v19 = a2[2];
  long long v92 = a2[1];
  long long v93 = v19;
  long long v94 = a2[3];
  swift_retain();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v59);
  uint64_t v20 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v27 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  outlined release of Locale((uint64_t)v60);
  swift_release();
  uint64_t v76 = v20;
  uint64_t v77 = v22;
  uint64_t v78 = v24;
  uint64_t v79 = v26;
  uint64_t v80 = v27;
  uint64_t v81 = v29;
  uint64_t v82 = v31;
  uint64_t v83 = v33;
  long long v34 = a2[2];
  long long v73 = a2[1];
  long long v74 = v34;
  long long v75 = a2[3];
  v100[0] = v73;
  v100[1] = v34;
  v100[2] = v75;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v100, (uint64_t)v101);
  outlined retain of Locale((uint64_t)v101);
  BigSubstring.UnicodeScalarView.init(_unchecked:in:)();
  swift_release();
  long long v35 = v58[2];
  long long v70 = v58[1];
  long long v71 = v35;
  long long v72 = v58[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v62);
  char v53 = BigSubstring.UnicodeScalarView.isIdentical(to:)();
  outlined release of Locale((uint64_t)v63);
  BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v57 = BigString.Index.utf8Offset.getter();
  BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v56 = BigString.Index.utf8Offset.getter();
  swift_retain();
  uint64_t v55 = BigString.Index.utf8Offset.getter();
  uint64_t v36 = BigString.Index.utf8Offset.getter();
  if (v53)
  {
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v55, v36, (uint64_t)a2, v57, v56);
    uint64_t v37 = BigString.Index.utf8Offset.getter();
    uint64_t v38 = BigString.Index.utf8Offset.getter();
    uint64_t v39 = v37;
    char v40 = 0;
LABEL_7:
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v39, v38, v40, 0);
    outlined release of Locale((uint64_t)v61);
    return swift_release();
  }
  uint64_t v54 = v36;
  uint64_t v41 = BigString.Index.utf8Offset.getter();
  uint64_t v42 = BigString.Index.utf8Offset.getter();
  uint64_t v43 = AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v41, v42);
  uint64_t v45 = v44;
  long long v46 = v58[2];
  v68[0] = v58[1];
  v68[1] = v46;
  long long v69 = v58[3];
  v102[0] = v68[0];
  v102[1] = v46;
  v102[2] = v69;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v102, (uint64_t)v103);
  outlined retain of Locale((uint64_t)v103);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v68);
  uint64_t v47 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v64);
  outlined retain of Locale((uint64_t)v61);
  uint64_t v48 = (void (*)(long long *, void))BigString.unicodeScalars.modify();
  BigString.UnicodeScalarView.replaceSubrange(_:with:)();
  v48(v104, 0);
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v55, v54, (uint64_t)a2, v57, v56);
  long long v49 = v58[2];
  v66[0] = v58[1];
  v66[1] = v49;
  long long v67 = v58[3];
  v104[0] = v66[0];
  v104[1] = v49;
  v104[2] = v67;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v104, (uint64_t)v105);
  outlined retain of Locale((uint64_t)v105);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v66);
  uint64_t v50 = BigString.UTF8View.count.getter();
  uint64_t result = outlined release of Locale((uint64_t)v65);
  uint64_t v52 = v50 - v47;
  if (__OFSUB__(v50, v47))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v38 = v45 + v52;
  if (__OFADD__(v45, v52))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v38 >= v43)
  {
    uint64_t v39 = v43;
    char v40 = 1;
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + 80);
  if (*(void *)(v4 + 64))
  {
    unint64_t v8 = swift_unknownObjectRetain_n();
    specialized Rope._endPath.getter(v8);
    uint64_t result = swift_unknownObjectRelease_n();
    if (!v5 || (a3 & 1) == 0 && a1 == a2) {
      return result;
    }
    char v105 = a3;
    long long v10 = *(_OWORD *)(v4 + 32);
    v150[0] = *(_OWORD *)(v4 + 16);
    v150[1] = v10;
    long long v151 = *(_OWORD *)(v4 + 48);
    v152[0] = v150[0];
    v152[1] = v10;
    v152[2] = v151;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v152, (uint64_t)v153);
    outlined retain of Locale((uint64_t)v153);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v150);
    long long v11 = *(_OWORD *)(v4 + 32);
    v148[0] = *(_OWORD *)(v4 + 16);
    v148[1] = v11;
    long long v149 = *(_OWORD *)(v4 + 48);
    v154[0] = v148[0];
    v154[1] = v11;
    v154[2] = v149;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v154, (uint64_t)v155);
    outlined retain of Locale((uint64_t)v155);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v148);
    uint64_t v12 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    outlined release of Locale((uint64_t)v114);
    long long v19 = *(_OWORD *)(v4 + 32);
    v146[0] = *(_OWORD *)(v4 + 16);
    v146[1] = v19;
    long long v147 = *(_OWORD *)(v4 + 48);
    v156[0] = v146[0];
    v156[1] = v19;
    v156[2] = v147;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v156, (uint64_t)v157);
    outlined retain of Locale((uint64_t)v157);
    BigString.utf8.getter();
    uint64_t result = outlined release of Locale((uint64_t)v146);
    if (__OFSUB__(a2, a1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v107 = (long long *)(v4 + 16);
      uint64_t v20 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v22 = v21;
      uint64_t v24 = v23;
      uint64_t v25 = v16;
      uint64_t v27 = v26;
      uint64_t result = outlined release of Locale((uint64_t)v115);
      v145[0] = v12;
      v145[1] = v14;
      v145[2] = v25;
      v145[3] = v18;
      v145[4] = v20;
      v145[5] = v22;
      v145[6] = v24;
      v145[7] = v27;
      if ((v105 & 1) == 0 && a4)
      {
        uint64_t v28 = *(void *)(a4 + 16);
        if (!v28) {
          goto LABEL_19;
        }
        uint64_t v29 = (uint64_t *)(a4 + 40);
        while (1)
        {
          uint64_t v30 = *v29;
          v29 += 2;
          if (v30) {
            break;
          }
          if (!--v28)
          {
            if ((v105 & 1) == 0) {
              goto LABEL_18;
            }
            goto LABEL_24;
          }
        }
      }
      uint64_t result = AttributedString.Guts.fixScalarConstrainedAttributes(in:)();
      if (v105)
      {
LABEL_24:
        if (static BigString.Index.== infix(_:_:)())
        {
          long long v34 = v107[1];
          long long v170 = *v107;
          long long v171 = v34;
          long long v172 = v107[2];
          long long v178 = v170;
          long long v179 = v34;
          long long v180 = v172;
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v178, (uint64_t)v125);
          outlined retain of Locale((uint64_t)v125);
          BigString.startIndex.getter();
          outlined release of Locale((uint64_t)&v170);
          uint64_t result = static BigString.Index.< infix(_:_:)();
          if ((result & 1) == 0) {
            return result;
          }
          long long v35 = v107[1];
          long long v166 = *v107;
          long long v167 = v35;
          long long v168 = v107[2];
          long long v181 = v166;
          long long v182 = v35;
          long long v183 = v168;
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v181, (uint64_t)v127);
          outlined retain of Locale((uint64_t)v127);
          BigString.endIndex.getter();
          outlined release of Locale((uint64_t)&v166);
          uint64_t result = static BigString.Index.< infix(_:_:)();
          if ((result & 1) == 0) {
            return result;
          }
          uint64_t result = a1 - 1;
          if (!__OFSUB__(a1, 1))
          {
            uint64_t result = AttributedString.Guts._needsParagraphFixing(from:to:)(result, a1);
            if ((result & 1) == 0) {
              return result;
            }
            long long v36 = v107[1];
            long long v162 = *v107;
            long long v163 = v36;
            long long v164 = v107[2];
            long long v184 = v162;
            long long v185 = v36;
            long long v186 = v164;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v184, (uint64_t)v129);
            outlined retain of Locale((uint64_t)v129);
            uint64_t v37 = BigString.index(before:)();
            uint64_t v39 = v38;
            uint64_t v41 = v40;
            uint64_t v43 = v42;
            outlined release of Locale((uint64_t)&v162);
            long long v44 = v107[1];
            long long v158 = *v107;
            long long v159 = v44;
            long long v160 = v107[2];
            long long v187 = v158;
            long long v188 = v44;
            long long v189 = v160;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v187, (uint64_t)v136);
            outlined retain of Locale((uint64_t)v136);
            BigString.utf8.getter();
            outlined release of Locale((uint64_t)&v158);
            long long v45 = v107[1];
            long long v142 = *v107;
            long long v143 = v45;
            long long v144 = v107[2];
            long long v118 = v142;
            long long v119 = v45;
            long long v120 = v144;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v118, (uint64_t)v138);
            outlined retain of Locale((uint64_t)v138);
            uint64_t v46 = BigString.index(after:)();
            uint64_t v48 = v47;
            uint64_t v50 = v49;
            uint64_t v52 = v51;
            outlined release of Locale((uint64_t)&v142);
            uint64_t result = static BigString.Index.< infix(_:_:)();
            if ((result & 1) == 0)
            {
              *(void *)&long long v131 = v37;
              *((void *)&v131 + 1) = v39;
              *(void *)&long long v132 = v41;
              *((void *)&v132 + 1) = v43;
              *(void *)&long long v133 = v46;
              *((void *)&v133 + 1) = v48;
              uint64_t v134 = v50;
              uint64_t v135 = v52;
              specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)&v131, &v110);
              uint64_t result = outlined release of Locale((uint64_t)v140);
              if (v113 == 2)
              {
LABEL_87:
                __break(1u);
                return result;
              }
              uint64_t result = static BigString.Index.< infix(_:_:)();
              if ((result & 1) == 0)
              {
                int64_t v106 = BigString.Index.utf8Offset.getter();
                uint64_t result = BigString.Index.utf8Offset.getter();
                int64_t v53 = result;
LABEL_60:
                LOBYTE(v74) = 0;
                int64_t v100 = 0;
                int64_t v101 = 0;
                int v102 = 0;
                goto LABEL_61;
              }
              goto LABEL_82;
            }
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
            goto LABEL_83;
          }
          goto LABEL_76;
        }
        long long v54 = v107[1];
        long long v142 = *v107;
        long long v143 = v54;
        long long v144 = v107[2];
        long long v158 = v142;
        long long v159 = v54;
        long long v160 = v144;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v158, (uint64_t)v161);
        outlined retain of Locale((uint64_t)v161);
        BigString.startIndex.getter();
        outlined release of Locale((uint64_t)&v142);
        if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
        {
          int64_t v53 = 0;
          uint64_t v73 = 0;
          int v74 = 1;
          uint64_t v55 = v107;
          goto LABEL_49;
        }
        uint64_t result = a1 - 1;
        if (!__OFSUB__(a1, 1))
        {
          uint64_t v55 = v107;
          if (AttributedString.Guts._needsParagraphFixing(from:to:)(result, a1))
          {
            long long v56 = v107[1];
            v140[0] = *v107;
            v140[1] = v56;
            long long v141 = v107[2];
            long long v162 = v140[0];
            long long v163 = v56;
            long long v164 = v141;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v162, (uint64_t)v165);
            outlined retain of Locale((uint64_t)v165);
            uint64_t v57 = BigString.index(before:)();
            uint64_t v59 = v58;
            uint64_t v61 = v60;
            uint64_t v63 = v62;
            outlined release of Locale((uint64_t)v140);
            long long v64 = v107[1];
            v138[0] = *v107;
            v138[1] = v64;
            long long v139 = v107[2];
            long long v166 = v138[0];
            long long v167 = v64;
            long long v168 = v139;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v166, (uint64_t)v169);
            outlined retain of Locale((uint64_t)v169);
            BigString.utf8.getter();
            outlined release of Locale((uint64_t)v138);
            long long v65 = v107[1];
            v136[0] = *v107;
            v136[1] = v65;
            long long v137 = v107[2];
            long long v170 = v136[0];
            long long v171 = v65;
            long long v172 = v137;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v170, (uint64_t)v173);
            outlined retain of Locale((uint64_t)v173);
            uint64_t v66 = BigString.index(after:)();
            uint64_t v68 = v67;
            uint64_t v70 = v69;
            uint64_t v72 = v71;
            outlined release of Locale((uint64_t)v136);
            uint64_t result = static BigString.Index.< infix(_:_:)();
            if (result)
            {
LABEL_77:
              __break(1u);
LABEL_78:
              __break(1u);
              goto LABEL_79;
            }
            *(void *)&long long v131 = v57;
            *((void *)&v131 + 1) = v59;
            *(void *)&long long v132 = v61;
            *((void *)&v132 + 1) = v63;
            *(void *)&long long v133 = v66;
            *((void *)&v133 + 1) = v68;
            uint64_t v134 = v70;
            uint64_t v135 = v72;
            specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)&v131, &v110);
            uint64_t result = outlined release of Locale((uint64_t)v116);
            if (v113 == 2)
            {
LABEL_85:
              __break(1u);
              goto LABEL_86;
            }
            uint64_t result = static BigString.Index.< infix(_:_:)();
            if (result) {
              goto LABEL_78;
            }
            uint64_t v73 = BigString.Index.utf8Offset.getter();
            int64_t v53 = BigString.Index.utf8Offset.getter();
            int v74 = 0;
          }
          else
          {
            int64_t v53 = 0;
            uint64_t v73 = 0;
            int v74 = 1;
          }
LABEL_49:
          long long v81 = v55[1];
          v129[0] = *v55;
          v129[1] = v81;
          long long v130 = v55[2];
          long long v178 = v129[0];
          long long v179 = v81;
          long long v180 = v130;
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v178, (uint64_t)v174);
          outlined retain of Locale((uint64_t)v174);
          BigString.endIndex.getter();
          outlined release of Locale((uint64_t)v129);
          uint64_t result = static BigString.Index.< infix(_:_:)();
          int64_t v82 = a2;
          int64_t v106 = v73;
          if ((result & 1) == 0) {
            goto LABEL_59;
          }
          if (v74)
          {
            if (a2 <= 0) {
              return result;
            }
          }
          else if (v53 >= a2)
          {
            goto LABEL_60;
          }
          int64_t v82 = a2;
          uint64_t result = AttributedString.Guts._needsParagraphFixing(from:to:)(a2 - 1, a2);
          if ((result & 1) == 0)
          {
LABEL_59:
            int64_t v100 = 0;
            int64_t v101 = 0;
            int v102 = 0;
            goto LABEL_62;
          }
          int64_t v104 = v53;
          long long v83 = v107[1];
          v127[0] = *v107;
          v127[1] = v83;
          long long v128 = v107[2];
          long long v181 = v127[0];
          long long v182 = v83;
          long long v183 = v128;
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v181, (uint64_t)v175);
          outlined retain of Locale((uint64_t)v175);
          uint64_t v84 = BigString.index(before:)();
          uint64_t v86 = v85;
          uint64_t v88 = v87;
          uint64_t v90 = v89;
          outlined release of Locale((uint64_t)v127);
          long long v91 = v107[1];
          v125[0] = *v107;
          v125[1] = v91;
          long long v126 = v107[2];
          long long v184 = v125[0];
          long long v185 = v91;
          long long v186 = v126;
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v184, (uint64_t)v176);
          outlined retain of Locale((uint64_t)v176);
          BigString.utf8.getter();
          outlined release of Locale((uint64_t)v125);
          long long v92 = v107[1];
          v123[0] = *v107;
          v123[1] = v92;
          long long v124 = v107[2];
          long long v187 = v123[0];
          long long v188 = v92;
          long long v189 = v124;
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v187, (uint64_t)v177);
          outlined retain of Locale((uint64_t)v177);
          uint64_t v93 = BigString.index(after:)();
          uint64_t v95 = v94;
          uint64_t v97 = v96;
          uint64_t v99 = v98;
          outlined release of Locale((uint64_t)v123);
          uint64_t result = static BigString.Index.< infix(_:_:)();
          if ((result & 1) == 0)
          {
            *(void *)&long long v118 = v84;
            *((void *)&v118 + 1) = v86;
            *(void *)&long long v119 = v88;
            *((void *)&v119 + 1) = v90;
            *(void *)&long long v120 = v93;
            *((void *)&v120 + 1) = v95;
            uint64_t v121 = v97;
            uint64_t v122 = v99;
            specialized BidirectionalCollection<>._getBlock(for:in:)(2, (uint64_t)&v118, &v110);
            uint64_t result = outlined release of Locale((uint64_t)v117);
            if (v113 == 2)
            {
LABEL_86:
              __break(1u);
              goto LABEL_87;
            }
            uint64_t result = static BigString.Index.< infix(_:_:)();
            int64_t v53 = v104;
            if ((result & 1) == 0)
            {
              int64_t v100 = BigString.Index.utf8Offset.getter();
              uint64_t result = BigString.Index.utf8Offset.getter();
              int64_t v101 = result;
              int v102 = 1;
LABEL_61:
              int64_t v82 = a2;
LABEL_62:
              if ((v74 & 1) == 0 && v53 > a1)
              {
                uint64_t v110 = 0;
                uint64_t v111 = 0;
                uint64_t result = AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v110, v106, a1, v53);
              }
              if (v101 > v82) {
                int v103 = v102;
              }
              else {
                int v103 = 0;
              }
              if (v103 == 1)
              {
                uint64_t v110 = 0;
                uint64_t v111 = 0;
                return AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v110, v100, a2, v101);
              }
              return result;
            }
            goto LABEL_80;
          }
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
          goto LABEL_81;
        }
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
LABEL_18:
      if (a4)
      {
LABEL_19:
        uint64_t v32 = *(void *)(a4 + 16);
        if (!v32) {
          return result;
        }
        swift_bridgeObjectRetain_n();
        uint64_t v33 = 40;
        do
        {
          if (!*(void *)(a4 + v33))
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            goto LABEL_41;
          }
          swift_bridgeObjectRelease();
          v33 += 16;
          --v32;
        }
        while (v32);
        uint64_t result = swift_bridgeObjectRelease_n();
        if ((v105 & 1) == 0) {
          return result;
        }
        goto LABEL_24;
      }
LABEL_41:
      uint64_t v110 = 0;
      uint64_t v111 = 0;
      uint64_t v75 = AttributedString.Guts._constrainedAttributes(at:with:)(a1, &v110);
      long long v76 = v107[1];
      long long v118 = *v107;
      long long v119 = v76;
      long long v120 = v107[2];
      long long v131 = v118;
      long long v132 = v76;
      long long v133 = v120;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v131, (uint64_t)&v184);
      outlined retain of Locale((uint64_t)&v184);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)&v118);
      specialized BidirectionalCollection<>._getBlock(for:in:)(3, (uint64_t)v145, &v110);
      uint64_t result = outlined release of Locale((uint64_t)&v187);
      if (v112 == 2)
      {
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
      if (v113 == 2)
      {
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0)
      {
        uint64_t v77 = BigString.Index.utf8Offset.getter();
        uint64_t result = BigString.Index.utf8Offset.getter();
        if (v77 <= a1)
        {
          uint64_t v78 = result;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v79 = swift_retain();
          specialized AttributedString._InternalRunsSlice.updateEach(with:)(v79, v77, a1, v75);
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if (v78 >= a2)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v80 = swift_retain();
            specialized AttributedString._InternalRunsSlice.updateEach(with:)(v80, a2, v78, v75);
            swift_release();
            swift_bridgeObjectRelease_n();
            return swift_bridgeObjectRelease_n();
          }
          goto LABEL_74;
        }
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
        goto LABEL_75;
      }
    }
    __break(1u);
    goto LABEL_73;
  }
  unint64_t v31 = swift_unknownObjectRetain();
  specialized Rope._endPath.getter(v31);

  return swift_unknownObjectRelease();
}

uint64_t AttributedString.Guts.fixScalarConstrainedAttributes(in:)()
{
  BOOL v1 = v0;
  long long v2 = v0[2];
  long long v170 = v0[1];
  long long v171 = v2;
  long long v172 = v0[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v154);
  long long v3 = v0[2];
  long long v167 = v0[1];
  long long v168 = v3;
  long long v169 = v0[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingUp:)();
  outlined release of Locale((uint64_t)v155);
  int64_t v4 = BigString.Index.utf8Offset.getter();
  uint64_t v5 = BigString.Index.utf8Offset.getter();
  if (v5 < v4) {
    goto LABEL_219;
  }
  uint64_t v6 = v1[8];
  if (v6) {
    int64_t v7 = v1[10];
  }
  else {
    int64_t v7 = 0;
  }
  if (v4 < 0 || v7 < v4)
  {
LABEL_220:
    __break(1u);
LABEL_221:
    __break(1u);
    goto LABEL_222;
  }
  unint64_t v8 = (_OWORD *)v5;
  uint64_t v9 = v1[9];
  uint64_t v10 = v1[11];
  if (!v6 || !*(_WORD *)(v6 + 16) || v4 >= v1[10])
  {
    swift_retain_n();
    unint64_t v23 = swift_unknownObjectRetain_n();
    unint64_t v24 = specialized Rope._endPath.getter(v23);
    swift_unknownObjectRelease();
    uint64_t v14 = 0;
    int64_t v11 = 0;
    if (!v6) {
      goto LABEL_201;
    }
    while (1)
    {
      swift_unknownObjectRetain();
      uint64_t v25 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v24, v14, v6, v9);
      swift_release();
      swift_unknownObjectRelease_n();
      int64_t v27 = v4 - v11;
      if (!__OFSUB__(v4, v11)) {
        break;
      }
      while (1)
      {
        __break(1u);
LABEL_204:
        uint64_t v118 = v26;
        int64_t v11 = v27;
LABEL_200:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v24 = v9 & 0xFFFFFFFFFFFFF0FFLL | (v118 << 8);
        uint64_t v10 = v136;
        unint64_t v8 = v137;
        uint64_t v9 = v135;
        if (v6) {
          break;
        }
LABEL_201:
        swift_release();
        uint64_t v25 = 0;
        int64_t v27 = v4 - v11;
        if (!__OFSUB__(v4, v11)) {
          goto LABEL_37;
        }
      }
    }
LABEL_37:
    uint64_t v146 = v1;
    int64_t v147 = v4;
    uint64_t v148 = v8;
    uint64_t v149 = v10;
    unint64_t v150 = v24;
    uint64_t v151 = v14;
    uint64_t v152 = v25;
    int64_t v153 = v27;
    specialized IndexingIterator.next()();
    if (!v28)
    {
      uint64_t v135 = MEMORY[0x1E4FBC868];
LABEL_154:
      swift_release();
      int64_t v99 = 0;
      uint64_t v100 = v135 + 64;
      uint64_t v101 = 1 << *(unsigned char *)(v135 + 32);
      uint64_t v102 = -1;
      if (v101 < 64) {
        uint64_t v102 = ~(-1 << v101);
      }
      unint64_t v103 = v102 & *(void *)(v135 + 64);
      int64_t v104 = (unint64_t)(v101 + 63) >> 6;
      while (1)
      {
        if (v103)
        {
          unint64_t v105 = __clz(__rbit64(v103));
          v103 &= v103 - 1;
          unint64_t v106 = v105 | (v99 << 6);
          uint64_t v107 = v135;
        }
        else
        {
          int64_t v108 = v99 + 1;
          uint64_t v107 = v135;
          if (__OFADD__(v99, 1))
          {
            __break(1u);
            goto LABEL_206;
          }
          if (v108 >= v104) {
            return swift_release();
          }
          unint64_t v109 = *(void *)(v100 + 8 * v108);
          ++v99;
          if (!v109)
          {
            int64_t v99 = v108 + 1;
            if (v108 + 1 >= v104) {
              return swift_release();
            }
            unint64_t v109 = *(void *)(v100 + 8 * v99);
            if (!v109)
            {
              int64_t v99 = v108 + 2;
              if (v108 + 2 >= v104) {
                return swift_release();
              }
              unint64_t v109 = *(void *)(v100 + 8 * v99);
              if (!v109)
              {
                int64_t v110 = v108 + 3;
                if (v110 >= v104) {
                  return swift_release();
                }
                unint64_t v109 = *(void *)(v100 + 8 * v110);
                if (!v109)
                {
                  while (1)
                  {
                    int64_t v99 = v110 + 1;
                    if (__OFADD__(v110, 1)) {
                      break;
                    }
                    if (v99 >= v104) {
                      return swift_release();
                    }
                    unint64_t v109 = *(void *)(v100 + 8 * v99);
                    ++v110;
                    if (v109) {
                      goto LABEL_172;
                    }
                  }
LABEL_209:
                  __break(1u);
LABEL_210:
                  __break(1u);
LABEL_211:
                  __break(1u);
                  goto LABEL_212;
                }
                int64_t v99 = v110;
              }
            }
          }
LABEL_172:
          unint64_t v103 = (v109 - 1) & v109;
          unint64_t v106 = __clz(__rbit64(v109)) + (v99 << 6);
        }
        uint64_t v111 = *(void *)(*(void *)(v107 + 56) + 8 * v106);
        uint64_t v112 = *(void *)(v111 + 16);
        if (v112)
        {
          uint64_t v113 = (unint64_t *)(*(void *)(v135 + 48) + 16 * v106);
          unint64_t v115 = *v113;
          unint64_t v114 = v113[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v116 = (uint64_t *)(v111 + 40);
          do
          {
            AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v115, v114, *(v116 - 1), *v116, 0);
            v116 += 2;
            --v112;
          }
          while (v112);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
    }
    uint64_t v29 = v28;
    long long v137 = v139;
    uint64_t v135 = MEMORY[0x1E4FBC868];
    long long v133 = (long long *)(v1 + 2);
    while (1)
    {
      while (1)
      {
        long long v30 = v133[1];
        v165[0] = *v133;
        v165[1] = v30;
        long long v166 = v133[2];
        v173[0] = v165[0];
        v173[1] = v30;
        v173[2] = v166;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v173, (uint64_t)v174);
        outlined retain of Locale((uint64_t)v174);
        BigString.utf8.getter();
        outlined release of Locale((uint64_t)v165);
        BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v32 = v31;
        outlined release of Locale((uint64_t)v156);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v33 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v29);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v33) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        specialized IndexingIterator.next()();
        uint64_t v29 = v34;
        if (!v34) {
          goto LABEL_154;
        }
      }
      uint64_t v131 = v29;
      uint64_t v6 = v32;
      if (static BigString.Index.< infix(_:_:)()) {
        break;
      }
LABEL_151:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      specialized IndexingIterator.next()();
      uint64_t v29 = v98;
      if (!v98) {
        goto LABEL_154;
      }
    }
    uint64_t v134 = v29 + 64;
    long long v35 = v133;
    uint64_t v132 = v32;
LABEL_45:
    long long v36 = v35[1];
    long long v162 = *v35;
    long long v163 = v36;
    long long v164 = v35[2];
    BigString.unicodeScalars.getter();
    LODWORD(v136) = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v157);
    long long v37 = v35[1];
    long long v159 = *v35;
    long long v160 = v37;
    long long v161 = v35[2];
    BigString.unicodeScalars.getter();
    int64_t v4 = (int64_t)v158;
    BigString.UnicodeScalarView.index(after:)();
    outlined release of Locale((uint64_t)v158);
    BOOL v1 = (void *)v131;
    uint64_t v38 = 1 << *(unsigned char *)(v131 + 32);
    if (v38 < 64) {
      uint64_t v39 = ~(-1 << v38);
    }
    else {
      uint64_t v39 = -1;
    }
    uint64_t v14 = v39 & *(void *)(v131 + 64);
    uint64_t v9 = (unint64_t)(v38 + 63) >> 6;
    swift_bridgeObjectRetain();
    uint64_t v41 = 0;
    if (!v14)
    {
LABEL_54:
      uint64_t v47 = v41 + 1;
      if (__OFADD__(v41, 1))
      {
        __break(1u);
LABEL_192:
        uint64_t v118 = 1;
        int64_t v11 = v40;
        goto LABEL_200;
      }
      if (v47 < v9)
      {
        unint64_t v48 = *(void *)(v134 + 8 * v47);
        if (v48)
        {
LABEL_57:
          uint64_t v14 = (v48 - 1) & v48;
          unint64_t v43 = __clz(__rbit64(v48)) + (v47 << 6);
          uint64_t v41 = v47;
          goto LABEL_53;
        }
        uint64_t v49 = v41 + 2;
        ++v41;
        if (v47 + 1 < v9)
        {
          unint64_t v48 = *(void *)(v134 + 8 * v49);
          if (v48)
          {
LABEL_60:
            uint64_t v47 = v49;
            goto LABEL_57;
          }
          uint64_t v41 = v47 + 1;
          if (v47 + 2 < v9)
          {
            unint64_t v48 = *(void *)(v134 + 8 * (v47 + 2));
            if (v48)
            {
              v47 += 2;
              goto LABEL_57;
            }
            uint64_t v49 = v47 + 3;
            uint64_t v41 = v47 + 2;
            if (v47 + 3 < v9)
            {
              unint64_t v48 = *(void *)(v134 + 8 * v49);
              if (v48) {
                goto LABEL_60;
              }
              while (1)
              {
                uint64_t v47 = v49 + 1;
                if (__OFADD__(v49, 1)) {
                  goto LABEL_215;
                }
                if (v47 >= v9) {
                  break;
                }
                unint64_t v48 = *(void *)(v134 + 8 * v47);
                ++v49;
                if (v48) {
                  goto LABEL_57;
                }
              }
              uint64_t v41 = v9 - 1;
            }
          }
        }
      }
      uint64_t v14 = 0;
      uint64_t v140 = 0;
      memset(v139, 0, sizeof(v139));
      long long v138 = 0u;
      goto LABEL_72;
    }
    while (1)
    {
      while (1)
      {
        unint64_t v42 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v43 = v42 | (v41 << 6);
LABEL_53:
        uint64_t v44 = v1[7];
        long long v45 = (void *)(v1[6] + 16 * v43);
        uint64_t v46 = v45[1];
        *(void *)&long long v138 = *v45;
        *((void *)&v138 + 1) = v46;
        outlined init with copy of AttributedString._AttributeValue(v44 + 72 * v43, (uint64_t)v139);
        swift_bridgeObjectRetain();
LABEL_72:
        outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v138, (uint64_t)&v141);
        uint64_t v50 = v142;
        if (!v142)
        {
          swift_release();
          uint64_t v6 = v132;
          long long v35 = v133;
          if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
            goto LABEL_151;
          }
          goto LABEL_45;
        }
        uint64_t v51 = v141;
        uint64_t v6 = v144;
        int64_t v4 = v145;
        outlined copy of AttributedString.AttributeRunBoundaries?(v144, v145);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v143);
        if ((unint64_t)v4 >= 2) {
          break;
        }
LABEL_51:
        swift_bridgeObjectRelease();
        if (!v14) {
          goto LABEL_54;
        }
      }
      uint64_t v52 = HIBYTE(v4) & 0xF;
      if ((v4 & 0x2000000000000000) == 0) {
        uint64_t v52 = v6 & 0xFFFFFFFFFFFFLL;
      }
      if (!v52)
      {
        outlined consume of AttributedString.AttributeRunBoundaries?(v6, v4);
        goto LABEL_51;
      }
      if ((v4 & 0x1000000000000000) != 0)
      {
        int v54 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else if ((v4 & 0x2000000000000000) != 0)
      {
        if ((v6 & 0x80) != 0)
        {
          switch(__clz(~(_BYTE)v6))
          {
            case 0x1Au:
              int v54 = (v6 >> 8) & 0x3F | ((v6 & 0x1F) << 6);
              break;
            case 0x1Bu:
              int v54 = (v6 >> 2) & 0xFC0 | ((v6 & 0xF) << 12) | WORD1(v6) & 0x3F;
              break;
            case 0x1Cu:
              int v54 = (16 * v6) & 0x3F000 | ((v6 & 0xF) << 18) | (v6 >> 10) & 0xFC0 | BYTE3(v6) & 0x3F;
              break;
            default:
              goto LABEL_85;
          }
        }
        else
        {
LABEL_85:
          int v54 = v6;
        }
      }
      else
      {
        if ((v6 & 0x1000000000000000) != 0) {
          int64_t v53 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else {
          int64_t v53 = (char *)_StringObject.sharedUTF8.getter();
        }
        int v54 = *v53;
        if (*v53 < 0)
        {
          switch(__clz(v54 ^ 0xFF))
          {
            case 0x1Au:
              int v54 = v53[1] & 0x3F | ((v54 & 0x1F) << 6);
              break;
            case 0x1Bu:
              int v54 = ((v54 & 0xF) << 12) | ((v53[1] & 0x3F) << 6) | v53[2] & 0x3F;
              break;
            case 0x1Cu:
              int v54 = ((v54 & 0xF) << 18) | ((v53[1] & 0x3F) << 12) | ((v53[2] & 0x3F) << 6) | v53[3] & 0x3F;
              break;
            default:
              break;
          }
        }
      }
      outlined consume of AttributedString.AttributeRunBoundaries?(v6, v4);
      if (v54 == v136) {
        goto LABEL_51;
      }
      uint64_t v55 = BigString.Index.utf8Offset.getter();
      uint64_t v129 = BigString.Index.utf8Offset.getter();
      uint64_t v130 = v55;
      if (v129 < v55) {
        goto LABEL_213;
      }
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v138 = v135;
      unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v50);
      uint64_t v59 = *(void *)(v135 + 16);
      char v126 = v57;
      BOOL v60 = (v57 & 1) == 0;
      uint64_t v61 = v59 + v60;
      if (__OFADD__(v59, v60))
      {
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
        goto LABEL_220;
      }
      if (*(void *)(v135 + 24) >= v61)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v62 = v135;
          char v65 = v57;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [Range<Int>]>);
          uint64_t v77 = static _DictionaryStorage.copy(original:)();
          uint64_t v62 = v77;
          char v65 = v126;
          if (*(void *)(v135 + 16))
          {
            unint64_t v125 = v58;
            uint64_t v78 = (char *)(v77 + 64);
            uint64_t v79 = (char *)(v135 + 64);
            unint64_t v80 = (unint64_t)((1 << *(unsigned char *)(v62 + 32)) + 63) >> 6;
            uint64_t v122 = v135 + 64;
            if (v62 != v135 || v78 >= &v79[8 * v80]) {
              memmove(v78, v79, 8 * v80);
            }
            int64_t v81 = 0;
            uint64_t v128 = v62;
            *(void *)(v62 + 16) = *(void *)(v135 + 16);
            uint64_t v82 = 1 << *(unsigned char *)(v135 + 32);
            if (v82 < 64) {
              uint64_t v83 = ~(-1 << v82);
            }
            else {
              uint64_t v83 = -1;
            }
            unint64_t v84 = v83 & *(void *)(v135 + 64);
            int64_t v123 = (unint64_t)(v82 + 63) >> 6;
            while (1)
            {
              if (v84)
              {
                unint64_t v85 = __clz(__rbit64(v84));
                v84 &= v84 - 1;
                int64_t v86 = v81;
                unint64_t v87 = v85 | (v81 << 6);
              }
              else
              {
                int64_t v94 = v81 + 1;
                if (__OFADD__(v81, 1)) {
                  goto LABEL_230;
                }
                uint64_t v62 = v128;
                unint64_t v58 = v125;
                if (v94 >= v123) {
                  break;
                }
                unint64_t v95 = *(void *)(v122 + 8 * v94);
                int64_t v96 = v81 + 1;
                if (!v95)
                {
                  int64_t v96 = v81 + 2;
                  if (v81 + 2 >= v123) {
                    break;
                  }
                  unint64_t v95 = *(void *)(v122 + 8 * v96);
                  if (!v95)
                  {
                    int64_t v96 = v81 + 3;
                    if (v81 + 3 >= v123) {
                      break;
                    }
                    unint64_t v95 = *(void *)(v122 + 8 * v96);
                    if (!v95)
                    {
                      int64_t v96 = v81 + 4;
                      if (v81 + 4 >= v123) {
                        break;
                      }
                      unint64_t v95 = *(void *)(v122 + 8 * v96);
                      if (!v95)
                      {
                        int64_t v96 = v81 + 5;
                        if (v81 + 5 >= v123) {
                          break;
                        }
                        unint64_t v95 = *(void *)(v122 + 8 * v96);
                        if (!v95)
                        {
                          int64_t v96 = v81 + 6;
                          if (v81 + 6 >= v123) {
                            break;
                          }
                          unint64_t v95 = *(void *)(v122 + 8 * v96);
                          if (!v95)
                          {
                            uint64_t v97 = v81 + 7;
                            if (v81 + 7 >= v123) {
                              break;
                            }
                            unint64_t v95 = *(void *)(v122 + 8 * v97);
                            if (!v95)
                            {
                              BOOL v1 = (void *)v131;
                              uint64_t v62 = v128;
                              unint64_t v58 = v125;
                              char v65 = v126;
                              while (1)
                              {
                                int64_t v96 = v97 + 1;
                                if (__OFADD__(v97, 1)) {
                                  goto LABEL_231;
                                }
                                if (v96 >= v123) {
                                  goto LABEL_150;
                                }
                                unint64_t v95 = *(void *)(v122 + 8 * v96);
                                ++v97;
                                if (v95) {
                                  goto LABEL_149;
                                }
                              }
                            }
                            int64_t v96 = v81 + 7;
                            BOOL v1 = (void *)v131;
                          }
                        }
                      }
                    }
                  }
                }
LABEL_149:
                unint64_t v84 = (v95 - 1) & v95;
                int64_t v86 = v96;
                unint64_t v87 = __clz(__rbit64(v95)) + (v96 << 6);
              }
              uint64_t v88 = 16 * v87;
              uint64_t v89 = (void *)(*(void *)(v135 + 48) + 16 * v87);
              uint64_t v90 = v89[1];
              uint64_t v91 = 8 * v87;
              uint64_t v92 = *(void *)(*(void *)(v135 + 56) + v91);
              uint64_t v93 = (void *)(*(void *)(v128 + 48) + v88);
              *uint64_t v93 = *v89;
              v93[1] = v90;
              *(void *)(*(void *)(v128 + 56) + v91) = v92;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              char v65 = v126;
              int64_t v81 = v86;
            }
          }
LABEL_150:
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v61, isUniquelyReferenced_nonNull_native);
        uint64_t v62 = v138;
        unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v50);
        char v65 = v126;
        if ((v126 & 1) != (v64 & 1)) {
          goto LABEL_232;
        }
        unint64_t v58 = v63;
      }
      swift_bridgeObjectRelease();
      if ((v65 & 1) == 0)
      {
        *(void *)(v62 + 8 * (v58 >> 6) + 64) |= 1 << v58;
        uint64_t v66 = (uint64_t *)(*(void *)(v62 + 48) + 16 * v58);
        *uint64_t v66 = v51;
        v66[1] = v50;
        *(void *)(*(void *)(v62 + 56) + 8 * v58) = MEMORY[0x1E4FBC860];
        uint64_t v67 = *(void *)(v62 + 16);
        BOOL v19 = __OFADD__(v67, 1);
        uint64_t v68 = v67 + 1;
        if (v19) {
          goto LABEL_216;
        }
        *(void *)(v62 + 16) = v68;
        swift_bridgeObjectRetain();
      }
      uint64_t v127 = v62;
      int64_t v4 = *(void *)(v62 + 56);
      unint64_t v124 = v58;
      uint64_t v69 = *(void **)(v4 + 8 * v58);
      uint64_t v70 = v69[2];
      if (v70 && (uint64_t v6 = v70 - 1, v69[2 * v70 + 3] == v130))
      {
        uint64_t v71 = v69[2 * v6 + 4];
        if (v129 < v71) {
          goto LABEL_221;
        }
        char v72 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v4 + 8 * v124) = v69;
        if ((v72 & 1) == 0)
        {
          uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew()(v69);
          *(void *)(v4 + 8 * v124) = v69;
        }
        uint64_t v73 = &v69[2 * v6];
        v73[4] = v71;
      }
      else
      {
        char v74 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v4 + 8 * v124) = v69;
        if ((v74 & 1) == 0)
        {
          uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69[2] + 1, 1, v69);
          *(void *)(v4 + 8 * v124) = v69;
        }
        unint64_t v76 = v69[2];
        unint64_t v75 = v69[3];
        uint64_t v6 = v76 + 1;
        if (v76 >= v75 >> 1)
        {
          uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v75 > 1), v76 + 1, 1, v69);
          *(void *)(v4 + 8 * v124) = v69;
        }
        v69[2] = v6;
        uint64_t v73 = &v69[2 * v76];
        v73[4] = v130;
      }
      v73[5] = v129;
      swift_bridgeObjectRelease_n();
      uint64_t v135 = v127;
      if (!v14) {
        goto LABEL_54;
      }
    }
  }
  uint64_t v135 = v1[9];
  uint64_t v136 = v1[11];
  long long v137 = (_OWORD *)v5;
  uint64_t v9 = *(unsigned __int8 *)(v6 + 18);
  if (*(unsigned char *)(v6 + 18))
  {
    swift_unknownObjectRetain_n();
    swift_retain_n();
    int64_t v11 = v4;
    uint64_t v12 = v6;
    while (1)
    {
      uint64_t v15 = *(unsigned __int16 *)(v12 + 16);
      if (!*(_WORD *)(v12 + 16)) {
        goto LABEL_13;
      }
      uint64_t v16 = *(void *)(v12 + 40);
      int64_t v17 = v11 - v16;
      if (__OFSUB__(v11, v16)) {
        goto LABEL_211;
      }
      if (__OFADD__(v17, 1))
      {
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
        goto LABEL_214;
      }
      if (v17 + 1 <= 0)
      {
        uint64_t v15 = 0;
      }
      else
      {
        if (v15 == 1)
        {
          v11 -= v16;
LABEL_13:
          if (v11) {
            goto LABEL_210;
          }
          goto LABEL_14;
        }
        uint64_t v18 = *(void *)(v12 + 64);
        BOOL v19 = __OFSUB__(v17, v18);
        int64_t v20 = v17 - v18;
        if (v19) {
          goto LABEL_217;
        }
        if (__OFADD__(v20, 1)) {
          goto LABEL_218;
        }
        if (v20 + 1 >= 1)
        {
          if (v15 != 2)
          {
            uint64_t v21 = (void *)(v12 + 88);
            uint64_t v22 = 2;
            while (1)
            {
              if (v15 == v22)
              {
LABEL_206:
                __break(1u);
LABEL_207:
                __break(1u);
LABEL_208:
                __break(1u);
                goto LABEL_209;
              }
              int64_t v11 = v20 - *v21;
              if (__OFSUB__(v20, *v21)) {
                goto LABEL_207;
              }
              if (__OFADD__(v11, 1)) {
                goto LABEL_208;
              }
              if (v11 + 1 < 1) {
                break;
              }
              ++v22;
              v21 += 3;
              int64_t v20 = v11;
              if (v15 == v22) {
                goto LABEL_13;
              }
            }
            uint64_t v15 = v22;
            int64_t v11 = v20;
            goto LABEL_14;
          }
          int64_t v11 = v20;
          goto LABEL_13;
        }
        uint64_t v15 = 1;
        int64_t v11 = v17;
      }
LABEL_14:
      char v13 = (4 * *(unsigned char *)(v12 + 18) + 8) & 0x3C;
      uint64_t v9 = ((-15 << v13) - 1) & v9 | (v15 << v13);
      uint64_t v14 = *(void *)(v12 + 24 + 24 * v15);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      uint64_t v12 = v14;
      if (!*(unsigned char *)(v14 + 18)) {
        goto LABEL_179;
      }
    }
  }
  swift_unknownObjectRetain_n();
  swift_retain_n();
  int64_t v11 = v4;
  uint64_t v14 = v6;
LABEL_179:
  uint64_t v118 = *(unsigned __int16 *)(v14 + 16);
  if (!*(_WORD *)(v14 + 16)) {
    goto LABEL_199;
  }
  uint64_t v119 = *(void *)(v14 + 24);
  int64_t v40 = v11 - v119;
  if (__OFSUB__(v11, v119))
  {
LABEL_226:
    __break(1u);
    goto LABEL_227;
  }
  if (__OFADD__(v40, 1))
  {
LABEL_227:
    __break(1u);
    goto LABEL_228;
  }
  if (v40 + 1 <= 0)
  {
    uint64_t v118 = 0;
    goto LABEL_200;
  }
  if (v118 == 1)
  {
    v11 -= v119;
    goto LABEL_199;
  }
  uint64_t v120 = *(void *)(v14 + 48);
  BOOL v19 = __OFSUB__(v40, v120);
  int64_t v27 = v40 - v120;
  if (v19)
  {
LABEL_228:
    __break(1u);
    goto LABEL_229;
  }
  if (!__OFADD__(v27, 1))
  {
    if (v27 + 1 < 1) {
      goto LABEL_192;
    }
    if (v118 == 2)
    {
      int64_t v11 = v27;
LABEL_199:
      if (!v11) {
        goto LABEL_200;
      }
LABEL_225:
      __break(1u);
      goto LABEL_226;
    }
    uint64_t v121 = (void *)(v14 + 72);
    uint64_t v26 = 2;
    while (v118 != v26)
    {
      int64_t v11 = v27 - *v121;
      if (__OFSUB__(v27, *v121)) {
        goto LABEL_223;
      }
      if (__OFADD__(v11, 1)) {
        goto LABEL_224;
      }
      if (v11 + 1 < 1) {
        goto LABEL_204;
      }
      ++v26;
      v121 += 3;
      int64_t v27 = v11;
      if (v118 == v26) {
        goto LABEL_199;
      }
    }
LABEL_222:
    __break(1u);
LABEL_223:
    __break(1u);
LABEL_224:
    __break(1u);
    goto LABEL_225;
  }
LABEL_229:
  __break(1u);
LABEL_230:
  __break(1u);
LABEL_231:
  __break(1u);
LABEL_232:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized IndexingIterator.next()()
{
  uint64_t v2 = v0[7];
  long long v3 = (void *)*v0;
  uint64_t v4 = v0[1];
  uint64_t v5 = *(void *)(*v0 + 64);
  uint64_t v81 = v4;
  uint64_t v77 = v0[2];
  if (v4 != v77)
  {
    uint64_t v12 = v3[10];
    swift_unknownObjectRetain();
    if (v5)
    {
      swift_unknownObjectRelease();
      if (v2 == v12) {
        return;
      }
    }
    else if (!v2)
    {
      return;
    }
    goto LABEL_18;
  }
  uint64_t v6 = v3[10];
  if (v5) {
    uint64_t v7 = v3[10];
  }
  else {
    uint64_t v7 = 0;
  }
  if (v4 < 0 || v7 < v4) {
    goto LABEL_163;
  }
  uint64_t v8 = v3[9];
  uint64_t v9 = v3[11];
  if (v5)
  {
    if (v4 < v6 && *(_WORD *)(v5 + 16) != 0)
    {
      uint64_t v76 = v3[9];
      unint64_t v80 = (void *)*v0;
      uint64_t v36 = *(unsigned __int8 *)(v5 + 18);
      if (*(unsigned char *)(v5 + 18))
      {
        swift_unknownObjectRetain_n();
        uint64_t v39 = -15;
        uint64_t v41 = v5;
LABEL_64:
        uint64_t v43 = *(unsigned __int16 *)(v41 + 16);
        if (!*(_WORD *)(v41 + 16)) {
          goto LABEL_62;
        }
        uint64_t v44 = *(void *)(v41 + 40);
        BOOL v32 = __OFSUB__(v4, v44);
        uint64_t v45 = v4 - v44;
        if (v32) {
          goto LABEL_158;
        }
        if (__OFADD__(v45, 1)) {
          goto LABEL_159;
        }
        if (v45 + 1 < 1)
        {
          uint64_t v43 = 0;
          goto LABEL_63;
        }
        if (v43 == 1)
        {
          uint64_t v4 = v45;
LABEL_62:
          if (!v4) {
            goto LABEL_63;
          }
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
          goto LABEL_160;
        }
        uint64_t v46 = (uint64_t *)(v41 + 64);
        uint64_t v47 = 1;
        while (1)
        {
          uint64_t v48 = *v46;
          v46 += 3;
          uint64_t v4 = v45 - v48;
          if (__OFSUB__(v45, v48)) {
            break;
          }
          if (__OFADD__(v4, 1)) {
            goto LABEL_143;
          }
          if (v4 + 1 < 1)
          {
            uint64_t v43 = v47;
            uint64_t v4 = v45;
LABEL_63:
            char v42 = (4 * *(unsigned char *)(v41 + 18) + 8) & 0x3C;
            uint64_t v36 = ((-15 << v42) - 1) & v36 | (v43 << v42);
            uint64_t v1 = *(void *)(v41 + 24 + 24 * v43);
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            uint64_t v41 = v1;
            if (!*(unsigned char *)(v1 + 18)) {
              goto LABEL_103;
            }
            goto LABEL_64;
          }
          ++v47;
          uint64_t v45 = v4;
          if (v43 == v47) {
            goto LABEL_62;
          }
        }
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        uint64_t v69 = 1;
        uint64_t v37 = v45;
        goto LABEL_152;
      }
      swift_unknownObjectRetain_n();
      uint64_t v1 = v5;
LABEL_103:
      uint64_t v62 = *(unsigned __int16 *)(v1 + 16);
      if (!*(_WORD *)(v1 + 16)) {
        goto LABEL_121;
      }
      uint64_t v63 = *(void *)(v1 + 24);
      BOOL v32 = __OFSUB__(v4, v63);
      uint64_t v64 = v4 - v63;
      if (v32)
      {
LABEL_183:
        __break(1u);
        goto LABEL_184;
      }
      if (__OFADD__(v64, 1))
      {
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
        goto LABEL_188;
      }
      if (v64 + 1 < 1)
      {
        uint64_t v62 = 0;
      }
      else
      {
        if (v62 == 1)
        {
          uint64_t v4 = v64;
LABEL_121:
          if (v4)
          {
LABEL_182:
            __break(1u);
            goto LABEL_183;
          }
          goto LABEL_122;
        }
        char v65 = (uint64_t *)(v1 + 48);
        uint64_t v66 = 1;
        while (1)
        {
          uint64_t v67 = *v65;
          v65 += 3;
          uint64_t v4 = v64 - v67;
          if (__OFSUB__(v64, v67)) {
            goto LABEL_173;
          }
          if (__OFADD__(v4, 1)) {
            goto LABEL_174;
          }
          if (v4 + 1 < 1) {
            break;
          }
          ++v66;
          uint64_t v64 = v4;
          if (v62 == v66) {
            goto LABEL_121;
          }
        }
        uint64_t v62 = v66;
        uint64_t v4 = v64;
      }
LABEL_122:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v11 = v36 & 0xFFFFFFFFFFFFF0FFLL | (v62 << 8);
      long long v3 = v80;
      uint64_t v8 = v76;
      goto LABEL_123;
    }
    swift_unknownObjectRetain_n();
    unint64_t v11 = ((-15 << ((4 * *(unsigned char *)(v5 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v5 + 18) | ((unint64_t)*(unsigned __int16 *)(v5 + 16) << ((4 * *(unsigned char *)(v5 + 18) + 8) & 0x3C));
  }
  else
  {
    swift_unknownObjectRetain_n();
    unint64_t v11 = 0;
  }
  swift_unknownObjectRelease();
  uint64_t v4 = 0;
  uint64_t v1 = 0;
  if (v5)
  {
LABEL_123:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v11, v1, v5, v8);
    swift_unknownObjectRelease_n();
  }
  uint64_t v68 = v81 - v4;
  if (__OFSUB__(v81, v4))
  {
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
    goto LABEL_177;
  }
  uint64_t v4 = v81;
  if (v2 != v68)
  {
LABEL_18:
    uint64_t v13 = v0[3];
    if (v13 != v3[11]) {
      goto LABEL_164;
    }
    uint64_t v78 = v2;
    unint64_t v15 = v0[4];
    uint64_t v14 = v0[5];
    if (v14)
    {
      unint64_t v16 = *(void *)(v14 + 24 * ((v15 >> ((4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
    }
    else
    {
      uint64_t v17 = v3[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v15, v17);
      swift_unknownObjectRelease();
      if (v13 != v3[11])
      {
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
        goto LABEL_180;
      }
      uint64_t v18 = v3;
      uint64_t v19 = v3[8];
      swift_unknownObjectRetain();
      unint64_t v16 = specialized Rope._Node.subscript.getter(v15, v19);
      long long v3 = v18;
      swift_unknownObjectRelease();
      uint64_t v4 = v81;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v78 + v16;
    if (__OFADD__(v78, v16)) {
      goto LABEL_165;
    }
    if (v77 >= v78) {
      uint64_t v21 = v78;
    }
    else {
      uint64_t v21 = v77;
    }
    if (v78 < v4) {
      uint64_t v21 = v4;
    }
    if (v20 <= v4) {
      uint64_t v22 = v4;
    }
    else {
      uint64_t v22 = v78 + v16;
    }
    if (v77 >= v20) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = v77;
    }
    if (v21 == v23)
    {
LABEL_166:
      __break(1u);
    }
    else if (!__OFSUB__(v23, v21))
    {
      unint64_t v75 = v0;
      uint64_t v24 = v0[6];
      uint64_t v25 = v3;
      uint64_t v26 = v3[8];
      uint64_t v28 = v25[9];
      uint64_t v27 = v25[10];
      uint64_t v79 = v25;
      uint64_t v29 = v25[11];
      uint64_t v82 = v13;
      unint64_t v83 = v15;
      uint64_t v84 = v14;
      uint64_t v30 = v24 + 1;
      if (!__OFADD__(v24, 1))
      {
        if (v13 == v29)
        {
          if (v14)
          {
            unint64_t v31 = *(void *)(v14 + 24 * ((v15 >> ((4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
          }
          else
          {
            swift_retain();
            swift_unknownObjectRetain();
            unint64_t v31 = specialized Rope._Node.subscript.getter(v15, v26);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          BOOL v32 = __OFADD__(v78, v31);
          uint64_t v33 = v78 + v31;
          if (!v32)
          {
            swift_unknownObjectRetain();
            specialized Rope.formIndex(after:)(&v82, v26, v28, v27, v13);
            swift_unknownObjectRelease_n();
            if (v33 < v77)
            {
              uint64_t v34 = v82;
              unint64_t v35 = v83;
              uint64_t v36 = v84;
              swift_release();
              uint64_t v9 = v30;
LABEL_155:
              v75[3] = v34;
              v75[4] = v35;
              v75[5] = v36;
              v75[6] = v9;
              v75[7] = v33;
              return;
            }
            uint64_t v37 = v81;
            uint64_t v1 = v79[8];
            uint64_t v9 = v79[9];
            uint64_t v33 = v79[10];
            uint64_t v34 = v79[11];
            if (v81 != v77)
            {
              swift_unknownObjectRetain();
              if (v1)
              {
                uint64_t v57 = v34;
                int v58 = *(unsigned __int8 *)(v1 + 18);
                uint64_t v59 = *(unsigned __int16 *)(v1 + 16);
                swift_release();
                swift_unknownObjectRelease();
                uint64_t v36 = 0;
                char v60 = (4 * v58 + 8) & 0x3C;
                uint64_t v61 = ((-15 << v60) - 1) & v58;
                uint64_t v34 = v57;
                unint64_t v35 = v61 | (v59 << v60);
              }
              else
              {
                swift_release();
                unint64_t v35 = 0;
                uint64_t v36 = 0;
                uint64_t v9 = 0;
                uint64_t v33 = 0;
              }
              goto LABEL_155;
            }
            if (v1) {
              uint64_t v38 = v79[10];
            }
            else {
              uint64_t v38 = 0;
            }
            if ((v81 & 0x8000000000000000) == 0 && v38 >= v81)
            {
              if (v1)
              {
                if (v81 < v33 && *(_WORD *)(v1 + 16))
                {
                  uint64_t v6 = v79[11];
                  uint64_t v39 = *(unsigned __int8 *)(v1 + 18);
                  if (!*(unsigned char *)(v1 + 18))
                  {
                    swift_unknownObjectRetain_n();
                    uint64_t v36 = v1;
LABEL_129:
                    uint64_t v69 = *(unsigned __int16 *)(v36 + 16);
                    if (*(_WORD *)(v36 + 16))
                    {
                      uint64_t v70 = *(void *)(v36 + 24);
                      uint64_t v45 = v37 - v70;
                      if (__OFSUB__(v37, v70))
                      {
LABEL_189:
                        __break(1u);
                        goto LABEL_190;
                      }
                      if (__OFADD__(v45, 1))
                      {
LABEL_190:
                        __break(1u);
                        goto LABEL_191;
                      }
                      if (v45 + 1 <= 0)
                      {
                        uint64_t v69 = 0;
                        goto LABEL_152;
                      }
                      if (v69 == 1)
                      {
                        v37 -= v70;
                      }
                      else
                      {
                        uint64_t v71 = *(void *)(v36 + 48);
                        BOOL v32 = __OFSUB__(v45, v71);
                        uint64_t v72 = v45 - v71;
                        if (v32)
                        {
LABEL_191:
                          __break(1u);
                          goto LABEL_192;
                        }
                        if (__OFADD__(v72, 1))
                        {
LABEL_192:
                          __break(1u);
                          return;
                        }
                        if (v72 + 1 < 1) {
                          goto LABEL_144;
                        }
                        if (v69 != 2)
                        {
                          uint64_t v73 = (void *)(v36 + 72);
                          uint64_t v74 = 2;
                          while (v69 != v74)
                          {
                            uint64_t v37 = v72 - *v73;
                            if (__OFSUB__(v72, *v73)) {
                              goto LABEL_186;
                            }
                            if (__OFADD__(v37, 1)) {
                              goto LABEL_187;
                            }
                            if (v37 + 1 < 1)
                            {
                              uint64_t v69 = v74;
                              uint64_t v37 = v72;
                              goto LABEL_152;
                            }
                            ++v74;
                            v73 += 3;
                            uint64_t v72 = v37;
                            if (v69 == v74) {
                              goto LABEL_151;
                            }
                          }
                          goto LABEL_185;
                        }
                        uint64_t v37 = v72;
                      }
                    }
LABEL_151:
                    if (v37)
                    {
LABEL_188:
                      __break(1u);
                      goto LABEL_189;
                    }
LABEL_152:
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    unint64_t v35 = v39 | (v69 << 8);
                    uint64_t v34 = v6;
                    if (!v1) {
                      goto LABEL_153;
                    }
                    goto LABEL_114;
                  }
                  uint64_t v40 = v79[9];
                  swift_unknownObjectRetain_n();
                  uint64_t v36 = v1;
                  while (1)
                  {
                    uint64_t v50 = *(unsigned __int16 *)(v36 + 16);
                    if (!*(_WORD *)(v36 + 16)) {
                      goto LABEL_78;
                    }
                    uint64_t v51 = *(void *)(v36 + 40);
                    uint64_t v52 = v37 - v51;
                    if (__OFSUB__(v37, v51)) {
                      goto LABEL_175;
                    }
                    if (__OFADD__(v52, 1)) {
                      goto LABEL_176;
                    }
                    if (v52 + 1 <= 0)
                    {
                      uint64_t v50 = 0;
                    }
                    else
                    {
                      if (v50 == 1)
                      {
                        v37 -= v51;
LABEL_78:
                        if (v37) {
                          goto LABEL_172;
                        }
                        goto LABEL_79;
                      }
                      uint64_t v53 = *(void *)(v36 + 64);
                      BOOL v32 = __OFSUB__(v52, v53);
                      uint64_t v54 = v52 - v53;
                      if (v32) {
                        goto LABEL_178;
                      }
                      if (__OFADD__(v54, 1)) {
                        goto LABEL_179;
                      }
                      if (v54 + 1 >= 1)
                      {
                        if (v50 != 2)
                        {
                          uint64_t v55 = (void *)(v36 + 88);
                          uint64_t v56 = 2;
                          while (v50 != v56)
                          {
                            uint64_t v37 = v54 - *v55;
                            if (__OFSUB__(v54, *v55)) {
                              goto LABEL_161;
                            }
                            if (__OFADD__(v37, 1)) {
                              goto LABEL_162;
                            }
                            if (v37 + 1 < 1)
                            {
                              uint64_t v50 = v56;
                              uint64_t v37 = v54;
                              goto LABEL_79;
                            }
                            ++v56;
                            v55 += 3;
                            uint64_t v54 = v37;
                            if (v50 == v56) {
                              goto LABEL_78;
                            }
                          }
LABEL_160:
                          __break(1u);
LABEL_161:
                          __break(1u);
LABEL_162:
                          __break(1u);
LABEL_163:
                          __break(1u);
LABEL_164:
                          __break(1u);
LABEL_165:
                          __break(1u);
                          goto LABEL_166;
                        }
                        uint64_t v37 = v54;
                        goto LABEL_78;
                      }
                      uint64_t v50 = 1;
                      uint64_t v37 = v52;
                    }
LABEL_79:
                    char v49 = (4 * *(unsigned char *)(v36 + 18) + 8) & 0x3C;
                    uint64_t v39 = ((-15 << v49) - 1) & v39 | (v50 << v49);
                    uint64_t v36 = *(void *)(v36 + 24 + 24 * v50);
                    swift_unknownObjectRetain();
                    swift_unknownObjectRelease();
                    if (!*(unsigned char *)(v36 + 18))
                    {
                      v39 &= 0xFFFFFFFFFFFFF0FFLL;
                      uint64_t v9 = v40;
                      goto LABEL_129;
                    }
                  }
                }
                swift_unknownObjectRetain_n();
                unint64_t v35 = ((-15 << ((4 * *(unsigned char *)(v1 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v1 + 18) | ((unint64_t)*(unsigned __int16 *)(v1 + 16) << ((4 * *(unsigned char *)(v1 + 18) + 8) & 0x3C));
              }
              else
              {
                swift_unknownObjectRetain_n();
                unint64_t v35 = 0;
              }
              swift_unknownObjectRelease();
              uint64_t v36 = 0;
              uint64_t v37 = 0;
              if (!v1)
              {
LABEL_153:
                swift_release();
                uint64_t v9 = 0;
LABEL_154:
                uint64_t v33 = v81 - v37;
                if (!__OFSUB__(v81, v37)) {
                  goto LABEL_155;
                }
                goto LABEL_181;
              }
LABEL_114:
              swift_unknownObjectRetain();
              uint64_t v9 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v34, v35, v36, v1, v9);
              swift_release();
              swift_unknownObjectRelease_n();
              goto LABEL_154;
            }
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
            goto LABEL_182;
          }
          goto LABEL_170;
        }
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
        goto LABEL_171;
      }
LABEL_168:
      __break(1u);
      goto LABEL_169;
    }
    __break(1u);
    goto LABEL_168;
  }
}

uint64_t AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    long long v3 = v2;
    uint64_t v161 = result;
    uint64_t v153 = result;
    uint64_t v4 = AttributedString.Guts._characterInvalidatedAttributes(at:)(result);
    uint64_t v152 = v5;
    swift_bridgeObjectRetain();
    uint64_t result = Set.init(minimumCapacity:)();
    int64_t v6 = 0;
    *(void *)&long long v163 = result;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = -1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    uint64_t v9 = v4 + 64;
    unint64_t v10 = v8 & *(void *)(v4 + 64);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    while (1)
    {
      if (v10)
      {
        unint64_t v12 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v13 = v12 | (v6 << 6);
        goto LABEL_6;
      }
      int64_t v17 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
LABEL_329:
        __break(1u);
        goto LABEL_330;
      }
      if (v17 >= v11) {
        break;
      }
      unint64_t v18 = *(void *)(v9 + 8 * v17);
      ++v6;
      if (!v18)
      {
        int64_t v6 = v17 + 1;
        if (v17 + 1 >= v11) {
          break;
        }
        unint64_t v18 = *(void *)(v9 + 8 * v6);
        if (!v18)
        {
          int64_t v6 = v17 + 2;
          if (v17 + 2 >= v11) {
            break;
          }
          unint64_t v18 = *(void *)(v9 + 8 * v6);
          if (!v18)
          {
            int64_t v6 = v17 + 3;
            if (v17 + 3 >= v11) {
              break;
            }
            unint64_t v18 = *(void *)(v9 + 8 * v6);
            if (!v18)
            {
              int64_t v6 = v17 + 4;
              if (v17 + 4 >= v11) {
                break;
              }
              unint64_t v18 = *(void *)(v9 + 8 * v6);
              if (!v18)
              {
                int64_t v19 = v17 + 5;
                if (v19 >= v11) {
                  break;
                }
                unint64_t v18 = *(void *)(v9 + 8 * v19);
                if (!v18)
                {
                  while (1)
                  {
                    int64_t v6 = v19 + 1;
                    if (__OFADD__(v19, 1)) {
                      break;
                    }
                    if (v6 >= v11) {
                      goto LABEL_26;
                    }
                    unint64_t v18 = *(void *)(v9 + 8 * v6);
                    ++v19;
                    if (v18) {
                      goto LABEL_25;
                    }
                  }
LABEL_371:
                  __break(1u);
LABEL_372:
                  __break(1u);
LABEL_373:
                  __break(1u);
LABEL_374:
                  __break(1u);
                  goto LABEL_375;
                }
                int64_t v6 = v19;
              }
            }
          }
        }
      }
LABEL_25:
      unint64_t v10 = (v18 - 1) & v18;
      unint64_t v13 = __clz(__rbit64(v18)) + (v6 << 6);
LABEL_6:
      uint64_t v14 = (unint64_t *)(*(void *)(v4 + 48) + 16 * v13);
      unint64_t v15 = *v14;
      unint64_t v16 = v14[1];
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)((unint64_t *)&v166, v15, v16);
      uint64_t result = swift_bridgeObjectRelease();
    }
LABEL_26:
    uint64_t result = swift_release();
    v162[0] = v163;
    if (v153 < 0)
    {
LABEL_369:
      __break(1u);
LABEL_370:
      __break(1u);
      goto LABEL_371;
    }
    unint64_t v21 = v2[8];
    uint64_t v20 = v2[9];
    uint64_t v22 = v2[10];
    uint64_t v23 = v2[11];
    unsigned int v156 = v2;
    if (v153)
    {
      swift_unknownObjectRetain();
      swift_retain();
      uint64_t v24 = v22;
      uint64_t result = specialized Rope._endPath.getter(v21);
      unint64_t v25 = result;
      if (v21)
      {
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v26 = 0;
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v20 = 0;
        uint64_t v24 = 0;
      }
      goto LABEL_74;
    }
    if (v21)
    {
      if (v22 < 0)
      {
LABEL_386:
        __break(1u);
LABEL_387:
        __break(1u);
        goto LABEL_388;
      }
      if (*(_WORD *)(v21 + 16) && v22)
      {
        uint64_t v27 = *(unsigned __int8 *)(v21 + 18);
        if (*(unsigned char *)(v21 + 18))
        {
          swift_unknownObjectRetain_n();
          uint64_t result = swift_retain();
          uint64_t v9 = 0;
          unint64_t v28 = v21;
          while (1)
          {
            uint64_t v30 = *(unsigned __int16 *)(v28 + 16);
            if (!*(_WORD *)(v28 + 16)) {
              goto LABEL_37;
            }
            uint64_t v31 = *(void *)(v28 + 40);
            BOOL v32 = __OFSUB__(v9, v31);
            uint64_t v33 = v9 - v31;
            if (v32) {
              goto LABEL_364;
            }
            if (__OFADD__(v33, 1))
            {
LABEL_365:
              __break(1u);
LABEL_366:
              __break(1u);
LABEL_367:
              __break(1u);
LABEL_368:
              __break(1u);
              goto LABEL_369;
            }
            if (v33 + 1 >= 1) {
              break;
            }
            uint64_t v30 = 0;
LABEL_38:
            char v29 = (4 * *(unsigned char *)(v28 + 18) + 8) & 0x3C;
            uint64_t v27 = ((-15 << v29) - 1) & v27 | (v30 << v29);
            uint64_t v26 = *(void *)(v28 + 24 + 24 * v30);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            unint64_t v28 = v26;
            if (!*(unsigned char *)(v26 + 18)) {
              goto LABEL_58;
            }
          }
          if (v30 != 1)
          {
            uint64_t v34 = (uint64_t *)(v28 + 64);
            uint64_t v35 = 1;
            while (1)
            {
              uint64_t v36 = *v34;
              v34 += 3;
              uint64_t v9 = v33 - v36;
              if (__OFSUB__(v33, v36)) {
                goto LABEL_342;
              }
              if (__OFADD__(v9, 1))
              {
LABEL_343:
                __break(1u);
LABEL_344:
                __break(1u);
LABEL_345:
                __break(1u);
LABEL_346:
                __break(1u);
LABEL_347:
                __break(1u);
LABEL_348:
                __break(1u);
LABEL_349:
                __break(1u);
LABEL_350:
                __break(1u);
LABEL_351:
                __break(1u);
                goto LABEL_352;
              }
              if (v9 + 1 < 1) {
                break;
              }
              ++v35;
              uint64_t v33 = v9;
              if (v30 == v35) {
                goto LABEL_37;
              }
            }
            uint64_t v30 = v35;
            uint64_t v9 = v33;
            goto LABEL_38;
          }
          uint64_t v9 = v33;
LABEL_37:
          if (v9) {
            goto LABEL_363;
          }
          goto LABEL_38;
        }
        swift_unknownObjectRetain_n();
        uint64_t result = swift_retain();
        uint64_t v9 = 0;
        uint64_t v26 = v21;
LABEL_58:
        uint64_t v37 = *(unsigned __int16 *)(v26 + 16);
        if (!*(_WORD *)(v26 + 16)) {
          goto LABEL_71;
        }
        uint64_t v38 = *(void *)(v26 + 24);
        BOOL v32 = __OFSUB__(v9, v38);
        uint64_t v39 = v9 - v38;
        if (v32)
        {
LABEL_391:
          __break(1u);
LABEL_392:
          __break(1u);
LABEL_393:
          if (!v9) {
            __break(1u);
          }
          goto LABEL_395;
        }
        if (__OFADD__(v39, 1)) {
          goto LABEL_392;
        }
        if (v39 + 1 < 1)
        {
          uint64_t v37 = 0;
          goto LABEL_72;
        }
        if (v37 == 1)
        {
          uint64_t v9 = v39;
LABEL_71:
          if (!v9) {
            goto LABEL_72;
          }
          goto LABEL_390;
        }
        uint64_t v40 = (uint64_t *)(v26 + 48);
        uint64_t v41 = 1;
        while (1)
        {
          uint64_t v42 = *v40;
          v40 += 3;
          uint64_t v9 = v39 - v42;
          if (__OFSUB__(v39, v42)) {
            goto LABEL_384;
          }
          if (__OFADD__(v9, 1)) {
            break;
          }
          if (v9 + 1 < 1)
          {
            uint64_t v37 = v41;
            uint64_t v9 = v39;
LABEL_72:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v25 = v27 & 0xFFFFFFFFFFFFF0FFLL | (v37 << 8);
LABEL_53:
            swift_unknownObjectRetain();
            uint64_t v20 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v23, v25, v26, v21, v20);
            uint64_t result = swift_unknownObjectRelease_n();
            uint64_t v24 = -v9;
            if (__OFSUB__(0, v9)) {
              goto LABEL_382;
            }
            goto LABEL_74;
          }
          ++v41;
          uint64_t v39 = v9;
          if (v37 == v41) {
            goto LABEL_71;
          }
        }
LABEL_385:
        __break(1u);
        goto LABEL_386;
      }
    }
    swift_unknownObjectRetain_n();
    swift_retain();
    unint64_t v25 = specialized Rope._endPath.getter(v21);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v26 = 0;
    uint64_t v9 = 0;
    if (v21) {
      goto LABEL_53;
    }
    uint64_t v20 = 0;
    uint64_t v24 = 0;
LABEL_74:
    *(void *)&long long v166 = v23;
    *((void *)&v166 + 1) = v25;
    *(void *)&long long v167 = v26;
    *((void *)&v167 + 1) = v20;
    uint64_t v43 = -15;
    uint64_t v44 = v24;
    *(void *)&long long v168 = v24;
    while (1)
    {
      int64_t v49 = v3[8];
      uint64_t v154 = v44;
      if (!v49)
      {
        uint64_t v9 = 0;
        goto LABEL_122;
      }
      uint64_t v50 = v3[10];
      if (v50 < 0) {
        goto LABEL_344;
      }
      uint64_t v51 = v3[9];
      uint64_t v52 = v3[11];
      uint64_t v53 = *(unsigned __int8 *)(v49 + 18);
      if (*(_WORD *)(v49 + 16) && v50 != 0) {
        break;
      }
      unint64_t v55 = ((-15 << ((4 * v53 + 8) & 0x3C)) - 1) & v53 | ((unint64_t)*(unsigned __int16 *)(v49 + 16) << ((4 * v53 + 8) & 0x3C));
      swift_unknownObjectRetain();
      uint64_t v9 = 0;
      uint64_t v26 = 0;
LABEL_121:
      swift_unknownObjectRetain();
      specialized Rope._Node.distanceFromStart<A>(to:in:)(v52, v55, v26, v49, v51);
      uint64_t result = swift_unknownObjectRelease_n();
      uint64_t v44 = v154;
      long long v3 = v156;
LABEL_122:
      if (__OFSUB__(0, v9)) {
        goto LABEL_339;
      }
      if (-v9 >= v44 || !*(void *)(v162[0] + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v160 = a2;
        uint64_t result = a2 - 1;
        if (!__OFSUB__(a2, 1))
        {
          uint64_t v57 = AttributedString.Guts._characterInvalidatedAttributes(at:)(result);
          uint64_t v100 = v99;
          swift_bridgeObjectRetain();
          uint64_t result = Set.init(minimumCapacity:)();
          int64_t v101 = 0;
          *(void *)&long long v163 = result;
          uint64_t v102 = 1 << *(unsigned char *)(v57 + 32);
          uint64_t v103 = -1;
          if (v102 < 64) {
            uint64_t v103 = ~(-1 << v102);
          }
          uint64_t v104 = v57 + 64;
          unint64_t v105 = v103 & *(void *)(v57 + 64);
          int64_t v106 = (unint64_t)(v102 + 63) >> 6;
          while (1)
          {
            if (v105)
            {
              unint64_t v107 = __clz(__rbit64(v105));
              v105 &= v105 - 1;
              unint64_t v108 = v107 | (v101 << 6);
            }
            else
            {
              int64_t v111 = v101 + 1;
              if (__OFADD__(v101, 1)) {
                goto LABEL_336;
              }
              if (v111 >= v106) {
                goto LABEL_215;
              }
              unint64_t v112 = *(void *)(v104 + 8 * v111);
              ++v101;
              if (!v112)
              {
                int64_t v101 = v111 + 1;
                if (v111 + 1 >= v106) {
                  goto LABEL_215;
                }
                unint64_t v112 = *(void *)(v104 + 8 * v101);
                if (!v112)
                {
                  int64_t v101 = v111 + 2;
                  if (v111 + 2 >= v106) {
                    goto LABEL_215;
                  }
                  unint64_t v112 = *(void *)(v104 + 8 * v101);
                  if (!v112)
                  {
                    int64_t v101 = v111 + 3;
                    if (v111 + 3 >= v106) {
                      goto LABEL_215;
                    }
                    unint64_t v112 = *(void *)(v104 + 8 * v101);
                    if (!v112)
                    {
                      int64_t v101 = v111 + 4;
                      if (v111 + 4 >= v106) {
                        goto LABEL_215;
                      }
                      unint64_t v112 = *(void *)(v104 + 8 * v101);
                      if (!v112)
                      {
                        int64_t v113 = v111 + 5;
                        if (v113 >= v106) {
                          goto LABEL_215;
                        }
                        unint64_t v112 = *(void *)(v104 + 8 * v113);
                        if (!v112)
                        {
                          while (1)
                          {
                            int64_t v101 = v113 + 1;
                            if (__OFADD__(v113, 1)) {
                              goto LABEL_383;
                            }
                            if (v101 >= v106) {
                              break;
                            }
                            unint64_t v112 = *(void *)(v104 + 8 * v101);
                            ++v113;
                            if (v112) {
                              goto LABEL_214;
                            }
                          }
LABEL_215:
                          swift_release();
                          uint64_t v159 = v163;
                          long long v114 = *((_OWORD *)v3 + 2);
                          long long v163 = *((_OWORD *)v3 + 1);
                          long long v164 = v114;
                          long long v165 = *((_OWORD *)v3 + 3);
                          long long v166 = v163;
                          long long v167 = v114;
                          long long v168 = v165;
                          outlined init with take of any PredicateExpression<Self.Output == B1>(&v166, (uint64_t)v169);
                          outlined retain of Locale((uint64_t)v169);
                          BigString.utf8.getter();
                          outlined release of Locale((uint64_t)&v163);
                          uint64_t v53 = BigString.UTF8View.count.getter();
                          uint64_t result = outlined release of Locale((uint64_t)v162);
                          if (v53 >= a2)
                          {
                            int64_t v49 = v3[8];
                            if (v49) {
                              uint64_t v115 = v3[10];
                            }
                            else {
                              uint64_t v115 = 0;
                            }
                            if ((a2 & 0x8000000000000000) == 0 && v115 >= a2)
                            {
                              uint64_t v9 = v3[9];
                              uint64_t v43 = v3[11];
                              uint64_t v153 = v100;
                              if (v49 && v3[10] > a2 && *(_WORD *)(v49 + 16))
                              {
                                uint64_t v152 = v3[9];
                                uint64_t v4 = *(unsigned __int8 *)(v49 + 18);
                                if (!*(unsigned char *)(v49 + 18)) {
                                  goto LABEL_248;
                                }
                                swift_unknownObjectRetain_n();
                                uint64_t result = swift_retain();
                                uint64_t v9 = -15;
                                uint64_t v116 = a2;
                                int64_t v117 = v49;
                                while (2)
                                {
                                  uint64_t v119 = *(unsigned __int16 *)(v117 + 16);
                                  if (*(_WORD *)(v117 + 16))
                                  {
                                    uint64_t v120 = *(void *)(v117 + 40);
                                    BOOL v32 = __OFSUB__(v116, v120);
                                    uint64_t v121 = v116 - v120;
                                    if (v32) {
                                      goto LABEL_358;
                                    }
                                    if (__OFADD__(v121, 1))
                                    {
LABEL_359:
                                      __break(1u);
LABEL_360:
                                      __break(1u);
LABEL_361:
                                      __break(1u);
                                      goto LABEL_362;
                                    }
                                    if (v121 + 1 < 1)
                                    {
                                      uint64_t v119 = 0;
                                      goto LABEL_228;
                                    }
                                    if (v119 != 1)
                                    {
                                      uint64_t v122 = (uint64_t *)(v117 + 64);
                                      uint64_t v123 = 1;
                                      while (1)
                                      {
                                        uint64_t v124 = *v122;
                                        v122 += 3;
                                        uint64_t v116 = v121 - v124;
                                        if (__OFSUB__(v121, v124)) {
                                          goto LABEL_337;
                                        }
                                        if (__OFADD__(v116, 1)) {
                                          goto LABEL_338;
                                        }
                                        if (v116 + 1 < 1) {
                                          break;
                                        }
                                        ++v123;
                                        uint64_t v121 = v116;
                                        if (v119 == v123) {
                                          goto LABEL_227;
                                        }
                                      }
                                      uint64_t v119 = v123;
                                      uint64_t v116 = v121;
LABEL_228:
                                      char v118 = (4 * *(unsigned char *)(v117 + 18) + 8) & 0x3C;
                                      uint64_t v4 = ((-15 << v118) - 1) & v4 | (v119 << v118);
                                      uint64_t v26 = *(void *)(v117 + 24 + 24 * v119);
                                      swift_unknownObjectRetain();
                                      uint64_t result = swift_unknownObjectRelease();
                                      int64_t v117 = v26;
                                      if (!*(unsigned char *)(v26 + 18)) {
                                        goto LABEL_249;
                                      }
                                      continue;
                                    }
                                    uint64_t v116 = v121;
                                  }
                                  break;
                                }
LABEL_227:
                                if (v116) {
                                  goto LABEL_357;
                                }
                                goto LABEL_228;
                              }
                              swift_unknownObjectRetain_n();
                              swift_retain();
                              uint64_t v125 = specialized Rope._endPath.getter(v49);
                              uint64_t result = swift_unknownObjectRelease();
                              uint64_t v26 = 0;
                              uint64_t v116 = 0;
                              if (!v49) {
                                goto LABEL_263;
                              }
LABEL_243:
                              swift_unknownObjectRetain();
                              uint64_t v126 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v43, v125, v26, v49, v9);
                              uint64_t result = swift_unknownObjectRelease_n();
                              goto LABEL_264;
                            }
LABEL_377:
                            __break(1u);
LABEL_378:
                            __break(1u);
                            goto LABEL_379;
                          }
LABEL_376:
                          __break(1u);
                          goto LABEL_377;
                        }
                        int64_t v101 = v113;
                      }
                    }
                  }
                }
              }
LABEL_214:
              unint64_t v105 = (v112 - 1) & v112;
              unint64_t v108 = __clz(__rbit64(v112)) + (v101 << 6);
            }
            unint64_t v109 = (unint64_t *)(*(void *)(v57 + 48) + 16 * v108);
            unint64_t v110 = *v109;
            uint64_t v9 = v109[1];
            swift_bridgeObjectRetain();
            specialized Set._Variant.insert(_:)((unint64_t *)&v166, v110, v9);
            uint64_t result = swift_bridgeObjectRelease();
          }
        }
LABEL_375:
        __break(1u);
        goto LABEL_376;
      }
      long long v70 = v166;
      uint64_t v45 = v167;
      int64_t v49 = v3[8];
      if (!v49)
      {
        uint64_t v73 = v3[11];
        if (!v44)
        {
          uint64_t v47 = v153;
          if (v153 > 0) {
            goto LABEL_368;
          }
          uint64_t v9 = 0;
          uint64_t v45 = 0;
          uint64_t v26 = 0;
          uint64_t v46 = 0;
          uint64_t v48 = v153;
          goto LABEL_171;
        }
        int64_t v49 = 0;
LABEL_150:
        uint64_t v9 = v3[9];
        long long v163 = v166;
        *(void *)&long long v164 = v167;
        uint64_t v46 = *((void *)&v167 + 1) - 1;
        if (__OFSUB__(*((void *)&v167 + 1), 1)) {
          goto LABEL_345;
        }
        if ((void)v166 != v73) {
          goto LABEL_346;
        }
        if (v49)
        {
          unint64_t v83 = *(unsigned __int8 *)(v49 + 18);
          uint64_t result = swift_unknownObjectRetain();
          if (*((void *)&v70 + 1) <= v83) {
            goto LABEL_347;
          }
        }
        else if (!*((void *)&v166 + 1))
        {
          goto LABEL_347;
        }
        if (v45)
        {
          char v84 = (4 * *(unsigned char *)(v45 + 18) + 8) & 0x3C;
          if (((*((void *)&v70 + 1) >> v84) & 0xFLL) != 0)
          {
            uint64_t v26 = ((((*((void *)&v70 + 1) >> v84) & 0xFLL) - 1) << v84) | ((-15 << v84) - 1) & *((void *)&v70 + 1);
            *((void *)&v163 + 1) = v26;
            goto LABEL_163;
          }
        }
        int v85 = *(unsigned __int8 *)(v49 + 18);
        char v86 = (4 * v85 + 8) & 0x3C;
        uint64_t v87 = (*((void *)&v70 + 1) >> v86) & 0xFLL;
        v169[0] = v87;
        if (v85)
        {
          swift_unknownObjectRetain();
          char v88 = specialized closure #1 in Rope._Node.formPredecessor(of:)(v49 + 16, v49 + 24, v169, (uint64_t)&v163, v85);
          uint64_t result = swift_unknownObjectRelease();
          if ((v88 & 1) == 0) {
            goto LABEL_354;
          }
          if ((void)v163 != (void)v70) {
            goto LABEL_348;
          }
          uint64_t v26 = *((void *)&v163 + 1);
          uint64_t v45 = v164;
          if ((void)v164)
          {
LABEL_163:
            unint64_t v89 = v45 + 24 * (((unint64_t)v26 >> ((4 * *(unsigned char *)(v45 + 18) + 8) & 0x3C)) & 0xF);
            unint64_t v90 = *(void *)(v89 + 24);
            uint64_t v9 = *(void *)(v89 + 32);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_169:
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v48 = v154 - v90;
            if (__OFSUB__(v154, v90)) {
              goto LABEL_349;
            }
            uint64_t v73 = v70;
            uint64_t v47 = v153;
            goto LABEL_171;
          }
        }
        else
        {
          if (!v87) {
            goto LABEL_354;
          }
          uint64_t v26 = ((v87 - 1) << v86) | ((-15 << v86) - 1) & *((void *)&v70 + 1);
          *((void *)&v163 + 1) = v26;
          uint64_t v45 = v49;
          if (v49) {
            goto LABEL_163;
          }
        }
        swift_unknownObjectRetain();
        unint64_t v90 = specialized Rope._Node.subscript.getter(v26, v49);
        uint64_t v9 = v91;
        swift_unknownObjectRelease();
        goto LABEL_169;
      }
      uint64_t v71 = v3;
      uint64_t v72 = v3[10];
      if (v44 != v72)
      {
        uint64_t v73 = v71[11];
        long long v3 = v71;
        goto LABEL_150;
      }
      if (v72 < v153) {
        goto LABEL_355;
      }
      uint64_t v57 = v156[9];
      uint64_t v73 = v156[11];
      uint64_t v53 = *(unsigned __int8 *)(v49 + 18);
      if (*(_WORD *)(v49 + 16))
      {
        uint64_t v43 = -15;
        if (*(unsigned char *)(v49 + 18))
        {
          uint64_t result = swift_unknownObjectRetain_n();
          uint64_t v9 = v153;
          int64_t v74 = v49;
          while (1)
          {
            uint64_t v77 = *(unsigned __int16 *)(v74 + 16);
            if (!*(_WORD *)(v74 + 16)) {
              goto LABEL_393;
            }
            uint64_t v78 = *(void *)(v74 + 40);
            BOOL v32 = __OFSUB__(v9, v78);
            uint64_t v79 = v9 - v78;
            if (v32) {
              break;
            }
            if (v79 <= 0)
            {
              uint64_t v75 = 0;
            }
            else
            {
              if (v77 == 1) {
                goto LABEL_395;
              }
              uint64_t v80 = *(void *)(v74 + 64);
              uint64_t v9 = v79 - v80;
              if (__OFSUB__(v79, v80)) {
                goto LABEL_332;
              }
              if (v9 >= 1)
              {
                if (v77 != 2)
                {
                  uint64_t v81 = (void *)(v74 + 88);
                  uint64_t v75 = 2;
                  while (v77 != v75)
                  {
                    uint64_t v82 = v9 - *v81;
                    if (__OFSUB__(v9, *v81)) {
                      goto LABEL_245;
                    }
                    if (v82 < 1) {
                      goto LABEL_132;
                    }
                    ++v75;
                    v81 += 3;
                    uint64_t v9 = v82;
                    if (v77 == v75) {
                      goto LABEL_395;
                    }
                  }
                  __break(1u);
LABEL_245:
                  __break(1u);
LABEL_246:
                  __break(1u);
                  goto LABEL_247;
                }
LABEL_395:
                __break(1u);
LABEL_396:
                if (!v9) {
                  __break(1u);
                }
LABEL_398:
                __break(1u);
                return result;
              }
              uint64_t v9 = v79;
              uint64_t v75 = 1;
            }
LABEL_132:
            char v76 = (4 * *(unsigned char *)(v74 + 18) + 8) & 0x3C;
            uint64_t v53 = ((-15 << v76) - 1) & v53 | (v75 << v76);
            uint64_t v45 = *(void *)(v74 + 24 + 24 * v75);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            int64_t v74 = v45;
            if (!*(unsigned char *)(v45 + 18)) {
              goto LABEL_173;
            }
          }
          __break(1u);
          goto LABEL_329;
        }
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v53 = 0;
        uint64_t v9 = v153;
        uint64_t v45 = v49;
LABEL_173:
        uint64_t v92 = *(unsigned __int16 *)(v45 + 16);
        if (!*(_WORD *)(v45 + 16)) {
          goto LABEL_396;
        }
        uint64_t v93 = *(void *)(v45 + 24);
        BOOL v32 = __OFSUB__(v9, v93);
        uint64_t v94 = v9 - v93;
        if (v32) {
          goto LABEL_367;
        }
        if (v94 <= 0)
        {
          uint64_t v97 = 0;
        }
        else
        {
          if (v92 == 1) {
            goto LABEL_398;
          }
          uint64_t v95 = *(void *)(v45 + 48);
          uint64_t v9 = v94 - v95;
          if (__OFSUB__(v94, v95)) {
            goto LABEL_370;
          }
          if (v9 >= 1)
          {
            if (v92 == 2) {
              goto LABEL_398;
            }
            int64_t v96 = (void *)(v45 + 72);
            uint64_t v97 = 2;
            while (v92 != v97)
            {
              uint64_t v98 = v9 - *v96;
              if (__OFSUB__(v9, *v96)) {
                goto LABEL_331;
              }
              if (v98 < 1) {
                goto LABEL_188;
              }
              ++v97;
              v96 += 3;
              uint64_t v9 = v98;
              if (v92 == v97) {
                goto LABEL_398;
              }
            }
LABEL_330:
            __break(1u);
LABEL_331:
            __break(1u);
LABEL_332:
            __break(1u);
LABEL_333:
            __break(1u);
LABEL_334:
            __break(1u);
LABEL_335:
            __break(1u);
LABEL_336:
            __break(1u);
LABEL_337:
            __break(1u);
LABEL_338:
            __break(1u);
LABEL_339:
            __break(1u);
LABEL_340:
            __break(1u);
LABEL_341:
            __break(1u);
LABEL_342:
            __break(1u);
            goto LABEL_343;
          }
          uint64_t v9 = v94;
          uint64_t v97 = 1;
        }
LABEL_188:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v26 = v53 & 0xFFFFFFFFFFFFF0FFLL | (v97 << 8);
      }
      else
      {
        uint64_t v26 = ((-15 << ((4 * v53 + 8) & 0x3C)) - 1) & v53 | ((unint64_t)*(unsigned __int16 *)(v49 + 16) << ((4 * v53 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v9 = 0;
        uint64_t v45 = 0;
      }
      swift_unknownObjectRetain();
      uint64_t v46 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v73, v26, v45, v49, v57);
      uint64_t result = swift_unknownObjectRelease_n();
      uint64_t v47 = v153;
      uint64_t v48 = v153 - v9;
      if (__OFSUB__(v153, v9)) {
        goto LABEL_351;
      }
LABEL_171:
      *(void *)&long long v166 = v73;
      *((void *)&v166 + 1) = v26;
      *(void *)&long long v167 = v45;
      *((void *)&v167 + 1) = v46;
      *(void *)&long long v168 = v48;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      long long v3 = v156;
      specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v166, 0, v47, v156, v162, v4, v152, (uint64_t)&v161);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v44 = v168;
      uint64_t v43 = -15;
    }
    if (*(unsigned char *)(v49 + 18))
    {
      swift_unknownObjectRetain_n();
      uint64_t v9 = 0;
      uint64_t v57 = v49;
      while (1)
      {
        uint64_t v59 = *(unsigned __int16 *)(v57 + 16);
        if (*(_WORD *)(v57 + 16))
        {
          uint64_t v60 = *(void *)(v57 + 40);
          BOOL v32 = __OFSUB__(v9, v60);
          uint64_t v56 = v9 - v60;
          if (v32) {
            goto LABEL_324;
          }
          if (__OFADD__(v56, 1))
          {
LABEL_325:
            __break(1u);
LABEL_326:
            uint64_t v127 = v56;
            uint64_t v116 = v59;
            goto LABEL_262;
          }
          if (v56 + 1 < 1)
          {
            uint64_t v59 = 0;
            goto LABEL_92;
          }
          if (v59 != 1)
          {
            uint64_t v61 = (uint64_t *)(v57 + 64);
            uint64_t v62 = 1;
            while (1)
            {
              uint64_t v63 = *v61;
              v61 += 3;
              uint64_t v9 = v56 - v63;
              if (__OFSUB__(v56, v63)) {
                goto LABEL_246;
              }
              if (__OFADD__(v9, 1)) {
                break;
              }
              if (v9 + 1 < 1)
              {
                uint64_t v59 = v62;
                uint64_t v9 = v56;
                goto LABEL_92;
              }
              ++v62;
              uint64_t v56 = v9;
              if (v59 == v62) {
                goto LABEL_91;
              }
            }
LABEL_247:
            __break(1u);
LABEL_248:
            swift_unknownObjectRetain_n();
            uint64_t result = swift_retain();
            uint64_t v116 = a2;
            uint64_t v26 = v49;
LABEL_249:
            uint64_t v9 = v43;
            uint64_t v127 = *(unsigned __int16 *)(v26 + 16);
            if (!*(_WORD *)(v26 + 16))
            {
LABEL_261:
              if (!v116) {
                goto LABEL_262;
              }
              goto LABEL_387;
            }
            uint64_t v128 = *(void *)(v26 + 24);
            BOOL v32 = __OFSUB__(v116, v128);
            uint64_t v59 = v116 - v128;
            if (v32)
            {
LABEL_388:
              __break(1u);
              goto LABEL_389;
            }
            if (__OFADD__(v59, 1))
            {
LABEL_389:
              __break(1u);
LABEL_390:
              __break(1u);
              goto LABEL_391;
            }
            if (v59 + 1 >= 1)
            {
              if (v127 == 1)
              {
                uint64_t v116 = v59;
                goto LABEL_261;
              }
              uint64_t v129 = (uint64_t *)(v26 + 48);
              uint64_t v56 = 1;
              while (1)
              {
                uint64_t v130 = *v129;
                v129 += 3;
                uint64_t v116 = v59 - v130;
                if (__OFSUB__(v59, v130)) {
                  break;
                }
                if (__OFADD__(v116, 1)) {
                  goto LABEL_380;
                }
                if (v116 + 1 < 1) {
                  goto LABEL_326;
                }
                ++v56;
                uint64_t v59 = v116;
                if (v127 == v56) {
                  goto LABEL_261;
                }
              }
LABEL_379:
              __break(1u);
LABEL_380:
              __break(1u);
              goto LABEL_381;
            }
            uint64_t v127 = 0;
LABEL_262:
            swift_unknownObjectRelease();
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v125 = v4 & 0xFFFFFFFFFFFFF0FFLL | (v127 << 8);
            uint64_t v43 = v9;
            uint64_t v9 = v152;
            if (v49) {
              goto LABEL_243;
            }
LABEL_263:
            uint64_t v126 = 0;
LABEL_264:
            uint64_t v4 = a2 - v116;
            if (__OFSUB__(a2, v116)) {
              goto LABEL_378;
            }
            v157[0] = v43;
            v157[1] = v125;
            v157[2] = v26;
            v157[3] = v126;
            uint64_t v158 = a2 - v116;
            uint64_t v131 = v156;
            uint64_t v26 = a2;
            uint64_t v132 = v153;
            while (2)
            {
              uint64_t v9 = v131[8];
              if (v53 == v26)
              {
                if (v9)
                {
                  int64_t v49 = v131[10];
                  if (v49 < v26) {
                    goto LABEL_356;
                  }
                  uint64_t v155 = v131[9];
                  uint64_t v133 = v131[11];
                  uint64_t v134 = *(unsigned __int8 *)(v9 + 18);
                  if (*(_WORD *)(v9 + 16)) {
                    BOOL v135 = v49 <= v26;
                  }
                  else {
                    BOOL v135 = 1;
                  }
                  if (v135)
                  {
                    unint64_t v136 = ((-15 << ((4 * v134 + 8) & 0x3C)) - 1) & v134 | ((unint64_t)*(unsigned __int16 *)(v9 + 16) << ((4 * v134 + 8) & 0x3C));
                    swift_unknownObjectRetain();
                    uint64_t v137 = 0;
                    uint64_t v26 = 0;
                  }
                  else
                  {
                    uint64_t v152 = v133;
                    if (*(unsigned char *)(v9 + 18))
                    {
                      uint64_t result = swift_unknownObjectRetain_n();
                      uint64_t v137 = v26;
                      uint64_t v139 = v9;
                      while (1)
                      {
                        uint64_t v59 = *(unsigned __int16 *)(v139 + 16);
                        if (!*(_WORD *)(v139 + 16)) {
                          goto LABEL_283;
                        }
                        uint64_t v141 = *(void *)(v139 + 40);
                        BOOL v32 = __OFSUB__(v137, v141);
                        uint64_t v56 = v137 - v141;
                        if (v32) {
                          goto LABEL_334;
                        }
                        if (__OFADD__(v56, 1)) {
                          goto LABEL_335;
                        }
                        if (v56 + 1 >= 1) {
                          break;
                        }
                        uint64_t v59 = 0;
LABEL_284:
                        char v140 = (4 * *(unsigned char *)(v139 + 18) + 8) & 0x3C;
                        uint64_t v134 = ((-15 << v140) - 1) & v134 | (v59 << v140);
                        uint64_t v26 = *(void *)(v139 + 24 + 24 * v59);
                        swift_unknownObjectRetain();
                        uint64_t result = swift_unknownObjectRelease();
                        uint64_t v139 = v26;
                        if (!*(unsigned char *)(v26 + 18)) {
                          goto LABEL_299;
                        }
                      }
                      if (v59 != 1)
                      {
                        uint64_t v142 = (uint64_t *)(v139 + 64);
                        uint64_t v143 = 1;
                        while (1)
                        {
                          uint64_t v144 = *v142;
                          v142 += 3;
                          uint64_t v137 = v56 - v144;
                          if (__OFSUB__(v56, v144)) {
                            break;
                          }
                          if (__OFADD__(v137, 1)) {
                            goto LABEL_322;
                          }
                          if (v137 + 1 < 1)
                          {
                            uint64_t v59 = v143;
                            uint64_t v137 = v56;
                            goto LABEL_284;
                          }
                          ++v143;
                          uint64_t v56 = v137;
                          if (v59 == v143) {
                            goto LABEL_283;
                          }
                        }
                        __break(1u);
LABEL_322:
                        __break(1u);
LABEL_323:
                        __break(1u);
LABEL_324:
                        __break(1u);
                        goto LABEL_325;
                      }
                      uint64_t v137 = v56;
LABEL_283:
                      if (v137) {
                        goto LABEL_333;
                      }
                      goto LABEL_284;
                    }
                    uint64_t result = swift_unknownObjectRetain_n();
                    uint64_t v134 = 0;
                    uint64_t v137 = v26;
                    uint64_t v26 = v9;
LABEL_299:
                    uint64_t v145 = *(unsigned __int16 *)(v26 + 16);
                    if (*(_WORD *)(v26 + 16))
                    {
                      uint64_t v146 = *(void *)(v26 + 24);
                      BOOL v32 = __OFSUB__(v137, v146);
                      uint64_t v147 = v137 - v146;
                      if (v32) {
                        goto LABEL_373;
                      }
                      if (__OFADD__(v147, 1)) {
                        goto LABEL_374;
                      }
                      if (v147 + 1 >= 1)
                      {
                        if (v145 != 1)
                        {
                          uint64_t v148 = (uint64_t *)(v26 + 48);
                          uint64_t v149 = 1;
                          while (1)
                          {
                            uint64_t v150 = *v148;
                            v148 += 3;
                            uint64_t v137 = v147 - v150;
                            if (__OFSUB__(v147, v150)) {
                              break;
                            }
                            if (__OFADD__(v137, 1)) {
                              goto LABEL_353;
                            }
                            if (v137 + 1 < 1)
                            {
                              uint64_t v145 = v149;
                              uint64_t v137 = v147;
                              goto LABEL_312;
                            }
                            ++v149;
                            uint64_t v147 = v137;
                            if (v145 == v149) {
                              goto LABEL_311;
                            }
                          }
LABEL_352:
                          __break(1u);
LABEL_353:
                          __break(1u);
LABEL_354:
                          __break(1u);
LABEL_355:
                          __break(1u);
LABEL_356:
                          __break(1u);
LABEL_357:
                          __break(1u);
LABEL_358:
                          __break(1u);
                          goto LABEL_359;
                        }
                        uint64_t v137 = v147;
                        goto LABEL_311;
                      }
                      uint64_t v145 = 0;
                    }
                    else
                    {
LABEL_311:
                      if (v137) {
                        goto LABEL_372;
                      }
                    }
LABEL_312:
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    unint64_t v136 = v134 & 0xFFFFFFFFFFFFF0FFLL | (v145 << 8);
                    uint64_t v133 = v152;
                  }
                  swift_unknownObjectRetain();
                  specialized Rope._Node.distanceFromStart<A>(to:in:)(v133, v136, v26, v9, v155);
                  uint64_t result = swift_unknownObjectRelease_n();
                  uint64_t v131 = v156;
                  uint64_t v26 = a2;
                  uint64_t v132 = v153;
                }
                else
                {
                  if (v26 > 0) {
                    goto LABEL_366;
                  }
                  uint64_t v137 = 0;
                }
                uint64_t v138 = v26 - v137;
                if (__OFSUB__(v26, v137)) {
                  goto LABEL_350;
                }
              }
              else if (v9)
              {
                uint64_t v138 = v131[10];
              }
              else
              {
                uint64_t v138 = 0;
              }
              if (v4 >= v138 || !*(void *)(v159 + 16))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                uint64_t result = v161;
                if (v160 >= v161) {
                  return result;
                }
LABEL_381:
                __break(1u);
LABEL_382:
                __break(1u);
LABEL_383:
                __break(1u);
LABEL_384:
                __break(1u);
                goto LABEL_385;
              }
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              specialized AttributedString.Guts.updateRun(at:within:with:)(v157, v26, v53, v131, &v159, v57, v132, (uint64_t)&v160);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = (uint64_t)$defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v131, v26, v53, v157);
              uint64_t v4 = v158;
              continue;
            }
          }
          uint64_t v9 = v56;
        }
LABEL_91:
        if (v9) {
          goto LABEL_323;
        }
LABEL_92:
        char v58 = (4 * *(unsigned char *)(v57 + 18) + 8) & 0x3C;
        uint64_t v53 = ((-15 << v58) - 1) & v53 | (v59 << v58);
        uint64_t v26 = *(void *)(v57 + 24 + 24 * v59);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v57 = v26;
        if (!*(unsigned char *)(v26 + 18)) {
          goto LABEL_107;
        }
      }
    }
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v9 = 0;
    uint64_t v53 = 0;
    uint64_t v26 = v49;
LABEL_107:
    uint64_t v64 = *(unsigned __int16 *)(v26 + 16);
    if (*(_WORD *)(v26 + 16))
    {
      uint64_t v65 = *(void *)(v26 + 24);
      BOOL v32 = __OFSUB__(v9, v65);
      uint64_t v66 = v9 - v65;
      if (v32) {
        goto LABEL_361;
      }
      if (__OFADD__(v66, 1))
      {
LABEL_362:
        __break(1u);
LABEL_363:
        __break(1u);
LABEL_364:
        __break(1u);
        goto LABEL_365;
      }
      if (v66 + 1 < 1)
      {
        uint64_t v64 = 0;
LABEL_120:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v55 = v53 & 0xFFFFFFFFFFFFF0FFLL | (v64 << 8);
        goto LABEL_121;
      }
      if (v64 != 1)
      {
        uint64_t v67 = (uint64_t *)(v26 + 48);
        uint64_t v68 = 1;
        while (1)
        {
          uint64_t v69 = *v67;
          v67 += 3;
          uint64_t v9 = v66 - v69;
          if (__OFSUB__(v66, v69)) {
            goto LABEL_340;
          }
          if (__OFADD__(v9, 1)) {
            goto LABEL_341;
          }
          if (v9 + 1 < 1) {
            break;
          }
          ++v68;
          uint64_t v66 = v9;
          if (v64 == v68) {
            goto LABEL_119;
          }
        }
        uint64_t v64 = v68;
        uint64_t v9 = v66;
        goto LABEL_120;
      }
      uint64_t v9 = v66;
    }
LABEL_119:
    if (v9) {
      goto LABEL_360;
    }
    goto LABEL_120;
  }
  return result;
}

uint64_t AttributedString.Guts._needsParagraphFixing(from:to:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = v2[8];
  int64_t v4 = v2[10];
  if (v3) {
    uint64_t v5 = v2[10];
  }
  else {
    uint64_t v5 = 0;
  }
  if (result < 0 || (uint64_t v6 = result, v5 < result))
  {
LABEL_233:
    __break(1u);
LABEL_234:
    __break(1u);
    goto LABEL_235;
  }
  uint64_t v8 = v2[9];
  uint64_t v147 = v2[11];
  if (!v3 || (*(_WORD *)(v3 + 16) ? (BOOL v9 = v4 <= result) : (BOOL v9 = 1), v9))
  {
    unint64_t v10 = swift_unknownObjectRetain_n();
    unint64_t v11 = specialized Rope._endPath.getter(v10);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v12 = 0;
    if (!v3) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v145 = v8;
  unint64_t v146 = v4;
  uint64_t v17 = *(unsigned __int8 *)(v3 + 18);
  if (*(unsigned char *)(v3 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v43 = v3;
    while (1)
    {
      uint64_t v45 = *(unsigned __int16 *)(v43 + 16);
      if (!*(_WORD *)(v43 + 16)) {
        goto LABEL_59;
      }
      uint64_t v46 = *(void *)(v43 + 40);
      BOOL v23 = __OFSUB__(v6, v46);
      uint64_t v47 = v6 - v46;
      if (v23) {
        goto LABEL_227;
      }
      if (__OFADD__(v47, 1)) {
        goto LABEL_228;
      }
      if (v47 + 1 < 1)
      {
        uint64_t v45 = 0;
        goto LABEL_60;
      }
      if (v45 == 1) {
        break;
      }
      uint64_t v48 = (uint64_t *)(v43 + 64);
      uint64_t v49 = 1;
      while (1)
      {
        uint64_t v50 = *v48;
        v48 += 3;
        uint64_t v6 = v47 - v50;
        if (__OFSUB__(v47, v50))
        {
          __break(1u);
LABEL_222:
          __break(1u);
LABEL_223:
          __break(1u);
LABEL_224:
          __break(1u);
          goto LABEL_225;
        }
        if (__OFADD__(v6, 1)) {
          goto LABEL_222;
        }
        if (v6 + 1 < 1) {
          break;
        }
        ++v49;
        uint64_t v47 = v6;
        if (v45 == v49) {
          goto LABEL_59;
        }
      }
      uint64_t v45 = v49;
      uint64_t v6 = v47;
LABEL_60:
      char v44 = (4 * *(unsigned char *)(v43 + 18) + 8) & 0x3C;
      uint64_t v17 = ((-15 << v44) - 1) & v17 | (v45 << v44);
      uint64_t v12 = *(void *)(v43 + 24 + 24 * v45);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v43 = v12;
      if (!*(unsigned char *)(v12 + 18)) {
        goto LABEL_179;
      }
    }
    uint64_t v6 = v47;
LABEL_59:
    if (!v6) {
      goto LABEL_60;
    }
LABEL_225:
    __break(1u);
LABEL_226:
    __break(1u);
LABEL_227:
    __break(1u);
LABEL_228:
    __break(1u);
LABEL_229:
    __break(1u);
LABEL_230:
    __break(1u);
LABEL_231:
    __break(1u);
LABEL_232:
    __break(1u);
    goto LABEL_233;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v12 = v3;
LABEL_179:
  uint64_t v119 = *(unsigned __int16 *)(v12 + 16);
  if (!*(_WORD *)(v12 + 16)) {
    goto LABEL_189;
  }
  uint64_t v120 = *(void *)(v12 + 24);
  BOOL v23 = __OFSUB__(v6, v120);
  v6 -= v120;
  if (v23)
  {
LABEL_241:
    __break(1u);
    goto LABEL_242;
  }
  if (__OFADD__(v6, 1))
  {
LABEL_242:
    __break(1u);
    goto LABEL_243;
  }
  if (v6 + 1 >= 1)
  {
    if (v119 != 1)
    {
      uint64_t v121 = (uint64_t *)(v12 + 48);
      uint64_t v122 = 1;
      while (1)
      {
        uint64_t v123 = *v121;
        v121 += 3;
        BOOL v23 = __OFSUB__(v6, v123);
        v6 -= v123;
        if (v23) {
          goto LABEL_237;
        }
        if (__OFADD__(v6, 1)) {
          goto LABEL_238;
        }
        if (v6 + 1 < 1) {
          break;
        }
        if (v119 == ++v122) {
          goto LABEL_189;
        }
      }
      uint64_t v119 = v122;
      goto LABEL_215;
    }
LABEL_189:
    if (v6)
    {
      __break(1u);
      goto LABEL_191;
    }
    goto LABEL_215;
  }
  uint64_t v119 = 0;
LABEL_215:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v11 = v17 & 0xFFFFFFFFFFFFF0FFLL | (v119 << 8);
  uint64_t v8 = v145;
LABEL_13:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v147, v11, v12, v3, v8);
  uint64_t result = swift_unknownObjectRelease_n();
LABEL_14:
  uint64_t v6 = v2[8];
  uint64_t v13 = v2[10];
  if (v6) {
    uint64_t v14 = v2[10];
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 < 0 || v14 < a2) {
    goto LABEL_234;
  }
  unint64_t v15 = (long long *)v2[9];
  uint64_t v16 = v2[11];
  unint64_t v146 = v11;
  if (v6 && *(_WORD *)(v6 + 16) && v13 > a2)
  {
    uint64_t v143 = v15;
    uint64_t v144 = (long long *)v13;
    uint64_t v145 = v16;
    uint64_t v17 = *(unsigned __int8 *)(v6 + 18);
    if (*(unsigned char *)(v6 + 18))
    {
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v18 = v6;
      while (1)
      {
        uint64_t v21 = *(unsigned __int16 *)(v18 + 16);
        if (!*(_WORD *)(v18 + 16)) {
          goto LABEL_25;
        }
        uint64_t v22 = *(void *)(v18 + 40);
        BOOL v23 = __OFSUB__(a2, v22);
        uint64_t v24 = a2 - v22;
        if (v23) {
          goto LABEL_229;
        }
        if (__OFADD__(v24, 1)) {
          goto LABEL_230;
        }
        if (v24 + 1 < 1)
        {
          uint64_t v21 = 0;
        }
        else
        {
          if (v21 == 1)
          {
            a2 = v24;
LABEL_25:
            if (a2) {
              goto LABEL_226;
            }
            goto LABEL_26;
          }
          unint64_t v25 = (uint64_t *)(v18 + 64);
          uint64_t v26 = 1;
          while (1)
          {
            uint64_t v27 = *v25;
            v25 += 3;
            a2 = v24 - v27;
            if (__OFSUB__(v24, v27)) {
              goto LABEL_223;
            }
            if (__OFADD__(a2, 1)) {
              goto LABEL_224;
            }
            if (a2 + 1 < 1) {
              break;
            }
            ++v26;
            uint64_t v24 = a2;
            if (v21 == v26) {
              goto LABEL_25;
            }
          }
          uint64_t v21 = v26;
          a2 = v24;
        }
LABEL_26:
        char v19 = (4 * *(unsigned char *)(v18 + 18) + 8) & 0x3C;
        uint64_t v17 = ((-15 << v19) - 1) & v17 | (v21 << v19);
        uint64_t v20 = *(void *)(v18 + 24 + 24 * v21);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v18 = v20;
        if (!*(unsigned char *)(v20 + 18)) {
          goto LABEL_192;
        }
      }
    }
LABEL_191:
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v20 = v6;
LABEL_192:
    uint64_t v124 = *(unsigned __int16 *)(v20 + 16);
    if (*(_WORD *)(v20 + 16))
    {
      uint64_t v125 = *(void *)(v20 + 24);
      BOOL v23 = __OFSUB__(a2, v125);
      a2 -= v125;
      if (v23)
      {
LABEL_243:
        __break(1u);
        goto LABEL_244;
      }
      uint64_t v16 = v145;
      if (__OFADD__(a2, 1))
      {
LABEL_244:
        __break(1u);
LABEL_245:
        __break(1u);
        return result;
      }
      if (a2 + 1 < 1)
      {
        uint64_t v124 = 0;
LABEL_217:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v29 = v17 & 0xFFFFFFFFFFFFF0FFLL | (v124 << 8);
        unint64_t v15 = v143;
        goto LABEL_41;
      }
      if (v124 != 1)
      {
        uint64_t v126 = (uint64_t *)(v20 + 48);
        uint64_t v127 = 1;
        while (1)
        {
          uint64_t v128 = *v126;
          v126 += 3;
          BOOL v23 = __OFSUB__(a2, v128);
          a2 -= v128;
          if (v23) {
            goto LABEL_239;
          }
          if (__OFADD__(a2, 1)) {
            goto LABEL_240;
          }
          if (a2 + 1 < 1) {
            break;
          }
          if (v124 == ++v127) {
            goto LABEL_204;
          }
        }
        uint64_t v124 = v127;
        goto LABEL_217;
      }
    }
    else
    {
      uint64_t v16 = v145;
    }
LABEL_204:
    if (a2)
    {
      __break(1u);
LABEL_206:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    goto LABEL_217;
  }
  unint64_t v28 = swift_unknownObjectRetain_n();
  unint64_t v29 = specialized Rope._endPath.getter(v28);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v20 = 0;
  if (v6)
  {
LABEL_41:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v16, v29, v20, v6, (uint64_t)v15);
    uint64_t result = swift_unknownObjectRelease_n();
  }
  if (v147 != v2[11])
  {
LABEL_235:
    __break(1u);
    goto LABEL_236;
  }
  uint64_t v30 = v2[8];
  if (v12)
  {
    unint64_t v31 = v12 + 24 * ((v146 >> ((4 * *(unsigned char *)(v12 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v32 = *(void *)(v31 + 32);
    uint64_t v33 = *(void *)(v31 + 40);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v146, v30);
    uint64_t v32 = v34;
    uint64_t v33 = v35;
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v30 = v2[8];
    uint64_t v147 = v2[11];
  }
  if (v16 != v147)
  {
LABEL_236:
    __break(1u);
LABEL_237:
    __break(1u);
LABEL_238:
    __break(1u);
LABEL_239:
    __break(1u);
LABEL_240:
    __break(1u);
    goto LABEL_241;
  }
  if (v20)
  {
    unint64_t v36 = v20 + 24 * ((v29 >> ((4 * *(unsigned char *)(v20 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v38 = *(void *)(v36 + 32);
    uint64_t v37 = *(void *)(v36 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v29, v30);
    uint64_t v38 = v39;
    uint64_t v37 = v40;
    swift_unknownObjectRelease();
  }
  int v41 = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v32);
  int v42 = specialized AttributedString._AttributeStorage.containsParagraphConstraint.getter(v38);
  if ((v41 & 1) == 0 && (v42 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((v41 ^ v42))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_212;
  }
  uint64_t v133 = v33;
  uint64_t v134 = v37;
  uint64_t v51 = *(void *)(v32 + 64);
  uint64_t v141 = (uint64_t *)(v32 + 64);
  uint64_t v52 = 1 << *(unsigned char *)(v32 + 32);
  uint64_t v53 = -1;
  if (v52 < 64) {
    uint64_t v53 = ~(-1 << v52);
  }
  unint64_t v54 = v53 & v51;
  unint64_t v146 = (unint64_t)&v166;
  uint64_t v143 = (long long *)((unint64_t)(v52 + 63) >> 6);
  uint64_t v144 = (long long *)((char *)&v169 + 8);
  uint64_t v142 = (long long *)v155;
  uint64_t v132 = (char *)v143 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v147 = 0;
  unint64_t v55 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
  uint64_t v140 = v32;
  uint64_t v145 = v38;
  while (1)
  {
    if (v54)
    {
      unint64_t v56 = __clz(__rbit64(v54));
      v54 &= v54 - 1;
      uint64_t v57 = v56 | (v147 << 6);
LABEL_81:
      uint64_t v58 = *(void *)(v32 + 56);
      uint64_t v59 = (void *)(*(void *)(v32 + 48) + 16 * v57);
      uint64_t v60 = v59[1];
      *(void *)&long long v165 = *v59;
      *((void *)&v165 + 1) = v60;
      outlined init with copy of AttributedString._AttributeValue(v58 + 72 * v57, v146);
      swift_bridgeObjectRetain();
      goto LABEL_100;
    }
    uint64_t v61 = v147 + 1;
    if (__OFADD__(v147, 1)) {
      goto LABEL_231;
    }
    if (v61 < (uint64_t)v143)
    {
      unint64_t v62 = v141[v61];
      if (v62) {
        goto LABEL_85;
      }
      uint64_t v63 = v147 + 2;
      ++v147;
      if (v61 + 1 < (uint64_t)v143)
      {
        unint64_t v62 = v141[v63];
        if (v62) {
          goto LABEL_88;
        }
        uint64_t v147 = v61 + 1;
        if (v61 + 2 < (uint64_t)v143)
        {
          unint64_t v62 = v141[v61 + 2];
          if (v62)
          {
            v61 += 2;
            goto LABEL_85;
          }
          uint64_t v63 = v61 + 3;
          uint64_t v147 = v61 + 2;
          if (v61 + 3 < (uint64_t)v143)
          {
            unint64_t v62 = v141[v63];
            if (v62)
            {
LABEL_88:
              uint64_t v61 = v63;
LABEL_85:
              unint64_t v54 = (v62 - 1) & v62;
              uint64_t v57 = __clz(__rbit64(v62)) + (v61 << 6);
              uint64_t v147 = v61;
              goto LABEL_81;
            }
            while (1)
            {
              uint64_t v61 = v63 + 1;
              if (__OFADD__(v63, 1)) {
                goto LABEL_245;
              }
              if (v61 >= (uint64_t)v143) {
                break;
              }
              unint64_t v62 = v141[v61];
              ++v63;
              if (v62) {
                goto LABEL_85;
              }
            }
            uint64_t v147 = (uint64_t)v132;
          }
        }
      }
    }
    unint64_t v54 = 0;
    uint64_t v170 = 0;
    long long v168 = 0u;
    long long v169 = 0u;
    long long v166 = 0u;
    long long v167 = 0u;
    long long v165 = 0u;
LABEL_100:
    outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v165, (uint64_t)&v183);
    uint64_t v64 = v184;
    if (!v184) {
      break;
    }
    uint64_t v65 = v55;
    uint64_t v66 = v183;
    long long v180 = v187;
    long long v181 = v188;
    uint64_t v182 = v189;
    long long v178 = v185;
    long long v179 = v186;
    uint64_t v67 = *((void *)&v187 + 1);
    if ((void)v188)
    {
      if ((void)v181 == 1)
      {
        outlined consume of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v180 + 1), 1);
        outlined consume of AttributedString.AttributeRunBoundaries?(0, 0);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      unint64_t v55 = v65;
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v178);
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      outlined consume of AttributedString.AttributeRunBoundaries?(v67, 0);
      if (*(void *)(v38 + 16))
      {
        unint64_t v68 = specialized __RawDictionaryStorage.find<A>(_:)(v66, v64);
        unint64_t v55 = v65;
        if (v69)
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(v38 + 56) + 72 * v68, (uint64_t)&v173);
        }
        else
        {
          uint64_t v177 = 0;
          long long v175 = 0u;
          long long v176 = 0u;
          long long v173 = 0u;
          long long v174 = 0u;
        }
      }
      else
      {
        uint64_t v177 = 0;
        long long v175 = 0u;
        long long v176 = 0u;
        long long v173 = 0u;
        long long v174 = 0u;
        unint64_t v55 = v65;
      }
      swift_bridgeObjectRelease();
      outlined init with copy of AttributedString._AttributeValue((uint64_t)&v178, (uint64_t)v172);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v173, (uint64_t)&v165, v55);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v172, (uint64_t)v144, v55);
      if (*((void *)&v166 + 1))
      {
        outlined init with copy of (Hashable & Sendable)?((uint64_t)&v165, (uint64_t)v164, v55);
        if (!v171)
        {
          outlined destroy of Any?((uint64_t)v172, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v178);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v164);
LABEL_210:
          outlined destroy of Any?((uint64_t)&v165, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
LABEL_211:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
LABEL_212:
          swift_bridgeObjectRelease();
          return 1;
        }
        long long v70 = v144[3];
        long long v161 = v144[2];
        long long v162 = v70;
        uint64_t v163 = *((void *)v144 + 8);
        long long v71 = v144[1];
        long long v159 = *v144;
        long long v160 = v71;
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v164, (uint64_t)v158);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v159, (uint64_t)v157);
        outlined init with copy of (Hashable & Sendable)?((uint64_t)v158, (uint64_t)&v153, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined init with copy of (Hashable & Sendable)?((uint64_t)v157, (uint64_t)v142, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        if (v154)
        {
          if (v156)
          {
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v153, (uint64_t)v150);
            outlined init with take of any PredicateExpression<Self.Output == B1>(v142, (uint64_t)v149);
            uint64_t v72 = v151;
            uint64_t v137 = v152;
            unint64_t v136 = __swift_project_boxed_opaque_existential_1(v150, v151);
            uint64_t v139 = &v129;
            uint64_t v73 = *(void *)(v72 - 8);
            MEMORY[0x1F4188790](v136);
            BOOL v135 = (char *)&v129 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v149, (uint64_t)v148);
            uint64_t v75 = type metadata accessor for Optional();
            uint64_t v138 = &v129;
            uint64_t v76 = *(void *)(v75 - 8);
            MEMORY[0x1F4188790](v75);
            uint64_t v78 = (char *)&v129 - v77;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            int v79 = swift_dynamicCast();
            uint64_t v80 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v73 + 56);
            if (v79)
            {
              v80(v78, 0, 1, v72);
              uint64_t v81 = v135;
              (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v135, v78, v72);
              char v82 = dispatch thunk of static Equatable.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v73 + 8))(v81, v72);
            }
            else
            {
              v80(v78, 1, 1, v72);
              (*(void (**)(char *, uint64_t))(v76 + 8))(v78, v75);
              char v82 = 0;
            }
            uint64_t v32 = v140;
            uint64_t v38 = v145;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v149);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v150);
            unint64_t v55 = v65;
            goto LABEL_124;
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v153);
        }
        else
        {
          if (!v156)
          {
            char v82 = 1;
            goto LABEL_124;
          }
          outlined destroy of Any?((uint64_t)v142, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        }
        char v82 = 0;
LABEL_124:
        outlined destroy of Any?((uint64_t)v157, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of Any?((uint64_t)v158, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v159);
        outlined destroy of Any?((uint64_t)v172, v55);
        outlined destroy of Any?((uint64_t)&v173, v55);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v178);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v164);
        uint64_t result = outlined destroy of Any?((uint64_t)&v165, v55);
        if ((v82 & 1) == 0) {
          goto LABEL_211;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)v172, v55);
        outlined destroy of Any?((uint64_t)&v173, v55);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v178);
        if (v171) {
          goto LABEL_210;
        }
        uint64_t result = outlined destroy of Any?((uint64_t)&v165, v55);
      }
    }
  }
  swift_release();
  char v84 = (long long *)(v38 + 64);
  uint64_t v83 = *(void *)(v38 + 64);
  uint64_t v85 = 1 << *(unsigned char *)(v38 + 32);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v86 = 0;
  uint64_t v87 = -1;
  if (v85 < 64) {
    uint64_t v87 = ~(-1 << v85);
  }
  unint64_t v88 = v87 & v83;
  uint64_t v89 = v140;
  unint64_t v146 = (unint64_t)&v169 + 8;
  uint64_t v147 = (uint64_t)&v166;
  uint64_t v143 = (long long *)v155;
  uint64_t v144 = (long long *)((unint64_t)(v85 + 63) >> 6);
  uint64_t v132 = (char *)v144 - 5;
  uint64_t v142 = v84;
  uint64_t v130 = (uint64_t)v144 - 1;
  uint64_t v131 = (char *)v84 + 40;
  unint64_t v90 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
  while (1)
  {
    while (1)
    {
      if (v88)
      {
        unint64_t v91 = __clz(__rbit64(v88));
        v88 &= v88 - 1;
        unint64_t v92 = v91 | (v86 << 6);
        goto LABEL_133;
      }
      uint64_t v96 = v86 + 1;
      if (__OFADD__(v86, 1)) {
        goto LABEL_232;
      }
      if (v96 >= (uint64_t)v144)
      {
        uint64_t v98 = v86;
      }
      else
      {
        unint64_t v97 = *((void *)v142 + v96);
        if (v97) {
          goto LABEL_137;
        }
        uint64_t v98 = v86 + 1;
        if (v86 + 2 < (uint64_t)v144)
        {
          unint64_t v97 = *((void *)v142 + v86 + 2);
          if (v97)
          {
            uint64_t v96 = v86 + 2;
            goto LABEL_137;
          }
          uint64_t v98 = v86 + 2;
          if (v86 + 3 < (uint64_t)v144)
          {
            unint64_t v97 = *((void *)v142 + v86 + 3);
            if (v97)
            {
              uint64_t v96 = v86 + 3;
LABEL_137:
              unint64_t v88 = (v97 - 1) & v97;
              unint64_t v92 = __clz(__rbit64(v97)) + (v96 << 6);
              uint64_t v86 = v96;
LABEL_133:
              uint64_t v93 = *(void *)(v145 + 56);
              uint64_t v94 = (void *)(*(void *)(v145 + 48) + 16 * v92);
              uint64_t v95 = v94[1];
              *(void *)&long long v165 = *v94;
              *((void *)&v165 + 1) = v95;
              outlined init with copy of AttributedString._AttributeValue(v93 + 72 * v92, v147);
              swift_bridgeObjectRetain();
              goto LABEL_140;
            }
            uint64_t v96 = v86 + 4;
            uint64_t v98 = v86 + 3;
            if (v86 + 4 < (uint64_t)v144)
            {
              unint64_t v97 = *((void *)v142 + v96);
              if (v97) {
                goto LABEL_137;
              }
              while (v132 != (char *)v86)
              {
                unint64_t v97 = *(void *)&v131[8 * v86++];
                if (v97)
                {
                  uint64_t v96 = v86 + 4;
                  goto LABEL_137;
                }
              }
              uint64_t v98 = v130;
            }
          }
        }
      }
      unint64_t v88 = 0;
      uint64_t v170 = 0;
      long long v168 = 0u;
      long long v169 = 0u;
      long long v166 = 0u;
      long long v167 = 0u;
      uint64_t v86 = v98;
      long long v165 = 0u;
LABEL_140:
      outlined init with take of (key: String, value: AttributedString._AttributeValue)?((uint64_t)&v165, (uint64_t)&v183);
      uint64_t v99 = v184;
      if (!v184) {
        goto LABEL_206;
      }
      uint64_t v100 = v90;
      uint64_t v101 = v183;
      long long v180 = v187;
      long long v181 = v188;
      uint64_t v182 = v189;
      long long v178 = v185;
      long long v179 = v186;
      uint64_t v102 = *((void *)&v187 + 1);
      if ((void)v188)
      {
        if ((void)v181 == 1)
        {
          outlined consume of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v180 + 1), 1);
          outlined consume of AttributedString.AttributeRunBoundaries?(0, 0);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        unint64_t v90 = v100;
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v178);
        uint64_t result = swift_bridgeObjectRelease();
        continue;
      }
      swift_bridgeObjectRelease_n();
      outlined consume of AttributedString.AttributeRunBoundaries?(v102, 0);
      if (*(void *)(v89 + 16))
      {
        unint64_t v103 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v99);
        unint64_t v90 = v100;
        if (v104)
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(v89 + 56) + 72 * v103, (uint64_t)&v173);
        }
        else
        {
          uint64_t v177 = 0;
          long long v175 = 0u;
          long long v176 = 0u;
          long long v173 = 0u;
          long long v174 = 0u;
        }
      }
      else
      {
        uint64_t v177 = 0;
        long long v175 = 0u;
        long long v176 = 0u;
        long long v173 = 0u;
        long long v174 = 0u;
        unint64_t v90 = v100;
      }
      swift_bridgeObjectRelease();
      outlined init with copy of AttributedString._AttributeValue((uint64_t)&v178, (uint64_t)v172);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v173, (uint64_t)&v165, v90);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v172, v146, v90);
      if (*((void *)&v166 + 1)) {
        break;
      }
      outlined destroy of Any?((uint64_t)v172, v90);
      outlined destroy of Any?((uint64_t)&v173, v90);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v178);
      if (v171) {
        goto LABEL_219;
      }
      uint64_t result = outlined destroy of Any?((uint64_t)&v165, v90);
    }
    outlined init with copy of (Hashable & Sendable)?((uint64_t)&v165, (uint64_t)v164, v90);
    if (!v171) {
      break;
    }
    long long v105 = *(_OWORD *)(v146 + 48);
    long long v161 = *(_OWORD *)(v146 + 32);
    long long v162 = v105;
    uint64_t v163 = *(void *)(v146 + 64);
    long long v106 = *(_OWORD *)(v146 + 16);
    long long v159 = *(_OWORD *)v146;
    long long v160 = v106;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v164, (uint64_t)v158);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v159, (uint64_t)v157);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v158, (uint64_t)&v153, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v157, (uint64_t)v143, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    if (v154)
    {
      if (v156)
      {
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v153, (uint64_t)v150);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v143, (uint64_t)v149);
        uint64_t v107 = v151;
        uint64_t v138 = v152;
        uint64_t v137 = __swift_project_boxed_opaque_existential_1(v150, v151);
        uint64_t v141 = &v129;
        uint64_t v108 = *(void *)(v107 - 8);
        MEMORY[0x1F4188790](v137);
        unint64_t v136 = (uint64_t *)((char *)&v129 - ((v109 + 15) & 0xFFFFFFFFFFFFFFF0));
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v149, (uint64_t)v148);
        uint64_t v110 = type metadata accessor for Optional();
        uint64_t v139 = &v129;
        uint64_t v134 = *(void *)(v110 - 8);
        BOOL v135 = (char *)v110;
        MEMORY[0x1F4188790](v110);
        unint64_t v112 = (char *)&v129 - v111;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        int v113 = swift_dynamicCast();
        uint64_t v114 = v108;
        uint64_t v115 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56);
        if (v113)
        {
          v115(v112, 0, 1, v107);
          uint64_t v116 = v136;
          (*(void (**)(void *, char *, uint64_t))(v114 + 32))(v136, v112, v107);
          int64_t v117 = v116;
          char v118 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(void *, uint64_t))(v114 + 8))(v117, v107);
        }
        else
        {
          v115(v112, 1, 1, v107);
          (*(void (**)(char *, char *))(v134 + 8))(v112, v135);
          char v118 = 0;
        }
        uint64_t v89 = v140;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v149);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v150);
        unint64_t v90 = v100;
        goto LABEL_167;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v153);
    }
    else
    {
      if (!v156)
      {
        char v118 = 1;
        goto LABEL_167;
      }
      outlined destroy of Any?((uint64_t)v143, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    }
    char v118 = 0;
LABEL_167:
    outlined destroy of Any?((uint64_t)v157, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of Any?((uint64_t)v158, &demangling cache variable for type metadata for (Hashable & Sendable)?);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v159);
    outlined destroy of Any?((uint64_t)v172, v90);
    outlined destroy of Any?((uint64_t)&v173, v90);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v178);
    outlined destroy of AttributedString._AttributeValue((uint64_t)v164);
    uint64_t result = outlined destroy of Any?((uint64_t)&v165, v90);
    if ((v118 & 1) == 0) {
      goto LABEL_220;
    }
  }
  outlined destroy of Any?((uint64_t)v172, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?((uint64_t)&v173, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v178);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v164);
LABEL_219:
  outlined destroy of Any?((uint64_t)&v165, &demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
LABEL_220:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return 1;
}

unint64_t one-time initialization function for _canChangeUIDs()
{
  uid_t v0 = geteuid();
  uid_t v1 = getuid();
  unint64_t result = _getSVUID()();
  Swift::Bool v3 = (result & 0x100000000) != 0 || v0 != result;
  if (v1 != v0) {
    Swift::Bool v3 = 1;
  }
  if (!v1) {
    Swift::Bool v3 = 1;
  }
  _canChangeUIDs = v3;
  return result;
}

unint64_t _getSVUID()()
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  memset(v5, 0, sizeof(v5));
  uint64_t v6 = 0;
  int v7 = 0;
  uint64_t v14 = 0;
  int v15 = 0;
  uint64_t v16 = 0;
  int v17 = 0;
  uint64_t v21 = 0;
  uint64_t v34 = 0;
  __int16 v35 = 0;
  int v40 = 0;
  uint64_t v47 = 0;
  long long v8 = 0u;
  long long v9 = 0u;
  int v10 = 0;
  int v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v19 = 0;
  int v20 = 0;
  long long v18 = 0u;
  long long v23 = 0u;
  memset(v24, 0, sizeof(v24));
  long long v25 = 0u;
  int v22 = 0;
  int v26 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  memset(v33, 0, sizeof(v33));
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v41 = 0u;
  int v43 = 0;
  uint64_t v42 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  __int16 v46 = 0;
  long long v48 = 0u;
  __int16 v50 = 0;
  uint64_t v49 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  size_t v4 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18210C6A0;
  *(void *)(v0 + 32) = 0xE00000001;
  *(_DWORD *)(v0 + 40) = 1;
  *(_DWORD *)(v0 + 44) = getpid();
  int v1 = sysctl((int *)(v0 + 32), 4u, v5, &v4, 0, 0);
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = v33[3];
  }
  return v2 | ((unint64_t)(v1 != 0) << 32);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>(uint64_t a1)
{
  *(void *)(a1 + 16) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 24) = result;
  return result;
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.NotEqual<A, B>(void *a1)
{
  return PredicateExpressions.NotEqual<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.NotEqual<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t type metadata completion function for NSDecimal.ParseStrategy()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id NSURLCache.init(memoryCapacity:diskCapacity:directory:)(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v5 = *a3;
  if (*a3)
  {
    id v6 = v5;
    outlined consume of URL?(v5);
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithMemoryCapacity_diskCapacity_directoryURL_, a1, a2, v6);

  return v7;
}

uint64_t URLComponents.percentEncodedQuery.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(unsigned char *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 15) = 0;
  if (!a2)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 120) = a1;
    *(void *)(v3 + 128) = a2;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v16 = a1;
    uint64_t v17 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    long long v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    int v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents);
    id v11 = v9;
    if (v10)
    {
      unint64_t v16 = a1;
      uint64_t v17 = a2;
      StringProtocol._ephemeralString.getter();
      long long v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 0x40u, 1);
    }
    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 0x40u, 1);
    }
    char v15 = v14;
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v16 = a1;
      uint64_t v17 = a2 & 0xFFFFFFFFFFFFFFLL;
      id v6 = (char *)&v16;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      id v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      id v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 1)) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata completion function for _AttributedStringFromMarkdownCreatorConcrete.DecodedAttributeBox()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (!*(void *)(a1 + 24))
  {
    outlined destroy of Any?(a1, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRetain();
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    char v20 = v19;
    swift_bridgeObjectRelease();
    if (v20)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v22 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v23 = v22;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        uint64_t v43 = static _DictionaryStorage.copy(original:)();
        uint64_t v23 = v43;
        if (*(void *)(v22 + 16))
        {
          long long v44 = (char *)(v43 + 64);
          __srca = (char *)(v22 + 64);
          unint64_t v45 = (unint64_t)((1 << *(unsigned char *)(v23 + 32)) + 63) >> 6;
          if (v23 != v22 || v44 >= &__srca[8 * v45]) {
            memmove(v44, __srca, 8 * v45);
          }
          int64_t v68 = 0;
          *(void *)(v23 + 16) = *(void *)(v22 + 16);
          uint64_t v46 = 1 << *(unsigned char *)(v22 + 32);
          uint64_t v47 = -1;
          if (v46 < 64) {
            uint64_t v47 = ~(-1 << v46);
          }
          unint64_t v48 = v47 & *(void *)(v22 + 64);
          int64_t v64 = (unint64_t)(v46 + 63) >> 6;
          while (1)
          {
            if (v48)
            {
              unint64_t v49 = __clz(__rbit64(v48));
              v48 &= v48 - 1;
              unint64_t v50 = v49 | (v68 << 6);
            }
            else
            {
              int64_t v57 = v68 + 1;
              if (__OFADD__(v68, 1))
              {
LABEL_81:
                __break(1u);
                goto LABEL_82;
              }
              if (v57 >= v64) {
                break;
              }
              unint64_t v58 = *(void *)&__srca[8 * v57];
              int64_t v59 = v68 + 1;
              if (!v58)
              {
                int64_t v59 = v68 + 2;
                if (v68 + 2 >= v64) {
                  break;
                }
                unint64_t v58 = *(void *)&__srca[8 * v59];
                if (!v58)
                {
                  int64_t v59 = v68 + 3;
                  if (v68 + 3 >= v64) {
                    break;
                  }
                  unint64_t v58 = *(void *)&__srca[8 * v59];
                  if (!v58)
                  {
                    if (v68 + 4 >= v64) {
                      break;
                    }
                    int64_t v59 = v68 + 4;
                    unint64_t v58 = *(void *)&__srca[8 * v68 + 32];
                    if (!v58)
                    {
                      if (v68 + 5 >= v64) {
                        break;
                      }
                      int64_t v59 = v68 + 5;
                      unint64_t v58 = *(void *)&__srca[8 * v68 + 40];
                      if (!v58)
                      {
                        int64_t v60 = v68 + 6;
                        if (v68 + 6 >= v64) {
                          break;
                        }
                        unint64_t v58 = *(void *)&__srca[8 * v60];
                        if (!v58)
                        {
                          while (1)
                          {
                            int64_t v59 = v60 + 1;
                            if (__OFADD__(v60, 1)) {
                              break;
                            }
                            if (v59 >= v64) {
                              goto LABEL_79;
                            }
                            unint64_t v58 = *(void *)&__srca[8 * v59];
                            ++v60;
                            if (v58) {
                              goto LABEL_78;
                            }
                          }
LABEL_82:
                          __break(1u);
                          goto LABEL_83;
                        }
                        int64_t v59 = v68 + 6;
                      }
                    }
                  }
                }
              }
LABEL_78:
              unint64_t v48 = (v58 - 1) & v58;
              int64_t v68 = v59;
              unint64_t v50 = __clz(__rbit64(v58)) + (v59 << 6);
            }
            uint64_t v51 = 16 * v50;
            long long v52 = (uint64_t *)(*(void *)(v22 + 48) + 16 * v50);
            uint64_t v54 = *v52;
            uint64_t v53 = v52[1];
            uint64_t v55 = 32 * v50;
            outlined init with copy of Any(*(void *)(v22 + 56) + 32 * v50, (uint64_t)v71);
            unint64_t v56 = (void *)(*(void *)(v23 + 48) + v51);
            *unint64_t v56 = v54;
            v56[1] = v53;
            outlined init with take of Any(v71, (_OWORD *)(*(void *)(v23 + 56) + v55));
            swift_bridgeObjectRetain();
          }
        }
LABEL_79:
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      outlined init with take of Any((_OWORD *)(*(void *)(v23 + 56) + 32 * v18), v71);
      specialized _NativeDictionary._delete(at:)(v18, v23);
      *uint64_t v5 = v23;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v71, 0, sizeof(v71));
    }
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v71, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  outlined init with take of Any((_OWORD *)a1, v71);
  char v8 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v70 = *v3;
  uint64_t v9 = v70;
  *uint64_t v3 = 0x8000000000000000;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v4 = v10;
    if (*(void *)(v9 + 24) < v14)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, v8);
      uint64_t v15 = v70;
      unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v17 & 1)) {
        goto LABEL_84;
      }
      unint64_t v11 = v16;
      if ((v4 & 1) == 0) {
        goto LABEL_48;
      }
LABEL_13:
      uint64_t v24 = (_OWORD *)(*(void *)(v15 + 56) + 32 * v11);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      outlined init with take of Any(v71, v24);
LABEL_49:
      *uint64_t v5 = v15;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    if (v8)
    {
      uint64_t v15 = v9;
      if (v10) {
        goto LABEL_13;
      }
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v11, a2, a3, v71, (void *)v15);
      swift_bridgeObjectRetain();
      goto LABEL_49;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v26 = static _DictionaryStorage.copy(original:)();
  uint64_t v15 = v26;
  if (!*(void *)(v9 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
  long long v27 = (void *)(v26 + 64);
  unint64_t v28 = (unint64_t)((1 << *(unsigned char *)(v15 + 32)) + 63) >> 6;
  if (v15 != v9 || (unint64_t)v27 >= v9 + 64 + 8 * v28) {
    memmove(v27, (const void *)(v9 + 64), 8 * v28);
  }
  int64_t v29 = 0;
  *(void *)(v15 + 16) = *(void *)(v9 + 16);
  uint64_t v30 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v31 = -1;
  if (v30 < 64) {
    uint64_t v31 = ~(-1 << v30);
  }
  unint64_t v32 = v31 & *(void *)(v9 + 64);
  uint64_t v61 = v9 + 64;
  int64_t v62 = (unint64_t)(v30 + 63) >> 6;
  while (1)
  {
    if (v32)
    {
      __src = (void *)((v32 - 1) & v32);
      int64_t v67 = v29;
      unint64_t v33 = __clz(__rbit64(v32)) | (v29 << 6);
      goto LABEL_25;
    }
    int64_t v39 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v39 >= v62) {
      goto LABEL_47;
    }
    unint64_t v40 = *(void *)(v61 + 8 * v39);
    int64_t v41 = v29 + 1;
    if (!v40)
    {
      int64_t v41 = v29 + 2;
      if (v29 + 2 >= v62) {
        goto LABEL_47;
      }
      unint64_t v40 = *(void *)(v61 + 8 * v41);
      if (!v40)
      {
        int64_t v41 = v29 + 3;
        if (v29 + 3 >= v62) {
          goto LABEL_47;
        }
        unint64_t v40 = *(void *)(v61 + 8 * v41);
        if (!v40)
        {
          int64_t v41 = v29 + 4;
          if (v29 + 4 >= v62) {
            goto LABEL_47;
          }
          unint64_t v40 = *(void *)(v61 + 8 * v41);
          if (!v40)
          {
            int64_t v41 = v29 + 5;
            if (v29 + 5 >= v62) {
              goto LABEL_47;
            }
            unint64_t v40 = *(void *)(v61 + 8 * v41);
            if (!v40)
            {
              int64_t v41 = v29 + 6;
              if (v29 + 6 >= v62) {
                goto LABEL_47;
              }
              unint64_t v40 = *(void *)(v61 + 8 * v41);
              if (!v40) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_46:
    __src = (void *)((v40 - 1) & v40);
    int64_t v67 = v41;
    unint64_t v33 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_25:
    uint64_t v34 = 16 * v33;
    __int16 v35 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v33);
    uint64_t v36 = v35[1];
    uint64_t v63 = *v35;
    uint64_t v37 = 32 * v33;
    outlined init with copy of Any(*(void *)(v9 + 56) + 32 * v33, (uint64_t)v69);
    long long v38 = (void *)(*(void *)(v15 + 48) + v34);
    *long long v38 = v63;
    v38[1] = v36;
    outlined init with take of Any(v69, (_OWORD *)(*(void *)(v15 + 56) + v37));
    swift_bridgeObjectRetain();
    unint64_t v32 = (unint64_t)__src;
    int64_t v29 = v67;
  }
  uint64_t v42 = v29 + 7;
  if (v29 + 7 >= v62) {
    goto LABEL_47;
  }
  unint64_t v40 = *(void *)(v61 + 8 * v42);
  if (v40)
  {
    int64_t v41 = v29 + 7;
    goto LABEL_46;
  }
  while (1)
  {
    int64_t v41 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      break;
    }
    if (v41 >= v62) {
      goto LABEL_47;
    }
    unint64_t v40 = *(void *)(v61 + 8 * v41);
    ++v42;
    if (v40) {
      goto LABEL_46;
    }
  }
LABEL_83:
  __break(1u);
LABEL_84:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  char v4;
  uint64_t *v5;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  char v20;
  unint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  int64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t vars8;

  uint64_t v5 = v3;
  if (!a2)
  {
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v20 & 1) == 0) {
      return result;
    }
    uint64_t v21 = result;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v24 = v23;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
      unint64_t v45 = static _DictionaryStorage.copy(original:)();
      uint64_t v24 = v45;
      if (*(void *)(v23 + 16))
      {
        uint64_t v46 = (void *)(v45 + 64);
        uint64_t v47 = v23 + 64;
        unint64_t v48 = (unint64_t)((1 << *(unsigned char *)(v24 + 32)) + 63) >> 6;
        if (v24 != v23 || (unint64_t)v46 >= v47 + 8 * v48) {
          memmove(v46, (const void *)(v23 + 64), 8 * v48);
        }
        unint64_t v49 = 0;
        *(void *)(v24 + 16) = *(void *)(v23 + 16);
        unint64_t v50 = 1 << *(unsigned char *)(v23 + 32);
        uint64_t v51 = -1;
        if (v50 < 64) {
          uint64_t v51 = ~(-1 << v50);
        }
        long long v52 = v51 & *(void *)(v23 + 64);
        uint64_t v53 = (unint64_t)(v50 + 63) >> 6;
        while (1)
        {
          if (v52)
          {
            uint64_t v54 = __clz(__rbit64(v52));
            v52 &= v52 - 1;
            uint64_t v55 = v54 | (v49 << 6);
          }
          else
          {
            uint64_t v63 = v49 + 1;
            if (__OFADD__(v49, 1))
            {
LABEL_81:
              __break(1u);
              goto LABEL_82;
            }
            if (v63 >= v53) {
              break;
            }
            int64_t v64 = *(void *)(v47 + 8 * v63);
            ++v49;
            if (!v64)
            {
              unint64_t v49 = v63 + 1;
              if (v63 + 1 >= v53) {
                break;
              }
              int64_t v64 = *(void *)(v47 + 8 * v49);
              if (!v64)
              {
                unint64_t v49 = v63 + 2;
                if (v63 + 2 >= v53) {
                  break;
                }
                int64_t v64 = *(void *)(v47 + 8 * v49);
                if (!v64)
                {
                  unint64_t v49 = v63 + 3;
                  if (v63 + 3 >= v53) {
                    break;
                  }
                  int64_t v64 = *(void *)(v47 + 8 * v49);
                  if (!v64)
                  {
                    unint64_t v49 = v63 + 4;
                    if (v63 + 4 >= v53) {
                      break;
                    }
                    int64_t v64 = *(void *)(v47 + 8 * v49);
                    if (!v64)
                    {
                      uint64_t v65 = v63 + 5;
                      if (v65 >= v53) {
                        break;
                      }
                      int64_t v64 = *(void *)(v47 + 8 * v65);
                      if (!v64)
                      {
                        while (1)
                        {
                          unint64_t v49 = v65 + 1;
                          if (__OFADD__(v65, 1)) {
                            break;
                          }
                          if (v49 >= v53) {
                            goto LABEL_79;
                          }
                          int64_t v64 = *(void *)(v47 + 8 * v49);
                          ++v65;
                          if (v64) {
                            goto LABEL_78;
                          }
                        }
LABEL_82:
                        __break(1u);
                        goto LABEL_83;
                      }
                      unint64_t v49 = v65;
                    }
                  }
                }
              }
            }
LABEL_78:
            long long v52 = (v64 - 1) & v64;
            uint64_t v55 = __clz(__rbit64(v64)) + (v49 << 6);
          }
          unint64_t v56 = 8 * v55;
          int64_t v57 = *(void *)(*(void *)(v23 + 48) + 8 * v55);
          unint64_t v58 = 16 * v55;
          int64_t v59 = (uint64_t *)(*(void *)(v23 + 56) + v58);
          uint64_t v61 = *v59;
          int64_t v60 = v59[1];
          *(void *)(*(void *)(v24 + 48) + v56) = v57;
          int64_t v62 = (void *)(*(void *)(v24 + 56) + v58);
          *int64_t v62 = v61;
          v62[1] = v60;
          swift_bridgeObjectRetain();
        }
      }
LABEL_79:
      swift_bridgeObjectRelease();
    }
    specialized _NativeDictionary._delete(at:)(v21, v24);
    *uint64_t v5 = v24;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v9 = swift_isUniquelyReferenced_nonNull_native();
  int64_t v68 = *v3;
  char v10 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  uint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  BOOL v13 = *(void *)(v10 + 16);
  uint64_t v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    char v4 = v11;
    if (*(void *)(v10 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, v9);
      unint64_t v16 = v68;
      char v17 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
      if ((v4 & 1) != (v18 & 1)) {
        goto LABEL_84;
      }
      uint64_t v12 = v17;
      if ((v4 & 1) == 0) {
        goto LABEL_48;
      }
LABEL_15:
      long long v25 = (uint64_t *)(*(void *)(v16 + 56) + 16 * v12);
      swift_bridgeObjectRelease();
      *long long v25 = a1;
      v25[1] = a2;
LABEL_49:
      *uint64_t v5 = v16;
      return swift_bridgeObjectRelease();
    }
    if (v9)
    {
      unint64_t v16 = v10;
      if (v11) {
        goto LABEL_15;
      }
LABEL_48:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a3, a1, a2, (void *)v16);
      goto LABEL_49;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
  uint64_t v26 = static _DictionaryStorage.copy(original:)();
  unint64_t v16 = v26;
  if (!*(void *)(v10 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
  long long v27 = (void *)(v26 + 64);
  unint64_t v28 = (unint64_t)((1 << *(unsigned char *)(v16 + 32)) + 63) >> 6;
  if (v16 != v10 || (unint64_t)v27 >= v10 + 64 + 8 * v28) {
    memmove(v27, (const void *)(v10 + 64), 8 * v28);
  }
  uint64_t v66 = v10 + 64;
  int64_t v29 = 0;
  *(void *)(v16 + 16) = *(void *)(v10 + 16);
  uint64_t v30 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v31 = -1;
  if (v30 < 64) {
    uint64_t v31 = ~(-1 << v30);
  }
  unint64_t v32 = v31 & *(void *)(v10 + 64);
  int64_t v67 = (unint64_t)(v30 + 63) >> 6;
  while (1)
  {
    if (v32)
    {
      unint64_t v33 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      uint64_t v34 = v33 | (v29 << 6);
      goto LABEL_25;
    }
    uint64_t v42 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v42 >= v67) {
      goto LABEL_47;
    }
    uint64_t v43 = *(void *)(v66 + 8 * v42);
    ++v29;
    if (!v43)
    {
      int64_t v29 = v42 + 1;
      if (v42 + 1 >= v67) {
        goto LABEL_47;
      }
      uint64_t v43 = *(void *)(v66 + 8 * v29);
      if (!v43)
      {
        int64_t v29 = v42 + 2;
        if (v42 + 2 >= v67) {
          goto LABEL_47;
        }
        uint64_t v43 = *(void *)(v66 + 8 * v29);
        if (!v43)
        {
          int64_t v29 = v42 + 3;
          if (v42 + 3 >= v67) {
            goto LABEL_47;
          }
          uint64_t v43 = *(void *)(v66 + 8 * v29);
          if (!v43)
          {
            int64_t v29 = v42 + 4;
            if (v42 + 4 >= v67) {
              goto LABEL_47;
            }
            uint64_t v43 = *(void *)(v66 + 8 * v29);
            if (!v43)
            {
              int64_t v29 = v42 + 5;
              if (v42 + 5 >= v67) {
                goto LABEL_47;
              }
              uint64_t v43 = *(void *)(v66 + 8 * v29);
              if (!v43) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_46:
    unint64_t v32 = (v43 - 1) & v43;
    uint64_t v34 = __clz(__rbit64(v43)) + (v29 << 6);
LABEL_25:
    __int16 v35 = 8 * v34;
    uint64_t v36 = *(void *)(*(void *)(v10 + 48) + 8 * v34);
    uint64_t v37 = 16 * v34;
    long long v38 = (uint64_t *)(*(void *)(v10 + 56) + v37);
    unint64_t v40 = *v38;
    int64_t v39 = v38[1];
    *(void *)(*(void *)(v16 + 48) + v35) = v36;
    int64_t v41 = (void *)(*(void *)(v16 + 56) + v37);
    unsigned char *v41 = v40;
    v41[1] = v39;
    swift_bridgeObjectRetain();
  }
  long long v44 = v42 + 6;
  if (v44 >= v67) {
    goto LABEL_47;
  }
  uint64_t v43 = *(void *)(v66 + 8 * v44);
  if (v43)
  {
    int64_t v29 = v44;
    goto LABEL_46;
  }
  while (1)
  {
    int64_t v29 = v44 + 1;
    if (__OFADD__(v44, 1)) {
      break;
    }
    if (v29 >= v67) {
      goto LABEL_47;
    }
    uint64_t v43 = *(void *)(v66 + 8 * v29);
    ++v44;
    if (v43) {
      goto LABEL_46;
    }
  }
LABEL_83:
  __break(1u);
LABEL_84:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  id v6 = (void *)(a5[6] + 16 * a1);
  *id v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t __PlistEncoderXML.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 80);
  unint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 104);
  unint64_t v4 = *(void *)(v0 + 112);
  char v5 = *(unsigned char *)(v0 + 96);
  char v6 = *(unsigned char *)(v0 + 120);
  outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
  outlined consume of _XMLPlistEncodingFormat.Reference(v1, v2, v5);
  outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, v6);

  return swift_deallocClassInstance();
}

char **IndexSet.formIndex(before:)(char **result)
{
  unint64_t v2 = result;
  uint64_t v3 = *result;
  unint64_t v4 = result[1];
  if (*result != v4) {
    goto LABEL_11;
  }
  char v5 = result[3];
  if (!v5) {
    return result;
  }
  char v6 = v5 - 1;
  if (__OFSUB__(v5, 1))
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v7 = *v1;
  result[3] = v6;
  char v8 = *(unsigned char *)(v7 + 24);
  uint64_t result = (char **)objc_msgSend(*(id *)(v7 + 16), sel_rangeAtIndex_);
  uint64_t v3 = (char *)result + v9;
  LOBYTE(v4) = __OFADD__(result, v9);
  if ((v8 & 1) == 0) {
    goto LABEL_14;
  }
  if (v4)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if ((uint64_t)v3 < (uint64_t)result)
  {
    __break(1u);
LABEL_11:
    BOOL v10 = __OFSUB__(v3--, 1);
    if (!v10) {
      goto LABEL_17;
    }
    __break(1u);
LABEL_14:
    if (v4)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    if ((uint64_t)v3 < (uint64_t)result)
    {
LABEL_23:
      __break(1u);
      return result;
    }
  }
  v2[1] = (char *)result;
  v2[2] = v3;
  BOOL v10 = __OFSUB__(v3--, 1);
  if (v10)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_17:
  *unint64_t v2 = v3;
  return result;
}

uint64_t @objc static NSTimeZone._setDefaultTimeZone(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    type metadata accessor for _NSSwiftTimeZone();
    if (swift_dynamicCastClass())
    {
      swift_unknownObjectRetain();
    }
    else
    {
      type metadata accessor for _TimeZoneBridged();
      *(void *)(swift_allocObject() + 16) = a3;
      lazy protocol witness table accessor for type _LocaleBridged and conformance _LocaleBridged(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (void (*)(uint64_t))type metadata accessor for _TimeZoneBridged);
      id v4 = a3;
    }
  }
  uint64_t v5 = one-time initialization token for cache;
  swift_unknownObjectRetain();
  if (v5 != -1) {
    swift_once();
  }
  TimeZoneCache.setDefault(_:)();
  return swift_unknownObjectRelease_n();
}

uint64_t TimeZoneCache.setDefault(_:)()
{
  uint64_t v1 = *v0;
  swift_retain();
  os_unfair_lock_lock(v1 + 36);
  partial apply for closure #1 in TimeZoneCache.setDefault(_:)(&v11);
  os_unfair_lock_unlock(v1 + 36);
  swift_release();
  __n128 v2 = v11;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v3 = static CalendarCache.cache + 16;
  id v4 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in CalendarCache.reset()(v3);
  os_unfair_lock_unlock(v4);
  uint64_t result = swift_release_n();
  if (v2.n128_u64[0])
  {
    CFStringRef v6 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    uint64_t ObjectType = swift_getObjectType();
    char v8 = *(uint64_t (**)(uint64_t, unint64_t))(v2.n128_u64[1] + 120);
    swift_unknownObjectRetain();
    id v9 = (id) v8(ObjectType, v2.n128_u64[1]);
    BOOL v10 = CFNotificationCenterGetLocalCenter();
    swift_unknownObjectRetain();
    CFNotificationCenterPostNotification(v10, v6, v9, 0, 1u);

    swift_unknownObjectRelease_n();
    return swift_unknownObjectRelease_n();
  }
  return result;
}

double partial apply for closure #1 in TimeZoneCache.setDefault(_:)@<D0>(__n128 *a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  *(void *)&double result = TimeZoneCache.State.setDefaultTimeZone(_:)((uint64_t *)&v3, a1).n128_u64[0];
  return result;
}

__n128 TimeZoneCache.State.setDefaultTimeZone(_:)@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  TimeZoneCache.State.check()();
  __n128 v12 = *(__n128 *)(v2 + 24);
  *(void *)(v2 + 24) = v4;
  *(void *)(v2 + 32) = v5;
  if (v4)
  {
    CFStringRef v6 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
    uint64_t v7 = (char *)objc_allocWithZone(v6);
    char v8 = &v7[OBJC_IVAR____NSSwiftTimeZone_timeZone];
    *(void *)char v8 = v4;
    *((void *)v8 + 1) = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
    uint64_t v9 = swift_allocObject();
    *(_DWORD *)(v9 + 32) = 0;
    *(_OWORD *)(v9 + 16) = xmmword_18218FDB0;
    *(void *)&v7[OBJC_IVAR____NSSwiftTimeZone_lock] = v9;
    v13.receiver = v7;
    v13.super_class = v6;
    swift_unknownObjectRetain_n();
    id v10 = objc_msgSendSuper2(&v13, sel_init);

    *(void *)(v2 + 96) = v10;
  }
  else
  {

    *(void *)(v2 + 96) = 0;
  }
  __n128 result = v12;
  *a2 = v12;
  return result;
}

id @objc static NSTimeZone._resetSystemTimeZone()()
{
  id v0 = specialized static NSTimeZone._resetSystemTimeZone()();

  return v0;
}

id specialized static NSTimeZone._resetSystemTimeZone()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v0 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.reset()(v0, &v10);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  long long v8 = v10;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static CalendarCache.cache + 16;
  long long v3 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in CalendarCache.reset()(v2);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  if (!(void)v8) {
    return 0;
  }
  uint64_t v4 = (objc_class *)type metadata accessor for _NSSwiftTimeZone();
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  *(_OWORD *)&v5[OBJC_IVAR____NSSwiftTimeZone_timeZone] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftTimeZone.State>._Buffer);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 32) = 0;
  *(_OWORD *)(v6 + 16) = xmmword_18218FDB0;
  *(void *)&v5[OBJC_IVAR____NSSwiftTimeZone_lock] = v6;
  v9.receiver = v5;
  v9.super_class = v4;
  return objc_msgSendSuper2(&v9, sel_init);
}

uint64_t closure #1 in CalendarCache.reset()(uint64_t result)
{
  *(unsigned char *)(result + 40) = 1;
  return result;
}

void closure #1 in TimeZoneCache.reset()(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  a1[7] = -1;
  swift_unknownObjectRetain();
  TimeZoneCache.State.check()();
  *a2 = v3;
  a2[1] = v4;
}

uint64_t type metadata completion function for Duration.TimeFormatStyle.Pattern.Fields()
{
  uint64_t result = type metadata accessor for FloatingPointRoundingRule();
  if (v1 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    uint64_t v5 = &v3;
    swift_getTupleTypeLayout2();
    uint64_t v6 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t gsDefaultStorageManager()
{
  if (qword_1EB1EDE58 != -1) {
    dispatch_once(&qword_1EB1EDE58, &__block_literal_global_277);
  }
  id v0 = (void *)qword_1EB1EDE40;

  return [v0 manager];
}

__n128 Locale.Components.languageComponents.setter(long long *a1)
{
  long long v12 = a1[1];
  long long v13 = *a1;
  long long v10 = a1[3];
  long long v11 = a1[2];
  __n128 v9 = (__n128)a1[4];
  uint64_t v2 = *((void *)a1 + 10);
  uint64_t v8 = *((void *)a1 + 11);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 72);
  outlined consume of Locale.LanguageCode?(*(void *)v1, *(void *)(v1 + 8));
  outlined consume of Locale.LanguageCode?(v3, v4);
  outlined consume of Locale.LanguageCode?(v5, v6);
  *(_OWORD *)uint64_t v1 = v13;
  *(_OWORD *)(v1 + 16) = v12;
  *(_OWORD *)(v1 + 32) = v11;
  *(_OWORD *)(v1 + 48) = v10;
  __n128 result = v9;
  *(__n128 *)(v1 + 64) = v9;
  *(void *)(v1 + 80) = v2;
  *(void *)(v1 + 88) = v8;
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(uint64_t a1)
{
  return partial apply for specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:));
}

{
  return partial apply for specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:));
}

uint64_t partial apply for specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)(char *a1, uint64_t a2, unint64_t a3, const char *a4, uint64_t a5, unsigned __int8 *a6)
{
  if (a1) {
    return specialized static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(a4, a1, *a6 | ((unint64_t)*((unsigned int *)a6 + 1) << 32), *((void **)a6 + 1));
  }
  swift_bridgeObjectRetain();
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))4, a2, a3, 0, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v9, 0, 0);
  return swift_willThrow();
}

uint64_t specialized static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(const char *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if (isStackAllocationSafe)
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t result = specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(&v12, 1026, a2, a1, a3 & 0xFFFFFFFF00000001, a4);
    if (v4) {
      return swift_willThrow();
    }
  }
  else
  {
    long long v11 = (char *)swift_slowAlloc();
    specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(v11, 1026, a2, a1, a3 & 0xFFFFFFFF00000001, a4);
    return MEMORY[0x185309510](v11, -1, -1);
  }
  return result;
}

uint64_t specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)(char *a1, int a2, char *__source, const char *a4, unint64_t a5, void *a6)
{
  id v315 = a6;
  unint64_t v306 = a5;
  uint64_t v320 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    goto LABEL_353;
  }
  uint64_t v7 = v6;
  uint64_t v9 = a1;
  size_t v10 = strlcpy(a1, __source, 0x402uLL);
  size_t v313 = 1026 - v10;
  size_t v314 = strlen(a4);
  if (__OFSUB__(1026, v10))
  {
    __break(1u);
LABEL_333:
    __break(1u);
LABEL_334:
    __break(1u);
LABEL_335:
    __break(1u);
LABEL_336:
    __break(1u);
LABEL_337:
    __break(1u);
LABEL_338:
    __break(1u);
LABEL_339:
    __break(1u);
LABEL_340:
    __break(1u);
LABEL_341:
    __break(1u);
LABEL_342:
    __break(1u);
LABEL_343:
    __break(1u);
LABEL_344:
    __break(1u);
LABEL_345:
    __break(1u);
LABEL_346:
    __break(1u);
LABEL_347:
    __break(1u);
LABEL_348:
    __break(1u);
LABEL_349:
    __break(1u);
LABEL_350:
    __break(1u);
LABEL_351:
    __break(1u);
LABEL_352:
    __break(1u);
LABEL_353:
    __break(1u);
  }
  type metadata accessor for _FTSSequence.Iterator();
  swift_initStackObject();
  uint64_t v11 = _FTSSequence.Iterator.init(_:_:)(a4, 20);
  uint64_t v12 = _FTSSequence.Iterator.next()();
  if (v15 == 0xFF) {
    return swift_release();
  }
  unint64_t v16 = (FTSENT *)v12;
  uint64_t v17 = v13;
  unint64_t v18 = v14;
  unsigned __int8 v19 = v15;
  unint64_t v310 = HIDWORD(v306);
  v312 = (char *)&v9[v10];
  v305 = @"NSPOSIXErrorDomain";
  if (v306) {
    int v20 = 17694735;
  }
  else {
    int v20 = 917519;
  }
  int v303 = v20;
  uint64_t v298 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v309 = v11;
  v308 = v9;
  while (1)
  {
    if (v19)
    {
      uint64_t v278 = 263;
      switch((int)v16)
      {
        case 1:
        case 13:
          uint64_t v278 = 257;
          goto LABEL_319;
        case 2:
          uint64_t v278 = 260;
          goto LABEL_319;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_316;
        case 27:
          goto LABEL_319;
        default:
          if (v16 == 63)
          {
            uint64_t v278 = 258;
          }
          else
          {
            if (v16 == 102)
            {
              v279 = 0;
              uint64_t v280 = 256;
              goto LABEL_328;
            }
LABEL_316:
            uint64_t v278 = 256;
          }
LABEL_319:
          id v315 = (id)v278;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_367;
          }
          v281 = v305;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v305);
          uint64_t v282 = (int)POSIXErrorCode.rawValue.getter();
          id v283 = objc_allocWithZone((Class)NSError);
          uint64_t v284 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v285 = objc_msgSend(v283, sel_initWithDomain_code_userInfo_, v284, v282, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          size_t v314 = (size_t)v285;
          id v286 = objc_msgSend(v285, sel_domain);
          id v287 = static String._unconditionallyBridgeFromObjectiveC(_:)(v286);
          uint64_t v289 = v288;

          if (v287 == static String._unconditionallyBridgeFromObjectiveC(_:)(v281) && v289 == v290) {
            goto LABEL_326;
          }
          char v292 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v292 & 1) == 0)
          {
            __break(1u);
LABEL_326:
            swift_bridgeObjectRelease_n();
          }
          v279 = (void *)v314;
          uint64_t v280 = (uint64_t)v315;
LABEL_328:
          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v280, v17, v18, v279, 0, 0, 0, 0, (void *(*)(void *__return_ptr, void *, uint64_t))&v317, 0, 0);
          swift_willThrow();
          swift_release();
          uint64_t result = outlined consume of _FTSSequence.Element?((uint64_t)v16, v17, v18, v19);
          break;
      }
      return result;
    }
    fts_path = v16->fts_path;
    if (!fts_path) {
      goto LABEL_350;
    }
    strlcpy(v312, &fts_path[v314], v313);
    if (v16->fts_info != 6) {
      break;
    }
    if (v16->fts_level) {
      int v34 = 0;
    }
    else {
      int v34 = v310;
    }
LABEL_20:
    specialized static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:)((uint64_t)fts_path, (uint64_t)v9, (uint64_t)v315, v34);
    if (v7) {
      return swift_release();
    }
LABEL_13:
    unint64_t v16 = (FTSENT *)_FTSSequence.Iterator.next()();
    uint64_t v17 = v30;
    unint64_t v18 = v31;
    unsigned __int8 v19 = v32;
    if (v32 == 0xFF) {
      return swift_release();
    }
  }
  uint64_t v311 = v7;
  id v35 = v315;
  uint64_t v36 = String.init(cString:)();
  unint64_t v38 = v37;
  uint64_t v39 = String.init(cString:)();
  LOBYTE(v36) = NSFileManager._shouldCopyItemAtPath(_:to:)(v36, v38, v39, v40, (SEL *)&selRef_fileManager_shouldCopyItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldCopyItemAtPath_toPath_);
  id v307 = v35;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v36 & 1) == 0)
  {
    uint64_t v7 = v311;
    if (v16->fts_info == 1)
    {
      uint64_t v9 = v308;
      if (!*(unsigned char *)(v309 + 40))
      {
        fts_set(*(FTS **)(v309 + 16), v16, 4);
        uint64_t v51 = _FTSSequence.Iterator.next()();
        outlined consume of _FTSSequence.Element?(v51, v52, v53, v54);
      }
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v16->fts_level) {
    int v34 = 0;
  }
  else {
    int v34 = v310;
  }
  LODWORD(v41) = v309;
  uint64_t v7 = v311;
  uint64_t v9 = v308;
  switch(v16->fts_info)
  {
    case 1u:
      if (v34 < 0) {
        goto LABEL_359;
      }
      if (!copyfile(fts_path, v308, 0, v34 | 0xE0008)) {
        goto LABEL_13;
      }
      uint64_t v299 = v17;
      v300 = (uint64_t (*)(void))v18;
      int v94 = MEMORY[0x185301870]();
      uint64_t v95 = String.init(cString:)();
      unint64_t v97 = v96;
      uint64_t v99 = String.init(cString:)();
      LODWORD(v301) = v94;
      v302 = (unint64_t *)v97;
      v304 = (uint64_t (*)(void))v98;
      if (v94 != 63)
      {
        swift_bridgeObjectRetain();
        uint64_t v130 = v95;
        unint64_t v131 = v97;
        int v132 = v301;
        uint64_t v101 = v95;
        goto LABEL_280;
      }
      uint64_t v100 = (uint64_t (*)(void))v98;
      uint64_t v101 = v95;
      if ((v98 & 0x2000000000000000) != 0) {
        uint64_t v102 = HIBYTE(v98) & 0xF;
      }
      else {
        uint64_t v102 = v99 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v103 = v102;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v296 = v103;
      if (!v103)
      {
LABEL_84:
        uint64_t v107 = v99;
        uint64_t v73 = (uint64_t)v100;
        goto LABEL_237;
      }
      unint64_t v295 = 4 * v103;
      while (1)
      {
        unint64_t v104 = String.index(before:)();
        id v317 = (id)String.subscript.getter();
        unint64_t v318 = v105;
        char v106 = closure #1 in String._lastPathComponent.getter(&v317);
        swift_bridgeObjectRelease();
        if (v106) {
          break;
        }
        uint64_t v100 = v304;
        if (v104 < 0x4000) {
          goto LABEL_84;
        }
      }
      if (!(v104 >> 14))
      {
        if (String.count.getter() == 1) {
          goto LABEL_192;
        }
        if (v295 < (unint64_t)String.index(after:)() >> 14) {
          goto LABEL_352;
        }
        goto LABEL_233;
      }
      if ((String.index(before:)() ^ v104) >= 0x4000)
      {
        if (v295 < (unint64_t)String.index(after:)() >> 14) {
          goto LABEL_351;
        }
LABEL_233:
        uint64_t v228 = String.subscript.getter();
        uint64_t v107 = MEMORY[0x185302390](v228);
        uint64_t v73 = v229;
        swift_bridgeObjectRelease();
        goto LABEL_236;
      }
      unint64_t v185 = String.subscript.getter();
      unint64_t v187 = specialized BidirectionalCollection.lastIndex(where:)(v185, v186);
      char v189 = v188;
      swift_bridgeObjectRelease();
      if (v189)
      {
LABEL_192:
        swift_bridgeObjectRelease();
        uint64_t v73 = 0xE100000000000000;
        uint64_t v107 = 47;
        goto LABEL_237;
      }
      unint64_t v190 = String.subscript.getter();
      uint64_t v311 = specialized BidirectionalCollection.lastIndex(where:)(v190, v191);
      Swift::Int32 v55 = v192;
      swift_bridgeObjectRelease();
      if (v55)
      {
        swift_bridgeObjectRetain();
        uint64_t v230 = specialized Collection.subscript.getter();
        uint64_t v311 = v231;
        uint64_t v233 = v232;
        uint64_t v235 = v234;
        swift_bridgeObjectRelease();
        uint64_t v107 = MEMORY[0x185302390](v230, v311, v233, v235);
        uint64_t v73 = v236;
      }
      else
      {
        if (v187 >> 14 < (unint64_t)String.index(after:)() >> 14)
        {
          __break(1u);
LABEL_355:
          id v317 = 0;
          unint64_t v318 = 0xE000000000000000;
          _StringGuts.grow(_:)(22);
          swift_bridgeObjectRelease();
          id v317 = (id)0xD000000000000014;
          unint64_t v318 = 0x80000001823A9780;
          int v316 = v55;
          goto LABEL_366;
        }
        swift_bridgeObjectRetain();
        uint64_t v193 = specialized Collection.subscript.getter();
        uint64_t v195 = v194;
        uint64_t v197 = v196;
        uint64_t v199 = v198;
        swift_bridgeObjectRelease();
        uint64_t v107 = MEMORY[0x185302390](v193, v195, v197, v199);
        uint64_t v73 = v200;
      }
      swift_bridgeObjectRelease();
LABEL_236:
      swift_bridgeObjectRelease();
LABEL_237:
      if ((v73 & 0x1000000000000000) != 0)
      {
        Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
      }
      else if ((v73 & 0x2000000000000000) != 0)
      {
        Swift::Int isStackAllocationSafe = HIBYTE(v73) & 0xF;
      }
      else
      {
        Swift::Int isStackAllocationSafe = v107 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v238 = 3 * isStackAllocationSafe;
      if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63) {
        goto LABEL_341;
      }
      if (v238 < -1) {
        goto LABEL_348;
      }
      uint64_t v239 = v238 + 1;
      if (v238 < 1024
        || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        uint64_t v311 = (uint64_t)&v295;
        MEMORY[0x1F4188790](isStackAllocationSafe);
        v241 = (char *)&v295 - v240;
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v241, v239, 1, v107, v73);
        char v243 = v242;
        swift_bridgeObjectRelease();
        if (v243)
        {
          unint64_t v131 = (unint64_t)v304;
          if (v7) {
            goto LABEL_364;
          }
          size_t v245 = 0;
        }
        else
        {
          size_t v244 = strnlen(v241, 0x100uLL);
          unint64_t v131 = (unint64_t)v304;
          if (v7) {
            goto LABEL_364;
          }
          size_t v245 = v244;
        }
      }
      else
      {
        uint64_t v116 = (const char *)swift_slowAlloc();
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v116, v239, 1, v107, v73);
        char v247 = v246;
        swift_bridgeObjectRelease();
        if (v247)
        {
          unint64_t v131 = (unint64_t)v304;
          if (v7) {
            goto LABEL_357;
          }
          size_t v245 = 0;
        }
        else
        {
          unint64_t v131 = (unint64_t)v304;
          if (v116) {
            size_t v245 = strnlen(v116, 0x100uLL);
          }
          else {
            size_t v245 = 0;
          }
          if (v7) {
            goto LABEL_357;
          }
        }
        MEMORY[0x185309510](v116, -1, -1);
      }
      uint64_t v248 = swift_bridgeObjectRelease();
      if ((v131 & 0x1000000000000000) != 0)
      {
        uint64_t v248 = String.UTF8View._foreignCount()();
        uint64_t v296 = v248;
      }
      uint64_t v249 = 3 * v296;
      if ((unsigned __int128)(v296 * (__int128)3) >> 64 != (3 * v296) >> 63) {
        goto LABEL_343;
      }
      if (v249 < -1) {
        goto LABEL_349;
      }
      uint64_t v311 = v245;
      uint64_t v250 = v249 + 1;
      if (v249 < 1024 || (uint64_t v248 = swift_stdlib_isStackAllocationSafe(), (v248 & 1) != 0))
      {
        uint64_t v296 = (uint64_t)&v295;
        MEMORY[0x1F4188790](v248);
        v252 = (char *)&v295 - v251;
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v252, v250, 1, v99, v131);
        char v254 = v253;
        swift_bridgeObjectRelease();
        if (v254) {
          int64_t v255 = 0;
        }
        else {
          int64_t v255 = strnlen(v252, 0x401uLL);
        }
        int v132 = v301;
        unint64_t v131 = (unint64_t)v304;
      }
      else
      {
        v256 = (const char *)swift_slowAlloc();
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v256, v250, 1, v99, v131);
        char v258 = v257;
        swift_bridgeObjectRelease();
        if (v258)
        {
          int v132 = v301;
          int64_t v255 = 0;
        }
        else
        {
          if (v256) {
            int64_t v255 = strnlen(v256, 0x401uLL);
          }
          else {
            int64_t v255 = 0;
          }
          int v132 = v301;
        }
        MEMORY[0x185309510](v256, -1, -1);
      }
      v259 = v302;
      swift_bridgeObjectRelease();
      if (v311 <= 255)
      {
        if (v255 < 1025)
        {
          swift_bridgeObjectRelease();
          uint64_t v130 = v101;
          unint64_t v97 = (unint64_t)v302;
          unint64_t v131 = (unint64_t)v302;
        }
        else
        {
          unint64_t v97 = (unint64_t)v302;
          swift_bridgeObjectRelease();
          uint64_t v130 = v99;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v130 = v99;
        unint64_t v97 = (unint64_t)v259;
      }
LABEL_280:
      uint64_t v297 = v101;
      uint64_t v311 = v131;
      unint64_t v301 = v130;
      switch(v132)
      {
        case 13:
          goto LABEL_283;
        case 2:
          uint64_t v260 = 4;
          goto LABEL_287;
        case 1:
LABEL_283:
          uint64_t v260 = 513;
          goto LABEL_287;
        case 63:
          uint64_t v260 = 514;
          goto LABEL_287;
      }
      if (v132 <= 29)
      {
        if (v132 != 17)
        {
          uint64_t v260 = 640;
          if (v132 == 28) {
            goto LABEL_287;
          }
          goto LABEL_302;
        }
        uint64_t v260 = 516;
      }
      else
      {
        if (v132 == 102)
        {
          uint64_t v271 = v99;
          id v264 = 0;
          uint64_t v272 = 512;
          goto LABEL_293;
        }
        uint64_t v260 = 640;
        if (v132 != 69)
        {
          if (v132 == 30)
          {
            uint64_t v260 = 642;
            goto LABEL_287;
          }
LABEL_302:
          uint64_t v260 = 512;
        }
      }
LABEL_287:
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
      {
        id v317 = 0;
        unint64_t v318 = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        id v317 = (id)0xD000000000000014;
        unint64_t v318 = 0x80000001823A9780;
        LODWORD(v319) = v132;
        goto LABEL_366;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)(v305);
      uint64_t v261 = (int)POSIXErrorCode.rawValue.getter();
      id v262 = objc_allocWithZone((Class)NSError);
      uint64_t v263 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v264 = objc_msgSend(v262, sel_initWithDomain_code_userInfo_, v263, v261, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v265 = objc_msgSend(v264, sel_domain);
      id v266 = static String._unconditionallyBridgeFromObjectiveC(_:)(v265);
      uint64_t v268 = v267;

      if (v266 == static String._unconditionallyBridgeFromObjectiveC(_:)(v305) && v268 == v269)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v270 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v270 & 1) == 0) {
          goto LABEL_345;
        }
      }
      uint64_t v271 = v99;
      unint64_t v97 = (unint64_t)v302;
      uint64_t v130 = v301;
      uint64_t v272 = v260;
      uint64_t v101 = v297;
LABEL_293:
      swift_bridgeObjectRetain();
      v273 = v304;
      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v272, v130, v311, v264, 2037411651, 0xE400000000000000, v101, v97, (void *(*)(void *__return_ptr, void *, uint64_t))&v317, v271, (uint64_t)v273);
      id v274 = v317;
      unsigned __int8 v275 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v274, v101, v97, v271, (unint64_t)v273, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_);

      uint64_t v276 = (uint64_t)v300;
      if (v275)
      {

        outlined consume of _FTSSequence.Element?((uint64_t)v16, v299, v276, v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_12:
        uint64_t v9 = v308;
        goto LABEL_13;
      }
      swift_willThrow();
      swift_release();
      outlined consume of _FTSSequence.Element?((uint64_t)v16, v299, v276, v19);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 2u:
    case 5u:
    case 9u:
    case 0xBu:
      goto LABEL_13;
    case 3u:
    case 8u:
      if ((v306 & 1) == 0)
      {
        if (!link(fts_path, v308)) {
          goto LABEL_13;
        }
        Swift::Int32 v55 = MEMORY[0x185301870]();
        uint64_t v56 = String.init(cString:)();
        unint64_t v16 = v57;
        unint64_t v58 = (uint64_t (*)(void))String.init(cString:)();
        unint64_t v60 = v59;
        swift_bridgeObjectRetain();
        if (v55 == 63)
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          unint64_t Path = String._lastPathComponent.getter((uint64_t)v58, v60);
          unint64_t v63 = v62;
          swift_bridgeObjectRelease();
          int64_t v64 = specialized String.withFileSystemRepresentation<A>(_:)(Path, v63);
          swift_bridgeObjectRelease();
          int64_t v65 = specialized String.withFileSystemRepresentation<A>(_:)((uint64_t)v58, v60);
          swift_bridgeObjectRelease();
          BOOL v67 = v64 > 255 || v65 > 1024;
          BOOL v68 = !v67;
          if (v67) {
            char v69 = v58;
          }
          else {
            char v69 = (uint64_t (*)(void))v56;
          }
          unint64_t v301 = (unint64_t)v69;
          if (v68) {
            uint64_t v70 = (unint64_t *)v16;
          }
          else {
            uint64_t v70 = (unint64_t *)v60;
          }
          v302 = v70;
          swift_bridgeObjectRelease();
          CocoaError.Code.init(fileErrno:reading:)(63, 0);
          long long v71 = v319;
LABEL_105:
          v300 = v71;
          v304 = v58;
          uint64_t v311 = v56;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_355;
          }
          int64_t v117 = v305;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v305);
          uint64_t v118 = (int)POSIXErrorCode.rawValue.getter();
          id v119 = objc_allocWithZone((Class)NSError);
          uint64_t v120 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v121 = objc_msgSend(v119, sel_initWithDomain_code_userInfo_, v120, v118, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v122 = objc_msgSend(v121, sel_domain);
          id v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
          uint64_t v125 = v124;

          if (v123 != static String._unconditionallyBridgeFromObjectiveC(_:)(v117) || v125 != v126)
          {
            char v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v127 & 1) == 0) {
              goto LABEL_346;
            }
            goto LABEL_150;
          }
LABEL_148:
          swift_bridgeObjectRelease_n();
LABEL_150:
          uint64_t v56 = v311;
          unint64_t v58 = v304;
          unint64_t v128 = (unint64_t)v302;
          uint64_t v129 = v301;
          long long v71 = v300;
          goto LABEL_151;
        }
        CocoaError.Code.init(fileErrno:reading:)(v55, 0);
        long long v71 = v319;
        if (v55 != 102)
        {
          v302 = (unint64_t *)v16;
          unint64_t v301 = v56;
          goto LABEL_105;
        }
LABEL_111:
        id v121 = 0;
        unint64_t v128 = (unint64_t)v16;
        uint64_t v129 = v56;
LABEL_151:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(v71, v129, v128, v121, 2037411651, 0xE400000000000000, v56, (uint64_t)v16, (void *(*)(void *__return_ptr, void *, uint64_t))&v317, (uint64_t)v58, v60);
        id v28 = v317;
        unsigned __int8 v163 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v28, v56, (unint64_t)v16, (uint64_t)v58, v60, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_);

        if ((v163 & 1) == 0) {
          goto LABEL_329;
        }
LABEL_11:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_12;
      }
      if (v34 < 0)
      {
LABEL_359:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_360:
        swift_willThrow();
        __break(1u);
        swift_willThrow();
        __break(1u);
LABEL_361:
        id v317 = 0;
        unint64_t v318 = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        id v317 = (id)0xD000000000000014;
        unint64_t v318 = 0x80000001823A9780;
        int v316 = v41;
        goto LABEL_366;
      }
      if (!copyfile(fts_path, v308, 0, v34 | 0x10E000F)) {
        goto LABEL_13;
      }
      Swift::Int32 v55 = MEMORY[0x185301870]();
      uint64_t v56 = String.init(cString:)();
      unint64_t v16 = v82;
      unint64_t v58 = (uint64_t (*)(void))String.init(cString:)();
      unint64_t v60 = v83;
      swift_bridgeObjectRetain();
      if (v55 == 63)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        unint64_t v84 = String._lastPathComponent.getter((uint64_t)v58, v60);
        unint64_t v86 = v85;
        swift_bridgeObjectRelease();
        int64_t v87 = specialized String.withFileSystemRepresentation<A>(_:)(v84, v86);
        swift_bridgeObjectRelease();
        int64_t v88 = specialized String.withFileSystemRepresentation<A>(_:)((uint64_t)v58, v60);
        swift_bridgeObjectRelease();
        BOOL v90 = v87 > 255 || v88 > 1024;
        BOOL v91 = !v90;
        if (v90) {
          unint64_t v92 = v58;
        }
        else {
          unint64_t v92 = (uint64_t (*)(void))v56;
        }
        unint64_t v301 = (unint64_t)v92;
        if (v91) {
          uint64_t v93 = (unint64_t *)v16;
        }
        else {
          uint64_t v93 = (unint64_t *)v60;
        }
        v302 = v93;
        swift_bridgeObjectRelease();
        CocoaError.Code.init(fileErrno:reading:)(63, 0);
        long long v71 = v319;
      }
      else
      {
        CocoaError.Code.init(fileErrno:reading:)(v55, 0);
        long long v71 = v319;
        if (v55 == 102) {
          goto LABEL_111;
        }
        v302 = (unint64_t *)v16;
        unint64_t v301 = v56;
      }
      v300 = v71;
      v304 = v58;
      uint64_t v311 = v56;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
        goto LABEL_355;
      }
      long long v153 = v305;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v305);
      uint64_t v154 = (int)POSIXErrorCode.rawValue.getter();
      id v155 = objc_allocWithZone((Class)NSError);
      uint64_t v156 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v121 = objc_msgSend(v155, sel_initWithDomain_code_userInfo_, v156, v154, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v157 = objc_msgSend(v121, sel_domain);
      id v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v157);
      uint64_t v160 = v159;

      if (v158 != static String._unconditionallyBridgeFromObjectiveC(_:)(v153) || v160 != v161)
      {
        char v162 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v162 & 1) == 0) {
          goto LABEL_347;
        }
        goto LABEL_150;
      }
      goto LABEL_148;
    case 4u:
    case 7u:
    case 0xAu:
      LODWORD(v41) = v16->fts_errno;
      uint64_t v42 = String.init(cString:)();
      unint64_t v16 = v43;
      uint64_t v44 = String.init(cString:)();
      unint64_t v46 = v45;
      swift_bridgeObjectRetain();
      if (v41 == 63)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        unint64_t v47 = String._lastPathComponent.getter(v44, v46);
        unint64_t v49 = v48;
        swift_bridgeObjectRelease();
        if ((v49 & 0x1000000000000000) != 0)
        {
          Swift::Int v50 = String.UTF8View._foreignCount()();
        }
        else if ((v49 & 0x2000000000000000) != 0)
        {
          Swift::Int v50 = HIBYTE(v49) & 0xF;
        }
        else
        {
          Swift::Int v50 = v47 & 0xFFFFFFFFFFFFLL;
        }
        uint64_t v108 = 3 * v50;
        if ((unsigned __int128)(v50 * (__int128)3) >> 64 != (3 * v50) >> 63) {
          goto LABEL_333;
        }
        LODWORD(v304) = 63;
        if (v108 < -1) {
          goto LABEL_336;
        }
        uint64_t v41 = v108 + 1;
        if (v108 < 1024 || (Swift::Int v50 = swift_stdlib_isStackAllocationSafe(), (v50 & 1) != 0))
        {
          v302 = &v295;
          MEMORY[0x1F4188790](v50);
          uint64_t v110 = (char *)&v295 - v109;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v110, v41, 1, v47, v49);
          LODWORD(v41) = v111;
          swift_bridgeObjectRelease();
          if (v41)
          {
            if (v7) {
              goto LABEL_360;
            }
            uint64_t v73 = 0;
          }
          else
          {
            size_t v112 = strnlen(v110, 0x100uLL);
            if (v7) {
              goto LABEL_360;
            }
            uint64_t v73 = v112;
          }
        }
        else
        {
          uint64_t v73 = swift_slowAlloc();
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, v73, v41, 1, v47, v49);
          char v115 = v114;
          swift_bridgeObjectRelease();
          if (v115)
          {
            uint64_t v116 = (const char *)v73;
            if (v7) {
              goto LABEL_357;
            }
            uint64_t v73 = 0;
          }
          else
          {
            uint64_t v116 = (const char *)v73;
            if (v73) {
              uint64_t v73 = strnlen((const char *)v73, 0x100uLL);
            }
            if (v7)
            {
LABEL_357:
              v293 = v116;
LABEL_363:
              MEMORY[0x185309510](v293, -1, -1);
              __break(1u);
LABEL_364:
              swift_willThrow();
              __break(1u);
LABEL_365:
              id v317 = 0;
              unint64_t v318 = 0xE000000000000000;
              _StringGuts.grow(_:)(22);
              swift_bridgeObjectRelease();
              id v317 = (id)0xD000000000000014;
              unint64_t v318 = 0x80000001823A9780;
              int v316 = v73;
              while (1)
              {
LABEL_366:
                v294._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v294);
                swift_bridgeObjectRelease();
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
LABEL_367:
                id v317 = 0;
                unint64_t v318 = 0xE000000000000000;
                _StringGuts.grow(_:)(22);
                swift_bridgeObjectRelease();
                id v317 = (id)0xD000000000000014;
                unint64_t v318 = 0x80000001823A9780;
                LODWORD(v319) = v16;
              }
            }
          }
          MEMORY[0x185309510](v116, -1, -1);
        }
        swift_bridgeObjectRelease();
        if ((v46 & 0x1000000000000000) != 0)
        {
          Swift::Int v142 = String.UTF8View._foreignCount()();
        }
        else if ((v46 & 0x2000000000000000) != 0)
        {
          Swift::Int v142 = HIBYTE(v46) & 0xF;
        }
        else
        {
          Swift::Int v142 = v44 & 0xFFFFFFFFFFFFLL;
        }
        uint64_t v143 = 3 * v142;
        if ((unsigned __int128)(v142 * (__int128)3) >> 64 != (3 * v142) >> 63) {
          goto LABEL_334;
        }
        if (v143 < -1) {
          goto LABEL_337;
        }
        uint64_t v144 = v143 + 1;
        if (v143 < 1024 || (Swift::Int v142 = swift_stdlib_isStackAllocationSafe(), (v142 & 1) != 0))
        {
          uint64_t v311 = (uint64_t)&v295;
          MEMORY[0x1F4188790](v142);
          unint64_t v146 = (char *)&v295 - v145;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v146, v144, 1, v44, v46);
          char v148 = v147;
          swift_bridgeObjectRelease();
          if (v148) {
            int64_t v149 = 0;
          }
          else {
            int64_t v149 = strnlen(v146, 0x401uLL);
          }
          LODWORD(v41) = v304;
        }
        else
        {
          uint64_t v150 = (const char *)swift_slowAlloc();
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v150, v144, 1, v44, v46);
          char v152 = v151;
          swift_bridgeObjectRelease();
          if (v152)
          {
            LODWORD(v41) = v304;
            int64_t v149 = 0;
          }
          else
          {
            if (v150) {
              int64_t v149 = strnlen(v150, 0x401uLL);
            }
            else {
              int64_t v149 = 0;
            }
            LODWORD(v41) = v304;
          }
          MEMORY[0x185309510](v150, -1, -1);
        }
        swift_bridgeObjectRelease();
        BOOL v168 = v73 > 255 || v149 > 1024;
        BOOL v169 = !v168;
        if (v168) {
          uint64_t v170 = v44;
        }
        else {
          uint64_t v170 = v42;
        }
        uint64_t v299 = v170;
        v302 = (unint64_t *)v16;
        unint64_t v301 = v46;
        if (v169) {
          unint64_t v171 = (unint64_t)v16;
        }
        else {
          unint64_t v171 = v46;
        }
        v300 = (uint64_t (*)(void))v171;
        swift_bridgeObjectRelease();
        CocoaError.Code.init(fileErrno:reading:)(63, 0);
        v304 = v319;
      }
      else
      {
        CocoaError.Code.init(fileErrno:reading:)(v41, 0);
        v304 = v319;
        if (v41 == 102)
        {
          id v79 = 0;
          unint64_t v80 = (unint64_t)v16;
          uint64_t v81 = v42;
          goto LABEL_184;
        }
        unint64_t v301 = v46;
        v302 = (unint64_t *)v16;
        v300 = (uint64_t (*)(void))v16;
        uint64_t v299 = v42;
      }
      uint64_t v172 = v44;
      LODWORD(v16) = v42;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
        goto LABEL_361;
      }
      long long v173 = v305;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v305);
      uint64_t v174 = (int)POSIXErrorCode.rawValue.getter();
      id v175 = objc_allocWithZone((Class)NSError);
      uint64_t v176 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v79 = objc_msgSend(v175, sel_initWithDomain_code_userInfo_, v176, v174, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v177 = objc_msgSend(v79, sel_domain);
      id v178 = static String._unconditionallyBridgeFromObjectiveC(_:)(v177);
      uint64_t v180 = v179;

      if (v178 == static String._unconditionallyBridgeFromObjectiveC(_:)(v173) && v180 == v181)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v9 = v308;
      }
      else
      {
        char v182 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v9 = v308;
        if ((v182 & 1) == 0) {
          goto LABEL_335;
        }
      }
      unint64_t v16 = (FTSENT *)v302;
      uint64_t v44 = v172;
      unint64_t v46 = v301;
      unint64_t v80 = (unint64_t)v300;
      uint64_t v81 = v299;
LABEL_184:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(v304, v81, v80, v79, 2037411651, 0xE400000000000000, v42, (uint64_t)v16, (void *(*)(void *__return_ptr, void *, uint64_t))&v317, v44, v46);
      id v183 = v317;
      unsigned __int8 v184 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v183, v42, (unint64_t)v16, v44, v46, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_);

      if ((v184 & 1) == 0)
      {
LABEL_329:
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_13;
    case 6u:
      goto LABEL_20;
    case 0xCu:
    case 0xDu:
      copyfile_flags_t v72 = v34 | v303;
      if ((v72 & 0x80000000) != 0) {
        goto LABEL_359;
      }
      if (!copyfile(fts_path, v308, 0, v72)) {
        goto LABEL_13;
      }
      LODWORD(v73) = MEMORY[0x185301870]();
      uint64_t v24 = String.init(cString:)();
      unint64_t v16 = v74;
      uint64_t v22 = String.init(cString:)();
      long long v25 = v75;
      swift_bridgeObjectRetain();
      if (v73 == 63)
      {
        LODWORD(v299) = 63;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        unint64_t v76 = String._lastPathComponent.getter(v22, (unint64_t)v25);
        uint64_t v73 = v77;
        swift_bridgeObjectRelease();
        if ((v73 & 0x1000000000000000) != 0)
        {
          Swift::Int v78 = String.UTF8View._foreignCount()();
        }
        else if ((v73 & 0x2000000000000000) != 0)
        {
          Swift::Int v78 = HIBYTE(v73) & 0xF;
        }
        else
        {
          Swift::Int v78 = v76 & 0xFFFFFFFFFFFFLL;
        }
        v304 = v25;
        uint64_t v133 = 3 * v78;
        if ((unsigned __int128)(v78 * (__int128)3) >> 64 != (3 * v78) >> 63) {
          goto LABEL_338;
        }
        if (v133 < -1) {
          goto LABEL_342;
        }
        uint64_t v134 = v22;
        uint64_t v135 = v133 + 1;
        if (v133 < 1024 || (Swift::Int v78 = swift_stdlib_isStackAllocationSafe(), (v78 & 1) != 0))
        {
          MEMORY[0x1F4188790](v78);
          uint64_t v41 = (uint64_t)&v295 - v136;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, v41, v135, 1, v76, v73);
          char v138 = v137;
          swift_bridgeObjectRelease();
          if (v138)
          {
            if (v7) {
              goto LABEL_360;
            }
            uint64_t v22 = v134;
            size_t v140 = 0;
          }
          else
          {
            size_t v139 = strnlen((const char *)v41, 0x100uLL);
            if (v7) {
              goto LABEL_360;
            }
            size_t v140 = v139;
            uint64_t v22 = v134;
          }
          unint64_t v141 = (unint64_t)v304;
        }
        else
        {
          long long v164 = (const char *)swift_slowAlloc();
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v164, v135, 1, v76, v73);
          char v166 = v165;
          swift_bridgeObjectRelease();
          uint64_t v22 = v134;
          if (v166)
          {
            unint64_t v141 = (unint64_t)v304;
            if (v7) {
              goto LABEL_362;
            }
            size_t v140 = 0;
          }
          else
          {
            if (v164) {
              size_t v140 = strnlen(v164, 0x100uLL);
            }
            else {
              size_t v140 = 0;
            }
            unint64_t v141 = (unint64_t)v304;
            if (v7)
            {
LABEL_362:
              v293 = v164;
              goto LABEL_363;
            }
          }
          MEMORY[0x185309510](v164, -1, -1);
        }
        swift_bridgeObjectRelease();
        if ((v141 & 0x1000000000000000) != 0)
        {
          Swift::Int v201 = String.UTF8View._foreignCount()();
        }
        else if ((v141 & 0x2000000000000000) != 0)
        {
          Swift::Int v201 = HIBYTE(v141) & 0xF;
        }
        else
        {
          Swift::Int v201 = v22 & 0xFFFFFFFFFFFFLL;
        }
        uint64_t v202 = 3 * v201;
        if ((unsigned __int128)(v201 * (__int128)3) >> 64 != (3 * v201) >> 63) {
          goto LABEL_339;
        }
        if (v202 < -1) {
          goto LABEL_344;
        }
        uint64_t v311 = v140;
        uint64_t v203 = v202 + 1;
        if (v202 < 1024 || (Swift::Int v201 = swift_stdlib_isStackAllocationSafe(), (v201 & 1) != 0))
        {
          MEMORY[0x1F4188790](v201);
          uint64_t v205 = (char *)&v295 - v204;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v205, v203, 1, v22, v141);
          char v207 = v206;
          swift_bridgeObjectRelease();
          if (v207) {
            int64_t v208 = 0;
          }
          else {
            int64_t v208 = strnlen(v205, 0x401uLL);
          }
          uint64_t v209 = v311;
        }
        else
        {
          unint64_t v210 = (const char *)swift_slowAlloc();
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v210, v203, 1, v22, v141);
          char v212 = v211;
          swift_bridgeObjectRelease();
          if (v212)
          {
            uint64_t v209 = v311;
            int64_t v208 = 0;
          }
          else
          {
            if (v210) {
              int64_t v208 = strnlen(v210, 0x401uLL);
            }
            else {
              int64_t v208 = 0;
            }
            uint64_t v209 = v311;
          }
          MEMORY[0x185309510](v210, -1, -1);
        }
        swift_bridgeObjectRelease();
        BOOL v214 = v209 > 255 || v208 > 1024;
        BOOL v215 = !v214;
        if (v214) {
          uint64_t v216 = v22;
        }
        else {
          uint64_t v216 = v24;
        }
        v300 = (uint64_t (*)(void))v216;
        v302 = (unint64_t *)v16;
        if (v215) {
          unint64_t v217 = (unint64_t)v16;
        }
        else {
          unint64_t v217 = v141;
        }
        unint64_t v301 = v217;
        swift_bridgeObjectRelease();
        CocoaError.Code.init(fileErrno:reading:)(63, 0);
        uint64_t v23 = (FTSENT *)v319;
        LODWORD(v73) = v299;
      }
      else
      {
        CocoaError.Code.init(fileErrno:reading:)(v73, 0);
        uint64_t v23 = (FTSENT *)v319;
        if (v73 == 102)
        {
          id v113 = 0;
          unint64_t v26 = (unint64_t)v16;
          uint64_t v27 = v24;
          goto LABEL_10;
        }
        v304 = v25;
        v302 = (unint64_t *)v16;
        unint64_t v301 = (unint64_t)v16;
        v300 = (uint64_t (*)(void))v24;
      }
      unint64_t v16 = v23;
      uint64_t v218 = v22;
      uint64_t v311 = v24;
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
        goto LABEL_365;
      }
      unint64_t v219 = v305;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v305);
      uint64_t v220 = (int)POSIXErrorCode.rawValue.getter();
      id v221 = objc_allocWithZone((Class)NSError);
      uint64_t v222 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v113 = objc_msgSend(v221, sel_initWithDomain_code_userInfo_, v222, v220, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v223 = objc_msgSend(v113, sel_domain);
      id v224 = static String._unconditionallyBridgeFromObjectiveC(_:)(v223);
      uint64_t v226 = v225;

      if (v224 == static String._unconditionallyBridgeFromObjectiveC(_:)(v219) && v226 == v227)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v22 = v218;
        uint64_t v23 = v16;
      }
      else
      {
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v22 = v218;
        uint64_t v23 = v16;
        if ((v21 & 1) == 0) {
          goto LABEL_340;
        }
      }
      uint64_t v24 = v311;
      unint64_t v16 = (FTSENT *)v302;
      long long v25 = v304;
      unint64_t v26 = v301;
      uint64_t v27 = (uint64_t)v300;
LABEL_10:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)(v23, v27, v26, v113, 2037411651, 0xE400000000000000, v24, (uint64_t)v16, (void *(*)(void *__return_ptr, void *, uint64_t))&v317, v22, (uint64_t)v25);
      id v28 = v317;
      unsigned __int8 v29 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)(v28, v24, (unint64_t)v16, v22, (unint64_t)v25, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_, (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_);

      if ((v29 & 1) == 0) {
        goto LABEL_329;
      }
      goto LABEL_11;
    default:
      goto LABEL_12;
  }
}

uint64_t _FTSSequence.Iterator.init(_:_:)(const char *a1, int a2)
{
  v13[2] = *(char **)MEMORY[0x1E4F143B8];
  *(_DWORD *)(v2 + 56) = 0;
  uint64_t v5 = MEMORY[0x1E4FBC860];
  *(void *)(v2 + 64) = MEMORY[0x1E4FBC860];
  *(void *)(v2 + 72) = v5;
  *(unsigned char *)(v2 + 80) = 0;
  *(void *)(v2 + 48) = a1;
  memset(&v12, 0, 28);
  memset(&v12.st_atimespec, 0, 112);
  if (lstat(a1, &v12) || (v13[0] = (char *)a1, v13[1] = 0, (size_t v10 = fts_open(v13, a2, 0)) == 0))
  {
    unsigned int v6 = MEMORY[0x185301870]();
    uint64_t v8 = String.init(cString:)();
    char v9 = 1;
    size_t v10 = (FTS *)v6;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    char v9 = 0;
  }
  *(void *)(v2 + 16) = v10;
  *(void *)(v2 + 24) = v8;
  *(void *)(v2 + 32) = v7;
  *(unsigned char *)(v2 + 40) = v9;
  return v2;
}

uint64_t type metadata accessor for _FTSSequence.Iterator()
{
  return self;
}

uint64_t BidirectionalCollection._range<A>(of:anchored:backwards:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(void, void)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v158 = a8;
  LODWORD(v173) = a3;
  LODWORD(v163) = a2;
  uint64_t v170 = a1;
  uint64_t v141 = a9;
  uint64_t v167 = a6;
  uint64_t v12 = *(void *)(a6 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v136 = (char *)&v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v134 = (char *)&v130 - v16;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v17 = type metadata accessor for Range();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v133 = (char *)&v130 - v19;
  uint64_t v157 = swift_getAssociatedTypeWitness();
  long long v153 = *(void (***)(char *, uint64_t))(v157 - 8);
  MEMORY[0x1F4188790](v157);
  uint64_t v156 = (char *)&v130 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  id v155 = (char *)&v130 - v22;
  uint64_t v159 = *(void (***)(char *, uint64_t))(a4 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v161 = (char *)&v130 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = a7;
  uint64_t v176 = *((void *)a7 + 1);
  uint64_t v174 = swift_getAssociatedTypeWitness();
  char v147 = *(void (***)(char *, char *, uint64_t))(v174 - 8);
  MEMORY[0x1F4188790](v174);
  int64_t v149 = (char *)&v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  BOOL v168 = (char *)&v130 - v27;
  MEMORY[0x1F4188790](v28);
  id v175 = (char *)&v130 - v29;
  uint64_t v154 = (void (**)(char *))type metadata accessor for Optional();
  char v148 = (void (*)(void, void, void))*(v154 - 1);
  MEMORY[0x1F4188790](v154);
  unint64_t v146 = (void (**)(char *, char *, uint64_t))((char *)&v130 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v31);
  uint64_t v160 = (uint64_t *)((char *)&v130 - v32);
  uint64_t v152 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v33);
  id v177 = (char *)&v130 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  uint64_t v145 = (char *)&v130 - v36;
  MEMORY[0x1F4188790](v37);
  uint64_t v39 = (char *)&v130 - v38;
  MEMORY[0x1F4188790](v40);
  unint64_t v131 = (char *)&v130 - v41;
  MEMORY[0x1F4188790](v42);
  char v151 = (char *)&v130 - v43;
  MEMORY[0x1F4188790](v44);
  unint64_t v46 = (char *)&v130 - v45;
  uint64_t v144 = type metadata accessor for Optional();
  uint64_t v143 = *(void *)(v144 - 8);
  MEMORY[0x1F4188790](v144);
  int v132 = (char *)&v130 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v49 = MEMORY[0x1F4188790](v48);
  uint64_t v135 = v18;
  Swift::Int v50 = *(void (**)(double))(v18 + 56);
  Swift::Int v142 = (char *)&v130 - v51;
  uint64_t v140 = v17;
  v50(v49);
  long long v164 = v39;
  uint64_t v165 = AssociatedTypeWitness;
  uint64_t v169 = a5;
  uint64_t v171 = a4;
  uint64_t v52 = v170;
  uint64_t v162 = v12;
  uint64_t v150 = v46;
  uint64_t v139 = v18 + 56;
  char v138 = v50;
  if (v173)
  {
    dispatch thunk of Collection.endIndex.getter();
    uint64_t v53 = (void (**)(void, void, void))v160;
    BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(v52, a5, v167, (uint64_t)v172, (uint64_t)v160);
    uint64_t v54 = v152;
    Swift::Int32 v55 = *(void (**)(char *, uint64_t))(v152 + 8);
    v55(v39, AssociatedTypeWitness);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))((char *)v53, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v143 + 8))(v142, v144);
      (*((void (**)(void (**)(void, void, void), void (**)(char *)))v148 + 1))((char *)v53, v154);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v138)(v141, 1, 1, v140);
    }
    unint64_t v60 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
    uint64_t v61 = v131;
    v60(v131, (char *)v53, AssociatedTypeWitness);
    unint64_t v62 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
    unint64_t v63 = v150;
    v62(v150, v61, AssociatedTypeWitness);
    if (v163)
    {
      v55(v61, AssociatedTypeWitness);
      int64_t v64 = v145;
      v62(v145, v63, AssociatedTypeWitness);
    }
    else
    {
      uint64_t v73 = v61;
      uint64_t v74 = v145;
      dispatch thunk of Collection.startIndex.getter();
      v55(v73, AssociatedTypeWitness);
      int64_t v64 = v74;
    }
    v60(v151, v64, AssociatedTypeWitness);
    unint64_t v59 = v175;
    unint64_t v58 = v150;
  }
  else
  {
    uint64_t v56 = v167;
    int64_t v57 = v172;
    uint64_t v54 = v152;
    dispatch thunk of Collection.startIndex.getter();
    unint64_t v58 = v46;
    if (v163)
    {
      uint64_t AssociatedTypeWitness = v165;
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v151, v46, v165);
      unint64_t v59 = v175;
    }
    else
    {
      int64_t v65 = v164;
      dispatch thunk of Collection.endIndex.getter();
      uint64_t v66 = v146;
      BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(v170, v169, v56, (uint64_t)v57, (uint64_t)v146);
      uint64_t v67 = v54;
      BOOL v68 = *(void (**)(char *, uint64_t))(v54 + 8);
      char v69 = v65;
      uint64_t v70 = v165;
      v68(v69, v165);
      int v71 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v67 + 48))(v66, 1, v70);
      unint64_t v59 = v175;
      if (v71 == 1)
      {
        v68(v58, v70);
        (*(void (**)(char *, uint64_t))(v143 + 8))(v142, v144);
        (*((void (**)(void (**)(char *, char *, uint64_t), void (**)(char *)))v148 + 1))(v66, v154);
        return ((uint64_t (*)(void, void, void, void))v138)(v141, 1, 1, v140);
      }
      (*(void (**)(char *, void, uint64_t))(v67 + 32))(v151, v66, v70);
      uint64_t AssociatedTypeWitness = v70;
      uint64_t v54 = v67;
    }
  }
  char v75 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v76 = 1;
  if ((v75 & 1) == 0) {
    uint64_t v76 = -1;
  }
  uint64_t v145 = (char *)v76;
  Swift::Int v78 = *(void (**)(void, void, void))(v54 + 16);
  uint64_t v77 = v54 + 16;
  long long v173 = (void (**)(void, void))(v147 + 1);
  uint64_t v160 = (uint64_t *)(v159 + 2);
  unsigned __int8 v163 = (void (**)(char *, uint64_t))(v77 - 8);
  ++v159;
  uint64_t v154 = (void (**)(char *))(v153 + 2);
  ++v153;
  v147 += 2;
  unint64_t v146 = (void (**)(char *, char *, uint64_t))(v77 + 16);
  id v79 = v178;
  unint64_t v80 = v59;
  uint64_t v152 = v77;
  char v148 = v78;
  v78(v177, v58, AssociatedTypeWitness);
  while (1)
  {
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v81 = v171;
    while (1)
    {
      char v82 = v168;
      dispatch thunk of Collection.endIndex.getter();
      uint64_t v83 = v174;
      unint64_t v84 = v80;
      uint64_t v167 = swift_getAssociatedConformanceWitness();
      char v85 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v172 = *v173;
      v172(v82, v83);
      unint64_t v86 = v161;
      ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))*v160)(v161, v79, v81);
      if ((v85 & 1) == 0) {
        break;
      }
      int64_t v87 = v164;
      dispatch thunk of Collection.endIndex.getter();
      uint64_t v88 = v165;
      char v89 = dispatch thunk of static Comparable.< infix(_:_:)();
      (*v163)(v87, v88);
      (*v159)(v86, v81);
      if ((v89 & 1) == 0) {
        goto LABEL_23;
      }
      BOOL v90 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      BOOL v91 = *v154;
      unint64_t v92 = v155;
      uint64_t v93 = v157;
      (*v154)(v155);
      v90(v179, 0);
      uint64_t v94 = dispatch thunk of Collection.subscript.read();
      uint64_t v95 = v156;
      v91(v156);
      ((void (*)(char *, void))v94)(v179, 0);
      LOBYTE(v94) = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v96 = *v153;
      (*v153)(v95, v93);
      unint64_t v84 = v175;
      v96(v92, v93);
      uint64_t v81 = v171;
      id v79 = v178;
      if ((v94 & 1) == 0) {
        goto LABEL_23;
      }
      dispatch thunk of Collection.formIndex(after:)();
      unint64_t v80 = v84;
      dispatch thunk of Collection.formIndex(after:)();
    }
    (*v159)(v86, v81);
LABEL_23:
    unint64_t v97 = v168;
    uint64_t v98 = v174;
    (*v147)(v168, v84, v174);
    uint64_t v99 = v149;
    dispatch thunk of Collection.endIndex.getter();
    char v100 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v101 = (void (*)(char *, uint64_t))v172;
    v172(v99, v98);
    v101(v97, v98);
    if (v100) {
      break;
    }
    uint64_t v102 = v165;
    uint64_t v103 = v150;
    unint64_t v104 = v151;
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      v172(v84, v174);
      uint64_t v129 = *v163;
      (*v163)(v177, v102);
      v129(v104, v102);
      v129(v103, v102);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v143 + 32))(v141, v142, v144);
    }
    unint64_t v105 = v164;
    dispatch thunk of Collection.index(_:offsetBy:)();
    char v106 = *v163;
    (*v163)(v103, v102);
    (*v146)(v103, v105, v102);
    unint64_t v80 = v84;
    v172(v84, v174);
    uint64_t v107 = v177;
    v106(v177, v102);
    id v79 = v178;
    v148(v107, v103, v102);
  }
  uint64_t v108 = v165;
  uint64_t v109 = v177;
  v148(v164, v177, v165);
  uint64_t v110 = v150;
  char v111 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v172(v84, v174);
  size_t v112 = *v163;
  (*v163)(v109, v108);
  v112(v151, v108);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v143 + 8))(v142, v144);
  if (v111)
  {
    uint64_t v113 = TupleTypeMetadata2;
    char v114 = v134;
    char v115 = &v134[*(int *)(TupleTypeMetadata2 + 48)];
    id v178 = v112;
    uint64_t v116 = *v146;
    (*v146)(v134, v110, v108);
    id v177 = v115;
    v116(v115, v164, v108);
    int64_t v117 = v136;
    uint64_t v118 = &v136[*(int *)(v113 + 48)];
    id v119 = (void (*)(char *, char *, uint64_t))v148;
    v148(v136, v114, v108);
    v119(v118, v115, v108);
    uint64_t v120 = v133;
    v116(v133, v117, v108);
    id v121 = v178;
    v178(v118, v108);
    id v122 = &v117[*(int *)(TupleTypeMetadata2 + 48)];
    v116(v117, v114, v108);
    v116(v122, v177, v108);
    uint64_t v123 = v140;
    v116(&v120[*(int *)(v140 + 36)], v122, v108);
    uint64_t v124 = v144;
    uint64_t v125 = v117;
    uint64_t v126 = v142;
    v121(v125, v108);
    char v127 = v132;
    (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v132, v120, v123);
    ((void (*)(char *, void, uint64_t, uint64_t))v138)(v127, 0, 1, v123);
    unint64_t v128 = *(void (**)(char *, char *, uint64_t))(v143 + 32);
    v128(v126, v127, v124);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v128)(v141, v126, v124);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v3 = v1;
  Swift::Int v5 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v5);
  uint64_t v133 = (char *)v5;
  if (result >= v5)
  {
    if (v5 < 0) {
      goto LABEL_159;
    }
    uint64_t v144 = v1;
    if ((unint64_t)v5 < 2) {
      return result;
    }
    uint64_t v101 = -1;
    uint64_t v102 = *a1;
    uint64_t v103 = 1;
    uint64_t v139 = *a1;
LABEL_113:
    uint64_t v130 = v102;
    __dsta = (char *)v103;
    long long v104 = *(_OWORD *)(v139 + 16 * v103);
    uint64_t v135 = v101;
    while (1)
    {
      unint64_t v105 = *(void **)v102;
      uint64_t v2 = (uint64_t)(id)v104;
      swift_retain();
      id v106 = v105;
      swift_retain();
      id v141 = objc_msgSend((id)v2, sel_length);
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v107 = static LocaleCache.cache + 16;
      uint64_t v108 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
      swift_retain_n();
      os_unfair_lock_lock(v108);
      uint64_t v109 = v144;
      closure #1 in LocaleCache.system.getter(v107, &v142);
      uint64_t v144 = v109;
      uint64_t result = (uint64_t)v108;
      if (v109) {
        goto LABEL_168;
      }
      os_unfair_lock_unlock(v108);
      swift_release_n();
      uint64_t v110 = v143;
      uint64_t ObjectType = swift_getObjectType();
      size_t v112 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v110 + 488))(ObjectType, v110);
      id v113 = objc_msgSend((id)v2, sel_compare_options_range_locale_, v106, 577, 0, v141, v112);
      swift_release();

      swift_release();
      uint64_t result = swift_unknownObjectRelease();
      if (v113 != (id)-1) {
        goto LABEL_112;
      }
      if (!v139) {
        break;
      }
      long long v104 = *(_OWORD *)(v102 + 16);
      *(_OWORD *)(v102 + 16) = *(_OWORD *)v102;
      *(_OWORD *)uint64_t v102 = v104;
      v102 -= 16;
      if (__CFADD__(v101++, 1))
      {
LABEL_112:
        uint64_t v103 = (uint64_t)(__dsta + 1);
        uint64_t v102 = v130 + 16;
        uint64_t v101 = v135 - 1;
        if (__dsta + 1 == v133) {
          return result;
        }
        goto LABEL_113;
      }
    }
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    os_unfair_lock_unlock((os_unfair_lock_t)result);
    __break(1u);
LABEL_169:
    os_unfair_lock_unlock((os_unfair_lock_t)v2);
    __break(1u);
LABEL_170:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v5 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = v5 + 1;
  }
  if (v5 < -1) {
    goto LABEL_170;
  }
  uint64_t v124 = result;
  uint64_t v120 = a1;
  if (v5 < 2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    long long __dst = (void **)(MEMORY[0x1E4FBC860] + 32);
    if (v5 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v12 = MEMORY[0x1E4FBC860];
      goto LABEL_123;
    }
    uint64_t v123 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v8 = v7 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: NSString, value: JSONReference));
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = v8;
    uint64_t v123 = result;
    long long __dst = (void **)(result + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v121 = *a1 - 16;
  uint64_t v122 = *a1 + 40;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t v134 = *a1;
  do
  {
    Swift::Int v14 = v10 + 1;
    Swift::Int v127 = v10;
    if (v10 + 1 < v5)
    {
      uint64_t v125 = v12;
      uint64_t v15 = v3;
      uint64_t v16 = *(void **)(v11 + 16 * v10);
      id v17 = *(id *)(v11 + 16 * v14);
      swift_retain();
      id v18 = v16;
      swift_retain();
      id v19 = objc_msgSend(v17, sel_length);
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v20 = static LocaleCache.cache + 16;
      uint64_t v2 = static LocaleCache.cache + 124;
      swift_retain_n();
      os_unfair_lock_lock((os_unfair_lock_t)v2);
      closure #1 in LocaleCache.system.getter(v20, &v142);
      uint64_t v144 = v15;
      if (v15) {
        goto LABEL_169;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)v2);
      swift_release_n();
      uint64_t v21 = v143;
      uint64_t v22 = swift_getObjectType();
      uint64_t v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 488))(v22, v21);
      id v128 = objc_msgSend(v17, sel_compare_options_range_locale_, v18, 577, 0, v19, v23);
      swift_release();

      swift_release();
      uint64_t result = swift_unknownObjectRelease();
      Swift::Int v10 = v127;
      Swift::Int v14 = v127 + 2;
      Swift::Int v5 = (Swift::Int)v133;
      if (v127 + 2 >= (uint64_t)v133)
      {
        uint64_t v12 = v125;
      }
      else
      {
        uint64_t v24 = v122 + 16 * v127;
        while (1)
        {
          Swift::Int v136 = v14;
          uint64_t v25 = *(void **)(v24 - 24);
          id v26 = *(id *)(v24 - 8);
          swift_retain();
          id v27 = v25;
          swift_retain();
          id v28 = objc_msgSend(v26, sel_length);
          uint64_t v29 = static LocaleCache.cache + 16;
          uint64_t v2 = static LocaleCache.cache + 124;
          swift_retain_n();
          os_unfair_lock_lock((os_unfair_lock_t)v2);
          uint64_t v30 = v144;
          closure #1 in LocaleCache.system.getter(v29, &v142);
          uint64_t v144 = v30;
          if (v30) {
            goto LABEL_169;
          }
          os_unfair_lock_unlock((os_unfair_lock_t)v2);
          swift_release_n();
          uint64_t v31 = v143;
          uint64_t v32 = swift_getObjectType();
          uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 488))(v32, v31);
          id v33 = objc_msgSend(v26, sel_compare_options_range_locale_, v27, 577, 0, v28, v2);
          swift_release();

          swift_release();
          uint64_t result = swift_unknownObjectRelease();
          if ((v128 == (id)-1) == (v33 != (id)-1)) {
            break;
          }
          Swift::Int v14 = v136 + 1;
          v24 += 16;
          if (v133 == (char *)(v136 + 1))
          {
            Swift::Int v5 = (Swift::Int)v133;
            Swift::Int v14 = (Swift::Int)v133;
            uint64_t v12 = v125;
            goto LABEL_28;
          }
        }
        Swift::Int v5 = (Swift::Int)v133;
        uint64_t v12 = v125;
        Swift::Int v14 = v136;
LABEL_28:
        Swift::Int v10 = v127;
      }
      uint64_t v3 = v144;
      uint64_t v11 = v134;
      if (v128 == (id)-1)
      {
        if (v14 < v10) {
          goto LABEL_163;
        }
        if (v10 < v14)
        {
          Swift::Int v34 = v10;
          uint64_t v35 = (long long *)(v121 + 16 * v14);
          Swift::Int v36 = v14;
          Swift::Int v37 = v34;
          uint64_t v38 = (long long *)(v134 + 16 * v34);
          do
          {
            if (v37 != --v36)
            {
              if (!v134) {
                goto LABEL_166;
              }
              long long v39 = *v38;
              *uint64_t v38 = *v35;
              *uint64_t v35 = v39;
            }
            ++v37;
            --v35;
            ++v38;
          }
          while (v37 < v36);
          Swift::Int v10 = v127;
        }
      }
    }
    if (v14 >= v5) {
      goto LABEL_50;
    }
    if (__OFSUB__(v14, v10)) {
      goto LABEL_158;
    }
    if (v14 - v10 >= v124)
    {
      Swift::Int v10 = v127;
LABEL_50:
      if (v14 < v10) {
        goto LABEL_153;
      }
      goto LABEL_51;
    }
    if (__OFADD__(v127, v124)) {
      goto LABEL_160;
    }
    if (v127 + v124 >= v5) {
      Swift::Int v40 = v5;
    }
    else {
      Swift::Int v40 = v127 + v124;
    }
    if (v40 < v127)
    {
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if (v14 == v40)
    {
      if (v14 < v127) {
        goto LABEL_153;
      }
    }
    else
    {
      uint64_t v144 = v3;
      uint64_t v89 = v121 + 16 * v14;
      Swift::Int v126 = v40;
      do
      {
        long long v91 = *(_OWORD *)(v11 + 16 * v14);
        Swift::Int v92 = v127;
        uint64_t v129 = v89;
        Swift::Int v138 = v14;
        while (1)
        {
          uint64_t v93 = *(void **)v89;
          id v94 = (id)v91;
          swift_retain();
          id v95 = v93;
          swift_retain();
          id v140 = objc_msgSend(v94, sel_length);
          if (one-time initialization token for cache != -1) {
            swift_once();
          }
          uint64_t v96 = static LocaleCache.cache + 16;
          uint64_t v2 = static LocaleCache.cache + 124;
          swift_retain_n();
          os_unfair_lock_lock((os_unfair_lock_t)v2);
          uint64_t v97 = v144;
          closure #1 in LocaleCache.system.getter(v96, &v142);
          uint64_t v144 = v97;
          if (v97) {
            goto LABEL_169;
          }
          os_unfair_lock_unlock((os_unfair_lock_t)v2);
          swift_release_n();
          uint64_t v98 = v143;
          uint64_t v99 = swift_getObjectType();
          char v100 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v98 + 488))(v99, v98);
          uint64_t v2 = (uint64_t)objc_msgSend(v94, sel_compare_options_range_locale_, v95, 577, 0, v140, v100);
          swift_release();

          swift_release();
          uint64_t result = swift_unknownObjectRelease();
          if (v2 != -1) {
            break;
          }
          uint64_t v11 = v134;
          Swift::Int v90 = v138;
          if (!v134) {
            goto LABEL_164;
          }
          long long v91 = *(_OWORD *)(v89 + 16);
          *(_OWORD *)(v89 + 16) = *(_OWORD *)v89;
          *(_OWORD *)uint64_t v89 = v91;
          v89 -= 16;
          if (v138 == ++v92) {
            goto LABEL_100;
          }
        }
        uint64_t v11 = v134;
        Swift::Int v90 = v138;
LABEL_100:
        Swift::Int v14 = v90 + 1;
        uint64_t v89 = v129 + 16;
      }
      while (v14 != v126);
      Swift::Int v14 = v126;
      uint64_t v3 = v144;
      if (v126 < v127) {
        goto LABEL_153;
      }
    }
LABEL_51:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1, (char *)v12);
      uint64_t v12 = result;
    }
    unint64_t v42 = *(void *)(v12 + 16);
    unint64_t v41 = *(void *)(v12 + 24);
    unint64_t v13 = v42 + 1;
    uint64_t v11 = v134;
    if (v42 >= v41 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, (char *)v12);
      uint64_t v11 = v134;
      uint64_t v12 = result;
    }
    *(void *)(v12 + 16) = v13;
    uint64_t v43 = v12 + 32;
    uint64_t v44 = (Swift::Int *)(v12 + 32 + 16 * v42);
    *uint64_t v44 = v127;
    v44[1] = v14;
    Swift::Int v137 = v14;
    if (v42)
    {
      Swift::Int v5 = (Swift::Int)v133;
      while (1)
      {
        unint64_t v45 = v13 - 1;
        if (v13 >= 4)
        {
          unint64_t v50 = v43 + 16 * v13;
          uint64_t v51 = *(void *)(v50 - 64);
          uint64_t v52 = *(void *)(v50 - 56);
          BOOL v56 = __OFSUB__(v52, v51);
          uint64_t v53 = v52 - v51;
          if (v56) {
            goto LABEL_142;
          }
          uint64_t v55 = *(void *)(v50 - 48);
          uint64_t v54 = *(void *)(v50 - 40);
          BOOL v56 = __OFSUB__(v54, v55);
          uint64_t v48 = v54 - v55;
          char v49 = v56;
          if (v56) {
            goto LABEL_143;
          }
          unint64_t v57 = v13 - 2;
          unint64_t v58 = (uint64_t *)(v43 + 16 * (v13 - 2));
          uint64_t v60 = *v58;
          uint64_t v59 = v58[1];
          BOOL v56 = __OFSUB__(v59, v60);
          uint64_t v61 = v59 - v60;
          if (v56) {
            goto LABEL_145;
          }
          BOOL v56 = __OFADD__(v48, v61);
          uint64_t v62 = v48 + v61;
          if (v56) {
            goto LABEL_148;
          }
          if (v62 >= v53)
          {
            unint64_t v80 = (uint64_t *)(v43 + 16 * v45);
            uint64_t v82 = *v80;
            uint64_t v81 = v80[1];
            BOOL v56 = __OFSUB__(v81, v82);
            uint64_t v83 = v81 - v82;
            if (v56) {
              goto LABEL_152;
            }
            BOOL v73 = v48 < v83;
            goto LABEL_88;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v74 = *(void *)(v12 + 32);
            uint64_t v75 = *(void *)(v12 + 40);
            BOOL v56 = __OFSUB__(v75, v74);
            uint64_t v67 = v75 - v74;
            char v68 = v56;
            goto LABEL_82;
          }
          uint64_t v47 = *(void *)(v12 + 32);
          uint64_t v46 = *(void *)(v12 + 40);
          BOOL v56 = __OFSUB__(v46, v47);
          uint64_t v48 = v46 - v47;
          char v49 = v56;
        }
        if (v49) {
          goto LABEL_144;
        }
        unint64_t v57 = v13 - 2;
        unint64_t v63 = (uint64_t *)(v43 + 16 * (v13 - 2));
        uint64_t v65 = *v63;
        uint64_t v64 = v63[1];
        BOOL v66 = __OFSUB__(v64, v65);
        uint64_t v67 = v64 - v65;
        char v68 = v66;
        if (v66) {
          goto LABEL_147;
        }
        char v69 = (uint64_t *)(v43 + 16 * v45);
        uint64_t v71 = *v69;
        uint64_t v70 = v69[1];
        BOOL v56 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v56) {
          goto LABEL_150;
        }
        if (__OFADD__(v67, v72)) {
          goto LABEL_151;
        }
        if (v67 + v72 >= v48)
        {
          BOOL v73 = v48 < v72;
LABEL_88:
          if (v73) {
            unint64_t v45 = v57;
          }
          goto LABEL_90;
        }
LABEL_82:
        if (v68) {
          goto LABEL_146;
        }
        uint64_t v76 = (uint64_t *)(v43 + 16 * v45);
        uint64_t v78 = *v76;
        uint64_t v77 = v76[1];
        BOOL v56 = __OFSUB__(v77, v78);
        uint64_t v79 = v77 - v78;
        if (v56) {
          goto LABEL_149;
        }
        if (v79 < v67) {
          goto LABEL_15;
        }
LABEL_90:
        unint64_t v84 = v45 - 1;
        if (v45 - 1 >= v13)
        {
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
          goto LABEL_161;
        }
        if (!v11) {
          goto LABEL_165;
        }
        char v85 = (uint64_t *)(v43 + 16 * v84);
        uint64_t v2 = *v85;
        unint64_t v86 = (void *)(v43 + 16 * v45);
        uint64_t v87 = v86[1];
        uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v11 + 16 * *v85), (id *)(v11 + 16 * *v86), v11 + 16 * v87, __dst);
        if (v3)
        {
LABEL_135:
          uint64_t v144 = v3;
          swift_bridgeObjectRelease();
          *(void *)(v123 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        if (v87 < v2) {
          goto LABEL_139;
        }
        if (v45 > *(void *)(v12 + 16)) {
          goto LABEL_140;
        }
        *char v85 = v2;
        *(void *)(v43 + 16 * v84 + 8) = v87;
        unint64_t v88 = *(void *)(v12 + 16);
        if (v45 >= v88) {
          goto LABEL_141;
        }
        unint64_t v13 = v88 - 1;
        uint64_t result = (uint64_t)memmove((void *)(v43 + 16 * v45), v86 + 2, 16 * (v88 - 1 - v45));
        *(void *)(v12 + 16) = v88 - 1;
        BOOL v73 = v88 > 2;
        Swift::Int v5 = (Swift::Int)v133;
        uint64_t v11 = v134;
        if (!v73) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
    Swift::Int v5 = (Swift::Int)v133;
LABEL_15:
    Swift::Int v10 = v137;
  }
  while (v137 < v5);
  uint64_t v9 = v123;
LABEL_123:
  uint64_t v123 = v9;
  if (v13 >= 2)
  {
    uint64_t v115 = *v120;
    do
    {
      unint64_t v116 = v13 - 2;
      if (v13 < 2) {
        goto LABEL_154;
      }
      if (!v115) {
        goto LABEL_167;
      }
      uint64_t v117 = *(void *)(v12 + 32 + 16 * v116);
      uint64_t v2 = *(void *)(v12 + 32 + 16 * (v13 - 1) + 8);
      uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v115 + 16 * v117), (id *)(v115 + 16 * *(void *)(v12 + 32 + 16 * (v13 - 1))), v115 + 16 * v2, __dst);
      if (v3) {
        goto LABEL_135;
      }
      if (v2 < v117) {
        goto LABEL_155;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
        uint64_t v12 = result;
      }
      if (v116 >= *(void *)(v12 + 16)) {
        goto LABEL_156;
      }
      uint64_t v118 = (uint64_t *)(v12 + 32 + 16 * v116);
      *uint64_t v118 = v117;
      v118[1] = v2;
      unint64_t v119 = *(void *)(v12 + 16);
      if (v13 > v119) {
        goto LABEL_157;
      }
      uint64_t result = (uint64_t)memmove((void *)(v12 + 32 + 16 * (v13 - 1)), (const void *)(v12 + 32 + 16 * v13), 16 * (v119 - v13));
      *(void *)(v12 + 16) = v119 - 1;
      unint64_t v13 = v119 - 1;
    }
    while (v119 > 2);
  }
  swift_bridgeObjectRelease();
  *(void *)(v123 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in LocaleCache.system.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    unsigned int v6 = v4;
  }
  else
  {
    type metadata accessor for _LocaleICU();
    uint64_t v5 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (void (*)(uint64_t))type metadata accessor for _LocaleICU);
    _s10Foundation17LocalePreferencesVSgWOi0_(v9);
    outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)v8);
    swift_allocObject();
    unsigned int v6 = specialized _LocaleICU.init(identifier:prefs:)(0, 0xE000000000000000, (uint64_t)v8);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v5;
    swift_retain();
  }
  *a2 = v6;
  a2[1] = v5;
  return swift_unknownObjectRetain();
}

uint64_t partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void))specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:));
}

{
  return partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void))specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:));
}

uint64_t _s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs6UInt64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TA_0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return _s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs6UInt64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TATm_0(a1, a2, a3, a4, (uint64_t (*)(unint64_t, unint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(void))specialized _parseIntegerDigits<A>(_:isNegative:), a5);
}

uint64_t partial apply for specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void))
{
  return a5(a1, a2, a3, a4, v5[4], v5[5], v5[6], v5[2], v5[3]);
}

uint64_t _s10Foundation11XMLPlistMapC5ValueO07integerD02in2as3for_xAC_xmAA15_CodingPathNodeOq_SgtKs17FixedWidthIntegerRzs0I3KeyR_r0_lFxAA10BufferViewVys5UInt8VG_AStYbKXEfU_A2sekLs6UInt64Vs5Error_pAURszsANR_r0_lIethyyggndzo_TP5TATm_0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(unint64_t, unint64_t, uint64_t)@<X4>, uint64_t (*a6)(void)@<X5>, uint64_t *a7@<X8>)
{
  uint64_t result = specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(a1, a2, a3, a4, *(void *)(v7 + 40), *(void *)(v7 + 48), *(void *)(v7 + 16), *(void *)(v7 + 24), a5, a6);
  if (!v8) {
    *a7 = result;
  }
  return result;
}

uint64_t specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, uint64_t a9)
{
  uint64_t result = specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(a1, a2, a3, a4, a5, a6, a7, a9, (uint64_t (*)(unint64_t, unint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), (uint64_t (*)(void))specialized _parseIntegerDigits<A>(_:isNegative:));
  if (!v9) {
    *a8 = result;
  }
  return result;
}

{
  uint64_t v9;
  uint64_t result;

  uint64_t result = specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(a1, a2, a3, a4, a5, a6, a7, a9, (uint64_t (*)(unint64_t, unint64_t, uint64_t))specialized _parseHexIntegerDigits<A>(_:isNegative:), specialized _parseIntegerDigits<A>(_:isNegative:));
  if (!v9) {
    *a8 = result;
  }
  return result;
}

uint64_t specialized closure #1 in XMLPlistMap.Value.integerValue<A, B>(in:as:for:_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(unint64_t, unint64_t, uint64_t), uint64_t (*a10)(void))
{
  uint64_t v38 = a7;
  uint64_t v39 = a8;
  unint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v14 = type metadata accessor for Unicode.Scalar.Properties();
  MEMORY[0x1F4188790](v14);
  id v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v18 = (unint64_t)&a1[a2];
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  uint64_t v44 = a1;
  unint64_t v45 = (unint64_t)a1;
  uint64_t v46 = &a1[a2];
  if (a2 >= 1)
  {
    id v19 = (void (**)(char *, uint64_t))(v15 + 8);
    while (v18 >= (unint64_t)a1)
    {
      if ((uint64_t)&a1[-a3] < 0) {
        goto LABEL_65;
      }
      if ((uint64_t)(v18 - (void)a1) < 0) {
        goto LABEL_66;
      }
      if ((uint64_t)(a3 + a4 - v18) < 0) {
        goto LABEL_67;
      }
      unsigned int v20 = *a1;
      if (v20 < 0x21 || (v20 - 127) <= 0x21u)
      {
        ++a1;
      }
      else
      {
        if ((v20 & 0xC0) == 0x80) {
          goto LABEL_28;
        }
        if ((v20 & 0x80) != 0)
        {
          unint64_t v23 = (__clz(v20 ^ 0xFF) - 24);
          if (v18 - (unint64_t)a1 < v23) {
            goto LABEL_28;
          }
          switch(v23)
          {
            case 1uLL:
              goto LABEL_28;
            case 2uLL:
              if ((a1[1] & 0xC0) != 0x80) {
                goto LABEL_28;
              }
              uint64_t v21 = 2;
              break;
            case 3uLL:
              if ((a1[1] & 0xC0) != 0x80 || (a1[2] & 0xC0) != 0x80) {
                goto LABEL_28;
              }
              uint64_t v21 = 3;
              break;
            case 4uLL:
              if ((a1[1] & 0xC0) != 0x80 || (a1[2] & 0xC0) != 0x80 || (a1[3] & 0xC0) != 0x80) {
                goto LABEL_28;
              }
              uint64_t v21 = 4;
              break;
            default:
              goto LABEL_72;
          }
        }
        else
        {
          if ((unsigned __int8 *)v18 == a1) {
            goto LABEL_44;
          }
          uint64_t v21 = 1;
        }
        Unicode.Scalar.properties.getter();
        char v22 = Unicode.Scalar.Properties.isWhitespace.getter();
        (*v19)(v17, v14);
        a1 = (unsigned __int8 *)v45;
        unint64_t v18 = (unint64_t)v46;
        if ((v22 & 1) == 0) {
          goto LABEL_28;
        }
        a1 = (unsigned __int8 *)(v45 + v21);
        a3 = v42;
        a4 = v43;
      }
      unint64_t v45 = (unint64_t)a1;
      if (v18 < (unint64_t)(a1 + 1)) {
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_28:
  if ((unsigned __int8 *)v18 == a1) {
    goto LABEL_44;
  }
  uint64_t result = specialized XMLPlistMap.Value._parseXMLPlistInteger<A>(_:)((unint64_t)&v42, a9, a10);
  if ((v25 & 1) == 0) {
    return result;
  }
  unint64_t v40 = 0;
  unint64_t v41 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  unint64_t v40 = 0xD000000000000020;
  unint64_t v41 = 0x80000001823AA780;
  id v26 = v44;
  if ((unint64_t)v44 >= v45)
  {
    uint64_t v27 = 1;
LABEL_61:
    uint64_t v47 = v27;
    goto LABEL_62;
  }
  uint64_t v27 = 1;
  while (1)
  {
    if (*v26 == 13)
    {
      BOOL v28 = __OFADD__(v27++, 1);
      if (v28) {
        goto LABEL_70;
      }
      if ((unint64_t)(v26 + 1) < v45 && v26[1] == 10) {
        ++v26;
      }
      goto LABEL_32;
    }
    if (v43 < 2) {
      goto LABEL_71;
    }
    if (*(unsigned char *)(v42 + 1) == 10)
    {
      BOOL v28 = __OFADD__(v27++, 1);
      if (v28) {
        break;
      }
    }
LABEL_32:
    if ((unint64_t)++v26 >= v45) {
      goto LABEL_61;
    }
  }
  __break(1u);
LABEL_44:
  unint64_t v40 = 0;
  unint64_t v41 = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  unint64_t v40 = 0xD000000000000024;
  unint64_t v41 = 0x80000001823AA7B0;
  uint64_t v29 = v44;
  if ((unint64_t)v44 < v18)
  {
    uint64_t v30 = 1;
    while (1)
    {
      if (*v29 == 13)
      {
        BOOL v28 = __OFADD__(v30++, 1);
        if (v28) {
          goto LABEL_68;
        }
        if ((unint64_t)(v29 + 1) < v18 && v29[1] == 10) {
          ++v29;
        }
      }
      else
      {
        if (v43 < 2) {
          goto LABEL_69;
        }
        if (*(unsigned char *)(v42 + 1) == 10)
        {
          BOOL v28 = __OFADD__(v30++, 1);
          if (v28)
          {
            __break(1u);
            break;
          }
        }
      }
      if ((unint64_t)++v29 >= v18) {
        goto LABEL_59;
      }
    }
  }
  uint64_t v30 = 1;
LABEL_59:
  uint64_t v47 = v30;
LABEL_62:
  v31._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  uint64_t v33 = v40;
  uint64_t v32 = v41;
  type metadata accessor for DecodingError();
  swift_allocError();
  static DecodingError._dataCorrupted<A>(_:for:_:)(v33, v32, v36, v37, v38, v39, v34);
  swift_bridgeObjectRelease();
  return swift_willThrow();
}

unint64_t specialized XMLPlistMap.Value._parseXMLPlistInteger<A>(_:)(unint64_t result, uint64_t (*a2)(unint64_t, unint64_t, uint64_t), uint64_t (*a3)(void))
{
  uint64_t v3 = *(unsigned __int8 **)(result + 24);
  unint64_t v4 = *(void *)(result + 32);
  if ((unsigned __int8 *)v4 == v3) {
    return 0;
  }
  unint64_t v7 = result;
  uint64_t v8 = *(void *)result;
  uint64_t v9 = *(void *)(result + 8);
  Swift::Int v10 = v3 + 1;
  if (v4 < (unint64_t)(v3 + 1))
  {
    uint64_t v11 = 0;
    goto LABEL_11;
  }
  if ((uint64_t)&v3[-v8] < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (((v4 - (void)v3) & 0x8000000000000000) != 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((uint64_t)(v8 + v9 - v4) >= 0)
  {
    uint64_t v11 = 0;
    int v12 = *v3;
    if (v12 != 43)
    {
      if (v12 != 45) {
        goto LABEL_11;
      }
      uint64_t v11 = 1;
    }
    *(void *)(result + 24) = v10;
    specialized XMLPlistMap.Value._skipIntegerWhitespace(_:)((void *)result);
LABEL_11:
    uint64_t result = *(void *)(v7 + 24);
    if (v4 < result)
    {
      __break(1u);
    }
    else if ((uint64_t)(result - v8) >= 0)
    {
      if ((uint64_t)(v4 - result) >= 0)
      {
        if ((uint64_t)(v8 + v9 - v4) >= 0)
        {
          unint64_t v13 = result + 2;
          unint64_t v14 = v4 - (result + 2);
          if (v4 < result + 2 || *(unsigned char *)result != 48 || (*(unsigned __int8 *)(result + 1) | 0x20) != 0x78) {
            return a3();
          }
          *(void *)(v7 + 24) = v13;
          if ((((v13 - v8) | v14) & 0x8000000000000000) == 0) {
            return a2(result + 2, v14, v11);
          }
          goto LABEL_29;
        }
        goto LABEL_25;
      }
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

unint64_t specialized _parseIntegerDigits<A>(_:isNegative:)(unsigned char *a1, uint64_t a2, char a3)
{
  if (a2)
  {
    if (a2 < 1) {
      return 0;
    }
    unint64_t result = 0;
    uint64_t v5 = &a1[a2];
    while (*a1 - 48 <= 9)
    {
      unint64_t v6 = (*a1 - 48);
      BOOL v7 = !is_mul_ok(result, 0xAuLL);
      unint64_t v8 = 10 * result;
      unint64_t v9 = 10 * result + v6;
      BOOL v10 = __CFADD__(10 * result, v6);
      BOOL v11 = v8 >= v6;
      unint64_t v12 = v8 - v6;
      char v13 = !v11;
      if ((a3 & 1) == 0) {
        char v13 = v10;
      }
      unint64_t result = 0;
      if (!v7 && (v13 & 1) == 0)
      {
        unint64_t result = (a3 & 1) != 0 ? v12 : v9;
        if (++a1 < v5) {
          continue;
        }
      }
      return result;
    }
  }
  return 0;
}

{
  unsigned int v3;
  unsigned char *v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  unsigned __int8 v12;

  if (a2)
  {
    if (a2 < 1)
    {
      uint64_t v3 = 0;
      unint64_t v12 = 0;
      return v3 | ((unint64_t)v12 << 32);
    }
    uint64_t v3 = 0;
    unint64_t v4 = &a1[a2];
    while (*a1 - 48 <= 9)
    {
      uint64_t v5 = (*a1 - 48);
      unint64_t v6 = 10 * (int)v3;
      BOOL v7 = v6 != (int)v6;
      unint64_t v8 = v6 + v5;
      unint64_t v9 = __OFADD__(v6, v5);
      BOOL v10 = v6 - v5;
      BOOL v11 = __OFSUB__(v6, v5);
      if (a3) {
        unint64_t v9 = v11;
      }
      unint64_t v12 = 1;
      uint64_t v3 = 0;
      if (!v7 && !v9)
      {
        unint64_t v12 = 0;
        uint64_t v3 = (a3 & 1) != 0 ? v10 : v8;
        if (++a1 < v4) {
          continue;
        }
      }
      return v3 | ((unint64_t)v12 << 32);
    }
  }
  uint64_t v3 = 0;
  unint64_t v12 = 1;
  return v3 | ((unint64_t)v12 << 32);
}

{
  unsigned int v3;
  unsigned char *v4;
  unsigned int v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  BOOL v9;
  int v10;
  BOOL v11;
  unsigned __int8 v12;

  if (a2)
  {
    if (a2 < 1)
    {
      uint64_t v3 = 0;
      unint64_t v12 = 0;
      return v3 | ((unint64_t)v12 << 32);
    }
    uint64_t v3 = 0;
    unint64_t v4 = &a1[a2];
    while (*a1 - 48 <= 9)
    {
      uint64_t v5 = (*a1 - 48);
      unint64_t v6 = 10 * v3;
      BOOL v7 = (v6 & 0xFFFFFFFF00000000) != 0;
      unint64_t v8 = v6 + v5;
      unint64_t v9 = __CFADD__(v6, v5);
      BOOL v10 = v6 - v5;
      BOOL v11 = v6 < v5;
      if (a3) {
        unint64_t v9 = v11;
      }
      unint64_t v12 = 1;
      uint64_t v3 = 0;
      if (!v7 && !v9)
      {
        unint64_t v12 = 0;
        uint64_t v3 = (a3 & 1) != 0 ? v10 : v8;
        if (++a1 < v4) {
          continue;
        }
      }
      return v3 | ((unint64_t)v12 << 32);
    }
  }
  uint64_t v3 = 0;
  unint64_t v12 = 1;
  return v3 | ((unint64_t)v12 << 32);
}

{
  unint64_t result;
  unint64_t v6;
  unsigned char *v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unsigned long long v13;
  BOOL v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  char v19;

  if (!a2) {
    return 0;
  }
  if (a2 < 1) {
    return 0;
  }
  unint64_t result = 0;
  unint64_t v6 = 0;
  BOOL v7 = &a1[a2];
  while (*a1 - 48 < 0xA)
  {
    unint64_t v8 = (*a1 - 48);
    unint64_t v9 = !is_mul_ok(v6, 0xAuLL);
    BOOL v10 = (__PAIR128__(v6, result) * 0xA) >> 64;
    BOOL v11 = __CFADD__((result * (unsigned __int128)0xAuLL) >> 64, 10 * v6) || v9;
    unint64_t v12 = 10 * result;
    char v13 = __PAIR128__(v6, result) * 0xA + (*a1 - 48);
    unint64_t v14 = __CFADD__(__CFADD__(10 * result, v8), v10);
    uint64_t v15 = v12 >= v8;
    uint64_t v16 = v12 - v8;
    unint64_t v18 = v15;
    uint64_t v15 = v10 >= !v15;
    id v17 = v10 - !v18;
    id v19 = !v15;
    if (a3) {
      unint64_t v14 = v19;
    }
    unint64_t result = 0;
    if ((v11 & 1) == 0 && !v14)
    {
      unint64_t v6 = (a3 & 1) != 0 ? v17 : *((void *)&v13 + 1);
      unint64_t result = (a3 & 1) != 0 ? v16 : v13;
      if (++a1 < v7) {
        continue;
      }
    }
    return result;
  }
  return 0;
}

uint64_t PredicateExpressions.NotEqual.description.getter()
{
  _StringGuts.grow(_:)(26);
  v0._unint64_t countAndFlagsBits = 0x6C61757145746F4ELL;
  v0._object = (void *)0xEE00203A73686C28;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._unint64_t countAndFlagsBits = 0x203A736872202CLL;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._unint64_t countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t @objc static NSData._readBytesAndEncoding(fromPath:maxLength:encoding:bytes:length:didMap:options:reportProgress:)(uint64_t a1, uint64_t a2, void *a3, off_t a4, void *a5, char **a6, void *a7, BOOL *a8, void *a9, unsigned __int8 a10)
{
  id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  specialized static NSData._readBytesAndEncoding(fromPath:maxLength:encoding:bytes:length:didMap:options:reportProgress:)((uint64_t)v15, v16, a4, a5, a6, a7, a8, a9, a10);
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t specialized static NSData._readBytesAndEncoding(fromPath:maxLength:encoding:bytes:length:didMap:options:reportProgress:)(uint64_t a1, uint64_t a2, off_t a3, void *a4, char **a5, void *a6, BOOL *a7, void *a8, unsigned __int8 a9)
{
  uint64_t v39 = MEMORY[0x1E4FBC868];
  v34[0] = a1;
  v34[1] = a2;
  v34[2] = 0;
  char v35 = 0;
  BOOL v12 = a3 == 0x7FFFFFFFFFFFFFFFLL;
  if (a3 == 0x7FFFFFFFFFFFFFFFLL) {
    off_t v13 = 0;
  }
  else {
    off_t v13 = a3;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"com.apple.TextEncoding");
  *(void *)(inited + 40) = v15;
  readBytesFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)((uint64_t)v34, a9, v13, v12, a8, inited, &v39, &v36);
  swift_setDeallocating();
  swift_arrayDestroy();
  if (!v9)
  {
    uint64_t v16 = v36;
    uint64_t v30 = v37;
    unint64_t v17 = v38;
    id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"com.apple.TextEncoding");
    uint64_t v20 = v39;
    if (*(void *)(v39 + 16)
      && (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18, v19), (v22 & 1) != 0))
    {
      uint64_t v29 = v16;
      unint64_t v23 = (uint64_t *)(*(void *)(v20 + 56) + 16 * v21);
      uint64_t v25 = *v23;
      unint64_t v24 = v23[1];
      outlined copy of Data._Representation(*v23, v24);
      swift_bridgeObjectRelease();
      encodingFromDataForExtendedAttribute(_:)(v25, v24, (uint64_t)&v36);
      if ((v37 & 1) == 0)
      {
        *a4 = v36;
        outlined consume of Data._Representation(v25, v24);
        uint64_t v16 = v29;
        uint64_t v27 = v30;
        goto LABEL_11;
      }
      outlined consume of Data._Representation(v25, v24);
      id v26 = a4;
      uint64_t v16 = v29;
    }
    else
    {
      swift_bridgeObjectRelease();
      id v26 = a4;
    }
    uint64_t v27 = v30;
    *id v26 = 0xFFFFFFFFLL;
LABEL_11:
    *a5 = v16;
    *a6 = v27;
    *a7 = v17 == 1;
    outlined consume of Data.Deallocator?(v17);
  }
  return swift_bridgeObjectRelease();
}

void appendArgumentInfoToDescription(void *a1, uint64_t a2, uint64_t *a3, int a4, void *a5)
{
  BOOL v7 = a3;
  v18[1] = *MEMORY[0x1E4F143B8];
  objc_msgSend(a5, "appendFormat:", @"{%s} ", (char *)a3 + 37);
  unsigned int v10 = *((_DWORD *)v7 + 4);
  if (v10)
  {
    __int16 v11 = *((_WORD *)v7 + 17);
    if ((v11 & 0x80) == 0)
    {
LABEL_5:
      if ((v11 & 0x2000) != 0)
      {
        v18[0] = 0;
        if (a4) {
          [a1 getReturnValue:v18];
        }
        else {
          [a1 getArgument:v18 atIndex:a2];
        }
        objc_msgSend(a5, "appendFormat:", @"%p", v18[0]);
        if (*((__int16 *)v7 + 17) < 0) {
          [a5 appendFormat:@" (block)"];
        }
        BOOL v12 = @"\n";
      }
      else
      {
        if ((v11 & 0x1000) != 0)
        {
          v18[0] = 0;
          if (a4) {
            [a1 getReturnValue:v18];
          }
          else {
            [a1 getArgument:v18 atIndex:a2];
          }
          objc_msgSend(a5, "appendFormat:", @"%p\n", v18[0]);
          return;
        }
        if ((v11 & 0x4000) == 0 && *((unsigned char *)v7 + 36) != 58)
        {
          unint64_t v14 = (char *)malloc_type_malloc(v10, 0x100004077774924uLL);
          bzero(v14, *((unsigned int *)v7 + 4));
          if (a4) {
            [a1 getReturnValue:v14];
          }
          else {
            [a1 getArgument:v14 atIndex:a2];
          }
          int v15 = *((char *)v7 + 36);
          if (v15 <= 80)
          {
            if ((v15 - 66) < 2)
            {
LABEL_40:
              objc_msgSend(a5, "appendFormat:", @"%d '%c'", *v14, *v14);
            }
            else if (v15 == 73)
            {
              objc_msgSend(a5, "appendFormat:", @"%u", *v14, v17);
            }
            else if (v15 == 76)
            {
              objc_msgSend(a5, "appendFormat:", @"%lu", *v14, v17);
            }
            else
            {
LABEL_45:
              objc_msgSend(a5, "appendString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", v14, *((unsigned int *)v7 + 4)), "debugDescription"));
            }
          }
          else
          {
            switch(*((unsigned char *)v7 + 36))
            {
              case 'c':
                goto LABEL_40;
              case 'd':
              case 'f':
                objc_msgSend(a5, "appendFormat:", @"%f", (double)*v14, v17);
                break;
              case 'e':
              case 'g':
              case 'h':
              case 'j':
              case 'k':
              case 'm':
              case 'n':
              case 'o':
              case 'p':
              case 'r':
                goto LABEL_45;
              case 'i':
                objc_msgSend(a5, "appendFormat:", @"%d", *v14, v17);
                break;
              case 'l':
                objc_msgSend(a5, "appendFormat:", @"%ld", *v14, v17);
                break;
              case 'q':
                objc_msgSend(a5, "appendFormat:", @"%lld", *v14, v17);
                break;
              case 's':
                objc_msgSend(a5, "appendFormat:", @"%hd", *v14, v17);
                break;
              default:
                if (v15 == 81)
                {
                  objc_msgSend(a5, "appendFormat:", @"%llu", *v14, v17);
                }
                else
                {
                  if (v15 != 83) {
                    goto LABEL_45;
                  }
                  objc_msgSend(a5, "appendFormat:", @"%hu", (unsigned __int16)*v14, v17);
                }
                break;
            }
          }
          [a5 appendString:@"\n"];
          free(v14);
          return;
        }
        v18[0] = 0;
        if (a4) {
          [a1 getReturnValue:v18];
        }
        else {
          [a1 getArgument:v18 atIndex:a2];
        }
        off_t v13 = (const char *)v18[0];
        if (!v18[0]) {
          off_t v13 = "null";
        }
        uint64_t v16 = v13;
        BOOL v12 = @"%s\n";
      }
      objc_msgSend(a5, "appendFormat:", v12, v16);
      return;
    }
    while (1)
    {
      BOOL v7 = (uint64_t *)*v7;
      objc_msgSend(a5, "appendFormat:", @"{%s} ", (char *)v7 + 37);
      unsigned int v10 = *((_DWORD *)v7 + 4);
      if (!v10) {
        break;
      }
      __int16 v11 = *((_WORD *)v7 + 17);
      if ((v11 & 0x80) == 0) {
        goto LABEL_5;
      }
    }
  }

  [a5 appendFormat:@"void\n"];
}

void _NSSwiftURLComponents.rangeOfQuery.getter()
{
  Swift::String v1 = v0;
  Swift::String v2 = *(os_unfair_lock_s **)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  uint64_t v3 = v2 + 4;
  unint64_t v4 = v2 + 43;
  os_unfair_lock_lock(v2 + 43);
  closure #1 in _NSSwiftURLComponents.components.getter(v3, &v17);
  os_unfair_lock_unlock(v4);
  v15[6] = v23;
  v15[7] = v24;
  v16[0] = v25[0];
  *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v25 + 10);
  v15[2] = v19;
  v15[3] = v20;
  v15[4] = v21;
  v15[5] = v22;
  v15[0] = v17;
  v15[1] = v18;
  v25[8] = v23;
  v25[9] = v24;
  v26[0] = v25[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v25 + 10);
  v25[4] = v19;
  v25[5] = v20;
  v25[6] = v21;
  v25[7] = v22;
  void v25[2] = v17;
  _OWORD v25[3] = v18;
  if ((void)v17)
  {
    if (BYTE8(v17))
    {
      uint64_t v5 = *(os_unfair_lock_s **)(*(void *)&v15[0] + 184);
      char v6 = *(unsigned char *)(*(void *)&v15[0] + 192);
      goto LABEL_10;
    }
  }
  else if (BYTE8(v17))
  {
LABEL_8:
    uint64_t v5 = 0;
    char v6 = 1;
    goto LABEL_10;
  }
  uint64_t v7 = URLComponents._URLComponents.computedString.getter();
  if (!v8) {
    goto LABEL_8;
  }
  char v6 = 1;
  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v7, v8, 1);
  swift_bridgeObjectRelease();
  if (v9)
  {
    uint64_t v5 = *(os_unfair_lock_s **)(v9 + 184);
    char v6 = *(unsigned char *)(v9 + 192);
    swift_release();
  }
  else
  {
    uint64_t v5 = 0;
  }
LABEL_10:
  outlined release of URLComponents((uint64_t)v15);
  id v10 = objc_msgSend(v1, sel_string);
  if (v10)
  {
    __int16 v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

    if (v6)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v12 = StringProtocol._toUTF16Offsets(_:)();
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();
      if (__OFSUB__(v14, v12))
      {
        __break(1u);
        os_unfair_lock_unlock(v5);
        __break(1u);
      }
    }
  }
}

void _NSSwiftURLComponents.rangeOfPath.getter()
{
  Swift::String v1 = v0;
  Swift::String v2 = *(os_unfair_lock_s **)&v0[OBJC_IVAR____NSSwiftURLComponents_lock];
  uint64_t v3 = v2 + 4;
  unint64_t v4 = v2 + 43;
  os_unfair_lock_lock(v2 + 43);
  closure #1 in _NSSwiftURLComponents.components.getter(v3, &v17);
  os_unfair_lock_unlock(v4);
  v15[6] = v23;
  v15[7] = v24;
  v16[0] = v25[0];
  *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v25 + 10);
  v15[2] = v19;
  v15[3] = v20;
  v15[4] = v21;
  v15[5] = v22;
  v15[0] = v17;
  v15[1] = v18;
  v25[8] = v23;
  v25[9] = v24;
  v26[0] = v25[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v25 + 10);
  v25[4] = v19;
  v25[5] = v20;
  v25[6] = v21;
  v25[7] = v22;
  void v25[2] = v17;
  _OWORD v25[3] = v18;
  if ((void)v17)
  {
    if (BYTE8(v17))
    {
      uint64_t v5 = *(os_unfair_lock_s **)(*(void *)&v15[0] + 160);
      char v6 = *(unsigned char *)(*(void *)&v15[0] + 168);
      goto LABEL_10;
    }
  }
  else if (BYTE8(v17))
  {
LABEL_8:
    uint64_t v5 = 0;
    char v6 = 1;
    goto LABEL_10;
  }
  uint64_t v7 = URLComponents._URLComponents.computedString.getter();
  if (!v8) {
    goto LABEL_8;
  }
  char v6 = 1;
  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v7, v8, 1);
  swift_bridgeObjectRelease();
  if (v9)
  {
    uint64_t v5 = *(os_unfair_lock_s **)(v9 + 160);
    char v6 = *(unsigned char *)(v9 + 168);
    swift_release();
  }
  else
  {
    uint64_t v5 = 0;
  }
LABEL_10:
  outlined release of URLComponents((uint64_t)v15);
  id v10 = objc_msgSend(v1, sel_string);
  if (v10)
  {
    __int16 v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

    if (v6)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v12 = StringProtocol._toUTF16Offsets(_:)();
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();
      if (__OFSUB__(v14, v12))
      {
        __break(1u);
        os_unfair_lock_unlock(v5);
        __break(1u);
      }
    }
  }
}

uint64_t partial apply for closure #1 in _NSSwiftURLComponents.user.setter(uint64_t a1)
{
  return closure #1 in _NSSwiftURLComponents.user.setter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t closure #1 in _NSSwiftURLComponents.user.setter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 10) = 0;
  if (!a3)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 40) = a2;
    *(void *)(a1 + 48) = a3;
    return result;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v27 = a2;
    uint64_t v28 = a3;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    __int16 v11 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v12 = (unsigned __int16 *)objc_msgSend(v11, sel__fastCharacterContents, v27, v28);
    id v13 = v11;
    if (v12)
    {
      StringProtocol._ephemeralString.getter();
      uint64_t v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v15 = objc_msgSend(v14, sel_length, a2, a3);
      swift_unknownObjectRelease();
      char v16 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v12, (uint64_t)v15, 2u, 0);
    }
    else
    {
      char v16 = specialized Sequence.allSatisfy(_:)(a2, a3, 2);
    }
    uint64_t v9 = swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(a3) & 0xF;
      unint64_t v27 = a2;
      uint64_t v28 = a3 & 0xFFFFFFFFFFFFFFLL;
      char v6 = (char *)&v27;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      char v6 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      char v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    BOOL v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 0);
    uint64_t v9 = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
  }
  uint64_t v17 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v17 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    unint64_t v27 = a2;
    uint64_t v28 = a3;
    MEMORY[0x1F4188790](v9);
    void v25[2] = &v27;
    char v26 = 2;
    swift_bridgeObjectRetain();
    long long v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v25, a2, a3);
    if (v19)
    {
      unint64_t v20 = (unint64_t)v18;
      unint64_t v21 = v19;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      unint64_t v22 = v27;
      unint64_t v23 = v28;
      swift_bridgeObjectRetain();
      unint64_t v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
      unint64_t v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = v20;
  *(void *)(a1 + 48) = v21;
  return result;
}

Swift::String_optional __swiftcall Locale.localizedString(for:)(Foundation::Calendar::Identifier a1)
{
  char v2 = *(unsigned char *)a1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v8 = v2;
  uint64_t v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 112))(&v8, ObjectType, v3);
  result.value._object = v6;
  result.value._unint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t protocol witness for _LocaleProtocol.calendarIdentifierDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.calendarIdentifierDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.calendarIdentifierDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.calendarIdentifierDisplayName(for:)(a1, *(unsigned __int8 *)(v2 + 16), a2);
}

uint64_t closure #1 in _LocaleICU.calendarIdentifierDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 504);
  if (*(void *)(v7 + 16))
  {
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v9)
    {
      id v10 = (uint64_t *)(*(void *)(v7 + 56) + 16 * v8);
      uint64_t v11 = v10[1];
      *a3 = *v10;
      a3[1] = v11;
      return swift_bridgeObjectRetain();
    }
  }
  uint64_t v13 = swift_retain();
  uint64_t v14 = specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v13, a2);
  uint64_t v16 = v15;
  swift_release();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = *(void *)(a1 + 504);
  *(void *)(a1 + 504) = 0x8000000000000000;
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v20 = *(void *)(v43 + 16);
  BOOL v21 = (v18 & 1) == 0;
  uint64_t v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
  }
  else
  {
    char v3 = v18;
    if (*(void *)(v43 + 24) < v22)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
      uint64_t v23 = v43;
      uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v25 & 1)) {
        goto LABEL_50;
      }
      unint64_t v19 = v24;
      if ((v3 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_11:
      char v26 = (uint64_t *)(*(void *)(v23 + 56) + 16 * v19);
      swift_bridgeObjectRelease();
      *char v26 = v14;
      v26[1] = v16;
LABEL_47:
      *(void *)(a1 + 504) = v23;
      uint64_t result = swift_bridgeObjectRelease();
      *a3 = v14;
      a3[1] = v16;
      return result;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v23 = v43;
      if (v18) {
        goto LABEL_11;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v19, a2, v14, v16, (void *)v23);
      goto LABEL_47;
    }
  }
  unint64_t v40 = v19;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, String?>);
  uint64_t v27 = static _DictionaryStorage.copy(original:)();
  uint64_t v23 = v27;
  if (!*(void *)(v43 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    unint64_t v19 = v40;
    if (v3) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }
  uint64_t v28 = (void *)(v27 + 64);
  unint64_t v29 = (unint64_t)((1 << *(unsigned char *)(v23 + 32)) + 63) >> 6;
  __src = (void *)(v43 + 64);
  if (v23 != v43 || (unint64_t)v28 >= v43 + 64 + 8 * v29) {
    memmove(v28, __src, 8 * v29);
  }
  int64_t v30 = 0;
  *(void *)(v23 + 16) = *(void *)(v43 + 16);
  uint64_t v31 = 1 << *(unsigned char *)(v43 + 32);
  uint64_t v32 = -1;
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  unint64_t v33 = v32 & *(void *)(v43 + 64);
  int64_t v42 = (unint64_t)(v31 + 63) >> 6;
  while (1)
  {
    if (v33)
    {
      unint64_t v34 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      unint64_t v35 = v34 | (v30 << 6);
      goto LABEL_21;
    }
    int64_t v37 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v37 >= v42) {
      goto LABEL_45;
    }
    unint64_t v38 = *((void *)__src + v37);
    ++v30;
    if (!v38)
    {
      int64_t v30 = v37 + 1;
      if (v37 + 1 >= v42) {
        goto LABEL_45;
      }
      unint64_t v38 = *((void *)__src + v30);
      if (!v38)
      {
        int64_t v30 = v37 + 2;
        if (v37 + 2 >= v42) {
          goto LABEL_45;
        }
        unint64_t v38 = *((void *)__src + v30);
        if (!v38)
        {
          int64_t v30 = v37 + 3;
          if (v37 + 3 >= v42) {
            goto LABEL_45;
          }
          unint64_t v38 = *((void *)__src + v30);
          if (!v38)
          {
            int64_t v30 = v37 + 4;
            if (v37 + 4 >= v42) {
              goto LABEL_45;
            }
            unint64_t v38 = *((void *)__src + v30);
            if (!v38)
            {
              int64_t v30 = v37 + 5;
              if (v37 + 5 >= v42) {
                goto LABEL_45;
              }
              unint64_t v38 = *((void *)__src + v30);
              if (!v38)
              {
                int64_t v30 = v37 + 6;
                if (v37 + 6 >= v42) {
                  goto LABEL_45;
                }
                unint64_t v38 = *((void *)__src + v30);
                if (!v38) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    unint64_t v33 = (v38 - 1) & v38;
    unint64_t v35 = __clz(__rbit64(v38)) + (v30 << 6);
LABEL_21:
    long long v36 = *(_OWORD *)(*(void *)(v43 + 56) + 16 * v35);
    *(unsigned char *)(*(void *)(v23 + 48) + v35) = *(unsigned char *)(*(void *)(v43 + 48) + v35);
    *(_OWORD *)(*(void *)(v23 + 56) + 16 * v35) = v36;
    swift_bridgeObjectRetain();
  }
  int64_t v39 = v37 + 7;
  if (v39 >= v42) {
    goto LABEL_45;
  }
  unint64_t v38 = *((void *)__src + v39);
  if (v38)
  {
    int64_t v30 = v39;
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v30 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      break;
    }
    if (v30 >= v42) {
      goto LABEL_45;
    }
    unint64_t v38 = *((void *)__src + v30);
    ++v39;
    if (v38) {
      goto LABEL_44;
    }
  }
LABEL_49:
  __break(1u);
LABEL_50:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall URL.appendPathComponent(_:isDirectory:)(Swift::String _, Swift::Bool isDirectory)
{
  char v3 = v2;
  object = _._object;
  unint64_t countAndFlagsBits = _._countAndFlagsBits;
  uint64_t v8 = (void *)*v2;
  uint64_t v7 = (unsigned char *)v2[1];
  uint64_t v9 = v2[2];
  if (_foundation_swift_url_feature_enabled())
  {
    if (_foundation_swift_url_feature_enabled())
    {
      specialized URL.appending<A>(path:directoryHint:encodingSlashes:)(countAndFlagsBits, object, !isDirectory, 0, v8, v7, v9, &v89);

LABEL_14:
      swift_release();
      swift_release();
      uint64_t v7 = (unsigned char *)*((void *)&v89 + 1);
      uint64_t v8 = (void *)v89;
      uint64_t v9 = *(void *)v90;
      goto LABEL_15;
    }
    v22._unint64_t countAndFlagsBits = 47;
    v22._object = (void *)0xE100000000000000;
    String.hasSuffix(_:)(v22);
    *(void *)&long long v89 = countAndFlagsBits;
    *((void *)&v89 + 1) = object;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    uint64_t v23 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v10 = objc_msgSend(v8, sel_URLByAppendingPathComponent_isDirectory_, v23, isDirectory);
    swift_unknownObjectRelease();
    if (v10)
    {
LABEL_13:
      URL.init(reference:)(v10, &v89);

      goto LABEL_14;
    }
    *(void *)&long long v89 = v8;
    *((void *)&v89 + 1) = v7;
    *(void *)Swift::Int v90 = v9;
    uint64_t v24 = URL.absoluteString.getter();
    specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v24, v25, 1, (uint64_t)v79);
    outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v78, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)&v80, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v80) == 1) {
      goto LABEL_15;
    }
    long long v91 = v86;
    *(_OWORD *)Swift::Int v92 = v87;
    *(_OWORD *)&v92[16] = v88[0];
    *(_OWORD *)&v92[26] = *(_OWORD *)((char *)v88 + 10);
    *(_OWORD *)&v90[16] = v82;
    *(_OWORD *)&v90[32] = v83;
    *(_OWORD *)&v90[48] = v84;
    *(_OWORD *)&v90[64] = v85;
    long long v89 = v80;
    *(_OWORD *)Swift::Int v90 = v81;
    outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v77, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v77);
    URLComponents._URLComponents.path.getter();
    outlined release of URLComponents?(v79);
    char v26 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    unint64_t v66 = countAndFlagsBits;
    unint64_t v67 = (unint64_t)object;
    swift_bridgeObjectRetain();
    String.init<A>(_:)();
    uint64_t v27 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v28 = objc_msgSend(v26, sel_stringByAppendingPathComponent_, v27);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v29 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    unint64_t v31 = v30;

    if ((v31 & 0x2000000000000000) != 0) {
      unint64_t v32 = HIBYTE(v31) & 0xF;
    }
    else {
      unint64_t v32 = v29 & 0xFFFFFFFFFFFFLL;
    }
    outlined init with take of LocalePreferences?((uint64_t)&v91 + 8, (uint64_t)v93, &demangling cache variable for type metadata for String?);
    if (v32)
    {
      swift_bridgeObjectRetain();
      unint64_t v32 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v29, v31);
      unint64_t v34 = v33;
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v34 = 0xE000000000000000;
    }
    outlined release of String((uint64_t)v93);
    if (isDirectory
      && (v41._unint64_t countAndFlagsBits = 47, v41._object = (void *)0xE100000000000000, !String.hasSuffix(_:)(v41)))
    {
      unint64_t v66 = v29;
      unint64_t v67 = v31;
      swift_bridgeObjectRetain();
      v45._unint64_t countAndFlagsBits = 47;
      v45._object = (void *)0xE100000000000000;
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      unint64_t v46 = HIBYTE(v31) & 0xF;
      if ((v31 & 0x2000000000000000) == 0) {
        unint64_t v46 = v66 & 0xFFFFFFFFFFFFLL;
      }
      if (v46)
      {
        unint64_t v32 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v66, v67);
        unint64_t v48 = v47;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v34 = v48;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v32 = 0;
        unint64_t v34 = 0xE000000000000000;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    unint64_t v66 = v89;
    LOBYTE(v67) = 0;
    *(_DWORD *)((char *)&v67 + 1) = *(_DWORD *)((char *)&v89 + 9);
    *(_WORD *)((char *)&v67 + 5) = BYTE13(v89);
    HIBYTE(v67) = HIBYTE(v89);
    char v68 = v90[0];
    *(_OWORD *)char v69 = *(_OWORD *)&v90[8];
    *(_OWORD *)&v69[16] = *(_OWORD *)&v90[24];
    *(_OWORD *)&v69[32] = *(_OWORD *)&v90[40];
    *(_OWORD *)&v69[48] = *(_OWORD *)&v90[56];
    *(void *)&v69[64] = *(void *)&v90[72];
    char v70 = v91;
    unint64_t v71 = v32;
    unint64_t v72 = v34;
    long long v73 = *(_OWORD *)&v92[8];
    long long v74 = *(_OWORD *)&v92[24];
    char v75 = v92[40];
    char v76 = v92[41];
    goto LABEL_29;
  }
  id v10 = objc_msgSend(v8, sel_URLByAppendingPathComponent_isDirectory_, String._bridgeToObjectiveCImpl()(), isDirectory);
  swift_unknownObjectRelease();
  if (v10) {
    goto LABEL_13;
  }
  *(void *)&long long v89 = v8;
  *((void *)&v89 + 1) = v7;
  *(void *)Swift::Int v90 = v9;
  uint64_t v11 = URL.absoluteString.getter();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(v11, v12, 1, (uint64_t)v79);
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v78, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)&v80, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)&v80) != 1)
  {
    long long v91 = v86;
    *(_OWORD *)Swift::Int v92 = v87;
    *(_OWORD *)&v92[16] = v88[0];
    *(_OWORD *)&v92[26] = *(_OWORD *)((char *)v88 + 10);
    *(_OWORD *)&v90[16] = v82;
    *(_OWORD *)&v90[32] = v83;
    *(_OWORD *)&v90[48] = v84;
    *(_OWORD *)&v90[64] = v85;
    long long v89 = v80;
    *(_OWORD *)Swift::Int v90 = v81;
    outlined init with take of LocalePreferences?((uint64_t)v78, (uint64_t)v77, &demangling cache variable for type metadata for URLComponents._URLComponents?);
    outlined retain of URLComponents((uint64_t)v77);
    URLComponents._URLComponents.path.getter();
    outlined release of URLComponents?(v79);
    uint64_t v13 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v14 = objc_msgSend(v13, sel_stringByAppendingPathComponent_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v15 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    unint64_t v17 = v16;

    if (isDirectory)
    {
      unint64_t v66 = v15;
      unint64_t v67 = v17;
      swift_bridgeObjectRetain();
      v18._unint64_t countAndFlagsBits = 47;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
    }
    uint64_t v19 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0) {
      uint64_t v19 = v15 & 0xFFFFFFFFFFFFLL;
    }
    if (v19)
    {
      unint64_t v20 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v15, v17);
      unint64_t v49 = v21;
      unint64_t v50 = v20;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v49 = 0xE000000000000000;
      unint64_t v50 = 0;
    }
    char v63 = v92[40];
    char v64 = v92[41];
    uint64_t v61 = *(void *)&v92[32];
    uint64_t v62 = *(void *)&v92[24];
    uint64_t v59 = *(void *)&v92[16];
    uint64_t v60 = *(void *)&v92[8];
    char v58 = v91;
    long long v57 = *(_OWORD *)&v90[64];
    long long v56 = *(_OWORD *)&v90[48];
    long long v55 = *(_OWORD *)&v90[32];
    uint64_t v54 = *(void *)&v90[8];
    long long v53 = *(_OWORD *)&v90[16];
    char v51 = HIBYTE(v89);
    char v52 = v90[0];
    unsigned __int8 v35 = BYTE13(v89);
    char v36 = BYTE12(v89);
    char v37 = BYTE11(v89);
    char v38 = BYTE10(v89);
    char v39 = BYTE9(v89);
    unint64_t v40 = v89;
    outlined init with take of LocalePreferences?((uint64_t)&v91 + 8, (uint64_t)v93, &demangling cache variable for type metadata for String?);
    outlined release of String((uint64_t)v93);
    unint64_t v66 = v40;
    LOBYTE(v67) = 0;
    BYTE1(v67) = v39;
    BYTE2(v67) = v38;
    BYTE3(v67) = v37;
    BYTE4(v67) = v36;
    *(_WORD *)((char *)&v67 + 5) = v35;
    HIBYTE(v67) = v51;
    char v68 = v52;
    *(void *)char v69 = v54;
    *(_OWORD *)&v69[8] = v53;
    *(_OWORD *)&v69[24] = v55;
    *(_OWORD *)&v69[40] = v56;
    *(_OWORD *)&v69[56] = v57;
    char v70 = v58;
    unint64_t v71 = v50;
    unint64_t v72 = v49;
    *(void *)&long long v73 = v60;
    *((void *)&v73 + 1) = v59;
    *(void *)&long long v74 = v62;
    *((void *)&v74 + 1) = v61;
    char v75 = v63;
    char v76 = v64;
LABEL_29:
    URLComponents.url.getter(v65);
    outlined release of URLComponents((uint64_t)&v66);
    uint64_t v42 = v65[0];
    if (v65[0])
    {
      uint64_t v44 = v65[1];
      uint64_t v43 = v65[2];

      swift_release();
      swift_release();
      uint64_t v8 = (void *)v42;
      uint64_t v7 = (unsigned char *)v44;
      uint64_t v9 = v43;
    }
  }
LABEL_15:
  *char v3 = v8;
  v3[1] = v7;
  v3[2] = v9;
}

uint64_t closure #1 in NSURLSession.data(from:delegate:)()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in NSURLSession.data(from:delegate:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    char v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  long long v8;
  uint64_t v9;

  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v8 = *(_OWORD *)(v0 + 40);
  char v3 = swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v3 + 32) = v8;
  *(void *)(v3 + 48) = v2;
  *(void *)(v3 + 56) = v1;
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *unint64_t v4 = v0;
  v4[1] = closure #1 in NSURLSession.data(from:delegate:);
  char v6 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v6, 0, 0, 0xD000000000000014, 0x80000001823ADC10, partial apply for closure #1 in closure #1 in NSURLSession.data(from:delegate:), v3, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

double Locale.init(components:)@<D0>(void *__src@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = (uint64_t)memcpy(v7, __src, sizeof(v7));
  if (one-time initialization token for cache != -1) {
    uint64_t v3 = swift_once();
  }
  unint64_t v4 = (os_unfair_lock_s *)static LocaleCache.cache;
  MEMORY[0x1F4188790](v3);
  swift_retain_n();
  os_unfair_lock_lock(v4 + 31);
  partial apply for closure #1 in LocaleCache.fixedComponents(_:)((uint64_t)&v4[4], &v6);
  os_unfair_lock_unlock(v4 + 31);
  swift_release_n();
  outlined release of Locale.Components(v7);
  double result = *(double *)&v6;
  *a2 = v6;
  return result;
}

uint64_t partial apply for closure #1 in LocaleCache.fixedComponents(_:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return closure #1 in LocaleCache.fixedComponents(_:)(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t closure #1 in LocaleCache.fixedComponents(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 40);
  if (*(void *)(v7 + 16))
  {
    outlined retain of Locale.Components(a2);
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v9)
    {
      long long v52 = *(_OWORD *)(*(void *)(v7 + 56) + 16 * v8);
      swift_unknownObjectRetain();
      uint64_t result = (uint64_t)outlined release of Locale.Components(a2);
      long long v11 = v52;
LABEL_52:
      *a3 = v11;
      return result;
    }
    outlined release of Locale.Components(a2);
  }
  char v51 = a3;
  type metadata accessor for _LocaleICU();
  uint64_t v12 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (void (*)(uint64_t))type metadata accessor for _LocaleICU);
  memcpy(__dst, a2, 0x160uLL);
  swift_allocObject();
  outlined retain of Locale.Components(a2);
  uint64_t v13 = _LocaleICU.init(components:)(__dst);
  outlined retain of Locale.Components(a2);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *(void *)(a1 + 40);
  uint64_t v15 = v54;
  *(void *)(a1 + 40) = 0x8000000000000000;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v3 = v16;
  if (*(void *)(v15 + 24) >= v20)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v21 = v15;
      if ((v16 & 1) == 0) {
        goto LABEL_49;
      }
LABEL_12:
      uint64_t v24 = (uint64_t *)(*(void *)(v21 + 56) + 16 * v17);
      swift_unknownObjectRelease();
      *uint64_t v24 = v13;
      v24[1] = v12;
LABEL_51:
      *(void *)(a1 + 40) = v21;
      swift_bridgeObjectRelease();
      uint64_t result = (uint64_t)outlined release of Locale.Components(a2);
      *(void *)&long long v11 = v13;
      *((void *)&v11 + 1) = v12;
      a3 = v51;
      goto LABEL_52;
    }
LABEL_14:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Components, _LocaleProtocol>);
    uint64_t v25 = static _DictionaryStorage.copy(original:)();
    uint64_t v21 = v25;
    if (*(void *)(v15 + 16))
    {
      char v26 = (void *)(v25 + 64);
      unint64_t v27 = (unint64_t)((1 << *(unsigned char *)(v21 + 32)) + 63) >> 6;
      if (v21 != v15 || (unint64_t)v26 >= v15 + 64 + 8 * v27) {
        memmove(v26, (const void *)(v15 + 64), 8 * v27);
      }
      int64_t v28 = 0;
      *(void *)(v21 + 16) = *(void *)(v15 + 16);
      uint64_t v29 = 1 << *(unsigned char *)(v15 + 32);
      uint64_t v30 = -1;
      if (v29 < 64) {
        uint64_t v30 = ~(-1 << v29);
      }
      unint64_t v31 = v30 & *(void *)(v15 + 64);
      uint64_t v44 = v15 + 64;
      int64_t v45 = (unint64_t)(v29 + 63) >> 6;
      while (1)
      {
        if (v31)
        {
          uint64_t v47 = (v31 - 1) & v31;
          int64_t v48 = v28;
          unint64_t v32 = __clz(__rbit64(v31)) | (v28 << 6);
        }
        else
        {
          int64_t v36 = v28 + 1;
          if (__OFADD__(v28, 1)) {
            goto LABEL_54;
          }
          if (v36 >= v45) {
            break;
          }
          unint64_t v37 = *(void *)(v44 + 8 * v36);
          int64_t v38 = v28 + 1;
          if (!v37)
          {
            int64_t v38 = v36 + 1;
            if (v36 + 1 >= v45) {
              break;
            }
            unint64_t v37 = *(void *)(v44 + 8 * v38);
            if (!v37)
            {
              int64_t v38 = v36 + 2;
              if (v36 + 2 >= v45) {
                break;
              }
              unint64_t v37 = *(void *)(v44 + 8 * v38);
              if (!v37)
              {
                int64_t v38 = v36 + 3;
                if (v36 + 3 >= v45) {
                  break;
                }
                unint64_t v37 = *(void *)(v44 + 8 * v38);
                if (!v37)
                {
                  if (v36 + 4 >= v45) {
                    break;
                  }
                  int64_t v38 = v36 + 4;
                  unint64_t v37 = *(void *)(v44 + 8 * (v36 + 4));
                  if (!v37)
                  {
                    if (v36 + 5 >= v45) {
                      break;
                    }
                    int64_t v38 = v36 + 5;
                    unint64_t v37 = *(void *)(v44 + 8 * (v36 + 5));
                    if (!v37)
                    {
                      if (v36 + 6 >= v45) {
                        break;
                      }
                      int64_t v38 = v36 + 6;
                      unint64_t v37 = *(void *)(v44 + 8 * (v36 + 6));
                      if (!v37)
                      {
                        if (v36 + 7 >= v45) {
                          break;
                        }
                        int64_t v38 = v36 + 7;
                        unint64_t v37 = *(void *)(v44 + 8 * (v36 + 7));
                        if (!v37)
                        {
                          int64_t v39 = v36 + 8;
                          if (v39 >= v45) {
                            break;
                          }
                          unint64_t v37 = *(void *)(v44 + 8 * v39);
                          if (!v37)
                          {
                            while (1)
                            {
                              int64_t v38 = v39 + 1;
                              if (__OFADD__(v39, 1)) {
                                goto LABEL_55;
                              }
                              if (v38 >= v45) {
                                goto LABEL_48;
                              }
                              unint64_t v37 = *(void *)(v44 + 8 * v38);
                              ++v39;
                              if (v37) {
                                goto LABEL_47;
                              }
                            }
                          }
                          int64_t v38 = v39;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_47:
          uint64_t v47 = (v37 - 1) & v37;
          int64_t v48 = v38;
          unint64_t v32 = __clz(__rbit64(v37)) + (v38 << 6);
        }
        unint64_t v49 = v32;
        uint64_t v33 = 352 * v32;
        __src = (void *)(*(void *)(v15 + 48) + 352 * v32);
        memcpy(__dst, __src, 0x160uLL);
        unint64_t v34 = (void *)(*(void *)(v21 + 48) + v33);
        uint64_t v35 = 16 * v49;
        long long v50 = *(_OWORD *)(*(void *)(v15 + 56) + 16 * v49);
        memmove(v34, __src, 0x160uLL);
        *(_OWORD *)(*(void *)(v21 + 56) + v35) = v50;
        outlined retain of Locale.Components(__dst);
        swift_unknownObjectRetain();
        unint64_t v31 = v47;
        int64_t v28 = v48;
      }
    }
LABEL_48:
    swift_bridgeObjectRelease();
    if ((v3 & 1) == 0) {
      goto LABEL_49;
    }
    goto LABEL_12;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
  uint64_t v21 = v54;
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v3 & 1) != (v23 & 1)) {
    goto LABEL_56;
  }
  unint64_t v17 = v22;
  if (v3) {
    goto LABEL_12;
  }
LABEL_49:
  *(void *)(v21 + 8 * (v17 >> 6) + 64) |= 1 << v17;
  memcpy((void *)(*(void *)(v21 + 48) + 352 * v17), a2, 0x160uLL);
  unint64_t v40 = (uint64_t *)(*(void *)(v21 + 56) + 16 * v17);
  uint64_t *v40 = v13;
  v40[1] = v12;
  uint64_t v41 = *(void *)(v21 + 16);
  BOOL v42 = __OFADD__(v41, 1);
  uint64_t v43 = v41 + 1;
  if (!v42)
  {
    *(void *)(v21 + 16) = v43;
    outlined retain of Locale.Components(a2);
    goto LABEL_51;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *__src)
{
  memcpy(__dst, __src, sizeof(__dst));
  Hasher.init(_seed:)();
  Locale.Components.hash(into:)((uint64_t)v4);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(__src, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(void *__src, uint64_t a2)
{
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    memcpy(v7, (const void *)(*(void *)(v2 + 48) + 352 * v5), sizeof(v7));
    while (!specialized static Locale.Components.== infix(_:_:)((uint64_t)v7, (uint64_t)__dst))
    {
      unint64_t v5 = (v5 + 1) & ~v4;
      if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) & (1 << v5)) == 0) {
        break;
      }
      memcpy(v7, (const void *)(*(void *)(v2 + 48) + 352 * v5), sizeof(v7));
    }
  }
  return v5;
}

void Locale.Components.hash(into:)(uint64_t a1)
{
  uint64_t v4 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v31 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t v35 = *(void *)(v1 + 72);
  Swift::UInt v32 = *(unsigned __int8 *)(v1 + 96);
  uint64_t v15 = *(void *)(v1 + 104);
  uint64_t v23 = *(void *)(v1 + 112);
  uint64_t v24 = *(void *)(v1 + 144);
  uint64_t v16 = *(void *)(v1 + 136);
  uint64_t v17 = *(void *)(v1 + 168);
  uint64_t v25 = *(void *)(v1 + 176);
  int v26 = *(char *)(v1 + 200);
  int v27 = *(char *)(v1 + 201);
  uint64_t v18 = *(void *)(v1 + 208);
  uint64_t v28 = *(void *)(v1 + 216);
  uint64_t v19 = *(void *)(v1 + 240);
  uint64_t v29 = *(void *)(v1 + 248);
  uint64_t v20 = *(void *)(v1 + 272);
  uint64_t v30 = *(void *)(v1 + 280);
  uint64_t v33 = *(void *)(v1 + 304);
  uint64_t v21 = *(void *)(v1 + 312);
  uint64_t v22 = *(void *)(v1 + 320);
  uint64_t v34 = *(void *)(v1 + 328);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v4, v3);
    uint64_t v7 = v31;
    outlined copy of Locale.LanguageCode?(v5, v31);
    outlined copy of Locale.LanguageCode?(v6, v35);
    outlined copy of Locale.LanguageCode?(v4, v3);
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v4, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
    outlined copy of Locale.LanguageCode?(v4, 0);
    uint64_t v7 = v31;
    outlined copy of Locale.LanguageCode?(v5, v31);
    outlined copy of Locale.LanguageCode?(v6, v35);
  }
  if (v7)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t v8 = v7;
    outlined consume of Locale.LanguageCode?(v5, v7);
    uint64_t v9 = v35;
    if (v35)
    {
LABEL_6:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of Locale.LanguageCode?(v6, v9);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v8 = 0;
    Hasher._combine(_:)(0);
    uint64_t v9 = v35;
    if (v35) {
      goto LABEL_6;
    }
  }
  Hasher._combine(_:)(0);
LABEL_9:
  outlined consume of Locale.LanguageCode?(v4, v3);
  outlined consume of Locale.LanguageCode?(v5, v8);
  outlined consume of Locale.LanguageCode?(v6, v9);
  if (v32 == 16)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v32);
  }
  if (v23)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v15, v23);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v15, v23);
    if (v24) {
      goto LABEL_14;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v24)
    {
LABEL_14:
      Hasher._combine(_:)(1u);
      outlined copy of Locale.LanguageCode?(v16, v24);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      outlined consume of Locale.LanguageCode?(v16, v24);
      uint64_t v10 = v30;
      if (v25) {
        goto LABEL_15;
      }
LABEL_19:
      Hasher._combine(_:)(0);
      if (v26 == 7) {
        goto LABEL_16;
      }
      goto LABEL_20;
    }
  }
  Hasher._combine(_:)(0);
  uint64_t v10 = v30;
  if (!v25) {
    goto LABEL_19;
  }
LABEL_15:
  Hasher._combine(_:)(1u);
  outlined copy of Locale.LanguageCode?(v17, v25);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined consume of Locale.LanguageCode?(v17, v25);
  if (v26 == 7)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_21:
  if (v27 == 4)
  {
    Hasher._combine(_:)(0);
    if (v28) {
      goto LABEL_23;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v28)
    {
LABEL_23:
      Hasher._combine(_:)(1u);
      outlined copy of Locale.LanguageCode?(v18, v28);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      outlined consume of Locale.LanguageCode?(v18, v28);
      uint64_t v11 = v33;
      if (v29) {
        goto LABEL_24;
      }
      goto LABEL_30;
    }
  }
  Hasher._combine(_:)(0);
  uint64_t v11 = v33;
  if (v29)
  {
LABEL_24:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v19, v29);
    if (v10) {
      goto LABEL_25;
    }
    goto LABEL_31;
  }
LABEL_30:
  Hasher._combine(_:)(0);
  if (v10)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v20, v10);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v20, v10);
    if (v11) {
      goto LABEL_26;
    }
LABEL_32:
    Hasher._combine(_:)(0);
    uint64_t v14 = v34;
    if (v34) {
      goto LABEL_27;
    }
    goto LABEL_33;
  }
LABEL_31:
  Hasher._combine(_:)(0);
  if (!v11) {
    goto LABEL_32;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 112);
  swift_unknownObjectRetain();
  v13(a1, ObjectType, v21);
  swift_unknownObjectRelease();
  uint64_t v14 = v34;
  if (v34)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v22, v14);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v22, v14);
    return;
  }
LABEL_33:
  Hasher._combine(_:)(0);
}

uint64_t _LocaleICU.init(components:)(void *__src)
{
  uint64_t v2 = v1;
  memcpy(__dst, __src, 0x160uLL);
  memcpy(v81, __src, sizeof(v81));
  *(void *)(v2 + 16) = Locale.Components.icuIdentifier.getter();
  *(void *)(v2 + 24) = v4;
  _s10Foundation17LocalePreferencesVSgWOi0_(v81);
  uint64_t v66 = v2;
  outlined init with take of LocalePreferences?((uint64_t)v81, v2 + 32);
  uint64_t v5 = 1;
  uint64_t v6 = __dst[18];
  if (__dst[18])
  {
    uint64_t v65 = __dst[20];
    uint64_t v62 = __dst[19];
    uint64_t v5 = __dst[18];
    uint64_t v58 = __dst[17];
  }
  else
  {
    uint64_t v65 = 0;
    uint64_t v62 = 0;
    uint64_t v58 = 0;
  }
  if (__dst[31])
  {
    uint64_t v63 = __dst[32];
    uint64_t v64 = __dst[30];
    uint64_t v59 = __dst[31];
    uint64_t v60 = __dst[33];
  }
  else
  {
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v59 = 1;
    uint64_t v60 = 0;
  }
  uint64_t v79 = __dst[14];
  uint64_t v7 = __dst[15];
  uint64_t v8 = __dst[16];
  uint64_t v50 = __dst[21];
  uint64_t v78 = __dst[22];
  uint64_t v9 = __dst[23];
  uint64_t v10 = __dst[24];
  uint64_t v80 = __dst[27];
  uint64_t v11 = __dst[28];
  uint64_t v12 = __dst[29];
  uint64_t v41 = __dst[31];
  uint64_t v43 = __dst[30];
  uint64_t v37 = __dst[17];
  uint64_t v36 = __dst[26];
  uint64_t v34 = __dst[35];
  uint64_t v35 = __dst[34];
  uint64_t v13 = __dst[13];
  if (__dst[35])
  {
    uint64_t v55 = __dst[36];
    uint64_t v56 = __dst[34];
    uint64_t v53 = __dst[35];
    uint64_t v54 = __dst[37];
  }
  else
  {
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v53 = 1;
    uint64_t v54 = 0;
  }
  uint64_t v61 = v5;
  uint64_t v76 = __dst[5];
  uint64_t v77 = __dst[4];
  uint64_t v74 = __dst[7];
  uint64_t v75 = __dst[6];
  uint64_t v72 = __dst[9];
  uint64_t v73 = __dst[8];
  uint64_t v70 = __dst[11];
  uint64_t v71 = __dst[10];
  char v45 = __dst[12];
  char v49 = __dst[25];
  char v52 = BYTE1(__dst[25]);
  unint64_t v14 = __dst[38];
  uint64_t v15 = __dst[39];
  uint64_t v69 = __dst[41];
  uint64_t v57 = __dst[0];
  uint64_t v47 = __dst[2];
  uint64_t v48 = __dst[1];
  uint64_t v46 = __dst[3];
  uint64_t v33 = __dst[13];
  if (__dst[41])
  {
    uint64_t v67 = __dst[42];
    uint64_t v68 = __dst[43];
    uint64_t v32 = __dst[39];
    uint64_t v16 = __dst[40];
    outlined copy of Locale.LanguageCode?(__dst[0], __dst[1]);
    outlined copy of Locale.LanguageCode?(v77, v76);
    outlined copy of Locale.LanguageCode?(v73, v72);
    outlined copy of Locale.LanguageCode?(v13, v79);
    outlined copy of Locale.LanguageCode?(v37, v6);
    uint64_t v17 = v50;
    outlined copy of Locale.LanguageCode?(v50, v78);
    uint64_t v18 = v36;
    outlined copy of Locale.LanguageCode?(v36, v80);
    outlined copy of Locale.LanguageCode?(v43, v41);
    outlined copy of Locale.LanguageCode?(v35, v34);
    swift_unknownObjectRetain();
    uint64_t v44 = v16;
    uint64_t v19 = v16;
    uint64_t v15 = v32;
    outlined copy of Locale.LanguageCode?(v19, v69);
  }
  else
  {
    outlined copy of Locale.LanguageCode?(__dst[0], __dst[1]);
    outlined copy of Locale.LanguageCode?(v77, v76);
    outlined copy of Locale.LanguageCode?(v73, v72);
    outlined copy of Locale.LanguageCode?(v13, v79);
    outlined copy of Locale.LanguageCode?(v37, v6);
    uint64_t v17 = v50;
    outlined copy of Locale.LanguageCode?(v50, v78);
    uint64_t v18 = v36;
    outlined copy of Locale.LanguageCode?(v36, v80);
    outlined copy of Locale.LanguageCode?(v43, v41);
    outlined copy of Locale.LanguageCode?(v35, v34);
    swift_unknownObjectRetain();
    uint64_t v44 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 1;
  }
  outlined release of Locale.Components(__dst);
  if (v14) {
    uint64_t v20 = v15;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v51 = v20;
  if (v14 <= 1) {
    uint64_t v21 = 1;
  }
  else {
    uint64_t v21 = v14;
  }
  if (v80) {
    uint64_t v22 = v12;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v40 = v22;
  uint64_t v42 = v21;
  if (v80) {
    uint64_t v23 = v11;
  }
  else {
    uint64_t v23 = 0;
  }
  if (v80) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v38 = v24;
  uint64_t v39 = v23;
  if (v78) {
    uint64_t v25 = v17;
  }
  else {
    uint64_t v25 = 0;
  }
  if (v78)
  {
    uint64_t v26 = v10;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v26 = 0;
  }
  if (v79) {
    uint64_t v27 = v33;
  }
  else {
    uint64_t v27 = 0;
  }
  if (v79) {
    uint64_t v28 = v7;
  }
  else {
    uint64_t v28 = 0;
  }
  if (!v79) {
    uint64_t v8 = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_LocaleICU.State>._Buffer);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 24) = v48;
  *(void *)(v29 + 32) = v47;
  *(void *)(v29 + 40) = v46;
  *(void *)(v29 + 48) = v77;
  *(void *)(v29 + 56) = v76;
  *(void *)(v29 + 64) = v75;
  *(void *)(v29 + 72) = v74;
  *(void *)(v29 + 80) = v73;
  *(void *)(v29 + 88) = v72;
  *(void *)(v29 + 96) = v71;
  *(void *)(v29 + 104) = v70;
  *(unsigned char *)(v29 + 112) = v45;
  *(void *)(v29 + 120) = v27;
  *(void *)(v29 + 128) = v79;
  *(void *)(v29 + 136) = v28;
  *(void *)(v29 + 144) = v8;
  *(void *)(v29 + 152) = v58;
  *(void *)(v29 + 160) = v61;
  *(_DWORD *)(v29 + 560) = 0;
  *(void *)(v29 + 168) = v62;
  *(void *)(v29 + 176) = v65;
  *(void *)(v29 + 184) = v25;
  *(void *)(v29 + 192) = v78;
  *(void *)(v29 + 200) = v9;
  *(void *)(v29 + 208) = v26;
  *(void *)(v29 + 216) = 0;
  *(unsigned char *)(v29 + 224) = v49;
  *(unsigned char *)(v29 + 280) = 0;
  *(_OWORD *)(v29 + 248) = 0u;
  *(_OWORD *)(v29 + 232) = 0u;
  *(unsigned char *)(v29 + 281) = 1;
  *(void *)(v29 + 288) = 0;
  *(unsigned char *)(v29 + 296) = 1;
  *(unsigned char *)(v29 + 297) = v52;
  *(void *)(v29 + 304) = v38;
  *(void *)(v29 + 312) = v80;
  *(void *)(v29 + 320) = v39;
  *(void *)(v29 + 328) = v40;
  *(unsigned char *)(v29 + 336) = 2;
  *(void *)(v29 + 344) = v64;
  *(void *)(v29 + 352) = v59;
  *(void *)(v29 + 360) = v63;
  *(void *)(v29 + 368) = v60;
  *(void *)(v29 + 376) = v56;
  *(void *)(v29 + 384) = v53;
  *(void *)(v29 + 392) = v55;
  *(void *)(v29 + 400) = v54;
  *(void *)(v29 + 408) = v42;
  *(void *)(v29 + 416) = v51;
  *(void *)(v29 + 424) = v44;
  *(void *)(v29 + 432) = v69;
  *(void *)(v29 + 440) = v67;
  *(void *)(v29 + 448) = v68;
  uint64_t v30 = MEMORY[0x1E4FBC868];
  *(void *)(v29 + 456) = 0;
  *(void *)(v29 + 464) = 0;
  *(void *)(v29 + 472) = v30;
  *(void *)(v29 + 480) = v30;
  *(void *)(v29 + 488) = v30;
  *(void *)(v29 + 496) = v30;
  *(void *)(v29 + 504) = v30;
  *(void *)(v29 + 512) = v30;
  *(void *)(v29 + 520) = v30;
  *(void *)(v29 + 528) = v30;
  *(void *)(v29 + 536) = v30;
  *(void *)(v29 + 544) = v30;
  *(void *)(v29 + 552) = v30;
  *(void *)(v66 + 176) = v29;
  *(void *)(v29 + 16) = v57;
  *(_OWORD *)(v29 + 264) = 0u;
  return v66;
}

uint64_t URLRequest.allHTTPHeaderFields.getter()
{
  id v1 = *(id *)(*(void *)v0 + 16);
  id v2 = objc_msgSend(v1, sel_allHTTPHeaderFields);
  if (!v2)
  {

    return 0;
  }
  uint64_t v3 = v2;
  if (MEMORY[0x1E4FBC840] + 8 != MEMORY[0x1E4FBB1A0])
  {
    swift_unknownObjectRetain();
    uint64_t v4 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v4) {
      goto LABEL_37;
    }
    id v12 = objc_msgSend(v3, sel_count);
    if (!v12) {
      goto LABEL_36;
    }
    uint64_t v13 = (uint64_t)v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    uint64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)();
    unint64_t v14 = (char *)v4[6];
    uint64_t v15 = v4[7];
    swift_retain();
    uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v14, v15, v3, v13);
    if (result < 0 || v13 < result) {
      goto LABEL_42;
    }
    uint64_t v4[2] = result;
    if (!result) {
      goto LABEL_35;
    }
    uint64_t v16 = result - 1;
    uint64_t v17 = v4 + 8;
    while (1)
    {
      if ((*(void *)((char *)v17 + (((unint64_t)v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16)) {
        goto LABEL_27;
      }
      uint64_t v41 = (uint64_t *)(v4[6] + 16 * v16);
      uint64_t v42 = *v41;
      uint64_t v43 = v41[1];
      swift_bridgeObjectRetain();
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
      char v46 = v45;
      swift_bridgeObjectRelease();
      if (v46)
      {
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v47 = v4[2];
        BOOL v29 = __OFSUB__(v47, 1);
        uint64_t v48 = v47 - 1;
        if (v29) {
          goto LABEL_40;
        }
        uint64_t v4[2] = v48;
        goto LABEL_27;
      }
      *(void *)((char *)v17 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v44;
      if (v16 < (uint64_t)v44)
      {
        uint64_t v40 = 16 * v44;
        *(_OWORD *)(v4[6] + v40) = *(_OWORD *)(v4[6] + 16 * v16);
        *(_OWORD *)(v4[7] + v40) = *(_OWORD *)(v4[7] + 16 * v16);
LABEL_27:
        if (--v16 < 0) {
          goto LABEL_35;
        }
      }
      else
      {
        if (v44 == v16) {
          goto LABEL_27;
        }
        uint64_t v49 = v4[6];
        uint64_t v50 = (uint64_t *)(v49 + 16 * v44);
        uint64_t v51 = (uint64_t *)(v49 + 16 * v16);
        uint64_t v52 = *v50;
        uint64_t v53 = v50[1];
        uint64_t v54 = v51[1];
        *uint64_t v50 = *v51;
        v50[1] = v54;
        *uint64_t v51 = v52;
        v51[1] = v53;
        uint64_t v55 = v4[7];
        uint64_t v56 = (uint64_t *)(v55 + 16 * v44);
        uint64_t v57 = (uint64_t *)(v55 + 16 * v16);
        uint64_t v58 = *v56;
        uint64_t v59 = v56[1];
        uint64_t v60 = v57[1];
        *uint64_t v56 = *v57;
        v56[1] = v60;
        *uint64_t v57 = v58;
        v57[1] = v59;
        if (v16 < 0) {
          goto LABEL_35;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  uint64_t v4 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4)
  {
LABEL_37:

    return (uint64_t)v4;
  }
  id v5 = objc_msgSend(v3, sel_count);
  if (!v5)
  {
LABEL_36:
    uint64_t v4 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_37;
  }
  uint64_t v6 = (uint64_t)v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v4[6];
  uint64_t v8 = v4[7];
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v7, v8, v3, v6);
  if (result < 0 || v6 < result) {
    goto LABEL_41;
  }
  uint64_t v4[2] = result;
  if (!result)
  {
LABEL_35:
    swift_release();
    goto LABEL_37;
  }
  uint64_t v10 = result - 1;
  uint64_t v11 = v4 + 8;
  while (1)
  {
    if ((*(void *)((char *)v11 + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10)) {
      goto LABEL_17;
    }
    uint64_t v22 = (uint64_t *)(v4[6] + 16 * v10);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    swift_bridgeObjectRetain();
    unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24);
    char v27 = v26;
    swift_bridgeObjectRelease();
    if (v27) {
      break;
    }
    *(void *)((char *)v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    if (v10 < (uint64_t)v25)
    {
      *(_OWORD *)(v4[6] + 16 * v25) = *(_OWORD *)(v4[6] + 16 * v10);
      uint64_t v18 = v4[7];
      uint64_t v19 = (_OWORD *)(v18 + 32 * v10);
      long long v20 = v19[1];
      uint64_t v21 = (_OWORD *)(v18 + 32 * v25);
      *uint64_t v21 = *v19;
      v21[1] = v20;
LABEL_17:
      if (--v10 < 0) {
        goto LABEL_35;
      }
    }
    else
    {
      if (v25 == v10) {
        goto LABEL_17;
      }
      uint64_t v31 = v4[6];
      uint64_t v32 = (uint64_t *)(v31 + 16 * v25);
      uint64_t v33 = (uint64_t *)(v31 + 16 * v10);
      uint64_t v34 = *v32;
      uint64_t v35 = v32[1];
      uint64_t v36 = v33[1];
      *uint64_t v32 = *v33;
      v32[1] = v36;
      *uint64_t v33 = v34;
      v33[1] = v35;
      uint64_t v37 = v4[7];
      uint64_t v38 = (_OWORD *)(v37 + 32 * v25);
      uint64_t v39 = (_OWORD *)(v37 + 32 * v10);
      outlined init with take of Any(v38, v61);
      outlined init with take of Any(v39, v38);
      outlined init with take of Any(v61, v39);
      if (v10 < 0) {
        goto LABEL_35;
      }
    }
  }
  swift_arrayDestroy();
  uint64_t result = swift_arrayDestroy();
  uint64_t v28 = v4[2];
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (!v29)
  {
    uint64_t v4[2] = v30;
    goto LABEL_17;
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t AttributedString.Guts._constrainedAttributes(at:with:)(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = v2[8];
  if (v3) {
    uint64_t v4 = v2[10];
  }
  else {
    uint64_t v4 = 0;
  }
  if (result < 0 || (uint64_t v5 = result, v4 < result))
  {
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v8 = v2[9];
  uint64_t v9 = v2[11];
  if (!v3 || (v2[10] > result ? (BOOL v10 = *(unsigned __int16 *)(v3 + 16) == 0) : (BOOL v10 = 1), v10))
  {
    unint64_t v11 = swift_unknownObjectRetain_n();
    unint64_t v12 = specialized Rope._endPath.getter(v11);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v13 = 0;
    if (v3) {
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  uint64_t v32 = v2[9];
  uint64_t v33 = a2[1];
  uint64_t v17 = *(unsigned __int8 *)(v3 + 18);
  if (!*(unsigned char *)(v3 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    unint64_t v26 = 0;
    uint64_t v13 = v3;
    uint64_t v27 = *(unsigned __int16 *)(v3 + 16);
    if (!*(_WORD *)(v3 + 16)) {
      goto LABEL_49;
    }
LABEL_40:
    uint64_t v28 = *(void *)(v13 + 24);
    BOOL v21 = __OFSUB__(v5, v28);
    v5 -= v28;
    if (v21) {
      goto LABEL_63;
    }
    if (__OFADD__(v5, 1))
    {
LABEL_64:
      __break(1u);
      return result;
    }
    if (v5 + 1 < 1) {
      goto LABEL_51;
    }
    if (v27 == 1) {
      goto LABEL_49;
    }
    BOOL v29 = (uint64_t *)(v13 + 48);
    uint64_t v30 = 1;
    while (1)
    {
      uint64_t v31 = *v29;
      v29 += 3;
      BOOL v21 = __OFSUB__(v5, v31);
      v5 -= v31;
      if (v21) {
        break;
      }
      if (__OFADD__(v5, 1)) {
        goto LABEL_62;
      }
      if (v5 + 1 < 1)
      {
        uint64_t v27 = v30;
        goto LABEL_53;
      }
      if (v27 == ++v30) {
        goto LABEL_49;
      }
    }
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v13 = v3;
  do
  {
    uint64_t v19 = *(unsigned __int16 *)(v13 + 16);
    if (*(_WORD *)(v13 + 16))
    {
      uint64_t v20 = *(void *)(v13 + 40);
      BOOL v21 = __OFSUB__(v5, v20);
      uint64_t v22 = v5 - v20;
      if (v21) {
        goto LABEL_57;
      }
      if (__OFADD__(v22, 1)) {
        goto LABEL_58;
      }
      if (v22 + 1 < 1)
      {
        uint64_t v19 = 0;
        goto LABEL_23;
      }
      if (v19 != 1)
      {
        uint64_t v23 = (uint64_t *)(v13 + 64);
        uint64_t v24 = 1;
        while (1)
        {
          uint64_t v25 = *v23;
          v23 += 3;
          uint64_t v5 = v22 - v25;
          if (__OFSUB__(v22, v25)) {
            break;
          }
          if (__OFADD__(v5, 1)) {
            goto LABEL_55;
          }
          if (v5 + 1 < 1)
          {
            uint64_t v19 = v24;
            uint64_t v5 = v22;
            goto LABEL_23;
          }
          ++v24;
          uint64_t v22 = v5;
          if (v19 == v24) {
            goto LABEL_22;
          }
        }
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      uint64_t v5 = v22;
    }
LABEL_22:
    if (v5) {
      goto LABEL_56;
    }
LABEL_23:
    char v18 = (4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C;
    uint64_t v17 = ((-15 << v18) - 1) & v17 | (v19 << v18);
    uint64_t v13 = *(void *)(v13 + 24 + 24 * v19);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
  }
  while (*(unsigned char *)(v13 + 18));
  unint64_t v26 = v17 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v27 = *(unsigned __int16 *)(v13 + 16);
  if (*(_WORD *)(v13 + 16)) {
    goto LABEL_40;
  }
LABEL_49:
  if (v5)
  {
    __break(1u);
LABEL_51:
    uint64_t v27 = 0;
  }
LABEL_53:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v12 = v26 | (v27 << 8);
  uint64_t v8 = v32;
  uint64_t v6 = v33;
LABEL_13:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v12, v13, v3, v8);
  uint64_t result = swift_unknownObjectRelease_n();
LABEL_14:
  if (v9 != v2[11]) {
    goto LABEL_60;
  }
  if (v13)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v14 = v2[8];
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v12, v14);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = specialized _NativeDictionary.filter(_:)(v15, v7, v6);
  swift_bridgeObjectRelease_n();
  return v16;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v111 = a3;
  uint64_t v108 = a2;
  uint64_t v3 = isStackAllocationSafe;
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  char v4 = *(unsigned char *)(isStackAllocationSafe + 32);
  int64_t v104 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v5 = 8 * v104;
  uint64_t v110 = isStackAllocationSafe;
  if ((v4 & 0x3Fu) > 0xD)
  {
    Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v103 = (unint64_t *)swift_slowAlloc();
      bzero(v103, v5);
      uint64_t v102 = 0;
      int64_t v29 = 0;
      uint64_t v30 = *(void *)(v3 + 64);
      unint64_t v105 = (char *)(v3 + 64);
      uint64_t v31 = 1 << *(unsigned char *)(v3 + 32);
      if (v31 < 64) {
        uint64_t v32 = ~(-1 << v31);
      }
      else {
        uint64_t v32 = -1;
      }
      unint64_t v33 = v32 & v30;
      uint64_t v109 = &v118;
      int64_t v106 = (unint64_t)(v31 + 63) >> 6;
      uint64_t v107 = &v113;
      while (1)
      {
        if (v33)
        {
          unint64_t v36 = __clz(__rbit64(v33));
          v33 &= v33 - 1;
          unint64_t v37 = v36 | (v29 << 6);
          uint64_t v38 = v111;
        }
        else
        {
          int64_t v39 = v29 + 1;
          uint64_t v38 = v111;
          if (__OFADD__(v29, 1)) {
            goto LABEL_156;
          }
          if (v39 >= v106) {
            goto LABEL_86;
          }
          unint64_t v40 = *(void *)&v105[8 * v39];
          ++v29;
          if (!v40)
          {
            int64_t v29 = v39 + 1;
            if (v39 + 1 >= v106) {
              goto LABEL_86;
            }
            unint64_t v40 = *(void *)&v105[8 * v29];
            if (!v40)
            {
              int64_t v29 = v39 + 2;
              if (v39 + 2 >= v106) {
                goto LABEL_86;
              }
              unint64_t v40 = *(void *)&v105[8 * v29];
              if (!v40)
              {
                int64_t v41 = v39 + 3;
                if (v41 >= v106) {
                  goto LABEL_86;
                }
                unint64_t v40 = *(void *)&v105[8 * v41];
                if (!v40)
                {
                  while (1)
                  {
                    int64_t v29 = v41 + 1;
                    if (__OFADD__(v41, 1)) {
                      goto LABEL_159;
                    }
                    if (v29 >= v106) {
                      break;
                    }
                    unint64_t v40 = *(void *)&v105[8 * v29];
                    ++v41;
                    if (v40) {
                      goto LABEL_67;
                    }
                  }
LABEL_86:
                  uint64_t v49 = v102;
                  if (!v102)
                  {
                    uint64_t v3 = MEMORY[0x1E4FBC868];
                    goto LABEL_152;
                  }
                  if (v102 == *(uint64_t **)(v3 + 16))
                  {
                    swift_retain();
                    goto LABEL_152;
                  }
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  uint64_t v75 = static _DictionaryStorage.allocate(capacity:)();
                  int64_t v76 = 0;
                  unint64_t v77 = *v103;
                  uint64_t v78 = v75 + 64;
                  while (1)
                  {
                    if (v77)
                    {
                      long long v82 = v49;
                      unint64_t v83 = __clz(__rbit64(v77));
                      v77 &= v77 - 1;
                      unint64_t v84 = v83 | (v76 << 6);
                    }
                    else
                    {
                      int64_t v85 = v76 + 1;
                      if (__OFADD__(v76, 1)) {
                        goto LABEL_160;
                      }
                      if (v85 >= v104) {
                        goto LABEL_151;
                      }
                      unint64_t v86 = v103[v85];
                      ++v76;
                      if (!v86)
                      {
                        int64_t v76 = v85 + 1;
                        if (v85 + 1 >= v104) {
                          goto LABEL_151;
                        }
                        unint64_t v86 = v103[v76];
                        if (!v86)
                        {
                          int64_t v76 = v85 + 2;
                          if (v85 + 2 >= v104) {
                            goto LABEL_151;
                          }
                          unint64_t v86 = v103[v76];
                          if (!v86)
                          {
                            int64_t v76 = v85 + 3;
                            if (v85 + 3 >= v104) {
                              goto LABEL_151;
                            }
                            unint64_t v86 = v103[v76];
                            if (!v86)
                            {
                              int64_t v87 = v85 + 4;
                              if (v87 >= v104) {
                                goto LABEL_151;
                              }
                              unint64_t v86 = v103[v87];
                              if (!v86)
                              {
                                while (1)
                                {
                                  int64_t v76 = v87 + 1;
                                  if (__OFADD__(v87, 1)) {
                                    goto LABEL_162;
                                  }
                                  if (v76 >= v104) {
                                    break;
                                  }
                                  unint64_t v86 = v103[v76];
                                  ++v87;
                                  if (v86) {
                                    goto LABEL_141;
                                  }
                                }
LABEL_151:
                                uint64_t v3 = v75;
LABEL_152:
                                MEMORY[0x185309510](v103, -1, -1);
                                goto LABEL_153;
                              }
                              int64_t v76 = v87;
                            }
                          }
                        }
                      }
LABEL_141:
                      long long v82 = v49;
                      unint64_t v77 = (v86 - 1) & v86;
                      unint64_t v84 = __clz(__rbit64(v86)) + (v76 << 6);
                    }
                    uint64_t v88 = *(void *)(v3 + 56);
                    long long v89 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v84);
                    uint64_t v91 = *v89;
                    uint64_t v90 = v89[1];
                    outlined init with copy of AttributedString._AttributeValue(v88 + 72 * v84, (uint64_t)&v117);
                    long long v114 = v119;
                    long long v115 = v120;
                    uint64_t v116 = v121;
                    long long v112 = v117;
                    long long v113 = v118;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    Swift::Int v92 = Hasher._finalize()();
                    uint64_t v93 = -1 << *(unsigned char *)(v75 + 32);
                    unint64_t v94 = v92 & ~v93;
                    unint64_t v95 = v94 >> 6;
                    if (((-1 << v94) & ~*(void *)(v78 + 8 * (v94 >> 6))) != 0)
                    {
                      unint64_t v79 = __clz(__rbit64((-1 << v94) & ~*(void *)(v78 + 8 * (v94 >> 6)))) | v94 & 0x7FFFFFFFFFFFFFC0;
                    }
                    else
                    {
                      char v96 = 0;
                      unint64_t v97 = (unint64_t)(63 - v93) >> 6;
                      do
                      {
                        if (++v95 == v97 && (v96 & 1) != 0) {
                          goto LABEL_155;
                        }
                        BOOL v98 = v95 == v97;
                        if (v95 == v97) {
                          unint64_t v95 = 0;
                        }
                        v96 |= v98;
                        uint64_t v99 = *(void *)(v78 + 8 * v95);
                      }
                      while (v99 == -1);
                      unint64_t v79 = __clz(__rbit64(~v99)) + (v95 << 6);
                    }
                    *(void *)(v78 + ((v79 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v79;
                    uint64_t v80 = (void *)(*(void *)(v75 + 48) + 16 * v79);
                    *uint64_t v80 = v91;
                    v80[1] = v90;
                    uint64_t v81 = *(void *)(v75 + 56) + 72 * v79;
                    *(_OWORD *)(v81 + 16) = v113;
                    *(_OWORD *)(v81 + 32) = v114;
                    *(_OWORD *)(v81 + 48) = v115;
                    *(void *)(v81 + 64) = v116;
                    *(_OWORD *)uint64_t v81 = v112;
                    ++*(void *)(v75 + 16);
                    uint64_t v49 = (uint64_t *)((char *)v82 - 1);
                    uint64_t v3 = v110;
                    if (v82 == (uint64_t *)1) {
                      goto LABEL_151;
                    }
                  }
                }
                int64_t v29 = v41;
              }
            }
          }
LABEL_67:
          unint64_t v33 = (v40 - 1) & v40;
          unint64_t v37 = __clz(__rbit64(v40)) + (v29 << 6);
        }
        uint64_t v42 = *(void *)(v3 + 56);
        uint64_t v43 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v37);
        uint64_t v44 = *v43;
        uint64_t v45 = v43[1];
        outlined init with copy of AttributedString._AttributeValue(v42 + 72 * v37, (uint64_t)v122);
        *(void *)&long long v117 = v44;
        *((void *)&v117 + 1) = v45;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v122, (uint64_t)v109);
        *(void *)&long long v112 = v44;
        *((void *)&v112 + 1) = v45;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v109, (uint64_t)v107);
        uint64_t v47 = *((void *)&v115 + 1);
        uint64_t v46 = v116;
        swift_bridgeObjectRetain_n();
        outlined copy of AttributedString.AttributeRunBoundaries?(v47, v46);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v107);
        if (!v46) {
          break;
        }
        if (v46 == 1)
        {
          swift_bridgeObjectRetain();
          outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined consume of AttributedString.AttributeRunBoundaries?(v47, 1);
          if (v38 == 1) {
            goto LABEL_82;
          }
          uint64_t v34 = v108;
          uint64_t v35 = v38;
LABEL_51:
          outlined consume of AttributedString.AttributeRunBoundaries?(v34, v35);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
          swift_bridgeObjectRelease();
          uint64_t v3 = v110;
        }
        else
        {
          if (!v38)
          {
LABEL_50:
            outlined copy of AttributedString.AttributeRunBoundaries?(v47, v46);
            swift_bridgeObjectRetain();
            outlined copy of AttributedString.AttributeRunBoundaries?(v47, v46);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
            outlined consume of AttributedString.AttributeRunBoundaries?(v47, v46);
            uint64_t v34 = v47;
            uint64_t v35 = v46;
            goto LABEL_51;
          }
          if (v47 == v108 && v46 == v38) {
            char v48 = 1;
          }
          else {
            char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          outlined copy of AttributedString.AttributeRunBoundaries?(v47, v46);
          swift_bridgeObjectRetain();
          outlined copy of AttributedString.AttributeRunBoundaries?(v47, v46);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined consume of AttributedString.AttributeRunBoundaries?(v47, v46);
          outlined consume of AttributedString.AttributeRunBoundaries?(v47, v46);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
          swift_bridgeObjectRelease();
          uint64_t v3 = v110;
          if (v48)
          {
LABEL_83:
            *(unint64_t *)((char *)v103 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v37;
            BOOL v27 = __OFADD__(v102, 1);
            uint64_t v102 = (uint64_t *)((char *)v102 + 1);
            if (v27)
            {
              __break(1u);
              goto LABEL_86;
            }
          }
        }
      }
      if (v38) {
        goto LABEL_50;
      }
      swift_bridgeObjectRelease_n();
      outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined consume of AttributedString.AttributeRunBoundaries?(v47, 0);
      outlined consume of AttributedString.AttributeRunBoundaries?(v47, 0);
LABEL_82:
      outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
      swift_bridgeObjectRelease();
      uint64_t v3 = v110;
      goto LABEL_83;
    }
  }
  uint64_t v102 = &v101;
  MEMORY[0x1F4188790](isStackAllocationSafe);
  unint64_t v105 = (char *)&v101 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0);
  bzero(v105, v5);
  uint64_t v103 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(v3 + 64);
  int64_t v106 = v3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  uint64_t v107 = (long long *)((unint64_t)(v8 + 63) >> 6);
  uint64_t v109 = &v118;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v6 << 6);
      uint64_t v15 = v111;
      goto LABEL_24;
    }
    uint64_t v16 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_154;
    }
    uint64_t v15 = v111;
    if (v16 >= (uint64_t)v107) {
      goto LABEL_42;
    }
    unint64_t v17 = *(void *)(v106 + 8 * v16);
    ++v6;
    if (!v17)
    {
      uint64_t v6 = v16 + 1;
      if (v16 + 1 >= (uint64_t)v107) {
        goto LABEL_42;
      }
      unint64_t v17 = *(void *)(v106 + 8 * v6);
      if (!v17)
      {
        uint64_t v6 = v16 + 2;
        if (v16 + 2 >= (uint64_t)v107) {
          goto LABEL_42;
        }
        unint64_t v17 = *(void *)(v106 + 8 * v6);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v6 << 6);
LABEL_24:
    uint64_t v19 = *(void *)(v3 + 56);
    uint64_t v20 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v14);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    outlined init with copy of AttributedString._AttributeValue(v19 + 72 * v14, (uint64_t)v122);
    *(void *)&long long v117 = v21;
    *((void *)&v117 + 1) = v22;
    uint64_t v23 = (uint64_t)v109;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)v122, (uint64_t)v109);
    *(void *)&long long v112 = v21;
    *((void *)&v112 + 1) = v22;
    outlined init with copy of AttributedString._AttributeValue(v23, (uint64_t)&v113);
    uint64_t v24 = *((void *)&v115 + 1);
    uint64_t v25 = v116;
    swift_bridgeObjectRetain_n();
    outlined copy of AttributedString.AttributeRunBoundaries?(v24, v25);
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v113);
    if (!v25)
    {
      if (v15) {
        goto LABEL_6;
      }
      swift_bridgeObjectRelease_n();
      outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined consume of AttributedString.AttributeRunBoundaries?(v24, 0);
      outlined consume of AttributedString.AttributeRunBoundaries?(v24, 0);
LABEL_38:
      outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
      swift_bridgeObjectRelease();
      uint64_t v3 = v110;
      goto LABEL_39;
    }
    if (v25 == 1)
    {
      swift_bridgeObjectRetain();
      outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined consume of AttributedString.AttributeRunBoundaries?(v24, 1);
      if (v15 == 1) {
        goto LABEL_38;
      }
      uint64_t v11 = v108;
      uint64_t v12 = v15;
LABEL_7:
      outlined consume of AttributedString.AttributeRunBoundaries?(v11, v12);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
      swift_bridgeObjectRelease();
      uint64_t v3 = v110;
    }
    else
    {
      if (!v15)
      {
LABEL_6:
        outlined copy of AttributedString.AttributeRunBoundaries?(v24, v25);
        outlined copy of AttributedString.AttributeRunBoundaries?(v24, v25);
        swift_bridgeObjectRelease();
        outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
        outlined consume of AttributedString.AttributeRunBoundaries?(v24, v25);
        uint64_t v11 = v24;
        uint64_t v12 = v25;
        goto LABEL_7;
      }
      if (v24 == v108 && v25 == v15) {
        char v26 = 1;
      }
      else {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined copy of AttributedString.AttributeRunBoundaries?(v24, v25);
      outlined copy of AttributedString.AttributeRunBoundaries?(v24, v25);
      swift_bridgeObjectRelease();
      outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined consume of AttributedString.AttributeRunBoundaries?(v24, v25);
      outlined consume of AttributedString.AttributeRunBoundaries?(v24, v25);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
      swift_bridgeObjectRelease();
      uint64_t v3 = v110;
      if (v26)
      {
LABEL_39:
        *(void *)&v105[(v14 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v14;
        BOOL v27 = __OFADD__(v103, 1);
        uint64_t v103 = (unint64_t *)((char *)v103 + 1);
        if (v27)
        {
          __break(1u);
          goto LABEL_42;
        }
      }
    }
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= (uint64_t)v107) {
    goto LABEL_42;
  }
  unint64_t v17 = *(void *)(v106 + 8 * v18);
  if (v17)
  {
    uint64_t v6 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v6 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      goto LABEL_157;
    }
    if (v6 >= (uint64_t)v107) {
      break;
    }
    unint64_t v17 = *(void *)(v106 + 8 * v6);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_42:
  uint64_t v28 = v103;
  if (v103)
  {
    if (v103 != *(unint64_t **)(v3 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
      uint64_t v50 = static _DictionaryStorage.allocate(capacity:)();
      int64_t v51 = 0;
      unint64_t v52 = *(void *)v105;
      uint64_t v53 = v50 + 64;
      while (1)
      {
        if (v52)
        {
          uint64_t v57 = v28;
          unint64_t v58 = __clz(__rbit64(v52));
          v52 &= v52 - 1;
          unint64_t v59 = v58 | (v51 << 6);
        }
        else
        {
          int64_t v60 = v51 + 1;
          if (__OFADD__(v51, 1)) {
            goto LABEL_158;
          }
          if (v60 >= v104)
          {
LABEL_119:
            uint64_t v3 = v50;
            goto LABEL_153;
          }
          unint64_t v61 = *(void *)&v105[8 * v60];
          ++v51;
          if (!v61)
          {
            int64_t v51 = v60 + 1;
            if (v60 + 1 >= v104) {
              goto LABEL_119;
            }
            unint64_t v61 = *(void *)&v105[8 * v51];
            if (!v61)
            {
              int64_t v51 = v60 + 2;
              if (v60 + 2 >= v104) {
                goto LABEL_119;
              }
              unint64_t v61 = *(void *)&v105[8 * v51];
              if (!v61)
              {
                int64_t v51 = v60 + 3;
                if (v60 + 3 >= v104) {
                  goto LABEL_119;
                }
                unint64_t v61 = *(void *)&v105[8 * v51];
                if (!v61)
                {
                  int64_t v62 = v60 + 4;
                  if (v62 >= v104) {
                    goto LABEL_119;
                  }
                  unint64_t v61 = *(void *)&v105[8 * v62];
                  if (!v61)
                  {
                    while (1)
                    {
                      int64_t v51 = v62 + 1;
                      if (__OFADD__(v62, 1)) {
                        break;
                      }
                      if (v51 >= v104) {
                        goto LABEL_119;
                      }
                      unint64_t v61 = *(void *)&v105[8 * v51];
                      ++v62;
                      if (v61) {
                        goto LABEL_109;
                      }
                    }
LABEL_161:
                    __break(1u);
LABEL_162:
                    __break(1u);
                  }
                  int64_t v51 = v62;
                }
              }
            }
          }
LABEL_109:
          uint64_t v57 = v28;
          unint64_t v52 = (v61 - 1) & v61;
          unint64_t v59 = __clz(__rbit64(v61)) + (v51 << 6);
        }
        uint64_t v63 = *(void *)(v3 + 56);
        uint64_t v64 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v59);
        uint64_t v66 = *v64;
        uint64_t v65 = v64[1];
        outlined init with copy of AttributedString._AttributeValue(v63 + 72 * v59, (uint64_t)&v117);
        long long v114 = v119;
        long long v115 = v120;
        uint64_t v116 = v121;
        long long v112 = v117;
        long long v113 = v118;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v67 = Hasher._finalize()();
        uint64_t v68 = -1 << *(unsigned char *)(v50 + 32);
        unint64_t v69 = v67 & ~v68;
        unint64_t v70 = v69 >> 6;
        if (((-1 << v69) & ~*(void *)(v53 + 8 * (v69 >> 6))) != 0)
        {
          unint64_t v54 = __clz(__rbit64((-1 << v69) & ~*(void *)(v53 + 8 * (v69 >> 6)))) | v69 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_91;
        }
        char v71 = 0;
        unint64_t v72 = (unint64_t)(63 - v68) >> 6;
        do
        {
          if (++v70 == v72 && (v71 & 1) != 0)
          {
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
            goto LABEL_161;
          }
          BOOL v73 = v70 == v72;
          if (v70 == v72) {
            unint64_t v70 = 0;
          }
          v71 |= v73;
          uint64_t v74 = *(void *)(v53 + 8 * v70);
        }
        while (v74 == -1);
        unint64_t v54 = __clz(__rbit64(~v74)) + (v70 << 6);
LABEL_91:
        *(void *)(v53 + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v54;
        uint64_t v55 = (void *)(*(void *)(v50 + 48) + 16 * v54);
        *uint64_t v55 = v66;
        v55[1] = v65;
        uint64_t v56 = *(void *)(v50 + 56) + 72 * v54;
        *(_OWORD *)(v56 + 16) = v113;
        *(_OWORD *)(v56 + 32) = v114;
        *(_OWORD *)(v56 + 48) = v115;
        *(void *)(v56 + 64) = v116;
        *(_OWORD *)uint64_t v56 = v112;
        ++*(void *)(v50 + 16);
        uint64_t v28 = (unint64_t *)((char *)v57 - 1);
        uint64_t v3 = v110;
        if (v57 == (unint64_t *)1) {
          goto LABEL_119;
        }
      }
    }
    swift_retain();
  }
  else
  {
    uint64_t v3 = MEMORY[0x1E4FBC868];
  }
LABEL_153:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized SetAlgebra.init<A>(_:)@<X0>(void *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  size_t v5 = (char *)&v9 - v4;
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v6 = 0;
  if ((v10 & 1) == 0)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = v9;
      if ((v9 & ~v6) == 0) {
        uint64_t v7 = 0;
      }
      v6 |= v7;
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v10 != 1);
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  *a1 = v6;
  return result;
}

uint64_t _FileManagerImpl.copyItem(at:to:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v225 = a3;
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void **)a2;
  uint64_t v229 = *(void **)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  swift_retain();
  id v11 = v6;
  swift_retain();
  uint64_t v227 = v5;
  id v228 = v7;
  uint64_t v226 = v3;
  if (!_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v14 = objc_msgSend(v11, sel_isFileURL);
    swift_release();
    swift_release();

    if (v14) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
  v231._uint64_t countAndFlagsBits = (uint64_t)v11;
  v231._unint64_t object = v7;
  uint64_t v232 = v8;
  URL.scheme.getter();
  if (!v12)
  {
    swift_release();
    swift_release();

    goto LABEL_15;
  }
  Swift::String v13 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v13._countAndFlagsBits == 1701603686 && v13._object == (void *)0xE400000000000000)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
LABEL_15:
    id v19 = v11;
    swift_retain_n();
    swift_retain_n();
    id v20 = v19;
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v232 = v8;
      id v21 = v20;
      swift_retain();
      swift_retain();
      Swift::String v22 = URL.path(percentEncoded:)(1);
      uint64_t countAndFlagsBits = v22._countAndFlagsBits;
      Swift::String v231 = v22;
      swift_bridgeObjectRetain();
      if (String.count.getter() <= 1)
      {
        unint64_t object = (unint64_t)v22._object;
      }
      else
      {
        unint64_t object = (unint64_t)v22._object;
        if ((specialized BidirectionalCollection.last.getter(v22._countAndFlagsBits, (unint64_t)v22._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v231._countAndFlagsBits;
          unint64_t object = (unint64_t)v231._object;
        }
      }
      v230._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v38 = specialized Set._Variant.insert(_:)(&v233, 0x2FuLL);
      uint64_t v39 = v230._countAndFlagsBits;
      uint64_t v40 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000) == 0) {
        uint64_t v40 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v40)
      {
        uint64_t v229 = v21;
        v230._uint64_t countAndFlagsBits = countAndFlagsBits;
        v230._unint64_t object = (void *)object;
        MEMORY[0x1F4188790](v38);
        uint64_t v220 = &v230;
        uint64_t v221 = v39;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v219, countAndFlagsBits, object);
        if (v41 == 1)
        {
          unint64_t v43 = (unint64_t)v230._object;
          Swift::Int v42 = v230._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v42, v43, v39);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v21 = v229;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v25 = objc_msgSend(v20, sel__parameterString);
      if (v25)
      {
        char v26 = v25;
        id v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        int64_t v29 = v28;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v30 = objc_msgSend(v20, sel_path)) != 0)
        {
          uint64_t v31 = v30;
          id v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
          uint64_t v34 = v33;

          v231._uint64_t countAndFlagsBits = (uint64_t)v32;
          v231._unint64_t object = v34;
          swift_bridgeObjectRetain();
          v35._uint64_t countAndFlagsBits = 59;
          v35._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v35);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v36._uint64_t countAndFlagsBits = (uint64_t)v27;
          v36._unint64_t object = v29;
          String.append(_:)(v36);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v231._uint64_t countAndFlagsBits = 59;
          v231._unint64_t object = (void *)0xE100000000000000;
          v44._uint64_t countAndFlagsBits = (uint64_t)v27;
          v44._unint64_t object = v29;
          String.append(_:)(v44);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        id v45 = objc_msgSend(v20, sel_path);
        if (v45)
        {
          uint64_t v46 = v45;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
        }
      }
    }
    long long v89 = self;
    uint64_t v90 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v91 = objc_msgSend(v89, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 262, v90, v20, 0, 0, 0, 0);
    goto LABEL_63;
  }
LABEL_10:
  swift_retain();
  id v16 = v9;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v37 = objc_msgSend(v16, sel_isFileURL);
    swift_release();
    swift_release();

    if (v37) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }
  v231._uint64_t countAndFlagsBits = (uint64_t)v16;
  v231._unint64_t object = v229;
  uint64_t v232 = v10;
  URL.scheme.getter();
  if (!v17)
  {
    swift_release();
    swift_release();

    goto LABEL_43;
  }
  Swift::String v18 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v18._countAndFlagsBits == 1701603686 && v18._object == (void *)0xE400000000000000)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  if ((v47 & 1) == 0)
  {
LABEL_43:
    id v52 = v16;
    swift_retain_n();
    swift_retain_n();
    id v53 = v52;
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v232 = v10;
      id v54 = v53;
      swift_retain();
      swift_retain();
      Swift::String v55 = URL.path(percentEncoded:)(1);
      uint64_t v56 = v55._countAndFlagsBits;
      Swift::String v231 = v55;
      swift_bridgeObjectRetain();
      if (String.count.getter() <= 1)
      {
        unint64_t v57 = (unint64_t)v55._object;
      }
      else
      {
        unint64_t v57 = (unint64_t)v55._object;
        if ((specialized BidirectionalCollection.last.getter(v55._countAndFlagsBits, (unint64_t)v55._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t v56 = v231._countAndFlagsBits;
          unint64_t v57 = (unint64_t)v231._object;
        }
      }
      v230._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v83 = specialized Set._Variant.insert(_:)(&v233, 0x2FuLL);
      uint64_t v84 = v230._countAndFlagsBits;
      uint64_t v85 = HIBYTE(v57) & 0xF;
      if ((v57 & 0x2000000000000000) == 0) {
        uint64_t v85 = v56 & 0xFFFFFFFFFFFFLL;
      }
      if (v85)
      {
        id v228 = v54;
        uint64_t v224 = v10;
        v230._uint64_t countAndFlagsBits = v56;
        v230._unint64_t object = (void *)v57;
        MEMORY[0x1F4188790](v83);
        uint64_t v220 = &v230;
        uint64_t v221 = v84;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v219, v56, v57);
        if (v86 == 1)
        {
          unint64_t v87 = (unint64_t)v230._object;
          Swift::Int v88 = v230._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v88, v87, v84);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v54 = v228;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v58 = objc_msgSend(v53, sel__parameterString);
      if (v58)
      {
        unint64_t v59 = v58;
        id v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
        int64_t v62 = v61;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v63 = objc_msgSend(v53, sel_path)) != 0)
        {
          uint64_t v64 = v63;
          id v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
          Swift::Int v67 = v66;

          v231._uint64_t countAndFlagsBits = (uint64_t)v65;
          v231._unint64_t object = v67;
          swift_bridgeObjectRetain();
          v68._uint64_t countAndFlagsBits = 59;
          v68._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v68);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v69._uint64_t countAndFlagsBits = (uint64_t)v60;
          v69._unint64_t object = v62;
          String.append(_:)(v69);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v231._uint64_t countAndFlagsBits = 59;
          v231._unint64_t object = (void *)0xE100000000000000;
          v104._uint64_t countAndFlagsBits = (uint64_t)v60;
          v104._unint64_t object = v62;
          String.append(_:)(v104);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        id v105 = objc_msgSend(v53, sel_path);
        if (v105)
        {
          int64_t v106 = v105;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
        }
      }
    }
    uint64_t v116 = self;
    uint64_t v117 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v118 = objc_msgSend(v116, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 262, v117, v53, 0, 0, 0, 0);
    goto LABEL_88;
  }
LABEL_39:
  id v48 = v11;
  swift_retain();
  swift_retain();
  id v223 = v48;
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v232 = v8;
    id v222 = v48;
    swift_retain();
    swift_retain();
    Swift::String v49 = URL.path(percentEncoded:)(1);
    uint64_t v50 = v49._countAndFlagsBits;
    Swift::String v231 = v49;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      unint64_t v51 = (unint64_t)v49._object;
    }
    else
    {
      unint64_t v51 = (unint64_t)v49._object;
      if ((specialized BidirectionalCollection.last.getter(v49._countAndFlagsBits, (unint64_t)v49._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t v50 = v231._countAndFlagsBits;
        unint64_t v51 = (unint64_t)v231._object;
      }
    }
    v230._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v92 = specialized Set._Variant.insert(_:)(&v233, 0x2FuLL);
    uint64_t v93 = v230._countAndFlagsBits;
    uint64_t v94 = HIBYTE(v51) & 0xF;
    if ((v51 & 0x2000000000000000) == 0) {
      uint64_t v94 = v50 & 0xFFFFFFFFFFFFLL;
    }
    if (v94)
    {
      uint64_t v224 = v10;
      v230._uint64_t countAndFlagsBits = v50;
      v230._unint64_t object = (void *)v51;
      MEMORY[0x1F4188790](v92);
      uint64_t v220 = &v230;
      uint64_t v221 = v93;
      swift_bridgeObjectRetain();
      uint64_t v95 = v227;
      char v96 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v219, v50, v51);
      uint64_t v227 = v95;
      if (v97 == 1)
      {
        unint64_t v98 = (unint64_t)v230._object;
        Swift::Int v99 = v230._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v100 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v99, v98, v93);
        unint64_t v102 = v101;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v103 = v102;
      }
      else
      {
        unint64_t v103 = v97;
        uint64_t v100 = (uint64_t)v96;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v10 = v224;
      if (!v103)
      {
        swift_release();
        swift_release();
        id v115 = v222;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v100 = 0;
        unint64_t v114 = 0xE000000000000000;
        goto LABEL_91;
      }
      unint64_t v114 = v103;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v100 = 0;
      unint64_t v114 = 0xE000000000000000;
    }
    swift_release();
    swift_release();
    id v115 = v222;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_91:
    swift_release();
    swift_release();

    unint64_t v108 = v114;
    goto LABEL_92;
  }
  id v70 = objc_msgSend(v48, sel__parameterString);
  if (v70)
  {
    char v71 = v70;
    id v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
    uint64_t v74 = v73;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (id v75 = objc_msgSend(v48, sel_path)) != 0)
    {
      int64_t v76 = v75;
      unint64_t v77 = v48;
      id v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
      uint64_t v80 = v79;

      v231._uint64_t countAndFlagsBits = (uint64_t)v78;
      v231._unint64_t object = v80;
      swift_bridgeObjectRetain();
      v81._uint64_t countAndFlagsBits = 59;
      v81._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v81);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v82._uint64_t countAndFlagsBits = (uint64_t)v72;
      v82._unint64_t object = v74;
      String.append(_:)(v82);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      v231._uint64_t countAndFlagsBits = 59;
      v231._unint64_t object = (void *)0xE100000000000000;
      v107._uint64_t countAndFlagsBits = (uint64_t)v72;
      v107._unint64_t object = v74;
      String.append(_:)(v107);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t v100 = v231._countAndFlagsBits;
    unint64_t v108 = (unint64_t)v231._object;
  }
  else
  {
    id v109 = objc_msgSend(v48, sel_path);
    if (v109)
    {
      uint64_t v110 = v109;
      id v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
      long long v112 = v48;
      unint64_t v108 = v113;
      swift_release();
      swift_release();

      uint64_t v100 = (uint64_t)v111;
    }
    else
    {
      swift_release();
      swift_release();

      uint64_t v100 = 0;
      unint64_t v108 = 0xE000000000000000;
    }
  }
LABEL_92:
  uint64_t v120 = HIBYTE(v108) & 0xF;
  if ((v108 & 0x2000000000000000) == 0) {
    uint64_t v120 = v100 & 0xFFFFFFFFFFFFLL;
  }
  if (!v120)
  {
    swift_bridgeObjectRelease();
    id v139 = v223;
    id v140 = v228;
    swift_retain_n();
    swift_retain_n();
    id v20 = v139;
    if (!_foundation_swift_url_feature_enabled())
    {
      id v168 = objc_msgSend(v20, sel__parameterString);
      if (v168)
      {
        uint64_t v169 = v168;
        id v170 = static String._unconditionallyBridgeFromObjectiveC(_:)(v168);
        uint64_t v172 = v171;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v173 = objc_msgSend(v20, sel_path)) != 0)
        {
          uint64_t v174 = v173;
          id v175 = static String._unconditionallyBridgeFromObjectiveC(_:)(v173);
          id v177 = v176;

          v231._uint64_t countAndFlagsBits = (uint64_t)v175;
          v231._unint64_t object = v177;
          swift_bridgeObjectRetain();
          v178._uint64_t countAndFlagsBits = 59;
          v178._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v178);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v179._uint64_t countAndFlagsBits = (uint64_t)v170;
          v179._unint64_t object = v172;
          String.append(_:)(v179);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v231._uint64_t countAndFlagsBits = 59;
          v231._unint64_t object = (void *)0xE100000000000000;
          v187._uint64_t countAndFlagsBits = (uint64_t)v170;
          v187._unint64_t object = v172;
          String.append(_:)(v187);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
        goto LABEL_163;
      }
      id v186 = objc_msgSend(v20, sel_path);
      if (!v186)
      {
        swift_release();
        swift_release();

        goto LABEL_163;
      }
      id v141 = v186;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v186);
      swift_release();
      swift_release();

LABEL_162:
LABEL_163:
      char v212 = self;
      uint64_t v213 = String._bridgeToObjectiveCImpl()();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      id v91 = objc_msgSend(v212, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 4, v213, v20, 0, 0, 0, 0);
LABEL_63:
      v91;
      swift_unknownObjectRelease();

      return swift_willThrow();
    }
    v231._uint64_t countAndFlagsBits = (uint64_t)v20;
    v231._unint64_t object = v140;
    uint64_t v232 = v8;
    id v141 = v20;
    swift_retain();
    swift_retain();
    Swift::String v142 = URL.path(percentEncoded:)(1);
    Swift::String v231 = v142;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v142._countAndFlagsBits, (unint64_t)v142._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v230._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v143 = specialized Set._Variant.insert(_:)(&v233, 0x2FuLL);
    uint64_t v144 = v230._countAndFlagsBits;
    uint64_t v145 = v231._countAndFlagsBits;
    unint64_t v146 = v231._object;
    unint64_t v147 = ((unint64_t)v231._object >> 56) & 0xF;
    if (((uint64_t)v231._object & 0x2000000000000000) == 0) {
      unint64_t v147 = v231._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v147)
    {
      char v148 = v141;
      Swift::String v230 = v231;
      MEMORY[0x1F4188790](v143);
      uint64_t v220 = &v230;
      uint64_t v221 = v144;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v219, v145, (unint64_t)v146);
      if (v149 == 1)
      {
        unint64_t v151 = (unint64_t)v230._object;
        Swift::Int v150 = v230._countAndFlagsBits;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v150, v151, v144);
        uint64_t v153 = v152;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v153 = v149;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v141 = v148;
      if (!v153)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_161;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_161:
    swift_release();
    swift_release();
    goto LABEL_162;
  }
  id v121 = v16;
  swift_retain();
  swift_retain();
  int v122 = _foundation_swift_url_feature_enabled();
  id v222 = (id)v100;
  if (v122)
  {
    v231._uint64_t countAndFlagsBits = (uint64_t)v121;
    v231._unint64_t object = v229;
    uint64_t v232 = v10;
    id v123 = v121;
    swift_retain();
    uint64_t v224 = v10;
    swift_retain();
    Swift::String v124 = URL.path(percentEncoded:)(1);
    Swift::String v231 = v124;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v124._countAndFlagsBits, (unint64_t)v124._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v230._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v125 = specialized Set._Variant.insert(_:)(&v233, 0x2FuLL);
    uint64_t v126 = v230._countAndFlagsBits;
    uint64_t v127 = v231._countAndFlagsBits;
    id v128 = v231._object;
    unint64_t v129 = ((unint64_t)v231._object >> 56) & 0xF;
    if (((uint64_t)v231._object & 0x2000000000000000) == 0) {
      unint64_t v129 = v231._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v129)
    {
      id v228 = (id)v108;
      Swift::String v230 = v231;
      MEMORY[0x1F4188790](v125);
      uint64_t v220 = &v230;
      uint64_t v221 = v126;
      swift_bridgeObjectRetain();
      uint64_t v130 = v127;
      uint64_t v131 = v227;
      int v132 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v219, v130, (unint64_t)v128);
      uint64_t v227 = v131;
      if (v133 == 1)
      {
        unint64_t v134 = (unint64_t)v230._object;
        Swift::Int v135 = v230._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v136 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v135, v134, v126);
        unint64_t v138 = v137;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v136 = (uint64_t)v132;
        unint64_t v138 = v133;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = v224;
      unint64_t v108 = (unint64_t)v228;
      if (!v138)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v136 = 0;
        unint64_t v138 = 0xE000000000000000;
        goto LABEL_131;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v136 = 0;
      unint64_t v138 = 0xE000000000000000;
      uint64_t v10 = v224;
    }
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_131:
    swift_release();
    swift_release();

    goto LABEL_143;
  }
  id v154 = objc_msgSend(v121, sel__parameterString);
  if (v154)
  {
    id v155 = v154;
    unint64_t v156 = v108;
    uint64_t v157 = v10;
    id v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v154);
    uint64_t v160 = v159;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (id v161 = objc_msgSend(v121, sel_path)) != 0)
    {
      uint64_t v162 = v161;
      id v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v161);
      uint64_t v165 = v164;

      v231._uint64_t countAndFlagsBits = (uint64_t)v163;
      v231._unint64_t object = v165;
      swift_bridgeObjectRetain();
      v166._uint64_t countAndFlagsBits = 59;
      v166._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v166);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v167._uint64_t countAndFlagsBits = (uint64_t)v158;
      v167._unint64_t object = v160;
      String.append(_:)(v167);
      swift_release();
      swift_release();

      uint64_t v10 = v157;
      swift_bridgeObjectRelease();
    }
    else
    {
      v231._uint64_t countAndFlagsBits = 59;
      v231._unint64_t object = (void *)0xE100000000000000;
      v180._uint64_t countAndFlagsBits = (uint64_t)v158;
      v180._unint64_t object = v160;
      String.append(_:)(v180);
      swift_release();
      swift_release();

      uint64_t v10 = v157;
    }
    swift_bridgeObjectRelease();
    uint64_t v136 = v231._countAndFlagsBits;
    unint64_t v138 = (unint64_t)v231._object;
    unint64_t v108 = v156;
  }
  else
  {
    unint64_t v181 = v108;
    uint64_t v182 = v10;
    id v183 = objc_msgSend(v121, sel_path);
    if (v183)
    {
      unsigned __int8 v184 = v183;
      uint64_t v136 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v183);
      unint64_t v138 = v185;
      swift_release();
      swift_release();

      uint64_t v10 = v182;
    }
    else
    {
      swift_release();
      swift_release();

      uint64_t v136 = 0;
      unint64_t v138 = 0xE000000000000000;
    }
    unint64_t v108 = v181;
  }
LABEL_143:
  uint64_t v188 = HIBYTE(v138) & 0xF;
  if ((v138 & 0x2000000000000000) == 0) {
    uint64_t v188 = v136 & 0xFFFFFFFFFFFFLL;
  }
  if (!v188)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v189 = v121;
    swift_retain_n();
    swift_retain_n();
    id v53 = v189;
    if (_foundation_swift_url_feature_enabled())
    {
      v231._uint64_t countAndFlagsBits = (uint64_t)v53;
      v231._unint64_t object = v229;
      uint64_t v232 = v10;
      id v190 = v53;
      swift_retain();
      swift_retain();
      Swift::String v191 = URL.path(percentEncoded:)(1);
      Swift::String v231 = v191;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v191._countAndFlagsBits, (unint64_t)v191._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }
      v230._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v192 = specialized Set._Variant.insert(_:)(&v233, 0x2FuLL);
      uint64_t v193 = v230._countAndFlagsBits;
      uint64_t v194 = v231._countAndFlagsBits;
      uint64_t v195 = v231._object;
      unint64_t v196 = ((unint64_t)v231._object >> 56) & 0xF;
      if (((uint64_t)v231._object & 0x2000000000000000) == 0) {
        unint64_t v196 = v231._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v196)
      {
        id v228 = v190;
        uint64_t v224 = v10;
        Swift::String v230 = v231;
        MEMORY[0x1F4188790](v192);
        uint64_t v220 = &v230;
        uint64_t v221 = v193;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v219, v194, (unint64_t)v195);
        if (v197 == 1)
        {
          unint64_t v198 = (unint64_t)v230._object;
          Swift::Int v199 = v230._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v199, v198, v193);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v190 = v228;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v200 = objc_msgSend(v53, sel__parameterString);
      if (v200)
      {
        Swift::Int v201 = v200;
        id v202 = static String._unconditionallyBridgeFromObjectiveC(_:)(v200);
        uint64_t v204 = v203;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v205 = objc_msgSend(v53, sel_path)) != 0)
        {
          char v206 = v205;
          id v207 = static String._unconditionallyBridgeFromObjectiveC(_:)(v205);
          uint64_t v209 = v208;

          v231._uint64_t countAndFlagsBits = (uint64_t)v207;
          v231._unint64_t object = v209;
          swift_bridgeObjectRetain();
          v210._uint64_t countAndFlagsBits = 59;
          v210._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v210);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v211._uint64_t countAndFlagsBits = (uint64_t)v202;
          v211._unint64_t object = v204;
          String.append(_:)(v211);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v231._uint64_t countAndFlagsBits = 59;
          v231._unint64_t object = (void *)0xE100000000000000;
          v216._uint64_t countAndFlagsBits = (uint64_t)v202;
          v216._unint64_t object = v204;
          String.append(_:)(v216);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        id v214 = objc_msgSend(v53, sel_path);
        if (v214)
        {
          BOOL v215 = v214;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v214);
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
        }
      }
    }
    unint64_t v217 = self;
    uint64_t v218 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v118 = objc_msgSend(v217, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, 4, v218, v53, 0, 0, 0, 0);
LABEL_88:
    v118;
    swift_unknownObjectRelease();

    return swift_willThrow();
  }
  _FileManagerImpl.copyItem(atPath:toPath:options:)((uint64_t)v222, v108, v136, v138, v225);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void _FileManagerImpl.copyItem(atPath:toPath:options:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = MEMORY[0x185309640](v6);
  if (v12)
  {
    char v16 = 1;
    int v17 = (a5 << 10) & 0x4000000;
    uint64_t v18 = v12;
    MEMORY[0x1F4188790](v12);
    v15[2] = a1;
    v15[3] = a2;
    v15[4] = a3;
    v15[5] = a4;
    v15[6] = v13;
    v15[7] = &v16;
    id v14 = v13;
    specialized String.withFileSystemRepresentation<A>(_:)((uint64_t (*)(char *))_s10Foundation15_FileOperationsO010linkOrCopyB033_0F974932CC9FBACA9047618113061023LL_3dst4with8delegateySS_SSSo13NSFileManagerCxtKAA04LinkeF8DelegateAELLRzlFZySPys4Int8VGSgKXEfU_AC04copyB0_2toAG7optionsySS_SSAJSo0mnF7OptionsVtKFZ0fbP0L_V_TG5TA_0, (uint64_t)v15, a1, a2);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void sub_181A7E638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double one-time initialization function for powerOfTen()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[UInt16]>);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 39;
  *(_OWORD *)(v0 + 16) = xmmword_18210C650;
  *(void *)(v0 + 32) = &outlined read-only object #0 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 40) = &outlined read-only object #1 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 48) = &outlined read-only object #2 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 56) = &outlined read-only object #3 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 64) = &outlined read-only object #4 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 72) = &outlined read-only object #5 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 80) = &outlined read-only object #6 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 88) = &outlined read-only object #7 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 96) = &outlined read-only object #8 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 104) = &outlined read-only object #9 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 112) = &outlined read-only object #10 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 120) = &outlined read-only object #11 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 128) = &outlined read-only object #12 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 136) = &outlined read-only object #13 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 144) = &outlined read-only object #14 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 152) = &outlined read-only object #15 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 160) = &outlined read-only object #16 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 168) = &outlined read-only object #17 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 176) = &outlined read-only object #18 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 184) = &outlined read-only object #19 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 192) = &outlined read-only object #20 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 200) = &outlined read-only object #21 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 208) = &outlined read-only object #22 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 216) = &outlined read-only object #23 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 224) = &outlined read-only object #24 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 232) = &outlined read-only object #25 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 240) = &outlined read-only object #26 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 248) = &outlined read-only object #27 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 256) = &outlined read-only object #28 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 264) = &outlined read-only object #29 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 272) = &outlined read-only object #30 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 280) = &outlined read-only object #31 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 288) = &outlined read-only object #32 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 296) = &outlined read-only object #33 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 304) = &outlined read-only object #34 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 312) = &outlined read-only object #35 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 320) = &outlined read-only object #36 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 328) = &outlined read-only object #37 of one-time initialization function for powerOfTen;
  *(void *)(v0 + 336) = &outlined read-only object #38 of one-time initialization function for powerOfTen;
  powerOfTen._rawValue = (void *)v0;
  return result;
}

uint64_t ICUNumberFormatterBase.attributedFormatPositions(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v34[2] = *MEMORY[0x1E4F143B8];
  switch(BYTE4(a3))
  {
    case 1:
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_allocObject();
      ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
      break;
    case 2:
      int v6 = a3;
      uint64_t v7 = *(void *)(v3 + 16);
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_allocObject();
      ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v7, a1, a2, v6);
      break;
    case 3:
      uint64_t v10 = *(void *)(v3 + 16);
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_allocObject();
      swift_bridgeObjectRetain();
      ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v10, a1, a2);
      break;
    default:
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_allocObject();
      ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
      break;
  }
  uint64_t v11 = swift_retain_n();
  MEMORY[0x1F4188790](v11);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v32, v34);
  uint64_t v8 = v34[0];
  uint64_t v12 = v34[1];
  swift_release_n();
  if (!v12)
  {
    swift_release_n();
    return 0;
  }
  type metadata accessor for ICU.FieldPositer();
  uint64_t inited = swift_initStackObject();
  LODWORD(v34[0]) = 0;
  uint64_t v14 = ufieldpositer_open();
  if (v14)
  {
    *(void *)(inited + 16) = v14;
    if (SLODWORD(v34[0]) < 1)
    {
      LODWORD(v34[0]) = 0;
      unumf_resultGetAllFieldPositions();
      if (SLODWORD(v34[0]) < 1)
      {
        uint64_t v33 = 0;
        int v15 = ufieldpositer_next();
        v32[9] = inited;
        if ((v15 & 0x80000000) == 0)
        {
          int v16 = v15;
          uint64_t v17 = (int)v33;
          uint64_t v18 = SHIDWORD(v33);
          id v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
          unint64_t v21 = v19[2];
          unint64_t v20 = v19[3];
          unint64_t v22 = v21 + 1;
          if (v21 >= v20 >> 1)
          {
            uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v19);
            unint64_t v22 = v21 + 1;
            id v19 = v31;
          }
          v19[2] = v22;
          uint64_t v23 = &v19[3 * v21];
          *((_DWORD *)v23 + 8) = v16;
          v23[5] = v18;
          v23[6] = v17;
          int v24 = ufieldpositer_next();
          if ((v24 & 0x80000000) == 0)
          {
            int v25 = v24;
            do
            {
              uint64_t v26 = (int)v33;
              uint64_t v27 = SHIDWORD(v33);
              unint64_t v29 = v19[2];
              unint64_t v28 = v19[3];
              if (v29 >= v28 >> 1) {
                id v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v19);
              }
              v19[2] = v29 + 1;
              id v30 = &v19[3 * v29];
              *((_DWORD *)v30 + 8) = v25;
              v30[5] = v27;
              v30[6] = v26;
              int v25 = ufieldpositer_next();
            }
            while ((v25 & 0x80000000) == 0);
          }
        }
        swift_release_n();
        swift_setDeallocating();
        ufieldpositer_close();
        return v8;
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_release_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
    }
    return 0;
  }
  __break(1u);
  swift_release_n();
  uint64_t result = swift_willThrow();
  __break(1u);
  return result;
}

uint64_t initializeWithCopy for Locale.Components(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = *(void *)(a2 + 40);
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    long long v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    uint64_t v8 = *(void *)(a2 + 72);
    if (v8) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  uint64_t v6 = *(void *)(a2 + 40);
  if (!v6) {
    goto LABEL_6;
  }
LABEL_3:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = *(void *)(a2 + 72);
  if (v8)
  {
LABEL_4:
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v8;
    uint64_t v9 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
LABEL_7:
  long long v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v12;
LABEL_8:
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v13 = *(void *)(a2 + 112);
  if (v13)
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v13;
    uint64_t v14 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v15 = *(void *)(a2 + 144);
    if (v15) {
      goto LABEL_10;
    }
LABEL_13:
    long long v20 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v20;
    uint64_t v17 = *(void *)(a2 + 176);
    if (v17) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  long long v19 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v19;
  uint64_t v15 = *(void *)(a2 + 144);
  if (!v15) {
    goto LABEL_13;
  }
LABEL_10:
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v15;
  uint64_t v16 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = *(void *)(a2 + 176);
  if (v17)
  {
LABEL_11:
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = v17;
    uint64_t v18 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
LABEL_14:
  long long v21 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v21;
LABEL_15:
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  uint64_t v22 = *(void *)(a2 + 216);
  if (v22)
  {
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a1 + 216) = v22;
    uint64_t v23 = *(void *)(a2 + 232);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(void *)(a1 + 232) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v24 = *(void *)(a2 + 248);
    if (v24) {
      goto LABEL_17;
    }
LABEL_20:
    long long v29 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v29;
    uint64_t v26 = *(void *)(a2 + 280);
    if (v26) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  long long v28 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v28;
  uint64_t v24 = *(void *)(a2 + 248);
  if (!v24) {
    goto LABEL_20;
  }
LABEL_17:
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v24;
  uint64_t v25 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = *(void *)(a2 + 280);
  if (v26)
  {
LABEL_18:
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 280) = v26;
    uint64_t v27 = *(void *)(a2 + 296);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(void *)(a1 + 296) = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_22;
  }
LABEL_21:
  long long v30 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v30;
LABEL_22:
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  uint64_t v31 = *(void *)(a2 + 328);
  swift_unknownObjectRetain();
  if (v31)
  {
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(void *)(a1 + 328) = v31;
    uint64_t v32 = *(void *)(a2 + 336);
    uint64_t v33 = *(void *)(a2 + 344);
    *(void *)(a1 + 336) = v32;
    *(void *)(a1 + 344) = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v34 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v34;
  }
  return a1;
}

uint64_t Locale.Language.Components.init(identifier:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v3 = swift_release();
  if (Language < 1)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  else
  {
    v29[Language] = 0;
    uint64_t v3 = MEMORY[0x185301F80](v29);
    uint64_t v25 = v4;
    uint64_t v26 = v3;
  }
  MEMORY[0x1F4188790](v3);
  LODWORD(v27) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  uint64_t v6 = swift_release();
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (Script >= 1)
  {
    v23[Script] = 0;
    uint64_t v6 = MEMORY[0x185301F80](v23);
    uint64_t v7 = v6;
    uint64_t v8 = v9;
  }
  MEMORY[0x1F4188790](v6);
  LODWORD(v27) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if ((int)v27 <= 0 && Country >= 1)
  {
    v23[Country] = 0;
    uint64_t v11 = MEMORY[0x185301F80](v23);
    uint64_t v12 = v13;
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = v25;
  if (v25)
  {
    Swift::String v15 = String.lowercased()();
    uint64_t countAndFlagsBits = v15._countAndFlagsBits;
    unint64_t object = v15._object;
    if (v8) {
      goto LABEL_11;
    }
LABEL_14:
    uint64_t v7 = 0;
    uint64_t v18 = 0;
    long long v19 = 0;
    if (v12) {
      goto LABEL_12;
    }
LABEL_15:
    uint64_t v11 = 0;
    uint64_t result = 0;
    long long v21 = 0;
    goto LABEL_16;
  }
  uint64_t v26 = 0;
  uint64_t countAndFlagsBits = 0;
  unint64_t object = 0;
  if (!v8) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v27 = v7;
  uint64_t v28 = v8;
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v17 = String._capitalized()();
  uint64_t v18 = v17._countAndFlagsBits;
  long long v19 = v17._object;
  swift_bridgeObjectRelease();
  uint64_t v14 = v25;
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_15;
  }
LABEL_12:
  Swift::String v22 = String.uppercased()();
  long long v21 = v22._object;
  uint64_t result = v22._countAndFlagsBits;
LABEL_16:
  *a1 = v26;
  a1[1] = v14;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v18;
  a1[7] = (uint64_t)v19;
  a1[8] = v11;
  a1[9] = v12;
  a1[10] = result;
  a1[11] = (uint64_t)v21;
  return result;
}

void sub_181A7FB6C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 72), 8);
  _Unwind_Resume(a1);
}

void AttributeContainer.init(_:)(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = a1;
  Swift::String v104 = a2;
  uint64_t Default = _loadDefaultAttributes()(a1);
  uint64_t v4 = Default;
  int64_t v5 = 0;
  id v118 = 0;
  long long v141 = MEMORY[0x1E4FBC868];
  uint64_t v6 = *(void *)(v2 + 64);
  uint64_t v115 = v2 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v6;
  long long v10 = (char *)&v132 + 8;
  uint64_t v11 = &v140;
  id v109 = @"NSCocoaErrorDomain";
  int64_t v122 = (unint64_t)(v7 + 63) >> 6;
  int64_t v103 = v122 - 1;
  uint64_t v107 = MEMORY[0x1E4FBC838] + 8;
  uint64_t v105 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v113 = v2;
  uint64_t v114 = Default;
  uint64_t v117 = (char *)&v132 + 8;
  uint64_t v116 = &v140;
  while (v9)
  {
    unint64_t v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v13 = v12 | (v5 << 6);
LABEL_7:
    uint64_t v14 = *(void *)(v2 + 56);
    *(void *)&long long v132 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    Swift::String v15 = (void *)v132;
    outlined init with copy of Any(v14 + 32 * v13, (uint64_t)v10);
    id v16 = v15;
LABEL_17:
    outlined init with take of LocalePreferences?((uint64_t)&v132, (uint64_t)&v139, &demangling cache variable for type metadata for (key: NSAttributedStringKey, value: Any)?);
    long long v19 = v139;
    if (!v139)
    {
      swift_bridgeObjectRelease();
      swift_release();
      *Swift::String v104 = v141;
      return;
    }
    outlined init with take of Any(v11, &v137);
    id v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    if (*(void *)(v4 + 16)
      && (unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20, v21), (v23 & 1) != 0))
    {
      uint64_t v24 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v22);
      uint64_t v26 = *v24;
      uint64_t v25 = v24[1];
      swift_bridgeObjectRelease();
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v27 = type metadata accessor for Optional();
      Swift::String v124 = &v102;
      uint64_t v123 = v27;
      uint64_t v120 = *(void *)(v27 - 8);
      uint64_t v28 = *(void *)(v120 + 64);
      MEMORY[0x1F4188790](v27);
      uint64_t v127 = (char *)&v102 - v29;
      uint64_t v30 = v138;
      uint64_t v31 = __swift_project_boxed_opaque_existential_1(&v137, v138);
      uint64_t isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      uint64_t v33 = *(void *)(*(void *)(v30 - 8) + 64);
      int64_t v125 = v5;
      unint64_t v126 = v9;
      if (isClassOrObjCExistentialType)
      {
        if (v33 != 8) {
          goto LABEL_67;
        }
        uint64_t v34 = *v31;
        swift_unknownObjectRetain();
      }
      else
      {
        double v99 = MEMORY[0x1F4188790](isClassOrObjCExistentialType);
        (*(void (**)(char *, uint64_t *, uint64_t, double))(v101 + 16))((char *)&v102 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0), v31, v30, v99);
        uint64_t v34 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      }
      uint64_t v119 = v25;
      uint64_t v35 = swift_conformsToProtocol2();
      if (v35) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = 0;
      }
      if (v35) {
        uint64_t v37 = v26;
      }
      else {
        uint64_t v37 = 0;
      }
      if (v37)
      {
        swift_getAssociatedTypeWitness();
        unint64_t v121 = v34;
        uint64_t v38 = swift_dynamicCastUnknownClass();
        if (!v38)
        {
          id v54 = v109;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
          id v55 = objc_allocWithZone((Class)NSError);
          uint64_t v56 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v57 = objc_msgSend(v55, sel_initWithDomain_code_userInfo_, v56, 4866, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v58 = objc_msgSend(v57, sel_domain);
          id v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
          uint64_t v61 = v60;

          id v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
          unint64_t v9 = v126;
          if (v59 == v62 && v61 == v63)
          {
            swift_bridgeObjectRelease_n();
            long long v10 = v117;
            uint64_t v11 = v116;
          }
          else
          {
            char v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            long long v10 = v117;
            uint64_t v11 = v116;
            if ((v96 & 1) == 0) {
              goto LABEL_68;
            }
          }
          goto LABEL_49;
        }
        uint64_t v39 = v38;
        uint64_t v40 = swift_getAssociatedTypeWitness();
        long long v112 = &v102;
        double v41 = MEMORY[0x1F4188790](v40);
        uint64_t v42 = v39;
        unint64_t v43 = v118;
        (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v36 + 32))(v42, v37, v36, v41);
        unint64_t v9 = v126;
        if (v43)
        {
          swift_unknownObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v137);

          id v118 = 0;
          uint64_t v2 = v113;
          uint64_t v4 = v114;
          long long v10 = v117;
          uint64_t v11 = v116;
          goto LABEL_50;
        }
        id v118 = 0;
        id v52 = v127;
        uint64_t v53 = AssociatedTypeWitness;
        swift_dynamicCast();
        swift_unknownObjectRelease();
        uint64_t v45 = *(void *)(v53 - 8);
LABEL_42:
        uint64_t AssociatedTypeWitness = v45;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v52, 0, 1, v53);
        uint64_t v73 = v119;
        long long v112 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(v119 + 24))(v26, v119);
        unint64_t v121 = v74;
        id v111 = &v102;
        uint64_t v75 = *(void *)(v45 + 64);
        MEMORY[0x1F4188790](v112);
        unint64_t v108 = (char *)&v102 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v76 = v53;
        uint64_t v110 = &v102;
        double v78 = MEMORY[0x1F4188790](v77);
        unint64_t v79 = (char *)&v102 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v80 = v120;
        (*(void (**)(char *, char *, uint64_t, double))(v120 + 16))(v79, v127, v123, v78);
        uint64_t v81 = AssociatedTypeWitness;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(AssociatedTypeWitness + 48))(v79, 1, v76) == 1)
        {
          uint64_t v82 = v123;
          (*(void (**)(char *, uint64_t))(v80 + 8))(v79, v123);
          uint64_t v136 = 0;
          long long v134 = 0u;
          long long v135 = 0u;
          long long v133 = 0u;
          long long v132 = 0u;
          uint64_t v83 = v113;
          uint64_t v84 = v80;
          long long v10 = v117;
          uint64_t v11 = v116;
        }
        else
        {
          uint64_t v85 = *(uint64_t (**)(void))(v81 + 32);
          unint64_t v106 = (v75 + 15) & 0xFFFFFFFFFFFFFFF0;
          uint64_t v86 = v108;
          uint64_t v87 = v85();
          uint64_t v110 = &v102;
          double v88 = MEMORY[0x1F4188790](v87);
          uint64_t v89 = v80;
          uint64_t v90 = (char *)&v102 - v106;
          uint64_t v91 = v81;
          uint64_t v84 = v89;
          uint64_t v92 = *(void (**)(char *, char *, uint64_t, double))(v91 + 16);
          v92((char *)&v102 - v106, v86, v76, v88);
          *((void *)&v130 + 1) = v76;
          *(void *)uint64_t v131 = swift_getAssociatedConformanceWitness();
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v129);
          ((void (*)(uint64_t *, char *, uint64_t))v92)(boxed_opaque_existential_1, v90, v76);
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v73 + 32))(&v132, v26, v73);
          *(_OWORD *)&v131[8] = v132;
          v131[24] = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 40))(v26, v73) & 1;
          uint64_t v94 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 48))(v26, v73);
          uint64_t v95 = *(void (**)(char *, uint64_t))(AssociatedTypeWitness + 8);
          v95(v90, v76);
          uint64_t v136 = v94;
          long long v134 = *(_OWORD *)v131;
          long long v135 = *(_OWORD *)&v131[16];
          long long v133 = v130;
          long long v132 = v129;
          v95(v86, v76);
          uint64_t v83 = v113;
          long long v10 = v117;
          uint64_t v11 = v116;
          uint64_t v82 = v123;
        }
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v132, (unint64_t)v112, v121);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v84 + 8))(v127, v82);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v137);

        int64_t v5 = v125;
        uint64_t v2 = v83;
        uint64_t v4 = v114;
      }
      else
      {
        long long v112 = &v102;
        uint64_t v44 = AssociatedTypeWitness;
        uint64_t v45 = *(void *)(AssociatedTypeWitness - 8);
        MEMORY[0x1F4188790](v35);
        char v47 = (char *)&v102 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
        id v111 = &v102;
        *(void *)&long long v132 = v34;
        MEMORY[0x1F4188790](v48);
        swift_unknownObjectRetain();
        char v49 = swift_dynamicCast();
        uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56);
        if (v49)
        {
          v50((char *)&v102 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), 0, 1, v44);
          unint64_t v51 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
          v51(v47, (char *)&v102 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), AssociatedTypeWitness);
          id v52 = v127;
          v51(v127, v47, AssociatedTypeWitness);
          uint64_t v53 = AssociatedTypeWitness;
          swift_unknownObjectRelease();
          unint64_t v9 = v126;
          goto LABEL_42;
        }
        unint64_t v121 = v34;
        v50((char *)&v102 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v44);
        (*(void (**)(char *, uint64_t))(v120 + 8))((char *)&v102 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), v123);
        uint64_t v64 = v109;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
        id v65 = objc_allocWithZone((Class)NSError);
        uint64_t v66 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v57 = objc_msgSend(v65, sel_initWithDomain_code_userInfo_, v66, 4866, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v67 = objc_msgSend(v57, sel_domain);
        id v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
        uint64_t v70 = v69;

        id v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        uint64_t v4 = v114;
        if (v68 == v71 && v70 == v72)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v2 = v113;
          long long v10 = v117;
          uint64_t v11 = v116;
          unint64_t v9 = v126;
        }
        else
        {
          char v97 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v2 = v113;
          long long v10 = v117;
          uint64_t v11 = v116;
          unint64_t v9 = v126;
          if ((v97 & 1) == 0) {
            goto LABEL_69;
          }
        }
LABEL_49:
        swift_willThrow();
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v137);

        id v118 = 0;
LABEL_50:
        int64_t v5 = v125;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v137);
    }
  }
  int64_t v17 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (v17 >= v122) {
    goto LABEL_16;
  }
  unint64_t v18 = *(void *)(v115 + 8 * v17);
  if (v18)
  {
LABEL_11:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v13 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v5 = v17;
    goto LABEL_7;
  }
  v5 += 2;
  if (v17 + 1 >= v122)
  {
    int64_t v5 = v17;
LABEL_16:
    unint64_t v9 = 0;
    *(void *)&long long v134 = 0;
    long long v133 = 0u;
    long long v132 = 0u;
    goto LABEL_17;
  }
  unint64_t v18 = *(void *)(v115 + 8 * v5);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v5;
    goto LABEL_11;
  }
  int64_t v98 = v17 + 2;
  if (v17 + 2 >= v122) {
    goto LABEL_16;
  }
  unint64_t v18 = *(void *)(v115 + 8 * v98);
  if (v18)
  {
LABEL_53:
    int64_t v17 = v98;
    goto LABEL_11;
  }
  int64_t v5 = v17 + 3;
  if (v17 + 3 >= v122)
  {
    int64_t v5 = v17 + 2;
    goto LABEL_16;
  }
  unint64_t v18 = *(void *)(v115 + 8 * v5);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v98 = v17 + 4;
  if (v17 + 4 >= v122) {
    goto LABEL_16;
  }
  unint64_t v18 = *(void *)(v115 + 8 * v98);
  if (v18) {
    goto LABEL_53;
  }
  while (1)
  {
    int64_t v17 = v98 + 1;
    if (__OFADD__(v98, 1)) {
      break;
    }
    if (v17 >= v122)
    {
      int64_t v5 = v103;
      goto LABEL_16;
    }
    unint64_t v18 = *(void *)(v115 + 8 * v17);
    ++v98;
    if (v18) {
      goto LABEL_11;
    }
  }
LABEL_70:
  __break(1u);
}

uint64_t ByteCountFormatStyle.Attributed._format(_:doubleValue:)@<X0>(_WORD *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  v466 = a4;
  uint64_t v11 = 0;
  uint64_t v12 = (uint64_t)v550;
  uint64_t v664 = *MEMORY[0x1E4F143B8];
  uint64_t v475 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  unint64_t v13 = *(char **)(v475 - 8);
  MEMORY[0x1F4188790](v475);
  Swift::String v15 = (char *)&v459 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v474 = v14;
  MEMORY[0x1F4188790](v16);
  v476 = (char *)&v459 - v17;
  uint64_t v18 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v18);
  long long v21 = v5[1];
  long long v492 = *v5;
  v493[0] = v21;
  *(void *)&v493[1] = *((void *)v5 + 4);
  unint64_t v488 = 0;
  if ((v21 & 1) != 0 && (*(void *)&a5 & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    v471 = v19;
    v477 = (_WORD *)((char *)&v459 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v119 = (BYTE8(v492) >> 1) & 1;
    *(void *)v494 = 0;
    *(void *)&v494[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    *(void *)v494 = 0xD000000000000015;
    *(void *)&v494[8] = 0x80000001823B3FF0;
    if (one-time initialization token for unitNames != -1) {
      swift_once();
    }
    v472 = v13;
    v473 = v15;
    if (*(void *)(static ByteCountFormatStyle.Unit.unitNames + 16) <= v119)
    {
      __break(1u);
    }
    else
    {
      uint64_t v120 = static ByteCountFormatStyle.Unit.unitNames + 16 * v119;
      uint64_t v121 = *(void *)(v120 + 32);
      int64_t v122 = *(void **)(v120 + 40);
      swift_bridgeObjectRetain();
      v123._uint64_t countAndFlagsBits = v121;
      v123._unint64_t object = v122;
      String.append(_:)(v123);
      swift_bridgeObjectRelease();
      if (v119) {
        unint64_t v124 = 0;
      }
      else {
        unint64_t v124 = 0xD000000000000015;
      }
      if (v119) {
        unint64_t v125 = 0xE000000000000000;
      }
      else {
        unint64_t v125 = 0x80000001823B4010;
      }
      unint64_t v126 = v125;
      String.append(_:)(*(Swift::String *)&v124);
      swift_bridgeObjectRelease();
      uint64_t v127 = *(void *)v494;
      unint64_t v128 = *(void *)&v494[8];
      v592[0] = *(_OWORD *)((char *)v493 + 8);
      *(_OWORD *)v494 = *(_OWORD *)((char *)v493 + 8);
      outlined retain of Locale((uint64_t)v592);
      long long v129 = specialized static ICUByteCountNumberFormatter.create(for:locale:)(v127, v128, (uint64_t *)v494);
      swift_bridgeObjectRelease();
      outlined release of ByteCountFormatStyle.Attributed((uint64_t)&v492);
      if (!v129)
      {
        BigString.init(_:)();
        uint64_t result = AttributedString.init(_:attributes:)(v494, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v550);
        uint64_t *v466 = *(void *)v550;
        return result;
      }
      v483 = (os_unfair_lock_s *)v119;
      swift_retain();
      uint64_t v130 = ICUNumberFormatterBase.attributedFormatPositions(_:)(0, 0, 0);
      v469 = v129;
      if (v131)
      {
        uint64_t v11 = (void *)v130;
        long long v133 = v131;
        long long v134 = v132;
        swift_bridgeObjectRetain();
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(v605, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v494);
        uint64_t v48 = *(void *)v494;
        uint64_t v135 = v134[2];
        if (v135)
        {
          swift_bridgeObjectRetain();
          unint64_t v136 = lazy protocol witness table accessor for type String and conformance String();
          uint64_t v481 = (uint64_t)v11;
          int64_t v482 = v136;
          v470 = v134;
          long long v137 = v134 + 6;
          v480 = v133;
          while (2)
          {
            uint64_t v12 = *((unsigned int *)v137 - 4);
            int64_t v486 = (int64_t)v137;
            uint64_t v25 = *v137;
            *(void *)v494 = v11;
            *(void *)&v494[8] = v133;
            swift_bridgeObjectRetain();
            a2 = (unsigned char *)v482;
            unint64_t v138 = String.Index.init<A>(utf16Offset:in:)();
            *(void *)v494 = v11;
            *(void *)&v494[8] = v133;
            swift_bridgeObjectRetain();
            unint64_t v139 = String.Index.init<A>(utf16Offset:in:)();
            if (v139 >> 14 < v138 >> 14) {
              goto LABEL_187;
            }
            unint64_t v140 = v139;
            swift_retain();
            specialized Range<>.init<A>(_range:in:)(v138, v140, (_OWORD *)v48, (uint64_t *)v494);
            uint64_t v141 = v495;
            if ((void)v495 == 2) {
              __break(1u);
            }
            v487 = *(void **)v494;
            *((void *)&v484 + 1) = *(void *)&v494[16];
            unint64_t v485 = *(void *)&v494[8];
            uint64_t v142 = *((void *)&v495 + 1);
            uint64_t v144 = *((void *)&v496 + 1);
            uint64_t v143 = v496;
            uint64_t v145 = (_OWORD *)v497;
            *(void *)v550 = MEMORY[0x1E4FBC868];
            *(void *)&v550[8] = MEMORY[0x1E4FBC870];
            char v146 = 0;
            char v147 = 2;
            char v148 = (char)v483;
            switch((int)v12)
            {
              case 0:
                goto LABEL_90;
              case 1:
                char v146 = 1;
LABEL_90:
                specialized AttributeContainer.subscript.setter(v146);
                if (v12 > 0xA) {
                  goto LABEL_100;
                }
                goto LABEL_97;
              case 2:
                goto LABEL_96;
              case 6:
                char v147 = 0;
                goto LABEL_96;
              case 7:
                char v147 = 3;
                goto LABEL_96;
              case 8:
                char v147 = 4;
                goto LABEL_96;
              case 10:
                char v147 = 1;
LABEL_96:
                specialized AttributeContainer.subscript.setter(v147);
                if (v12 > 0xA) {
                  goto LABEL_100;
                }
LABEL_97:
                if ((0x447u >> v12))
                {
                  char v148 = 9;
LABEL_99:
                  specialized AttributeContainer.subscript.setter(v148);
                }
LABEL_100:
                long long v526 = *(_OWORD *)v550;
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *(void *)&long long v484 = v135;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  long long v150 = *(_OWORD *)(v48 + 32);
                  long long v660 = *(_OWORD *)(v48 + 16);
                  long long v661 = v150;
                  long long v662 = *(_OWORD *)(v48 + 48);
                  uint64_t v151 = *(void *)(v48 + 64);
                  uint64_t v152 = *(void *)(v48 + 72);
                  v478 = v145;
                  uint64_t v479 = v144;
                  uint64_t v153 = v143;
                  uint64_t v154 = v142;
                  uint64_t v156 = *(void *)(v48 + 80);
                  uint64_t v155 = *(void *)(v48 + 88);
                  type metadata accessor for AttributedString.Guts();
                  swift_allocObject();
                  outlined retain of Locale((uint64_t)&v660);
                  swift_unknownObjectRetain();
                  uint64_t v157 = v156;
                  uint64_t v158 = v155;
                  uint64_t v142 = v154;
                  uint64_t v143 = v153;
                  uint64_t v145 = v478;
                  uint64_t v144 = v479;
                  uint64_t v159 = AttributedString.Guts.init(string:runs:)(&v660, v151, v152, v157, v158);
                  swift_release();
                  uint64_t v48 = v159;
                }
                long long v160 = *(_OWORD *)(v48 + 32);
                long long v656 = *(_OWORD *)(v48 + 16);
                long long v657 = v160;
                long long v658 = *(_OWORD *)(v48 + 48);
                swift_retain();
                outlined retain of Locale((uint64_t)&v656);
                BigString.startIndex.getter();
                outlined release of Locale((uint64_t)&v656);
                long long v161 = *(_OWORD *)(v48 + 16);
                long long v653 = *(_OWORD *)(v48 + 32);
                long long v654 = *(_OWORD *)(v48 + 48);
                long long v652 = v161;
                long long v162 = *(_OWORD *)(v48 + 16);
                long long v588 = *(_OWORD *)(v48 + 32);
                long long v589 = v654;
                long long v587 = v162;
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v587, (uint64_t)v601);
                outlined retain of Locale((uint64_t)v601);
                BigString.endIndex.getter();
                outlined release of Locale((uint64_t)&v652);
                swift_release();
                *(void *)&long long v545 = v487;
                *((void *)&v545 + 1) = v485;
                *(void *)&long long v546 = *((void *)&v484 + 1);
                *((void *)&v546 + 1) = v141;
                *(void *)&long long v547 = v142;
                *((void *)&v547 + 1) = v143;
                uint64_t v548 = v144;
                v549 = v145;
                long long v163 = *(_OWORD *)(v48 + 16);
                long long v650 = *(_OWORD *)(v48 + 32);
                long long v651 = *(_OWORD *)(v48 + 48);
                long long v649 = v163;
                swift_retain_n();
                BigString.unicodeScalars.getter();
                BigString.UnicodeScalarView.subscript.getter();
                outlined release of Locale((uint64_t)&v606);
                uint64_t v164 = BigSubstring.UnicodeScalarView.startIndex.getter();
                uint64_t v165 = v48;
                uint64_t v167 = v166;
                uint64_t v169 = v168;
                uint64_t v25 = v170;
                uint64_t v171 = BigSubstring.UnicodeScalarView.endIndex.getter();
                a2 = v172;
                uint64_t v174 = v173;
                uint64_t v176 = v175;
                outlined release of Locale((uint64_t)v585);
                swift_release();
                v487 = (void *)v165;
                *(void *)v494 = v165;
                *(void *)&v494[8] = v164;
                *(void *)&v494[16] = v167;
                *(void *)&long long v495 = v169;
                *((void *)&v495 + 1) = v25;
                *(void *)&long long v496 = v171;
                *((void *)&v496 + 1) = a2;
                *(void *)&long long v497 = v174;
                *((void *)&v497 + 1) = v176;
                if (one-time initialization token for currentIdentity != -1) {
                  swift_once();
                }
                id v177 = (uint64_t *)(static AttributedString.currentIdentity + 16);
                Swift::String v178 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
                swift_retain();
                os_unfair_lock_lock(v178);
                unint64_t v179 = v488;
                closure #1 in static AttributedString._nextModifyIdentity.getter(v177, (uint64_t *)&v516);
                unint64_t v488 = v179;
                os_unfair_lock_unlock(v178);
                swift_release();
                uint64_t v180 = v516;
                *(void *)&long long v498 = v516;
                BigString.init()();
                unint64_t v516 = 0;
                MEMORY[0x185309530](&v516, 8);
                uint64_t v181 = v516;
                type metadata accessor for AttributedString.Guts();
                uint64_t v12 = swift_allocObject();
                char v182 = BigString.isEmpty.getter();
                uint64_t v11 = (void *)v481;
                if ((v182 & 1) == 0) {
                  goto LABEL_188;
                }
                long long v183 = v615;
                *(_OWORD *)(v12 + 16) = v614;
                *(_OWORD *)(v12 + 32) = v183;
                *(_OWORD *)(v12 + 48) = v616;
                *(void *)(v12 + 64) = 0;
                *(void *)(v12 + 72) = 0;
                *(void *)(v12 + 80) = 0;
                *(void *)(v12 + 88) = v181;
                swift_release();
                LOBYTE(v516) = 0;
                AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v526, (char *)&v516);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((void)v498 != v180) {
                  goto LABEL_248;
                }
                long long v137 = (uint64_t *)(v486 + 24);
                uint64_t v48 = *(void *)v494;
                swift_release();
                uint64_t v135 = v484 - 1;
                long long v133 = v480;
                if ((void)v484 != 1) {
                  continue;
                }
                swift_bridgeObjectRelease();
                break;
              case 11:
                goto LABEL_99;
              default:
                goto LABEL_100;
            }
            break;
          }
        }
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        *(void *)v494 = 0;
        dispatch thunk of CustomStringConvertible.description.getter();
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(v585, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v494);
        swift_release();
        uint64_t v48 = *(void *)v494;
      }
      uint64_t v11 = (void *)v488;
      *(_OWORD *)v494 = v592[0];
      swift_retain();
      if ((ByteCountFormatStyle.Attributed.useSpelloutZero(forLocale:unit:)((uint64_t)v494, v483) & 1) == 0) {
        goto LABEL_169;
      }
      v487 = (void *)v48;
      v347 = v477;
      _WORD *v477 = 770;
      swift_storeEnumTagMultiPayload();
      a3 = (uint64_t)v476;
      _s10Foundation24ICULegacyNumberFormatterC0C10FormatTypeOWOcTm_0((uint64_t)v347, (uint64_t)v476, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
      uint64_t v348 = *((void *)&v592[0] + 1);
      uint64_t ObjectType = swift_getObjectType();
      v350 = *(uint64_t (**)(uint64_t, uint64_t))(v348 + 64);
      outlined retain of ByteCountFormatStyle.Attributed((uint64_t)&v492);
      uint64_t v351 = v350(ObjectType, v348);
      uint64_t v352 = v475;
      v353 = (uint64_t *)(a3 + *(int *)(v475 + 20));
      uint64_t *v353 = v351;
      v353[1] = v354;
      *(unsigned char *)(a3 + *(int *)(v352 + 24)) = 0;
      if (one-time initialization token for cache == -1) {
        goto LABEL_152;
      }
    }
    swift_once();
LABEL_152:
    uint64_t v355 = static ICULegacyNumberFormatter.cache;
    uint64_t v53 = (os_unfair_lock_s *)unk_1E8ED3298;
    uint64_t v356 = (uint64_t)v473;
    _s10Foundation24ICULegacyNumberFormatterC0C10FormatTypeOWOcTm_0(a3, (uint64_t)v473, type metadata accessor for ICULegacyNumberFormatter.Signature);
    unint64_t v357 = (v472[80] + 16) & ~(unint64_t)v472[80];
    uint64_t v358 = swift_allocObject();
    uint64_t v359 = outlined init with take of ICULegacyNumberFormatter.Signature(v356, v358 + v357);
    MEMORY[0x1F4188790](v359);
    uint64_t v48 = (uint64_t)&v53[4];
    id v54 = v53 + 6;
    swift_retain_n();
    os_unfair_lock_lock(v53 + 6);
    _s10Foundation14FormatterCacheV9formatter3for7creatorq_x_q_yKXEtKFq_SgSDyxq_GzYbXEfU_AA015ICULegacyNumberB0C9Signature33_ADC49A1B068F5C8BE74334B016A6B679LLV_AJTG5TA_0((uint64_t)&v53[4], (uint64_t *)v494);
    os_unfair_lock_unlock(v53 + 6);
    swift_release();
    uint64_t v360 = *(void *)v494;
    if (*(void *)v494)
    {
      swift_release();
      goto LABEL_154;
    }
    uint64_t v431 = partial apply for implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
    if (!v11)
    {
      uint64_t v468 = v431;
      swift_retain();
      os_unfair_lock_lock(v53 + 6);
      if (v355 < *(void *)(*(void *)&v53[4]._os_unfair_lock_opaque + 16))
      {
        char v49 = 0;
        *(void *)uint64_t v48 = MEMORY[0x1E4FBC868];
        goto LABEL_177;
      }
      goto LABEL_176;
    }

    swift_release();
    _s10Foundation24ICULegacyNumberFormatterC9Signature33_ADC49A1B068F5C8BE74334B016A6B679LLVWOhTm_0((uint64_t)v476, type metadata accessor for ICULegacyNumberFormatter.Signature);
    swift_release();
    outlined release of ByteCountFormatStyle.Attributed((uint64_t)&v492);
    _s10Foundation24ICULegacyNumberFormatterC9Signature33_ADC49A1B068F5C8BE74334B016A6B679LLVWOhTm_0((uint64_t)v477, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    uint64_t v432 = (uint64_t)v487;
    swift_release();
    uint64_t result = swift_release();
    uint64_t *v466 = v432;
    return result;
  }
  v477 = a1;
  switch((char)v492)
  {
    case 1:
    case 3:
      uint64_t v11 = (void *)a3;
      if (one-time initialization token for maxBinarySizes != -1) {
        swift_once();
      }
      int v22 = 0;
      char v23 = &static ByteCountFormatStyle.Attributed.maxBinarySizes;
      break;
    default:
      uint64_t v11 = (void *)a3;
      if (one-time initialization token for maxDecimalSizes == -1) {
        goto LABEL_5;
      }
      goto LABEL_193;
  }
  while (2)
  {
    uint64_t v24 = *v23;
    swift_bridgeObjectRetain();
    uint64_t v25 = closure #1 in ByteCountFormatStyle.Attributed._format(_:doubleValue:)((uint64_t)&v492, v24, fabs(a5));
    swift_bridgeObjectRelease();
    if (v22)
    {
      if (one-time initialization token for decimalByteSizes != -1) {
        swift_once();
      }
      uint64_t v26 = static ByteCountFormatStyle.Unit.decimalByteSizes;
      uint64_t v27 = v25;
      if (*(void *)(static ByteCountFormatStyle.Unit.decimalByteSizes + 16) > (unint64_t)v25) {
        goto LABEL_17;
      }
      __break(1u);
    }
    if (one-time initialization token for binaryByteSizes != -1) {
      swift_once();
    }
    uint64_t v26 = static ByteCountFormatStyle.Unit.binaryByteSizes;
    uint64_t v27 = v25;
    if (*(void *)(static ByteCountFormatStyle.Unit.binaryByteSizes + 16) <= (unint64_t)v25)
    {
      __break(1u);
      goto LABEL_195;
    }
LABEL_17:
    uint64_t v28 = v26 + 8 * v27;
    if (v25 >= 2u)
    {
      if (v25 == 2)
      {
        unint64_t v29 = 0xE200000000000000;
        uint64_t v30 = 9006;
      }
      else
      {
        unint64_t v29 = 0xE300000000000000;
        uint64_t v30 = 2302766;
      }
    }
    else
    {
      unint64_t v29 = 0xE100000000000000;
      uint64_t v30 = 46;
    }
    uint64_t v6 = *(void *)(v28 + 32);
    *(void *)v494 = 0;
    *(void *)&v494[8] = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    *(void *)v494 = v30;
    *(void *)&v494[8] = v29;
    v31._uint64_t countAndFlagsBits = 0xD000000000000016;
    v31._unint64_t object = (void *)0x80000001823B3F80;
    String.append(_:)(v31);
    if (one-time initialization token for unitNames != -1) {
      goto LABEL_189;
    }
    while (1)
    {
      if (*(void *)(static ByteCountFormatStyle.Unit.unitNames + 16) <= (unint64_t)v25)
      {
        __break(1u);
LABEL_191:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OpaquePointer?);
        unint64_t v443 = v488;
        _StringGuts._slowWithCString<A>(_:)();
        unint64_t v488 = v443;
        goto LABEL_66;
      }
      uint64_t v32 = static ByteCountFormatStyle.Unit.unitNames + 16 * v25;
      uint64_t v33 = *(void *)(v32 + 32);
      uint64_t v34 = *(void **)(v32 + 40);
      swift_bridgeObjectRetain();
      v35._uint64_t countAndFlagsBits = v33;
      v35._unint64_t object = v34;
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36._uint64_t countAndFlagsBits = 32;
      v36._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v36);
      uint64_t v479 = v25;
      if ((_BYTE)v25) {
        unint64_t v37 = 0;
      }
      else {
        unint64_t v37 = 0xD000000000000014;
      }
      if ((_BYTE)v25) {
        unint64_t v38 = 0xE000000000000000;
      }
      else {
        unint64_t v38 = 0x80000001823AABB0;
      }
      unint64_t v39 = v38;
      String.append(_:)(*(Swift::String *)&v37);
      swift_bridgeObjectRelease();
      uint64_t v40 = *(void *)v494;
      unint64_t v41 = *(void *)&v494[8];
      long long v491 = *(_OWORD *)((char *)v493 + 8);
      *(_OWORD *)v494 = *(_OWORD *)((char *)v493 + 8);
      outlined retain of Locale((uint64_t)&v491);
      uint64_t v25 = (uint64_t)specialized static ICUByteCountNumberFormatter.create(for:locale:)(v40, v41, (uint64_t *)v494);
      swift_bridgeObjectRelease();
      outlined release of ByteCountFormatStyle.Attributed((uint64_t)&v492);
      if (!v25)
      {
        __break(1u);
LABEL_245:
        __break(1u);
LABEL_246:
        __break(1u);
LABEL_247:
        __break(1u);
LABEL_248:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_249:
        __break(1u);
LABEL_250:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      uint64_t v475 = (uint64_t)v11;
      v476 = a2;
      a5 = a5 / (double)v6;
      swift_retain();
      uint64_t v42 = ICUNumberFormatterBase.attributedFormatPositions(_:)(*(uint64_t *)&a5, 0, 0x100000000);
      if (v43) {
        break;
      }
      Double.description.getter();
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(&v576, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v494);
      swift_release();
      uint64_t v48 = *(void *)v494;
LABEL_58:
      v490 = (_OWORD *)v48;
      if ((BYTE1(v493[0]) & 1) == 0) {
        goto LABEL_59;
      }
      *(_OWORD *)v494 = v491;
      outlined retain of ByteCountFormatStyle.Attributed((uint64_t)&v492);
      uint64_t v12 = (uint64_t)specialized static ICUByteCountNumberFormatter.create(for:locale:)(0xD00000000000002ELL, 0x80000001823B3FA0, (uint64_t *)v494);
      outlined release of ByteCountFormatStyle.Attributed((uint64_t)&v492);
      LODWORD(v526) = 0;
      uint64_t v100 = *((void *)&v491 + 1);
      uint64_t v101 = swift_getObjectType();
      uint64_t v102 = *(uint64_t (**)(uint64_t, uint64_t))(v100 + 64);
      outlined retain of ByteCountFormatStyle.Attributed((uint64_t)&v492);
      uint64_t v103 = v102(v101, v100);
      uint64_t v105 = v104;
      MEMORY[0x1F4188790](v103);
      if ((v107 & 0x1000000000000000) != 0 || !(v105 & 0x2000000000000000 | v103 & 0x1000000000000000)) {
        goto LABEL_191;
      }
      MEMORY[0x1F4188790](v106);
      if ((v105 & 0x2000000000000000) != 0)
      {
        *(void *)v494 = v103;
        *(void *)&v494[8] = v105 & 0xFFFFFFFFFFFFFFLL;
        *(void *)v550 = ulocdata_open();
        swift_bridgeObjectRelease();
        goto LABEL_68;
      }
      if ((v103 & 0x1000000000000000) != 0)
      {
        uint64_t v108 = (v105 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v109 = v103 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v108 = _StringObject.sharedUTF8.getter();
      }
      unint64_t v110 = v488;
      uint64_t v111 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerVSg_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI7VSg_TG5SRyAGGAMsAD_pIgyrzo_Tf1cn_n(v108, v109, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      unint64_t v488 = v110;
      *(void *)v550 = v111;
LABEL_66:
      swift_bridgeObjectRelease();
LABEL_68:
      LODWORD(v13) = v526;
      uint64_t v463 = v12;
      uint64_t v464 = v25;
      if ((int)v526 >= 1)
      {
        if (one-time initialization token for logger != -1) {
          goto LABEL_199;
        }
        goto LABEL_70;
      }
      uint64_t ExemplarSet = ulocdata_getExemplarSet();
      if (specialized UErrorCode.checkSuccessAndLogError(_:)((UErrorCode)v526))
      {
        if (!ExemplarSet) {
          goto LABEL_246;
        }
        int v185 = MEMORY[0x18530A360](ExemplarSet, 65288);
        uset_close();
        BOOL v186 = v185 == 0;
        if (v185) {
          unint64_t v187 = 0xA300000000000000;
        }
        else {
          unint64_t v187 = 0xE200000000000000;
        }
        if (v186) {
          uint64_t v188 = 41;
        }
        else {
          uint64_t v188 = 9026799;
        }
        unint64_t v189 = 0xE100000000000000;
        if (!v186) {
          unint64_t v189 = 0xA300000000000000;
        }
        uint64_t v460 = v188;
        unint64_t v461 = v189;
        goto LABEL_121;
      }
      uset_close();
      while (1)
      {
        unint64_t v187 = 0xE200000000000000;
        uint64_t v460 = 41;
        unint64_t v461 = 0xE100000000000000;
LABEL_121:
        ulocdata_close();
        outlined release of ByteCountFormatStyle.Attributed((uint64_t)&v492);
        swift_bridgeObjectRetain();
        unint64_t v462 = v187;
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(v583, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v494);
        v487 = *(void **)v494;
        id v190 = v490;
        long long v191 = v490[1];
        long long v630 = v490[2];
        long long v631 = v490[3];
        long long v629 = v191;
        swift_retain();
        outlined retain of Locale((uint64_t)&v629);
        uint64_t v192 = BigString.endIndex.getter();
        uint64_t v194 = v193;
        uint64_t v196 = v195;
        uint64_t v198 = v197;
        outlined release of Locale((uint64_t)&v629);
        swift_release();
        long long v199 = v190[2];
        long long v626 = v190[1];
        long long v627 = v199;
        long long v628 = v190[3];
        uint64_t v200 = v192;
        swift_retain();
        outlined retain of Locale((uint64_t)&v626);
        uint64_t v201 = BigString.endIndex.getter();
        int64_t v203 = v202;
        id v205 = v204;
        unint64_t v13 = v206;
        outlined release of Locale((uint64_t)&v626);
        swift_release();
        if (static BigString.Index.< infix(_:_:)())
        {
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
          goto LABEL_198;
        }
        uint64_t v618 = v200;
        uint64_t v619 = v194;
        int64_t v620 = v196;
        uint64_t v621 = v198;
        uint64_t v622 = v201;
        int64_t v623 = v203;
        v624 = v205;
        v625 = v13;
        specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v618, v487);
        swift_release();
        if (!v463) {
          goto LABEL_245;
        }
        unint64_t v207 = v475 & 0xFFFFFFFFFFLL;
        swift_retain();
        ICUByteCountNumberFormatter.attributedFormat(_:unit:)((uint64_t)v477, (uint64_t)v476, v207, 0, (uint64_t *)&v489);
        swift_release();
        int64_t v208 = v489;
        long long v209 = v489[2];
        v617[0] = v489[1];
        v617[1] = v209;
        v617[2] = v489[3];
        swift_retain_n();
        outlined retain of Locale((uint64_t)v617);
        uint64_t v210 = BigString.startIndex.getter();
        int64_t v486 = v211;
        v487 = (void *)v212;
        uint64_t v214 = v213;
        outlined release of Locale((uint64_t)v617);
        long long v215 = v208[1];
        long long v615 = v208[2];
        long long v616 = v208[3];
        long long v614 = v215;
        long long v216 = v208[1];
        long long v217 = v208[2];
        long long v658 = v616;
        long long v657 = v217;
        long long v656 = v216;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v656, (uint64_t)v659);
        outlined retain of Locale((uint64_t)v659);
        uint64_t v218 = BigString.endIndex.getter();
        uint64_t v220 = v219;
        uint64_t v222 = v221;
        uint64_t v224 = v223;
        outlined release of Locale((uint64_t)&v614);
        unint64_t v13 = (char *)v210;
        int64_t v225 = v486;
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_196;
        }
        *(void *)&long long v609 = v13;
        *((void *)&v609 + 1) = v225;
        *(void *)&long long v610 = v214;
        *((void *)&v610 + 1) = v487;
        *(void *)&long long v611 = v218;
        *((void *)&v611 + 1) = v220;
        uint64_t v612 = v222;
        uint64_t v613 = v224;
        AttributedString.Runs.init(_:in:)((uint64_t)v208, v550);
        uint64_t v226 = v208;
        swift_release();
        long long v570 = v554;
        long long v571 = v555;
        long long v572 = v556;
        long long v573 = v557;
        long long v566 = *(_OWORD *)&v550[8];
        long long v567 = v551;
        long long v568 = v552;
        long long v569 = v553;
        v476 = *(unsigned char **)v550;
        uint64_t v227 = v558;
        id v228 = (_OWORD *)v559;
        uint64_t v229 = v560;
        uint64_t v230 = (uint64_t)v561;
        uint64_t v231 = v563;
        int64_t v482 = v562;
        v467 = (void *)v564;
        int64_t v486 = v565;
        char v232 = static BigString.Index.== infix(_:_:)();
        v477 = v227;
        v478 = v226;
        uint64_t v474 = v229;
        uint64_t v475 = (uint64_t)v228;
        v473 = (char *)v230;
        if ((v232 & 1) == 0) {
          break;
        }
        unint64_t v233 = v229;
        uint64_t v234 = (os_unfair_lock_s *)v227;
        uint64_t v235 = v230;
        uint64_t v236 = v228;
        unint64_t v237 = v233;
        uint64_t v238 = v467;
        uint64_t v239 = v486;
LABEL_126:
        unint64_t v485 = v237;
        uint64_t v241 = v474;
        uint64_t v240 = v475;
        uint64_t v242 = (uint64_t)v473;
        uint64_t v11 = v238;
        uint64_t v25 = v239;
LABEL_143:
        long long v498 = v570;
        long long v499 = v571;
        long long v500 = v572;
        long long v501 = v573;
        *(_OWORD *)&v494[8] = v566;
        long long v495 = v567;
        long long v496 = v568;
        v489 = v478;
        *(void *)v494 = v476;
        long long v497 = v569;
        v502 = v477;
        uint64_t v503 = v240;
        uint64_t v504 = v241;
        uint64_t v505 = v242;
        int64_t v506 = v482;
        uint64_t v507 = v231;
        unint64_t v508 = (unint64_t)v11;
        uint64_t v509 = v25;
        v510 = &outlined read-only object #1 of ByteCountFormatStyle.Attributed._format(_:doubleValue:);
        uint64_t v511 = MEMORY[0x1E4FBC860];
        v512 = v234;
        v513 = v236;
        unint64_t v514 = v485;
        uint64_t v515 = v235;
        outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v494);
        size_t v314 = v490;
        long long v315 = v490[1];
        long long v316 = v490[3];
        long long v542 = v490[2];
        long long v543 = v316;
        long long v541 = v315;
        swift_retain();
        swift_retain();
        outlined retain of Locale((uint64_t)&v541);
        uint64_t v317 = BigString.endIndex.getter();
        uint64_t v319 = v318;
        unint64_t v13 = v320;
        v322 = v321;
        outlined release of Locale((uint64_t)&v541);
        swift_release();
        long long v323 = v314[2];
        long long v545 = v314[1];
        long long v546 = v323;
        long long v547 = v314[3];
        swift_retain();
        outlined retain of Locale((uint64_t)&v545);
        uint64_t v324 = BigString.endIndex.getter();
        uint64_t v326 = v325;
        uint64_t v328 = v327;
        uint64_t v330 = v329;
        outlined release of Locale((uint64_t)&v545);
        swift_release();
        if (static BigString.Index.< infix(_:_:)()) {
          goto LABEL_197;
        }
        *(void *)&long long v526 = v317;
        *((void *)&v526 + 1) = v319;
        v527 = v13;
        v528 = v322;
        uint64_t v529 = v324;
        uint64_t v530 = v326;
        uint64_t v531 = v328;
        uint64_t v532 = v330;
        specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v526, v478);
        swift_bridgeObjectRelease();
        swift_release();
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(v586, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v516);
        unint64_t v488 = v516;
        v331 = v490;
        long long v332 = v490[1];
        long long v607 = v490[2];
        long long v608 = v490[3];
        long long v606 = v332;
        swift_retain();
        outlined retain of Locale((uint64_t)&v606);
        uint64_t v333 = BigString.endIndex.getter();
        unint64_t v13 = v334;
        uint64_t v336 = v335;
        uint64_t v338 = v337;
        outlined release of Locale((uint64_t)&v606);
        swift_release();
        long long v339 = v331[2];
        v605[0] = v331[1];
        v605[1] = v339;
        v605[2] = v331[3];
        swift_retain();
        outlined retain of Locale((uint64_t)v605);
        uint64_t v340 = BigString.endIndex.getter();
        uint64_t v342 = v341;
        uint64_t v344 = v343;
        uint64_t v346 = v345;
        outlined release of Locale((uint64_t)v605);
        swift_release();
        if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
        {
          unint64_t v516 = v333;
          v517[0] = v13;
          v517[1] = v336;
          v517[2] = v338;
          v517[3] = v340;
          v517[4] = v342;
          v517[5] = v344;
          v517[6] = v346;
          specialized AttributedString.replaceSubrange<A, B>(_:with:)(&v516, v488);
          swift_release();
          swift_release();
          swift_release();
          uint64_t result = swift_release();
          uint64_t v48 = (uint64_t)v490;
          goto LABEL_146;
        }
LABEL_198:
        __break(1u);
LABEL_199:
        swift_once();
LABEL_70:
        uint64_t v112 = type metadata accessor for Logger();
        __swift_project_value_buffer(v112, (uint64_t)static ICUError.logger);
        uint64_t v113 = Logger.logObject.getter();
        os_log_type_t v114 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v113, v114))
        {
          uint64_t v115 = swift_slowAlloc();
          uint64_t v116 = swift_slowAlloc();
          *(void *)v494 = v116;
          *(_DWORD *)uint64_t v115 = 136315394;
          *(void *)v550 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, 0x80000001823B3FD0, (uint64_t *)v494);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v115 + 12) = 2080;
          uint64_t v117 = ICUError.debugDescription.getter((UErrorCode)v13);
          *(void *)v550 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v117, v118, (uint64_t *)v494);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_181795000, v113, v114, "%s. Error: %s", (uint8_t *)v115, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x185309510](v116, -1, -1);
          MEMORY[0x185309510](v115, -1, -1);
        }
      }
      v471 = &v494[8];
      v472 = (char *)&v526 + 8;
      v470 = v517;
      char v243 = (unsigned char *)v230;
      uint64_t v244 = v229;
      size_t v245 = v228;
      char v246 = (os_unfair_lock_s *)v227;
      uint64_t v238 = v467;
      uint64_t v239 = v486;
      v487 = (void *)v231;
      while (1)
      {
        *(void *)&long long v484 = v246;
        *((void *)&v484 + 1) = v245;
        uint64_t v481 = v244;
        long long v250 = v570;
        long long v249 = v571;
        long long v251 = v569;
        v252 = v470;
        *((_OWORD *)v470 + 4) = v570;
        v252[5] = v249;
        long long v253 = v571;
        long long v255 = v572;
        long long v254 = v573;
        v252[6] = v572;
        v252[7] = v254;
        long long v256 = v567;
        _OWORD *v252 = v566;
        v252[1] = v256;
        long long v257 = v569;
        long long v259 = v566;
        long long v258 = v567;
        long long v260 = v568;
        v252[2] = v568;
        v252[3] = v257;
        uint64_t v261 = v472;
        uint64_t v262 = (uint64_t)v473;
        *((_OWORD *)v472 + 4) = v250;
        v261[5] = v253;
        long long v263 = v573;
        v261[6] = v255;
        v261[7] = v263;
        *uint64_t v261 = v259;
        v261[1] = v258;
        v261[2] = v260;
        v261[3] = v251;
        uint64_t v264 = (uint64_t)v476;
        id v265 = v477;
        *(void *)&long long v526 = v476;
        v533 = v477;
        uint64_t v267 = v474;
        uint64_t v266 = v475;
        uint64_t v534 = v475;
        uint64_t v535 = v474;
        uint64_t v536 = v262;
        int64_t v268 = v482;
        int64_t v537 = v482;
        uint64_t v538 = (uint64_t)v487;
        unint64_t v539 = (unint64_t)v238;
        uint64_t v540 = v239;
        *(void *)&long long v606 = v246;
        *((void *)&v606 + 1) = v245;
        *(void *)&long long v607 = v244;
        *((void *)&v607 + 1) = v243;
        a2 = v243;
        AttributedString.Runs.subscript.getter(&v541);
        int64_t v269 = v268;
        unint64_t v270 = v541;
        uint64_t v479 = v544;
        v480 = (_OWORD *)*((void *)&v541 + 1);
        long long v271 = v571;
        uint64_t v272 = v471;
        *((_OWORD *)v471 + 4) = v570;
        v272[5] = v271;
        long long v273 = v573;
        v272[6] = v572;
        v272[7] = v273;
        long long v274 = v567;
        *uint64_t v272 = v566;
        v272[1] = v274;
        long long v275 = v569;
        v272[2] = v568;
        v272[3] = v275;
        *(void *)v494 = v264;
        v502 = v265;
        uint64_t v503 = v266;
        uint64_t v504 = v267;
        uint64_t v505 = v262;
        int64_t v506 = v269;
        uint64_t v507 = (uint64_t)v487;
        unint64_t v508 = (unint64_t)v238;
        uint64_t v509 = v486;
        v510 = &outlined read-only object #1 of ByteCountFormatStyle.Attributed._format(_:doubleValue:);
        uint64_t v511 = MEMORY[0x1E4FBC860];
        unint64_t v516 = v264;
        v518 = v265;
        uint64_t v519 = v266;
        uint64_t v520 = v267;
        uint64_t v521 = v262;
        unint64_t v522 = v269;
        uint64_t v276 = (uint64_t)v487;
        uint64_t v523 = (uint64_t)v487;
        unint64_t v524 = (unint64_t)v238;
        uint64_t v11 = v238;
        uint64_t v525 = v486;
        uint64_t v12 = *((void *)&v484 + 1);
        long long v541 = v484;
        uint64_t v277 = v481;
        *(void *)&long long v542 = v481;
        *((void *)&v542 + 1) = a2;
        outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v494);
        swift_retain();
        AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)((uint64_t *)&v541, (uint64_t)&outlined read-only object #1 of ByteCountFormatStyle.Attributed._format(_:doubleValue:), MEMORY[0x1E4FBC860], (uint64_t *)&v526);
        swift_release();
        outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v494);
        uint64_t v236 = (_OWORD *)*((void *)&v526 + 1);
        uint64_t v234 = (os_unfair_lock_s *)v526;
        unint64_t v485 = (unint64_t)v527;
        v483 = v528;
        char v278 = static BigString.Index.< infix(_:_:)();
        uint64_t v25 = v486;
        if (v278) {
          break;
        }
        specialized AttributedString._AttributeStorage.subscript.getter(v270, &v545);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (a2 == (unsigned char *)2)
        {
          uint64_t v241 = v474;
          uint64_t v240 = v475;
          uint64_t v242 = (uint64_t)v473;
          uint64_t v235 = (uint64_t)v483;
          uint64_t v231 = v276;
          goto LABEL_143;
        }
        v279 = a2;
        a2 = v550;
        if (v545 == 9)
        {
          uint64_t v280 = v279;
          v480 = v236;
          v281 = v478;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            long long v282 = v281[2];
            v604[0] = v281[1];
            v604[1] = v282;
            v604[2] = v281[3];
            uint64_t v283 = *((void *)v281 + 8);
            uint64_t v25 = *((void *)v281 + 9);
            uint64_t v284 = *((void *)v281 + 10);
            uint64_t v285 = *((void *)v281 + 11);
            type metadata accessor for AttributedString.Guts();
            swift_allocObject();
            outlined retain of Locale((uint64_t)v604);
            swift_unknownObjectRetain();
            uint64_t v286 = v285;
            a2 = v550;
            uint64_t v287 = AttributedString.Guts.init(string:runs:)(v604, v283, v25, v284, v286);
            swift_release();
            v281 = (_OWORD *)v287;
          }
          long long v288 = v281[2];
          v603[0] = v281[1];
          v603[1] = v288;
          v603[2] = v281[3];
          swift_retain();
          outlined retain of Locale((uint64_t)v603);
          BigString.startIndex.getter();
          outlined release of Locale((uint64_t)v603);
          long long v289 = v281[1];
          v601[1] = v281[2];
          long long v602 = v281[3];
          v601[0] = v289;
          long long v290 = v281[1];
          long long v291 = v281[2];
          long long v662 = v602;
          long long v661 = v291;
          long long v660 = v290;
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v660, (uint64_t)v663);
          outlined retain of Locale((uint64_t)v663);
          BigString.endIndex.getter();
          outlined release of Locale((uint64_t)v601);
          swift_release();
          long long v593 = v484;
          *(void *)&long long v594 = v277;
          *((void *)&v594 + 1) = v280;
          *((void *)&v484 + 1) = v234;
          *(void *)&long long v595 = v234;
          *((void *)&v595 + 1) = v480;
          unint64_t v596 = v485;
          v597 = v483;
          long long v292 = v281[1];
          long long v599 = v281[2];
          long long v600 = v281[3];
          long long v598 = v292;
          swift_retain_n();
          BigString.unicodeScalars.getter();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v584);
          uint64_t v293 = BigSubstring.UnicodeScalarView.startIndex.getter();
          uint64_t v468 = v294;
          uint64_t v12 = v295;
          *(void *)&long long v484 = v296;
          uint64_t v481 = BigSubstring.UnicodeScalarView.endIndex.getter();
          v478 = v298;
          uint64_t v479 = v297;
          v469 = v299;
          outlined release of Locale((uint64_t)v585);
          uint64_t v300 = (uint64_t)v281;
          swift_release();
          if (one-time initialization token for currentIdentity != -1) {
            swift_once();
          }
          unint64_t v301 = (uint64_t *)(static AttributedString.currentIdentity + 16);
          v302 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
          swift_retain();
          os_unfair_lock_lock(v302);
          unint64_t v303 = v488;
          closure #1 in static AttributedString._nextModifyIdentity.getter(v301, (uint64_t *)v494);
          unint64_t v488 = v303;
          os_unfair_lock_unlock(v302);
          swift_release();
          BigString.init()();
          *(void *)v494 = 0;
          MEMORY[0x185309530](v494, 8);
          uint64_t v11 = *(void **)v494;
          type metadata accessor for AttributedString.Guts();
          uint64_t v304 = swift_allocObject();
          if ((BigString.isEmpty.getter() & 1) == 0) {
            goto LABEL_186;
          }
          long long v305 = v585[8];
          *(_OWORD *)(v304 + 16) = v585[7];
          *(_OWORD *)(v304 + 32) = v305;
          *(_OWORD *)(v304 + 48) = v585[9];
          *(void *)(v304 + 64) = 0;
          *(void *)(v304 + 72) = 0;
          *(void *)(v304 + 80) = 0;
          *(void *)(v304 + 88) = v11;
          swift_release();
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v306 = v300;
          }
          else
          {
            long long v307 = *(_OWORD *)(v300 + 32);
            v592[0] = *(_OWORD *)(v300 + 16);
            v592[1] = v307;
            v592[2] = *(_OWORD *)(v300 + 48);
            uint64_t v308 = v300;
            uint64_t v309 = *(void *)(v300 + 64);
            uint64_t v310 = *(void *)(v300 + 72);
            uint64_t v465 = v12;
            uint64_t v311 = *(void *)(v308 + 80);
            uint64_t v312 = *(void *)(v308 + 88);
            swift_allocObject();
            outlined retain of Locale((uint64_t)v592);
            swift_unknownObjectRetain();
            uint64_t v313 = v312;
            uint64_t v12 = v465;
            uint64_t v306 = AttributedString.Guts.init(string:runs:)(v592, v309, v310, v311, v313);
            swift_release();
          }
          uint64_t v11 = v467;
          uint64_t v25 = v486;
          *(void *)&long long v587 = v293;
          *((void *)&v587 + 1) = v468;
          *(void *)&long long v588 = v12;
          *((void *)&v588 + 1) = v484;
          *(void *)&long long v589 = v481;
          *((void *)&v589 + 1) = v479;
          v590 = v478;
          v591 = v469;
          v478 = (_OWORD *)v306;
          specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(11);
          swift_release();
          uint64_t v231 = (uint64_t)v487;
          uint64_t v234 = (os_unfair_lock_s *)*((void *)&v484 + 1);
          uint64_t v236 = v480;
        }
        else
        {
          uint64_t v231 = v276;
        }
        unint64_t v237 = v485;
        char v247 = v483;
        char v248 = static BigString.Index.== infix(_:_:)();
        uint64_t v235 = (uint64_t)v247;
        char v243 = v247;
        uint64_t v244 = v237;
        size_t v245 = v236;
        char v246 = v234;
        uint64_t v238 = v11;
        uint64_t v239 = v25;
        if (v248) {
          goto LABEL_126;
        }
      }
      __break(1u);
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      swift_once();
    }
    uint64_t v45 = v42;
    uint64_t v46 = v43;
    char v47 = v44;
    swift_bridgeObjectRetain();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v574, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v494);
    uint64_t v48 = *(void *)v494;
    char v49 = (unsigned char *)v47[2];
    if (!v49)
    {
LABEL_56:
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_58;
    }
    uint64_t v464 = v25;
    swift_bridgeObjectRetain();
    unint64_t v50 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v481 = v45;
    int64_t v482 = v50;
    uint64_t v474 = (uint64_t)v47;
    unint64_t v51 = v47 + 6;
    v480 = v46;
    while (2)
    {
      unint64_t v52 = *((unsigned int *)v51 - 4);
      v487 = v51;
      uint64_t v53 = (os_unfair_lock_s *)*v51;
      *(void *)v494 = v45;
      *(void *)&v494[8] = v46;
      swift_bridgeObjectRetain();
      id v54 = (os_unfair_lock_s *)v482;
      unint64_t v55 = String.Index.init<A>(utf16Offset:in:)();
      *(void *)v494 = v45;
      *(void *)&v494[8] = v46;
      swift_bridgeObjectRetain();
      unint64_t v56 = String.Index.init<A>(utf16Offset:in:)();
      if (v56 >> 14 >= v55 >> 14)
      {
        unint64_t v57 = v56;
        int64_t v486 = (int64_t)v49;
        swift_retain();
        specialized Range<>.init<A>(_range:in:)(v55, v57, (_OWORD *)v48, (uint64_t *)v494);
        unint64_t v59 = v495;
        uint64_t v53 = (os_unfair_lock_s *)v550;
        if ((void)v495 != 2)
        {
          *(void *)&long long v484 = *(void *)&v494[8];
          *((void *)&v484 + 1) = *(void *)v494;
          v483 = *(os_unfair_lock_s **)&v494[16];
          uint64_t v60 = *((void *)&v495 + 1);
          uint64_t v61 = (_OWORD *)*((void *)&v496 + 1);
          uint64_t v62 = v496;
          unint64_t v485 = v497;
          *(void *)v550 = MEMORY[0x1E4FBC868];
          *(void *)&v550[8] = MEMORY[0x1E4FBC870];
          char v63 = 0;
          char v64 = 2;
          char v65 = v479;
          switch((int)v52)
          {
            case 0:
              goto LABEL_38;
            case 1:
              char v63 = 1;
LABEL_38:
              specialized AttributeContainer.subscript.setter(v63);
              if (v52 > 0xA) {
                goto LABEL_48;
              }
              goto LABEL_45;
            case 2:
              goto LABEL_44;
            case 6:
              char v64 = 0;
              goto LABEL_44;
            case 7:
              char v64 = 3;
              goto LABEL_44;
            case 8:
              char v64 = 4;
              goto LABEL_44;
            case 10:
              char v64 = 1;
LABEL_44:
              specialized AttributeContainer.subscript.setter(v64);
              if (v52 > 0xA) {
                goto LABEL_48;
              }
LABEL_45:
              if ((0x447u >> v52))
              {
                char v65 = 9;
LABEL_47:
                specialized AttributeContainer.subscript.setter(v65);
              }
LABEL_48:
              long long v526 = *(_OWORD *)v550;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                long long v66 = *(_OWORD *)(v48 + 32);
                long long v649 = *(_OWORD *)(v48 + 16);
                long long v650 = v66;
                long long v651 = *(_OWORD *)(v48 + 48);
                uint64_t v67 = *(void *)(v48 + 64);
                uint64_t v68 = *(void *)(v48 + 72);
                v478 = v61;
                uint64_t v69 = v62;
                uint64_t v71 = *(void *)(v48 + 80);
                uint64_t v70 = *(void *)(v48 + 88);
                type metadata accessor for AttributedString.Guts();
                swift_allocObject();
                outlined retain of Locale((uint64_t)&v649);
                swift_unknownObjectRetain();
                uint64_t v72 = v70;
                uint64_t v62 = v69;
                uint64_t v61 = v478;
                uint64_t v73 = AttributedString.Guts.init(string:runs:)(&v649, v67, v68, v71, v72);
                swift_release();
                uint64_t v48 = v73;
              }
              long long v74 = *(_OWORD *)(v48 + 32);
              long long v646 = *(_OWORD *)(v48 + 16);
              long long v647 = v74;
              long long v648 = *(_OWORD *)(v48 + 48);
              swift_retain();
              outlined retain of Locale((uint64_t)&v646);
              BigString.startIndex.getter();
              outlined release of Locale((uint64_t)&v646);
              long long v75 = *(_OWORD *)(v48 + 16);
              long long v644 = *(_OWORD *)(v48 + 32);
              long long v645 = *(_OWORD *)(v48 + 48);
              long long v643 = v75;
              long long v76 = *(_OWORD *)(v48 + 16);
              long long v77 = *(_OWORD *)(v48 + 32);
              long long v654 = v645;
              long long v653 = v77;
              long long v652 = v76;
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v652, (uint64_t)v655);
              outlined retain of Locale((uint64_t)v655);
              BigString.endIndex.getter();
              outlined release of Locale((uint64_t)&v643);
              swift_release();
              v632 = (os_unfair_lock_s *)*((void *)&v484 + 1);
              uint64_t v633 = v484;
              v634 = v483;
              unint64_t v635 = v59;
              uint64_t v636 = v60;
              uint64_t v637 = v62;
              v638 = v61;
              unint64_t v639 = v485;
              long long v78 = *(_OWORD *)(v48 + 16);
              long long v641 = *(_OWORD *)(v48 + 32);
              long long v642 = *(_OWORD *)(v48 + 48);
              long long v640 = v78;
              swift_retain_n();
              BigString.unicodeScalars.getter();
              BigString.UnicodeScalarView.subscript.getter();
              outlined release of Locale((uint64_t)&v575);
              uint64_t v79 = BigSubstring.UnicodeScalarView.startIndex.getter();
              id v54 = v80;
              uint64_t v82 = v81;
              uint64_t v84 = v83;
              uint64_t v85 = BigSubstring.UnicodeScalarView.endIndex.getter();
              uint64_t v87 = v86;
              uint64_t v89 = v88;
              uint64_t v91 = v90;
              outlined release of Locale((uint64_t)&v576);
              swift_release();
              *(void *)v494 = v48;
              *(void *)&v494[8] = v79;
              *(void *)&v494[16] = v54;
              *(void *)&long long v495 = v82;
              *((void *)&v495 + 1) = v84;
              *(void *)&long long v496 = v85;
              *((void *)&v496 + 1) = v87;
              *(void *)&long long v497 = v89;
              *((void *)&v497 + 1) = v91;
              if (one-time initialization token for currentIdentity != -1) {
                swift_once();
              }
              uint64_t v92 = (uint64_t *)(static AttributedString.currentIdentity + 16);
              uint64_t v93 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
              swift_retain();
              os_unfair_lock_lock(v93);
              uint64_t v11 = (void *)v488;
              closure #1 in static AttributedString._nextModifyIdentity.getter(v92, (uint64_t *)&v516);
              unint64_t v488 = (unint64_t)v11;
              os_unfair_lock_unlock(v93);
              swift_release();
              uint64_t v94 = v516;
              *(void *)&long long v498 = v516;
              BigString.init()();
              unint64_t v516 = 0;
              MEMORY[0x185309530](&v516, 8);
              uint64_t v53 = (os_unfair_lock_s *)v516;
              type metadata accessor for AttributedString.Guts();
              uint64_t v95 = swift_allocObject();
              char v96 = BigString.isEmpty.getter();
              uint64_t v45 = v481;
              int64_t v97 = v486;
              if ((v96 & 1) == 0) {
                goto LABEL_175;
              }
              long long v98 = v581;
              *(_OWORD *)(v95 + 16) = v580;
              *(_OWORD *)(v95 + 32) = v98;
              *(_OWORD *)(v95 + 48) = v582;
              *(void *)(v95 + 64) = 0;
              *(void *)(v95 + 72) = 0;
              *(void *)(v95 + 80) = 0;
              *(void *)(v95 + 88) = v53;
              swift_release();
              LOBYTE(v516) = 0;
              AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v526, (char *)&v516);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((void)v498 != v94) {
                goto LABEL_248;
              }
              unint64_t v51 = v487 + 3;
              uint64_t v48 = *(void *)v494;
              swift_release();
              char v49 = (unsigned char *)(v97 - 1);
              uint64_t v46 = v480;
              if (v49) {
                continue;
              }
              swift_bridgeObjectRelease();
              uint64_t v25 = v464;
              break;
            case 11:
              goto LABEL_47;
            default:
              goto LABEL_48;
          }
          goto LABEL_56;
        }
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
        goto LABEL_206;
      }
      break;
    }
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    char v49 = v11;
    swift_bridgeObjectRetain();
LABEL_177:
    swift_retain();
    int v433 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)v550 = *(void *)v48;
    unint64_t v52 = *(void *)v550;
    *(void *)uint64_t v48 = 0x8000000000000000;
    unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v476);
    uint64_t v435 = *(void *)(v52 + 16);
    BOOL v436 = (v434 & 1) == 0;
    uint64_t v437 = v435 + v436;
    if (__OFADD__(v435, v436)) {
      goto LABEL_205;
    }
    LOBYTE(v48) = v434;
    if (*(void *)(v52 + 24) < v437)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v437, v433);
      v438 = *(void **)v550;
      unint64_t v439 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v476);
      if ((v48 & 1) != (v440 & 1)) {
        goto LABEL_250;
      }
      unint64_t v58 = v439;
      uint64_t v11 = v49;
      if ((v48 & 1) == 0) {
        goto LABEL_241;
      }
      goto LABEL_184;
    }
    if (v433)
    {
      v438 = (void *)v52;
      uint64_t v11 = v49;
      if ((v434 & 1) == 0) {
        goto LABEL_241;
      }
      goto LABEL_184;
    }
LABEL_206:
    uint64_t v481 = v58;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
    *(void *)&long long v484 = static _DictionaryStorage.copy(original:)();
    if (!*(void *)(v52 + 16)) {
      goto LABEL_240;
    }
    v444 = (char *)(v484 + 64);
    uint64_t v445 = 1 << *(unsigned char *)(v484 + 32);
    v483 = (os_unfair_lock_s *)(v52 + 64);
    unint64_t v446 = (unint64_t)(v445 + 63) >> 6;
    if ((void)v484 != v52 || v444 >= (char *)&v483[2 * v446]) {
      memmove(v444, v483, 8 * v446);
    }
    int64_t v486 = 0;
    *(void *)(v484 + 16) = *(void *)(v52 + 16);
    uint64_t v447 = 1 << *(unsigned char *)(v52 + 32);
    uint64_t v448 = -1;
    if (v447 < 64) {
      uint64_t v448 = ~(-1 << v447);
    }
    unint64_t v488 = v448 & *(void *)(v52 + 64);
    int64_t v482 = (unint64_t)(v447 + 63) >> 6;
    while (2)
    {
      if (v488)
      {
        unint64_t v449 = __clz(__rbit64(v488));
        v488 &= v488 - 1;
        unint64_t v450 = v449 | (v486 << 6);
LABEL_214:
        uint64_t v451 = *(void *)(v52 + 48);
        unint64_t v485 = *((void *)v472 + 9) * v450;
        _s10Foundation24ICULegacyNumberFormatterC0C10FormatTypeOWOcTm_0(v451 + v485, (uint64_t)v473, type metadata accessor for ICULegacyNumberFormatter.Signature);
        uint64_t v452 = 8 * v450;
        *((void *)&v484 + 1) = *(void *)(*(void *)(v52 + 56) + 8 * v450);
        uint64_t v453 = v484;
        outlined init with take of ICULegacyNumberFormatter.Signature((uint64_t)v473, *(void *)(v484 + 48) + v485);
        *(void *)(*(void *)(v453 + 56) + v452) = *((void *)&v484 + 1);
        swift_retain();
        continue;
      }
      break;
    }
    int64_t v454 = v486 + 1;
    if (__OFADD__(v486, 1)) {
      goto LABEL_247;
    }
    if (v454 >= v482) {
      goto LABEL_240;
    }
    unint64_t v455 = *(void *)&v483[2 * v454]._os_unfair_lock_opaque;
    ++v486;
    if (v455) {
      goto LABEL_239;
    }
    int64_t v486 = v454 + 1;
    if (v454 + 1 >= v482) {
      goto LABEL_240;
    }
    unint64_t v455 = *(void *)&v483[2 * v486]._os_unfair_lock_opaque;
    if (v455) {
      goto LABEL_239;
    }
    int64_t v486 = v454 + 2;
    if (v454 + 2 >= v482) {
      goto LABEL_240;
    }
    unint64_t v455 = *(void *)&v483[2 * v486]._os_unfair_lock_opaque;
    if (v455) {
      goto LABEL_239;
    }
    int64_t v486 = v454 + 3;
    if (v454 + 3 >= v482) {
      goto LABEL_240;
    }
    unint64_t v455 = *(void *)&v483[2 * v486]._os_unfair_lock_opaque;
    if (v455) {
      goto LABEL_239;
    }
    int64_t v486 = v454 + 4;
    if (v454 + 4 >= v482) {
      goto LABEL_240;
    }
    unint64_t v455 = *(void *)&v483[2 * v486]._os_unfair_lock_opaque;
    if (v455) {
      goto LABEL_239;
    }
    int64_t v486 = v454 + 5;
    if (v454 + 5 >= v482) {
      goto LABEL_240;
    }
    unint64_t v455 = *(void *)&v483[2 * v486]._os_unfair_lock_opaque;
    if (v455) {
      goto LABEL_239;
    }
    int64_t v486 = v454 + 6;
    if (v454 + 6 >= v482) {
      goto LABEL_240;
    }
    unint64_t v455 = *(void *)&v483[2 * v486]._os_unfair_lock_opaque;
    if (v455) {
      goto LABEL_239;
    }
    int64_t v486 = v454 + 7;
    if (v454 + 7 >= v482) {
      goto LABEL_240;
    }
    unint64_t v455 = *(void *)&v483[2 * v486]._os_unfair_lock_opaque;
    if (v455)
    {
LABEL_239:
      unint64_t v488 = (v455 - 1) & v455;
      unint64_t v450 = __clz(__rbit64(v455)) + (v486 << 6);
      goto LABEL_214;
    }
    int64_t v456 = v454 + 8;
    if (v456 >= v482) {
      goto LABEL_240;
    }
    unint64_t v455 = *(void *)&v483[2 * v456]._os_unfair_lock_opaque;
    if (v455)
    {
      int64_t v486 = v456;
      goto LABEL_239;
    }
    while (1)
    {
      int64_t v486 = v456 + 1;
      if (__OFADD__(v456, 1)) {
        goto LABEL_249;
      }
      if (v486 >= v482) {
        break;
      }
      unint64_t v455 = *(void *)&v483[2 * v486]._os_unfair_lock_opaque;
      ++v456;
      if (v455) {
        goto LABEL_239;
      }
    }
LABEL_240:
    swift_bridgeObjectRelease();
    v438 = (void *)v484;
    uint64_t v11 = v49;
    unint64_t v58 = v481;
    if ((v48 & 1) == 0)
    {
LABEL_241:
      uint64_t v457 = (uint64_t)v473;
      unint64_t v458 = v58;
      _s10Foundation24ICULegacyNumberFormatterC0C10FormatTypeOWOcTm_0((uint64_t)v476, (uint64_t)v473, type metadata accessor for ICULegacyNumberFormatter.Signature);
      uint64_t v360 = v468;
      specialized _NativeDictionary._insert(at:key:value:)(v458, v457, v468, v438);
      goto LABEL_242;
    }
LABEL_184:
    uint64_t v441 = v438[7];
    uint64_t v442 = 8 * v58;
    swift_release();
    uint64_t v360 = v468;
    *(void *)(v441 + v442) = v468;
LABEL_242:
    *(void *)&v53[4]._os_unfair_lock_opaque = v438;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v54);
    swift_release_n();
    swift_bridgeObjectRelease();
LABEL_154:
    uint64_t v48 = (uint64_t)v487;
    _s10Foundation24ICULegacyNumberFormatterC9Signature33_ADC49A1B068F5C8BE74334B016A6B679LLVWOhTm_0((uint64_t)v476, type metadata accessor for ICULegacyNumberFormatter.Signature);
    swift_release();
    outlined release of ByteCountFormatStyle.Attributed((uint64_t)&v492);
    _s10Foundation24ICULegacyNumberFormatterC9Signature33_ADC49A1B068F5C8BE74334B016A6B679LLVWOhTm_0((uint64_t)v477, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    swift_retain();
    specialized _withResizingUCharBuffer(initialSize:_:)(32);
    uint64_t v362 = v361;
    swift_release();
    if (v362)
    {
      uint64_t v465 = (uint64_t)v11;
      uint64_t v468 = v360;
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v617, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v586);
      specialized AttributedString.subscript.setter(10);
      long long v363 = *(_OWORD *)(v48 + 32);
      long long v646 = *(_OWORD *)(v48 + 16);
      long long v647 = v363;
      long long v648 = *(_OWORD *)(v48 + 48);
      swift_retain();
      outlined retain of Locale((uint64_t)&v646);
      uint64_t v364 = BigString.startIndex.getter();
      uint64_t v366 = v365;
      v368 = v367;
      unint64_t v488 = v369;
      outlined release of Locale((uint64_t)&v646);
      long long v370 = *(_OWORD *)(v48 + 16);
      long long v644 = *(_OWORD *)(v48 + 32);
      long long v645 = *(_OWORD *)(v48 + 48);
      long long v643 = v370;
      long long v371 = *(_OWORD *)(v48 + 16);
      long long v372 = *(_OWORD *)(v48 + 32);
      long long v595 = v645;
      long long v593 = v371;
      long long v594 = v372;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v593, (uint64_t)v603);
      outlined retain of Locale((uint64_t)v603);
      uint64_t v373 = BigString.endIndex.getter();
      uint64_t v48 = v374;
      char v49 = v550;
      v376 = v375;
      unint64_t v52 = v377;
      outlined release of Locale((uint64_t)&v643);
      uint64_t v53 = (os_unfair_lock_s *)v364;
      uint64_t v378 = v366;
      id v54 = v368;
      unint64_t v379 = v488;
      if (static BigString.Index.< infix(_:_:)())
      {
        __break(1u);
        goto LABEL_204;
      }
      v632 = v53;
      uint64_t v633 = v378;
      v634 = v54;
      unint64_t v635 = v379;
      uint64_t v636 = v373;
      uint64_t v637 = v48;
      v638 = v376;
      unint64_t v639 = v52;
      AttributedString.Runs.init(_:in:)((uint64_t)v487, v550);
      swift_release();
      long long v570 = v554;
      long long v571 = v555;
      long long v572 = v556;
      long long v573 = v557;
      long long v566 = *(_OWORD *)&v550[8];
      long long v567 = v551;
      long long v568 = v552;
      long long v569 = v553;
      v380 = (os_unfair_lock_s *)v558;
      v471 = &v494[8];
      v472 = (char *)&v526 + 8;
      uint64_t v11 = v561;
      unint64_t v485 = v562;
      v470 = v517;
      v467 = (void *)v563;
      unint64_t v488 = v564;
      v477 = *(_WORD **)v550;
      v478 = v558;
      uint64_t v475 = v560;
      v476 = (unsigned char *)v559;
      uint64_t v381 = v559;
      uint64_t v382 = v565;
      unint64_t v13 = (char *)v560;
      v473 = (char *)v565;
      uint64_t v474 = (uint64_t)v561;
LABEL_157:
      uint64_t v383 = (uint64_t)v467;
      while (1)
      {
        uint64_t v384 = (uint64_t)v11;
        v385 = v13;
        int64_t v386 = v381;
        v387 = v380;
        uint64_t v388 = v383;
        if (static BigString.Index.== infix(_:_:)()) {
          goto LABEL_171;
        }
        long long v390 = v570;
        long long v389 = v571;
        long long v391 = v569;
        v392 = v470;
        *((_OWORD *)v470 + 4) = v570;
        v392[5] = v389;
        long long v393 = v571;
        long long v395 = v572;
        long long v394 = v573;
        v392[6] = v572;
        v392[7] = v394;
        long long v396 = v567;
        _OWORD *v392 = v566;
        v392[1] = v396;
        long long v397 = v569;
        long long v399 = v566;
        long long v398 = v567;
        long long v400 = v568;
        v392[2] = v568;
        v392[3] = v397;
        v401 = v472;
        *((_OWORD *)v472 + 4) = v390;
        v401[5] = v393;
        long long v402 = v573;
        v401[6] = v395;
        v401[7] = v402;
        _OWORD *v401 = v399;
        v401[1] = v398;
        v401[2] = v400;
        v401[3] = v391;
        int64_t v403 = v386;
        *(void *)&long long v484 = v386;
        *((void *)&v484 + 1) = v387;
        uint64_t v405 = (uint64_t)v476;
        v404 = v477;
        *(void *)&long long v526 = v477;
        v406 = v387;
        v407 = v478;
        v533 = v478;
        uint64_t v534 = (uint64_t)v476;
        unint64_t v408 = v485;
        int64_t v486 = (int64_t)v385;
        uint64_t v409 = v474;
        uint64_t v410 = v475;
        uint64_t v535 = v475;
        uint64_t v536 = v474;
        int64_t v537 = v485;
        uint64_t v538 = v388;
        unint64_t v539 = v488;
        uint64_t v540 = v382;
        *(void *)&long long v598 = v406;
        *((void *)&v598 + 1) = v403;
        *(void *)&long long v599 = v486;
        *((void *)&v599 + 1) = v384;
        uint64_t v481 = v384;
        AttributedString.Runs.subscript.getter(&v576);
        uint64_t v411 = v388;
        uint64_t v12 = *((void *)&v576 + 1);
        uint64_t v479 = v579;
        v480 = (_OWORD *)v576;
        long long v412 = v571;
        v413 = v471;
        *((_OWORD *)v471 + 4) = v570;
        v413[5] = v412;
        long long v414 = v573;
        v413[6] = v572;
        v413[7] = v414;
        long long v415 = v567;
        _OWORD *v413 = v566;
        v413[1] = v415;
        long long v416 = v569;
        v413[2] = v568;
        v413[3] = v416;
        *(void *)v494 = v404;
        v502 = v407;
        uint64_t v503 = v405;
        uint64_t v504 = v410;
        uint64_t v505 = v409;
        int64_t v506 = v408;
        uint64_t v507 = v411;
        unint64_t v508 = v488;
        uint64_t v509 = v382;
        v510 = &outlined read-only object #0 of ByteCountFormatStyle.Attributed._format(_:doubleValue:);
        uint64_t v511 = MEMORY[0x1E4FBC860];
        unint64_t v516 = (unint64_t)v404;
        v518 = v407;
        uint64_t v519 = v405;
        uint64_t v520 = v410;
        int64_t v417 = v486;
        uint64_t v521 = v409;
        unint64_t v522 = v408;
        uint64_t v418 = v411;
        uint64_t v523 = v411;
        unint64_t v524 = v488;
        uint64_t v525 = v382;
        uint64_t v419 = v481;
        a2 = (unsigned char *)*((void *)&v484 + 1);
        *(void *)&long long v576 = *((void *)&v484 + 1);
        *((void *)&v576 + 1) = v484;
        int64_t v577 = v486;
        uint64_t v578 = v481;
        outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v494);
        swift_retain();
        AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)((uint64_t *)&v576, (uint64_t)&outlined read-only object #0 of ByteCountFormatStyle.Attributed._format(_:doubleValue:), MEMORY[0x1E4FBC860], (uint64_t *)&v526);
        swift_release();
        outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v494);
        unint64_t v13 = v527;
        uint64_t v11 = v528;
        int64_t v482 = *((void *)&v526 + 1);
        v483 = (os_unfair_lock_s *)v526;
        if (static BigString.Index.< infix(_:_:)()) {
          break;
        }
        specialized AttributedString._AttributeStorage.subscript.getter((unint64_t)v480, &v541);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v419 == 2)
        {
          uint64_t v384 = (uint64_t)v11;
          v385 = v13;
          int64_t v386 = v482;
          v387 = v483;
          uint64_t v388 = v418;
          uint64_t v382 = (uint64_t)v473;
LABEL_171:
          swift_release();
          swift_release();
          long long v498 = v570;
          long long v499 = v571;
          long long v500 = v572;
          long long v501 = v573;
          *(_OWORD *)&v494[8] = v566;
          long long v495 = v567;
          long long v496 = v568;
          *(void *)v494 = v477;
          long long v497 = v569;
          v502 = v478;
          uint64_t v503 = (uint64_t)v476;
          uint64_t v504 = v475;
          uint64_t v505 = v474;
          int64_t v506 = v485;
          uint64_t v507 = v388;
          unint64_t v508 = v488;
          uint64_t v509 = v382;
          v510 = &outlined read-only object #0 of ByteCountFormatStyle.Attributed._format(_:doubleValue:);
          uint64_t v511 = MEMORY[0x1E4FBC860];
          v512 = v387;
          v513 = (_OWORD *)v386;
          unint64_t v514 = (unint64_t)v385;
          uint64_t v515 = v384;
          outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v494);
          uint64_t result = swift_release();
          uint64_t *v466 = (uint64_t)v487;
          return result;
        }
        uint64_t v383 = v418;
        uint64_t v382 = (uint64_t)v473;
        uint64_t v381 = v482;
        v380 = v483;
        if (v541 == 9)
        {
          v480 = *(_OWORD **)&v586[0];
          swift_retain();
          uint64_t v420 = (uint64_t)v487;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            long long v421 = *(_OWORD *)(v420 + 32);
            long long v640 = *(_OWORD *)(v420 + 16);
            long long v641 = v421;
            long long v642 = *(_OWORD *)(v420 + 48);
            uint64_t v422 = v420;
            uint64_t v423 = *(void *)(v420 + 64);
            uint64_t v424 = *(void *)(v420 + 72);
            uint64_t v425 = *(void *)(v422 + 80);
            uint64_t v479 = *(void *)(v422 + 88);
            type metadata accessor for AttributedString.Guts();
            swift_allocObject();
            outlined retain of Locale((uint64_t)&v640);
            swift_unknownObjectRetain();
            int64_t v417 = v486;
            uint64_t v420 = AttributedString.Guts.init(string:runs:)(&v640, v423, v424, v425, v479);
            swift_release();
          }
          long long v426 = *(_OWORD *)(v420 + 32);
          long long v629 = *(_OWORD *)(v420 + 16);
          long long v630 = v426;
          long long v631 = *(_OWORD *)(v420 + 48);
          swift_retain();
          outlined retain of Locale((uint64_t)&v629);
          BigString.startIndex.getter();
          outlined release of Locale((uint64_t)&v629);
          long long v427 = *(_OWORD *)(v420 + 16);
          long long v627 = *(_OWORD *)(v420 + 32);
          long long v628 = *(_OWORD *)(v420 + 48);
          long long v626 = v427;
          long long v428 = *(_OWORD *)(v420 + 16);
          long long v429 = *(_OWORD *)(v420 + 32);
          long long v611 = v628;
          long long v610 = v429;
          long long v609 = v428;
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v609, (uint64_t)v604);
          outlined retain of Locale((uint64_t)v604);
          BigString.endIndex.getter();
          outlined release of Locale((uint64_t)&v626);
          swift_release();
          uint64_t v618 = *((void *)&v484 + 1);
          v430 = v483;
          uint64_t v619 = v484;
          int64_t v620 = v417;
          uint64_t v621 = v419;
          uint64_t v622 = (uint64_t)v483;
          int64_t v623 = v482;
          v624 = v13;
          v625 = v11;
          v487 = (void *)v420;
          uint64_t v381 = v482;
          specialized AttributedString.Guts.replaceSubrange<A>(_:with:)((uint64_t)&v618, v480);
          swift_release();
          v380 = v430;
          uint64_t v382 = (uint64_t)v473;
          goto LABEL_157;
        }
      }
      __break(1u);
LABEL_193:
      swift_once();
LABEL_5:
      int v22 = 1;
      char v23 = &static ByteCountFormatStyle.Attributed.maxDecimalSizes;
      continue;
    }
    break;
  }
  swift_release();
LABEL_169:
  swift_release();
LABEL_59:
  uint64_t result = swift_release();
LABEL_146:
  uint64_t *v466 = v48;
  return result;
}

uint64_t specialized Range<>.init<A>(_range:in:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  long long v8 = a3[2];
  v36[0] = a3[1];
  v36[1] = v8;
  long long v37 = a3[3];
  v38[0] = v36[0];
  v38[1] = v8;
  v38[2] = v37;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v38, (uint64_t)v39);
  outlined retain of Locale((uint64_t)v39);
  uint64_t v9 = BigString.index(from:)(a1);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  outlined release of Locale((uint64_t)v36);
  if (v15 == 2) {
    goto LABEL_4;
  }
  uint64_t v16 = a3 + 1;
  long long v17 = a3[2];
  v34[0] = a3[1];
  v34[1] = v17;
  long long v35 = a3[3];
  v40[0] = v34[0];
  v40[1] = v17;
  v40[2] = v35;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v40, (uint64_t)v41);
  outlined retain of Locale((uint64_t)v41);
  uint64_t v18 = BigString.index(from:)(a2);
  uint64_t v28 = v19;
  uint64_t v29 = v18;
  uint64_t v27 = v20;
  uint64_t v22 = v21;
  outlined release of Locale((uint64_t)v34);
  if (v22 == 2) {
    goto LABEL_4;
  }
  long long v23 = a3[2];
  v32[0] = *v16;
  v32[1] = v23;
  long long v33 = a3[3];
  v42[0] = v32[0];
  v42[1] = v23;
  v42[2] = v33;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v42, (uint64_t)v43);
  outlined retain of Locale((uint64_t)v43);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v32);
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_4:
    uint64_t result = swift_release();
  }
  else
  {
    long long v25 = a3[2];
    v30[0] = *v16;
    v30[1] = v25;
    long long v31 = a3[3];
    v44[0] = v30[0];
    v44[1] = v25;
    v44[2] = v31;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v44, (uint64_t)v45);
    outlined retain of Locale((uint64_t)v45);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v30);
    char v26 = static BigString.Index.< infix(_:_:)();
    uint64_t result = swift_release();
    if ((v26 & 1) == 0)
    {
      *a4 = v9;
      a4[1] = v11;
      a4[2] = v13;
      a4[3] = v15;
      a4[4] = v29;
      a4[5] = v28;
      a4[6] = v27;
      a4[7] = v22;
      return result;
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = 2;
  *((_OWORD *)a4 + 2) = 0u;
  *((_OWORD *)a4 + 3) = 0u;
  return result;
}

uint64_t BigString.index(from:)(unint64_t a1)
{
  unsigned __int16 v1 = a1;
  uint64_t v2 = a1 >> 16;
  if ((a1 & 0xC) == 8)
  {
    BigString.utf16.getter();
    uint64_t v3 = BigString.UTF16View.count.getter();
    outlined release of Locale((uint64_t)&v6);
    if (v3 >= v2)
    {
      BigString.utf16.getter();
      BigString.startIndex.getter();
      uint64_t v4 = BigString.UTF16View.index(_:offsetBy:)();
      outlined release of Locale((uint64_t)v7);
      if (v1 >> 14)
      {
        BigString.utf8.getter();
        uint64_t v4 = BigString.UTF8View.index(_:offsetBy:)();
        outlined release of Locale((uint64_t)v8);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v4 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
    BigString.endIndex.getter();
    if (static BigString.Index.< infix(_:_:)()) {
      return 0;
    }
  }
  return v4;
}

uint64_t AttributedSubstring.mergeAttributes(_:mergePolicy:)(uint64_t *a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *a1;
  char v21 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    int64_t v5 = *(void **)v2;
    long long v6 = *(_OWORD *)(*(void *)v2 + 16);
    long long v7 = *(_OWORD *)(*(void *)v2 + 48);
    v30[1] = *(_OWORD *)(*(void *)v2 + 32);
    _OWORD v30[2] = v7;
    v30[0] = v6;
    uint64_t v8 = v5[8];
    uint64_t v9 = v5[9];
    uint64_t v10 = v5[10];
    uint64_t v11 = v5[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v30);
    swift_unknownObjectRetain();
    *(void *)uint64_t v3 = AttributedString.Guts.init(string:runs:)(v30, v8, v9, v10, v11);
    swift_release();
  }
  uint64_t v12 = *(_OWORD **)v3;
  long long v13 = *(_OWORD *)(*(void *)v3 + 32);
  long long v27 = *(_OWORD *)(*(void *)v3 + 16);
  long long v28 = v13;
  long long v29 = v12[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v22);
  long long v14 = v12[2];
  long long v24 = v12[1];
  long long v25 = v14;
  long long v26 = v12[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v23);
  uint64_t v15 = BigString.Index.utf8Offset.getter();
  uint64_t v16 = BigString.Index.utf8Offset.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  long long v17 = (void *)swift_retain();
  specialized AttributedString._InternalRunsSlice.updateEach(with:)(v17, v15, v16, v4, v21);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v4);
  if (result)
  {
    uint64_t v19 = swift_bridgeObjectRetain();
    uint64_t v20 = specialized Sequence.compactMap<A>(_:)(v19);
    swift_bridgeObjectRelease();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v15, v16, 0, v20);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AttributeContainer.subscript.setter(char a1)
{
  if (a1 == 12)
  {
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    long long v3 = 0u;
    long long v4 = 0u;
  }
  else
  {
    *((void *)&v4 + 1) = &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
    *(void *)&v5[0] = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component();
    LOBYTE(v3) = a1;
    *(_OWORD *)((char *)v5 + 8) = xmmword_182106C90;
    BYTE8(v5[1]) = 1;
    uint64_t v6 = 0;
  }
  return specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v3, 0xD00000000000001DLL, 0x80000001823A86F0);
}

{
  return specialized AttributeContainer.subscript.setter(a1, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart, 0xD00000000000001BLL, 0x80000001823AC840);
}

{
  long long v3;
  long long v4;
  _OWORD v5[2];
  uint64_t v6;

  if (a1 == 5)
  {
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    long long v3 = 0u;
    long long v4 = 0u;
  }
  else
  {
    *((void *)&v4 + 1) = &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
    *(void *)&v5[0] = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol();
    LOBYTE(v3) = a1;
    *(_OWORD *)((char *)v5 + 8) = xmmword_182106C90;
    BYTE8(v5[1]) = 1;
    uint64_t v6 = 0;
  }
  return specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v3, 0xD00000000000001DLL, 0x80000001823AC860);
}

{
  long long v3;
  long long v4;
  _OWORD v5[2];
  uint64_t v6;

  if (a1 == 17)
  {
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    long long v3 = 0u;
    long long v4 = 0u;
  }
  else
  {
    *((void *)&v4 + 1) = &type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field;
    *(void *)&v5[0] = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field();
    LOBYTE(v3) = a1;
    *(_OWORD *)((char *)v5 + 8) = xmmword_182106C90;
    BYTE8(v5[1]) = 1;
    uint64_t v6 = 0;
  }
  return specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v3, 0xD00000000000001ALL, 0x80000001823AC820);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component);
  }
  return result;
}

Swift::Int Calendar.date(_:matchesComponents:)(double *a1, const void *a2)
{
  void (*v26)(_OWORD *__return_ptr, _OWORD *, double *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  BOOL v31;
  long long v32[18];
  double v33[36];
  _OWORD __src[18];
  _OWORD v35[18];
  long long v36;
  long long v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  __int16 v69;
  _OWORD __dst[19];

  double v3 = *a1;
  memcpy(__dst, a2, 0x11AuLL);
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v6 = static _SetStorage.allocate(capacity:)();
  uint64_t v7 = 0;
  uint64_t v8 = v6 + 56;
  do
  {
    Swift::UInt v12 = outlined read-only object #0 of Calendar.date(_:matchesComponents:)[v7 + 32];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v12);
    Swift::Int result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    uint64_t v17 = *(void *)(v8 + 8 * (v15 >> 6));
    uint64_t v18 = 1 << v15;
    uint64_t v19 = *(void *)(v6 + 48);
    if (((1 << v15) & v17) != 0)
    {
      if (*(unsigned __int8 *)(v19 + v15) == v12) {
        goto LABEL_4;
      }
      uint64_t v20 = ~v14;
      while (1)
      {
        unint64_t v15 = (v15 + 1) & v20;
        unint64_t v16 = v15 >> 6;
        uint64_t v17 = *(void *)(v8 + 8 * (v15 >> 6));
        uint64_t v18 = 1 << v15;
        if ((v17 & (1 << v15)) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v19 + v15) == v12) {
          goto LABEL_4;
        }
      }
    }
    *(void *)(v8 + 8 * v16) = v18 | v17;
    *(unsigned char *)(v19 + v15) = v12;
    uint64_t v9 = *(void *)(v6 + 16);
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10)
    {
      __break(1u);
      goto LABEL_27;
    }
    *(void *)(v6 + 16) = v11;
LABEL_4:
    ++v7;
  }
  while (v7 != 15);
  outlined retain of DateComponents((uint64_t)__dst);
  specialized _NativeSet.filter(_:)(v6, __dst);
  outlined release of DateComponents((uint64_t)__dst);
  *(void *)&v35[0] = v4;
  *((void *)&v35[0] + 1) = v5;
  uint64_t v21 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v21, __src);
  double v22 = 1.59271755e13;
  if (v3 <= 1.59271755e13) {
    double v22 = v3;
  }
  double v23 = fmax(v22, -2.11845067e11);
  v33[0] = v23;
  Calendar._dateComponents(_:from:)((uint64_t *)__src, v33, &v36);
  swift_release();
  char v24 = BYTE9(__dst[17]);
  if (BYTE9(__dst[17]) == 2)
  {
    Swift::Int result = outlined retain of DateComponents((uint64_t)__dst);
  }
  else
  {
    *(void *)&__src[0] = 4;
    uint64_t ObjectType = swift_getObjectType();
    v33[0] = v23;
    long long v26 = *(void (**)(_OWORD *__return_ptr, _OWORD *, double *, uint64_t, uint64_t))(v5 + 192);
    outlined retain of DateComponents((uint64_t)__dst);
    v26(v35, __src, v33, ObjectType, v5);
    Swift::Int result = outlined release of DateComponents((uint64_t)v35);
    HIBYTE(v69) = BYTE9(v35[17]);
  }
  long long v27 = *(void *)&__dst[10];
  long long v28 = v54;
  long long v29 = v55 ^ 1 | BYTE8(__dst[10]);
  if (v55 & 1) != 0 || (BYTE8(__dst[10])) {
    goto LABEL_24;
  }
  uint64_t v30 = v54 - *(void *)&__dst[10];
  if (!__OFSUB__(v54, *(void *)&__dst[10]))
  {
    if (v30 < 0) {
      uint64_t v30 = *(void *)&__dst[10] - v54;
    }
    if ((unint64_t)v30 >= 0x1F5)
    {
      outlined release of DateComponents((uint64_t)__dst);
      *(void *)&v35[2] = v38;
      BYTE8(v35[2]) = v39;
      *(void *)&v35[3] = v40;
      BYTE8(v35[3]) = v41;
      *(void *)&v35[4] = v42;
      BYTE8(v35[4]) = v43;
      *(void *)&v35[5] = v44;
      BYTE8(v35[5]) = v45;
      *(void *)&v35[6] = v46;
      BYTE8(v35[6]) = v47;
      *(void *)&v35[7] = v48;
      BYTE8(v35[7]) = v49;
      *(void *)&v35[8] = v50;
      BYTE8(v35[8]) = v51;
      *(void *)&v35[9] = v52;
      BYTE8(v35[9]) = v53;
      *(void *)&v35[10] = v28;
      *(void *)&v35[11] = v56;
      BYTE8(v35[11]) = v57;
      *(void *)&v35[12] = v58;
      BYTE8(v35[12]) = v59;
      *(void *)&v35[13] = v60;
      BYTE8(v35[13]) = v61;
      *(void *)&v35[14] = v62;
      BYTE8(v35[14]) = v63;
      *(void *)&v35[15] = v64;
      BYTE8(v35[15]) = v65;
      BYTE8(v35[16]) = v67;
      WORD4(v35[17]) = v69;
      *(void *)&v35[16] = v66;
      *(void *)&v35[17] = v68;
      v35[0] = v36;
      v35[1] = v37;
      BYTE8(v35[10]) = 0;
      outlined release of DateComponents((uint64_t)v35);
      return 0;
    }
    long long v28 = 0;
    long long v27 = 0;
    long long v29 = 0;
LABEL_24:
    *(void *)&void __src[2] = *(void *)&__dst[2];
    BYTE8(__src[2]) = BYTE8(__dst[2]);
    *(void *)&__src[3] = *(void *)&__dst[3];
    BYTE8(__src[3]) = BYTE8(__dst[3]);
    *(void *)&__src[4] = *(void *)&__dst[4];
    BYTE8(__src[4]) = BYTE8(__dst[4]);
    *(void *)&__src[5] = *(void *)&__dst[5];
    BYTE8(__src[5]) = BYTE8(__dst[5]);
    *(void *)&__src[6] = *(void *)&__dst[6];
    BYTE8(__src[6]) = BYTE8(__dst[6]);
    *(void *)&__src[7] = *(void *)&__dst[7];
    BYTE8(__src[7]) = BYTE8(__dst[7]);
    *(void *)&__src[8] = *(void *)&__dst[8];
    BYTE8(__src[8]) = BYTE8(__dst[8]);
    *(void *)&__src[9] = *(void *)&__dst[9];
    BYTE8(__src[9]) = BYTE8(__dst[9]);
    *(void *)&__src[10] = v27;
    BYTE8(__src[10]) = v29;
    *(void *)&__src[11] = *(void *)&__dst[11];
    BYTE8(__src[11]) = BYTE8(__dst[11]);
    *(void *)&__src[12] = *(void *)&__dst[12];
    BYTE8(__src[12]) = BYTE8(__dst[12]);
    *(void *)&__src[13] = *(void *)&__dst[13];
    BYTE8(__src[13]) = BYTE8(__dst[13]);
    *(void *)&__src[14] = *(void *)&__dst[14];
    BYTE8(__src[14]) = BYTE8(__dst[14]);
    *(void *)&__src[15] = *(void *)&__dst[15];
    BYTE8(__src[15]) = BYTE8(__dst[15]);
    BYTE8(__src[16]) = BYTE8(__dst[16]);
    BYTE8(__src[17]) = BYTE8(__dst[17]);
    *(void *)&__src[16] = *(void *)&__dst[16];
    *(void *)&__src[17] = *(void *)&__dst[17];
    BYTE9(__src[17]) = v24;
    __src[0] = __dst[0];
    __src[1] = __dst[1];
    memcpy(v33, __src, 0x11AuLL);
    *(void *)&v35[2] = v38;
    BYTE8(v35[2]) = v39;
    *(void *)&v35[3] = v40;
    BYTE8(v35[3]) = v41;
    *(void *)&v35[4] = v42;
    BYTE8(v35[4]) = v43;
    *(void *)&v35[5] = v44;
    BYTE8(v35[5]) = v45;
    *(void *)&v35[6] = v46;
    BYTE8(v35[6]) = v47;
    *(void *)&v35[7] = v48;
    BYTE8(v35[7]) = v49;
    *(void *)&v35[8] = v50;
    BYTE8(v35[8]) = v51;
    *(void *)&v35[9] = v52;
    BYTE8(v35[9]) = v53;
    *(void *)&v35[10] = v28;
    BYTE8(v35[10]) = v55;
    *(void *)&v35[11] = v56;
    BYTE8(v35[11]) = v57;
    *(void *)&v35[12] = v58;
    BYTE8(v35[12]) = v59;
    *(void *)&v35[13] = v60;
    BYTE8(v35[13]) = v61;
    *(void *)&v35[14] = v62;
    BYTE8(v35[14]) = v63;
    *(void *)&v35[15] = v64;
    BYTE8(v35[15]) = v65;
    BYTE8(v35[16]) = v67;
    WORD4(v35[17]) = v69;
    *(void *)&v35[16] = v66;
    *(void *)&v35[17] = v68;
    v35[0] = v36;
    v35[1] = v37;
    memcpy(v32, v35, 0x11AuLL);
    long long v31 = specialized static DateComponents.== infix(_:_:)((uint64_t)v33, v32);
    outlined release of DateComponents((uint64_t)__src);
    outlined release of DateComponents((uint64_t)v35);
    return v31;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe, unsigned char *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = isStackAllocationSafe;
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  char v6 = *(unsigned char *)(isStackAllocationSafe + 32);
  int64_t v104 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v7 = 8 * v104;
  if ((v6 & 0x3Fu) > 0xD)
  {
    Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v103 = (unint64_t *)swift_slowAlloc();
      bzero(v103, v7);
      uint64_t v37 = 0;
      int64_t v38 = 0;
      uint64_t v39 = v5 + 56;
      uint64_t v40 = 1 << *(unsigned char *)(v5 + 32);
      if (v40 < 64) {
        uint64_t v41 = ~(-1 << v40);
      }
      else {
        uint64_t v41 = -1;
      }
      unint64_t v42 = v41 & *(void *)(v5 + 56);
      int64_t v43 = (unint64_t)(v40 + 63) >> 6;
      uint64_t v44 = a2 + 104;
      uint64_t v45 = a2 + 168;
      uint64_t v46 = a2 + 280;
      char v47 = a2 + 264;
      uint64_t v48 = a2 + 248;
      char v49 = a2 + 216;
      unint64_t v50 = a2 + 200;
      unint64_t v51 = a2 + 184;
      unint64_t v52 = a2 + 152;
      uint64_t v53 = a2 + 136;
      id v54 = a2 + 120;
      unint64_t v55 = a2 + 88;
      unint64_t v56 = a2 + 72;
      unint64_t v57 = a2 + 56;
      unint64_t v58 = a2 + 40;
      while (2)
      {
        if (v42)
        {
          unint64_t v60 = __clz(__rbit64(v42));
          v42 &= v42 - 1;
          unint64_t v61 = v60 | (v38 << 6);
          goto LABEL_69;
        }
        BOOL v33 = __OFADD__(v38++, 1);
        if (v33) {
          goto LABEL_166;
        }
        if (v38 < v43)
        {
          unint64_t v62 = *(void *)(v39 + 8 * v38);
          if (v62)
          {
LABEL_68:
            unint64_t v42 = (v62 - 1) & v62;
            unint64_t v61 = __clz(__rbit64(v62)) + (v38 << 6);
LABEL_69:
            unint64_t v59 = v58;
            switch(*(unsigned char *)(*(void *)(v5 + 48) + v61))
            {
              case 1:
                unint64_t v59 = v57;
                goto LABEL_53;
              case 2:
                unint64_t v59 = v56;
                goto LABEL_53;
              case 3:
                unint64_t v59 = v55;
                goto LABEL_53;
              case 4:
                unint64_t v59 = v54;
                goto LABEL_53;
              case 5:
                unint64_t v59 = v53;
                goto LABEL_53;
              case 6:
                unint64_t v59 = v52;
                goto LABEL_53;
              case 7:
                unint64_t v59 = v51;
                goto LABEL_53;
              case 8:
                unint64_t v59 = v50;
                goto LABEL_53;
              case 9:
                unint64_t v59 = v49;
                goto LABEL_53;
              case 0xA:
                unint64_t v59 = v48;
                goto LABEL_53;
              case 0xB:
                unint64_t v59 = v47;
                goto LABEL_53;
              case 0xC:
                unint64_t v59 = v46;
                goto LABEL_53;
              case 0xD:
                unint64_t v59 = v45;
                goto LABEL_53;
              case 0xE:
              case 0xF:
              case 0x10:
                continue;
              case 0x11:
                unint64_t v59 = v44;
                goto LABEL_53;
              default:
LABEL_53:
                if (*v59) {
                  continue;
                }
                *(unint64_t *)((char *)v103 + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v61;
                BOOL v33 = __OFADD__(v37++, 1);
                if (!v33) {
                  continue;
                }
                __break(1u);
                break;
            }
            break;
          }
          int64_t v63 = v38 + 1;
          if (v38 + 1 >= v43) {
            break;
          }
          unint64_t v62 = *(void *)(v39 + 8 * v63);
          if (v62) {
            goto LABEL_67;
          }
          int64_t v63 = v38 + 2;
          if (v38 + 2 >= v43) {
            break;
          }
          unint64_t v62 = *(void *)(v39 + 8 * v63);
          if (v62) {
            goto LABEL_67;
          }
          int64_t v63 = v38 + 3;
          if (v38 + 3 >= v43) {
            break;
          }
          unint64_t v62 = *(void *)(v39 + 8 * v63);
          if (v62) {
            goto LABEL_67;
          }
          int64_t v63 = v38 + 4;
          if (v38 + 4 >= v43) {
            break;
          }
          unint64_t v62 = *(void *)(v39 + 8 * v63);
          if (v62)
          {
LABEL_67:
            int64_t v38 = v63;
            goto LABEL_68;
          }
          while (1)
          {
            int64_t v38 = v63 + 1;
            if (__OFADD__(v63, 1)) {
              goto LABEL_170;
            }
            if (v38 >= v43) {
              break;
            }
            unint64_t v62 = *(void *)(v39 + 8 * v38);
            ++v63;
            if (v62) {
              goto LABEL_68;
            }
          }
        }
        break;
      }
      if (!v37)
      {
        swift_release();
        uint64_t v36 = MEMORY[0x1E4FBC870];
        goto LABEL_162;
      }
      if (v37 == *(void *)(v5 + 16))
      {
        uint64_t v36 = v5;
        goto LABEL_162;
      }
      uint64_t v102 = v3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
      uint64_t v36 = static _SetStorage.allocate(capacity:)();
      int64_t v82 = 0;
      unint64_t v83 = *v103;
      uint64_t v84 = v36 + 56;
      while (1)
      {
        if (v83)
        {
          unint64_t v86 = __clz(__rbit64(v83));
          v83 &= v83 - 1;
          unint64_t v87 = v86 | (v82 << 6);
        }
        else
        {
          BOOL v33 = __OFADD__(v82++, 1);
          if (v33) {
            goto LABEL_169;
          }
          if (v82 >= v104) {
            goto LABEL_161;
          }
          unint64_t v88 = v103[v82];
          if (!v88)
          {
            int64_t v89 = v82 + 1;
            if (v82 + 1 >= v104) {
              goto LABEL_161;
            }
            unint64_t v88 = v103[v89];
            if (v88) {
              goto LABEL_144;
            }
            int64_t v89 = v82 + 2;
            if (v82 + 2 >= v104) {
              goto LABEL_161;
            }
            unint64_t v88 = v103[v89];
            if (v88) {
              goto LABEL_144;
            }
            int64_t v89 = v82 + 3;
            if (v82 + 3 >= v104) {
              goto LABEL_161;
            }
            unint64_t v88 = v103[v89];
            if (v88) {
              goto LABEL_144;
            }
            int64_t v89 = v82 + 4;
            if (v82 + 4 >= v104) {
              goto LABEL_161;
            }
            unint64_t v88 = v103[v89];
            if (v88)
            {
LABEL_144:
              int64_t v82 = v89;
            }
            else
            {
              int64_t v99 = v82 + 5;
              if (v82 + 5 >= v104) {
                goto LABEL_161;
              }
              unint64_t v88 = v103[v99];
              v82 += 5;
              if (!v88)
              {
                while (1)
                {
                  int64_t v82 = v99 + 1;
                  if (__OFADD__(v99, 1)) {
                    goto LABEL_172;
                  }
                  if (v82 >= v104) {
                    break;
                  }
                  unint64_t v88 = v103[v82];
                  ++v99;
                  if (v88) {
                    goto LABEL_145;
                  }
                }
LABEL_161:
                swift_release();
LABEL_162:
                MEMORY[0x185309510](v103, -1, -1, v52, v53, v54, v55, v56);
                return v36;
              }
            }
          }
LABEL_145:
          unint64_t v83 = (v88 - 1) & v88;
          unint64_t v87 = __clz(__rbit64(v88)) + (v82 << 6);
        }
        Swift::UInt v90 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v87);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v90);
        Swift::Int v91 = Hasher._finalize()();
        uint64_t v92 = -1 << *(unsigned char *)(v36 + 32);
        unint64_t v93 = v91 & ~v92;
        unint64_t v94 = v93 >> 6;
        if (((-1 << v93) & ~*(void *)(v84 + 8 * (v93 >> 6))) != 0)
        {
          unint64_t v85 = __clz(__rbit64((-1 << v93) & ~*(void *)(v84 + 8 * (v93 >> 6)))) | v93 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v95 = 0;
          unint64_t v96 = (unint64_t)(63 - v92) >> 6;
          do
          {
            if (++v94 == v96 && (v95 & 1) != 0) {
              goto LABEL_165;
            }
            BOOL v97 = v94 == v96;
            if (v94 == v96) {
              unint64_t v94 = 0;
            }
            v95 |= v97;
            uint64_t v98 = *(void *)(v84 + 8 * v94);
          }
          while (v98 == -1);
          unint64_t v85 = __clz(__rbit64(~v98)) + (v94 << 6);
        }
        *(void *)(v84 + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v85;
        *(unsigned char *)(*(void *)(v36 + 48) + v85) = v90;
        ++*(void *)(v36 + 16);
        if (!--v37) {
          goto LABEL_161;
        }
      }
    }
  }
  MEMORY[0x1F4188790](isStackAllocationSafe);
  uint64_t v103 = (unint64_t *)((char *)&v101 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v103, v7);
  uint64_t v8 = 0;
  int64_t v9 = 0;
  uint64_t v10 = v5 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v15 = a2 + 104;
  unint64_t v16 = a2 + 168;
  uint64_t v17 = a2 + 280;
  uint64_t v18 = a2 + 264;
  uint64_t v19 = a2 + 248;
  uint64_t v20 = a2 + 216;
  uint64_t v21 = a2 + 200;
  double v22 = a2 + 184;
  double v23 = a2 + 152;
  char v24 = a2 + 136;
  long long v25 = a2 + 120;
  long long v26 = a2 + 88;
  long long v27 = a2 + 72;
  long long v28 = a2 + 56;
  long long v29 = a2 + 40;
  while (2)
  {
    if (v13)
    {
      unint64_t v31 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v32 = v31 | (v9 << 6);
      goto LABEL_23;
    }
    BOOL v33 = __OFADD__(v9++, 1);
    if (v33) {
      goto LABEL_164;
    }
    if (v9 < v14)
    {
      unint64_t v34 = *(void *)(v10 + 8 * v9);
      if (v34)
      {
LABEL_22:
        unint64_t v13 = (v34 - 1) & v34;
        unint64_t v32 = __clz(__rbit64(v34)) + (v9 << 6);
LABEL_23:
        uint64_t v30 = v29;
        switch(*(unsigned char *)(*(void *)(v5 + 48) + v32))
        {
          case 1:
            uint64_t v30 = v28;
            goto LABEL_7;
          case 2:
            uint64_t v30 = v27;
            goto LABEL_7;
          case 3:
            uint64_t v30 = v26;
            goto LABEL_7;
          case 4:
            uint64_t v30 = v25;
            goto LABEL_7;
          case 5:
            uint64_t v30 = v24;
            goto LABEL_7;
          case 6:
            uint64_t v30 = v23;
            goto LABEL_7;
          case 7:
            uint64_t v30 = v22;
            goto LABEL_7;
          case 8:
            uint64_t v30 = v21;
            goto LABEL_7;
          case 9:
            uint64_t v30 = v20;
            goto LABEL_7;
          case 0xA:
            uint64_t v30 = v19;
            goto LABEL_7;
          case 0xB:
            uint64_t v30 = v18;
            goto LABEL_7;
          case 0xC:
            uint64_t v30 = v17;
            goto LABEL_7;
          case 0xD:
            uint64_t v30 = v16;
            goto LABEL_7;
          case 0xE:
          case 0xF:
          case 0x10:
            continue;
          case 0x11:
            uint64_t v30 = v15;
            goto LABEL_7;
          default:
LABEL_7:
            if (*v30) {
              continue;
            }
            *(unint64_t *)((char *)v103 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
            BOOL v33 = __OFADD__(v8++, 1);
            if (!v33) {
              continue;
            }
            __break(1u);
            break;
        }
        break;
      }
      int64_t v35 = v9 + 1;
      if (v9 + 1 >= v14) {
        break;
      }
      unint64_t v34 = *(void *)(v10 + 8 * v35);
      if (v34) {
        goto LABEL_21;
      }
      int64_t v35 = v9 + 2;
      if (v9 + 2 >= v14) {
        break;
      }
      unint64_t v34 = *(void *)(v10 + 8 * v35);
      if (v34) {
        goto LABEL_21;
      }
      int64_t v35 = v9 + 3;
      if (v9 + 3 >= v14) {
        break;
      }
      unint64_t v34 = *(void *)(v10 + 8 * v35);
      if (v34) {
        goto LABEL_21;
      }
      int64_t v35 = v9 + 4;
      if (v9 + 4 >= v14) {
        break;
      }
      unint64_t v34 = *(void *)(v10 + 8 * v35);
      if (v34)
      {
LABEL_21:
        int64_t v9 = v35;
        goto LABEL_22;
      }
      while (1)
      {
        int64_t v9 = v35 + 1;
        if (__OFADD__(v35, 1)) {
          goto LABEL_168;
        }
        if (v9 >= v14) {
          break;
        }
        unint64_t v34 = *(void *)(v10 + 8 * v9);
        ++v35;
        if (v34) {
          goto LABEL_22;
        }
      }
    }
    break;
  }
  if (v8)
  {
    if (v8 != *(void *)(v5 + 16))
    {
      uint64_t v101 = (uint64_t)&v101;
      uint64_t v102 = v3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
      uint64_t v36 = static _SetStorage.allocate(capacity:)();
      int64_t v64 = 0;
      unint64_t v65 = *v103;
      uint64_t v66 = v36 + 56;
      while (1)
      {
        if (v65)
        {
          unint64_t v68 = __clz(__rbit64(v65));
          v65 &= v65 - 1;
          unint64_t v69 = v68 | (v64 << 6);
        }
        else
        {
          BOOL v33 = __OFADD__(v64++, 1);
          if (v33) {
            goto LABEL_167;
          }
          if (v64 >= v104)
          {
LABEL_126:
            swift_release();
            return v36;
          }
          unint64_t v70 = v103[v64];
          if (!v70)
          {
            int64_t v71 = v64 + 1;
            if (v64 + 1 >= v104) {
              goto LABEL_126;
            }
            unint64_t v70 = v103[v71];
            if (v70) {
              goto LABEL_109;
            }
            int64_t v71 = v64 + 2;
            if (v64 + 2 >= v104) {
              goto LABEL_126;
            }
            unint64_t v70 = v103[v71];
            if (v70) {
              goto LABEL_109;
            }
            int64_t v71 = v64 + 3;
            if (v64 + 3 >= v104) {
              goto LABEL_126;
            }
            unint64_t v70 = v103[v71];
            if (v70) {
              goto LABEL_109;
            }
            int64_t v71 = v64 + 4;
            if (v64 + 4 >= v104) {
              goto LABEL_126;
            }
            unint64_t v70 = v103[v71];
            if (v70)
            {
LABEL_109:
              int64_t v64 = v71;
            }
            else
            {
              int64_t v81 = v64 + 5;
              if (v64 + 5 >= v104) {
                goto LABEL_126;
              }
              unint64_t v70 = v103[v81];
              v64 += 5;
              if (!v70)
              {
                while (1)
                {
                  int64_t v64 = v81 + 1;
                  if (__OFADD__(v81, 1)) {
                    break;
                  }
                  if (v64 >= v104) {
                    goto LABEL_126;
                  }
                  unint64_t v70 = v103[v64];
                  ++v81;
                  if (v70) {
                    goto LABEL_110;
                  }
                }
LABEL_171:
                __break(1u);
LABEL_172:
                __break(1u);
              }
            }
          }
LABEL_110:
          unint64_t v65 = (v70 - 1) & v70;
          unint64_t v69 = __clz(__rbit64(v70)) + (v64 << 6);
        }
        Swift::UInt v72 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v69);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v72);
        Swift::Int v73 = Hasher._finalize()();
        uint64_t v74 = -1 << *(unsigned char *)(v36 + 32);
        unint64_t v75 = v73 & ~v74;
        unint64_t v76 = v75 >> 6;
        if (((-1 << v75) & ~*(void *)(v66 + 8 * (v75 >> 6))) != 0)
        {
          unint64_t v67 = __clz(__rbit64((-1 << v75) & ~*(void *)(v66 + 8 * (v75 >> 6)))) | v75 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_95;
        }
        char v77 = 0;
        unint64_t v78 = (unint64_t)(63 - v74) >> 6;
        do
        {
          if (++v76 == v78 && (v77 & 1) != 0)
          {
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
            goto LABEL_171;
          }
          BOOL v79 = v76 == v78;
          if (v76 == v78) {
            unint64_t v76 = 0;
          }
          v77 |= v79;
          uint64_t v80 = *(void *)(v66 + 8 * v76);
        }
        while (v80 == -1);
        unint64_t v67 = __clz(__rbit64(~v80)) + (v76 << 6);
LABEL_95:
        *(void *)(v66 + ((v67 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v67;
        *(unsigned char *)(*(void *)(v36 + 48) + v67) = v72;
        ++*(void *)(v36 + 16);
        if (!--v8) {
          goto LABEL_126;
        }
      }
    }
    return v5;
  }
  else
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
}

void __NSPoisoned()
{
  qword_1E8EDF350 = (uint64_t)"Corrupt NSKeyedArchiver detected. Pointer authentication.";
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

NSNumber __swiftcall Int32._bridgeToObjectiveC()()
{
  uint64_t v1 = v0;
  id v2 = objc_allocWithZone((Class)NSNumber);

  return (NSNumber)objc_msgSend(v2, sel_initWithInt_, v1);
}

uint64_t BinaryInteger.formatted<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v19[1] = a5;
  v19[2] = a6;
  v19[3] = a1;
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  double v15 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v17 = (char *)v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, v6, a2, v15);
  dispatch thunk of BinaryInteger.init<A>(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 48))(v17, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, AssociatedTypeWitness);
}

__C::_NSRange_optional __swiftcall _NSRange.intersection(_:)(__C::_NSRange a1)
{
  Swift::Int v3 = v1 + v2;
  if (__OFADD__(v1, v2))
  {
    __break(1u);
    goto LABEL_16;
  }
  Swift::Int v4 = a1.location + a1.length;
  if (__OFADD__(a1.location, a1.length))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  Swift::Int v5 = v1;
  if (v3 >= v4) {
    Swift::Int v6 = a1.location + a1.length;
  }
  else {
    Swift::Int v6 = v1 + v2;
  }
  if (v1 < a1.location || v4 <= v1)
  {
    Swift::Int location = 0;
    LOBYTE(v1) = 1;
    a1.length = 0;
    if (a1.location >= v5 && v3 > a1.location)
    {
      a1.length = v6 - a1.location;
      if (__OFSUB__(v6, a1.location))
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      LOBYTE(v1) = 0;
      Swift::Int location = a1.location;
    }
    a1.Swift::Int location = location;
    goto LABEL_19;
  }
  a1.length = v6 - v1;
  if (__OFSUB__(v6, v1))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  LOBYTE(v1) = 0;
  a1.Swift::Int location = v5;
LABEL_19:
  result.value = a1;
  result.is_nil = v1;
  return result;
}

void NSObject.KVOSubscription.customMirror.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  Swift::Int v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(v1 + 176));
  os_unfair_lock_lock(v9);
  uint64_t v17 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_182106040;
  *(void *)(v10 + 32) = 0x746176726573626FLL;
  *(void *)(v10 + 40) = 0xEB000000006E6F69;
  uint64_t v11 = (void *)v0[2];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSKeyValueObservation?);
  *(void *)(v10 + 48) = v11;
  *(void *)(v10 + 72) = v12;
  *(void *)(v10 + 80) = 0x646E616D6564;
  uint64_t v13 = v0[3];
  *(void *)(v10 + 120) = MEMORY[0x1E4F1AAD8];
  *(void *)(v10 + 88) = 0xE600000000000000;
  *(void *)(v10 + 96) = v13;
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 1, 1, v14);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBC430], v2);
  id v15 = v11;
  swift_retain();
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(v9);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSStringCompareOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSStringCompareOptions and conformance NSStringCompareOptions, type metadata accessor for NSStringCompareOptions);
}

uint64_t base witness table accessor for Equatable in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, type metadata accessor for NSRunLoopMode);
}

uint64_t partial apply for closure #1 in NSURLSession.data(from:delegate:)(uint64_t a1)
{
  long long v9 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v6 + 56) = v4;
  *(void *)(v6 + 64) = v5;
  *(_OWORD *)(v6 + 40) = v9;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = a1;
  return MEMORY[0x1F4188298](closure #1 in NSURLSession.data(from:delegate:), 0, 0);
}

uint64_t NSURLSession.data(from:delegate:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 104) = a2;
  *(void *)(v3 + 112) = v2;
  *(void *)(v3 + 120) = *(void *)a1;
  *(_OWORD *)(v3 + 128) = *(_OWORD *)(a1 + 8);
  return MEMORY[0x1F4188298](NSURLSession.data(from:delegate:), 0, 0);
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a2 + 64);
    while (1)
    {
      uint64_t v6 = *(v4 - 4);
      uint64_t v7 = *(v4 - 1);
      uint64_t v27 = *(v4 - 2);
      uint64_t v28 = v4[1];
      uint64_t v8 = v4[3];
      uint64_t v29 = v4[2];
      uint64_t v30 = *v4;
      uint64_t v10 = v4[4];
      uint64_t v9 = v4[5];
      uint64_t v12 = v4[6];
      uint64_t v11 = v4[7];
      unint64_t v5 = v4[8];
      uint64_t v25 = *(v4 - 3);
      uint64_t v26 = v10;
      switch(v5)
      {
        case 0uLL:
          String.hash(into:)();
          unint64_t v5 = 0;
          goto LABEL_4;
        case 1uLL:
          String.hash(into:)();
          unint64_t v5 = 1;
          goto LABEL_4;
        case 2uLL:
          String.hash(into:)();
          unint64_t v5 = 2;
          goto LABEL_4;
        case 3uLL:
          String.hash(into:)();
          unint64_t v5 = 3;
          goto LABEL_4;
        default:
          uint64_t v22 = v4[6];
          uint64_t v23 = *(v4 - 4);
          if (*(v4 - 3))
          {
            uint64_t v20 = v4[5];
            uint64_t v13 = v4[4];
            uint64_t v14 = *(v4 - 3);
            Hasher._combine(_:)(1u);
            outlined copy of TermOfAddress._TermOfAddress(v23, v14, v27, v7, v30, v28, v29, v8, v13, v20, v12, v11, v5);
            outlined copy of Locale.LanguageCode?(v23, v14);
            outlined copy of Locale.LanguageCode?(v30, v28);
            uint64_t v9 = v20;
            outlined copy of Locale.LanguageCode?(v26, v20);
            outlined copy of Locale.LanguageCode?(v23, v25);
            String.hash(into:)();
            uint64_t v15 = v28;
            outlined consume of Locale.LanguageCode?(v23, v25);
            if (v28) {
              goto LABEL_9;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            uint64_t v19 = v12;
            uint64_t v15 = v28;
            outlined copy of TermOfAddress._TermOfAddress(v23, 0, v27, v7, v30, v28, v29, v8, v10, v9, v19, v11, v5);
            outlined copy of Locale.LanguageCode?(v23, 0);
            outlined copy of Locale.LanguageCode?(v30, v28);
            outlined copy of Locale.LanguageCode?(v10, v9);
            if (v28)
            {
LABEL_9:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              String.hash(into:)();
              outlined consume of Locale.LanguageCode?(v30, v15);
              if (!v9) {
                goto LABEL_15;
              }
              goto LABEL_10;
            }
          }
          Hasher._combine(_:)(0);
          if (!v9)
          {
LABEL_15:
            Hasher._combine(_:)(0);
            uint64_t v21 = 0;
            uint64_t v18 = v25;
            uint64_t v17 = v26;
            uint64_t v16 = v22;
            goto LABEL_16;
          }
LABEL_10:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v16 = v22;
          String.hash(into:)();
          uint64_t v17 = v26;
          outlined consume of Locale.LanguageCode?(v26, v9);
          uint64_t v21 = v9;
          uint64_t v18 = v25;
LABEL_16:
          uint64_t v6 = v23;
          outlined consume of Locale.LanguageCode?(v23, v18);
          outlined consume of Locale.LanguageCode?(v30, v28);
          outlined consume of Locale.LanguageCode?(v17, v21);
          specialized Array<A>.hash(into:)(a1, v5);
          uint64_t v12 = v16;
LABEL_4:
          v4 += 13;
          outlined consume of TermOfAddress._TermOfAddress(v6, v25, v27, v7, v30, v28, v29, v8, v26, v9, v12, v11, v5);
          if (!--v3) {
            return;
          }
          break;
      }
    }
  }
}

{
  Swift::UInt v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt v21;

  uint64_t v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  uint64_t v21 = v4;
  if (v4)
  {
    unint64_t v5 = (unsigned int *)(a2 + 88);
    do
    {
      uint64_t v6 = *((unsigned __int8 *)v5 - 40);
      uint64_t v7 = *((unsigned __int8 *)v5 - 39);
      uint64_t v13 = *((unsigned __int8 *)v5 - 38);
      uint64_t v8 = *((void *)v5 - 4);
      uint64_t v14 = *((unsigned __int8 *)v5 - 24);
      uint64_t v15 = *((unsigned __int8 *)v5 - 23);
      uint64_t v16 = *((unsigned __int8 *)v5 - 22);
      uint64_t v17 = *((unsigned __int8 *)v5 - 21);
      uint64_t v18 = *((unsigned __int8 *)v5 - 20);
      uint64_t v9 = *((void *)v5 - 2);
      uint64_t v20 = *((unsigned __int8 *)v5 + 4);
      uint64_t v19 = *v5;
      uint64_t v10 = *((void *)v5 - 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      uint64_t v11 = v8;
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v6 == 3)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v6 + 1);
      }
      if (v7 == 14)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v7 + 1);
      }
      uint64_t v12 = v16;
      if (v13 == 6)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        uint64_t v12 = v16;
        uint64_t v11 = v8;
        Hasher._combine(_:)(v13 + 1);
      }
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v11);
      if (v14 == 14)
      {
        Hasher._combine(_:)(0);
        if (v15 != 3) {
          goto LABEL_16;
        }
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v14 + 1);
        if (v15 != 3)
        {
LABEL_16:
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v15 + 1);
          if (v12 == 3) {
            goto LABEL_20;
          }
          goto LABEL_17;
        }
      }
      Hasher._combine(_:)(0);
      if (v12 == 3)
      {
LABEL_20:
        Hasher._combine(_:)(0);
        goto LABEL_21;
      }
LABEL_17:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v12 + 1);
LABEL_21:
      if (v17 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)((v17 & 1) + 1);
      }
      if (v18 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)((v18 & 1) + 1);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      specialized Optional<A>.hash(into:)(a1, v9, v10, (v19 | (v20 << 32)) & 0xFFFFFFFFFFLL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v5 += 16;
      --v21;
    }
    while (v21);
  }
}

{
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  Swift::UInt v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;

  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = a2 + 32;
    while (2)
    {
      uint64_t v8 = v5 + 32 * v4;
      uint64_t v9 = *(void *)v8;
      uint64_t v10 = *(void *)(v8 + 8);
      uint64_t v11 = *(unsigned char *)(v8 + 16);
      uint64_t v12 = *(void *)(v8 + 24);
      ++v4;
      switch(v11)
      {
        case 1:
          uint64_t v6 = 4;
          goto LABEL_4;
        case 2:
          Hasher._combine(_:)(5uLL);
          if (v10)
          {
            Hasher._combine(_:)(1u);
            outlined copy of PresentationIntent.Kind(v9, v10, 2);
            String.hash(into:)();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          goto LABEL_6;
        case 3:
          Hasher._combine(_:)(8uLL);
          Hasher._combine(_:)(*(void *)(v9 + 16));
          uint64_t v13 = *(void *)(v9 + 16);
          if (v13)
          {
            uint64_t v14 = (unsigned __int8 *)(v9 + 32);
            do
            {
              uint64_t v15 = *v14++;
              Hasher._combine(_:)(v15);
              --v13;
            }
            while (v13);
          }
          outlined copy of PresentationIntent.Kind(v9, v10, 3);
          goto LABEL_6;
        case 4:
          uint64_t v6 = 10;
          goto LABEL_4;
        case 5:
          uint64_t v6 = 11;
          goto LABEL_4;
        case 6:
          switch(v9)
          {
            case 1:
              uint64_t v7 = 2;
              break;
            case 2:
              uint64_t v7 = 3;
              break;
            case 3:
              uint64_t v7 = 6;
              break;
            case 4:
              uint64_t v7 = 7;
              break;
            case 5:
              uint64_t v7 = 9;
              break;
            default:
              uint64_t v7 = 0;
              break;
          }
          goto LABEL_5;
        default:
          uint64_t v6 = 1;
LABEL_4:
          Hasher._combine(_:)(v6);
          uint64_t v7 = v9;
LABEL_5:
          Hasher._combine(_:)(v7);
LABEL_6:
          Hasher._combine(_:)(v12);
          outlined consume of PresentationIntent.Kind(v9, v10, v11);
          if (v4 != v3) {
            continue;
          }
          return;
      }
    }
  }
}

Swift::Int specialized Array.append<A>(contentsOf:)(Swift::Int result, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    __C::_NSRange_optional result = String.UTF8View._foreignCount()();
    uint64_t v3 = result;
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v3 = HIBYTE(a2) & 0xF;
  }
  else
  {
    uint64_t v3 = result & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
  }
  else
  {
    char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = v4;
    if (!isUniquelyReferenced_nonNull_native || *((void *)v4 + 3) >> 1 < v6)
    {
      if (v5 <= v6) {
        int64_t v8 = v5 + v3;
      }
      else {
        int64_t v8 = v5;
      }
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v8, 1, v4);
      *uint64_t v2 = v4;
    }
    swift_bridgeObjectRetain();
    __C::_NSRange_optional result = _StringGuts.copyUTF8(into:)();
    if (v9) {
      goto LABEL_22;
    }
    uint64_t v10 = result;
    __C::_NSRange_optional result = swift_bridgeObjectRelease_n();
    if (v10 >= v3)
    {
      if (v10 < 1)
      {
LABEL_17:
        *uint64_t v2 = v4;
        return result;
      }
      uint64_t v11 = *((void *)v4 + 2);
      BOOL v12 = __OFADD__(v11, v10);
      uint64_t v13 = v11 + v10;
      if (!v12)
      {
        *((void *)v4 + 2) = v13;
        goto LABEL_17;
      }
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  unint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v22 = v2 & 0xC000000000000001;
    uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v5 = 4;
    uint64_t v20 = v3;
    unint64_t v21 = v2;
    while (1)
    {
      id v6 = v22 ? (id)MEMORY[0x185303120](v5 - 4, v2) : *(id *)(v2 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      id v9 = objc_msgSend(v6, sel_pronoun);
      id v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v11 = v10;

      swift_bridgeObjectRetain();
      Morphology.init(_:)((NSMorphology_optional *)objc_msgSend(v7, sel_morphology));
      v1.i32[0] = v28;
      swift_bridgeObjectRetain();
      BOOL v12 = (NSMorphology_optional *)objc_msgSend(v7, sel_dependentMorphology);
      uint64_t v13 = v12;
      if (v12)
      {
        uint64_t v14 = v12;
        Morphology.init(_:)(v13);

        uint64_t v23 = v27;
        uint64_t v13 = (NSMorphology_optional *)(v25 | ((unint64_t)v26 << 16));
        unint64_t v15 = v28 | ((unint64_t)v29 << 32);
      }
      else
      {

        uint64_t v23 = 0;
        unint64_t v15 = 0;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      }
      unint64_t v17 = v4[2];
      unint64_t v16 = v4[3];
      if (v17 >= v16 >> 1) {
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v4);
      }
      uint64_t v4[2] = v17 + 1;
      uint64_t v18 = &v4[8 * v17];
      v18[4] = v24;
      v18[5] = v11;
      *((_WORD *)v18 + 24) = v25;
      *((unsigned char *)v18 + 50) = v26;
      v18[7] = v27;
      *((_DWORD *)v18 + 16) = vmovn_s16((int16x8_t)vmovl_u8(v1)).u32[0];
      *((unsigned char *)v18 + 68) = v29;
      v18[9] = v13;
      v18[10] = v23;
      *((_DWORD *)v18 + 22) = v15;
      ++v5;
      *((unsigned char *)v18 + 92) = BYTE4(v15);
      unint64_t v2 = v21;
      if (v8 == v20) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
LABEL_20:
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized Rope.Builder.insertBeforeTip(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = v3[4];
    uint64_t v8 = v3[5];
    uint64_t v9 = v3[6];
    v3[5] = 0;
    v3[6] = 0;
    v3[4] = 0;
    if (v8)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope.Builder._appendNow(_:)(v7, v8, v9);
      outlined consume of Rope<AttributedString._InternalRun>._Item?(v3[4], v3[5]);
      swift_bridgeObjectRelease();
      __C::_NSRange_optional result = swift_bridgeObjectRelease();
    }
    v3[4] = v6;
    v3[5] = a2;
    v3[6] = a3;
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t BPlistMap.Value.debugDataTypeDescription.getter(unint64_t a1)
{
  unint64_t v2 = a1 >> 60;
  uint64_t result = 0x676E697274732061;
  switch(v2)
  {
    case 1uLL:
      uint64_t result = 0x7961727261206E61;
      break;
    case 2uLL:
      uint64_t result = 0x7465732061;
      break;
    case 3uLL:
      uint64_t result = 0x6F69746369642061;
      break;
    case 4uLL:
      uint64_t result = 0x7620617461642061;
      break;
    case 5uLL:
      uint64_t result = 0x657461642061;
      break;
    case 6uLL:
      uint64_t result = 0x61656C6F6F622061;
      break;
    case 7uLL:
      uint64_t result = 0x6E206C6165722061;
      break;
    case 8uLL:
      uint64_t result = 0x6765746E69206E61;
      break;
    case 9uLL:
      if (a1 == 0x9000000000000008) {
        unint64_t v4 = 0x76206C6C756E2061;
      }
      else {
        unint64_t v4 = 0xD000000000000012;
      }
      if (a1 == 0x9000000000000000) {
        uint64_t result = 0x6469752061;
      }
      else {
        uint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

double *Calendar._matchingDate(after:matching:inNextHighestUnit:direction:matchingPolicy:repeatedTimePolicy:)@<X0>(double *a1@<X0>, long long *a2@<X1>, unsigned char *a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, unsigned __int8 *a6@<X5>, double *a7@<X8>)
{
  double v9 = *a1;
  uint64_t v36 = *((void *)a2 + 14);
  char v10 = *((unsigned char *)a2 + 120);
  uint64_t v11 = *a3;
  int v37 = *a4;
  unsigned __int8 v12 = *a5;
  unsigned __int8 v13 = *a6;
  double v15 = *v7;
  double v14 = v7[1];
  LOBYTE(v62) = *a3;
  double v16 = 1.59271755e13;
  if (v9 <= 1.59271755e13) {
    double v16 = v9;
  }
  double v17 = fmax(v16, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  v63[0] = v17;
  (*(void (**)(long long *__return_ptr, double *, double *, uint64_t, double))(*(void *)&v14 + 160))(&v42, &v62, v63, ObjectType, COERCE_DOUBLE(*(void *)&v14));
  if (v43)
  {
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(void *)uint64_t v19 = v11;
    *(double *)(v19 + 8) = v9;
    *(unsigned char *)(v19 + 16) = 0;
    return (double *)swift_willThrow();
  }
  else
  {
    double v21 = *(double *)&v42;
    if (v37)
    {
      unint64_t v22 = a7;
      uint64_t v23 = v36;
      if (v11 == 3)
      {
        double v21 = *(double *)&v42 + -1.0;
        char v24 = v10 | (v36 != 0);
      }
      else
      {
        char v24 = 1;
      }
    }
    else
    {
      char v24 = 0;
      double v21 = *((double *)&v42 + 1) + *(double *)&v42;
      unint64_t v22 = a7;
      uint64_t v23 = v36;
    }
    v63[0] = v15;
    v63[1] = v14;
    double v62 = v21;
    long long v25 = a2[5];
    long long v46 = a2[4];
    long long v47 = v25;
    long long v48 = a2[6];
    long long v26 = a2[1];
    long long v42 = *a2;
    long long v43 = v26;
    long long v27 = a2[3];
    long long v44 = a2[2];
    long long v45 = v27;
    uint64_t v49 = v23;
    char v50 = v10;
    char v28 = *((unsigned char *)a2 + 281);
    long long v29 = *(long long *)((char *)a2 + 249);
    long long v60 = *(long long *)((char *)a2 + 265);
    long long v30 = *(long long *)((char *)a2 + 121);
    long long v31 = *(long long *)((char *)a2 + 137);
    long long v32 = *(long long *)((char *)a2 + 169);
    long long v53 = *(long long *)((char *)a2 + 153);
    long long v52 = v31;
    long long v51 = v30;
    long long v33 = *(long long *)((char *)a2 + 185);
    long long v34 = *(long long *)((char *)a2 + 201);
    long long v35 = *(long long *)((char *)a2 + 233);
    long long v57 = *(long long *)((char *)a2 + 217);
    long long v56 = v34;
    long long v55 = v33;
    long long v54 = v32;
    char v61 = v28;
    long long v59 = v29;
    long long v58 = v35;
    unsigned __int8 v41 = v24 & 1;
    unsigned __int8 v40 = v12;
    unsigned __int8 v39 = v13;
    return Calendar._matchingDate(after:matching:direction:matchingPolicy:repeatedTimePolicy:)(&v62, &v42, &v41, &v40, &v39, v22);
  }
}

void Calendar.ComponentSet.highestSetUnit.getter(char *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *a1 = 0;
  }
  else if ((v2 & 2) != 0)
  {
    *a1 = 1;
  }
  else if ((v2 & 0x40000) != 0)
  {
    *a1 = 17;
  }
  else if ((v2 & 0x200) != 0)
  {
    *a1 = 9;
  }
  else if ((v2 & 4) != 0)
  {
    *a1 = 2;
  }
  else if ((v2 & 8) != 0)
  {
    *a1 = 3;
  }
  else if ((v2 & 0x10) != 0)
  {
    *a1 = 4;
  }
  else if ((v2 & 0x20) != 0)
  {
    *a1 = 5;
  }
  else if ((v2 & 0x40) != 0)
  {
    *a1 = 6;
  }
  else if ((v2 & 0x80) != 0)
  {
    *a1 = 7;
  }
  else if ((v2 & 0x100) != 0)
  {
    *a1 = 8;
  }
  else if ((v2 & 0x400) != 0)
  {
    *a1 = 10;
  }
  else if ((v2 & 0x800) != 0)
  {
    *a1 = 11;
  }
  else if ((v2 & 0x1000) != 0)
  {
    *a1 = 12;
  }
  else if ((v2 & 0x2000) != 0)
  {
    *a1 = 13;
  }
  else
  {
    if ((v2 & 0x10000) != 0) {
      char v3 = 16;
    }
    else {
      char v3 = 18;
    }
    *a1 = v3;
  }
}

id Data.init(base64Encoded:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBase64EncodedString_options_, String._bridgeToObjectiveCImpl()(), a3);
  swift_unknownObjectRelease();
  if (!v3) {
    return 0;
  }
  id v4 = specialized Data.init(referencing:)(v3);

  return v4;
}

uint64_t type metadata accessor for ICU.FieldPositer()
{
  return self;
}

char *specialized static ICUByteCountNumberFormatter.create(for:locale:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  void (*v57)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  int64_t v60;
  char *v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  _OWORD v65[9];
  _OWORD v66[2];
  unsigned char v67[144];
  uint64_t v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  _OWORD v78[2];
  _OWORD v79[9];
  _OWORD v80[2];
  unsigned char v81[144];
  long long v82;
  long long v83;
  _OWORD v84[7];
  _OWORD v85[2];
  uint64_t v86;

  unint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  long long v59 = v8;
  uint64_t v9 = v8(ObjectType, v6);
  uint64_t v11 = v10;
  long long v57 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  v57(&v82, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)&v82, (uint64_t)v81, &demangling cache variable for type metadata for LocalePreferences?);
  double v62 = a1;
  *(void *)&int64_t v82 = a1;
  *((void *)&v82 + 1) = a2;
  *(void *)&unint64_t v83 = v9;
  *((void *)&v83 + 1) = v11;
  uint64_t v12 = outlined init with take of LocalePreferences?((uint64_t)v81, (uint64_t)v84, &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    uint64_t v12 = swift_once();
  }
  char v77 = v84[6];
  v78[0] = v85[0];
  *(_OWORD *)((char *)v78 + 12) = *(_OWORD *)((char *)v85 + 12);
  Swift::Int v73 = v84[2];
  uint64_t v74 = v84[3];
  unint64_t v75 = v84[4];
  unint64_t v76 = v84[5];
  unint64_t v69 = v82;
  unint64_t v70 = v83;
  uint64_t v13 = qword_1E8ED1F30;
  uint64_t v55 = static ICUByteCountNumberFormatter.cache;
  int64_t v71 = v84[0];
  Swift::UInt v72 = v84[1];
  MEMORY[0x1F4188790](v12);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 24));
  long long v56 = (uint64_t *)(v13 + 16);
  partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)(v13 + 16, &v68);
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 24));
  swift_release();
  uint64_t v14 = v68;
  if (v68 != 1) {
    goto LABEL_56;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v15 = v59(ObjectType, v6);
  v57(v79, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v79, (uint64_t)v67, &demangling cache variable for type metadata for LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v67, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  type metadata accessor for ICUByteCountNumberFormatter();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 24) = v62;
  *(void *)(v16 + 32) = a2;
  swift_bridgeObjectRetain();
  double v17 = specialized _copyCollectionToContiguousArray<A>(_:)(v62, a2);
  uint64_t v18 = swift_bridgeObjectRelease();
  LODWORD(v65[0]) = 0;
  if (v17[2] >> 31)
  {
    __break(1u);
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v19 = unumf_openForSkeletonAndLocale();
    swift_release();
    swift_release();
    uint64_t v20 = (os_unfair_lock_s *)(v13 + 24);
    if (v19)
    {
      *(void *)(v16 + 16) = v19;
    }
    else
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ICUNumberFormatterBase();
      swift_deallocPartialClassInstance();
      uint64_t v16 = 0;
    }
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v13 + 24));
    if (v55 >= *(void *)(*(void *)(v13 + 16) + 16)) {
      swift_bridgeObjectRetain();
    }
    else {
      *long long v56 = MEMORY[0x1E4FBC868];
    }
    v79[8] = v77;
    v80[0] = v78[0];
    *(_OWORD *)((char *)v80 + 12) = *(_OWORD *)((char *)v78 + 12);
    v79[4] = v73;
    v79[5] = v74;
    v79[6] = v75;
    v79[7] = v76;
    v79[0] = v69;
    v79[1] = v70;
    v79[2] = v71;
    v79[3] = v72;
    uint64_t v5 = v16;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v64 = *v56;
    uint64_t v15 = *v56;
    *long long v56 = 0x8000000000000000;
    uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v79);
    uint64_t v23 = *(void *)(v15 + 16);
    BOOL v24 = (v22 & 1) == 0;
    BOOL v25 = __OFADD__(v23, v24);
    uint64_t v26 = v23 + v24;
    if (!v25)
    {
      LOBYTE(v16) = v22;
      if (*(void *)(v15 + 24) < v26)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, isUniquelyReferenced_nonNull_native);
        uint64_t v27 = v64;
        uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v79);
        if ((v16 & 1) == (v28 & 1)) {
          goto LABEL_17;
        }
        uint64_t v18 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v27 = v15;
LABEL_17:
        if (v16)
        {
LABEL_18:
          uint64_t v29 = *(void *)(v27 + 56);
          uint64_t v30 = 8 * v18;
          swift_release();
          *(void *)(v29 + v30) = v5;
          uint64_t v14 = v5;
LABEL_55:
          *(void *)(v13 + 16) = v27;
          swift_bridgeObjectRelease();
          os_unfair_lock_unlock(v20);
          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of ICUDateIntervalFormatter??(v68);
LABEL_56:
          swift_release();
          outlined release of ICUByteCountNumberFormatter.Signature((uint64_t)&v82);
          return (char *)v14;
        }
LABEL_54:
        uint64_t v14 = v5;
        specialized _NativeDictionary._insert(at:key:value:)(v18, v79, v5, v27);
        outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)v79);
        goto LABEL_55;
      }
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_21:
  long long v58 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUByteCountNumberFormatter.Signature, ICUByteCountNumberFormatter?>);
  uint64_t v31 = static _DictionaryStorage.copy(original:)();
  uint64_t v27 = v31;
  if (!*(void *)(v15 + 16))
  {
LABEL_53:
    swift_bridgeObjectRelease();
    uint64_t v18 = v58;
    uint64_t v20 = (os_unfair_lock_s *)(v13 + 24);
    if (v16) {
      goto LABEL_18;
    }
    goto LABEL_54;
  }
  uint64_t result = (char *)(v31 + 64);
  char v61 = (char *)(v15 + 64);
  unint64_t v33 = (unint64_t)((1 << *(unsigned char *)(v27 + 32)) + 63) >> 6;
  if (v27 != v15 || result >= &v61[8 * v33]) {
    uint64_t result = (char *)memmove(result, v61, 8 * v33);
  }
  int64_t v34 = 0;
  *(void *)(v27 + 16) = *(void *)(v15 + 16);
  uint64_t v35 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v36 = -1;
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  unint64_t v37 = v36 & *(void *)(v15 + 64);
  long long v60 = (unint64_t)(v35 + 63) >> 6;
  while (1)
  {
    if (v37)
    {
      unint64_t v38 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      int64_t v63 = v34;
      unint64_t v39 = v38 | (v34 << 6);
      goto LABEL_29;
    }
    int64_t v51 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    if (v51 >= v60) {
      goto LABEL_53;
    }
    unint64_t v52 = *(void *)&v61[8 * v51];
    int64_t v53 = v34 + 1;
    if (!v52)
    {
      int64_t v53 = v51 + 1;
      if (v51 + 1 >= v60) {
        goto LABEL_53;
      }
      unint64_t v52 = *(void *)&v61[8 * v53];
      if (!v52)
      {
        int64_t v53 = v51 + 2;
        if (v51 + 2 >= v60) {
          goto LABEL_53;
        }
        unint64_t v52 = *(void *)&v61[8 * v53];
        if (!v52)
        {
          int64_t v53 = v51 + 3;
          if (v51 + 3 >= v60) {
            goto LABEL_53;
          }
          unint64_t v52 = *(void *)&v61[8 * v53];
          if (!v52)
          {
            int64_t v53 = v51 + 4;
            if (v51 + 4 >= v60) {
              goto LABEL_53;
            }
            unint64_t v52 = *(void *)&v61[8 * v53];
            if (!v52)
            {
              int64_t v53 = v51 + 5;
              if (v51 + 5 >= v60) {
                goto LABEL_53;
              }
              unint64_t v52 = *(void *)&v61[8 * v53];
              if (!v52)
              {
                int64_t v53 = v51 + 6;
                if (v51 + 6 >= v60) {
                  goto LABEL_53;
                }
                unint64_t v52 = *(void *)&v61[8 * v53];
                if (!v52) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_52:
    unint64_t v37 = (v52 - 1) & v52;
    int64_t v63 = v53;
    unint64_t v39 = __clz(__rbit64(v52)) + (v53 << 6);
LABEL_29:
    unsigned __int8 v40 = (_OWORD *)(*(void *)(v15 + 48) + 176 * v39);
    long long v41 = v40[3];
    long long v42 = v40[4];
    long long v43 = v40[6];
    v65[5] = v40[5];
    v65[6] = v43;
    uint64_t v65[3] = v41;
    v65[4] = v42;
    long long v44 = v40[7];
    long long v45 = v40[8];
    long long v46 = v40[9];
    *(_OWORD *)((char *)v66 + 12) = *(_OWORD *)((char *)v40 + 156);
    v65[8] = v45;
    v66[0] = v46;
    v65[7] = v44;
    long long v48 = v40[1];
    long long v47 = v40[2];
    v65[0] = *v40;
    v65[1] = v48;
    v65[2] = v47;
    uint64_t v49 = 8 * v39;
    uint64_t v50 = *(void *)(*(void *)(v15 + 56) + 8 * v39);
    memmove((void *)(*(void *)(v27 + 48) + 176 * v39), v40, 0xACuLL);
    *(void *)(*(void *)(v27 + 56) + v49) = v50;
    outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)v65);
    uint64_t result = (char *)swift_retain();
    int64_t v34 = v63;
  }
  int64_t v54 = v51 + 7;
  if (v54 >= v60) {
    goto LABEL_53;
  }
  unint64_t v52 = *(void *)&v61[8 * v54];
  if (v52)
  {
    int64_t v53 = v54;
    goto LABEL_52;
  }
  while (1)
  {
    int64_t v53 = v54 + 1;
    if (__OFADD__(v54, 1)) {
      break;
    }
    if (v53 >= v60) {
      goto LABEL_53;
    }
    unint64_t v52 = *(void *)&v61[8 * v53];
    ++v54;
    if (v52) {
      goto LABEL_52;
    }
  }
LABEL_58:
  __break(1u);
  return result;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(unsigned int a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = v4;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  unsigned __int8 v8 = *(unsigned char *)(v3 + 40);
  *(unsigned char *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  char v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  uint64_t v10 = v13;
  if (v9)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 24) = 0;
    *(void *)(v11 + 32) = 0;
    *(void *)(v11 + 16) = 2;
    *(unsigned char *)(v11 + 40) = -112;
    *(void *)(v11 + 48) = -1;
    swift_release();
    *(void *)(v2 + 32) = v11;
  }
  return v10;
}

uint64_t type metadata completion function for IntegerParseStrategy()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance ByteCountFormatStyle@<X0>(Swift::Int64 *a1@<X0>, Swift::String *a2@<X8>)
{
  Swift::String v4 = ByteCountFormatStyle.format(_:)(*a1);
  uint64_t result = v4._countAndFlagsBits;
  *a2 = v4;
  return result;
}

uint64_t ByteCountFormatStyle.Units.smallestUnit.getter()
{
  uint64_t v1 = *v0;
  if ((unsigned __int16)*v0) {
    BOOL v2 = (unsigned __int16)*v0 == 0xFFFF;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0;
  }
  if (v1) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    int v4 = 4;
  }
  else {
    int v4 = 5;
  }
  if ((~(_BYTE)v1 & 3) != 0) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 3;
  }
  if ((v1 & 2) != 0) {
    return 2;
  }
  else {
    return v5;
  }
}

uint64_t outlined release of ByteCountFormatStyle.Attributed(uint64_t a1)
{
  return a1;
}

uint64_t closure #1 in ByteCountFormatStyle.Attributed._format(_:doubleValue:)(uint64_t a1, uint64_t a2, double a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  uint64_t result = ByteCountFormatStyle.Units.smallestUnit.getter();
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    for (unint64_t i = 0; v7 != i; ++i)
    {
      if (i < 0x40)
      {
        if (((v5 >> i) & 1) == 0) {
          continue;
        }
      }
      else if ((_WORD)v5 && (unsigned __int16)v5 != 0xFFFF)
      {
        continue;
      }
      if (i > 8)
      {
        __break(1u);
        return result;
      }
      uint64_t result = i;
      if ((double)*(uint64_t *)(a2 + 32 + 8 * i) > a3) {
        return result;
      }
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in IntegerFormatStyle<A>()
{
  return swift_getWitnessTable();
}

uint64_t specialized AttributeContainer.subscript.setter(char a1, uint64_t a2, uint64_t (*a3)(void), unint64_t a4, unint64_t a5)
{
  if (a1 == 2)
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    long long v9 = 0u;
    long long v10 = 0u;
  }
  else
  {
    char v7 = a1 & 1;
    *((void *)&v10 + 1) = a2;
    *(void *)&v11[0] = a3();
    LOBYTE(v9) = v7;
    *(_OWORD *)((char *)v11 + 8) = xmmword_182106C90;
    BYTE8(v11[1]) = 1;
    uint64_t v12 = 0;
  }
  return specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v9, a4, a5);
}

uint64_t URLResourceValues.volume.getter@<X0>(void *a1@<X8>)
{
  return URLResourceValues.parentDirectory.getter(MEMORY[0x1E4F1C960], a1);
}

uint64_t URLResourceValues.parentDirectory.getter@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  if (*(void *)(v4 + 16))
  {
    id v5 = *a1;
    uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v7)
    {
      outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v9);
    }
    else
    {
      long long v9 = 0u;
      long long v10 = 0u;
    }
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

uint64_t closure #1 in static _FileManagerImpl._groupAccountNameToNumber(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static _FileManagerImpl._userAccountNameToNumber(_:)(MEMORY[0x1E4F14870], a1);
}

uint64_t closure #1 in static _FileManagerImpl._userAccountNameToNumber(_:)@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  if (result) {
    int v4 = *(_DWORD *)(result + 16);
  }
  else {
    int v4 = 0;
  }
  *(_DWORD *)a2 = v4;
  *(unsigned char *)(a2 + 4) = result == 0;
  return result;
}

uint64_t closure #1 in static _FileManagerImpl._userAccountNameToNumber(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static _FileManagerImpl._userAccountNameToNumber(_:)(MEMORY[0x1E4F14880], a1);
}

unsigned char *storeEnumTagSinglePayload for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 11;
  if (a3 + 11 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xF5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v7 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  switch(v2)
  {
    case 11:
      return v3 == 11;
    case 10:
      return v3 == 10;
    case 9:
      return v3 == 9;
  }
  if ((v3 - 9) < 3) {
    return 0;
  }
  return v2 == v3;
}

uint64_t AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  int64_t v71 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys>);
  uint64_t v62 = *(void *)(v3 - 8);
  uint64_t v63 = v3;
  MEMORY[0x1F4188790](v3);
  unint64_t v68 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys>);
  uint64_t v60 = *(void *)(v5 - 8);
  uint64_t v61 = v5;
  MEMORY[0x1F4188790](v5);
  unint64_t v67 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys>);
  uint64_t v58 = *(void *)(v7 - 8);
  uint64_t v59 = v7;
  MEMORY[0x1F4188790](v7);
  unint64_t v70 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys>);
  uint64_t v56 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v66 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys>);
  uint64_t v54 = *(void *)(v11 - 8);
  uint64_t v55 = v11;
  MEMORY[0x1F4188790](v11);
  unint64_t v69 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys>);
  uint64_t v53 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  unint64_t v65 = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys>);
  uint64_t v51 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  int64_t v64 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys>);
  uint64_t v49 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v16 = (char *)v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys>);
  uint64_t v47 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys>);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = a1[3];
  Swift::UInt v72 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v24);
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.CodingKeys();
  uint64_t v25 = v73;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v25)
  {
    long long v46 = v19;
    v45[1] = v17;
    uint64_t v27 = v69;
    uint64_t v26 = v70;
    uint64_t v73 = v21;
    char v28 = v71;
    uint64_t v29 = v23;
    uint64_t v30 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v30 + 16) == 1)
    {
      char v31 = *(unsigned char *)(v30 + 32);
      switch(v31)
      {
        case 1:
          v75[0] = 1;
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.KbCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          unint64_t v33 = *(void (**)(char *, uint64_t))(v49 + 8);
          int64_t v34 = v16;
          uint64_t v35 = &v77;
          goto LABEL_9;
        case 2:
          v75[1] = 2;
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.MbCodingKeys();
          unsigned __int8 v40 = v64;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          unint64_t v33 = *(void (**)(char *, uint64_t))(v51 + 8);
          int64_t v34 = v40;
          uint64_t v35 = &v76;
          goto LABEL_9;
        case 3:
          v75[2] = 3;
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.GbCodingKeys();
          long long v41 = v65;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          unint64_t v33 = *(void (**)(char *, uint64_t))(v53 + 8);
          int64_t v34 = v41;
          uint64_t v35 = &v78;
          goto LABEL_9;
        case 4:
          v75[3] = 4;
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.TbCodingKeys();
          uint64_t v26 = v27;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v43 = v54;
          uint64_t v42 = v55;
          goto LABEL_16;
        case 5:
          v75[4] = 5;
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.PbCodingKeys();
          uint64_t v26 = v66;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v43 = v56;
          uint64_t v42 = v57;
          goto LABEL_16;
        case 6:
          v75[5] = 6;
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.EbCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v43 = v58;
          uint64_t v42 = v59;
          goto LABEL_16;
        case 7:
          v75[6] = 7;
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ZbCodingKeys();
          uint64_t v26 = v67;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v43 = v60;
          uint64_t v42 = v61;
          goto LABEL_16;
        case 8:
          v75[7] = 8;
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.YbCodingKeys();
          uint64_t v26 = v68;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v43 = v62;
          uint64_t v42 = v63;
LABEL_16:
          unint64_t v33 = *(void (**)(char *, uint64_t))(v43 + 8);
          int64_t v34 = v26;
          break;
        default:
          char v74 = 0;
          lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit.ByteCodingKeys();
          long long v32 = v46;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          unint64_t v33 = *(void (**)(char *, uint64_t))(v47 + 8);
          int64_t v34 = v32;
          uint64_t v35 = (uint64_t *)v75;
LABEL_9:
          uint64_t v42 = *(v35 - 32);
          break;
      }
      v33(v34, v42);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v73 + 8))(v29, v20);
      *char v28 = v31;
    }
    else
    {
      uint64_t v36 = v20;
      uint64_t v37 = type metadata accessor for DecodingError();
      swift_allocError();
      unint64_t v39 = v38;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *unint64_t v39 = &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Unit;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v37 - 8) + 104))(v39, *MEMORY[0x1E4FBBA70], v37);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v73 + 8))(v23, v36);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
}

void AttributeScopes.FoundationAttributes.LocalizedStringArgumentAttributes.LocalizedNumericArgumentAttribute.Value.hash(into:)()
{
  unint64_t v1 = *(void *)v0;
  switch(*(unsigned char *)(v0 + 20))
  {
    case 1:
      Swift::UInt v2 = 1;
      goto LABEL_10;
    case 2:
      Hasher._combine(_:)(2uLL);
      if ((v1 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
        unint64_t v1 = 0;
      }
      break;
    case 3:
      unsigned int v3 = *(_DWORD *)(v0 + 16);
      unint64_t v4 = *(void *)(v0 + 8);
      Hasher._combine(_:)(3uLL);
      NSDecimal.doubleValue.getter(v1, v4, v3);
      if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        unint64_t v1 = v5;
      }
      else {
        unint64_t v1 = 0;
      }
      break;
    default:
      Swift::UInt v2 = 0;
LABEL_10:
      Hasher._combine(_:)(v2);
      break;
  }
  Hasher._combine(_:)(v1);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
  }
  return result;
}

uint64_t DateComponents.mismatchedUnits(comparedTo:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  char v3 = *(unsigned char *)(result + 40);
  if (*(unsigned char *)(v2 + 40))
  {
    if ((*(unsigned char *)(result + 40) & 1) == 0)
    {
LABEL_3:
      uint64_t v4 = 1;
      goto LABEL_8;
    }
  }
  else
  {
    if (*(void *)(v2 + 32) != *(void *)(result + 32)) {
      char v3 = 1;
    }
    if (v3) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = 0;
LABEL_8:
  if (*(unsigned char *)(v2 + 56))
  {
    if (*(unsigned char *)(result + 56)) {
      goto LABEL_16;
    }
LABEL_15:
    v4 |= 2uLL;
    goto LABEL_16;
  }
  if (*(void *)(v2 + 48) == *(void *)(result + 48)) {
    char v5 = *(unsigned char *)(result + 56);
  }
  else {
    char v5 = 1;
  }
  if (v5) {
    goto LABEL_15;
  }
LABEL_16:
  if (*(unsigned char *)(v2 + 216))
  {
    if (*(unsigned char *)(result + 216)) {
      goto LABEL_24;
    }
LABEL_23:
    v4 |= 0x200uLL;
    goto LABEL_24;
  }
  if (*(void *)(v2 + 208) == *(void *)(result + 208)) {
    char v6 = *(unsigned char *)(result + 216);
  }
  else {
    char v6 = 1;
  }
  if (v6) {
    goto LABEL_23;
  }
LABEL_24:
  if (*(unsigned char *)(v2 + 72))
  {
    if (*(unsigned char *)(result + 72)) {
      goto LABEL_32;
    }
LABEL_31:
    v4 |= 4uLL;
    goto LABEL_32;
  }
  if (*(void *)(v2 + 64) == *(void *)(result + 64)) {
    char v7 = *(unsigned char *)(result + 72);
  }
  else {
    char v7 = 1;
  }
  if (v7) {
    goto LABEL_31;
  }
LABEL_32:
  if (*(unsigned char *)(v2 + 88))
  {
    if (*(unsigned char *)(result + 88)) {
      goto LABEL_40;
    }
LABEL_39:
    v4 |= 8uLL;
    goto LABEL_40;
  }
  if (*(void *)(v2 + 80) == *(void *)(result + 80)) {
    char v8 = *(unsigned char *)(result + 88);
  }
  else {
    char v8 = 1;
  }
  if (v8) {
    goto LABEL_39;
  }
LABEL_40:
  if (*(unsigned char *)(v2 + 120))
  {
    if (*(unsigned char *)(result + 120)) {
      goto LABEL_48;
    }
LABEL_47:
    v4 |= 0x10uLL;
    goto LABEL_48;
  }
  if (*(void *)(v2 + 112) == *(void *)(result + 112)) {
    char v9 = *(unsigned char *)(result + 120);
  }
  else {
    char v9 = 1;
  }
  if (v9) {
    goto LABEL_47;
  }
LABEL_48:
  if (*(unsigned char *)(v2 + 136))
  {
    if (*(unsigned char *)(result + 136)) {
      goto LABEL_56;
    }
LABEL_55:
    v4 |= 0x20uLL;
    goto LABEL_56;
  }
  if (*(void *)(v2 + 128) == *(void *)(result + 128)) {
    char v10 = *(unsigned char *)(result + 136);
  }
  else {
    char v10 = 1;
  }
  if (v10) {
    goto LABEL_55;
  }
LABEL_56:
  if (*(unsigned char *)(v2 + 152))
  {
    if (*(unsigned char *)(result + 152)) {
      goto LABEL_64;
    }
LABEL_63:
    v4 |= 0x40uLL;
    goto LABEL_64;
  }
  if (*(void *)(v2 + 144) == *(void *)(result + 144)) {
    char v11 = *(unsigned char *)(result + 152);
  }
  else {
    char v11 = 1;
  }
  if (v11) {
    goto LABEL_63;
  }
LABEL_64:
  if (*(unsigned char *)(v2 + 184))
  {
    if (*(unsigned char *)(result + 184)) {
      goto LABEL_72;
    }
LABEL_71:
    v4 |= 0x80uLL;
    goto LABEL_72;
  }
  if (*(void *)(v2 + 176) == *(void *)(result + 176)) {
    char v12 = *(unsigned char *)(result + 184);
  }
  else {
    char v12 = 1;
  }
  if (v12) {
    goto LABEL_71;
  }
LABEL_72:
  if (*(unsigned char *)(v2 + 200))
  {
    if (*(unsigned char *)(result + 200)) {
      goto LABEL_80;
    }
LABEL_79:
    v4 |= 0x100uLL;
    goto LABEL_80;
  }
  if (*(void *)(v2 + 192) == *(void *)(result + 192)) {
    char v13 = *(unsigned char *)(result + 200);
  }
  else {
    char v13 = 1;
  }
  if (v13) {
    goto LABEL_79;
  }
LABEL_80:
  if (*(unsigned char *)(v2 + 248))
  {
    if (*(unsigned char *)(result + 248)) {
      goto LABEL_88;
    }
LABEL_87:
    v4 |= 0x400uLL;
    goto LABEL_88;
  }
  if (*(void *)(v2 + 240) == *(void *)(result + 240)) {
    char v14 = *(unsigned char *)(result + 248);
  }
  else {
    char v14 = 1;
  }
  if (v14) {
    goto LABEL_87;
  }
LABEL_88:
  if (*(unsigned char *)(v2 + 264))
  {
    if (*(unsigned char *)(result + 264)) {
      goto LABEL_96;
    }
LABEL_95:
    v4 |= 0x800uLL;
    goto LABEL_96;
  }
  if (*(void *)(v2 + 256) == *(void *)(result + 256)) {
    char v15 = *(unsigned char *)(result + 264);
  }
  else {
    char v15 = 1;
  }
  if (v15) {
    goto LABEL_95;
  }
LABEL_96:
  if (*(unsigned char *)(v2 + 280))
  {
    if (*(unsigned char *)(result + 280)) {
      goto LABEL_104;
    }
LABEL_103:
    v4 |= 0x1000uLL;
    goto LABEL_104;
  }
  if (*(void *)(v2 + 272) == *(void *)(result + 272)) {
    char v16 = *(unsigned char *)(result + 280);
  }
  else {
    char v16 = 1;
  }
  if (v16) {
    goto LABEL_103;
  }
LABEL_104:
  int v17 = *(unsigned __int8 *)(v2 + 281);
  if (*(unsigned char *)(v2 + 168))
  {
    if (*(unsigned char *)(result + 168)) {
      goto LABEL_112;
    }
LABEL_111:
    v4 |= 0x2000uLL;
    goto LABEL_112;
  }
  if (*(void *)(v2 + 160) == *(void *)(result + 160)) {
    char v18 = *(unsigned char *)(result + 168);
  }
  else {
    char v18 = 1;
  }
  if (v18) {
    goto LABEL_111;
  }
LABEL_112:
  int v19 = *(unsigned __int8 *)(result + 281);
  if (v17 == 2)
  {
    if (v19 == 2) {
      goto LABEL_117;
    }
  }
  else if (v19 != 2 && ((((v19 & 1) == 0) ^ v17) & 1) != 0)
  {
LABEL_117:
    char v20 = *(unsigned char *)(result + 104);
    if (*(unsigned char *)(v2 + 104)) {
      goto LABEL_118;
    }
    goto LABEL_121;
  }
  v4 |= 0x10000uLL;
  char v20 = *(unsigned char *)(result + 104);
  if (*(unsigned char *)(v2 + 104))
  {
LABEL_118:
    if (v20) {
      goto LABEL_125;
    }
    goto LABEL_124;
  }
LABEL_121:
  if (*(void *)(v2 + 96) != *(void *)(result + 96)) {
    char v20 = 1;
  }
  if (v20) {
LABEL_124:
  }
    v4 |= 0x40000uLL;
LABEL_125:
  *a2 = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TermOfAddress.CodingKeys()
{
  uint64_t result = 0x6441664F6D726574;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x65676175676E616CLL;
      break;
    case 2:
      uint64_t result = 0x736E756F6E6F7270;
      break;
    case 3:
      uint64_t result = 1919251317;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t _CalendarICU.dateComponents(_:from:in:)(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t v7 = *a3;
  uint64_t v6 = a3[1];
  long long v17 = *(_OWORD *)(v3 + 40);
  v16[0] = v7;
  v16[1] = v6;
  uint64_t v8 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v17, (uint64_t)v16);
  if (v8)
  {
    char v9 = *(os_unfair_lock_s **)(v3 + 16);
    MEMORY[0x1F4188790](v8);
    MEMORY[0x1F4188790](v10);
    swift_retain();
    os_unfair_lock_lock(v9 + 4);
    closure #1 in LockedState<A>.withLock<A>(_:)specialized partial apply();
    os_unfair_lock_unlock(v9 + 4);
    return swift_release();
  }
  else
  {
    char v12 = *(os_unfair_lock_s **)(v3 + 16);
    MEMORY[0x1F4188790](v8);
    MEMORY[0x1F4188790](v13);
    swift_unknownObjectRetain();
    swift_retain();
    os_unfair_lock_lock(v12 + 4);
    partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)(&v17);
    os_unfair_lock_unlock(v12 + 4);
    swift_unknownObjectRelease();
    swift_release();
    uint64_t v14 = *((void *)&v17 + 1);
    uint64_t ObjectType = swift_getObjectType();
    *(void *)&long long v17 = v4;
    v16[0] = v5;
    (*(void (**)(long long *, void *, uint64_t, uint64_t))(v14 + 192))(&v17, v16, ObjectType, v14);
    return swift_unknownObjectRelease();
  }
}

uint64_t static FormatStyle<>.byteCount(style:allowedUnits:spellsOutZero:includesActualByteCount:)@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v8 = *a1;
  uint64_t v9 = *a2;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v10 = static LocaleCache.cache + 16;
  char v11 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v10, &v14);
  os_unfair_lock_unlock(v11);
  swift_release_n();
  uint64_t v12 = v14;
  uint64_t result = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  *(unsigned char *)a5 = v8;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = a3 & 1;
  *(unsigned char *)(a5 + 17) = a4 & 1;
  *(void *)(a5 + 24) = v12;
  *(void *)(a5 + 32) = result;
  return result;
}

{
  char v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  char v8 = *a1;
  uint64_t v9 = *a2;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v10 = static LocaleCache.cache + 16;
  char v11 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v10, &v14);
  os_unfair_lock_unlock(v11);
  swift_release_n();
  uint64_t v12 = v14;
  uint64_t result = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  *(unsigned char *)a5 = v8;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = a3 & 1;
  *(unsigned char *)(a5 + 17) = a4 & 1;
  *(void *)(a5 + 24) = v12;
  *(void *)(a5 + 32) = result;
  return result;
}

uint64_t protocol witness for _LocaleProtocol.groupingSeparator.getter in conformance _LocaleICU()
{
  unint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.groupingSeparator.getter(&v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t partial apply for closure #1 in _LocaleICU.groupingSeparator.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _LocaleICU.decimalSeparator.getter(v1, a1);
}

void sub_181A8ADDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id obj)
{
}

void type metadata accessor for NSRunLoopMode(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for NSFastEnumerationState(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NSFastEnumerationState(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for NSFastEnumerationState(uint64_t a1)
{
}

void type metadata accessor for UATimeUnitStyle(uint64_t a1)
{
}

void type metadata accessor for NSNotificationName(uint64_t a1)
{
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DIR(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 136)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DIR(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 136) = v3;
  return result;
}

void type metadata accessor for DIR(uint64_t a1)
{
}

void type metadata accessor for NSStringCompareOptions(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for BPlistTrailer(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BPlistTrailer(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for NSSearchPathDomainMask(uint64_t a1)
{
}

void type metadata accessor for NSSearchPathDirectory(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueChange(uint64_t a1)
{
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for os_unfair_recursive_lock_s(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for os_unfair_recursive_lock_s(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

void type metadata accessor for os_unfair_recursive_lock_s(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueObservingOptions(uint64_t a1)
{
}

void type metadata accessor for NSInlinePresentationIntent(uint64_t a1)
{
}

void type metadata accessor for NSCalendarUnit(uint64_t a1)
{
}

void type metadata accessor for NSURLFileProtectionType(uint64_t a1)
{
}

void type metadata accessor for NSURLUbiquitousSharedItemPermissions(uint64_t a1)
{
}

void type metadata accessor for NSURLUbiquitousSharedItemRole(uint64_t a1)
{
}

void type metadata accessor for NSURLUbiquitousItemDownloadingStatus(uint64_t a1)
{
}

void type metadata accessor for NSURLFileResourceType(uint64_t a1)
{
}

void type metadata accessor for NSLinguisticTag(uint64_t a1)
{
}

void type metadata accessor for SecTrustRef(uint64_t a1)
{
}

void type metadata accessor for NSURLRequestNetworkServiceType(uint64_t a1)
{
}

void type metadata accessor for NSComparisonResult(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for NSDecimal(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NSDecimal(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 20) = v3;
  return result;
}

void type metadata accessor for iovec(uint64_t a1)
{
}

void type metadata accessor for NSPropertyListFormat(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for CGAffineTransform(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CGAffineTransform(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

void type metadata accessor for CGVector(uint64_t a1)
{
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance String._BlockSearchingOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance String._BlockSearchingOptions(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

BOOL specialized OptionSet<>.insert(_:)(void *a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = v3 & a2;
    if ((v3 & a2) != 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v4 = (unsigned __int16)a2;
  if (!(_WORD)a2) {
LABEL_3:
  }
    uint64_t v4 = 0xFFFFLL;
LABEL_4:
  if (v4 != a2)
  {
    uint64_t v5 = v3 | a2;
    if (!v5) {
      uint64_t v5 = 0xFFFFLL;
    }
    *long long v2 = v5;
  }
  *a1 = a2;
  return v4 != a2;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance String._BlockSearchingOptions(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance String._BlockSearchingOptions(void *result)
{
  *v1 &= *result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance String._BlockSearchingOptions(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance String._BlockSearchingOptions(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

uint64_t specialized SetAlgebra.init<A>(_:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v7 - v2;
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v4 = 0;
  if ((v8 & 1) == 0)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v5 = 0;
      }
      v4 |= v5;
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v8 != 1);
  }
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v4;
}

uint64_t specialized SetAlgebra.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(unsigned char *)(v5 + 24) = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  char v15 = a2;
  for (uint64_t i = 0; i != v6; ++i)
  {
    uint64_t v12 = *(void *)(a1 + 8 * i + 32);
    if ((*(unsigned char *)(v5 + 24) & 1) == 0)
    {
      char v8 = *(void **)(v5 + 16);
LABEL_4:
      id v9 = v8;
      objc_msgSend(v9, sel_mutableCopy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMutableIndexSet();
      swift_dynamicCast();
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = v16;
      *(unsigned char *)(v10 + 24) = 1;
      id v11 = v16;
      swift_release();
      objc_msgSend(v11, sel_addIndex_, v12);

      uint64_t v5 = v10;
      continue;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v8 = *(void **)(v5 + 16);
    if ((*(unsigned char *)(v5 + 24) & 1) == 0 || (isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_4;
    }
    objc_msgSend(v8, sel_addIndex_, v12);
  }
  uint64_t result = swift_bridgeObjectRelease();
  a2 = v15;
LABEL_13:
  *a2 = v5;
  return result;
}

uint64_t specialized SetAlgebra.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  id v4 = (char *)&v15 - v3;
  id v5 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(unsigned char *)(v6 + 24) = 0;
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  long long v17 = a1;
  if ((v20 & 1) == 0)
  {
    uint64_t v15 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      uint64_t v9 = v19;
      if ((*(unsigned char *)(v6 + 24) & 1) == 0) {
        break;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      id v11 = *(void **)(v6 + 16);
      if (*(unsigned char *)(v6 + 24))
      {
        if (!isUniquelyReferenced_nonNull_native)
        {
          id v12 = v11;
          objc_msgSend(v12, sel_mutableCopy);
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          type metadata accessor for NSMutableIndexSet();
          goto LABEL_13;
        }
        objc_msgSend(v11, sel_addIndex_, v9);
        dispatch thunk of IteratorProtocol.next()();
        if (v20) {
          goto LABEL_2;
        }
      }
      else
      {
LABEL_11:
        id v12 = v11;
        objc_msgSend(v12, sel_mutableCopy, v15);
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        type metadata accessor for NSMutableIndexSet();
LABEL_13:
        swift_dynamicCast();
        uint64_t v13 = v18;
        uint64_t v7 = swift_allocObject();
        *(void *)(v7 + 16) = v13;
        *(unsigned char *)(v7 + 24) = 1;
        id v14 = v13;
        swift_release();
        objc_msgSend(v14, sel_addIndex_, v9);

        dispatch thunk of IteratorProtocol.next()();
        uint64_t v6 = v7;
        if (v20 == 1) {
          goto LABEL_3;
        }
      }
    }
    id v11 = *(void **)(v6 + 16);
    goto LABEL_11;
  }
LABEL_2:
  uint64_t v7 = v6;
LABEL_3:
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v4, AssociatedTypeWitness);
  *long long v17 = v7;
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  id v5 = (char *)&v8 - v4;
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((v9 & 1) == 0)
  {
    uint64_t v6 = 0xFFFFLL;
    while (1)
    {
      if ((v8 & v6) != 0)
      {
        if ((v8 & v6) != v8) {
          goto LABEL_9;
        }
LABEL_6:
        dispatch thunk of IteratorProtocol.next()();
        if (v9 == 1) {
          goto LABEL_3;
        }
      }
      else
      {
        if (v8 == 0xFFFF) {
          goto LABEL_6;
        }
LABEL_9:
        v6 |= v8;
        dispatch thunk of IteratorProtocol.next()();
        if (v9) {
          goto LABEL_3;
        }
      }
    }
  }
  uint64_t v6 = 0xFFFFLL;
LABEL_3:
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  *a1 = v6;
  return result;
}

void *specialized SetAlgebra.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = CFCharacterSetCreateMutable(0);
  if (result)
  {
    id v5 = result;
    char v20 = a2;
    type metadata accessor for __CharacterSetStorage();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    *(unsigned char *)(v6 + 24) = 1;
    uint64_t v7 = *(void *)(a1 + 16);
    if (!v7)
    {
LABEL_14:
      uint64_t result = (void *)swift_bridgeObjectRelease();
      *char v20 = v6;
      return result;
    }
    char v8 = (unsigned int *)(a1 + 32);
    while (1)
    {
      while (1)
      {
        unsigned int v10 = *v8++;
        CFIndex v9 = v10;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          char v11 = *(unsigned char *)(v6 + 24);
          CFCharacterSetRef v12 = (const __CFCharacterSet *)*(id *)(v6 + 16);
          uint64_t result = CFCharacterSetCreateMutableCopy(0, v12);
          uint64_t v13 = result;
          if (v11)
          {
            if (!result) {
              goto LABEL_16;
            }
          }
          else if (!result)
          {
            goto LABEL_17;
          }

          uint64_t v14 = swift_allocObject();
          *(void *)(v14 + 16) = v13;
          *(unsigned char *)(v14 + 24) = 1;
          swift_release();
          uint64_t v6 = v14;
        }
        uint64_t v15 = *(__CFCharacterSet **)(v6 + 16);
        if ((*(unsigned char *)(v6 + 24) & 1) == 0) {
          break;
        }
        v21.Swift::Int location = v9;
        v21.length = 1;
        CFCharacterSetAddCharactersInRange(v15, v21);
        if (!--v7) {
          goto LABEL_14;
        }
      }
      CFCharacterSetRef v16 = v15;
      uint64_t result = CFCharacterSetCreateMutableCopy(0, v16);
      if (!result) {
        break;
      }
      long long v17 = result;
      char v18 = result;
      v22.Swift::Int location = v9;
      v22.length = 1;
      CFCharacterSetAddCharactersInRange(v18, v22);

      uint64_t v19 = *(void **)(v6 + 16);
      *(void *)(v6 + 16) = v17;
      *(unsigned char *)(v6 + 24) = 1;

      if (!--v7) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  __break(1u);
  return result;
}

CFMutableCharacterSetRef specialized SetAlgebra.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v17 - v2;
  CFMutableCharacterSetRef result = CFCharacterSetCreateMutable(0);
  if (result)
  {
    CFMutableCharacterSetRef v5 = result;
    type metadata accessor for __CharacterSetStorage();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    *(unsigned char *)(v6 + 24) = 1;
    dispatch thunk of Sequence.makeIterator()();
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      while (1)
      {
        dispatch thunk of IteratorProtocol.next()();
        if (v21)
        {
          CFMutableCharacterSetRef result = (CFMutableCharacterSetRef)(*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v3, AssociatedTypeWitness);
          *uint64_t v19 = v6;
          return result;
        }
        CFIndex v7 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          char v8 = *(unsigned char *)(v6 + 24);
          CFCharacterSetRef v9 = (const __CFCharacterSet *)*(id *)(v6 + 16);
          CFMutableCharacterSetRef result = CFCharacterSetCreateMutableCopy(0, v9);
          CFMutableCharacterSetRef v10 = result;
          if (v8)
          {
            if (!result) {
              goto LABEL_16;
            }
          }
          else if (!result)
          {
            goto LABEL_17;
          }

          uint64_t v11 = swift_allocObject();
          *(void *)(v11 + 16) = v10;
          *(unsigned char *)(v11 + 24) = 1;
          swift_release();
          uint64_t v6 = v11;
        }
        CFCharacterSetRef v12 = *(__CFCharacterSet **)(v6 + 16);
        if ((*(unsigned char *)(v6 + 24) & 1) == 0) {
          break;
        }
        v22.Swift::Int location = v7;
        v22.length = 1;
        CFCharacterSetAddCharactersInRange(v12, v22);
      }
      CFCharacterSetRef v13 = v12;
      CFMutableCharacterSetRef result = CFCharacterSetCreateMutableCopy(0, v13);
      if (!result) {
        break;
      }
      CFMutableCharacterSetRef v14 = result;
      uint64_t v15 = result;
      v23.Swift::Int location = v7;
      v23.length = 1;
      CFCharacterSetAddCharactersInRange(v15, v23);

      CFCharacterSetRef v16 = *(void **)(v6 + 16);
      *(void *)(v6 + 16) = v14;
      *(unsigned char *)(v6 + 24) = 1;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    CFMutableCharacterSetRef v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    uint64_t v5 = 0xFFFFLL;
    while (1)
    {
      uint64_t v7 = *v4++;
      uint64_t v6 = v7;
      uint64_t v8 = v7 & v5;
      if ((v7 & v5) != 0)
      {
        if (v8 == v6) {
          goto LABEL_4;
        }
      }
      else if (v6 == 0xFFFF)
      {
        goto LABEL_4;
      }
      v5 |= v6;
LABEL_4:
      if (!--v3) {
        goto LABEL_11;
      }
    }
  }
  uint64_t v5 = 0xFFFFLL;
LABEL_11:
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t one-time initialization function for lineSeparators()
{
  if (one-time initialization token for paragraphSeparators != -1) {
    swift_once();
  }
  p_inst_meths = &OBJC_PROTOCOL___NSFileAccessArbiterXPCInterface.inst_meths;
  uint64_t v2 = (void *)static String.paragraphSeparators;
  int64_t v3 = *(void *)(static String.paragraphSeparators + 16);
  int64_t v4 = v3 + 2;
  if (__OFADD__(v3, 2))
  {
    __break(1u);
LABEL_14:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)((unint64_t)p_inst_meths > 1), v0, 1, v2);
    uint64_t v2 = (void *)result;
    p_inst_meths = *(__objc2_meth_list ***)(result + 24);
    unint64_t v7 = (unint64_t)p_inst_meths >> 1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = (void *)result;
  if (!result
    || (p_inst_meths = (__objc2_meth_list **)v2[3],
        unint64_t v7 = (unint64_t)p_inst_meths >> 1,
        (uint64_t)((unint64_t)p_inst_meths >> 1) < v4))
  {
    if (v3 <= v4) {
      v3 += 2;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v6, v3, 1, v2);
    uint64_t result = swift_bridgeObjectRelease();
    p_inst_meths = (__objc2_meth_list **)v8[3];
    unint64_t v7 = (unint64_t)p_inst_meths >> 1;
    uint64_t v2 = v8;
  }
  int64_t v3 = v2[2];
  int64_t v0 = v3 + 1;
  if (v7 <= v3) {
    goto LABEL_14;
  }
LABEL_10:
  v2[2] = v0;
  v2[v3 + 4] = &outlined read-only object #0 of one-time initialization function for lineSeparators;
  int64_t v9 = v3 + 2;
  if ((uint64_t)v7 < v9)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)((unint64_t)p_inst_meths > 1), v9, 1, v2);
    uint64_t v2 = (void *)result;
  }
  v2[2] = v9;
  v2[v0 + 4] = &outlined read-only object #1 of one-time initialization function for lineSeparators;
  static String.lineSeparators = (uint64_t)v2;
  return result;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance NSCalendarUnit@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance UErrorCode@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UErrorCode(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UBlockCode(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSFileAttributeKey@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v3 = String._bridgeToObjectiveCImpl()();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void *protocol witness for SetAlgebra.union(_:) in conformance NSCalendarUnit@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSCalendarUnit@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance NSCalendarUnit@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance NSCalendarUnit@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSCalendarUnit(void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance NSCalendarUnit@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance NSCalendarUnit(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance NSCalendarUnit()
{
  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance NSCalendarUnit@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized SetAlgebra.init<A>(_:)();
  *a1 = result;
  return result;
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance NSCalendarUnit(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFDictionaryRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFDictionaryRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFDictionaryRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFDictionaryRef();
}

{
  Hasher.init(_seed:)();
  swift_getWitnessTable();
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFDictionaryRef()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t base witness table accessor for Equatable in CFDictionaryRef()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance NSCalendarUnit@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSFileProtectionType(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSFileProtectionType and conformance NSFileProtectionType, type metadata accessor for NSFileProtectionType);
  uint64_t v3 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSFileProtectionType and conformance NSFileProtectionType, type metadata accessor for NSFileProtectionType);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

id protocol witness for RawRepresentable.rawValue.getter in conformance NSLocaleKey@<X0>(void *a1@<X8>)
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSCalendarUnit@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSFileAttributeKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey);
  uint64_t v3 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSRunLoopMode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, type metadata accessor for NSRunLoopMode);
  uint64_t v3 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, type metadata accessor for NSRunLoopMode);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
  uint64_t v3 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  uint64_t v3 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSNotificationName(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
  uint64_t v3 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSLinguisticTag(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSLinguisticTag and conformance NSLinguisticTag, type metadata accessor for NSLinguisticTag);
  uint64_t v3 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSLinguisticTag and conformance NSLinguisticTag, type metadata accessor for NSLinguisticTag);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t base witness table accessor for RawRepresentable in NSLinguisticTag()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSLinguisticTag and conformance NSLinguisticTag, type metadata accessor for NSLinguisticTag);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSLinguisticTag()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSLinguisticTag and conformance NSLinguisticTag, type metadata accessor for NSLinguisticTag);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLFileResourceType(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileResourceType and conformance NSURLFileResourceType, type metadata accessor for NSURLFileResourceType);
  uint64_t v3 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileResourceType and conformance NSURLFileResourceType, type metadata accessor for NSURLFileResourceType);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLUbiquitousItemDownloadingStatus(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousItemDownloadingStatus and conformance NSURLUbiquitousItemDownloadingStatus, type metadata accessor for NSURLUbiquitousItemDownloadingStatus);
  uint64_t v3 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousItemDownloadingStatus and conformance NSURLUbiquitousItemDownloadingStatus, type metadata accessor for NSURLUbiquitousItemDownloadingStatus);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLUbiquitousSharedItemRole(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemRole and conformance NSURLUbiquitousSharedItemRole, type metadata accessor for NSURLUbiquitousSharedItemRole);
  uint64_t v3 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemRole and conformance NSURLUbiquitousSharedItemRole, type metadata accessor for NSURLUbiquitousSharedItemRole);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLUbiquitousSharedItemPermissions(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemPermissions and conformance NSURLUbiquitousSharedItemPermissions, type metadata accessor for NSURLUbiquitousSharedItemPermissions);
  uint64_t v3 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemPermissions and conformance NSURLUbiquitousSharedItemPermissions, type metadata accessor for NSURLUbiquitousSharedItemPermissions);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NSNotificationName@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = String._bridgeToObjectiveCImpl()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLFileProtectionType(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileProtectionType and conformance NSURLFileProtectionType, type metadata accessor for NSURLFileProtectionType);
  uint64_t v3 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileProtectionType and conformance NSURLFileProtectionType, type metadata accessor for NSURLFileProtectionType);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFDictionaryRef();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NSFileAttributeKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  uint64_t v1 = String.hashValue.getter();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSFileAttributeKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t base witness table accessor for RawRepresentable in NSURLFileResourceType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileResourceType and conformance NSURLFileResourceType, type metadata accessor for NSURLFileResourceType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLFileResourceType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileResourceType and conformance NSURLFileResourceType, type metadata accessor for NSURLFileResourceType);
}

uint64_t base witness table accessor for Equatable in NSURLFileResourceType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileResourceType and conformance NSURLFileResourceType, type metadata accessor for NSURLFileResourceType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLUbiquitousItemDownloadingStatus()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousItemDownloadingStatus and conformance NSURLUbiquitousItemDownloadingStatus, type metadata accessor for NSURLUbiquitousItemDownloadingStatus);
}

uint64_t base witness table accessor for Equatable in NSURLUbiquitousItemDownloadingStatus()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousItemDownloadingStatus and conformance NSURLUbiquitousItemDownloadingStatus, type metadata accessor for NSURLUbiquitousItemDownloadingStatus);
}

uint64_t base witness table accessor for RawRepresentable in NSURLUbiquitousSharedItemRole()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemRole and conformance NSURLUbiquitousSharedItemRole, type metadata accessor for NSURLUbiquitousSharedItemRole);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLUbiquitousSharedItemRole()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemRole and conformance NSURLUbiquitousSharedItemRole, type metadata accessor for NSURLUbiquitousSharedItemRole);
}

uint64_t base witness table accessor for Equatable in NSURLUbiquitousSharedItemRole()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemRole and conformance NSURLUbiquitousSharedItemRole, type metadata accessor for NSURLUbiquitousSharedItemRole);
}

uint64_t base witness table accessor for RawRepresentable in NSURLUbiquitousSharedItemPermissions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemPermissions and conformance NSURLUbiquitousSharedItemPermissions, type metadata accessor for NSURLUbiquitousSharedItemPermissions);
}

uint64_t base witness table accessor for Equatable in NSURLUbiquitousSharedItemPermissions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLUbiquitousSharedItemPermissions and conformance NSURLUbiquitousSharedItemPermissions, type metadata accessor for NSURLUbiquitousSharedItemPermissions);
}

uint64_t base witness table accessor for RawRepresentable in NSURLFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileProtectionType and conformance NSURLFileProtectionType, type metadata accessor for NSURLFileProtectionType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileProtectionType and conformance NSURLFileProtectionType, type metadata accessor for NSURLFileProtectionType);
}

uint64_t base witness table accessor for Equatable in NSURLFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSURLFileProtectionType and conformance NSURLFileProtectionType, type metadata accessor for NSURLFileProtectionType);
}

uint64_t base witness table accessor for RawRepresentable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
}

uint64_t base witness table accessor for Equatable in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, type metadata accessor for NSCalendarUnit);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, type metadata accessor for NSCalendarUnit);
}

uint64_t base witness table accessor for RawRepresentable in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, type metadata accessor for NSCalendarUnit);
}

uint64_t base witness table accessor for SetAlgebra in NSCalendarUnit()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, type metadata accessor for NSCalendarUnit);
}

uint64_t base witness table accessor for Equatable in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, type metadata accessor for NSInlinePresentationIntent);
}

{
  return lazy protocol witness table accessor for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, type metadata accessor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for RawRepresentable in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, type metadata accessor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for SetAlgebra in NSInlinePresentationIntent()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent, type metadata accessor for NSInlinePresentationIntent);
}

uint64_t base witness table accessor for Equatable in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions, type metadata accessor for NSKeyValueObservingOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions, type metadata accessor for NSKeyValueObservingOptions);
}

uint64_t base witness table accessor for RawRepresentable in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions, type metadata accessor for NSKeyValueObservingOptions);
}

uint64_t base witness table accessor for SetAlgebra in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions, type metadata accessor for NSKeyValueObservingOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in NSSearchPathDomainMask()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSSearchPathDomainMask and conformance NSSearchPathDomainMask, type metadata accessor for NSSearchPathDomainMask);
}

uint64_t base witness table accessor for RawRepresentable in NSSearchPathDomainMask()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSSearchPathDomainMask and conformance NSSearchPathDomainMask, type metadata accessor for NSSearchPathDomainMask);
}

uint64_t base witness table accessor for SetAlgebra in NSSearchPathDomainMask()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSSearchPathDomainMask and conformance NSSearchPathDomainMask, type metadata accessor for NSSearchPathDomainMask);
}

uint64_t base witness table accessor for RawRepresentable in NSStringCompareOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSStringCompareOptions and conformance NSStringCompareOptions, type metadata accessor for NSStringCompareOptions);
}

uint64_t base witness table accessor for SetAlgebra in NSStringCompareOptions()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSStringCompareOptions and conformance NSStringCompareOptions, type metadata accessor for NSStringCompareOptions);
}

uint64_t base witness table accessor for RawRepresentable in NSNotificationName()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
}

uint64_t base witness table accessor for Equatable in NSNotificationName()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, type metadata accessor for NSNotificationName);
}

uint64_t base witness table accessor for RawRepresentable in NSRunLoopMode()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSRunLoopMode and conformance NSRunLoopMode, type metadata accessor for NSRunLoopMode);
}

uint64_t base witness table accessor for Hashable in CFDictionaryRef()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

unint64_t type metadata accessor for NSMutableIndexSet()
{
  unint64_t result = lazy cache variable for type metadata for NSMutableIndexSet;
  if (!lazy cache variable for type metadata for NSMutableIndexSet)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMutableIndexSet);
  }
  return result;
}

void type metadata accessor for CFRange(uint64_t a1)
{
}

void type metadata accessor for URelativeDateTimeUnit(uint64_t a1)
{
}

void type metadata accessor for UDateFormatField(uint64_t a1)
{
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for stat(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for stat(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 144) = v3;
  return result;
}

void type metadata accessor for NSURLSessionResponseDisposition(uint64_t a1)
{
}

void type metadata accessor for NSGrammaticalDefiniteness(uint64_t a1)
{
}

void type metadata accessor for UErrorCode(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for _ftsent(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _ftsent(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 112) = v3;
  return result;
}

void type metadata accessor for NSTimeZoneNameStyle(uint64_t a1)
{
}

void type metadata accessor for NSProcessInfoThermalState(uint64_t a1)
{
}

void type metadata accessor for _opaque_pthread_mutex_t(uint64_t a1)
{
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FTS(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FTS(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 72) = v3;
  return result;
}

void type metadata accessor for FTS(uint64_t a1)
{
}

void type metadata accessor for CFMutableCharacterSetRef(uint64_t a1)
{
}

uint64_t type metadata completion function for CFMutableCharacterSetRef(uint64_t a1)
{
  type metadata accessor for CFCharacterSetRef(255);
  *(void *)(a1 + 16) = v2;
  return 0;
}

uint64_t base witness table accessor for RawRepresentable in NSFileAttributeKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSFileAttributeKey()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSFileAttributeKey and conformance NSFileAttributeKey, type metadata accessor for NSFileAttributeKey);
}

uint64_t base witness table accessor for RawRepresentable in NSFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSFileProtectionType and conformance NSFileProtectionType, type metadata accessor for NSFileProtectionType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSFileProtectionType and conformance NSFileProtectionType, type metadata accessor for NSFileProtectionType);
}

uint64_t base witness table accessor for Equatable in NSFileProtectionType()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef(&lazy protocol witness table cache variable for type NSFileProtectionType and conformance NSFileProtectionType, type metadata accessor for NSFileProtectionType);
}

void type metadata accessor for timespec(uint64_t a1)
{
}

void type metadata accessor for UNumberFormatFields(uint64_t a1)
{
}

void type metadata accessor for FTS.__Unnamed_union___Anonymous_field8(uint64_t a1)
{
}

uint64_t PredicateCodableError.description.getter()
{
  outlined init with take of PredicateCodableError(v0, (uint64_t)&v61);
  switch(v65)
  {
    case 1:
      uint64_t v9 = v61;
      CFMutableCharacterSetRef v10 = v62;
      uint64_t v3 = v63;
      long long v4 = v64;
      _StringGuts.grow(_:)(69);
      v11._uint64_t countAndFlagsBits = 0x2720656854;
      v11._unint64_t object = (void *)0xE500000000000000;
      String.append(_:)(v11);
      v12._uint64_t countAndFlagsBits = v9;
      v12._unint64_t object = v10;
      String.append(_:)(v12);
      unint64_t v7 = 0xD00000000000003BLL;
      uint64_t v8 = "' identifier is not in the provided allowlist (required by ";
      goto LABEL_21;
    case 2:
      CFCharacterSetRef v13 = v62;
      int64_t v14 = v62[2];
      uint64_t v15 = MEMORY[0x1E4FBC860];
      if (v14)
      {
        uint64_t v60 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
        uint64_t v16 = 0;
        uint64_t v17 = v60;
        uint64_t v18 = v13 + 4;
        int64_t v57 = v14;
        uint64_t v58 = v13 + 4;
        do
        {
          uint64_t v19 = &v18[2 * v16];
          uint64_t v20 = *v19;
          if (v19[1])
          {
            int64_t v21 = *(void *)(v20 + 16);
            if (v21)
            {
              uint64_t v59 = v17;
              outlined copy of GenericArgument(v20, 1);
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
              uint64_t v22 = v15;
              uint64_t v23 = v20 + 32;
              do
              {
                uint64_t v24 = _typeName(_:qualified:)();
                uint64_t v26 = v25;
                unint64_t v28 = *(void *)(v22 + 16);
                unint64_t v27 = *(void *)(v22 + 24);
                if (v28 >= v27 >> 1) {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
                }
                *(void *)(v22 + 16) = v28 + 1;
                uint64_t v29 = v22 + 16 * v28;
                *(void *)(v29 + 32) = v24;
                *(void *)(v29 + 40) = v26;
                v23 += 8;
                --v21;
              }
              while (v21);
              uint64_t v17 = v59;
              uint64_t v15 = MEMORY[0x1E4FBC860];
              int64_t v14 = v57;
            }
            else
            {
              outlined copy of GenericArgument(v20, 1);
            }
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
            lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
            uint64_t v33 = BidirectionalCollection<>.joined(separator:)();
            uint64_t v35 = v34;
            swift_bridgeObjectRelease();
            v36._uint64_t countAndFlagsBits = v33;
            v36._unint64_t object = v35;
            String.append(_:)(v36);
            swift_bridgeObjectRelease();
            v37._uint64_t countAndFlagsBits = 125;
            v37._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v37);
            outlined consume of GenericArgument(v20, 1);
            unint64_t v32 = 0xE500000000000000;
            uint64_t v30 = 0x7B6B636150;
            uint64_t v18 = v58;
          }
          else
          {
            uint64_t v30 = _typeName(_:qualified:)();
            unint64_t v32 = v31;
          }
          unint64_t v39 = *(void *)(v17 + 16);
          unint64_t v38 = *(void *)(v17 + 24);
          if (v39 >= v38 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
          }
          ++v16;
          *(void *)(v17 + 16) = v39 + 1;
          uint64_t v40 = v17 + 16 * v39;
          *(void *)(v40 + 32) = v30;
          *(void *)(v40 + 40) = v32;
        }
        while (v16 != v14);
      }
      _StringGuts.grow(_:)(53);
      v49._unint64_t object = (void *)0x80000001823A8F00;
      v49._uint64_t countAndFlagsBits = 0xD000000000000013;
      String.append(_:)(v49);
      swift_getKeyPath();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_getAtKeyPath();
      swift_release();
      v50._uint64_t countAndFlagsBits = String.init(cString:)();
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      v51._uint64_t countAndFlagsBits = 0xD000000000000016;
      v51._unint64_t object = (void *)0x80000001823A8F20;
      String.append(_:)(v51);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
      uint64_t v52 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v54 = v53;
      swift_bridgeObjectRelease();
      v55._uint64_t countAndFlagsBits = v52;
      v55._unint64_t object = v54;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v56._uint64_t countAndFlagsBits = 0x64656C696166205DLL;
      v56._unint64_t object = (void *)0xE800000000000000;
      String.append(_:)(v56);
      return 0;
    case 3:
      uint64_t v41 = v61;
      uint64_t v42 = v62;
      uint64_t v3 = v63;
      long long v4 = v64;
      _StringGuts.grow(_:)(86);
      v43._uint64_t countAndFlagsBits = 0x2720656854;
      v43._unint64_t object = (void *)0xE500000000000000;
      String.append(_:)(v43);
      v44._uint64_t countAndFlagsBits = v41;
      v44._unint64_t object = v42;
      String.append(_:)(v44);
      unint64_t v7 = 0xD00000000000004CLL;
      uint64_t v8 = "' type is not allowed because it contains type pack parameters (required by ";
      goto LABEL_21;
    default:
      uint64_t v1 = v61;
      uint64_t v2 = v62;
      uint64_t v3 = v63;
      long long v4 = v64;
      _StringGuts.grow(_:)(63);
      v5._uint64_t countAndFlagsBits = 0x2720656854;
      v5._unint64_t object = (void *)0xE500000000000000;
      String.append(_:)(v5);
      v6._uint64_t countAndFlagsBits = v1;
      v6._unint64_t object = v2;
      String.append(_:)(v6);
      unint64_t v7 = 0xD000000000000035;
      uint64_t v8 = "' type is not in the provided allowlist (required by ";
LABEL_21:
      unint64_t v45 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      String.append(_:)(*(Swift::String *)&v7);
      v46._uint64_t countAndFlagsBits = v3;
      v46._unint64_t object = v4;
      String.append(_:)(v46);
      v47._uint64_t countAndFlagsBits = 41;
      v47._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v47);
      return 0;
  }
}

uint64_t protocol witness for Error._domain.getter in conformance PredicateCodableError()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t protocol witness for Error._code.getter in conformance PredicateCodableError()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance PredicateCodableError()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance PredicateCodableError()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateCodableError()
{
  outlined init with take of PredicateCodableError(v0, (uint64_t)v2);
  return PredicateCodableError.description.getter();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ExpressionStructure.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExpressionStructure.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ExpressionStructure.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ExpressionStructure.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ExpressionStructure.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExpressionStructure.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ExpressionStructure.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ExpressionStructure.CodingKeys and conformance ExpressionStructure.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

void *assignWithCopy for ExpressionStructure(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ExpressionStructure(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpressionStructure(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpressionStructure(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExpressionStructure()
{
  return &type metadata for ExpressionStructure;
}

uint64_t outlined copy of PredicateCodableError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 < 2u)
  {
LABEL_4:
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  if (a5 != 2)
  {
    if (a5 != 3) {
      return result;
    }
    goto LABEL_4;
  }
LABEL_5:

  return swift_bridgeObjectRetain();
}

uint64_t destroy for PredicateCodableError(uint64_t a1)
{
  return outlined consume of PredicateCodableError(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t outlined consume of PredicateCodableError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 < 2u)
  {
LABEL_4:
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  if (a5 != 2)
  {
    if (a5 != 3) {
      return result;
    }
    goto LABEL_4;
  }
LABEL_5:

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PredicateCodableError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  outlined copy of PredicateCodableError(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for PredicateCodableError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  outlined copy of PredicateCodableError(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of PredicateCodableError(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for PredicateCodableError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of PredicateCodableError(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateCodableError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PredicateCodableError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PredicateCodableError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for PredicateCodableError(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PredicateCodableError()
{
  return &type metadata for PredicateCodableError;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressionCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PredicateExpressionCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PredicateExpressionCodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressionCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressionCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t specialized ExpressionStructure.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1936159329 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized PredicateExpressionCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C626169726176 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6973736572707865 && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7275746375727473 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t outlined init with take of PredicateCodableError(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(unsigned char *)(a2 + 32) = *((unsigned char *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined copy of GenericArgument(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of GenericArgument(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateCodableError and conformance PredicateCodableError;
  if (!lazy protocol witness table cache variable for type PredicateCodableError and conformance PredicateCodableError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateCodableError and conformance PredicateCodableError);
  }
  return result;
}

uint64_t assignWithCopy for ExpressionStructure.Argument(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of ExpressionStructure.Argument(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of ExpressionStructure.Argument(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for ExpressionStructure.Argument(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of ExpressionStructure.Argument(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExpressionStructure.Argument(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExpressionStructure.Argument(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ExpressionStructure.Argument(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t destructiveInjectEnumTag for ExpressionStructure.Argument(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2 & 1;
  return result;
}

uint64_t NSObject.KeyValueObservingPublisher.init(object:keyPath:options:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t sub_181A8F660()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

id NSObject.KeyValueObservingPublisher.object.getter()
{
  return *v0;
}

uint64_t NSObject.KeyValueObservingPublisher.keyPath.getter()
{
  return swift_retain();
}

uint64_t NSObject.KeyValueObservingPublisher.options.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t static NSObject.KeyValueObservingPublisher.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  type metadata accessor for AnyKeyPath();
  swift_retain();
  swift_retain();
  unsigned __int8 v7 = MEMORY[0x185302EC0](v5, v3);
  swift_release();
  swift_release();
  return v7 & (v6 == v4);
}

void NSObject.KVOSubscription.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0x63736275534F564BLL;
  a1[1] = 0xEF6E6F6974706972;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSObject.KVOSubscription<A, B, C>()
{
  return 0x63736275534F564BLL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance NSObject.KVOSubscription<A, B, C>()
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance NSObject.KVOSubscription<A, B, C>(void *a1@<X8>)
{
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance NSObject.KVOSubscription<A, B, C>()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

uint64_t assignWithCopy for NSObject.KeyValueObservingPublisher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for NSObject.KeyValueObservingPublisher(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t sub_181A8F890()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181A8F8C8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation20PredicateExpressionsO10VariableIDVG_SSs5NeverOTg50118_s10Foundation17createDescription33_0E6808C72783E37C9BBD8DD29A9ABF15LL8variable10expression8typeName10outputTypeSSAA20ef2O8G70Vy_xGxQp_q0_SSq_mtRvzAA08StandardR10ExpressionR0_r1_lFSSAI0T2IDVXEfU0_AF26DebugStringConversionStateVTf1cn_n(uint64_t a1, uint64_t *a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v20 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v20;
    id v6 = (Swift::UInt *)(a1 + 32);
    do
    {
      Swift::UInt v8 = *v6++;
      Swift::UInt v7 = v8;
      uint64_t v9 = *a2;
      if (*(void *)(*a2 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v11 & 1) != 0))
      {
        unsigned __int8 v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
        uint64_t v13 = *v12;
        unint64_t v14 = v12[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease();
        v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v15);
        swift_bridgeObjectRelease();
        uint64_t v13 = 0x566E776F6E6B6E75;
        unint64_t v14 = 0xEF656C6261697261;
      }
      unint64_t v17 = *(void *)(v20 + 16);
      unint64_t v16 = *(void *)(v20 + 24);
      if (v17 >= v16 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      }
      *(void *)(v20 + 16) = v17 + 1;
      uint64_t v18 = v20 + 16 * v17;
      *(void *)(v18 + 32) = v13;
      *(void *)(v18 + 40) = v14;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t specialized DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

unint64_t specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(void *a1, unint64_t a2, uint64_t a3)
{
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v53 = a1;
    unint64_t v54 = a2;
    uint64_t v55 = a3;
    URL.scheme.getter();
    if (v6)
    {
      Swift::String v7 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v7._countAndFlagsBits == 1635017060 && v7._object == (void *)0xE400000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v12 & 1) == 0) {
          goto LABEL_16;
        }
      }
      swift_retain();
      id v13 = a1;
      swift_retain();
      unint64_t result = _foundation_swift_url_feature_enabled();
      if (result)
      {
        if (!a2)
        {
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        swift_bridgeObjectRetain();
        swift_release();
        swift_release();
      }
      else
      {
        id v15 = objc_msgSend(v13, sel_relativeString);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        swift_release();
        swift_release();
      }
      uint64_t v16 = String.count.getter();
      swift_bridgeObjectRelease();
      if (v16 >= 129)
      {
        uint64_t v53 = 0;
        unint64_t v54 = 0xE000000000000000;
        id v17 = v13;
        swift_retain();
        swift_retain();
        unint64_t result = _foundation_swift_url_feature_enabled();
        if (result)
        {
          if (!a2)
          {
LABEL_41:
            __break(1u);
            goto LABEL_42;
          }
          swift_bridgeObjectRetain();
          swift_release();
          swift_release();
        }
        else
        {
          id v21 = objc_msgSend(v17, sel_relativeString);
          static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
          swift_release();
          swift_release();
        }
        String.index(_:offsetBy:limitedBy:)();
        uint64_t v22 = String.subscript.getter();
        uint64_t v24 = v23;
        uint64_t v26 = v25;
        uint64_t v28 = v27;
        swift_bridgeObjectRelease();
        v29._uint64_t countAndFlagsBits = MEMORY[0x185301F50](v22, v24, v26, v28);
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v30._uint64_t countAndFlagsBits = 0x202E2E2E20;
        v30._unint64_t object = (void *)0xE500000000000000;
        String.append(_:)(v30);
        id v31 = v17;
        swift_retain();
        swift_retain();
        unint64_t result = _foundation_swift_url_feature_enabled();
        if (result)
        {
          if (!a2)
          {
LABEL_42:
            __break(1u);
            return result;
          }
          unint64_t v33 = *(void *)(a2 + 16);
          unint64_t v32 = *(void *)(a2 + 24);
          swift_bridgeObjectRetain();
          swift_release();
          swift_release();

          if ((v32 & 0x2000000000000000) != 0) {
            goto LABEL_24;
          }
        }
        else
        {
          id v35 = objc_msgSend(v31, sel_relativeString);
          unint64_t v33 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
          unint64_t v32 = v36;
          swift_release();
          swift_release();

          if ((v32 & 0x2000000000000000) != 0)
          {
LABEL_24:
            uint64_t v34 = v33 & 0xFFFFFFFFFFFFLL;
LABEL_27:
            unint64_t result = String.index(_:offsetBy:limitedBy:)();
            if (v37) {
              unint64_t result = 15;
            }
            uint64_t v38 = HIBYTE(v32) & 0xF;
            if ((v32 & 0x2000000000000000) == 0) {
              uint64_t v38 = v34;
            }
            if (4 * v38 >= result >> 14)
            {
              uint64_t v39 = String.subscript.getter();
              uint64_t v41 = v40;
              uint64_t v43 = v42;
              uint64_t v45 = v44;
              swift_bridgeObjectRelease();
              v46._uint64_t countAndFlagsBits = MEMORY[0x185301F50](v39, v41, v43, v45);
              String.append(_:)(v46);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v9 = v53;
              char v11 = (void *)v54;
LABEL_33:
              URL.baseURL.getter((uint64_t *)&v53);
              Swift::String v47 = v53;
              if (v53)
              {
                unint64_t v49 = v54;
                uint64_t v48 = v55;
                uint64_t v53 = 0;
                unint64_t v54 = 0xE000000000000000;
                v50._uint64_t countAndFlagsBits = (uint64_t)v9;
                v50._unint64_t object = v11;
                String.append(_:)(v50);
                swift_bridgeObjectRelease();
                v51._uint64_t countAndFlagsBits = 539831584;
                v51._unint64_t object = (void *)0xE400000000000000;
                String.append(_:)(v51);
                specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v47, v49, v48);
                outlined consume of URL?(v47);
                id v9 = v53;
                char v11 = (void *)v54;
              }
              goto LABEL_35;
            }
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
        }
        uint64_t v34 = v33 & 0xFFFFFFFFFFFFLL;
        goto LABEL_27;
      }
    }
LABEL_16:
    swift_retain();
    id v18 = a1;
    swift_retain();
    unint64_t result = _foundation_swift_url_feature_enabled();
    if (!result)
    {
      id v19 = objc_msgSend(v18, sel_relativeString);
      id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      char v11 = v20;
      swift_release();
      swift_release();

      goto LABEL_33;
    }
    if (a2)
    {
      id v9 = *(id *)(a2 + 16);
      char v11 = *(void **)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();

      goto LABEL_33;
    }
    goto LABEL_39;
  }
  id v8 = objc_msgSend(a1, sel_description);
  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  char v11 = v10;

LABEL_35:
  v52._uint64_t countAndFlagsBits = (uint64_t)v9;
  v52._unint64_t object = v11;
  String.append(_:)(v52);

  return swift_bridgeObjectRelease();
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay10Foundation20PredicateExpressionsO10VariableIDVGG_AL_SSts5NeverOTg5018_sSi10Foundation20gh3O10i43IDVAESSIgynro_Si6offset_AE7elementtAE_SSts5k70OIegnrzr_TR053_s10Foundation26DebugStringConversionStateVyACSayAA20bc3O37D24IDVGcfcAG_SStSi_AGtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v11 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v10 = a1 + 32;
    do
    {
      uint64_t v4 = *(void *)(v10 + 8 * v3++);
      v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      unint64_t v7 = *(void *)(v11 + 16);
      unint64_t v6 = *(void *)(v11 + 24);
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      }
      *(void *)(v11 + 16) = v7 + 1;
      id v8 = (void *)(v11 + 24 * v7);
      v8[4] = v4;
      v8[5] = 0x7475706E69;
      v8[6] = 0xE500000000000000;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t DebugStringConversionState.subscript.getter(Swift::UInt *a1)
{
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 16) && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(*a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return 0x566E776F6E6B6E75;
  }
  return v5;
}

uint64_t specialized Sequence<>.starts<A>(with:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v6 = a3 >> 14;
  if (a3 >> 14 != a2 >> 14)
  {
    uint64_t v11 = (a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000) == 0) {
      LOBYTE(v11) = 1;
    }
    uint64_t v19 = *(void *)(a1 + 16);
    uint64_t v20 = 4 << v11;
    uint64_t v12 = HIBYTE(a5) & 0xF;
    if ((a5 & 0x2000000000000000) == 0) {
      uint64_t v12 = a4 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v18 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v7 = 0;
    unint64_t v13 = a2;
    while (1)
    {
      uint64_t result = Substring.UTF8View.subscript.getter();
      unsigned __int8 v15 = result;
      if ((v13 & 0xC) == v20)
      {
        uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, a4, a5);
        unint64_t v13 = result;
        if ((a5 & 0x1000000000000000) == 0)
        {
LABEL_10:
          unint64_t v13 = (v13 & 0xFFFFFFFFFFFF0000) + 65540;
          goto LABEL_14;
        }
      }
      else if ((a5 & 0x1000000000000000) == 0)
      {
        goto LABEL_10;
      }
      if (v18 <= v13 >> 16)
      {
        __break(1u);
LABEL_25:
        __break(1u);
        return result;
      }
      unint64_t v13 = String.UTF8View._foreignIndex(after:)();
LABEL_14:
      BOOL v16 = v19 == v7;
      if (v19 == v7 || *(unsigned __int8 *)(a1 + v7 + 32) != v15)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v16;
      }
      ++v7;
      if (v6 == v13 >> 14)
      {
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = 0;
LABEL_18:
  unint64_t v17 = *(void *)(a1 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v7 == v17) {
    return 1;
  }
  if (v7 >= v17) {
    goto LABEL_25;
  }
  return 0;
}

uint64_t specialized Sequence<>.starts<A>(with:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v6 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v6 = 11;
  }
  unint64_t v7 = v6 | (v5 << 16);
  unint64_t v8 = a3 >> 14;
  swift_bridgeObjectRetain();
  unint64_t v24 = v8;
  if (v8 != a4 >> 14)
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = Substring.index(before:)();
    uint64_t v10 = Substring.subscript.getter();
    uint64_t v12 = v11;
    if (!v5)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v22 = 1;
      goto LABEL_21;
    }
    uint64_t v13 = v10;
    unint64_t v7 = String.index(before:)();
    if (v13 == String.subscript.getter() && v12 == v14) {
      goto LABEL_13;
    }
LABEL_14:
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v22 = 0;
      goto LABEL_21;
    }
    while (v24 != v9 >> 14)
    {
      unint64_t v9 = Substring.index(before:)();
      uint64_t v17 = Substring.subscript.getter();
      uint64_t v19 = v18;
      if (v7 < 0x4000) {
        goto LABEL_22;
      }
      uint64_t v20 = v17;
      unint64_t v7 = String.index(before:)();
      if (v20 != String.subscript.getter() || v19 != v21) {
        goto LABEL_14;
      }
LABEL_13:
      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRelease();
  }
  if (v7 < 0x4000)
  {
    uint64_t v22 = 1;
  }
  else
  {
    String.index(before:)();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v22 = 0;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  return v22;
}

unint64_t specialized Sequence<>.starts<A>(with:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v5 = result;
  unint64_t v6 = 0;
  if ((a3 & 0x2000000000000000) != 0) {
    unint64_t v7 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v8 = 4 * v7;
  uint64_t v9 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4 << v9;
  uint64_t v20 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v21 = a3 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v11 = result + 32;
  unint64_t v12 = 15;
  while (v8 != v12 >> 14)
  {
    unint64_t v13 = v12 & 0xC;
    uint64_t result = v12;
    if (v13 == v10)
    {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a2, a3);
      uint64_t v8 = 4 * v7;
    }
    unint64_t v14 = result >> 16;
    if (result >> 16 >= v7)
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if ((a3 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      uint64_t v8 = 4 * v7;
      unsigned __int8 v15 = result;
      if (v13 != v10) {
        goto LABEL_18;
      }
    }
    else if ((a3 & 0x2000000000000000) != 0)
    {
      v22[0] = a2;
      v22[1] = v21;
      unsigned __int8 v15 = *((unsigned char *)v22 + v14);
      if (v13 != v10) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t result = v20;
      if ((a2 & 0x1000000000000000) == 0)
      {
        uint64_t result = _StringObject.sharedUTF8.getter();
        uint64_t v8 = 4 * v7;
      }
      unsigned __int8 v15 = *(unsigned char *)(result + v14);
      if (v13 != v10)
      {
LABEL_18:
        if ((a3 & 0x1000000000000000) == 0) {
          goto LABEL_19;
        }
        goto LABEL_22;
      }
    }
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a2, a3);
    uint64_t v8 = 4 * v7;
    unint64_t v12 = result;
    if ((a3 & 0x1000000000000000) == 0)
    {
LABEL_19:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_24;
    }
LABEL_22:
    if (v7 <= v12 >> 16) {
      goto LABEL_35;
    }
    uint64_t v16 = String.UTF8View._foreignIndex(after:)();
    uint64_t v8 = 4 * v7;
    unint64_t v12 = v16;
LABEL_24:
    unint64_t v17 = *(void *)(v5 + 16);
    uint64_t result = v6 == v17;
    if (v6 == v17) {
      return result;
    }
    if (v6 >= v17) {
      goto LABEL_34;
    }
    int v18 = *(unsigned __int8 *)(v11 + v6++);
    if (v18 != v15) {
      return result;
    }
  }
  unint64_t v19 = *(void *)(v5 + 16);
  if (v19 == v6) {
    return 1;
  }
  if (v6 < v19) {
    return 0;
  }
LABEL_36:
  __break(1u);
  return result;
}

unint64_t specialized Sequence<>.starts<A>(with:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v35 = v6;
  uint64_t v7 = 4 * v6;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  uint64_t v29 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v30 = a4 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v10 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v32 = v7;
  unint64_t v33 = v10;
  uint64_t v31 = 4 * v10;
  uint64_t v11 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v11) = 1;
  }
  uint64_t v12 = 4 << v11;
  uint64_t v27 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v28 = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v13 = 15;
  unint64_t v14 = 15;
  while (1)
  {
    if (v32 == v13 >> 14)
    {
      if (v31 != v14 >> 14)
      {
        uint64_t v4 = v14 & 0xC;
        unint64_t result = v14;
        if (v4 == v12) {
          goto LABEL_62;
        }
        goto LABEL_49;
      }
      return 1;
    }
    unint64_t v15 = v13 & 0xC;
    unint64_t v16 = v13;
    if (v15 == v9) {
      unint64_t v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, a3, v4);
    }
    unint64_t v17 = v16 >> 16;
    if (v16 >> 16 >= v35) {
      break;
    }
    if ((v4 & 0x1000000000000000) != 0)
    {
      char v19 = String.UTF8View._foreignSubscript(position:)();
      if (v15 != v9) {
        goto LABEL_23;
      }
    }
    else if ((v4 & 0x2000000000000000) != 0)
    {
      unint64_t v37 = a3;
      uint64_t v38 = v30;
      char v19 = *((unsigned char *)&v37 + v17);
      if (v15 != v9) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v18 = v29;
      if ((a3 & 0x1000000000000000) == 0) {
        uint64_t v18 = _StringObject.sharedUTF8.getter();
      }
      char v19 = *(unsigned char *)(v18 + v17);
      if (v15 != v9)
      {
LABEL_23:
        if ((v4 & 0x1000000000000000) == 0) {
          goto LABEL_24;
        }
        goto LABEL_27;
      }
    }
    unint64_t v13 = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, a3, v4);
    if ((v4 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v13 = (v13 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v35 <= v13 >> 16) {
      goto LABEL_60;
    }
    unint64_t v13 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    BOOL v20 = v14 >> 14 == v31;
    if (v14 >> 14 == v31) {
      return v20;
    }
    unint64_t v21 = v14 & 0xC;
    unint64_t v22 = v14;
    if (v21 == v12) {
      unint64_t v22 = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
    }
    unint64_t v23 = v22 >> 16;
    if (v22 >> 16 >= v33) {
      goto LABEL_59;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      char v25 = String.UTF8View._foreignSubscript(position:)();
      if (v21 != v12) {
        goto LABEL_40;
      }
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      unint64_t v37 = a1;
      uint64_t v38 = v28;
      char v25 = *((unsigned char *)&v37 + v23);
      if (v21 != v12) {
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v24 = v27;
      if ((a1 & 0x1000000000000000) == 0) {
        uint64_t v24 = _StringObject.sharedUTF8.getter();
      }
      char v25 = *(unsigned char *)(v24 + v23);
      if (v21 != v12)
      {
LABEL_40:
        if ((a2 & 0x1000000000000000) == 0) {
          goto LABEL_10;
        }
        goto LABEL_41;
      }
    }
    unint64_t v14 = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_10:
      unint64_t v14 = (v14 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_11;
    }
LABEL_41:
    if (v33 <= v14 >> 16) {
      goto LABEL_61;
    }
    unint64_t v14 = String.UTF8View._foreignIndex(after:)();
LABEL_11:
    if (v19 != v25) {
      return v20;
    }
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
LABEL_49:
  if (v33 <= result >> 16)
  {
    __break(1u);
LABEL_64:
    unint64_t result = String.UTF8View._foreignSubscript(position:)();
    if (v4 == v12) {
      goto LABEL_67;
    }
LABEL_53:
    if ((a2 & 0x1000000000000000) == 0) {
      return 0;
    }
    goto LABEL_54;
  }
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_64;
  }
  if (!(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    unint64_t result = _StringObject.sharedUTF8.getter();
    if (v4 == v12) {
      goto LABEL_67;
    }
    goto LABEL_53;
  }
  if (v4 != v12) {
    goto LABEL_53;
  }
LABEL_67:
  unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
  unint64_t v14 = result;
  if ((a2 & 0x1000000000000000) == 0) {
    return 0;
  }
LABEL_54:
  if (v33 > v14 >> 16)
  {
    String.UTF8View._foreignIndex(after:)();
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t PredicateExpressions.Variable.debugString(state:)(long long *a1)
{
  Swift::UInt v2 = *v1;
  uint64_t v3 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)a1 + 3);
  long long v7 = *a1;
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  Swift::UInt v6 = v2;
  return DebugStringConversionState.subscript.getter(&v6);
}

uint64_t PredicateExpressions.KeyPath<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  unint64_t v32 = v3;
  uint64_t v4 = AnyKeyPath.debugDescription.getter();
  unint64_t v6 = v5;
  uint64_t v35 = 46;
  unint64_t v36 = 0xE100000000000000;
  uint64_t v34 = &v35;
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v33, v4, v6);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v9 = *(void *)(v7 + 16);
  int64_t v10 = v9 - 1;
  unint64_t v11 = v9 - 2;
  if (v9 < 2) {
    goto LABEL_14;
  }
  uint64_t v12 = (unint64_t *)(v7 + 32 + 32 * v10);
  unint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  swift_bridgeObjectRetain();
  LOBYTE(v13) = specialized Sequence<>.starts<A>(with:)(62, 0xE100000000000000, v13, v14);
  uint64_t result = swift_bridgeObjectRelease();
  if (v13) {
    goto LABEL_14;
  }
  unint64_t v15 = v9 - 3;
  if (v9 < 3)
  {
    int64_t v10 = 0;
    goto LABEL_14;
  }
  if (v11 < *(void *)(v7 + 16))
  {
    unint64_t v16 = (unint64_t *)(v7 + 32 + 32 * v11);
    unint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    swift_bridgeObjectRetain();
    LOBYTE(v17) = specialized Sequence<>.starts<A>(with:)(62, 0xE100000000000000, v17, v18);
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v10 = v9 - 2;
    if ((v17 & 1) == 0)
    {
      char v19 = (unint64_t *)(v7 + 32 * v9 - 64);
      while ((uint64_t)(v15 + 1) >= 2)
      {
        if (v15 >= *(void *)(v7 + 16)) {
          goto LABEL_22;
        }
        unint64_t v20 = *v19;
        unint64_t v21 = v19[1];
        swift_bridgeObjectRetain();
        LOBYTE(v20) = specialized Sequence<>.starts<A>(with:)(62, 0xE100000000000000, v20, v21);
        uint64_t result = swift_bridgeObjectRelease();
        --v15;
        v19 -= 4;
        if (v20)
        {
          int64_t v10 = v15 + 1;
          goto LABEL_13;
        }
      }
      int64_t v10 = 0;
LABEL_13:
      if ((uint64_t)v9 <= v10)
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
    }
LABEL_14:
    unint64_t v22 = *(void *)(v7 + 16);
    if (v22 >= v10 + 1 && v22 >= v9)
    {
      uint64_t v35 = v7;
      unint64_t v36 = v7 + 32;
      int64_t v37 = v10 + 1;
      uint64_t v38 = (2 * v9) | 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Substring>);
      lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<Substring>);
      lazy protocol witness table accessor for type Substring and conformance Substring();
      uint64_t v24 = Sequence<>.joined(separator:)();
      uint64_t v26 = v25;
      swift_bridgeObjectRelease();
      uint64_t v35 = 46;
      unint64_t v36 = 0xE100000000000000;
      v27._uint64_t countAndFlagsBits = v24;
      v27._unint64_t object = v26;
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      uint64_t v28 = v35;
      uint64_t v29 = (void *)v36;
      uint64_t v35 = v31;
      unint64_t v36 = v32;
      swift_bridgeObjectRetain();
      v30._uint64_t countAndFlagsBits = v28;
      v30._unint64_t object = v29;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v35;
    }
    goto LABEL_21;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.KeyPath<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.KeyPath<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.Conjunction<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Conjunction<>.debugString(state:)(a1, a2, a3, a4, 539371040);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Conjunction<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Conjunction<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.Disjunction<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Conjunction<>.debugString(state:)(a1, a2, a3, a4, 545029152);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Disjunction<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Disjunction<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.Equal<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 540884256, (void *)0xE400000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Equal<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.NotEqual<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 540877088, (void *)0xE400000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.NotEqual<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.NotEqual<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.Arithmetic<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)&asc_182106C20[8 * *v4];
  v9._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 32;
  v10._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = v8;
  v11._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 32;
  v12._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 41;
  v14._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return 40;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Arithmetic<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Arithmetic<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.Comparison<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (void *)0xE100000000000000;
  uint64_t v6 = 62;
  switch(*v4)
  {
    case 1:
      unint64_t v5 = (void *)0xE200000000000000;
      uint64_t v6 = 15676;
      break;
    case 2:
      break;
    case 3:
      unint64_t v5 = (void *)0xE200000000000000;
      uint64_t v6 = 15678;
      break;
    default:
      uint64_t v6 = 60;
      break;
  }
  v10._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 32;
  v11._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = v6;
  v12._unint64_t object = v5;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 32;
  v13._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 41;
  v15._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return 40;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Comparison<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Comparison<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.UnaryMinus<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.UnaryMinus<>.debugString(state:)(a1, a2, a3, 45);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.UnaryMinus<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.UnaryMinus<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.SequenceMinimum<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMinimum<>.debugString(state:)(a1, a2, a3, 0x29286E696D2ELL, (void *)0xE600000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceMinimum<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMinimum<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.SequenceMaximum<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMinimum<>.debugString(state:)(a1, a2, a3, 0x292878616D2ELL, (void *)0xE600000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceMaximum<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMaximum<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.ClosedRange<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 0x202E2E2E20, (void *)0xE500000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.ClosedRange<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ClosedRange<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.Range<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 0x203C2E2E20, (void *)0xE500000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Range<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Range<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.Conditional<>.debugString(state:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a3 + 16))(a1, a2[2], a3);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x202020200A7B20;
  v11._unint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v11);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, a2[3], a4);
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v14 = v12;
  }
  uint64_t v15 = 7;
  if (((v13 >> 60) & ((v12 & 0x800000000000000) == 0)) != 0) {
    uint64_t v15 = 11;
  }
  unint64_t v16 = v15 | (v14 << 16);
  if (specialized Sequence<>.starts<A>(with:)()) {
    unint64_t v17 = String.index(after:)();
  }
  else {
    unint64_t v17 = 15;
  }
  v18._uint64_t countAndFlagsBits = 41;
  v18._unint64_t object = (void *)0xE100000000000000;
  uint64_t result = String.hasSuffix(_:)(v18);
  if (result)
  {
    uint64_t result = String.index(before:)();
    unint64_t v16 = result;
  }
  if (v16 >> 14 < v17 >> 14)
  {
    __break(1u);
  }
  else
  {
    String.subscript.getter();
    lazy protocol witness table accessor for type Substring and conformance Substring();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = MEMORY[0x185301F50](0, 0xE000000000000000);
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = v20;
    v23._unint64_t object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 0x2065736C65207D0ALL;
    v24._unint64_t object = (void *)0xEE00202020200A7BLL;
    String.append(_:)(v24);
    uint64_t v25 = (*(uint64_t (**)(uint64_t, void, uint64_t))(a5 + 16))(a1, a2[4], a5);
    uint64_t v27 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0) {
      uint64_t v27 = v25;
    }
    uint64_t v28 = 7;
    if (((v26 >> 60) & ((v25 & 0x800000000000000) == 0)) != 0) {
      uint64_t v28 = 11;
    }
    unint64_t v29 = v28 | (v27 << 16);
    if (specialized Sequence<>.starts<A>(with:)()) {
      unint64_t v30 = String.index(after:)();
    }
    else {
      unint64_t v30 = 15;
    }
    v31._uint64_t countAndFlagsBits = 41;
    v31._unint64_t object = (void *)0xE100000000000000;
    uint64_t result = String.hasSuffix(_:)(v31);
    if (result)
    {
      uint64_t result = String.index(before:)();
      unint64_t v29 = result;
    }
    if (v29 >> 14 >= v30 >> 14)
    {
      String.subscript.getter();
      RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
      swift_bridgeObjectRelease();
      uint64_t v32 = MEMORY[0x185301F50](0, 0xE000000000000000);
      uint64_t v34 = v33;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v35._uint64_t countAndFlagsBits = v32;
      v35._unint64_t object = v34;
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36._uint64_t countAndFlagsBits = 32010;
      v36._unint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v36);
      return 2123369;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Conditional<A, B, C>(uint64_t a1, void *a2, uint64_t a3)
{
  return PredicateExpressions.Conditional<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), *(void *)(a3 - 24));
}

uint64_t PredicateExpressions.CollectionIndexSubscript<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.CollectionIndexSubscript<>.debugString(state:)(a1, a2, a3, a4, 91, (void *)0xE100000000000000, 93);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.CollectionIndexSubscript<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.CollectionContainsCollection<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  v7._uint64_t countAndFlagsBits = 0x6E6961746E6F632ELL;
  v7._unint64_t object = (void *)0xEA00000000002873;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 41;
  v9._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return v11;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.CollectionContainsCollection<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.ConditionalCast<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ConditionalCast<>.debugString(state:)(a1, a2, a3, 0x203F736120, (void *)0xE500000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.ConditionalCast<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ConditionalCast<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.ForceCast<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ConditionalCast<>.debugString(state:)(a1, a2, a3, 0x2021736120, (void *)0xE500000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.ForceCast<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ForceCast<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.TypeCheck<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ConditionalCast<>.debugString(state:)(a1, a2, a3, 544434464, (void *)0xE400000000000000);
}

uint64_t PredicateExpressions.ConditionalCast<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  v7._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = a4;
  v8._unint64_t object = a5;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 41;
  v10._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 40;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.TypeCheck<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.TypeCheck<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.ForcedUnwrap<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceMinimum<>.debugString(state:)(a1, a2, a3, 33, (void *)0xE100000000000000);
}

uint64_t PredicateExpressions.SequenceMinimum<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  v7._uint64_t countAndFlagsBits = a4;
  v7._unint64_t object = a5;
  String.append(_:)(v7);
  return v9;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.ForcedUnwrap<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ForcedUnwrap<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.OptionalFlatMap<>.debugString(state:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v79 = *(int *)(a2 + 72);
  Swift::UInt v10 = *(void *)(v4 + v79);
  *(void *)&long long v83 = 0x656C626169726176;
  *((void *)&v83 + 1) = 0xE800000000000000;
  v82[0] = a1[1];
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  long long v81 = v83;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v83 = *a1;
  uint64_t v13 = v83;
  *a1 = 0x8000000000000000;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_10;
  }
  char v5 = v14;
  if (*(void *)(v13 + 24) >= v18)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v19 = v13;
      uint64_t v22 = *((void *)&v81 + 1);
      uint64_t v23 = v81;
      if ((v14 & 1) == 0)
      {
LABEL_45:
        *(void *)(v19 + 8 * (v15 >> 6) + 64) |= 1 << v15;
        *(void *)(*(void *)(v19 + 48) + 8 * v15) = v10;
        uint64_t v45 = (void *)(*(void *)(v19 + 56) + 16 * v15);
        *uint64_t v45 = v23;
        v45[1] = v22;
        uint64_t v46 = *(void *)(v19 + 16);
        BOOL v47 = __OFADD__(v46, 1);
        uint64_t v48 = v46 + 1;
        if (v47)
        {
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        *(void *)(v19 + 16) = v48;
LABEL_47:
        *a1 = v19;
        swift_bridgeObjectRelease();
        uint64_t v49 = a1[1];
        BOOL v47 = __OFADD__(v49, 1);
        uint64_t v50 = v49 + 1;
        if (v47)
        {
          __break(1u);
        }
        else
        {
          a1[1] = v50;
          *(void *)&long long v83 = 0;
          *((void *)&v83 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(28);
          uint64_t v51 = (*(uint64_t (**)(uint64_t *, void, uint64_t))(a3 + 16))(a1, *(void *)(a2 + 16), a3);
          uint64_t v53 = v52;
          swift_bridgeObjectRelease();
          uint64_t v86 = v51;
          uint64_t v87 = v53;
          v54._uint64_t countAndFlagsBits = 0x70614D74616C662ELL;
          v54._unint64_t object = (void *)0xEB00000000207B28;
          String.append(_:)(v54);
          uint64_t v55 = a1[2];
          uint64_t v56 = a1[3];
          Swift::UInt v57 = *(void *)(v6 + v79);
          long long v83 = *(_OWORD *)a1;
          uint64_t v84 = v55;
          uint64_t v85 = v56;
          v82[0] = v57;
          v58._uint64_t countAndFlagsBits = DebugStringConversionState.subscript.getter(v82);
          String.append(_:)(v58);
          swift_bridgeObjectRelease();
          v59._uint64_t countAndFlagsBits = 0x202020200A6E6920;
          v59._unint64_t object = (void *)0xE800000000000000;
          String.append(_:)(v59);
          uint64_t v60 = (*(uint64_t (**)(uint64_t *, void))(a4 + 16))(a1, *(void *)(a2 + 32));
          uint64_t v62 = HIBYTE(v61) & 0xF;
          if ((v61 & 0x2000000000000000) == 0) {
            uint64_t v62 = v60;
          }
          uint64_t v63 = 7;
          if (((v61 >> 60) & ((v60 & 0x800000000000000) == 0)) != 0) {
            uint64_t v63 = 11;
          }
          unint64_t v64 = v63 | (v62 << 16);
          if (specialized Sequence<>.starts<A>(with:)()) {
            unint64_t v65 = String.index(after:)();
          }
          else {
            unint64_t v65 = 15;
          }
          v66._uint64_t countAndFlagsBits = 41;
          v66._unint64_t object = (void *)0xE100000000000000;
          if (String.hasSuffix(_:)(v66)) {
            unint64_t v64 = String.index(before:)();
          }
          if (v64 >> 14 >= v65 >> 14)
          {
            v82[0] = String.subscript.getter();
            v82[1] = v67;
            v82[2] = v68;
            v82[3] = v69;
            lazy protocol witness table accessor for type Substring and conformance Substring();
            lazy protocol witness table accessor for type String and conformance String();
            RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
            swift_bridgeObjectRelease();
            uint64_t v70 = MEMORY[0x185301F50](v83, *((void *)&v83 + 1), v84, v85);
            Swift::UInt v72 = v71;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v73._uint64_t countAndFlagsBits = v70;
            v73._unint64_t object = v72;
            String.append(_:)(v73);
            swift_bridgeObjectRelease();
            v74._uint64_t countAndFlagsBits = 2718986;
            v74._unint64_t object = (void *)0xE300000000000000;
            String.append(_:)(v74);
            return v86;
          }
        }
        __break(1u);
        goto LABEL_61;
      }
LABEL_8:
      Swift::String v24 = (void *)(*(void *)(v19 + 56) + 16 * v15);
      *Swift::String v24 = v23;
      v24[1] = v22;
      swift_bridgeObjectRelease();
      goto LABEL_47;
    }
LABEL_10:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, String>);
    uint64_t v25 = static _DictionaryStorage.copy(original:)();
    uint64_t v19 = v25;
    if (*(void *)(v13 + 16))
    {
      unint64_t v26 = (void *)(v25 + 64);
      unint64_t v27 = (unint64_t)((1 << *(unsigned char *)(v19 + 32)) + 63) >> 6;
      if (v19 != v13 || (unint64_t)v26 >= v13 + 64 + 8 * v27) {
        memmove(v26, (const void *)(v13 + 64), 8 * v27);
      }
      uint64_t v76 = v13 + 64;
      int64_t v28 = 0;
      *(void *)(v19 + 16) = *(void *)(v13 + 16);
      uint64_t v29 = 1 << *(unsigned char *)(v13 + 32);
      uint64_t v30 = -1;
      if (v29 < 64) {
        uint64_t v30 = ~(-1 << v29);
      }
      unint64_t v31 = v30 & *(void *)(v13 + 64);
      int64_t v77 = (unint64_t)(v29 + 63) >> 6;
      while (1)
      {
        if (v31)
        {
          unint64_t v32 = __clz(__rbit64(v31));
          v31 &= v31 - 1;
          int64_t v78 = v28;
          unint64_t v33 = v32 | (v28 << 6);
        }
        else
        {
          int64_t v41 = v28 + 1;
          if (__OFADD__(v28, 1)) {
            goto LABEL_62;
          }
          if (v41 >= v77) {
            break;
          }
          unint64_t v42 = *(void *)(v76 + 8 * v41);
          int64_t v43 = v28 + 1;
          if (!v42)
          {
            int64_t v43 = v28 + 2;
            if (v28 + 2 >= v77) {
              break;
            }
            unint64_t v42 = *(void *)(v76 + 8 * v43);
            if (!v42)
            {
              int64_t v43 = v28 + 3;
              if (v28 + 3 >= v77) {
                break;
              }
              unint64_t v42 = *(void *)(v76 + 8 * v43);
              if (!v42)
              {
                int64_t v43 = v28 + 4;
                if (v28 + 4 >= v77) {
                  break;
                }
                unint64_t v42 = *(void *)(v76 + 8 * v43);
                if (!v42)
                {
                  int64_t v43 = v28 + 5;
                  if (v28 + 5 >= v77) {
                    break;
                  }
                  unint64_t v42 = *(void *)(v76 + 8 * v43);
                  if (!v42)
                  {
                    int64_t v43 = v28 + 6;
                    if (v28 + 6 >= v77) {
                      break;
                    }
                    unint64_t v42 = *(void *)(v76 + 8 * v43);
                    if (!v42)
                    {
                      int64_t v43 = v28 + 7;
                      if (v28 + 7 >= v77) {
                        break;
                      }
                      unint64_t v42 = *(void *)(v76 + 8 * v43);
                      if (!v42)
                      {
                        int64_t v43 = v28 + 8;
                        if (v28 + 8 >= v77) {
                          break;
                        }
                        unint64_t v42 = *(void *)(v76 + 8 * v43);
                        if (!v42)
                        {
                          uint64_t v44 = v28 + 9;
                          if (v28 + 9 >= v77) {
                            break;
                          }
                          unint64_t v42 = *(void *)(v76 + 8 * v44);
                          if (!v42)
                          {
                            while (1)
                            {
                              int64_t v43 = v44 + 1;
                              if (__OFADD__(v44, 1)) {
                                goto LABEL_63;
                              }
                              if (v43 >= v77) {
                                goto LABEL_44;
                              }
                              unint64_t v42 = *(void *)(v76 + 8 * v43);
                              ++v44;
                              if (v42) {
                                goto LABEL_43;
                              }
                            }
                          }
                          int64_t v43 = v28 + 9;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_43:
          unint64_t v31 = (v42 - 1) & v42;
          int64_t v78 = v43;
          unint64_t v33 = __clz(__rbit64(v42)) + (v43 << 6);
        }
        uint64_t v34 = 8 * v33;
        uint64_t v35 = *(void *)(*(void *)(v13 + 48) + 8 * v33);
        uint64_t v36 = 16 * v33;
        int64_t v37 = (uint64_t *)(*(void *)(v13 + 56) + v36);
        uint64_t v39 = *v37;
        uint64_t v38 = v37[1];
        *(void *)(*(void *)(v19 + 48) + v34) = v35;
        uint64_t v40 = (void *)(*(void *)(v19 + 56) + v36);
        void *v40 = v39;
        v40[1] = v38;
        swift_bridgeObjectRetain();
        int64_t v28 = v78;
      }
    }
LABEL_44:
    swift_bridgeObjectRelease();
    uint64_t v22 = *((void *)&v81 + 1);
    uint64_t v23 = v81;
    if ((v5 & 1) == 0) {
      goto LABEL_45;
    }
    goto LABEL_8;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, isUniquelyReferenced_nonNull_native);
  uint64_t v19 = v83;
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v5 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    uint64_t v22 = *((void *)&v81 + 1);
    uint64_t v23 = v81;
    if ((v5 & 1) == 0) {
      goto LABEL_45;
    }
    goto LABEL_8;
  }
LABEL_64:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.OptionalFlatMap<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.DictionaryKeySubscript<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.DictionaryKeySubscript<>.debugString(state:)(a1, a2, a3, a4, 91, (void *)0xE100000000000000, 93);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.DictionaryKeySubscript<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.DictionaryKeySubscript<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.DictionaryKeyDefaultValueSubscript<>.debugString(state:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _StringGuts.grow(_:)(19);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void, uint64_t))(a3 + 16))(a1, a2[2], a3);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 91;
  v11._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, a2[3], a4);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0x6C7561666564202CLL;
  v13._unint64_t object = (void *)0xEB00000000203A74;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a5 + 16))(a1, a2[4], a5);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 93;
  v15._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return v10;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>(uint64_t a1, void *a2, uint64_t a3)
{
  return PredicateExpressions.DictionaryKeyDefaultValueSubscript<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), *(void *)(a3 - 24));
}

uint64_t PredicateExpressions.FloatDivision<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 2109216, (void *)0xE300000000000000);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.IntDivision<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.FloatDivision<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.IntRemainder<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Equal<>.debugString(state:)(a1, a2, a3, a4, 2106656, (void *)0xE300000000000000);
}

uint64_t PredicateExpressions.Equal<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  v11._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = a5;
  v12._unint64_t object = a6;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 41;
  v14._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return 40;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.IntRemainder<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.IntRemainder<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.Negation<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.UnaryMinus<>.debugString(state:)(a1, a2, a3, 33);
}

uint64_t PredicateExpressions.UnaryMinus<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return a4;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Negation<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Negation<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.NilCoalesce<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Conjunction<>.debugString(state:)(a1, a2, a3, a4, 541015840);
}

uint64_t PredicateExpressions.Conjunction<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = a5;
  v10._unint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 41;
  v12._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return 40;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.NilCoalesce<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.NilCoalesce<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.NilLiteral.debugString(state:)()
{
  return 7104878;
}

uint64_t PredicateExpressions.RangeExpressionContains<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.CollectionIndexSubscript<>.debugString(state:)(a1, a2, a3, a4, 0x6E6961746E6F632ELL, (void *)0xEA00000000002873, 41);
}

uint64_t PredicateExpressions.CollectionIndexSubscript<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v17 = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  v13._uint64_t countAndFlagsBits = a5;
  v13._unint64_t object = a6;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = a7;
  v15._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return v17;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.RangeExpressionContains<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.RangeExpressionContains<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.SequenceContains<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.DictionaryKeySubscript<>.debugString(state:)(a1, a2, a3, a4, 0x6E6961746E6F632ELL, (void *)0xEA00000000002873, 41);
}

uint64_t PredicateExpressions.DictionaryKeySubscript<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v17 = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a1, *(void *)(a2 + 16));
  v13._uint64_t countAndFlagsBits = a5;
  v13._unint64_t object = a6;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = a7;
  v15._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return v17;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceContains<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceContains<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.SequenceStartsWith<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _StringGuts.grow(_:)(19);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void, uint64_t))(a3 + 16))(a1, *(void *)(a2 + 16), a3);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x287374726174732ELL;
  v9._unint64_t object = (void *)0xEE00203A68746977;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 41;
  v11._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return v8;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceStartsWith<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceStartsWith<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.SequenceContainsWhere<>.debugString(state:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.SequenceContainsWhere<>.debugString(state:)(a1, a2, a3, a4, 36, 0xD000000000000013, (void *)0x80000001823A9070);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceContainsWhere<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceContainsWhere<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.SequenceAllSatisfy<>.debugString(state:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.SequenceContainsWhere<>.debugString(state:)(a1, a2, a3, a4, 31, 0x697461536C6C612ELL, (void *)0xEE00207B28796673);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.SequenceAllSatisfy<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.SequenceAllSatisfy<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.Filter<>.debugString(state:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.SequenceContainsWhere<>.debugString(state:)(a1, a2, a3, a4, 27, 0x287265746C69662ELL, (void *)0xEA0000000000207BLL);
}

uint64_t PredicateExpressions.SequenceContainsWhere<>.debugString(state:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6, void *a7)
{
  v79._uint64_t countAndFlagsBits = a6;
  v79._unint64_t object = a7;
  uint64_t v9 = v7;
  uint64_t v78 = *(int *)(a2 + 64);
  Swift::UInt v13 = *(void *)(v7 + v78);
  *(void *)&long long v83 = 0x656C626169726176;
  *((void *)&v83 + 1) = 0xE800000000000000;
  v82[0] = a1[1];
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  long long v81 = v83;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v83 = *a1;
  uint64_t v16 = v83;
  *a1 = 0x8000000000000000;
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_10;
  }
  char v8 = v17;
  if (*(void *)(v16 + 24) >= v21)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v22 = v16;
      if ((v17 & 1) == 0)
      {
LABEL_43:
        *(void *)(v22 + 8 * (v18 >> 6) + 64) |= 1 << v18;
        *(void *)(*(void *)(v22 + 48) + 8 * v18) = v13;
        *(_OWORD *)(*(void *)(v22 + 56) + 16 * v18) = v81;
        uint64_t v45 = *(void *)(v22 + 16);
        BOOL v46 = __OFADD__(v45, 1);
        uint64_t v47 = v45 + 1;
        if (v46)
        {
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
        *(void *)(v22 + 16) = v47;
LABEL_45:
        *a1 = v22;
        swift_bridgeObjectRelease();
        uint64_t v48 = a1[1];
        BOOL v46 = __OFADD__(v48, 1);
        uint64_t v49 = v48 + 1;
        if (v46)
        {
          __break(1u);
        }
        else
        {
          a1[1] = v49;
          *(void *)&long long v83 = 0;
          *((void *)&v83 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(a5);
          uint64_t v50 = (*(uint64_t (**)(uint64_t *, void, uint64_t))(a3 + 16))(a1, *(void *)(a2 + 16), a3);
          uint64_t v52 = v51;
          swift_bridgeObjectRelease();
          uint64_t v86 = v50;
          uint64_t v87 = v52;
          String.append(_:)(v79);
          uint64_t v53 = a1[2];
          uint64_t v54 = a1[3];
          Swift::UInt v55 = *(void *)(v9 + v78);
          long long v83 = *(_OWORD *)a1;
          uint64_t v84 = v53;
          uint64_t v85 = v54;
          v82[0] = v55;
          v56._uint64_t countAndFlagsBits = DebugStringConversionState.subscript.getter(v82);
          String.append(_:)(v56);
          swift_bridgeObjectRelease();
          v57._uint64_t countAndFlagsBits = 0x202020200A6E6920;
          v57._unint64_t object = (void *)0xE800000000000000;
          String.append(_:)(v57);
          uint64_t v58 = (*(uint64_t (**)(uint64_t *, void))(a4 + 16))(a1, *(void *)(a2 + 24));
          uint64_t v60 = HIBYTE(v59) & 0xF;
          if ((v59 & 0x2000000000000000) == 0) {
            uint64_t v60 = v58;
          }
          uint64_t v61 = 7;
          if (((v59 >> 60) & ((v58 & 0x800000000000000) == 0)) != 0) {
            uint64_t v61 = 11;
          }
          unint64_t v62 = v61 | (v60 << 16);
          if (specialized Sequence<>.starts<A>(with:)()) {
            unint64_t v63 = String.index(after:)();
          }
          else {
            unint64_t v63 = 15;
          }
          v64._uint64_t countAndFlagsBits = 41;
          v64._unint64_t object = (void *)0xE100000000000000;
          if (String.hasSuffix(_:)(v64)) {
            unint64_t v62 = String.index(before:)();
          }
          if (v62 >> 14 >= v63 >> 14)
          {
            v82[0] = String.subscript.getter();
            v82[1] = v65;
            v82[2] = v66;
            v82[3] = v67;
            lazy protocol witness table accessor for type Substring and conformance Substring();
            lazy protocol witness table accessor for type String and conformance String();
            RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
            swift_bridgeObjectRelease();
            uint64_t v68 = MEMORY[0x185301F50](v83, *((void *)&v83 + 1), v84, v85);
            uint64_t v70 = v69;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v71._uint64_t countAndFlagsBits = v68;
            v71._unint64_t object = v70;
            String.append(_:)(v71);
            swift_bridgeObjectRelease();
            v72._uint64_t countAndFlagsBits = 2718986;
            v72._unint64_t object = (void *)0xE300000000000000;
            String.append(_:)(v72);
            return v86;
          }
        }
        __break(1u);
        goto LABEL_59;
      }
LABEL_8:
      *(_OWORD *)(*(void *)(v22 + 56) + 16 * v18) = v81;
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
LABEL_10:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, String>);
    uint64_t v25 = static _DictionaryStorage.copy(original:)();
    uint64_t v22 = v25;
    if (*(void *)(v16 + 16))
    {
      unint64_t v26 = (void *)(v25 + 64);
      unint64_t v27 = (unint64_t)((1 << *(unsigned char *)(v22 + 32)) + 63) >> 6;
      if (v22 != v16 || (unint64_t)v26 >= v16 + 64 + 8 * v27) {
        memmove(v26, (const void *)(v16 + 64), 8 * v27);
      }
      uint64_t v74 = v16 + 64;
      int64_t v28 = 0;
      *(void *)(v22 + 16) = *(void *)(v16 + 16);
      uint64_t v29 = 1 << *(unsigned char *)(v16 + 32);
      uint64_t v30 = -1;
      if (v29 < 64) {
        uint64_t v30 = ~(-1 << v29);
      }
      unint64_t v31 = v30 & *(void *)(v16 + 64);
      int64_t v75 = (unint64_t)(v29 + 63) >> 6;
      while (1)
      {
        if (v31)
        {
          unint64_t v32 = __clz(__rbit64(v31));
          v31 &= v31 - 1;
          int64_t v76 = v28;
          unint64_t v33 = v32 | (v28 << 6);
        }
        else
        {
          int64_t v41 = v28 + 1;
          if (__OFADD__(v28, 1)) {
            goto LABEL_60;
          }
          if (v41 >= v75) {
            break;
          }
          unint64_t v42 = *(void *)(v74 + 8 * v41);
          int64_t v43 = v28 + 1;
          if (!v42)
          {
            int64_t v43 = v28 + 2;
            if (v28 + 2 >= v75) {
              break;
            }
            unint64_t v42 = *(void *)(v74 + 8 * v43);
            if (!v42)
            {
              int64_t v43 = v28 + 3;
              if (v28 + 3 >= v75) {
                break;
              }
              unint64_t v42 = *(void *)(v74 + 8 * v43);
              if (!v42)
              {
                int64_t v43 = v28 + 4;
                if (v28 + 4 >= v75) {
                  break;
                }
                unint64_t v42 = *(void *)(v74 + 8 * v43);
                if (!v42)
                {
                  int64_t v43 = v28 + 5;
                  if (v28 + 5 >= v75) {
                    break;
                  }
                  unint64_t v42 = *(void *)(v74 + 8 * v43);
                  if (!v42)
                  {
                    int64_t v43 = v28 + 6;
                    if (v28 + 6 >= v75) {
                      break;
                    }
                    unint64_t v42 = *(void *)(v74 + 8 * v43);
                    if (!v42)
                    {
                      int64_t v43 = v28 + 7;
                      if (v28 + 7 >= v75) {
                        break;
                      }
                      unint64_t v42 = *(void *)(v74 + 8 * v43);
                      if (!v42)
                      {
                        uint64_t v44 = v28 + 8;
                        if (v28 + 8 >= v75) {
                          break;
                        }
                        unint64_t v42 = *(void *)(v74 + 8 * v44);
                        if (!v42)
                        {
                          while (1)
                          {
                            int64_t v43 = v44 + 1;
                            if (__OFADD__(v44, 1)) {
                              goto LABEL_61;
                            }
                            if (v43 >= v75) {
                              goto LABEL_42;
                            }
                            unint64_t v42 = *(void *)(v74 + 8 * v43);
                            ++v44;
                            if (v42) {
                              goto LABEL_41;
                            }
                          }
                        }
                        int64_t v43 = v28 + 8;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_41:
          unint64_t v31 = (v42 - 1) & v42;
          int64_t v76 = v43;
          unint64_t v33 = __clz(__rbit64(v42)) + (v43 << 6);
        }
        uint64_t v34 = 8 * v33;
        uint64_t v35 = *(void *)(*(void *)(v16 + 48) + 8 * v33);
        uint64_t v36 = 16 * v33;
        int64_t v37 = (uint64_t *)(*(void *)(v16 + 56) + v36);
        uint64_t v39 = *v37;
        uint64_t v38 = v37[1];
        *(void *)(*(void *)(v22 + 48) + v34) = v35;
        uint64_t v40 = (void *)(*(void *)(v22 + 56) + v36);
        void *v40 = v39;
        v40[1] = v38;
        swift_bridgeObjectRetain();
        int64_t v28 = v76;
      }
    }
LABEL_42:
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_8;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
  uint64_t v22 = v83;
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
  if ((v8 & 1) == (v24 & 1))
  {
    unint64_t v18 = v23;
    if ((v8 & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_8;
  }
LABEL_62:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.Filter<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.Filter<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.StringContainsRegex<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v11 = v5(a1, v6);
  v7._uint64_t countAndFlagsBits = 0x6E6961746E6F632ELL;
  v7._unint64_t object = (void *)0xEA00000000002873;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(a1, v6, a3);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 41;
  v9._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return v11;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.StringContainsRegex<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.StringContainsRegex<>.debugString(state:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t PredicateExpressions.ExpressionEvaluate<>.debugString(state:)(uint64_t TupleTypeMetadata, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v57 = a3;
  uint64_t v60 = TupleTypeMetadata;
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7 == 1)
  {
    uint64_t v8 = *(void *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](TupleTypeMetadata);
    Swift::String v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      unint64_t v11 = 0;
      unint64_t v12 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v7 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v10[-v12] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v11 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      Swift::UInt v13 = (long long *)(v12 + 16);
      Swift::String v14 = v10 + 16;
      unint64_t v15 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        *Swift::String v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v7 != v11)
      {
LABEL_9:
        unint64_t v17 = v7 - v11;
        uint64_t v18 = 8 * v11;
        uint64_t v19 = &v10[8 * v11];
        BOOL v20 = (uint64_t *)(v12 + v18);
        do
        {
          uint64_t v21 = *v20++;
          *(void *)uint64_t v19 = v21;
          v19 += 8;
          --v17;
        }
        while (v17);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v8 = TupleTypeMetadata;
  }
  double v22 = MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v56 = v4;
  uint64_t v53 = v24;
  uint64_t v25 = *(uint64_t (**)(double))(v24 + 16);
  unint64_t v59 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t isUniquelyReferenced_nonNull_native = v25(v22);
  uint64_t v54 = v8;
  uint64_t v55 = a2;
  if (v7)
  {
    unint64_t v27 = (uint64_t *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    int64_t v28 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v29 = v8 + 32;
    uint64_t v30 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v31 = v7;
    unint64_t v58 = v7;
    do
    {
      unint64_t v32 = v30;
      uint64_t v33 = *v27;
      uint64_t v34 = *v28;
      uint64_t v35 = *(void *)(*v27 - 8);
      double v36 = MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native);
      uint64_t v38 = (char *)&v53 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v35 + 16))(v38, v36);
      uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v60, v33, v34);
      uint64_t v40 = v39;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v33);
      uint64_t v30 = v32;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
        uint64_t v30 = (void *)isUniquelyReferenced_nonNull_native;
      }
      unint64_t v42 = v30[2];
      unint64_t v41 = v30[3];
      if (v42 >= v41 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1, v30);
        uint64_t v30 = (void *)isUniquelyReferenced_nonNull_native;
      }
      _OWORD v30[2] = v42 + 1;
      int64_t v43 = &v30[2 * v42];
      v43[4] = v61;
      v43[5] = v40;
      v29 += 16;
      ++v28;
      ++v27;
      --v31;
    }
    while (v31);
  }
  else
  {
    uint64_t v30 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v63 = (*(uint64_t (**)(uint64_t, void))(v57 + 16))(v60, *(void *)(v55 + 24));
  uint64_t v64 = v44;
  v45._uint64_t countAndFlagsBits = 0x7461756C6176652ELL;
  v45._unint64_t object = (void *)0xEA00000000002865;
  String.append(_:)(v45);
  unint64_t v62 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  uint64_t v46 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v48 = v47;
  swift_bridgeObjectRelease();
  v49._uint64_t countAndFlagsBits = v46;
  v49._unint64_t object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._uint64_t countAndFlagsBits = 41;
  v50._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  uint64_t v51 = v63;
  (*(void (**)(char *, uint64_t))(v53 + 8))(v59, v54);
  return v51;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.ExpressionEvaluate<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.PredicateEvaluate<>.debugString(state:)(uint64_t TupleTypeMetadata, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v57 = a3;
  uint64_t v60 = TupleTypeMetadata;
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7 == 1)
  {
    uint64_t v8 = *(void *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x1F4188790](TupleTypeMetadata);
    Swift::String v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      unint64_t v11 = 0;
      unint64_t v12 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (v7 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v10[-v12] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v11 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      Swift::UInt v13 = (long long *)(v12 + 16);
      Swift::String v14 = v10 + 16;
      unint64_t v15 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        *Swift::String v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v7 != v11)
      {
LABEL_9:
        unint64_t v17 = v7 - v11;
        uint64_t v18 = 8 * v11;
        uint64_t v19 = &v10[8 * v11];
        BOOL v20 = (uint64_t *)(v12 + v18);
        do
        {
          uint64_t v21 = *v20++;
          *(void *)uint64_t v19 = v21;
          v19 += 8;
          --v17;
        }
        while (v17);
      }
    }
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v8 = TupleTypeMetadata;
  }
  double v22 = MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v56 = v4;
  uint64_t v53 = v24;
  uint64_t v25 = *(uint64_t (**)(double))(v24 + 16);
  unint64_t v59 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t isUniquelyReferenced_nonNull_native = v25(v22);
  uint64_t v54 = v8;
  uint64_t v55 = a2;
  if (v7)
  {
    unint64_t v27 = (uint64_t *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
    int64_t v28 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v29 = v8 + 32;
    uint64_t v30 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v31 = v7;
    unint64_t v58 = v7;
    do
    {
      unint64_t v32 = v30;
      uint64_t v33 = *v27;
      uint64_t v34 = *v28;
      uint64_t v35 = *(void *)(*v27 - 8);
      double v36 = MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native);
      uint64_t v38 = (char *)&v53 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v35 + 16))(v38, v36);
      uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v60, v33, v34);
      uint64_t v40 = v39;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v33);
      uint64_t v30 = v32;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
        uint64_t v30 = (void *)isUniquelyReferenced_nonNull_native;
      }
      unint64_t v42 = v30[2];
      unint64_t v41 = v30[3];
      if (v42 >= v41 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1, v30);
        uint64_t v30 = (void *)isUniquelyReferenced_nonNull_native;
      }
      _OWORD v30[2] = v42 + 1;
      int64_t v43 = &v30[2 * v42];
      v43[4] = v61;
      v43[5] = v40;
      v29 += 16;
      ++v28;
      ++v27;
      --v31;
    }
    while (v31);
  }
  else
  {
    uint64_t v30 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v63 = (*(uint64_t (**)(uint64_t, void))(v57 + 16))(v60, *(void *)(v55 + 24));
  uint64_t v64 = v44;
  v45._uint64_t countAndFlagsBits = 0x7461756C6176652ELL;
  v45._unint64_t object = (void *)0xEA00000000002865;
  String.append(_:)(v45);
  unint64_t v62 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  uint64_t v46 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v48 = v47;
  swift_bridgeObjectRelease();
  v49._uint64_t countAndFlagsBits = v46;
  v49._unint64_t object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._uint64_t countAndFlagsBits = 41;
  v50._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  uint64_t v51 = v63;
  (*(void (**)(char *, uint64_t))(v53 + 8))(v59, v54);
  return v51;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.PredicateEvaluate<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.StringCaseInsensitiveCompare<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _StringGuts.grow(_:)(29);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void, uint64_t))(a3 + 16))(a1, *(void *)(a2 + 16), a3);
  swift_bridgeObjectRelease();
  v9._unint64_t object = (void *)0x80000001823A9090;
  v9._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 41;
  v11._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return v8;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.StringCaseInsensitiveCompare<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

id createDescription<each A, B, C>(variable:expression:typeName:outputType:)(uint64_t **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  v107._unint64_t object = a7;
  v106[0] = a5;
  uint64_t v109 = a4;
  uint64_t v108 = a3;
  Swift::String v10 = a1;
  uint64_t v11 = *(void *)(a9 - 8);
  v13.n128_f64[0] = MEMORY[0x1F4188790](a1);
  unint64_t v15 = (char *)v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v16 = (void *)MEMORY[0x1E4FBC860];
  if (v17)
  {
    v107._uint64_t countAndFlagsBits = v12;
    long long v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860], &demangling cache variable for type metadata for _ContiguousArrayStorage<PredicateExpressions.VariableID>);
    unint64_t v18 = v16[2];
    uint64_t v19 = a6;
    do
    {
      uint64_t v20 = **v10;
      unint64_t v21 = v16[3];
      if (v18 >= v21 >> 1) {
        long long v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v18 + 1, 1, v16, &demangling cache variable for type metadata for _ContiguousArrayStorage<PredicateExpressions.VariableID>);
      }
      void v16[2] = v18 + 1;
      v16[v18 + 4] = v20;
      ++v10;
      ++v18;
      --v19;
    }
    while (v19);
  }
  (*(void (**)(char *, __n128))(v11 + 16))(v15, v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DebugStringConvertiblePredicateExpression);
  if (!swift_dynamicCast()) {
    goto LABEL_60;
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v125, (uint64_t)&v128);
  if (a6)
  {
    double v22 = (uint64_t *)((unint64_t)v107._object & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v24 = v23[2];
    do
    {
      unint64_t v25 = v23[3];
      int64_t v26 = v24 + 1;
      if (v24 >= v25 >> 1) {
        uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v24 + 1, 1, v23);
      }
      uint64_t v27 = *v22++;
      v23[2] = v26;
      v23[v24++ + 4] = v27;
      --a6;
    }
    while (a6);
  }
  else
  {
    uint64_t v28 = MEMORY[0x1E4FBC860];
    int64_t v26 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (!v26) {
      goto LABEL_19;
    }
  }
  *(void *)&long long v125 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
  uint64_t v29 = 0;
  uint64_t v28 = v125;
  do
  {
    uint64_t v30 = _typeName(_:qualified:)();
    uint64_t v32 = v31;
    *(void *)&long long v125 = v28;
    unint64_t v34 = *(void *)(v28 + 16);
    unint64_t v33 = *(void *)(v28 + 24);
    if (v34 >= v33 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
      uint64_t v28 = v125;
    }
    ++v29;
    *(void *)(v28 + 16) = v34 + 1;
    uint64_t v35 = v28 + 16 * v34;
    *(void *)(v35 + 32) = v30;
    *(void *)(v35 + 40) = v32;
  }
  while (v26 != v29);
  swift_bridgeObjectRelease();
LABEL_19:
  *(void *)&long long v125 = v28;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v106[3] = lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  v107._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
  v107._unint64_t object = v37;
  swift_bridgeObjectRelease();
  uint64_t v38 = swift_bridgeObjectRetain();
  uint64_t v39 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay10Foundation20PredicateExpressionsO10VariableIDVGG_AL_SSts5NeverOTg5018_sSi10Foundation20gh3O10i43IDVAESSIgynro_Si6offset_AE7elementtAE_SSts5k70OIegnrzr_TR053_s10Foundation26DebugStringConversionStateVyACSayAA20bc3O37D24IDVGcfcAG_SStSi_AGtXEfU_Tf3nnnpf_nTf1cn_n(v38);
  v106[2] = 0;
  v106[1] = v16;
  swift_bridgeObjectRelease();
  if (*(void *)(v39 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, String>);
    uint64_t v40 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v41 = *(void *)(v39 + 16);
  }
  else
  {
    uint64_t v41 = 0;
    uint64_t v40 = (void *)MEMORY[0x1E4FBC868];
  }
  v106[4] = v36;
  uint64_t v118 = (uint64_t)v40;
  swift_bridgeObjectRetain_n();
  if (v41)
  {
    unint64_t v42 = 0;
    int64_t v43 = (uint64_t *)(v39 + 48);
    while (v42 < *(void *)(v39 + 16))
    {
      uint64_t v44 = *(v43 - 1);
      uint64_t v45 = *v43;
      Swift::UInt v46 = *(v43 - 2);
      swift_bridgeObjectRetain();
      if (!v45) {
        goto LABEL_32;
      }
      uint64_t v114 = v46;
      unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v46);
      uint64_t v49 = v40[2];
      BOOL v50 = (v48 & 1) == 0;
      BOOL v51 = __OFADD__(v49, v50);
      uint64_t v52 = v49 + v50;
      if (v51) {
        goto LABEL_52;
      }
      char v53 = v48;
      if (v40[3] < v52)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, 1);
        uint64_t v40 = (void *)v118;
        unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v46);
        if ((v53 & 1) != (v54 & 1)) {
          goto LABEL_58;
        }
      }
      if (v53) {
        goto LABEL_55;
      }
      v40[(v47 >> 6) + 8] |= 1 << v47;
      *(void *)(v40[6] + 8 * v47) = v46;
      uint64_t v55 = (void *)(v40[7] + 16 * v47);
      *uint64_t v55 = v44;
      v55[1] = v45;
      uint64_t v56 = v40[2];
      BOOL v51 = __OFADD__(v56, 1);
      uint64_t v57 = v56 + 1;
      if (v51) {
        goto LABEL_53;
      }
      ++v42;
      v40[2] = v57;
      v43 += 3;
      if (v41 == v42) {
        goto LABEL_32;
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    uint64_t v102 = (void *)swift_allocError();
    swift_willThrow();
    id v123 = v102;
    id v103 = v102;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_59;
    }
    *(void *)&long long v125 = 0;
    *((void *)&v125 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    v104._unint64_t object = (void *)0x80000001823A92C0;
    v104._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v104);
    _print_unlocked<A, B>(_:_:)();
    v105._uint64_t countAndFlagsBits = 39;
    v105._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v105);
    while (1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_58:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
LABEL_59:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      swift_unexpectedError();
      __break(1u);
LABEL_60:
      uint64_t v127 = 0;
      long long v125 = 0u;
      long long v126 = 0u;
      outlined destroy of Any?((uint64_t)&v125, &demangling cache variable for type metadata for DebugStringConvertiblePredicateExpression?);
    }
  }
LABEL_32:
  swift_bridgeObjectRelease_n();
  *(void *)&long long v125 = v40;
  *((void *)&v125 + 1) = 1;
  *(void *)&long long v126 = MEMORY[0x1E4FBC860];
  *((void *)&v126 + 1) = 1;
  uint64_t v58 = swift_bridgeObjectRetain();
  uint64_t v59 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation20PredicateExpressionsO10VariableIDVG_SSs5NeverOTg50118_s10Foundation17createDescription33_0E6808C72783E37C9BBD8DD29A9ABF158variable10expression8typeName10outputTypeSSAA20ef2O8G70Vy_xGxQp_q0_SSq_mtRvzAA08StandardR10ExpressionR0_r1_lFSSAI0T2IDVXEfU0_AF26DebugStringConversionStateVTf1cn_n(v58, (uint64_t *)&v125);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v118 = v59;
  uint64_t v60 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v62 = v61;
  swift_bridgeObjectRelease();
  uint64_t v63 = v129;
  uint64_t v64 = v130;
  __swift_project_boxed_opaque_existential_1(&v128, v129);
  uint64_t v65 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v64 + 16))(&v125, v63, v64);
  unint64_t v67 = v66;
  uint64_t v68 = v126;
  uint64_t v118 = v126;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  uint64_t v69 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v71 = v70;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  Swift::String v72 = (void *)(HIBYTE(v71) & 0xF);
  if ((v71 & 0x2000000000000000) == 0) {
    Swift::String v72 = (void *)(v69 & 0xFFFFFFFFFFFFLL);
  }
  if (v72)
  {
    uint64_t v118 = v68;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    uint64_t v73 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v75 = v74;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v118 = v73;
    unint64_t v119 = v75;
    v76._uint64_t countAndFlagsBits = 10;
    v76._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v76);
    Swift::String v72 = (void *)v118;
    unint64_t v77 = v119;
  }
  else
  {
    unint64_t v77 = 0xE000000000000000;
  }
  id v123 = v72;
  unint64_t v124 = v77;
  if (v106[0] == MEMORY[0x1E4FBC848] + 8)
  {
    uint64_t v79 = 0;
    uint64_t v80 = (void *)0xE000000000000000;
  }
  else
  {
    uint64_t v118 = 8236;
    unint64_t v119 = 0xE200000000000000;
    v78._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v78);
    swift_bridgeObjectRelease();
    uint64_t v79 = v118;
    uint64_t v80 = (void *)v119;
  }
  uint64_t v118 = 0;
  unint64_t v119 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  long long v81 = v109;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v122._uint64_t countAndFlagsBits = v108;
  v122._unint64_t object = v81;
  v82._uint64_t countAndFlagsBits = 60;
  v82._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v82);
  String.append(_:)(v107);
  swift_bridgeObjectRelease();
  v83._uint64_t countAndFlagsBits = v79;
  v83._unint64_t object = v80;
  String.append(_:)(v83);
  swift_bridgeObjectRelease();
  v84._uint64_t countAndFlagsBits = 544940094;
  v84._unint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v84);
  v85._uint64_t countAndFlagsBits = v60;
  v85._unint64_t object = v62;
  String.append(_:)(v85);
  swift_bridgeObjectRelease();
  v86._uint64_t countAndFlagsBits = 0x202020200A6E6920;
  v86._unint64_t object = (void *)0xE800000000000000;
  String.append(_:)(v86);
  uint64_t v87 = HIBYTE(v67) & 0xF;
  if ((v67 & 0x2000000000000000) == 0) {
    uint64_t v87 = v65;
  }
  uint64_t v88 = 7;
  if (((v67 >> 60) & ((v65 & 0x800000000000000) == 0)) != 0) {
    uint64_t v88 = 11;
  }
  unint64_t v89 = v88 | (v87 << 16);
  if (specialized Sequence<>.starts<A>(with:)()) {
    unint64_t v90 = String.index(after:)();
  }
  else {
    unint64_t v90 = 15;
  }
  v91._uint64_t countAndFlagsBits = 41;
  v91._unint64_t object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v91)) {
    unint64_t v89 = String.index(before:)();
  }
  if (v89 >> 14 < v90 >> 14) {
    goto LABEL_54;
  }
  uint64_t v114 = String.subscript.getter();
  uint64_t v115 = v92;
  uint64_t v116 = v93;
  uint64_t v117 = v94;
  uint64_t v112 = 10;
  unint64_t v113 = 0xE100000000000000;
  uint64_t v110 = 0x202020200ALL;
  unint64_t v111 = 0xE500000000000000;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  lazy protocol witness table accessor for type String and conformance String();
  RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
  swift_bridgeObjectRelease();
  uint64_t v95 = MEMORY[0x185301F50](v118, v119, v120, v121);
  BOOL v97 = v96;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v98._uint64_t countAndFlagsBits = v95;
  v98._unint64_t object = v97;
  String.append(_:)(v98);
  swift_bridgeObjectRelease();
  v99._uint64_t countAndFlagsBits = 32010;
  v99._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v99);
  String.append(_:)(v122);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v100 = v123;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v128);
  return v100;
}

id Expression.description.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = 8 * v4;
  if (v4 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    uint64_t v7 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if (v4)
    {
      unint64_t v8 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
      Swift::String v9 = (void *)((char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v10 = v4;
      do
      {
        v8 += 8;
        *v9++ = type metadata accessor for PredicateExpressions.Variable();
        --v10;
      }
      while (v10);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v7 = TupleTypeMetadata;
  }
  uint64_t v11 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  __n128 v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[2] = v28;
  MEMORY[0x1F4188790](v14);
  long long v16 = (char *)v28 - v15;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v2, (uint64_t)v29);
  uint64_t v17 = v30;
  v28[0] = v31;
  unint64_t v18 = __swift_project_boxed_opaque_existential_1(v29, v30);
  v28[1] = v28;
  double v19 = MEMORY[0x1F4188790](v18);
  uint64_t v20 = (uint64_t **)((char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, v2 + *(int *)(a1 + 44), v7, v19);
  if (v4)
  {
    unint64_t v21 = (int *)(v7 + 32);
    double v22 = v20;
    uint64_t v23 = v4;
    do
    {
      if (v4 == 1)
      {
        LODWORD(v24) = 0;
        unint64_t v25 = v16;
      }
      else
      {
        uint64_t v24 = *v21;
        unint64_t v25 = &v16[v24];
      }
      *(void *)unint64_t v25 = *(void *)&v13[(int)v24];
      *v22++ = (uint64_t *)v25;
      v21 += 4;
      --v23;
    }
    while (v23);
  }
  id v26 = createDescription<each A, B, C>(variable:expression:typeName:outputType:)(v20, (uint64_t)v18, 0x6973736572707845, (void *)0xEA00000000006E6FLL, *(void *)(a1 + 32), v4, *(void **)(a1 + 24), *(void *)(a1 + 32), v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return v26;
}

uint64_t Predicate.debugDescription.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    uint64_t v5 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if (v3)
    {
      unint64_t v7 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v8 = (void *)((char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v9 = v3;
      do
      {
        v7 += 8;
        *v8++ = type metadata accessor for PredicateExpressions.Variable();
        --v9;
      }
      while (v9);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v5 = TupleTypeMetadata;
  }
  double v10 = MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = a1;
  _OWORD v34[2] = v1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v12, v1 + *(int *)(a1 + 36), v5, v10);
  if (v3)
  {
    uint64_t v14 = (int *)(v5 + 32);
    uint64_t v15 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v16 = v3;
    do
    {
      if (v3 == 1) {
        int v17 = 0;
      }
      else {
        int v17 = *v14;
      }
      uint64_t v35 = *(void **)&v12[v17];
      uint64_t v36 = 0x656C626169726156;
      unint64_t v37 = 0xE900000000000028;
      v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._uint64_t countAndFlagsBits = 41;
      v19._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      uint64_t v21 = v36;
      unint64_t v20 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
      }
      unint64_t v23 = v15[2];
      unint64_t v22 = v15[3];
      if (v23 >= v22 >> 1) {
        uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v15);
      }
      v15[2] = v23 + 1;
      uint64_t v24 = &v15[2 * v23];
      v24[4] = v21;
      v24[5] = v20;
      v14 += 4;
      --v16;
    }
    while (v16);
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v36 = 0;
  unint64_t v37 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  v25._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 0x6C62616972617628;
  v26._unint64_t object = (void *)0xEC00000028203A65;
  String.append(_:)(v26);
  uint64_t v35 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  uint64_t v27 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = v27;
  v30._unint64_t object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 0x6572707865202C29;
  v31._unint64_t object = (void *)0xEF203A6E6F697373;
  String.append(_:)(v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>);
  _print_unlocked<A, B>(_:_:)();
  v32._uint64_t countAndFlagsBits = 41;
  v32._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  return v36;
}

uint64_t Expression.debugDescription.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    uint64_t v5 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if (v3)
    {
      unint64_t v7 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v8 = (uint64_t *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v9 = v3;
      do
      {
        v7 += 8;
        *v8++ = type metadata accessor for PredicateExpressions.Variable();
        --v9;
      }
      while (v9);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v5 = TupleTypeMetadata;
  }
  double v10 = MEMORY[0x1F4188790](TupleTypeMetadata);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a1;
  uint64_t v37 = v1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v12, v1 + *(int *)(a1 + 44), v5, v10);
  if (v3)
  {
    uint64_t v14 = (int *)(v5 + 32);
    uint64_t v15 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v16 = v3;
    do
    {
      if (v3 == 1) {
        int v17 = 0;
      }
      else {
        int v17 = *v14;
      }
      uint64_t v38 = *(void **)&v12[v17];
      uint64_t v39 = 0x656C626169726156;
      unint64_t v40 = 0xE900000000000028;
      v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._uint64_t countAndFlagsBits = 41;
      v19._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      uint64_t v21 = v39;
      unint64_t v20 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
      }
      unint64_t v23 = v15[2];
      unint64_t v22 = v15[3];
      if (v23 >= v22 >> 1) {
        uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v15);
      }
      v15[2] = v23 + 1;
      uint64_t v24 = &v15[2 * v23];
      v24[4] = v21;
      v24[5] = v20;
      v14 += 4;
      --v16;
    }
    while (v16);
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v39 = 0;
  unint64_t v40 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  uint64_t v25 = v36;
  v26._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 0x6C62616972617628;
  v27._unint64_t object = (void *)0xEC00000028203A65;
  String.append(_:)(v27);
  uint64_t v38 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  uint64_t v28 = BidirectionalCollection<>.joined(separator:)();
  Swift::String v30 = v29;
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = v28;
  v31._unint64_t object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = 0x6572707865202C29;
  v32._unint64_t object = (void *)0xEF203A6E6F697373;
  String.append(_:)(v32);
  uint64_t v38 = *(void **)(v25 + 32);
  swift_getExtendedExistentialTypeMetadata();
  _print_unlocked<A, B>(_:_:)();
  v33._uint64_t countAndFlagsBits = 41;
  v33._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  return v39;
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2, char a3)
{
  Hasher.init(_seed:)();
  if ((a3 & 1) == 0)
  {
    uint64_t v5 = 10;
    if (a2 < 10) {
      uint64_t v5 = a2;
    }
    if (v5 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v5;
    }
    MEMORY[0x185302340](103, 0xE100000000000000, v6);
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  uint64_t v5;
  uint64_t v6;

  Hasher.init(_seed:)();
  if ((a3 & 1) == 0)
  {
    uint64_t v5 = 10;
    if (a2 < 10) {
      uint64_t v5 = a2;
    }
    if (v5 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v5;
    }
    MEMORY[0x185302340](89, 0xE100000000000000, v6);
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  Swift::Int v2 = specialized RawRepresentable<>._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 *a1)
{
  Hasher.init(_seed:)();
  memcpy(__dst, a1, sizeof(__dst));
  Swift::UInt v2 = a1[352];
  Locale.Components.hash(into:)((uint64_t)v6);
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v3 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)((uint64_t)a1, v3);
}

{
  uint64_t v2;
  long long v3;
  uint64_t v4;
  uint64_t ObjectType;
  void (*v6)(unsigned char *, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  Swift::UInt8 v10;
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned char *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  Swift::UInt v39;
  Swift::UInt v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  Swift::Int v44;
  unsigned char v46[144];
  unsigned char v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  void v65[18];
  unsigned char v66[144];
  unsigned char v67[144];
  unsigned char v68[72];
  long long v69;
  _OWORD v70[2];

  Hasher.init(_seed:)();
  Swift::UInt v2 = *((void *)a1 + 1);
  Hasher._combine(_:)(*a1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(v68, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v3 = *((_OWORD *)a1 + 1);
  uint64_t v69 = *((_OWORD *)a1 + 2);
  v70[0] = v3;
  uint64_t v4 = *((void *)&v3 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 120);
  outlined retain of Locale((uint64_t)v70);
  v6(v68, ObjectType, v4);
  outlined release of Locale((uint64_t)v70);
  unint64_t v7 = *((void *)&v69 + 1);
  unint64_t v8 = swift_getObjectType();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 48);
  outlined retain of Locale((uint64_t)&v69);
  if (v9(v8, v7))
  {
    double v10 = 1;
LABEL_8:
    Hasher._combine(_:)(v10);
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v7 + 64))(v8, v7);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 464);
  outlined retain of Locale((uint64_t)&v69);
  v11(v65, v8, v7);
  outlined release of Locale((uint64_t)&v69);
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v66, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v67, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v67) == 1)
  {
    double v10 = 0;
    goto LABEL_8;
  }
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v47, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v47[0] == 2)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = v47[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  uint64_t v13 = v48;
  if (!v48)
  {
    Hasher._combine(_:)(0);
    Swift::String v18 = v47;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v13 + 16));
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v46, &demangling cache variable for type metadata for LocalePreferences?);
    Swift::String v18 = v46;
LABEL_23:
    outlined retain of LocalePreferences(v18);
    if (!v49) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v50) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v50)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    uint64_t v16 = v51;
    if (!v51) {
      goto LABEL_19;
    }
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v16);
    swift_bridgeObjectRelease();
    int v17 = v52;
    if (!v52) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = v51;
  if (v51) {
    goto LABEL_26;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  int v17 = v52;
  if (!v52)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v17);
  swift_bridgeObjectRelease();
LABEL_28:
  unint64_t v20 = v53;
  Swift::String v19 = v54;
  unint64_t v22 = v55;
  uint64_t v21 = v56;
  unint64_t v23 = v57;
  if (v53)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v24 = v19;
    uint64_t v25 = v22;
    Swift::String v26 = v21;
    Swift::String v27 = v23;
    uint64_t v28 = v20;
    _CFObject.hash(into:)();
    if (v19) {
      goto LABEL_30;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    Swift::String v33 = v23;
    unint64_t v34 = v19;
    uint64_t v35 = v22;
    uint64_t v36 = v21;
    if (v19)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v29 = v19;
      _CFObject.hash(into:)();

      if (v22) {
        goto LABEL_31;
      }
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (v22)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    Swift::String v30 = v22;
    _CFObject.hash(into:)();

    if (v21) {
      goto LABEL_32;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v23) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  if (!v21) {
    goto LABEL_37;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  Swift::String v31 = v21;
  _CFObject.hash(into:)();

  if (v23)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    Swift::String v32 = v23;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }
LABEL_38:
  Hasher._combine(_:)(0);
  Swift::String v32 = 0;
LABEL_39:

  uint64_t v37 = v58;
  if (v37)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v37);
    swift_bridgeObjectRelease();
    uint64_t v38 = v59;
    if (v59) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    if (v60) {
      goto LABEL_42;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(0);
  uint64_t v38 = v59;
  if (!v59) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v38);
  swift_bridgeObjectRelease();
  if (!v60) {
    goto LABEL_45;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v39 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v40 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  if (v63 == 2)
  {
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v41 = v63 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v41);
  if (v64 == 2)
  {
    unint64_t v42 = 0;
  }
  else
  {
    int64_t v43 = v64 & 1;
    Hasher._combine(_:)(1u);
    unint64_t v42 = v43;
  }
  Hasher._combine(_:)(v42);
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_59:
  outlined release of Locale((uint64_t)&v69);
  Hasher._combine(_:)(a1[48] & 1);
  uint64_t v44 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v44);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, unsigned int a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2 & 1);
  Hasher._combine(_:)((a2 >> 8) & 1);
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2 & 0x101, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((a3 & 0x100000000) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a3);
  }
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(HIDWORD(a4));
  Swift::Int v8 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, v8);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, int a3)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(a3 & 1);
  Swift::Int v6 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = *(void *)&aSun_1[8 * a1];
    while (*(void *)&aSun_1[8 * *(char *)(*(void *)(v2 + 48) + v4)] != v6)
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease_n();
      if ((v7 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    do
    {
      if (!((*(void *)(*(void *)(v3 + 48) + 16 * result) != a1) | (a2 ^ *(unsigned __int8 *)(*(void *)(v3 + 48)
                                                                                                + 16 * result
                                                                                                + 8)) & 1 | (*(unsigned __int8 *)(*(void *)(v3 + 48) + 16 * result + 9) ^ ((unsigned __int16)(a2 & 0x100) >> 8)) & 1))
        break;
      unint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v11 = a2 & ~v10;
  if (((*(void *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return v11;
  }
  uint64_t v12 = ~v10;
  uint64_t v13 = *(void *)(v7 + 72);
  Swift::String v82 = &v120;
  while (1)
  {
    outlined init with copy of ICUNumberFormatter.Signature(*(void *)(v3 + 48) + v13 * v11, (uint64_t)v9, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    if (!specialized static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)((uint64_t)v9, a1)) {
      goto LABEL_5;
    }
    uint64_t v14 = v6[5];
    uint64_t v15 = *(void *)&v9[v14];
    uint64_t v16 = *(void *)&v9[v14 + 8];
    int v17 = (void *)(a1 + v14);
    BOOL v18 = v15 == *v17 && v16 == v17[1];
    if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_5;
    }
    uint64_t v19 = v6[6];
    uint64_t v20 = *(void *)&v9[v19];
    uint64_t v21 = *(void *)&v9[v19 + 8];
    unint64_t v22 = (void *)(a1 + v19);
    BOOL v23 = v20 == *v22 && v21 == v22[1];
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)&v9[v6[7]], (uint64_t)v121, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?(a1 + v6[7], (uint64_t)v122, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v123, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v123) == 1)
    {
      outlined init with take of LocalePreferences?((uint64_t)v122, (uint64_t)v119, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v119) == 1) {
        goto LABEL_154;
      }
      goto LABEL_4;
    }
    outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)&v111, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v122, (uint64_t)v119, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v119) == 1)
    {
      v83[6] = v117;
      v84[0] = v118[0];
      *(_OWORD *)((char *)v84 + 12) = *(_OWORD *)((char *)v118 + 12);
      v83[2] = v113;
      v83[3] = v114;
      v83[4] = v115;
      v83[5] = v116;
      v83[0] = v111;
      v83[1] = v112;
      outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v85, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)&v90, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences(&v90);
      outlined retain of LocalePreferences(v85);
      outlined release of LocalePreferences(v83);
LABEL_4:
      outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v119, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v122, (uint64_t)v82, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v119);
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v122, (uint64_t)&v90, &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v24 = (uint64_t *)*((void *)&v111 + 1);
    uint64_t v81 = *((void *)&v112 + 1);
    uint64_t v77 = v113;
    uint64_t v79 = v112;
    uint64_t v80 = *((void *)&v113 + 1);
    uint64_t v78 = v114;
    id v74 = (id)v115;
    uint64_t v75 = *((void *)&v114 + 1);
    id v72 = (id)v116;
    id v73 = (id)*((void *)&v115 + 1);
    id v70 = (id)v117;
    id v71 = (id)*((void *)&v116 + 1);
    uint64_t v68 = *(void *)&v118[0];
    uint64_t v69 = *((void *)&v117 + 1);
    uint64_t v66 = *((void *)&v118[0] + 1);
    uint64_t v67 = *(void *)&v118[1];
    int v64 = BYTE9(v118[1]);
    int v65 = BYTE8(v118[1]);
    int v61 = BYTE11(v118[1]);
    int v62 = BYTE10(v118[1]);
    int v63 = v111;
    Swift::String v76 = (uint64_t *)*((void *)&v111 + 1);
    if (v111 == 2)
    {
      if (v90 != 2) {
        goto LABEL_39;
      }
    }
    else if (v90 == 2 || ((((v111 & 1) == 0) ^ v90) & 1) == 0)
    {
LABEL_39:
      outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v83, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v85, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences(v85);
      unint64_t v34 = v83;
LABEL_40:
      outlined retain of LocalePreferences(v34);
      goto LABEL_41;
    }
    uint64_t v25 = v91;
    if (!*((void *)&v111 + 1))
    {
      id v60 = (id)v12;
      if (!v91) {
        goto LABEL_57;
      }
      outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v83, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v85, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences(v85);
      uint64_t v36 = v83;
LABEL_46:
      outlined retain of LocalePreferences(v36);
      goto LABEL_47;
    }
    if (!v91) {
      goto LABEL_39;
    }
    uint64_t v26 = *(void *)(*((void *)&v111 + 1) + 16);
    if (v26 != v91[2])
    {
      outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v85, &demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      unint64_t v34 = v85;
      goto LABEL_40;
    }
    id v60 = (id)v12;
    if (!v26 || *((void **)&v111 + 1) == v91) {
      goto LABEL_57;
    }
    if (*(void *)(*((void *)&v111 + 1) + 32) != v91[4] || *(void *)(*((void *)&v111 + 1) + 40) != v91[5])
    {
      uint64_t v27 = v26;
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v26 = v27;
      uint64_t v24 = v76;
      if ((v28 & 1) == 0)
      {
LABEL_76:
        outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v85, &demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        uint64_t v36 = v85;
        goto LABEL_46;
      }
    }
    if (v26 != 1)
    {
      uint64_t result = v24[6];
      if (result != v25[6] || v24[7] != v25[7])
      {
        uint64_t v30 = v26;
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v26 = v30;
        uint64_t v24 = v76;
        if ((result & 1) == 0) {
          goto LABEL_76;
        }
      }
      Swift::String v31 = (char *)(v26 - 2);
      if (v26 != 2) {
        break;
      }
    }
LABEL_57:
    if (v81)
    {
      uint64_t v12 = (uint64_t)v60;
      if (!v93 || (v79 != v92 || v81 != v93) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
LABEL_87:
        outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        unint64_t v40 = v121;
        uint64_t v41 = outlined copy of LocalePreferences?;
        goto LABEL_88;
      }
    }
    else
    {
      uint64_t v12 = (uint64_t)v60;
      if (v93) {
        goto LABEL_87;
      }
    }
    if (v80)
    {
      if (!v95 || (v77 != v94 || v80 != v95) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_87;
      }
    }
    else if (v95)
    {
      goto LABEL_87;
    }
    if (v78)
    {
      if (!v96 || (specialized static Dictionary<>.== infix(_:_:)(v78, v96) & 1) == 0) {
        goto LABEL_87;
      }
    }
    else if (v96)
    {
      goto LABEL_87;
    }
    if (v75)
    {
      if (!v97 || (specialized static Dictionary<>.== infix(_:_:)(v75, v97) & 1) == 0) {
        goto LABEL_87;
      }
    }
    else if (v97)
    {
      goto LABEL_87;
    }
    if (v74)
    {
      if (!v98) {
        goto LABEL_87;
      }
      id v58 = v100;
      uint64_t v59 = v99;
      id v56 = v102;
      id v57 = v101;
      id v60 = v98;
      type metadata accessor for CFDictionaryRef(0);
      id v55 = v38;
      outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      id v54 = (id)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v60 = v60;
      id v53 = v74;
      char v39 = static _CFObject.== infix(_:_:)();

      if ((v39 & 1) == 0)
      {
LABEL_104:
        uint64_t v41 = outlined consume of LocalePreferences?;
        unint64_t v40 = v122;
LABEL_88:
        outlined retain of LocalePreferences?((uint64_t)v40, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))v41);
LABEL_41:
        LOBYTE(v35) = 0;
        goto LABEL_42;
      }
    }
    else
    {
      id v58 = v100;
      uint64_t v59 = v99;
      id v56 = v102;
      id v57 = v101;
      id v60 = v98;
      outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      if (v60) {
        goto LABEL_41;
      }
      outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    }
    if (v73)
    {
      if (!v59) {
        goto LABEL_104;
      }
      id v42 = v59;
      type metadata accessor for CFDictionaryRef(0);
      id v60 = v43;
      id v55 = (id)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v59 = (char *)v42;
      id v54 = v73;
      LOBYTE(v42) = static _CFObject.== infix(_:_:)();

      if ((v42 & 1) == 0) {
        goto LABEL_104;
      }
    }
    else if (v59)
    {
      goto LABEL_104;
    }
    if (v72)
    {
      uint64_t v35 = (uint64_t)v58;
      if (!v58)
      {
        outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
        goto LABEL_42;
      }
      type metadata accessor for CFDictionaryRef(0);
      id v60 = v44;
      uint64_t v59 = (char *)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v58 = (id)v35;
      id v55 = v72;
      char v45 = static _CFObject.== infix(_:_:)();

      if ((v45 & 1) == 0) {
        goto LABEL_104;
      }
    }
    else if (v58)
    {
      goto LABEL_104;
    }
    id v60 = (id)v12;
    if (v71)
    {
      if (!v57) {
        goto LABEL_138;
      }
      type metadata accessor for CFDictionaryRef(0);
      uint64_t v59 = (char *)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v46 = v57;
      id v58 = v71;
      char v47 = static _CFObject.== infix(_:_:)();

      if ((v47 & 1) == 0) {
        goto LABEL_138;
      }
    }
    else if (v57)
    {
      goto LABEL_138;
    }
    if (v70)
    {
      if (!v56) {
        goto LABEL_138;
      }
      type metadata accessor for CFDictionaryRef(0);
      uint64_t v59 = (char *)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      id v48 = v56;
      id v58 = v70;
      char v49 = static _CFObject.== infix(_:_:)();

      if ((v49 & 1) == 0) {
        goto LABEL_138;
      }
    }
    else if (v56)
    {
      goto LABEL_138;
    }
    uint64_t v35 = v103;
    if (v69)
    {
      if (!v103) {
        goto LABEL_121;
      }
      swift_bridgeObjectRetain();
      uint64_t v50 = swift_bridgeObjectRetain();
      LODWORD(v59) = specialized static Dictionary<>.== infix(_:_:)(v50, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v59 & 1) == 0) {
        goto LABEL_138;
      }
    }
    else if (v103)
    {
      goto LABEL_138;
    }
    uint64_t v35 = v104;
    if (v68)
    {
      if (!v104)
      {
LABEL_121:
        outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
        uint64_t v12 = (uint64_t)v60;
        goto LABEL_42;
      }
      swift_bridgeObjectRetain();
      uint64_t v51 = swift_bridgeObjectRetain();
      LODWORD(v59) = specialized static Dictionary<>.== infix(_:_:)(v51, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v59 & 1) == 0) {
        goto LABEL_138;
      }
    }
    else if (v104)
    {
      goto LABEL_138;
    }
    if (v67)
    {
      if (v106 && (v66 == v105 && v67 == v106 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
        goto LABEL_130;
      }
LABEL_138:
      outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_47:
      LOBYTE(v35) = 0;
      uint64_t v12 = (uint64_t)v60;
      goto LABEL_42;
    }
    if (v106) {
      goto LABEL_138;
    }
LABEL_130:
    if (v65 == 2)
    {
      if (v107 != 2) {
        goto LABEL_138;
      }
    }
    else if (v107 == 2 || ((v107 ^ v65) & 1) != 0)
    {
      goto LABEL_138;
    }
    int v52 = v108;
    if (v64 == 2)
    {
      outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      if (v52 != 2) {
        goto LABEL_47;
      }
    }
    else
    {
      outlined retain of LocalePreferences?((uint64_t)v122, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      if (v52 == 2 || ((v52 ^ v64) & 1) != 0) {
        goto LABEL_47;
      }
    }
    if (v62 == 2)
    {
      uint64_t v12 = (uint64_t)v60;
      if (v109 != 2) {
        goto LABEL_41;
      }
    }
    else
    {
      LOBYTE(v35) = 0;
      if (v109 == 2) {
        goto LABEL_152;
      }
      uint64_t v12 = (uint64_t)v60;
      if (((((v62 & 1) == 0) ^ v109) & 1) == 0) {
        goto LABEL_42;
      }
    }
    if (v61 == 2)
    {
      uint64_t v12 = (uint64_t)v60;
      if (v110 != 2) {
        goto LABEL_41;
      }
LABEL_151:
      LOBYTE(v35) = 1;
      goto LABEL_42;
    }
    LOBYTE(v35) = 0;
    if (v110 != 2)
    {
      uint64_t v12 = (uint64_t)v60;
      if (((((v61 & 1) == 0) ^ v110) & 1) == 0) {
        goto LABEL_42;
      }
      goto LABEL_151;
    }
LABEL_152:
    uint64_t v12 = (uint64_t)v60;
LABEL_42:
    LOBYTE(v85[0]) = v63;
    v85[1] = v76;
    v85[2] = v79;
    v85[3] = v81;
    v85[4] = v77;
    v85[5] = v80;
    v85[6] = v78;
    v85[7] = v75;
    v85[8] = v74;
    v85[9] = v73;
    v85[10] = v72;
    v85[11] = v71;
    v85[12] = v70;
    v85[13] = v69;
    v85[14] = v68;
    v85[15] = v66;
    v85[16] = v67;
    char v86 = v65;
    char v87 = v64;
    char v88 = v62;
    char v89 = v61;
    outlined release of LocalePreferences(v85);
    outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    if (v35)
    {
LABEL_154:
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v9, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      return v11;
    }
LABEL_5:
    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v9, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    unint64_t v11 = (v11 + 1) & v12;
    if (((*(void *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
      return v11;
    }
  }
  Swift::String v32 = v25 + 9;
  Swift::String v33 = v24 + 9;
  while (v31)
  {
    uint64_t result = *(v33 - 1);
    if (result != *(v32 - 1) || *v33 != *v32)
    {
      uint64_t v59 = v31;
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      Swift::String v31 = v59;
      if ((result & 1) == 0)
      {
        outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        goto LABEL_47;
      }
    }
    v32 += 2;
    v33 += 2;
    if (!--v31) {
      goto LABEL_57;
    }
  }
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if ((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    unint64_t v24 = HIDWORD(a4);
    int v25 = a4;
    uint64_t v11 = ~v7;
    uint64_t v12 = *(void *)(v5 + 48);
    uint64_t v26 = a3;
    do
    {
      uint64_t v14 = v12 + 32 * v8;
      int v15 = *(_DWORD *)(v14 + 16);
      char v16 = *(unsigned char *)(v14 + 20);
      int v18 = *(_DWORD *)(v14 + 24);
      int v17 = *(_DWORD *)(v14 + 28);
      if (*(void *)v14 != a1 || *(void *)(v14 + 8) != a2)
      {
        uint64_t v20 = v11;
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v11 = v20;
        a3 = v26;
        if ((v21 & 1) == 0) {
          goto LABEL_7;
        }
      }
      if (v16)
      {
        if ((a3 & 0x100000000) == 0) {
          goto LABEL_7;
        }
        BOOL v22 = v18 == v25;
      }
      else
      {
        if ((a3 & 0x100000000) != 0) {
          goto LABEL_7;
        }
        BOOL v22 = v15 == a3 && v18 == v25;
      }
      if (v22 && v17 == v24) {
        return v8;
      }
LABEL_7:
      unint64_t v8 = (v8 + 1) & v11;
    }
    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    int v6 = *a1;
    uint64_t v7 = *((void *)a1 + 1);
    int v15 = (long long *)(a1 + 32);
    char v16 = (long long *)(a1 + 16);
    int v14 = a1[48];
    do
    {
      unint64_t v8 = (unsigned __int8 *)(*(void *)(v2 + 48) + 56 * v4);
      if (*v8 == v6)
      {
        uint64_t v9 = *((void *)v8 + 1);
        long long v10 = *((_OWORD *)v8 + 1);
        int v11 = v8[48];
        long long v18 = *((_OWORD *)v8 + 2);
        if (v9)
        {
          if (!v7) {
            goto LABEL_4;
          }
          long long v17 = *((_OWORD *)v8 + 1);
          char v12 = specialized static Set.== infix(_:_:)(v9, v7);
          long long v10 = v17;
          if ((v12 & 1) == 0) {
            goto LABEL_4;
          }
        }
        else if (v7)
        {
          goto LABEL_4;
        }
        long long v20 = *v16;
        long long v21 = v10;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        if (specialized static Calendar.== infix(_:_:)((uint64_t)&v21, (uint64_t)&v20))
        {
          long long v20 = *v15;
          long long v21 = v18;
          char v19 = specialized static Locale.== infix(_:_:)((uint64_t)&v21, (uint64_t)&v20);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          if ((v19 & 1) != 0 && ((v14 ^ v11) & 1) == 0) {
            return v4;
          }
        }
        else
        {
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
LABEL_4:
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v11 = ~v6;
    uint64_t v12 = *(void *)(v4 + 48);
    do
    {
      uint64_t v13 = v12 + 24 * v7;
      int v14 = *(unsigned __int8 *)(v13 + 16);
      if (*(void *)v13 == a1 && *(void *)(v13 + 8) == a2)
      {
        if (v14 == (a3 & 1)) {
          return v7;
        }
      }
      else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && ((v14 ^ a3) & 1) == 0)
      {
        return v7;
      }
      unint64_t v7 = (v7 + 1) & v11;
    }
    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    int v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      int v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      int v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    long long v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      unint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
      unint64_t v16 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  size_t v14;
  void *v15;

  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 72);
      uint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[9 * v11 + 4]) {
          memmove(v15, a4 + 4, 72 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v15 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a5[6] + 4 * result) = a2;
  BOOL v5 = (void *)(a5[7] + 16 * result);
  *BOOL v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

void *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t result = memcpy((void *)(a4[6] + 392 * a1), a2, 0x188uLL);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, void *a8)
{
  a8[(result >> 6) + 8] |= 1 << result;
  uint64_t v8 = (void *)(a8[6] + 16 * result);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a8[7] + 32 * result;
  *(void *)uint64_t v9 = a4;
  *(unsigned char *)(v9 + 8) = a5;
  *(void *)(v9 + 16) = a6;
  *(unsigned char *)(v9 + 24) = a7;
  uint64_t v10 = a8[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a8[2] = v12;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  BOOL v5 = (void *)(a5[6] + 16 * result);
  *BOOL v5 = a2;
  v5[1] = a3;
  uint64_t v6 = (_OWORD *)(a5[7] + 80 * result);
  long long v7 = a4[4];
  long long v8 = a4[2];
  v6[3] = a4[3];
  v6[4] = v7;
  long long v9 = a4[1];
  *uint64_t v6 = *a4;
  v6[1] = v9;
  v6[2] = v8;
  uint64_t v10 = a5[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a5[2] = v12;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, _OWORD *a2, uint64_t a3, char a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  BOOL v5 = (_OWORD *)(a5[6] + 96 * result);
  long long v6 = a2[3];
  _OWORD v5[2] = a2[2];
  v5[3] = v6;
  long long v7 = a2[5];
  v5[4] = a2[4];
  v5[5] = v7;
  long long v8 = a2[1];
  *BOOL v5 = *a2;
  v5[1] = v8;
  uint64_t v9 = a5[7] + 16 * result;
  *(void *)uint64_t v9 = a3;
  *(unsigned char *)(v9 + 8) = a4 & 1;
  uint64_t v10 = a5[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a5[2] = v12;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6)
{
  a6[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v9 = a6[6] + 24 * a1;
  *(void *)uint64_t v9 = a2;
  *(void *)(v9 + 8) = a3;
  *(unsigned char *)(v9 + 16) = a4;
  uint64_t v10 = a6[7];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a5, v11);
  uint64_t v13 = a6[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a6[2] = v15;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Variable<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.KeyPath<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> PredicateExpressions.Value<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Disjunction<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

{
  uint64_t result;

  *(void *)(a1 + 16) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Arithmetic<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Comparison<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

{
  uint64_t result;

  *(void *)(a1 + 16) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.UnaryMinus<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceMinimum<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceMaximum<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ClosedRange<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Range<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Conditional<A, B, C>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conditional<A, B, C>(a1);
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.CollectionIndexSubscript<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.CollectionRangeSubscript<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.CollectionContainsCollection<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

{
  uint64_t result;

  *(void *)(a1 + 16) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ForceCast<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.TypeCheck<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  *(void *)(a1 + 16) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ForcedUnwrap<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.DictionaryKeySubscript<A, B, C>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conditional<A, B, C>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.FloatDivision<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.IntDivision<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.IntRemainder<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Negation<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  *(void *)(a1 + 16) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.NilCoalesce<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.NilLiteral<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.RangeExpressionContains<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

{
  uint64_t result;

  *(void *)(a1 + 16) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceStartsWith<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceContainsWhere<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.SequenceAllSatisfy<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Filter<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.StringContainsRegex<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

{
  uint64_t result;

  *(void *)(a1 + 16) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(a1);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t result;
  void v11[2];

  MEMORY[0x1F4188790](a1);
  long long v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
  {
    long long v7 = (uint64_t *)(*(void *)(v2 + 8) & 0xFFFFFFFFFFFFFFFELL);
    long long v8 = v6;
    do
    {
      uint64_t v9 = *v7++;
      *v8++ = *(void *)(v9 + 8);
      --v4;
    }
    while (v4);
  }
  v11[0] = v3;
  v11[1] = v6;
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.PredicateEvaluate<A, Pack{repeat B}>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ExpressionEvaluate<A, Pack{repeat B}, C>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

{
  uint64_t result;

  *(void *)(a1 + 16) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 24) = result;
  return result;
}

void *initializeWithCopy for DebugStringConversionState(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DebugStringConversionState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

void *assignWithTake for DebugStringConversionState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for DebugStringConversionState(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DebugStringConversionState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DebugStringConversionState()
{
  return &type metadata for DebugStringConversionState;
}

uint64_t dispatch thunk of DebugStringConvertiblePredicateExpression.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

unint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v4 < 0 || (unint64_t v5 = a4 + 32 * a1 + 32, v6 = a3 + 32 * v4, v5 < v6) && v5 + 32 * v4 > a3)
  {
LABEL_7:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x181AA2098);
  }
  swift_arrayInitWithCopy();
  return v6;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 72 * a1 + 32;
    unint64_t v7 = a3 + 72 * v5;
    if (v6 >= v7 || v6 + 72 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t *outlined retain of ICUDateIntervalFormatter.Signature(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[13];
  uint64_t v8 = a1[14];
  uint64_t v9 = a1[18];
  uint64_t v10 = a1[17];
  uint64_t v11 = a1[22];
  uint64_t v12 = a1[21];
  uint64_t v13 = a1[27];
  uint64_t v14 = a1[26];
  uint64_t v15 = a1[31];
  uint64_t v16 = a1[30];
  uint64_t v17 = a1[35];
  uint64_t v18 = a1[34];
  uint64_t v19 = a1[41];
  uint64_t v20 = a1[40];
  outlined copy of Locale.LanguageCode?(*a1, a1[1]);
  outlined copy of Locale.LanguageCode?(v2, v3);
  outlined copy of Locale.LanguageCode?(v4, v5);
  outlined copy of Locale.LanguageCode?(v6, v8);
  outlined copy of Locale.LanguageCode?(v10, v9);
  outlined copy of Locale.LanguageCode?(v12, v11);
  outlined copy of Locale.LanguageCode?(v14, v13);
  outlined copy of Locale.LanguageCode?(v16, v15);
  outlined copy of Locale.LanguageCode?(v18, v17);
  swift_unknownObjectRetain();
  outlined copy of Locale.LanguageCode?(v20, v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *outlined release of ICUDateIntervalFormatter.Signature(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[13];
  uint64_t v8 = a1[14];
  uint64_t v9 = a1[18];
  uint64_t v10 = a1[17];
  uint64_t v11 = a1[22];
  uint64_t v12 = a1[21];
  uint64_t v13 = a1[27];
  uint64_t v14 = a1[26];
  uint64_t v15 = a1[31];
  uint64_t v16 = a1[30];
  uint64_t v17 = a1[35];
  uint64_t v18 = a1[34];
  uint64_t v19 = a1[41];
  uint64_t v20 = a1[40];
  outlined consume of Locale.LanguageCode?(*a1, a1[1]);
  outlined consume of Locale.LanguageCode?(v2, v3);
  outlined consume of Locale.LanguageCode?(v4, v5);
  outlined consume of Locale.LanguageCode?(v6, v8);
  outlined consume of Locale.LanguageCode?(v10, v9);
  outlined consume of Locale.LanguageCode?(v12, v11);
  outlined consume of Locale.LanguageCode?(v14, v13);
  outlined consume of Locale.LanguageCode?(v16, v15);
  outlined consume of Locale.LanguageCode?(v18, v17);
  swift_unknownObjectRelease();
  outlined consume of Locale.LanguageCode?(v20, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_181AA2E14()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181AA2E4C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t URL.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for FilePath();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x1F4188790](v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4, v6);
  uint64_t v8 = String.init(validating:)();
  if (v9)
  {
    URL.init(fileURLWithPath:)(v8, v9, (uint64_t)&v14);
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    uint64_t v11 = v14;
    long long v12 = v15;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    uint64_t v11 = 0;
    long long v12 = 0uLL;
  }
  *(void *)a2 = v11;
  *(_OWORD *)(a2 + 8) = v12;
  return result;
}

uint64_t URL.init(_:isDirectory:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for FilePath();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6, v8);
  uint64_t v10 = String.init(validating:)();
  if (v11)
  {
    URL.init(fileURLWithPath:isDirectory:)(v10, v11, a2 & 1, (uint64_t)&v16);
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v13 = v16;
    long long v14 = v17;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v13 = 0;
    long long v14 = 0uLL;
  }
  *(void *)a3 = v13;
  *(_OWORD *)(a3 + 8) = v14;
  return result;
}

uint64_t FilePath.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  swift_retain();
  id v6 = v3;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v9 = objc_msgSend(v6, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v9 & 1) == 0)
    {
LABEL_17:
      swift_release();
      swift_release();
      goto LABEL_18;
    }
LABEL_7:
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v45 = v5;
      id v10 = v6;
      swift_retain();
      swift_retain();
      Swift::String v11 = URL.path(percentEncoded:)(1);
      uint64_t countAndFlagsBits = v11._countAndFlagsBits;
      Swift::String v44 = v11;
      swift_bridgeObjectRetain();
      if (String.count.getter() <= 1)
      {
        unint64_t object = (unint64_t)v11._object;
      }
      else
      {
        unint64_t object = (unint64_t)v11._object;
        if ((specialized BidirectionalCollection.last.getter(v11._countAndFlagsBits, (unint64_t)v11._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v44._countAndFlagsBits;
          unint64_t object = (unint64_t)v44._object;
        }
      }
      uint64_t v41 = Set.init(minimumCapacity:)();
      uint64_t v30 = specialized Set._Variant.insert(_:)(&v43, 0x2FuLL);
      uint64_t v31 = v41;
      uint64_t v32 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000) == 0) {
        uint64_t v32 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v32)
      {
        id v40 = v10;
        uint64_t v41 = countAndFlagsBits;
        unint64_t v42 = object;
        MEMORY[0x1F4188790](v30);
        v39[2] = &v41;
        v39[3] = v31;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)v39, countAndFlagsBits, object);
        if (v33 == 1)
        {
          Swift::Int v34 = v41;
          unint64_t v35 = v42;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v34, v35, v31);
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v10 = v40;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      id v14 = objc_msgSend(v6, sel__parameterString);
      if (v14)
      {
        uint64_t v15 = v14;
        id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
        uint64_t v18 = v17;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v19 = objc_msgSend(v6, sel_path)) != 0)
        {
          uint64_t v20 = v19;
          id v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          BOOL v23 = v22;

          v44._uint64_t countAndFlagsBits = (uint64_t)v21;
          v44._unint64_t object = v23;
          swift_bridgeObjectRetain();
          v24._uint64_t countAndFlagsBits = 59;
          v24._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v24);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v25._uint64_t countAndFlagsBits = (uint64_t)v16;
          v25._unint64_t object = v18;
          String.append(_:)(v25);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
        else
        {
          v44._uint64_t countAndFlagsBits = 59;
          v44._unint64_t object = (void *)0xE100000000000000;
          v37._uint64_t countAndFlagsBits = (uint64_t)v16;
          v37._unint64_t object = v18;
          String.append(_:)(v37);
          swift_release();
          swift_release();
        }
        swift_bridgeObjectRelease();
        goto LABEL_35;
      }
      id v36 = objc_msgSend(v6, sel_path);
      if (!v36)
      {
        swift_release();
        swift_release();

        goto LABEL_35;
      }
      id v10 = v36;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      swift_release();
      swift_release();
    }
LABEL_35:
    FilePath.init(_:)();
    uint64_t v38 = type metadata accessor for FilePath();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(a2, 0, 1, v38);
  }
  v44._uint64_t countAndFlagsBits = (uint64_t)v6;
  v44._unint64_t object = v4;
  uint64_t v45 = v5;
  URL.scheme.getter();
  if (v7)
  {
    Swift::String v8 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v8._countAndFlagsBits == 1701603686 && v8._object == (void *)0xE400000000000000)
    {
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  swift_release_n();
  swift_release_n();

LABEL_18:
  uint64_t v27 = type metadata accessor for FilePath();
  char v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);

  return v28(a2, 1, 1, v27);
}

_OWORD *AttributedString.Guts.copy(in:)()
{
  uint64_t v1 = v0;
  long long v2 = *(_OWORD *)(v0 + 32);
  long long v29 = *(_OWORD *)(v0 + 16);
  long long v30 = v2;
  long long v31 = *(_OWORD *)(v0 + 48);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v23);
  BigString.init(_:)();
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v1 + 72);
  uint64_t v5 = *(void *)(v1 + 80);
  swift_unknownObjectRetain();
  uint64_t v6 = BigString.Index.utf8Offset.getter();
  uint64_t v7 = BigString.Index.utf8Offset.getter();
  swift_unknownObjectRetain();
  uint64_t v8 = specialized Rope.extract<A>(from:to:in:)(v6, v7, v3, v4, v5);
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  swift_unknownObjectRelease_n();
  uint64_t v15 = (_OWORD *)swift_allocObject();
  outlined retain of Locale((uint64_t)v24);
  swift_unknownObjectRetain();
  AttributedString.Guts.init(string:runs:)(v24, v8, v10, v12, v14);
  BigString.startIndex.getter();
  if ((static BigString.Index.== infix(_:_:)() & 1) == 0
    || (BigString.endIndex.getter(), (static BigString.Index.== infix(_:_:)() & 1) == 0))
  {
    long long v16 = v15[2];
    v27[0] = v15[1];
    v27[1] = v16;
    long long v28 = v15[3];
    v32[0] = v27[0];
    v32[1] = v16;
    _OWORD v32[2] = v28;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v32, (uint64_t)v33);
    outlined retain of Locale((uint64_t)v33);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v27);
    long long v17 = v15[2];
    v25[0] = v15[1];
    v25[1] = v17;
    long long v26 = v15[3];
    v34[0] = v25[0];
    v34[1] = v17;
    _OWORD v34[2] = v26;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v34, (uint64_t)v35);
    outlined retain of Locale((uint64_t)v35);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v25);
    uint64_t v18 = BigString.Index.utf8Offset.getter();
    uint64_t v19 = BigString.Index.utf8Offset.getter();
    uint64_t v20 = AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)(v18, v19);
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v20, v21, 1, 0);
  }
  swift_release();
  outlined release of Locale((uint64_t)v24);
  swift_unknownObjectRelease();
  return v15;
}

Swift::UInt AttributedString.Guts.characterwiseHash(in:into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_retain();
  AttributedString.Runs.init(_:in:)(v4, &v158);
  uint64_t v5 = *((void *)&v158 + 1);
  uint64_t v6 = *((void *)&v162 + 1);
  Swift::UInt result = *((void *)&v162 + 1) - *((void *)&v158 + 1);
  if (__OFSUB__(*((void *)&v162 + 1), *((void *)&v158 + 1))) {
    goto LABEL_141;
  }
  unint64_t v103 = *((void *)&v159 + 1);
  uint64_t v104 = v159;
  uint64_t v8 = *((void *)&v160 + 1);
  uint64_t v9 = v160;
  uint64_t v11 = *((void *)&v161 + 1);
  uint64_t v10 = v161;
  uint64_t v106 = v162;
  Hasher._combine(_:)(result);
  if (v5 == v6) {
    return outlined release of AttributedString.Runs((uint64_t)&v158);
  }
  uint64_t v97 = *((void *)&v167 + 1);
  uint64_t v98 = v167;
  uint64_t v95 = *((void *)&v166 + 1);
  uint64_t v96 = v168;
  uint64_t v105 = (void *)v158;
  uint64_t v102 = (long long *)(v158 + 16);
  uint64_t v92 = (_OWORD *)(v2 + 16);
  Swift::UInt result = outlined retain of AttributedString.Runs((uint64_t)&v158);
  uint64_t v93 = v6;
  uint64_t v94 = a2;
  do
  {
    if (v5 >= v6)
    {
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }
    long long v127 = v168;
    long long v128 = v169;
    uint64_t v129 = v170;
    long long v123 = v164;
    long long v124 = v165;
    long long v125 = v166;
    long long v126 = v167;
    long long v119 = v160;
    long long v120 = v161;
    long long v121 = v162;
    long long v122 = v163;
    long long v117 = v158;
    long long v118 = v159;
    v116[0] = v5;
    v116[1] = v104;
    v116[2] = v103;
    v116[3] = v9;
    v116[4] = v8;
    v116[5] = v10;
    v116[6] = v11;
    v116[7] = v106;
    Swift::UInt result = (Swift::UInt)AttributedString.Runs._resolve(_:)(v116, &v109);
    if (v109 != v105[11]) {
      goto LABEL_122;
    }
    uint64_t v107 = v5;
    unint64_t v23 = v110;
    uint64_t v24 = v112;
    uint64_t v25 = v113;
    uint64_t v27 = v114;
    uint64_t v26 = v115;
    if (v111)
    {
      long long v28 = (void *)(v111 + 24 * ((v110 >> ((4 * *(unsigned char *)(v111 + 18) + 8) & 0x3C)) & 0xF));
      uint64_t v29 = v28[4];
      unint64_t v101 = v28[3];
      uint64_t v30 = v28[5];
      outlined retain of AttributedString.Runs((uint64_t)&v158);
      uint64_t v100 = v29;
      swift_bridgeObjectRetain();
      uint64_t v99 = v30;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v31 = v105[8];
      outlined retain of AttributedString.Runs((uint64_t)&v158);
      swift_unknownObjectRetain();
      unint64_t v32 = specialized Rope._Node.subscript.getter(v23, v31);
      uint64_t v100 = v33;
      unint64_t v101 = v32;
      uint64_t v99 = v34;
      swift_unknownObjectRelease();
    }
    uint64_t v35 = v95;
    uint64_t v36 = v97;
    char v37 = static BigString.Index.< infix(_:_:)();
    if (v37)
    {
      uint64_t v35 = v24;
      uint64_t v38 = v25;
    }
    else
    {
      uint64_t v38 = v98;
    }
    if (v37)
    {
      uint64_t v36 = v27;
      uint64_t v39 = v26;
    }
    else
    {
      uint64_t v39 = v96;
    }
    Swift::UInt result = BigString.Index.utf8Offset.getter();
    uint64_t v40 = result + v101;
    if (__OFADD__(result, v101)) {
      goto LABEL_123;
    }
    uint64_t v41 = BigString.Index.utf8Offset.getter();
    if (v41 < v40) {
      uint64_t v40 = v41;
    }
    long long v42 = *v102;
    long long v43 = v102[2];
    v147[1] = v102[1];
    v147[2] = v43;
    v147[0] = v42;
    long long v44 = *v102;
    v148[1] = v102[1];
    _OWORD v148[2] = v43;
    v148[0] = v44;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v148, (uint64_t)v149);
    outlined retain of Locale((uint64_t)v149);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v147);
    Swift::UInt result = BigString.Index.utf8Offset.getter();
    if (__OFSUB__(v40, result)) {
      goto LABEL_124;
    }
    uint64_t v45 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    outlined release of Locale((uint64_t)v130);
    Swift::UInt result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_125;
    }
    uint64_t v134 = v35;
    uint64_t v135 = v38;
    uint64_t v136 = v36;
    uint64_t v137 = v39;
    uint64_t v138 = v45;
    uint64_t v139 = v47;
    uint64_t v140 = v49;
    uint64_t v141 = v51;
    uint64_t v52 = v104;
    uint64_t v53 = v105[8];
    uint64_t v54 = v105[9];
    uint64_t v55 = v105[10];
    uint64_t v56 = v105[11];
    if (v9 == 1 || v104 != v56)
    {
      if (v53) {
        uint64_t v60 = v105[9];
      }
      else {
        uint64_t v60 = 0;
      }
      uint64_t v57 = v107;
      if (v107 < 0 || v60 < v107) {
        goto LABEL_134;
      }
      if (!v53 || v107 >= v54 || !*(_WORD *)(v53 + 16))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v158);
        unint64_t v76 = swift_unknownObjectRetain();
        unint64_t v58 = specialized Rope._endPath.getter(v76);
        Swift::UInt result = swift_unknownObjectRelease();
        uint64_t v9 = 0;
        if (!v53)
        {
          uint64_t v59 = 0;
          goto LABEL_106;
        }
LABEL_67:
        swift_unknownObjectRetain();
        uint64_t v59 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v56, v58, v9, v53, v54, v55);
        Swift::UInt result = swift_unknownObjectRelease_n();
LABEL_106:
        uint64_t v52 = v56;
        goto LABEL_107;
      }
      uint64_t v61 = v105[9];
      uint64_t v62 = v105[10];
      uint64_t v63 = *(unsigned __int8 *)(v53 + 18);
      if (*(unsigned char *)(v53 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v158);
        Swift::UInt result = swift_unknownObjectRetain();
        uint64_t v64 = v107;
        uint64_t v65 = v53;
        while (1)
        {
          unint64_t v67 = *(unsigned __int16 *)(v65 + 16);
          if (*(_WORD *)(v65 + 16))
          {
            uint64_t v68 = *(void *)(v65 + 32);
            BOOL v69 = __OFSUB__(v64, v68);
            uint64_t v70 = v64 - v68;
            if (v69) {
              goto LABEL_119;
            }
            if (__OFADD__(v70, 1)) {
              goto LABEL_120;
            }
            if (v70 + 1 <= 0)
            {
              unint64_t v67 = 0;
              goto LABEL_39;
            }
            if (v67 != 1)
            {
              uint64_t v71 = *(void *)(v65 + 56);
              uint64_t v64 = v70 - v71;
              if (__OFSUB__(v70, v71)) {
                goto LABEL_132;
              }
              if (__OFADD__(v64, 1)) {
                goto LABEL_133;
              }
              if (v64 + 1 < 1)
              {
                unint64_t v67 = 1;
                uint64_t v64 = v70;
                goto LABEL_39;
              }
              if (v67 == 2) {
                goto LABEL_38;
              }
              uint64_t v72 = *(void *)(v65 + 80);
              BOOL v69 = __OFSUB__(v64, v72);
              uint64_t v70 = v64 - v72;
              if (v69) {
                goto LABEL_136;
              }
              if (__OFADD__(v70, 1)) {
                goto LABEL_137;
              }
              if (v70 + 1 < 1)
              {
                unint64_t v67 = 2;
                goto LABEL_39;
              }
              if (v67 != 3)
              {
                uint64_t v73 = 3;
                if (v67 > 3) {
                  uint64_t v73 = *(unsigned __int16 *)(v65 + 16);
                }
                id v74 = (void *)(v65 + 104);
                uint64_t v75 = 3;
                while (v73 != v75)
                {
                  uint64_t v64 = v70 - *v74;
                  if (__OFSUB__(v70, *v74)) {
                    goto LABEL_130;
                  }
                  if (__OFADD__(v64, 1)) {
                    goto LABEL_131;
                  }
                  if (v64 + 1 < 1)
                  {
                    unint64_t v67 = v75;
                    uint64_t v64 = v70;
                    goto LABEL_39;
                  }
                  ++v75;
                  v74 += 3;
                  uint64_t v70 = v64;
                  if (v67 == v75) {
                    goto LABEL_38;
                  }
                }
LABEL_129:
                __break(1u);
LABEL_130:
                __break(1u);
LABEL_131:
                __break(1u);
LABEL_132:
                __break(1u);
LABEL_133:
                __break(1u);
LABEL_134:
                __break(1u);
LABEL_135:
                __break(1u);
LABEL_136:
                __break(1u);
LABEL_137:
                __break(1u);
LABEL_138:
                __break(1u);
LABEL_139:
                __break(1u);
                goto LABEL_140;
              }
            }
            uint64_t v64 = v70;
          }
LABEL_38:
          if (v64)
          {
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
            goto LABEL_121;
          }
LABEL_39:
          char v66 = (4 * *(unsigned char *)(v65 + 18) + 8) & 0x3C;
          uint64_t v63 = ((-15 << v66) - 1) & v63 | (v67 << v66);
          uint64_t v9 = *(void *)(v65 + 24 + 24 * v67);
          swift_unknownObjectRetain();
          Swift::UInt result = swift_unknownObjectRelease();
          uint64_t v65 = v9;
          if (!*(unsigned char *)(v9 + 18)) {
            goto LABEL_72;
          }
        }
      }
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v158);
      Swift::UInt result = swift_unknownObjectRetain();
      uint64_t v64 = v107;
      uint64_t v9 = v53;
LABEL_72:
      unint64_t v77 = *(unsigned __int16 *)(v9 + 16);
      if (!*(_WORD *)(v9 + 16))
      {
        unint64_t v78 = v64;
        goto LABEL_98;
      }
      unint64_t v78 = v64 - 1;
      if (__OFSUB__(v64, 1)) {
        goto LABEL_139;
      }
      if (!__OFADD__(v78, 1))
      {
        if (v64 <= 0)
        {
          unint64_t v77 = 0;
          goto LABEL_104;
        }
        if (v77 != 1)
        {
          BOOL v69 = __OFSUB__(v78, 1);
          unint64_t v78 = v64 - 2;
          if (v69) {
            goto LABEL_144;
          }
          if (__OFADD__(v78, 1)) {
            goto LABEL_145;
          }
          if (v64 - 1 < 1)
          {
            unint64_t v77 = 1;
            goto LABEL_104;
          }
          if (v77 != 2)
          {
            BOOL v69 = __OFSUB__(v78, 1);
            unint64_t v78 = v64 - 3;
            if (v69) {
              goto LABEL_146;
            }
            if (__OFADD__(v78, 1)) {
              goto LABEL_147;
            }
            if (v64 - 2 >= 1)
            {
              if (v77 != 3)
              {
                uint64_t v79 = 0;
                uint64_t v80 = 3;
                if (v77 > 3) {
                  uint64_t v80 = *(unsigned __int16 *)(v9 + 16);
                }
                unint64_t v81 = v80 - 3;
                if (v78 >= v77 - 4) {
                  unint64_t v82 = v77 - 4;
                }
                else {
                  unint64_t v82 = v64 - 3;
                }
                if (v82 >= v64 + 0x7FFFFFFFFFFFFFFDLL) {
                  unint64_t v82 = v64 + 0x7FFFFFFFFFFFFFFDLL;
                }
                while (v81 > v82)
                {
                  if (v64 + 0x7FFFFFFFFFFFFFFDLL == v79) {
                    goto LABEL_143;
                  }
                  if (v78 == v79)
                  {
                    unint64_t v77 = v64;
                    goto LABEL_104;
                  }
                  if (v77 - 3 == ++v79)
                  {
                    v78 -= v79;
                    goto LABEL_98;
                  }
                }
LABEL_142:
                __break(1u);
LABEL_143:
                __break(1u);
LABEL_144:
                __break(1u);
LABEL_145:
                __break(1u);
LABEL_146:
                __break(1u);
LABEL_147:
                __break(1u);
                return result;
              }
              goto LABEL_98;
            }
            unint64_t v77 = 2;
LABEL_104:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v58 = v63 & 0xFFFFFFFFFFFFF0FFLL | (v77 << 8);
            uint64_t v55 = v62;
            uint64_t v54 = v61;
            goto LABEL_67;
          }
        }
LABEL_98:
        if (v78) {
          goto LABEL_138;
        }
        goto LABEL_104;
      }
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
      goto LABEL_142;
    }
    uint64_t v57 = v107;
    if (v106 == 2)
    {
      if (v53)
      {
        outlined retain of AttributedString.Runs((uint64_t)&v158);
        swift_unknownObjectRetain();
        unint64_t v58 = v103;
        Swift::UInt result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v104, v103, v9, v53, v54, v55);
        uint64_t v59 = result;
        goto LABEL_107;
      }
      Swift::UInt result = swift_retain();
      uint64_t v59 = 0;
    }
    else
    {
      outlined retain of AttributedString.Runs((uint64_t)&v158);
      swift_unknownObjectRetain();
      Swift::UInt result = BigString.Index.utf8Offset.getter();
      uint64_t v59 = result;
    }
    unint64_t v58 = v103;
LABEL_107:
    *(void *)&long long v117 = v52;
    *((void *)&v117 + 1) = v58;
    *(void *)&long long v118 = v9;
    BOOL v69 = __OFADD__(v57, 1);
    uint64_t v83 = v57 + 1;
    if (v69) {
      goto LABEL_126;
    }
    if (v52 != v56) {
      goto LABEL_127;
    }
    if (v9)
    {
      uint64_t v84 = v54;
      uint64_t v85 = v55;
      unint64_t v86 = *(void *)(v9 + 24 * ((v58 >> ((4 * *(unsigned char *)(v9 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      uint64_t v84 = v54;
      uint64_t v85 = v55;
      unint64_t v86 = specialized Rope._Node.subscript.getter(v58, v53);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    Swift::UInt result = swift_bridgeObjectRelease();
    BOOL v69 = __OFADD__(v59, v86);
    unint64_t v87 = v59 + v86;
    if (v69) {
      goto LABEL_128;
    }
    uint64_t v108 = v83;
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v117, v53, v84, v85, v56);
    swift_unknownObjectRelease_n();
    unint64_t v103 = *((void *)&v117 + 1);
    uint64_t v104 = v117;
    uint64_t v9 = v118;
    if (v106 == 2)
    {
      long long v12 = *v102;
      long long v13 = v102[2];
      v146[1] = v102[1];
      _OWORD v146[2] = v13;
      v146[0] = v12;
      long long v14 = *v102;
      v150[1] = v102[1];
      _OWORD v150[2] = v13;
      v150[0] = v14;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v150, (uint64_t)v151);
      outlined retain of Locale((uint64_t)v151);
      uint64_t v15 = &v132;
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v146);
      long long v16 = *v102;
      long long v17 = v102[2];
      v145[1] = v102[1];
      v145[2] = v17;
      v145[0] = v16;
      long long v18 = *v102;
      v152[1] = v102[1];
      v152[2] = v17;
      v152[0] = v18;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v152, (uint64_t)&v153);
      outlined retain of Locale((uint64_t)&v153);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v145);
    }
    else
    {
      long long v88 = *v102;
      long long v89 = v102[2];
      v144[1] = v102[1];
      v144[2] = v89;
      v144[0] = v88;
      long long v90 = *v102;
      long long v91 = v102[1];
      v154[2] = v89;
      v154[1] = v91;
      v154[0] = v90;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v154, (uint64_t)&v155);
      outlined retain of Locale((uint64_t)&v155);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v144);
      Swift::UInt result = BigString.Index.utf8Offset.getter();
      if (__OFSUB__(v87, result)) {
        goto LABEL_135;
      }
      uint64_t v15 = &v131;
    }
    uint64_t v8 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v10 = v19;
    uint64_t v11 = v20;
    uint64_t v106 = v21;
    outlined release of Locale((uint64_t)v15);
    outlined release of AttributedString.Runs((uint64_t)&v158);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v94, v100);
    specialized Set.hash(into:)(v94, v99);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v22 = v92[1];
    v142[0] = *v92;
    v142[1] = v22;
    long long v143 = v92[2];
    v156[0] = v142[0];
    v156[1] = v22;
    v156[2] = v143;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v156, (uint64_t)v157);
    outlined retain of Locale((uint64_t)v157);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v142);
    BigSubstring.hash(into:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::UInt result = outlined release of Locale((uint64_t)v133);
    uint64_t v5 = v108;
    uint64_t v6 = v93;
  }
  while (v108 != v93);
  outlined release of AttributedString.Runs((uint64_t)&v158);
  return outlined release of AttributedString.Runs((uint64_t)&v158);
}

uint64_t AttributedString.Guts.index(afterRun:)()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v33 = *(void *)(v0 + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v1) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0;
  }
  if (result < 0 || v5 < result) {
    goto LABEL_59;
  }
  uint64_t v34 = result;
  if (!v1 || result >= v3 || !*(_WORD *)(v1 + 16))
  {
    unint64_t v17 = swift_unknownObjectRetain();
    uint64_t v18 = v33;
    unint64_t v19 = specialized Rope._endPath.getter(v17);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    uint64_t v20 = 0;
    if (!v1) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  uint64_t v6 = *(unsigned __int8 *)(v1 + 18);
  if (*(unsigned char *)(v1 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v7 = v34;
    uint64_t v8 = v1;
    while (1)
    {
      uint64_t v10 = *(unsigned __int16 *)(v8 + 16);
      if (*(_WORD *)(v8 + 16))
      {
        uint64_t v11 = *(void *)(v8 + 40);
        BOOL v12 = __OFSUB__(v7, v11);
        uint64_t v13 = v7 - v11;
        if (v12) {
          goto LABEL_57;
        }
        if (__OFADD__(v13, 1)) {
          goto LABEL_58;
        }
        if (v13 + 1 < 1)
        {
          uint64_t v10 = 0;
          goto LABEL_13;
        }
        if (v10 != 1)
        {
          long long v14 = (uint64_t *)(v8 + 64);
          uint64_t v15 = 1;
          while (1)
          {
            uint64_t v16 = *v14;
            v14 += 3;
            uint64_t v7 = v13 - v16;
            if (__OFSUB__(v13, v16)) {
              break;
            }
            if (__OFADD__(v7, 1)) {
              goto LABEL_55;
            }
            if (v7 + 1 < 1)
            {
              uint64_t v10 = v15;
              uint64_t v7 = v13;
              goto LABEL_13;
            }
            ++v15;
            uint64_t v13 = v7;
            if (v10 == v15) {
              goto LABEL_12;
            }
          }
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
        uint64_t v7 = v13;
      }
LABEL_12:
      if (v7) {
        goto LABEL_56;
      }
LABEL_13:
      char v9 = (4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C;
      uint64_t v6 = ((-15 << v9) - 1) & v6 | (v10 << v9);
      uint64_t v8 = *(void *)(v8 + 24 + 24 * v10);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      if (!*(unsigned char *)(v8 + 18))
      {
        v6 &= 0xFFFFFFFFFFFFF0FFLL;
        goto LABEL_39;
      }
    }
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v7 = v34;
  uint64_t v8 = v1;
LABEL_39:
  uint64_t v27 = *(unsigned __int16 *)(v8 + 16);
  uint64_t v18 = v33;
  if (*(_WORD *)(v8 + 16))
  {
    uint64_t v28 = *(void *)(v8 + 24);
    BOOL v12 = __OFSUB__(v7, v28);
    uint64_t v29 = v7 - v28;
    if (v12)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    if (__OFADD__(v29, 1))
    {
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (v29 + 1 < 1)
    {
      uint64_t v27 = 0;
LABEL_52:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v19 = v6 | (v27 << 8);
LABEL_28:
      swift_unknownObjectRetain();
      specialized Rope._Node.distanceFromStart<A>(to:in:)(v18, v19, v8, v1, v2);
      uint64_t result = swift_unknownObjectRelease_n();
      uint64_t v20 = v7;
LABEL_29:
      uint64_t v21 = v34 - v20;
      if (__OFSUB__(v34, v20)) {
        goto LABEL_60;
      }
      if (v18 == *(void *)(v0 + 88))
      {
        if (v8)
        {
          unint64_t v22 = *(void *)(v8 + 24 * ((v19 >> ((4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v23 = *(void *)(v0 + 64);
          swift_unknownObjectRetain();
          unint64_t v22 = specialized Rope._Node.subscript.getter(v19, v23);
          swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v24 = *(_OWORD *)(v0 + 32);
        v36[0] = *(_OWORD *)(v0 + 16);
        v36[1] = v24;
        long long v37 = *(_OWORD *)(v0 + 48);
        v38[0] = v36[0];
        v38[1] = v24;
        v38[2] = v37;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v38, (uint64_t)v39);
        outlined retain of Locale((uint64_t)v39);
        BigString.utf8.getter();
        uint64_t result = outlined release of Locale((uint64_t)v36);
        BOOL v12 = __OFADD__(v21, v22);
        uint64_t v25 = v21 + v22;
        if (!v12)
        {
          uint64_t result = BigString.Index.utf8Offset.getter();
          if (!__OFSUB__(v25, result))
          {
            uint64_t v26 = BigString.UTF8View.index(_:offsetBy:)();
            outlined release of Locale((uint64_t)v35);
            return v26;
          }
          goto LABEL_63;
        }
      }
      else
      {
LABEL_61:
        __break(1u);
      }
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    if (v27 != 1)
    {
      uint64_t v30 = (uint64_t *)(v8 + 48);
      uint64_t v31 = 1;
      while (1)
      {
        uint64_t v32 = *v30;
        v30 += 3;
        uint64_t v7 = v29 - v32;
        if (__OFSUB__(v29, v32)) {
          goto LABEL_64;
        }
        if (__OFADD__(v7, 1)) {
          goto LABEL_65;
        }
        if (v7 + 1 < 1)
        {
          uint64_t v27 = v31;
          uint64_t v7 = v29;
          goto LABEL_52;
        }
        ++v31;
        uint64_t v29 = v7;
        if (v27 == v31) {
          goto LABEL_51;
        }
      }
    }
    uint64_t v7 = v29;
  }
LABEL_51:
  if (!v7) {
    goto LABEL_52;
  }
LABEL_68:
  __break(1u);
  return result;
}

uint64_t AttributedString.Guts.index(beforeRun:)()
{
  uint64_t v1 = v0;
  long long v2 = *(_OWORD *)(v0 + 32);
  v48[0] = *(_OWORD *)(v0 + 16);
  v48[1] = v2;
  long long v49 = *(_OWORD *)(v0 + 48);
  v50[0] = v48[0];
  v50[1] = v2;
  v50[2] = v49;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v50, (uint64_t)v51);
  outlined retain of Locale((uint64_t)v51);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v48);
  BigString.UTF8View.index(before:)();
  outlined release of Locale((uint64_t)v43);
  unint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v41 = *(void *)(v0 + 72);
  uint64_t v42 = *(void *)(v0 + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v3) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0;
  }
  if (result < 0) {
    goto LABEL_78;
  }
  uint64_t v7 = result;
  if (v6 < result) {
    goto LABEL_78;
  }
  if (!v3 || result >= v4 || !*(_WORD *)(v3 + 16))
  {
    unint64_t v20 = swift_unknownObjectRetain();
    uint64_t v21 = v41;
    unint64_t v22 = specialized Rope._endPath.getter(v20);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v12 = 0;
    uint64_t v9 = 0;
    uint64_t v23 = 0;
    if (!v3) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  uint64_t v8 = *(unsigned __int8 *)(v3 + 18);
  if (!*(unsigned char *)(v3 + 18)) {
    goto LABEL_52;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v9 = v7;
  unint64_t v10 = v3;
  while (2)
  {
    uint64_t v13 = *(unsigned __int16 *)(v10 + 16);
    if (!*(_WORD *)(v10 + 16)) {
      goto LABEL_12;
    }
    uint64_t v14 = *(void *)(v10 + 40);
    BOOL v15 = __OFSUB__(v9, v14);
    uint64_t v16 = v9 - v14;
    if (v15) {
      goto LABEL_76;
    }
    if (__OFADD__(v16, 1)) {
      goto LABEL_77;
    }
    if (v16 + 1 < 1)
    {
      uint64_t v13 = 0;
      goto LABEL_13;
    }
    if (v13 == 1)
    {
      uint64_t v9 = v16;
LABEL_12:
      if (!v9) {
        goto LABEL_13;
      }
      goto LABEL_75;
    }
    unint64_t v17 = (uint64_t *)(v10 + 64);
    uint64_t v18 = 1;
    while (1)
    {
      uint64_t v19 = *v17;
      v17 += 3;
      uint64_t v9 = v16 - v19;
      if (__OFSUB__(v16, v19))
      {
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
        goto LABEL_88;
      }
      if (__OFADD__(v9, 1)) {
        goto LABEL_74;
      }
      if (v9 + 1 < 1) {
        break;
      }
      ++v18;
      uint64_t v16 = v9;
      if (v13 == v18) {
        goto LABEL_12;
      }
    }
    uint64_t v13 = v18;
    uint64_t v9 = v16;
LABEL_13:
    char v11 = (4 * *(unsigned char *)(v10 + 18) + 8) & 0x3C;
    uint64_t v8 = ((-15 << v11) - 1) & v8 | (v13 << v11);
    uint64_t v12 = *(void *)(v10 + 24 + 24 * v13);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
    unint64_t v10 = v12;
    if (*(unsigned char *)(v12 + 18)) {
      continue;
    }
    break;
  }
  while (1)
  {
    uint64_t v33 = *(unsigned __int16 *)(v12 + 16);
    if (*(_WORD *)(v12 + 16))
    {
      uint64_t v34 = *(void *)(v12 + 24);
      BOOL v15 = __OFSUB__(v9, v34);
      uint64_t v35 = v9 - v34;
      if (v15) {
        goto LABEL_90;
      }
      if (__OFADD__(v35, 1)) {
        goto LABEL_91;
      }
      if (v35 + 1 < 1)
      {
        uint64_t v33 = 0;
        goto LABEL_70;
      }
      if (v33 != 1)
      {
        uint64_t v38 = (uint64_t *)(v12 + 48);
        uint64_t v39 = 1;
        while (1)
        {
          uint64_t v40 = *v38;
          v38 += 3;
          uint64_t v9 = v35 - v40;
          if (__OFSUB__(v35, v40)) {
            goto LABEL_82;
          }
          if (__OFADD__(v9, 1)) {
            goto LABEL_83;
          }
          if (v9 + 1 < 1)
          {
            uint64_t v33 = v39;
            uint64_t v9 = v35;
            goto LABEL_70;
          }
          ++v39;
          uint64_t v35 = v9;
          if (v33 == v39) {
            goto LABEL_69;
          }
        }
      }
      uint64_t v9 = v35;
    }
LABEL_69:
    if (v9) {
      goto LABEL_92;
    }
LABEL_70:
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    unint64_t v22 = v8 & 0xFFFFFFFFFFFFF0FFLL | (v33 << 8);
    uint64_t v23 = v9;
    uint64_t v21 = v41;
    if (v3)
    {
LABEL_28:
      swift_unknownObjectRetain();
      specialized Rope._Node.distanceFromStart<A>(to:in:)(v42, v22, v12, v3, v21);
      uint64_t result = swift_unknownObjectRelease_n();
      uint64_t v23 = v9;
    }
LABEL_29:
    uint64_t v8 = v7 - v23;
    if (__OFSUB__(v7, v23)) {
      goto LABEL_79;
    }
    if (v42 != *(void *)(v1 + 88)) {
      goto LABEL_80;
    }
    if (v12)
    {
      unint64_t v3 = *(void *)(v12 + 24 * ((v22 >> ((4 * *(unsigned char *)(v12 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v24 = *(void *)(v1 + 64);
      swift_unknownObjectRetain();
      unint64_t v3 = specialized Rope._Node.subscript.getter(v22, v24);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (__OFADD__(v8, v3)) {
      goto LABEL_81;
    }
    uint64_t v25 = (long long *)(v1 + 16);
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (result >= (uint64_t)(v8 + v3)) {
      break;
    }
    if (v8 < 1) {
      goto LABEL_84;
    }
    unint64_t v3 = *(void *)(v1 + 64);
    uint64_t v26 = *(void *)(v1 + 88);
    *(void *)&long long v52 = v42;
    *((void *)&v52 + 1) = v22;
    *(void *)&long long v53 = v12;
    if (v42 != v26) {
      goto LABEL_85;
    }
    if (v3)
    {
      unint64_t v27 = *(unsigned __int8 *)(v3 + 18);
      swift_unknownObjectRetain_n();
      if (v27 < v22) {
        goto LABEL_40;
      }
    }
    else if (v22)
    {
LABEL_40:
      if (!v12) {
        goto LABEL_46;
      }
      char v28 = (4 * *(unsigned char *)(v12 + 18) + 8) & 0x3C;
      if (((v22 >> v28) & 0xF) == 0) {
        goto LABEL_46;
      }
      unint64_t v29 = ((((v22 >> v28) & 0xF) - 1) << v28) | ((-15 << v28) - 1) & v22;
      *((void *)&v52 + 1) = v29;
      swift_unknownObjectRelease();
      goto LABEL_49;
    }
    __break(1u);
LABEL_52:
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v9 = v7;
    uint64_t v12 = v3;
  }
  long long v30 = *(_OWORD *)(v1 + 32);
  long long v45 = *v25;
  long long v46 = v30;
  long long v47 = *(_OWORD *)(v1 + 48);
  long long v52 = v45;
  long long v53 = v30;
  long long v54 = v47;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v52, (uint64_t)v55);
  outlined retain of Locale((uint64_t)v55);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)&v45);
  if (!__OFSUB__(v8, BigString.Index.utf8Offset.getter()))
  {
LABEL_62:
    uint64_t v37 = BigString.UTF8View.index(_:offsetBy:)();
    outlined release of Locale((uint64_t)v44);
    return v37;
  }
  __break(1u);
LABEL_46:
  swift_unknownObjectRetain();
  char v31 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v52, v3);
  uint64_t result = swift_unknownObjectRelease_n();
  if ((v31 & 1) == 0) {
    goto LABEL_89;
  }
  if ((void)v52 != v42) {
    goto LABEL_86;
  }
  unint64_t v29 = *((void *)&v52 + 1);
  uint64_t v12 = v53;
  if ((void)v53)
  {
LABEL_49:
    unint64_t v32 = *(void *)(v12 + 24 * ((v29 >> ((4 * *(unsigned char *)(v12 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_60;
  }
  swift_unknownObjectRetain();
  unint64_t v32 = specialized Rope._Node.subscript.getter(v29, v3);
  swift_unknownObjectRelease();
LABEL_60:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFSUB__(v8, v32)) {
    goto LABEL_87;
  }
  long long v36 = *(_OWORD *)(v1 + 32);
  long long v45 = *v25;
  long long v46 = v36;
  long long v47 = *(_OWORD *)(v1 + 48);
  long long v52 = v45;
  long long v53 = v36;
  long long v54 = v47;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v52, (uint64_t)v55);
  outlined retain of Locale((uint64_t)v55);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)&v45);
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (!__OFSUB__(v8 - v32, result)) {
    goto LABEL_62;
  }
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
  return result;
}

double AttributedString.Guts.getUniformValue<A>(in:key:)@<D0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v142 = a1;
  uint64_t v143 = a2;
  uint64_t v172 = 0;
  long long v170 = 0u;
  long long v171 = 0u;
  long long v168 = 0u;
  long long v169 = 0u;
  uint64_t v6 = BigString.Index.utf8Offset.getter();
  uint64_t v7 = BigString.Index.utf8Offset.getter();
  uint64_t v8 = v3[8];
  uint64_t v9 = v4[10];
  if (v8) {
    uint64_t v10 = v4[10];
  }
  else {
    uint64_t v10 = 0;
  }
  if (v6 < 0 || v10 < v6)
  {
LABEL_321:
    __break(1u);
LABEL_322:
    __break(1u);
LABEL_323:
    __break(1u);
LABEL_324:
    __break(1u);
LABEL_325:
    __break(1u);
LABEL_326:
    __break(1u);
LABEL_327:
    __break(1u);
LABEL_328:
    __break(1u);
LABEL_329:
    __break(1u);
LABEL_330:
    __break(1u);
LABEL_331:
    __break(1u);
LABEL_332:
    __break(1u);
LABEL_333:
    __break(1u);
LABEL_334:
    __break(1u);
LABEL_335:
    __break(1u);
LABEL_336:
    __break(1u);
LABEL_337:
    __break(1u);
LABEL_338:
    __break(1u);
    goto LABEL_339;
  }
  uint64_t v11 = v7;
  uint64_t v12 = v4[9];
  *(void *)&long long v148 = v4[11];
  uint64_t v140 = v4;
  uint64_t v146 = v7;
  uint64_t v136 = a3;
  if (!v8 || !*(_WORD *)(v8 + 16) || v6 >= v9)
  {
    swift_retain_n();
    unint64_t v27 = swift_unknownObjectRetain_n();
    *((void *)&v148 + 1) = specialized Rope._endPath.getter(v27);
    swift_unknownObjectRelease();
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    if (!v8) {
      goto LABEL_282;
    }
LABEL_35:
    swift_unknownObjectRetain();
    uint64_t v147 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v148, *((unint64_t *)&v148 + 1), v17, v8, v12);
    swift_release();
    swift_unknownObjectRelease_n();
    uint64_t v28 = v6 - v14;
    if (__OFSUB__(v6, v14))
    {
LABEL_284:
      __break(1u);
LABEL_285:
      __break(1u);
LABEL_286:
      __break(1u);
LABEL_287:
      __break(1u);
LABEL_288:
      __break(1u);
LABEL_289:
      __break(1u);
LABEL_290:
      __break(1u);
LABEL_291:
      __break(1u);
LABEL_292:
      __break(1u);
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
LABEL_298:
      __break(1u);
LABEL_299:
      __break(1u);
LABEL_300:
      __break(1u);
LABEL_301:
      __break(1u);
LABEL_302:
      __break(1u);
LABEL_303:
      __break(1u);
LABEL_304:
      __break(1u);
LABEL_305:
      __break(1u);
LABEL_306:
      __break(1u);
LABEL_307:
      __break(1u);
LABEL_308:
      __break(1u);
LABEL_309:
      __break(1u);
LABEL_310:
      __break(1u);
LABEL_311:
      __break(1u);
LABEL_312:
      __break(1u);
LABEL_313:
      __break(1u);
LABEL_314:
      __break(1u);
LABEL_315:
      __break(1u);
LABEL_316:
      __break(1u);
LABEL_317:
      __break(1u);
LABEL_318:
      __break(1u);
LABEL_319:
      __break(1u);
LABEL_320:
      __break(1u);
      goto LABEL_321;
    }
LABEL_36:
    uint64_t v141 = v143 + 24;
    uint64_t v139 = (long long *)((char *)&v156 + 8);
    uint64_t v144 = v6;
    while (1)
    {
      uint64_t v30 = v4[8];
      unint64_t v31 = *((void *)&v148 + 1);
      if (v6 != v11)
      {
        if (v30) {
          uint64_t v37 = v4[10];
        }
        else {
          uint64_t v37 = 0;
        }
        goto LABEL_108;
      }
      uint64_t v32 = v4[10];
      if (v30) {
        uint64_t v33 = v4[10];
      }
      else {
        uint64_t v33 = 0;
      }
      if (v33 < v6) {
        goto LABEL_303;
      }
      if (v30) {
        break;
      }
      uint64_t v4 = 0;
LABEL_106:
      uint64_t v37 = v6 - (void)v4;
      if (__OFSUB__(v6, v4)) {
        goto LABEL_304;
      }
      uint64_t v4 = v140;
LABEL_108:
      if (v28 == v37)
      {
        swift_release();
        outlined init with take of LocalePreferences?((uint64_t)&v168, v136, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        return result;
      }
      if ((void)v148 != v4[11]) {
        goto LABEL_288;
      }
      if (v17)
      {
        long long v52 = (void *)(v17 + 24 * ((v31 >> ((4 * *(unsigned char *)(v17 + 18) + 8) & 0x3C)) & 0xF));
        uint64_t v53 = v52[4];
        uint64_t v54 = v52[5];
        unint64_t v55 = v52[3];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v145 = (uint64_t *)v54;
      }
      else
      {
        uint64_t v56 = v4[8];
        unint64_t v57 = v31;
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v57, v56);
        uint64_t v53 = v58;
        uint64_t v60 = v59;
        swift_unknownObjectRelease();
        if ((void)v148 != v4[11]) {
          goto LABEL_311;
        }
        uint64_t v145 = (uint64_t *)v60;
        uint64_t v61 = v4[8];
        swift_unknownObjectRetain();
        unint64_t v55 = specialized Rope._Node.subscript.getter(v57, v61);
        uint64_t v11 = v146;
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v62 = v28 + v55;
      if (__OFADD__(v28, v55)) {
        goto LABEL_289;
      }
      if (v11 >= v28) {
        uint64_t v63 = v28;
      }
      else {
        uint64_t v63 = v11;
      }
      if (v28 < v6) {
        uint64_t v63 = v6;
      }
      if (v62 <= v6) {
        uint64_t v64 = v6;
      }
      else {
        uint64_t v64 = v28 + v55;
      }
      if (v11 >= v62) {
        uint64_t v65 = v64;
      }
      else {
        uint64_t v65 = v11;
      }
      if (v63 == v65) {
        goto LABEL_290;
      }
      uint64_t v66 = v4[8];
      uint64_t v67 = v4[11];
      unint64_t v68 = *((void *)&v148 + 1);
      long long v154 = v148;
      *(void *)&long long v155 = v17;
      if (__OFADD__(v147, 1)) {
        goto LABEL_291;
      }
      if ((void)v148 != v67) {
        goto LABEL_292;
      }
      ++v147;
      if (v17)
      {
        unint64_t v69 = *(void *)(v17 + 24 * ((*((void *)&v148 + 1) >> ((4 * *(unsigned char *)(v17 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
      }
      else
      {
        swift_retain();
        swift_unknownObjectRetain();
        unint64_t v69 = specialized Rope._Node.subscript.getter(v68, v66);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v23 = __OFADD__(v28, v69);
      v28 += v69;
      if (v23) {
        goto LABEL_293;
      }
      if (v66)
      {
        unint64_t v70 = ((-15 << ((4 * *(unsigned char *)(v66 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v66 + 18) | ((unint64_t)*(unsigned __int16 *)(v66 + 16) << ((4 * *(unsigned char *)(v66 + 18) + 8) & 0x3C));
        swift_unknownObjectRetain();
      }
      else
      {
        unint64_t v70 = 0;
      }
      uint64_t v11 = v146;
      if (*((void *)&v148 + 1) >= v70) {
        goto LABEL_294;
      }
      if (v17)
      {
        char v71 = (4 * *(unsigned char *)(v17 + 18) + 8) & 0x3C;
        unint64_t v72 = ((*((void *)&v148 + 1) >> v71) & 0xFLL) + 1;
        if (v72 < *(unsigned __int16 *)(v17 + 16))
        {
          uint64_t v73 = (v72 << v71) | ((-15 << v71) - 1) & *((void *)&v148 + 1);
          swift_unknownObjectRelease_n();
          uint64_t v74 = v73;
          uint64_t v6 = v144;
          if (v28 < v11) {
            goto LABEL_192;
          }
          goto LABEL_140;
        }
      }
      int v81 = *(unsigned __int8 *)(v66 + 18);
      char v82 = (4 * v81 + 8) & 0x3C;
      *(void *)&long long v163 = (*((void *)&v148 + 1) >> v82) & 0xFLL;
      uint64_t v6 = v144;
      if (v81)
      {
        swift_unknownObjectRetain();
        char v83 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v66 + 24, (uint64_t *)&v163, (uint64_t)&v154, v66, v81);
        swift_unknownObjectRelease();
        if (v83)
        {
          swift_unknownObjectRelease_n();
          uint64_t v74 = *((void *)&v154 + 1);
          if (v28 < v11) {
            goto LABEL_192;
          }
          goto LABEL_140;
        }
      }
      else
      {
        unint64_t v93 = ((*((void *)&v148 + 1) >> v82) & 0xFLL) + 1;
        if (v93 < *(unsigned __int16 *)(v66 + 16))
        {
          uint64_t v94 = (v93 << v82) | ((-15 << v82) - 1) & *((void *)&v148 + 1);
          *((void *)&v154 + 1) = v94;
          swift_unknownObjectRelease_n();
          uint64_t v74 = v94;
          *(void *)&long long v155 = v66;
          if (v28 < v11) {
            goto LABEL_192;
          }
          goto LABEL_140;
        }
      }
      if (v66)
      {
        int v95 = *(unsigned __int8 *)(v66 + 18);
        uint64_t v96 = *(unsigned __int16 *)(v66 + 16);
        swift_unknownObjectRelease_n();
        char v97 = (4 * v95 + 8) & 0x3C;
        uint64_t v98 = ((-15 << v97) - 1) & v95;
        uint64_t v99 = v96 << v97;
        uint64_t v6 = v144;
        uint64_t v74 = v98 | v99;
      }
      else
      {
        uint64_t v74 = 0;
      }
      *(void *)&long long v154 = v148;
      *((void *)&v154 + 1) = v74;
      *(void *)&long long v155 = 0;
      if (v28 < v11)
      {
LABEL_192:
        *(void *)&long long v148 = v154;
        *((void *)&v148 + 1) = v74;
        uint64_t v17 = v155;
        swift_release();
        goto LABEL_230;
      }
LABEL_140:
      uint64_t v75 = v4[8];
      if (v6 != v11)
      {
        *(void *)&long long v148 = v4[11];
        if (v75)
        {
          uint64_t v28 = v4[10];
          uint64_t v147 = v4[9];
          int v100 = *(unsigned __int8 *)(v75 + 18);
          uint64_t v101 = *(unsigned __int16 *)(v75 + 16);
          swift_release();
          uint64_t v17 = 0;
          char v102 = (4 * v100 + 8) & 0x3C;
          uint64_t v103 = ((-15 << v102) - 1) & v100;
          uint64_t v6 = v144;
          *((void *)&v148 + 1) = v103 | (v101 << v102);
        }
        else
        {
          swift_release();
          *((void *)&v148 + 1) = 0;
          uint64_t v17 = 0;
          uint64_t v147 = 0;
          uint64_t v28 = 0;
        }
        goto LABEL_230;
      }
      uint64_t v76 = v4[10];
      if (v75) {
        uint64_t v77 = v4[10];
      }
      else {
        uint64_t v77 = 0;
      }
      if (v77 < v6) {
        goto LABEL_314;
      }
      *(void *)&long long v148 = v4[11];
      if (!v75)
      {
        swift_release();
        uint64_t v79 = 0;
        uint64_t v17 = 0;
        *((void *)&v148 + 1) = 0;
        uint64_t v147 = 0;
        goto LABEL_229;
      }
      uint64_t v147 = v4[9];
      uint64_t v78 = *(unsigned __int8 *)(v75 + 18);
      if (v6 < v76 && *(_WORD *)(v75 + 16))
      {
        if (*(unsigned char *)(v75 + 18))
        {
          swift_unknownObjectRetain_n();
          uint64_t v79 = v6;
          uint64_t v80 = v75;
          while (1)
          {
            unint64_t v85 = *(unsigned __int16 *)(v80 + 16);
            if (!*(_WORD *)(v80 + 16)) {
              goto LABEL_155;
            }
            uint64_t v86 = *(void *)(v80 + 40);
            BOOL v23 = __OFSUB__(v79, v86);
            uint64_t v87 = v79 - v86;
            if (v23) {
              goto LABEL_296;
            }
            if (__OFADD__(v87, 1)) {
              goto LABEL_297;
            }
            if (v87 + 1 <= 0)
            {
              unint64_t v85 = 0;
            }
            else
            {
              if (v85 == 1) {
                goto LABEL_154;
              }
              uint64_t v88 = *(void *)(v80 + 64);
              uint64_t v79 = v87 - v88;
              if (__OFSUB__(v87, v88)) {
                goto LABEL_312;
              }
              if (__OFADD__(v79, 1)) {
                goto LABEL_313;
              }
              if (v79 + 1 < 1)
              {
                unint64_t v85 = 1;
                uint64_t v79 = v87;
              }
              else
              {
                if (v85 == 2) {
                  goto LABEL_155;
                }
                uint64_t v89 = *(void *)(v80 + 88);
                BOOL v23 = __OFSUB__(v79, v89);
                uint64_t v87 = v79 - v89;
                if (v23) {
                  goto LABEL_325;
                }
                if (__OFADD__(v87, 1)) {
                  goto LABEL_326;
                }
                if (v87 + 1 < 1)
                {
                  unint64_t v85 = 2;
                }
                else
                {
                  if (v85 == 3)
                  {
LABEL_154:
                    uint64_t v79 = v87;
LABEL_155:
                    if (v79) {
                      goto LABEL_295;
                    }
                    goto LABEL_156;
                  }
                  uint64_t v90 = 3;
                  if (v85 > 3) {
                    uint64_t v90 = *(unsigned __int16 *)(v80 + 16);
                  }
                  long long v91 = (void *)(v80 + 112);
                  uint64_t v92 = 3;
                  while (1)
                  {
                    if (v90 == v92) {
                      goto LABEL_305;
                    }
                    uint64_t v79 = v87 - *v91;
                    if (__OFSUB__(v87, *v91)) {
                      goto LABEL_306;
                    }
                    if (__OFADD__(v79, 1)) {
                      goto LABEL_307;
                    }
                    if (v79 + 1 < 1) {
                      break;
                    }
                    ++v92;
                    v91 += 3;
                    uint64_t v87 = v79;
                    if (v85 == v92) {
                      goto LABEL_155;
                    }
                  }
                  unint64_t v85 = v92;
                  uint64_t v79 = v87;
                }
              }
            }
LABEL_156:
            char v84 = (4 * *(unsigned char *)(v80 + 18) + 8) & 0x3C;
            uint64_t v78 = ((-15 << v84) - 1) & v78 | (v85 << v84);
            uint64_t v17 = *(void *)(v80 + 24 + 24 * v85);
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            uint64_t v80 = v17;
            if (!*(unsigned char *)(v17 + 18)) {
              goto LABEL_197;
            }
          }
        }
        swift_unknownObjectRetain_n();
        uint64_t v78 = 0;
        uint64_t v79 = v6;
        uint64_t v17 = v75;
LABEL_197:
        unint64_t v105 = *(unsigned __int16 *)(v17 + 16);
        if (*(_WORD *)(v17 + 16))
        {
          uint64_t v106 = *(void *)(v17 + 24);
          BOOL v23 = __OFSUB__(v79, v106);
          uint64_t v107 = v79 - v106;
          uint64_t v4 = v140;
          if (v23) {
            goto LABEL_328;
          }
          if (__OFADD__(v107, 1)) {
            goto LABEL_329;
          }
          if (v107 + 1 <= 0)
          {
            unint64_t v105 = 0;
            goto LABEL_227;
          }
          if (v105 == 1) {
            goto LABEL_202;
          }
          uint64_t v108 = *(void *)(v17 + 48);
          uint64_t v79 = v107 - v108;
          if (__OFSUB__(v107, v108)) {
            goto LABEL_340;
          }
          if (__OFADD__(v79, 1)) {
            goto LABEL_341;
          }
          if (v79 + 1 < 1)
          {
            unint64_t v105 = 1;
            goto LABEL_225;
          }
          if (v105 != 2)
          {
            uint64_t v109 = *(void *)(v17 + 72);
            BOOL v23 = __OFSUB__(v79, v109);
            uint64_t v107 = v79 - v109;
            if (v23) {
              goto LABEL_344;
            }
            if (__OFADD__(v107, 1)) {
              goto LABEL_345;
            }
            if (v107 + 1 < 1)
            {
              unint64_t v105 = 2;
              goto LABEL_227;
            }
            if (v105 != 3)
            {
              uint64_t v110 = 3;
              if (v105 > 3) {
                uint64_t v110 = *(unsigned __int16 *)(v17 + 16);
              }
              uint64_t v111 = (void *)(v17 + 96);
              uint64_t v112 = 3;
              while (1)
              {
                if (v110 == v112) {
                  goto LABEL_335;
                }
                uint64_t v79 = v107 - *v111;
                if (__OFSUB__(v107, *v111)) {
                  goto LABEL_336;
                }
                if (__OFADD__(v79, 1)) {
                  goto LABEL_337;
                }
                if (v79 + 1 < 1) {
                  break;
                }
                ++v112;
                v111 += 3;
                uint64_t v107 = v79;
                if (v105 == v112) {
                  goto LABEL_204;
                }
              }
              unint64_t v105 = v112;
LABEL_225:
              uint64_t v79 = v107;
LABEL_227:
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              unint64_t v104 = v78 & 0xFFFFFFFFFFFFF0FFLL | (v105 << 8);
              uint64_t v11 = v146;
              goto LABEL_228;
            }
LABEL_202:
            uint64_t v79 = v107;
          }
        }
        else
        {
          uint64_t v4 = v140;
        }
LABEL_204:
        if (v79) {
          goto LABEL_327;
        }
        goto LABEL_227;
      }
      unint64_t v104 = ((-15 << ((4 * v78 + 8) & 0x3C)) - 1) & v78 | ((unint64_t)*(unsigned __int16 *)(v75 + 16) << ((4 * v78 + 8) & 0x3C));
      swift_unknownObjectRetain();
      uint64_t v79 = 0;
      uint64_t v17 = 0;
LABEL_228:
      swift_unknownObjectRetain();
      *((void *)&v148 + 1) = v104;
      uint64_t v147 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v148, v104, v17, v75, v147);
      swift_release();
      swift_unknownObjectRelease_n();
LABEL_229:
      uint64_t v28 = v6 - v79;
      if (__OFSUB__(v6, v79)) {
        goto LABEL_315;
      }
LABEL_230:
      uint64_t v113 = (*(uint64_t (**)(void))(v143 + 24))();
      if (*(void *)(v53 + 16) && (unint64_t v115 = specialized __RawDictionaryStorage.find<A>(_:)(v113, v114), (v116 & 1) != 0))
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v53 + 56) + 72 * v115, (uint64_t)&v154);
      }
      else
      {
        uint64_t v158 = 0;
        long long v156 = 0u;
        long long v157 = 0u;
        long long v155 = 0u;
        long long v154 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!*((void *)&v155 + 1))
      {
        swift_release();
        outlined destroy of Any?((uint64_t)&v168, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?((uint64_t)&v154, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_263;
      }
      long long v165 = v156;
      long long v166 = v157;
      uint64_t v167 = v158;
      long long v163 = v154;
      long long v164 = v155;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v168, (uint64_t)&v154, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!*((void *)&v155 + 1))
      {
        outlined destroy of Any?((uint64_t)&v168, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        unint64_t v29 = &v154;
LABEL_38:
        outlined destroy of Any?((uint64_t)v29, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_39;
      }
      v161[2] = v156;
      v161[3] = v157;
      uint64_t v162 = v158;
      v161[0] = v154;
      v161[1] = v155;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v163, (uint64_t)v160);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v161, (uint64_t)v159);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v160, (uint64_t)&v154, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v159, (uint64_t)v139, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (!*((void *)&v155 + 1))
      {
        if (v158)
        {
          outlined destroy of Any?((uint64_t)v139, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_261;
        }
        outlined destroy of Any?((uint64_t)v159, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of Any?((uint64_t)v160, &demangling cache variable for type metadata for (Hashable & Sendable)?);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v161);
        unint64_t v29 = &v168;
        goto LABEL_38;
      }
      uint64_t v18 = &v154;
      if (!v158) {
        goto LABEL_258;
      }
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v154, (uint64_t)v151);
      outlined init with take of any PredicateExpression<Self.Output == B1>(v139, (uint64_t)v150);
      uint64_t v117 = v152;
      uint64_t v138 = v153;
      uint64_t v137 = __swift_project_boxed_opaque_existential_1(v151, v152);
      uint64_t v145 = &v135;
      uint64_t v118 = *(void *)(v117 - 8);
      MEMORY[0x1F4188790](v137);
      long long v120 = (char *)&v135 - ((v119 + 15) & 0xFFFFFFFFFFFFFFF0);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v150, (uint64_t)&v149);
      uint64_t v121 = type metadata accessor for Optional();
      uint64_t v122 = *(void *)(v121 - 8);
      MEMORY[0x1F4188790](v121);
      long long v124 = (char *)&v135 - v123;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      int v125 = swift_dynamicCast();
      long long v126 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v118 + 56);
      if (v125)
      {
        v126(v124, 0, 1, v117);
        (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v120, v124, v117);
        char v127 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*(void (**)(char *, uint64_t))(v118 + 8))(v120, v117);
      }
      else
      {
        v126(v124, 1, 1, v117);
        (*(void (**)(char *, uint64_t))(v122 + 8))(v124, v121);
        char v127 = 0;
      }
      uint64_t v4 = v140;
      uint64_t v6 = v144;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v150);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v151);
      outlined destroy of Any?((uint64_t)v159, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v160, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v161);
      outlined destroy of Any?((uint64_t)&v168, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t v11 = v146;
      if ((v127 & 1) == 0) {
        goto LABEL_262;
      }
LABEL_39:
      long long v170 = v165;
      long long v171 = v166;
      uint64_t v172 = v167;
      long long v168 = v163;
      long long v169 = v164;
    }
    uint64_t v145 = (uint64_t *)v4[9];
    uint64_t v138 = v4[11];
    uint64_t v34 = *(unsigned __int16 *)(v30 + 16);
    uint64_t v13 = *(unsigned __int8 *)(v30 + 18);
    if (v6 >= v32 || v34 == 0)
    {
      unint64_t v36 = ((-15 << ((4 * v13 + 8) & 0x3C)) - 1) & v13 | (unint64_t)(v34 << ((4 * v13 + 8) & 0x3C));
      swift_unknownObjectRetain();
      uint64_t v4 = 0;
      uint64_t v11 = 0;
LABEL_105:
      swift_unknownObjectRetain();
      specialized Rope._Node.distanceFromStart<A>(to:in:)(v138, v36, v11, v30, (uint64_t)v145);
      swift_unknownObjectRelease_n();
      uint64_t v11 = v146;
      unint64_t v31 = *((void *)&v148 + 1);
      goto LABEL_106;
    }
    if (*(unsigned char *)(v30 + 18))
    {
      swift_unknownObjectRetain_n();
      uint64_t v4 = (void *)v6;
      uint64_t v8 = v30;
      while (1)
      {
        uint64_t v39 = *(unsigned __int16 *)(v8 + 16);
        if (!*(_WORD *)(v8 + 16)) {
          goto LABEL_59;
        }
        uint64_t v40 = *(void *)(v8 + 40);
        uint64_t v41 = (void *)((char *)v4 - v40);
        if (__OFSUB__(v4, v40)) {
          goto LABEL_286;
        }
        if (__OFADD__(v41, 1)) {
          goto LABEL_287;
        }
        if ((uint64_t)v41 + 1 <= 0)
        {
          uint64_t v39 = 0;
          goto LABEL_60;
        }
        if (v39 == 1) {
          break;
        }
        uint64_t v42 = *(void *)(v8 + 64);
        BOOL v23 = __OFSUB__(v41, v42);
        uint64_t v43 = (uint64_t)v41 - v42;
        if (v23) {
          goto LABEL_301;
        }
        if (__OFADD__(v43, 1)) {
          goto LABEL_302;
        }
        if (v43 + 1 < 1)
        {
          uint64_t v39 = 1;
          uint64_t v4 = v41;
          goto LABEL_60;
        }
        if (v39 == 2)
        {
          uint64_t v4 = (void *)v43;
          goto LABEL_59;
        }
        long long v44 = (void *)(v8 + 88);
        uint64_t v45 = 2;
        while (1)
        {
          if (v39 == v45)
          {
            __break(1u);
LABEL_278:
            __break(1u);
LABEL_279:
            __break(1u);
LABEL_280:
            uint64_t v129 = v43;
            uint64_t v14 = v39;
LABEL_281:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            *((void *)&v148 + 1) = v13 & 0xFFFFFFFFFFFFF0FFLL | (v129 << 8);
            uint64_t v12 = v147;
            if (v8) {
              goto LABEL_35;
            }
LABEL_282:
            swift_release();
            uint64_t v147 = 0;
            uint64_t v28 = v6 - v14;
            if (__OFSUB__(v6, v14)) {
              goto LABEL_284;
            }
            goto LABEL_36;
          }
          uint64_t v4 = (void *)(v43 - *v44);
          if (__OFSUB__(v43, *v44)) {
            goto LABEL_278;
          }
          if (__OFADD__(v4, 1)) {
            goto LABEL_279;
          }
          if ((uint64_t)v4 + 1 < 1) {
            break;
          }
          ++v45;
          v44 += 3;
          uint64_t v43 = (uint64_t)v4;
          if (v39 == v45) {
            goto LABEL_59;
          }
        }
        uint64_t v39 = v45;
        uint64_t v4 = (void *)v43;
LABEL_60:
        char v38 = (4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C;
        uint64_t v13 = ((-15 << v38) - 1) & v13 | (v39 << v38);
        uint64_t v11 = *(void *)(v8 + 24 + 24 * v39);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        uint64_t v8 = v11;
        if (!*(unsigned char *)(v11 + 18)) {
          goto LABEL_82;
        }
      }
      uint64_t v4 = (void *)((char *)v4 - v40);
LABEL_59:
      if (!v4) {
        goto LABEL_60;
      }
      goto LABEL_285;
    }
    swift_unknownObjectRetain_n();
    uint64_t v13 = 0;
    uint64_t v4 = (void *)v6;
    uint64_t v11 = v30;
LABEL_82:
    uint64_t v46 = *(unsigned __int16 *)(v11 + 16);
    if (!*(_WORD *)(v11 + 16)) {
      goto LABEL_91;
    }
    uint64_t v47 = *(void *)(v11 + 24);
    BOOL v23 = __OFSUB__(v4, v47);
    uint64_t v48 = (void *)((char *)v4 - v47);
    if (v23) {
      goto LABEL_323;
    }
    if (__OFADD__(v48, 1)) {
      goto LABEL_324;
    }
    if ((uint64_t)v48 + 1 <= 0)
    {
      uint64_t v46 = 0;
    }
    else
    {
      if (v46 == 1)
      {
LABEL_92:
        if (v48) {
          goto LABEL_322;
        }
        uint64_t v4 = 0;
        goto LABEL_104;
      }
      uint64_t v49 = *(void *)(v11 + 48);
      uint64_t v4 = (void *)((char *)v48 - v49);
      if (__OFSUB__(v48, v49)) {
        goto LABEL_333;
      }
      if (__OFADD__(v4, 1)) {
        goto LABEL_334;
      }
      if ((uint64_t)v4 + 1 < 1)
      {
        uint64_t v46 = 1;
        uint64_t v4 = v48;
      }
      else
      {
        if (v46 == 2)
        {
LABEL_91:
          uint64_t v48 = v4;
          goto LABEL_92;
        }
        uint64_t v50 = (void *)(v11 + 72);
        uint64_t v51 = 2;
        while (1)
        {
          if (v46 == v51) {
            goto LABEL_316;
          }
          uint64_t v48 = (void *)((char *)v4 - *v50);
          if (__OFSUB__(v4, *v50)) {
            goto LABEL_317;
          }
          if (__OFADD__(v48, 1)) {
            goto LABEL_318;
          }
          if ((uint64_t)v48 + 1 < 1) {
            break;
          }
          ++v51;
          v50 += 3;
          uint64_t v4 = v48;
          if (v46 == v51) {
            goto LABEL_92;
          }
        }
        uint64_t v46 = v51;
      }
    }
LABEL_104:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v36 = v13 & 0xFFFFFFFFFFFFF0FFLL | (v46 << 8);
    goto LABEL_105;
  }
  uint64_t v147 = v12;
  uint64_t v13 = *(unsigned __int8 *)(v8 + 18);
  if (*(unsigned char *)(v8 + 18))
  {
    swift_unknownObjectRetain_n();
    swift_retain_n();
    uint64_t v14 = v6;
    uint64_t v15 = v8;
    while (1)
    {
      uint64_t v19 = *(unsigned __int16 *)(v15 + 16);
      if (!*(_WORD *)(v15 + 16)) {
        goto LABEL_12;
      }
      uint64_t v20 = *(void *)(v15 + 40);
      uint64_t v21 = v14 - v20;
      if (__OFSUB__(v14, v20)) {
        goto LABEL_309;
      }
      if (__OFADD__(v21, 1)) {
        goto LABEL_310;
      }
      if (v21 + 1 <= 0)
      {
        uint64_t v19 = 0;
      }
      else
      {
        if (v19 == 1)
        {
          v14 -= v20;
          goto LABEL_12;
        }
        uint64_t v22 = *(void *)(v15 + 64);
        BOOL v23 = __OFSUB__(v21, v22);
        uint64_t v24 = v21 - v22;
        if (v23) {
          goto LABEL_319;
        }
        if (__OFADD__(v24, 1)) {
          goto LABEL_320;
        }
        if (v24 + 1 < 1)
        {
          uint64_t v19 = 1;
          uint64_t v14 = v21;
        }
        else
        {
          if (v19 == 2)
          {
            uint64_t v14 = v24;
LABEL_12:
            if (v14) {
              goto LABEL_308;
            }
            goto LABEL_13;
          }
          uint64_t v25 = (void *)(v15 + 88);
          uint64_t v26 = 2;
          while (1)
          {
            if (v19 == v26) {
              goto LABEL_298;
            }
            uint64_t v14 = v24 - *v25;
            if (__OFSUB__(v24, *v25)) {
              goto LABEL_299;
            }
            if (__OFADD__(v14, 1)) {
              goto LABEL_300;
            }
            if (v14 + 1 < 1) {
              break;
            }
            ++v26;
            v25 += 3;
            uint64_t v24 = v14;
            if (v19 == v26) {
              goto LABEL_12;
            }
          }
          uint64_t v19 = v26;
          uint64_t v14 = v24;
        }
      }
LABEL_13:
      char v16 = (4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C;
      uint64_t v13 = ((-15 << v16) - 1) & v13 | (v19 << v16);
      uint64_t v17 = *(void *)(v15 + 24 + 24 * v19);
      swift_unknownObjectRetain();
      uint64_t v18 = (long long *)swift_unknownObjectRelease();
      uint64_t v15 = v17;
      if (!*(unsigned char *)(v17 + 18)) {
        goto LABEL_249;
      }
    }
  }
  swift_unknownObjectRetain_n();
  uint64_t v18 = (long long *)swift_retain_n();
  uint64_t v14 = v6;
  uint64_t v17 = v8;
LABEL_249:
  uint64_t v129 = *(unsigned __int16 *)(v17 + 16);
  if (!*(_WORD *)(v17 + 16))
  {
    uint64_t v4 = v140;
    uint64_t v11 = v146;
    goto LABEL_256;
  }
  uint64_t v130 = *(void *)(v17 + 24);
  uint64_t v131 = v14 - v130;
  uint64_t v4 = v140;
  uint64_t v11 = v146;
  if (__OFSUB__(v14, v130)) {
    goto LABEL_338;
  }
  if (__OFADD__(v131, 1))
  {
LABEL_339:
    __break(1u);
LABEL_340:
    __break(1u);
LABEL_341:
    __break(1u);
    goto LABEL_342;
  }
  if (v131 + 1 <= 0)
  {
    uint64_t v129 = 0;
    goto LABEL_281;
  }
  if (v129 != 1)
  {
    uint64_t v133 = *(void *)(v17 + 48);
    BOOL v23 = __OFSUB__(v131, v133);
    uint64_t v39 = v131 - v133;
    if (v23)
    {
LABEL_342:
      __break(1u);
LABEL_343:
      __break(1u);
LABEL_344:
      __break(1u);
LABEL_345:
      __break(1u);
      JUMPOUT(0x181AA64C8);
    }
    if (__OFADD__(v39, 1)) {
      goto LABEL_343;
    }
    if (v39 + 1 < 1)
    {
      uint64_t v129 = 1;
      uint64_t v14 = v131;
      goto LABEL_281;
    }
    if (v129 == 2)
    {
      uint64_t v14 = v39;
      goto LABEL_256;
    }
    uint64_t v134 = (void *)(v17 + 72);
    uint64_t v43 = 2;
    while (v129 != v43)
    {
      uint64_t v14 = v39 - *v134;
      if (__OFSUB__(v39, *v134)) {
        goto LABEL_331;
      }
      if (__OFADD__(v14, 1)) {
        goto LABEL_332;
      }
      if (v14 + 1 < 1) {
        goto LABEL_280;
      }
      ++v43;
      v134 += 3;
      uint64_t v39 = v14;
      if (v129 == v43) {
        goto LABEL_256;
      }
    }
    goto LABEL_330;
  }
  v14 -= v130;
LABEL_256:
  if (!v14) {
    goto LABEL_281;
  }
  __break(1u);
LABEL_258:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
LABEL_261:
  outlined destroy of Any?((uint64_t)v159, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of Any?((uint64_t)v160, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v161);
  outlined destroy of Any?((uint64_t)&v168, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_262:
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v163);
  swift_release();
LABEL_263:
  char v132 = (_OWORD *)v136;
  *(void *)(v136 + 64) = 0;
  double result = 0.0;
  v132[2] = 0u;
  v132[3] = 0u;
  *char v132 = 0u;
  v132[1] = 0u;
  return result;
}

uint64_t AttributedString.Guts.attributesToUseForTextReplacement(in:)()
{
  uint64_t v1 = v0;
  long long v2 = v0[2];
  v38[0] = v0[1];
  v38[1] = v2;
  long long v39 = v0[3];
  v40[0] = v38[0];
  v40[1] = v2;
  v40[2] = v39;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v40, (uint64_t)v41);
  outlined retain of Locale((uint64_t)v41);
  char v3 = BigString.isEmpty.getter();
  outlined release of Locale((uint64_t)v38);
  if (v3) {
    return MEMORY[0x1E4FBC868];
  }
  if ((static BigString.Index.== infix(_:_:)() & 1) != 0 && BigString.Index.utf8Offset.getter() >= 1)
  {
    long long v5 = v1[2];
    v36[0] = v1[1];
    v36[1] = v5;
    long long v37 = v1[3];
    v42[0] = v36[0];
    v42[1] = v5;
    v42[2] = v37;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v42, (uint64_t)v43);
    outlined retain of Locale((uint64_t)v43);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v36);
    BigString.UTF8View.index(before:)();
    outlined release of Locale((uint64_t)v35);
  }
  uint64_t v6 = *((void *)v1 + 8);
  uint64_t v7 = *((void *)v1 + 9);
  uint64_t v9 = *((void *)v1 + 10);
  uint64_t v8 = *((void *)v1 + 11);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v6) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = 0;
  }
  if (result < 0 || (uint64_t v12 = result, v11 < result))
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (!v6 || result >= v9 || !*(_WORD *)(v6 + 16))
  {
    unint64_t v23 = swift_unknownObjectRetain();
    unint64_t v24 = specialized Rope._endPath.getter(v23);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v14 = 0;
    if (v6) {
      goto LABEL_33;
    }
    goto LABEL_34;
  }
  uint64_t v33 = v7;
  uint64_t v34 = v8;
  uint64_t v13 = *(unsigned __int8 *)(v6 + 18);
  if (!*(unsigned char *)(v6 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    unint64_t v27 = 0;
    uint64_t v14 = v6;
    uint64_t v28 = *(unsigned __int16 *)(v6 + 16);
    if (!*(_WORD *)(v6 + 16)) {
      goto LABEL_52;
    }
LABEL_43:
    uint64_t v29 = *(void *)(v14 + 24);
    BOOL v18 = __OFSUB__(v12, v29);
    v12 -= v29;
    if (v18) {
      goto LABEL_66;
    }
    if (__OFADD__(v12, 1))
    {
LABEL_67:
      __break(1u);
      return result;
    }
    if (v12 + 1 < 1) {
      goto LABEL_54;
    }
    if (v28 == 1) {
      goto LABEL_52;
    }
    uint64_t v30 = (uint64_t *)(v14 + 48);
    uint64_t v31 = 1;
    while (1)
    {
      uint64_t v32 = *v30;
      v30 += 3;
      BOOL v18 = __OFSUB__(v12, v32);
      v12 -= v32;
      if (v18) {
        break;
      }
      if (__OFADD__(v12, 1)) {
        goto LABEL_65;
      }
      if (v12 + 1 < 1)
      {
        uint64_t v28 = v31;
        goto LABEL_56;
      }
      if (v28 == ++v31) {
        goto LABEL_52;
      }
    }
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v14 = v6;
  do
  {
    uint64_t v16 = *(unsigned __int16 *)(v14 + 16);
    if (*(_WORD *)(v14 + 16))
    {
      uint64_t v17 = *(void *)(v14 + 40);
      BOOL v18 = __OFSUB__(v12, v17);
      uint64_t v19 = v12 - v17;
      if (v18) {
        goto LABEL_60;
      }
      if (__OFADD__(v19, 1)) {
        goto LABEL_61;
      }
      if (v19 + 1 < 1)
      {
        uint64_t v16 = 0;
        goto LABEL_18;
      }
      if (v16 != 1)
      {
        uint64_t v20 = (uint64_t *)(v14 + 64);
        uint64_t v21 = 1;
        while (1)
        {
          uint64_t v22 = *v20;
          v20 += 3;
          uint64_t v12 = v19 - v22;
          if (__OFSUB__(v19, v22)) {
            break;
          }
          if (__OFADD__(v12, 1)) {
            goto LABEL_58;
          }
          if (v12 + 1 < 1)
          {
            uint64_t v16 = v21;
            uint64_t v12 = v19;
            goto LABEL_18;
          }
          ++v21;
          uint64_t v19 = v12;
          if (v16 == v21) {
            goto LABEL_17;
          }
        }
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      uint64_t v12 = v19;
    }
LABEL_17:
    if (v12) {
      goto LABEL_59;
    }
LABEL_18:
    char v15 = (4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C;
    uint64_t v13 = ((-15 << v15) - 1) & v13 | (v16 << v15);
    uint64_t v14 = *(void *)(v14 + 24 + 24 * v16);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
  }
  while (*(unsigned char *)(v14 + 18));
  unint64_t v27 = v13 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v28 = *(unsigned __int16 *)(v14 + 16);
  if (*(_WORD *)(v14 + 16)) {
    goto LABEL_43;
  }
LABEL_52:
  if (v12)
  {
    __break(1u);
LABEL_54:
    uint64_t v28 = 0;
  }
LABEL_56:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v24 = v27 | (v28 << 8);
  uint64_t v7 = v33;
  uint64_t v8 = v34;
LABEL_33:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v8, v24, v14, v6, v7);
  uint64_t result = swift_unknownObjectRelease_n();
LABEL_34:
  if (v8 != *((void *)v1 + 11)) {
    goto LABEL_63;
  }
  if (v14)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v25 = *((void *)v1 + 8);
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v24, v25);
    swift_unknownObjectRelease();
  }
  uint64_t v26 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized _NativeDictionary.filter(_:)(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return v4;
}

void *specialized Rope.update<A>(at:by:)(void *result, void *a2, uint64_t *a3)
{
  uint64_t v3 = a2[3];
  if (*result != v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (!*a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v6 = result;
  specialized Rope._Node._prepareModify(at:)(result[1], (uint64_t)&v13);
  long long v16 = v14;
  long long v10 = v13;
  long long v11 = v14;
  long long v12 = v15;
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v16);
  uint64_t result = (void *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v16 + 8);
  *(void *)&long long v11 = v8;
  *((void *)&v11 + 1) = v7;
  a2[3] = v3 + 1;
  *uint64_t v6 = v3 + 1;
  if (*a2)
  {
    v6[2] = specialized Rope._Node._finalizeModify(_:)(&v9, &v10);
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;

  uint64_t v3 = a2[3];
  if (*result != v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (!*a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v6 = result;
  specialized Rope._Node._prepareModify(at:)(result[1], (uint64_t)&v13);
  long long v16 = v14;
  outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v16);
  uint64_t result = (void *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v16 + 8);
  long long v10 = v13;
  long long v11 = v14;
  long long v12 = v15;
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  *(void *)&long long v11 = v7;
  *((void *)&v11 + 1) = v8;
  a2[3] = v3 + 1;
  *uint64_t v6 = v3 + 1;
  if (*a2)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v6[2] = specialized Rope._Node._finalizeModify(_:)(&v9, &v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (void *)v7;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v111[3] = a4;
  uint64_t v127 = a3;
  uint64_t v4 = isStackAllocationSafe;
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  int64_t v113 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v6 = 8 * v113;
  uint64_t v126 = isStackAllocationSafe;
  if ((v5 & 0x3Fu) > 0xD)
  {
    Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v112 = (unint64_t *)swift_slowAlloc();
      bzero(v112, v6);
      uint64_t v122 = 0;
      int64_t v37 = 0;
      uint64_t v38 = *(void *)(v4 + 64);
      uint64_t v124 = v4 + 64;
      uint64_t v39 = 1 << *(unsigned char *)(v4 + 32);
      if (v39 < 64) {
        uint64_t v40 = ~(-1 << v39);
      }
      else {
        uint64_t v40 = -1;
      }
      unint64_t v41 = v40 & v38;
      int64_t v125 = (unint64_t)(v39 + 63) >> 6;
      uint64_t v42 = &v151;
      long long v128 = &v141;
      uint64_t v123 = (long long *)((char *)&v142 + 8);
      uint64_t v114 = &v151;
      while (1)
      {
        if (v41)
        {
          unint64_t v43 = __clz(__rbit64(v41));
          v41 &= v41 - 1;
          unint64_t v44 = v43 | (v37 << 6);
          uint64_t v45 = v127;
        }
        else
        {
          BOOL v16 = __OFADD__(v37++, 1);
          uint64_t v45 = v127;
          if (v16) {
            goto LABEL_154;
          }
          if (v37 >= v125) {
            goto LABEL_82;
          }
          unint64_t v46 = *(void *)(v124 + 8 * v37);
          if (!v46)
          {
            int64_t v47 = v37 + 1;
            if (v37 + 1 >= v125) {
              goto LABEL_82;
            }
            unint64_t v46 = *(void *)(v124 + 8 * v47);
            if (!v46)
            {
              int64_t v47 = v37 + 2;
              if (v37 + 2 >= v125) {
                goto LABEL_82;
              }
              unint64_t v46 = *(void *)(v124 + 8 * v47);
              if (!v46)
              {
                int64_t v47 = v37 + 3;
                if (v37 + 3 >= v125) {
                  goto LABEL_82;
                }
                unint64_t v46 = *(void *)(v124 + 8 * v47);
                if (!v46)
                {
                  while (1)
                  {
                    int64_t v37 = v47 + 1;
                    if (__OFADD__(v47, 1)) {
                      goto LABEL_157;
                    }
                    if (v37 >= v125) {
                      break;
                    }
                    unint64_t v46 = *(void *)(v124 + 8 * v37);
                    ++v47;
                    if (v46) {
                      goto LABEL_61;
                    }
                  }
LABEL_82:
                  if (!v122)
                  {
                    uint64_t v4 = MEMORY[0x1E4FBC868];
                    goto LABEL_150;
                  }
                  if (v122 == *(void *)(v4 + 16))
                  {
                    swift_retain();
                    goto LABEL_150;
                  }
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
                  uint64_t v88 = static _DictionaryStorage.allocate(capacity:)();
                  int64_t v89 = 0;
                  unint64_t v90 = *v112;
                  uint64_t v91 = v88 + 64;
                  while (1)
                  {
                    if (v90)
                    {
                      unint64_t v95 = __clz(__rbit64(v90));
                      v90 &= v90 - 1;
                      unint64_t v96 = v95 | (v89 << 6);
                    }
                    else
                    {
                      BOOL v16 = __OFADD__(v89++, 1);
                      if (v16) {
                        goto LABEL_158;
                      }
                      if (v89 >= v113) {
                        goto LABEL_149;
                      }
                      unint64_t v97 = v112[v89];
                      if (!v97)
                      {
                        int64_t v98 = v89 + 1;
                        if (v89 + 1 >= v113) {
                          goto LABEL_149;
                        }
                        unint64_t v97 = v112[v98];
                        if (!v97)
                        {
                          int64_t v98 = v89 + 2;
                          if (v89 + 2 >= v113) {
                            goto LABEL_149;
                          }
                          unint64_t v97 = v112[v98];
                          if (!v97)
                          {
                            int64_t v98 = v89 + 3;
                            if (v89 + 3 >= v113) {
                              goto LABEL_149;
                            }
                            unint64_t v97 = v112[v98];
                            if (!v97)
                            {
                              int64_t v98 = v89 + 4;
                              if (v89 + 4 >= v113) {
                                goto LABEL_149;
                              }
                              unint64_t v97 = v112[v98];
                              if (!v97)
                              {
                                while (1)
                                {
                                  int64_t v89 = v98 + 1;
                                  if (__OFADD__(v98, 1)) {
                                    goto LABEL_160;
                                  }
                                  if (v89 >= v113) {
                                    break;
                                  }
                                  unint64_t v97 = v112[v89];
                                  ++v98;
                                  if (v97) {
                                    goto LABEL_135;
                                  }
                                }
LABEL_149:
                                uint64_t v4 = v88;
LABEL_150:
                                MEMORY[0x185309510](v112, -1, -1);
                                goto LABEL_151;
                              }
                            }
                          }
                        }
                        int64_t v89 = v98;
                      }
LABEL_135:
                      unint64_t v90 = (v97 - 1) & v97;
                      unint64_t v96 = __clz(__rbit64(v97)) + (v89 << 6);
                    }
                    uint64_t v99 = (uint64_t *)(*(void *)(v126 + 48) + 16 * v96);
                    uint64_t v101 = *v99;
                    uint64_t v100 = v99[1];
                    outlined init with copy of AttributedString._AttributeValue(*(void *)(v126 + 56) + 72 * v96, (uint64_t)&v150);
                    long long v142 = v152;
                    long long v143 = v153;
                    uint64_t v144 = v154;
                    long long v140 = v150;
                    long long v141 = v151;
                    Hasher.init(_seed:)();
                    swift_bridgeObjectRetain();
                    String.hash(into:)();
                    Swift::Int v102 = Hasher._finalize()();
                    uint64_t v103 = -1 << *(unsigned char *)(v88 + 32);
                    unint64_t v104 = v102 & ~v103;
                    unint64_t v105 = v104 >> 6;
                    if (((-1 << v104) & ~*(void *)(v91 + 8 * (v104 >> 6))) != 0)
                    {
                      unint64_t v92 = __clz(__rbit64((-1 << v104) & ~*(void *)(v91 + 8 * (v104 >> 6)))) | v104 & 0x7FFFFFFFFFFFFFC0;
                    }
                    else
                    {
                      char v106 = 0;
                      unint64_t v107 = (unint64_t)(63 - v103) >> 6;
                      do
                      {
                        if (++v105 == v107 && (v106 & 1) != 0) {
                          goto LABEL_153;
                        }
                        BOOL v108 = v105 == v107;
                        if (v105 == v107) {
                          unint64_t v105 = 0;
                        }
                        v106 |= v108;
                        uint64_t v109 = *(void *)(v91 + 8 * v105);
                      }
                      while (v109 == -1);
                      unint64_t v92 = __clz(__rbit64(~v109)) + (v105 << 6);
                    }
                    *(void *)(v91 + ((v92 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v92;
                    unint64_t v93 = (void *)(*(void *)(v88 + 48) + 16 * v92);
                    *unint64_t v93 = v101;
                    v93[1] = v100;
                    uint64_t v94 = *(void *)(v88 + 56) + 72 * v92;
                    *(_OWORD *)(v94 + 16) = v141;
                    *(_OWORD *)(v94 + 32) = v142;
                    *(_OWORD *)(v94 + 48) = v143;
                    *(void *)(v94 + 64) = v144;
                    *(_OWORD *)uint64_t v94 = v140;
                    ++*(void *)(v88 + 16);
                    if (!--v122) {
                      goto LABEL_149;
                    }
                  }
                }
              }
            }
            int64_t v37 = v47;
          }
LABEL_61:
          unint64_t v41 = (v46 - 1) & v46;
          unint64_t v44 = __clz(__rbit64(v46)) + (v37 << 6);
        }
        uint64_t v48 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v44);
        uint64_t v49 = *v48;
        uint64_t v50 = v48[1];
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v4 + 56) + 72 * v44, (uint64_t)v155);
        *(void *)&long long v150 = v49;
        *((void *)&v150 + 1) = v50;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v155, (uint64_t)v42);
        *(void *)&long long v140 = v49;
        *((void *)&v140 + 1) = v50;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v42, (uint64_t)v128);
        uint64_t v51 = *(void *)(v45 + 16);
        swift_bridgeObjectRetain_n();
        if (v51 && (unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v50), (v53 & 1) != 0))
        {
          outlined init with copy of AttributedString._AttributeValue(*(void *)(v45 + 56) + 72 * v52, (uint64_t)&v135);
          long long v147 = v137;
          long long v148 = v138;
          uint64_t v149 = v139;
          long long v145 = v135;
          long long v146 = v136;
          outlined destroy of AttributedString._AttributeValue((uint64_t)v128);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v145, (uint64_t)&v135);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v42, (uint64_t)v134);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)&v135, (uint64_t)&v140, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined init with copy of (Hashable & Sendable)?((uint64_t)v134, (uint64_t)v123, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          if (*((void *)&v141 + 1))
          {
            if (v144)
            {
              outlined init with take of any PredicateExpression<Self.Output == B1>(&v140, (uint64_t)v131);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v123, (uint64_t)v130);
              uint64_t v54 = v132;
              uint64_t v119 = v133;
              uint64_t v118 = __swift_project_boxed_opaque_existential_1(v131, v132);
              uint64_t v121 = v111;
              uint64_t v55 = *(void *)(v54 - 8);
              MEMORY[0x1F4188790](v118);
              uint64_t v117 = (char *)v111 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v130, (uint64_t)v129);
              uint64_t v57 = type metadata accessor for Optional();
              long long v120 = v111;
              uint64_t v115 = *(void *)(v57 - 8);
              uint64_t v116 = v57;
              MEMORY[0x1F4188790](v57);
              uint64_t v59 = (char *)v111 - v58;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              int v60 = swift_dynamicCast();
              uint64_t v61 = v55;
              uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56);
              if (v60)
              {
                v62(v59, 0, 1, v54);
                uint64_t v63 = v117;
                (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v117, v59, v54);
                uint64_t v64 = v63;
                char v65 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v61 + 8))(v64, v54);
              }
              else
              {
                v62(v59, 1, 1, v54);
                (*(void (**)(char *, uint64_t))(v115 + 8))(v59, v116);
                char v65 = 0;
              }
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v130);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v131);
              uint64_t v4 = v126;
              uint64_t v42 = v114;
            }
            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v140);
              char v65 = 0;
              uint64_t v4 = v126;
            }
          }
          else
          {
            uint64_t v4 = v126;
            if (v144)
            {
              outlined destroy of Any?((uint64_t)v123, &demangling cache variable for type metadata for (Hashable & Sendable)?);
              char v65 = 0;
            }
            else
            {
              char v65 = 1;
            }
          }
          outlined destroy of Any?((uint64_t)v134, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of Any?((uint64_t)&v135, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v145);
          outlined destroy of Any?((uint64_t)&v150, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined destroy of AttributedString._AttributeValue((uint64_t)v155);
          swift_bridgeObjectRelease();
          if (v65)
          {
            *(unint64_t *)((char *)v112 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v44;
            BOOL v16 = __OFADD__(v122++, 1);
            if (v16)
            {
              __break(1u);
              goto LABEL_82;
            }
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v150, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined destroy of AttributedString._AttributeValue((uint64_t)v128);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v155);
          swift_bridgeObjectRelease();
          uint64_t v4 = v126;
        }
      }
    }
  }
  v111[1] = v111;
  MEMORY[0x1F4188790](isStackAllocationSafe);
  uint64_t v112 = (void *)((char *)v111 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v112, v6);
  uint64_t v122 = 0;
  int64_t v7 = 0;
  uint64_t v8 = *(void *)(v4 + 64);
  uint64_t v124 = v4 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v125 = (unint64_t)(v9 + 63) >> 6;
  long long v12 = &v151;
  long long v128 = &v141;
  uint64_t v123 = (long long *)((char *)&v142 + 8);
  uint64_t v114 = &v151;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v7 << 6);
      uint64_t v15 = v127;
      goto LABEL_20;
    }
    BOOL v16 = __OFADD__(v7++, 1);
    uint64_t v15 = v127;
    if (v16) {
      goto LABEL_152;
    }
    if (v7 >= v125) {
      goto LABEL_40;
    }
    unint64_t v17 = *(void *)(v124 + 8 * v7);
    if (!v17) {
      break;
    }
LABEL_19:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v7 << 6);
LABEL_20:
    uint64_t v19 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v4 + 56) + 72 * v14, (uint64_t)v155);
    *(void *)&long long v150 = v20;
    *((void *)&v150 + 1) = v21;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)v155, (uint64_t)v12);
    *(void *)&long long v140 = v20;
    *((void *)&v140 + 1) = v21;
    outlined init with copy of AttributedString._AttributeValue((uint64_t)v12, (uint64_t)v128);
    uint64_t v22 = *(void *)(v15 + 16);
    swift_bridgeObjectRetain_n();
    if (v22 && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21), (v24 & 1) != 0))
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v15 + 56) + 72 * v23, (uint64_t)&v135);
      long long v147 = v137;
      long long v148 = v138;
      uint64_t v149 = v139;
      long long v145 = v135;
      long long v146 = v136;
      outlined destroy of AttributedString._AttributeValue((uint64_t)v128);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v145, (uint64_t)&v135);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v12, (uint64_t)v134);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v135, (uint64_t)&v140, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v134, (uint64_t)v123, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (*((void *)&v141 + 1))
      {
        if (v144)
        {
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v140, (uint64_t)v131);
          outlined init with take of any PredicateExpression<Self.Output == B1>(v123, (uint64_t)v130);
          uint64_t v25 = v132;
          uint64_t v119 = v133;
          uint64_t v118 = __swift_project_boxed_opaque_existential_1(v131, v132);
          uint64_t v121 = v111;
          uint64_t v26 = *(void *)(v25 - 8);
          MEMORY[0x1F4188790](v118);
          uint64_t v117 = (char *)v111 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v130, (uint64_t)v129);
          uint64_t v28 = type metadata accessor for Optional();
          long long v120 = v111;
          uint64_t v115 = *(void *)(v28 - 8);
          uint64_t v116 = v28;
          MEMORY[0x1F4188790](v28);
          uint64_t v30 = (char *)v111 - v29;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          int v31 = swift_dynamicCast();
          uint64_t v32 = v26;
          uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
          if (v31)
          {
            v33(v30, 0, 1, v25);
            uint64_t v34 = v117;
            (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v117, v30, v25);
            uint64_t v35 = v34;
            char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
            (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v25);
          }
          else
          {
            v33(v30, 1, 1, v25);
            (*(void (**)(char *, uint64_t))(v115 + 8))(v30, v116);
            char v36 = 0;
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v130);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v131);
          uint64_t v4 = v126;
          long long v12 = v114;
        }
        else
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v140);
          char v36 = 0;
          uint64_t v4 = v126;
        }
      }
      else
      {
        uint64_t v4 = v126;
        if (v144)
        {
          outlined destroy of Any?((uint64_t)v123, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          char v36 = 0;
        }
        else
        {
          char v36 = 1;
        }
      }
      outlined destroy of Any?((uint64_t)v134, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)&v135, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v145);
      outlined destroy of Any?((uint64_t)&v150, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined destroy of AttributedString._AttributeValue((uint64_t)v155);
      swift_bridgeObjectRelease();
      if (v36)
      {
        *(unint64_t *)((char *)v112 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
        BOOL v16 = __OFADD__(v122++, 1);
        if (v16)
        {
          __break(1u);
          goto LABEL_40;
        }
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v150, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined destroy of AttributedString._AttributeValue((uint64_t)v128);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v155);
      swift_bridgeObjectRelease();
      uint64_t v4 = v126;
    }
  }
  int64_t v18 = v7 + 1;
  if (v7 + 1 >= v125) {
    goto LABEL_40;
  }
  unint64_t v17 = *(void *)(v124 + 8 * v18);
  if (v17) {
    goto LABEL_18;
  }
  int64_t v18 = v7 + 2;
  if (v7 + 2 >= v125) {
    goto LABEL_40;
  }
  unint64_t v17 = *(void *)(v124 + 8 * v18);
  if (v17) {
    goto LABEL_18;
  }
  int64_t v18 = v7 + 3;
  if (v7 + 3 >= v125) {
    goto LABEL_40;
  }
  unint64_t v17 = *(void *)(v124 + 8 * v18);
  if (v17)
  {
LABEL_18:
    int64_t v7 = v18;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      goto LABEL_155;
    }
    if (v7 >= v125) {
      break;
    }
    unint64_t v17 = *(void *)(v124 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_19;
    }
  }
LABEL_40:
  if (v122)
  {
    if (v122 != *(void *)(v4 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
      uint64_t v66 = static _DictionaryStorage.allocate(capacity:)();
      int64_t v67 = 0;
      unint64_t v68 = *v112;
      uint64_t v69 = v66 + 64;
      while (1)
      {
        if (v68)
        {
          unint64_t v73 = __clz(__rbit64(v68));
          v68 &= v68 - 1;
          unint64_t v74 = v73 | (v67 << 6);
        }
        else
        {
          BOOL v16 = __OFADD__(v67++, 1);
          if (v16) {
            goto LABEL_156;
          }
          if (v67 >= v113)
          {
LABEL_116:
            uint64_t v4 = v66;
            goto LABEL_151;
          }
          unint64_t v75 = v112[v67];
          if (!v75)
          {
            int64_t v76 = v67 + 1;
            if (v67 + 1 >= v113) {
              goto LABEL_116;
            }
            unint64_t v75 = v112[v76];
            if (!v75)
            {
              int64_t v76 = v67 + 2;
              if (v67 + 2 >= v113) {
                goto LABEL_116;
              }
              unint64_t v75 = v112[v76];
              if (!v75)
              {
                int64_t v76 = v67 + 3;
                if (v67 + 3 >= v113) {
                  goto LABEL_116;
                }
                unint64_t v75 = v112[v76];
                if (!v75)
                {
                  int64_t v76 = v67 + 4;
                  if (v67 + 4 >= v113) {
                    goto LABEL_116;
                  }
                  unint64_t v75 = v112[v76];
                  if (!v75)
                  {
                    while (1)
                    {
                      int64_t v67 = v76 + 1;
                      if (__OFADD__(v76, 1)) {
                        break;
                      }
                      if (v67 >= v113) {
                        goto LABEL_116;
                      }
                      unint64_t v75 = v112[v67];
                      ++v76;
                      if (v75) {
                        goto LABEL_102;
                      }
                    }
LABEL_159:
                    __break(1u);
LABEL_160:
                    __break(1u);
                  }
                }
              }
            }
            int64_t v67 = v76;
          }
LABEL_102:
          unint64_t v68 = (v75 - 1) & v75;
          unint64_t v74 = __clz(__rbit64(v75)) + (v67 << 6);
        }
        uint64_t v77 = (uint64_t *)(*(void *)(v126 + 48) + 16 * v74);
        uint64_t v79 = *v77;
        uint64_t v78 = v77[1];
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v126 + 56) + 72 * v74, (uint64_t)&v150);
        long long v142 = v152;
        long long v143 = v153;
        uint64_t v144 = v154;
        long long v140 = v150;
        long long v141 = v151;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v80 = Hasher._finalize()();
        uint64_t v81 = -1 << *(unsigned char *)(v66 + 32);
        unint64_t v82 = v80 & ~v81;
        unint64_t v83 = v82 >> 6;
        if (((-1 << v82) & ~*(void *)(v69 + 8 * (v82 >> 6))) != 0)
        {
          unint64_t v70 = __clz(__rbit64((-1 << v82) & ~*(void *)(v69 + 8 * (v82 >> 6)))) | v82 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_87;
        }
        char v84 = 0;
        unint64_t v85 = (unint64_t)(63 - v81) >> 6;
        do
        {
          if (++v83 == v85 && (v84 & 1) != 0)
          {
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
            goto LABEL_159;
          }
          BOOL v86 = v83 == v85;
          if (v83 == v85) {
            unint64_t v83 = 0;
          }
          v84 |= v86;
          uint64_t v87 = *(void *)(v69 + 8 * v83);
        }
        while (v87 == -1);
        unint64_t v70 = __clz(__rbit64(~v87)) + (v83 << 6);
LABEL_87:
        *(void *)(v69 + ((v70 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v70;
        char v71 = (void *)(*(void *)(v66 + 48) + 16 * v70);
        *char v71 = v79;
        v71[1] = v78;
        uint64_t v72 = *(void *)(v66 + 56) + 72 * v70;
        *(_OWORD *)(v72 + 16) = v141;
        *(_OWORD *)(v72 + 32) = v142;
        *(_OWORD *)(v72 + 48) = v143;
        *(void *)(v72 + 64) = v144;
        *(_OWORD *)uint64_t v72 = v140;
        ++*(void *)(v66 + 16);
        if (!--v122) {
          goto LABEL_116;
        }
      }
    }
    swift_retain();
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4FBC868];
  }
LABEL_151:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t *specialized AttributedString.Guts.updateRun(at:within:with:)(uint64_t *result, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a4 + 8;
  uint64_t v9 = a4[8];
  if (*result != a4[11])
  {
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  unint64_t v13 = result;
  uint64_t v61 = *result;
  unint64_t v15 = result[1];
  uint64_t v14 = result[2];
  uint64_t v65 = result[4];
  unint64_t v60 = v15;
  if (v14)
  {
    BOOL v16 = (void *)(v14 + 24 * ((v15 >> ((4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C)) & 0xF));
    uint64_t v17 = v16[4];
    uint64_t v18 = v16[5];
    unint64_t v19 = v16[3];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v15, v9);
    uint64_t v17 = v20;
    unint64_t v21 = v15;
    uint64_t v18 = v22;
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
    if (v61 != a4[11])
    {
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
    uint64_t v58 = v13;
    uint64_t v23 = a4[8];
    swift_unknownObjectRetain();
    unint64_t v19 = specialized Rope._Node.subscript.getter(v21, v23);
    unint64_t v13 = v58;
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  uint64_t v24 = v65;
  uint64_t v25 = v65 + v19;
  if (__OFADD__(v65, v19)) {
    goto LABEL_83;
  }
  uint64_t v69 = v17;
  uint64_t v70 = v18;
  if (v65 >= a3) {
    uint64_t v24 = a3;
  }
  if (v65 >= a2) {
    uint64_t v26 = v24;
  }
  else {
    uint64_t v26 = a2;
  }
  if (v25 <= a2) {
    uint64_t v27 = a2;
  }
  else {
    uint64_t v27 = v65 + v19;
  }
  if (v25 <= a3) {
    a3 = v27;
  }
  if (v26 == a3)
  {
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  if (v26 == v65 && a3 == v25)
  {
    if (v61 == a4[11])
    {
      if (*v8)
      {
        specialized Rope._Node._prepareModify(at:)(v60, (uint64_t)v71);
        long long v72 = v71[1];
        v67[0] = v71[0];
        v67[2] = v71[2];
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v72);
        uint64_t result = (uint64_t *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v72 + 8);
        v67[1] = MEMORY[0x1E4FBC868];
        a4[11] = v61 + 1;
        *unint64_t v13 = v61 + 1;
        if (a4[8])
        {
          v13[2] = (uint64_t)specialized Rope._Node._finalizeModify(_:)(&v66, v67);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v68 = 0;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v28 = swift_bridgeObjectRetain();
          uint64_t v29 = specialized _NativeSet.filter(_:)(v28, (uint64_t)&v69, a6, (uint64_t)&v68, a8, v65, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *a5 = v29;
          swift_bridgeObjectRelease();
          if (v68 == 1) {
            specialized AttributedString._InternalRuns.updateAndCoalesce(at:with:)(v13, v8, &v69);
          }
          else {
            specialized Rope.update<A>(at:by:)(v13, v8, &v69);
          }
          goto LABEL_78;
        }
        goto LABEL_99;
      }
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
      return result;
    }
    goto LABEL_88;
  }
  char v68 = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v30 = swift_bridgeObjectRetain();
  uint64_t v31 = specialized _NativeSet.filter(_:)(v30, (uint64_t)&v69, a6, (uint64_t)&v68, a8, v26, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a5 = v31;
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  if (v68 == 1)
  {
    if (__OFSUB__(a3, v26))
    {
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
    uint64_t v32 = v69;
    uint64_t v33 = v70;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v26, a3, a3 - v26, v32, v33);
    swift_bridgeObjectRelease();
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    uint64_t v34 = a4[8];
    if (v34) {
      uint64_t v35 = a4[10];
    }
    else {
      uint64_t v35 = 0;
    }
    if (v65 < 0 || v35 < v65) {
      goto LABEL_91;
    }
    uint64_t v36 = a4[9];
    uint64_t v37 = a4[11];
    uint64_t v59 = v13;
    if (!v34 || !*(_WORD *)(v34 + 16) || v65 >= a4[10])
    {
      unint64_t v49 = swift_unknownObjectRetain_n();
      unint64_t v50 = specialized Rope._endPath.getter(v49);
      uint64_t result = (uint64_t *)swift_unknownObjectRelease();
      uint64_t v40 = 0;
      uint64_t v39 = 0;
      if (v34) {
        goto LABEL_58;
      }
      uint64_t v51 = 0;
LABEL_76:
      if (!__OFSUB__(v65, v39))
      {
        *uint64_t v59 = v37;
        v59[1] = v50;
        v59[2] = v40;
        v59[3] = v51;
        v59[4] = v65 - v39;
LABEL_78:
        swift_bridgeObjectRelease();
        return (uint64_t *)swift_bridgeObjectRelease();
      }
      goto LABEL_92;
    }
    uint64_t v38 = *(unsigned __int8 *)(v34 + 18);
    if (!*(unsigned char *)(v34 + 18))
    {
      uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
      uint64_t v39 = v65;
      uint64_t v40 = v34;
      uint64_t v52 = *(unsigned __int16 *)(v34 + 16);
      if (!*(_WORD *)(v34 + 16)) {
        goto LABEL_73;
      }
LABEL_62:
      uint64_t v53 = *(void *)(v40 + 24);
      BOOL v44 = __OFSUB__(v39, v53);
      uint64_t v54 = v39 - v53;
      if (v44) {
        goto LABEL_96;
      }
      if (__OFADD__(v54, 1))
      {
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }
      if (v54 + 1 <= 0)
      {
        uint64_t v52 = 0;
        goto LABEL_74;
      }
      if (v52 == 1)
      {
        uint64_t v39 = v54;
        goto LABEL_73;
      }
      uint64_t v55 = (uint64_t *)(v40 + 48);
      uint64_t v56 = 1;
      while (1)
      {
        uint64_t v57 = *v55;
        v55 += 3;
        uint64_t v39 = v54 - v57;
        if (__OFSUB__(v54, v57)) {
          break;
        }
        if (__OFADD__(v39, 1)) {
          goto LABEL_94;
        }
        if (v39 + 1 < 1)
        {
          uint64_t v52 = v56;
          uint64_t v39 = v54;
          goto LABEL_74;
        }
        ++v56;
        uint64_t v54 = v39;
        if (v52 == v56) {
          goto LABEL_73;
        }
      }
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
      goto LABEL_95;
    }
    uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    uint64_t v39 = v65;
    uint64_t v40 = v34;
    while (1)
    {
      uint64_t v42 = *(unsigned __int16 *)(v40 + 16);
      if (!*(_WORD *)(v40 + 16)) {
        goto LABEL_38;
      }
      uint64_t v43 = *(void *)(v40 + 40);
      BOOL v44 = __OFSUB__(v39, v43);
      uint64_t v45 = v39 - v43;
      if (v44) {
        goto LABEL_86;
      }
      if (__OFADD__(v45, 1)) {
        goto LABEL_87;
      }
      if (v45 + 1 > 0) {
        break;
      }
      uint64_t v42 = 0;
LABEL_39:
      char v41 = (4 * *(unsigned char *)(v40 + 18) + 8) & 0x3C;
      uint64_t v38 = ((-15 << v41) - 1) & v38 | (v42 << v41);
      uint64_t v40 = *(void *)(v40 + 24 + 24 * v42);
      swift_unknownObjectRetain();
      uint64_t result = (uint64_t *)swift_unknownObjectRelease();
      if (!*(unsigned char *)(v40 + 18))
      {
        v38 &= 0xFFFFFFFFFFFFF0FFLL;
        uint64_t v52 = *(unsigned __int16 *)(v40 + 16);
        if (*(_WORD *)(v40 + 16)) {
          goto LABEL_62;
        }
LABEL_73:
        if (!v39)
        {
LABEL_74:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v50 = v38 | (v52 << 8);
LABEL_58:
          swift_unknownObjectRetain();
          uint64_t v51 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v37, v50, v40, v34, v36);
          uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
          goto LABEL_76;
        }
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
        goto LABEL_97;
      }
    }
    if (v42 != 1)
    {
      unint64_t v46 = (uint64_t *)(v40 + 64);
      uint64_t v47 = 1;
      while (1)
      {
        uint64_t v48 = *v46;
        v46 += 3;
        uint64_t v39 = v45 - v48;
        if (__OFSUB__(v45, v48)) {
          break;
        }
        if (__OFADD__(v39, 1)) {
          goto LABEL_81;
        }
        if (v39 + 1 < 1)
        {
          uint64_t v42 = v47;
          uint64_t v39 = v45;
          goto LABEL_39;
        }
        ++v47;
        uint64_t v45 = v39;
        if (v42 == v47) {
          goto LABEL_38;
        }
      }
      __break(1u);
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    uint64_t v39 = v45;
LABEL_38:
    if (v39) {
      goto LABEL_85;
    }
    goto LABEL_39;
  }
  swift_bridgeObjectRelease();

  return (uint64_t *)swift_bridgeObjectRelease();
}

{
  unint64_t *v8;
  uint64_t v9;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[4];
  char v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD v71[3];
  long long v72;
  uint64_t vars8;

  uint64_t v8 = a4 + 8;
  uint64_t v9 = a4[8];
  if (*result != a4[11])
  {
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  unint64_t v13 = result;
  uint64_t v61 = *result;
  unint64_t v15 = result[1];
  uint64_t v14 = result[2];
  uint64_t v65 = result[4];
  unint64_t v60 = v15;
  if (v14)
  {
    BOOL v16 = (void *)(v14 + 24 * ((v15 >> ((4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C)) & 0xF));
    uint64_t v17 = v16[4];
    uint64_t v18 = v16[5];
    unint64_t v19 = v16[3];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v15, v9);
    uint64_t v17 = v20;
    unint64_t v21 = v15;
    uint64_t v18 = v22;
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
    if (v61 != a4[11])
    {
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
    uint64_t v58 = v13;
    uint64_t v23 = a4[8];
    swift_unknownObjectRetain();
    unint64_t v19 = specialized Rope._Node.subscript.getter(v21, v23);
    unint64_t v13 = v58;
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  uint64_t v24 = __OFADD__(v65, v19);
  uint64_t v25 = v65 + v19;
  if (v24) {
    goto LABEL_84;
  }
  uint64_t v69 = v17;
  uint64_t v70 = v18;
  if (v65 >= a3) {
    uint64_t v26 = a3;
  }
  else {
    uint64_t v26 = v65;
  }
  if (v65 >= a2) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = a2;
  }
  if (v25 <= a2) {
    uint64_t v28 = a2;
  }
  else {
    uint64_t v28 = v25;
  }
  if (v25 <= a3) {
    a3 = v28;
  }
  if (v27 == a3)
  {
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if (v27 == v65 && a3 == v25)
  {
    if (v61 == a4[11])
    {
      if (*v8)
      {
        specialized Rope._Node._prepareModify(at:)(v60, (uint64_t)v71);
        long long v72 = v71[1];
        v67[0] = v71[0];
        v67[2] = v71[2];
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v72);
        uint64_t result = (uint64_t *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v72 + 8);
        v67[1] = MEMORY[0x1E4FBC868];
        a4[11] = v61 + 1;
        *unint64_t v13 = v61 + 1;
        if (a4[8])
        {
          v13[2] = (uint64_t)specialized Rope._Node._finalizeModify(_:)(&v66, v67);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v68 = 0;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v29 = swift_bridgeObjectRetain();
          uint64_t v30 = specialized _NativeSet.filter(_:)(v29, (uint64_t)&v69, a6, (uint64_t)&v68, a8, v25, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *a5 = v30;
          swift_bridgeObjectRelease();
          if (v68 == 1) {
            specialized AttributedString._InternalRuns.updateAndCoalesce(at:with:)(v13, v8, &v69);
          }
          else {
            specialized Rope.update<A>(at:by:)(v13, v8, &v69);
          }
          goto LABEL_79;
        }
        goto LABEL_100;
      }
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
      return result;
    }
    goto LABEL_89;
  }
  char v68 = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v31 = swift_bridgeObjectRetain();
  uint64_t v32 = specialized _NativeSet.filter(_:)(v31, (uint64_t)&v69, a6, (uint64_t)&v68, a8, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized closure #1 in closure #1 in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a5 = v32;
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  if (v68 == 1)
  {
    if (__OFSUB__(a3, v27))
    {
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }
    uint64_t v33 = v69;
    uint64_t v34 = v70;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v27, a3, a3 - v27, v33, v34);
    swift_bridgeObjectRelease();
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    uint64_t v35 = a4[8];
    if (v35) {
      uint64_t v36 = a4[10];
    }
    else {
      uint64_t v36 = 0;
    }
    if (v65 < 0 || v36 < v65) {
      goto LABEL_92;
    }
    uint64_t v37 = a4[9];
    uint64_t v38 = a4[11];
    uint64_t v59 = v13;
    if (!v35 || !*(_WORD *)(v35 + 16) || v65 >= a4[10])
    {
      unint64_t v49 = swift_unknownObjectRetain_n();
      unint64_t v50 = specialized Rope._endPath.getter(v49);
      uint64_t result = (uint64_t *)swift_unknownObjectRelease();
      char v41 = 0;
      uint64_t v40 = 0;
      if (v35) {
        goto LABEL_59;
      }
      uint64_t v51 = 0;
LABEL_77:
      if (!__OFSUB__(v65, v40))
      {
        *uint64_t v59 = v38;
        v59[1] = v50;
        v59[2] = v41;
        v59[3] = v51;
        v59[4] = v65 - v40;
LABEL_79:
        swift_bridgeObjectRelease();
        return (uint64_t *)swift_bridgeObjectRelease();
      }
      goto LABEL_93;
    }
    uint64_t v39 = *(unsigned __int8 *)(v35 + 18);
    if (!*(unsigned char *)(v35 + 18))
    {
      uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
      uint64_t v40 = v65;
      char v41 = v35;
      uint64_t v52 = *(unsigned __int16 *)(v35 + 16);
      if (!*(_WORD *)(v35 + 16)) {
        goto LABEL_74;
      }
LABEL_63:
      uint64_t v53 = *(void *)(v41 + 24);
      uint64_t v24 = __OFSUB__(v40, v53);
      uint64_t v54 = v40 - v53;
      if (v24) {
        goto LABEL_97;
      }
      if (__OFADD__(v54, 1))
      {
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }
      if (v54 + 1 <= 0)
      {
        uint64_t v52 = 0;
        goto LABEL_75;
      }
      if (v52 == 1)
      {
        uint64_t v40 = v54;
        goto LABEL_74;
      }
      uint64_t v55 = (uint64_t *)(v41 + 48);
      uint64_t v56 = 1;
      while (1)
      {
        uint64_t v57 = *v55;
        v55 += 3;
        uint64_t v40 = v54 - v57;
        if (__OFSUB__(v54, v57)) {
          break;
        }
        if (__OFADD__(v40, 1)) {
          goto LABEL_95;
        }
        if (v40 + 1 < 1)
        {
          uint64_t v52 = v56;
          uint64_t v40 = v54;
          goto LABEL_75;
        }
        ++v56;
        uint64_t v54 = v40;
        if (v52 == v56) {
          goto LABEL_74;
        }
      }
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
      goto LABEL_96;
    }
    uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    uint64_t v40 = v65;
    char v41 = v35;
    while (1)
    {
      uint64_t v43 = *(unsigned __int16 *)(v41 + 16);
      if (!*(_WORD *)(v41 + 16)) {
        goto LABEL_39;
      }
      BOOL v44 = *(void *)(v41 + 40);
      uint64_t v24 = __OFSUB__(v40, v44);
      uint64_t v45 = v40 - v44;
      if (v24) {
        goto LABEL_87;
      }
      if (__OFADD__(v45, 1)) {
        goto LABEL_88;
      }
      if (v45 + 1 > 0) {
        break;
      }
      uint64_t v43 = 0;
LABEL_40:
      uint64_t v42 = (4 * *(unsigned char *)(v41 + 18) + 8) & 0x3C;
      uint64_t v39 = ((-15 << v42) - 1) & v39 | (v43 << v42);
      char v41 = *(void *)(v41 + 24 + 24 * v43);
      swift_unknownObjectRetain();
      uint64_t result = (uint64_t *)swift_unknownObjectRelease();
      if (!*(unsigned char *)(v41 + 18))
      {
        v39 &= 0xFFFFFFFFFFFFF0FFLL;
        uint64_t v52 = *(unsigned __int16 *)(v41 + 16);
        if (*(_WORD *)(v41 + 16)) {
          goto LABEL_63;
        }
LABEL_74:
        if (!v40)
        {
LABEL_75:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v50 = v39 | (v52 << 8);
LABEL_59:
          swift_unknownObjectRetain();
          uint64_t v51 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v38, v50, v41, v35, v37);
          uint64_t result = (uint64_t *)swift_unknownObjectRelease_n();
          goto LABEL_77;
        }
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }
    }
    if (v43 != 1)
    {
      unint64_t v46 = (uint64_t *)(v41 + 64);
      uint64_t v47 = 1;
      while (1)
      {
        uint64_t v48 = *v46;
        v46 += 3;
        uint64_t v40 = v45 - v48;
        if (__OFSUB__(v45, v48)) {
          break;
        }
        if (__OFADD__(v40, 1)) {
          goto LABEL_82;
        }
        if (v40 + 1 < 1)
        {
          uint64_t v43 = v47;
          uint64_t v40 = v45;
          goto LABEL_40;
        }
        ++v47;
        uint64_t v45 = v40;
        if (v43 == v47) {
          goto LABEL_39;
        }
      }
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    uint64_t v40 = v45;
LABEL_39:
    if (v40) {
      goto LABEL_86;
    }
    goto LABEL_40;
  }
  swift_bridgeObjectRelease();

  return (uint64_t *)swift_bridgeObjectRelease();
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v91 = a6;
  unint64_t v92 = a7;
  uint64_t v89 = a4;
  uint64_t v90 = a5;
  uint64_t v88 = a3;
  uint64_t v9 = isStackAllocationSafe;
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  char v10 = *(unsigned char *)(isStackAllocationSafe + 32);
  int64_t v86 = (unint64_t)((1 << v10) + 63) >> 6;
  size_t v11 = 8 * v86;
  uint64_t v93 = isStackAllocationSafe;
  if ((v10 & 0x3Fu) > 0xD)
  {
    Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      unint64_t v85 = (unint64_t *)swift_slowAlloc();
      bzero(v85, v11);
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      uint64_t v50 = v9 + 56;
      uint64_t v51 = 1 << *(unsigned char *)(v9 + 32);
      if (v51 < 64) {
        uint64_t v52 = ~(-1 << v51);
      }
      else {
        uint64_t v52 = -1;
      }
      unint64_t v53 = v52 & *(void *)(v9 + 56);
      uint64_t v87 = (unint64_t *)((unint64_t)(v51 + 63) >> 6);
      while (1)
      {
        if (v53)
        {
          unint64_t v54 = __clz(__rbit64(v53));
          v53 &= v53 - 1;
          unint64_t v55 = v54 | (v49 << 6);
          uint64_t v9 = v93;
        }
        else
        {
          BOOL v20 = __OFADD__(v49++, 1);
          uint64_t v9 = v93;
          if (v20) {
            goto LABEL_141;
          }
          if (v49 >= (uint64_t)v87) {
            goto LABEL_96;
          }
          unint64_t v56 = *(void *)(v50 + 8 * v49);
          if (!v56)
          {
            uint64_t v57 = v49 + 1;
            if (v49 + 1 >= (uint64_t)v87) {
              goto LABEL_96;
            }
            unint64_t v56 = *(void *)(v50 + 8 * v57);
            if (!v56)
            {
              uint64_t v57 = v49 + 2;
              if (v49 + 2 >= (uint64_t)v87) {
                goto LABEL_96;
              }
              unint64_t v56 = *(void *)(v50 + 8 * v57);
              if (!v56)
              {
                uint64_t v57 = v49 + 3;
                if (v49 + 3 >= (uint64_t)v87) {
                  goto LABEL_96;
                }
                unint64_t v56 = *(void *)(v50 + 8 * v57);
                if (!v56)
                {
                  uint64_t v57 = v49 + 4;
                  if (v49 + 4 >= (uint64_t)v87) {
                    goto LABEL_96;
                  }
                  unint64_t v56 = *(void *)(v50 + 8 * v57);
                  if (!v56)
                  {
                    while (1)
                    {
                      uint64_t v49 = v57 + 1;
                      if (__OFADD__(v57, 1)) {
                        goto LABEL_146;
                      }
                      if (v49 >= (uint64_t)v87) {
                        break;
                      }
                      unint64_t v56 = *(void *)(v50 + 8 * v49);
                      ++v57;
                      if (v56) {
                        goto LABEL_84;
                      }
                    }
LABEL_96:
                    uint64_t v61 = v48;
                    if (!v48)
                    {
                      uint64_t v62 = MEMORY[0x1E4FBC870];
                      goto LABEL_136;
                    }
                    if (v48 != *(void *)(v93 + 16))
                    {
                      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
                      uint64_t v62 = static _SetStorage.allocate(capacity:)();
                      unint64_t v63 = *v85;
                      uint64_t v64 = v62 + 56;
                      swift_retain();
                      int64_t v65 = 0;
                      while (1)
                      {
                        if (v63)
                        {
                          unint64_t v68 = __clz(__rbit64(v63));
                          v63 &= v63 - 1;
                          unint64_t v69 = v68 | (v65 << 6);
                        }
                        else
                        {
                          BOOL v20 = __OFADD__(v65++, 1);
                          if (v20) {
                            goto LABEL_145;
                          }
                          if (v65 >= v86) {
                            goto LABEL_135;
                          }
                          unint64_t v70 = v85[v65];
                          if (!v70)
                          {
                            int64_t v71 = v65 + 1;
                            if (v65 + 1 >= v86) {
                              goto LABEL_135;
                            }
                            unint64_t v70 = v85[v71];
                            if (!v70)
                            {
                              int64_t v71 = v65 + 2;
                              if (v65 + 2 >= v86) {
                                goto LABEL_135;
                              }
                              unint64_t v70 = v85[v71];
                              if (!v70)
                              {
                                int64_t v71 = v65 + 3;
                                if (v65 + 3 >= v86) {
                                  goto LABEL_135;
                                }
                                unint64_t v70 = v85[v71];
                                if (!v70)
                                {
                                  int64_t v71 = v65 + 4;
                                  if (v65 + 4 >= v86) {
                                    goto LABEL_135;
                                  }
                                  unint64_t v70 = v85[v71];
                                  if (!v70)
                                  {
                                    int64_t v71 = v65 + 5;
                                    if (v65 + 5 >= v86) {
                                      goto LABEL_135;
                                    }
                                    unint64_t v70 = v85[v71];
                                    if (!v70)
                                    {
                                      while (1)
                                      {
                                        int64_t v65 = v71 + 1;
                                        if (__OFADD__(v71, 1)) {
                                          goto LABEL_149;
                                        }
                                        if (v65 >= v86) {
                                          break;
                                        }
                                        unint64_t v70 = v85[v65];
                                        ++v71;
                                        if (v70) {
                                          goto LABEL_117;
                                        }
                                      }
LABEL_135:
                                      swift_release();
LABEL_136:
                                      swift_release();
                                      uint64_t v9 = v62;
                                      break;
                                    }
                                  }
                                }
                              }
                            }
                            int64_t v65 = v71;
                          }
LABEL_117:
                          unint64_t v63 = (v70 - 1) & v70;
                          unint64_t v69 = __clz(__rbit64(v70)) + (v65 << 6);
                        }
                        long long v72 = (uint64_t *)(*(void *)(v93 + 48) + 16 * v69);
                        uint64_t v73 = *v72;
                        uint64_t v74 = v72[1];
                        Hasher.init(_seed:)();
                        swift_bridgeObjectRetain();
                        String.hash(into:)();
                        Swift::Int v75 = Hasher._finalize()();
                        uint64_t v76 = -1 << *(unsigned char *)(v62 + 32);
                        unint64_t v77 = v75 & ~v76;
                        unint64_t v78 = v77 >> 6;
                        if (((-1 << v77) & ~*(void *)(v64 + 8 * (v77 >> 6))) != 0)
                        {
                          unint64_t v66 = __clz(__rbit64((-1 << v77) & ~*(void *)(v64 + 8 * (v77 >> 6)))) | v77 & 0x7FFFFFFFFFFFFFC0;
                        }
                        else
                        {
                          char v79 = 0;
                          unint64_t v80 = (unint64_t)(63 - v76) >> 6;
                          do
                          {
                            if (++v78 == v80 && (v79 & 1) != 0) {
                              goto LABEL_140;
                            }
                            BOOL v81 = v78 == v80;
                            if (v78 == v80) {
                              unint64_t v78 = 0;
                            }
                            v79 |= v81;
                            uint64_t v82 = *(void *)(v64 + 8 * v78);
                          }
                          while (v82 == -1);
                          unint64_t v66 = __clz(__rbit64(~v82)) + (v78 << 6);
                        }
                        *(void *)(v64 + ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v66;
                        int64_t v67 = (void *)(*(void *)(v62 + 48) + 16 * v66);
                        *int64_t v67 = v73;
                        v67[1] = v74;
                        ++*(void *)(v62 + 16);
                        if (!--v61) {
                          goto LABEL_135;
                        }
                      }
                    }
                    MEMORY[0x185309510](v85, -1, -1);
                    return v9;
                  }
                }
              }
            }
            uint64_t v49 = v57;
          }
LABEL_84:
          unint64_t v53 = (v56 - 1) & v56;
          unint64_t v55 = __clz(__rbit64(v56)) + (v49 << 6);
        }
        uint64_t v58 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v55);
        uint64_t v9 = v58[1];
        uint64_t v94 = *v58;
        uint64_t v95 = v9;
        swift_bridgeObjectRetain();
        char v59 = v92(&v94, a2, v88, v89, v90, v91);
        if (v7)
        {
          swift_release();
          swift_bridgeObjectRelease();
          MEMORY[0x185309510](v85, -1, -1);
          return v9;
        }
        char v60 = v59;
        swift_bridgeObjectRelease();
        if (v60)
        {
          *(unint64_t *)((char *)v85 + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v55;
          BOOL v20 = __OFADD__(v48++, 1);
          if (v20) {
            goto LABEL_147;
          }
        }
      }
    }
  }
  uint64_t v84 = (uint64_t)&v84;
  MEMORY[0x1F4188790](isStackAllocationSafe);
  uint64_t v87 = (unint64_t *)((char *)&v84 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v87, v11);
  unint64_t v85 = 0;
  int64_t v12 = 0;
  uint64_t v13 = v9 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v9 + 56);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (v16)
  {
    unint64_t v18 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v19 = v18 | (v12 << 6);
LABEL_21:
    uint64_t v23 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v19);
    uint64_t v9 = v23[1];
    uint64_t v94 = *v23;
    uint64_t v95 = v9;
    swift_bridgeObjectRetain();
    char v24 = v92(&v94, a2, v88, v89, v90, v91);
    if (v7)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_willThrow();
      return v9;
    }
    char v25 = v24;
    swift_bridgeObjectRelease();
    uint64_t v9 = v93;
    if (v25)
    {
      *(unint64_t *)((char *)v87 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      BOOL v20 = __OFADD__(v85, 1);
      unint64_t v85 = (unint64_t *)((char *)v85 + 1);
      if (v20) {
        goto LABEL_144;
      }
    }
  }
  BOOL v20 = __OFADD__(v12++, 1);
  if (v20) {
    goto LABEL_139;
  }
  if (v12 >= v17) {
    goto LABEL_31;
  }
  unint64_t v21 = *(void *)(v13 + 8 * v12);
  if (v21)
  {
LABEL_20:
    unint64_t v16 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v12 << 6);
    goto LABEL_21;
  }
  int64_t v22 = v12 + 1;
  if (v12 + 1 >= v17) {
    goto LABEL_31;
  }
  unint64_t v21 = *(void *)(v13 + 8 * v22);
  if (v21) {
    goto LABEL_19;
  }
  int64_t v22 = v12 + 2;
  if (v12 + 2 >= v17) {
    goto LABEL_31;
  }
  unint64_t v21 = *(void *)(v13 + 8 * v22);
  if (v21) {
    goto LABEL_19;
  }
  int64_t v22 = v12 + 3;
  if (v12 + 3 >= v17) {
    goto LABEL_31;
  }
  unint64_t v21 = *(void *)(v13 + 8 * v22);
  if (v21) {
    goto LABEL_19;
  }
  int64_t v22 = v12 + 4;
  if (v12 + 4 >= v17) {
    goto LABEL_31;
  }
  unint64_t v21 = *(void *)(v13 + 8 * v22);
  if (v21)
  {
LABEL_19:
    int64_t v12 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      goto LABEL_143;
    }
    if (v12 >= v17) {
      break;
    }
    unint64_t v21 = *(void *)(v13 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_31:
  uint64_t v26 = v85;
  if (!v85)
  {
    uint64_t v27 = MEMORY[0x1E4FBC870];
    goto LABEL_132;
  }
  if (v85 != *(unint64_t **)(v9 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
    uint64_t v27 = static _SetStorage.allocate(capacity:)();
    unint64_t v28 = *v87;
    uint64_t v29 = v27 + 56;
    swift_retain();
    int64_t v30 = 0;
    while (1)
    {
      if (v28)
      {
        unint64_t v33 = __clz(__rbit64(v28));
        v28 &= v28 - 1;
        unint64_t v34 = v33 | (v30 << 6);
      }
      else
      {
        BOOL v20 = __OFADD__(v30++, 1);
        if (v20) {
          goto LABEL_142;
        }
        if (v30 >= v86)
        {
LABEL_131:
          swift_release();
LABEL_132:
          swift_release();
          return v27;
        }
        unint64_t v35 = v87[v30];
        if (!v35)
        {
          int64_t v36 = v30 + 1;
          if (v30 + 1 >= v86) {
            goto LABEL_131;
          }
          unint64_t v35 = v87[v36];
          if (!v35)
          {
            int64_t v36 = v30 + 2;
            if (v30 + 2 >= v86) {
              goto LABEL_131;
            }
            unint64_t v35 = v87[v36];
            if (!v35)
            {
              int64_t v36 = v30 + 3;
              if (v30 + 3 >= v86) {
                goto LABEL_131;
              }
              unint64_t v35 = v87[v36];
              if (!v35)
              {
                int64_t v36 = v30 + 4;
                if (v30 + 4 >= v86) {
                  goto LABEL_131;
                }
                unint64_t v35 = v87[v36];
                if (!v35)
                {
                  int64_t v36 = v30 + 5;
                  if (v30 + 5 >= v86) {
                    goto LABEL_131;
                  }
                  unint64_t v35 = v87[v36];
                  if (!v35)
                  {
                    while (1)
                    {
                      int64_t v30 = v36 + 1;
                      if (__OFADD__(v36, 1)) {
                        break;
                      }
                      if (v30 >= v86) {
                        goto LABEL_131;
                      }
                      unint64_t v35 = v87[v30];
                      ++v36;
                      if (v35) {
                        goto LABEL_52;
                      }
                    }
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
                  }
                }
              }
            }
          }
          int64_t v30 = v36;
        }
LABEL_52:
        unint64_t v28 = (v35 - 1) & v35;
        unint64_t v34 = __clz(__rbit64(v35)) + (v30 << 6);
      }
      uint64_t v37 = (uint64_t *)(*(void *)(v93 + 48) + 16 * v34);
      uint64_t v38 = *v37;
      uint64_t v39 = v37[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v40 = Hasher._finalize()();
      uint64_t v41 = -1 << *(unsigned char *)(v27 + 32);
      unint64_t v42 = v40 & ~v41;
      unint64_t v43 = v42 >> 6;
      if (((-1 << v42) & ~*(void *)(v29 + 8 * (v42 >> 6))) != 0)
      {
        unint64_t v31 = __clz(__rbit64((-1 << v42) & ~*(void *)(v29 + 8 * (v42 >> 6)))) | v42 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_35;
      }
      char v44 = 0;
      unint64_t v45 = (unint64_t)(63 - v41) >> 6;
      do
      {
        if (++v43 == v45 && (v44 & 1) != 0)
        {
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
          goto LABEL_148;
        }
        BOOL v46 = v43 == v45;
        if (v43 == v45) {
          unint64_t v43 = 0;
        }
        v44 |= v46;
        uint64_t v47 = *(void *)(v29 + 8 * v43);
      }
      while (v47 == -1);
      unint64_t v31 = __clz(__rbit64(~v47)) + (v43 << 6);
LABEL_35:
      *(void *)(v29 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
      uint64_t v32 = (void *)(*(void *)(v27 + 48) + 16 * v31);
      *uint64_t v32 = v38;
      v32[1] = v39;
      ++*(void *)(v27 + 16);
      uint64_t v26 = (unint64_t *)((char *)v26 - 1);
      if (!v26) {
        goto LABEL_131;
      }
    }
  }
  return v9;
}

uint64_t *specialized AttributedString.Guts.updateRun(at:within:with:)(uint64_t *result, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v5 = *result;
  size_t v6 = a4 + 8;
  uint64_t v7 = a4[8];
  if (*result != a4[11])
  {
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  uint64_t v49 = result;
  unint64_t v11 = result[1];
  uint64_t v10 = result[2];
  uint64_t v51 = a4;
  uint64_t v52 = result[4];
  if (v10)
  {
    int64_t v12 = (void *)(v10 + 24 * ((v11 >> ((4 * *(unsigned char *)(v10 + 18) + 8) & 0x3C)) & 0xF));
    uint64_t v14 = v12[4];
    uint64_t v13 = v12[5];
    unint64_t v15 = v12[3];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v11, v7);
    uint64_t v14 = v16;
    uint64_t v13 = v17;
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
    if (v5 != v51[11])
    {
LABEL_89:
      __break(1u);
      goto LABEL_90;
    }
    uint64_t v18 = v51[8];
    swift_unknownObjectRetain();
    unint64_t v15 = specialized Rope._Node.subscript.getter(v11, v18);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  BOOL v19 = __OFADD__(v52, v15);
  uint64_t v20 = v52 + v15;
  if (v19) {
    goto LABEL_82;
  }
  uint64_t v55 = v14;
  uint64_t v56 = v13;
  if (v52 >= a3) {
    uint64_t v21 = a3;
  }
  else {
    uint64_t v21 = v52;
  }
  if (v52 >= a2) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = a2;
  }
  if (v20 <= a2) {
    uint64_t v23 = a2;
  }
  else {
    uint64_t v23 = v20;
  }
  if (v20 <= a3) {
    a3 = v23;
  }
  if (v22 == a3) {
    goto LABEL_83;
  }
  if (v22 == v52 && a3 == v20)
  {
    if (v5 == v51[11])
    {
      if (*v6)
      {
        specialized Rope._Node._prepareModify(at:)(v11, (uint64_t)v57);
        long long v58 = v57[1];
        v54[0] = v57[0];
        v54[2] = v57[2];
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v58);
        uint64_t result = (uint64_t *)outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v58 + 8);
        v54[1] = MEMORY[0x1E4FBC868];
        v51[11] = v5 + 1;
        *uint64_t v49 = v5 + 1;
        if (v51[8])
        {
          v49[2] = (uint64_t)specialized Rope._Node._finalizeModify(_:)(&v53, v54);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a5(&v55, v52, v20);
          specialized AttributedString._InternalRuns.updateAndCoalesce(at:with:)(v49, v6, &v55);
          goto LABEL_55;
        }
        goto LABEL_94;
      }
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
      return result;
    }
    goto LABEL_84;
  }
  uint64_t result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t, uint64_t))a5)(&v55, v22, a3);
  if (__OFSUB__(a3, v22))
  {
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  uint64_t v25 = v55;
  uint64_t v24 = v56;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v22, a3, a3 - v22, v25, v24);
  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
  uint64_t v26 = v51[8];
  if (v26) {
    uint64_t v27 = v51[10];
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v28 = v52;
  if (v52 < 0 || v27 < v52) {
    goto LABEL_86;
  }
  uint64_t v29 = v51[9];
  uint64_t v30 = v51[11];
  if (!v26 || !*(_WORD *)(v26 + 16) || v52 >= v51[10])
  {
    unint64_t v41 = swift_unknownObjectRetain_n();
    unint64_t v42 = specialized Rope._endPath.getter(v41);
    swift_unknownObjectRelease();
    uint64_t v33 = 0;
    uint64_t v32 = 0;
    if (!v26) {
      goto LABEL_72;
    }
    goto LABEL_53;
  }
  uint64_t v51 = (void *)v51[9];
  uint64_t v31 = *(unsigned __int8 *)(v26 + 18);
  if (!*(unsigned char *)(v26 + 18))
  {
    uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
    uint64_t v32 = v52;
    uint64_t v33 = v26;
    uint64_t v45 = *(unsigned __int16 *)(v26 + 16);
    if (!*(_WORD *)(v26 + 16)) {
      goto LABEL_70;
    }
    goto LABEL_59;
  }
  uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
  uint64_t v32 = v52;
  uint64_t v33 = v26;
  while (2)
  {
    uint64_t v35 = *(unsigned __int16 *)(v33 + 16);
    if (!*(_WORD *)(v33 + 16)) {
      goto LABEL_37;
    }
    uint64_t v36 = *(void *)(v33 + 40);
    BOOL v19 = __OFSUB__(v32, v36);
    uint64_t v37 = v32 - v36;
    if (v19) {
      goto LABEL_79;
    }
    if (__OFADD__(v37, 1)) {
      goto LABEL_80;
    }
    if (v37 + 1 <= 0)
    {
      uint64_t v35 = 0;
      goto LABEL_38;
    }
    if (v35 == 1)
    {
      uint64_t v32 = v37;
LABEL_37:
      if (!v32) {
        goto LABEL_38;
      }
      goto LABEL_78;
    }
    uint64_t v38 = (uint64_t *)(v33 + 64);
    uint64_t v39 = 1;
    while (1)
    {
      uint64_t v40 = *v38;
      v38 += 3;
      uint64_t v32 = v37 - v40;
      if (__OFSUB__(v37, v40))
      {
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
      if (__OFADD__(v32, 1)) {
        goto LABEL_77;
      }
      if (v32 + 1 < 1) {
        break;
      }
      ++v39;
      uint64_t v37 = v32;
      if (v35 == v39) {
        goto LABEL_37;
      }
    }
    uint64_t v35 = v39;
    uint64_t v32 = v37;
LABEL_38:
    char v34 = (4 * *(unsigned char *)(v33 + 18) + 8) & 0x3C;
    uint64_t v31 = ((-15 << v34) - 1) & v31 | (v35 << v34);
    uint64_t v33 = *(void *)(v33 + 24 + 24 * v35);
    swift_unknownObjectRetain();
    uint64_t result = (uint64_t *)swift_unknownObjectRelease();
    if (*(unsigned char *)(v33 + 18)) {
      continue;
    }
    break;
  }
  v31 &= 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v45 = *(unsigned __int16 *)(v33 + 16);
  if (*(_WORD *)(v33 + 16))
  {
LABEL_59:
    uint64_t v46 = *(void *)(v33 + 24);
    BOOL v19 = __OFSUB__(v32, v46);
    uint64_t v44 = v32 - v46;
    if (v19)
    {
LABEL_91:
      __break(1u);
      goto LABEL_92;
    }
    if (__OFADD__(v44, 1))
    {
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
    if (v44 + 1 <= 0)
    {
      uint64_t v45 = 0;
      goto LABEL_71;
    }
    if (v45 == 1)
    {
      uint64_t v32 = v44;
      goto LABEL_70;
    }
    uint64_t v47 = (uint64_t *)(v33 + 48);
    for (uint64_t i = 1; i != v45; ++i)
    {
      uint64_t v48 = *v47;
      v47 += 3;
      uint64_t v32 = v44 - v48;
      if (__OFSUB__(v44, v48)) {
        goto LABEL_87;
      }
      if (__OFADD__(v32, 1)) {
        goto LABEL_88;
      }
      if (v32 + 1 < 1) {
        goto LABEL_75;
      }
      uint64_t v44 = v32;
    }
  }
LABEL_70:
  if (v32)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
LABEL_71:
  while (2)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v42 = v31 | (v45 << 8);
    uint64_t v29 = (uint64_t)v51;
    uint64_t v28 = v52;
    if (v26)
    {
LABEL_53:
      swift_unknownObjectRetain();
      uint64_t v31 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v30, v42, v33, v26, v29);
      swift_unknownObjectRelease_n();
      uint64_t v44 = v28 - v32;
      if (!__OFSUB__(v28, v32)) {
        break;
      }
      goto LABEL_74;
    }
LABEL_72:
    uint64_t v31 = 0;
    uint64_t v44 = v28 - v32;
    if (__OFSUB__(v28, v32))
    {
LABEL_74:
      __break(1u);
LABEL_75:
      uint64_t v45 = i;
      uint64_t v32 = v44;
      continue;
    }
    break;
  }
  *uint64_t v49 = v30;
  v49[1] = v42;
  v49[2] = v33;
  v49[3] = v31;
  v49[4] = v44;
LABEL_55:
  swift_bridgeObjectRelease();
  return (uint64_t *)swift_bridgeObjectRelease();
}

unint64_t BidirectionalCollection<>._alignIndex(roundingUp:)(unint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = v8;
  dispatch thunk of BidirectionalCollection.index(_:offsetBy:)();
  unint64_t v9 = v14;
  unint64_t v10 = v14 >> 14;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a2);
  if (v10 >= a1 >> 14)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  }
  else
  {
    dispatch thunk of Collection.endIndex.getter();
    unint64_t v11 = v14;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
    if (v10 < v11 >> 14)
    {
      unint64_t v13 = v9;
      dispatch thunk of Collection.index(after:)();
      return v14;
    }
  }
  return v9;
}

unint64_t BidirectionalCollection<>._checkRange(_:)(unint64_t a1, unint64_t a2)
{
  dispatch thunk of Collection.startIndex.getter();
  if (a1 >> 14 < v5 >> 14) {
    return 0;
  }
  dispatch thunk of Collection.endIndex.getter();
  if (v5 >> 14 < a2 >> 14) {
    return 0;
  }
  return a1;
}

uint64_t BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v39 = a5;
  uint64_t v42 = a4;
  uint64_t v8 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v49 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v13 = (char *)&v38 - v12;
  uint64_t v41 = a3;
  uint64_t v44 = *(void *)(a3 + 8);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v43 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  BOOL v19 = *(void (**)(double))(v15 + 16);
  uint64_t v47 = (char *)&v38 - v21;
  uint64_t v48 = v20;
  v19(v18);
  uint64_t v50 = v8;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v51 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v38 = v15;
  uint64_t v46 = (void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v22 = MEMORY[0x1E4FBB630];
  uint64_t v40 = a1;
  uint64_t v45 = v13;
  uint64_t v23 = v43;
  while (1)
  {
    uint64_t v24 = v49;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v25 = AssociatedTypeWitness;
    swift_getAssociatedConformanceWitness();
    char v26 = dispatch thunk of static Comparable.> infix(_:_:)();
    uint64_t v27 = *v51;
    (*v51)(v24, v25);
    if ((v26 & 1) == 0)
    {
      v27(v45, AssociatedTypeWitness);
      uint64_t v35 = v38;
      uint64_t v34 = v39;
      uint64_t v29 = v48;
      (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v39, v47, v48);
      uint64_t v36 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v34, v36, 1, v29);
    }
    uint64_t v28 = a2;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v29 = v48;
    uint64_t v30 = v22;
    swift_getAssociatedConformanceWitness();
    uint64_t v31 = v47;
    char v32 = dispatch thunk of static Comparable.> infix(_:_:)();
    uint64_t v33 = *v46;
    (*v46)(v23, v29);
    if ((v32 & 1) == 0) {
      break;
    }
    a2 = v28;
    dispatch thunk of BidirectionalCollection.formIndex(before:)();
    dispatch thunk of BidirectionalCollection.formIndex(before:)();
    uint64_t v22 = v30;
  }
  v27(v45, AssociatedTypeWitness);
  v33(v31, v29);
  uint64_t v36 = 1;
  uint64_t v35 = v38;
  uint64_t v34 = v39;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v34, v36, 1, v29);
}

uint64_t TermOfAddress.language.getter@<X0>(uint64_t *a1@<X8>)
{
  if ((unint64_t)v1[12] >= 4)
  {
    uint64_t v5 = v1[10];
    uint64_t v6 = v1[11];
    uint64_t v3 = v1[8];
    uint64_t v4 = v1[9];
    uint64_t v8 = v1[6];
    uint64_t v7 = v1[7];
    uint64_t v10 = v1[4];
    uint64_t v9 = v1[5];
    uint64_t v15 = v1[2];
    uint64_t v16 = v1[3];
    uint64_t v12 = v1;
    uint64_t v11 = *v1;
    uint64_t v14 = v12[1];
    outlined copy of Locale.LanguageCode?(v11, v14);
    outlined copy of Locale.LanguageCode?(v10, v9);
    uint64_t result = outlined copy of Locale.LanguageCode?(v3, v4);
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v15;
    a1[3] = v16;
    a1[4] = v10;
    a1[5] = v9;
    a1[6] = v8;
    a1[7] = v7;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    *(_OWORD *)a1 = xmmword_182106C90;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
  }
  a1[8] = v3;
  a1[9] = v4;
  a1[10] = v5;
  a1[11] = v6;
  return result;
}

unint64_t TermOfAddress.pronouns.getter()
{
  unint64_t v1 = v0[12];
  if (v1 < 4) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v8 = v0;
  uint64_t v6 = *v0;
  uint64_t v7 = v8[1];
  outlined copy of Locale.LanguageCode?(v6, v7);
  outlined copy of Locale.LanguageCode?(v5, v4);
  outlined copy of Locale.LanguageCode?(v3, v2);
  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(v6, v7);
  outlined consume of Locale.LanguageCode?(v5, v4);
  outlined consume of Locale.LanguageCode?(v3, v2);
  return v1;
}

double static TermOfAddress.neutral.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double static TermOfAddress.feminine.getter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 96) = 1;
  return result;
}

double static TermOfAddress.masculine.getter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 96) = 2;
  return result;
}

double static TermOfAddress.currentUser.getter@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 96) = 3;
  return result;
}

uint64_t static TermOfAddress.localized(language:pronouns:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  uint64_t v12 = a1[8];
  uint64_t v13 = a1[9];
  uint64_t v14 = a1[10];
  uint64_t v15 = a1[11];
  *a3 = *a1;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = v7;
  a3[4] = v8;
  a3[5] = v9;
  a3[6] = v10;
  a3[7] = v11;
  a3[8] = v12;
  a3[9] = v13;
  a3[10] = v14;
  a3[11] = v15;
  a3[12] = a2;
  outlined copy of Locale.LanguageCode?(v5, v4);
  outlined copy of Locale.LanguageCode?(v8, v9);
  outlined copy of Locale.LanguageCode?(v12, v13);

  return swift_bridgeObjectRetain();
}

void TermOfAddress.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 96);
  switch(v3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      String.hash(into:)();
      break;
    default:
      Locale.Language.hash(into:)();
      specialized Array<A>.hash(into:)(a1, v3);
      break;
  }
}

Swift::Int TermOfAddress.hashValue.getter()
{
  uint64_t v13 = *v0;
  uint64_t v14 = v0[1];
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v5 = v0[12];
  Hasher.init(_seed:)();
  switch(v5)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      String.hash(into:)();
      return Hasher._finalize()();
    default:
      uint64_t v12 = v5;
      if (v14)
      {
        Hasher._combine(_:)(1u);
        uint64_t v6 = v13;
        outlined copy of Locale.LanguageCode?(v13, v14);
        uint64_t v7 = v1;
        uint64_t v8 = v2;
        outlined copy of Locale.LanguageCode?(v1, v2);
        outlined copy of Locale.LanguageCode?(v4, v3);
        outlined copy of Locale.LanguageCode?(v13, v14);
        String.hash(into:)();
        outlined consume of Locale.LanguageCode?(v13, v14);
        if (v2) {
          goto LABEL_4;
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        uint64_t v6 = v13;
        outlined copy of Locale.LanguageCode?(v13, 0);
        uint64_t v7 = v1;
        uint64_t v8 = v2;
        outlined copy of Locale.LanguageCode?(v1, v2);
        outlined copy of Locale.LanguageCode?(v4, v3);
        if (v2)
        {
LABEL_4:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          outlined consume of Locale.LanguageCode?(v7, v8);
          uint64_t v9 = v3;
          if (v3)
          {
LABEL_5:
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            uint64_t v10 = v4;
            outlined consume of Locale.LanguageCode?(v4, v9);
LABEL_11:
            outlined consume of Locale.LanguageCode?(v6, v14);
            outlined consume of Locale.LanguageCode?(v1, v8);
            outlined consume of Locale.LanguageCode?(v10, v9);
            specialized Array<A>.hash(into:)((uint64_t)v15, v12);
            return Hasher._finalize()();
          }
LABEL_10:
          Hasher._combine(_:)(0);
          uint64_t v10 = v4;
          goto LABEL_11;
        }
      }
      Hasher._combine(_:)(0);
      uint64_t v9 = v3;
      if (v3) {
        goto LABEL_5;
      }
      goto LABEL_10;
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TermOfAddress()
{
  uint64_t v13 = *v0;
  uint64_t v14 = v0[1];
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v5 = v0[12];
  Hasher.init(_seed:)();
  switch(v5)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      String.hash(into:)();
      return Hasher._finalize()();
    default:
      uint64_t v12 = v5;
      if (v14)
      {
        Hasher._combine(_:)(1u);
        uint64_t v6 = v13;
        outlined copy of Locale.LanguageCode?(v13, v14);
        uint64_t v7 = v1;
        uint64_t v8 = v2;
        outlined copy of Locale.LanguageCode?(v1, v2);
        outlined copy of Locale.LanguageCode?(v4, v3);
        outlined copy of Locale.LanguageCode?(v13, v14);
        String.hash(into:)();
        outlined consume of Locale.LanguageCode?(v13, v14);
        if (v2) {
          goto LABEL_4;
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        uint64_t v6 = v13;
        outlined copy of Locale.LanguageCode?(v13, 0);
        uint64_t v7 = v1;
        uint64_t v8 = v2;
        outlined copy of Locale.LanguageCode?(v1, v2);
        outlined copy of Locale.LanguageCode?(v4, v3);
        if (v2)
        {
LABEL_4:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          outlined consume of Locale.LanguageCode?(v7, v8);
          uint64_t v9 = v3;
          if (v3)
          {
LABEL_5:
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            uint64_t v10 = v4;
            outlined consume of Locale.LanguageCode?(v4, v9);
LABEL_11:
            outlined consume of Locale.LanguageCode?(v6, v14);
            outlined consume of Locale.LanguageCode?(v1, v8);
            outlined consume of Locale.LanguageCode?(v10, v9);
            specialized Array<A>.hash(into:)((uint64_t)v15, v12);
            return Hasher._finalize()();
          }
LABEL_10:
          Hasher._combine(_:)(0);
          uint64_t v10 = v4;
          goto LABEL_11;
        }
      }
      Hasher._combine(_:)(0);
      uint64_t v9 = v3;
      if (v3) {
        goto LABEL_5;
      }
      goto LABEL_10;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TermOfAddress.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TermOfAddress.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TermOfAddress.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TermOfAddress.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TermOfAddress.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized TermOfAddress.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TermOfAddress.CodingKeys(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xED00007373657264;
  uint64_t v3 = 0x6441664F6D726574;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x65676175676E616CLL;
      goto LABEL_3;
    case 2:
      *a1 = 0x736E756F6E6F7270;
      a1[1] = 0xE800000000000000;
      break;
    case 3:
      *a1 = 1919251317;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void protocol witness for CodingKey.init(intValue:) in conformance TermOfAddress.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TermOfAddress.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TermOfAddress.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t TermOfAddress.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TermOfAddress.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v49) = 3;
    if (KeyedDecodingContainer.decodeIfPresent(_:forKey:)())
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 3;
    }
    else
    {
      LOBYTE(v49) = 0;
      lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      switch(v52)
      {
        case 1:
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          uint64_t v9 = 0;
          uint64_t v10 = 0;
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          uint64_t v21 = 2;
          break;
        case 2:
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          uint64_t v9 = 0;
          uint64_t v10 = 0;
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          break;
        case 3:
          LOBYTE(v49) = 1;
          uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
          uint64_t v48 = v24;
          uint64_t v47 = &v39;
          MEMORY[0x1F4188790](v23);
          LODWORD(v49) = 0;
          uint64_t v43 = v25;
          String.utf8CString.getter();
          int Language = uloc_getLanguage();
          swift_release();
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          if ((int)v49 <= 0 && Language > 0)
          {
            *((unsigned char *)&v39 + Language - 272) = 0;
            uint64_t v27 = MEMORY[0x185301F80](&v39 - 34, 0);
          }
          uint64_t v45 = v28;
          uint64_t v46 = v27;
          uint64_t countAndFlagsBits = &v39;
          MEMORY[0x1F4188790](v27);
          LODWORD(v49) = 0;
          String.utf8CString.getter();
          int Script = uloc_getScript();
          swift_release();
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          if ((int)v49 <= 0 && Script > 0)
          {
            *((unsigned char *)&v39 + Script - 272) = 0;
            uint64_t v30 = MEMORY[0x185301F80](&v39 - 34, 0);
          }
          uint64_t v44 = v31;
          uint64_t v47 = (void **)v30;
          uint64_t countAndFlagsBits = &v39;
          MEMORY[0x1F4188790](v30);
          LODWORD(v49) = 0;
          String.utf8CString.getter();
          int Country = uloc_getCountry();
          swift_release();
          uint64_t v33 = 0;
          uint64_t v34 = 0;
          if ((int)v49 <= 0 && Country > 0)
          {
            *((unsigned char *)&v39 + Country - 272) = 0;
            uint64_t v33 = MEMORY[0x185301F80](&v39 - 34, 0);
          }
          uint64_t v43 = v34;
          swift_bridgeObjectRelease();
          unint64_t object = v45;
          if (v45)
          {
            Swift::String v36 = String.lowercased()();
            unint64_t object = v36._object;
            uint64_t countAndFlagsBits = (void **)v36._countAndFlagsBits;
          }
          else
          {
            uint64_t v46 = 0;
            uint64_t countAndFlagsBits = 0;
          }
          uint64_t v41 = (uint64_t)object;
          if (v44)
          {
            uint64_t v49 = v47;
            uint64_t v50 = v44;
            swift_bridgeObjectRetain_n();
            String.init<A>(_:)();
            Swift::String v37 = String._capitalized()();
            uint64_t v39 = v37._object;
            uint64_t v40 = v37._countAndFlagsBits;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v47 = 0;
            uint64_t v39 = 0;
            uint64_t v40 = 0;
          }
          if (v43)
          {
            uint64_t v48 = v33;
            Swift::String v38 = String.uppercased()();
            uint64_t v19 = v38._countAndFlagsBits;
            uint64_t v20 = v38._object;
          }
          else
          {
            uint64_t v48 = 0;
            uint64_t v19 = 0;
            uint64_t v20 = 0;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Morphology.Pronoun]);
          char v51 = 2;
          lazy protocol witness table accessor for type [Morphology.Pronoun] and conformance <A> [A](&lazy protocol witness table cache variable for type [Morphology.Pronoun] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type Morphology.Pronoun and conformance Morphology.Pronoun);
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          uint64_t v17 = v48;
          uint64_t v21 = (uint64_t)v49;
          uint64_t v10 = (uint64_t)v45;
          uint64_t v9 = v46;
          uint64_t v13 = v47;
          uint64_t v18 = v43;
          uint64_t v14 = v44;
          uint64_t v12 = v41;
          uint64_t v11 = countAndFlagsBits;
          uint64_t v16 = (uint64_t)v39;
          uint64_t v15 = v40;
          break;
        default:
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          uint64_t v9 = 0;
          uint64_t v10 = 0;
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          uint64_t v21 = 1;
          break;
      }
    }
    *a2 = v9;
    a2[1] = v10;
    a2[2] = (uint64_t)v11;
    a2[3] = v12;
    a2[4] = (uint64_t)v13;
    a2[5] = v14;
    a2[6] = v15;
    a2[7] = v16;
    a2[8] = v17;
    a2[9] = v18;
    a2[10] = v19;
    a2[11] = (uint64_t)v20;
    a2[12] = v21;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t TermOfAddress.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TermOfAddress.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v36 = v3;
  uint64_t v37 = v4;
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = *v1;
  uint64_t v31 = v1[1];
  uint64_t v32 = v6;
  uint64_t v27 = v1[2];
  uint64_t v7 = v1[4];
  uint64_t v30 = v1[3];
  uint64_t v8 = v1[5];
  uint64_t v33 = v1[6];
  uint64_t v34 = v8;
  uint64_t v9 = v1[8];
  uint64_t v28 = v1[7];
  uint64_t v10 = v1[9];
  uint64_t v11 = v1[10];
  uint64_t v12 = v1[12];
  uint64_t v29 = v1[11];
  uint64_t v13 = a1[3];
  uint64_t v14 = a1;
  uint64_t v15 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v14, v13);
  lazy protocol witness table accessor for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v12)
  {
    case 0:
      char v16 = 2;
      goto LABEL_7;
    case 1:
      LOBYTE(v38) = 0;
      goto LABEL_8;
    case 2:
      char v16 = 1;
LABEL_7:
      LOBYTE(v38) = v16;
LABEL_8:
      char v50 = 0;
      lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender();
      uint64_t v21 = v36;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      goto LABEL_10;
    case 3:
      LOBYTE(v38) = 3;
      uint64_t v21 = v36;
      KeyedEncodingContainer.encode(_:forKey:)();
LABEL_10:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v15, v21);
      break;
    default:
      uint64_t v38 = v32;
      uint64_t v39 = v31;
      uint64_t v40 = v27;
      uint64_t v41 = v30;
      uint64_t v24 = v7;
      uint64_t v17 = v34;
      uint64_t v42 = v7;
      uint64_t v43 = v34;
      uint64_t v44 = v33;
      uint64_t v45 = v28;
      uint64_t v25 = v15;
      uint64_t v46 = v9;
      uint64_t v47 = v10;
      uint64_t v48 = v11;
      uint64_t v49 = v29;
      outlined copy of Locale.LanguageCode?(v32, v31);
      outlined copy of Locale.LanguageCode?(v7, v17);
      outlined copy of Locale.LanguageCode?(v9, v10);
      uint64_t v26 = v12;
      swift_bridgeObjectRetain();
      Locale.Language.minimalIdentifier.getter();
      outlined consume of Locale.LanguageCode?(v32, v31);
      outlined consume of Locale.LanguageCode?(v24, v34);
      outlined consume of Locale.LanguageCode?(v9, v10);
      LOBYTE(v38) = 1;
      uint64_t v18 = v35;
      uint64_t v19 = v36;
      uint64_t v20 = v25;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (v18)
      {
        (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v19);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v38 = v26;
        char v50 = 2;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Morphology.Pronoun]);
        lazy protocol witness table accessor for type [Morphology.Pronoun] and conformance <A> [A](&lazy protocol witness table cache variable for type [Morphology.Pronoun] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type Morphology.Pronoun and conformance Morphology.Pronoun);
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v19);
      }
      uint64_t result = swift_bridgeObjectRelease();
      break;
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance TermOfAddress@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return TermOfAddress.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TermOfAddress(void *a1)
{
  return TermOfAddress.encode(to:)(a1);
}

void TermOfAddress.init(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSTermOfAddress);
  uint64_t v4 = self;
  id v5 = objc_msgSend(v4, sel_neutral);
  char v6 = static NSObject.== infix(_:_:)();

  if (v6)
  {

    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
LABEL_38:
    *a2 = v7;
    a2[1] = v8;
    a2[2] = countAndFlagsBits;
    a2[3] = (uint64_t)object;
    a2[4] = v11;
    a2[5] = v12;
    a2[6] = (uint64_t)v13;
    a2[7] = (uint64_t)v14;
    a2[8] = v15;
    a2[9] = v16;
    a2[10] = v17;
    a2[11] = (uint64_t)v18;
    a2[12] = v19;
    return;
  }
  id v20 = objc_msgSend(v4, sel_feminine);
  char v21 = static NSObject.== infix(_:_:)();

  if (v21)
  {

    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 1;
    goto LABEL_38;
  }
  id v22 = objc_msgSend(v4, sel_masculine);
  char v23 = static NSObject.== infix(_:_:)();

  if (v23)
  {

    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 2;
    goto LABEL_38;
  }
  id v24 = objc_msgSend(v4, sel_currentUser);
  char v25 = static NSObject.== infix(_:_:)();

  if (v25)
  {

    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 3;
    goto LABEL_38;
  }
  id v26 = objc_msgSend(a1, sel_languageIdentifier);
  uint64_t v13 = v26;
  if (!v26)
  {
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v14 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v51 = 1;
    goto LABEL_28;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v26);

  MEMORY[0x1F4188790](v27);
  LODWORD(v52) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  swift_release();
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  if (Language > 0)
  {
    v44[Language] = 0;
    uint64_t v29 = MEMORY[0x185301F80](v44, 0);
  }
  uint64_t v51 = v30;
  uint64_t v48 = v29;
  MEMORY[0x1F4188790](v29);
  LODWORD(v52) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  swift_release();
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  if ((int)v52 <= 0 && Script > 0)
  {
    v44[Script] = 0;
    uint64_t v32 = MEMORY[0x185301F80](v44, 0);
  }
  uint64_t v47 = v33;
  uint64_t v50 = v32;
  MEMORY[0x1F4188790](v32);
  LODWORD(v52) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v35 = 0;
  uint64_t v16 = 0;
  if ((int)v52 <= 0 && Country > 0)
  {
    v44[Country] = 0;
    uint64_t v35 = MEMORY[0x185301F80](v44);
    uint64_t v16 = v36;
  }
  uint64_t v49 = v35;
  swift_bridgeObjectRelease();
  if (v51)
  {
    Swift::String v37 = String.lowercased()();
    uint64_t countAndFlagsBits = v37._countAndFlagsBits;
    unint64_t object = v37._object;
  }
  else
  {
    uint64_t v48 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
  }
  if (v47)
  {
    uint64_t v52 = v50;
    uint64_t v53 = v47;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    Swift::String v38 = String._capitalized()();
    uint64_t v13 = (void *)v38._countAndFlagsBits;
    uint64_t v14 = v38._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16)
    {
LABEL_25:
      Swift::String v39 = String.uppercased()();
      uint64_t v17 = v39._countAndFlagsBits;
      uint64_t v18 = v39._object;
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v50 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    if (v16) {
      goto LABEL_25;
    }
  }
  uint64_t v49 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
LABEL_28:
  id v40 = objc_msgSend(a1, sel_pronouns);
  if (v40)
  {
    uint64_t v41 = v40;
    uint64_t v46 = type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    uint64_t v42 = swift_dynamicCastClass();
    uint64_t v46 = (uint64_t)v41;
    if (v42)
    {
      uint64_t v46 = *(void *)(v42 + 24);
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    uint64_t v43 = swift_dynamicCastClass();
    if (v43)
    {
      uint64_t v46 = v43;
    }
    else
    {
      swift_unknownObjectRelease();
      id v45 = objc_msgSend(v41, sel_copy);
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      uint64_t v46 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }
    uint64_t v19 = (uint64_t)specialized Sequence.compactMap<A>(_:)(v46);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
  }
  if (v51 != 1)
  {

    uint64_t v12 = v47;
    uint64_t v7 = v48;
    uint64_t v11 = v50;
    uint64_t v8 = v51;
    uint64_t v15 = v49;
    goto LABEL_38;
  }
  __break(1u);
}

void __swiftcall TermOfAddress._bridgeToObjectiveC()(NSTermOfAddress *__return_ptr retstr)
{
  unint64_t v2 = v1[12];
  switch(v2)
  {
    case 0uLL:
      id v3 = objc_msgSend(self, sel_neutral);
      goto LABEL_8;
    case 1uLL:
      id v3 = objc_msgSend(self, sel_feminine);
      goto LABEL_8;
    case 2uLL:
      id v3 = objc_msgSend(self, sel_masculine);
      goto LABEL_8;
    case 3uLL:
      id v3 = objc_msgSend(self, sel_currentUser);
LABEL_8:
      id v16 = v3;
      return;
    default:
      uint64_t v4 = *v1;
      uint64_t v5 = v1[1];
      uint64_t v6 = v1[2];
      uint64_t v7 = v1[3];
      uint64_t v9 = v1[4];
      uint64_t v8 = v1[5];
      uint64_t v11 = v1[6];
      uint64_t v10 = v1[7];
      uint64_t v13 = v1[8];
      uint64_t v12 = v1[9];
      uint64_t v14 = v1[11];
      uint64_t v15 = v1[10];
      v52[0] = v4;
      v52[1] = v5;
      v52[2] = v6;
      v52[3] = v7;
      v52[4] = v9;
      v52[5] = v8;
      v52[6] = v11;
      v52[7] = v10;
      uint64_t v46 = v10;
      uint64_t v47 = v13;
      v52[8] = v13;
      v52[9] = v12;
      uint64_t v49 = v12;
      v52[10] = v15;
      v52[11] = v14;
      unint64_t v39 = v2;
      if (v5)
      {
        outlined copy of Locale.LanguageCode?(v4, v5);
        outlined copy of Locale.LanguageCode?(v9, v8);
        outlined copy of Locale.LanguageCode?(v47, v49);
        swift_bridgeObjectRetain();
LABEL_13:
        outlined copy of Locale.LanguageCode?(v4, v5);
        swift_bridgeObjectRelease();
        outlined consume of Locale.LanguageCode?(v4, v5);
        outlined consume of Locale.LanguageCode?(v9, v8);
        outlined consume of Locale.LanguageCode?(v47, v49);
        goto LABEL_14;
      }
      outlined copy of Locale.LanguageCode?(v4, 0);
      outlined copy of Locale.LanguageCode?(v9, v8);
      outlined copy of Locale.LanguageCode?(v47, v49);
      outlined copy of TermOfAddress._TermOfAddress(v4, 0, v6, v7, v9, v8, v11, v46, v47, v49, v15, v14, v2);
      specialized _withFixedCharBuffer(size:_:)(257, v52);
      uint64_t v18 = v17;
      outlined consume of Locale.LanguageCode?(v4, 0);
      outlined consume of Locale.LanguageCode?(v9, v8);
      outlined consume of Locale.LanguageCode?(v47, v49);
      if (v18)
      {
        String.lowercased()();
        goto LABEL_13;
      }
      Locale.Language.maximalIdentifier.getter();
      outlined consume of Locale.LanguageCode?(v4, 0);
      outlined consume of Locale.LanguageCode?(v9, v8);
      outlined consume of Locale.LanguageCode?(v47, v49);
LABEL_14:
      uint64_t v19 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(v2 + 16);
      if (v20)
      {
        unint64_t v51 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v21 = 0;
        while (1)
        {
          uint64_t v50 = v20;
          uint64_t v45 = v21;
          uint64_t v23 = *(unsigned __int8 *)(v39 + v21 + 48);
          uint64_t v24 = *(unsigned __int8 *)(v39 + v21 + 49);
          uint64_t v25 = *(unsigned __int8 *)(v39 + v21 + 50);
          uint64_t v26 = *(unsigned __int8 *)(v39 + v21 + 64);
          uint64_t v42 = *(unsigned __int8 *)(v39 + v21 + 66);
          int v27 = *(unsigned __int8 *)(v39 + v21 + 67);
          int v43 = *(unsigned __int8 *)(v39 + v21 + 68);
          uint64_t v28 = *(void *)(v39 + v21 + 80);
          uint64_t v44 = *(void *)(v39 + v21 + 72);
          uint64_t v40 = *(unsigned int *)(v39 + v21 + 88);
          uint64_t v41 = *(unsigned __int8 *)(v39 + v21 + 92);
          uint64_t v48 = String._bridgeToObjectiveCImpl()();
          id v29 = objc_allocWithZone((Class)NSMorphology);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v30 = objc_msgSend(v29, sel_init);
          uint64_t v31 = v30;
          if (v23 == 3)
          {
            if (v25 == 6) {
              goto LABEL_20;
            }
          }
          else
          {
            objc_msgSend(v30, sel_setGrammaticalGender_, v23 + 1);
            if (v25 == 6)
            {
LABEL_20:
              if (v24 == 14) {
                goto LABEL_21;
              }
              goto LABEL_36;
            }
          }
          objc_msgSend(v31, sel_setNumber_, v25 + 1);
          if (v24 == 14)
          {
LABEL_21:
            if (v26 != 14) {
              goto LABEL_37;
            }
            goto LABEL_22;
          }
LABEL_36:
          objc_msgSend(v31, sel_setPartOfSpeech_, v24 + 1);
          if (v26 != 14)
          {
LABEL_37:
            objc_msgSend(v31, sel_setGrammaticalCase_, v26 + 1);
            if (v27 == 2) {
              goto LABEL_24;
            }
LABEL_23:
            objc_msgSend(v31, sel_setDetermination_, (v27 & 1) + 1);
            goto LABEL_24;
          }
LABEL_22:
          if (v27 != 2) {
            goto LABEL_23;
          }
LABEL_24:
          if (v42 != 3) {
            objc_msgSend(v31, sel_setPronounType_, v42 + 1);
          }
          swift_bridgeObjectRelease();
          if (v43 != 2)
          {
            if (v43) {
              uint64_t v32 = 2;
            }
            else {
              uint64_t v32 = 1;
            }
            objc_msgSend(v31, sel_setDefiniteness_, v32);
          }
          if (v28)
          {
            id v33 = objc_allocWithZone((Class)NSMorphology);
            swift_bridgeObjectRetain();
            id v34 = objc_msgSend(v33, sel_init);
            id v22 = v34;
            if (v44 == 3) {
              id v35 = v34;
            }
            else {
              objc_msgSend(v34, sel_setGrammaticalGender_, v44 + 1);
            }
            if ((v44 & 0xFF0000) != 0x60000) {
              objc_msgSend(v22, sel_setNumber_, BYTE2(v44) + 1);
            }
            if ((v44 & 0xFF00) != 0xE00) {
              objc_msgSend(v22, sel_setPartOfSpeech_, BYTE1(v44) + 1);
            }
            unint64_t v36 = v40 | (v41 << 32);
            if (v40 != 14) {
              objc_msgSend(v22, sel_setGrammaticalCase_, v40 + 1);
            }
            if ((v40 & 0xFF000000) != 0x2000000) {
              objc_msgSend(v22, sel_setDetermination_, ((v36 >> 24) & 1) + 1);
            }
            if (BYTE2(v40) != 3) {
              objc_msgSend(v22, sel_setPronounType_, BYTE2(v40) + 1);
            }
            if (v41 == 2)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease_n();
            }
            else
            {
              if ((v36 & 0x100000000) != 0) {
                uint64_t v37 = 2;
              }
              else {
                uint64_t v37 = 1;
              }
              objc_msgSend(v22, sel_setDefiniteness_, v37);
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v22 = 0;
          }
          objc_msgSend(objc_allocWithZone((Class)NSMorphologyPronoun), sel_initWithPronoun_morphology_dependentMorphology_, v48, v31, v22);

          swift_unknownObjectRelease();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v21 = v45 + 64;
          uint64_t v20 = v50 - 1;
          if (v50 == 1)
          {
            uint64_t v38 = v51;
            swift_bridgeObjectRelease();
            if (!(v51 >> 62)) {
              goto LABEL_57;
            }
LABEL_60:
            if (v38 >= 0) {
              v38 &= 0xFFFFFFFFFFFFFF8uLL;
            }
            goto LABEL_58;
          }
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v38 = MEMORY[0x1E4FBC860];
      if (MEMORY[0x1E4FBC860] >> 62) {
        goto LABEL_60;
      }
LABEL_57:
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      uint64_t v38 = _ContiguousArrayBuffer._asCocoaArray()();
LABEL_58:
      objc_msgSend(self, sel_localizedForLanguageIdentifier_withPronouns_, v19, v38);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return;
  }
}

void static TermOfAddress._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    __break(1u);
  }
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSTermOfAddress);
  uint64_t v4 = self;
  id v5 = a1;
  id v6 = objc_msgSend(v4, sel_neutral);
  char v7 = static NSObject.== infix(_:_:)();

  if (v7)
  {

    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
LABEL_39:
    *a2 = v8;
    a2[1] = v9;
    a2[2] = countAndFlagsBits;
    a2[3] = (uint64_t)object;
    a2[4] = v12;
    a2[5] = v13;
    a2[6] = (uint64_t)v14;
    a2[7] = (uint64_t)v15;
    a2[8] = v16;
    a2[9] = v17;
    a2[10] = v18;
    a2[11] = (uint64_t)v19;
    a2[12] = v20;
    return;
  }
  id v21 = objc_msgSend(v4, sel_feminine);
  char v22 = static NSObject.== infix(_:_:)();

  if (v22)
  {

    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 1;
    goto LABEL_39;
  }
  id v23 = objc_msgSend(v4, sel_masculine);
  char v24 = static NSObject.== infix(_:_:)();

  if (v24)
  {

    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 2;
    goto LABEL_39;
  }
  id v25 = objc_msgSend(v4, sel_currentUser);
  char v26 = static NSObject.== infix(_:_:)();

  if (v26)
  {

    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 3;
    goto LABEL_39;
  }
  id v27 = objc_msgSend(v5, sel_languageIdentifier);
  uint64_t v14 = v27;
  if (!v27)
  {
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v15 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v52 = 1;
    goto LABEL_29;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v27);

  MEMORY[0x1F4188790](v28);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  swift_release();
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  if (Language > 0)
  {
    v45[Language] = 0;
    uint64_t v30 = MEMORY[0x185301F80](v45, 0);
  }
  uint64_t v52 = v31;
  uint64_t v48 = v30;
  MEMORY[0x1F4188790](v30);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  swift_release();
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if ((int)v53 <= 0 && Script > 0)
  {
    v45[Script] = 0;
    uint64_t v33 = MEMORY[0x185301F80](v45, 0);
  }
  uint64_t v49 = v34;
  uint64_t v51 = v33;
  MEMORY[0x1F4188790](v33);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v36 = 0;
  uint64_t v17 = 0;
  if ((int)v53 <= 0 && Country > 0)
  {
    v45[Country] = 0;
    uint64_t v36 = MEMORY[0x185301F80](v45);
    uint64_t v17 = v37;
  }
  uint64_t v50 = v36;
  swift_bridgeObjectRelease();
  if (v52)
  {
    Swift::String v38 = String.lowercased()();
    uint64_t countAndFlagsBits = v38._countAndFlagsBits;
    unint64_t object = v38._object;
  }
  else
  {
    uint64_t v48 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
  }
  if (v49)
  {
    uint64_t v53 = v51;
    uint64_t v54 = v49;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    Swift::String v39 = String._capitalized()();
    uint64_t v14 = (void *)v39._countAndFlagsBits;
    uint64_t v15 = v39._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17)
    {
LABEL_26:
      Swift::String v40 = String.uppercased()();
      uint64_t v18 = v40._countAndFlagsBits;
      uint64_t v19 = v40._object;
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v51 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    if (v17) {
      goto LABEL_26;
    }
  }
  uint64_t v50 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
LABEL_29:
  id v41 = objc_msgSend(v5, sel_pronouns);
  if (v41)
  {
    uint64_t v42 = v41;
    uint64_t v47 = type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    uint64_t v43 = swift_dynamicCastClass();
    uint64_t v47 = (uint64_t)v42;
    if (v43)
    {
      uint64_t v47 = *(void *)(v43 + 24);
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    uint64_t v44 = swift_dynamicCastClass();
    if (v44)
    {
      uint64_t v47 = v44;
    }
    else
    {
      swift_unknownObjectRelease();
      id v46 = objc_msgSend(v42, sel_copy);
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      uint64_t v47 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }
    uint64_t v20 = (uint64_t)specialized Sequence.compactMap<A>(_:)(v47);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = MEMORY[0x1E4FBC860];
  }
  if (v52 != 1)
  {

    uint64_t v8 = v48;
    uint64_t v13 = v49;
    uint64_t v12 = v51;
    uint64_t v9 = v52;
    uint64_t v16 = v50;
    goto LABEL_39;
  }
  __break(1u);
}

uint64_t specialized static TermOfAddress.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  uint64_t v11 = a1[9];
  uint64_t v13 = a1[10];
  uint64_t v12 = a1[11];
  unint64_t v14 = a1[12];
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  uint64_t v18 = a2[2];
  uint64_t v17 = a2[3];
  uint64_t v19 = a2[4];
  uint64_t v20 = a2[5];
  uint64_t v21 = a2[6];
  uint64_t v22 = a2[7];
  uint64_t v23 = a2[8];
  uint64_t v24 = a2[9];
  uint64_t v25 = a2[10];
  uint64_t v26 = a2[11];
  unint64_t v27 = a2[12];
  v61[0] = *a1;
  v61[1] = v3;
  _OWORD v61[2] = v4;
  v61[3] = v5;
  v61[4] = v6;
  v61[5] = v7;
  v61[6] = v8;
  v61[7] = v9;
  v61[8] = v10;
  v61[9] = v11;
  v61[10] = v13;
  v61[11] = v12;
  uint64_t v59 = v12;
  v61[12] = v14;
  v61[13] = v15;
  v61[14] = v16;
  v61[15] = v18;
  v61[16] = v17;
  v61[17] = v19;
  v61[18] = v20;
  v61[19] = v21;
  v61[20] = v22;
  v61[21] = v23;
  v61[22] = v24;
  v61[23] = v25;
  v61[24] = v26;
  v61[25] = v27;
  switch(v14)
  {
    case 0uLL:
      if (v27) {
        goto LABEL_14;
      }
      goto LABEL_11;
    case 1uLL:
      if (v27 != 1) {
        goto LABEL_14;
      }
      goto LABEL_11;
    case 2uLL:
      if (v27 != 2) {
        goto LABEL_14;
      }
LABEL_11:
      outlined copy of TermOfAddress._TermOfAddress(v15, v16, v18, v17, v19, v20, v21, v22, v23, v24, v25, v26, v27);
      char v31 = 1;
      goto LABEL_15;
    case 3uLL:
      if (v27 != 3) {
        goto LABEL_14;
      }
      char v31 = 1;
      goto LABEL_15;
    default:
      if (v27 < 4)
      {
LABEL_14:
        uint64_t v46 = v26;
        unint64_t v47 = v27;
        uint64_t v45 = v25;
        uint64_t v44 = v23;
        uint64_t v32 = v15;
        uint64_t v33 = v16;
        uint64_t v56 = v5;
        uint64_t v58 = v4;
        uint64_t v34 = v10;
        uint64_t v35 = v18;
        uint64_t v36 = v6;
        uint64_t v37 = v7;
        uint64_t v38 = v8;
        uint64_t v39 = v9;
        uint64_t v40 = v2;
        uint64_t v41 = v3;
        outlined copy of TermOfAddress._TermOfAddress(v32, v33, v35, v17, v19, v20, v21, v22, v44, v24, v45, v46, v47);
        outlined copy of TermOfAddress._TermOfAddress(v40, v41, v58, v56, v36, v37, v38, v39, v34, v11, v13, v59, v14);
        char v31 = 0;
        goto LABEL_15;
      }
      uint64_t v55 = v5;
      uint64_t v57 = v4;
      uint64_t v50 = v10;
      uint64_t v51 = v9;
      uint64_t v54 = v6;
      uint64_t v52 = v8;
      uint64_t v53 = v7;
      uint64_t v48 = v2;
      uint64_t v49 = v3;
      outlined copy of TermOfAddress._TermOfAddress(v15, v16, v18, v17, v19, v20, v21, v22, v23, v24, v25, v26, v27);
      outlined copy of TermOfAddress._TermOfAddress(v48, v49, v57, v55, v54, v53, v52, v51, v50, v11, v13, v59, v14);
      uint64_t v60 = Locale.Language.maximalIdentifier.getter();
      uint64_t v29 = v28;
      if (v60 == Locale.Language.maximalIdentifier.getter() && v29 == v30)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v31 = 0;
        if ((v43 & 1) == 0) {
          goto LABEL_15;
        }
      }
      char v31 = specialized static Array<A>.== infix(_:_:)(v14, v27);
LABEL_15:
      outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)((uint64_t)v61);
      return v31 & 1;
  }
}

unint64_t lazy protocol witness table accessor for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress.CodingKeys and conformance TermOfAddress.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender;
  if (!lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Morphology.Pronoun and conformance Morphology.Pronoun()
{
  unint64_t result = lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun;
  if (!lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Morphology.Pronoun and conformance Morphology.Pronoun);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Morphology.Pronoun] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Morphology.Pronoun]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined copy of TermOfAddress._TermOfAddress(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a13 >= 4)
  {
    outlined copy of Locale.LanguageCode?(result, a2);
    outlined copy of Locale.LanguageCode?(a5, a6);
    outlined copy of Locale.LanguageCode?(a9, a10);
    return swift_bridgeObjectRetain();
  }
  return result;
}

void specialized static TermOfAddress._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  outlined consume of TermOfAddress?(*(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 56), *(void *)(a2 + 64), *(void *)(a2 + 72), *(void *)(a2 + 80), *(void *)(a2 + 88), *(void *)(a2 + 96));
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSTermOfAddress);
  uint64_t v4 = self;
  id v5 = a1;
  id v6 = objc_msgSend(v4, sel_neutral);
  char v7 = static NSObject.== infix(_:_:)();

  if (v7)
  {

    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
LABEL_38:
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = countAndFlagsBits;
    *(void *)(a2 + 24) = object;
    *(void *)(a2 + 32) = v12;
    *(void *)(a2 + 40) = v13;
    *(void *)(a2 + 48) = v14;
    *(void *)(a2 + 56) = v15;
    *(void *)(a2 + 64) = v16;
    *(void *)(a2 + 72) = v17;
    *(void *)(a2 + 80) = v18;
    *(void *)(a2 + 88) = v19;
    *(void *)(a2 + 96) = v20;
    return;
  }
  id v21 = objc_msgSend(v4, sel_feminine);
  char v22 = static NSObject.== infix(_:_:)();

  if (v22)
  {

    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 1;
    goto LABEL_38;
  }
  id v23 = objc_msgSend(v4, sel_masculine);
  char v24 = static NSObject.== infix(_:_:)();

  if (v24)
  {

    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 2;
    goto LABEL_38;
  }
  id v25 = objc_msgSend(v4, sel_currentUser);
  char v26 = static NSObject.== infix(_:_:)();

  if (v26)
  {

    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 3;
    goto LABEL_38;
  }
  id v27 = objc_msgSend(v5, sel_languageIdentifier);
  unint64_t v14 = v27;
  if (!v27)
  {
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v15 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v52 = 1;
    goto LABEL_28;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v27);

  MEMORY[0x1F4188790](v28);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  swift_release();
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  if (Language > 0)
  {
    v45[Language] = 0;
    uint64_t v30 = MEMORY[0x185301F80](v45, 0);
  }
  uint64_t v52 = v31;
  uint64_t v49 = v30;
  MEMORY[0x1F4188790](v30);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  swift_release();
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if ((int)v53 <= 0 && Script > 0)
  {
    v45[Script] = 0;
    uint64_t v33 = MEMORY[0x185301F80](v45, 0);
  }
  uint64_t v48 = v34;
  uint64_t v51 = v33;
  MEMORY[0x1F4188790](v33);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v36 = 0;
  uint64_t v17 = 0;
  if ((int)v53 <= 0 && Country > 0)
  {
    v45[Country] = 0;
    uint64_t v36 = MEMORY[0x185301F80](v45);
    uint64_t v17 = v37;
  }
  uint64_t v50 = v36;
  swift_bridgeObjectRelease();
  if (v52)
  {
    Swift::String v38 = String.lowercased()();
    uint64_t countAndFlagsBits = v38._countAndFlagsBits;
    unint64_t object = v38._object;
  }
  else
  {
    uint64_t v49 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
  }
  if (v48)
  {
    uint64_t v53 = v51;
    uint64_t v54 = v48;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    Swift::String v39 = String._capitalized()();
    unint64_t v14 = (void *)v39._countAndFlagsBits;
    uint64_t v15 = v39._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17)
    {
LABEL_25:
      Swift::String v40 = String.uppercased()();
      uint64_t v18 = v40._countAndFlagsBits;
      uint64_t v19 = v40._object;
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v51 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    if (v17) {
      goto LABEL_25;
    }
  }
  uint64_t v50 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
LABEL_28:
  id v41 = objc_msgSend(v5, sel_pronouns);
  if (v41)
  {
    uint64_t v42 = v41;
    uint64_t v47 = type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    uint64_t v43 = swift_dynamicCastClass();
    uint64_t v47 = (uint64_t)v42;
    if (v43)
    {
      uint64_t v47 = *(void *)(v43 + 24);
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    uint64_t v44 = swift_dynamicCastClass();
    if (v44)
    {
      uint64_t v47 = v44;
    }
    else
    {
      swift_unknownObjectRelease();
      id v46 = objc_msgSend(v42, sel_copy);
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      uint64_t v47 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }
    uint64_t v20 = (uint64_t)specialized Sequence.compactMap<A>(_:)(v47);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = MEMORY[0x1E4FBC860];
  }
  if (v52 != 1)
  {

    uint64_t v13 = v48;
    uint64_t v8 = v49;
    uint64_t v12 = v51;
    uint64_t v9 = v52;
    uint64_t v16 = v50;
    goto LABEL_38;
  }
  __break(1u);
}

uint64_t specialized static TermOfAddress._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  outlined consume of TermOfAddress?(*(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 56), *(void *)(a2 + 64), *(void *)(a2 + 72), *(void *)(a2 + 80), *(void *)(a2 + 88), *(void *)(a2 + 96));
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSTermOfAddress);
  uint64_t v4 = self;
  id v5 = a1;
  id v6 = objc_msgSend(v4, sel_neutral);
  char v7 = static NSObject.== infix(_:_:)();

  if (v7)
  {

    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
LABEL_38:
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = countAndFlagsBits;
    *(void *)(a2 + 24) = object;
    *(void *)(a2 + 32) = v12;
    *(void *)(a2 + 40) = v13;
    *(void *)(a2 + 48) = v14;
    *(void *)(a2 + 56) = v15;
    *(void *)(a2 + 64) = v16;
    *(void *)(a2 + 72) = v17;
    *(void *)(a2 + 80) = v18;
    *(void *)(a2 + 88) = v19;
    *(void *)(a2 + 96) = v20;
    return 1;
  }
  id v21 = objc_msgSend(v4, sel_feminine);
  char v22 = static NSObject.== infix(_:_:)();

  if (v22)
  {

    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 1;
    goto LABEL_38;
  }
  id v23 = objc_msgSend(v4, sel_masculine);
  char v24 = static NSObject.== infix(_:_:)();

  if (v24)
  {

    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 2;
    goto LABEL_38;
  }
  id v25 = objc_msgSend(v4, sel_currentUser);
  char v26 = static NSObject.== infix(_:_:)();

  if (v26)
  {

    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 3;
    goto LABEL_38;
  }
  id v27 = objc_msgSend(v5, sel_languageIdentifier);
  unint64_t v14 = v27;
  if (!v27)
  {
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v15 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v52 = 1;
    goto LABEL_28;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v27);

  MEMORY[0x1F4188790](v28);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  swift_release();
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  if (Language > 0)
  {
    v45[Language] = 0;
    uint64_t v30 = MEMORY[0x185301F80](v45, 0);
  }
  uint64_t v52 = v31;
  uint64_t v49 = v30;
  MEMORY[0x1F4188790](v30);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  swift_release();
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if ((int)v53 <= 0 && Script > 0)
  {
    v45[Script] = 0;
    uint64_t v33 = MEMORY[0x185301F80](v45, 0);
  }
  uint64_t v48 = v34;
  uint64_t v51 = v33;
  MEMORY[0x1F4188790](v33);
  LODWORD(v53) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v36 = 0;
  uint64_t v17 = 0;
  if ((int)v53 <= 0 && Country > 0)
  {
    v45[Country] = 0;
    uint64_t v36 = MEMORY[0x185301F80](v45);
    uint64_t v17 = v37;
  }
  uint64_t v50 = v36;
  swift_bridgeObjectRelease();
  if (v52)
  {
    Swift::String v38 = String.lowercased()();
    uint64_t countAndFlagsBits = v38._countAndFlagsBits;
    unint64_t object = v38._object;
  }
  else
  {
    uint64_t v49 = 0;
    uint64_t countAndFlagsBits = 0;
    unint64_t object = 0;
  }
  if (v48)
  {
    uint64_t v53 = v51;
    uint64_t v54 = v48;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    Swift::String v39 = String._capitalized()();
    unint64_t v14 = (void *)v39._countAndFlagsBits;
    uint64_t v15 = v39._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17)
    {
LABEL_25:
      Swift::String v40 = String.uppercased()();
      uint64_t v18 = v40._countAndFlagsBits;
      uint64_t v19 = v40._object;
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v51 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    if (v17) {
      goto LABEL_25;
    }
  }
  uint64_t v50 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
LABEL_28:
  uint64_t result = (uint64_t)objc_msgSend(v5, sel_pronouns);
  if (result)
  {
    uint64_t v42 = (void *)result;
    uint64_t v47 = type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    uint64_t v43 = swift_dynamicCastClass();
    uint64_t v47 = (uint64_t)v42;
    if (v43)
    {
      uint64_t v47 = *(void *)(v43 + 24);
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    uint64_t v44 = swift_dynamicCastClass();
    if (v44)
    {
      uint64_t v47 = v44;
    }
    else
    {
      swift_unknownObjectRelease();
      id v46 = objc_msgSend(v42, sel_copy);
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      uint64_t v47 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }
    uint64_t v20 = (uint64_t)specialized Sequence.compactMap<A>(_:)(v47);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = MEMORY[0x1E4FBC860];
  }
  if (v52 != 1)
  {

    uint64_t v13 = v48;
    uint64_t v8 = v49;
    uint64_t v12 = v51;
    uint64_t v9 = v52;
    uint64_t v16 = v50;
    goto LABEL_38;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type TermOfAddress and conformance TermOfAddress()
{
  unint64_t result = lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress;
  if (!lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress;
  if (!lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress;
  if (!lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TermOfAddress and conformance TermOfAddress);
  }
  return result;
}

uint64_t destroy for TermOfAddress(uint64_t result)
{
  if (*(void *)(result + 96) >= 4uLL)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 8))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(void *)(v1 + 40))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(void *)(v1 + 72))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for TermOfAddress(void *a1, void *a2)
{
  unint64_t v4 = a2[12];
  if (v4 >= 4)
  {
    uint64_t v8 = a2[1];
    if (v8)
    {
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = a2[3];
      a1[2] = a2[2];
      a1[3] = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v10 = a2[5];
      if (v10) {
        goto LABEL_5;
      }
    }
    else
    {
      long long v15 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v15;
      uint64_t v10 = a2[5];
      if (v10)
      {
LABEL_5:
        a1[4] = a2[4];
        a1[5] = v10;
        uint64_t v11 = a2[7];
        a1[6] = a2[6];
        a1[7] = v11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v12 = a2[9];
        if (v12)
        {
LABEL_6:
          a1[8] = a2[8];
          a1[9] = v12;
          uint64_t v13 = a2[10];
          uint64_t v14 = a2[11];
          a1[10] = v13;
          a1[11] = v14;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_10:
          a1[12] = v4;
          swift_bridgeObjectRetain();
          return a1;
        }
LABEL_9:
        long long v17 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v17;
        goto LABEL_10;
      }
    }
    long long v16 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v16;
    uint64_t v12 = a2[9];
    if (v12) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  long long v5 = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = v5;
  a1[12] = a2[12];
  long long v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  long long v7 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v7;
  return a1;
}

uint64_t assignWithCopy for TermOfAddress(uint64_t a1, long long *a2)
{
  unint64_t v4 = *((void *)a2 + 12);
  if (*(void *)(a1 + 96) < 4uLL)
  {
    if (v4 < 4)
    {
      long long v5 = *a2;
      long long v6 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v6;
      *(_OWORD *)a1 = v5;
      long long v7 = a2[3];
      long long v8 = a2[4];
      long long v9 = a2[5];
      *(void *)(a1 + 96) = *((void *)a2 + 12);
      *(_OWORD *)(a1 + 64) = v8;
      *(_OWORD *)(a1 + 80) = v9;
      *(_OWORD *)(a1 + 48) = v7;
      return a1;
    }
    if (*((void *)a2 + 1))
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (*((void *)a2 + 5)) {
        goto LABEL_8;
      }
    }
    else
    {
      long long v16 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v16;
      if (*((void *)a2 + 5))
      {
LABEL_8:
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        *(void *)(a1 + 40) = *((void *)a2 + 5);
        *(void *)(a1 + 48) = *((void *)a2 + 6);
        *(void *)(a1 + 56) = *((void *)a2 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (*((void *)a2 + 9))
        {
LABEL_9:
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          *(void *)(a1 + 80) = *((void *)a2 + 10);
          *(void *)(a1 + 88) = *((void *)a2 + 11);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_16:
          *(void *)(a1 + 96) = *((void *)a2 + 12);
          swift_bridgeObjectRetain();
          return a1;
        }
LABEL_15:
        long long v18 = a2[5];
        *(_OWORD *)(a1 + 64) = a2[4];
        *(_OWORD *)(a1 + 80) = v18;
        goto LABEL_16;
      }
    }
    long long v17 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v17;
    if (*((void *)a2 + 9)) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }
  if (v4 >= 4)
  {
    uint64_t v15 = *((void *)a2 + 1);
    if (*(void *)(a1 + 8))
    {
      if (v15)
      {
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Locale.LanguageCode(a1);
        long long v19 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v19;
      }
    }
    else if (v15)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v20 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v20;
    }
    id v21 = (_OWORD *)(a1 + 32);
    char v22 = a2 + 2;
    uint64_t v23 = *((void *)a2 + 5);
    if (*(void *)(a1 + 40))
    {
      if (v23)
      {
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        *(void *)(a1 + 40) = *((void *)a2 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 48) = *((void *)a2 + 6);
        *(void *)(a1 + 56) = *((void *)a2 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Locale.Script(a1 + 32);
        long long v24 = a2[3];
        *id v21 = *v22;
        *(_OWORD *)(a1 + 48) = v24;
      }
    }
    else if (v23)
    {
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      *(void *)(a1 + 56) = *((void *)a2 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v25 = a2[3];
      *id v21 = *v22;
      *(_OWORD *)(a1 + 48) = v25;
    }
    char v26 = (_OWORD *)(a1 + 64);
    id v27 = a2 + 4;
    uint64_t v28 = *((void *)a2 + 9);
    if (*(void *)(a1 + 72))
    {
      if (v28)
      {
        *(void *)(a1 + 64) = *((void *)a2 + 8);
        *(void *)(a1 + 72) = *((void *)a2 + 9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Locale.Region(a1 + 64);
        long long v29 = a2[5];
        *char v26 = *v27;
        *(_OWORD *)(a1 + 80) = v29;
      }
    }
    else if (v28)
    {
      *(void *)(a1 + 64) = *((void *)a2 + 8);
      *(void *)(a1 + 72) = *((void *)a2 + 9);
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      *(void *)(a1 + 88) = *((void *)a2 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v30 = a2[5];
      *char v26 = *v27;
      *(_OWORD *)(a1 + 80) = v30;
    }
    *(void *)(a1 + 96) = *((void *)a2 + 12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of (Locale.Language, [Morphology.Pronoun])(a1);
    long long v11 = a2[1];
    long long v10 = a2[2];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = v10;
    long long v13 = a2[4];
    long long v12 = a2[5];
    long long v14 = a2[3];
    *(void *)(a1 + 96) = *((void *)a2 + 12);
    *(_OWORD *)(a1 + 64) = v13;
    *(_OWORD *)(a1 + 80) = v12;
    *(_OWORD *)(a1 + 48) = v14;
  }
  return a1;
}

uint64_t outlined destroy of Locale.LanguageCode(uint64_t a1)
{
  return a1;
}

{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Locale.Script(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Locale.Region(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of (Locale.Language, [Morphology.Pronoun])(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Locale.Language, [Morphology.Pronoun]));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void *assignWithTake for TermOfAddress(void *a1, void *a2)
{
  if (a1[12] < 4uLL) {
    goto LABEL_4;
  }
  unint64_t v4 = a2[12];
  if (v4 >= 4)
  {
    if (a1[1])
    {
      uint64_t v8 = a2[1];
      if (v8)
      {
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRelease();
        uint64_t v9 = a2[3];
        a1[2] = a2[2];
        a1[3] = v9;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      outlined destroy of Locale.LanguageCode((uint64_t)a1);
    }
    long long v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v10;
LABEL_10:
    if (a1[5])
    {
      uint64_t v11 = a2[5];
      if (v11)
      {
        a1[4] = a2[4];
        a1[5] = v11;
        swift_bridgeObjectRelease();
        uint64_t v12 = a2[7];
        a1[6] = a2[6];
        a1[7] = v12;
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      outlined destroy of Locale.Script((uint64_t)(a1 + 4));
    }
    long long v13 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v13;
LABEL_15:
    if (a1[9])
    {
      uint64_t v14 = a2[9];
      if (v14)
      {
        a1[8] = a2[8];
        a1[9] = v14;
        swift_bridgeObjectRelease();
        uint64_t v15 = a2[11];
        a1[10] = a2[10];
        a1[11] = v15;
        swift_bridgeObjectRelease();
LABEL_20:
        a1[12] = v4;
        swift_bridgeObjectRelease();
        return a1;
      }
      outlined destroy of Locale.Region((uint64_t)(a1 + 8));
    }
    long long v16 = *((_OWORD *)a2 + 5);
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 5) = v16;
    goto LABEL_20;
  }
  outlined destroy of (Locale.Language, [Morphology.Pronoun])((uint64_t)a1);
LABEL_4:
  long long v5 = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = v5;
  a1[12] = a2[12];
  long long v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  long long v7 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for TermOfAddress(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFB && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  unint64_t v3 = *(void *)(a1 + 96);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 4;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TermOfAddress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 2147483644;
    if (a3 > 0x7FFFFFFB) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFB) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)(result + 96) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TermOfAddress()
{
  return &type metadata for TermOfAddress;
}

uint64_t destroy for TermOfAddress._TermOfAddress(uint64_t result)
{
  if (*(void *)(result + 96) >= 0xFFFFFFFFuLL)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 8))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(void *)(v1 + 40))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(void *)(v1 + 72))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t assignWithCopy for TermOfAddress._TermOfAddress(uint64_t a1, long long *a2)
{
  unint64_t v4 = *((void *)a2 + 12);
  if (*(void *)(a1 + 96) < 0xFFFFFFFFuLL)
  {
    if (v4 < 0xFFFFFFFF)
    {
LABEL_18:
      long long v7 = *a2;
      long long v8 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)a1 = v7;
      long long v9 = a2[3];
      long long v10 = a2[4];
      long long v11 = a2[5];
      *(void *)(a1 + 96) = *((void *)a2 + 12);
      *(_OWORD *)(a1 + 64) = v10;
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 48) = v9;
      return a1;
    }
    if (*((void *)a2 + 1))
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (*((void *)a2 + 5)) {
        goto LABEL_9;
      }
    }
    else
    {
      long long v12 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v12;
      if (*((void *)a2 + 5))
      {
LABEL_9:
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        *(void *)(a1 + 40) = *((void *)a2 + 5);
        *(void *)(a1 + 48) = *((void *)a2 + 6);
        *(void *)(a1 + 56) = *((void *)a2 + 7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (*((void *)a2 + 9))
        {
LABEL_10:
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          *(void *)(a1 + 80) = *((void *)a2 + 10);
          *(void *)(a1 + 88) = *((void *)a2 + 11);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_24:
          *(void *)(a1 + 96) = *((void *)a2 + 12);
          swift_bridgeObjectRetain();
          return a1;
        }
LABEL_23:
        long long v14 = a2[5];
        *(_OWORD *)(a1 + 64) = a2[4];
        *(_OWORD *)(a1 + 80) = v14;
        goto LABEL_24;
      }
    }
    long long v13 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v13;
    if (*((void *)a2 + 9)) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(void *)(a1 + 40))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(void *)(a1 + 72))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  uint64_t v6 = *((void *)a2 + 1);
  if (v5)
  {
    if (v6)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1);
      long long v15 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v15;
    }
  }
  else if (v6)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v16 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v16;
  }
  long long v17 = (_OWORD *)(a1 + 32);
  long long v18 = a2 + 2;
  uint64_t v19 = *((void *)a2 + 5);
  if (*(void *)(a1 + 40))
  {
    if (v19)
    {
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      *(void *)(a1 + 56) = *((void *)a2 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Script(a1 + 32);
      long long v20 = a2[3];
      *long long v17 = *v18;
      *(_OWORD *)(a1 + 48) = v20;
    }
  }
  else if (v19)
  {
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v21 = a2[3];
    *long long v17 = *v18;
    *(_OWORD *)(a1 + 48) = v21;
  }
  char v22 = (_OWORD *)(a1 + 64);
  uint64_t v23 = a2 + 4;
  uint64_t v24 = *((void *)a2 + 9);
  if (*(void *)(a1 + 72))
  {
    if (v24)
    {
      *(void *)(a1 + 64) = *((void *)a2 + 8);
      *(void *)(a1 + 72) = *((void *)a2 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      *(void *)(a1 + 88) = *((void *)a2 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Region(a1 + 64);
      long long v25 = a2[5];
      *char v22 = *v23;
      *(_OWORD *)(a1 + 80) = v25;
    }
  }
  else if (v24)
  {
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v26 = a2[5];
    *char v22 = *v23;
    *(_OWORD *)(a1 + 80) = v26;
  }
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for TermOfAddress._TermOfAddress(void *a1, void *a2)
{
  if (a1[12] >= 0xFFFFFFFFuLL)
  {
    unint64_t v4 = a2[12];
    uint64_t v5 = a1[1];
    if (v4 >= 0xFFFFFFFF)
    {
      if (v5)
      {
        uint64_t v6 = a2[1];
        if (v6)
        {
          *a1 = *a2;
          a1[1] = v6;
          swift_bridgeObjectRelease();
          uint64_t v7 = a2[3];
          a1[2] = a2[2];
          a1[3] = v7;
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        outlined destroy of Locale.LanguageCode((uint64_t)a1);
      }
      long long v11 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v11;
LABEL_16:
      if (a1[5])
      {
        uint64_t v12 = a2[5];
        if (v12)
        {
          a1[4] = a2[4];
          a1[5] = v12;
          swift_bridgeObjectRelease();
          uint64_t v13 = a2[7];
          a1[6] = a2[6];
          a1[7] = v13;
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
        outlined destroy of Locale.Script((uint64_t)(a1 + 4));
      }
      long long v14 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v14;
LABEL_21:
      if (a1[9])
      {
        uint64_t v15 = a2[9];
        if (v15)
        {
          a1[8] = a2[8];
          a1[9] = v15;
          swift_bridgeObjectRelease();
          uint64_t v16 = a2[11];
          a1[10] = a2[10];
          a1[11] = v16;
          swift_bridgeObjectRelease();
LABEL_26:
          a1[12] = v4;
          swift_bridgeObjectRelease();
          return a1;
        }
        outlined destroy of Locale.Region((uint64_t)(a1 + 8));
      }
      long long v17 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v17;
      goto LABEL_26;
    }
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (a1[5])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (a1[9])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  long long v8 = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = v8;
  a1[12] = a2[12];
  long long v9 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v9;
  long long v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for TermOfAddress._TermOfAddress(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFC && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  unint64_t v3 = *(void *)(a1 + 96);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 3;
  if (v4 >= 5) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TermOfAddress._TermOfAddress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)(result + 96) = 0;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)(result + 96) = a2 + 3;
    }
  }
  return result;
}

uint64_t getEnumTag for TermOfAddress._TermOfAddress(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 96);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double destructiveInjectEnumTag for TermOfAddress._TermOfAddress(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 96) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for TermOfAddress._TermOfAddress()
{
  return &type metadata for TermOfAddress._TermOfAddress;
}

unsigned char *storeEnumTagSinglePayload for TermOfAddress.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *double result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181AAF478);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TermOfAddress.CodingKeys()
{
  return &type metadata for TermOfAddress.CodingKeys;
}

uint64_t outlined consume of TermOfAddress._TermOfAddress(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a13 >= 4)
  {
    outlined consume of Locale.LanguageCode?(result, a2);
    outlined consume of Locale.LanguageCode?(a5, a6);
    outlined consume of Locale.LanguageCode?(a9, a10);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of PresentationIntent.Kind(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2 || a3 == 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of TermOfAddress?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a13 != 4) {
    return outlined consume of TermOfAddress._TermOfAddress(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  }
  return result;
}

uint64_t outlined release of (TermOfAddress._TermOfAddress, TermOfAddress._TermOfAddress)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 144);
  uint64_t v8 = *(void *)(a1 + 152);
  uint64_t v9 = *(void *)(a1 + 160);
  long long v12 = *(_OWORD *)(a1 + 184);
  long long v13 = *(_OWORD *)(a1 + 168);
  unint64_t v10 = *(void *)(a1 + 200);
  outlined consume of TermOfAddress._TermOfAddress(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96));
  outlined consume of TermOfAddress._TermOfAddress(v2, v3, v4, v5, v6, v7, v8, v9, v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v10);
  return a1;
}

uint64_t KeyPathComparator.keyPath.getter()
{
  return swift_retain();
}

uint64_t KeyPathComparator.order.getter()
{
  unint64_t v1 = v0 + 1;
  uint64_t v2 = (uint64_t (*)(uint64_t *))v0[10];
  uint64_t v3 = v0[4];
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v1, v3);
  v8[3] = v3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v8);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v3 - 8) + 16))(boxed_opaque_existential_1, v4, v3);
  uint64_t v6 = v2(v8) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t KeyPathComparator.order.setter(char a1)
{
  void (*v3)(long long *__return_ptr, uint64_t, uint64_t);
  long long v5[2];

  uint64_t v2 = a1 & 1;
  uint64_t v3 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v1 + 64);
  swift_retain();
  v3(v5, v1 + 8, v2);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v1 + 8);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v5, v1 + 8);
}

void (*KeyPathComparator.order.modify(uint64_t **a1))(long long **a1)
{
  uint64_t v3 = (uint64_t *)malloc(0x38uLL);
  *a1 = v3;
  v3[5] = (uint64_t)v1;
  uint64_t v4 = v1 + 1;
  uint64_t v5 = (uint64_t (*)(uint64_t *))v1[10];
  uint64_t v6 = v1[4];
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(v4, v6);
  v3[3] = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v3);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(boxed_opaque_existential_1, v7, v6);
  LOBYTE(v6) = v5(v3) & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *((unsigned char *)v3 + 48) = v6;
  return KeyPathComparator.order.modify;
}

void KeyPathComparator.order.modify(long long **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *((void *)*a1 + 5);
  uint64_t v3 = *((unsigned __int8 *)*a1 + 48);
  uint64_t v4 = v2 + 8;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 64);
  swift_retain();
  v5(v4, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v4);
  outlined init with take of any PredicateExpression<Self.Output == B1>(v1, v4);

  free(v1);
}

uint64_t KeyPathComparator.init<A, B>(_:comparator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = a2;
  uint64_t v30 = a2;
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  long long v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = v12;
  long long v14 = (uint64_t *)(v13 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t v17 = v31;
  *(void *)a5 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v7, a3);
  uint64_t v18 = *(void *)(a4 + 8);
  *((void *)&v32 + 1) = a3;
  *(void *)&long long v33 = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v31);
  (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 32))(boxed_opaque_existential_1, v11, a3);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a3;
  *(void *)(v20 + 24) = a4;
  *((void *)&v33 + 1) = closure #1 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)&long long v34 = v20;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a3;
  *(void *)(v21 + 24) = a4;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(v22 + 24) = v21;
  *((void *)&v34 + 1) = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
  *(void *)&long long v35 = v22;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a3;
  *(void *)(v23 + 24) = a4;
  long long v24 = v34;
  *(_OWORD *)(a5 + 40) = v33;
  *(_OWORD *)(a5 + 56) = v24;
  long long v25 = v32;
  *(_OWORD *)(a5 + 8) = v31;
  *((void *)&v35 + 1) = closure #3 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(a5 + 88) = v23;
  *(_OWORD *)(a5 + 24) = v25;
  *(_OWORD *)(a5 + 72) = v35;
  swift_retain();
  uint64_t v26 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  LOBYTE(v7) = v27;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v30, a3);
  swift_release();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v15;
  *(void *)(result + 24) = v16;
  *(void *)(result + 32) = a3;
  *(void *)(result + 40) = a4;
  *(void *)(result + 48) = v26;
  *(unsigned char *)(result + 56) = v7 & 1;
  *(void *)(result + 64) = v17;
  *(void *)(a5 + 96) = partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:);
  *(void *)(a5 + 104) = result;
  return result;
}

uint64_t KeyPathComparator.init<A, B>(_:comparator:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = a4;
  uint64_t v9 = *a1;
  uint64_t v10 = type metadata accessor for OptionalComparator();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v29 - v12;
  uint64_t v36 = a1;
  long long v14 = (uint64_t *)(v9 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v15 = *v14;
  uint64_t v29 = v14[1];
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t v16 = v31;
  *(void *)a5 = v31;
  uint64_t v17 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v13, a2, a3);
  *((void *)&v32 + 1) = v10;
  *(void *)&long long v33 = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v31);
  (*(void (**)(uint64_t *, char *, uint64_t))(v11 + 32))(boxed_opaque_existential_1, v13, v10);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)(v19 + 24) = WitnessTable;
  *((void *)&v33 + 1) = closure #1 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)&long long v34 = v19;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v10;
  *(void *)(v21 + 24) = WitnessTable;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(v22 + 24) = v21;
  *((void *)&v34 + 1) = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
  *(void *)&long long v35 = v22;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v10;
  *(void *)(v23 + 24) = WitnessTable;
  long long v24 = v34;
  *(_OWORD *)(a5 + 40) = v33;
  *(_OWORD *)(a5 + 56) = v24;
  long long v25 = v32;
  *(_OWORD *)(a5 + 8) = v31;
  *((void *)&v35 + 1) = closure #3 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(a5 + 88) = v23;
  *(_OWORD *)(a5 + 24) = v25;
  *(_OWORD *)(a5 + 72) = v35;
  swift_retain();
  uint64_t v26 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  LOBYTE(v10) = v27;
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a2, a3);
  swift_release();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v15;
  *(void *)(result + 24) = *(void *)(v29 + 16);
  *(void *)(result + 32) = a3;
  *(void *)(result + 40) = v30;
  *(void *)(result + 48) = v26;
  *(unsigned char *)(result + 56) = v10 & 1;
  *(void *)(result + 64) = v16;
  *(void *)(a5 + 96) = partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:);
  *(void *)(a5 + 104) = result;
  return result;
}

uint64_t KeyPathComparator.init<A, B>(_:comparator:order:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void (*v30)(long long *__return_ptr, uint64_t, void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  uint64_t v41;

  uint64_t v8 = a2;
  long long v34 = a2;
  uint64_t v10 = *(void *)(a4 - 8);
  long long v35 = a3 & 1;
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v41 = v13;
  uint64_t v15 = (uint64_t *)(v14 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v16 = *v15;
  long long v33 = v15[1];
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t v17 = v36;
  *(void *)a6 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v8, a4);
  uint64_t v18 = *(void *)(a5 + 8);
  *((void *)&v37 + 1) = a4;
  *(void *)&Swift::String v38 = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v36);
  (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 32))(boxed_opaque_existential_1, v12, a4);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a4;
  *(void *)(v20 + 24) = a5;
  *((void *)&v38 + 1) = closure #1 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)&Swift::String v39 = v20;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a4;
  *(void *)(v21 + 24) = a5;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(v22 + 24) = v21;
  *((void *)&v39 + 1) = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
  *(void *)&Swift::String v40 = v22;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a4;
  *(void *)(v23 + 24) = a5;
  long long v24 = v39;
  *(_OWORD *)(a6 + 40) = v38;
  *(_OWORD *)(a6 + 56) = v24;
  long long v25 = v37;
  *(_OWORD *)(a6 + 8) = v36;
  *((void *)&v40 + 1) = closure #3 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(a6 + 88) = v23;
  *(_OWORD *)(a6 + 24) = v25;
  *(_OWORD *)(a6 + 72) = v40;
  swift_retain();
  uint64_t v26 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  LOBYTE(v8) = v27;
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = v33;
  *(void *)(v28 + 16) = v16;
  *(void *)(v28 + 24) = v29;
  *(void *)(v28 + 32) = a4;
  *(void *)(v28 + 40) = a5;
  *(void *)(v28 + 48) = v26;
  *(unsigned char *)(v28 + 56) = v8 & 1;
  *(void *)(v28 + 64) = v17;
  *(void *)(a6 + 96) = partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:);
  *(void *)(a6 + 104) = v28;
  uint64_t v30 = *(void (**)(long long *__return_ptr, uint64_t, void))(a6 + 64);
  swift_retain();
  swift_retain();
  v30(&v36, a6 + 8, v35);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a6 + 8);
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v36, a6 + 8);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v34, a4);
}

uint64_t KeyPathComparator.init<A, B>(_:comparator:order:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void (*v30)(long long *__return_ptr, uint64_t, void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  void *v41;

  long long v33 = a2;
  long long v34 = a5;
  long long v35 = a3 & 1;
  uint64_t v10 = *a1;
  uint64_t v11 = type metadata accessor for OptionalComparator();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v32 - v13;
  id v41 = a1;
  uint64_t v15 = (uint64_t *)(v10 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v16 = *v15;
  long long v32 = v15[1];
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t v17 = v36;
  *(void *)a6 = v36;
  uint64_t v18 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v14, a2, a4);
  *((void *)&v37 + 1) = v11;
  *(void *)&Swift::String v38 = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v36);
  (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v14, v11);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v11;
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)(v20 + 24) = WitnessTable;
  *((void *)&v38 + 1) = closure #1 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)&Swift::String v39 = v20;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v11;
  *(void *)(v22 + 24) = WitnessTable;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(v23 + 24) = v22;
  *((void *)&v39 + 1) = partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable);
  *(void *)&Swift::String v40 = v23;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v11;
  *(void *)(v24 + 24) = WitnessTable;
  long long v25 = v39;
  *(_OWORD *)(a6 + 40) = v38;
  *(_OWORD *)(a6 + 56) = v25;
  long long v26 = v37;
  *(_OWORD *)(a6 + 8) = v36;
  *((void *)&v40 + 1) = closure #3 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(a6 + 88) = v24;
  *(_OWORD *)(a6 + 24) = v26;
  *(_OWORD *)(a6 + 72) = v40;
  swift_retain();
  uint64_t v27 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  LOBYTE(v22) = v28;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v16;
  *(void *)(v29 + 24) = *(void *)(v32 + 16);
  *(void *)(v29 + 32) = a4;
  *(void *)(v29 + 40) = v34;
  *(void *)(v29 + 48) = v27;
  *(unsigned char *)(v29 + 56) = v22 & 1;
  *(void *)(v29 + 64) = v17;
  *(void *)(a6 + 96) = partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:);
  *(void *)(a6 + 104) = v29;
  uint64_t v30 = *(void (**)(long long *__return_ptr, uint64_t, void))(a6 + 64);
  swift_retain();
  swift_retain();
  v30(&v36, a6 + 8, v35);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a6 + 8);
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v36, a6 + 8);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v33, a4);
}

uint64_t closure #1 in KeyPathComparator.init<A>(_:order:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  a5[3] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  if (a3) {
    return swift_getAtKeyPath();
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16);

  return v10(boxed_opaque_existential_1, a1 + a2, a4);
}

uint64_t closure #1 in KeyPathComparator.init<A>(_:order:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Optional();
  a4[3] = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  if (a3) {
    return swift_getAtKeyPath();
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);

  return v10(boxed_opaque_existential_1, a1 + a2, v8);
}

uint64_t KeyPathComparator.compare(_:_:)(uint64_t a1, uint64_t a2)
{
  void (*v4)(void *__return_ptr);
  uint64_t (*v5)(uint64_t *, void *, void *);
  uint64_t v6;
  void *v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  uint64_t v11[4];
  void v12[4];
  void v13[4];

  uint64_t v4 = (void (*)(void *__return_ptr))v2[12];
  v4(v13);
  ((void (*)(void *__return_ptr, uint64_t))v4)(v12, a2);
  uint64_t v5 = (uint64_t (*)(uint64_t *, void *, void *))v2[6];
  uint64_t v6 = v2[4];
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(v2 + 1, v6);
  v11[3] = v6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(boxed_opaque_existential_1, v7, v6);
  uint64_t v9 = v5(v11, v13, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  return v9;
}

uint64_t static KeyPathComparator.== infix(_:_:)(void *a1, void *a2)
{
  type metadata accessor for AnyKeyPath();
  char v4 = MEMORY[0x185302EC0](*a1, *a2);
  uint64_t v5 = type metadata accessor for KeyPathComparator();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t *, void *, uint64_t))(v6 + 16);
  v7((uint64_t *)v19, a1, v5);
  v7(&v16, a2, v5);
  if (v4)
  {
    uint64_t v8 = v21;
    uint64_t v9 = v22;
    uint64_t v10 = __swift_project_boxed_opaque_existential_1(v20, v21);
    uint64_t v11 = v18;
    uint64_t v12 = __swift_project_boxed_opaque_existential_1(v17, v18);
    char v13 = compare #1 <A, B>(_:_:) in static AnySortComparator.== infix(_:_:)((uint64_t)v10, (uint64_t)v12, v8, v11, *(void *)(v9 + 8));
  }
  else
  {
    char v13 = 0;
  }
  uint64_t v14 = *(void (**)(uint64_t *, uint64_t))(v6 + 8);
  v14(&v16, v5);
  v14((uint64_t *)v19, v5);
  return v13 & 1;
}

uint64_t KeyPathComparator.hash(into:)()
{
  type metadata accessor for PartialKeyPath();
  dispatch thunk of Hashable.hash(into:)();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 8), *(void *)(v0 + 32));
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int KeyPathComparator.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for PartialKeyPath();
  dispatch thunk of Hashable.hash(into:)();
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 8), *(void *)(v0 + 32));
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for SortComparator.order.setter in conformance KeyPathComparator<A>(char a1)
{
  return KeyPathComparator.order.setter(a1 & 1);
}

void (*protocol witness for SortComparator.order.modify in conformance KeyPathComparator<A>(uint64_t ***a1))(void *a1)
{
  uint64_t v2 = (uint64_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t *)KeyPathComparator.order.modify(v2);
  return protocol witness for SortComparator.order.modify in conformance KeyPathComparator<A>;
}

void protocol witness for SortComparator.order.modify in conformance KeyPathComparator<A>(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance KeyPathComparator<A>()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance KeyPathComparator<A>(void *a1, void *a2)
{
  return static KeyPathComparator.== infix(_:_:)(a1, a2);
}

uint64_t specialized closure #1 in AnySortComparator.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of Any(a1, (uint64_t)v63);
  swift_dynamicCast();
  outlined init with copy of Any(a2, (uint64_t)v59);
  swift_dynamicCast();
  outlined init with copy of Any(a3, (uint64_t)v58);
  swift_dynamicCast();
  unint64_t v5 = v60;
  int v6 = v62;
  if (v61 != 1)
  {
    swift_bridgeObjectRetain();
    unint64_t v20 = Substring.init<A>(_:)();
    unint64_t v22 = v21;
    unint64_t v24 = v23;
    unint64_t v56 = v25;
    swift_bridgeObjectRetain();
    unint64_t v26 = Substring.init<A>(_:)();
    unint64_t v30 = v27;
    unint64_t v31 = v28;
    unint64_t v32 = v29;
    if (!v5)
    {
      if (v24 == v28 && v56 == v29 && v20 >> 16 == v26 >> 16 && v22 >> 16 == v27 >> 16)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        uint64_t v35 = 1;
        if (_stringCompareInternal(_:_:_:_:expecting:)())
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v6) {
            uint64_t v19 = 1;
          }
          else {
            uint64_t v19 = -1;
          }
LABEL_57:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v19;
        }
        char v45 = _stringCompareInternal(_:_:_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v45)
        {
LABEL_49:
          uint64_t v46 = 1;
          if (v35 == 1) {
            uint64_t v47 = -1;
          }
          else {
            uint64_t v47 = v35;
          }
          if (v35 != -1) {
            uint64_t v46 = v47;
          }
          if (v6) {
            uint64_t v19 = v46;
          }
          else {
            uint64_t v19 = v35;
          }
          goto LABEL_57;
        }
      }
      uint64_t v35 = 0;
      goto LABEL_49;
    }
    unint64_t v52 = v26;
    unint64_t v54 = v20;
    if ((v5 & 2) != 0)
    {
      unint64_t v51 = v27;
      unint64_t v36 = v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v49 = v24;
      unint64_t v34 = v20;
      unint64_t v30 = v51;
      unint64_t v33 = v22;
      uint64_t v35 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v36, v51, v31, v32, (v5 >> 8) & 1, (v5 >> 7) & 1, v5 & 1, (v5 >> 6) & 1, (v5 & 0x200) != 0, v54, v22, v49, v56);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v35) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v48 = v24;
      unint64_t v33 = v22;
      unint64_t v34 = v54;
      uint64_t v35 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v26, v27, v28, v29, (v5 >> 8) & 1, (v5 >> 7) & 1, v5 & 1, (v5 >> 6) & 1, (v5 & 0x200) != 0, v54, v22, v48, v56);
      if (v35)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }
    }
    if ((v5 & 0x200) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v35 = 0;
      goto LABEL_49;
    }
    unint64_t v57 = v34;
    unint64_t v37 = v34;
    unint64_t v38 = v33 >> 14;
    unint64_t v39 = v37 >> 14;
    if (v37 >> 14 >= v33 >> 14 || v30 >> 14 <= v52 >> 14)
    {
LABEL_44:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v39 == v38)
      {
        if ((v52 ^ v30) >> 14) {
          uint64_t v35 = -1;
        }
        else {
          uint64_t v35 = 0;
        }
      }
      else
      {
        uint64_t v35 = 1;
      }
      goto LABEL_49;
    }
    unint64_t v50 = v30 >> 14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unsigned int v40 = Substring.UnicodeScalarView.subscript.getter();
    unsigned int v41 = Substring.UnicodeScalarView.subscript.getter();
    if (v40 == v41)
    {
      Substring.UnicodeScalarView.formIndex(after:)();
      Substring.UnicodeScalarView.formIndex(after:)();
      unint64_t v39 = v57 >> 14;
      if (v57 >> 14 >= v38 || v50 <= v52 >> 14)
      {
LABEL_43:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_44;
      }
      unsigned int v40 = Substring.UnicodeScalarView.subscript.getter();
      unsigned int v41 = Substring.UnicodeScalarView.subscript.getter();
      if (v40 == v41)
      {
        while (1)
        {
          Substring.UnicodeScalarView.formIndex(after:)();
          Substring.UnicodeScalarView.formIndex(after:)();
          unint64_t v39 = v57 >> 14;
          unint64_t v38 = v33 >> 14;
          if (v57 >> 14 >= v33 >> 14 || v50 <= v52 >> 14) {
            goto LABEL_43;
          }
          unsigned int v42 = Substring.UnicodeScalarView.subscript.getter();
          unsigned int v43 = Substring.UnicodeScalarView.subscript.getter();
          if (v42 != v43)
          {
            unsigned int v44 = v43;
            unsigned int v40 = v42;
            goto LABEL_41;
          }
        }
      }
    }
    unsigned int v44 = v41;
LABEL_41:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (v40 >= v44) {
      uint64_t v35 = v44 < v40;
    }
    else {
      uint64_t v35 = -1;
    }
    goto LABEL_49;
  }
  int v53 = v62;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v8 = v7;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  uint64_t v9 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v10 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  if (!__OFSUB__(v12, result))
  {
    uint64_t v13 = result;
    uint64_t v55 = v12 - result;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v15 = v5;
    uint64_t v16 = (void *)v9;
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 488);
    swift_unknownObjectRetain();
    uint64_t v18 = (void *)v17(ObjectType, v8);
    swift_unknownObjectRelease();
    uint64_t v19 = (uint64_t)objc_msgSend(v16, sel_compare_options_range_locale_, v10, v15, v13, v55, v18);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    if (v53)
    {
      if (v19 == -1)
      {
        uint64_t v19 = 1;
      }
      else if (v19 == 1)
      {
        uint64_t v19 = -1;
      }
    }
    goto LABEL_57;
  }
  __break(1u);
  return result;
}

{
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t (*v16)(uint64_t, uint64_t);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int16 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  int v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  char v56[32];
  uint64_t v57;
  char v58[32];
  unint64_t v59;
  char v60;
  unsigned __int8 v61;
  char v62[40];

  outlined init with copy of Any(a1, (uint64_t)v62);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptionalComparator<String.StandardComparator>);
  swift_dynamicCast();
  outlined init with copy of Any(a2, (uint64_t)v58);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  swift_dynamicCast();
  outlined init with copy of Any(a3, (uint64_t)v56);
  swift_dynamicCast();
  unint64_t v5 = v61;
  if (!v57)
  {
    uint64_t v19 = 1;
    if (!v61) {
      uint64_t v19 = -1;
    }
    if (v55) {
      uint64_t v18 = v19;
    }
    else {
      uint64_t v18 = 0;
    }
    goto LABEL_51;
  }
  if (!v55)
  {
    if (v61) {
      uint64_t v18 = -1;
    }
    else {
      uint64_t v18 = 1;
    }
    goto LABEL_51;
  }
  int v6 = v59;
  if ((v60 & 1) == 0)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v20 = Substring.init<A>(_:)();
    unint64_t v22 = v21;
    unint64_t v24 = v23;
    unint64_t v51 = v25;
    swift_bridgeObjectRetain();
    unint64_t v26 = Substring.init<A>(_:)();
    unint64_t v30 = v27;
    unint64_t v31 = v29;
    if (!v6)
    {
      if (v24 == v28 && v51 == v29 && v20 >> 16 == v26 >> 16 && v22 >> 16 == v27 >> 16)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        uint64_t v18 = 1;
        if (_stringCompareInternal(_:_:_:_:expecting:)())
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v18 = -1;
          goto LABEL_47;
        }
        unsigned int v42 = _stringCompareInternal(_:_:_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v42)
        {
LABEL_47:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v5) {
            goto LABEL_51;
          }
          if (v18 == -1) {
            goto LABEL_9;
          }
          goto LABEL_49;
        }
      }
      uint64_t v18 = 0;
      goto LABEL_47;
    }
    unint64_t v49 = v26;
    if ((v6 & 2) != 0)
    {
      char v45 = (v6 & 0x200) != 0;
      uint64_t v47 = (v6 >> 6) & 1;
      uint64_t v46 = v6 & 1;
      int v53 = v5;
      unsigned int v43 = (v6 >> 7) & 1;
      unsigned int v44 = (v6 >> 8) & 1;
      unint64_t v32 = v26;
      unint64_t v33 = v6;
      int v6 = v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v34 = v6;
      LOWORD(v6) = v33;
      unint64_t v5 = v53;
      uint64_t v18 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v32, v30, v34, v31, v44, v43, v46, v47, v45, v20, v22, v24, v51);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v18 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)(v26, v27, v28, v29, (v6 >> 8) & 1, (v6 >> 7) & 1, v6 & 1, (v6 >> 6) & 1, (v6 & 0x200) != 0, v20, v22, v24, v51);
      if (v18)
      {
LABEL_21:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_47;
      }
    }
    if ((v6 & 0x200) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v18 = 0;
      goto LABEL_47;
    }
    uint64_t v35 = v22 >> 14;
    unint64_t v36 = v20 >> 14;
    if (v20 >> 14 >= v22 >> 14 || v30 >> 14 <= v49 >> 14)
    {
LABEL_57:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v36 == v35)
      {
        if ((v49 ^ v30) >> 14) {
          uint64_t v18 = -1;
        }
        else {
          uint64_t v18 = 0;
        }
      }
      else
      {
        uint64_t v18 = 1;
      }
      goto LABEL_47;
    }
    unint64_t v54 = v30 >> 14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v37 = Substring.UnicodeScalarView.subscript.getter();
    unint64_t v38 = Substring.UnicodeScalarView.subscript.getter();
    if (v37 != v38)
    {
      unsigned int v41 = v38;
      goto LABEL_53;
    }
    Substring.UnicodeScalarView.formIndex(after:)();
    Substring.UnicodeScalarView.formIndex(after:)();
    unint64_t v36 = v20 >> 14;
    if (v20 >> 14 < v35 && v54 > v49 >> 14)
    {
      unint64_t v39 = Substring.UnicodeScalarView.subscript.getter();
      unsigned int v40 = Substring.UnicodeScalarView.subscript.getter();
      if (v39 != v40)
      {
LABEL_62:
        unsigned int v41 = v40;
        unint64_t v37 = v39;
LABEL_53:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        if (v37 >= v41) {
          uint64_t v18 = v41 < v37;
        }
        else {
          uint64_t v18 = -1;
        }
        goto LABEL_47;
      }
      Substring.UnicodeScalarView.formIndex(after:)();
      Substring.UnicodeScalarView.formIndex(after:)();
      unint64_t v36 = v20 >> 14;
      if (v20 >> 14 < v35 && v54 > v49 >> 14)
      {
        unint64_t v39 = Substring.UnicodeScalarView.subscript.getter();
        unsigned int v40 = Substring.UnicodeScalarView.subscript.getter();
        if (v39 == v40)
        {
          while (1)
          {
            Substring.UnicodeScalarView.formIndex(after:)();
            Substring.UnicodeScalarView.formIndex(after:)();
            unint64_t v36 = v20 >> 14;
            if (v20 >> 14 >= v35 || v54 <= v49 >> 14) {
              goto LABEL_56;
            }
            unint64_t v37 = Substring.UnicodeScalarView.subscript.getter();
            unsigned int v41 = Substring.UnicodeScalarView.subscript.getter();
            if (v37 != v41) {
              goto LABEL_53;
            }
          }
        }
        goto LABEL_62;
      }
    }
LABEL_56:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  unint64_t v50 = v59;
  unint64_t v52 = v61;
  uint64_t v7 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v9 = v8;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  StringProtocol._ephemeralString.getter();
  uint64_t v48 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v10 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v13 = v12 - result;
  if (!__OFSUB__(v12, result))
  {
    uint64_t v14 = result;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 488);
    swift_unknownObjectRetain();
    uint64_t v17 = (void *)v16(ObjectType, v9);
    swift_unknownObjectRelease();
    uint64_t v18 = (uint64_t)objc_msgSend(v48, sel_compare_options_range_locale_, v10, v50, v14, v13, v17);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v52)
    {
LABEL_51:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v18;
    }
    if (v18 == -1)
    {
LABEL_9:
      uint64_t v18 = 1;
      goto LABEL_51;
    }
LABEL_49:
    if (v18 == 1) {
      uint64_t v18 = -1;
    }
    goto LABEL_51;
  }
  __break(1u);
  return result;
}

uint64_t sub_181AB20BC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in AnySortComparator.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in AnySortComparator.init<A>(_:)(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_181AB20D4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #2 in AnySortComparator.init<A>(_:)(uint64_t *a1, char a2)
{
  return closure #2 in AnySortComparator.init<A>(_:)(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = a2 & 1;
  uint64_t v7 = MEMORY[0x1E4FBB968];
  a4[3] = MEMORY[0x1E4FBB960];
  a4[4] = v7;
  *a4 = swift_allocObject();
  return a3(a1, v6);
}

uint64_t specialized closure #3 in AnySortComparator.init<A>(_:)(uint64_t a1)
{
  outlined init with copy of Any(a1, (uint64_t)v3);
  swift_dynamicCast();
  return v2;
}

{
  unsigned __int8 v2;
  unsigned char v3[32];

  outlined init with copy of Any(a1, (uint64_t)v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OptionalComparator<String.StandardComparator>);
  swift_dynamicCast();
  return v2;
}

uint64_t sub_181AB230C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #3 in AnySortComparator.init<A>(_:)(uint64_t a1)
{
  return closure #3 in AnySortComparator.init<A>(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_181AB2324()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in KeyPathComparator.init<A>(_:order:)(uint64_t a1)
{
  return partial apply for closure #1 in KeyPathComparator.init<A>(_:order:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in KeyPathComparator.init<A>(_:order:));
}

{
  return partial apply for closure #1 in KeyPathComparator.init<A>(_:order:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in KeyPathComparator.init<A>(_:order:));
}

uint64_t sub_181AB2374()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181AB2384()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181AB2394()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181AB23CC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in KeyPathComparator.init<A>(_:order:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, *(void *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

unint64_t lazy protocol witness table accessor for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>;
  if (!lazy protocol witness table cache variable for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for OptionalComparator<String.StandardComparator>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OptionalComparator<String.StandardComparator> and conformance OptionalComparator<A>);
  }
  return result;
}

uint64_t sub_181AB246C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181AB247C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181AB248C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:)(uint64_t a1)
{
  return partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))closure #1 in KeyPathComparator.init<A>(_:order:));
}

{
  return partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))closure #1 in KeyPathComparator.init<A>(_:order:));
}

uint64_t sub_181AB24B4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181AB24C4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181AB24D4()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181AB24FC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181AB250C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181AB251C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181AB252C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181AB253C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a2 & 1;
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
  uint64_t v7 = MEMORY[0x1E4FBB968];
  a3[3] = MEMORY[0x1E4FBB960];
  a3[4] = v7;
  *a3 = swift_allocObject();
  return v6(a1, v5);
}

uint64_t sub_181AB25C8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181AB25D8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t partial apply for closure #1 in KeyPathComparator.init<A, B>(_:comparator:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void))
{
  return a2(a1, *(void *)(v2 + 48), *(unsigned __int8 *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_181AB2644@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = KeyPathComparator.order.getter();
  *a1 = result;
  return result;
}

uint64_t sub_181AB2670(char *a1)
{
  return KeyPathComparator.order.setter(*a1);
}

uint64_t sub_181AB2698()
{
  return 8;
}

void *sub_181AB26A4(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t initializeWithCopy for KeyPathComparator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a2 + 8;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = v8;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for KeyPathComparator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  uint64_t v4 = a2[7];
  a1[6] = a2[6];
  a1[7] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[9];
  a1[8] = a2[8];
  a1[9] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[11];
  a1[10] = a2[10];
  a1[11] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = a2[13];
  a1[12] = a2[12];
  a1[13] = v7;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for KeyPathComparator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  return a1;
}

uint64_t sub_181AB2B20()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return MEMORY[0x1F4186498](v0, 56, 7);
}

id NSAttributedString.init(contentsOf:options:baseURL:)(void **a1, char *a2, void **a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  char v4 = *a2;
  char v5 = a2[1];
  char v6 = a2[2];
  uint64_t v7 = (void *)*((void *)a2 + 1);
  uint64_t v8 = (void *)*((void *)a2 + 2);
  char v9 = a2[24];
  uint64_t v10 = *a3;
  swift_release();
  swift_release();
  type metadata accessor for NSAttributedStringMarkdownParsingOptions();
  LOBYTE(v18[0]) = v4;
  BYTE1(v18[0]) = v5;
  BYTE2(v18[0]) = v6;
  v18[1] = v7;
  void v18[2] = v8;
  char v19 = v9;
  id v11 = NSAttributedStringMarkdownParsingOptions.init(_:)((unsigned __int8 *)v18);
  if (v10)
  {
    id v12 = v10;
    outlined consume of URL?(v10);
  }
  else
  {
    id v12 = 0;
  }
  id v13 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v18[0] = 0;
  id v14 = objc_msgSend(v13, sel_initWithContentsOfMarkdownFileAtURL_options_baseURL_error_, v3, v11, v12, v18);

  if (v14)
  {
    id v15 = v18[0];
  }
  else
  {
    if (v18[0])
    {
      v18[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v16 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v14;
}

id NSAttributedString.init(markdown:options:baseURL:)(uint64_t a1, uint64_t a2, char *a3, void **a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  char v4 = *a3;
  char v5 = a3[1];
  char v6 = a3[2];
  uint64_t v7 = (void *)*((void *)a3 + 1);
  uint64_t v8 = (void *)*((void *)a3 + 2);
  char v9 = a3[24];
  uint64_t v10 = *a4;
  uint64_t v11 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  type metadata accessor for NSAttributedStringMarkdownParsingOptions();
  LOBYTE(v19[0]) = v4;
  BYTE1(v19[0]) = v5;
  BYTE2(v19[0]) = v6;
  v19[1] = v7;
  v19[2] = v8;
  char v20 = v9;
  id v12 = NSAttributedStringMarkdownParsingOptions.init(_:)((unsigned __int8 *)v19);
  if (v10)
  {
    id v13 = v10;
    outlined consume of URL?(v10);
  }
  else
  {
    id v13 = 0;
  }
  id v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v19[0] = 0;
  id v15 = objc_msgSend(v14, sel_initWithMarkdownString_options_baseURL_error_, v11, v12, v13, v19);
  swift_unknownObjectRelease();

  if (v15)
  {
    id v16 = v19[0];
  }
  else
  {
    if (v19[0])
    {
      v19[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v17 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v15;
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.init(root:other:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return PredicateExpressions.StringLocalizedStandardContains.init(root:other:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.StringLocalizedStandardContains);
}

BOOL PredicateExpressions.StringLocalizedStandardContains.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v5 = a2[5];
  uint64_t v28 = a2[3];
  uint64_t v29 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v24 - v6;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[2];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(v10 - 8);
  double v11 = MEMORY[0x1F4188790](v10);
  id v13 = (char *)&v24 - v12;
  uint64_t v14 = *a1;
  v30[0] = v14;
  id v15 = v31;
  (*(void (**)(void *, uint64_t, uint64_t, double))(v8 + 16))(v30, v9, v8, v11);
  if (!v15)
  {
    unint64_t v31 = v13;
    uint64_t v17 = v26;
    uint64_t v16 = AssociatedTypeWitness;
    v30[0] = v14;
    (*(void (**)(void *, uint64_t))(v29 + 16))(v30, v28);
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    v30[0] = static LocaleCache.cache;
    v30[0] = LocaleCache.current.getter();
    v30[1] = v19;
    uint64_t v20 = v16;
    uint64_t v21 = v16;
    unint64_t v22 = v31;
    StringProtocol.range<A>(of:options:range:locale:)(v7, 0x81uLL, 0, 0, 1, v30, v10, v21, a2[6], a2[7]);
    BOOL v2 = (v23 & 1) == 0;
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v20);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v10);
  }
  return v2;
}

BOOL protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.StringLocalizedStandardContains<A, B>@<W0>(uint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  BOOL result = PredicateExpressions.StringLocalizedStandardContains.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t static PredicateExpressions.build_localizedStandardContains<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return static PredicateExpressions.build_localizedStandardContains<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.StringLocalizedStandardContains);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.description.getter(int a1)
{
  return PredicateExpressions.StringLocalizedStandardContains.description.getter(a1, 52, 0xD000000000000026, (void *)0x80000001823A93B0);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.debugString(state:)(a1, a2, a3, a4, 32, 0xD00000000000001BLL, (void *)0x80000001823A93E0);
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.StringLocalizedStandardContains<>.encode(to:)(void *a1)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.encode(to:)(a1);
}

{
  uint64_t v1;
  unsigned char v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.init(from:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v5;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void, void *, double);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void v39[3];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  unint64_t v36 = a4;
  unint64_t v38 = a3;
  unint64_t v34 = a5;
  unint64_t v33 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  unint64_t v37 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v43 = v14;
  v39[0] = v14;
  v39[1] = v15;
  v39[2] = v16;
  unsigned int v40 = v17;
  unsigned int v41 = v19;
  unsigned int v42 = v18;
  uint64_t v21 = v20(0, v39, v12);
  unint64_t v32 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  char v23 = (char *)&v29 - v22;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v5) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  unint64_t v30 = v23;
  unint64_t v31 = a1;
  uint64_t v29 = v21;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v39, v40);
  uint64_t v24 = v37;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v25 = v30;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v30, v24, v43);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v39, v40);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v26 = v29;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v25[*(int *)(v29 + 68)], v9, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  unint64_t v27 = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v34, v25, v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v25, v26);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.StringLocalizedStandardContains<>.init(from:), a5, a6);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.other.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

uint64_t PredicateExpressions.StringLocalizedCompare.init(root:other:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return PredicateExpressions.StringLocalizedStandardContains.init(root:other:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.StringLocalizedCompare);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.init(root:other:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t (*a10)(void, void *))
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a9, a1);
  v20[0] = a3;
  v20[1] = a4;
  v20[2] = a5;
  void v20[3] = a6;
  v20[4] = a7;
  v20[5] = a8;
  uint64_t v18 = a10(0, v20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a9 + *(int *)(v18 + 68), a2, a4);
}

id PredicateExpressions.StringLocalizedCompare.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v5 = a2[5];
  uint64_t v23 = a2[3];
  uint64_t v24 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v25 = (char *)&v21 - v7;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[2];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = *a1;
  uint64_t v27 = v15;
  uint64_t v16 = v26;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, double))(v8 + 16))(&v27, v9, v8, v12);
  if (!v16)
  {
    uint64_t v26 = v11;
    uint64_t v27 = v15;
    (*(void (**)(uint64_t *, uint64_t))(v24 + 16))(&v27, v23);
    StringProtocol._ephemeralString.getter();
    uint64_t v18 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v21 = AssociatedTypeWitness;
    uint64_t v19 = v25;
    StringProtocol._ephemeralString.getter();
    uint64_t v20 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v2 = objc_msgSend(v18, sel_localizedCompare_, v20);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v10);
  }
  return v2;
}

id protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.StringLocalizedCompare<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  id result = PredicateExpressions.StringLocalizedCompare.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t static PredicateExpressions.build_localizedCompare<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return static PredicateExpressions.build_localizedStandardContains<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.StringLocalizedCompare);
}

uint64_t static PredicateExpressions.build_localizedStandardContains<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t (*a10)(void, void *))
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a9, a1);
  v20[0] = a3;
  v20[1] = a4;
  v20[2] = a5;
  void v20[3] = a6;
  v20[4] = a7;
  v20[5] = a8;
  uint64_t v18 = a10(0, v20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a9 + *(int *)(v18 + 68), a2, a4);
}

uint64_t PredicateExpressions.StringLocalizedCompare.description.getter(int a1)
{
  return PredicateExpressions.StringLocalizedStandardContains.description.getter(a1, 43, 0xD00000000000001DLL, (void *)0x80000001823A9400);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains.description.getter(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(a2);
  v6._uint64_t countAndFlagsBits = a3;
  v6._unint64_t object = a4;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._uint64_t countAndFlagsBits = 0x3A726568746F202CLL;
  v7._unint64_t object = (void *)0xE900000000000020;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._uint64_t countAndFlagsBits = 41;
  v8._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t PredicateExpressions.StringLocalizedCompare<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.debugString(state:)(a1, a2, a3, a4, 23, 0xD000000000000012, (void *)0x80000001823A9420);
}

uint64_t PredicateExpressions.StringLocalizedStandardContains<>.debugString(state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, uint64_t a6, void *a7)
{
  _StringGuts.grow(_:)(a5);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t))(a3 + 16))(a1, *(void *)(a2 + 16), a3);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = a6;
  v14._unint64_t object = a7;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, void, uint64_t))(a4 + 16))(a1, *(void *)(a2 + 24), a4);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 41;
  v16._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return v13;
}

uint64_t protocol witness for DebugStringConvertiblePredicateExpression.debugString(state:) in conformance <> PredicateExpressions.StringLocalizedCompare<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PredicateExpressions.StringLocalizedCompare<>.debugString(state:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t PredicateExpressions.StringLocalizedCompare<>.encode(to:)(void *a1)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.StringLocalizedCompare<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.StringLocalizedStandardContains<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringLocalizedCompare<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.StringLocalizedCompare<>.init(from:), a5, a6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, uint64_t, void, void), uint64_t a5, uint64_t a6)
{
  return a4(a1, a2[2], a2[3], a2[4], *(void *)(a3 - 8), a6, a2[5], *(void *)(a3 - 24));
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.StringLocalizedCompare<A, B>(void *a1)
{
  return PredicateExpressions.StringLocalizedCompare<>.encode(to:)(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedCompare<A, B>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.Conjunction<A, B>(a1);
}

{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.StringLocalizedStandardContains<A, B>(a1);
}

uint64_t assignWithCopy for PredicateExpressions.StringLocalizedStandardContains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.StringLocalizedStandardContains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 32) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.StringLocalizedStandardContains(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 24) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.StringLocalizedStandardContains(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.StringLocalizedStandardContains(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x181AB4798);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.StringLocalizedStandardContains<A, B>(void *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.StringLocalizedCompare<A, B>(a1);
}

uint64_t PredicateExpressions.DictionaryKeySubscript.key.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

uint64_t PredicateExpressions.DictionaryKeySubscript.init(wrapped:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.DictionaryKeySubscript();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 68), a2, a4);
}

void *PredicateExpressions.DictionaryKeySubscript.evaluate(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = a3;
  uint64_t v6 = a2[6];
  uint64_t v7 = a2[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  double v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = *a1;
  uint64_t v18 = *a1;
  id result = (*(void *(**)(uint64_t *__return_ptr, uint64_t *, void, double))(a2[5] + 16))(&v19, &v18, a2[2], v9);
  if (!v3)
  {
    uint64_t v14 = v19;
    uint64_t v18 = v12;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(&v18, v7, v6);
    MEMORY[0x185301C20](v11, v14, AssociatedTypeWitness, a2[4], a2[7]);
    swift_bridgeObjectRelease();
    return (void *)(*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v11, AssociatedTypeWitness);
  }
  return result;
}

void *protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.DictionaryKeySubscript<A, B, C>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.DictionaryKeySubscript.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_subscript<A, B, C>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.DictionaryKeySubscript();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5 + *(int *)(v8 + 68), a2, a4);
}

uint64_t PredicateExpressions.DictionaryKeySubscript.description.getter()
{
  _StringGuts.grow(_:)(44);
  v0._unint64_t object = (void *)0x80000001823A9440;
  v0._uint64_t countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x203A79656B202CLL;
  v1._unint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41;
  v2._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.DictionaryKeySubscript<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t PredicateExpressions.DictionaryKeySubscript<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v32 = a4;
  uint64_t v31 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v34 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = v12;
  v36[0] = v12;
  v36[1] = v13;
  _OWORD v36[2] = v14;
  uint64_t v37 = v15;
  uint64_t v38 = v16;
  uint64_t v39 = v17;
  uint64_t v18 = type metadata accessor for PredicateExpressions.DictionaryKeySubscript();
  uint64_t v30 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  unsigned int v20 = (char *)&v26 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v4) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v28 = v20;
  uint64_t v29 = a1;
  uint64_t v27 = v18;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v36, v37);
  int v21 = v34;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  unint64_t v22 = v28;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v28, v21, v40);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v36, v37);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v23 = v27;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(&v22[*(int *)(v27 + 68)], v8, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  uint64_t v24 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v32, v22, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v22, v23);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.DictionaryKeySubscript<A, B, C>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.DictionaryKeySubscript<>.init(from:)(a1, *(void *)(a2 + 24), *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.DictionaryKeySubscript<A, B, C>(void *a1)
{
  return PredicateExpressions.DictionaryKeySubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.DictionaryKeyDefaultValueSubscript.key.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 76));
}

uint64_t PredicateExpressions.DictionaryKeyDefaultValueSubscript.default.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 32) - 8) + 16))(a2, v2 + *(int *)(a1 + 80));
}

uint64_t PredicateExpressions.DictionaryKeyDefaultValueSubscript.init(wrapped:key:default:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t v12 = type metadata accessor for PredicateExpressions.DictionaryKeyDefaultValueSubscript();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7 + *(int *)(v12 + 76), a2, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7 + *(int *)(v12 + 80), a3, a6);
}

void *PredicateExpressions.DictionaryKeyDefaultValueSubscript.evaluate(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  void *(*v20)(uint64_t *__return_ptr, uint64_t *, uint64_t, double);
  uint64_t v21;
  char *v22;
  void *result;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;

  uint64_t v37 = a3;
  uint64_t v6 = a2[4];
  uint64_t v33 = a2[7];
  unint64_t v34 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v31 = v8;
  uint64_t v32 = v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t v12 = a2[6];
  uint64_t v38 = a2[3];
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v35 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v39 = (char *)&v31 - v14;
  unint64_t v36 = *(void *)(AssociatedTypeWitness - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v31 - v17;
  uint64_t v19 = *a1;
  unsigned int v42 = *a1;
  unsigned int v20 = *(void *(**)(uint64_t *__return_ptr, uint64_t *, uint64_t, double))(a2[5] + 16);
  int v21 = a2[2];
  uint64_t v40 = v3;
  unint64_t v22 = v41;
  id result = v20(&v43, &v42, v21, v16);
  if (!v22)
  {
    unsigned int v41 = v18;
    unsigned int v42 = v19;
    uint64_t v24 = v43;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16))(&v42, v38, v12);
    uint64_t v38 = v19;
    uint64_t v25 = v39;
    MEMORY[0x185301C20](v39, v24, v13, AssociatedTypeWitness, a2[8]);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v13);
    uint64_t v26 = v36;
    uint64_t v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48))(v11, 1, AssociatedTypeWitness);
    uint64_t v28 = v37;
    if (v27 == 1)
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v31);
      unsigned int v43 = v38;
      return (void *)(*(uint64_t (**)(uint64_t *, uint64_t))(v33 + 16))(&v43, v34);
    }
    else
    {
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
      uint64_t v30 = v41;
      v29(v41, v11, AssociatedTypeWitness);
      return (void *)((uint64_t (*)(uint64_t, char *, uint64_t))v29)(v28, v30, AssociatedTypeWitness);
    }
  }
  return result;
}

void *protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.DictionaryKeyDefaultValueSubscript.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_subscript<A, B, C>(_:_:default:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a7, a1, a4);
  uint64_t v12 = type metadata accessor for PredicateExpressions.DictionaryKeyDefaultValueSubscript();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(a7 + *(int *)(v12 + 76), a2, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(a7 + *(int *)(v12 + 80), a3, a6);
}

uint64_t PredicateExpressions.DictionaryKeyDefaultValueSubscript.description.getter()
{
  _StringGuts.grow(_:)(74);
  v0._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v0._unint64_t object = (void *)0x80000001823A9470;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x203A79656B202CLL;
  v1._unint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._unint64_t object = (void *)0x80000001823A94A0;
  v2._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 41;
  v3._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0;
}

uint64_t PredicateExpressions.DictionaryKeyDefaultValueSubscript<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.DictionaryKeySubscript<A, B, C>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.DictionaryKeyDefaultValueSubscript<>.init(from:)(a1, a2[2], a2[3], a2[4], *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>(void *a1)
{
  return PredicateExpressions.DictionaryKeyDefaultValueSubscript<>.encode(to:)(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.DictionaryKeyDefaultValueSubscript<A, B, C>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.DictionaryKeySubscript(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.DictionaryKeySubscript(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x181AB60D8);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.DictionaryKeyDefaultValueSubscript(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3[2] - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = a3[4];
  uint64_t v8 = *(void *)(a3[3] - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9) & ~v9;
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v13 = *(void *)(v7 - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  unint64_t v16 = ((v12 + v14 + v11) & ~v14) + *(void *)(v13 + 64);
  uint64_t v17 = (*(unsigned char *)(v8 + 80) | *(unsigned char *)(v5 + 80) | *(unsigned char *)(v13 + 80));
  if (v17 <= 7
    && v16 <= 0x18
    && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v13 + 80)) & 0x100000) == 0)
  {
    uint64_t v21 = ~v9;
    uint64_t v22 = ~v14;
    uint64_t v25 = a3[3];
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v23 = ((unint64_t)a2 + v10) & v21;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v21, v23, v25);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))(((((unint64_t)v4 + v10) & v21) + v15) & v22, (v23 + v15) & v22, v7);
  }
  else
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v17 + 16) & ~v17));
    swift_retain();
  }
  return v4;
}

uint64_t destroy for PredicateExpressions.DictionaryKeyDefaultValueSubscript(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  uint64_t v9 = *(void *)(a2[4] - 8);
  uint64_t v10 = *(uint64_t (**)(unint64_t))(v9 + 8);
  unint64_t v11 = (v8 + *(void *)(v7 + 56) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);

  return v10(v11);
}

uint64_t initializeWithCopy for PredicateExpressions.DictionaryKeyDefaultValueSubscript(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 16))((*(void *)(v8 + 48) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v8 + 48) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.DictionaryKeyDefaultValueSubscript(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 24))((*(void *)(v8 + 40) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v8 + 40) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.DictionaryKeyDefaultValueSubscript(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 32))((*(void *)(v8 + 32) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v8 + 32) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.DictionaryKeyDefaultValueSubscript(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 40))((*(void *)(v8 + 24) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v8 + 24) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.DictionaryKeyDefaultValueSubscript(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = a3[4];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v9) {
    unsigned int v16 = v9;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v11 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(*(void *)(a3[2] - 8) + 64) + v13;
  int v18 = a2 - v16;
  if (a2 <= v16) {
    goto LABEL_27;
  }
  uint64_t v19 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(void *)(*(void *)(v10 - 8) + 64);
  char v20 = 8 * v19;
  if (v19 <= 3)
  {
    unsigned int v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 < 2)
    {
LABEL_27:
      if (v16)
      {
        if (v6 == v16)
        {
          uint64_t v26 = *(uint64_t (**)(void))(v5 + 48);
          return v26();
        }
        else
        {
          unint64_t v28 = ((unint64_t)a1 + v17) & ~v13;
          if (v8 == v16)
          {
            uint64_t v29 = *(uint64_t (**)(unint64_t))(v7 + 48);
            return v29(v28);
          }
          else
          {
            unint64_t v30 = (v28 + v14 + v15) & ~v15;
            uint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
            return v31(v30, v12, v10);
          }
        }
      }
      return 0;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_27;
  }
LABEL_17:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 <= 3) {
      int v24 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(_DWORD *)(*(void *)(v10 - 8) + 64);
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v16 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.DictionaryKeyDefaultValueSubscript(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = *(void *)(v8 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v9 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  if (*(_DWORD *)(v13 + 84) <= v12) {
    unsigned int v17 = v12;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v13 + 84);
  }
  uint64_t v18 = *(void *)(*(void *)(a4[2] - 8) + 64) + v14;
  size_t v19 = ((v15 + v16 + (v18 & ~v14)) & ~v16) + *(void *)(*(void *)(v9 - 8) + 64);
  BOOL v20 = a3 >= v17;
  unsigned int v21 = a3 - v17;
  if (v21 != 0 && v20)
  {
    if (v19 <= 3)
    {
      unsigned int v26 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v26))
      {
        int v22 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v26 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 0;
  }
  if (v17 < a2)
  {
    unsigned int v23 = ~v17 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v27 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v14;
  switch(v22)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x181AB6E3CLL);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v7 == v17)
      {
        unint64_t v28 = *(void (**)(char *))(v6 + 56);
        uint64_t v29 = a1;
LABEL_30:
        v28(v29);
        return;
      }
      unint64_t v30 = (unint64_t)&a1[v18] & v25;
      if (v11 != v17)
      {
        uint64_t v29 = (char *)((v30 + v15 + v16) & ~v16);
        unint64_t v28 = *(void (**)(char *))(v13 + 56);
        goto LABEL_30;
      }
      uint64_t v31 = *(void (**)(unint64_t))(v10 + 56);
      v31(v30);
      return;
  }
}

uint64_t @objc _NSFileManagerBridge.createSymbolicLink(at:withDestinationURL:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(void **, void *))
{
  URL.init(reference:)(a3, &v18);
  uint64_t v10 = v18;
  uint64_t v9 = v19;
  uint64_t v11 = v20;
  URL.init(reference:)(a4, &v18);
  unsigned int v12 = v18;
  uint64_t v13 = v19;
  uint64_t v14 = v20;
  uint64_t v18 = v10;
  uint64_t v19 = v9;
  uint64_t v20 = v11;
  v17[0] = v12;
  v17[1] = v13;
  v17[2] = v14;
  id v15 = a1;
  a6(&v18, v17);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return 1;
}

id _NSFileManagerBridge.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for _NSFileManagerBridge()
{
  return self;
}

uint64_t specialized _NSFileManagerBridge.contents(atPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = MEMORY[0x1E4FBC868];
  *(void *)&long long v4 = a1;
  *((void *)&v4 + 1) = a2;
  uint64_t v5 = 0;
  char v6 = 0;
  swift_bridgeObjectRetain();
  uint64_t v2 = readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)(&v4, 1, 0, 1, 0, MEMORY[0x1E4FBC860], &v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_181AB7864()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

void FormatterCache.formatter(for:creator:)(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v46 = a5;
  uint64_t v43 = a3;
  unsigned int v44 = a2;
  uint64_t v8 = a4[3];
  uint64_t v52 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v40 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  char v45 = (char *)&v36 - v11;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  id v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v36 - v17;
  uint64_t v19 = *v5;
  uint64_t v20 = v5[1];
  uint64_t v39 = a4[2];
  uint64_t v48 = v39;
  uint64_t v49 = v8;
  uint64_t v21 = a4[4];
  uint64_t v37 = v19;
  uint64_t v38 = v21;
  uint64_t v50 = v21;
  uint64_t v51 = a1;
  uint64_t v41 = a1;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v20 + 24));
  unsigned int v42 = (void *)(v20 + 16);
  os_unfair_lock_t v22 = v47;
  partial apply for closure #1 in FormatterCache.formatter(for:creator:)((void *)(v20 + 16));
  if (v22)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v20 + 24));
    __break(1u);
  }
  else
  {
    os_unfair_lock_t v47 = (os_unfair_lock_t)(v20 + 24);
    os_unfair_lock_unlock((os_unfair_lock_t)(v20 + 24));
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v18, v12);
    uint64_t v23 = v52;
    int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48))(v15, 1, v8);
    uint64_t v25 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
    if (v24 == 1)
    {
      unsigned int v26 = v15;
      int v27 = *(void (**)(uint64_t))(v13 + 8);
      uint64_t v28 = v25(v26, v12);
      v44(v28);
      unsigned int v44 = v27;
      swift_retain();
      os_unfair_lock_lock(v47);
      uint64_t v30 = *(void *)(v20 + 16);
      if ((v30 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v31 = __CocoaSet.count.getter();
      }
      else
      {
        uint64_t v31 = *(void *)(v30 + 16);
        swift_bridgeObjectRetain();
      }
      uint64_t v32 = v52;
      if (v37 < v31)
      {
        uint64_t v33 = v42;
        swift_bridgeObjectRelease();
        *uint64_t v33 = MEMORY[0x1E4FBC868];
      }
      unint64_t v34 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
      uint64_t v35 = v45;
      v34(v40, v45, v8);
      type metadata accessor for Dictionary._Variant();
      Dictionary._Variant.setValue(_:forKey:)();
      uint64_t v29 = v52;
      os_unfair_lock_unlock(v47);
      swift_release();
      id v15 = v35;
      swift_bridgeObjectRelease();
      uint64_t v25 = (uint64_t (*)(char *, uint64_t))v44;
    }
    else
    {
      uint64_t v29 = v23;
    }
    v25(v18, v12);
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v46, v15, v8);
  }
}

Swift::Void __swiftcall FormatterCache.removeAllObjects()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  *(void *)(v1 + 16) = MEMORY[0x1E4FBC868];
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  swift_release();

  swift_bridgeObjectRelease();
}

uint64_t FormatterCache.subscript.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  partial apply for closure #1 in FormatterCache.formatter(for:creator:)((void *)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  return swift_release();
}

uint64_t FormatterCache.init()@<X0>(void *a1@<X8>)
{
  type metadata accessor for Dictionary();
  type metadata accessor for LockedState._Buffer();
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  *a1 = 100;
  a1[1] = result;
  return result;
}

uint64_t partial apply for closure #1 in FormatterCache.formatter(for:creator:)(void *a1)
{
  return partial apply for closure #1 in FormatterCache.formatter(for:creator:)(a1);
}

{
  void *v1;

  return MEMORY[0x185301C20](v1[5], *a1, v1[2], v1[3], v1[4]);
}

void *initializeBufferWithCopyOfBuffer for FormatterCache(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for FormatterCache()
{
  return swift_release();
}

void *assignWithCopy for FormatterCache(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for FormatterCache(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FormatterCache(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormatterCache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for FormatterCache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t NSKeyValueObservedChange.kind.getter()
{
  return *(void *)v0;
}

uint64_t NSKeyValueObservedChange.indexes.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(a1 + 36));
  return swift_retain();
}

uint64_t NSKeyValueObservedChange.isPrior.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

void @objc static NSObject.__old_unswizzled_automaticallyNotifiesObservers(forKey:)()
{
}

void @objc static NSObject.__old_unswizzled_keyPathsForValuesAffectingValue(forKey:)()
{
}

uint64_t closure #1 in NSObject.__NS_swiftOverlay_keyPathsForValuesAffectingValueForKey(_:original:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v3)
  {
    *a1 = result;
    a1[1] = v3;
  }
  else
  {
    swift_retain();
    _StringGuts.grow(_:)(42);
    v4._unint64_t object = (void *)0x80000001823A9A20;
    v4._uint64_t countAndFlagsBits = 0xD000000000000028;
    String.append(_:)(v4);
    type metadata accessor for AnyKeyPath();
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t __KVOKeyPathBridgeMachinery.BridgeKey.isEqual(_:)(uint64_t a1)
{
  uint64_t v2 = v1
     + OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value;
  uint64_t v4 = *(void *)(v1
                 + OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value);
  uint64_t v3 = *(void *)(v2 + 8);
  outlined init with copy of Any?(a1, (uint64_t)v11);
  if (v12)
  {
    type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey();
    swift_bridgeObjectRetain();
    if (swift_dynamicCast())
    {
      uint64_t v6 = *(void *)&v10[OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value];
      uint64_t v5 = *(void *)&v10[OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value
                         + 8];
      swift_bridgeObjectRetain();

      if (v4 == v6 && v3 == v5)
      {
        swift_bridgeObjectRelease_n();
        char v8 = 1;
      }
      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      char v8 = 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Any?);
    char v8 = 0;
  }
  return v8 & 1;
}

id __KVOKeyPathBridgeMachinery.BridgeKey.__deallocating_deinit()
{
  return __KVOKeyPathBridgeMachinery.BridgeKey.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey);
}

id __KVOKeyPathBridgeMachinery.__deallocating_deinit()
{
  return __KVOKeyPathBridgeMachinery.BridgeKey.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for __KVOKeyPathBridgeMachinery);
}

id __KVOKeyPathBridgeMachinery.BridgeKey.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

id NSKeyValueObservation.Helper.__deallocating_deinit()
{
  NSKeyValueObservation.Helper.invalidate()();
  MEMORY[0x185309510](*(void *)&v0[OBJC_IVAR____TtCC10Foundation21NSKeyValueObservationP33_6DA0945A07226B3278459E9368612FF46Helper_lock], -1, -1);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NSKeyValueObservation.Helper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id NSKeyValueObservation.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = MEMORY[0x185309640](&v0[OBJC_IVAR____NSKeyValueObservation_helper]);
  if (v2)
  {
    objc_super v3 = (void *)v2;
    NSKeyValueObservation.Helper.invalidate()();
  }
  swift_unknownObjectWeakAssign();
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for NSKeyValueObservation();
  return objc_msgSendSuper2(&v5, sel_dealloc);
}

id NSKeyValueObservation.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void NSKeyValueObservation.init()()
{
}

uint64_t sub_181AB8588()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t _KeyValueCodingAndObserving.willChange<A>(_:valuesAt:for:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return _KeyValueCodingAndObserving.willChange<A>(_:valuesAt:for:)(a1, a2, a3, a4, (SEL *)&selRef_willChange_valuesAtIndexes_forKey_);
}

uint64_t _KeyValueCodingAndObserving.willChangeValue<A>(for:withSetMutation:using:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _KeyValueCodingAndObserving.willChangeValue<A>(for:withSetMutation:using:)(a1, a2, a3, a4, a5, (SEL *)&selRef_willChangeValueForKey_withSetMutation_usingObjects_);
}

uint64_t _KeyValueCodingAndObserving.didChange<A>(_:valuesAt:for:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return _KeyValueCodingAndObserving.willChange<A>(_:valuesAt:for:)(a1, a2, a3, a4, (SEL *)&selRef_didChange_valuesAtIndexes_forKey_);
}

uint64_t _KeyValueCodingAndObserving.willChange<A>(_:valuesAt:for:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, SEL *a5)
{
  uint64_t v7 = *(void *)(*a3 + *MEMORY[0x1E4FBC5F0]);
  double v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = *v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v18 - v12, v13, v7, v8);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  swift_dynamicCast();
  uint64_t v14 = (void *)v18[5];
  objc_msgSend(*(id *)(v10 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSIndexSet);
  swift_dynamicCast();
  id v15 = (void *)v18[0];
  _bridgeKeyPathToString(_:)();
  uint64_t v16 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v14, *a5, a1, v15, v16);

  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t _KeyValueCodingAndObserving.didChangeValue<A>(for:withSetMutation:using:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _KeyValueCodingAndObserving.willChangeValue<A>(for:withSetMutation:using:)(a1, a2, a3, a4, a5, (SEL *)&selRef_didChangeValueForKey_withSetMutation_usingObjects_);
}

uint64_t _KeyValueCodingAndObserving.willChangeValue<A>(for:withSetMutation:using:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  int64_t v71 = a6;
  uint64_t v72 = a2;
  uint64_t v9 = (uint64_t *)(*a1 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v10 = v9[1];
  uint64_t v79 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)v61 - v11;
  uint64_t v66 = type metadata accessor for Optional();
  BOOL v81 = *(void (***)(char *, char *, uint64_t))(v66 - 8);
  MEMORY[0x1F4188790](v66);
  int64_t v65 = (char *)v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  int64_t v67 = (char *)v61 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v61 - v17;
  uint64_t v19 = *v9;
  double v21 = MEMORY[0x1F4188790](v20);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))((char *)v61 - v22, v6, v19, v21);
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  swift_dynamicCast();
  id v70 = v88;
  _bridgeKeyPathToString(_:)();
  uint64_t v69 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  if ((a3 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v24 = MEMORY[0x1E4FBC870];
    goto LABEL_6;
  }
  if (!__CocoaSet.count.getter()) {
    goto LABEL_5;
  }
LABEL_3:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyHashable>);
  uint64_t v24 = static _SetStorage.allocate(capacity:)();
LABEL_6:
  uint64_t v73 = a1;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    __CocoaSet.makeIterator()();
    uint64_t result = Set.Iterator.init(_cocoa:)();
    a3 = v89;
    uint64_t v77 = v90;
    uint64_t v27 = v91;
    uint64_t v26 = v92;
    unint64_t v28 = v93;
  }
  else
  {
    uint64_t v29 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v30 = *(void *)(a3 + 56);
    uint64_t v77 = a3 + 56;
    uint64_t v27 = ~v29;
    uint64_t v31 = -v29;
    if (v31 < 64) {
      uint64_t v32 = ~(-1 << v31);
    }
    else {
      uint64_t v32 = -1;
    }
    unint64_t v28 = v32 & v30;
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
    uint64_t v26 = 0;
  }
  uint64_t v75 = a3 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v33 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v79 + 56);
  uint64_t v64 = v81 + 2;
  unint64_t v63 = (uint64_t (**)(char *, uint64_t, uint64_t))(v79 + 48);
  unsigned __int8 v62 = (void (**)(char *, uint64_t))(v81 + 1);
  BOOL v81 = (void (**)(char *, char *, uint64_t))(v79 + 32);
  uint64_t v68 = v27;
  int64_t v76 = (unint64_t)(v27 + 64) >> 6;
  uint64_t v78 = v79 + 16;
  uint64_t v34 = v24 + 56;
  uint64_t v74 = MEMORY[0x1E4FBC838] + 8;
  uint64_t v35 = v26;
  while (a3 < 0)
  {
    uint64_t v41 = __CocoaSet.Iterator.next()();
    if (!v41) {
      goto LABEL_50;
    }
    uint64_t v42 = v41;
    uint64_t v80 = v35;
    uint64_t v43 = v12;
    uint64_t v44 = a3;
    if (_swift_isClassOrObjCExistentialType())
    {
      *(void *)&long long v85 = v42;
      swift_dynamicCast();
      char v45 = *v33;
    }
    else
    {
      char v45 = *v33;
      v61[1] = v33;
      v45(v67, 1, 1, v10);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)();
      swift_unknownObjectRelease();
      uint64_t v58 = v65;
      (*v64)(v65, v67, v66);
      uint64_t result = (*v63)(v58, 1, v10);
      if (result == 1) {
        goto LABEL_52;
      }
      (*v62)(v67, v66);
      (*v81)(v18, v65, v10);
    }
    v45(v18, 0, 1, v10);
    a3 = v44;
    uint64_t v12 = v43;
    uint64_t v35 = v80;
LABEL_39:
    (*v81)(v12, v18, v10);
    swift_dynamicCast();
    long long v82 = v85;
    long long v83 = v86;
    uint64_t v84 = v87;
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v24 + 40));
    uint64_t v51 = -1 << *(unsigned char *)(v24 + 32);
    unint64_t v52 = result & ~v51;
    unint64_t v53 = v52 >> 6;
    if (((-1 << v52) & ~*(void *)(v34 + 8 * (v52 >> 6))) != 0)
    {
      unint64_t v36 = __clz(__rbit64((-1 << v52) & ~*(void *)(v34 + 8 * (v52 >> 6)))) | v52 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v54 = 0;
      unint64_t v55 = (unint64_t)(63 - v51) >> 6;
      do
      {
        if (++v53 == v55 && (v54 & 1) != 0)
        {
          __break(1u);
          goto LABEL_51;
        }
        BOOL v56 = v53 == v55;
        if (v53 == v55) {
          unint64_t v53 = 0;
        }
        v54 |= v56;
        uint64_t v57 = *(void *)(v34 + 8 * v53);
      }
      while (v57 == -1);
      unint64_t v36 = __clz(__rbit64(~v57)) + (v53 << 6);
    }
    *(void *)(v34 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
    uint64_t v37 = *(void *)(v24 + 48) + 40 * v36;
    long long v38 = v83;
    *(_OWORD *)uint64_t v37 = v82;
    *(_OWORD *)(v37 + 16) = v38;
    *(void *)(v37 + 32) = v84;
    ++*(void *)(v24 + 16);
  }
  if (v28)
  {
    unint64_t v39 = __clz(__rbit64(v28));
    v28 &= v28 - 1;
    unint64_t v40 = v39 | (v35 << 6);
LABEL_38:
    uint64_t v50 = v79;
    (*(void (**)(char *, unint64_t, uint64_t))(v79 + 16))(v18, *(void *)(a3 + 48) + *(void *)(v79 + 72) * v40, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v18, 0, 1, v10);
    goto LABEL_39;
  }
  int64_t v46 = v35 + 1;
  if (!__OFADD__(v35, 1))
  {
    if (v46 >= v76) {
      goto LABEL_50;
    }
    unint64_t v47 = *(void *)(v77 + 8 * v46);
    uint64_t v48 = v35 + 1;
    if (!v47)
    {
      uint64_t v48 = v35 + 2;
      if (v35 + 2 >= v76) {
        goto LABEL_50;
      }
      unint64_t v47 = *(void *)(v77 + 8 * v48);
      if (!v47)
      {
        uint64_t v48 = v35 + 3;
        if (v35 + 3 >= v76) {
          goto LABEL_50;
        }
        unint64_t v47 = *(void *)(v77 + 8 * v48);
        if (!v47)
        {
          uint64_t v48 = v35 + 4;
          if (v35 + 4 >= v76) {
            goto LABEL_50;
          }
          unint64_t v47 = *(void *)(v77 + 8 * v48);
          if (!v47)
          {
            uint64_t v48 = v35 + 5;
            if (v35 + 5 >= v76) {
              goto LABEL_50;
            }
            unint64_t v47 = *(void *)(v77 + 8 * v48);
            if (!v47)
            {
              uint64_t v49 = v35 + 6;
              while (v76 != v49)
              {
                unint64_t v47 = *(void *)(v77 + 8 * v49++);
                if (v47)
                {
                  uint64_t v48 = v49 - 1;
                  goto LABEL_37;
                }
              }
LABEL_50:
              (*v33)(v18, 1, 1, v10);
              swift_release();
              outlined consume of Set<A1>.Iterator._Variant<A><A1>();
              uint64_t v59 = _NativeSet.bridged()();
              id v60 = v70;
              objc_msgSend(v70, *v71, v69, v72, v59);

              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              return swift_release();
            }
          }
        }
      }
    }
LABEL_37:
    unint64_t v28 = (v47 - 1) & v47;
    unint64_t v40 = __clz(__rbit64(v47)) + (v48 << 6);
    uint64_t v35 = v48;
    goto LABEL_38;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

void specialized LazyMapSequence.Iterator.next()()
{
  void (*v8)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;

  id v1 = v0;
  uint64_t v2 = *v0;
  if ((*v0 & 0x8000000000000000) != 0)
  {
    uint64_t v9 = __CocoaSet.Iterator.next()();
    if (v9)
    {
      uint64_t v17 = v9;
      type metadata accessor for AnyKeyPath();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v7 = v16;
      swift_unknownObjectRelease();
      if (v16) {
        goto LABEL_6;
      }
    }
    return;
  }
  int64_t v4 = v0[3];
  unint64_t v3 = v1[4];
  if (v3)
  {
    uint64_t v5 = (v3 - 1) & v3;
    unint64_t v6 = __clz(__rbit64(v3)) | (v4 << 6);
LABEL_4:
    uint64_t v7 = *(void *)(*(void *)(v2 + 48) + 8 * v6);
    swift_retain();
    goto LABEL_5;
  }
  uint64_t v10 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    return;
  }
  uint64_t v11 = (unint64_t)(v1[2] + 64) >> 6;
  if (v10 >= v11)
  {
    uint64_t v7 = 0;
    uint64_t v5 = 0;
    goto LABEL_5;
  }
  uint64_t v12 = v1[1];
  uint64_t v13 = *(void *)(v12 + 8 * v10);
  if (v13)
  {
LABEL_13:
    uint64_t v5 = (v13 - 1) & v13;
    unint64_t v6 = __clz(__rbit64(v13)) + (v10 << 6);
    int64_t v4 = v10;
    goto LABEL_4;
  }
  uint64_t v14 = v4 + 2;
  if (v4 + 2 >= v11) {
    goto LABEL_29;
  }
  uint64_t v13 = *(void *)(v12 + 8 * v14);
  if (v13)
  {
LABEL_17:
    uint64_t v10 = v14;
    goto LABEL_13;
  }
  if (v4 + 3 >= v11) {
    goto LABEL_30;
  }
  uint64_t v13 = *(void *)(v12 + 8 * (v4 + 3));
  if (v13)
  {
    uint64_t v10 = v4 + 3;
    goto LABEL_13;
  }
  uint64_t v14 = v4 + 4;
  if (v4 + 4 < v11)
  {
    uint64_t v13 = *(void *)(v12 + 8 * v14);
    if (v13) {
      goto LABEL_17;
    }
    uint64_t v10 = v4 + 5;
    if (v4 + 5 < v11)
    {
      uint64_t v13 = *(void *)(v12 + 8 * v10);
      if (v13) {
        goto LABEL_13;
      }
      uint64_t v10 = v11 - 1;
      uint64_t v15 = v4 + 6;
      while (v11 != v15)
      {
        uint64_t v13 = *(void *)(v12 + 8 * v15++);
        if (v13)
        {
          uint64_t v10 = v15 - 1;
          goto LABEL_13;
        }
      }
LABEL_29:
      uint64_t v7 = 0;
      uint64_t v5 = 0;
      int64_t v4 = v10;
      goto LABEL_5;
    }
LABEL_30:
    uint64_t v7 = 0;
    uint64_t v5 = 0;
    int64_t v4 = v14;
    goto LABEL_5;
  }
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  v4 += 3;
LABEL_5:
  v1[3] = v4;
  v1[4] = v5;
  if (v7)
  {
LABEL_6:
    double v8 = (void (*)(uint64_t *__return_ptr, uint64_t *))v1[5];
    uint64_t v17 = v7;
    v8(&v16, &v17);
    swift_release();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for NSKeyValueObservedChange(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  size_t v10 = v9 + v7;
  size_t v11 = v9 + 7;
  unint64_t v12 = ((v9
        + 7
        + ((v10 + ((v7 + 8) & ~(unint64_t)v7)) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  int v13 = v7 & 0x100000;
  if (v8 > 7 || v13 != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v16 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
  }
  else
  {
    uint64_t v17 = ~v8;
    *a1 = *a2;
    uint64_t v18 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
    uint64_t v19 = (const void *)(((unint64_t)a2 + v8 + 8) & ~v8);
    uint64_t v25 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v25(((unint64_t)a2 + v8 + 8) & ~v8, 1, v4))
    {
      memcpy(v18, v19, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v18, v19, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v18, 0, 1, v4);
    }
    uint64_t v20 = (void *)(((unint64_t)v18 + v10) & v17);
    double v21 = (const void *)(((unint64_t)v19 + v10) & v17);
    if (v25((unint64_t)v21, 1, v4))
    {
      memcpy(v20, v21, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v20, v21, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v4);
    }
    unint64_t v22 = ((unint64_t)v20 + v11) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = ((unint64_t)v21 + v11) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v22 = *(void *)v23;
    *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  }
  swift_retain();
  return v3;
}

void *assignWithCopy for NSKeyValueObservedChange(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (unint64_t)a1 + v5 + 8;
  uint64_t v22 = ~v5;
  unint64_t v7 = (unint64_t)a2 + v5 + 8;
  uint64_t v8 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
  int v9 = v8(v6 & ~v5, 1, v3);
  int v10 = v8(v7 & ~v5, 1, v3);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 16))(v6 & ~v5, v7 & ~v5, v3);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v4 + 56))(v6 & ~v5, 0, 1, v3);
      goto LABEL_12;
    }
    int v11 = *(_DWORD *)(v4 + 84);
    size_t v12 = *(void *)(v4 + 64);
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 24))(v6 & ~v5, v7 & ~v5, v3);
      goto LABEL_12;
    }
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v6 & ~v5, v3);
    int v11 = *(_DWORD *)(v4 + 84);
    size_t v12 = *(void *)(v4 + 64);
  }
  if (v11) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v12 + 1;
  }
  memcpy((void *)(v6 & ~v5), (const void *)(v7 & ~v5), v13);
LABEL_12:
  if (*(_DWORD *)(v4 + 84)) {
    size_t v14 = *(void *)(v4 + 64);
  }
  else {
    size_t v14 = *(void *)(v4 + 64) + 1;
  }
  uint64_t v15 = (void *)(((v6 | v5) + v14) & v22);
  uint64_t v16 = (const void *)(((v7 | v5) + v14) & v22);
  int v17 = v8((unint64_t)v15, 1, v3);
  int v18 = v8((unint64_t)v16, 1, v3);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v4 + 24))(v15, v16, v3);
      goto LABEL_21;
    }
    (*(void (**)(void *, uint64_t))(v4 + 8))(v15, v3);
    goto LABEL_20;
  }
  if (v18)
  {
LABEL_20:
    memcpy(v15, v16, v14);
    goto LABEL_21;
  }
  (*(void (**)(void *, const void *, uint64_t))(v4 + 16))(v15, v16, v3);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v4 + 56))(v15, 0, 1, v3);
LABEL_21:
  unint64_t v19 = ((unint64_t)v15 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v16 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v19 = *(void *)v20;
  swift_retain();
  swift_release();
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  return a1;
}

void *initializeWithTake for NSKeyValueObservedChange(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (unint64_t)a1 + v5 + 8;
  uint64_t v17 = ~v5;
  unint64_t v7 = (unint64_t)a2 + v5 + 8;
  int v18 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v18(v7 & ~v5, 1, v3))
  {
    int v8 = *(_DWORD *)(v4 + 84);
    size_t v9 = *(void *)(v4 + 64);
    if (v8) {
      size_t v10 = *(void *)(v4 + 64);
    }
    else {
      size_t v10 = v9 + 1;
    }
    memcpy((void *)(v6 & ~v5), (const void *)(v7 & ~v5), v10);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 32))(v6 & ~v5, v7 & ~v5, v3);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v4 + 56))(v6 & ~v5, 0, 1, v3);
    int v8 = *(_DWORD *)(v4 + 84);
    size_t v9 = *(void *)(v4 + 64);
  }
  if (v8) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = v9 + 1;
  }
  size_t v12 = (void *)(((v6 | v5) + v11) & v17);
  size_t v13 = (const void *)(((v7 | v5) + v11) & v17);
  if (v18((unint64_t)v13, 1, v3))
  {
    memcpy(v12, v13, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v4 + 32))(v12, v13, v3);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v4 + 56))(v12, 0, 1, v3);
  }
  unint64_t v14 = ((unint64_t)v12 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v13 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  return a1;
}

void *assignWithTake for NSKeyValueObservedChange(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (unint64_t)a1 + v5 + 8;
  uint64_t v22 = ~v5;
  unint64_t v7 = (unint64_t)a2 + v5 + 8;
  int v8 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
  int v9 = v8(v6 & ~v5, 1, v3);
  int v10 = v8(v7 & ~v5, 1, v3);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 32))(v6 & ~v5, v7 & ~v5, v3);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v4 + 56))(v6 & ~v5, 0, 1, v3);
      goto LABEL_12;
    }
    int v11 = *(_DWORD *)(v4 + 84);
    size_t v12 = *(void *)(v4 + 64);
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 40))(v6 & ~v5, v7 & ~v5, v3);
      goto LABEL_12;
    }
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v6 & ~v5, v3);
    int v11 = *(_DWORD *)(v4 + 84);
    size_t v12 = *(void *)(v4 + 64);
  }
  if (v11) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v12 + 1;
  }
  memcpy((void *)(v6 & ~v5), (const void *)(v7 & ~v5), v13);
LABEL_12:
  if (*(_DWORD *)(v4 + 84)) {
    size_t v14 = *(void *)(v4 + 64);
  }
  else {
    size_t v14 = *(void *)(v4 + 64) + 1;
  }
  unint64_t v15 = (void *)(((v6 | v5) + v14) & v22);
  uint64_t v16 = (const void *)(((v7 | v5) + v14) & v22);
  int v17 = v8((unint64_t)v15, 1, v3);
  int v18 = v8((unint64_t)v16, 1, v3);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v4 + 40))(v15, v16, v3);
      goto LABEL_21;
    }
    (*(void (**)(void *, uint64_t))(v4 + 8))(v15, v3);
    goto LABEL_20;
  }
  if (v18)
  {
LABEL_20:
    memcpy(v15, v16, v14);
    goto LABEL_21;
  }
  (*(void (**)(void *, const void *, uint64_t))(v4 + 32))(v15, v16, v3);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v4 + 56))(v15, 0, 1, v3);
LABEL_21:
  unint64_t v19 = ((unint64_t)v15 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v16 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v19 = *(void *)v20;
  swift_release();
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSKeyValueObservedChange(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v6) {
    ++v10;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v10 + v9;
  uint64_t v12 = v10 + 7;
  if (v8 < a2)
  {
    unint64_t v13 = ((v12 + ((v11 + ((v9 + 8) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 9;
    unsigned int v14 = (a2 - v8 + 255) >> (8 * v13);
    if (v13 < 4) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = a1[v13];
        if (!a1[v13]) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v17 = *(unsigned __int16 *)&a1[v13];
        if (*(_WORD *)&a1[v13]) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x181AB9EB8);
      case 4:
        int v17 = *(_DWORD *)&a1[v13];
        if (!v17) {
          break;
        }
LABEL_27:
        int v19 = (v17 - 1) << (8 * v13);
        if (v13 >= 4) {
          int v19 = 0;
        }
        if (((v12 + ((v11 + ((v9 + 8) & ~v9)) & ~v9)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v20 = *a1;
        }
        else {
          int v20 = *(_DWORD *)a1;
        }
        return v8 + (v20 | v19) + 1;
      default:
        break;
    }
  }
  uint64_t v21 = (unint64_t)&a1[v9 + 8] & ~v9;
  if (v7 < 0x7FFFFFFE)
  {
    unint64_t v23 = *(void *)((v12 + ((v11 + v21) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
    if (v23 >= 0xFFFFFFFF) {
      LODWORD(v23) = -1;
    }
    if ((v23 + 1) >= 2) {
      return v23;
    }
    else {
      return 0;
    }
  }
  else
  {
    unsigned int v22 = (*(uint64_t (**)(uint64_t))(v5 + 48))(v21);
    if (v22 >= 2) {
      return v22 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for NSKeyValueObservedChange(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v8 = v7;
  int v9 = *(_DWORD *)(v7 + 84);
  unsigned int v10 = v9 - 1;
  if (!v9) {
    unsigned int v10 = 0;
  }
  if (v10 <= 0x7FFFFFFE) {
    unsigned int v11 = 2147483646;
  }
  else {
    unsigned int v11 = v10;
  }
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  size_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v9) {
    ++v13;
  }
  size_t v14 = ((v13 + 7 + ((v13 + v12 + ((v12 + 8) & ~v12)) & ~v12)) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v15 = 8 * v14;
  if (v11 < a3)
  {
    unsigned int v16 = (a3 - v11 + 255) >> v15;
    if (v14 <= 3) {
      unsigned int v17 = v16 + 1;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      int v18 = 4;
    }
    else {
      int v18 = 2;
    }
    if (v17 < 0x100) {
      int v18 = 1;
    }
    if (v17 >= 2) {
      int v6 = v18;
    }
    else {
      int v6 = 0;
    }
  }
  if (v11 < a2)
  {
    if (v14 < 4) {
      unsigned int v19 = ((~v11 + a2) >> v15) + 1;
    }
    else {
      unsigned int v19 = 1;
    }
    if (v14 >= 4) {
      unsigned int v20 = ~v11 + a2;
    }
    else {
      unsigned int v20 = (~(_BYTE)v11 + a2);
    }
    bzero(a1, v14);
    if (v14 == 1) {
      *a1 = v20;
    }
    else {
      *(_DWORD *)a1 = v20;
    }
    switch(v6)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_62;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  uint64_t v21 = ~v12;
  switch(v6)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 3:
LABEL_62:
      __break(1u);
      JUMPOUT(0x181ABA1B8);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_36;
    default:
LABEL_36:
      if (a2)
      {
LABEL_37:
        unsigned int v22 = (unsigned char *)((unint64_t)&a1[v12 + 8] & v21);
        if (v10 < 0x7FFFFFFE)
        {
          uint64_t v26 = (void *)((v13 + 7 + ((unint64_t)&v22[v13 + v12] & v21)) & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *uint64_t v26 = 0;
            *(_DWORD *)uint64_t v26 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *uint64_t v26 = a2;
          }
        }
        else if (v10 >= a2)
        {
          uint64_t v27 = a2 + 1;
          unint64_t v28 = *(void (**)(unint64_t, uint64_t))(v8 + 56);
          unint64_t v29 = (unint64_t)&a1[v12 + 8] & v21;
          v28(v29, v27);
        }
        else
        {
          if (v13 <= 3) {
            int v23 = ~(-1 << (8 * v13));
          }
          else {
            int v23 = -1;
          }
          if (v13)
          {
            int v24 = v23 & (~v10 + a2);
            if (v13 <= 3) {
              int v25 = v13;
            }
            else {
              int v25 = 4;
            }
            bzero(v22, v13);
            switch(v25)
            {
              case 2:
                *(_WORD *)unsigned int v22 = v24;
                break;
              case 3:
                *(_WORD *)unsigned int v22 = v24;
                void v22[2] = BYTE2(v24);
                break;
              case 4:
                *(_DWORD *)unsigned int v22 = v24;
                break;
              default:
                *unsigned int v22 = v24;
                break;
            }
          }
        }
      }
      return;
  }
}

uint64_t dispatch thunk of static NSKeyValueObservingCustomization.keyPathsAffectingValue(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static NSKeyValueObservingCustomization.automaticallyNotifiesObservers(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata accessor for __KVOKeyPathBridgeMachinery()
{
  return self;
}

uint64_t method lookup function for NSKeyValueObservation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NSKeyValueObservation);
}

uint64_t specialized static __KVOKeyPathBridgeMachinery._bridgeKeyPath(_:)(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = self;
  swift_bridgeObjectRetain();
  id v5 = objc_msgSend(v4, sel_currentThread);
  id v6 = objc_msgSend(v5, sel_threadDictionary);

  uint64_t v7 = (objc_class *)type metadata accessor for __KVOKeyPathBridgeMachinery.BridgeKey();
  uint64_t v8 = (char *)objc_allocWithZone(v7);
  int v9 = &v8[OBJC_IVAR____TtCC10FoundationP33_6DA0945A07226B3278459E9368612FF427__KVOKeyPathBridgeMachinery9BridgeKey_value];
  *(void *)int v9 = a1;
  *((void *)v9 + 1) = a2;
  v15.receiver = v8;
  v15.super_class = v7;
  id v10 = objc_msgSendSuper2(&v15, sel_init);
  id v11 = objc_msgSend(v6, sel_objectForKeyedSubscript_, v10);

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  outlined init with take of Any?((uint64_t)v14, (uint64_t)v16);
  if (v17)
  {
    type metadata accessor for AnyKeyPath();
    if (swift_dynamicCast()) {
      return v13;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
}

uint64_t sub_181ABA3CC()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181ABA3DC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181ABA3EC()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return MEMORY[0x1F4186498](v0, 48, 7);
}

double _LocaleUnlocalized.calendar.getter@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter((uint64_t *)&v4);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  double result = *(double *)&v4;
  *a1 = v4;
  return result;
}

uint64_t _LocaleUnlocalized.__deallocating_deinit()
{
  outlined init with take of LocalePreferences?(v0 + 16, (uint64_t)v2);
  outlined retain of LocalePreferences?((uint64_t)v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for _LocaleProtocol.init(identifier:prefs:) in conformance _LocaleUnlocalized(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = swift_allocObject();
  outlined init with take of LocalePreferences?(a3, (uint64_t)v6);
  outlined init with take of LocalePreferences?((uint64_t)v6, v4 + 16);
  return v4;
}

uint64_t protocol witness for _LocaleProtocol.init(name:prefs:disableBundleMatching:) in conformance _LocaleUnlocalized(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = swift_allocObject();
  long long v5 = a3[7];
  v11[6] = a3[6];
  v12[0] = v5;
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)a3 + 124);
  long long v6 = a3[3];
  _OWORD v11[2] = a3[2];
  v11[3] = v6;
  long long v7 = a3[5];
  v11[4] = a3[4];
  v11[5] = v7;
  long long v8 = a3[1];
  v11[0] = *a3;
  v11[1] = v8;
  destructiveProjectEnumData for PredicateCodableError(v11, v9);
  outlined init with take of LocalePreferences?((uint64_t)v11, v4 + 16);
  return v4;
}

uint64_t protocol witness for _LocaleProtocol.init(components:) in conformance _LocaleUnlocalized(const void *a1)
{
  uint64_t v2 = swift_allocObject();
  memcpy(v4, a1, sizeof(v4));
  outlined release of Locale.Components(v4);
  _s10Foundation17LocalePreferencesVSgWOi0_(v5);
  outlined init with take of LocalePreferences?((uint64_t)v5, v2 + 16);
  return v2;
}

uint64_t protocol witness for _LocaleProtocol.copy(newCalendarIdentifier:) in conformance _LocaleUnlocalized()
{
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for _LocaleProtocol.identifier.getter in conformance _LocaleUnlocalized()
{
  return 0x3130305F6E65;
}

uint64_t protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleUnlocalized()
{
  return 0;
}

uint64_t protocol witness for _LocaleProtocol.languageCode.getter in conformance _LocaleUnlocalized()
{
  return 28261;
}

uint64_t protocol witness for _LocaleProtocol.regionCode.getter in conformance _LocaleUnlocalized()
{
  return 3223600;
}

uint64_t protocol witness for _LocaleProtocol.exemplarCharacterSet.getter in conformance _LocaleUnlocalized(uint64_t a1)
{
  if (one-time initialization token for cache != -1) {
    a1 = swift_once();
  }
  id v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  MEMORY[0x1F4188790](a1);
  swift_retain_n();
  os_unfair_lock_lock(v1 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v1[4], &v5);
  os_unfair_lock_unlock(v1 + 31);
  swift_release_n();
  uint64_t v2 = *((void *)&v5 + 1);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v2 + 184))(ObjectType, v2);
  return swift_unknownObjectRelease();
}

double protocol witness for _LocaleProtocol.calendar.getter in conformance _LocaleUnlocalized@<D0>(_OWORD *a1@<X8>)
{
  return _LocaleUnlocalized.calendar.getter(a1);
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifier.getter in conformance _LocaleUnlocalized()
{
  return 0x647261646E617473;
}

uint64_t protocol witness for _LocaleProtocol.decimalSeparator.getter in conformance _LocaleUnlocalized()
{
  return 46;
}

uint64_t protocol witness for _LocaleProtocol.groupingSeparator.getter in conformance _LocaleUnlocalized()
{
  return 44;
}

uint64_t protocol witness for _LocaleProtocol.currencySymbol.getter in conformance _LocaleUnlocalized()
{
  return 42178;
}

uint64_t protocol witness for _LocaleProtocol.quotationBeginDelimiter.getter in conformance _LocaleUnlocalized()
{
  return 10256610;
}

uint64_t protocol witness for _LocaleProtocol.quotationEndDelimiter.getter in conformance _LocaleUnlocalized()
{
  return 10322146;
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationBeginDelimiter.getter in conformance _LocaleUnlocalized()
{
  return 9994466;
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationEndDelimiter.getter in conformance _LocaleUnlocalized()
{
  return 10060002;
}

uint64_t protocol witness for _LocaleProtocol.measurementSystem.getter in conformance _LocaleUnlocalized@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for metric != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E8ED3188;
  long long v3 = xmmword_1E8ED3190;
  *(void *)a1 = static Locale.MeasurementSystem.metric;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for _LocaleProtocol.numberingSystem.getter in conformance _LocaleUnlocalized@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for latn != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E8EDDC38;
  long long v3 = xmmword_1E8EDDC40;
  *(void *)a1 = static Locale.NumberingSystem.latn;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for _LocaleProtocol.availableNumberingSystems.getter in conformance _LocaleUnlocalized()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.NumberingSystem>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1821037E0;
  if (one-time initialization token for latn != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1E8EDDC38;
  long long v2 = xmmword_1E8EDDC40;
  *(void *)(v0 + 32) = static Locale.NumberingSystem.latn;
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v0 + 48) = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v0;
}

void protocol witness for _LocaleProtocol.firstDayOfWeek.getter in conformance _LocaleUnlocalized(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

double protocol witness for _LocaleProtocol.weekendRange.getter in conformance _LocaleUnlocalized@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  double result = 86400.0;
  *(_OWORD *)(a1 + 16) = xmmword_182107820;
  *(_OWORD *)(a1 + 32) = xmmword_182107830;
  *(unsigned char *)(a1 + 48) = 0;
  return result;
}

double protocol witness for _LocaleProtocol.language.getter in conformance _LocaleUnlocalized@<D0>(uint64_t a1@<X8>)
{
  Swift::String v2 = String.lowercased()();
  Swift::String v3 = String.uppercased()();
  *(_OWORD *)a1 = xmmword_182107840;
  *(Swift::String *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)&double result = 3223600;
  *(_OWORD *)(a1 + 64) = xmmword_182107850;
  *(Swift::String *)(a1 + 80) = v3;
  return result;
}

uint64_t protocol witness for _LocaleProtocol.collation.getter in conformance _LocaleUnlocalized@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for standard != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E8EDDC18;
  long long v3 = xmmword_1E8EDDC20;
  *(void *)a1 = static Locale.Collation.standard;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

double protocol witness for _LocaleProtocol.region.getter in conformance _LocaleUnlocalized@<D0>(uint64_t a1@<X8>)
{
  Swift::String v2 = String.uppercased()();
  *(void *)&double result = 3223600;
  *(_OWORD *)a1 = xmmword_182107850;
  *(Swift::String *)(a1 + 16) = v2;
  return result;
}

void protocol witness for _LocaleProtocol.timeZone.getter in conformance _LocaleUnlocalized(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double protocol witness for _LocaleProtocol.subdivision.getter in conformance _LocaleUnlocalized@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for _LocaleProtocol.identifier(_:) in conformance _LocaleUnlocalized(char *a1)
{
  return *(void *)&aEn001[8 * *a1];
}

void protocol witness for _LocaleProtocol.forceFirstWeekday(_:) in conformance _LocaleUnlocalized(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for _LocaleProtocol.prefs.getter in conformance _LocaleUnlocalized@<X0>(uint64_t a1@<X8>)
{
  outlined init with take of LocalePreferences?(v1 + 16, (uint64_t)v4);
  outlined init with take of LocalePreferences?((uint64_t)v4, a1);
  return outlined retain of LocalePreferences?((uint64_t)v4, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _LocaleUnlocalized()
{
  return 0xD000000000000012;
}

uint64_t specialized _LocaleUnlocalized.bridgeToNSLocale()(uint64_t a1)
{
  if (one-time initialization token for cache != -1) {
    a1 = swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static LocaleCache.cache;
  MEMORY[0x1F4188790](a1);
  swift_retain_n();
  os_unfair_lock_lock(v1 + 31);
  partial apply for closure #1 in LocaleCache.fixed(_:)((uint64_t)&v1[4], &v6);
  os_unfair_lock_unlock(v1 + 31);
  swift_release_n();
  uint64_t v2 = *((void *)&v6 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 488))(ObjectType, v2);
  swift_unknownObjectRelease();
  return v4;
}

BOOL specialized static Comparable.<= infix(_:_:)(double a1, double a2)
{
  return a2 >= a1;
}

uint64_t specialized static Comparable.<= infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 || a3)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a4 == a1 && a5 == a2) {
      char v6 = 1;
    }
    else {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
    }
    return v6 & 1;
  }
  return result;
}

BOOL specialized static Comparable.<= infix(_:_:)(double a1, double a2, double a3, double a4)
{
  BOOL v4 = a3 < a1;
  if (a1 >= a3 && a1 <= a3) {
    BOOL v4 = a4 < a2;
  }
  return !v4;
}

Swift::Void __swiftcall Date.addTimeInterval(_:)(Swift::Double a1)
{
  *uint64_t v1 = *v1 + a1;
}

double static Date.+= infix(_:_:)(double *a1, double a2)
{
  double result = *a1 + a2;
  *a1 = result;
  return result;
}

void Date.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

double static Date.-= infix(_:_:)(double *a1, double a2)
{
  double result = *a1 - a2;
  *a1 = result;
  return result;
}

Swift::Int Date.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Date(double *a1, double *a2)
{
  return *a2 < *a1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Date()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

id Date.debugDescription.getter()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, *v0);
  id v2 = objc_msgSend(v1, sel_description);

  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

uint64_t Date.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

id static Date._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id result = objc_msgSend(a1, sel_timeIntervalSinceReferenceDate);
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t static Date._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  objc_msgSend(a1, sel_timeIntervalSinceReferenceDate);
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = 0;
  return 1;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Date@<X0>(id result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    id result = objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    *a2 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NSDate._toCustomAnyHashable()()
{
  objc_msgSend(v0, sel_timeIntervalSinceReferenceDate);
  lazy protocol witness table accessor for type Date and conformance Date();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSDate()
{
  id v1 = *v0;
  objc_msgSend(v1, sel_timeIntervalSinceReferenceDate);
  lazy protocol witness table accessor for type Date and conformance Date();
  AnyHashable.init<A>(_:)();
}

void Date.customPlaygroundQuickLook.getter(uint64_t a1@<X8>)
{
  double v3 = *v1;
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), sel_init);
  objc_msgSend(v4, sel_setDateStyle_, 2);
  objc_msgSend(v4, sel_setTimeStyle_, 1);
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v3);
  id v6 = objc_msgSend(v4, sel_stringFromDate_, v5);

  id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 32) = 0;
}

double static Date.validCalendarRange.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = -2.11845067e11;
  *a1 = xmmword_182107910;
  return result;
}

double Date.capped.getter@<D0>(double *a1@<X8>)
{
  double v2 = *v1;
  if (*v1 > 1.59271755e13) {
    double v2 = 1.59271755e13;
  }
  double result = fmax(v2, -2.11845067e11);
  *a1 = result;
  return result;
}

BOOL Date.isValidForEnumeration.getter()
{
  return *v0 <= 1.59271755e13 && *v0 >= -2.11845067e11;
}

unint64_t instantiation function for generic protocol witness table for Date(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Date and conformance Date();
  a1[2] = lazy protocol witness table accessor for type Date and conformance Date();
  a1[3] = lazy protocol witness table accessor for type Date and conformance Date();
  unint64_t result = lazy protocol witness table accessor for type Date and conformance Date();
  a1[4] = result;
  return result;
}

uint64_t associated type witness table accessor for Strideable.Stride : Comparable in Date()
{
  return MEMORY[0x1E4FBB3F8];
}

uint64_t associated type witness table accessor for Strideable.Stride : SignedNumeric in Date()
{
  return MEMORY[0x1E4FBB428];
}

double protocol witness for Strideable.distance(to:) in conformance Date@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 - *v2;
  *a2 = result;
  return result;
}

double *protocol witness for static Strideable._step(after:from:by:) in conformance Date(double *result, uint64_t a2, char a3, double *a4, double *a5, double *a6)
{
  double v6 = *a6;
  if (a3)
  {
    double v8 = v6 + *a4;
    goto LABEL_5;
  }
  if (!__OFADD__(a2++, 1))
  {
    double v8 = *a5 + v6 * (double)a2;
LABEL_5:
    *double result = v8;
    return (double *)a2;
  }
  __break(1u);
  return result;
}

Swift::Int ICUDateIntervalFormatter.Signature.hashValue.getter()
{
  memcpy(__dst, v0, sizeof(__dst));
  Swift::UInt v1 = v0[352];
  Hasher.init(_seed:)();
  Locale.Components.hash(into:)((uint64_t)v4);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ICUDateIntervalFormatter.Signature(uint64_t a1)
{
  memcpy(v5, v1, sizeof(v5));
  Swift::UInt v3 = v1[352];
  Locale.Components.hash(into:)(a1);
  Hasher._combine(_:)(v3);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUDateIntervalFormatter.Signature()
{
  memcpy(__dst, v0, sizeof(__dst));
  Swift::UInt v1 = v0[352];
  Hasher.init(_seed:)();
  Locale.Components.hash(into:)((uint64_t)v4);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t ICUDateIntervalFormatter.__deallocating_deinit()
{
  udtitvfmt_close();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICUDateIntervalFormatter()
{
  return self;
}

uint64_t specialized static ICUDateIntervalFormatter.Signature.== infix(_:_:)(unsigned __int8 *__src, uint64_t a2)
{
  memcpy(__dst, __src, 0x160uLL);
  int v4 = __src[352];
  uint64_t v5 = *((void *)__src + 45);
  uint64_t v6 = *((void *)__src + 46);
  uint64_t v7 = *((void *)__src + 47);
  uint64_t v8 = *((void *)__src + 48);
  memcpy(v17, (const void *)a2, sizeof(v17));
  int v9 = *(unsigned __int8 *)(a2 + 352);
  uint64_t v10 = *(void *)(a2 + 360);
  uint64_t v11 = *(void *)(a2 + 368);
  uint64_t v12 = *(void *)(a2 + 376);
  uint64_t v13 = *(void *)(a2 + 384);
  BOOL v14 = specialized static Locale.Components.== infix(_:_:)((uint64_t)__dst, (uint64_t)v17);
  uint64_t result = 0;
  if (v14 && v4 == v9)
  {
    if (v5 == v10 && v6 == v11 || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v16 & 1) != 0))
    {
      if (v7 == v12 && v8 == v13)
      {
        return 1;
      }
      else
      {
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
  }
  return result;
}

uint64_t specialized static ICUDateIntervalFormatter.formatter(for:)(uint64_t a1)
{
  void (*v12)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  os_unfair_lock_s *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  unint64_t v32;
  unint64_t v33;
  os_unfair_lock_s *v34;
  os_unfair_lock_s *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  char v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t result;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  const void *v62;
  uint64_t v63;
  int64_t v64;
  unint64_t v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  os_unfair_lock_s *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  os_unfair_lock_s *v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  __int16 v128;
  uint64_t v129[49];
  uint64_t v130[44];
  unsigned char v131[392];
  uint64_t v132[44];
  uint64_t v133[49];
  uint64_t v134[49];
  char v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  __int16 v139;
  int v140;
  __int16 v141;
  uint64_t v142;
  __int16 v143;
  long long v144;
  long long v145;
  long long v146;
  __int16 v147;
  uint64_t v148;

  long long v148 = *MEMORY[0x1E4F143B8];
  long long v1 = *(_OWORD *)(a1 + 64);
  uint64_t v144 = *(_OWORD *)(a1 + 48);
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v118 = *(void *)(a1 + 40);
  long long v120 = *(void *)(a1 + 24);
  long long v145 = v1;
  long long v146 = *(_OWORD *)(a1 + 80);
  long long v147 = *(_WORD *)(a1 + 96);
  v134[0] = v2;
  v134[1] = v3;
  uint64_t v4 = Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)(v134);
  uint64_t v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v6 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6)
  {
    swift_bridgeObjectRelease();
    long long v135 = 3;
    long long v136 = 0;
    long long v137 = 50332931;
    long long v138 = 0;
    uint64_t v139 = 1;
    long long v140 = 591363;
    long long v141 = 513;
    long long v142 = 0;
    long long v143 = 3327;
    v134[0] = v2;
    v134[1] = v3;
    uint64_t v4 = Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)(v134);
  }
  uint64_t v123 = v4;
  int64_t v125 = v5;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 64);
  swift_unknownObjectRetain();
  uint64_t v9 = v8(ObjectType, v3);
  Locale.Components.init(identifier:)(v9, v10, v134);
  v133[0] = v2;
  v133[1] = v3;
  Locale.Components.applyPreferencesOverride(_:)(v133);
  swift_unknownObjectRelease();
  memcpy(v132, v134, sizeof(v132));
  uint64_t v11 = swift_getObjectType();
  uint64_t v12 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v118 + 24);
  outlined retain of Locale.Components(v132);
  swift_unknownObjectRetain();
  v12(v134, v11, v118);
  swift_unknownObjectRelease();
  LOBYTE(v12) = v134[0];
  uint64_t v13 = swift_getObjectType();
  BOOL v14 = *(uint64_t (**)(uint64_t, uint64_t))(v120 + 32);
  swift_unknownObjectRetain();
  objc_super v15 = v14(v13, v120);
  uint64_t v17 = v16;
  swift_unknownObjectRelease();
  memcpy(v133, v132, 0x160uLL);
  uint64_t v121 = (char)v12;
  LOBYTE(v133[44]) = (_BYTE)v12;
  v133[45] = v15;
  v133[46] = v17;
  v133[47] = v123;
  v133[48] = v125;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  int v18 = (os_unfair_lock_s *)unk_1E8EDF4E0;
  uint64_t v114 = static ICUDateIntervalFormatter.cache;
  unsigned int v19 = memcpy(v131, v133, sizeof(v131));
  MEMORY[0x1F4188790](v19);
  swift_retain_n();
  os_unfair_lock_lock(v18 + 6);
  partial apply for specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)&v18[4], v134);
  uint64_t v119 = v18 + 6;
  os_unfair_lock_unlock(v18 + 6);
  swift_release();
  unsigned int v20 = v134[0];
  if (v134[0] != 1)
  {
    outlined release of Locale.Components(v132);
LABEL_31:
    swift_release();
    outlined release of ICUDateIntervalFormatter.Signature(v133);
    return v20;
  }
  uint64_t v109 = v18 + 4;
  type metadata accessor for ICUDateIntervalFormatter();
  BOOL v108 = swift_allocObject();
  uint64_t v110 = v132[14];
  int64_t v113 = v132[26];
  uint64_t v112 = v132[27];
  uint64_t v111 = v132[28];
  uint64_t v92 = v132[1];
  unint64_t v93 = v132[0];
  v130[0] = v132[0];
  v130[1] = v132[1];
  uint64_t v90 = v132[3];
  uint64_t v91 = v132[2];
  v130[2] = v132[2];
  v130[3] = v132[3];
  uint64_t v88 = v132[5];
  uint64_t v89 = v132[4];
  v130[4] = v132[4];
  v130[5] = v132[5];
  long long v86 = v132[7];
  uint64_t v87 = v132[6];
  v130[6] = v132[6];
  v130[7] = v132[7];
  uint64_t v84 = v132[9];
  long long v85 = v132[8];
  v130[8] = v132[8];
  v130[9] = v132[9];
  long long v82 = v132[11];
  long long v83 = v132[10];
  v130[10] = v132[10];
  v130[11] = v132[11];
  LOBYTE(v130[12]) = v121;
  uint64_t v94 = v132[13];
  v130[13] = v132[13];
  v130[14] = v132[14];
  unint64_t v105 = v132[16];
  char v106 = v132[15];
  v130[15] = v132[15];
  v130[16] = v132[16];
  uint64_t v103 = v132[18];
  unint64_t v104 = v132[17];
  v130[17] = v132[17];
  v130[18] = v132[18];
  uint64_t v101 = v132[20];
  Swift::Int v102 = v132[19];
  v130[19] = v132[19];
  v130[20] = v132[20];
  uint64_t v99 = v132[22];
  uint64_t v100 = v132[21];
  v130[21] = v132[21];
  v130[22] = v132[22];
  unint64_t v97 = v132[24];
  int64_t v98 = v132[23];
  v130[23] = v132[23];
  v130[24] = v132[24];
  uint64_t v95 = BYTE1(v132[25]);
  uint64_t v96 = v132[25];
  LOWORD(v130[25]) = v132[25];
  v130[26] = v132[26];
  v130[27] = v132[27];
  v130[28] = v132[28];
  v130[29] = v132[29];
  unint64_t v107 = v132[29];
  uint64_t v21 = v132[31];
  uint64_t v75 = v132[30];
  v130[30] = v132[30];
  v130[31] = v132[31];
  uint64_t v74 = v132[32];
  v130[32] = v132[32];
  v130[33] = v132[33];
  BOOL v81 = v132[33];
  uint64_t v73 = v132[34];
  v130[34] = v132[34];
  v130[35] = v132[35];
  uint64_t v80 = v132[35];
  uint64_t v72 = v132[36];
  v130[36] = v132[36];
  v130[37] = v132[37];
  uint64_t v79 = v132[37];
  int64_t v71 = v132[38];
  v130[38] = v132[38];
  v130[39] = v132[39];
  uint64_t v78 = v132[39];
  id v70 = v132[40];
  unsigned char v130[40] = v132[40];
  v130[41] = v132[41];
  uint64_t v77 = v132[41];
  uint64_t v69 = v132[42];
  v130[42] = v132[42];
  v130[43] = v132[43];
  int64_t v76 = v132[43];
  memcpy(v134, v130, 0x160uLL);
  outlined retain of Locale.Components(v132);
  outlined retain of ICUDateIntervalFormatter.Signature(v133);
  Locale.Components.icuIdentifier.getter();
  swift_bridgeObjectRetain();
  unsigned int v22 = specialized _copyCollectionToContiguousArray<A>(_:)(v15, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  int v23 = specialized _copyCollectionToContiguousArray<A>(_:)(v123, v125);
  swift_bridgeObjectRelease();
  outlined release of ICUDateIntervalFormatter.Signature(v133);
  int v24 = v23[2];
  if (v24 >> 31)
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v123 = v21;
  uint64_t v21 = v22[2];
  if (v21 >> 31)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  int64_t v125 = (unint64_t)v18;
  String.utf8CString.getter();
  int v25 = udtitvfmt_open();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v33 = (unint64_t)v18;
  uint64_t v34 = v18 + 6;
  uint64_t v35 = v18 + 4;
  unint64_t v36 = v114;
  if (!v25) {
    goto LABEL_18;
  }
  uint64_t v37 = v108;
  *(void *)(v108 + 16) = v25;
  udtitvfmt_setAttribute();
  specialized UErrorCode.checkSuccessAndLogError(_:)(U_ZERO_ERROR);
  outlined release of Locale.Components(v130);
  while (1)
  {
    swift_retain();
    os_unfair_lock_lock(v34);
    int v24 = *(void *)(v33 + 16);
    memcpy(v134, v131, sizeof(v134));
    if (v36 >= *(void *)(v24 + 16)) {
      swift_bridgeObjectRetain();
    }
    else {
      *(void *)&v35->_os_unfair_lock_opaque = MEMORY[0x1E4FBC868];
    }
    outlined retain of ICUDateIntervalFormatter.Signature(v134);
    long long v38 = v37;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v126 = *(void *)&v35->_os_unfair_lock_opaque;
    unint64_t v40 = *(void *)&v35->_os_unfair_lock_opaque;
    *(void *)&v35->_os_unfair_lock_opaque = 0x8000000000000000;
    uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)v134);
    uint64_t v42 = *(void *)(v40 + 16);
    uint64_t v43 = (v41 & 1) == 0;
    uint64_t v44 = v42 + v43;
    if (!__OFADD__(v42, v43)) {
      break;
    }
LABEL_34:
    __break(1u);
    swift_once();
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static ICUError.logger);
    uint64_t v27 = Logger.logObject.getter();
    unint64_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v29 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      v134[0] = v30;
      *(_DWORD *)unint64_t v29 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x80000001823A9B60, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2080;
      uint64_t v31 = ICUError.debugDescription.getter((UErrorCode)v21);
      v129[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v31, v32, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_181795000, v27, v28, "%s. Error: %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x185309510](v30, -1, -1);
      MEMORY[0x185309510](v29, -1, -1);
    }

    uint64_t v33 = v125;
    uint64_t v34 = v119;
    uint64_t v35 = v109;
    unint64_t v36 = v114;
    if (v24) {
      udtitvfmt_close();
    }
LABEL_18:
    v134[0] = v93;
    v134[1] = v92;
    v134[2] = v91;
    v134[3] = v90;
    v134[4] = v89;
    v134[5] = v88;
    v134[6] = v87;
    v134[7] = v86;
    v134[8] = v85;
    v134[9] = v84;
    v134[10] = v83;
    v134[11] = v82;
    LOBYTE(v134[12]) = v121;
    v134[13] = v94;
    v134[14] = v110;
    *(_DWORD *)((char *)&v134[12] + 1) = v126;
    HIDWORD(v134[12]) = *(_DWORD *)((char *)&v126 + 3);
    v134[15] = v106;
    v134[16] = v105;
    v134[17] = v104;
    v134[18] = v103;
    v134[19] = v102;
    v134[20] = v101;
    v134[21] = v100;
    v134[22] = v99;
    v134[23] = v98;
    v134[24] = v97;
    LOBYTE(v134[25]) = v96;
    BYTE1(v134[25]) = v95;
    HIWORD(v134[25]) = v128;
    *(_DWORD *)((char *)&v134[25] + 2) = v127;
    v134[26] = v113;
    v134[27] = v112;
    v134[28] = v111;
    v134[29] = v107;
    v134[30] = v75;
    v134[31] = v123;
    v134[32] = v74;
    v134[33] = v81;
    v134[34] = v73;
    v134[35] = v80;
    v134[36] = v72;
    v134[37] = v79;
    v134[38] = v71;
    v134[39] = v78;
    unsigned char v134[40] = v70;
    v134[41] = v77;
    v134[42] = v69;
    v134[43] = v76;
    outlined release of Locale.Components(v134);
    swift_deallocPartialClassInstance();
    uint64_t v37 = 0;
  }
  char v45 = v41;
  if (*(void *)(v40 + 24) < v44)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, isUniquelyReferenced_nonNull_native);
    int64_t v46 = v126;
    unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)v134);
    if ((v45 & 1) != (v48 & 1)) {
      goto LABEL_75;
    }
    uint64_t v21 = v47;
    if (v45) {
      goto LABEL_26;
    }
LABEL_29:
    uint64_t v51 = v21;
    unsigned int v20 = v38;
    specialized _NativeDictionary._insert(at:key:value:)(v51, v134, v38, (void *)v46);
    outlined retain of ICUDateIntervalFormatter.Signature(v134);
    goto LABEL_30;
  }
  if (isUniquelyReferenced_nonNull_native)
  {
    int64_t v46 = v40;
    if ((v41 & 1) == 0) {
      goto LABEL_29;
    }
LABEL_26:
    uint64_t v49 = *(void *)(v46 + 56);
    uint64_t v50 = 8 * v21;
    swift_release();
    unsigned int v20 = v38;
    *(void *)(v49 + v50) = v38;
LABEL_30:
    *(void *)(v125 + 16) = v46;
    swift_bridgeObjectRelease();
    outlined release of ICUDateIntervalFormatter.Signature(v134);
    os_unfair_lock_unlock(v34);
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of ICUDateIntervalFormatter??(1);
    outlined release of Locale.Components(v132);
    goto LABEL_31;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateIntervalFormatter.Signature, ICUDateIntervalFormatter?>);
  unint64_t v53 = static _DictionaryStorage.copy(original:)();
  int64_t v46 = v53;
  if (!*(void *)(v40 + 16))
  {
LABEL_71:
    swift_bridgeObjectRelease();
    if ((v45 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  char v54 = (char *)(v53 + 64);
  uint64_t v116 = (char *)(v40 + 64);
  unint64_t v55 = (unint64_t)((1 << *(unsigned char *)(v46 + 32)) + 63) >> 6;
  if (v46 != v40 || v54 >= &v116[8 * v55]) {
    memmove(v54, v116, 8 * v55);
  }
  BOOL v56 = 0;
  *(void *)(v46 + 16) = *(void *)(v40 + 16);
  uint64_t v57 = 1 << *(unsigned char *)(v40 + 32);
  uint64_t v58 = -1;
  if (v57 < 64) {
    uint64_t v58 = ~(-1 << v57);
  }
  uint64_t v59 = v58 & *(void *)(v40 + 64);
  uint64_t v115 = (unint64_t)(v57 + 63) >> 6;
  while (1)
  {
    if (v59)
    {
      uint64_t v122 = (v59 - 1) & v59;
      uint64_t v124 = v56;
      id v60 = __clz(__rbit64(v59)) | (v56 << 6);
      goto LABEL_43;
    }
    uint64_t v64 = v56 + 1;
    if (__OFADD__(v56, 1))
    {
      __break(1u);
      goto LABEL_74;
    }
    if (v64 >= v115) {
      goto LABEL_71;
    }
    int64_t v65 = *(void *)&v116[8 * v64];
    uint64_t v66 = v56 + 1;
    if (!v65)
    {
      uint64_t v66 = v64 + 1;
      if (v64 + 1 >= v115) {
        goto LABEL_71;
      }
      int64_t v65 = *(void *)&v116[8 * v66];
      if (!v65)
      {
        uint64_t v66 = v64 + 2;
        if (v64 + 2 >= v115) {
          goto LABEL_71;
        }
        int64_t v65 = *(void *)&v116[8 * v66];
        if (!v65)
        {
          uint64_t v66 = v64 + 3;
          if (v64 + 3 >= v115) {
            goto LABEL_71;
          }
          int64_t v65 = *(void *)&v116[8 * v66];
          if (!v65)
          {
            uint64_t v66 = v64 + 4;
            if (v64 + 4 >= v115) {
              goto LABEL_71;
            }
            int64_t v65 = *(void *)&v116[8 * v66];
            if (!v65)
            {
              uint64_t v66 = v64 + 5;
              if (v64 + 5 >= v115) {
                goto LABEL_71;
              }
              int64_t v65 = *(void *)&v116[8 * v66];
              if (!v65)
              {
                uint64_t v66 = v64 + 6;
                if (v64 + 6 >= v115) {
                  goto LABEL_71;
                }
                int64_t v65 = *(void *)&v116[8 * v66];
                if (!v65)
                {
                  uint64_t v66 = v64 + 7;
                  if (v64 + 7 >= v115) {
                    goto LABEL_71;
                  }
                  int64_t v65 = *(void *)&v116[8 * v66];
                  if (!v65)
                  {
                    uint64_t v66 = v64 + 8;
                    if (v64 + 8 >= v115) {
                      goto LABEL_71;
                    }
                    int64_t v65 = *(void *)&v116[8 * v66];
                    if (!v65) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_70:
    uint64_t v122 = (v65 - 1) & v65;
    uint64_t v124 = v66;
    id v60 = __clz(__rbit64(v65)) + (v66 << 6);
LABEL_43:
    char v61 = 392 * v60;
    unsigned __int8 v62 = (const void *)(*(void *)(v40 + 48) + 392 * v60);
    memcpy(v129, v62, sizeof(v129));
    unint64_t v63 = 8 * v60;
    uint64_t v117 = *(void *)(*(void *)(v40 + 56) + v63);
    memmove((void *)(*(void *)(v46 + 48) + v61), v62, 0x188uLL);
    *(void *)(*(void *)(v46 + 56) + v63) = v117;
    outlined retain of ICUDateIntervalFormatter.Signature(v129);
    swift_retain();
    uint64_t v34 = v119;
    uint64_t v59 = v122;
    BOOL v56 = v124;
  }
  int64_t v67 = v64 + 9;
  if (v67 >= v115) {
    goto LABEL_71;
  }
  uint64_t v68 = v46;
  int64_t v65 = *(void *)&v116[8 * v67];
  if (v65)
  {
    uint64_t v66 = v67;
    goto LABEL_70;
  }
  while (1)
  {
    uint64_t v66 = v67 + 1;
    if (__OFADD__(v67, 1)) {
      break;
    }
    int64_t v46 = v68;
    uint64_t v34 = v119;
    if (v66 >= v115) {
      goto LABEL_71;
    }
    int64_t v65 = *(void *)&v116[8 * v66];
    ++v67;
    if (v65) {
      goto LABEL_70;
    }
  }
LABEL_74:
  __break(1u);
LABEL_75:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t destroy for ICUDateIntervalFormatter.Signature(void *a1)
{
  if (a1[1])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[5])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[9])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[14])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[18])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[22])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[27])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[31])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[35])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();
  if (a1[41])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ICUDateIntervalFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = *(void *)(a2 + 40);
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    long long v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    uint64_t v8 = *(void *)(a2 + 72);
    if (v8) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  uint64_t v6 = *(void *)(a2 + 40);
  if (!v6) {
    goto LABEL_6;
  }
LABEL_3:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = *(void *)(a2 + 72);
  if (v8)
  {
LABEL_4:
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v8;
    uint64_t v9 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
LABEL_7:
  long long v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v12;
LABEL_8:
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v13 = *(void *)(a2 + 112);
  if (v13)
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v13;
    uint64_t v14 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v15 = *(void *)(a2 + 144);
    if (v15) {
      goto LABEL_10;
    }
LABEL_13:
    long long v20 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v20;
    uint64_t v17 = *(void *)(a2 + 176);
    if (v17) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  long long v19 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v19;
  uint64_t v15 = *(void *)(a2 + 144);
  if (!v15) {
    goto LABEL_13;
  }
LABEL_10:
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v15;
  uint64_t v16 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = *(void *)(a2 + 176);
  if (v17)
  {
LABEL_11:
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = v17;
    uint64_t v18 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
LABEL_14:
  long long v21 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v21;
LABEL_15:
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  uint64_t v22 = *(void *)(a2 + 216);
  if (v22)
  {
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a1 + 216) = v22;
    uint64_t v23 = *(void *)(a2 + 232);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(void *)(a1 + 232) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v24 = *(void *)(a2 + 248);
    if (v24) {
      goto LABEL_17;
    }
LABEL_20:
    long long v29 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v29;
    uint64_t v26 = *(void *)(a2 + 280);
    if (v26) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  long long v28 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v28;
  uint64_t v24 = *(void *)(a2 + 248);
  if (!v24) {
    goto LABEL_20;
  }
LABEL_17:
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v24;
  uint64_t v25 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = *(void *)(a2 + 280);
  if (v26)
  {
LABEL_18:
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 280) = v26;
    uint64_t v27 = *(void *)(a2 + 296);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(void *)(a1 + 296) = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_22;
  }
LABEL_21:
  long long v30 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v30;
LABEL_22:
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  uint64_t v31 = *(void *)(a2 + 328);
  swift_unknownObjectRetain();
  if (v31)
  {
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(void *)(a1 + 328) = v31;
    uint64_t v32 = *(void *)(a2 + 344);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(void *)(a1 + 344) = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v33 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v33;
  }
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  uint64_t v34 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v34;
  uint64_t v35 = *(void *)(a2 + 376);
  uint64_t v36 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = v35;
  *(void *)(a1 + 384) = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ICUDateIntervalFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1);
      long long v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
  }
  uint64_t v7 = (_OWORD *)(a1 + 32);
  uint64_t v8 = (_OWORD *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v9)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Script(a1 + 32);
      long long v10 = *(_OWORD *)(a2 + 48);
      *uint64_t v7 = *v8;
      *(_OWORD *)(a1 + 48) = v10;
    }
  }
  else if (v9)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 48);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 48) = v11;
  }
  long long v12 = (_OWORD *)(a1 + 64);
  uint64_t v13 = (_OWORD *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v14)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Region(a1 + 64);
      long long v15 = *(_OWORD *)(a2 + 80);
      *long long v12 = *v13;
      *(_OWORD *)(a1 + 80) = v15;
    }
  }
  else if (v14)
  {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v16 = *(_OWORD *)(a2 + 80);
    *long long v12 = *v13;
    *(_OWORD *)(a1 + 80) = v16;
  }
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v17 = (_OWORD *)(a1 + 104);
  uint64_t v18 = (_OWORD *)(a2 + 104);
  uint64_t v19 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112))
  {
    if (v19)
    {
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Collation(a1 + 104);
      long long v20 = *(_OWORD *)(a2 + 120);
      *uint64_t v17 = *v18;
      *(_OWORD *)(a1 + 120) = v20;
    }
  }
  else if (v19)
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v21 = *(_OWORD *)(a2 + 120);
    *uint64_t v17 = *v18;
    *(_OWORD *)(a1 + 120) = v21;
  }
  uint64_t v22 = (_OWORD *)(a1 + 136);
  uint64_t v23 = (_OWORD *)(a2 + 136);
  uint64_t v24 = *(void *)(a2 + 144);
  if (*(void *)(a1 + 144))
  {
    if (v24)
    {
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Currency(a1 + 136);
      long long v25 = *(_OWORD *)(a2 + 152);
      *uint64_t v22 = *v23;
      *(_OWORD *)(a1 + 152) = v25;
    }
  }
  else if (v24)
  {
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v26 = *(_OWORD *)(a2 + 152);
    *uint64_t v22 = *v23;
    *(_OWORD *)(a1 + 152) = v26;
  }
  uint64_t v27 = (_OWORD *)(a1 + 168);
  long long v28 = (_OWORD *)(a2 + 168);
  uint64_t v29 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176))
  {
    if (v29)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.NumberingSystem(a1 + 168);
      long long v30 = *(_OWORD *)(a2 + 184);
      *uint64_t v27 = *v28;
      *(_OWORD *)(a1 + 184) = v30;
    }
  }
  else if (v29)
  {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v31 = *(_OWORD *)(a2 + 184);
    *uint64_t v27 = *v28;
    *(_OWORD *)(a1 + 184) = v31;
  }
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(unsigned char *)(a1 + 201) = *(unsigned char *)(a2 + 201);
  uint64_t v32 = (_OWORD *)(a1 + 208);
  long long v33 = (_OWORD *)(a2 + 208);
  uint64_t v34 = *(void *)(a2 + 216);
  if (*(void *)(a1 + 216))
  {
    if (v34)
    {
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.MeasurementSystem(a1 + 208);
      long long v35 = *(_OWORD *)(a2 + 224);
      *uint64_t v32 = *v33;
      *(_OWORD *)(a1 + 224) = v35;
    }
  }
  else if (v34)
  {
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v36 = *(_OWORD *)(a2 + 224);
    *uint64_t v32 = *v33;
    *(_OWORD *)(a1 + 224) = v36;
  }
  uint64_t v37 = (_OWORD *)(a1 + 240);
  long long v38 = (_OWORD *)(a2 + 240);
  uint64_t v39 = *(void *)(a2 + 248);
  if (*(void *)(a1 + 248))
  {
    if (v39)
    {
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Region(a1 + 240);
      long long v40 = *(_OWORD *)(a2 + 256);
      *uint64_t v37 = *v38;
      *(_OWORD *)(a1 + 256) = v40;
    }
  }
  else if (v39)
  {
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v41 = *(_OWORD *)(a2 + 256);
    *uint64_t v37 = *v38;
    *(_OWORD *)(a1 + 256) = v41;
  }
  uint64_t v42 = (_OWORD *)(a1 + 272);
  uint64_t v43 = (_OWORD *)(a2 + 272);
  uint64_t v44 = *(void *)(a2 + 280);
  if (*(void *)(a1 + 280))
  {
    if (v44)
    {
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Subdivision(a1 + 272);
      long long v45 = *(_OWORD *)(a2 + 288);
      *uint64_t v42 = *v43;
      *(_OWORD *)(a1 + 288) = v45;
    }
  }
  else if (v44)
  {
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v46 = *(_OWORD *)(a2 + 288);
    *uint64_t v42 = *v43;
    *(_OWORD *)(a1 + 288) = v46;
  }
  uint64_t v47 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 312) = v47;
  uint64_t v48 = (_OWORD *)(a1 + 320);
  uint64_t v49 = (_OWORD *)(a2 + 320);
  uint64_t v50 = *(void *)(a2 + 328);
  if (*(void *)(a1 + 328))
  {
    if (v50)
    {
      *(void *)(a1 + 320) = *(void *)(a2 + 320);
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Variant(a1 + 320);
      long long v51 = *(_OWORD *)(a2 + 336);
      *uint64_t v48 = *v49;
      *(_OWORD *)(a1 + 336) = v51;
    }
  }
  else if (v50)
  {
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v52 = *(_OWORD *)(a2 + 336);
    *uint64_t v48 = *v49;
    *(_OWORD *)(a1 + 336) = v52;
  }
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Locale.Collation(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Locale.Currency(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Locale.NumberingSystem(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Locale.MeasurementSystem(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Locale.Subdivision(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Locale.Variant(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy392_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x188uLL);
}

uint64_t assignWithTake for ICUDateIntervalFormatter.Signature(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Locale.LanguageCode(a1);
  }
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_6:
  if (*(void *)(a1 + 40))
  {
    uint64_t v7 = *(void *)(a2 + 40);
    if (v7)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v7;
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of Locale.Script(a1 + 32);
  }
  long long v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
LABEL_11:
  if (*(void *)(a1 + 72))
  {
    uint64_t v10 = *(void *)(a2 + 72);
    if (v10)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v10;
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    outlined destroy of Locale.Region(a1 + 64);
  }
  long long v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v12;
LABEL_16:
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  if (*(void *)(a1 + 112))
  {
    uint64_t v13 = *(void *)(a2 + 112);
    if (v13)
    {
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = v13;
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(a2 + 128);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = v14;
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    outlined destroy of Locale.Collation(a1 + 104);
  }
  long long v15 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v15;
LABEL_21:
  if (*(void *)(a1 + 144))
  {
    uint64_t v16 = *(void *)(a2 + 144);
    if (v16)
    {
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = v16;
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v17;
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    outlined destroy of Locale.Currency(a1 + 136);
  }
  long long v18 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v18;
LABEL_26:
  if (*(void *)(a1 + 176))
  {
    uint64_t v19 = *(void *)(a2 + 176);
    if (v19)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v19;
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v20;
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
    outlined destroy of Locale.NumberingSystem(a1 + 168);
  }
  long long v21 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v21;
LABEL_31:
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  if (*(void *)(a1 + 216))
  {
    uint64_t v22 = *(void *)(a2 + 216);
    if (v22)
    {
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = v22;
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void *)(a2 + 232);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = v23;
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    outlined destroy of Locale.MeasurementSystem(a1 + 208);
  }
  long long v24 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v24;
LABEL_36:
  if (*(void *)(a1 + 248))
  {
    uint64_t v25 = *(void *)(a2 + 248);
    if (v25)
    {
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = v25;
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)(a2 + 264);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(void *)(a1 + 264) = v26;
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
    outlined destroy of Locale.Region(a1 + 240);
  }
  long long v27 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v27;
LABEL_41:
  if (*(void *)(a1 + 280))
  {
    uint64_t v28 = *(void *)(a2 + 280);
    if (v28)
    {
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 280) = v28;
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(a2 + 296);
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      *(void *)(a1 + 296) = v29;
      swift_bridgeObjectRelease();
      goto LABEL_46;
    }
    outlined destroy of Locale.Subdivision(a1 + 272);
  }
  long long v30 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v30;
LABEL_46:
  uint64_t v31 = *(void *)(a2 + 312);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_unknownObjectRelease();
  *(void *)(a1 + 312) = v31;
  if (!*(void *)(a1 + 328))
  {
LABEL_50:
    long long v34 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v34;
    goto LABEL_51;
  }
  uint64_t v32 = *(void *)(a2 + 328);
  if (!v32)
  {
    outlined destroy of Locale.Variant(a1 + 320);
    goto LABEL_50;
  }
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = v32;
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v33;
  swift_bridgeObjectRelease();
LABEL_51:
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  uint64_t v35 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v35;
  swift_bridgeObjectRelease();
  uint64_t v36 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v36;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUDateIntervalFormatter.Signature(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 392)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 368);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ICUDateIntervalFormatter.Signature(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 392) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 368) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 392) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ICUDateIntervalFormatter.Signature()
{
  return &type metadata for ICUDateIntervalFormatter.Signature;
}

unint64_t lazy protocol witness table accessor for type ICUDateIntervalFormatter.Signature and conformance ICUDateIntervalFormatter.Signature()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUDateIntervalFormatter.Signature and conformance ICUDateIntervalFormatter.Signature;
  if (!lazy protocol witness table cache variable for type ICUDateIntervalFormatter.Signature and conformance ICUDateIntervalFormatter.Signature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ICUDateIntervalFormatter.Signature and conformance ICUDateIntervalFormatter.Signature);
  }
  return result;
}

uint64_t specialized Range.init(uncheckedBounds:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  return result;
}

uint64_t static AttributedString.Runs.Run.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v7 = a1[1];
  uint64_t v8 = *a2;
  uint64_t v9 = *a1;
  uint64_t v6 = a2[1];
  uint64_t v2 = BigString.Index.utf8Offset.getter();
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v4 = result - v2;
  if (__OFSUB__(result, v2))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v5 = BigString.Index.utf8Offset.getter();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(result, v5))
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (v4 != result - v5 || (specialized static Dictionary<>.== infix(_:_:)(v9, v8) & 1) == 0) {
    return 0;
  }

  return specialized static Set.== infix(_:_:)(v7, v6);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString.Runs.Run(uint64_t *a1, uint64_t *a2)
{
  uint64_t v7 = a1[1];
  uint64_t v8 = *a2;
  uint64_t v9 = *a1;
  uint64_t v6 = a2[1];
  uint64_t v2 = BigString.Index.utf8Offset.getter();
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v4 = result - v2;
  if (__OFSUB__(result, v2))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v5 = BigString.Index.utf8Offset.getter();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(result, v5))
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (v4 != result - v5 || (specialized static Dictionary<>.== infix(_:_:)(v9, v8) & 1) == 0) {
    return 0;
  }

  return specialized static Set.== infix(_:_:)(v7, v6);
}

uint64_t AttributedString.Runs.Run.description.getter()
{
  long long v1 = *(_OWORD *)(v0 + 32);
  long long v31 = *(_OWORD *)(v0 + 16);
  long long v32 = v1;
  long long v2 = *(_OWORD *)(v0 + 64);
  long long v33 = *(_OWORD *)(v0 + 48);
  long long v34 = v2;
  uint64_t v3 = *(_OWORD **)(v0 + 80);
  long long v4 = v3[2];
  long long v35 = v3[1];
  long long v36 = v4;
  long long v37 = v3[3];
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v21);
  uint64_t v5 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  outlined release of Locale((uint64_t)v22);
  swift_release();
  uint64_t v23 = v5;
  uint64_t v24 = v7;
  uint64_t v25 = v9;
  uint64_t v26 = v11;
  uint64_t v27 = v12;
  uint64_t v28 = v14;
  uint64_t v29 = v16;
  uint64_t v30 = v18;
  uint64_t v19 = AttributedString.Guts.description(in:)();
  swift_release();
  return v19;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.Runs.Run()
{
  long long v1 = *(_OWORD *)(v0 + 32);
  long long v31 = *(_OWORD *)(v0 + 16);
  long long v32 = v1;
  long long v2 = *(_OWORD *)(v0 + 64);
  long long v33 = *(_OWORD *)(v0 + 48);
  long long v34 = v2;
  uint64_t v3 = *(_OWORD **)(v0 + 80);
  long long v4 = v3[2];
  long long v35 = v3[1];
  long long v36 = v4;
  long long v37 = v3[3];
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v21);
  uint64_t v5 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  outlined release of Locale((uint64_t)v22);
  swift_release();
  uint64_t v23 = v5;
  uint64_t v24 = v7;
  uint64_t v25 = v9;
  uint64_t v26 = v11;
  uint64_t v27 = v12;
  uint64_t v28 = v14;
  uint64_t v29 = v16;
  uint64_t v30 = v18;
  uint64_t v19 = AttributedString.Guts.description(in:)();
  swift_release();
  return v19;
}

uint64_t AttributedString.Runs.Run.subscript.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*MEMORY[0x1E4FBC5F0] + *a1 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  AttributedString._AttributeStorage.subscript.getter(v6, v7, a2, a3);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t AttributedString.Runs.Run.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return AttributedString._AttributeStorage.subscript.getter(*v3, a1, a2, a3);
}

uint64_t assignWithCopy for AttributedString.Runs.Run(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AttributedString.Runs.Run(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_release();
  return a1;
}

Swift::String_optional __swiftcall _DarwinSearchPathsSequence.Iterator.next()()
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(unsigned int *)(v0 + 32);
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if (isStackAllocationSafe)
  {
    double v3 = MEMORY[0x1F4188790](isStackAllocationSafe);
    int v4 = MEMORY[0x185309710](v1, v18, v3);
    *(_DWORD *)(v0 + 32) = v4;
    if (v4)
    {
      id v5 = objc_msgSend(self, sel_defaultManager);
      id v6 = objc_msgSend(v5, sel_stringWithFileSystemRepresentation_length_, v18, strlen(v18));

      id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      uint64_t v9 = v8;
    }
    else
    {
      id v7 = 0;
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v10 = (const char *)swift_slowAlloc();
    int v11 = MEMORY[0x185309710](v1, v10);
    *(_DWORD *)(v0 + 32) = v11;
    if (v11)
    {
      id v12 = objc_msgSend(self, sel_defaultManager);
      id v13 = objc_msgSend(v12, sel_stringWithFileSystemRepresentation_length_, v10, strlen(v10));

      id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v9 = v14;
    }
    else
    {
      id v7 = 0;
      uint64_t v9 = 0;
    }
    MEMORY[0x185309510](v10, -1, -1);
  }
  uint64_t v15 = (uint64_t)v7;
  uint64_t v16 = v9;
  result.value._unint64_t object = v16;
  result.value._uint64_t countAndFlagsBits = v15;
  return result;
}

uint64_t _DarwinSearchPathsSequence.Iterator.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _DarwinSearchPathsSequence.Iterator()
{
  return self;
}

ValueMetadata *type metadata accessor for _DarwinSearchPathsSequence()
{
  return &type metadata for _DarwinSearchPathsSequence;
}

_DWORD *__swift_memcpy4_4(_DWORD *result, _DWORD *a2)
{
  *Swift::String_optional result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for _DarwinSearchPathsSequence.Iterator.State(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _DarwinSearchPathsSequence.Iterator.State(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)Swift::String_optional result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 4) = v3;
  return result;
}

void *type metadata accessor for _DarwinSearchPathsSequence.Iterator.State()
{
  return &unk_1ECA2F200;
}

unint64_t lazy protocol witness table accessor for type _DarwinSearchPathsSequence.Iterator and conformance _DarwinSearchPathsSequence.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type _DarwinSearchPathsSequence.Iterator and conformance _DarwinSearchPathsSequence.Iterator;
  if (!lazy protocol witness table cache variable for type _DarwinSearchPathsSequence.Iterator and conformance _DarwinSearchPathsSequence.Iterator)
  {
    type metadata accessor for _DarwinSearchPathsSequence.Iterator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DarwinSearchPathsSequence.Iterator and conformance _DarwinSearchPathsSequence.Iterator);
  }
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance _DarwinSearchPathsSequence.Iterator@<X0>(Swift::String_optional *a1@<X8>)
{
  Swift::String_optional v3 = _DarwinSearchPathsSequence.Iterator.next()();
  uint64_t result = v3.value._countAndFlagsBits;
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _DarwinSearchPathsSequence@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  type metadata accessor for _DarwinSearchPathsSequence.Iterator();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t result = sysdir_start_search_path_enumeration_private();
  *(_DWORD *)(v5 + 32) = result;
  *a1 = v5;
  return result;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance _DarwinSearchPathsSequence()
{
  return 2;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance _DarwinSearchPathsSequence()
{
  return specialized _copySequenceToContiguousArray<A>(_:)();
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _DarwinSearchPathsSequence(uint64_t *a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance _DarwinSearchPathsSequence@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation12_FTSSequenceVACOqd__Isgyrzo_AjBsAG_pAJRszr__lIetMgyrzo_Tp5(a1, a2);
}

id bestUnitForUsage<A>(_:dimension:usage:)(uint64_t a1, void *a2, unsigned __int8 *a3, uint64_t a4)
{
  void (*v8)(unsigned char *__return_ptr, uint64_t, void *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  void (*v19)(unsigned char *__return_ptr, uint64_t, void *);
  char v20;
  void (*v21)(uint64_t, void *);
  void (*v22)(uint64_t, void *);
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;
  id result;
  NSUnitVolume *v36;
  id v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  void *v41;
  unsigned char v42[12];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t vars8;

  long long v41 = a2;
  long long v46 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void **)(a1 + 8);
  int v6 = *a3;
  if (type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSUnitTemperature) == a4)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v19 = (void (*)(unsigned char *__return_ptr, uint64_t, void *))v5[57];
    swift_unknownObjectRetain();
    v19(&v42[4], ObjectType, v5);
    swift_unknownObjectRelease();
    uint64_t v20 = v42[4];
    if (v42[4] != 2)
    {
      uint64_t v23 = self;
      if (v20) {
        uint64_t v24 = objc_msgSend(v23, sel_celsius);
      }
      else {
        uint64_t v24 = objc_msgSend(v23, sel_fahrenheit);
      }
      long long v37 = v24;
      return (id)swift_dynamicCastUnknownClassUnconditional();
    }
    uint64_t v21 = (void (*)(uint64_t, void *))v5[8];
    swift_unknownObjectRetain();
    v21(ObjectType, v5);
    goto LABEL_8;
  }
  uint64_t v7 = swift_getObjectType();
  uint64_t v8 = (void (*)(unsigned char *__return_ptr, uint64_t, void *))v5[56];
  swift_unknownObjectRetain();
  v8(&v42[4], v7, v5);
  swift_unknownObjectRelease();
  uint64_t v9 = v43;
  if (!v43)
  {
    uint64_t v22 = (void (*)(uint64_t, void *))v5[8];
    swift_unknownObjectRetain();
    v22(v7, v5);
LABEL_8:
    swift_unknownObjectRelease();
    goto LABEL_12;
  }
  uint64_t v39 = v6;
  long long v40 = a4;
  uint64_t v10 = *(void *)&v42[4];
  int v11 = v44;
  id v12 = v45;
  id v13 = (uint64_t (*)(uint64_t, void *))v5[8];
  swift_unknownObjectRetain();
  uint64_t v14 = v13(v7, v5);
  uint64_t v16 = v15;
  uint64_t v17 = swift_unknownObjectRelease();
  *(void *)&v42[4] = 0;
  uint64_t v43 = 0;
  MEMORY[0x1F4188790](v17);
  closure #1 in static Locale.identifierWithKeywordValue(_:key:value:)((uint64_t)&v38, 158, v14, v16, 29549, 0xE200000000000000, v11, v12, (uint64_t *)&v42[4]);
  if (v43) {
    swift_bridgeObjectRelease();
  }
  outlined consume of Locale.LanguageCode?(v10, v9);
  LOBYTE(v6) = v39;
LABEL_12:
  *(void *)uint64_t v42 = 0;
  uint64_t v25 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_icuType);
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v29 = v28;

    uint64_t v30 = Usage.rawValue.getter(v6);
    long long v32 = v31;
    if (v29)
    {
      if ((v27 == (id)0x796772656E65 && v29 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (v30 == 0x746C7561666564 && v32 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_bridgeObjectRelease();
        long long v33 = 0;
      }
      else
      {
        long long v33 = 0;
      }
      goto LABEL_24;
    }
  }
  else
  {
    Usage.rawValue.getter(v6);
  }
  long long v33 = 1;
LABEL_24:
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  if ((v33 & 1) == 0)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
  }
  String.utf8CString.getter();
  uameasfmt_getUnitsForUsage();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  if (*(int *)v42 < 1)
  {
    long long v36 = getDimensionUnitFromUnitSpecifier(*(unsigned int *)&v42[4]);
    swift_bridgeObjectRelease();
    if (v36)
    {
      uint64_t result = (id)swift_dynamicCastUnknownClass();
      if (result) {
        return result;
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  long long v34 = v41;

  return v34;
}

id NSDimension.init(forLocale:)(long long *a1)
{
  long long v8 = *a1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v3 = objc_msgSend(ObjCClassFromMetadata, sel_baseUnit);
  static MeasurementFormatUnitUsage.general.getter(&v7);
  id v4 = bestUnitForUsage<A>(_:dimension:usage:)((uint64_t)&v8, v3, &v7, v1);
  swift_unknownObjectRelease();

  id result = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), sel_initWithDimension_, v4);
  if (result)
  {
    id v6 = result;

    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id NSUnitEnergy.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *a2;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v6 = objc_msgSend(ObjCClassFromMetadata, sel_baseUnit);
  id v7 = specialized bestUnitForUsage<A>(_:dimension:usage:)(v2, v3, v6, v4, &lazy cache variable for type metadata for NSUnitEnergy, (uint64_t)off_1E51F44D8);
  swift_unknownObjectRelease();

  long long v8 = self;
  id v9 = v7;
  id v10 = objc_msgSend(v8, sel_foodcalories);
  id v11 = v9;
  if (v10)
  {
    id v12 = v10;
    type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSUnitEnergy);
    id v11 = v9;
    char v13 = static NSObject.== infix(_:_:)();

    if ((v13 & 1) == 0) {
      goto LABEL_5;
    }
    id v11 = objc_msgSend(v8, sel_kilocalories);
  }

LABEL_5:
  id result = objc_msgSend(objc_allocWithZone((Class)ObjCClassFromMetadata), sel_initWithDimension_, v11);
  if (result)
  {
    id v15 = result;

    return v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id NSUnitMass.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  return NSUnitLength.init(forLocale:usage:)(a1, a2, &lazy cache variable for type metadata for NSUnitMass, (uint64_t)off_1E51F4530);
}

id NSUnitVolume.init(forLocale:usage:)(uint64_t *a1, unsigned __int8 *a2)
{
  return NSUnitLength.init(forLocale:usage:)(a1, a2, &lazy cache variable for type metadata for NSUnitVolume, (uint64_t)off_1E51F4580);
}

void (*URLComponents._URLComponents.user.getter(uint64_t a1))(char *, void)
{
  if (*(void *)(v1 + 48))
  {
    uint64_t v2 = *(void *)(v1 + 40);
    unint64_t v3 = *(void *)(v1 + 48);
  }
  else if ((*(unsigned char *)(v1 + 10) & 1) != 0 {
         && (outlined init with take of LocalePreferences?(v1, (uint64_t)v19, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)&v20, &demangling cache variable for type metadata for URLParseInfo?), v20)&& (*(unsigned char *)(v20 + 72) & 1) == 0)
  }
  {
    uint64_t v5 = String.subscript.getter();
    uint64_t v2 = MEMORY[0x185301F50](v5);
    unint64_t v3 = v6;
    a1 = swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of LocalePreferences?(v1 + 56, (uint64_t)v18, &demangling cache variable for type metadata for String?);
    a1 = outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)v21, &demangling cache variable for type metadata for String?);
    if (!v22)
    {
      if ((*(unsigned char *)(v1 + 11) & 1) == 0) {
        return 0;
      }
      outlined init with take of LocalePreferences?(v1, (uint64_t)v17, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)&v23, &demangling cache variable for type metadata for URLParseInfo?);
      if (!v23 || (*(unsigned char *)(v23 + 96) & 1) != 0) {
        return 0;
      }
      uint64_t v13 = String.subscript.getter();
      MEMORY[0x185301F50](v13);
      swift_bridgeObjectRelease();
      a1 = swift_bridgeObjectRelease();
    }
    uint64_t v2 = 0;
    unint64_t v3 = 0xE000000000000000;
  }
  uint64_t v7 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v7 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    Swift::Int v15 = v2;
    unint64_t v16 = v3;
    MEMORY[0x1F4188790](a1);
    objc_super v14[2] = &v15;
    v14[3] = MEMORY[0x1E4FBC870];
    swift_bridgeObjectRetain();
    long long v8 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v14, v2, v3);
    if (v9 == 1)
    {
      Swift::Int v10 = v15;
      unint64_t v11 = v16;
      swift_bridgeObjectRetain();
      int v4 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v10, v11, MEMORY[0x1E4FBC870]);
      swift_bridgeObjectRelease();
    }
    else
    {
      int v4 = (void (*)(char *, void))v8;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v4;
}

void (*URLComponents._URLComponents.password.getter(uint64_t a1))(char *, void)
{
  if (*(void *)(v1 + 64))
  {
    uint64_t v2 = *(void *)(v1 + 56);
    unint64_t v3 = *(void *)(v1 + 64);
  }
  else
  {
    if ((*(unsigned char *)(v1 + 11) & 1) == 0) {
      return 0;
    }
    outlined init with take of LocalePreferences?(v1, (uint64_t)v16, &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?((uint64_t)v16, (uint64_t)&v17, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v17 || (*(unsigned char *)(v17 + 96) & 1) != 0) {
      return 0;
    }
    uint64_t v11 = String.subscript.getter();
    uint64_t v2 = MEMORY[0x185301F50](v11);
    unint64_t v3 = v12;
    a1 = swift_bridgeObjectRelease();
  }
  uint64_t v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v4 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    Swift::Int v14 = v2;
    unint64_t v15 = v3;
    MEMORY[0x1F4188790](a1);
    v13[2] = &v14;
    v13[3] = MEMORY[0x1E4FBC870];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v13, v2, v3);
    if (v6 == 1)
    {
      Swift::Int v7 = v14;
      unint64_t v8 = v15;
      swift_bridgeObjectRetain();
      uint64_t v9 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v7, v8, MEMORY[0x1E4FBC870]);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v9 = (void (*)(char *, void))v5;
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v9;
}

uint64_t URLComponents._URLComponents.path.setter(unint64_t a1, unint64_t a2)
{
  *(unsigned char *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 14) = 0;
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    unint64_t v4 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(a1, a2);
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v4 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 104) = v4;
  *(void *)(v2 + 112) = v6;
  return result;
}

unint64_t URLComponents._URLComponents.percentEncodedHost.getter()
{
  unint64_t v1 = v0;
  uint64_t v2 = URLComponents._URLComponents.encodedHost.getter();
  if (!v3) {
    goto LABEL_69;
  }
  unint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v2;
  unint64_t v5 = v3;
  uint64_t v6 = HIBYTE(v3) & 0xF;
  uint64_t v7 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v8 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8) {
    goto LABEL_12;
  }
  if (*(unsigned char *)(v1 + 152)) {
    return (unint64_t)v4;
  }
  if ((v3 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    goto LABEL_15;
  }
  if ((v3 & 0x2000000000000000) != 0)
  {
    long long v83 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v2;
    uint64_t v84 = v3 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v96 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v97 = 0;
    swift_bridgeObjectRetain_n();
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v83, v6, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v96, 0, (unsigned __int8 *)&v83, v6, (uint64_t *)&v90);
    unint64_t v10 = v90;
    unint64_t v12 = v91;
    swift_release();
  }
  else
  {
    if ((v2 & 0x1000000000000000) != 0)
    {
      uint64_t v9 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      uint64_t v7 = v28;
    }
    long long v83 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v84 = 0;
    swift_bridgeObjectRetain_n();
    unint64_t v10 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v9, v7, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v83, 0, v9, v7);
    unint64_t v12 = v11;
  }
  swift_bridgeObjectRelease();
  if (v12 == 1)
  {
LABEL_15:
    long long v83 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v4;
    uint64_t v84 = v5;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    uint64_t v13 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v14 = objc_msgSend(v13, sel__fastCharacterContents);
    id v15 = v13;
    if (v14)
    {
      long long v83 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v4;
      uint64_t v84 = v5;
      StringProtocol._ephemeralString.getter();
      unint64_t v16 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v17 = objc_msgSend(v16, sel_length);
      uint64_t v18 = swift_unknownObjectRelease();
      MEMORY[0x1F4188790](v18);
      LOBYTE(v81) = 0;
      MEMORY[0x1F4188790](v19);
      v79[2] = v14;
      v79[3] = v17;
      unint64_t v10 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v14, (uint64_t)v17, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v20, (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v79);
      unint64_t v12 = v21;
      swift_bridgeObjectRelease_n();
      if (v12) {
        goto LABEL_30;
      }
      goto LABEL_69;
    }
    long long v83 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v4;
    uint64_t v84 = v5;
    swift_bridgeObjectRetain();
    uint64_t v23 = String.init<A>(_:)();
    unint64_t v24 = v22;
    if ((v22 & 0x1000000000000000) != 0)
    {
      uint64_t v23 = static String._copying(_:)();
      unint64_t v30 = v29;
      swift_bridgeObjectRelease();
      unint64_t v24 = v30;
      if ((v30 & 0x2000000000000000) == 0) {
        goto LABEL_22;
      }
    }
    else if ((v22 & 0x2000000000000000) == 0)
    {
LABEL_22:
      if ((v23 & 0x1000000000000000) == 0) {
        goto LABEL_102;
      }
      uint64_t v25 = (unsigned __int8 *)((v24 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v26 = v23 & 0xFFFFFFFFFFFFLL;
      goto LABEL_24;
    }
    long long v83 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v23;
    uint64_t v84 = v24 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v96 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v97 = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v83, HIBYTE(v24) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v96, 0, (unsigned __int8 *)&v83, HIBYTE(v24) & 0xF, (uint64_t *)&v90);
    unint64_t v10 = v90;
    unint64_t v12 = v91;
    swift_release();
    goto LABEL_29;
  }
  swift_bridgeObjectRelease_n();
  if (!v12)
  {
LABEL_69:
    outlined init with take of LocalePreferences?(v1 + 88, (uint64_t)v93, &demangling cache variable for type metadata for Int?);
    outlined init with take of LocalePreferences?((uint64_t)v93, (uint64_t)v94, &demangling cache variable for type metadata for Int?);
    if (v94[8] == 1)
    {
      if ((*(unsigned char *)(v1 + 13) & 1) == 0) {
        goto LABEL_77;
      }
      outlined init with take of LocalePreferences?(v1, (uint64_t)v92, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v92, (uint64_t)&v95, &demangling cache variable for type metadata for URLParseInfo?);
      if (!v95 || (*(unsigned char *)(v95 + 144) & 1) != 0) {
        goto LABEL_77;
      }
      unint64_t v57 = String.subscript.getter();
      uint64_t v61 = v60;
      if (!((v57 ^ v58) >> 14)) {
        goto LABEL_100;
      }
      uint64_t v62 = v57;
      uint64_t v63 = v58;
      uint64_t v64 = v59;
      _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v57, v58, v59, v60, 10);
      if ((v65 & 0x100) != 0) {
        specialized _parseInteger<A, B>(ascii:radix:)(v62, v63, v64, v61, 10);
      }
      char v66 = v65;
      swift_bridgeObjectRelease();
      if (v66) {
        goto LABEL_77;
      }
    }
    return 0;
  }
  while (1)
  {
LABEL_30:
    if ((v12 & 0x2000000000000000) != 0)
    {
      if ((v12 & 0xF00000000000000) == 0) {
        goto LABEL_12;
      }
    }
    else if ((v10 & 0xFFFFFFFFFFFFLL) == 0)
    {
      goto LABEL_12;
    }
    Swift::Int v31 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v10, v12);
    if ((v31 & 1) == 0)
    {
      long long v83 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v10;
      uint64_t v84 = v12;
      MEMORY[0x1F4188790](v31);
      BOOL v81 = &v83;
      char v82 = 4;
      swift_bridgeObjectRetain();
      uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v80, v10, v12);
      if (v40)
      {
        unint64_t v4 = v39;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        long long v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v83;
        unint64_t v42 = v84;
        swift_bridgeObjectRetain();
        unint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((unint64_t)v41, v42, 4u);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      return (unint64_t)v4;
    }
    unint64_t result = specialized Collection.first.getter(v10, v12);
    if ((result & 0x100) != 0) {
      goto LABEL_105;
    }
    if (result != 91)
    {
      __break(1u);
LABEL_94:
      unint64_t result = String.UTF8View._foreignCount()();
      if (__OFSUB__(result, 1)) {
        goto LABEL_106;
      }
      uint64_t v34 = (v10 >> 59) & 1;
      unint64_t result = MEMORY[0x185302230](15, result - 1, v10, v12);
LABEL_40:
      if ((result & 0xC) != 4 << v34) {
        goto LABEL_41;
      }
      goto LABEL_97;
    }
    unint64_t v5 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x1000000000000000) != 0) {
      goto LABEL_94;
    }
    uint64_t v33 = v10 & 0xFFFFFFFFFFFFLL;
    if ((v12 & 0x2000000000000000) != 0) {
      uint64_t v33 = HIBYTE(v12) & 0xF;
    }
    if (v33)
    {
      unint64_t result = (v33 << 16) - 65532;
      LOBYTE(v34) = 1;
      goto LABEL_40;
    }
    __break(1u);
LABEL_97:
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, v10, v12);
LABEL_41:
    unint64_t v35 = (v12 & 0x2000000000000000) != 0 ? v5 : v10 & 0xFFFFFFFFFFFFLL;
    unint64_t v36 = result >> 16;
    if (result >> 16 >= v35) {
      break;
    }
    if ((v12 & 0x1000000000000000) != 0)
    {
      char v38 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v12 & 0x2000000000000000) != 0)
    {
      long long v83 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v10;
      uint64_t v84 = v12 & 0xFFFFFFFFFFFFFFLL;
      char v38 = *((unsigned char *)&v83 + v36);
    }
    else
    {
      if ((v10 & 0x1000000000000000) != 0) {
        uint64_t v37 = (v12 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v37 = _StringObject.sharedUTF8.getter();
      }
      char v38 = *(unsigned char *)(v37 + v36);
    }
    if (v38 != 93) {
      goto LABEL_99;
    }
    unint64_t v43 = specialized Collection<>.firstIndex(of:)(0x25u, v10, v12);
    if (v44)
    {
      swift_bridgeObjectRetain();
      if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v10, v12) & 1) == 0)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_69;
      }
      long long v83 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v10;
      uint64_t v84 = v12;
      unint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))String.init<A>(_:)();
      goto LABEL_91;
    }
    unint64_t v5 = v43;
    if ((v12 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignCount()();
      if (__OFSUB__(result, 1))
      {
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
        return result;
      }
      unint64_t v1 = MEMORY[0x185302230](15, result - 1, v10, v12);
    }
    else
    {
      unint64_t v1 = (v35 << 16) - 65532;
    }
    if (v1 >> 14 >= v5 >> 14)
    {
      swift_bridgeObjectRetain_n();
      long long v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))String.subscript.getter();
      unint64_t v47 = v46;
      long long v83 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v45;
      uint64_t v84 = v48;
      unint64_t v85 = v49;
      unint64_t v86 = v46;
      MEMORY[0x1F4188790](v45);
      BOOL v81 = &v83;
      char v82 = 8;
      unint64_t v53 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((void *(*)(void *__return_ptr, void, void))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v80, v51, v52, v50, v47);
      if (v54)
      {
        uint64_t v55 = (uint64_t)v53;
        BOOL v56 = v54;
      }
      else
      {
        int64_t v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v83;
        unint64_t v68 = v84;
        unint64_t v69 = v85;
        unint64_t v70 = v86;
        swift_bridgeObjectRetain();
        uint64_t v55 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((unint64_t)v67, v68, v69, v70, 8u);
        BOOL v56 = v71;
        swift_bridgeObjectRelease();
      }
      uint64_t v72 = String.subscript.getter();
      uint64_t v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x185301F50](v72);
      uint64_t v75 = v74;
      swift_bridgeObjectRelease();
      long long v83 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v73;
      uint64_t v84 = v75;
      v76._uint64_t countAndFlagsBits = v55;
      v76._unint64_t object = v56;
      String.append(_:)(v76);
      swift_bridgeObjectRelease();
      v77._uint64_t countAndFlagsBits = 93;
      v77._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v77);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      unint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v83;
LABEL_91:
      swift_bridgeObjectRelease();
      return (unint64_t)v4;
    }
    __break(1u);
LABEL_102:
    uint64_t v25 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
LABEL_24:
    long long v83 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v84 = 0;
    unint64_t v10 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v25, v26, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v83, 0, v25, v26);
    unint64_t v12 = v27;
LABEL_29:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (!v12) {
      goto LABEL_69;
    }
  }
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  swift_bridgeObjectRelease();
LABEL_77:
  outlined init with take of LocalePreferences?(v1 + 40, (uint64_t)&v90, &demangling cache variable for type metadata for String?);
  outlined init with take of LocalePreferences?((uint64_t)&v90, (uint64_t)&v96, &demangling cache variable for type metadata for String?);
  if (!v97)
  {
    if ((*(unsigned char *)(v1 + 10) & 1) == 0
      || (outlined init with take of LocalePreferences?(v1, (uint64_t)v89, &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)v89, (uint64_t)&v98, &demangling cache variable for type metadata for URLParseInfo?), !v98)|| (*(unsigned char *)(v98 + 72) & 1) != 0)
    {
      outlined init with take of LocalePreferences?(v1 + 56, (uint64_t)v88, &demangling cache variable for type metadata for String?);
      outlined init with take of LocalePreferences?((uint64_t)v88, (uint64_t)&v83, &demangling cache variable for type metadata for String?);
      if (v84) {
        return 0;
      }
      if ((*(unsigned char *)(v1 + 11) & 1) == 0) {
        return 0;
      }
      outlined init with take of LocalePreferences?(v1, (uint64_t)v87, &demangling cache variable for type metadata for URLParseInfo?);
      outlined init with take of LocalePreferences?((uint64_t)v87, (uint64_t)&v99, &demangling cache variable for type metadata for URLParseInfo?);
      if (!v99 || (*(unsigned char *)(v99 + 96) & 1) != 0) {
        return 0;
      }
    }
    uint64_t v78 = String.subscript.getter();
    MEMORY[0x185301F50](v78);
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
  }
  return 0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URLComponents._URLComponents.setPercentEncodedHost(_:)(Swift::String_optional a1)
{
  uint64_t v2 = v1;
  unint64_t countAndFlagsBits = a1.value._countAndFlagsBits;
  *(unsigned char *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  *(_WORD *)(v1 + 152) = 0;
  if (!a1.value._object)
  {
    swift_bridgeObjectRelease();
    *(void *)(v1 + 72) = countAndFlagsBits;
    *(void *)(v1 + 80) = 0;
    return;
  }
  unint64_t object = (unint64_t)a1.value._object;
  unint64_t v5 = specialized Collection.first.getter(a1.value._countAndFlagsBits, (unint64_t)a1.value._object);
  if ((v5 & 0x1FF) != 0x5B) {
    goto LABEL_23;
  }
  if ((object & 0x1000000000000000) != 0)
  {
    Swift::Int v39 = String.UTF8View._foreignCount()();
    if (__OFSUB__(v39, 1))
    {
      __break(1u);
      return;
    }
    uint64_t v7 = (countAndFlagsBits >> 59) & 1;
    unint64_t v5 = MEMORY[0x185302230](15, v39 - 1, countAndFlagsBits, object);
  }
  else
  {
    uint64_t v6 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000) == 0) {
      uint64_t v6 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (!v6)
    {
      __break(1u);
      goto LABEL_62;
    }
    unint64_t v5 = (v6 << 16) - 65532;
    LOBYTE(v7) = 1;
  }
  if ((v5 & 0xC) == 4 << v7) {
LABEL_62:
  }
    unint64_t v5 = _StringGuts._slowEnsureMatchingEncoding(_:)(v5, countAndFlagsBits, object);
  unint64_t v8 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0) {
    unint64_t v8 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v9 = v5 >> 16;
  if (v5 >> 16 >= v8)
  {
    __break(1u);
    goto LABEL_64;
  }
  if ((object & 0x1000000000000000) != 0)
  {
    char v11 = String.UTF8View._foreignSubscript(position:)();
  }
  else if ((object & 0x2000000000000000) != 0)
  {
    Swift::Int v44 = countAndFlagsBits;
    uint64_t v45 = object & 0xFFFFFFFFFFFFFFLL;
    char v11 = *((unsigned char *)&v44 + v9);
  }
  else
  {
    if ((countAndFlagsBits & 0x1000000000000000) != 0) {
      uint64_t v10 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v10 = _StringObject.sharedUTF8.getter();
    }
    char v11 = *(unsigned char *)(v10 + v9);
  }
  if (v11 == 93)
  {
    swift_bridgeObjectRetain();
    unint64_t v12 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(countAndFlagsBits, object);
    if ((v12 & 1) == 0)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
      swift_allocError();
      *uint64_t v13 = 3;
      swift_willThrow();
      return;
    }
    goto LABEL_29;
  }
LABEL_23:
  if ((object & 0x1000000000000000) == 0)
  {
    if ((object & 0x2000000000000000) != 0)
    {
      uint64_t v15 = HIBYTE(object) & 0xF;
      Swift::Int v44 = countAndFlagsBits;
      uint64_t v45 = object & 0xFFFFFFFFFFFFFFLL;
      id v14 = (char *)&v44;
      goto LABEL_28;
    }
    if ((countAndFlagsBits & 0x1000000000000000) != 0)
    {
      id v14 = (char *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v15 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      goto LABEL_28;
    }
LABEL_64:
    id v14 = (char *)_StringObject.sharedUTF8.getter();
LABEL_28:
    BOOL v16 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v14, v15, 4u, 1);
    unint64_t v12 = swift_bridgeObjectRetain();
    if (!v16) {
      goto LABEL_22;
    }
    goto LABEL_29;
  }
  Swift::Int v44 = countAndFlagsBits;
  uint64_t v45 = object;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain_n();
  StringProtocol._ephemeralString.getter();
  uint64_t v33 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v34 = (unsigned __int16 *)objc_msgSend(v33, sel__fastCharacterContents);
  id v35 = v33;
  if (v34)
  {
    Swift::Int v44 = countAndFlagsBits;
    uint64_t v45 = object;
    StringProtocol._ephemeralString.getter();
    unint64_t v36 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v37 = objc_msgSend(v36, sel_length);
    swift_unknownObjectRelease();
    char v38 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v34, (uint64_t)v37, 4u, 1);
  }
  else
  {
    char v38 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(countAndFlagsBits, object, 4u, 1);
  }
  char v40 = v38;
  unint64_t v12 = swift_bridgeObjectRelease_n();
  if ((v40 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_29:
  LOBYTE(v44) = 37;
  MEMORY[0x1F4188790](v12);
  unint64_t v42 = &v44;
  swift_bridgeObjectRetain();
  char v17 = specialized Sequence.contains(where:)((uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v41, countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v2 + 152) = v17 & 1;
  if (*(void *)(v2 + 32))
  {
    uint64_t v18 = *(void *)(v2 + 32);
  }
  else if (*(unsigned char *)(v2 + 9) == 1)
  {
    uint64_t v18 = 0;
    if (*(void *)v2)
    {
      if (*(unsigned char *)(*(void *)v2 + 48))
      {
        uint64_t v18 = 0;
      }
      else
      {
        uint64_t v31 = String.subscript.getter();
        MEMORY[0x185301F50](v31);
        uint64_t v18 = v32;
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  if (specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(countAndFlagsBits, object))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_48:
    swift_bridgeObjectRelease();
    *(void *)(v2 + 72) = countAndFlagsBits;
    *(void *)(v2 + 80) = object;
    return;
  }
  if (v18)
  {
    uint64_t v19 = one-time initialization token for schemesToPercentEncodeHost;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v19 != -1) {
      swift_once();
    }
    uint64_t v20 = static RFC3986Parser.schemesToPercentEncodeHost;
    Swift::String v21 = String.lowercased()();
    LOBYTE(v20) = specialized Set.contains(_:)(v21._countAndFlagsBits, (uint64_t)v21._object, v20);
    swift_bridgeObjectRelease_n();
    uint64_t v22 = swift_bridgeObjectRelease();
    if ((v20 & 1) != 0 || (v17 & 1) == 0) {
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v22 = swift_bridgeObjectRetain();
    if ((v17 & 1) == 0) {
      goto LABEL_48;
    }
  }
  uint64_t v23 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0) {
    uint64_t v23 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v23)
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = 0;
    unint64_t v30 = 0xE000000000000000;
LABEL_55:
    URLComponents._URLComponents.host.setter((unint64_t)v28, v30);
    return;
  }
  Swift::Int v44 = countAndFlagsBits;
  uint64_t v45 = object;
  MEMORY[0x1F4188790](v22);
  unint64_t v42 = &v44;
  uint64_t v43 = MEMORY[0x1E4FBC870];
  swift_bridgeObjectRetain();
  unint64_t v24 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v41, countAndFlagsBits, object);
  if (v25 == 1)
  {
    Swift::Int v26 = v44;
    unint64_t v27 = v45;
    swift_bridgeObjectRetain();
    uint64_t v28 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v26, v27, MEMORY[0x1E4FBC870]);
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v28 = (void (*)(char *, void))v24;
    unint64_t v30 = v25;
  }
  swift_bridgeObjectRelease();
  if (v30)
  {
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  swift_bridgeObjectRelease();
  *(void *)(v2 + 72) = countAndFlagsBits;
  *(void *)(v2 + 80) = object;
  *(unsigned char *)(v2 + 153) = 1;
}

uint64_t URLComponents.init(string:encodingInvalidCharacters:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  swift_bridgeObjectRetain();
  specialized URLComponents._URLComponents.init(string:encodingInvalidCharacters:)(a1, a2, a3, (uint64_t)v12);
  outlined init with take of LocalePreferences?((uint64_t)v12, (uint64_t)v13, &demangling cache variable for type metadata for URLComponents._URLComponents?);
  if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v13) == 1)
  {
    _s10Foundation13URLComponentsV01_B0VSgWOi0_((uint64_t)v10);
  }
  else
  {
    v10[6] = v13[6];
    v10[7] = v13[7];
    v11[0] = v14[0];
    *(_OWORD *)((char *)v11 + 10) = *(_OWORD *)((char *)v14 + 10);
    v10[2] = v13[2];
    v10[3] = v13[3];
    v10[4] = v13[4];
    v10[5] = v13[5];
    v10[0] = v13[0];
    v10[1] = v13[1];
    destructiveProjectEnumData for PredicateCodableError(v10, v8);
  }
  return outlined init with take of LocalePreferences?((uint64_t)v10, a4, &demangling cache variable for type metadata for URLComponents?);
}

void URLComponents.url(relativeTo:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  long long v4 = v2[7];
  long long v5 = v2[5];
  long long v40 = v2[6];
  long long v41 = v4;
  long long v6 = v2[7];
  v42[0] = v2[8];
  *(_OWORD *)((char *)v42 + 10) = *(long long *)((char *)v2 + 138);
  long long v7 = v2[3];
  long long v8 = v2[1];
  long long v36 = v2[2];
  long long v37 = v7;
  long long v9 = v2[3];
  long long v10 = v2[5];
  long long v38 = v2[4];
  long long v39 = v10;
  long long v11 = v2[1];
  long long v34 = *v2;
  long long v35 = v11;
  v32[8] = v40;
  v32[9] = v6;
  v33[0] = v2[8];
  *(_OWORD *)((char *)v33 + 10) = *(long long *)((char *)v2 + 138);
  _OWORD v32[4] = v36;
  v32[5] = v9;
  v32[6] = v38;
  v32[7] = v5;
  uint64_t v13 = *(void **)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  _OWORD v32[2] = v34;
  long long v32[3] = v8;
  if (BYTE8(v34) == 1)
  {
    if ((void)v34)
    {
      uint64_t v16 = *(void *)(v34 + 16);
      unint64_t v15 = *(void *)(v34 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_5;
    }
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  outlined retain of URLComponents((uint64_t)&v34);
  uint64_t v16 = URLComponents._URLComponents.computedString.getter();
  unint64_t v15 = v17;
  outlined release of URLComponents((uint64_t)&v34);
  if (!v15) {
    goto LABEL_8;
  }
LABEL_5:
  if (v13)
  {
    swift_retain();
    id v18 = v13;
    swift_retain();
    if (_foundation_swift_url_feature_enabled())
    {
      *(void *)unint64_t v25 = v13;
      *(void *)&v25[8] = v12;
      *(void *)&v25[16] = v14;
      id v19 = v18;
      swift_retain();
      swift_retain();
      URL.init(string:relativeTo:)(v16, v15, (id *)v25, a2);
      swift_bridgeObjectRelease();
      outlined consume of URL?(v13);
      outlined consume of URL?(v13);
    }
    else
    {
      CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFStringRef v21 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      CFURLRef v22 = CFURLCreateWithString(v20, v21, (CFURLRef)v18);
      swift_unknownObjectRelease();
      if (v22)
      {
        URL.init(reference:)(v22, v25);
        outlined consume of URL?(v13);

        uint64_t v23 = *(void *)v25;
        long long v24 = *(_OWORD *)&v25[8];
      }
      else
      {
        outlined consume of URL?(v13);
        uint64_t v23 = 0;
        long long v24 = 0uLL;
      }
      *a2 = v23;
      *(_OWORD *)(a2 + 1) = v24;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    long long v30 = v40;
    long long v31 = v41;
    v32[0] = v42[0];
    *(_OWORD *)((char *)v32 + 10) = *(_OWORD *)((char *)v42 + 10);
    long long v26 = v36;
    long long v27 = v37;
    long long v28 = v38;
    long long v29 = v39;
    *(_OWORD *)unint64_t v25 = v34;
    *(_OWORD *)&v25[16] = v35;
    URLComponents.url.getter(a2);
  }
}

uint64_t URLComponents.scheme.getter()
{
  if (v0[4])
  {
    uint64_t v1 = v0[3];
  }
  else
  {
    uint64_t v2 = *v0;
    BOOL v3 = *((unsigned char *)v0 + 9) != 1 || v2 == 0;
    if (v3 || (*(unsigned char *)(v2 + 48) & 1) != 0)
    {
      uint64_t v1 = 0;
    }
    else
    {
      uint64_t v4 = String.subscript.getter();
      uint64_t v1 = MEMORY[0x185301F50](v4);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t (*URLComponents.scheme.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  if (*(void *)(v1 + 32))
  {
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t v4 = *(void *)(v1 + 32);
  }
  else
  {
    uint64_t v5 = *(void *)v1;
    BOOL v6 = *(unsigned char *)(v1 + 9) != 1 || v5 == 0;
    if (v6 || (*(unsigned char *)(v5 + 48) & 1) != 0)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v7 = String.subscript.getter();
      uint64_t v3 = MEMORY[0x185301F50](v7);
      uint64_t v4 = v8;
      swift_bridgeObjectRelease();
    }
  }
  *a1 = v3;
  a1[1] = v4;
  swift_bridgeObjectRetain();
  return URLComponents.scheme.modify;
}

uint64_t URLComponents.scheme.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = (void *)a1[1];
  if ((a2 & 1) == 0)
  {
    v6.value._unint64_t countAndFlagsBits = *a1;
    v6.value._unint64_t object = v2;
    URLComponents._URLComponents.setScheme(_:)(v6);
    if (!v5) {
      goto LABEL_5;
    }
LABEL_8:

    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  v4.value._unint64_t countAndFlagsBits = v3;
  v4.value._unint64_t object = v2;
  URLComponents._URLComponents.setScheme(_:)(v4);
  if (v5) {
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
LABEL_5:

  return swift_bridgeObjectRelease();
}

void (*URLComponents.user.getter(uint64_t a1))(char *, void)
{
  return URLComponents._URLComponents.user.getter(a1);
}

uint64_t URLComponents.user.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(unsigned char *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 10) = 0;
  if (!a2)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 40) = a1;
    *(void *)(v3 + 48) = a2;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v27 = a1;
    uint64_t v28 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    long long v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    long long v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents);
    id v12 = v10;
    if (v11)
    {
      unint64_t v27 = a1;
      uint64_t v28 = a2;
      StringProtocol._ephemeralString.getter();
      uint64_t v13 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v13, sel_length);
      swift_unknownObjectRelease();
      char v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v11, (uint64_t)v14, 2u, 0);
    }
    else
    {
      char v15 = specialized Sequence.allSatisfy(_:)(a1, a2, 2);
    }
    char v16 = v15;
    uint64_t v8 = swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v27 = a1;
      uint64_t v28 = a2 & 0xFFFFFFFFFFFFFFLL;
      Swift::String_optional v6 = (char *)&v27;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      Swift::String_optional v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      Swift::String_optional v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 0);
    if (v8) {
      goto LABEL_8;
    }
  }
  uint64_t v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    unint64_t v27 = a1;
    uint64_t v28 = a2;
    MEMORY[0x1F4188790](v8);
    _OWORD v25[2] = &v27;
    char v26 = 2;
    swift_bridgeObjectRetain();
    id v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v25, a1, a2);
    if (v19)
    {
      unint64_t v20 = (unint64_t)v18;
      unint64_t v21 = v19;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      unint64_t v22 = v27;
      unint64_t v23 = v28;
      swift_bridgeObjectRetain();
      unint64_t v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
      unint64_t v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v3 + 40) = v20;
  *(void *)(v3 + 48) = v21;
  return result;
}

void (*URLComponents.user.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)malloc(0xC8uLL);
  *a1 = v3;
  *((void *)v3 + 24) = v1;
  long long v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  long long v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  long long v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  long long v7 = v1[1];
  *(_OWORD *)uint64_t v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 20) = URLComponents._URLComponents.user.getter((uint64_t)v3);
  *((void *)v3 + 21) = v8;
  return URLComponents.user.modify;
}

void URLComponents.user.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 160);
  uint64_t v4 = *(void *)a1 + 176;
  uint64_t v5 = *(void *)(*(void *)a1 + 192);
  unint64_t v6 = *(void *)(*(void *)a1 + 168);
  *(unsigned char *)(v5 + 8) = 0;
  *(unsigned char *)(v5 + 10) = 0;
  if ((a2 & 1) == 0)
  {
    if (v6)
    {
      if ((v6 & 0x1000000000000000) != 0)
      {
        v2[22] = v3;
        v2[23] = v6;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        long long v35 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        long long v36 = (unsigned __int16 *)objc_msgSend(v35, sel__fastCharacterContents);
        id v37 = v35;
        if (v36)
        {
          v2[22] = v3;
          v2[23] = v6;
          StringProtocol._ephemeralString.getter();
          long long v38 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v39 = (uint64_t)objc_msgSend(v38, sel_length);
          swift_unknownObjectRelease();
          LOBYTE(v39) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v36, v39, 2u, 0);
          uint64_t v17 = swift_bridgeObjectRelease();
          if (v39) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v41 = specialized Sequence.allSatisfy(_:)(v3, v6, 2);
          uint64_t v17 = swift_bridgeObjectRelease();
          if (v41) {
            goto LABEL_33;
          }
        }
LABEL_21:
        uint64_t v18 = HIBYTE(v6) & 0xF;
        if ((v6 & 0x2000000000000000) == 0) {
          uint64_t v18 = v3 & 0xFFFFFFFFFFFFLL;
        }
        if (v18)
        {
          v2[22] = v3;
          v2[23] = v6;
          MEMORY[0x1F4188790](v17);
          uint64_t v43 = v4;
          char v44 = 2;
          swift_bridgeObjectRetain();
          unint64_t v19 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v42, v3, v6);
          if (v20)
          {
            unint64_t v3 = (unint64_t)v19;
            unint64_t v21 = v20;
          }
          else
          {
            unint64_t v26 = v2[22];
            unint64_t v27 = v2[23];
            swift_bridgeObjectRetain();
            unint64_t v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v26, v27, 2u);
            unint64_t v21 = v28;
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease_n();
          unint64_t v6 = v21;
        }
        else
        {
          swift_bridgeObjectRelease();
          unint64_t v3 = 0;
          unint64_t v6 = 0xE000000000000000;
        }
        goto LABEL_33;
      }
      if ((v6 & 0x2000000000000000) != 0)
      {
        uint64_t v10 = HIBYTE(v6) & 0xF;
        v2[22] = v3;
        v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
        long long v9 = (char *)v4;
      }
      else if ((v3 & 0x1000000000000000) != 0)
      {
        long long v9 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v10 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        long long v9 = (char *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 2u, 0);
      if ((v17 & 1) == 0) {
        goto LABEL_21;
      }
    }
LABEL_33:
    uint64_t v29 = v2[24];
    swift_bridgeObjectRelease();
    *(void *)(v29 + 40) = v3;
    *(void *)(v29 + 48) = v6;
    goto LABEL_34;
  }
  if (v6)
  {
    if ((v6 & 0x1000000000000000) != 0)
    {
      v2[22] = v3;
      v2[23] = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      long long v30 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      long long v31 = (unsigned __int16 *)objc_msgSend(v30, sel__fastCharacterContents);
      id v32 = v30;
      if (v31)
      {
        v2[22] = v3;
        v2[23] = v6;
        StringProtocol._ephemeralString.getter();
        uint64_t v33 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v34 = (uint64_t)objc_msgSend(v33, sel_length);
        swift_unknownObjectRelease();
        LOBYTE(v34) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v31, v34, 2u, 0);
        uint64_t v12 = swift_bridgeObjectRelease();
        if (v34) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v40 = specialized Sequence.allSatisfy(_:)(v3, v6, 2);
        uint64_t v12 = swift_bridgeObjectRelease();
        if (v40) {
          goto LABEL_30;
        }
      }
LABEL_14:
      uint64_t v13 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000) == 0) {
        uint64_t v13 = v3 & 0xFFFFFFFFFFFFLL;
      }
      if (v13)
      {
        v2[22] = v3;
        v2[23] = v6;
        MEMORY[0x1F4188790](v12);
        uint64_t v43 = v4;
        char v44 = 2;
        swift_bridgeObjectRetain();
        id v14 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v42, v3, v6);
        if (v15)
        {
          unint64_t v3 = (unint64_t)v14;
          unint64_t v16 = v15;
        }
        else
        {
          unint64_t v22 = v2[22];
          unint64_t v23 = v2[23];
          swift_bridgeObjectRetain();
          unint64_t v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
          unint64_t v16 = v24;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease_n();
        unint64_t v6 = v16;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v3 = 0;
        unint64_t v6 = 0xE000000000000000;
      }
      goto LABEL_30;
    }
    if ((v6 & 0x2000000000000000) != 0)
    {
      uint64_t v8 = HIBYTE(v6) & 0xF;
      v2[22] = v3;
      v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
      long long v7 = (char *)v4;
    }
    else if ((v3 & 0x1000000000000000) != 0)
    {
      long long v7 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = v3 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      long long v7 = (char *)_StringObject.sharedUTF8.getter();
    }
    BOOL v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 2u, 0);
    uint64_t v12 = swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_14;
    }
  }
LABEL_30:
  uint64_t v25 = v2[24];
  swift_bridgeObjectRelease();
  *(void *)(v25 + 40) = v3;
  *(void *)(v25 + 48) = v6;
  swift_bridgeObjectRelease();
LABEL_34:
  free(v2);
}

void (*URLComponents.password.getter(uint64_t a1))(char *, void)
{
  return URLComponents._URLComponents.password.getter(a1);
}

uint64_t key path getter for URLComponents.user : URLComponents@<X0>(_OWORD *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  long long v5 = a1[7];
  void v14[6] = a1[6];
  v14[7] = v5;
  v15[0] = a1[8];
  *(_OWORD *)((char *)v15 + 10) = *(_OWORD *)((char *)a1 + 138);
  long long v6 = a1[3];
  _OWORD v14[2] = a1[2];
  v14[3] = v6;
  long long v7 = a1[5];
  v14[4] = a1[4];
  v14[5] = v7;
  long long v8 = a1[1];
  v14[0] = *a1;
  v14[1] = v8;
  uint64_t v9 = outlined retain of URLComponents((uint64_t)v14);
  uint64_t v10 = a2(v9);
  uint64_t v12 = v11;
  uint64_t result = outlined release of URLComponents((uint64_t)v14);
  *a3 = v10;
  a3[1] = v12;
  return result;
}

uint64_t URLComponents.password.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(unsigned char *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 11) = 0;
  if (!a2)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 56) = a1;
    *(void *)(v3 + 64) = a2;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v27 = a1;
    uint64_t v28 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents);
    id v12 = v10;
    if (v11)
    {
      unint64_t v27 = a1;
      uint64_t v28 = a2;
      StringProtocol._ephemeralString.getter();
      uint64_t v13 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v13, sel_length);
      swift_unknownObjectRelease();
      char v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v11, (uint64_t)v14, 2u, 0);
    }
    else
    {
      char v15 = specialized Sequence.allSatisfy(_:)(a1, a2, 2);
    }
    char v16 = v15;
    uint64_t v8 = swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v27 = a1;
      uint64_t v28 = a2 & 0xFFFFFFFFFFFFFFLL;
      long long v6 = (char *)&v27;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      long long v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      long long v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v8 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 0);
    if (v8) {
      goto LABEL_8;
    }
  }
  uint64_t v17 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    unint64_t v27 = a1;
    uint64_t v28 = a2;
    MEMORY[0x1F4188790](v8);
    _OWORD v25[2] = &v27;
    char v26 = 2;
    swift_bridgeObjectRetain();
    uint64_t v18 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v25, a1, a2);
    if (v19)
    {
      unint64_t v20 = (unint64_t)v18;
      unint64_t v21 = v19;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      unint64_t v22 = v27;
      unint64_t v23 = v28;
      swift_bridgeObjectRetain();
      unint64_t v20 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
      unint64_t v21 = v24;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v3 + 56) = v20;
  *(void *)(v3 + 64) = v21;
  return result;
}

void (*URLComponents.password.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)malloc(0xC8uLL);
  *a1 = v3;
  *((void *)v3 + 24) = v1;
  long long v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  long long v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  long long v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  long long v7 = v1[1];
  *(_OWORD *)uint64_t v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 20) = URLComponents._URLComponents.password.getter((uint64_t)v3);
  *((void *)v3 + 21) = v8;
  return URLComponents.password.modify;
}

void URLComponents.password.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 160);
  uint64_t v4 = *(void *)a1 + 176;
  uint64_t v5 = *(void *)(*(void *)a1 + 192);
  unint64_t v6 = *(void *)(*(void *)a1 + 168);
  *(unsigned char *)(v5 + 8) = 0;
  *(unsigned char *)(v5 + 11) = 0;
  if ((a2 & 1) == 0)
  {
    if (v6)
    {
      if ((v6 & 0x1000000000000000) != 0)
      {
        v2[22] = v3;
        v2[23] = v6;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        long long v35 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        long long v36 = (unsigned __int16 *)objc_msgSend(v35, sel__fastCharacterContents);
        id v37 = v35;
        if (v36)
        {
          v2[22] = v3;
          v2[23] = v6;
          StringProtocol._ephemeralString.getter();
          long long v38 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v39 = (uint64_t)objc_msgSend(v38, sel_length);
          swift_unknownObjectRelease();
          LOBYTE(v39) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v36, v39, 2u, 0);
          uint64_t v17 = swift_bridgeObjectRelease();
          if (v39) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v41 = specialized Sequence.allSatisfy(_:)(v3, v6, 2);
          uint64_t v17 = swift_bridgeObjectRelease();
          if (v41) {
            goto LABEL_33;
          }
        }
LABEL_21:
        uint64_t v18 = HIBYTE(v6) & 0xF;
        if ((v6 & 0x2000000000000000) == 0) {
          uint64_t v18 = v3 & 0xFFFFFFFFFFFFLL;
        }
        if (v18)
        {
          v2[22] = v3;
          v2[23] = v6;
          MEMORY[0x1F4188790](v17);
          uint64_t v43 = v4;
          char v44 = 2;
          swift_bridgeObjectRetain();
          unint64_t v19 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v42, v3, v6);
          if (v20)
          {
            unint64_t v3 = (unint64_t)v19;
            unint64_t v21 = v20;
          }
          else
          {
            unint64_t v26 = v2[22];
            unint64_t v27 = v2[23];
            swift_bridgeObjectRetain();
            unint64_t v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v26, v27, 2u);
            unint64_t v21 = v28;
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease_n();
          unint64_t v6 = v21;
        }
        else
        {
          swift_bridgeObjectRelease();
          unint64_t v3 = 0;
          unint64_t v6 = 0xE000000000000000;
        }
        goto LABEL_33;
      }
      if ((v6 & 0x2000000000000000) != 0)
      {
        uint64_t v10 = HIBYTE(v6) & 0xF;
        v2[22] = v3;
        v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v9 = (char *)v4;
      }
      else if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v9 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v10 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v9 = (char *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 2u, 0);
      if ((v17 & 1) == 0) {
        goto LABEL_21;
      }
    }
LABEL_33:
    uint64_t v29 = v2[24];
    swift_bridgeObjectRelease();
    *(void *)(v29 + 56) = v3;
    *(void *)(v29 + 64) = v6;
    goto LABEL_34;
  }
  if (v6)
  {
    if ((v6 & 0x1000000000000000) != 0)
    {
      v2[22] = v3;
      v2[23] = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      long long v30 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      long long v31 = (unsigned __int16 *)objc_msgSend(v30, sel__fastCharacterContents);
      id v32 = v30;
      if (v31)
      {
        v2[22] = v3;
        v2[23] = v6;
        StringProtocol._ephemeralString.getter();
        uint64_t v33 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v34 = (uint64_t)objc_msgSend(v33, sel_length);
        swift_unknownObjectRelease();
        LOBYTE(v34) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v31, v34, 2u, 0);
        uint64_t v12 = swift_bridgeObjectRelease();
        if (v34) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v40 = specialized Sequence.allSatisfy(_:)(v3, v6, 2);
        uint64_t v12 = swift_bridgeObjectRelease();
        if (v40) {
          goto LABEL_30;
        }
      }
LABEL_14:
      uint64_t v13 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000) == 0) {
        uint64_t v13 = v3 & 0xFFFFFFFFFFFFLL;
      }
      if (v13)
      {
        v2[22] = v3;
        v2[23] = v6;
        MEMORY[0x1F4188790](v12);
        uint64_t v43 = v4;
        char v44 = 2;
        swift_bridgeObjectRetain();
        id v14 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v42, v3, v6);
        if (v15)
        {
          unint64_t v3 = (unint64_t)v14;
          unint64_t v16 = v15;
        }
        else
        {
          unint64_t v22 = v2[22];
          unint64_t v23 = v2[23];
          swift_bridgeObjectRetain();
          unint64_t v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 2u);
          unint64_t v16 = v24;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease_n();
        unint64_t v6 = v16;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v3 = 0;
        unint64_t v6 = 0xE000000000000000;
      }
      goto LABEL_30;
    }
    if ((v6 & 0x2000000000000000) != 0)
    {
      uint64_t v8 = HIBYTE(v6) & 0xF;
      v2[22] = v3;
      v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
      long long v7 = (char *)v4;
    }
    else if ((v3 & 0x1000000000000000) != 0)
    {
      long long v7 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = v3 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      long long v7 = (char *)_StringObject.sharedUTF8.getter();
    }
    BOOL v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 2u, 0);
    uint64_t v12 = swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_14;
    }
  }
LABEL_30:
  uint64_t v25 = v2[24];
  swift_bridgeObjectRelease();
  *(void *)(v25 + 56) = v3;
  *(void *)(v25 + 64) = v6;
  swift_bridgeObjectRelease();
LABEL_34:
  free(v2);
}

uint64_t URLComponents.host.getter(uint64_t a1)
{
  char v2 = *(unsigned char *)(v1 + 152);
  if (!*(void *)(v1 + 80))
  {
    uint64_t v5 = *(unsigned char **)v1;
    int v6 = *(unsigned __int8 *)(v1 + 10);
    int v7 = *(unsigned __int8 *)(v1 + 11);
    uint64_t v8 = *(void *)(v1 + 48);
    uint64_t v9 = *(void *)(v1 + 64);
    BOOL v10 = *(unsigned char *)(v1 + 12) != 1 || v5 == 0;
    if (!v10 && (v5[120] & 1) == 0)
    {
      uint64_t v18 = String.subscript.getter();
      uint64_t v3 = MEMORY[0x185301F50](v18);
      unint64_t v4 = v19;
      a1 = swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    if (!*(unsigned char *)(v1 + 96))
    {
LABEL_21:
      uint64_t v3 = 0;
      unint64_t v4 = 0xE000000000000000;
      goto LABEL_22;
    }
    if (*(unsigned char *)(v1 + 13) && v5 && (v5[144] & 1) == 0)
    {
      unint64_t v11 = String.subscript.getter();
      if (!((v11 ^ v12) >> 14))
      {
        a1 = swift_bridgeObjectRelease();
        if (v8) {
          goto LABEL_19;
        }
LABEL_54:
        if (!v6 || !v5 || (v5[72] & 1) != 0)
        {
          if (v9) {
            goto LABEL_21;
          }
          uint64_t v26 = 0;
          if (!v7 || !v5) {
            return v26;
          }
          if (v5[96]) {
            return 0;
          }
          uint64_t v48 = String.subscript.getter();
          MEMORY[0x185301F50](v48);
          swift_bridgeObjectRelease();
          goto LABEL_20;
        }
        uint64_t v47 = String.subscript.getter();
        MEMORY[0x185301F50](v47);
        swift_bridgeObjectRelease();
LABEL_19:
        swift_bridgeObjectRetain();
LABEL_20:
        a1 = swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      uint64_t v15 = v12;
      unint64_t v53 = v13;
      unint64_t v54 = v11;
      unint64_t v55 = v14;
      _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v11, v12, v13, v14, 10);
      if ((v16 & 0x100) != 0) {
        specialized _parseInteger<A, B>(ascii:radix:)(v54, v15, v53, v55, 10);
      }
      char v17 = v16;
      a1 = swift_bridgeObjectRelease();
      if ((v17 & 1) == 0) {
        goto LABEL_21;
      }
    }
    if (v8) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }
  uint64_t v3 = *(void *)(v1 + 72);
  unint64_t v4 = *(void *)(v1 + 80);
LABEL_22:
  uint64_t v20 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0) {
    uint64_t v21 = HIBYTE(v4) & 0xF;
  }
  else {
    uint64_t v21 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (v21)
  {
    if (v2)
    {
      unint64_t v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
      uint64_t v60 = v4;
      MEMORY[0x1F4188790](a1);
      unint64_t v51 = &v59;
      uint64_t v52 = MEMORY[0x1E4FBC870];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v22 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:), (uint64_t)&v50, v3, v4);
      if (v23 == 1)
      {
        unint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v59;
        unint64_t v25 = v60;
        swift_bridgeObjectRetain();
        uint64_t v26 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)((Swift::Int)v24, v25, MEMORY[0x1E4FBC870]);
        swift_bridgeObjectRelease_n();
LABEL_51:
        swift_bridgeObjectRelease();
        return v26;
      }
      uint64_t v26 = (uint64_t)v22;
      goto LABEL_40;
    }
    if ((v4 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((v4 & 0x2000000000000000) != 0)
      {
        unint64_t v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
        uint64_t v60 = v4 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v57 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        uint64_t v58 = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v59, HIBYTE(v4) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v57, 0, (unsigned __int8 *)&v59, HIBYTE(v4) & 0xF, v56);
        uint64_t v26 = v56[0];
        uint64_t v29 = v56[1];
        swift_release();
      }
      else
      {
        if ((v3 & 0x1000000000000000) != 0)
        {
          unint64_t v27 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          unint64_t v27 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          uint64_t v20 = v43;
        }
        unint64_t v59 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        uint64_t v60 = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        uint64_t v26 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v27, v20, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v59, 0, v27, v20);
        uint64_t v29 = v28;
      }
      swift_bridgeObjectRelease();
      if (v29 != 1)
      {
LABEL_40:
        swift_bridgeObjectRelease_n();
        return v26;
      }
    }
    unint64_t v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
    uint64_t v60 = v4;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    long long v30 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v31 = objc_msgSend(v30, sel__fastCharacterContents);
    id v32 = v30;
    if (v31)
    {
      unint64_t v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
      uint64_t v60 = v4;
      StringProtocol._ephemeralString.getter();
      uint64_t v33 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v34 = objc_msgSend(v33, sel_length);
      uint64_t v35 = swift_unknownObjectRelease();
      MEMORY[0x1F4188790](v35);
      LOBYTE(v51) = 0;
      MEMORY[0x1F4188790](v36);
      v49[2] = v31;
      v49[3] = v34;
      uint64_t v26 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v31, (uint64_t)v34, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), v37, partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), (uint64_t)v49);
      swift_bridgeObjectRelease_n();
      return v26;
    }
    unint64_t v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v3;
    uint64_t v60 = v4;
    swift_bridgeObjectRetain();
    uint64_t v39 = String.init<A>(_:)();
    unint64_t v40 = v38;
    if ((v38 & 0x1000000000000000) != 0)
    {
      uint64_t v39 = static String._copying(_:)();
      unint64_t v45 = v44;
      swift_bridgeObjectRelease();
      unint64_t v40 = v45;
      if ((v45 & 0x2000000000000000) == 0) {
        goto LABEL_43;
      }
    }
    else if ((v38 & 0x2000000000000000) == 0)
    {
LABEL_43:
      if ((v39 & 0x1000000000000000) != 0)
      {
        uint64_t v41 = (unsigned __int8 *)((v40 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v42 = v39 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v41 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      unint64_t v59 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      uint64_t v60 = 0;
      uint64_t v26 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v41, v42, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v59, 0, v41, v42);
      goto LABEL_50;
    }
    unint64_t v59 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v39;
    uint64_t v60 = v40 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v57 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v58 = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v59, HIBYTE(v40) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v57, 0, (unsigned __int8 *)&v59, HIBYTE(v40) & 0xF, v56);
    uint64_t v26 = v56[0];
    swift_release();
LABEL_50:
    swift_bridgeObjectRelease_n();
    goto LABEL_51;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return 0;
}

void (*URLComponents.host.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)malloc(0x108uLL);
  *a1 = v3;
  uint64_t v4 = (uint64_t)(v3 + 176);
  *((void *)v3 + 32) = v1;
  long long v5 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  long long v6 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v6;
  long long v7 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v7;
  long long v8 = v1[1];
  *(_OWORD *)uint64_t v3 = *v1;
  *((_OWORD *)v3 + 1) = v8;
  outlined init with take of LocalePreferences?((uint64_t)(v3 + 72), (uint64_t)(v3 + 176), &demangling cache variable for type metadata for String?);
  uint64_t v9 = outlined init with take of LocalePreferences?((uint64_t)(v3 + 176), (uint64_t)(v3 + 192), &demangling cache variable for type metadata for String?);
  unint64_t v10 = *((void *)v3 + 25);
  if (v10)
  {
    uint64_t v11 = *((void *)v3 + 24);
  }
  else if ((v3[12] & 1) != 0 {
         && (outlined init with take of LocalePreferences?((uint64_t)v3, (uint64_t)(v3 + 248), &demangling cache variable for type metadata for URLParseInfo?), outlined init with take of LocalePreferences?((uint64_t)(v3 + 248), (uint64_t)(v3 + 232), &demangling cache variable for type metadata for URLParseInfo?), (uint64_t v12 = *((void *)v3 + 29)) != 0)&& (*(unsigned char *)(v12 + 120) & 1) == 0)
  }
  {
    uint64_t v18 = String.subscript.getter();
    uint64_t v11 = MEMORY[0x185301F50](v18);
    unint64_t v10 = v19;
    uint64_t v9 = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = URLComponents._URLComponents.port.getter();
    if (v13)
    {
      uint64_t v14 = URLComponents._URLComponents.percentEncodedUser.getter();
      uint64_t v16 = v15;
      uint64_t v9 = swift_bridgeObjectRelease();
      unint64_t v17 = 0;
      if (!v16) {
        goto LABEL_40;
      }
      unint64_t v10 = 0xE000000000000000;
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v10 = 0xE000000000000000;
    }
  }
  uint64_t v20 = v11 & 0xFFFFFFFFFFFFLL;
  if ((v10 & 0x2000000000000000) != 0) {
    uint64_t v21 = HIBYTE(v10) & 0xF;
  }
  else {
    uint64_t v21 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (v21)
  {
    if (v3[152])
    {
      *((void *)v3 + 20) = v11;
      *((void *)v3 + 21) = v10;
      MEMORY[0x1F4188790](v9);
      uint64_t v50 = v3 + 160;
      uint64_t v51 = MEMORY[0x1E4FBC870];
      outlined retain of String?(v4);
      swift_bridgeObjectRetain();
      unint64_t v24 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v49, v11, v10);
      if (v25 != 1)
      {
        uint64_t v14 = (uint64_t)v24;
        unint64_t v17 = v25;
LABEL_39:
        swift_bridgeObjectRelease_n();
        goto LABEL_40;
      }
      Swift::Int v26 = *((void *)v3 + 20);
      unint64_t v27 = *((void *)v3 + 21);
      swift_bridgeObjectRetain();
      uint64_t v14 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v26, v27, MEMORY[0x1E4FBC870]);
      unint64_t v17 = v28;
    }
    else
    {
      if ((v10 & 0x1000000000000000) != 0)
      {
        outlined retain of String?(v4);
        swift_bridgeObjectRetain();
      }
      else
      {
        if ((v10 & 0x2000000000000000) != 0)
        {
          *((void *)v3 + 20) = v11;
          *((void *)v3 + 21) = v10 & 0xFFFFFFFFFFFFFFLL;
          unint64_t v54 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          uint64_t v55 = 0;
          swift_bridgeObjectRetain();
          outlined retain of String?(v4);
          swift_bridgeObjectRetain();
          closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)(v3 + 160), HIBYTE(v10) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, 0, (unsigned __int8 *)v3 + 160, HIBYTE(v10) & 0xF, &v52);
          uint64_t v14 = v52;
          unint64_t v17 = v53;
          swift_release();
        }
        else
        {
          if ((v11 & 0x1000000000000000) != 0)
          {
            unint64_t v22 = (unsigned __int8 *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            unint64_t v22 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
            uint64_t v20 = v44;
          }
          unint64_t v54 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
          uint64_t v55 = 0;
          swift_bridgeObjectRetain();
          outlined retain of String?(v4);
          swift_bridgeObjectRetain();
          uint64_t v14 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v22, v20, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, 0, v22, v20);
          unint64_t v17 = v23;
        }
        swift_bridgeObjectRelease();
        if (v17 != 1) {
          goto LABEL_39;
        }
      }
      *((void *)v3 + 20) = v11;
      *((void *)v3 + 21) = v10;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol._ephemeralString.getter();
      uint64_t v29 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v30 = objc_msgSend(v29, sel__fastCharacterContents);
      id v31 = v29;
      if (v30)
      {
        *((void *)v3 + 20) = v11;
        *((void *)v3 + 21) = v10;
        StringProtocol._ephemeralString.getter();
        id v32 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v33 = objc_msgSend(v32, sel_length);
        uint64_t v34 = swift_unknownObjectRelease();
        MEMORY[0x1F4188790](v34);
        LOBYTE(v50) = 0;
        MEMORY[0x1F4188790](v35);
        _OWORD v48[2] = v30;
        v48[3] = v33;
        uint64_t v14 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v30, (uint64_t)v33, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v36, (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v48);
        unint64_t v17 = v37;
        swift_bridgeObjectRelease_n();
        goto LABEL_40;
      }
      *((void *)v3 + 20) = v11;
      *((void *)v3 + 21) = v10;
      swift_bridgeObjectRetain();
      uint64_t v39 = String.init<A>(_:)();
      unint64_t v40 = v38;
      if ((v38 & 0x1000000000000000) != 0)
      {
        uint64_t v39 = static String._copying(_:)();
        unint64_t v46 = v45;
        swift_bridgeObjectRelease();
        unint64_t v40 = v46;
        if ((v46 & 0x2000000000000000) == 0) {
          goto LABEL_31;
        }
      }
      else if ((v38 & 0x2000000000000000) == 0)
      {
LABEL_31:
        if ((v39 & 0x1000000000000000) != 0)
        {
          uint64_t v41 = (unsigned __int8 *)((v40 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v42 = v39 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v41 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        }
        unint64_t v54 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        uint64_t v55 = 0;
        uint64_t v14 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v41, v42, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, 0, v41, v42);
        unint64_t v17 = v43;
        goto LABEL_38;
      }
      *((void *)v3 + 20) = v39;
      *((void *)v3 + 21) = v40 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v54 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      uint64_t v55 = 0;
      closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)(v3 + 160), HIBYTE(v40) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, 0, (unsigned __int8 *)v3 + 160, HIBYTE(v40) & 0xF, &v52);
      uint64_t v14 = v52;
      unint64_t v17 = v53;
      swift_release();
    }
LABEL_38:
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  outlined retain of String?(v4);
  swift_bridgeObjectRelease();
  uint64_t v14 = 0;
  unint64_t v17 = 0xE000000000000000;
LABEL_40:
  *((void *)v3 + 26) = v14;
  *((void *)v3 + 27) = v17;
  return URLComponents.host.modify;
}

void URLComponents.host.modify(uint64_t a1, char a2)
{
  char v2 = *(void **)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 208);
  unint64_t v4 = *(void *)(*(void *)a1 + 216);
  if (a2)
  {
    swift_bridgeObjectRetain();
    URLComponents._URLComponents.host.setter(v3, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    URLComponents._URLComponents.host.setter(*(void *)(*(void *)a1 + 208), v4);
  }

  free(v2);
}

uint64_t URLComponents.port.getter()
{
  if (*(unsigned char *)(v0 + 96)) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = *(void *)(v0 + 88);
  }
  if (*(unsigned char *)(v0 + 96) == 1 && (*(unsigned char *)(v0 + 13) & 1) != 0)
  {
    if (!*(void *)v0 || (*(unsigned char *)(*(void *)v0 + 144) & 1) != 0) {
      return 0;
    }
    unint64_t v2 = String.subscript.getter();
    uint64_t v6 = v5;
    if (!((v2 ^ v3) >> 14))
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v7 = v2;
    uint64_t v8 = v3;
    uint64_t v9 = v4;
    uint64_t v10 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v2, v3, v4, v5, 10);
    if ((v11 & 0x100) != 0)
    {
      uint64_t v12 = specialized _parseInteger<A, B>(ascii:radix:)(v7, v8, v9, v6, 10);
      char v16 = v15;
      swift_bridgeObjectRelease();
      int v14 = v16 & 1;
    }
    else
    {
      uint64_t v12 = v10;
      char v13 = v11;
      swift_bridgeObjectRelease();
      int v14 = v13 & 1;
    }
    if (v14) {
      return 0;
    }
    else {
      return v12;
    }
  }
  return result;
}

uint64_t key path setter for URLComponents.port : URLComponents(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)result;
  char v3 = *(unsigned char *)(result + 8);
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 13) = 0;
  if ((v3 & 1) == 0 && v2 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 88) = v2;
    *(unsigned char *)(a2 + 96) = v3;
  }
  return result;
}

uint64_t (*URLComponents.port.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(void *)(v1 + 88);
  int v4 = *(unsigned __int8 *)(v1 + 96);
  if (*(unsigned char *)(v1 + 96)) {
    uint64_t v3 = 0;
  }
  if (v4 == 1 && (*(unsigned char *)(v1 + 13) & 1) != 0)
  {
    if (!*(void *)v1 || (*(unsigned char *)(*(void *)v1 + 144) & 1) != 0) {
      goto LABEL_7;
    }
    unint64_t v5 = String.subscript.getter();
    uint64_t v9 = v8;
    if (!((v5 ^ v6) >> 14))
    {
      swift_bridgeObjectRelease();
LABEL_7:
      uint64_t v3 = 0;
      LOBYTE(v4) = 1;
      goto LABEL_15;
    }
    uint64_t v10 = v5;
    uint64_t v11 = v6;
    uint64_t v12 = v7;
    uint64_t v13 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v5, v6, v7, v8, 10);
    if ((v14 & 0x100) != 0)
    {
      uint64_t v15 = specialized _parseInteger<A, B>(ascii:radix:)(v10, v11, v12, v9, 10);
      char v18 = v17;
      swift_bridgeObjectRelease();
      int v4 = v18 & 1;
    }
    else
    {
      uint64_t v15 = v13;
      char v16 = v14;
      swift_bridgeObjectRelease();
      int v4 = v16 & 1;
    }
    if (v4) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = v15;
    }
  }
LABEL_15:
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return URLComponents.port.modify;
}

uint64_t URLComponents.port.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  uint64_t v2 = *(void *)result;
  char v3 = *(unsigned char *)(result + 8);
  *(unsigned char *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 13) = 0;
  if (v2 >= 0) {
    char v4 = 1;
  }
  else {
    char v4 = v3;
  }
  if (v4)
  {
    *(void *)(v1 + 88) = v2;
    *(unsigned char *)(v1 + 96) = v3;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t key path getter for URLComponents.path : URLComponents@<X0>(_OWORD *a1@<X0>, void *a2@<X8>)
{
  long long v3 = a1[7];
  v11[6] = a1[6];
  _OWORD v11[7] = v3;
  v12[0] = a1[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)a1 + 138);
  long long v4 = a1[3];
  _OWORD v11[2] = a1[2];
  v11[3] = v4;
  long long v5 = a1[5];
  v11[4] = a1[4];
  v11[5] = v5;
  long long v6 = a1[1];
  v11[0] = *a1;
  v11[1] = v6;
  outlined retain of URLComponents((uint64_t)v11);
  unint64_t v7 = URLComponents._URLComponents.path.getter();
  uint64_t v9 = v8;
  uint64_t result = outlined release of URLComponents((uint64_t)v11);
  *a2 = v7;
  a2[1] = v9;
  return result;
}

void (*URLComponents.path.modify(void *a1))(uint64_t a1, char a2)
{
  long long v3 = (char *)malloc(0xB8uLL);
  *a1 = v3;
  *((void *)v3 + 22) = v1;
  long long v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  long long v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  long long v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  long long v7 = v1[1];
  *(_OWORD *)long long v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 20) = URLComponents._URLComponents.path.getter();
  *((void *)v3 + 21) = v8;
  return URLComponents.path.modify;
}

void URLComponents.path.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 160);
  unint64_t v4 = *(void *)(*(void *)a1 + 168);
  if (a2)
  {
    swift_bridgeObjectRetain();
    URLComponents._URLComponents.path.setter(v3, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    URLComponents._URLComponents.path.setter(*(void *)(*(void *)a1 + 160), v4);
  }

  free(v2);
}

void (*URLComponents.query.modify(void *a1))(uint64_t a1, char a2)
{
  unint64_t v3 = (char *)malloc(0xC8uLL);
  *a1 = v3;
  *((void *)v3 + 24) = v1;
  long long v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  long long v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  long long v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  long long v7 = v1[1];
  *(_OWORD *)unint64_t v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 20) = URLComponents._URLComponents.query.getter((uint64_t)v3);
  *((void *)v3 + 21) = v8;
  return URLComponents.query.modify;
}

void URLComponents.query.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 160);
  uint64_t v4 = *(void *)a1 + 176;
  uint64_t v5 = *(void *)(*(void *)a1 + 192);
  unint64_t v6 = *(void *)(*(void *)a1 + 168);
  *(unsigned char *)(v5 + 8) = 0;
  *(unsigned char *)(v5 + 15) = 0;
  if ((a2 & 1) == 0)
  {
    if (v6)
    {
      if ((v6 & 0x1000000000000000) != 0)
      {
        v2[22] = v3;
        v2[23] = v6;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        uint64_t v35 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v36 = (unsigned __int16 *)objc_msgSend(v35, sel__fastCharacterContents);
        id v37 = v35;
        if (v36)
        {
          v2[22] = v3;
          v2[23] = v6;
          StringProtocol._ephemeralString.getter();
          unint64_t v38 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v39 = (uint64_t)objc_msgSend(v38, sel_length);
          swift_unknownObjectRelease();
          LOBYTE(v39) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v36, v39, 0x40u, 0);
          uint64_t v17 = swift_bridgeObjectRelease();
          if (v39) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v41 = specialized Sequence.allSatisfy(_:)(v3, v6, 64);
          uint64_t v17 = swift_bridgeObjectRelease();
          if (v41) {
            goto LABEL_33;
          }
        }
LABEL_21:
        uint64_t v18 = HIBYTE(v6) & 0xF;
        if ((v6 & 0x2000000000000000) == 0) {
          uint64_t v18 = v3 & 0xFFFFFFFFFFFFLL;
        }
        if (v18)
        {
          v2[22] = v3;
          v2[23] = v6;
          MEMORY[0x1F4188790](v17);
          uint64_t v43 = v4;
          char v44 = 64;
          swift_bridgeObjectRetain();
          unint64_t v19 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v42, v3, v6);
          if (v20)
          {
            unint64_t v3 = (unint64_t)v19;
            unint64_t v21 = v20;
          }
          else
          {
            unint64_t v26 = v2[22];
            unint64_t v27 = v2[23];
            swift_bridgeObjectRetain();
            unint64_t v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v26, v27, 0x40u);
            unint64_t v21 = v28;
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease_n();
          unint64_t v6 = v21;
        }
        else
        {
          swift_bridgeObjectRelease();
          unint64_t v3 = 0;
          unint64_t v6 = 0xE000000000000000;
        }
        goto LABEL_33;
      }
      if ((v6 & 0x2000000000000000) != 0)
      {
        uint64_t v10 = HIBYTE(v6) & 0xF;
        v2[22] = v3;
        v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v9 = (char *)v4;
      }
      else if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v9 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v10 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v9 = (char *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 0x40u, 0);
      if ((v17 & 1) == 0) {
        goto LABEL_21;
      }
    }
LABEL_33:
    uint64_t v29 = v2[24];
    swift_bridgeObjectRelease();
    *(void *)(v29 + 120) = v3;
    *(void *)(v29 + 128) = v6;
    goto LABEL_34;
  }
  if (v6)
  {
    if ((v6 & 0x1000000000000000) != 0)
    {
      v2[22] = v3;
      v2[23] = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      id v30 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v31 = (unsigned __int16 *)objc_msgSend(v30, sel__fastCharacterContents);
      id v32 = v30;
      if (v31)
      {
        v2[22] = v3;
        v2[23] = v6;
        StringProtocol._ephemeralString.getter();
        id v33 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v34 = (uint64_t)objc_msgSend(v33, sel_length);
        swift_unknownObjectRelease();
        LOBYTE(v34) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v31, v34, 0x40u, 0);
        uint64_t v12 = swift_bridgeObjectRelease();
        if (v34) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v40 = specialized Sequence.allSatisfy(_:)(v3, v6, 64);
        uint64_t v12 = swift_bridgeObjectRelease();
        if (v40) {
          goto LABEL_30;
        }
      }
LABEL_14:
      uint64_t v13 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000) == 0) {
        uint64_t v13 = v3 & 0xFFFFFFFFFFFFLL;
      }
      if (v13)
      {
        v2[22] = v3;
        v2[23] = v6;
        MEMORY[0x1F4188790](v12);
        uint64_t v43 = v4;
        char v44 = 64;
        swift_bridgeObjectRetain();
        __int16 v14 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v42, v3, v6);
        if (v15)
        {
          unint64_t v3 = (unint64_t)v14;
          unint64_t v16 = v15;
        }
        else
        {
          unint64_t v22 = v2[22];
          unint64_t v23 = v2[23];
          swift_bridgeObjectRetain();
          unint64_t v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
          unint64_t v16 = v24;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease_n();
        unint64_t v6 = v16;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v3 = 0;
        unint64_t v6 = 0xE000000000000000;
      }
      goto LABEL_30;
    }
    if ((v6 & 0x2000000000000000) != 0)
    {
      uint64_t v8 = HIBYTE(v6) & 0xF;
      v2[22] = v3;
      v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
      long long v7 = (char *)v4;
    }
    else if ((v3 & 0x1000000000000000) != 0)
    {
      long long v7 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = v3 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      long long v7 = (char *)_StringObject.sharedUTF8.getter();
    }
    BOOL v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 0x40u, 0);
    uint64_t v12 = swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_14;
    }
  }
LABEL_30:
  uint64_t v25 = v2[24];
  swift_bridgeObjectRelease();
  *(void *)(v25 + 120) = v3;
  *(void *)(v25 + 128) = v6;
  swift_bridgeObjectRelease();
LABEL_34:
  free(v2);
}

void (*URLComponents.fragment.modify(void *a1))(uint64_t a1, char a2)
{
  unint64_t v3 = (char *)malloc(0xC8uLL);
  *a1 = v3;
  *((void *)v3 + 24) = v1;
  long long v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  long long v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  long long v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  long long v7 = v1[1];
  *(_OWORD *)unint64_t v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 20) = URLComponents._URLComponents.fragment.getter((uint64_t)v3);
  *((void *)v3 + 21) = v8;
  return URLComponents.fragment.modify;
}

void URLComponents.fragment.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 160);
  uint64_t v4 = *(void *)a1 + 176;
  uint64_t v5 = *(void *)(*(void *)a1 + 192);
  unint64_t v6 = *(void *)(*(void *)a1 + 168);
  *(unsigned char *)(v5 + 8) = 0;
  *(unsigned char *)(v5 + 16) = 0;
  if ((a2 & 1) == 0)
  {
    if (v6)
    {
      if ((v6 & 0x1000000000000000) != 0)
      {
        v2[22] = v3;
        v2[23] = v6;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        uint64_t v35 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v36 = (unsigned __int16 *)objc_msgSend(v35, sel__fastCharacterContents);
        id v37 = v35;
        if (v36)
        {
          v2[22] = v3;
          v2[23] = v6;
          StringProtocol._ephemeralString.getter();
          unint64_t v38 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v39 = (uint64_t)objc_msgSend(v38, sel_length);
          swift_unknownObjectRelease();
          LOBYTE(v39) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v36, v39, 0x40u, 0);
          uint64_t v17 = swift_bridgeObjectRelease();
          if (v39) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v41 = specialized Sequence.allSatisfy(_:)(v3, v6, 64);
          uint64_t v17 = swift_bridgeObjectRelease();
          if (v41) {
            goto LABEL_33;
          }
        }
LABEL_21:
        uint64_t v18 = HIBYTE(v6) & 0xF;
        if ((v6 & 0x2000000000000000) == 0) {
          uint64_t v18 = v3 & 0xFFFFFFFFFFFFLL;
        }
        if (v18)
        {
          v2[22] = v3;
          v2[23] = v6;
          MEMORY[0x1F4188790](v17);
          uint64_t v43 = v4;
          char v44 = 64;
          swift_bridgeObjectRetain();
          unint64_t v19 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v42, v3, v6);
          if (v20)
          {
            unint64_t v3 = (unint64_t)v19;
            unint64_t v21 = v20;
          }
          else
          {
            unint64_t v26 = v2[22];
            unint64_t v27 = v2[23];
            swift_bridgeObjectRetain();
            unint64_t v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v26, v27, 0x40u);
            unint64_t v21 = v28;
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease_n();
          unint64_t v6 = v21;
        }
        else
        {
          swift_bridgeObjectRelease();
          unint64_t v3 = 0;
          unint64_t v6 = 0xE000000000000000;
        }
        goto LABEL_33;
      }
      if ((v6 & 0x2000000000000000) != 0)
      {
        uint64_t v10 = HIBYTE(v6) & 0xF;
        v2[22] = v3;
        v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v9 = (char *)v4;
      }
      else if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v9 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v10 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v9 = (char *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 0x40u, 0);
      if ((v17 & 1) == 0) {
        goto LABEL_21;
      }
    }
LABEL_33:
    uint64_t v29 = v2[24];
    swift_bridgeObjectRelease();
    *(void *)(v29 + 136) = v3;
    *(void *)(v29 + 144) = v6;
    goto LABEL_34;
  }
  if (v6)
  {
    if ((v6 & 0x1000000000000000) != 0)
    {
      v2[22] = v3;
      v2[23] = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      id v30 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v31 = (unsigned __int16 *)objc_msgSend(v30, sel__fastCharacterContents);
      id v32 = v30;
      if (v31)
      {
        v2[22] = v3;
        v2[23] = v6;
        StringProtocol._ephemeralString.getter();
        id v33 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v34 = (uint64_t)objc_msgSend(v33, sel_length);
        swift_unknownObjectRelease();
        LOBYTE(v34) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v31, v34, 0x40u, 0);
        uint64_t v12 = swift_bridgeObjectRelease();
        if (v34) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v40 = specialized Sequence.allSatisfy(_:)(v3, v6, 64);
        uint64_t v12 = swift_bridgeObjectRelease();
        if (v40) {
          goto LABEL_30;
        }
      }
LABEL_14:
      uint64_t v13 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000) == 0) {
        uint64_t v13 = v3 & 0xFFFFFFFFFFFFLL;
      }
      if (v13)
      {
        v2[22] = v3;
        v2[23] = v6;
        MEMORY[0x1F4188790](v12);
        uint64_t v43 = v4;
        char v44 = 64;
        swift_bridgeObjectRetain();
        __int16 v14 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v42, v3, v6);
        if (v15)
        {
          unint64_t v3 = (unint64_t)v14;
          unint64_t v16 = v15;
        }
        else
        {
          unint64_t v22 = v2[22];
          unint64_t v23 = v2[23];
          swift_bridgeObjectRetain();
          unint64_t v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v22, v23, 0x40u);
          unint64_t v16 = v24;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease_n();
        unint64_t v6 = v16;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v3 = 0;
        unint64_t v6 = 0xE000000000000000;
      }
      goto LABEL_30;
    }
    if ((v6 & 0x2000000000000000) != 0)
    {
      uint64_t v8 = HIBYTE(v6) & 0xF;
      v2[22] = v3;
      v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
      long long v7 = (char *)v4;
    }
    else if ((v3 & 0x1000000000000000) != 0)
    {
      long long v7 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v8 = v3 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      long long v7 = (char *)_StringObject.sharedUTF8.getter();
    }
    BOOL v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 0x40u, 0);
    uint64_t v12 = swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_14;
    }
  }
LABEL_30:
  uint64_t v25 = v2[24];
  swift_bridgeObjectRelease();
  *(void *)(v25 + 136) = v3;
  *(void *)(v25 + 144) = v6;
  swift_bridgeObjectRelease();
LABEL_34:
  free(v2);
}

uint64_t URLComponents.percentEncodedUser.getter()
{
  if (v0[6])
  {
    uint64_t v1 = v0[5];
    goto LABEL_15;
  }
  uint64_t v2 = *v0;
  int v3 = *((unsigned __int8 *)v0 + 11);
  BOOL v4 = *((unsigned char *)v0 + 10) != 1 || v2 == 0;
  if (!v4 && (*(unsigned char *)(v2 + 72) & 1) == 0)
  {
    uint64_t v5 = String.subscript.getter();
    uint64_t v1 = MEMORY[0x185301F50](v5);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (v0[8])
  {
LABEL_9:
    uint64_t v1 = 0;
    goto LABEL_15;
  }
  uint64_t v1 = 0;
  if (v3 && v2)
  {
    if (*(unsigned char *)(v2 + 96))
    {
      uint64_t v1 = 0;
      goto LABEL_15;
    }
    uint64_t v7 = String.subscript.getter();
    MEMORY[0x185301F50](v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
LABEL_15:
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLComponents.percentEncodedUser.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(unsigned char *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 10) = 0;
  if (!a2)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 40) = a1;
    *(void *)(v3 + 48) = a2;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v16 = a1;
    uint64_t v17 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents);
    id v11 = v9;
    if (v10)
    {
      unint64_t v16 = a1;
      uint64_t v17 = a2;
      StringProtocol._ephemeralString.getter();
      uint64_t v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 2u, 1);
    }
    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 2u, 1);
    }
    char v15 = v14;
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v16 = a1;
      uint64_t v17 = a2 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v6 = (char *)&v16;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      unint64_t v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 1)) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*URLComponents.percentEncodedUser.modify(void *a1))(unint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  *uint64_t v3 = URLComponents.percentEncodedUser.getter();
  v3[1] = v4;
  return URLComponents.percentEncodedUser.modify;
}

void URLComponents.percentEncodedUser.modify(unint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 2);
  unint64_t v4 = (*a1)[4];
  unint64_t v6 = **a1;
  unint64_t v5 = (*a1)[1];
  *(unsigned char *)(v4 + 8) = 0;
  *(unsigned char *)(v4 + 10) = 0;
  if ((a2 & 1) == 0)
  {
    if (v5)
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        v2[2] = v6;
        v2[3] = v5;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        unint64_t v20 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        unint64_t v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
        id v22 = v20;
        if (v21)
        {
          v2[2] = v6;
          v2[3] = v5;
          StringProtocol._ephemeralString.getter();
          unint64_t v23 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v24 = objc_msgSend(v23, sel_length);
          swift_unknownObjectRelease();
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, (uint64_t)v24, 2u, 1);
        }
        else
        {
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 2u, 1);
        }
        char v27 = v25;
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0) {
          goto LABEL_32;
        }
      }
      else
      {
        if ((v5 & 0x2000000000000000) != 0)
        {
          uint64_t v10 = HIBYTE(v5) & 0xF;
          v2[2] = v6;
          v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v9 = (char *)v3;
        }
        else if ((v6 & 0x1000000000000000) != 0)
        {
          uint64_t v9 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v9 = (char *)_StringObject.sharedUTF8.getter();
        }
        if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 2u, 1)) {
          goto LABEL_32;
        }
      }
    }
    unint64_t v13 = v2[4];
    swift_bridgeObjectRelease();
    *(void *)(v13 + 40) = v6;
    *(void *)(v13 + 48) = v5;
    goto LABEL_18;
  }
  if (v5)
  {
    if ((v5 & 0x1000000000000000) != 0)
    {
      v2[2] = v6;
      v2[3] = v5;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      char v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      char v15 = (unsigned __int16 *)objc_msgSend(v14, sel__fastCharacterContents);
      id v16 = v14;
      if (v15)
      {
        v2[2] = v6;
        v2[3] = v5;
        StringProtocol._ephemeralString.getter();
        uint64_t v17 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v18 = objc_msgSend(v17, sel_length);
        swift_unknownObjectRelease();
        char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v15, (uint64_t)v18, 2u, 1);
      }
      else
      {
        char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 2u, 1);
      }
      char v26 = v19;
      swift_bridgeObjectRelease();
      if (v26) {
        goto LABEL_14;
      }
    }
    else
    {
      if ((v5 & 0x2000000000000000) != 0)
      {
        uint64_t v8 = HIBYTE(v5) & 0xF;
        v2[2] = v6;
        v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v7 = (char *)v3;
      }
      else if ((v6 & 0x1000000000000000) != 0)
      {
        uint64_t v7 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v8 = v6 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v7 = (char *)_StringObject.sharedUTF8.getter();
      }
      BOOL v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 2u, 1);
      swift_bridgeObjectRetain();
      if (v11) {
        goto LABEL_14;
      }
    }
LABEL_32:
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
LABEL_14:
  unint64_t v12 = v2[4];
  swift_bridgeObjectRelease();
  *(void *)(v12 + 40) = v6;
  *(void *)(v12 + 48) = v5;
  swift_bridgeObjectRelease();
LABEL_18:

  free(v2);
}

uint64_t URLComponents.percentEncodedPassword.getter()
{
  if (v0[8])
  {
    uint64_t v1 = v0[7];
  }
  else
  {
    uint64_t v2 = *v0;
    BOOL v3 = *((unsigned char *)v0 + 11) != 1 || v2 == 0;
    if (v3 || (*(unsigned char *)(v2 + 96) & 1) != 0)
    {
      uint64_t v1 = 0;
    }
    else
    {
      uint64_t v4 = String.subscript.getter();
      uint64_t v1 = MEMORY[0x185301F50](v4);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLComponents.percentEncodedPassword.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(unsigned char *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 11) = 0;
  if (!a2)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 56) = a1;
    *(void *)(v3 + 64) = a2;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v16 = a1;
    uint64_t v17 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents);
    id v11 = v9;
    if (v10)
    {
      unint64_t v16 = a1;
      uint64_t v17 = a2;
      StringProtocol._ephemeralString.getter();
      unint64_t v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 2u, 1);
    }
    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 2u, 1);
    }
    char v15 = v14;
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v16 = a1;
      uint64_t v17 = a2 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v6 = (char *)&v16;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      unint64_t v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 2u, 1)) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*URLComponents.percentEncodedPassword.modify(void *a1))(unint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (v1[8])
  {
    uint64_t v4 = v1[7];
    uint64_t v5 = v1[8];
  }
  else
  {
    uint64_t v6 = *v1;
    BOOL v7 = *((unsigned char *)v1 + 11) != 1 || v6 == 0;
    if (v7 || (*(unsigned char *)(v6 + 96) & 1) != 0)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v8 = String.subscript.getter();
      uint64_t v4 = MEMORY[0x185301F50](v8);
      uint64_t v5 = v9;
      swift_bridgeObjectRelease();
    }
  }
  *uint64_t v3 = v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  return URLComponents.percentEncodedPassword.modify;
}

void URLComponents.percentEncodedPassword.modify(unint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 2);
  unint64_t v4 = (*a1)[4];
  unint64_t v6 = **a1;
  unint64_t v5 = (*a1)[1];
  *(unsigned char *)(v4 + 8) = 0;
  *(unsigned char *)(v4 + 11) = 0;
  if ((a2 & 1) == 0)
  {
    if (v5)
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        v2[2] = v6;
        v2[3] = v5;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        unint64_t v20 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        unint64_t v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
        id v22 = v20;
        if (v21)
        {
          v2[2] = v6;
          v2[3] = v5;
          StringProtocol._ephemeralString.getter();
          unint64_t v23 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v24 = objc_msgSend(v23, sel_length);
          swift_unknownObjectRelease();
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, (uint64_t)v24, 2u, 1);
        }
        else
        {
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 2u, 1);
        }
        char v27 = v25;
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0) {
          goto LABEL_32;
        }
      }
      else
      {
        if ((v5 & 0x2000000000000000) != 0)
        {
          uint64_t v10 = HIBYTE(v5) & 0xF;
          v2[2] = v6;
          v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v9 = (char *)v3;
        }
        else if ((v6 & 0x1000000000000000) != 0)
        {
          uint64_t v9 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v9 = (char *)_StringObject.sharedUTF8.getter();
        }
        if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 2u, 1)) {
          goto LABEL_32;
        }
      }
    }
    unint64_t v13 = v2[4];
    swift_bridgeObjectRelease();
    *(void *)(v13 + 56) = v6;
    *(void *)(v13 + 64) = v5;
    goto LABEL_18;
  }
  if (v5)
  {
    if ((v5 & 0x1000000000000000) != 0)
    {
      v2[2] = v6;
      v2[3] = v5;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      char v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      char v15 = (unsigned __int16 *)objc_msgSend(v14, sel__fastCharacterContents);
      id v16 = v14;
      if (v15)
      {
        v2[2] = v6;
        v2[3] = v5;
        StringProtocol._ephemeralString.getter();
        uint64_t v17 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v18 = objc_msgSend(v17, sel_length);
        swift_unknownObjectRelease();
        char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v15, (uint64_t)v18, 2u, 1);
      }
      else
      {
        char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 2u, 1);
      }
      char v26 = v19;
      swift_bridgeObjectRelease();
      if (v26) {
        goto LABEL_14;
      }
    }
    else
    {
      if ((v5 & 0x2000000000000000) != 0)
      {
        uint64_t v8 = HIBYTE(v5) & 0xF;
        v2[2] = v6;
        v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
        BOOL v7 = (char *)v3;
      }
      else if ((v6 & 0x1000000000000000) != 0)
      {
        BOOL v7 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v8 = v6 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        BOOL v7 = (char *)_StringObject.sharedUTF8.getter();
      }
      BOOL v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 2u, 1);
      swift_bridgeObjectRetain();
      if (v11) {
        goto LABEL_14;
      }
    }
LABEL_32:
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
LABEL_14:
  unint64_t v12 = v2[4];
  swift_bridgeObjectRelease();
  *(void *)(v12 + 56) = v6;
  *(void *)(v12 + 64) = v5;
  swift_bridgeObjectRelease();
LABEL_18:

  free(v2);
}

unint64_t URLComponents.percentEncodedHost.getter()
{
  return URLComponents._URLComponents.percentEncodedHost.getter();
}

uint64_t key path setter for URLComponents.scheme : URLComponents(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  a5(v6, v7);

  return swift_bridgeObjectRelease();
}

uint64_t URLComponents.percentEncodedHost.setter(uint64_t a1, uint64_t a2)
{
  return URLComponents.scheme.setter(a1, a2, (void (*)(void))URLComponents._URLComponents.setPercentEncodedHost(_:));
}

void (*URLComponents.percentEncodedHost.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)malloc(0xB8uLL);
  *a1 = v3;
  *((void *)v3 + 22) = v1;
  long long v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  long long v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  long long v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  long long v7 = v1[1];
  *(_OWORD *)uint64_t v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 20) = URLComponents._URLComponents.percentEncodedHost.getter();
  *((void *)v3 + 21) = v8;
  return URLComponents.percentEncodedHost.modify;
}

void URLComponents.percentEncodedHost.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 160);
  long long v4 = *(void **)(*(void *)a1 + 168);
  if ((a2 & 1) == 0)
  {
    v7.value._unint64_t countAndFlagsBits = *(void *)(*(void *)a1 + 160);
    v7.value._unint64_t object = v4;
    URLComponents._URLComponents.setPercentEncodedHost(_:)(v7);
    if (!v6) {
      goto LABEL_5;
    }
LABEL_8:

    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  swift_bridgeObjectRetain();
  v5.value._unint64_t countAndFlagsBits = v3;
  v5.value._unint64_t object = v4;
  URLComponents._URLComponents.setPercentEncodedHost(_:)(v5);
  if (v6) {
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
LABEL_5:
  swift_bridgeObjectRelease();

  free(v2);
}

uint64_t URLComponents.encodedHost.getter()
{
  return URLComponents._URLComponents.encodedHost.getter();
}

uint64_t URLComponents.encodedHost.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(unsigned char *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 12) = 0;
  *(_WORD *)(v2 + 152) = 0;
  if (!a2)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v2 + 72) = a1;
    *(void *)(v2 + 80) = 0;
    return result;
  }
  unint64_t v6 = specialized Collection.first.getter(a1, a2);
  if ((v6 & 0x1FF) != 0x5B) {
    goto LABEL_23;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    uint64_t result = String.UTF8View._foreignCount()();
    if (__OFSUB__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v8 = (a1 >> 59) & 1;
    unint64_t v6 = MEMORY[0x185302230](15, result - 1, a1, a2);
  }
  else
  {
    uint64_t v7 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (!v7)
    {
      __break(1u);
      goto LABEL_36;
    }
    unint64_t v6 = (v7 << 16) - 65532;
    LOBYTE(v8) = 1;
  }
  if ((v6 & 0xC) == 4 << v8) {
LABEL_36:
  }
    unint64_t v6 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, a1, a2);
  unint64_t v9 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    unint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v10 = v6 >> 16;
  if (v6 >> 16 >= v9)
  {
    __break(1u);
    goto LABEL_38;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    char v12 = String.UTF8View._foreignSubscript(position:)();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    unint64_t v28 = a1;
    uint64_t v29 = a2 & 0xFFFFFFFFFFFFFFLL;
    char v12 = *((unsigned char *)&v28 + v10);
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v11 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v11 = _StringObject.sharedUTF8.getter();
    }
    char v12 = *(unsigned char *)(v11 + v10);
  }
  if (v12 != 93) {
    goto LABEL_23;
  }
  if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(a1, a2) & 1) == 0)
  {
    do
    {
      while (1)
      {
        swift_bridgeObjectRelease();
        int v27 = 0;
        uint64_t v26 = 876;
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_23:
        if ((a2 & 0x1000000000000000) == 0) {
          break;
        }
        unint64_t v28 = a1;
        uint64_t v29 = a2;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain_n();
        StringProtocol._ephemeralString.getter();
        id v18 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        char v19 = (unsigned __int16 *)objc_msgSend(v18, sel__fastCharacterContents);
        id v20 = v18;
        if (v19)
        {
          unint64_t v28 = a1;
          uint64_t v29 = a2;
          StringProtocol._ephemeralString.getter();
          unint64_t v21 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v22 = objc_msgSend(v21, sel_length);
          swift_unknownObjectRelease();
          char v23 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v19, (uint64_t)v22, 4u, 1);
        }
        else
        {
          char v23 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 4u, 1);
        }
        char v24 = v23;
        swift_bridgeObjectRelease_n();
        if (v24) {
          goto LABEL_29;
        }
      }
      if ((a2 & 0x2000000000000000) != 0)
      {
        uint64_t v15 = HIBYTE(a2) & 0xF;
        unint64_t v28 = a1;
        uint64_t v29 = a2 & 0xFFFFFFFFFFFFFFLL;
        char v14 = (char *)&v28;
      }
      else if ((a1 & 0x1000000000000000) != 0)
      {
        char v14 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v15 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
LABEL_38:
        char v14 = (char *)_StringObject.sharedUTF8.getter();
      }
    }
    while (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v14, v15, 4u, 1));
  }
LABEL_29:
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_bridgeObjectRelease();
  *(void *)(v3 + 72) = a1;
  *(void *)(v3 + 80) = a2;
  LOBYTE(v28) = 37;
  MEMORY[0x1F4188790](v16);
  uint64_t v26 = (uint64_t)&v28;
  swift_bridgeObjectRetain();
  char v17 = specialized Sequence.contains(where:)((uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)&v25, a1, a2);
  uint64_t result = swift_bridgeObjectRelease_n();
  *(unsigned char *)(v3 + 152) = v17 & 1;
  return result;
}

void (*URLComponents.encodedHost.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)malloc(0xC8uLL);
  *a1 = v3;
  *((void *)v3 + 24) = v1;
  long long v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  long long v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  long long v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  long long v7 = v1[1];
  *(_OWORD *)uint64_t v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 20) = URLComponents._URLComponents.encodedHost.getter();
  *((void *)v3 + 21) = v8;
  return URLComponents.encodedHost.modify;
}

void URLComponents.encodedHost.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  unint64_t v4 = *(void *)(*(void *)a1 + 160);
  uint64_t v5 = *(void *)a1 + 176;
  uint64_t v6 = *(void *)(*(void *)a1 + 192);
  unint64_t v7 = *(void *)(*(void *)a1 + 168);
  *(unsigned char *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 12) = 0;
  *(_WORD *)(v6 + 152) = 0;
  if ((a2 & 1) == 0)
  {
    if (!v7)
    {
      uint64_t v20 = v3[24];
      swift_bridgeObjectRelease();
      *(void *)(v20 + 72) = v4;
      *(void *)(v20 + 80) = 0;
      goto LABEL_61;
    }
    unint64_t v8 = specialized Collection.first.getter(v4, v7);
    if ((v8 & 0x1FF) != 0x5B) {
      goto LABEL_54;
    }
    if ((v7 & 0x1000000000000000) != 0)
    {
      Swift::Int v44 = String.UTF8View._foreignCount()();
      if (__OFSUB__(v44, 1)) {
        goto LABEL_87;
      }
      uint64_t v15 = (v4 >> 59) & 1;
      unint64_t v8 = MEMORY[0x185302230](15, v44 - 1, v4, v7);
    }
    else
    {
      uint64_t v14 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0) {
        uint64_t v14 = v4 & 0xFFFFFFFFFFFFLL;
      }
      if (!v14) {
        goto LABEL_73;
      }
      unint64_t v8 = (v14 << 16) - 65532;
      LOBYTE(v15) = 1;
    }
    if ((v8 & 0xC) != 4 << v15) {
      goto LABEL_26;
    }
    goto LABEL_74;
  }
  if (!v7)
  {
    uint64_t v19 = v3[24];
    swift_bridgeObjectRelease();
    *(void *)(v19 + 72) = v4;
    *(void *)(v19 + 80) = 0;
    goto LABEL_49;
  }
  unint64_t v8 = specialized Collection.first.getter(v4, v7);
  if ((v8 & 0x1FF) != 0x5B) {
    goto LABEL_42;
  }
  if ((v7 & 0x1000000000000000) != 0)
  {
    Swift::Int v43 = String.UTF8View._foreignCount()();
    if (!__OFSUB__(v43, 1))
    {
      uint64_t v10 = (v4 >> 59) & 1;
      unint64_t v8 = MEMORY[0x185302230](15, v43 - 1, v4, v7);
LABEL_9:
      if ((v8 & 0xC) != 4 << v10) {
        goto LABEL_10;
      }
      goto LABEL_71;
    }
    __break(1u);
LABEL_87:
    __break(1u);
    return;
  }
  uint64_t v9 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v9)
  {
    unint64_t v8 = (v9 << 16) - 65532;
    LOBYTE(v10) = 1;
    goto LABEL_9;
  }
  __break(1u);
LABEL_71:
  unint64_t v8 = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, v4, v7);
LABEL_10:
  unint64_t v11 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    unint64_t v11 = v4 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v2 = v8 >> 16;
  if (v8 >> 16 >= v11)
  {
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    unint64_t v8 = _StringGuts._slowEnsureMatchingEncoding(_:)(v8, v4, v7);
LABEL_26:
    unint64_t v16 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0) {
      unint64_t v16 = v4 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v2 = v8 >> 16;
    if (v8 >> 16 >= v16)
    {
      __break(1u);
      goto LABEL_76;
    }
    if ((v7 & 0x1000000000000000) != 0)
    {
      char v18 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v7 & 0x2000000000000000) != 0)
    {
      unint64_t v48 = v4;
      uint64_t v49 = v7 & 0xFFFFFFFFFFFFFFLL;
      char v18 = *((unsigned char *)&v48 + v2);
    }
    else
    {
      if ((v4 & 0x1000000000000000) != 0) {
        uint64_t v17 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v17 = _StringObject.sharedUTF8.getter();
      }
      char v18 = *(unsigned char *)(v17 + v2);
    }
    if (v18 == 93)
    {
      swift_bridgeObjectRetain();
      unint64_t v2 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v4, v7);
      swift_bridgeObjectRelease();
      if ((v2 & 1) == 0) {
        goto LABEL_83;
      }
      goto LABEL_60;
    }
LABEL_54:
    if ((v7 & 0x1000000000000000) != 0)
    {
      v3[22] = v4;
      v3[23] = v7;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      id v37 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      unint64_t v38 = (unsigned __int16 *)objc_msgSend(v37, sel__fastCharacterContents);
      id v39 = v37;
      if (v38)
      {
        v3[22] = v4;
        v3[23] = v7;
        StringProtocol._ephemeralString.getter();
        uint64_t v40 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v41 = objc_msgSend(v40, sel_length);
        swift_unknownObjectRelease();
        uint64_t v42 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v38, (uint64_t)v41, 4u, 1);
      }
      else
      {
        uint64_t v42 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v4, v7, 4u, 1);
      }
      unint64_t v2 = v42;
      swift_bridgeObjectRelease_n();
      if ((v2 & 1) == 0) {
        goto LABEL_83;
      }
    }
    else
    {
      if ((v7 & 0x2000000000000000) != 0)
      {
        uint64_t v27 = HIBYTE(v7) & 0xF;
        v3[22] = v4;
        v3[23] = v7 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v26 = (char *)v5;
      }
      else if ((v4 & 0x1000000000000000) != 0)
      {
        uint64_t v26 = (char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v27 = v4 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v26 = (char *)_StringObject.sharedUTF8.getter();
      }
      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v26, v27, 4u, 1)) {
        goto LABEL_83;
      }
    }
LABEL_60:
    uint64_t v28 = v3[24];
    swift_bridgeObjectRetain();
    uint64_t v29 = swift_bridgeObjectRelease();
    *(void *)(v28 + 72) = v4;
    *(void *)(v28 + 80) = v7;
    *((unsigned char *)v3 + 176) = 37;
    MEMORY[0x1F4188790](v29);
    uint64_t v46 = v5;
    swift_bridgeObjectRetain();
    char v30 = specialized Sequence.contains(where:)((uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v45, v4, v7);
    swift_bridgeObjectRelease_n();
    *(unsigned char *)(v6 + 152) = v30 & 1;
    goto LABEL_61;
  }
  if ((v7 & 0x1000000000000000) != 0)
  {
    char v13 = String.UTF8View._foreignSubscript(position:)();
    goto LABEL_39;
  }
  if ((v7 & 0x2000000000000000) != 0)
  {
    unint64_t v48 = v4;
    uint64_t v49 = v7 & 0xFFFFFFFFFFFFFFLL;
    char v13 = *((unsigned char *)&v48 + v2);
    goto LABEL_39;
  }
  if ((v4 & 0x1000000000000000) == 0) {
    goto LABEL_84;
  }
  for (uint64_t i = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32; ; uint64_t i = _StringObject.sharedUTF8.getter())
  {
    char v13 = *(unsigned char *)(i + v2);
LABEL_39:
    if (v13 == 93)
    {
      swift_bridgeObjectRetain_n();
      unint64_t v2 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v4, v7);
      swift_bridgeObjectRelease();
      if (v2) {
        goto LABEL_48;
      }
      goto LABEL_83;
    }
LABEL_42:
    if ((v7 & 0x1000000000000000) == 0) {
      break;
    }
    v3[22] = v4;
    v3[23] = v7;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    id v31 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v32 = (unsigned __int16 *)objc_msgSend(v31, sel__fastCharacterContents);
    id v33 = v31;
    if (v32)
    {
      v3[22] = v4;
      v3[23] = v7;
      StringProtocol._ephemeralString.getter();
      uint64_t v34 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v35 = objc_msgSend(v34, sel_length);
      swift_unknownObjectRelease();
      uint64_t v36 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v32, (uint64_t)v35, 4u, 1);
    }
    else
    {
      uint64_t v36 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v4, v7, 4u, 1);
    }
    unint64_t v2 = v36;
    swift_bridgeObjectRelease_n();
    if (v2) {
      goto LABEL_48;
    }
LABEL_83:
    swift_bridgeObjectRelease();
    int v47 = 0;
    uint64_t v46 = 876;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_84:
    ;
  }
  if ((v7 & 0x2000000000000000) != 0)
  {
    uint64_t v22 = HIBYTE(v7) & 0xF;
    v3[22] = v4;
    v3[23] = v7 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v21 = (char *)v5;
  }
  else if ((v4 & 0x1000000000000000) != 0)
  {
    unint64_t v21 = (char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v22 = v4 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
LABEL_76:
    unint64_t v21 = (char *)_StringObject.sharedUTF8.getter();
  }
  unint64_t v2 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, v22, 4u, 1);
  swift_bridgeObjectRetain();
  if ((v2 & 1) == 0) {
    goto LABEL_83;
  }
LABEL_48:
  uint64_t v23 = v3[24];
  swift_bridgeObjectRetain();
  uint64_t v24 = swift_bridgeObjectRelease();
  *(void *)(v23 + 72) = v4;
  *(void *)(v23 + 80) = v7;
  *((unsigned char *)v3 + 176) = 37;
  MEMORY[0x1F4188790](v24);
  uint64_t v46 = v5;
  swift_bridgeObjectRetain();
  char v25 = specialized Sequence.contains(where:)((uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v45, v4, v7);
  swift_bridgeObjectRelease_n();
  *(unsigned char *)(v6 + 152) = v25 & 1;
LABEL_49:
  swift_bridgeObjectRelease();
LABEL_61:
  free(v3);
}

uint64_t URLComponents.percentEncodedPath.getter()
{
  if (v0[14])
  {
    uint64_t v1 = v0[13];
  }
  else
  {
    uint64_t v2 = *v0;
    if (*((unsigned char *)v0 + 14) != 1 || v2 == 0)
    {
      uint64_t v1 = 0;
    }
    else
    {
      if (*(unsigned char *)(v2 + 168)) {
        uint64_t v4 = MEMORY[0x185302C80](0, 0xE000000000000000);
      }
      else {
        uint64_t v4 = String.subscript.getter();
      }
      uint64_t v1 = MEMORY[0x185301F50](v4);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLComponents.percentEncodedPath.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(unsigned char *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 14) = 0;
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v16 = a1;
    uint64_t v17 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    uint64_t v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents);
    id v11 = v9;
    if (v10)
    {
      unint64_t v16 = a1;
      uint64_t v17 = a2;
      StringProtocol._ephemeralString.getter();
      char v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 0x10u, 1);
    }
    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 0x10u, 1);
    }
    char v15 = v14;
    swift_bridgeObjectRelease_n();
    if (v15) {
      goto LABEL_7;
    }
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v16 = a1;
      uint64_t v17 = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v16;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x10u, 1))
    {
LABEL_7:
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v3 + 104) = a1;
      *(void *)(v3 + 112) = a2;
      return result;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*URLComponents.percentEncodedPath.modify(void *a1))(unint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (v1[14])
  {
    uint64_t v4 = v1[13];
    unint64_t v5 = v1[14];
  }
  else
  {
    uint64_t v6 = *v1;
    if (*((unsigned char *)v1 + 14) != 1 || v6 == 0)
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0xE000000000000000;
    }
    else
    {
      if (*(unsigned char *)(v6 + 168)) {
        uint64_t v8 = MEMORY[0x185302C80](0, 0xE000000000000000);
      }
      else {
        uint64_t v8 = String.subscript.getter();
      }
      uint64_t v4 = MEMORY[0x185301F50](v8);
      unint64_t v5 = v9;
      swift_bridgeObjectRelease();
    }
  }
  *uint64_t v3 = v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  return URLComponents.percentEncodedPath.modify;
}

void URLComponents.percentEncodedPath.modify(unint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 2);
  unint64_t v4 = (*a1)[4];
  unint64_t v6 = **a1;
  unint64_t v5 = (*a1)[1];
  *(unsigned char *)(v4 + 8) = 0;
  *(unsigned char *)(v4 + 14) = 0;
  if ((a2 & 1) == 0)
  {
    if ((v5 & 0x1000000000000000) != 0)
    {
      v2[2] = v6;
      v2[3] = v5;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      uint64_t v20 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      unint64_t v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
      id v22 = v20;
      if (v21)
      {
        v2[2] = v6;
        v2[3] = v5;
        StringProtocol._ephemeralString.getter();
        uint64_t v23 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v24 = objc_msgSend(v23, sel_length);
        swift_unknownObjectRelease();
        char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, (uint64_t)v24, 0x10u, 1);
      }
      else
      {
        char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x10u, 1);
      }
      char v27 = v25;
      swift_bridgeObjectRelease_n();
      if ((v27 & 1) == 0) {
        goto LABEL_30;
      }
    }
    else
    {
      if ((v5 & 0x2000000000000000) != 0)
      {
        uint64_t v10 = HIBYTE(v5) & 0xF;
        v2[2] = v6;
        v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v9 = (char *)v3;
      }
      else if ((v6 & 0x1000000000000000) != 0)
      {
        unint64_t v9 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        unint64_t v9 = (char *)_StringObject.sharedUTF8.getter();
      }
      if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 0x10u, 1)) {
        goto LABEL_30;
      }
    }
    unint64_t v13 = v2[4];
    swift_bridgeObjectRelease();
    *(void *)(v13 + 104) = v6;
    *(void *)(v13 + 112) = v5;
    goto LABEL_16;
  }
  if ((v5 & 0x1000000000000000) != 0)
  {
    v2[2] = v6;
    v2[3] = v5;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    char v14 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    char v15 = (unsigned __int16 *)objc_msgSend(v14, sel__fastCharacterContents);
    id v16 = v14;
    if (v15)
    {
      v2[2] = v6;
      v2[3] = v5;
      StringProtocol._ephemeralString.getter();
      uint64_t v17 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v18 = objc_msgSend(v17, sel_length);
      swift_unknownObjectRelease();
      char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v15, (uint64_t)v18, 0x10u, 1);
    }
    else
    {
      char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x10u, 1);
    }
    char v26 = v19;
    swift_bridgeObjectRelease_n();
    if (v26) {
      goto LABEL_12;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if ((v5 & 0x2000000000000000) != 0)
  {
    uint64_t v8 = HIBYTE(v5) & 0xF;
    v2[2] = v6;
    v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (char *)v3;
  }
  else if ((v6 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (char *)_StringObject.sharedUTF8.getter();
  }
  BOOL v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 0x10u, 1);
  swift_bridgeObjectRetain();
  if (!v11) {
    goto LABEL_30;
  }
LABEL_12:
  unint64_t v12 = v2[4];
  swift_bridgeObjectRelease();
  *(void *)(v12 + 104) = v6;
  *(void *)(v12 + 112) = v5;
  swift_bridgeObjectRelease();
LABEL_16:

  free(v2);
}

void (*URLComponents.percentEncodedQuery.modify(void *a1))(unint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (v1[16])
  {
    uint64_t v4 = v1[15];
    uint64_t v5 = v1[16];
  }
  else
  {
    uint64_t v6 = *v1;
    BOOL v7 = *((unsigned char *)v1 + 15) != 1 || v6 == 0;
    if (v7 || (*(unsigned char *)(v6 + 192) & 1) != 0)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v8 = String.subscript.getter();
      uint64_t v4 = MEMORY[0x185301F50](v8);
      uint64_t v5 = v9;
      swift_bridgeObjectRelease();
    }
  }
  *uint64_t v3 = v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  return URLComponents.percentEncodedQuery.modify;
}

void URLComponents.percentEncodedQuery.modify(unint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 2);
  unint64_t v4 = (*a1)[4];
  unint64_t v6 = **a1;
  unint64_t v5 = (*a1)[1];
  *(unsigned char *)(v4 + 8) = 0;
  *(unsigned char *)(v4 + 15) = 0;
  if ((a2 & 1) == 0)
  {
    if (v5)
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        v2[2] = v6;
        v2[3] = v5;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        uint64_t v20 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        unint64_t v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
        id v22 = v20;
        if (v21)
        {
          v2[2] = v6;
          v2[3] = v5;
          StringProtocol._ephemeralString.getter();
          uint64_t v23 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v24 = objc_msgSend(v23, sel_length);
          swift_unknownObjectRelease();
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, (uint64_t)v24, 0x40u, 1);
        }
        else
        {
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x40u, 1);
        }
        char v27 = v25;
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0) {
          goto LABEL_32;
        }
      }
      else
      {
        if ((v5 & 0x2000000000000000) != 0)
        {
          uint64_t v10 = HIBYTE(v5) & 0xF;
          v2[2] = v6;
          v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v9 = (char *)v3;
        }
        else if ((v6 & 0x1000000000000000) != 0)
        {
          uint64_t v9 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v9 = (char *)_StringObject.sharedUTF8.getter();
        }
        if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 0x40u, 1)) {
          goto LABEL_32;
        }
      }
    }
    unint64_t v13 = v2[4];
    swift_bridgeObjectRelease();
    *(void *)(v13 + 120) = v6;
    *(void *)(v13 + 128) = v5;
    goto LABEL_18;
  }
  if (v5)
  {
    if ((v5 & 0x1000000000000000) != 0)
    {
      v2[2] = v6;
      v2[3] = v5;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      char v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      char v15 = (unsigned __int16 *)objc_msgSend(v14, sel__fastCharacterContents);
      id v16 = v14;
      if (v15)
      {
        v2[2] = v6;
        v2[3] = v5;
        StringProtocol._ephemeralString.getter();
        uint64_t v17 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v18 = objc_msgSend(v17, sel_length);
        swift_unknownObjectRelease();
        char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v15, (uint64_t)v18, 0x40u, 1);
      }
      else
      {
        char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x40u, 1);
      }
      char v26 = v19;
      swift_bridgeObjectRelease();
      if (v26) {
        goto LABEL_14;
      }
    }
    else
    {
      if ((v5 & 0x2000000000000000) != 0)
      {
        uint64_t v8 = HIBYTE(v5) & 0xF;
        v2[2] = v6;
        v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
        BOOL v7 = (char *)v3;
      }
      else if ((v6 & 0x1000000000000000) != 0)
      {
        BOOL v7 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v8 = v6 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        BOOL v7 = (char *)_StringObject.sharedUTF8.getter();
      }
      BOOL v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 0x40u, 1);
      swift_bridgeObjectRetain();
      if (v11) {
        goto LABEL_14;
      }
    }
LABEL_32:
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
LABEL_14:
  unint64_t v12 = v2[4];
  swift_bridgeObjectRelease();
  *(void *)(v12 + 120) = v6;
  *(void *)(v12 + 128) = v5;
  swift_bridgeObjectRelease();
LABEL_18:

  free(v2);
}

uint64_t URLComponents.percentEncodedFragment.getter()
{
  if (v0[18])
  {
    uint64_t v1 = v0[17];
  }
  else
  {
    uint64_t v2 = *v0;
    BOOL v3 = *((unsigned char *)v0 + 16) != 1 || v2 == 0;
    if (v3 || (*(unsigned char *)(v2 + 216) & 1) != 0)
    {
      uint64_t v1 = 0;
    }
    else
    {
      uint64_t v4 = String.subscript.getter();
      uint64_t v1 = MEMORY[0x185301F50](v4);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t URLComponents.percentEncodedFragment.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  *(unsigned char *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 16) = 0;
  if (!a2)
  {
LABEL_8:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 136) = a1;
    *(void *)(v3 + 144) = a2;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v16 = a1;
    uint64_t v17 = a2;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v9 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v10 = (unsigned __int16 *)objc_msgSend(v9, sel__fastCharacterContents);
    id v11 = v9;
    if (v10)
    {
      unint64_t v16 = a1;
      uint64_t v17 = a2;
      StringProtocol._ephemeralString.getter();
      unint64_t v12 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v12, sel_length);
      swift_unknownObjectRelease();
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, (uint64_t)v13, 0x40u, 1);
    }
    else
    {
      char v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(a1, a2, 0x40u, 1);
    }
    char v15 = v14;
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_8;
    }
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v7 = HIBYTE(a2) & 0xF;
      unint64_t v16 = a1;
      uint64_t v17 = a2 & 0xFFFFFFFFFFFFFFLL;
      unint64_t v6 = (char *)&v16;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      unint64_t v6 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v6 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v7, 0x40u, 1)) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*URLComponents.percentEncodedFragment.modify(void *a1))(unint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (v1[18])
  {
    uint64_t v4 = v1[17];
    uint64_t v5 = v1[18];
  }
  else
  {
    uint64_t v6 = *v1;
    BOOL v7 = *((unsigned char *)v1 + 16) != 1 || v6 == 0;
    if (v7 || (*(unsigned char *)(v6 + 216) & 1) != 0)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v8 = String.subscript.getter();
      uint64_t v4 = MEMORY[0x185301F50](v8);
      uint64_t v5 = v9;
      swift_bridgeObjectRelease();
    }
  }
  *uint64_t v3 = v4;
  v3[1] = v5;
  swift_bridgeObjectRetain();
  return URLComponents.percentEncodedFragment.modify;
}

void URLComponents.percentEncodedFragment.modify(unint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)(*a1 + 2);
  unint64_t v4 = (*a1)[4];
  unint64_t v6 = **a1;
  unint64_t v5 = (*a1)[1];
  *(unsigned char *)(v4 + 8) = 0;
  *(unsigned char *)(v4 + 16) = 0;
  if ((a2 & 1) == 0)
  {
    if (v5)
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        v2[2] = v6;
        v2[3] = v5;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        uint64_t v20 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        unint64_t v21 = (unsigned __int16 *)objc_msgSend(v20, sel__fastCharacterContents);
        id v22 = v20;
        if (v21)
        {
          v2[2] = v6;
          v2[3] = v5;
          StringProtocol._ephemeralString.getter();
          uint64_t v23 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v24 = objc_msgSend(v23, sel_length);
          swift_unknownObjectRelease();
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, (uint64_t)v24, 0x40u, 1);
        }
        else
        {
          char v25 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x40u, 1);
        }
        char v27 = v25;
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0) {
          goto LABEL_32;
        }
      }
      else
      {
        if ((v5 & 0x2000000000000000) != 0)
        {
          uint64_t v10 = HIBYTE(v5) & 0xF;
          v2[2] = v6;
          v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v9 = (char *)v3;
        }
        else if ((v6 & 0x1000000000000000) != 0)
        {
          uint64_t v9 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v9 = (char *)_StringObject.sharedUTF8.getter();
        }
        if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 0x40u, 1)) {
          goto LABEL_32;
        }
      }
    }
    unint64_t v13 = v2[4];
    swift_bridgeObjectRelease();
    *(void *)(v13 + 136) = v6;
    *(void *)(v13 + 144) = v5;
    goto LABEL_18;
  }
  if (v5)
  {
    if ((v5 & 0x1000000000000000) != 0)
    {
      v2[2] = v6;
      v2[3] = v5;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      char v14 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      char v15 = (unsigned __int16 *)objc_msgSend(v14, sel__fastCharacterContents);
      id v16 = v14;
      if (v15)
      {
        v2[2] = v6;
        v2[3] = v5;
        StringProtocol._ephemeralString.getter();
        uint64_t v17 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v18 = objc_msgSend(v17, sel_length);
        swift_unknownObjectRelease();
        char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v15, (uint64_t)v18, 0x40u, 1);
      }
      else
      {
        char v19 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v6, v5, 0x40u, 1);
      }
      char v26 = v19;
      swift_bridgeObjectRelease();
      if (v26) {
        goto LABEL_14;
      }
    }
    else
    {
      if ((v5 & 0x2000000000000000) != 0)
      {
        uint64_t v8 = HIBYTE(v5) & 0xF;
        v2[2] = v6;
        v2[3] = v5 & 0xFFFFFFFFFFFFFFLL;
        BOOL v7 = (char *)v3;
      }
      else if ((v6 & 0x1000000000000000) != 0)
      {
        BOOL v7 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v8 = v6 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        BOOL v7 = (char *)_StringObject.sharedUTF8.getter();
      }
      BOOL v11 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v8, 0x40u, 1);
      swift_bridgeObjectRetain();
      if (v11) {
        goto LABEL_14;
      }
    }
LABEL_32:
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
LABEL_14:
  unint64_t v12 = v2[4];
  swift_bridgeObjectRelease();
  *(void *)(v12 + 136) = v6;
  *(void *)(v12 + 144) = v5;
  swift_bridgeObjectRelease();
LABEL_18:

  free(v2);
}

unint64_t URLComponents.rangeOfScheme.getter()
{
  long long v1 = v0[7];
  v11[6] = v0[6];
  _OWORD v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  long long v2 = v0[3];
  _OWORD v11[2] = v0[2];
  v11[3] = v2;
  long long v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  long long v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v15, &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0) {
    return *(void *)(v15 + 32);
  }
  if (BYTE8(v11[0]))
  {
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v14, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14) {
      return 0;
    }
    uint64_t v8 = *(void *)(v14 + 16);
    unint64_t v5 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v6 = URLComponents._URLComponents.computedString.getter();
    unint64_t v5 = v7;
    if (!v7) {
      return v5;
    }
    uint64_t v8 = v6;
  }
  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9) {
    return 0;
  }
  unint64_t v5 = *(void *)(v9 + 32);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfUser.getter()
{
  long long v1 = v0[7];
  v11[6] = v0[6];
  _OWORD v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  long long v2 = v0[3];
  _OWORD v11[2] = v0[2];
  v11[3] = v2;
  long long v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  long long v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v15, &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0) {
    return *(void *)(v15 + 56);
  }
  if (BYTE8(v11[0]))
  {
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v14, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14) {
      return 0;
    }
    uint64_t v8 = *(void *)(v14 + 16);
    unint64_t v5 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v6 = URLComponents._URLComponents.computedString.getter();
    unint64_t v5 = v7;
    if (!v7) {
      return v5;
    }
    uint64_t v8 = v6;
  }
  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9) {
    return 0;
  }
  unint64_t v5 = *(void *)(v9 + 56);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfPassword.getter()
{
  long long v1 = v0[7];
  v11[6] = v0[6];
  _OWORD v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  long long v2 = v0[3];
  _OWORD v11[2] = v0[2];
  v11[3] = v2;
  long long v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  long long v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v15, &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0) {
    return *(void *)(v15 + 80);
  }
  if (BYTE8(v11[0]))
  {
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v14, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14) {
      return 0;
    }
    uint64_t v8 = *(void *)(v14 + 16);
    unint64_t v5 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v6 = URLComponents._URLComponents.computedString.getter();
    unint64_t v5 = v7;
    if (!v7) {
      return v5;
    }
    uint64_t v8 = v6;
  }
  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9) {
    return 0;
  }
  unint64_t v5 = *(void *)(v9 + 80);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfHost.getter()
{
  long long v1 = v0[7];
  v11[6] = v0[6];
  _OWORD v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  long long v2 = v0[3];
  _OWORD v11[2] = v0[2];
  v11[3] = v2;
  long long v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  long long v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v15, &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0) {
    return *(void *)(v15 + 104);
  }
  if (BYTE8(v11[0]))
  {
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v14, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14) {
      return 0;
    }
    uint64_t v8 = *(void *)(v14 + 16);
    unint64_t v5 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v6 = URLComponents._URLComponents.computedString.getter();
    unint64_t v5 = v7;
    if (!v7) {
      return v5;
    }
    uint64_t v8 = v6;
  }
  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9) {
    return 0;
  }
  unint64_t v5 = *(void *)(v9 + 104);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfPort.getter()
{
  long long v1 = v0[7];
  v11[6] = v0[6];
  _OWORD v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  long long v2 = v0[3];
  _OWORD v11[2] = v0[2];
  v11[3] = v2;
  long long v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  long long v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v15, &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0) {
    return *(void *)(v15 + 128);
  }
  if (BYTE8(v11[0]))
  {
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v14, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14) {
      return 0;
    }
    uint64_t v8 = *(void *)(v14 + 16);
    unint64_t v5 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v6 = URLComponents._URLComponents.computedString.getter();
    unint64_t v5 = v7;
    if (!v7) {
      return v5;
    }
    uint64_t v8 = v6;
  }
  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9) {
    return 0;
  }
  unint64_t v5 = *(void *)(v9 + 128);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfPath.getter()
{
  long long v1 = v0[7];
  v11[6] = v0[6];
  _OWORD v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  long long v2 = v0[3];
  _OWORD v11[2] = v0[2];
  v11[3] = v2;
  long long v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  long long v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v15, &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0) {
    return *(void *)(v15 + 152);
  }
  if (BYTE8(v11[0]))
  {
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v14, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14) {
      return 0;
    }
    uint64_t v8 = *(void *)(v14 + 16);
    unint64_t v5 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v6 = URLComponents._URLComponents.computedString.getter();
    unint64_t v5 = v7;
    if (!v7) {
      return v5;
    }
    uint64_t v8 = v6;
  }
  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9) {
    return 0;
  }
  unint64_t v5 = *(void *)(v9 + 152);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfQuery.getter()
{
  long long v1 = v0[7];
  v11[6] = v0[6];
  _OWORD v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  long long v2 = v0[3];
  _OWORD v11[2] = v0[2];
  v11[3] = v2;
  long long v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  long long v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v15, &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0) {
    return *(void *)(v15 + 176);
  }
  if (BYTE8(v11[0]))
  {
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v14, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14) {
      return 0;
    }
    uint64_t v8 = *(void *)(v14 + 16);
    unint64_t v5 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v6 = URLComponents._URLComponents.computedString.getter();
    unint64_t v5 = v7;
    if (!v7) {
      return v5;
    }
    uint64_t v8 = v6;
  }
  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9) {
    return 0;
  }
  unint64_t v5 = *(void *)(v9 + 176);
  swift_release();
  return v5;
}

unint64_t URLComponents.rangeOfFragment.getter()
{
  long long v1 = v0[7];
  v11[6] = v0[6];
  _OWORD v11[7] = v1;
  v12[0] = v0[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)v0 + 138);
  long long v2 = v0[3];
  _OWORD v11[2] = v0[2];
  v11[3] = v2;
  long long v3 = v0[5];
  v11[4] = v0[4];
  v11[5] = v3;
  long long v4 = v0[1];
  v11[0] = *v0;
  v11[1] = v4;
  outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v13, &demangling cache variable for type metadata for URLParseInfo?);
  outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v15, &demangling cache variable for type metadata for URLParseInfo?);
  if (v15 && (BYTE8(v11[0]) & 1) != 0) {
    return *(void *)(v15 + 200);
  }
  if (BYTE8(v11[0]))
  {
    outlined init with take of LocalePreferences?((uint64_t)v13, (uint64_t)&v14, &demangling cache variable for type metadata for URLParseInfo?);
    if (!v14) {
      return 0;
    }
    uint64_t v8 = *(void *)(v14 + 16);
    unint64_t v5 = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v6 = URLComponents._URLComponents.computedString.getter();
    unint64_t v5 = v7;
    if (!v7) {
      return v5;
    }
    uint64_t v8 = v6;
  }
  Swift::Int v9 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(v8, v5, 1);
  swift_bridgeObjectRelease();
  if (!v9) {
    return 0;
  }
  unint64_t v5 = *(void *)(v9 + 200);
  swift_release();
  return v5;
}

unint64_t URLComponents.percentEncodedQueryItems.getter()
{
  return (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(1);
}

uint64_t key path getter for URLComponents.queryItems : URLComponents@<X0>(_OWORD *a1@<X0>, Swift::Bool a2@<W3>, unint64_t *a3@<X8>)
{
  long long v5 = a1[7];
  v11[6] = a1[6];
  _OWORD v11[7] = v5;
  v12[0] = a1[8];
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)a1 + 138);
  long long v6 = a1[3];
  _OWORD v11[2] = a1[2];
  v11[3] = v6;
  long long v7 = a1[5];
  v11[4] = a1[4];
  v11[5] = v7;
  long long v8 = a1[1];
  v11[0] = *a1;
  v11[1] = v8;
  outlined retain of URLComponents((uint64_t)v11);
  unint64_t v9 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(a2);
  uint64_t result = outlined release of URLComponents((uint64_t)v11);
  *a3 = v9;
  return result;
}

uint64_t URLComponents.percentEncodedQueryItems.setter(uint64_t a1)
{
  specialized URLComponents.percentEncodedQueryItems.setter(a1);

  return swift_bridgeObjectRelease();
}

void (*URLComponents.percentEncodedQueryItems.modify(void *a1))(uint64_t a1, char a2)
{
  long long v3 = (char *)malloc(0xC0uLL);
  *a1 = v3;
  *((void *)v3 + 23) = v1;
  long long v4 = v1[7];
  *((_OWORD *)v3 + 6) = v1[6];
  *((_OWORD *)v3 + 7) = v4;
  *((_OWORD *)v3 + 8) = v1[8];
  *(_OWORD *)(v3 + 138) = *(_OWORD *)((char *)v1 + 138);
  long long v5 = v1[3];
  *((_OWORD *)v3 + 2) = v1[2];
  *((_OWORD *)v3 + 3) = v5;
  long long v6 = v1[5];
  *((_OWORD *)v3 + 4) = v1[4];
  *((_OWORD *)v3 + 5) = v6;
  long long v7 = v1[1];
  *(_OWORD *)long long v3 = *v1;
  *((_OWORD *)v3 + 1) = v7;
  *((void *)v3 + 22) = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(1);
  return URLComponents.percentEncodedQueryItems.modify;
}

void URLComponents.percentEncodedQueryItems.modify(uint64_t a1, char a2)
{
  long long v2 = *(void **)a1;
  uint64_t v3 = *(void *)a1 + 160;
  uint64_t v4 = *(void *)(*(void *)a1 + 176);
  uint64_t v5 = *(void *)(*(void *)a1 + 184);
  *(unsigned char *)(v5 + 8) = 0;
  *(unsigned char *)(v5 + 15) = 0;
  if (a2)
  {
    if (v4)
    {
      int64_t v6 = *(void *)(v4 + 16);
      if (v6)
      {
        unint64_t v84 = MEMORY[0x1E4FBC860];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
        long long v7 = (unint64_t *)(v4 + 56);
        do
        {
          unint64_t v9 = *(v7 - 3);
          unint64_t v8 = *(v7 - 2);
          unint64_t v11 = *(v7 - 1);
          unint64_t v10 = *v7;
          if ((v8 & 0x1000000000000000) != 0)
          {
            v2[20] = v9;
            v2[21] = v8;
            lazy protocol witness table accessor for type String and conformance String();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            StringProtocol._ephemeralString.getter();
            uint64_t v23 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v24 = (unsigned __int16 *)objc_msgSend(v23, sel__fastCharacterContents);
            id v25 = v23;
            if (v24)
            {
              v2[20] = v9;
              v2[21] = v8;
              char v82 = v24;
              StringProtocol._ephemeralString.getter();
              char v26 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v27 = objc_msgSend(v26, sel_length);
              swift_unknownObjectRelease();
              char v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v82, (uint64_t)v27, 0x80u, 1);
            }
            else
            {
              char v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v8, 0x80u, 1);
            }
            char v35 = v28;
            swift_bridgeObjectRelease_n();
            if ((v35 & 1) == 0) {
              goto LABEL_74;
            }
          }
          else
          {
            if ((v8 & 0x2000000000000000) != 0)
            {
              uint64_t v13 = HIBYTE(v8) & 0xF;
              v2[20] = v9;
              v2[21] = v8 & 0xFFFFFFFFFFFFFFLL;
              unint64_t v12 = (char *)v3;
            }
            else if ((v9 & 0x1000000000000000) != 0)
            {
              unint64_t v12 = (char *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v13 = v9 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              unint64_t v12 = (char *)_StringObject.sharedUTF8.getter();
            }
            BOOL v14 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v12, v13, 0x80u, 1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (!v14) {
              goto LABEL_74;
            }
          }
          unint64_t v86 = v9;
          if (v10)
          {
            if ((v10 & 0x1000000000000000) != 0)
            {
              v2[20] = v11;
              v2[21] = v10;
              lazy protocol witness table accessor for type String and conformance String();
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              StringProtocol._ephemeralString.getter();
              uint64_t v29 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              char v30 = (unsigned __int16 *)objc_msgSend(v29, sel__fastCharacterContents);
              id v31 = v29;
              if (v30)
              {
                v2[20] = v11;
                v2[21] = v10;
                StringProtocol._ephemeralString.getter();
                id v32 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                id v33 = objc_msgSend(v32, sel_length);
                swift_unknownObjectRelease();
                char v34 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v30, (uint64_t)v33, 0x40u, 1);
              }
              else
              {
                char v34 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v11, v10, 0x40u, 1);
              }
              char v36 = v34;
              swift_bridgeObjectRelease_n();
              if ((v36 & 1) == 0) {
                goto LABEL_73;
              }
            }
            else
            {
              if ((v10 & 0x2000000000000000) != 0)
              {
                uint64_t v16 = HIBYTE(v10) & 0xF;
                v2[20] = v11;
                v2[21] = v10 & 0xFFFFFFFFFFFFFFLL;
                uint64_t v15 = (char *)v3;
              }
              else if ((v11 & 0x1000000000000000) != 0)
              {
                uint64_t v15 = (char *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
                uint64_t v16 = v11 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                uint64_t v15 = (char *)_StringObject.sharedUTF8.getter();
              }
              BOOL v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v15, v16, 0x40u, 1);
              swift_bridgeObjectRetain();
              if (!v17) {
                goto LABEL_73;
              }
            }
            v18._unint64_t countAndFlagsBits = v11;
            v18._unint64_t object = (void *)v10;
            String.append(_:)(v18);
            v19._unint64_t countAndFlagsBits = 61;
            v19._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v19);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v9 = v86;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          unint64_t v10 = v84;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v84 + 16) + 1, 1);
            unint64_t v10 = v84;
          }
          unint64_t v21 = *(void *)(v10 + 16);
          unint64_t v20 = *(void *)(v10 + 24);
          if (v21 >= v20 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
            unint64_t v10 = v84;
          }
          v7 += 4;
          *(void *)(v10 + 16) = v21 + 1;
          unint64_t v22 = v10 + 16 * v21;
          *(void *)(v22 + 32) = v9;
          *(void *)(v22 + 40) = v8;
          --v6;
        }
        while (v6);
        goto LABEL_75;
      }
      uint64_t v80 = v2[23];
      swift_bridgeObjectRelease();
      *(_OWORD *)(v80 + 120) = xmmword_182107DC0;
    }
    else
    {
      uint64_t v78 = v2[23];
      swift_bridgeObjectRelease();
      *(void *)(v78 + 120) = 0;
      *(void *)(v78 + 128) = 0;
    }
LABEL_79:
    swift_bridgeObjectRelease();
  }
  else if (v4)
  {
    int64_t v37 = *(void *)(v4 + 16);
    if (v37)
    {
      uint64_t v85 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 0);
      unint64_t v38 = (unint64_t *)(v4 + 56);
      while (1)
      {
        unint64_t v40 = *(v38 - 3);
        unint64_t v39 = *(v38 - 2);
        unint64_t v41 = *(v38 - 1);
        unint64_t v10 = *v38;
        if ((v39 & 0x1000000000000000) != 0)
        {
          v2[20] = v40;
          v2[21] = v39;
          lazy protocol witness table accessor for type String and conformance String();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          StringProtocol._ephemeralString.getter();
          unint64_t v54 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v55 = (unsigned __int16 *)objc_msgSend(v54, sel__fastCharacterContents);
          id v56 = v54;
          if (v55)
          {
            v2[20] = v40;
            v2[21] = v39;
            long long v83 = v55;
            StringProtocol._ephemeralString.getter();
            unint64_t v57 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v58 = objc_msgSend(v57, sel_length);
            swift_unknownObjectRelease();
            char v59 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v83, (uint64_t)v58, 0x80u, 1);
          }
          else
          {
            char v59 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v40, v39, 0x80u, 1);
          }
          char v66 = v59;
          swift_bridgeObjectRelease_n();
          if ((v66 & 1) == 0) {
            goto LABEL_74;
          }
        }
        else
        {
          if ((v39 & 0x2000000000000000) != 0)
          {
            uint64_t v43 = HIBYTE(v39) & 0xF;
            v2[20] = v40;
            v2[21] = v39 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v42 = (char *)v3;
          }
          else if ((v40 & 0x1000000000000000) != 0)
          {
            uint64_t v42 = (char *)((v39 & 0xFFFFFFFFFFFFFFFLL) + 32);
            uint64_t v43 = v40 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            uint64_t v42 = (char *)_StringObject.sharedUTF8.getter();
          }
          BOOL v44 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v42, v43, 0x80u, 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (!v44) {
            goto LABEL_74;
          }
        }
        unint64_t v87 = v40;
        if (v10)
        {
          if ((v10 & 0x1000000000000000) != 0)
          {
            v2[20] = v41;
            v2[21] = v10;
            lazy protocol witness table accessor for type String and conformance String();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            StringProtocol._ephemeralString.getter();
            uint64_t v60 = (void *)String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            uint64_t v61 = (unsigned __int16 *)objc_msgSend(v60, sel__fastCharacterContents);
            id v62 = v60;
            if (v61)
            {
              v2[20] = v41;
              v2[21] = v10;
              StringProtocol._ephemeralString.getter();
              uint64_t v63 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              id v64 = objc_msgSend(v63, sel_length);
              swift_unknownObjectRelease();
              char v65 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v61, (uint64_t)v64, 0x40u, 1);
            }
            else
            {
              char v65 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v41, v10, 0x40u, 1);
            }
            char v67 = v65;
            swift_bridgeObjectRelease_n();
            if ((v67 & 1) == 0)
            {
LABEL_73:
              swift_bridgeObjectRelease();
LABEL_74:
              lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
              unint64_t v68 = (void *)swift_allocError();
              *unint64_t v69 = 7;
              long long v2 = v68;
              swift_willThrow();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();

              swift_bridgeObjectRelease();
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
LABEL_75:
              uint64_t v70 = v2[23];
              v2[20] = v10;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
              lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
              uint64_t v71 = BidirectionalCollection<>.joined(separator:)();
              uint64_t v73 = v72;
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *(void *)(v70 + 120) = v71;
              *(void *)(v70 + 128) = v73;
              goto LABEL_79;
            }
          }
          else
          {
            if ((v10 & 0x2000000000000000) != 0)
            {
              uint64_t v46 = HIBYTE(v10) & 0xF;
              v2[20] = v41;
              v2[21] = v10 & 0xFFFFFFFFFFFFFFLL;
              unint64_t v45 = (char *)v3;
            }
            else if ((v41 & 0x1000000000000000) != 0)
            {
              unint64_t v45 = (char *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
              uint64_t v46 = v41 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              unint64_t v45 = (char *)_StringObject.sharedUTF8.getter();
            }
            BOOL v47 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v45, v46, 0x40u, 1);
            swift_bridgeObjectRetain();
            if (!v47) {
              goto LABEL_73;
            }
          }
          v48._unint64_t countAndFlagsBits = v41;
          v48._unint64_t object = (void *)v10;
          String.append(_:)(v48);
          v49._unint64_t countAndFlagsBits = 61;
          v49._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v49);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v40 = v87;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v50 = v85;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v85 + 16) + 1, 1);
          uint64_t v50 = v85;
        }
        unint64_t v52 = *(void *)(v50 + 16);
        unint64_t v51 = *(void *)(v50 + 24);
        if (v52 >= v51 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
          uint64_t v50 = v85;
        }
        v38 += 4;
        *(void *)(v50 + 16) = v52 + 1;
        uint64_t v53 = v50 + 16 * v52;
        *(void *)(v53 + 32) = v40;
        *(void *)(v53 + 40) = v39;
        if (!--v37)
        {
          uint64_t v74 = v2[23];
          v2[20] = v50;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
          lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
          uint64_t v75 = BidirectionalCollection<>.joined(separator:)();
          uint64_t v77 = v76;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)(v74 + 120) = v75;
          *(void *)(v74 + 128) = v77;
          goto LABEL_80;
        }
      }
    }
    uint64_t v81 = v2[23];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_OWORD *)(v81 + 120) = xmmword_182107DC0;
  }
  else
  {
    uint64_t v79 = v2[23];
    swift_bridgeObjectRelease();
    *(void *)(v79 + 120) = 0;
    *(void *)(v79 + 128) = 0;
  }
LABEL_80:

  free(v2);
}

void URLComponents.hash(into:)()
{
  long long v1 = v0[7];
  long long v23 = v0[6];
  long long v24 = v1;
  *(_OWORD *)id v25 = v0[8];
  *(_OWORD *)&_OWORD v25[10] = *(long long *)((char *)v0 + 138);
  long long v2 = v0[3];
  long long v19 = v0[2];
  long long v20 = v2;
  long long v3 = v0[5];
  long long v21 = v0[4];
  long long v22 = v3;
  long long v4 = v0[1];
  long long v17 = *v0;
  long long v18 = v4;
  uint64_t v5 = (unsigned char *)v17;
  if ((void)v19) {
    goto LABEL_2;
  }
  if (BYTE9(v17) == 1 && (void)v17 && (*(unsigned char *)(v17 + 48) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v17);
    uint64_t v13 = String.subscript.getter();
    MEMORY[0x185301F50](v13);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v17);
LABEL_2:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    goto LABEL_7;
  }
  Hasher._combine(_:)(0);
LABEL_7:
  URLComponents.percentEncodedUser.getter();
  if (v6)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((void)v21)
    {
LABEL_9:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
      goto LABEL_15;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((void)v21) {
      goto LABEL_9;
    }
  }
  if (BYTE11(v17) == 1 && v5 && (v5[96] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v17);
    uint64_t v14 = String.subscript.getter();
    MEMORY[0x185301F50](v14);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v17);
    goto LABEL_9;
  }
  Hasher._combine(_:)(0);
LABEL_15:
  outlined retain of URLComponents((uint64_t)&v17);
  URLComponents._URLComponents.encodedHost.getter();
  uint64_t v8 = v7;
  outlined release of URLComponents((uint64_t)&v17);
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v9 = URLComponents.port.getter();
  if (v10)
  {
    Hasher._combine(_:)(0);
    if ((void)v24) {
      goto LABEL_20;
    }
  }
  else
  {
    Swift::UInt v11 = v9;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
    if ((void)v24)
    {
LABEL_20:
      outlined retain of URLComponents((uint64_t)&v17);
      goto LABEL_31;
    }
  }
  if (BYTE14(v17) != 1 || !v5) {
    goto LABEL_20;
  }
  if (v5[168])
  {
    outlined retain of URLComponents((uint64_t)&v17);
    uint64_t v12 = MEMORY[0x185302C80](0, 0xE000000000000000);
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v17);
    uint64_t v12 = String.subscript.getter();
  }
  MEMORY[0x185301F50](v12);
  swift_bridgeObjectRelease();
LABEL_31:
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v17);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!*(void *)v25)
  {
    if (HIBYTE(v17) != 1 || !v5 || (v5[192] & 1) != 0)
    {
      Hasher._combine(_:)(0);
      if (*(void *)&v25[16]) {
        goto LABEL_33;
      }
      goto LABEL_38;
    }
    outlined retain of URLComponents((uint64_t)&v17);
    uint64_t v15 = String.subscript.getter();
    MEMORY[0x185301F50](v15);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v17);
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease_n();
  if (*(void *)&v25[16])
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    return;
  }
LABEL_38:
  if (v18 == 1 && v5 && (v5[216] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v17);
    uint64_t v16 = String.subscript.getter();
    MEMORY[0x185301F50](v16);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v17);
    goto LABEL_33;
  }
  Hasher._combine(_:)(0);
}

Swift::Int URLComponents.hashValue.getter()
{
  long long v1 = v0[7];
  long long v24 = v0[6];
  long long v25 = v1;
  *(_OWORD *)char v26 = v0[8];
  *(_OWORD *)&v26[10] = *(long long *)((char *)v0 + 138);
  long long v2 = v0[3];
  long long v20 = v0[2];
  long long v21 = v2;
  long long v3 = v0[5];
  long long v22 = v0[4];
  long long v23 = v3;
  long long v4 = v0[1];
  long long v18 = *v0;
  long long v19 = v4;
  Hasher.init(_seed:)();
  uint64_t v5 = (unsigned char *)v18;
  if ((void)v20) {
    goto LABEL_2;
  }
  if (BYTE9(v18) == 1 && (void)v18 && (*(unsigned char *)(v18 + 48) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v13 = String.subscript.getter();
    MEMORY[0x185301F50](v13);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
LABEL_2:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    goto LABEL_7;
  }
  Hasher._combine(_:)(0);
LABEL_7:
  URLComponents.percentEncodedUser.getter();
  if (v6)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((void)v22)
    {
LABEL_9:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
      goto LABEL_15;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((void)v22) {
      goto LABEL_9;
    }
  }
  if (BYTE11(v18) == 1 && v5 && (v5[96] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v14 = String.subscript.getter();
    MEMORY[0x185301F50](v14);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
    goto LABEL_9;
  }
  Hasher._combine(_:)(0);
LABEL_15:
  outlined retain of URLComponents((uint64_t)&v18);
  URLComponents._URLComponents.encodedHost.getter();
  uint64_t v8 = v7;
  outlined release of URLComponents((uint64_t)&v18);
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined retain of URLComponents((uint64_t)&v18);
  Swift::UInt v9 = URLComponents._URLComponents.port.getter();
  char v11 = v10;
  outlined release of URLComponents((uint64_t)&v18);
  if (v11)
  {
    Hasher._combine(_:)(0);
    if ((void)v25) {
      goto LABEL_20;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    if ((void)v25)
    {
LABEL_20:
      outlined retain of URLComponents((uint64_t)&v18);
      goto LABEL_31;
    }
  }
  if (BYTE14(v18) != 1 || !v5) {
    goto LABEL_20;
  }
  if (v5[168])
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v12 = MEMORY[0x185302C80](0, 0xE000000000000000);
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v12 = String.subscript.getter();
  }
  MEMORY[0x185301F50](v12);
  swift_bridgeObjectRelease();
LABEL_31:
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v18);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)v26) {
    goto LABEL_32;
  }
  if (HIBYTE(v18) == 1 && v5 && (v5[192] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v16 = String.subscript.getter();
    MEMORY[0x185301F50](v16);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    if (*(void *)&v26[16]) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }
  Hasher._combine(_:)(0);
  if (*(void *)&v26[16]) {
    goto LABEL_33;
  }
LABEL_38:
  if v19 != 1 || !v5 || (v5[216])
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined retain of URLComponents((uint64_t)&v18);
  uint64_t v17 = String.subscript.getter();
  MEMORY[0x185301F50](v17);
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)&v18);
LABEL_33:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URLComponents()
{
  long long v1 = v0[7];
  long long v24 = v0[6];
  long long v25 = v1;
  *(_OWORD *)char v26 = v0[8];
  *(_OWORD *)&v26[10] = *(long long *)((char *)v0 + 138);
  long long v2 = v0[3];
  long long v20 = v0[2];
  long long v21 = v2;
  long long v3 = v0[5];
  long long v22 = v0[4];
  long long v23 = v3;
  long long v4 = v0[1];
  long long v18 = *v0;
  long long v19 = v4;
  Hasher.init(_seed:)();
  uint64_t v5 = (unsigned char *)v18;
  if ((void)v20) {
    goto LABEL_2;
  }
  if (BYTE9(v18) == 1 && (void)v18 && (*(unsigned char *)(v18 + 48) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v13 = String.subscript.getter();
    MEMORY[0x185301F50](v13);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
LABEL_2:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    goto LABEL_7;
  }
  Hasher._combine(_:)(0);
LABEL_7:
  URLComponents.percentEncodedUser.getter();
  if (v6)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((void)v22)
    {
LABEL_9:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
      goto LABEL_15;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((void)v22) {
      goto LABEL_9;
    }
  }
  if (BYTE11(v18) == 1 && v5 && (v5[96] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v14 = String.subscript.getter();
    MEMORY[0x185301F50](v14);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
    goto LABEL_9;
  }
  Hasher._combine(_:)(0);
LABEL_15:
  outlined retain of URLComponents((uint64_t)&v18);
  URLComponents._URLComponents.encodedHost.getter();
  uint64_t v8 = v7;
  outlined release of URLComponents((uint64_t)&v18);
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined retain of URLComponents((uint64_t)&v18);
  Swift::UInt v9 = URLComponents._URLComponents.port.getter();
  char v11 = v10;
  outlined release of URLComponents((uint64_t)&v18);
  if (v11)
  {
    Hasher._combine(_:)(0);
    if ((void)v25) {
      goto LABEL_20;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    if ((void)v25)
    {
LABEL_20:
      outlined retain of URLComponents((uint64_t)&v18);
      goto LABEL_31;
    }
  }
  if (BYTE14(v18) != 1 || !v5) {
    goto LABEL_20;
  }
  if (v5[168])
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v12 = MEMORY[0x185302C80](0, 0xE000000000000000);
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v12 = String.subscript.getter();
  }
  MEMORY[0x185301F50](v12);
  swift_bridgeObjectRelease();
LABEL_31:
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v18);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)v26) {
    goto LABEL_32;
  }
  if (HIBYTE(v18) == 1 && v5 && (v5[192] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v18);
    uint64_t v16 = String.subscript.getter();
    MEMORY[0x185301F50](v16);
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v18);
LABEL_32:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
    if (*(void *)&v26[16]) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }
  Hasher._combine(_:)(0);
  if (*(void *)&v26[16]) {
    goto LABEL_33;
  }
LABEL_38:
  if v19 != 1 || !v5 || (v5[216])
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  outlined retain of URLComponents((uint64_t)&v18);
  uint64_t v17 = String.subscript.getter();
  MEMORY[0x185301F50](v17);
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)&v18);
LABEL_33:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

uint64_t URLComponents.description.getter()
{
  uint64_t v0 = type metadata accessor for Mirror();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  long long v3 = (char *)v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.url.getter((uint64_t *)&v63);
  long long v4 = (void *)v63;
  if (!(void)v63)
  {
    URLComponents.customMirror.getter((uint64_t)v3);
    uint64_t v10 = Mirror.children.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    char v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    swift_retain();
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (*((void *)&v65 + 1))
    {
      v57[1] = v10;
      do
      {
        long long v61 = v63;
        v62[0] = v64;
        v62[1] = v65;
        v60._unint64_t countAndFlagsBits = 0;
        v60._unint64_t object = (void *)0xE000000000000000;
        long long v11 = v63;
        long long v58 = v63;
        outlined init with copy of Any((uint64_t)v62, (uint64_t)v59);
        if (*((void *)&v11 + 1)) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        if (*((void *)&v11 + 1)) {
          uint64_t v13 = (void *)*((void *)&v11 + 1);
        }
        else {
          uint64_t v13 = (void *)0xE000000000000000;
        }
        swift_bridgeObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
        v14._unint64_t countAndFlagsBits = v12;
        v14._unint64_t object = v13;
        String.append(_:)(v14);
        swift_bridgeObjectRelease();
        v15._unint64_t countAndFlagsBits = 8250;
        v15._unint64_t object = (void *)0xE200000000000000;
        String.append(_:)(v15);
        _print_unlocked<A, B>(_:_:)();
        v16._unint64_t countAndFlagsBits = 32;
        v16._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v16);
        String.append(_:)(v60);
        swift_bridgeObjectRelease();
        outlined destroy of (label: String?, value: Any)((uint64_t)&v61);
        dispatch thunk of _AnyIteratorBoxBase.next()();
      }
      while (*((void *)&v65 + 1));
      id v17 = v66;
    }
    else
    {
      id v17 = 0;
    }
    swift_release();
    swift_release();
    return (uint64_t)v17;
  }
  uint64_t v6 = *((void *)&v63 + 1);
  uint64_t v5 = v64;
  swift_retain();
  id v7 = v4;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    id v18 = objc_msgSend(v7, sel_description);
    id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);

    goto LABEL_42;
  }
  *(void *)&long long v63 = v7;
  *((void *)&v63 + 1) = v6;
  *(void *)&long long v64 = v5;
  URL.scheme.getter();
  if (!v8) {
    goto LABEL_29;
  }
  Swift::String v9 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v9._countAndFlagsBits == 1635017060 && v9._object == (void *)0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0) {
      goto LABEL_29;
    }
  }
  id v20 = v7;
  swift_retain();
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (result)
  {
    if (!v6) {
      goto LABEL_45;
    }
    swift_bridgeObjectRetain();
  }
  else
  {
    id v22 = objc_msgSend(v20, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  }
  outlined consume of URL?(v4);
  uint64_t v23 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v23 < 129)
  {
LABEL_29:
    id v25 = v7;
    swift_retain();
    swift_retain();
    uint64_t result = _foundation_swift_url_feature_enabled();
    if (!result)
    {
      id v27 = objc_msgSend(v25, sel_relativeString);
      id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      char v26 = v28;

      goto LABEL_33;
    }
    if (v6)
    {
      id v17 = *(id *)(v6 + 16);
      char v26 = *(void **)(v6 + 24);
      swift_bridgeObjectRetain();
LABEL_33:
      outlined consume of URL?(v4);
      goto LABEL_40;
    }
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  *(void *)&long long v63 = 0;
  *((void *)&v63 + 1) = 0xE000000000000000;
  id v24 = v20;
  swift_retain();
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!result)
  {
    id v29 = objc_msgSend(v24, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v29);

    goto LABEL_35;
  }
  if (!v6)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  swift_bridgeObjectRetain();
LABEL_35:
  outlined consume of URL?(v4);
  uint64_t v30 = specialized Collection.prefix(_:)(120);
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  swift_bridgeObjectRelease();
  v37._unint64_t countAndFlagsBits = MEMORY[0x185301F50](v30, v32, v34, v36);
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38._unint64_t countAndFlagsBits = 0x202E2E2E20;
  v38._unint64_t object = (void *)0xE500000000000000;
  String.append(_:)(v38);
  id v39 = v24;
  swift_retain();
  swift_retain();
  uint64_t result = _foundation_swift_url_feature_enabled();
  if (!result)
  {
    id v42 = objc_msgSend(v39, sel_relativeString);
    id v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    unint64_t v40 = v43;

    goto LABEL_39;
  }
  if (v6)
  {
    id v41 = *(id *)(v6 + 16);
    unint64_t v40 = *(void *)(v6 + 24);
    swift_bridgeObjectRetain();
LABEL_39:
    outlined consume of URL?(v4);
    uint64_t v44 = specialized BidirectionalCollection.suffix(_:)(8, (uint64_t)v41, v40);
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    uint64_t v50 = v49;
    swift_bridgeObjectRelease();
    v51._unint64_t countAndFlagsBits = MEMORY[0x185301F50](v44, v46, v48, v50);
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v26 = (void *)*((void *)&v63 + 1);
    id v17 = (id)v63;
LABEL_40:
    *(void *)&long long v61 = v7;
    *((void *)&v61 + 1) = v6;
    *(void *)&v62[0] = v5;
    URL.baseURL.getter((uint64_t *)&v63);
    unint64_t v52 = (void *)v63;
    if ((void)v63)
    {
      unint64_t v54 = *((void *)&v63 + 1);
      uint64_t v53 = v64;
      *(void *)&long long v63 = 0;
      *((void *)&v63 + 1) = 0xE000000000000000;
      v55._unint64_t countAndFlagsBits = (uint64_t)v17;
      v55._unint64_t object = v26;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v56._unint64_t countAndFlagsBits = 539831584;
      v56._unint64_t object = (void *)0xE400000000000000;
      String.append(_:)(v56);
      specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v52, v54, v53);
      outlined consume of URL?(v52);
      outlined consume of URL?(v4);
      outlined consume of URL?(v4);
      return v63;
    }
LABEL_42:
    outlined consume of URL?(v4);
    outlined consume of URL?(v4);
    return (uint64_t)v17;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t URLComponents.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v131 = *(void *)(v3 - 8);
  uint64_t v132 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v128 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v130 = (char *)&v128 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v8 = v1[7];
  long long v9 = v1[5];
  long long v161 = v1[6];
  long long v162 = v8;
  long long v10 = v1[7];
  *(_OWORD *)long long v163 = v1[8];
  *(_OWORD *)&v163[10] = *(long long *)((char *)v1 + 138);
  long long v11 = v1[3];
  long long v12 = v1[1];
  long long v157 = v1[2];
  long long v158 = v11;
  long long v13 = v1[3];
  long long v14 = v1[5];
  long long v159 = v1[4];
  long long v160 = v14;
  long long v15 = v1[1];
  long long v155 = *v1;
  long long v156 = v15;
  long long v152 = v161;
  long long v153 = v10;
  v154[0] = v1[8];
  *(_OWORD *)((char *)v154 + 10) = *(long long *)((char *)v1 + 138);
  long long v148 = v157;
  long long v149 = v13;
  long long v150 = v159;
  long long v151 = v9;
  long long v146 = v155;
  long long v147 = v12;
  uint64_t v16 = v155;
  uint64_t v17 = MEMORY[0x1E4FBB1A0];
  if ((void)v157)
  {
    uint64_t v18 = *((void *)&v156 + 1);
    uint64_t v19 = v157;
  }
  else
  {
    id v20 = (void *)MEMORY[0x1E4FBC860];
    if (BYTE9(v155) != 1 || !(void)v155 || (*(unsigned char *)(v155 + 48) & 1) != 0) {
      goto LABEL_6;
    }
    outlined retain of URLComponents((uint64_t)&v155);
    uint64_t v17 = MEMORY[0x1E4FBB1A0];
    uint64_t v49 = String.subscript.getter();
    uint64_t v18 = MEMORY[0x185301F50](v49);
    uint64_t v19 = v50;
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v155);
  }
  uint64_t v145 = v17;
  *(void *)&long long v144 = v18;
  *((void *)&v144 + 1) = v19;
  long long v135 = xmmword_182107DD0;
  outlined init with take of Any(&v144, &v136);
  swift_bridgeObjectRetain();
  id v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v22 = v20[2];
  unint64_t v21 = v20[3];
  if (v22 >= v21 >> 1) {
    id v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v20);
  }
  v20[2] = v22 + 1;
  uint64_t v23 = &v20[6 * v22];
  long long v24 = v135;
  long long v25 = v137;
  _OWORD v23[3] = v136;
  v23[4] = v25;
  v23[2] = v24;
LABEL_6:
  uint64_t v26 = outlined retain of URLComponents((uint64_t)&v155);
  id v27 = URLComponents._URLComponents.user.getter(v26);
  uint64_t v29 = v28;
  outlined release of URLComponents((uint64_t)&v155);
  if (v29)
  {
    uint64_t v145 = v17;
    *(void *)&long long v144 = v27;
    *((void *)&v144 + 1) = v29;
    long long v135 = xmmword_182107DE0;
    outlined init with take of Any(&v144, &v136);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    }
    unint64_t v31 = v20[2];
    unint64_t v30 = v20[3];
    if (v31 >= v30 >> 1) {
      id v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v20);
    }
    v20[2] = v31 + 1;
    uint64_t v32 = &v20[6 * v31];
    long long v33 = v135;
    long long v34 = v137;
    long long v32[3] = v136;
    _OWORD v32[4] = v34;
    _OWORD v32[2] = v33;
  }
  uint64_t v35 = outlined retain of URLComponents((uint64_t)&v155);
  uint64_t v36 = URLComponents._URLComponents.password.getter(v35);
  uint64_t v38 = v37;
  outlined release of URLComponents((uint64_t)&v155);
  if (v38)
  {
    uint64_t v145 = v17;
    *(void *)&long long v144 = v36;
    *((void *)&v144 + 1) = v38;
    long long v135 = xmmword_182107DF0;
    outlined init with take of Any(&v144, &v136);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    }
    unint64_t v40 = v20[2];
    unint64_t v39 = v20[3];
    if (v40 >= v39 >> 1) {
      id v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v20);
    }
    uint64_t v41 = a1;
    v20[2] = v40 + 1;
    id v42 = &v20[6 * v40];
    long long v43 = v135;
    long long v44 = v137;
    long long v42[3] = v136;
    v42[4] = v44;
    _OWORD v42[2] = v43;
    unint64_t v45 = v160;
    if ((void)v160) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v41 = a1;
    unint64_t v45 = v160;
    if ((void)v160)
    {
LABEL_18:
      uint64_t v46 = *((void *)&v159 + 1);
      uint64_t v47 = outlined retain of URLComponents((uint64_t)&v155);
      unint64_t v48 = v45;
      goto LABEL_31;
    }
  }
  if (BYTE12(v155) == 1 && v16 && (*(unsigned char *)(v16 + 120) & 1) == 0)
  {
    uint64_t v129 = v5;
    outlined retain of URLComponents((uint64_t)&v155);
    uint64_t v5 = v129;
    uint64_t v54 = String.subscript.getter();
    uint64_t v46 = MEMORY[0x185301F50](v54);
    unint64_t v48 = v55;
    uint64_t v47 = swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v155);
    uint64_t v47 = URLComponents._URLComponents.port.getter();
    if (v51)
    {
      URLComponents._URLComponents.percentEncodedUser.getter();
      uint64_t v53 = v52;
      uint64_t v47 = swift_bridgeObjectRelease();
      if (!v53)
      {
        outlined release of URLComponents((uint64_t)&v155);
        char v66 = v130;
        goto LABEL_60;
      }
    }
    uint64_t v46 = 0;
    unint64_t v48 = 0xE000000000000000;
  }
LABEL_31:
  uint64_t v56 = v46 & 0xFFFFFFFFFFFFLL;
  if ((v48 & 0x2000000000000000) != 0) {
    uint64_t v57 = HIBYTE(v48) & 0xF;
  }
  else {
    uint64_t v57 = v46 & 0xFFFFFFFFFFFFLL;
  }
  if (v57)
  {
    if (v163[24])
    {
      uint64_t v129 = v5;
      *(void *)&long long v135 = v46;
      *((void *)&v135 + 1) = v48;
      MEMORY[0x1F4188790](v47);
      uint64_t v58 = MEMORY[0x1E4FBC870];
      *(&v128 - 2) = (uint64_t)&v135;
      *(&v128 - 1) = v58;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v59 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v128 - 4), v46, v48);
      if (v60 == 1)
      {
        unint64_t v62 = *((void *)&v135 + 1);
        Swift::Int v61 = v135;
        swift_bridgeObjectRetain();
        uint64_t v63 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v61, v62, MEMORY[0x1E4FBC870]);
        unint64_t v65 = v64;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v63 = (uint64_t)v59;
        unint64_t v65 = v60;
        swift_bridgeObjectRelease_n();
      }
      outlined release of URLComponents((uint64_t)&v155);
      uint64_t v5 = v129;
      char v66 = v130;
LABEL_67:
      uint64_t v67 = MEMORY[0x1E4FBB1A0];
      if (!v65) {
        goto LABEL_73;
      }
      goto LABEL_68;
    }
    if ((v48 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((v48 & 0x2000000000000000) != 0)
      {
        *(void *)&long long v135 = v46;
        *((void *)&v135 + 1) = v48 & 0xFFFFFFFFFFFFFFLL;
        *(void *)&long long v144 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v144 + 1) = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v135, HIBYTE(v48) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v144, 0, (unsigned __int8 *)&v135, HIBYTE(v48) & 0xF, &v133);
        uint64_t v63 = v133;
        unint64_t v65 = v134;
        swift_release();
      }
      else
      {
        if ((v46 & 0x1000000000000000) != 0)
        {
          unint64_t v68 = (unsigned __int8 *)((v48 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          unint64_t v68 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          uint64_t v56 = v85;
        }
        *(void *)&long long v135 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v135 + 1) = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        uint64_t v63 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v68, v56, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v135, 0, v68, v56);
        unint64_t v65 = v69;
      }
      swift_bridgeObjectRelease();
      if (v65 != 1)
      {
        swift_bridgeObjectRelease_n();
LABEL_66:
        outlined release of URLComponents((uint64_t)&v155);
        char v66 = v130;
        goto LABEL_67;
      }
    }
    uint64_t v128 = v41;
    uint64_t v129 = v5;
    *(void *)&long long v135 = v46;
    *((void *)&v135 + 1) = v48;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    uint64_t v70 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v71 = objc_msgSend(v70, sel__fastCharacterContents);
    id v72 = v70;
    if (v71)
    {
      *(void *)&long long v135 = v46;
      *((void *)&v135 + 1) = v48;
      StringProtocol._ephemeralString.getter();
      uint64_t v73 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v74 = objc_msgSend(v73, sel_length);
      uint64_t v75 = swift_unknownObjectRelease();
      MEMORY[0x1F4188790](v75);
      *((unsigned char *)&v128 - 16) = 0;
      MEMORY[0x1F4188790](v76);
      *(&v128 - 2) = (uint64_t)v71;
      *(&v128 - 1) = (uint64_t)v74;
      uint64_t v63 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v71, (uint64_t)v74, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v77, (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)(&v128 - 4));
      unint64_t v65 = v78;
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v155);
      uint64_t v5 = v129;
      if (v65)
      {
        char v66 = v130;
        goto LABEL_39;
      }
      char v66 = v130;
LABEL_60:
      uint64_t v67 = MEMORY[0x1E4FBB1A0];
      goto LABEL_73;
    }
    *(void *)&long long v135 = v46;
    *((void *)&v135 + 1) = v48;
    swift_bridgeObjectRetain();
    uint64_t v80 = String.init<A>(_:)();
    unint64_t v81 = v79;
    uint64_t v5 = v129;
    if ((v79 & 0x1000000000000000) != 0)
    {
      uint64_t v80 = static String._copying(_:)();
      unint64_t v87 = v86;
      swift_bridgeObjectRelease();
      unint64_t v81 = v87;
      if ((v87 & 0x2000000000000000) == 0) {
        goto LABEL_55;
      }
    }
    else if ((v79 & 0x2000000000000000) == 0)
    {
LABEL_55:
      if ((v80 & 0x1000000000000000) != 0)
      {
        char v82 = (unsigned __int8 *)((v81 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v83 = v80 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        char v82 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      *(void *)&long long v135 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
      *((void *)&v135 + 1) = 0;
      uint64_t v63 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v82, v83, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v135, 0, v82, v83);
      unint64_t v65 = v84;
      goto LABEL_65;
    }
    *(void *)&long long v135 = v80;
    *((void *)&v135 + 1) = v81 & 0xFFFFFFFFFFFFFFLL;
    *(void *)&long long v144 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((void *)&v144 + 1) = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v135, HIBYTE(v81) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v144, 0, (unsigned __int8 *)&v135, HIBYTE(v81) & 0xF, &v133);
    uint64_t v63 = v133;
    unint64_t v65 = v134;
    swift_release();
LABEL_65:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_66;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined release of URLComponents((uint64_t)&v155);
  uint64_t v63 = 0;
  unint64_t v65 = 0xE000000000000000;
  char v66 = v130;
LABEL_39:
  uint64_t v67 = MEMORY[0x1E4FBB1A0];
LABEL_68:
  uint64_t v145 = v67;
  *(void *)&long long v144 = v63;
  *((void *)&v144 + 1) = v65;
  long long v135 = xmmword_182107E00;
  outlined init with take of Any(&v144, &v136);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    id v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
  }
  unint64_t v89 = v20[2];
  unint64_t v88 = v20[3];
  if (v89 >= v88 >> 1) {
    id v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v88 > 1), v89 + 1, 1, v20);
  }
  v20[2] = v89 + 1;
  unint64_t v90 = &v20[6 * v89];
  long long v91 = v135;
  long long v92 = v137;
  v90[3] = v136;
  v90[4] = v92;
  v90[2] = v91;
LABEL_73:
  outlined retain of URLComponents((uint64_t)&v155);
  uint64_t v93 = URLComponents._URLComponents.port.getter();
  char v95 = v94;
  outlined release of URLComponents((uint64_t)&v155);
  if ((v95 & 1) == 0)
  {
    uint64_t v145 = MEMORY[0x1E4FBB550];
    *(void *)&long long v144 = v93;
    long long v135 = xmmword_182107E10;
    outlined init with take of Any(&v144, &v136);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    }
    unint64_t v97 = v20[2];
    unint64_t v96 = v20[3];
    if (v97 >= v96 >> 1) {
      id v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v96 > 1), v97 + 1, 1, v20);
    }
    v20[2] = v97 + 1;
    uint64_t v98 = &v20[6 * v97];
    long long v99 = v135;
    long long v100 = v137;
    long long v98[3] = v136;
    v98[4] = v100;
    v98[2] = v99;
  }
  outlined retain of URLComponents((uint64_t)&v155);
  uint64_t v101 = URLComponents._URLComponents.path.getter();
  uint64_t v103 = v102;
  outlined release of URLComponents((uint64_t)&v155);
  uint64_t v145 = v67;
  *(void *)&long long v144 = v101;
  *((void *)&v144 + 1) = v103;
  long long v135 = xmmword_182107E20;
  outlined init with take of Any(&v144, &v136);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    id v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
  }
  unint64_t v105 = v20[2];
  unint64_t v104 = v20[3];
  if (v105 >= v104 >> 1) {
    id v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v104 > 1), v105 + 1, 1, v20);
  }
  v20[2] = v105 + 1;
  char v106 = &v20[6 * v105];
  long long v107 = v135;
  long long v108 = v137;
  v106[3] = v136;
  v106[4] = v108;
  v106[2] = v107;
  outlined retain of URLComponents((uint64_t)&v155);
  unint64_t v109 = (unint64_t)URLComponents._URLComponents.queryItems(percentEncoded:)(0);
  outlined release of URLComponents((uint64_t)&v155);
  if (v109)
  {
    uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URLQueryItem]);
    *(void *)&long long v144 = v109;
    long long v135 = xmmword_182107E30;
    outlined init with take of Any(&v144, &v136);
    unint64_t v111 = v20[2];
    unint64_t v110 = v20[3];
    if (v111 >= v110 >> 1) {
      id v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v110 > 1), v111 + 1, 1, v20);
    }
    v20[2] = v111 + 1;
    uint64_t v112 = &v20[6 * v111];
    long long v113 = v135;
    long long v114 = v137;
    v112[3] = v136;
    v112[4] = v114;
    v112[2] = v113;
  }
  uint64_t v115 = outlined retain of URLComponents((uint64_t)&v155);
  uint64_t v116 = URLComponents._URLComponents.fragment.getter(v115);
  uint64_t v118 = v117;
  outlined release of URLComponents((uint64_t)&v155);
  if (v118)
  {
    uint64_t v145 = v67;
    *(void *)&long long v144 = v116;
    *((void *)&v144 + 1) = v118;
    long long v135 = xmmword_182107E40;
    outlined init with take of Any(&v144, &v136);
    unint64_t v120 = v20[2];
    unint64_t v119 = v20[3];
    if (v120 >= v119 >> 1) {
      id v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v119 > 1), v120 + 1, 1, v20);
    }
    v20[2] = v120 + 1;
    uint64_t v121 = &v20[6 * v120];
    long long v122 = v135;
    long long v123 = v137;
    v121[3] = v136;
    v121[4] = v123;
    v121[2] = v122;
  }
  long long v141 = v161;
  long long v142 = v162;
  v143[0] = *(_OWORD *)v163;
  *(_OWORD *)((char *)v143 + 10) = *(_OWORD *)&v163[10];
  long long v137 = v157;
  long long v138 = v158;
  long long v139 = v159;
  long long v140 = v160;
  long long v135 = v155;
  long long v136 = v156;
  *(void *)&long long v144 = v20;
  uint64_t v124 = *MEMORY[0x1E4FBC410];
  uint64_t v125 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v126 = *(void *)(v125 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v126 + 104))(v66, v124, v125);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v126 + 56))(v66, 0, 1, v125);
  (*(void (**)(char *, void, uint64_t))(v131 + 104))(v5, *MEMORY[0x1E4FBC430], v132);
  outlined retain of URLComponents((uint64_t)&v155);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A], &demangling cache variable for type metadata for [(label: String?, value: Any)]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t URLComponents.debugDescription.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v303 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v303 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Mirror();
  unint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  long long v11 = (char *)&v303 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v12 = v0[7];
  long long v352 = v0[6];
  long long v353 = v12;
  *(_OWORD *)uint64_t v354 = v0[8];
  *(_OWORD *)&v354[10] = *(long long *)((char *)v0 + 138);
  long long v13 = v0[3];
  long long v348 = v0[2];
  long long v349 = v13;
  long long v14 = v0[5];
  long long v350 = v0[4];
  long long v351 = v14;
  long long v15 = v0[1];
  long long v346 = *v0;
  long long v347 = v15;
  outlined retain of URLComponents((uint64_t)&v346);
  URLComponents.url.getter((uint64_t *)&v337);
  if ((void)v337)
  {
    long long v17 = v337;
    uint64_t v16 = v338;
    if (!_foundation_swift_url_feature_enabled())
    {
      uint64_t v18 = (void *)v17;
      id v33 = objc_msgSend((id)v17, sel_description);
      id v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);

LABEL_40:
      outlined consume of URL?(v18);
LABEL_288:
      outlined release of URLComponents((uint64_t)&v346);
      return (uint64_t)v34;
    }
    uint64_t v18 = (void *)v17;
    long long v337 = v17;
    *(void *)&long long v338 = v16;
    URL.scheme.getter();
    if (!v19) {
      goto LABEL_26;
    }
    Swift::String v20 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v20._countAndFlagsBits == 1635017060 && v20._object == (void *)0xE400000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v35 & 1) == 0) {
        goto LABEL_26;
      }
    }
    swift_retain();
    id v36 = (id)v17;
    swift_retain();
    uint64_t result = _foundation_swift_url_feature_enabled();
    if (result)
    {
      if (!*((void *)&v17 + 1)) {
        goto LABEL_306;
      }
      swift_bridgeObjectRetain();
    }
    else
    {
      id v38 = objc_msgSend(v36, sel_relativeString);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    }
    outlined consume of URL?((void *)v17);
    uint64_t v39 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v39 >= 129)
    {
      *(void *)&long long v337 = 0;
      *((void *)&v337 + 1) = 0xE000000000000000;
      id v40 = v36;
      swift_retain();
      swift_retain();
      uint64_t result = _foundation_swift_url_feature_enabled();
      if (!result)
      {
        id v45 = objc_msgSend(v40, sel_relativeString);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v45);

        goto LABEL_33;
      }
      if (*((void *)&v17 + 1))
      {
        swift_bridgeObjectRetain();
LABEL_33:
        outlined consume of URL?((void *)v17);
        uint64_t v46 = specialized Collection.prefix(_:)(120);
        uint64_t v48 = v47;
        uint64_t v50 = v49;
        uint64_t v52 = v51;
        swift_bridgeObjectRelease();
        v53._unint64_t countAndFlagsBits = MEMORY[0x185301F50](v46, v48, v50, v52);
        String.append(_:)(v53);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v54._unint64_t countAndFlagsBits = 0x202E2E2E20;
        v54._unint64_t object = (void *)0xE500000000000000;
        String.append(_:)(v54);
        id v55 = v40;
        swift_retain();
        swift_retain();
        uint64_t result = _foundation_swift_url_feature_enabled();
        if (!result)
        {
          id v58 = objc_msgSend(v55, sel_relativeString);
          id v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
          unint64_t v56 = v59;

          goto LABEL_37;
        }
        if (*((void *)&v17 + 1))
        {
          id v57 = *(id *)(*((void *)&v17 + 1) + 16);
          unint64_t v56 = *(void *)(*((void *)&v17 + 1) + 24);
          swift_bridgeObjectRetain();
LABEL_37:
          outlined consume of URL?((void *)v17);
          uint64_t v60 = specialized BidirectionalCollection.suffix(_:)(8, (uint64_t)v57, v56);
          uint64_t v62 = v61;
          uint64_t v64 = v63;
          uint64_t v66 = v65;
          swift_bridgeObjectRelease();
          v67._unint64_t countAndFlagsBits = MEMORY[0x185301F50](v60, v62, v64, v66);
          String.append(_:)(v67);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v42 = (void *)*((void *)&v337 + 1);
          id v34 = (id)v337;
LABEL_38:
          long long v328 = v17;
          *(void *)&long long v329 = v16;
          URL.baseURL.getter((uint64_t *)&v337);
          unint64_t v68 = (void *)v337;
          if ((void)v337)
          {
            unint64_t v70 = *((void *)&v337 + 1);
            uint64_t v69 = v338;
            *(void *)&long long v337 = 0;
            *((void *)&v337 + 1) = 0xE000000000000000;
            v71._unint64_t countAndFlagsBits = (uint64_t)v34;
            v71._unint64_t object = v42;
            String.append(_:)(v71);
            swift_bridgeObjectRelease();
            v72._unint64_t countAndFlagsBits = 539831584;
            v72._unint64_t object = (void *)0xE400000000000000;
            String.append(_:)(v72);
            specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v68, v70, v69);
            outlined consume of URL?(v68);
            outlined consume of URL?((void *)v17);
            outlined release of URLComponents((uint64_t)&v346);
            return v337;
          }
          goto LABEL_40;
        }
LABEL_308:
        __break(1u);
        goto LABEL_309;
      }
LABEL_307:
      __break(1u);
      goto LABEL_308;
    }
LABEL_26:
    swift_retain();
    id v41 = (id)v17;
    swift_retain();
    uint64_t result = _foundation_swift_url_feature_enabled();
    if (!result)
    {
      id v43 = objc_msgSend(v41, sel_relativeString);
      id v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      id v42 = v44;

      goto LABEL_30;
    }
    if (*((void *)&v17 + 1))
    {
      id v34 = *(id *)(*((void *)&v17 + 1) + 16);
      id v42 = *(void **)(*((void *)&v17 + 1) + 24);
      swift_bridgeObjectRetain();
LABEL_30:
      outlined consume of URL?((void *)v17);
      goto LABEL_38;
    }
    __break(1u);
LABEL_306:
    __break(1u);
    goto LABEL_307;
  }
  uint64_t v306 = v11;
  uint64_t v307 = v2;
  long long v343 = v352;
  long long v344 = v353;
  v345[0] = *(_OWORD *)v354;
  *(_OWORD *)((char *)v345 + 10) = *(_OWORD *)&v354[10];
  long long v339 = v348;
  long long v340 = v349;
  long long v341 = v350;
  long long v342 = v351;
  long long v337 = v346;
  long long v338 = v347;
  uint64_t v21 = v348;
  uint64_t v308 = v8;
  uint64_t v309 = v346;
  uint64_t v310 = v1;
  if (!(void)v348)
  {
    unint64_t v24 = (unint64_t)v4;
    if (BYTE9(v346) == 1)
    {
      unint64_t v25 = v9;
      if ((void)v346)
      {
        uint64_t v26 = v7;
        if (*(unsigned char *)(v346 + 48))
        {
          outlined retain of URLComponents((uint64_t)&v346);
          unint64_t v27 = MEMORY[0x1E4FBC860];
          goto LABEL_43;
        }
        outlined retain of URLComponents((uint64_t)&v346);
        outlined retain of URLComponents((uint64_t)&v346);
        uint64_t v136 = String.subscript.getter();
        uint64_t v22 = MEMORY[0x185301F50](v136);
        uint64_t v23 = v137;
        swift_bridgeObjectRelease();
        outlined release of URLComponents((uint64_t)&v346);
        goto LABEL_9;
      }
      outlined retain of URLComponents((uint64_t)&v346);
      unint64_t v27 = MEMORY[0x1E4FBC860];
    }
    else
    {
      outlined retain of URLComponents((uint64_t)&v346);
      unint64_t v27 = MEMORY[0x1E4FBC860];
      unint64_t v25 = v9;
    }
    uint64_t v26 = v7;
    goto LABEL_43;
  }
  uint64_t v22 = *((void *)&v347 + 1);
  outlined retain of URLComponents((uint64_t)&v346);
  uint64_t v23 = v21;
  unint64_t v24 = (unint64_t)v4;
  unint64_t v25 = v9;
  uint64_t v26 = v7;
LABEL_9:
  *((void *)&v325[0] + 1) = MEMORY[0x1E4FBB1A0];
  *(void *)&long long v324 = v22;
  *((void *)&v324 + 1) = v23;
  long long v328 = xmmword_182107DD0;
  outlined init with take of Any(&v324, &v329);
  swift_bridgeObjectRetain();
  unint64_t v27 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v29 = *(void *)(v27 + 16);
  unint64_t v28 = *(void *)(v27 + 24);
  if (v29 >= v28 >> 1) {
    unint64_t v27 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, (void *)v27);
  }
  *(void *)(v27 + 16) = v29 + 1;
  unint64_t v30 = (_OWORD *)(v27 + 48 * v29);
  long long v31 = v328;
  long long v32 = v330;
  void v30[3] = v329;
  _OWORD v30[4] = v32;
  void v30[2] = v31;
LABEL_43:
  outlined retain of URLComponents((uint64_t)&v346);
  uint64_t v73 = URLComponents._URLComponents.percentEncodedUser.getter();
  unint64_t v312 = v25;
  if (!v74)
  {
    outlined release of URLComponents((uint64_t)&v346);
    goto LABEL_58;
  }
  unint64_t v75 = v74;
  uint64_t v76 = HIBYTE(v74) & 0xF;
  if ((v74 & 0x2000000000000000) == 0) {
    uint64_t v76 = v73 & 0xFFFFFFFFFFFFLL;
  }
  if (v76)
  {
    *(void *)&long long v328 = v73;
    *((void *)&v328 + 1) = v74;
    MEMORY[0x1F4188790](v73);
    *(&v303 - 2) = (uint64_t)&v328;
    *(&v303 - 1) = v77;
    unint64_t v79 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v303 - 4), v78, v75);
    if (v80 == 1)
    {
      unint64_t v82 = *((void *)&v328 + 1);
      Swift::Int v81 = v328;
      swift_bridgeObjectRetain();
      uint64_t v83 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v81, v82, MEMORY[0x1E4FBC870]);
      unint64_t v85 = v84;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v83 = (void (*)(char *, void))v79;
      unint64_t v85 = v80;
    }
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v346);
    unint64_t v25 = v312;
    if (!v85) {
      goto LABEL_58;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v346);
    uint64_t v83 = 0;
    unint64_t v85 = 0xE000000000000000;
  }
  *((void *)&v325[0] + 1) = MEMORY[0x1E4FBB1A0];
  *(void *)&long long v324 = v83;
  *((void *)&v324 + 1) = v85;
  long long v328 = xmmword_182107DE0;
  outlined init with take of Any(&v324, &v329);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v27 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1, (void *)v27);
  }
  unint64_t v87 = *(void *)(v27 + 16);
  unint64_t v86 = *(void *)(v27 + 24);
  if (v87 >= v86 >> 1) {
    unint64_t v27 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v86 > 1), v87 + 1, 1, (void *)v27);
  }
  *(void *)(v27 + 16) = v87 + 1;
  unint64_t v88 = (_OWORD *)(v27 + 48 * v87);
  long long v89 = v328;
  long long v90 = v330;
  v88[3] = v329;
  v88[4] = v90;
  _OWORD v88[2] = v89;
LABEL_58:
  unint64_t v91 = v350;
  if ((void)v350)
  {
    uint64_t v92 = *((void *)&v349 + 1);
    uint64_t v93 = outlined retain of URLComponents((uint64_t)&v346);
    unint64_t v94 = v91;
  }
  else
  {
    if (BYTE11(v346) != 1 || !v309 || (*(unsigned char *)(v309 + 96) & 1) != 0) {
      goto LABEL_77;
    }
    outlined retain of URLComponents((uint64_t)&v346);
    uint64_t v103 = String.subscript.getter();
    uint64_t v92 = MEMORY[0x185301F50](v103);
    unint64_t v94 = v104;
    unint64_t v25 = v312;
    uint64_t v93 = swift_bridgeObjectRelease();
  }
  uint64_t v95 = HIBYTE(v94) & 0xF;
  if ((v94 & 0x2000000000000000) == 0) {
    uint64_t v95 = v92 & 0xFFFFFFFFFFFFLL;
  }
  if (v95)
  {
    *(void *)&long long v328 = v92;
    *((void *)&v328 + 1) = v94;
    MEMORY[0x1F4188790](v93);
    *(&v303 - 2) = (uint64_t)&v328;
    *(&v303 - 1) = MEMORY[0x1E4FBC870];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v96 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v303 - 4), v92, v94);
    if (v97 == 1)
    {
      unint64_t v99 = *((void *)&v328 + 1);
      Swift::Int v98 = v328;
      swift_bridgeObjectRetain();
      long long v100 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v98, v99, MEMORY[0x1E4FBC870]);
      unint64_t v102 = v101;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v100 = (void (*)(char *, void))v96;
      unint64_t v102 = v97;
      swift_bridgeObjectRelease_n();
    }
    outlined release of URLComponents((uint64_t)&v346);
    unint64_t v25 = v312;
    if (!v102) {
      goto LABEL_77;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v346);
    long long v100 = 0;
    unint64_t v102 = 0xE000000000000000;
  }
  *((void *)&v325[0] + 1) = MEMORY[0x1E4FBB1A0];
  *(void *)&long long v324 = v100;
  *((void *)&v324 + 1) = v102;
  long long v328 = xmmword_182107DF0;
  outlined init with take of Any(&v324, &v329);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v27 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1, (void *)v27);
  }
  unint64_t v106 = *(void *)(v27 + 16);
  unint64_t v105 = *(void *)(v27 + 24);
  if (v106 >= v105 >> 1) {
    unint64_t v27 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v105 > 1), v106 + 1, 1, (void *)v27);
  }
  *(void *)(v27 + 16) = v106 + 1;
  long long v107 = (_OWORD *)(v27 + 48 * v106);
  long long v108 = v328;
  long long v109 = v330;
  v107[3] = v329;
  v107[4] = v109;
  v107[2] = v108;
LABEL_77:
  outlined retain of URLComponents((uint64_t)&v346);
  uint64_t v110 = URLComponents._URLComponents.encodedHost.getter();
  if (!v111)
  {
    outlined release of URLComponents((uint64_t)&v346);
    goto LABEL_120;
  }
  uint64_t v112 = v110;
  unint64_t v113 = v111;
  uint64_t v114 = HIBYTE(v111) & 0xF;
  uint64_t v115 = v110 & 0xFFFFFFFFFFFFLL;
  if ((v111 & 0x2000000000000000) != 0) {
    uint64_t v116 = HIBYTE(v111) & 0xF;
  }
  else {
    uint64_t v116 = v110 & 0xFFFFFFFFFFFFLL;
  }
  if (!v116)
  {
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v346);
    uint64_t v121 = 0;
    unint64_t v123 = 0xE000000000000000;
    goto LABEL_114;
  }
  if ((v354[24] & 1) == 0)
  {
    if ((v111 & 0x1000000000000000) != 0)
    {
      unint64_t v305 = v27;
      unint64_t v126 = v24;
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((v111 & 0x2000000000000000) != 0)
      {
        *(void *)&long long v328 = v110;
        *((void *)&v328 + 1) = v111 & 0xFFFFFFFFFFFFFFLL;
        *(void *)&long long v324 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v324 + 1) = 0;
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v328, v114, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v324, 0, (unsigned __int8 *)&v328, v114, (uint64_t *)&v321);
        unint64_t v123 = *((void *)&v321 + 1);
        uint64_t v121 = v321;
        swift_release();
      }
      else
      {
        if ((v110 & 0x1000000000000000) != 0)
        {
          uint64_t v124 = (unsigned __int8 *)((v111 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          uint64_t v124 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          uint64_t v115 = v144;
        }
        *(void *)&long long v328 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v328 + 1) = 0;
        swift_bridgeObjectRetain_n();
        uint64_t v121 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v124, v115, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v328, 0, v124, v115);
        unint64_t v123 = v125;
      }
      swift_bridgeObjectRelease();
      if (v123 != 1)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_113;
      }
      unint64_t v305 = v27;
      unint64_t v126 = v24;
    }
    *(void *)&long long v328 = v112;
    *((void *)&v328 + 1) = v113;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    uint64_t v127 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v128 = objc_msgSend(v127, sel__fastCharacterContents);
    id v129 = v127;
    if (v128)
    {
      *(void *)&long long v328 = v112;
      *((void *)&v328 + 1) = v113;
      StringProtocol._ephemeralString.getter();
      uint64_t v130 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v131 = objc_msgSend(v130, sel_length);
      uint64_t v132 = swift_unknownObjectRelease();
      MEMORY[0x1F4188790](v132);
      *((unsigned char *)&v303 - 16) = 0;
      MEMORY[0x1F4188790](v133);
      *(&v303 - 2) = (uint64_t)v128;
      *(&v303 - 1) = (uint64_t)v131;
      uint64_t v121 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v128, (uint64_t)v131, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v134, (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)(&v303 - 4));
      unint64_t v123 = v135;
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v346);
      unint64_t v24 = v126;
      if (v123)
      {
        unint64_t v27 = v305;
        goto LABEL_114;
      }
      unint64_t v25 = v312;
      unint64_t v27 = v305;
      goto LABEL_120;
    }
    *(void *)&long long v328 = v112;
    *((void *)&v328 + 1) = v113;
    swift_bridgeObjectRetain();
    uint64_t v139 = String.init<A>(_:)();
    unint64_t v140 = v138;
    unint64_t v24 = v126;
    if ((v138 & 0x1000000000000000) != 0)
    {
      uint64_t v139 = static String._copying(_:)();
      unint64_t v146 = v145;
      swift_bridgeObjectRelease();
      unint64_t v140 = v146;
      unint64_t v27 = v305;
      if ((v146 & 0x2000000000000000) == 0) {
        goto LABEL_103;
      }
    }
    else
    {
      unint64_t v27 = v305;
      if ((v138 & 0x2000000000000000) == 0)
      {
LABEL_103:
        if ((v139 & 0x1000000000000000) == 0) {
          goto LABEL_304;
        }
        long long v141 = (unsigned __int8 *)((v140 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v142 = v139 & 0xFFFFFFFFFFFFLL;
        goto LABEL_105;
      }
    }
    *(void *)&long long v328 = v139;
    *((void *)&v328 + 1) = v140 & 0xFFFFFFFFFFFFFFLL;
    *(void *)&long long v324 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((void *)&v324 + 1) = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)&v328, HIBYTE(v140) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v324, 0, (unsigned __int8 *)&v328, HIBYTE(v140) & 0xF, (uint64_t *)&v321);
    unint64_t v123 = *((void *)&v321 + 1);
    uint64_t v121 = v321;
    swift_release();
    goto LABEL_111;
  }
  *(void *)&long long v328 = v110;
  *((void *)&v328 + 1) = v111;
  MEMORY[0x1F4188790](v110);
  *(&v303 - 2) = (uint64_t)&v328;
  *(&v303 - 1) = MEMORY[0x1E4FBC870];
  uint64_t v117 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v303 - 4), v112, v113);
  if (v118 == 1)
  {
    unint64_t v120 = *((void *)&v328 + 1);
    Swift::Int v119 = v328;
    swift_bridgeObjectRetain();
    uint64_t v121 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v119, v120, MEMORY[0x1E4FBC870]);
    unint64_t v123 = v122;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v121 = (uint64_t)v117;
    unint64_t v123 = v118;
  }
  while (2)
  {
    swift_bridgeObjectRelease();
LABEL_113:
    outlined release of URLComponents((uint64_t)&v346);
    if (v123)
    {
LABEL_114:
      *((void *)&v325[0] + 1) = MEMORY[0x1E4FBB1A0];
      *(void *)&long long v324 = v121;
      *((void *)&v324 + 1) = v123;
      long long v328 = xmmword_182107E00;
      outlined init with take of Any(&v324, &v329);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v27 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1, (void *)v27);
      }
      unint64_t v25 = v312;
      unint64_t v148 = *(void *)(v27 + 16);
      unint64_t v147 = *(void *)(v27 + 24);
      if (v148 >= v147 >> 1) {
        unint64_t v27 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v147 > 1), v148 + 1, 1, (void *)v27);
      }
      *(void *)(v27 + 16) = v148 + 1;
      long long v149 = (_OWORD *)(v27 + 48 * v148);
      long long v150 = v328;
      long long v151 = v330;
      v149[3] = v329;
      v149[4] = v151;
      v149[2] = v150;
    }
    else
    {
      unint64_t v25 = v312;
    }
LABEL_120:
    outlined retain of URLComponents((uint64_t)&v346);
    uint64_t v152 = URLComponents._URLComponents.port.getter();
    char v154 = v153;
    outlined release of URLComponents((uint64_t)&v346);
    if ((v154 & 1) == 0)
    {
      *((void *)&v325[0] + 1) = MEMORY[0x1E4FBB550];
      *(void *)&long long v324 = v152;
      long long v328 = xmmword_182107E10;
      outlined init with take of Any(&v324, &v329);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v27 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1, (void *)v27);
      }
      unint64_t v156 = *(void *)(v27 + 16);
      unint64_t v155 = *(void *)(v27 + 24);
      if (v156 >= v155 >> 1) {
        unint64_t v27 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v155 > 1), v156 + 1, 1, (void *)v27);
      }
      *(void *)(v27 + 16) = v156 + 1;
      long long v157 = (_OWORD *)(v27 + 48 * v156);
      long long v158 = v328;
      long long v159 = v330;
      v157[3] = v329;
      uint64_t v157[4] = v159;
      v157[2] = v158;
    }
    unint64_t v160 = v353;
    if ((void)v353)
    {
      uint64_t v161 = *((void *)&v352 + 1);
      uint64_t v162 = outlined retain of URLComponents((uint64_t)&v346);
      unint64_t v163 = v160;
    }
    else if (BYTE14(v346) == 1 && v309)
    {
      if (*(unsigned char *)(v309 + 168))
      {
        outlined retain of URLComponents((uint64_t)&v346);
        uint64_t v164 = MEMORY[0x185302C80](0, 0xE000000000000000);
      }
      else
      {
        outlined retain of URLComponents((uint64_t)&v346);
        uint64_t v164 = String.subscript.getter();
      }
      uint64_t v161 = MEMORY[0x185301F50](v164);
      unint64_t v163 = v165;
      uint64_t v162 = swift_bridgeObjectRelease();
      unint64_t v25 = v312;
    }
    else
    {
      uint64_t v162 = outlined retain of URLComponents((uint64_t)&v346);
      uint64_t v161 = 0;
      unint64_t v163 = 0xE000000000000000;
    }
    uint64_t v166 = HIBYTE(v163) & 0xF;
    if ((v163 & 0x2000000000000000) == 0) {
      uint64_t v166 = v161 & 0xFFFFFFFFFFFFLL;
    }
    if (v166)
    {
      *(void *)&long long v328 = v161;
      *((void *)&v328 + 1) = v163;
      MEMORY[0x1F4188790](v162);
      *(&v303 - 2) = (uint64_t)&v328;
      *(&v303 - 1) = MEMORY[0x1E4FBC870];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v167 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v303 - 4), v161, v163);
      if (v168 == 1)
      {
        unint64_t v170 = *((void *)&v328 + 1);
        Swift::Int v169 = v328;
        swift_bridgeObjectRetain();
        long long v171 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v169, v170, MEMORY[0x1E4FBC870]);
        unint64_t v173 = v172;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        unint64_t v25 = v312;
        if (!v173) {
          goto LABEL_144;
        }
      }
      else
      {
        long long v171 = (void (*)(char *, void))v167;
        unint64_t v173 = v168;
        swift_bridgeObjectRelease_n();
        unint64_t v25 = v312;
        if (!v173)
        {
LABEL_144:
          outlined release of URLComponents((uint64_t)&v346);
          long long v171 = 0;
          unint64_t v173 = 0xE000000000000000;
          goto LABEL_145;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      long long v171 = 0;
      unint64_t v173 = 0xE000000000000000;
    }
    outlined release of URLComponents((uint64_t)&v346);
LABEL_145:
    *((void *)&v325[0] + 1) = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v324 = v171;
    *((void *)&v324 + 1) = v173;
    long long v328 = xmmword_182107E20;
    outlined init with take of Any(&v324, &v329);
    unint64_t v174 = v25;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_297:
    }
      unint64_t v27 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1, (void *)v27);
    uint64_t v175 = v310;
    unint64_t v177 = *(void *)(v27 + 16);
    unint64_t v176 = *(void *)(v27 + 24);
    unint64_t v178 = v24;
    if (v177 >= v176 >> 1) {
      unint64_t v27 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v176 > 1), v177 + 1, 1, (void *)v27);
    }
    *(void *)(v27 + 16) = v177 + 1;
    unint64_t v179 = (_OWORD *)(v27 + 48 * v177);
    long long v180 = v328;
    long long v181 = v330;
    v179[3] = v329;
    v179[4] = v181;
    v179[2] = v180;
    unint64_t v182 = *(void *)v354;
    if (*(void *)v354)
    {
      uint64_t v183 = v175;
      unint64_t v184 = *((void *)&v353 + 1);
      outlined retain of URLComponents((uint64_t)&v346);
      unint64_t v185 = v182;
    }
    else
    {
      if (HIBYTE(v346) != 1)
      {
        unint64_t v237 = v174;
        goto LABEL_262;
      }
      if (!v309 || (*(unsigned char *)(v309 + 192) & 1) != 0)
      {
        unint64_t v237 = v174;
        goto LABEL_262;
      }
      uint64_t v320 = *(void *)(v309 + 184);
      outlined retain of URLComponents((uint64_t)&v346);
      uint64_t v183 = v310;
      unint64_t v174 = v312;
      uint64_t v261 = String.subscript.getter();
      uint64_t v320 = v262;
      unint64_t v184 = MEMORY[0x185301F50](v261);
      unint64_t v185 = v263;
      swift_bridgeObjectRelease();
    }
    uint64_t v186 = v184 & 0xFFFFFFFFFFFFLL;
    if ((v185 & 0x2000000000000000) != 0) {
      uint64_t v186 = HIBYTE(v185) & 0xF;
    }
    if (!v186)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      outlined release of URLComponents((uint64_t)&v346);
      uint64_t v238 = MEMORY[0x1E4FBC860];
      unint64_t v24 = v178;
      unint64_t v237 = v174;
      uint64_t v175 = v183;
      goto LABEL_259;
    }
    unint64_t v304 = v178;
    *(void *)&long long v324 = MEMORY[0x1E4FBC860];
    unint64_t v319 = v186;
    uint64_t v320 = v184;
    unint64_t v317 = 4 * v186;
    uint64_t v187 = (v184 >> 59) & 1;
    if ((v185 & 0x1000000000000000) == 0) {
      LOBYTE(v187) = 1;
    }
    uint64_t v188 = 4 << v187;
    uint64_t v313 = (v185 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v314 = v185 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v189 = v188;
    unint64_t v24 = 0;
    unint64_t v190 = 0;
    unint64_t v174 = 1;
    unint64_t v191 = 15;
    unint64_t v192 = 15;
    unint64_t v305 = v27;
    unint64_t v27 = v185;
    unint64_t v315 = v185;
    long long v316 = v26;
    uint64_t v318 = (char *)v189;
    do
    {
      uint64_t v26 = (char *)(v191 & 0xC);
      unint64_t v193 = v191;
      if (v26 == (char *)v189)
      {
        unint64_t v193 = _StringGuts._slowEnsureMatchingEncoding(_:)(v191, v320, v27);
        uint64_t v189 = (uint64_t)v318;
      }
      unint64_t v194 = v193 >> 16;
      unint64_t v196 = v319;
      uint64_t v195 = v320;
      if (v193 >> 16 >= v319)
      {
        __break(1u);
LABEL_291:
        __break(1u);
LABEL_292:
        __break(1u);
LABEL_293:
        __break(1u);
LABEL_294:
        __break(1u);
LABEL_295:
        __break(1u);
LABEL_296:
        __break(1u);
        goto LABEL_297;
      }
      if ((v27 & 0x1000000000000000) != 0)
      {
        char v198 = String.UTF8View._foreignSubscript(position:)();
        uint64_t v189 = (uint64_t)v318;
        unint64_t v196 = v319;
        uint64_t v195 = v320;
      }
      else if ((v27 & 0x2000000000000000) != 0)
      {
        *(void *)&long long v328 = v320;
        *((void *)&v328 + 1) = v314;
        char v198 = *((unsigned char *)&v328 + v194);
      }
      else
      {
        uint64_t v197 = v313;
        if ((v320 & 0x1000000000000000) == 0)
        {
          uint64_t v197 = _StringObject.sharedUTF8.getter();
          uint64_t v189 = (uint64_t)v318;
          unint64_t v196 = v319;
          uint64_t v195 = v320;
        }
        char v198 = *(unsigned char *)(v197 + v194);
      }
      if (v198 != 38)
      {
        if (v174) {
          unint64_t v199 = v191;
        }
        else {
          unint64_t v199 = v190;
        }
        if (v198 == 61)
        {
          unint64_t v190 = v199;
          unint64_t v174 = 0;
        }
        else
        {
          unint64_t v174 = v174;
        }
        goto LABEL_174;
      }
      if (v174)
      {
        if (v24 < v192 >> 14) {
          goto LABEL_292;
        }
        uint64_t v201 = String.subscript.getter();
        uint64_t v202 = MEMORY[0x185301F50](v201);
        unint64_t v27 = v203;
        uint64_t v204 = swift_bridgeObjectRelease();
        uint64_t v205 = 0;
        unint64_t v206 = 0;
        goto LABEL_193;
      }
      if (v190 >> 14 < v192 >> 14) {
        goto LABEL_293;
      }
      uint64_t v207 = String.subscript.getter();
      uint64_t v202 = MEMORY[0x185301F50](v207);
      unint64_t v27 = v208;
      swift_bridgeObjectRelease();
      if ((char *)(v190 & 0xC) == v318)
      {
        unint64_t v190 = _StringGuts._slowEnsureMatchingEncoding(_:)(v190, v320, v315);
        if ((v315 & 0x1000000000000000) != 0)
        {
LABEL_189:
          if (v319 <= v190 >> 16) {
            goto LABEL_296;
          }
          unint64_t v209 = String.UTF8View._foreignIndex(after:)();
          goto LABEL_191;
        }
      }
      else if ((v315 & 0x1000000000000000) != 0)
      {
        goto LABEL_189;
      }
      unint64_t v209 = (v190 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_191:
      if (v24 < v209 >> 14) {
        goto LABEL_294;
      }
      uint64_t v211 = String.subscript.getter();
      uint64_t v205 = MEMORY[0x185301F50](v211);
      unint64_t v206 = v212;
      uint64_t v204 = swift_bridgeObjectRelease();
LABEL_193:
      uint64_t v213 = HIBYTE(v27) & 0xF;
      if ((v27 & 0x2000000000000000) == 0) {
        uint64_t v213 = v202 & 0xFFFFFFFFFFFFLL;
      }
      if (v213)
      {
        *(void *)&long long v328 = v202;
        *((void *)&v328 + 1) = v27;
        MEMORY[0x1F4188790](v204);
        *(&v303 - 2) = (uint64_t)&v328;
        *(&v303 - 1) = MEMORY[0x1E4FBC870];
        swift_bridgeObjectRetain();
        uint64_t v214 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v303 - 4), v202, v27);
        if (v215 == 1)
        {
          unint64_t v216 = *((void *)&v328 + 1);
          Swift::Int v217 = v328;
          swift_bridgeObjectRetain();
          unint64_t v194 = (unint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v217, v216, MEMORY[0x1E4FBC870]);
          unint64_t v24 = v218;
          swift_bridgeObjectRelease();
        }
        else
        {
          unint64_t v194 = (unint64_t)v214;
          unint64_t v24 = v215;
        }
        swift_bridgeObjectRelease();
        uint64_t v219 = swift_bridgeObjectRelease();
        if (v24)
        {
          if (v206) {
            goto LABEL_202;
          }
          goto LABEL_208;
        }
      }
      else
      {
        uint64_t v219 = swift_bridgeObjectRelease();
      }
      unint64_t v194 = 0;
      unint64_t v24 = 0xE000000000000000;
      if (v206)
      {
LABEL_202:
        uint64_t v220 = HIBYTE(v206) & 0xF;
        if ((v206 & 0x2000000000000000) == 0) {
          uint64_t v220 = v205 & 0xFFFFFFFFFFFFLL;
        }
        if (v220)
        {
          unint64_t v311 = v194;
          *(void *)&long long v328 = v205;
          *((void *)&v328 + 1) = v206;
          MEMORY[0x1F4188790](v219);
          *(&v303 - 2) = (uint64_t)&v328;
          *(&v303 - 1) = MEMORY[0x1E4FBC870];
          swift_bridgeObjectRetain();
          uint64_t v221 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v303 - 4), v205, v206);
          if (v222 == 1)
          {
            unint64_t v224 = *((void *)&v328 + 1);
            Swift::Int v223 = v328;
            swift_bridgeObjectRetain();
            uint64_t v205 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v223, v224, MEMORY[0x1E4FBC870]);
            unint64_t v226 = v225;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v205 = (uint64_t)v221;
            unint64_t v226 = v222;
            swift_bridgeObjectRelease_n();
          }
          unint64_t v194 = v311;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v205 = 0;
          unint64_t v226 = 0xE000000000000000;
        }
        goto LABEL_212;
      }
LABEL_208:
      unint64_t v226 = 0;
LABEL_212:
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
      uint64_t v227 = (void *)v324;
      unint64_t v174 = *(void *)(v324 + 16);
      unint64_t v228 = *(void *)(v324 + 24);
      if (v174 >= v228 >> 1)
      {
        uint64_t v227 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v228 > 1), v174 + 1, 1, (void *)v324);
        *(void *)&long long v324 = v227;
      }
      v227[2] = v174 + 1;
      uint64_t v229 = &v227[4 * v174];
      v229[4] = v194;
      v229[5] = v24;
      v229[6] = v205;
      v229[7] = v226;
      unint64_t v230 = v191;
      uint64_t v189 = (uint64_t)v318;
      unint64_t v196 = v319;
      unint64_t v27 = v315;
      uint64_t v195 = v320;
      if (v26 == v318)
      {
        unint64_t v230 = _StringGuts._slowEnsureMatchingEncoding(_:)(v191, v320, v315);
        uint64_t v189 = (uint64_t)v318;
        unint64_t v196 = v319;
        uint64_t v195 = v320;
        if ((v27 & 0x1000000000000000) == 0)
        {
LABEL_216:
          unint64_t v190 = 0;
          unint64_t v192 = (v230 & 0xFFFFFFFFFFFF0000) + 65540;
          unint64_t v174 = 1;
          goto LABEL_174;
        }
      }
      else if ((v315 & 0x1000000000000000) == 0)
      {
        goto LABEL_216;
      }
      if (v196 <= v230 >> 16) {
        goto LABEL_295;
      }
      uint64_t v231 = String.UTF8View._foreignIndex(after:)();
      uint64_t v189 = (uint64_t)v318;
      unint64_t v196 = v319;
      uint64_t v195 = v320;
      unint64_t v192 = v231;
      unint64_t v190 = 0;
      unint64_t v174 = 1;
LABEL_174:
      if (v26 == (char *)v189)
      {
        uint64_t v210 = _StringGuts._slowEnsureMatchingEncoding(_:)(v191, v195, v27);
        uint64_t v189 = (uint64_t)v318;
        unint64_t v196 = v319;
        unint64_t v191 = v210;
        uint64_t v26 = v316;
        if ((v27 & 0x1000000000000000) == 0)
        {
LABEL_156:
          unint64_t v191 = (v191 & 0xFFFFFFFFFFFF0000) + 65540;
          goto LABEL_157;
        }
      }
      else
      {
        uint64_t v26 = v316;
        if ((v27 & 0x1000000000000000) == 0) {
          goto LABEL_156;
        }
      }
      if (v196 <= v191 >> 16) {
        goto LABEL_291;
      }
      uint64_t v200 = String.UTF8View._foreignIndex(after:)();
      uint64_t v189 = (uint64_t)v318;
      unint64_t v191 = v200;
LABEL_157:
      unint64_t v24 = v191 >> 14;
    }
    while (v191 >> 14 != v317);
    if (v174)
    {
      if (v317 >= v192 >> 14)
      {
        uint64_t v232 = String.subscript.getter();
        unint64_t v192 = MEMORY[0x185301F50](v232);
        unint64_t v194 = v233;
        uint64_t v234 = swift_bridgeObjectRelease();
        uint64_t v235 = 0;
        unint64_t v236 = 0;
        goto LABEL_234;
      }
      __break(1u);
LABEL_299:
      __break(1u);
      goto LABEL_300;
    }
    if (v190 >> 14 < v192 >> 14) {
      goto LABEL_299;
    }
    uint64_t v239 = String.subscript.getter();
    unint64_t v24 = v240;
    unint64_t v192 = MEMORY[0x185301F50](v239);
    unint64_t v194 = v241;
    uint64_t result = swift_bridgeObjectRelease();
    if ((char *)(v190 & 0xC) == v318)
    {
LABEL_300:
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v190, v320, v27);
      unint64_t v190 = result;
      if ((v27 & 0x1000000000000000) != 0) {
        goto LABEL_301;
      }
LABEL_231:
      unint64_t v242 = (v190 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_232:
      if (v317 < v242 >> 14)
      {
        __break(1u);
LABEL_304:
        long long v141 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
LABEL_105:
        *(void *)&long long v328 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v328 + 1) = 0;
        uint64_t v121 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v141, v142, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v328, 0, v141, v142);
        unint64_t v123 = v143;
LABEL_111:
        swift_bridgeObjectRelease_n();
        continue;
      }
      uint64_t v243 = String.subscript.getter();
      uint64_t v235 = MEMORY[0x185301F50](v243);
      unint64_t v236 = v244;
      uint64_t v234 = swift_bridgeObjectRelease();
LABEL_234:
      uint64_t v245 = HIBYTE(v194) & 0xF;
      if ((v194 & 0x2000000000000000) == 0) {
        uint64_t v245 = v192 & 0xFFFFFFFFFFFFLL;
      }
      if (!v245)
      {
        uint64_t v253 = swift_bridgeObjectRelease();
        goto LABEL_242;
      }
      *(void *)&long long v328 = v192;
      *((void *)&v328 + 1) = v194;
      MEMORY[0x1F4188790](v234);
      *(&v303 - 2) = (uint64_t)&v328;
      *(&v303 - 1) = MEMORY[0x1E4FBC870];
      swift_bridgeObjectRetain();
      char v246 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v303 - 4), v192, v194);
      if (v247 == 1)
      {
        unint64_t v249 = *((void *)&v328 + 1);
        Swift::Int v248 = v328;
        swift_bridgeObjectRetain();
        long long v250 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v248, v249, MEMORY[0x1E4FBC870]);
        unint64_t v252 = v251;
        swift_bridgeObjectRelease();
      }
      else
      {
        long long v250 = (void (*)(char *, void))v246;
        unint64_t v252 = v247;
      }
      swift_bridgeObjectRelease();
      uint64_t v253 = swift_bridgeObjectRelease();
      if (!v252)
      {
LABEL_242:
        long long v250 = 0;
        unint64_t v252 = 0xE000000000000000;
      }
      if (v236)
      {
        uint64_t v254 = HIBYTE(v236) & 0xF;
        if ((v236 & 0x2000000000000000) == 0) {
          uint64_t v254 = v235 & 0xFFFFFFFFFFFFLL;
        }
        if (v254)
        {
          *(void *)&long long v328 = v235;
          *((void *)&v328 + 1) = v236;
          MEMORY[0x1F4188790](v253);
          *(&v303 - 2) = (uint64_t)&v328;
          *(&v303 - 1) = MEMORY[0x1E4FBC870];
          swift_bridgeObjectRetain();
          long long v255 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v303 - 4), v235, v236);
          if (v256 == 1)
          {
            unint64_t v258 = *((void *)&v328 + 1);
            Swift::Int v257 = v328;
            swift_bridgeObjectRetain();
            uint64_t v235 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v257, v258, MEMORY[0x1E4FBC870]);
            unint64_t v260 = v259;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v235 = (uint64_t)v255;
            unint64_t v260 = v256;
            swift_bridgeObjectRelease_n();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v235 = 0;
          unint64_t v260 = 0xE000000000000000;
        }
      }
      else
      {
        unint64_t v260 = 0;
      }
      uint64_t v264 = (void *)v324;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v264 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v264[2] + 1, 1, v264);
        *(void *)&long long v324 = v264;
      }
      unint64_t v266 = v264[2];
      unint64_t v265 = v264[3];
      if (v266 >= v265 >> 1)
      {
        uint64_t v264 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v265 > 1), v266 + 1, 1, v264);
        *(void *)&long long v324 = v264;
      }
      v264[2] = v266 + 1;
      uint64_t v267 = &v264[4 * v266];
      v267[4] = v250;
      v267[5] = v252;
      v267[6] = v235;
      v267[7] = v260;
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v346);
      uint64_t v238 = v324;
      unint64_t v24 = v304;
      unint64_t v27 = v305;
      uint64_t v175 = v310;
      unint64_t v237 = v312;
LABEL_259:
      *((void *)&v325[0] + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URLQueryItem]);
      *(void *)&long long v324 = v238;
      long long v328 = xmmword_182107E30;
      outlined init with take of Any(&v324, &v329);
      unint64_t v269 = *(void *)(v27 + 16);
      unint64_t v268 = *(void *)(v27 + 24);
      if (v269 >= v268 >> 1) {
        unint64_t v27 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v268 > 1), v269 + 1, 1, (void *)v27);
      }
      *(void *)(v27 + 16) = v269 + 1;
      unint64_t v270 = (_OWORD *)(v27 + 48 * v269);
      long long v271 = v328;
      long long v272 = v330;
      v270[3] = v329;
      v270[4] = v272;
      v270[2] = v271;
LABEL_262:
      unint64_t v273 = *(void *)&v354[16];
      if (*(void *)&v354[16])
      {
        uint64_t v274 = *(void *)&v354[8];
        uint64_t v275 = outlined retain of URLComponents((uint64_t)&v346);
        unint64_t v276 = v273;
      }
      else
      {
        if v347 != 1 || !v309 || (*(unsigned char *)(v309 + 216)) {
          goto LABEL_279;
        }
        outlined retain of URLComponents((uint64_t)&v346);
        uint64_t v285 = String.subscript.getter();
        uint64_t v274 = MEMORY[0x185301F50](v285);
        unint64_t v276 = v286;
        unint64_t v237 = v312;
        uint64_t v275 = swift_bridgeObjectRelease();
      }
      uint64_t v277 = HIBYTE(v276) & 0xF;
      if ((v276 & 0x2000000000000000) == 0) {
        uint64_t v277 = v274 & 0xFFFFFFFFFFFFLL;
      }
      if (!v277)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        outlined release of URLComponents((uint64_t)&v346);
        long long v282 = 0;
        unint64_t v284 = 0xE000000000000000;
        uint64_t v175 = v310;
LABEL_276:
        *((void *)&v325[0] + 1) = MEMORY[0x1E4FBB1A0];
        *(void *)&long long v324 = v282;
        *((void *)&v324 + 1) = v284;
        long long v328 = xmmword_182107E40;
        outlined init with take of Any(&v324, &v329);
        unint64_t v288 = *(void *)(v27 + 16);
        unint64_t v287 = *(void *)(v27 + 24);
        if (v288 >= v287 >> 1) {
          unint64_t v27 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v287 > 1), v288 + 1, 1, (void *)v27);
        }
        *(void *)(v27 + 16) = v288 + 1;
        long long v289 = (_OWORD *)(v27 + 48 * v288);
        long long v290 = v328;
        long long v291 = v330;
        v289[3] = v329;
        v289[4] = v291;
        v289[2] = v290;
        goto LABEL_279;
      }
      *(void *)&long long v328 = v274;
      *((void *)&v328 + 1) = v276;
      MEMORY[0x1F4188790](v275);
      *(&v303 - 2) = (uint64_t)&v328;
      *(&v303 - 1) = MEMORY[0x1E4FBC870];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v278 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v303 - 4), v274, v276);
      if (v279 == 1)
      {
        unint64_t v281 = *((void *)&v328 + 1);
        Swift::Int v280 = v328;
        swift_bridgeObjectRetain();
        long long v282 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v280, v281, MEMORY[0x1E4FBC870]);
        unint64_t v284 = v283;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        long long v282 = (void (*)(char *, void))v278;
        unint64_t v284 = v279;
        swift_bridgeObjectRelease_n();
      }
      uint64_t v175 = v310;
      unint64_t v237 = v312;
      outlined release of URLComponents((uint64_t)&v346);
      if (v284) {
        goto LABEL_276;
      }
LABEL_279:
      long long v334 = v352;
      long long v335 = v353;
      v336[0] = *(_OWORD *)v354;
      *(_OWORD *)((char *)v336 + 10) = *(_OWORD *)&v354[10];
      long long v330 = v348;
      long long v331 = v349;
      long long v332 = v350;
      long long v333 = v351;
      long long v328 = v346;
      long long v329 = v347;
      *(void *)&long long v324 = v27;
      uint64_t v292 = *MEMORY[0x1E4FBC410];
      uint64_t v293 = type metadata accessor for Mirror.DisplayStyle();
      uint64_t v294 = *(void *)(v293 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v294 + 104))(v26, v292, v293);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v294 + 56))(v26, 0, 1, v293);
      (*(void (**)(unint64_t, void, uint64_t))(v307 + 104))(v24, *MEMORY[0x1E4FBC430], v175);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
      lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A], &demangling cache variable for type metadata for [(label: String?, value: Any)]);
      uint64_t v295 = v306;
      Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
      uint64_t v296 = Mirror.children.getter();
      (*(void (**)(char *, uint64_t))(v237 + 8))(v295, v308);
      uint64_t v326 = 0;
      unint64_t v327 = 0xE000000000000000;
      swift_retain();
      dispatch thunk of _AnySequenceBox._makeIterator()();
      swift_release();
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (*((void *)&v330 + 1))
      {
        uint64_t v320 = v296;
        do
        {
          long long v324 = v328;
          v325[0] = v329;
          v325[1] = v330;
          v323._unint64_t countAndFlagsBits = 0;
          v323._unint64_t object = (void *)0xE000000000000000;
          uint64_t v297 = (void *)*((void *)&v328 + 1);
          uint64_t v298 = v328;
          long long v321 = v328;
          outlined init with copy of Any((uint64_t)v325, (uint64_t)v322);
          if (v297)
          {
            uint64_t v299 = v297;
          }
          else
          {
            uint64_t v298 = 0;
            uint64_t v299 = (void *)0xE000000000000000;
          }
          swift_bridgeObjectRetain();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v322);
          v300._unint64_t countAndFlagsBits = v298;
          v300._unint64_t object = v299;
          String.append(_:)(v300);
          swift_bridgeObjectRelease();
          v301._unint64_t countAndFlagsBits = 8250;
          v301._unint64_t object = (void *)0xE200000000000000;
          String.append(_:)(v301);
          _print_unlocked<A, B>(_:_:)();
          v302._unint64_t countAndFlagsBits = 32;
          v302._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v302);
          String.append(_:)(v323);
          swift_bridgeObjectRelease();
          outlined destroy of (label: String?, value: Any)((uint64_t)&v324);
          dispatch thunk of _AnyIteratorBoxBase.next()();
        }
        while (*((void *)&v330 + 1));
        id v34 = v326;
      }
      else
      {
        id v34 = 0;
      }
      swift_release();
      swift_release();
      goto LABEL_288;
    }
    break;
  }
  if ((v27 & 0x1000000000000000) == 0) {
    goto LABEL_231;
  }
LABEL_301:
  if (v319 > v190 >> 16)
  {
    unint64_t v27 = v315;
    unint64_t v242 = String.UTF8View._foreignIndex(after:)();
    uint64_t v26 = v316;
    goto LABEL_232;
  }
LABEL_309:
  __break(1u);
  return result;
}

uint64_t static URLComponents._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSURLComponents);
}

uint64_t static URLComponents._conditionallyBridgeFromObjectiveC(_:result:)(unint64_t a1, uint64_t a2)
{
  outlined init with take of LocalePreferences?(a2, (uint64_t)v282, &demangling cache variable for type metadata for URLComponents?);
  outlined release of URLComponents?(v282);
  type metadata accessor for _NSSwiftURLComponents();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftURLComponents_lock);
    uint64_t v6 = (_OWORD *)(v5 + 16);
    uint64_t v7 = (os_unfair_lock_s *)(v5 + 172);
    id v8 = (id)a1;
    os_unfair_lock_lock(v7);
    closure #1 in _NSSwiftURLComponents.components.getter(v6, &v278);
    os_unfair_lock_unlock(v7);

    long long v265 = *(_OWORD *)v281;
    long long v266 = *(_OWORD *)&v281[16];
    v267[0] = *(_OWORD *)&v281[32];
    *(_OWORD *)((char *)v267 + 10) = *(_OWORD *)&v281[42];
    long long v261 = *(_OWORD *)v280;
    long long v262 = *(_OWORD *)&v280[16];
    long long v263 = *(_OWORD *)&v280[32];
    long long v264 = *(_OWORD *)&v280[48];
    long long v259 = v278;
    long long v260 = v279;
    destructiveProjectEnumData for PredicateCodableError(&v259, v9);
    uint64_t v10 = a2;
LABEL_133:
    outlined init with take of LocalePreferences?((uint64_t)&v259, v10, &demangling cache variable for type metadata for URLComponents?);
    return 1;
  }
  LOBYTE(v278) = 1;
  char v275 = 0;
  __int16 v274 = 0;
  __int16 v273 = 0;
  __int16 v272 = 0;
  BOOL v271 = 1;
  char v270 = 0;
  unsigned __int8 v269 = 0;
  id v11 = objc_msgSend((id)a1, sel_scheme);
  if (!v11)
  {
    unint64_t v13 = 0;
    unint64_t v15 = 0;
    char v277 = 0;
    char v276 = 0;
    goto LABEL_13;
  }
  long long v12 = v11;
  unint64_t v13 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  unint64_t v15 = v14;

  char v277 = 0;
  char v276 = 0;
  __int16 v16 = specialized Collection.first.getter(v13, v15);
  if ((v16 & 0x100) != 0 || v16 < 0x41u) {
    goto LABEL_43;
  }
  if ((v15 & 0x1000000000000000) == 0)
  {
    if ((v15 & 0x2000000000000000) != 0)
    {
      uint64_t v18 = HIBYTE(v15) & 0xF;
      *(void *)&long long v278 = v13;
      *((void *)&v278 + 1) = v15 & 0xFFFFFFFFFFFFFFLL;
      long long v17 = (char *)&v278;
    }
    else if ((v13 & 0x1000000000000000) != 0)
    {
      long long v17 = (char *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v18 = v13 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      long long v17 = (char *)_StringObject.sharedUTF8.getter();
    }
    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v17, v18, 1u, 0)) {
      goto LABEL_13;
    }
LABEL_43:
    lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
    swift_allocError();
    *uint64_t v61 = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
    int v245 = 0;
    uint64_t v244 = 714;
    goto LABEL_283;
  }
  *(void *)&long long v278 = v13;
  *((void *)&v278 + 1) = v15;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  StringProtocol._ephemeralString.getter();
  uint64_t v52 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  Swift::String v53 = (unsigned __int16 *)objc_msgSend(v52, sel__fastCharacterContents);
  Swift::String v54 = v52;
  id v55 = v53;
  id v56 = v54;
  if (v55)
  {
    *(void *)&long long v278 = v13;
    *((void *)&v278 + 1) = v15;
    StringProtocol._ephemeralString.getter();
    id v57 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v58 = objc_msgSend(v57, sel_length);
    swift_unknownObjectRelease();
    char v59 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v55, (uint64_t)v58, 1u, 0);
  }
  else
  {
    char v59 = specialized Sequence.allSatisfy(_:)(v13, v15, 1);
  }
  char v60 = v59;
  swift_bridgeObjectRelease();
  if ((v60 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_13:
  unint64_t v256 = v13;
  uint64_t v253 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BOOL v268 = v271;
  *(void *)&long long v278 = 0;
  BYTE8(v278) = v277;
  BYTE9(v278) = v276;
  BYTE10(v278) = v275;
  BYTE11(v278) = HIBYTE(v274);
  BYTE12(v278) = v274;
  BYTE13(v278) = HIBYTE(v273);
  BYTE14(v278) = v273;
  HIBYTE(v278) = HIBYTE(v272);
  LOBYTE(v279) = v272;
  *((void *)&v279 + 1) = v13;
  *(void *)Swift::Int v280 = v15;
  memset(&v280[8], 0, 56);
  v281[0] = v271;
  memset(&v281[8], 0, 48);
  v281[56] = v270;
  v281[57] = v269;
  URLComponents._URLComponents.encodedHost.getter();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  unint64_t v255 = v15;
  if (!v20)
  {
LABEL_66:
    swift_bridgeObjectRelease();
    unint64_t v29 = 0;
    goto LABEL_67;
  }
  uint64_t v21 = URLComponents._URLComponents.encodedHost.getter();
  if (!v22)
  {
    char v277 = 0;
    LOBYTE(v274) = 0;
    char v270 = 0;
    unsigned __int8 v269 = 0;
LABEL_65:
    swift_bridgeObjectRelease();
    goto LABEL_66;
  }
  unint64_t v23 = v21;
  unint64_t v24 = v22;
  uint64_t v25 = HIBYTE(v22) & 0xF;
  uint64_t v26 = v21 & 0xFFFFFFFFFFFFLL;
  if ((v22 & 0x2000000000000000) != 0) {
    uint64_t v27 = HIBYTE(v22) & 0xF;
  }
  else {
    uint64_t v27 = v21 & 0xFFFFFFFFFFFFLL;
  }
  if (!v27)
  {
    swift_bridgeObjectRelease();
    unint64_t v28 = 0;
    char v277 = 0;
    LOBYTE(v274) = 0;
    char v270 = 0;
    unint64_t v29 = 0xE000000000000000;
    unsigned __int8 v269 = 0;
    goto LABEL_50;
  }
  if ((v22 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    goto LABEL_30;
  }
  if ((v22 & 0x2000000000000000) != 0)
  {
    *(void *)&long long v259 = v21;
    *((void *)&v259 + 1) = v22 & 0xFFFFFFFFFFFFFFLL;
    Swift::Int v257 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v258 = 0;
    swift_bridgeObjectRetain_n();
    long long v32 = &v259;
    long long v31 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v257;
    id v34 = (unsigned __int8 *)&v259;
    uint64_t v33 = v25;
    uint64_t v35 = v25;
  }
  else
  {
    if ((v21 & 0x1000000000000000) != 0)
    {
      uint64_t v30 = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else
    {
      uint64_t v30 = _StringObject.sharedUTF8.getter();
      uint64_t v26 = v62;
    }
    *(void *)&long long v259 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((void *)&v259 + 1) = 0;
    swift_bridgeObjectRetain_n();
    long long v31 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v259;
    long long v32 = (long long *)v30;
    uint64_t v33 = v26;
    id v34 = (unsigned __int8 *)v30;
    uint64_t v35 = v26;
  }
  unint64_t v28 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v32, v33, v31, 0, v34, v35);
  unint64_t v29 = v36;
  swift_bridgeObjectRelease();
  if (v29 == 1)
  {
LABEL_30:
    *(void *)&long long v259 = v23;
    *((void *)&v259 + 1) = v24;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    uint64_t v37 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v38 = objc_msgSend(v37, sel__fastCharacterContents);
    id v39 = v37;
    if (v38)
    {
      *(void *)&long long v259 = v23;
      *((void *)&v259 + 1) = v24;
      StringProtocol._ephemeralString.getter();
      id v40 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v41 = objc_msgSend(v40, sel_length);
      uint64_t v42 = swift_unknownObjectRelease();
      unint64_t v23 = (unint64_t)&v246;
      MEMORY[0x1F4188790](v42);
      LOBYTE(v244) = 0;
      MEMORY[0x1F4188790](v43);
      id v241 = v38;
      id v242 = v41;
      unint64_t v28 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v38, (uint64_t)v41, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v44, (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v240);
      unint64_t v29 = v45;
      swift_bridgeObjectRelease_n();
      goto LABEL_49;
    }
    *(void *)&long long v259 = v23;
    *((void *)&v259 + 1) = v24;
    swift_bridgeObjectRetain();
    unint64_t v23 = String.init<A>(_:)();
    unint64_t v47 = v46;
    if ((v46 & 0x1000000000000000) != 0)
    {
      unint64_t v23 = static String._copying(_:)();
      unint64_t v64 = v63;
      swift_bridgeObjectRelease();
      unint64_t v47 = v64;
      if ((v64 & 0x2000000000000000) == 0) {
        goto LABEL_35;
      }
    }
    else if ((v46 & 0x2000000000000000) == 0)
    {
LABEL_35:
      if ((v23 & 0x1000000000000000) == 0) {
        goto LABEL_266;
      }
      uint64_t v48 = (unsigned __int8 *)((v47 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v49 = v23 & 0xFFFFFFFFFFFFLL;
      goto LABEL_37;
    }
    uint64_t v49 = HIBYTE(v47) & 0xF;
    *(void *)&long long v259 = v23;
    *((void *)&v259 + 1) = v47 & 0xFFFFFFFFFFFFFFLL;
    Swift::Int v257 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v258 = 0;
    uint64_t v48 = (unsigned __int8 *)&v259;
    uint64_t v50 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v257;
    uint64_t v51 = (unsigned __int8 *)&v259;
    goto LABEL_48;
  }
  swift_bridgeObjectRelease_n();
  while (1)
  {
LABEL_49:
    char v277 = 0;
    LOBYTE(v274) = 0;
    char v270 = 0;
    unsigned __int8 v269 = 0;
    if (!v29) {
      goto LABEL_65;
    }
LABEL_50:
    unint64_t v66 = specialized Collection.first.getter(v28, v29);
    if ((v66 & 0x1FF) != 0x5B) {
      goto LABEL_144;
    }
    if ((v29 & 0x1000000000000000) != 0)
    {
      Swift::Int v129 = String.UTF8View._foreignCount()();
      if (__OFSUB__(v129, 1)) {
        goto LABEL_278;
      }
      uint64_t v68 = (v28 >> 59) & 1;
      unint64_t v66 = MEMORY[0x185302230](15, v129 - 1, v28, v29);
    }
    else
    {
      uint64_t v67 = HIBYTE(v29) & 0xF;
      if ((v29 & 0x2000000000000000) == 0) {
        uint64_t v67 = v28 & 0xFFFFFFFFFFFFLL;
      }
      if (!v67)
      {
        __break(1u);
LABEL_250:
        unint64_t v66 = _StringGuts._slowEnsureMatchingEncoding(_:)(v66, v28, v29);
        goto LABEL_57;
      }
      unint64_t v66 = (v67 << 16) - 65532;
      LOBYTE(v68) = 1;
    }
    if ((v66 & 0xC) == 4 << v68) {
      goto LABEL_250;
    }
LABEL_57:
    unint64_t v69 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000) == 0) {
      unint64_t v69 = v28 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v70 = v66 >> 16;
    if (v66 >> 16 >= v69)
    {
      __break(1u);
      goto LABEL_252;
    }
    if ((v29 & 0x1000000000000000) != 0)
    {
      char v72 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v29 & 0x2000000000000000) != 0)
    {
      *(void *)&long long v259 = v28;
      *((void *)&v259 + 1) = v29 & 0xFFFFFFFFFFFFFFLL;
      char v72 = *((unsigned char *)&v259 + v70);
    }
    else
    {
      if ((v28 & 0x1000000000000000) != 0) {
        uint64_t v71 = (v29 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v71 = _StringObject.sharedUTF8.getter();
      }
      char v72 = *(unsigned char *)(v71 + v70);
    }
    if (v72 == 93)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v117 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v28, v29);
      swift_bridgeObjectRelease_n();
      if (v117) {
        goto LABEL_150;
      }
      goto LABEL_138;
    }
LABEL_144:
    if ((v29 & 0x1000000000000000) == 0)
    {
      if ((v29 & 0x2000000000000000) != 0)
      {
        uint64_t v123 = HIBYTE(v29) & 0xF;
        *(void *)&long long v259 = v28;
        *((void *)&v259 + 1) = v29 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v122 = (char *)&v259;
        goto LABEL_149;
      }
      if ((v28 & 0x1000000000000000) != 0)
      {
        unint64_t v122 = (char *)((v29 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v123 = v28 & 0xFFFFFFFFFFFFLL;
        goto LABEL_149;
      }
LABEL_252:
      unint64_t v122 = (char *)_StringObject.sharedUTF8.getter();
LABEL_149:
      BOOL v124 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v122, v123, 4u, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v124) {
        goto LABEL_150;
      }
      goto LABEL_138;
    }
    *(void *)&long long v259 = v28;
    *((void *)&v259 + 1) = v29;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    unint64_t v224 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    unint64_t v23 = (unint64_t)objc_msgSend(v224, sel__fastCharacterContents);
    id v225 = v224;
    if (v23)
    {
      *(void *)&long long v259 = v28;
      *((void *)&v259 + 1) = v29;
      StringProtocol._ephemeralString.getter();
      unint64_t v226 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v227 = objc_msgSend(v226, sel_length);
      swift_unknownObjectRelease();
      char v228 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)((unsigned __int16 *)v23, (uint64_t)v227, 4u, 1);
    }
    else
    {
      char v228 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v28, v29, 4u, 1);
    }
    char v230 = v228;
    swift_bridgeObjectRelease_n();
    if (v230)
    {
LABEL_150:
      swift_bridgeObjectRetain();
      uint64_t v125 = swift_bridgeObjectRelease();
      LOBYTE(v259) = 37;
      MEMORY[0x1F4188790](v125);
      uint64_t v244 = (uint64_t)&v259;
      char v126 = specialized Sequence.contains(where:)((uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t)v243, v28, v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v270 = v126 & 1;
      goto LABEL_67;
    }
LABEL_138:
    char v118 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v28, v29);
    if (!v15) {
      break;
    }
    if ((v118 & 1) == 0)
    {
      uint64_t v119 = one-time initialization token for schemesToPercentEncodeHost;
      swift_bridgeObjectRetain_n();
      if (v119 != -1) {
        swift_once();
      }
      uint64_t v120 = static RFC3986Parser.schemesToPercentEncodeHost;
      Swift::String v121 = String.lowercased()();
      LOBYTE(v120) = specialized Set.contains(_:)(v121._countAndFlagsBits, (uint64_t)v121._object, v120);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if ((v120 & 1) == 0) {
        goto LABEL_173;
      }
    }
LABEL_152:
    if ((v29 & 0x2000000000000000) != 0) {
      unint64_t v127 = HIBYTE(v29) & 0xF;
    }
    else {
      unint64_t v127 = v28 & 0xFFFFFFFFFFFFLL;
    }
    if (!v127)
    {
      swift_bridgeObjectRelease();
      unint64_t v29 = 0xE000000000000000;
      goto LABEL_215;
    }
    Swift::Int v128 = specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(v28, v29);
    if ((v128 & 1) == 0)
    {
      *(void *)&long long v259 = v28;
      *((void *)&v259 + 1) = v29;
      MEMORY[0x1F4188790](v128);
      uint64_t v244 = (uint64_t)&v259;
      LOBYTE(v245) = 4;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v243, v28, v29);
      if (!v135)
      {
        unint64_t v158 = *((void *)&v259 + 1);
        unint64_t v157 = v259;
        swift_bridgeObjectRetain();
        specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v157, v158, 4u);
        unint64_t v136 = v159;
        swift_bridgeObjectRelease_n();
        goto LABEL_199;
      }
      unint64_t v136 = v135;
      goto LABEL_213;
    }
    Swift::Int v129 = specialized Collection.first.getter(v28, v29);
    if ((v129 & 0x100) != 0) {
      goto LABEL_279;
    }
    if (v129 == 91)
    {
      if ((v29 & 0x1000000000000000) == 0)
      {
        unint64_t v130 = (v127 << 16) - 65532;
        LOBYTE(v131) = 1;
        goto LABEL_161;
      }
    }
    else
    {
      __break(1u);
    }
    Swift::Int v129 = String.UTF8View._foreignCount()();
    if (__OFSUB__(v129, 1)) {
      goto LABEL_280;
    }
    uint64_t v131 = (v28 >> 59) & 1;
    unint64_t v130 = MEMORY[0x185302230](15, v129 - 1, v28, v29);
LABEL_161:
    if ((v130 & 0xC) == 4 << v131) {
      unint64_t v130 = _StringGuts._slowEnsureMatchingEncoding(_:)(v130, v28, v29);
    }
    unint64_t v132 = v130 >> 16;
    if (v130 >> 16 >= v127)
    {
      __break(1u);
LABEL_263:
      __break(1u);
LABEL_264:
      uint64_t v139 = _StringObject.sharedUTF8.getter();
      uint64_t v137 = v231;
      goto LABEL_181;
    }
    if ((v29 & 0x1000000000000000) != 0)
    {
      char v134 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v29 & 0x2000000000000000) != 0)
    {
      *(void *)&long long v259 = v28;
      *((void *)&v259 + 1) = v29 & 0xFFFFFFFFFFFFFFLL;
      char v134 = *((unsigned char *)&v259 + v132);
    }
    else
    {
      if ((v28 & 0x1000000000000000) != 0) {
        uint64_t v133 = (v29 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v133 = _StringObject.sharedUTF8.getter();
      }
      char v134 = *(unsigned char *)(v133 + v132);
    }
    if (v134 != 93) {
      goto LABEL_263;
    }
    unint64_t v160 = specialized Collection<>.firstIndex(of:)(0x25u, v28, v29);
    if (v161)
    {
      swift_bridgeObjectRetain();
      if ((specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v28, v29) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        unint64_t v29 = 0;
        unsigned __int8 v269 = 1;
        goto LABEL_67;
      }
      *(void *)&long long v259 = v28;
      *((void *)&v259 + 1) = v29;
      String.init<A>(_:)();
      unint64_t v136 = v164;
LABEL_199:
      swift_bridgeObjectRelease();
LABEL_214:
      unint64_t v29 = v136;
LABEL_215:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v270 = 1;
      goto LABEL_67;
    }
    unint64_t v162 = v160;
    if ((v29 & 0x1000000000000000) != 0)
    {
      Swift::Int v165 = String.UTF8View._foreignCount()();
      if (__OFSUB__(v165, 1))
      {
        __break(1u);
        goto LABEL_269;
      }
      unint64_t v163 = MEMORY[0x185302230](15, v165 - 1, v28, v29);
    }
    else
    {
      unint64_t v163 = (v127 << 16) - 65532;
    }
    if (v163 >> 14 >= v162 >> 14)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v166 = String.subscript.getter();
      unint64_t v168 = v167;
      *(void *)&long long v259 = v166;
      *((void *)&v259 + 1) = v169;
      *(void *)&long long v260 = v170;
      *((void *)&v260 + 1) = v167;
      MEMORY[0x1F4188790](v166);
      uint64_t v244 = (uint64_t)&v259;
      LOBYTE(v245) = 8;
      unint64_t v174 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((void *(*)(void *__return_ptr, void, void))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)v243, v172, v173, v171, v168);
      if (v175)
      {
        uint64_t v176 = (uint64_t)v174;
        unint64_t v177 = v175;
      }
      else
      {
        unint64_t v187 = *((void *)&v259 + 1);
        unint64_t v186 = v259;
        unint64_t v189 = *((void *)&v260 + 1);
        unint64_t v188 = v260;
        swift_bridgeObjectRetain();
        uint64_t v176 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v186, v187, v188, v189, 8u);
        unint64_t v177 = v190;
        unint64_t v15 = v255;
        swift_bridgeObjectRelease();
      }
      uint64_t v191 = String.subscript.getter();
      uint64_t v192 = MEMORY[0x185301F50](v191);
      uint64_t v194 = v193;
      swift_bridgeObjectRelease();
      *(void *)&long long v259 = v192;
      *((void *)&v259 + 1) = v194;
      v195._unint64_t countAndFlagsBits = v176;
      v195._unint64_t object = v177;
      String.append(_:)(v195);
      swift_bridgeObjectRelease();
      v196._unint64_t countAndFlagsBits = 93;
      v196._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v196);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      unint64_t v136 = *((void *)&v259 + 1);
LABEL_213:
      swift_bridgeObjectRelease_n();
      goto LABEL_214;
    }
    __break(1u);
LABEL_266:
    uint64_t v48 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
LABEL_37:
    *(void *)&long long v259 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    *((void *)&v259 + 1) = 0;
    uint64_t v50 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v259;
    uint64_t v51 = v48;
LABEL_48:
    unint64_t v28 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v48, v49, v50, 0, v51, v49);
    unint64_t v29 = v65;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  if (v118) {
    goto LABEL_152;
  }
  swift_bridgeObjectRetain();
LABEL_173:
  uint64_t v137 = v28 & 0xFFFFFFFFFFFFLL;
  if ((v29 & 0x2000000000000000) != 0) {
    uint64_t v138 = HIBYTE(v29) & 0xF;
  }
  else {
    uint64_t v138 = v28 & 0xFFFFFFFFFFFFLL;
  }
  if (!v138)
  {
    unint64_t v145 = 0;
    unint64_t v146 = 0xE000000000000000;
    goto LABEL_272;
  }
  if ((v29 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n();
  }
  else
  {
    if ((v29 & 0x2000000000000000) != 0)
    {
      *(void *)&long long v259 = v28;
      *((void *)&v259 + 1) = v29 & 0xFFFFFFFFFFFFFFLL;
      Swift::Int v257 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      uint64_t v258 = 0;
      swift_bridgeObjectRetain_n();
      long long v141 = &v259;
      unint64_t v140 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v257;
      unint64_t v143 = (unsigned __int8 *)&v259;
      uint64_t v142 = HIBYTE(v29) & 0xF;
      uint64_t v144 = v142;
    }
    else
    {
      if ((v28 & 0x1000000000000000) == 0) {
        goto LABEL_264;
      }
      uint64_t v139 = (v29 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_181:
      *(void *)&long long v259 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
      *((void *)&v259 + 1) = 0;
      swift_bridgeObjectRetain_n();
      unint64_t v140 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v259;
      long long v141 = (long long *)v139;
      uint64_t v142 = v137;
      unint64_t v143 = (unsigned __int8 *)v139;
      uint64_t v144 = v137;
    }
    unint64_t v145 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v141, v142, v140, 1, v143, v144);
    unint64_t v146 = v147;
    swift_bridgeObjectRelease();
    if (v146 != 1)
    {
      swift_bridgeObjectRelease_n();
      if (!v146) {
        goto LABEL_275;
      }
      goto LABEL_272;
    }
  }
  *(void *)&long long v259 = v28;
  *((void *)&v259 + 1) = v29;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  unint64_t v148 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v149 = objc_msgSend(v148, sel__fastCharacterContents);
  id v150 = v148;
  if (v149)
  {
    *(void *)&long long v259 = v28;
    *((void *)&v259 + 1) = v29;
    StringProtocol._ephemeralString.getter();
    long long v151 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v152 = objc_msgSend(v151, sel_length);
    uint64_t v153 = swift_unknownObjectRelease();
    MEMORY[0x1F4188790](v153);
    LOBYTE(v244) = 1;
    MEMORY[0x1F4188790](v154);
    id v241 = v149;
    id v242 = v152;
    unint64_t v145 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v149, (uint64_t)v152, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToASCII(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v155, (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)v240);
    unint64_t v146 = v156;
    swift_bridgeObjectRelease_n();
    if (!v146) {
      goto LABEL_275;
    }
    goto LABEL_272;
  }
  *(void *)&long long v259 = v28;
  *((void *)&v259 + 1) = v29;
  swift_bridgeObjectRetain();
  uint64_t v179 = String.init<A>(_:)();
  unint64_t v180 = v178;
  if ((v178 & 0x1000000000000000) != 0)
  {
LABEL_269:
    uint64_t v179 = static String._copying(_:)();
    unint64_t v233 = v232;
    swift_bridgeObjectRelease();
    unint64_t v180 = v233;
    if ((v233 & 0x2000000000000000) == 0) {
      goto LABEL_208;
    }
LABEL_270:
    uint64_t v182 = HIBYTE(v180) & 0xF;
    *(void *)&long long v259 = v179;
    *((void *)&v259 + 1) = v180 & 0xFFFFFFFFFFFFFFLL;
    Swift::Int v257 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
    uint64_t v258 = 0;
    long long v181 = (unsigned __int8 *)&v259;
    uint64_t v183 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v257;
    unint64_t v184 = (unsigned __int8 *)&v259;
    uint64_t v185 = v182;
    goto LABEL_271;
  }
  if ((v178 & 0x2000000000000000) != 0) {
    goto LABEL_270;
  }
LABEL_208:
  if ((v179 & 0x1000000000000000) != 0)
  {
    long long v181 = (unsigned __int8 *)((v180 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v182 = v179 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    long long v181 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
  *(void *)&long long v259 = @nonobjc uidna_nameToASCII_UTF8(_:_:_:_:_:_:_:);
  *((void *)&v259 + 1) = 0;
  uint64_t v183 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v259;
  unint64_t v184 = v181;
  uint64_t v185 = v182;
LABEL_271:
  unint64_t v145 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v181, v182, v183, 1, v184, v185);
  unint64_t v146 = v234;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if (!v146) {
    goto LABEL_275;
  }
LABEL_272:
  swift_bridgeObjectRetain();
  BOOL v235 = specialized static RFC3986Parser.validate<A>(_:component:)(v145, v146, 3);
  swift_bridgeObjectRelease();
  if (v235)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v29 = v146;
    goto LABEL_67;
  }
  swift_bridgeObjectRelease();
LABEL_275:
  unsigned __int8 v269 = 1;
  specialized static RFC3986Parser.percentEncode<A>(_:component:)(v28, v29, 3);
  unint64_t v237 = v236;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v270 = 1;
  unint64_t v29 = v237;
LABEL_67:
  id v73 = objc_msgSend((id)a1, sel_percentEncodedUser);
  if (!v73)
  {
    unint64_t v75 = 0;
    unint64_t v77 = 0;
    char v275 = 0;
    goto LABEL_75;
  }
  unint64_t v74 = v73;
  unint64_t v75 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
  unint64_t v77 = v76;

  char v277 = 0;
  char v275 = 0;
  if ((v77 & 0x1000000000000000) != 0)
  {
    *(void *)&long long v259 = v75;
    *((void *)&v259 + 1) = v77;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    uint64_t v197 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    char v198 = (unsigned __int16 *)objc_msgSend(v197, sel__fastCharacterContents);
    id v199 = v197;
    if (v198)
    {
      *(void *)&long long v259 = v75;
      *((void *)&v259 + 1) = v77;
      StringProtocol._ephemeralString.getter();
      uint64_t v200 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v201 = objc_msgSend(v200, sel_length);
      swift_unknownObjectRelease();
      char v202 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v198, (uint64_t)v201, 2u, 1);
    }
    else
    {
      char v202 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v75, v77, 2u, 1);
    }
    char v220 = v202;
    swift_bridgeObjectRelease();
    if ((v220 & 1) == 0) {
      goto LABEL_236;
    }
LABEL_75:
    swift_bridgeObjectRelease();
    id v80 = objc_msgSend((id)a1, sel_percentEncodedPassword);
    if (!v80)
    {
      unint64_t v23 = 0;
      unint64_t v83 = 0;
      HIBYTE(v274) = 0;
      goto LABEL_83;
    }
    Swift::Int v81 = v80;
    unint64_t v23 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
    unint64_t v83 = v82;

    char v277 = 0;
    HIBYTE(v274) = 0;
    if ((v83 & 0x1000000000000000) != 0)
    {
      *(void *)&long long v259 = v23;
      *((void *)&v259 + 1) = v83;
      unint64_t v203 = lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      unint64_t v254 = v203;
      StringProtocol._ephemeralString.getter();
      unint64_t v204 = v23;
      uint64_t v205 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      unint64_t v206 = (unsigned __int16 *)objc_msgSend(v205, sel__fastCharacterContents);
      id v207 = v205;
      unint64_t v251 = v206;
      if (v206)
      {
        unint64_t v23 = v204;
        *(void *)&long long v259 = v204;
        *((void *)&v259 + 1) = v83;
        StringProtocol._ephemeralString.getter();
        unint64_t v208 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v209 = (uint64_t)objc_msgSend(v208, sel_length);
        swift_unknownObjectRelease();
        LOBYTE(v209) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v251, v209, 2u, 1);
        swift_bridgeObjectRelease();
        if (v209) {
          goto LABEL_83;
        }
      }
      else
      {
        uint64_t v222 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v204, v83, 2u, 1);
        swift_bridgeObjectRelease();
        unint64_t v23 = v204;
        if (v222) {
          goto LABEL_83;
        }
      }
    }
    else
    {
      if ((v83 & 0x2000000000000000) != 0)
      {
        uint64_t v85 = HIBYTE(v83) & 0xF;
        *(void *)&long long v259 = v23;
        *((void *)&v259 + 1) = v83 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v84 = (char *)&v259;
      }
      else if ((v23 & 0x1000000000000000) != 0)
      {
        unint64_t v84 = (char *)((v83 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v85 = v23 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        unint64_t v84 = (char *)_StringObject.sharedUTF8.getter();
      }
      if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v84, v85, 2u, 1))
      {
LABEL_83:
        unint64_t v251 = (unsigned __int16 *)v83;
        swift_bridgeObjectRelease();
        id v86 = objc_msgSend((id)a1, sel_encodedHost);
        unint64_t v252 = v75;
        *((void *)&v250 + 1) = v23;
        if (!v86)
        {
          char v277 = 0;
          LOBYTE(v274) = 0;
          char v270 = 0;
          unsigned __int8 v269 = 0;
          swift_bridgeObjectRelease();
          unint64_t v88 = 0;
          unint64_t v90 = 0;
          goto LABEL_112;
        }
        unint64_t v87 = v86;
        unint64_t v88 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
        unint64_t v90 = v89;

        char v277 = 0;
        LOBYTE(v274) = 0;
        char v270 = 0;
        unsigned __int8 v269 = 0;
        unint64_t v91 = specialized Collection.first.getter(v88, v90);
        if ((v91 & 0x1FF) != 0x5B) {
          goto LABEL_105;
        }
        if ((v90 & 0x1000000000000000) != 0)
        {
          Swift::Int v129 = String.UTF8View._foreignCount()();
          if (__OFSUB__(v129, 1))
          {
            __break(1u);
LABEL_278:
            __break(1u);
LABEL_279:
            __break(1u);
LABEL_280:
            __break(1u);
            os_unfair_lock_unlock((os_unfair_lock_t)v129);
            __break(1u);
            goto LABEL_281;
          }
          uint64_t v93 = (v88 >> 59) & 1;
          unint64_t v91 = MEMORY[0x185302230](15, v129 - 1, v88, v90);
        }
        else
        {
          uint64_t v92 = HIBYTE(v90) & 0xF;
          if ((v90 & 0x2000000000000000) == 0) {
            uint64_t v92 = v88 & 0xFFFFFFFFFFFFLL;
          }
          if (!v92)
          {
            __break(1u);
LABEL_231:
            unint64_t v91 = _StringGuts._slowEnsureMatchingEncoding(_:)(v91, v88, v90);
LABEL_91:
            unint64_t v94 = HIBYTE(v90) & 0xF;
            if ((v90 & 0x2000000000000000) == 0) {
              unint64_t v94 = v88 & 0xFFFFFFFFFFFFLL;
            }
            unint64_t v95 = v91 >> 16;
            if (v91 >> 16 >= v94)
            {
              __break(1u);
              goto LABEL_233;
            }
            if ((v90 & 0x1000000000000000) != 0)
            {
              char v97 = String.UTF8View._foreignSubscript(position:)();
            }
            else if ((v90 & 0x2000000000000000) != 0)
            {
              *(void *)&long long v259 = v88;
              *((void *)&v259 + 1) = v90 & 0xFFFFFFFFFFFFFFLL;
              char v97 = *((unsigned char *)&v259 + v95);
            }
            else
            {
              if ((v88 & 0x1000000000000000) != 0) {
                uint64_t v96 = (v90 & 0xFFFFFFFFFFFFFFFLL) + 32;
              }
              else {
                uint64_t v96 = _StringObject.sharedUTF8.getter();
              }
              char v97 = *(unsigned char *)(v96 + v95);
            }
            if (v97 == 93)
            {
              swift_bridgeObjectRetain();
              char v98 = specialized static RFC3986Parser.validateIPLiteralHost<A>(_:)(v88, v90);
              swift_bridgeObjectRelease();
              if ((v98 & 1) == 0) {
                goto LABEL_225;
              }
LABEL_111:
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRelease();
              char v101 = specialized Sequence<>.contains(_:)(37, v88, v90);
              swift_bridgeObjectRelease_n();
              char v270 = v101 & 1;
LABEL_112:
              id v102 = objc_msgSend((id)a1, sel_port);
              uint64_t v103 = v102;
              if (v102)
              {
                unint64_t v29 = (unint64_t)objc_msgSend(v102, sel_integerValue);

                HIBYTE(v273) = 0;
                if ((v29 & 0x8000000000000000) != 0)
                {
                  int v245 = 0;
                  uint64_t v244 = 764;
                  goto LABEL_283;
                }
              }
              else
              {
                unint64_t v29 = 0;
                HIBYTE(v273) = 0;
              }
              unint64_t v254 = v88;
              BOOL v271 = v103 == 0;
              id v104 = objc_msgSend((id)a1, sel_percentEncodedPath);
              if (v104)
              {
                unint64_t v105 = v104;
                unint64_t v88 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
                unint64_t v75 = v106;
              }
              else
              {
                unint64_t v88 = 0;
                unint64_t v75 = 0xE000000000000000;
              }
              char v277 = 0;
              LOBYTE(v273) = 0;
              swift_bridgeObjectRetain();
              LOBYTE(v23) = 5;
              BOOL v107 = specialized static RFC3986Parser.validate<A>(_:component:)(v88, v75, 5);
              swift_bridgeObjectRelease();
              if (v107)
              {
                *(void *)&long long v250 = v77;
                swift_bridgeObjectRelease();
                id v108 = objc_msgSend((id)a1, sel_percentEncodedQuery);
                if (v108)
                {
                  long long v109 = v108;
                  unint64_t v15 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
                  unint64_t v77 = v110;
                }
                else
                {
                  unint64_t v15 = 0;
                  unint64_t v77 = 0;
                }
                HIBYTE(v272) = 0;
                if (!specialized static RFC3986Parser.validate<A>(_:component:)(v15, v77, 6))
                {
                  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
                  swift_allocError();
                  *uint64_t v239 = 6;
                  swift_willThrow();
                  swift_bridgeObjectRelease();
                  int v245 = 0;
                  uint64_t v244 = 918;
                  goto LABEL_283;
                }
                swift_bridgeObjectRelease();
                id v111 = objc_msgSend((id)a1, sel_percentEncodedFragment);
                if (!v111)
                {
                  unint64_t v23 = 0;
                  a1 = 0;
                  char v277 = 0;
                  LOBYTE(v272) = 0;
LABEL_132:
                  swift_bridgeObjectRelease();
                  LOBYTE(v257) = v271;
                  *(void *)&long long v259 = 0;
                  BYTE8(v259) = v277;
                  BYTE9(v259) = v276;
                  BYTE10(v259) = v275;
                  BYTE11(v259) = HIBYTE(v274);
                  BYTE12(v259) = v274;
                  BYTE13(v259) = HIBYTE(v273);
                  BYTE14(v259) = v273;
                  HIBYTE(v259) = HIBYTE(v272);
                  LOBYTE(v260) = v272;
                  *((void *)&v260 + 1) = v256;
                  *(void *)&long long v261 = v255;
                  *((void *)&v261 + 1) = v252;
                  long long v262 = v250;
                  *(void *)&long long v263 = v251;
                  *((void *)&v263 + 1) = v254;
                  *(void *)&long long v264 = v90;
                  *((void *)&v264 + 1) = v29;
                  LOBYTE(v265) = v271;
                  *((void *)&v265 + 1) = v88;
                  *(void *)&long long v266 = v75;
                  *((void *)&v266 + 1) = v15;
                  *(void *)&v267[0] = v77;
                  *((void *)&v267[0] + 1) = v23;
                  *(void *)&v267[1] = a1;
                  BYTE8(v267[1]) = v270;
                  BYTE9(v267[1]) = v269;
                  destructiveProjectEnumData for PredicateCodableError(&v259, v269);
                  uint64_t v10 = v253;
                  goto LABEL_133;
                }
                uint64_t v112 = v111;
                unint64_t v23 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
                a1 = v113;

                char v277 = 0;
                LOBYTE(v272) = 0;
                if ((a1 & 0x1000000000000000) != 0)
                {
                  *(void *)&long long v259 = v23;
                  *((void *)&v259 + 1) = a1;
                  id v248 = (id)lazy protocol witness table accessor for type String and conformance String();
                  swift_bridgeObjectRetain();
                  StringProtocol._ephemeralString.getter();
                  unint64_t v249 = (unsigned __int16 *)String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  uint64_t v211 = (unsigned __int16 *)objc_msgSend(v249, sel__fastCharacterContents);
                  unint64_t v212 = v249;
                  unint64_t v249 = v211;
                  if (v211)
                  {
                    *(void *)&long long v259 = v23;
                    *((void *)&v259 + 1) = a1;
                    StringProtocol._ephemeralString.getter();
                    id v247 = (id)String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    id v248 = objc_msgSend(v247, sel_length);
                    swift_unknownObjectRelease();
                    char v213 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v249, (uint64_t)v248, 0x40u, 1);
                  }
                  else
                  {
                    char v213 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v23, a1, 0x40u, 1);
                  }
                  char v223 = v213;
                  swift_bridgeObjectRelease();
                  if (v223) {
                    goto LABEL_132;
                  }
                  goto LABEL_241;
                }
                if ((a1 & 0x2000000000000000) != 0)
                {
                  uint64_t v115 = HIBYTE(a1) & 0xF;
                  *(void *)&long long v259 = v23;
                  *((void *)&v259 + 1) = a1 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v114 = (char *)&v259;
                  goto LABEL_131;
                }
                if ((v23 & 0x1000000000000000) != 0)
                {
                  uint64_t v114 = (char *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  uint64_t v115 = v23 & 0xFFFFFFFFFFFFLL;
                  goto LABEL_131;
                }
LABEL_233:
                uint64_t v114 = (char *)_StringObject.sharedUTF8.getter();
LABEL_131:
                if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v114, v115, 0x40u, 1))
                {
                  goto LABEL_132;
                }
LABEL_241:
                swift_bridgeObjectRelease();
                int v245 = 0;
                uint64_t v244 = 939;
                goto LABEL_283;
              }
LABEL_281:
              lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
              swift_allocError();
              *uint64_t v238 = v23;
              swift_willThrow();
              swift_bridgeObjectRelease();
              int v245 = 0;
              uint64_t v244 = 897;
              goto LABEL_283;
            }
LABEL_105:
            if ((v90 & 0x1000000000000000) != 0)
            {
              *(void *)&long long v259 = v88;
              *((void *)&v259 + 1) = v90;
              lazy protocol witness table accessor for type String and conformance String();
              unint64_t v254 = v88;
              swift_bridgeObjectRetain_n();
              StringProtocol._ephemeralString.getter();
              uint64_t v214 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              unint64_t v215 = (unsigned __int16 *)objc_msgSend(v214, sel__fastCharacterContents);
              id v216 = v214;
              if (v215)
              {
                *(void *)&long long v259 = v254;
                *((void *)&v259 + 1) = v90;
                StringProtocol._ephemeralString.getter();
                Swift::Int v217 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                uint64_t v218 = (uint64_t)objc_msgSend(v217, sel_length);
                swift_unknownObjectRelease();
                LOBYTE(v218) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v215, v218, 4u, 1);
                swift_bridgeObjectRelease_n();
                unint64_t v88 = v254;
                if ((v218 & 1) == 0)
                {
LABEL_225:
                  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
                  swift_allocError();
                  *uint64_t v219 = 3;
                  swift_willThrow();
                  swift_bridgeObjectRelease();
                  int v245 = 0;
                  uint64_t v244 = 876;
                  goto LABEL_283;
                }
              }
              else
              {
                unint64_t v88 = v254;
                char v229 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v254, v90, 4u, 1);
                swift_bridgeObjectRelease_n();
                if ((v229 & 1) == 0) {
                  goto LABEL_225;
                }
              }
            }
            else
            {
              if ((v90 & 0x2000000000000000) != 0)
              {
                uint64_t v100 = HIBYTE(v90) & 0xF;
                *(void *)&long long v259 = v88;
                *((void *)&v259 + 1) = v90 & 0xFFFFFFFFFFFFFFLL;
                unint64_t v99 = (char *)&v259;
              }
              else if ((v88 & 0x1000000000000000) != 0)
              {
                unint64_t v99 = (char *)((v90 & 0xFFFFFFFFFFFFFFFLL) + 32);
                uint64_t v100 = v88 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                unint64_t v99 = (char *)_StringObject.sharedUTF8.getter();
              }
              if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v99, v100, 4u, 1))goto LABEL_225; {
            }
              }
            goto LABEL_111;
          }
          unint64_t v91 = (v92 << 16) - 65532;
          LOBYTE(v93) = 1;
        }
        if ((v91 & 0xC) != 4 << v93) {
          goto LABEL_91;
        }
        goto LABEL_231;
      }
    }
    lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
    swift_allocError();
    *uint64_t v210 = 2;
    swift_willThrow();
    swift_bridgeObjectRelease();
    int v245 = 0;
    uint64_t v244 = 831;
    goto LABEL_283;
  }
  if ((v77 & 0x2000000000000000) != 0)
  {
    uint64_t v79 = HIBYTE(v77) & 0xF;
    *(void *)&long long v259 = v75;
    *((void *)&v259 + 1) = v77 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v78 = (char *)&v259;
  }
  else if ((v75 & 0x1000000000000000) != 0)
  {
    uint64_t v78 = (char *)((v77 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v79 = v75 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v78 = (char *)_StringObject.sharedUTF8.getter();
  }
  if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v78, v79, 2u, 1)) {
    goto LABEL_75;
  }
LABEL_236:
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *uint64_t v221 = 1;
  swift_willThrow();
  swift_bridgeObjectRelease();
  int v245 = 0;
  uint64_t v244 = 810;
LABEL_283:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void static URLComponents._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1)
  {
    v10[160] = 1;
    v11[0] = 0;
    v11[1] = 0;
    char v12 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v17 = 0;
    char v18 = 1;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    __int16 v22 = 0;
    destructiveProjectEnumData for PredicateCodableError(v11, a2);
    outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v10, &demangling cache variable for type metadata for URLComponents?);
    id v5 = a1;
    static URLComponents._conditionallyBridgeFromObjectiveC(_:result:)((unint64_t)v5, (uint64_t)v10);
    outlined init with take of LocalePreferences?((uint64_t)v10, (uint64_t)v23, &demangling cache variable for type metadata for URLComponents?);
    outlined init with take of LocalePreferences?((uint64_t)v23, (uint64_t)v24, &demangling cache variable for type metadata for URLComponents?);
    if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v24) == 1)
    {
      __break(1u);
    }
    else
    {

      long long v6 = v24[7];
      *(_OWORD *)(a3 + 96) = v24[6];
      *(_OWORD *)(a3 + 112) = v6;
      *(_OWORD *)(a3 + 128) = v25[0];
      *(_OWORD *)(a3 + 138) = *(_OWORD *)((char *)v25 + 10);
      long long v7 = v24[3];
      *(_OWORD *)(a3 + 32) = v24[2];
      *(_OWORD *)(a3 + 48) = v7;
      long long v8 = v24[5];
      *(_OWORD *)(a3 + 64) = v24[4];
      *(_OWORD *)(a3 + 80) = v8;
      long long v9 = v24[1];
      *(_OWORD *)a3 = v24[0];
      *(_OWORD *)(a3 + 16) = v9;
    }
  }
  else
  {
    LOBYTE(v24[0]) = 1;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(void *)(a3 + 88) = 0;
    *(unsigned char *)(a3 + 96) = 1;
    *(_OWORD *)(a3 + 104) = 0u;
    *(_OWORD *)(a3 + 120) = 0u;
    *(_OWORD *)(a3 + 136) = 0u;
    *(_WORD *)(a3 + 152) = 0;
  }
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance URLComponents()
{
  long long v1 = v0[7];
  long long v20 = v0[6];
  long long v21 = v1;
  v22[0] = v0[8];
  *(_OWORD *)((char *)v22 + 10) = *(long long *)((char *)v0 + 138);
  long long v2 = v0[3];
  long long v16 = v0[2];
  long long v17 = v2;
  long long v3 = v0[5];
  long long v18 = v0[4];
  long long v19 = v3;
  long long v4 = v0[1];
  long long v14 = *v0;
  long long v15 = v4;
  id v5 = (objc_class *)type metadata accessor for _NSSwiftURLComponents();
  long long v6 = (char *)objc_allocWithZone(v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<URLComponents, os_unfair_lock_s>);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 172) = 0;
  long long v8 = v21;
  *(_OWORD *)(v7 + 112) = v20;
  *(_OWORD *)(v7 + 128) = v8;
  *(_OWORD *)(v7 + 144) = v22[0];
  *(_OWORD *)(v7 + 154) = *(_OWORD *)((char *)v22 + 10);
  long long v9 = v17;
  *(_OWORD *)(v7 + 48) = v16;
  *(_OWORD *)(v7 + 64) = v9;
  long long v10 = v19;
  *(_OWORD *)(v7 + 80) = v18;
  *(_OWORD *)(v7 + 96) = v10;
  long long v11 = v15;
  *(_OWORD *)(v7 + 16) = v14;
  *(_OWORD *)(v7 + 32) = v11;
  *(void *)&v6[OBJC_IVAR____NSSwiftURLComponents_lock] = v7;
  outlined retain of URLComponents((uint64_t)&v14);
  v13.receiver = v6;
  v13.super_class = v5;
  return objc_msgSendSuper2(&v13, sel_init);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance URLComponents(unint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t NSURLComponents._toCustomAnyHashable()(uint64_t a1, uint64_t a2)
{
  char v7 = 1;
  v8[0] = 0;
  v8[1] = 0;
  char v9 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v14 = 0;
  char v15 = 1;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  __int16 v19 = 0;
  destructiveProjectEnumData for PredicateCodableError(v8, a2);
  outlined init with take of LocalePreferences?((uint64_t)v8, (uint64_t)v5, &demangling cache variable for type metadata for URLComponents?);
  id v3 = v2;
  static URLComponents._conditionallyBridgeFromObjectiveC(_:result:)((unint64_t)v3, (uint64_t)v5);
  outlined init with take of LocalePreferences?((uint64_t)v5, (uint64_t)v20, &demangling cache variable for type metadata for URLComponents?);
  outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)v21, &demangling cache variable for type metadata for URLComponents?);
  uint64_t result = _s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)v21);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {

    v5[6] = v21[6];
    v5[7] = v21[7];
    v6[0] = v22[0];
    *(_OWORD *)((char *)v6 + 10) = *(_OWORD *)((char *)v22 + 10);
    _OWORD v5[2] = v21[2];
    v5[3] = v21[3];
    v5[4] = v21[4];
    v5[5] = v21[5];
    v5[0] = v21[0];
    v5[1] = v21[1];
    lazy protocol witness table accessor for type URLComponents and conformance URLComponents();
    return AnyHashable.init<A>(_:)();
  }
  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLComponents(uint64_t a1, uint64_t a2)
{
  id v3 = (id)*v2;
  NSURLComponents._toCustomAnyHashable()(*v2, a2);
}

uint64_t URLQueryItem.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *long long v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*URLQueryItem.name.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t URLQueryItem.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*URLQueryItem.value.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void URLQueryItem.hash(into:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int URLQueryItem.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URLQueryItem()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance URLQueryItem()
{
  uint64_t v1 = *(void *)(v0 + 24);
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance URLQueryItem()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t URLQueryItem.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[3];
  if (v2)
  {
    uint64_t v3 = v0[2];
    uint64_t v7 = *v0;
    swift_bridgeObjectRetain();
    v4._unint64_t countAndFlagsBits = 61;
    v4._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    v5._unint64_t countAndFlagsBits = v3;
    v5._unint64_t object = v2;
    String.append(_:)(v5);
    return v7;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v1;
}

uint64_t URLQueryItem.debugDescription.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[3];
  if (v2)
  {
    uint64_t v3 = v0[2];
    uint64_t v7 = *v0;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v4._unint64_t countAndFlagsBits = 61;
    v4._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    v5._unint64_t countAndFlagsBits = v3;
    v5._unint64_t object = v2;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v1;
}

uint64_t URLQueryItem.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  Swift::String v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v0;
  uint64_t v8 = v0[1];
  uint64_t v11 = v0[2];
  uint64_t v10 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_182106040;
  *(_OWORD *)(v12 + 32) = xmmword_182107E50;
  *(void *)(v12 + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(v12 + 48) = v9;
  *(void *)(v12 + 56) = v8;
  *(_OWORD *)(v12 + 80) = xmmword_182107E60;
  *(void *)(v12 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(v12 + 96) = v11;
  *(void *)(v12 + 104) = v10;
  v17[2] = v9;
  void v17[3] = v8;
  v17[4] = v11;
  v17[5] = v10;
  v17[1] = v12;
  uint64_t v13 = *MEMORY[0x1E4FBC410];
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v7, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v7, 0, 1, v14);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v1);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [(label: String?, value: Any)] and conformance [A], &demangling cache variable for type metadata for [(label: String?, value: Any)]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URLQueryItem()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[3];
  if (v2)
  {
    uint64_t v3 = v0[2];
    uint64_t v7 = *v0;
    swift_bridgeObjectRetain();
    v4._unint64_t countAndFlagsBits = 61;
    v4._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    v5._unint64_t countAndFlagsBits = v3;
    v5._unint64_t object = v2;
    String.append(_:)(v5);
    return v7;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v1;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URLQueryItem()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[3];
  if (v2)
  {
    uint64_t v3 = v0[2];
    uint64_t v7 = *v0;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v4._unint64_t countAndFlagsBits = 61;
    v4._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    v5._unint64_t countAndFlagsBits = v3;
    v5._unint64_t object = v2;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v1;
}

uint64_t static URLQueryItem._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURLQueryItem);
}

NSURLQueryItem __swiftcall URLQueryItem._bridgeToObjectiveC()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  Swift::String v5 = (objc_class *)type metadata accessor for _NSSwiftURLQueryItem();
  uint64_t v6 = (char *)objc_allocWithZone(v5);
  uint64_t v7 = &v6[OBJC_IVAR____NSSwiftURLQueryItem_queryItem];
  *(void *)uint64_t v7 = v1;
  *((void *)v7 + 1) = v2;
  *((void *)v7 + 2) = v4;
  *((void *)v7 + 3) = v3;
  uint64_t v8 = String._bridgeToObjectiveCImpl()();
  if (v3) {
    uint64_t v9 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    uint64_t v9 = 0;
  }
  v14.receiver = v6;
  v14.super_class = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = (objc_class *)objc_msgSendSuper2(&v14, sel_initWithName_value_, v8, v9);
  swift_unknownObjectRelease();

  uint64_t v13 = v10;
  result._value = v12;
  result._name = v11;
  result.super.isa = v13;
  return result;
}

void static URLQueryItem._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  outlined consume of Locale.LanguageCode?(*a2, a2[1]);
  id v4 = objc_msgSend(a1, sel_name);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  id v8 = objc_msgSend(a1, sel_value);
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;
  }
  else
  {
    id v10 = 0;
    uint64_t v12 = 0;
  }
  *a2 = (uint64_t)v5;
  a2[1] = v7;
  a2[2] = (uint64_t)v10;
  a2[3] = v12;
}

uint64_t static URLQueryItem._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  outlined consume of Locale.LanguageCode?(*a2, a2[1]);
  id v4 = objc_msgSend(a1, sel_name);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  id v8 = objc_msgSend(a1, sel_value);
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;
  }
  else
  {
    id v10 = 0;
    uint64_t v12 = 0;
  }
  *a2 = (uint64_t)v5;
  a2[1] = v7;
  a2[2] = (uint64_t)v10;
  a2[3] = v12;
  return 1;
}

void static URLQueryItem._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    id v4 = objc_msgSend(a1, sel_name);
    id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v7 = v6;

    id v8 = objc_msgSend(a1, sel_value);
    if (v8)
    {
      uint64_t v9 = v8;
      id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      uint64_t v12 = v11;
    }
    else
    {
      id v10 = 0;
      uint64_t v12 = 0;
    }
    *a2 = v5;
    a2[1] = v7;
    a2[2] = v10;
    a2[3] = v12;
  }
  else
  {
    __break(1u);
  }
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance URLQueryItem(void *a1, uint64_t *a2)
{
  outlined consume of Locale.LanguageCode?(*a2, a2[1]);
  id v4 = objc_msgSend(a1, sel_name);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  id v8 = objc_msgSend(a1, sel_value);
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;
  }
  else
  {
    id v10 = 0;
    uint64_t v12 = 0;
  }
  *a2 = (uint64_t)v5;
  a2[1] = v7;
  a2[2] = (uint64_t)v10;
  a2[3] = v12;
  return 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance URLQueryItem(void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    id v4 = objc_msgSend(a1, sel_name);
    id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v7 = v6;

    id v8 = objc_msgSend(a1, sel_value);
    if (v8)
    {
      uint64_t v9 = v8;
      id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      uint64_t v12 = v11;
    }
    else
    {
      id v10 = 0;
      uint64_t v12 = 0;
    }
    *a2 = v5;
    a2[1] = v7;
    a2[2] = v10;
    a2[3] = v12;
  }
  else
  {
    __break(1u);
  }
}

uint64_t NSURLQueryItem._toCustomAnyHashable()()
{
  id v1 = objc_msgSend(v0, sel_name);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  id v2 = objc_msgSend(v0, sel_value);
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }
  lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLQueryItem()
{
  id v1 = *v0;
  id v2 = objc_msgSend(*v0, sel_name);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  id v3 = objc_msgSend(v1, sel_value);
  if (v3)
  {
    id v4 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  }
  lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem();
  AnyHashable.init<A>(_:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance URLComponents.CodingKeys@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized URLComponents.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance URLComponents.CodingKeys()
{
  uint64_t result = 0x656D65686373;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1919251317;
      break;
    case 2:
      uint64_t result = 0x64726F7773736170;
      break;
    case 3:
      uint64_t result = 1953722216;
      break;
    case 4:
      uint64_t result = 1953656688;
      break;
    case 5:
      uint64_t result = 1752457584;
      break;
    case 6:
      uint64_t result = 0x7972657571;
      break;
    case 7:
      uint64_t result = 0x746E656D67617266;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance URLComponents.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized URLComponents.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance URLComponents.CodingKeys@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized URLComponents.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance URLComponents.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URLComponents.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t URLComponents.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  char v117 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<URLComponents.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v124 = 1;
  long long v121 = 0uLL;
  LOBYTE(v122[0]) = 0;
  *(_OWORD *)((char *)v122 + 8) = 0u;
  *(_OWORD *)((char *)&v122[1] + 8) = 0u;
  *(_OWORD *)((char *)&v122[2] + 8) = 0u;
  *(_OWORD *)((char *)&v122[3] + 8) = 0u;
  *((void *)&v122[4] + 1) = 0;
  LOBYTE(v123[0]) = 1;
  *(_OWORD *)((char *)v123 + 8) = 0u;
  *(_OWORD *)((char *)&v123[1] + 8) = 0u;
  *(_OWORD *)((char *)&v123[2] + 8) = 0u;
  WORD4(v123[3]) = 0;
  uint64_t v8 = a1[3];
  uint64_t v125 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v8);
  lazy protocol witness table accessor for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v116 = v5;
    char v120 = 0;
    v9.value._unint64_t countAndFlagsBits = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    URLComponents._URLComponents.setScheme(_:)(v9);
    if (v10)
    {

      swift_bridgeObjectRelease();
      int v113 = 0;
      uint64_t v112 = 714;
      goto LABEL_96;
    }
    swift_bridgeObjectRelease();
    char v120 = 1;
    uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    unint64_t v13 = v11;
    unint64_t v14 = v12;
    uint64_t v115 = v7;
    BYTE8(v121) = 0;
    BYTE10(v121) = 0;
    if (v12)
    {
      if ((v12 & 0x1000000000000000) != 0)
      {
        unint64_t v118 = v11;
        uint64_t v119 = v12;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        uint64_t v79 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v80 = (unsigned __int16 *)objc_msgSend(v79, sel__fastCharacterContents);
        id v81 = v79;
        if (v80)
        {
          unint64_t v118 = v13;
          uint64_t v119 = v14;
          StringProtocol._ephemeralString.getter();
          unint64_t v82 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v83 = objc_msgSend(v82, sel_length);
          swift_unknownObjectRelease();
          char v84 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v80, (uint64_t)v83, 2u, 0);
        }
        else
        {
          char v84 = specialized Sequence.allSatisfy(_:)(v13, v14, 2);
        }
        uint64_t v17 = swift_bridgeObjectRelease();
        if (v84) {
          goto LABEL_17;
        }
      }
      else
      {
        if ((v12 & 0x2000000000000000) != 0)
        {
          uint64_t v16 = HIBYTE(v12) & 0xF;
          unint64_t v118 = v11;
          uint64_t v119 = v14 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v15 = (char *)&v118;
        }
        else if ((v11 & 0x1000000000000000) != 0)
        {
          uint64_t v15 = (char *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v15 = (char *)_StringObject.sharedUTF8.getter();
        }
        uint64_t v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v15, v16, 2u, 0);
        if (v17) {
          goto LABEL_17;
        }
      }
      uint64_t v18 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000) == 0) {
        uint64_t v18 = v13 & 0xFFFFFFFFFFFFLL;
      }
      if (v18)
      {
        unint64_t v118 = v13;
        uint64_t v119 = v14;
        MEMORY[0x1F4188790](v17);
        uint64_t v112 = (uint64_t)&v118;
        LOBYTE(v113) = 2;
        swift_bridgeObjectRetain();
        __int16 v19 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)(&v114 - 4), v13, v14);
        if (v20)
        {
          unint64_t v13 = (unint64_t)v19;
          unint64_t v21 = v20;
          swift_bridgeObjectRelease_n();
          unint64_t v14 = v21;
        }
        else
        {
          unint64_t v23 = v118;
          unint64_t v22 = v119;
          swift_bridgeObjectRetain();
          unint64_t v13 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v23, v22, 2u);
          unint64_t v25 = v24;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          unint64_t v14 = v25;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v13 = 0;
        unint64_t v14 = 0xE000000000000000;
      }
    }
LABEL_17:
    swift_bridgeObjectRelease();
    *((void *)&v122[1] + 1) = v13;
    *(void *)&v122[2] = v14;
    char v120 = 2;
    uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    unint64_t v28 = v26;
    unint64_t v29 = v27;
    BYTE8(v121) = 0;
    BYTE11(v121) = 0;
    if (!v27) {
      goto LABEL_31;
    }
    if ((v27 & 0x1000000000000000) != 0)
    {
      unint64_t v118 = v26;
      uint64_t v119 = v27;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      unint64_t v94 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      unint64_t v95 = (unsigned __int16 *)objc_msgSend(v94, sel__fastCharacterContents);
      id v96 = v94;
      if (v95)
      {
        unint64_t v118 = v28;
        uint64_t v119 = v29;
        StringProtocol._ephemeralString.getter();
        char v97 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v98 = objc_msgSend(v97, sel_length);
        swift_unknownObjectRelease();
        char v99 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v95, (uint64_t)v98, 2u, 0);
      }
      else
      {
        char v99 = specialized Sequence.allSatisfy(_:)(v28, v29, 2);
      }
      uint64_t v32 = swift_bridgeObjectRelease();
      if (v99) {
        goto LABEL_31;
      }
    }
    else
    {
      if ((v27 & 0x2000000000000000) != 0)
      {
        uint64_t v31 = HIBYTE(v27) & 0xF;
        unint64_t v118 = v26;
        uint64_t v119 = v29 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v30 = (char *)&v118;
      }
      else if ((v26 & 0x1000000000000000) != 0)
      {
        uint64_t v30 = (char *)((v27 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v31 = v28 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v30 = (char *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v32 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v30, v31, 2u, 0);
      if (v32) {
        goto LABEL_31;
      }
    }
    uint64_t v33 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000) == 0) {
      uint64_t v33 = v28 & 0xFFFFFFFFFFFFLL;
    }
    if (v33)
    {
      unint64_t v118 = v28;
      uint64_t v119 = v29;
      MEMORY[0x1F4188790](v32);
      uint64_t v112 = (uint64_t)&v118;
      LOBYTE(v113) = 2;
      swift_bridgeObjectRetain();
      id v34 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)(&v114 - 4), v28, v29);
      if (v35)
      {
        unint64_t v28 = (unint64_t)v34;
        unint64_t v36 = v35;
        swift_bridgeObjectRelease_n();
        unint64_t v29 = v36;
      }
      else
      {
        unint64_t v38 = v118;
        unint64_t v37 = v119;
        swift_bridgeObjectRetain();
        unint64_t v28 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v38, v37, 2u);
        unint64_t v40 = v39;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        unint64_t v29 = v40;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v28 = 0;
      unint64_t v29 = 0xE000000000000000;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    *((void *)&v122[2] + 1) = v28;
    *(void *)&v122[3] = v29;
    char v120 = 3;
    unint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    URLComponents._URLComponents.host.setter(v41, v42);
    char v120 = 4;
    uint64_t v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    BYTE8(v121) = 0;
    BYTE13(v121) = 0;
    if ((v44 & 1) == 0 && v43 < 0)
    {
      while (1)
      {
        int v113 = 0;
        uint64_t v112 = 764;
LABEL_96:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
    }
    *((void *)&v122[4] + 1) = v43;
    LOBYTE(v123[0]) = v44 & 1;
    char v120 = 5;
    unint64_t v45 = KeyedDecodingContainer.decode(_:forKey:)();
    BYTE8(v121) = 0;
    BYTE14(v121) = 0;
    uint64_t v48 = HIBYTE(v46) & 0xF;
    if ((v46 & 0x2000000000000000) == 0) {
      uint64_t v48 = v45 & 0xFFFFFFFFFFFFLL;
    }
    if (v48)
    {
      unint64_t v49 = specialized static RFC3986Parser.percentEncodePath<A>(_:)(v45, v46);
      unint64_t v51 = v50;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v49 = 0;
      unint64_t v51 = 0xE000000000000000;
    }
    swift_bridgeObjectRelease();
    *((void *)&v123[0] + 1) = v49;
    *(void *)&v123[1] = v51;
    char v120 = 6;
    uint64_t v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    unint64_t v54 = v52;
    unint64_t v55 = v53;
    BYTE8(v121) = 0;
    HIBYTE(v121) = 0;
    if (v53)
    {
      if ((v53 & 0x1000000000000000) != 0)
      {
        unint64_t v118 = v52;
        uint64_t v119 = v53;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol._ephemeralString.getter();
        uint64_t v100 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        char v101 = (unsigned __int16 *)objc_msgSend(v100, sel__fastCharacterContents);
        id v102 = v100;
        if (v101)
        {
          unint64_t v118 = v54;
          uint64_t v119 = v55;
          StringProtocol._ephemeralString.getter();
          uint64_t v103 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v104 = objc_msgSend(v103, sel_length);
          swift_unknownObjectRelease();
          char v105 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v101, (uint64_t)v104, 0x40u, 0);
        }
        else
        {
          char v105 = specialized Sequence.allSatisfy(_:)(v54, v55, 64);
        }
        uint64_t v58 = swift_bridgeObjectRelease();
        if (v105) {
          goto LABEL_54;
        }
      }
      else
      {
        if ((v53 & 0x2000000000000000) != 0)
        {
          uint64_t v57 = HIBYTE(v53) & 0xF;
          unint64_t v118 = v52;
          uint64_t v119 = v55 & 0xFFFFFFFFFFFFFFLL;
          id v56 = (char *)&v118;
        }
        else if ((v52 & 0x1000000000000000) != 0)
        {
          id v56 = (char *)((v53 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v57 = v54 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          id v56 = (char *)_StringObject.sharedUTF8.getter();
        }
        uint64_t v58 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v56, v57, 0x40u, 0);
        if (v58) {
          goto LABEL_54;
        }
      }
      uint64_t v59 = HIBYTE(v55) & 0xF;
      if ((v55 & 0x2000000000000000) == 0) {
        uint64_t v59 = v54 & 0xFFFFFFFFFFFFLL;
      }
      if (v59)
      {
        unint64_t v118 = v54;
        uint64_t v119 = v55;
        MEMORY[0x1F4188790](v58);
        uint64_t v112 = (uint64_t)&v118;
        LOBYTE(v113) = 64;
        swift_bridgeObjectRetain();
        char v60 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)(&v114 - 4), v54, v55);
        if (v61)
        {
          unint64_t v54 = (unint64_t)v60;
          unint64_t v62 = v61;
          swift_bridgeObjectRelease_n();
          unint64_t v55 = v62;
        }
        else
        {
          unint64_t v64 = v118;
          unint64_t v63 = v119;
          swift_bridgeObjectRetain();
          unint64_t v54 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v64, v63, 0x40u);
          unint64_t v66 = v65;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          unint64_t v55 = v66;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v54 = 0;
        unint64_t v55 = 0xE000000000000000;
      }
    }
LABEL_54:
    swift_bridgeObjectRelease();
    *((void *)&v123[1] + 1) = v54;
    *(void *)&_OWORD v123[2] = v55;
    char v120 = 7;
    uint64_t v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    unint64_t v69 = v67;
    unint64_t v70 = v68;
    BYTE8(v121) = 0;
    LOBYTE(v122[0]) = 0;
    if (!v68)
    {
      uint64_t v73 = v116;
LABEL_72:
      swift_bridgeObjectRelease();
      *((void *)&v123[2] + 1) = v69;
      *(void *)&v123[3] = v70;
      (*(void (**)(char *, uint64_t))(v73 + 8))(v115, v4);
      long long v89 = v123[1];
      unint64_t v90 = v117;
      v117[6] = v123[0];
      v90[7] = v89;
      v90[8] = v123[2];
      *(_OWORD *)((char *)v90 + 138) = *(_OWORD *)((char *)&v123[2] + 10);
      long long v91 = v122[2];
      v90[2] = v122[1];
      v90[3] = v91;
      long long v92 = v122[4];
      v90[4] = v122[3];
      v90[5] = v92;
      long long v93 = v122[0];
      _OWORD *v90 = v121;
      v90[1] = v93;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v125);
    }
    uint64_t v114 = v4;
    if ((v68 & 0x1000000000000000) != 0)
    {
      unint64_t v118 = v67;
      uint64_t v119 = v68;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      unint64_t v106 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      BOOL v107 = (unsigned __int16 *)objc_msgSend(v106, sel__fastCharacterContents);
      id v108 = v106;
      if (v107)
      {
        unint64_t v118 = v69;
        uint64_t v119 = v70;
        StringProtocol._ephemeralString.getter();
        long long v109 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v110 = objc_msgSend(v109, sel_length);
        swift_unknownObjectRelease();
        char v111 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v107, (uint64_t)v110, 0x40u, 0);
      }
      else
      {
        char v111 = specialized Sequence.allSatisfy(_:)(v69, v70, 64);
      }
      uint64_t v74 = swift_bridgeObjectRelease();
      if ((v111 & 1) == 0)
      {
LABEL_62:
        uint64_t v75 = HIBYTE(v70) & 0xF;
        if ((v70 & 0x2000000000000000) == 0) {
          uint64_t v75 = v69 & 0xFFFFFFFFFFFFLL;
        }
        if (v75)
        {
          unint64_t v118 = v69;
          uint64_t v119 = v70;
          MEMORY[0x1F4188790](v74);
          uint64_t v112 = (uint64_t)&v118;
          LOBYTE(v113) = 64;
          swift_bridgeObjectRetain();
          unint64_t v76 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:), (uint64_t)(&v114 - 4), v69, v70);
          if (v77)
          {
            unint64_t v69 = (unint64_t)v76;
            unint64_t v78 = v77;
            swift_bridgeObjectRelease_n();
            unint64_t v70 = v78;
          }
          else
          {
            unint64_t v86 = v118;
            unint64_t v85 = v119;
            swift_bridgeObjectRetain();
            unint64_t v69 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v86, v85, 0x40u);
            unint64_t v88 = v87;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            unint64_t v70 = v88;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          unint64_t v69 = 0;
          unint64_t v70 = 0xE000000000000000;
        }
      }
    }
    else
    {
      if ((v68 & 0x2000000000000000) != 0)
      {
        uint64_t v72 = HIBYTE(v68) & 0xF;
        unint64_t v118 = v67;
        uint64_t v119 = v70 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v71 = (char *)&v118;
      }
      else if ((v67 & 0x1000000000000000) != 0)
      {
        uint64_t v71 = (char *)((v68 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v72 = v69 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v71 = (char *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v74 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v71, v72, 0x40u, 0);
      if ((v74 & 1) == 0) {
        goto LABEL_62;
      }
    }
    uint64_t v73 = v116;
    uint64_t v4 = v114;
    goto LABEL_72;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v125);
}

uint64_t URLComponents.encode(to:)(void *a1)
{
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<URLComponents.CodingKeys>);
  uint64_t v4 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71);
  uint64_t v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = v1[7];
  long long v68 = v1[6];
  long long v69 = v7;
  *(_OWORD *)unint64_t v70 = v1[8];
  *(_OWORD *)&v70[10] = *(long long *)((char *)v1 + 138);
  long long v8 = v1[3];
  long long v64 = v1[2];
  long long v65 = v8;
  long long v9 = v1[5];
  long long v66 = v1[4];
  long long v67 = v9;
  long long v10 = v1[1];
  long long v62 = *v1;
  long long v63 = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys();
  unint64_t v55 = v6;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v60[8] = v68;
  v60[9] = v69;
  v61[0] = *(_OWORD *)v70;
  *(_OWORD *)((char *)v61 + 10) = *(_OWORD *)&v70[10];
  v60[4] = v64;
  v60[5] = v65;
  v60[6] = v66;
  v60[7] = v67;
  v60[2] = v62;
  v60[3] = v63;
  uint64_t v11 = v62;
  if (!(void)v64 && BYTE9(v62) == 1 && (void)v62 && (*(unsigned char *)(v62 + 48) & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v62);
    uint64_t v12 = String.subscript.getter();
    MEMORY[0x185301F50](v12);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v62);
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v62);
  LOBYTE(v59[0]) = 0;
  unint64_t v13 = v55;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = outlined retain of URLComponents((uint64_t)&v62);
    URLComponents._URLComponents.user.getter(v14);
    outlined release of URLComponents((uint64_t)&v62);
    LOBYTE(v59[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = outlined retain of URLComponents((uint64_t)&v62);
    URLComponents._URLComponents.password.getter(v15);
    outlined release of URLComponents((uint64_t)&v62);
    LOBYTE(v59[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    swift_bridgeObjectRelease();
    unint64_t v17 = v67;
    uint64_t v54 = v4;
    if ((void)v67)
    {
      uint64_t v18 = *((void *)&v66 + 1);
      uint64_t v19 = outlined retain of URLComponents((uint64_t)&v62);
      unint64_t v20 = v17;
    }
    else if (BYTE12(v62) == 1 && v11 && (*(unsigned char *)(v11 + 120) & 1) == 0)
    {
      outlined retain of URLComponents((uint64_t)&v62);
      uint64_t v24 = String.subscript.getter();
      uint64_t v18 = MEMORY[0x185301F50](v24);
      unint64_t v20 = v25;
      uint64_t v19 = swift_bridgeObjectRelease();
    }
    else
    {
      outlined retain of URLComponents((uint64_t)&v62);
      uint64_t v19 = URLComponents._URLComponents.port.getter();
      if (v21)
      {
        URLComponents._URLComponents.percentEncodedUser.getter();
        uint64_t v23 = v22;
        uint64_t v19 = swift_bridgeObjectRelease();
        if (!v23)
        {
          outlined release of URLComponents((uint64_t)&v62);
          uint64_t v34 = v54;
          goto LABEL_54;
        }
      }
      uint64_t v18 = 0;
      unint64_t v20 = 0xE000000000000000;
    }
    uint64_t v26 = v18 & 0xFFFFFFFFFFFFLL;
    if ((v20 & 0x2000000000000000) != 0) {
      uint64_t v27 = HIBYTE(v20) & 0xF;
    }
    else {
      uint64_t v27 = v18 & 0xFFFFFFFFFFFFLL;
    }
    if (!v27)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      outlined release of URLComponents((uint64_t)&v62);
LABEL_40:
      uint64_t v34 = v54;
      unint64_t v13 = v55;
LABEL_54:
      LOBYTE(v59[0]) = 3;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      swift_bridgeObjectRelease();
      v59[6] = v68;
      v59[7] = v69;
      v60[0] = *(_OWORD *)v70;
      *(_OWORD *)((char *)v60 + 10) = *(_OWORD *)&v70[10];
      v59[2] = v64;
      v59[3] = v65;
      v59[4] = v66;
      v59[5] = v67;
      v59[0] = v62;
      v59[1] = v63;
      URLComponents.port.getter();
      LOBYTE(v59[0]) = 4;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      outlined retain of URLComponents((uint64_t)&v62);
      URLComponents._URLComponents.path.getter();
      outlined release of URLComponents((uint64_t)&v62);
      LOBYTE(v59[0]) = 5;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      uint64_t v51 = outlined retain of URLComponents((uint64_t)&v62);
      URLComponents._URLComponents.query.getter(v51);
      outlined release of URLComponents((uint64_t)&v62);
      LOBYTE(v59[0]) = 6;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      swift_bridgeObjectRelease();
      uint64_t v52 = outlined retain of URLComponents((uint64_t)&v62);
      URLComponents._URLComponents.fragment.getter(v52);
      outlined release of URLComponents((uint64_t)&v62);
      LOBYTE(v59[0]) = 7;
      uint64_t v53 = v71;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v53);
      return swift_bridgeObjectRelease();
    }
    if (v70[24])
    {
      *(void *)&v59[0] = v18;
      *((void *)&v59[0] + 1) = v20;
      MEMORY[0x1F4188790](v19);
      uint64_t v28 = MEMORY[0x1E4FBC870];
      *(&v54 - 2) = (uint64_t)v59;
      *(&v54 - 1) = v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)(&v54 - 4), v18, v20);
      if (v29 == 1)
      {
        long long v30 = v59[0];
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v30, *((unint64_t *)&v30 + 1), MEMORY[0x1E4FBC870]);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
      uint64_t v34 = v54;
      unint64_t v13 = v55;
      outlined release of URLComponents((uint64_t)&v62);
      goto LABEL_54;
    }
    if ((v20 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((v20 & 0x2000000000000000) != 0)
      {
        *(void *)&v59[0] = v18;
        *((void *)&v59[0] + 1) = v20 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v57 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        uint64_t v58 = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v59, HIBYTE(v20) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v57, 0, (unsigned __int8 *)v59, HIBYTE(v20) & 0xF, v56);
        uint64_t v33 = v56[1];
        swift_release();
      }
      else
      {
        if ((v18 & 0x1000000000000000) != 0)
        {
          uint64_t v31 = (unsigned __int8 *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          uint64_t v31 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          uint64_t v26 = v48;
        }
        *(void *)&v59[0] = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v59[0] + 1) = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v31, v26, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v59, 0, v31, v26);
        uint64_t v33 = v32;
      }
      swift_bridgeObjectRelease();
      uint64_t v34 = v54;
      if (v33 != 1)
      {
        swift_bridgeObjectRelease_n();
LABEL_53:
        outlined release of URLComponents((uint64_t)&v62);
        unint64_t v13 = v55;
        goto LABEL_54;
      }
    }
    *(void *)&v59[0] = v18;
    *((void *)&v59[0] + 1) = v20;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    unint64_t v35 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v36 = objc_msgSend(v35, sel__fastCharacterContents);
    id v37 = v35;
    if (v36)
    {
      *(void *)&v59[0] = v18;
      *((void *)&v59[0] + 1) = v20;
      StringProtocol._ephemeralString.getter();
      unint64_t v38 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v39 = objc_msgSend(v38, sel_length);
      uint64_t v40 = swift_unknownObjectRelease();
      MEMORY[0x1F4188790](v40);
      *((unsigned char *)&v54 - 16) = 0;
      MEMORY[0x1F4188790](v41);
      *(&v54 - 2) = (uint64_t)v36;
      *(&v54 - 1) = (uint64_t)v39;
      specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)v36, (uint64_t)v39, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:), 0, (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, v42, (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply, (uint64_t)(&v54 - 4));
      swift_bridgeObjectRelease_n();
      outlined release of URLComponents((uint64_t)&v62);
      goto LABEL_40;
    }
    *(void *)&v59[0] = v18;
    *((void *)&v59[0] + 1) = v20;
    swift_bridgeObjectRetain();
    uint64_t v44 = String.init<A>(_:)();
    unint64_t v45 = v43;
    if ((v43 & 0x1000000000000000) != 0)
    {
      uint64_t v44 = static String._copying(_:)();
      unint64_t v50 = v49;
      swift_bridgeObjectRelease();
      unint64_t v45 = v50;
      uint64_t v34 = v54;
      if ((v50 & 0x2000000000000000) == 0) {
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v34 = v54;
      if ((v43 & 0x2000000000000000) == 0)
      {
LABEL_44:
        if ((v44 & 0x1000000000000000) != 0)
        {
          unint64_t v46 = (unsigned __int8 *)((v45 & 0xFFFFFFFFFFFFFFFLL) + 32);
          uint64_t v47 = v44 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          unint64_t v46 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
        }
        *(void *)&v59[0] = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
        *((void *)&v59[0] + 1) = 0;
        _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n((uint64_t)v46, v47, (uint64_t (**)(uint64_t, uint64_t, uint64_t))v59, 0, v46, v47);
        goto LABEL_52;
      }
    }
    *(void *)&v59[0] = v44;
    *((void *)&v59[0] + 1) = v45 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v57 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
    uint64_t v58 = 0;
    closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)((uint64_t)v59, HIBYTE(v45) & 0xF, (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v57, 0, (unsigned __int8 *)v59, HIBYTE(v45) & 0xF, v56);
    swift_release();
LABEL_52:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    goto LABEL_53;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v71);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance URLComponents@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return URLComponents.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance URLComponents(void *a1)
{
  return URLComponents.encode(to:)(a1);
}

unint64_t specialized Sequence.allSatisfy(_:)(unint64_t a1, unint64_t a2, int a3)
{
  int v18 = a3;
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v5 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v6 = 4 * v5;
  uint64_t v7 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v7) = 1;
  }
  uint64_t v8 = 4 << v7;
  uint64_t v16 = a2 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v15 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  unint64_t v9 = 15;
  while (1)
  {
    unint64_t v10 = v9 >> 14;
    if (v9 >> 14 == v6) {
      return v10 == v6;
    }
    unint64_t v11 = v9 & 0xC;
    unint64_t result = v9;
    if (v11 == v8) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v9, a1, a2);
    }
    unint64_t v13 = result >> 16;
    if (result >> 16 >= v5) {
      break;
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v14 = result;
      if (v11 != v8) {
        goto LABEL_18;
      }
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = v16;
      char v14 = *((unsigned char *)v17 + v13);
      if (v11 != v8) {
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t result = v15;
      if ((a1 & 0x1000000000000000) == 0) {
        unint64_t result = _StringObject.sharedUTF8.getter();
      }
      char v14 = *(unsigned char *)(result + v13);
      if (v11 != v8)
      {
LABEL_18:
        if ((a2 & 0x1000000000000000) == 0) {
          goto LABEL_19;
        }
        goto LABEL_23;
      }
    }
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v9, a1, a2);
    unint64_t v9 = result;
    if ((a2 & 0x1000000000000000) == 0)
    {
LABEL_19:
      unint64_t v9 = (v9 & 0xFFFFFFFFFFFF0000) + 65540;
      if (v14 < 0) {
        return v10 == v6;
      }
      goto LABEL_25;
    }
LABEL_23:
    if (v5 <= v9 >> 16) {
      goto LABEL_28;
    }
    unint64_t v9 = String.UTF8View._foreignIndex(after:)();
    if (v14 < 0) {
      return v10 == v6;
    }
LABEL_25:
    if ((UInt8.allowedURLComponents.getter(v14) & v18) == 0) {
      return v10 == v6;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *), uint64_t a4, uint64_t (*a5)(void), uint64_t a6, uint64_t (*a7)(uint64_t, void), uint64_t a8)
{
  uint64_t v8 = 0;
  _OWORD v24[3] = *MEMORY[0x1E4F143B8];
  if (a2 <= 2048)
  {
    if (one-time initialization token for idnaTranscoder != -1) {
      swift_once();
    }
    if (byte_1E8ED6298 == 1)
    {
      return 0;
    }
    else
    {
      uint64_t v17 = static UIDNAHookICU.idnaTranscoder;
      uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
      if (isStackAllocationSafe)
      {
        v24[1] = v24;
        MEMORY[0x1F4188790](isStackAllocationSafe);
        return specialized closure #1 in static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)((uint64_t)&v21, 2048, a1, a2, a3, a4, v17, a5, a6, a7);
      }
      else
      {
        uint64_t v23 = a8;
        uint64_t v22 = a6;
        uint64_t v19 = swift_slowAlloc();
        uint64_t v8 = specialized closure #1 in static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)(v19, 2048, a1, a2, a3, a4, v17, a5, v22, a7);
        MEMORY[0x185309510](v19, -1, -1);
      }
    }
  }
  return v8;
}

uint64_t specialized closure #1 in static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *), uint64_t a6, uint64_t a7, uint64_t (*a8)(void), uint64_t a9, uint64_t (*a10)(uint64_t, void))
{
  *(void *)&v18[7] = *MEMORY[0x1E4F143B8];
  __int16 v17 = 16;
  *(void *)int v18 = 0;
  *(void *)&id v18[3] = 0;
  int v16 = 0;
  if (!a3) {
    goto LABEL_16;
  }
  if (!a1) {
    goto LABEL_17;
  }
  if (a4 > 0x7FFFFFFF)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000 || a4 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_14;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  int v12 = a5(a7, a3, a4, a1, a2, &v17, &v16);
  if (v16 > 0) {
    return 0;
  }
  int v14 = v12;
  char v15 = a8(*(unsigned int *)&v18[1]);
  uint64_t result = 0;
  if ((v15 & 1) != 0 && v14 >= 1) {
    return a10(a1, v14);
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, int a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = result + 1;
  *(_DWORD *)(v3 + 4 * result + 32) = a2;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  int v14 = v11 + 32;
  char v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9]) {
      memmove(v14, v15, 32 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v9] || v14 >= &v15[32 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[v9]) {
      memmove(v13, v14, v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v9] || v13 >= &v14[v9])
  {
    memcpy(v13, v14, v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 29;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  int v14 = v11 + 32;
  char v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[4 * v9]) {
      memmove(v14, v15, 4 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v9] || v14 >= &v15[4 * v9])
  {
    memcpy(v14, v15, 4 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SSSg_Tg5(void *(*a1)(void *__return_ptr, void, void), uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if ((a6 & 0x1000000000000000) != 0) {
    return 0;
  }
  if ((a6 & 0x2000000000000000) != 0)
  {
    v13[0] = a5;
    v13[1] = a6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v11 = v13;
  }
  else if ((a5 & 0x1000000000000000) != 0)
  {
    unint64_t v11 = (void *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    unint64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  return _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SS_Tg5Tf4xnn_n(v11, a3, a4, a5, a6, a1);
}

uint64_t specialized static URLQueryItem.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v7 & 1) != 0))
  {
    uint64_t result = (v3 | v5) == 0;
    if (v3 && v5 != 0)
    {
      if (v2 == v4 && v3 == v5)
      {
        return 1;
      }
      else
      {
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
  }
  return result;
}

uint64_t specialized static URLComponents.== infix(_:_:)(long long *a1, long long *a2)
{
  long long v2 = a1[7];
  long long v92 = a1[6];
  long long v93 = v2;
  *(_OWORD *)unint64_t v94 = a1[8];
  *(_OWORD *)&v94[10] = *(long long *)((char *)a1 + 138);
  long long v3 = a1[3];
  long long v88 = a1[2];
  long long v89 = v3;
  long long v4 = a1[5];
  long long v90 = a1[4];
  long long v91 = v4;
  long long v5 = a1[1];
  long long v86 = *a1;
  long long v87 = v5;
  long long v6 = a2[7];
  long long v101 = a2[6];
  long long v102 = v6;
  *(_OWORD *)uint64_t v103 = a2[8];
  *(_OWORD *)&v103[10] = *(long long *)((char *)a2 + 138);
  long long v7 = a2[3];
  long long v97 = a2[2];
  long long v98 = v7;
  long long v8 = a2[5];
  long long v99 = a2[4];
  long long v100 = v8;
  long long v9 = a2[1];
  long long v95 = *a2;
  long long v96 = v9;
  uint64_t v10 = (unsigned char *)v86;
  unint64_t v11 = v93;
  if ((void)v93)
  {
    uint64_t v12 = *((void *)&v92 + 1);
    outlined retain of URLComponents((uint64_t)&v86);
    unint64_t v13 = v11;
  }
  else if (BYTE14(v86) == 1 && (void)v86)
  {
    if (*(unsigned char *)(v86 + 168))
    {
      outlined retain of URLComponents((uint64_t)&v86);
      uint64_t v14 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else
    {
      outlined retain of URLComponents((uint64_t)&v86);
      uint64_t v14 = String.subscript.getter();
    }
    uint64_t v12 = MEMORY[0x185301F50](v14);
    unint64_t v13 = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v86);
    uint64_t v12 = 0;
    unint64_t v13 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v86);
  int v16 = (unsigned char *)v95;
  unint64_t v17 = v102;
  if ((void)v102)
  {
    uint64_t v18 = *((void *)&v101 + 1);
    outlined retain of URLComponents((uint64_t)&v95);
    unint64_t v19 = v17;
  }
  else if (BYTE14(v95) == 1 && (void)v95)
  {
    if (*(unsigned char *)(v95 + 168))
    {
      outlined retain of URLComponents((uint64_t)&v95);
      uint64_t v20 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else
    {
      outlined retain of URLComponents((uint64_t)&v95);
      uint64_t v20 = String.subscript.getter();
    }
    uint64_t v18 = MEMORY[0x185301F50](v20);
    unint64_t v19 = v21;
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v95);
    uint64_t v18 = 0;
    unint64_t v19 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v95);
  if (v12 == v18 && v13 == v19)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v23 = 0;
    if ((v22 & 1) == 0) {
      return v23 & 1;
    }
  }
  uint64_t v24 = v88;
  if ((void)v88)
  {
    uint64_t v25 = *((void *)&v87 + 1);
    outlined retain of URLComponents((uint64_t)&v86);
    uint64_t v26 = v24;
  }
  else if (BYTE9(v86) == 1 && v10 && (v10[48] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v86);
    uint64_t v27 = String.subscript.getter();
    uint64_t v25 = MEMORY[0x185301F50](v27);
    uint64_t v26 = v28;
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v86);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v86);
  uint64_t v29 = v97;
  if ((void)v97)
  {
    uint64_t v30 = *((void *)&v96 + 1);
    outlined retain of URLComponents((uint64_t)&v95);
    uint64_t v31 = v29;
  }
  else if (BYTE9(v95) == 1 && v16 && (v16[48] & 1) == 0)
  {
    outlined retain of URLComponents((uint64_t)&v95);
    uint64_t v32 = String.subscript.getter();
    uint64_t v30 = MEMORY[0x185301F50](v32);
    uint64_t v31 = v33;
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined retain of URLComponents((uint64_t)&v95);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
  }
  swift_bridgeObjectRetain();
  outlined release of URLComponents((uint64_t)&v95);
  if (v26)
  {
    if (!v31) {
      goto LABEL_131;
    }
    if (v25 == v30 && v26 == v31)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v23 = 0;
      if ((v34 & 1) == 0) {
        return v23 & 1;
      }
    }
  }
  else if (v31)
  {
    goto LABEL_43;
  }
  outlined retain of URLComponents((uint64_t)&v86);
  uint64_t v35 = URLComponents._URLComponents.encodedHost.getter();
  uint64_t v37 = v36;
  outlined release of URLComponents((uint64_t)&v86);
  outlined retain of URLComponents((uint64_t)&v95);
  uint64_t v38 = URLComponents._URLComponents.encodedHost.getter();
  uint64_t v40 = v39;
  outlined release of URLComponents((uint64_t)&v95);
  if (v37)
  {
    if (!v40) {
      goto LABEL_131;
    }
    if (v35 == v38 && v37 == v40)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v23 = 0;
      if ((v41 & 1) == 0) {
        return v23 & 1;
      }
    }
  }
  else if (v40)
  {
    goto LABEL_51;
  }
  uint64_t v42 = URLComponents.port.getter();
  char v44 = v43;
  uint64_t v45 = URLComponents.port.getter();
  if (v44)
  {
    if ((v46 & 1) == 0)
    {
      char v23 = 0;
      return v23 & 1;
    }
    goto LABEL_59;
  }
  char v23 = 0;
  if ((v46 & 1) == 0 && v42 == v45)
  {
LABEL_59:
    uint64_t v47 = *(void *)v94;
    if (*(void *)v94)
    {
      uint64_t v48 = *((void *)&v93 + 1);
      outlined retain of URLComponents((uint64_t)&v86);
      uint64_t v49 = v47;
    }
    else if (HIBYTE(v86) == 1 && v10 && (v10[192] & 1) == 0)
    {
      outlined retain of URLComponents((uint64_t)&v86);
      uint64_t v50 = String.subscript.getter();
      uint64_t v48 = MEMORY[0x185301F50](v50);
      uint64_t v49 = v51;
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined retain of URLComponents((uint64_t)&v86);
      uint64_t v48 = 0;
      uint64_t v49 = 0;
    }
    swift_bridgeObjectRetain();
    outlined release of URLComponents((uint64_t)&v86);
    uint64_t v52 = *(void *)v103;
    if (*(void *)v103)
    {
      uint64_t v53 = *((void *)&v102 + 1);
      outlined retain of URLComponents((uint64_t)&v95);
      uint64_t v54 = v52;
    }
    else if (HIBYTE(v95) == 1 && v16 && (v16[192] & 1) == 0)
    {
      outlined retain of URLComponents((uint64_t)&v95);
      uint64_t v55 = String.subscript.getter();
      uint64_t v53 = MEMORY[0x185301F50](v55);
      uint64_t v54 = v56;
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined retain of URLComponents((uint64_t)&v95);
      uint64_t v53 = 0;
      uint64_t v54 = 0;
    }
    swift_bridgeObjectRetain();
    outlined release of URLComponents((uint64_t)&v95);
    if (v49)
    {
      if (!v54) {
        goto LABEL_131;
      }
      if (v48 == v53 && v49 == v54)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v23 = 0;
        if ((v57 & 1) == 0) {
          return v23 & 1;
        }
      }
    }
    else if (v54)
    {
      goto LABEL_43;
    }
    uint64_t v58 = *(void *)&v94[16];
    if (*(void *)&v94[16])
    {
      uint64_t v59 = *(void *)&v94[8];
      outlined retain of URLComponents((uint64_t)&v86);
      uint64_t v60 = v58;
    }
    else if (v87 == 1 && v10 && (v10[216] & 1) == 0)
    {
      outlined retain of URLComponents((uint64_t)&v86);
      uint64_t v61 = String.subscript.getter();
      uint64_t v59 = MEMORY[0x185301F50](v61);
      uint64_t v60 = v62;
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined retain of URLComponents((uint64_t)&v86);
      uint64_t v59 = 0;
      uint64_t v60 = 0;
    }
    swift_bridgeObjectRetain();
    outlined release of URLComponents((uint64_t)&v86);
    uint64_t v63 = *(void *)&v103[16];
    if (*(void *)&v103[16])
    {
      uint64_t v64 = *(void *)&v103[8];
      outlined retain of URLComponents((uint64_t)&v95);
      uint64_t v65 = v63;
    }
    else if (v96 == 1 && v16 && (v16[216] & 1) == 0)
    {
      outlined retain of URLComponents((uint64_t)&v95);
      uint64_t v66 = String.subscript.getter();
      uint64_t v64 = MEMORY[0x185301F50](v66);
      uint64_t v65 = v67;
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined retain of URLComponents((uint64_t)&v95);
      uint64_t v64 = 0;
      uint64_t v65 = 0;
    }
    swift_bridgeObjectRetain();
    outlined release of URLComponents((uint64_t)&v95);
    if (v60)
    {
      if (!v65) {
        goto LABEL_131;
      }
      if (v59 == v64 && v60 == v65)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v23 = 0;
        if ((v68 & 1) == 0) {
          return v23 & 1;
        }
      }
      goto LABEL_103;
    }
    if (!v65)
    {
LABEL_103:
      uint64_t v69 = URLComponents.percentEncodedUser.getter();
      uint64_t v71 = v70;
      uint64_t v72 = URLComponents.percentEncodedUser.getter();
      if (v71)
      {
        if (!v73) {
          goto LABEL_131;
        }
        if (v69 == v72 && v71 == v73)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v23 = 0;
          if ((v74 & 1) == 0) {
            return v23 & 1;
          }
        }
        goto LABEL_111;
      }
      if (!v73)
      {
LABEL_111:
        uint64_t v75 = v90;
        if ((void)v90)
        {
          uint64_t v76 = *((void *)&v89 + 1);
          outlined retain of URLComponents((uint64_t)&v86);
          uint64_t v77 = v75;
        }
        else if (BYTE11(v86) == 1 && v10 && (v10[96] & 1) == 0)
        {
          outlined retain of URLComponents((uint64_t)&v86);
          uint64_t v78 = String.subscript.getter();
          uint64_t v76 = MEMORY[0x185301F50](v78);
          uint64_t v77 = v79;
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined retain of URLComponents((uint64_t)&v86);
          uint64_t v76 = 0;
          uint64_t v77 = 0;
        }
        swift_bridgeObjectRetain();
        outlined release of URLComponents((uint64_t)&v86);
        uint64_t v80 = v99;
        if ((void)v99)
        {
          uint64_t v81 = *((void *)&v98 + 1);
          outlined retain of URLComponents((uint64_t)&v95);
          uint64_t v82 = v80;
        }
        else if (BYTE11(v95) == 1 && v16 && (v16[96] & 1) == 0)
        {
          outlined retain of URLComponents((uint64_t)&v95);
          uint64_t v83 = String.subscript.getter();
          uint64_t v81 = MEMORY[0x185301F50](v83);
          uint64_t v82 = v84;
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined retain of URLComponents((uint64_t)&v95);
          uint64_t v81 = 0;
          uint64_t v82 = 0;
        }
        swift_bridgeObjectRetain();
        outlined release of URLComponents((uint64_t)&v95);
        if (v77)
        {
          if (v82)
          {
            if (v76 == v81 && v77 == v82)
            {
              swift_bridgeObjectRelease();
              char v23 = 1;
            }
            else
            {
              char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
            }
            goto LABEL_132;
          }
          goto LABEL_51;
        }
        if (!v82)
        {
          char v23 = 1;
          return v23 & 1;
        }
LABEL_131:
        char v23 = 0;
        goto LABEL_132;
      }
LABEL_51:
      char v23 = 0;
      goto LABEL_132;
    }
LABEL_43:
    char v23 = 0;
LABEL_132:
    swift_bridgeObjectRelease();
  }
  return v23 & 1;
}

uint64_t specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unsigned __int8 a7)
{
  if (!a1)
  {
LABEL_50:
    __break(1u);
    JUMPOUT(0x181AD5AF4);
  }
  unint64_t v30 = a4 >> 14;
  if (a4 >> 14 == a3 >> 14)
  {
    uint64_t v10 = 0;
    goto LABEL_43;
  }
  uint64_t v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v29 = 4 << v13;
  uint64_t v14 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000) == 0) {
    uint64_t v14 = a5 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v27 = v14;
  unsigned __int8 v28 = a7 & 0xF6;
  unsigned __int8 v24 = a7 & 0xF7;
  int v25 = a7 & 0x76;
  unsigned __int8 v23 = a7 & 0xD2;
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  unint64_t v15 = a3;
  while (2)
  {
    unsigned __int8 v16 = Substring.UTF8View.subscript.getter();
    if ((v15 & 0xC) == v29)
    {
      unint64_t v15 = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a5, a6);
      if ((a6 & 0x1000000000000000) == 0)
      {
LABEL_13:
        unint64_t v15 = (v15 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_17;
      }
    }
    else if ((a6 & 0x1000000000000000) == 0)
    {
      goto LABEL_13;
    }
    if (v27 <= v15 >> 16) {
      goto LABEL_46;
    }
    unint64_t v15 = String.UTF8View._foreignIndex(after:)();
LABEL_17:
    switch(v16)
    {
      case '!':
      case '$':
      case '\'':
      case '(':
      case ')':
      case '*':
      case ',':
LABEL_18:
        unsigned __int8 v18 = v28;
        goto LABEL_34;
      case '&':
LABEL_22:
        if (!v25) {
          goto LABEL_38;
        }
        goto LABEL_35;
      case '+':
        unsigned __int8 v18 = v24;
        goto LABEL_34;
      case '-':
      case '.':
        goto LABEL_33;
      case '/':
LABEL_24:
        if (a7 < 0x10u) {
          goto LABEL_38;
        }
        goto LABEL_35;
      default:
        if ((v16 - 58) <= 0xF5u)
        {
          switch(v16)
          {
            case ':':
              unsigned __int8 v18 = v23;
              goto LABEL_34;
            case ';':
              goto LABEL_18;
            case '=':
              goto LABEL_22;
            case '?':
              if (a7 < 0x40u) {
                goto LABEL_38;
              }
              goto LABEL_35;
            case '@':
              goto LABEL_24;
            default:
              if ((v16 - 91) > 0xE5u) {
                break;
              }
              if (v16 == 95) {
                goto LABEL_31;
              }
              if ((v16 - 123) > 0xE5u) {
                break;
              }
              if (v16 != 126) {
                goto LABEL_38;
              }
LABEL_31:
              if (a7 < 2u) {
                goto LABEL_38;
              }
              goto LABEL_35;
          }
        }
LABEL_33:
        unsigned __int8 v18 = a7;
LABEL_34:
        if (v18)
        {
LABEL_35:
          if (v10 < a2)
          {
            uint64_t v19 = v10;
            uint64_t v17 = 1;
            goto LABEL_10;
          }
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
LABEL_38:
        if (v10 >= a2) {
          goto LABEL_47;
        }
        *(unsigned char *)(a1 + v10) = 37;
        char v20 = specialized StringProtocol.hexToAscii(_:)(v16 >> 4);
        if (v10 + 1 >= a2) {
          goto LABEL_48;
        }
        *(unsigned char *)(a1 + v10 + 1) = v20;
        uint64_t v19 = v10 + 2;
        unsigned __int8 v21 = specialized StringProtocol.hexToAscii(_:)(v16 & 0xF);
        if (v10 + 2 < a2)
        {
          unsigned __int8 v16 = v21;
          uint64_t v17 = 3;
LABEL_10:
          *(unsigned char *)(a1 + v19) = v16;
          v10 += v17;
          if (v30 == v15 >> 14) {
            goto LABEL_42;
          }
          continue;
        }
        __break(1u);
LABEL_42:
        swift_bridgeObjectRelease();
LABEL_43:
        if (v10 >= a2)
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        *(unsigned char *)(a1 + v10) = 0;
        return String.init(cString:)();
    }
  }
}

uint64_t specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 a5)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  int64_t isStackAllocationSafe = specialized Collection.count.getter(a1, a2, a3, a4);
  uint64_t v11 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_9:
    __break(1u);
  }
  if (v11 < -1) {
    goto LABEL_9;
  }
  uint64_t v12 = v11 + 1;
  if (v11 < 1024 || (int64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    return specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)((uint64_t)v17 - v13, v12, a1, a2, a3, a4, a5);
  }
  else
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v14 = specialized closure #1 in StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v15, v12, a1, a2, a3, a4, a5);
    MEMORY[0x185309510](v15, -1, -1);
  }
  return v14;
}

uint64_t specialized BidirectionalCollection.suffix(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v4 = String.index(_:offsetBy:limitedBy:)();
  if (v5) {
    unint64_t v4 = 15;
  }
  if (4 * v3 < v4 >> 14)
  {
LABEL_12:
    __break(1u);
    JUMPOUT(0x181AD5DB0);
  }

  return String.subscript.getter();
}

BOOL partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)(int a1)
{
  return closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)(a1, *(unsigned char *)(v1 + 16));
}

uint64_t partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)(a1, a2, *(unsigned __int16 **)(v2 + 16), *(void *)(v2 + 24));
}

double specialized URLComponents.percentEncodedQueryItems.setter(uint64_t a1)
{
  uint64_t v2 = (void *)v1;
  *(unsigned char *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 15) = 0;
  if (!a1)
  {
    swift_bridgeObjectRelease();
    *(void *)(v1 + 120) = 0;
    *(void *)(v1 + 128) = 0;
    return result;
  }
  int64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    double result = 0.0;
    *(_OWORD *)(v1 + 120) = xmmword_182107DC0;
    return result;
  }
  unint64_t v44 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  char v5 = (unint64_t *)(a1 + 56);
  while (1)
  {
    unint64_t v7 = *(v5 - 3);
    unint64_t v6 = *(v5 - 2);
    unint64_t v9 = *(v5 - 1);
    unint64_t v8 = *v5;
    if ((v6 & 0x1000000000000000) != 0)
    {
      unint64_t v42 = *(v5 - 3);
      uint64_t v43 = v6;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      id v40 = (id)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      char v20 = (unsigned __int16 *)objc_msgSend(v40, sel__fastCharacterContents);
      id v21 = v40;
      if (v20)
      {
        unint64_t v42 = v7;
        uint64_t v43 = v6;
        StringProtocol._ephemeralString.getter();
        id v37 = (id)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v38 = objc_msgSend(v37, sel_length);
        swift_unknownObjectRelease();
        char v22 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v20, (uint64_t)v38, 0x80u, 1);
      }
      else
      {
        char v22 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v7, v6, 0x80u, 1);
      }
      char v29 = v22;
      swift_bridgeObjectRelease_n();
      if ((v29 & 1) == 0) {
        goto LABEL_37;
      }
    }
    else
    {
      if ((v6 & 0x2000000000000000) != 0)
      {
        uint64_t v11 = HIBYTE(v6) & 0xF;
        unint64_t v42 = *(v5 - 3);
        uint64_t v43 = v6 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v10 = (char *)&v42;
      }
      else if ((v7 & 0x1000000000000000) != 0)
      {
        uint64_t v10 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        uint64_t v11 = v7 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v10 = (char *)_StringObject.sharedUTF8.getter();
      }
      BOOL v12 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v10, v11, 0x80u, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v12) {
        goto LABEL_37;
      }
    }
    unint64_t v42 = v7;
    uint64_t v43 = v6;
    if (v8) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_19:
    unint64_t v8 = v44;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1);
      unint64_t v8 = v44;
    }
    unint64_t v18 = *(void *)(v8 + 16);
    unint64_t v17 = *(void *)(v8 + 24);
    if (v18 >= v17 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      unint64_t v8 = v44;
    }
    v5 += 4;
    *(void *)(v8 + 16) = v18 + 1;
    unint64_t v19 = v8 + 16 * v18;
    *(void *)(v19 + 32) = v7;
    *(void *)(v19 + 40) = v6;
    if (!--v4) {
      goto LABEL_38;
    }
  }
  if ((v8 & 0x1000000000000000) == 0)
  {
    if ((v8 & 0x2000000000000000) != 0)
    {
      uint64_t v14 = HIBYTE(v8) & 0xF;
      v41._unint64_t countAndFlagsBits = v9;
      v41._unint64_t object = (void *)(v8 & 0xFFFFFFFFFFFFFFLL);
      uint64_t v13 = (char *)&v41;
    }
    else if ((v9 & 0x1000000000000000) != 0)
    {
      uint64_t v13 = (char *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v14 = v9 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v13 = (char *)_StringObject.sharedUTF8.getter();
    }
    BOOL v15 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v13, v14, 0x40u, 1);
    swift_bridgeObjectRetain();
    if (!v15) {
      goto LABEL_36;
    }
    goto LABEL_18;
  }
  v41._unint64_t countAndFlagsBits = v9;
  v41._unint64_t object = (void *)v8;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  StringProtocol._ephemeralString.getter();
  unsigned __int8 v23 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  unsigned __int8 v24 = (unsigned __int16 *)objc_msgSend(v23, sel__fastCharacterContents);
  id v25 = v23;
  if (v24)
  {
    v41._unint64_t countAndFlagsBits = v9;
    v41._unint64_t object = (void *)v8;
    uint64_t v39 = v24;
    StringProtocol._ephemeralString.getter();
    uint64_t v26 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v27 = objc_msgSend(v26, sel_length);
    swift_unknownObjectRelease();
    char v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v39, (uint64_t)v27, 0x40u, 1);
  }
  else
  {
    char v28 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v8, 0x40u, 1);
  }
  char v30 = v28;
  swift_bridgeObjectRelease_n();
  if (v30)
  {
LABEL_18:
    v41._unint64_t countAndFlagsBits = 61;
    v41._unint64_t object = (void *)0xE100000000000000;
    v16._unint64_t countAndFlagsBits = v9;
    v16._unint64_t object = (void *)v8;
    String.append(_:)(v16);
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v7 = v42;
    unint64_t v6 = v43;
    goto LABEL_19;
  }
LABEL_36:
  swift_bridgeObjectRelease();
LABEL_37:
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  uint64_t v31 = (void *)swift_allocError();
  *uint64_t v32 = 7;
  uint64_t v2 = v31;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_38:
  unint64_t v42 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  uint64_t v33 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v35 = v34;
  swift_release();
  swift_bridgeObjectRelease();
  v2[15] = v33;
  v2[16] = v35;
  return result;
}

unint64_t lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError()
{
  unint64_t result = lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError;
  if (!lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError;
  if (!lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError);
  }
  return result;
}

uint64_t *outlined release of URLComponents?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of URLComponents?(uint64_t result)
{
  if (result != 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URLComponents and conformance URLComponents()
{
  unint64_t result = lazy protocol witness table cache variable for type URLComponents and conformance URLComponents;
  if (!lazy protocol witness table cache variable for type URLComponents and conformance URLComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents and conformance URLComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLComponents and conformance URLComponents;
  if (!lazy protocol witness table cache variable for type URLComponents and conformance URLComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents and conformance URLComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLComponents and conformance URLComponents;
  if (!lazy protocol witness table cache variable for type URLComponents and conformance URLComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents and conformance URLComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLComponents and conformance URLComponents;
  if (!lazy protocol witness table cache variable for type URLComponents and conformance URLComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents and conformance URLComponents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLComponents and conformance URLComponents;
  if (!lazy protocol witness table cache variable for type URLComponents and conformance URLComponents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents and conformance URLComponents);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem()
{
  unint64_t result = lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem;
  if (!lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem;
  if (!lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem;
  if (!lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem;
  if (!lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem;
  if (!lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLQueryItem and conformance URLQueryItem);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLComponents.CodingKeys and conformance URLComponents.CodingKeys);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for URLComponents(void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for URLComponents(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type URLComponents and conformance URLComponents, (uint64_t (*)(void))lazy protocol witness table accessor for type URLComponents and conformance URLComponents, (uint64_t (*)(void))lazy protocol witness table accessor for type URLComponents and conformance URLComponents, (uint64_t (*)(void))lazy protocol witness table accessor for type URLComponents and conformance URLComponents);
}

uint64_t instantiation function for generic protocol witness table for URLQueryItem(void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for URLComponents(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem, (uint64_t (*)(void))lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem, (uint64_t (*)(void))lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem, (uint64_t (*)(void))lazy protocol witness table accessor for type URLQueryItem and conformance URLQueryItem);
}

uint64_t instantiation function for generic protocol witness table for URLComponents(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  a1[3] = a6();
  uint64_t result = a7();
  a1[4] = result;
  return result;
}

uint64_t sub_181AD6980@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = URLComponents.scheme.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181AD69AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for URLComponents.scheme : URLComponents(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))URLComponents._URLComponents.setScheme(_:));
}

uint64_t sub_181AD69F4@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents(a1, (uint64_t (*)(uint64_t))URLComponents._URLComponents.user.getter, a2);
}

uint64_t sub_181AD6A20(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_59Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.user.setter);
}

uint64_t sub_181AD6A38@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents(a1, (uint64_t (*)(uint64_t))URLComponents._URLComponents.password.getter, a2);
}

uint64_t sub_181AD6A64(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_59Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.password.setter);
}

uint64_t sub_181AD6A7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = URLComponents.host.getter(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_181AD6AA8(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return URLComponents._URLComponents.host.setter(v1, v2);
}

uint64_t sub_181AD6AE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = URLComponents.port.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_181AD6B24(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return URLComponents._URLComponents.path.setter(v1, v2);
}

uint64_t sub_181AD6B64@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents(a1, (uint64_t (*)(uint64_t))URLComponents._URLComponents.query.getter, a2);
}

uint64_t sub_181AD6B90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_59Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.query.setter);
}

uint64_t sub_181AD6BA8@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents(a1, (uint64_t (*)(uint64_t))URLComponents._URLComponents.fragment.getter, a2);
}

uint64_t sub_181AD6BD4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_59Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.fragment.setter);
}

uint64_t sub_181AD6BEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = URLComponents.percentEncodedUser.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181AD6C18(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_59Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.percentEncodedUser.setter);
}

uint64_t sub_181AD6C30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = URLComponents.percentEncodedPassword.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181AD6C5C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_59Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.percentEncodedPassword.setter);
}

uint64_t sub_181AD6C74@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents(a1, (uint64_t (*)(uint64_t))URLComponents._URLComponents.percentEncodedHost.getter, a2);
}

uint64_t sub_181AD6CA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for URLComponents.scheme : URLComponents(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))URLComponents._URLComponents.setPercentEncodedHost(_:));
}

uint64_t sub_181AD6CE8@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for URLComponents.user : URLComponents(a1, (uint64_t (*)(uint64_t))URLComponents._URLComponents.encodedHost.getter, a2);
}

uint64_t sub_181AD6D14(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_59Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.encodedHost.setter);
}

uint64_t sub_181AD6D2C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = URLComponents.percentEncodedPath.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181AD6D58(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return URLComponents.percentEncodedPath.setter(v1, v2);
}

uint64_t sub_181AD6D98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = URLComponents.percentEncodedQuery.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181AD6DC4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_59Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.percentEncodedQuery.setter);
}

uint64_t sub_181AD6DDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = URLComponents.percentEncodedFragment.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_181AD6E08(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_59Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))URLComponents.percentEncodedFragment.setter);
}

uint64_t keypath_set_59Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v6, v7);
}

uint64_t sub_181AD6E68@<X0>(_OWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  return key path getter for URLComponents.queryItems : URLComponents(a1, 0, a2);
}

uint64_t sub_181AD6E84()
{
  v2.value._rawValue = (void *)swift_bridgeObjectRetain();
  URLComponents._URLComponents.setQueryItems(_:)(v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_181AD6EC8@<X0>(_OWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  return key path getter for URLComponents.queryItems : URLComponents(a1, 1, a2);
}

uint64_t sub_181AD6EE4()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized URLComponents.percentEncodedQueryItems.setter(v0);

  return swift_bridgeObjectRelease();
}

void *assignWithCopy for URLQueryItem(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for URLQueryItem(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

unsigned char *storeEnumTagSinglePayload for URLComponents.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181AD70B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

void *type metadata accessor for URLComponents.CodingKeys()
{
  return &unk_1ECA344A0;
}

uint64_t getEnumTagSinglePayload for URLComponents.InvalidComponentError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for URLComponents.InvalidComponentError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181AD7248);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for URLComponents.InvalidComponentError()
{
  return &type metadata for URLComponents.InvalidComponentError;
}

uint64_t assignWithCopy for URLComponents(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(a1 + 15) = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v4;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  return a1;
}

uint64_t assignWithTake for URLComponents(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(a1 + 15) = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  return a1;
}

unint64_t specialized URLComponents.CodingKeys.init(rawValue:)(unint64_t result)
{
  if (result >= 8) {
    return 8;
  }
  return result;
}

uint64_t specialized URLComponents.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656D65686373 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1919251317 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64726F7773736170 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1953722216 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1953656688 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1752457584 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7972657571 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x746E656D67617266 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t sub_181AD79E4()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181AD7A1C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181AD7A2C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

double _s10Foundation13URLComponentsV01_B0VSgWOi0_(uint64_t a1)
{
  *(void *)a1 = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_WORD *)(a1 + 152) = 0;
  return result;
}

uint64_t specialized static Comparable.> infix(_:_:)()
{
  return static BigString.Index.< infix(_:_:)();
}

BOOL specialized static Comparable.> infix(_:_:)(double a1, double a2, double a3, double a4)
{
  BOOL result = a3 < a1;
  if (a1 >= a3 && a1 <= a3) {
    return a4 < a2;
  }
  return result;
}

uint64_t specialized Sequence.reduce<A>(into:_:)(uint64_t result, void (*a2)(uint64_t *, uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = result;
  uint64_t v7 = a5 - a4;
  if (a5 != a4)
  {
    for (uint64_t i = (_OWORD *)(a6 + 24 * a4 + 8); ; uint64_t i = (_OWORD *)((char *)i + 24))
    {
      uint64_t v10 = *((void *)i - 1);
      long long v11 = *i;
      swift_unknownObjectRetain();
      a2(&v12, &v10);
      BOOL result = swift_unknownObjectRelease();
      if (v6) {
        break;
      }
      if (!--v7) {
        return v12;
      }
    }
  }
  return result;
}

uint64_t specialized Sequence.reduce<A>(into:_:)(uint64_t result, void (*a2)(uint64_t *, void *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = result;
  uint64_t v7 = a5 - a4;
  if (a5 != a4)
  {
    for (uint64_t i = (uint64_t *)(a6 + 24 * a4 + 16); ; i += 3)
    {
      uint64_t v10 = *(i - 1);
      uint64_t v11 = *i;
      v12[0] = *(i - 2);
      v12[1] = v10;
      _OWORD v12[2] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a2(&v13, v12);
      swift_bridgeObjectRelease();
      BOOL result = swift_bridgeObjectRelease();
      if (v6) {
        break;
      }
      if (!--v7) {
        return v13;
      }
    }
  }
  return result;
}

BOOL static AttributedString.AttributeMergePolicy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AttributedString.AttributeMergePolicy.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int AttributedString.AttributeMergePolicy.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AttributedStringProtocol.mergingAttributes(_:mergePolicy:)@<X0>(long long *a1@<X0>, ValueMetadata *a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  double v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (uint64_t *)((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v13 = *v12;
  (*(void (**)(uint64_t *, uint64_t, double))(v14 + 16))(v11, v4, v9);
  AttributedString.init<A>(_:)(v11, a2, a3, a4);
  long long v18 = *a1;
  char v17 = v13;
  return AttributedString.mergeAttributes(_:mergePolicy:)((uint64_t *)&v18, &v17);
}

uint64_t AttributedStringProtocol.replacingAttributes(_:with:)@<X0>(long long *a1@<X0>, long long *a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  double v11 = MEMORY[0x1F4188790](a1);
  char v13 = (uint64_t *)((char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, double))(v14 + 16))(v13, v5, v11);
  AttributedString.init<A>(_:)(v13, a3, a4, a5);
  long long v15 = *a1;
  long long v17 = *a2;
  long long v18 = v15;
  return AttributedString.replaceAttributes(_:with:)((uint64_t *)&v18, (uint64_t *)&v17);
}

uint64_t AttributedStringProtocol.description.getter(ValueMetadata *a1, void (**a2)(void *__return_ptr, void, void))
{
  if (a1 == &type metadata for AttributedString || a1 == &type metadata for AttributedSubstring)
  {
    uint64_t countAndFlagsBits = *v2;
    swift_retain();
  }
  else
  {
    ((void (**)(Swift::String *__return_ptr, ValueMetadata *, void))a2)[7](&v188, a1, a2);
    uint64_t countAndFlagsBits = v188._countAndFlagsBits;
  }
  ((void (**)(Swift::String *__return_ptr, ValueMetadata *, void))a2)[4](&v188, a1, a2);
  Swift::String v167 = v188;
  uint64_t v7 = *((void *)&v189 + 1);
  uint64_t v6 = v189;
  ((void (**)(Swift::String *__return_ptr, ValueMetadata *, void))a2)[5](&v177, a1, a2);
  Swift::String v221 = v167;
  uint64_t v222 = v6;
  uint64_t v223 = v7;
  Swift::String v224 = v177;
  long long v225 = v178;
  uint64_t v186 = 0;
  unint64_t v187 = 0xE000000000000000;
  uint64_t v8 = swift_retain();
  AttributedString.Runs.init(_:in:)(v8, &v177);
  long long v194 = v183;
  long long v195 = v184;
  uint64_t v196 = v185;
  *(_OWORD *)&v192[32] = *(_OWORD *)&v181[32];
  *(_OWORD *)&v192[48] = *(_OWORD *)&v181[48];
  *(_OWORD *)&v192[64] = *(_OWORD *)&v181[64];
  long long v193 = v182;
  long long v190 = v179;
  long long v191 = v180;
  *(_OWORD *)uint64_t v192 = *(_OWORD *)v181;
  *(_OWORD *)&v192[16] = *(_OWORD *)&v181[16];
  Swift::String v188 = v177;
  long long v189 = v178;
  long long v145 = *(_OWORD *)&v192[8];
  uint64_t v9 = *(void *)&v181[8];
  unint64_t object = v177._object;
  uint64_t v11 = v177._countAndFlagsBits;
  if (v177._object == *(void **)&v181[8])
  {
    uint64_t v12 = 0;
    goto LABEL_158;
  }
  long long v13 = v189;
  uint64_t v14 = v190;
  uint64_t v143 = *((void *)&v191 + 1);
  uint64_t v15 = v191;
  uint64_t v144 = *((void *)&v190 + 1);
  long long v139 = *(_OWORD *)&v192[40];
  long long v140 = *(_OWORD *)&v192[24];
  long long v138 = *(_OWORD *)&v192[56];
  uint64_t v16 = *(void *)v192;
  uint64_t v135 = v193;
  uint64_t v136 = *(void *)&v192[72];
  uint64_t v151 = v194;
  uint64_t v152 = *((void *)&v193 + 1);
  uint64_t v149 = v195;
  uint64_t v150 = *((void *)&v194 + 1);
  char v134 = (long long *)(countAndFlagsBits + 16);
  uint64_t v147 = v196;
  uint64_t v148 = *((void *)&v195 + 1);
  uint64_t result = outlined retain of AttributedString.Runs((uint64_t)&v188);
  unint64_t v146 = (long long *)(v11 + 16);
  uint64_t v159 = v13;
  uint64_t v160 = v14;
  uint64_t v141 = v15;
  uint64_t v142 = v14;
  uint64_t v18 = v143;
  unint64_t v153 = *((void *)&v13 + 1);
  uint64_t v154 = v144;
  uint64_t v137 = v16;
  uint64_t v19 = v16;
  uint64_t v20 = (uint64_t)object;
  unint64_t v158 = (void *)v11;
  unint64_t v132 = object;
  uint64_t v133 = v9;
  while (2)
  {
    if (v20 >= v9) {
      goto LABEL_163;
    }
    v177._uint64_t countAndFlagsBits = v11;
    v177._unint64_t object = object;
    long long v178 = v13;
    *(void *)&long long v179 = v142;
    *((void *)&v179 + 1) = v144;
    *(void *)&long long v180 = v141;
    *((void *)&v180 + 1) = v143;
    *(_OWORD *)&v181[8] = v145;
    *(_OWORD *)&v181[24] = v140;
    *(_OWORD *)&v181[40] = v139;
    *(_OWORD *)&v181[56] = v138;
    *(void *)long long v181 = v137;
    *(void *)&v181[72] = v136;
    *(void *)&long long v182 = v135;
    *((void *)&v182 + 1) = v152;
    *(void *)&long long v183 = v151;
    *((void *)&v183 + 1) = v150;
    *(void *)&long long v184 = v149;
    *((void *)&v184 + 1) = v148;
    uint64_t v185 = v147;
    v176[0] = v20;
    v176[1] = v159;
    v176[2] = v153;
    v176[3] = v160;
    v176[4] = v154;
    v176[5] = v15;
    v176[6] = v18;
    uint64_t v165 = v19;
    v176[7] = v19;
    uint64_t result = (uint64_t)AttributedString.Runs._resolve(_:)(v176, &v168._countAndFlagsBits);
    if (v168._countAndFlagsBits != *(void *)(v11 + 88))
    {
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
      goto LABEL_167;
    }
    uint64_t v163 = v20;
    unint64_t v22 = (unint64_t)v168._object;
    uint64_t v23 = *((void *)&v170 + 1);
    long long v25 = v171;
    uint64_t v24 = v172;
    if ((void)v169)
    {
      uint64_t v26 = v169 + 24 * (((unint64_t)v168._object >> ((4 * *(unsigned char *)(v169 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v27 = *(void *)(v26 + 32);
      unint64_t v156 = *(void *)(v26 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v28 = *((void *)&v170 + 1);
      uint64_t v29 = *(void *)(v11 + 64);
      swift_retain();
      swift_unknownObjectRetain();
      unint64_t v156 = specialized Rope._Node.subscript.getter(v22, v29);
      uint64_t v27 = v30;
      uint64_t v23 = v28;
      swift_unknownObjectRelease();
    }
    char v31 = static BigString.Index.< infix(_:_:)();
    if (v31) {
      uint64_t v32 = v23;
    }
    else {
      uint64_t v32 = v136;
    }
    if (v31) {
      uint64_t v33 = v25;
    }
    else {
      uint64_t v33 = v135;
    }
    if (v31) {
      uint64_t v34 = *((void *)&v25 + 1);
    }
    else {
      uint64_t v34 = v152;
    }
    if (v31) {
      uint64_t v35 = v24;
    }
    else {
      uint64_t v35 = v151;
    }
    uint64_t result = BigString.Index.utf8Offset.getter();
    uint64_t v36 = result + v156;
    if (__OFADD__(result, v156)) {
      goto LABEL_165;
    }
    uint64_t v37 = BigString.Index.utf8Offset.getter();
    if (v37 >= v36) {
      uint64_t v38 = v36;
    }
    else {
      uint64_t v38 = v37;
    }
    long long v39 = *v146;
    long long v40 = v146[1];
    long long v220 = v146[2];
    v219[1] = v40;
    v219[0] = v39;
    long long v41 = *v146;
    long long v42 = v146[1];
    v226[2] = v220;
    v226[1] = v42;
    v226[0] = v41;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v226, (uint64_t)v227);
    outlined retain of Locale((uint64_t)v227);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v219);
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (__OFSUB__(v38, result)) {
      goto LABEL_166;
    }
    uint64_t v43 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    outlined release of Locale((uint64_t)v197);
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result)
    {
LABEL_167:
      __break(1u);
      goto LABEL_168;
    }
    uint64_t v202 = v32;
    uint64_t v203 = v33;
    uint64_t v204 = v34;
    uint64_t v205 = v35;
    uint64_t v206 = v43;
    uint64_t v207 = v45;
    uint64_t v208 = v47;
    uint64_t v209 = v49;
    uint64_t v50 = v159;
    uint64_t v51 = v158[8];
    uint64_t v52 = v158[9];
    uint64_t v155 = v158[10];
    uint64_t v157 = v158[11];
    if (v160 == 1 || v159 != v158[11])
    {
      if (v51) {
        uint64_t v59 = v158[9];
      }
      else {
        uint64_t v59 = 0;
      }
      uint64_t v53 = v163;
      if (v163 < 0 || v59 < v163)
      {
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
        goto LABEL_181;
      }
      if (v51)
      {
        if (v163 < v52 && *(_WORD *)(v51 + 16))
        {
          uint64_t v60 = v158[9];
          uint64_t v61 = *(unsigned __int8 *)(v51 + 18);
          if (*(unsigned char *)(v51 + 18))
          {
            swift_unknownObjectRetain_n();
            uint64_t result = swift_retain();
            uint64_t v62 = v163;
            uint64_t v63 = v51;
            while (1)
            {
              unint64_t v66 = *(unsigned __int16 *)(v63 + 16);
              if (*(_WORD *)(v63 + 16))
              {
                uint64_t v67 = *(void *)(v63 + 32);
                BOOL v68 = __OFSUB__(v62, v67);
                uint64_t v69 = v62 - v67;
                if (v68) {
                  goto LABEL_161;
                }
                if (__OFADD__(v69, 1)) {
                  goto LABEL_162;
                }
                if (v69 + 1 <= 0)
                {
                  unint64_t v66 = 0;
                  goto LABEL_50;
                }
                if (v66 != 1)
                {
                  uint64_t v70 = *(void *)(v63 + 56);
                  uint64_t v62 = v69 - v70;
                  if (__OFSUB__(v69, v70)) {
                    goto LABEL_175;
                  }
                  if (__OFADD__(v62, 1)) {
                    goto LABEL_176;
                  }
                  if (v62 + 1 < 1)
                  {
                    unint64_t v66 = 1;
                    uint64_t v62 = v69;
                    goto LABEL_50;
                  }
                  if (v66 == 2) {
                    goto LABEL_49;
                  }
                  uint64_t v71 = *(void *)(v63 + 80);
                  BOOL v68 = __OFSUB__(v62, v71);
                  uint64_t v69 = v62 - v71;
                  if (v68) {
                    goto LABEL_179;
                  }
                  if (__OFADD__(v69, 1)) {
                    goto LABEL_180;
                  }
                  if (v69 + 1 < 1)
                  {
                    unint64_t v66 = 2;
                    goto LABEL_50;
                  }
                  if (v66 != 3)
                  {
                    uint64_t v72 = 3;
                    if (v66 > 3) {
                      uint64_t v72 = *(unsigned __int16 *)(v63 + 16);
                    }
                    uint64_t v73 = (void *)(v63 + 104);
                    uint64_t v74 = 3;
                    while (1)
                    {
                      if (v72 == v74) {
                        goto LABEL_171;
                      }
                      uint64_t v62 = v69 - *v73;
                      if (__OFSUB__(v69, *v73)) {
                        goto LABEL_172;
                      }
                      if (__OFADD__(v62, 1)) {
                        goto LABEL_173;
                      }
                      if (v62 + 1 < 1) {
                        break;
                      }
                      ++v74;
                      v73 += 3;
                      uint64_t v69 = v62;
                      if (v66 == v74) {
                        goto LABEL_49;
                      }
                    }
                    unint64_t v66 = v74;
                    uint64_t v62 = v69;
                    goto LABEL_50;
                  }
                }
                uint64_t v62 = v69;
              }
LABEL_49:
              if (v62)
              {
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
                goto LABEL_164;
              }
LABEL_50:
              char v64 = (4 * *(unsigned char *)(v63 + 18) + 8) & 0x3C;
              uint64_t v61 = ((-15 << v64) - 1) & v61 | (v66 << v64);
              uint64_t v65 = *(void *)(v63 + 24 + 24 * v66);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              uint64_t v63 = v65;
              if (!*(unsigned char *)(v65 + 18)) {
                goto LABEL_84;
              }
            }
          }
          swift_unknownObjectRetain_n();
          uint64_t result = swift_retain();
          uint64_t v62 = v163;
          uint64_t v65 = v51;
LABEL_84:
          unint64_t v75 = *(unsigned __int16 *)(v65 + 16);
          if (*(_WORD *)(v65 + 16))
          {
            unint64_t v76 = v62 - 1;
            if (__OFSUB__(v62, 1))
            {
LABEL_182:
              __break(1u);
LABEL_183:
              __break(1u);
LABEL_184:
              __break(1u);
LABEL_185:
              __break(1u);
LABEL_186:
              __break(1u);
              goto LABEL_187;
            }
            if (__OFADD__(v76, 1)) {
              goto LABEL_183;
            }
            if (v62 <= 0)
            {
              unint64_t v75 = 0;
            }
            else
            {
              if (v75 == 1) {
                goto LABEL_110;
              }
              BOOL v68 = __OFSUB__(v76, 1);
              unint64_t v76 = v62 - 2;
              if (v68) {
                goto LABEL_186;
              }
              if (__OFADD__(v76, 1))
              {
LABEL_187:
                __break(1u);
LABEL_188:
                __break(1u);
                goto LABEL_189;
              }
              if (v62 - 1 < 1)
              {
                unint64_t v75 = 1;
              }
              else
              {
                if (v75 == 2) {
                  goto LABEL_110;
                }
                BOOL v68 = __OFSUB__(v76, 1);
                unint64_t v76 = v62 - 3;
                if (v68) {
                  goto LABEL_188;
                }
                if (__OFADD__(v76, 1))
                {
LABEL_189:
                  __break(1u);
                  return result;
                }
                if (v62 - 2 < 1)
                {
                  unint64_t v75 = 2;
                }
                else
                {
                  if (v75 == 3) {
                    goto LABEL_110;
                  }
                  uint64_t v77 = 0;
                  uint64_t v78 = 3;
                  if (v75 > 3) {
                    uint64_t v78 = *(unsigned __int16 *)(v65 + 16);
                  }
                  unint64_t v79 = v78 - 3;
                  if (v76 >= v75 - 4) {
                    unint64_t v80 = v75 - 4;
                  }
                  else {
                    unint64_t v80 = v62 - 3;
                  }
                  if (v80 >= v62 + 0x7FFFFFFFFFFFFFFDLL) {
                    unint64_t v80 = v62 + 0x7FFFFFFFFFFFFFFDLL;
                  }
                  while (1)
                  {
                    if (v79 <= v80) {
                      goto LABEL_184;
                    }
                    if (v62 + 0x7FFFFFFFFFFFFFFDLL == v77) {
                      goto LABEL_185;
                    }
                    if (v76 == v77) {
                      break;
                    }
                    if (v75 - 3 == ++v77)
                    {
                      v76 -= v77;
                      goto LABEL_110;
                    }
                  }
                  unint64_t v75 = v62;
                }
              }
            }
          }
          else
          {
            unint64_t v76 = v62;
LABEL_110:
            if (v76)
            {
LABEL_181:
              __break(1u);
              goto LABEL_182;
            }
          }
          swift_unknownObjectRelease();
          uint64_t v55 = v65;
          swift_unknownObjectRelease();
          unint64_t v54 = v61 & 0xFFFFFFFFFFFFF0FFLL | (v75 << 8);
          uint64_t v53 = v163;
          uint64_t v52 = v60;
LABEL_81:
          swift_unknownObjectRetain();
          uint64_t v50 = v157;
          uint64_t v56 = v52;
          uint64_t v57 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v157, v54, v55, v51, v52, v155);
          uint64_t result = swift_unknownObjectRelease_n();
          uint64_t v58 = v157;
          goto LABEL_118;
        }
        swift_unknownObjectRetain_n();
        swift_retain();
        unint64_t v54 = ((-15 << ((4 * *(unsigned char *)(v51 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v51 + 18) | ((unint64_t)*(unsigned __int16 *)(v51 + 16) << ((4 * *(unsigned char *)(v51 + 18) + 8) & 0x3C));
      }
      else
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        unint64_t v54 = 0;
      }
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v55 = 0;
      if (!v51)
      {
        uint64_t v56 = v52;
        uint64_t v57 = 0;
        uint64_t v58 = v157;
        uint64_t v50 = v157;
        goto LABEL_118;
      }
      goto LABEL_81;
    }
    uint64_t v53 = v163;
    if (v165 == 2)
    {
      unint64_t v54 = v153;
      if (v51)
      {
        swift_retain();
        swift_unknownObjectRetain();
        uint64_t v55 = v160;
        uint64_t v56 = v52;
        uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v159, v153, v160, v51, v52, v155);
        uint64_t v57 = result;
      }
      else
      {
        uint64_t v56 = v158[9];
        uint64_t result = swift_retain();
        uint64_t v57 = 0;
        uint64_t v55 = v160;
      }
      uint64_t v58 = v157;
    }
    else
    {
      uint64_t v56 = v158[9];
      swift_unknownObjectRetain();
      swift_retain();
      uint64_t result = BigString.Index.utf8Offset.getter();
      uint64_t v58 = v157;
      uint64_t v57 = result;
      uint64_t v55 = v160;
      unint64_t v54 = v153;
    }
LABEL_118:
    v177._uint64_t countAndFlagsBits = v50;
    v177._unint64_t object = (void *)v54;
    *(void *)&long long v178 = v55;
    BOOL v68 = __OFADD__(v53, 1);
    uint64_t v81 = v53 + 1;
    if (v68)
    {
LABEL_168:
      __break(1u);
      goto LABEL_169;
    }
    if (v50 != v58)
    {
LABEL_169:
      __break(1u);
      goto LABEL_170;
    }
    uint64_t v164 = v81;
    if (v55)
    {
      unint64_t v82 = *(void *)(v55 + 24 * ((v54 >> ((4 * *(unsigned char *)(v55 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v82 = specialized Rope._Node.subscript.getter(v54, v51);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v68 = __OFADD__(v57, v82);
    unint64_t v83 = v57 + v82;
    if (v68)
    {
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
      goto LABEL_177;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v177, v51, v56, v155, v157);
    swift_unknownObjectRelease_n();
    uint64_t v84 = v177._countAndFlagsBits;
    unint64_t v85 = v177._object;
    uint64_t v160 = v178;
    if (v165 != 2)
    {
      long long v100 = *v146;
      long long v101 = v146[1];
      long long v214 = v146[2];
      v213[1] = v101;
      v213[0] = v100;
      long long v102 = *v146;
      v232[1] = v146[1];
      _OWORD v232[2] = v214;
      v232[0] = v102;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v232, (uint64_t)v233);
      outlined retain of Locale((uint64_t)v233);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v213);
      uint64_t result = BigString.Index.utf8Offset.getter();
      if (!__OFSUB__(v83, result))
      {
        uint64_t v154 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v95 = v103;
        uint64_t v97 = v104;
        uint64_t v166 = v105;
        long long v99 = &v198;
        goto LABEL_128;
      }
      goto LABEL_178;
    }
    long long v86 = *v146;
    long long v87 = v146[1];
    long long v218 = v146[2];
    v217[1] = v87;
    v217[0] = v86;
    long long v88 = *v146;
    long long v89 = v146[1];
    _OWORD v228[2] = v218;
    v228[1] = v89;
    v228[0] = v88;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v228, (uint64_t)v229);
    outlined retain of Locale((uint64_t)v229);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v217);
    long long v90 = *v146;
    long long v91 = v146[1];
    long long v216 = v146[2];
    v215[1] = v91;
    v215[0] = v90;
    long long v92 = *v146;
    long long v93 = v146[1];
    _OWORD v230[2] = v216;
    v230[1] = v93;
    v230[0] = v92;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v230, (uint64_t)v231);
    outlined retain of Locale((uint64_t)v231);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v215);
    uint64_t v154 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v95 = v94;
    uint64_t v97 = v96;
    uint64_t v166 = v98;
    long long v99 = &v199;
LABEL_128:
    outlined release of Locale((uint64_t)v99);
    swift_release();
    uint64_t v159 = v84;
    unint64_t v153 = (unint64_t)v85;
    uint64_t v161 = v97;
    uint64_t v162 = v95;
    long long v106 = v134[1];
    long long v210 = *v134;
    long long v211 = v106;
    long long v212 = v134[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v200);
    uint64_t v107 = MEMORY[0x185302030](v201);
    long long v109 = v108;
    uint64_t v110 = v186 & 0xFFFFFFFFFFFFLL;
    if ((v187 & 0x2000000000000000) != 0) {
      uint64_t v110 = HIBYTE(v187) & 0xF;
    }
    if (v110)
    {
      v111._uint64_t countAndFlagsBits = 10;
      v111._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v111);
    }
    v175._uint64_t countAndFlagsBits = v107;
    v175._unint64_t object = v109;
    v112._uint64_t countAndFlagsBits = 32;
    v112._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v112);
    v174._uint64_t countAndFlagsBits = 0;
    v174._unint64_t object = (void *)0xE000000000000000;
    uint64_t v113 = v27 + 64;
    uint64_t v114 = 1 << *(unsigned char *)(v27 + 32);
    if (v114 < 64) {
      uint64_t v115 = ~(-1 << v114);
    }
    else {
      uint64_t v115 = -1;
    }
    unint64_t v116 = v115 & *(void *)(v27 + 64);
    int64_t v117 = (unint64_t)(v114 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v118 = 0;
    while (1)
    {
      if (v116)
      {
        unint64_t v119 = __clz(__rbit64(v116));
        v116 &= v116 - 1;
        unint64_t v120 = v119 | (v118 << 6);
        goto LABEL_137;
      }
      int64_t v129 = v118 + 1;
      if (__OFADD__(v118, 1))
      {
        __break(1u);
        goto LABEL_160;
      }
      if (v129 >= v117) {
        break;
      }
      unint64_t v130 = *(void *)(v113 + 8 * v129);
      ++v118;
      if (!v130)
      {
        int64_t v118 = v129 + 1;
        if (v129 + 1 >= v117) {
          break;
        }
        unint64_t v130 = *(void *)(v113 + 8 * v118);
        if (!v130)
        {
          int64_t v118 = v129 + 2;
          if (v129 + 2 >= v117) {
            break;
          }
          unint64_t v130 = *(void *)(v113 + 8 * v118);
          if (!v130)
          {
            int64_t v118 = v129 + 3;
            if (v129 + 3 >= v117) {
              break;
            }
            unint64_t v130 = *(void *)(v113 + 8 * v118);
            if (!v130)
            {
              int64_t v118 = v129 + 4;
              if (v129 + 4 >= v117) {
                break;
              }
              unint64_t v130 = *(void *)(v113 + 8 * v118);
              if (!v130)
              {
                int64_t v131 = v129 + 5;
                if (v131 >= v117) {
                  break;
                }
                unint64_t v130 = *(void *)(v113 + 8 * v131);
                if (!v130)
                {
                  while (1)
                  {
                    int64_t v118 = v131 + 1;
                    if (__OFADD__(v131, 1)) {
                      goto LABEL_174;
                    }
                    if (v118 >= v117) {
                      goto LABEL_8;
                    }
                    unint64_t v130 = *(void *)(v113 + 8 * v118);
                    ++v131;
                    if (v130) {
                      goto LABEL_156;
                    }
                  }
                }
                int64_t v118 = v131;
              }
            }
          }
        }
      }
LABEL_156:
      unint64_t v116 = (v130 - 1) & v130;
      unint64_t v120 = __clz(__rbit64(v130)) + (v118 << 6);
LABEL_137:
      long long v121 = (uint64_t *)(*(void *)(v27 + 48) + 16 * v120);
      uint64_t v123 = *v121;
      unint64_t v122 = (void *)v121[1];
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v27 + 56) + 72 * v120, (uint64_t)&v178);
      v177._uint64_t countAndFlagsBits = v123;
      v177._unint64_t object = v122;
      long long v170 = v179;
      long long v171 = v180;
      long long v172 = *(_OWORD *)v181;
      uint64_t v173 = *(void *)&v181[16];
      Swift::String v168 = v177;
      long long v169 = v178;
      Swift::String v124 = v177;
      swift_bridgeObjectRetain();
      String.append(_:)(v124);
      v125._uint64_t countAndFlagsBits = 2112800;
      v125._unint64_t object = (void *)0xE300000000000000;
      String.append(_:)(v125);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v169, (uint64_t)v176);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      v126._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v126);
      swift_bridgeObjectRelease();
      v127._uint64_t countAndFlagsBits = 10;
      v127._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v127);
      v128._uint64_t countAndFlagsBits = 9;
      v128._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v128);
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of Any?((uint64_t)&v168, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
    }
LABEL_8:
    swift_release();
    v177._uint64_t countAndFlagsBits = 2683;
    v177._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v174);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 125;
    v21._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    String.append(_:)(v177);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v175);
    uint64_t v11 = (uint64_t)v158;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t object = v132;
    uint64_t v9 = v133;
    uint64_t v15 = v162;
    uint64_t v20 = v164;
    uint64_t v18 = v161;
    uint64_t v19 = v166;
    if (v164 != v133) {
      continue;
    }
    break;
  }
  outlined release of AttributedString.Runs((uint64_t)&v188);
  uint64_t v12 = v186;
LABEL_158:
  swift_release();
  swift_release();
  return v12;
}

uint64_t static AttributedStringProtocol.== infix<A>(_:_:)(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4, uint64_t a5, uint64_t a6)
{
  if (a3 != &type metadata for AttributedString)
  {
    if (a3 == &type metadata for AttributedSubstring)
    {
      if (a4 == &type metadata for AttributedString)
      {
        uint64_t v23 = *(_OWORD **)a2;
        long long v24 = *(_OWORD *)(a1 + 24);
        long long v136 = *(_OWORD *)(a1 + 8);
        long long v137 = v24;
        long long v25 = *(_OWORD *)(a1 + 56);
        long long v138 = *(_OWORD *)(a1 + 40);
        long long v139 = v25;
        long long v26 = v23[1];
        long long v27 = v23[3];
        long long v130 = v23[2];
        long long v131 = v27;
        long long v129 = v26;
        swift_retain();
        swift_retain();
        outlined retain of Locale((uint64_t)&v129);
        uint64_t v28 = BigString.startIndex.getter();
        uint64_t v30 = v29;
        uint64_t v32 = v31;
        uint64_t v34 = v33;
        outlined release of Locale((uint64_t)&v129);
        long long v35 = v23[1];
        long long v36 = v23[3];
        long long v127 = v23[2];
        long long v128 = v36;
        long long v126 = v35;
        long long v37 = v23[1];
        long long v141 = v23[2];
        long long v142 = v36;
        long long v140 = v37;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v140, (uint64_t)v143);
        outlined retain of Locale((uint64_t)v143);
        uint64_t v38 = BigString.endIndex.getter();
        uint64_t v40 = v39;
        uint64_t v42 = v41;
        uint64_t v44 = v43;
        outlined release of Locale((uint64_t)&v126);
        *(void *)&long long v132 = v28;
        *((void *)&v132 + 1) = v30;
        *(void *)&long long v133 = v32;
        *((void *)&v133 + 1) = v34;
        *(void *)&long long v134 = v38;
        *((void *)&v134 + 1) = v40;
        *(void *)&long long v135 = v42;
        *((void *)&v135 + 1) = v44;
        uint64_t v45 = swift_retain();
        AttributedString.Runs.init(_:in:)(v45, &v100);
        uint64_t v46 = swift_retain();
        AttributedString.Runs.init(_:in:)(v46, &v113);
        long long v97 = v110;
        long long v98 = v111;
        uint64_t v99 = v112;
        long long v93 = v106;
        long long v94 = v107;
        long long v95 = v108;
        long long v96 = v109;
        long long v89 = v102;
        long long v90 = v103;
        long long v91 = v104;
        long long v92 = v105;
        long long v87 = v100;
        long long v88 = v101;
        long long v84 = v123;
        long long v85 = v124;
        uint64_t v86 = v125;
        long long v80 = v119;
        long long v81 = v120;
        long long v82 = v121;
        long long v83 = v122;
        long long v76 = v115;
        long long v77 = v116;
        long long v78 = v117;
        long long v79 = v118;
        long long v74 = v113;
        long long v75 = v114;
        char v19 = specialized static AttributedString.Guts._characterwiseIsEqual(_:to:)((uint64_t)&v87, &v74);
        outlined release of AttributedString.Runs((uint64_t)&v113);
        outlined release of AttributedString.Runs((uint64_t)&v100);
LABEL_15:
        swift_release();
        goto LABEL_16;
      }
      if (a4 == &type metadata for AttributedSubstring)
      {
        uint64_t v10 = *(_OWORD **)a1;
        long long v11 = *(_OWORD *)(a1 + 24);
        long long v136 = *(_OWORD *)(a1 + 8);
        long long v137 = v11;
        long long v12 = *(_OWORD *)(a1 + 56);
        long long v138 = *(_OWORD *)(a1 + 40);
        long long v139 = v12;
        long long v13 = *(_OWORD *)(a2 + 24);
        long long v132 = *(_OWORD *)(a2 + 8);
        long long v133 = v13;
        long long v14 = *(_OWORD *)(a2 + 56);
        long long v134 = *(_OWORD *)(a2 + 40);
        long long v135 = v14;
        swift_retain_n();
LABEL_14:
        swift_retain();
        AttributedString.Runs.init(_:in:)((uint64_t)v10, &v100);
        uint64_t v66 = swift_retain();
        AttributedString.Runs.init(_:in:)(v66, &v113);
        long long v97 = v110;
        long long v98 = v111;
        uint64_t v99 = v112;
        long long v93 = v106;
        long long v94 = v107;
        long long v95 = v108;
        long long v96 = v109;
        long long v89 = v102;
        long long v90 = v103;
        long long v91 = v104;
        long long v92 = v105;
        long long v87 = v100;
        long long v88 = v101;
        long long v84 = v123;
        long long v85 = v124;
        uint64_t v86 = v125;
        long long v80 = v119;
        long long v81 = v120;
        long long v82 = v121;
        long long v83 = v122;
        long long v76 = v115;
        long long v77 = v116;
        long long v78 = v117;
        long long v79 = v118;
        long long v74 = v113;
        long long v75 = v114;
        char v19 = specialized static AttributedString.Guts._characterwiseIsEqual(_:to:)((uint64_t)&v87, &v74);
        outlined release of AttributedString.Runs((uint64_t)&v113);
        outlined release of AttributedString.Runs((uint64_t)&v100);
        goto LABEL_15;
      }
    }
    goto LABEL_8;
  }
  if (a4 != &type metadata for AttributedString)
  {
    if (a4 == &type metadata for AttributedSubstring)
    {
      uint64_t v10 = *(_OWORD **)a1;
      long long v70 = *(_OWORD *)(a2 + 24);
      long long v71 = *(_OWORD *)(a2 + 8);
      long long v69 = *(_OWORD *)(a2 + 40);
      uint64_t v67 = *(void *)(a2 + 64);
      uint64_t v68 = *(void *)(a2 + 56);
      long long v47 = *(_OWORD *)(*(void *)a1 + 16);
      long long v48 = *(_OWORD *)(*(void *)a1 + 48);
      long long v130 = *(_OWORD *)(*(void *)a1 + 32);
      long long v131 = v48;
      long long v129 = v47;
      swift_retain();
      outlined retain of Locale((uint64_t)&v129);
      uint64_t v49 = BigString.startIndex.getter();
      uint64_t v51 = v50;
      uint64_t v53 = v52;
      uint64_t v55 = v54;
      outlined release of Locale((uint64_t)&v129);
      long long v56 = v10[1];
      long long v57 = v10[3];
      long long v127 = v10[2];
      long long v128 = v57;
      long long v126 = v56;
      long long v58 = v10[1];
      long long v141 = v10[2];
      long long v142 = v57;
      long long v140 = v58;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v140, (uint64_t)v143);
      outlined retain of Locale((uint64_t)v143);
      uint64_t v59 = BigString.endIndex.getter();
      uint64_t v61 = v60;
      uint64_t v63 = v62;
      uint64_t v65 = v64;
      outlined release of Locale((uint64_t)&v126);
      *(void *)&long long v136 = v49;
      *((void *)&v136 + 1) = v51;
      *(void *)&long long v137 = v53;
      *((void *)&v137 + 1) = v55;
      *(void *)&long long v138 = v59;
      *((void *)&v138 + 1) = v61;
      *(void *)&long long v139 = v63;
      *((void *)&v139 + 1) = v65;
      long long v132 = v71;
      long long v133 = v70;
      long long v134 = v69;
      *(void *)&long long v135 = v68;
      *((void *)&v135 + 1) = v67;
      swift_retain();
      goto LABEL_14;
    }
LABEL_8:
    AttributedStringProtocol.__guts.getter(a3, a5);
    (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t))(a5 + 32))(&v113, a3, a5);
    long long v72 = v113;
    long long v15 = v114;
    (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t))(a5 + 40))(&v100, a3, a5);
    long long v136 = v72;
    long long v137 = v15;
    long long v138 = v100;
    long long v139 = v101;
    AttributedStringProtocol.__guts.getter(a4, a6);
    (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t))(a6 + 32))(&v113, a4, a6);
    long long v73 = v113;
    long long v16 = v114;
    (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t))(a6 + 40))(&v100, a4, a6);
    long long v132 = v73;
    long long v133 = v16;
    long long v134 = v100;
    long long v135 = v101;
    uint64_t v17 = swift_retain();
    AttributedString.Runs.init(_:in:)(v17, &v100);
    uint64_t v18 = swift_retain();
    AttributedString.Runs.init(_:in:)(v18, &v113);
    long long v97 = v110;
    long long v98 = v111;
    uint64_t v99 = v112;
    long long v93 = v106;
    long long v94 = v107;
    long long v95 = v108;
    long long v96 = v109;
    long long v89 = v102;
    long long v90 = v103;
    long long v91 = v104;
    long long v92 = v105;
    long long v87 = v100;
    long long v88 = v101;
    long long v84 = v123;
    long long v85 = v124;
    uint64_t v86 = v125;
    long long v80 = v119;
    long long v81 = v120;
    long long v82 = v121;
    long long v83 = v122;
    long long v76 = v115;
    long long v77 = v116;
    long long v78 = v117;
    long long v79 = v118;
    long long v74 = v113;
    long long v75 = v114;
    char v19 = specialized static AttributedString.Guts._characterwiseIsEqual(_:to:)((uint64_t)&v87, &v74);
    outlined release of AttributedString.Runs((uint64_t)&v113);
    outlined release of AttributedString.Runs((uint64_t)&v100);
    swift_release();
LABEL_16:
    swift_release();
    return v19 & 1;
  }
  uint64_t v20 = *(_OWORD **)a1;
  Swift::String v21 = *(_OWORD **)a2;

  return specialized static AttributedStringProtocol.== infix<A>(_:_:)(v20, v21);
}

uint64_t AttributedStringProtocol.hash(into:)(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  AttributedStringProtocol.__guts.getter(a2, a3);
  (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t))(a3 + 32))(&v11, a2, a3);
  long long v9 = v11;
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  (*(void (**)(_OWORD *__return_ptr, ValueMetadata *, uint64_t))(a3 + 40))(v10, a2, a3);
  long long v14 = v9;
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  long long v17 = v10[0];
  long long v18 = v10[1];
  AttributedString.Guts.characterwiseHash(in:into:)((uint64_t)&v14, a1);

  return swift_release();
}

uint64_t AttributedStringProtocol.index(afterCharacter:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(a2 + 56))(&v17, a1, a2);
  uint64_t v4 = v17;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  long long v6 = v4[1];
  long long v7 = v4[3];
  v18[1] = v4[2];
  void v18[2] = v7;
  v18[0] = v6;
  long long v8 = v4[1];
  v19[1] = v4[2];
  v19[2] = v7;
  v19[0] = v8;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v19, (uint64_t)v20);
  outlined retain of Locale((uint64_t)v20);
  uint64_t v9 = BigString.index(after:)();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  outlined release of Locale((uint64_t)v18);
  char v16 = static BigString.Index.< infix(_:_:)();
  uint64_t result = swift_release();
  if ((v16 & 1) == 0)
  {
    *a3 = v9;
    a3[1] = v11;
    a3[2] = v13;
    a3[3] = v15;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t AttributedStringProtocol.index(beforeCharacter:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(a2 + 56))(&v17, a1, a2);
  uint64_t v4 = v17;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  long long v6 = v4[1];
  long long v7 = v4[3];
  v18[1] = v4[2];
  void v18[2] = v7;
  v18[0] = v6;
  long long v8 = v4[1];
  v19[1] = v4[2];
  v19[2] = v7;
  v19[0] = v8;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v19, (uint64_t)v20);
  outlined retain of Locale((uint64_t)v20);
  uint64_t v9 = BigString.index(before:)();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  outlined release of Locale((uint64_t)v18);
  char v16 = static BigString.Index.< infix(_:_:)();
  uint64_t result = swift_release();
  if ((v16 & 1) == 0)
  {
    *a3 = v9;
    a3[1] = v11;
    a3[2] = v13;
    a3[3] = v15;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t AttributedStringProtocol.index(_:offsetByCharacters:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(a2 + 56))(&v17, a1, a2);
  uint64_t v4 = v17;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  long long v6 = v4[1];
  long long v7 = v4[3];
  v18[1] = v4[2];
  void v18[2] = v7;
  v18[0] = v6;
  long long v8 = v4[1];
  v19[1] = v4[2];
  v19[2] = v7;
  v19[0] = v8;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v19, (uint64_t)v20);
  outlined retain of Locale((uint64_t)v20);
  uint64_t v9 = BigString.index(_:offsetBy:)();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  outlined release of Locale((uint64_t)v18);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  char v16 = static BigString.Index.< infix(_:_:)();
  uint64_t result = swift_release();
  if ((v16 & 1) == 0)
  {
    *a3 = v9;
    a3[1] = v11;
    a3[2] = v13;
    a3[3] = v15;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t AttributedStringProtocol.index(afterUnicodeScalar:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(a2 + 64))(&v15, a1, a2);
  uint64_t v4 = v15;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  long long v6 = v4[2];
  long long v17 = v4[1];
  long long v18 = v6;
  long long v19 = v4[3];
  BigString.unicodeScalars.getter();
  uint64_t v7 = BigString.UnicodeScalarView.index(after:)();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  outlined release of Locale((uint64_t)v16);
  char v14 = static BigString.Index.< infix(_:_:)();
  uint64_t result = swift_release();
  if ((v14 & 1) == 0)
  {
    *a3 = v7;
    a3[1] = v9;
    a3[2] = v11;
    a3[3] = v13;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t AttributedStringProtocol.index(beforeUnicodeScalar:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(a2 + 64))(&v15, a1, a2);
  uint64_t v4 = v15;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  long long v6 = v4[2];
  long long v17 = v4[1];
  long long v18 = v6;
  long long v19 = v4[3];
  BigString.unicodeScalars.getter();
  uint64_t v7 = BigString.UnicodeScalarView.index(before:)();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  outlined release of Locale((uint64_t)v16);
  char v14 = static BigString.Index.< infix(_:_:)();
  uint64_t result = swift_release();
  if ((v14 & 1) == 0)
  {
    *a3 = v7;
    a3[1] = v9;
    a3[2] = v11;
    a3[3] = v13;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t AttributedStringProtocol.index(_:offsetByUnicodeScalars:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(a2 + 64))(&v15, a1, a2);
  uint64_t v4 = v15;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  long long v6 = v4[2];
  long long v17 = v4[1];
  long long v18 = v6;
  long long v19 = v4[3];
  BigString.unicodeScalars.getter();
  uint64_t v7 = BigString.UnicodeScalarView.index(_:offsetBy:)();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  outlined release of Locale((uint64_t)v16);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  char v14 = static BigString.Index.< infix(_:_:)();
  uint64_t result = swift_release();
  if ((v14 & 1) == 0)
  {
    *a3 = v7;
    a3[1] = v9;
    a3[2] = v11;
    a3[3] = v13;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t AttributedStringProtocol.index(afterRun:)@<X0>(ValueMetadata *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  AttributedStringProtocol.__guts.getter(a1, a2);
  (*(void (**)(uint64_t *__return_ptr, ValueMetadata *, uint64_t))(a2 + 32))(&v24, a1, a2);
  (*(void (**)(void *__return_ptr, ValueMetadata *, uint64_t))(a2 + 40))(v23, a1, a2);
  uint64_t v5 = v23[1];
  uint64_t v20 = v23[2];
  uint64_t v21 = v23[0];
  uint64_t v22 = v23[3];
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  uint64_t v7 = AttributedString.Guts.index(afterRun:)();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  char v14 = static BigString.Index.< infix(_:_:)();
  uint64_t result = swift_release();
  if (v14) {
    uint64_t v15 = v21;
  }
  else {
    uint64_t v15 = v7;
  }
  if (v14) {
    uint64_t v16 = v5;
  }
  else {
    uint64_t v16 = v9;
  }
  if (v14) {
    uint64_t v17 = v20;
  }
  else {
    uint64_t v17 = v11;
  }
  *a3 = v15;
  a3[1] = v16;
  if (v14) {
    uint64_t v18 = v22;
  }
  else {
    uint64_t v18 = v13;
  }
  a3[2] = v17;
  a3[3] = v18;
  return result;
}

uint64_t AttributedStringProtocol.index(beforeRun:)@<X0>(ValueMetadata *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  AttributedStringProtocol.__guts.getter(a1, a2);
  (*(void (**)(void *__return_ptr, ValueMetadata *, uint64_t))(a2 + 32))(v25, a1, a2);
  uint64_t v6 = v25[0];
  uint64_t v5 = v25[1];
  uint64_t v8 = v25[2];
  uint64_t v7 = v25[3];
  (*(void (**)(uint64_t *__return_ptr, ValueMetadata *, uint64_t))(a2 + 40))(&v24, a1, a2);
  uint64_t v22 = v5;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  uint64_t v10 = AttributedString.Guts.index(beforeRun:)();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  char v17 = static BigString.Index.< infix(_:_:)();
  uint64_t result = swift_release();
  if (v17) {
    uint64_t v18 = v10;
  }
  else {
    uint64_t v18 = v6;
  }
  if (v17) {
    uint64_t v19 = v12;
  }
  else {
    uint64_t v19 = v22;
  }
  if (v17) {
    uint64_t v20 = v14;
  }
  else {
    uint64_t v20 = v8;
  }
  *a3 = v18;
  a3[1] = v19;
  if (v17) {
    uint64_t v21 = v16;
  }
  else {
    uint64_t v21 = v7;
  }
  a3[2] = v20;
  a3[3] = v21;
  return result;
}

uint64_t AttributedStringProtocol.index(_:offsetByRuns:)@<X0>(uint64_t a1@<X1>, ValueMetadata *a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  long long v98 = (void *)AttributedStringProtocol.__guts.getter(a2, a3);
  (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t))(a3 + 32))(&v103, a2, a3);
  uint64_t v7 = (_OWORD *)*((void *)&v103 + 1);
  uint64_t v6 = v103;
  long long v8 = v104;
  (*(void (**)(long long *__return_ptr, ValueMetadata *, uint64_t))(a3 + 40))(&v100, a2, a3);
  long long v9 = v100;
  long long v10 = v101;
  long long v95 = v7;
  uint64_t v96 = v6;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_133;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }
  unint64_t v12 = (unint64_t)v98;
  uint64_t v14 = v98[8];
  uint64_t v13 = v98[9];
  uint64_t v15 = v98[10];
  uint64_t v16 = (_OWORD *)v98[11];
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v14) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = 0;
  }
  if (result < 0) {
    goto LABEL_135;
  }
  uint64_t v18 = result;
  if (v17 < result) {
    goto LABEL_135;
  }
  if (v14)
  {
    uint64_t v91 = v13;
    uint64_t v19 = *(unsigned __int8 *)(v14 + 18);
    if (result < v15 && *(_WORD *)(v14 + 16))
    {
      uint64_t v20 = v15;
      uint64_t v7 = v16;
      if (*(unsigned char *)(v14 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v21 = v18;
        uint64_t v22 = v14;
        while (1)
        {
          uint64_t v25 = *(unsigned __int16 *)(v22 + 16);
          if (!*(_WORD *)(v22 + 16)) {
            goto LABEL_14;
          }
          uint64_t v26 = *(void *)(v22 + 40);
          BOOL v27 = __OFSUB__(v21, v26);
          uint64_t v28 = v21 - v26;
          if (v27) {
            goto LABEL_128;
          }
          if (__OFADD__(v28, 1))
          {
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
            goto LABEL_134;
          }
          if (v28 + 1 >= 1) {
            break;
          }
          uint64_t v25 = 0;
LABEL_15:
          char v23 = (4 * *(unsigned char *)(v22 + 18) + 8) & 0x3C;
          uint64_t v19 = ((-15 << v23) - 1) & v19 | (v25 << v23);
          uint64_t v24 = *(void *)(v22 + 24 + 24 * v25);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v22 = v24;
          if (!*(unsigned char *)(v24 + 18)) {
            goto LABEL_78;
          }
        }
        if (v25 != 1)
        {
          uint64_t v29 = (uint64_t *)(v22 + 64);
          uint64_t v30 = 1;
          while (1)
          {
            uint64_t v31 = *v29;
            v29 += 3;
            uint64_t v21 = v28 - v31;
            if (__OFSUB__(v28, v31))
            {
              __break(1u);
LABEL_124:
              __break(1u);
              goto LABEL_125;
            }
            if (__OFADD__(v21, 1)) {
              goto LABEL_124;
            }
            if (v21 + 1 < 1) {
              break;
            }
            ++v30;
            uint64_t v28 = v21;
            if (v25 == v30) {
              goto LABEL_14;
            }
          }
          uint64_t v25 = v30;
          uint64_t v21 = v28;
          goto LABEL_15;
        }
        uint64_t v21 = v28;
LABEL_14:
        if (v21) {
          goto LABEL_127;
        }
        goto LABEL_15;
      }
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v19 = 0;
      uint64_t v21 = v18;
      uint64_t v24 = v14;
LABEL_78:
      uint64_t v61 = *(unsigned __int16 *)(v24 + 16);
      if (*(_WORD *)(v24 + 16))
      {
        uint64_t v62 = *(void *)(v24 + 24);
        BOOL v27 = __OFSUB__(v21, v62);
        uint64_t v63 = v21 - v62;
        if (v27)
        {
LABEL_150:
          __break(1u);
          goto LABEL_151;
        }
        if (__OFADD__(v63, 1))
        {
LABEL_151:
          __break(1u);
          goto LABEL_152;
        }
        if (v63 + 1 < 1)
        {
          uint64_t v61 = 0;
        }
        else
        {
          if (v61 == 1)
          {
            uint64_t v21 = v63;
            goto LABEL_99;
          }
          uint64_t v67 = (uint64_t *)(v24 + 48);
          uint64_t v68 = 1;
          while (1)
          {
            uint64_t v69 = *v67;
            v67 += 3;
            uint64_t v21 = v63 - v69;
            if (__OFSUB__(v63, v69)) {
              goto LABEL_141;
            }
            if (__OFADD__(v21, 1)) {
              goto LABEL_142;
            }
            if (v21 + 1 < 1) {
              break;
            }
            ++v68;
            uint64_t v63 = v21;
            if (v61 == v68) {
              goto LABEL_99;
            }
          }
          uint64_t v61 = v68;
          uint64_t v21 = v63;
        }
LABEL_100:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v32 = v19 & 0xFFFFFFFFFFFFF0FFLL | (v61 << 8);
        unint64_t v12 = (unint64_t)v98;
        uint64_t v13 = v91;
        goto LABEL_32;
      }
LABEL_99:
      if (v21)
      {
LABEL_149:
        __break(1u);
        goto LABEL_150;
      }
      goto LABEL_100;
    }
    uint64_t v20 = v15;
    unint64_t v32 = ((-15 << ((4 * v19 + 8) & 0x3C)) - 1) & v19 | ((unint64_t)*(unsigned __int16 *)(v14 + 16) << ((4 * v19 + 8) & 0x3C));
    swift_unknownObjectRetain();
    uint64_t v13 = v91;
  }
  else
  {
    uint64_t v20 = v15;
    swift_unknownObjectRetain();
    unint64_t v32 = 0;
  }
  swift_unknownObjectRelease();
  uint64_t v24 = 0;
  uint64_t v21 = 0;
  if (!v14)
  {
    uint64_t v33 = 0;
    uint64_t v34 = v18;
    goto LABEL_33;
  }
LABEL_32:
  swift_unknownObjectRetain();
  uint64_t v33 = specialized Rope._Node.distanceFromStart<A>(to:in:)((uint64_t)v16, v32, v24, v14, v13);
  swift_unknownObjectRelease_n();
  uint64_t v34 = v18 - v21;
  if (__OFSUB__(v18, v21))
  {
    __break(1u);
    goto LABEL_103;
  }
LABEL_33:
  uint64_t v90 = v34;
  uint64_t v92 = v33;
  unint64_t v35 = v12;
  uint64_t v37 = *(void *)(v12 + 64);
  uint64_t v36 = *(void *)(v12 + 72);
  uint64_t v38 = *(void *)(v35 + 80);
  uint64_t v39 = *(void *)(v35 + 88);
  *(void *)&long long v103 = v16;
  *((void *)&v103 + 1) = v32;
  *(void *)&long long v104 = v24;
  *(void *)&long long v100 = a1;
  swift_unknownObjectRetain();
  specialized Rope.formIndex<A>(_:offsetBy:in:preferEnd:)((uint64_t)&v103, (uint64_t *)&v100, 0, v37, v36, v38, v39);
  long long v40 = v103;
  uint64_t v41 = v104;
  swift_unknownObjectRetain();
  uint64_t v42 = specialized Rope.distance<A>(from:to:in:)((uint64_t)v16, v32, v24, v40, *((unint64_t *)&v40 + 1), v41, v37, v36, v38, v39, specialized Rope._UnsafeHandle.distance<A>(from:to:in:), specialized Rope._Node.distance<A>(from:to:in:));
  uint64_t result = swift_unknownObjectRelease_n();
  uint64_t v20 = v92 + a1;
  if (__OFADD__(v92, a1))
  {
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  uint64_t v21 = v90 + v42;
  if (__OFADD__(v90, v42))
  {
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }
  uint64_t v16 = v98;
  uint64_t v43 = v98[10];
  uint64_t result = swift_unknownObjectRetain();
  if (result)
  {
    uint64_t result = swift_unknownObjectRelease();
    if (v21 == v43)
    {
      unint64_t v44 = 0;
      goto LABEL_46;
    }
    uint64_t v45 = v98[8];
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = 0;
    if (!v21) {
      goto LABEL_46;
    }
  }
  if ((void)v40 != v98[11])
  {
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
  if (v41)
  {
    unint64_t v44 = *(void *)(v41 + 24 * ((*((void *)&v40 + 1) >> ((4 * *(unsigned char *)(v41 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    unint64_t v44 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v40 + 1), v45);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_46:
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFADD__(v21, v44))
  {
LABEL_138:
    __break(1u);
    goto LABEL_139;
  }
  if ((uint64_t)(v21 + v44) < result)
  {
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
    goto LABEL_143;
  }
  uint64_t v46 = *((void *)&v9 + 1);
  if (v21 < BigString.Index.utf8Offset.getter()) {
    goto LABEL_115;
  }
  uint64_t v33 = v98[8];
  uint64_t v47 = v98[9];
  uint64_t v48 = v98[10];
  a1 = v98[11];
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v33) {
    uint64_t v49 = v48;
  }
  else {
    uint64_t v49 = 0;
  }
  if (result < 0) {
    goto LABEL_144;
  }
  uint64_t v7 = (_OWORD *)result;
  if (v49 < result) {
    goto LABEL_144;
  }
  if (v33)
  {
    uint64_t v89 = v47;
    uint64_t v93 = v20;
    uint64_t v50 = *(unsigned __int8 *)(v33 + 18);
    if (result >= v48 || !*(_WORD *)(v33 + 16))
    {
      uint64_t v7 = 0;
      uint64_t v24 = 0;
      unint64_t v60 = ((-15 << ((4 * v50 + 8) & 0x3C)) - 1) & v50 | ((unint64_t)*(unsigned __int16 *)(v33 + 16) << ((4 * v50 + 8) & 0x3C));
      uint64_t v16 = v98;
      uint64_t v20 = v93;
LABEL_112:
      swift_unknownObjectRetain();
      uint64_t v59 = specialized Rope._Node.distanceFromStart<A>(to:in:)(a1, v60, v24, v33, v89);
      uint64_t result = swift_unknownObjectRelease_n();
      BOOL v58 = v7 != 0;
      uint64_t v46 = *((void *)&v9 + 1);
      goto LABEL_113;
    }
    if (*(unsigned char *)(v33 + 18))
    {
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v24 = v33;
      while (1)
      {
        uint64_t v52 = *(unsigned __int16 *)(v24 + 16);
        if (!*(_WORD *)(v24 + 16)) {
          goto LABEL_60;
        }
        uint64_t v53 = *(void *)(v24 + 40);
        BOOL v27 = __OFSUB__(v7, v53);
        uint64_t v54 = (_OWORD *)((char *)v7 - v53);
        if (v27) {
          goto LABEL_131;
        }
        if (__OFADD__(v54, 1)) {
          goto LABEL_132;
        }
        if ((uint64_t)v54 + 1 >= 1) {
          break;
        }
        uint64_t v52 = 0;
LABEL_61:
        char v51 = (4 * *(unsigned char *)(v24 + 18) + 8) & 0x3C;
        uint64_t v50 = ((-15 << v51) - 1) & v50 | (v52 << v51);
        uint64_t v24 = *(void *)(v24 + 24 + 24 * v52);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        if (!*(unsigned char *)(v24 + 18))
        {
          unint64_t v12 = v50 & 0xFFFFFFFFFFFFF0FFLL;
          goto LABEL_88;
        }
      }
      if (v52 != 1)
      {
        uint64_t v55 = (uint64_t *)(v24 + 64);
        uint64_t v56 = 1;
        while (1)
        {
          uint64_t v57 = *v55;
          v55 += 3;
          uint64_t v7 = (_OWORD *)((char *)v54 - v57);
          if (__OFSUB__(v54, v57)) {
            break;
          }
          if (__OFADD__(v7, 1)) {
            goto LABEL_126;
          }
          if ((uint64_t)v7 + 1 < 1)
          {
            uint64_t v52 = v56;
            uint64_t v7 = v54;
            goto LABEL_61;
          }
          ++v56;
          uint64_t v54 = v7;
          if (v52 == v56) {
            goto LABEL_60;
          }
        }
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
        goto LABEL_129;
      }
      uint64_t v7 = v54;
LABEL_60:
      if (v7) {
        goto LABEL_130;
      }
      goto LABEL_61;
    }
    uint64_t result = swift_unknownObjectRetain_n();
    unint64_t v12 = 0;
    uint64_t v24 = v33;
LABEL_88:
    uint64_t v64 = *(unsigned __int16 *)(v24 + 16);
    uint64_t v16 = v98;
    uint64_t v20 = v93;
    if (!*(_WORD *)(v24 + 16)) {
      goto LABEL_110;
    }
    uint64_t v65 = *(void *)(v24 + 24);
    BOOL v27 = __OFSUB__(v7, v65);
    uint64_t v66 = (_OWORD *)((char *)v7 - v65);
    if (v27)
    {
LABEL_152:
      __break(1u);
      goto LABEL_153;
    }
    if (__OFADD__(v66, 1))
    {
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
    if ((uint64_t)v66 + 1 >= 1)
    {
      if (v64 != 1)
      {
        long long v70 = (uint64_t *)(v24 + 48);
        uint64_t v71 = 1;
        while (1)
        {
          uint64_t v72 = *v70;
          v70 += 3;
          uint64_t v7 = (_OWORD *)((char *)v66 - v72);
          if (__OFSUB__(v66, v72)) {
            goto LABEL_147;
          }
          if (__OFADD__(v7, 1)) {
            goto LABEL_148;
          }
          if ((uint64_t)v7 + 1 < 1)
          {
            uint64_t v64 = v71;
            uint64_t v7 = v66;
            goto LABEL_111;
          }
          ++v71;
          uint64_t v66 = v7;
          if (v64 == v71) {
            goto LABEL_110;
          }
        }
      }
      uint64_t v7 = v66;
LABEL_110:
      if (v7)
      {
LABEL_154:
        __break(1u);
        return result;
      }
      goto LABEL_111;
    }
LABEL_103:
    uint64_t v64 = 0;
LABEL_111:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v60 = v12 | (v64 << 8);
    goto LABEL_112;
  }
  BOOL v58 = 0;
  uint64_t v59 = 0;
LABEL_113:
  BOOL v27 = __OFADD__(v59, v58);
  uint64_t v73 = v59 + v58;
  if (v27)
  {
LABEL_145:
    __break(1u);
    goto LABEL_146;
  }
  if (v73 < v20)
  {
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
    goto LABEL_149;
  }
LABEL_115:
  long long v74 = v16[1];
  long long v75 = v16[3];
  long long v101 = v16[2];
  long long v102 = v75;
  long long v100 = v74;
  long long v76 = v16[1];
  long long v104 = v16[2];
  long long v105 = v75;
  long long v103 = v76;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v103, (uint64_t)v106);
  outlined retain of Locale((uint64_t)v106);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)&v100);
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (__OFSUB__(v21, result)) {
    goto LABEL_140;
  }
  uint64_t v77 = BigString.UTF8View.index(_:offsetBy:)();
  long long v79 = v78;
  uint64_t v81 = v80;
  uint64_t v83 = v82;
  outlined release of Locale((uint64_t)v99);
  uint64_t v84 = v8;
  if (static BigString.Index.< infix(_:_:)())
  {
    uint64_t v84 = v81;
  }
  else
  {
    uint64_t v77 = v96;
    long long v79 = v95;
    uint64_t v83 = *((void *)&v8 + 1);
  }
  uint64_t v86 = v9;
  uint64_t v85 = *((void *)&v10 + 1);
  uint64_t v87 = v10;
  char v88 = static BigString.Index.< infix(_:_:)();
  uint64_t result = swift_release();
  if ((v88 & 1) == 0)
  {
    uint64_t v86 = v77;
    uint64_t v46 = (uint64_t)v79;
    uint64_t v87 = v84;
    uint64_t v85 = v83;
  }
  *a4 = v86;
  a4[1] = v46;
  a4[2] = v87;
  a4[3] = v85;
  return result;
}

uint64_t specialized Rope.offset<A>(of:in:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result == a7)
  {
    if (a4)
    {
      uint64_t v11 = result;
      swift_unknownObjectRetain();
      uint64_t v12 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, a2, a3, a4, a5);
      swift_unknownObjectRelease();
      return v12;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, char a5, char a6, char a7, int a8, char a9, unint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13)
{
  unint64_t v17 = a12;
  unint64_t v16 = a13;
  unint64_t v19 = a10;
  unint64_t v18 = a11;
  if ((a5 & 1) == 0 && (a6 & 1) == 0)
  {
    if ((a7 & 1) == 0) {
      return specialized BidirectionalCollection._range<A>(of:anchored:backwards:)(a1, a2, a3, a4, a8 & 1, a9 & 1, a10, a11, a12, a13);
    }
LABEL_6:
    if ((a9 & 1) == 0)
    {
      if ((a8 & 1) == 0)
      {
LABEL_8:
        char v129 = a6;
        int v123 = a8;
        unint64_t v21 = String.UnicodeScalarView.index(_:offsetBy:)(a11, -1, a12, a13);
        int v122 = 1;
LABEL_14:
        unint64_t v20 = a10;
        goto LABEL_15;
      }
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  if (a7) {
    goto LABEL_6;
  }
  if ((a9 & 1) == 0)
  {
    if ((a8 & 1) == 0)
    {
      if ((a6 & 1) == 0)
      {
        unint64_t v21 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(a11, a1, a2, a3, a4, a10);
        if (v113) {
          return 0;
        }
        int v122 = 1;
        int v123 = a8;
        char v129 = a6;
        goto LABEL_14;
      }
      goto LABEL_8;
    }
LABEL_13:
    char v129 = a6;
    int v122 = 1;
    int v123 = a8;
    unint64_t v21 = a10;
    goto LABEL_14;
  }
  if ((a6 & 1) == 0)
  {
    unint64_t v21 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(a11, a1, a2, a3, a4, a10);
    if (v112) {
      return 0;
    }
    unint64_t v20 = v21;
    char v129 = a6;
    int v122 = 0;
    int v123 = a8;
    if ((a8 & 1) == 0) {
      unint64_t v21 = a10;
    }
    goto LABEL_15;
  }
LABEL_11:
  char v129 = a6;
  int v123 = a8;
  unint64_t v20 = String.UnicodeScalarView.index(_:offsetBy:)(a11, -1, a12, a13);
  int v122 = 0;
  unint64_t v21 = a10;
LABEL_15:
  unint64_t v125 = v21 >> 14;
  unint64_t v139 = a2 >> 14;
  unint64_t v22 = a1 >> 14;
  uint64_t v135 = (a13 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v127 = a4 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v132 = a4;
  uint64_t v126 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  while (1)
  {
    unint64_t v143 = 15;
    unint64_t v144 = v20;
    if (v22 >= v139) {
      break;
    }
    unint64_t v124 = v20;
    LOBYTE(v23) = 0;
    unint64_t v24 = 0;
    unint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    unint64_t v27 = 15;
    unint64_t v28 = 0xE000000000000000;
    unint64_t v29 = a1;
    unint64_t v137 = v22;
LABEL_18:
    BOOL v140 = 0;
    unint64_t v134 = v29;
    unint64_t v136 = v29 >> 14;
    while (1)
    {
      if (v23)
      {
        _StringGuts.validateScalarIndex(_:)(v143, v25, v28);
        if ((v28 & 0x1000000000000000) != 0)
        {
          uint64_t v31 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          _StringGuts.validateScalarIndex(_:)(v143, v25, v28);
          unint64_t v143 = String.UnicodeScalarView._foreignIndex(after:)();
          if (v140) {
            goto LABEL_41;
          }
        }
        else
        {
          if ((v28 & 0x2000000000000000) != 0)
          {
            unint64_t v141 = v25;
            uint64_t v142 = v28 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v31 = _decodeScalar(_:startingAt:)();
            unint64_t v34 = _StringGuts.validateScalarIndex(_:)(v143, v25, v28) >> 16;
            unint64_t v141 = v25;
            uint64_t v142 = v28 & 0xFFFFFFFFFFFFFFLL;
            int v35 = *((unsigned __int8 *)&v141 + v34);
          }
          else
          {
            if ((v25 & 0x1000000000000000) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            uint64_t v31 = _decodeScalar(_:startingAt:)();
            unint64_t v32 = _StringGuts.validateScalarIndex(_:)(v143, v25, v28);
            if ((v25 & 0x1000000000000000) != 0) {
              uint64_t v33 = (v28 & 0xFFFFFFFFFFFFFFFLL) + 32;
            }
            else {
              uint64_t v33 = _StringObject.sharedUTF8.getter();
            }
            unint64_t v34 = v32 >> 16;
            int v35 = *(unsigned __int8 *)(v33 + (v32 >> 16));
          }
          int v36 = (char)v35;
          unsigned int v37 = __clz(v35 ^ 0xFF) - 24;
          if (v36 >= 0) {
            LOBYTE(v37) = 1;
          }
          unint64_t v143 = ((v34 + v37) << 16) | 5;
          if (v140) {
            goto LABEL_41;
          }
        }
      }
      else
      {
        if ((v144 ^ a11) < 0x4000)
        {
          BOOL v104 = v137 == v139;
          unint64_t v18 = a11;
LABEL_201:
          unint64_t v19 = a10;
          unint64_t v20 = v124;
          if (v104) {
            goto LABEL_240;
          }
          goto LABEL_202;
        }
        _StringGuts.validateScalarIndex(_:in:)(v144, a10, a11, v17, v16);
        if ((v16 & 0x1000000000000000) != 0)
        {
          uint64_t v38 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v16 & 0x2000000000000000) != 0)
          {
            unint64_t v141 = v17;
            uint64_t v142 = a13 & 0xFFFFFFFFFFFFFFLL;
          }
          else if ((v17 & 0x1000000000000000) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }
          uint64_t v38 = _decodeScalar(_:startingAt:)();
        }
        uint64_t v31 = v38;
        if (v140)
        {
LABEL_41:
          _StringGuts.validateScalarIndex(_:)(v27, v24, v26);
          if ((v26 & 0x1000000000000000) != 0)
          {
            uint64_t v39 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            _StringGuts.validateScalarIndex(_:)(v27, v24, v26);
            unint64_t v27 = String.UnicodeScalarView._foreignIndex(after:)();
            if (v31 == v39) {
              goto LABEL_61;
            }
          }
          else
          {
            if ((v26 & 0x2000000000000000) != 0)
            {
              unint64_t v141 = v24;
              uint64_t v142 = v26 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v39 = _decodeScalar(_:startingAt:)();
              unint64_t v42 = _StringGuts.validateScalarIndex(_:)(v27, v24, v26) >> 16;
              unint64_t v141 = v24;
              uint64_t v142 = v26 & 0xFFFFFFFFFFFFFFLL;
              int v43 = *((unsigned __int8 *)&v141 + v42);
            }
            else
            {
              if ((v24 & 0x1000000000000000) == 0) {
                _StringObject.sharedUTF8.getter();
              }
              uint64_t v39 = _decodeScalar(_:startingAt:)();
              unint64_t v40 = _StringGuts.validateScalarIndex(_:)(v27, v24, v26);
              if ((v24 & 0x1000000000000000) != 0) {
                uint64_t v41 = (v26 & 0xFFFFFFFFFFFFFFFLL) + 32;
              }
              else {
                uint64_t v41 = _StringObject.sharedUTF8.getter();
              }
              unint64_t v42 = v40 >> 16;
              int v43 = *(unsigned __int8 *)(v41 + (v40 >> 16));
            }
            int v44 = (char)v43;
            unsigned int v45 = __clz(v43 ^ 0xFF) - 24;
            if (v44 >= 0) {
              LOBYTE(v45) = 1;
            }
            unint64_t v27 = ((v42 + v45) << 16) | 5;
            if (v31 == v39) {
              goto LABEL_61;
            }
          }
          goto LABEL_63;
        }
      }
      _StringGuts.validateScalarIndex(_:in:)(v134, a1, a2, a3, v132);
      if ((v132 & 0x1000000000000000) != 0)
      {
        uint64_t v46 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((v132 & 0x2000000000000000) != 0)
        {
          unint64_t v141 = a3;
          uint64_t v142 = v127;
        }
        else if ((a3 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        uint64_t v46 = _decodeScalar(_:startingAt:)();
      }
      uint64_t v39 = v46;
      if (v31 == v46)
      {
LABEL_61:
        unint64_t v17 = a12;
        unint64_t v16 = a13;
        goto LABEL_98;
      }
LABEL_63:
      if (v23)
      {
        if (v140) {
          goto LABEL_82;
        }
        if (v31 == v39) {
          goto LABEL_66;
        }
        goto LABEL_84;
      }
      unint64_t v48 = Unicode.Scalar._transform(toHalfWidth:stripDiacritics:caseFolding:)(a5 & 1, v129 & 1, a7 & 1, v31);
      unint64_t v50 = v49;
      unint64_t v51 = specialized Collection.first.getter(v48, v49);
      if ((v51 & 0x100000000) != 0)
      {
        swift_bridgeObjectRelease();
        if (v140)
        {
          unint64_t v17 = a12;
          unint64_t v19 = a10;
          unint64_t v18 = a11;
          unint64_t v16 = a13;
          unint64_t v20 = v124;
          if (v137 != v139) {
            goto LABEL_202;
          }
          goto LABEL_240;
        }
        int v23 = 0;
        goto LABEL_85;
      }
      int v52 = v51;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      unint64_t v143 = 15;
      unint64_t v53 = _StringGuts.validateScalarIndex(_:)(0xFuLL, v48, v50);
      if ((v50 & 0x1000000000000000) != 0)
      {
        uint64_t v58 = String.UnicodeScalarView._foreignIndex(after:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v54 = v53 >> 16;
        if ((v50 & 0x2000000000000000) != 0)
        {
          unint64_t v141 = v48;
          uint64_t v142 = v50 & 0xFFFFFFFFFFFFFFLL;
          int v55 = *((unsigned __int8 *)&v141 + v54);
        }
        else
        {
          int v55 = (v48 & 0x1000000000000000) != 0
              ? *(unsigned __int8 *)((v50 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (v53 >> 16))
              : *(unsigned __int8 *)(_StringObject.sharedUTF8.getter() + v54);
        }
        swift_bridgeObjectRelease();
        unsigned int v56 = __clz(v55 ^ 0xFF) - 24;
        unsigned __int8 v57 = (v55 & 0x80u) == 0 ? 1 : v56;
        uint64_t v58 = ((v54 + v57) << 16) | 5;
      }
      unint64_t v143 = v58;
      if (v140) {
        break;
      }
      unint64_t v28 = v50;
      unint64_t v25 = v48;
      LODWORD(v31) = v52;
      if (v52 == v39)
      {
LABEL_66:
        char v47 = 0;
        unint64_t v17 = a12;
        unint64_t v16 = a13;
        if ((v28 & 0x2000000000000000) != 0) {
          goto LABEL_151;
        }
        goto LABEL_149;
      }
LABEL_84:
      int v23 = 1;
LABEL_85:
      unint64_t v59 = Unicode.Scalar._transform(toHalfWidth:stripDiacritics:caseFolding:)(a5 & 1, v129 & 1, a7 & 1, v39);
      unint64_t v61 = v60;
      unint64_t v62 = specialized Collection.first.getter(v59, v60);
      BOOL v140 = (v62 & 0x100000000) == 0;
      if ((v62 & 0x100000000) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        unint64_t v63 = _StringGuts.validateScalarIndex(_:)(0xFuLL, v59, v61);
        if ((v61 & 0x1000000000000000) != 0)
        {
          unint64_t v27 = String.UnicodeScalarView._foreignIndex(after:)();
        }
        else
        {
          unint64_t v64 = v63 >> 16;
          if ((v61 & 0x2000000000000000) != 0)
          {
            unint64_t v141 = v59;
            uint64_t v142 = v61 & 0xFFFFFFFFFFFFFFLL;
            int v66 = *((unsigned __int8 *)&v141 + v64);
          }
          else
          {
            if ((v59 & 0x1000000000000000) != 0) {
              uint64_t v65 = (v61 & 0xFFFFFFFFFFFFFFFLL) + 32;
            }
            else {
              uint64_t v65 = _StringObject.sharedUTF8.getter();
            }
            int v66 = *(unsigned __int8 *)(v65 + v64);
          }
          int v67 = (char)v66;
          unsigned int v68 = __clz(v66 ^ 0xFF) - 24;
          if (v67 >= 0) {
            LOBYTE(v68) = 1;
          }
          unint64_t v27 = ((v64 + v68) << 16) | 5;
        }
        unint64_t v26 = v61;
        unint64_t v24 = v59;
      }
      unint64_t v69 = specialized Collection.first.getter(v59, v61);
      swift_bridgeObjectRelease();
      if ((v69 & 0x100000000) != 0)
      {
        unint64_t v17 = a12;
        unint64_t v16 = a13;
LABEL_211:
        if (v137 != v139)
        {
          unint64_t v19 = a10;
          unint64_t v18 = a11;
          unint64_t v20 = v124;
          goto LABEL_202;
        }
        unint64_t v19 = a10;
        unint64_t v18 = a11;
        unint64_t v20 = v124;
        if (!v23) {
          goto LABEL_240;
        }
        goto LABEL_213;
      }
      unint64_t v17 = a12;
      unint64_t v16 = a13;
      if (v31 != v69) {
        goto LABEL_211;
      }
LABEL_98:
      if ((v23 & 1) == 0)
      {
        if (v140) {
          goto LABEL_154;
        }
        goto LABEL_161;
      }
      if (v140) {
        goto LABEL_100;
      }
      char v47 = 0;
      if ((v28 & 0x2000000000000000) != 0)
      {
LABEL_151:
        uint64_t v93 = HIBYTE(v28) & 0xF;
        goto LABEL_152;
      }
LABEL_149:
      uint64_t v93 = v25 & 0xFFFFFFFFFFFFLL;
LABEL_152:
      if (v143 >> 14 == 4 * v93)
      {
        if (v47)
        {
LABEL_154:
          char v94 = 0;
          if ((v26 & 0x2000000000000000) == 0) {
            goto LABEL_155;
          }
          goto LABEL_158;
        }
LABEL_161:
        char v96 = 0;
LABEL_162:
        unint64_t v97 = _StringGuts.validateScalarIndex(_:)(v144, v17, v16);
        if ((v16 & 0x1000000000000000) != 0)
        {
          uint64_t v103 = String.UnicodeScalarView._foreignIndex(after:)();
        }
        else
        {
          unint64_t v98 = v97 >> 16;
          if ((v16 & 0x2000000000000000) != 0)
          {
            unint64_t v141 = v17;
            uint64_t v142 = a13 & 0xFFFFFFFFFFFFFFLL;
            int v100 = *((unsigned __int8 *)&v141 + v98);
          }
          else
          {
            uint64_t v99 = (a13 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((v17 & 0x1000000000000000) == 0) {
              uint64_t v99 = _StringObject.sharedUTF8.getter();
            }
            int v100 = *(unsigned __int8 *)(v99 + v98);
          }
          int v101 = (char)v100;
          unsigned int v102 = __clz(v100 ^ 0xFF) - 24;
          if (v101 >= 0) {
            LOBYTE(v102) = 1;
          }
          uint64_t v103 = ((v98 + v102) << 16) | 5;
        }
        unint64_t v144 = v103;
        int v23 = 0;
        if ((v96 & 1) == 0) {
          goto LABEL_186;
        }
        BOOL v140 = 1;
        unint64_t v137 = v136;
        BOOL v104 = v136 == v139;
        if (v136 >= v139)
        {
          unint64_t v18 = a11;
          goto LABEL_201;
        }
      }
      else
      {
        if ((v47 & 1) == 0) {
          goto LABEL_185;
        }
        char v94 = 1;
        if ((v26 & 0x2000000000000000) == 0)
        {
LABEL_155:
          uint64_t v95 = v24 & 0xFFFFFFFFFFFFLL;
          goto LABEL_159;
        }
LABEL_158:
        uint64_t v95 = HIBYTE(v26) & 0xF;
LABEL_159:
        if (v27 >> 14 == 4 * v95)
        {
          if (v94)
          {
LABEL_185:
            int v23 = 1;
LABEL_186:
            unint64_t v105 = _StringGuts.validateScalarIndex(_:)(v134, a3, v132);
            if ((v132 & 0x1000000000000000) != 0)
            {
              unint64_t v29 = String.UnicodeScalarView._foreignIndex(after:)();
            }
            else
            {
              unint64_t v106 = v105 >> 16;
              if ((v132 & 0x2000000000000000) != 0)
              {
                unint64_t v141 = a3;
                uint64_t v142 = v127;
                int v108 = *((unsigned __int8 *)&v141 + v106);
              }
              else
              {
                uint64_t v107 = v126;
                if ((a3 & 0x1000000000000000) == 0) {
                  uint64_t v107 = _StringObject.sharedUTF8.getter();
                }
                int v108 = *(unsigned __int8 *)(v107 + v106);
              }
              int v109 = (char)v108;
              unsigned int v110 = __clz(v108 ^ 0xFF) - 24;
              if (v109 >= 0) {
                LOBYTE(v110) = 1;
              }
              unint64_t v29 = ((v106 + v110) << 16) | 5;
            }
            unint64_t v137 = v29 >> 14;
            if (v29 >> 14 < v139) {
              goto LABEL_18;
            }
            goto LABEL_211;
          }
          goto LABEL_161;
        }
        if ((v94 & 1) == 0)
        {
          char v96 = 1;
          goto LABEL_162;
        }
        BOOL v140 = 1;
        LOBYTE(v23) = 1;
        unint64_t v137 = v136;
        BOOL v30 = v136 == v139;
        if (v136 >= v139) {
          goto LABEL_205;
        }
      }
    }
    unint64_t v28 = v50;
    unint64_t v25 = v48;
LABEL_82:
    unint64_t v17 = a12;
    unint64_t v16 = a13;
LABEL_100:
    uint64_t v70 = HIBYTE(v26) & 0xF;
    if ((v26 & 0x2000000000000000) == 0) {
      uint64_t v70 = v24 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v71 = 4 * v70;
    uint64_t v72 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000) == 0) {
      uint64_t v72 = v25 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v73 = 4 * v72;
    unint64_t v74 = v143;
    unint64_t v75 = v143 >> 14;
    if (v143 >> 14 != v73)
    {
      do
      {
        if (v71 == v27 >> 14) {
          break;
        }
        _StringGuts.validateScalarIndex(_:)(v74, v25, v28);
        if ((v28 & 0x1000000000000000) != 0)
        {
          int v76 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v28 & 0x2000000000000000) != 0)
          {
            unint64_t v141 = v25;
            uint64_t v142 = v28 & 0xFFFFFFFFFFFFFFLL;
          }
          else if ((v25 & 0x1000000000000000) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }
          int v76 = _decodeScalar(_:startingAt:)();
        }
        int v77 = v76;
        _StringGuts.validateScalarIndex(_:)(v27, v24, v26);
        if ((v26 & 0x1000000000000000) != 0)
        {
          int v78 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }
        else
        {
          if ((v26 & 0x2000000000000000) != 0)
          {
            unint64_t v141 = v24;
            uint64_t v142 = v26 & 0xFFFFFFFFFFFFFFLL;
          }
          else if ((v24 & 0x1000000000000000) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }
          int v78 = _decodeScalar(_:startingAt:)();
        }
        int v79 = v78;
        unint64_t v74 = v143;
        if (v77 != v79) {
          break;
        }
        unint64_t v80 = _StringGuts.validateScalarIndex(_:)(v143, v25, v28);
        if ((v28 & 0x1000000000000000) != 0)
        {
          uint64_t v84 = String.UnicodeScalarView._foreignIndex(after:)();
        }
        else
        {
          unint64_t v81 = v80 >> 16;
          if ((v28 & 0x2000000000000000) != 0)
          {
            unint64_t v141 = v25;
            uint64_t v142 = v28 & 0xFFFFFFFFFFFFFFLL;
            int v83 = *((unsigned __int8 *)&v141 + v81);
          }
          else
          {
            uint64_t v82 = (v28 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((v25 & 0x1000000000000000) == 0) {
              uint64_t v82 = _StringObject.sharedUTF8.getter();
            }
            int v83 = *(unsigned __int8 *)(v82 + v81);
          }
          int v85 = (char)v83;
          unsigned int v86 = __clz(v83 ^ 0xFF) - 24;
          if (v85 >= 0) {
            LOBYTE(v86) = 1;
          }
          uint64_t v84 = ((v81 + v86) << 16) | 5;
        }
        unint64_t v143 = v84;
        unint64_t v87 = _StringGuts.validateScalarIndex(_:)(v27, v24, v26);
        if ((v26 & 0x1000000000000000) != 0)
        {
          unint64_t v27 = String.UnicodeScalarView._foreignIndex(after:)();
        }
        else
        {
          unint64_t v88 = v87 >> 16;
          if ((v26 & 0x2000000000000000) != 0)
          {
            unint64_t v141 = v24;
            uint64_t v142 = v26 & 0xFFFFFFFFFFFFFFLL;
            int v90 = *((unsigned __int8 *)&v141 + v88);
          }
          else
          {
            uint64_t v89 = (v26 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((v24 & 0x1000000000000000) == 0) {
              uint64_t v89 = _StringObject.sharedUTF8.getter();
            }
            int v90 = *(unsigned __int8 *)(v89 + v88);
          }
          int v91 = (char)v90;
          unsigned int v92 = __clz(v90 ^ 0xFF) - 24;
          if (v91 >= 0) {
            LOBYTE(v92) = 1;
          }
          unint64_t v27 = ((v88 + v92) << 16) | 5;
        }
        unint64_t v74 = v143;
      }
      while (v73 != v143 >> 14);
      unint64_t v75 = v74 >> 14;
      unint64_t v17 = a12;
      unint64_t v16 = a13;
    }
    if (v75 == v73 || v71 == v27 >> 14)
    {
      char v47 = 1;
      if ((v28 & 0x2000000000000000) != 0) {
        goto LABEL_151;
      }
      goto LABEL_149;
    }
    BOOL v30 = v137 == v139;
LABEL_205:
    unint64_t v19 = a10;
    unint64_t v18 = a11;
    unint64_t v20 = v124;
    if (!v30) {
      goto LABEL_202;
    }
LABEL_213:
    if (v129) {
      specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(&v143, v25, v28);
    }
    uint64_t v111 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000) == 0) {
      uint64_t v111 = v25 & 0xFFFFFFFFFFFFLL;
    }
    if (v143 >> 14 == 4 * v111)
    {
      unint64_t v114 = _StringGuts.validateScalarIndex(_:)(v144, v17, v16);
      if ((v16 & 0x1000000000000000) != 0)
      {
        uint64_t v120 = String.UnicodeScalarView._foreignIndex(after:)();
      }
      else
      {
        unint64_t v115 = v114 >> 16;
        if ((v16 & 0x2000000000000000) != 0)
        {
          unint64_t v141 = v17;
          uint64_t v142 = a13 & 0xFFFFFFFFFFFFFFLL;
          long long v116 = &v141;
        }
        else
        {
          if ((v17 & 0x1000000000000000) == 0) {
            uint64_t v135 = _StringObject.sharedUTF8.getter();
          }
          long long v116 = (void *)v135;
        }
        int v117 = *((unsigned __int8 *)v116 + v115);
        int v118 = (char)v117;
        unsigned int v119 = __clz(v117 ^ 0xFF) - 24;
        if (v118 >= 0) {
          LOBYTE(v119) = 1;
        }
        uint64_t v120 = ((v115 + v119) << 16) | 5;
      }
      unint64_t v144 = v120;
      goto LABEL_240;
    }
LABEL_202:
    if (v125 == v20 >> 14)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    unint64_t v20 = Substring.UnicodeScalarView.index(_:offsetBy:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v22 = a1 >> 14;
  }
  if (v22 != v139) {
    goto LABEL_202;
  }
LABEL_240:
  if ((v129 & 1) != 0 && v144 >> 14 < v18 >> 14) {
    specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)(&v144, v19, v18, v17, v16);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!((v122 | v123 ^ 1) & 1 | ((v144 ^ v18) < 0x4000))) {
    return 0;
  }
  if (v144 >> 14 < v20 >> 14)
  {
    __break(1u);
    return 0;
  }
  return v20;
}

uint64_t specialized Rope.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t specialized Rope.distance<A>(from:to:in:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return specialized Rope.distance<A>(from:to:in:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, specialized Rope._UnsafeHandle.distance<A>(from:to:in:), specialized Rope._Node.distance<A>(from:to:in:));
}

{
  return specialized Rope.distance<A>(from:to:in:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle.distance<A>(from:to:in:), (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._Node.distance<A>(from:to:in:));
}

uint64_t specialized Rope.distance<A>(from:to:in:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a12)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (result != a10 || a4 != a10)
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  if (a2 == a5) {
    return 0;
  }
  if (!a7) {
    goto LABEL_19;
  }
  uint64_t v19 = result;
  if (a3 && a6 && a3 == a6)
  {
    uint64_t v22 = a3 + 16;
    char v23 = (4 * *(unsigned char *)(a3 + 18) + 8) & 0x3C;
    return a11((a2 >> v23) & 0xF, (a5 >> v23) & 0xF, v22, a3 + 24);
  }
  else
  {
    swift_unknownObjectRetain();
    if (a2 < a5)
    {
      uint64_t v20 = a12(v19, a2, a3, v19, a5, a6, a7, a8, a9);
      swift_unknownObjectRelease();
      return v20;
    }
    uint64_t v21 = a12(v19, a5, a6, v19, a2, a3, a7, a8, a9);
    swift_unknownObjectRelease();
    uint64_t result = -v21;
    if (__OFSUB__(0, v21)) {
      goto LABEL_20;
    }
  }
  return result;
}

unint64_t specialized Rope.subscript.getter(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (result == a7)
  {
    if (a3)
    {
      unint64_t v8 = *(void *)(a3 + 24 * ((a2 >> ((4 * *(unsigned char *)(a3 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v8 = specialized Rope._Node.subscript.getter(a2, a4);
      swift_unknownObjectRelease();
    }
    return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized Rope._Node.distanceFromStart<A>(to:in:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a4 + 16;
  unint64_t v6 = *(unsigned __int16 *)(a4 + 16);
  int v8 = *(unsigned __int8 *)(a4 + 18);
  unint64_t v9 = (a2 >> ((4 * v8 + 8) & 0x3C)) & 0xF;
  if (v9 > v6)
  {
    __break(1u);
  }
  else
  {
    if (v9 == v6)
    {
      if ((a2 & (~(-1 << ((4 * v8) & 0x3C)) << 8)) == 0) {
        return a6;
      }
      __break(1u);
    }
    uint64_t v13 = result;
    uint64_t v14 = (uint64_t *)(a4 + 24);
    swift_unknownObjectRetain();
    if (!v8)
    {
      uint64_t v21 = specialized closure #1 in Rope._Node.distanceFromStart<A>(to:in:)(v7, v14, v9);
      swift_unknownObjectRelease();
      return v21;
    }
    uint64_t v15 = specialized Rope._UnsafeHandle.distance<A>(from:to:in:)(0, v9, v7, (uint64_t)v14);
    unint64_t v16 = &v14[3 * v9];
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    swift_unknownObjectRetain();
    uint64_t v20 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v13, a2, a3, v17, v18, v19);
    uint64_t result = swift_unknownObjectRelease();
    a6 = v15 + v20;
    if (!__OFADD__(v15, v20))
    {
      swift_unknownObjectRelease();
      return a6;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Rope._Node.distanceFromStart<A>(to:in:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3 < 0)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v10 = specialized Sequence.reduce<A>(into:_:)(0, (void (*)(uint64_t *, void *))partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:), (uint64_t)&v11, v8, 0, v9);
    BOOL v7 = __OFSUB__(0, v10);
    uint64_t result = -v10;
    if (v7) {
LABEL_9:
    }
      __break(1u);
  }
  else
  {
    uint64_t result = 0;
    if (a3)
    {
      while (1)
      {
        uint64_t v6 = *a2;
        a2 += 3;
        BOOL v7 = __OFADD__(result, v6);
        result += v6;
        if (v7) {
          break;
        }
        if (!--v3) {
          return result;
        }
      }
      __break(1u);
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t specialized Rope._UnsafeHandle.distance<A>(from:to:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v11 = specialized Sequence.reduce<A>(into:_:)(0, (void (*)(uint64_t *, uint64_t *))partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:), (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }
  uint64_t result = 0;
  if (!v6)
  {
    uint64_t v14 = (uint64_t *)(v4 + 24 * v5 + 8);
    while (1)
    {
      uint64_t v15 = *v14;
      v14 += 3;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v11 = specialized Sequence.reduce<A>(into:_:)(0, (void (*)(uint64_t *, uint64_t *))partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:), (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }
  uint64_t result = 0;
  if (!v6)
  {
    uint64_t v14 = (uint64_t *)(v4 + 24 * v5 + 16);
    while (1)
    {
      uint64_t v15 = *v14;
      v14 += 3;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v11 = specialized Sequence.reduce<A>(into:_:)(0, (void (*)(uint64_t *, void *))partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:), (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }
  uint64_t result = 0;
  if (!v6)
  {
    uint64_t v14 = (uint64_t *)(v4 + 24 * v5);
    while (1)
    {
      uint64_t v15 = *v14;
      v14 += 3;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized Rope._UnsafeHandle.distance<A>(from:to:in:)(uint64_t result, uint64_t a2)
{
  if (result <= a2)
  {
    if (result == a2) {
      return 0;
    }
    uint64_t v9 = 0;
    while ((unint64_t)(~result + a2) <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (result - a2 == --v9) {
        return -v9;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  v10[10] = v2;
  v10[11] = v3;
  MEMORY[0x1F4188790](result);
  uint64_t v7 = specialized Sequence.reduce<A>(into:_:)(0, (void (*)(uint64_t *, void *))partial apply for specialized closure #2 in Rope._UnsafeHandle.distance<A>(from:to:in:), (uint64_t)v10, v4, v5, v6);
  BOOL v8 = __OFSUB__(0, v7);
  uint64_t result = -v7;
  if (v8) {
LABEL_11:
  }
    __break(1u);
  return result;
}

uint64_t specialized Rope.formIndex<A>(_:offsetBy:in:preferEnd:)(uint64_t result, uint64_t *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(void *)result != a7) {
    goto LABEL_24;
  }
  uint64_t v9 = a4;
  uint64_t v11 = *a2;
  if (a4)
  {
    char v8 = a3;
    uint64_t v7 = result;
    if (v11 > 0)
    {
      uint64_t v12 = a7;
      uint64_t v13 = *(void *)(result + 16);
      if (!v13
        || (uint64_t result = specialized Rope._UnsafeHandle._seekForwardInLeaf<A>(from:by:in:preferEnd:)((unint64_t *)(result + 8), a2, a3 & 1, (unsigned __int16 *)(v13 + 16)), (result & 1) == 0))
      {
        if (*(unsigned char *)(v9 + 18))
        {
          swift_unknownObjectRetain();
          char v14 = specialized closure #2 in Rope._Node.seekForward<A>(from:by:in:preferEnd:)(v9 + 16, v9 + 24, v7, v9, a2, v8 & 1);
          uint64_t result = swift_unknownObjectRelease();
          if (v14) {
            return result;
          }
LABEL_18:
          if (!*a2)
          {
            unint64_t v17 = ((-15 << ((4 * *(unsigned char *)(v9 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v9 + 18) | ((unint64_t)*(unsigned __int16 *)(v9 + 16) << ((4 * *(unsigned char *)(v9 + 18) + 8) & 0x3C));
            *(void *)uint64_t v7 = v12;
            *(void *)(v7 + 8) = v17;
            uint64_t v9 = 0;
            goto LABEL_20;
          }
LABEL_26:
          __break(1u);
          return result;
        }
LABEL_17:
        uint64_t result = specialized Rope._UnsafeHandle._seekForwardInLeaf<A>(from:by:in:preferEnd:)((unint64_t *)(v7 + 8), a2, v8 & 1, (unsigned __int16 *)(v9 + 16));
        if (result)
        {
LABEL_20:
          *(void *)(v7 + 16) = v9;
          return result;
        }
        goto LABEL_18;
      }
      return result;
    }
  }
  else
  {
    if (!v11) {
      return result;
    }
    __break(1u);
  }
  BOOL v15 = __OFSUB__(0, v11);
  uint64_t v16 = -v11;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  *a2 = v16;
  if (v16 > 0 || (v8 & 1) != 0)
  {
    if (*(unsigned char *)(a4 + 18))
    {
      uint64_t v12 = a4 + 16;
      swift_unknownObjectRetain();
      uint64_t v7 = specialized closure #2 in Rope._Node.seekBackward<A>(from:by:in:preferEnd:)(v9 + 16, v9 + 24, v7, v9, a2, v8 & 1);
      uint64_t result = swift_unknownObjectRelease();
      if (v7) {
        return result;
      }
      __break(1u);
      goto LABEL_17;
    }
    uint64_t result = specialized Rope._UnsafeHandle._seekBackwardInLeaf<A>(from:by:in:preferEnd:)((unint64_t *)(v7 + 8), a2, v8 & 1);
    if ((result & 1) == 0)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
  }
  return result;
}

uint64_t specialized Rope._Node.distance<A>(from:to:in:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = a7 + 16;
  unint64_t v9 = *(unsigned __int16 *)(a7 + 16);
  int v11 = *(unsigned __int8 *)(a7 + 18);
  char v12 = (4 * v11 + 8) & 0x3C;
  unint64_t v13 = (a2 >> v12) & 0xF;
  unint64_t v14 = (a5 >> v12) & 0xF;
  if (v13 >= v9 || v14 > v9)
  {
    __break(1u);
  }
  else
  {
    uint64_t v18 = a3;
    uint64_t v20 = result;
    if (v14 != v9) {
      goto LABEL_10;
    }
    if ((a5 & (~(-1 << ((4 * v11) & 0x3C)) << 8)) == 0)
    {
      uint64_t v21 = specialized Rope._Node.distanceFromStart<A>(to:in:)(result, a2, a3, a7, a8, a9);
      uint64_t v18 = a9 - v21;
      if (!__OFSUB__(a9, v21)) {
        return v18;
      }
      __break(1u);
LABEL_10:
      uint64_t v23 = a6;
      uint64_t v24 = a4;
      swift_unknownObjectRetain();
      if (v11) {
        uint64_t v22 = specialized closure #2 in Rope._Node.distance<A>(from:to:in:)(v10, a7 + 24, v13, v14, v20, a2, v18, v24, a5, v23);
      }
      else {
        uint64_t v22 = specialized closure #1 in Rope._Node.distance<A>(from:to:in:)(v10, a7 + 24, v13, v14);
      }
      uint64_t v18 = v22;
      swift_unknownObjectRelease();
      return v18;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Rope._Node.distance<A>(from:to:in:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a7 + 16;
  unint64_t v8 = *(unsigned __int16 *)(a7 + 16);
  int v10 = *(unsigned __int8 *)(a7 + 18);
  char v11 = (4 * v10 + 8) & 0x3C;
  unint64_t v12 = (a2 >> v11) & 0xF;
  unint64_t v13 = (a5 >> v11) & 0xF;
  if (v12 >= v8 || v13 > v8)
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = a3;
    uint64_t v19 = result;
    if (v13 != v8) {
      goto LABEL_10;
    }
    if ((a5 & (~(-1 << ((4 * v10) & 0x3C)) << 8)) == 0)
    {
      uint64_t v21 = specialized Rope._Node.distanceFromStart<A>(to:in:)(result, a2, a3, a7, a8);
      uint64_t v17 = a8 - v21;
      if (!__OFSUB__(a8, v21)) {
        return v17;
      }
      __break(1u);
LABEL_10:
      uint64_t v23 = a6;
      uint64_t v24 = a4;
      swift_unknownObjectRetain();
      if (v10) {
        uint64_t v22 = specialized closure #2 in Rope._Node.distance<A>(from:to:in:)(v9, a7 + 24, v12, v13, v19, a2, v17, v24, a5, v23);
      }
      else {
        uint64_t v22 = specialized closure #1 in Rope._Node.distance<A>(from:to:in:)(v9, a7 + 24, v12, v13);
      }
      uint64_t v17 = v22;
      swift_unknownObjectRelease();
      return v17;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #2 in Rope._Node.distance<A>(from:to:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  BOOL v15 = (uint64_t *)(a2 + 24 * a3);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = v15[2];
  swift_unknownObjectRetain();
  if (a3 == a4)
  {
    uint64_t v19 = specialized Rope._Node.distance<A>(from:to:in:)(a5, a6, a7, a8, a9, a10, v17, v16, v18);
    swift_unknownObjectRelease();
    return v19;
  }
  uint64_t v21 = specialized Rope._Node.distanceFromStart<A>(to:in:)(a5, a6, a7, v17, v16, v18);
  uint64_t result = swift_unknownObjectRelease();
  BOOL v22 = __OFSUB__(v18, v21);
  uint64_t v23 = v18 - v21;
  if (v22)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = a3 + 1;
  if (__OFADD__(a3, 1))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = specialized Rope._UnsafeHandle.distance<A>(from:to:in:)(result, a4, a1, a2);
  uint64_t v24 = v23 + result;
  if (__OFADD__(v23, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v25 = (uint64_t *)(a2 + 24 * a4);
  uint64_t v26 = *v25;
  uint64_t v27 = v25[1];
  uint64_t v28 = v25[2];
  swift_unknownObjectRetain();
  uint64_t v29 = specialized Rope._Node.distanceFromStart<A>(to:in:)(a8, a9, a10, v26, v27, v28);
  swift_unknownObjectRelease();
  uint64_t result = v24 + v29;
  if (__OFADD__(v24, v29)) {
LABEL_11:
  }
    __break(1u);
  return result;
}

{
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  BOOL v15 = (uint64_t *)(a2 + 24 * a3);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  uint64_t v18 = v15[2];
  swift_unknownObjectRetain();
  if (a3 == a4)
  {
    uint64_t v19 = specialized Rope._Node.distance<A>(from:to:in:)(a5, a6, a7, a8, a9, a10, v16, v17, v18);
    swift_unknownObjectRelease();
    return v19;
  }
  uint64_t v21 = specialized Rope._Node.distanceFromStart<A>(to:in:)(a5, a6, a7, v16, v17);
  uint64_t result = swift_unknownObjectRelease();
  BOOL v22 = __OFSUB__(v17, v21);
  uint64_t v23 = v17 - v21;
  if (v22)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = a3 + 1;
  if (__OFADD__(a3, 1))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = specialized Rope._UnsafeHandle.distance<A>(from:to:in:)(result, a4, a1, a2);
  uint64_t v24 = v23 + result;
  if (__OFADD__(v23, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v25 = (uint64_t *)(a2 + 24 * a4);
  uint64_t v26 = *v25;
  uint64_t v27 = v25[1];
  swift_unknownObjectRetain();
  uint64_t v28 = specialized Rope._Node.distanceFromStart<A>(to:in:)(a8, a9, a10, v26, v27);
  swift_unknownObjectRelease();
  uint64_t result = v24 + v28;
  if (__OFADD__(v24, v28)) {
LABEL_11:
  }
    __break(1u);
  return result;
}