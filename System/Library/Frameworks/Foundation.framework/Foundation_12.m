void AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)(uint64_t *a1@<X3>, char *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, void *a6@<X8>, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void v26[2];
  void v27[2];
  char v28;
  char v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v15 = a1[1];
  v16 = a1[2];
  v17 = *a2;
  v19 = *a7;
  v18 = a7[1];
  v35 = *a1;
  v36 = v15;
  v37 = v16;
  v20 = StaticString.description.getter();
  v22 = v21;
  v27[0] = 0;
  v27[1] = 0;
  v28 = 1;
  v29 = v17 & 1;
  v30 = 0;
  v31 = 256;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  if (!v19)
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    v26[0] = static LocaleCache.cache;
    v19 = LocaleCache.current.getter();
    v18 = v23;
  }
  v26[0] = v19;
  v26[1] = v18;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(v20, v22, (uint64_t)v27, a3, a4, (uint64_t)a5, (uint64_t)v26, a11, 1u, a12, a13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *a6 = v38;
}

void AttributedString.init(localized:options:table:bundle:localization:locale:comment:)(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v13 = *a1;
  v14 = (void *)a1[1];
  v15 = (_OWORD *)a1[2];
  char v16 = *a2;
  uint64_t v17 = *a8;
  uint64_t v18 = a8[1];
  v22[0] = 0;
  v22[1] = 0;
  char v23 = 1;
  char v24 = v16 & 1;
  uint64_t v25 = 0;
  __int16 v26 = 256;
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  char v29 = 0;
  if (v17)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v19 = one-time initialization token for cache;
    swift_bridgeObjectRetain();
    if (v19 != -1) {
      swift_once();
    }
    uint64_t v21 = static LocaleCache.cache;
    uint64_t v17 = LocaleCache.current.getter();
    uint64_t v18 = v20;
  }
  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v22, a3, a4, (uint64_t)a5, v17, v18, 1u, v13, v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a9 = v21;
}

uint64_t AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)@<X0>(long long *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, long long *a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  uint64_t v19 = *((void *)a1 + 2);
  char v20 = *a2;
  long long v32 = *a1;
  uint64_t v33 = v19;
  v24[0] = 0;
  v24[1] = 0;
  char v25 = 1;
  char v26 = v20 & 1;
  uint64_t v27 = 0;
  __int16 v28 = 256;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  char v31 = 0;
  long long v23 = *a8;
  swift_bridgeObjectRetain();
  AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)((uint64_t *)&v32, v24, a3, a4, a5, (uint64_t *)&v23, &v34, v22, a14, a14, a15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t result = swift_release();
  *a9 = v34;
  return result;
}

void AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  uint64_t v17 = a1[1];
  uint64_t v18 = a1[2];
  char v19 = *a2;
  uint64_t v21 = *a8;
  uint64_t v20 = a8[1];
  uint64_t v35 = *a1;
  uint64_t v36 = v17;
  uint64_t v37 = v18;
  v27[0] = 0;
  v27[1] = 0;
  char v28 = 1;
  char v29 = v19 & 1;
  uint64_t v30 = 0;
  __int16 v31 = 256;
  uint64_t v32 = a6;
  uint64_t v33 = a7;
  char v34 = 0;
  if (v21)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v22 = one-time initialization token for cache;
    swift_bridgeObjectRetain();
    if (v22 != -1) {
      swift_once();
    }
    v26[0] = static LocaleCache.cache;
    uint64_t v21 = LocaleCache.current.getter();
    uint64_t v20 = v23;
  }
  v26[0] = v21;
  v26[1] = v20;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v27, a3, a4, (uint64_t)a5, (uint64_t)v26, a13, 1u, a14, a15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a9 = v38;
}

void AttributedString.init(localized:options:table:bundle:localization:locale:comment:)(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, void *a9@<X8>)
{
  uint64_t v12 = *a1;
  uint64_t v13 = (void *)a1[1];
  v14 = (_OWORD *)a1[2];
  long long v15 = a2[1];
  v17[0] = *a2;
  v17[1] = v15;
  v18[0] = a2[2];
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)a2 + 41);
  specialized AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)(v12, v13, v14, (uint64_t *)v17, a3, a4, a5, a6, &v16, a7, *a8, a8[1]);
  *a9 = v16;
}

void specialized AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a10;
  uint64_t v14 = a4[6];
  if (!a10)
  {
    a8 = a4[5];
    swift_bridgeObjectRetain();
    uint64_t v13 = v14;
  }
  uint64_t v16 = *a4;
  uint64_t v15 = a4[1];
  char v17 = *((unsigned char *)a4 + 16);
  char v18 = *((unsigned char *)a4 + 17);
  uint64_t v19 = a4[3];
  char v20 = *((unsigned char *)a4 + 32);
  char v21 = *((unsigned char *)a4 + 33);
  char v22 = *((unsigned char *)a4 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35[0] = v16;
  v35[1] = v15;
  char v36 = v17;
  char v37 = v18;
  uint64_t v38 = v19;
  char v39 = v20;
  char v40 = v21;
  uint64_t v41 = a8;
  uint64_t v42 = v13;
  char v43 = v22;
  uint64_t v23 = a11;
  if (!a11)
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v34 = static LocaleCache.cache;
    uint64_t v23 = LocaleCache.current.getter();
    a12 = v25;
  }
  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v35, a5, a6, (uint64_t)a7, v23, a12, 1u, a1, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a9 = v34;
}

void AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  uint64_t v15 = *a1;
  uint64_t v28 = a1[1];
  uint64_t v35 = *a2;
  uint64_t v33 = a1[2];
  uint64_t v34 = a2[1];
  char v16 = *((unsigned char *)a2 + 16);
  char v27 = *((unsigned char *)a2 + 17);
  uint64_t v26 = a2[3];
  char v17 = *((unsigned char *)a2 + 32);
  char v25 = *((unsigned char *)a2 + 33);
  uint64_t v18 = a2[6];
  char v19 = *((unsigned char *)a2 + 56);
  uint64_t v20 = *a8;
  uint64_t v24 = a8[1];
  if (a7)
  {
    uint64_t v21 = a7;
  }
  else
  {
    a6 = a2[5];
    swift_bridgeObjectRetain();
    uint64_t v21 = v18;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = v15;
  uint64_t v47 = v28;
  uint64_t v48 = v33;
  v37[0] = v35;
  v37[1] = v34;
  char v38 = v16;
  char v39 = v27;
  uint64_t v40 = v26;
  char v41 = v17;
  char v42 = v25;
  uint64_t v43 = a6;
  uint64_t v44 = v21;
  char v45 = v19;
  if (v20)
  {
    uint64_t v23 = v24;
  }
  else
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    v36[0] = static LocaleCache.cache;
    uint64_t v20 = LocaleCache.current.getter();
  }
  v36[0] = v20;
  v36[1] = v23;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v37, a3, a4, (uint64_t)a5, (uint64_t)v36, a13, 1u, a14, a15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a9 = v49;
}

uint64_t AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)@<X0>(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, long long *a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  uint64_t v16 = *((void *)a1 + 2);
  char v17 = *((unsigned char *)a2 + 16);
  char v18 = *((unsigned char *)a2 + 17);
  uint64_t v19 = *((void *)a2 + 3);
  char v20 = *((unsigned char *)a2 + 32);
  char v21 = *((unsigned char *)a2 + 33);
  char v22 = *((unsigned char *)a2 + 56);
  long long v37 = *a1;
  uint64_t v38 = v16;
  long long v23 = *a2;
  char v30 = v17;
  char v31 = v18;
  uint64_t v32 = v19;
  char v33 = v20;
  char v34 = v21;
  long long v35 = *(long long *)((char *)a2 + 40);
  char v36 = v22;
  long long v28 = *a8;
  long long v29 = v23;
  AttributedString.init<A>(localized:options:table:bundle:localization:locale:comment:including:)((uint64_t *)&v37, (uint64_t *)&v29, a3, a4, a5, a6, a7, (uint64_t *)&v28, &v39, v25, v26, v27, a14, a14, a15);
  uint64_t result = swift_release();
  *a9 = v39;
  return result;
}

uint64_t one-time initialization function for formatSpecifierConfiguration()
{
  uint64_t result = String._bridgeToObjectiveCImpl()();
  static NSAttributedStringKey.formatSpecifierConfiguration = result;
  return result;
}

uint64_t closure #1 in String.LocalizationValue.argumentsWithReplacements(_:locale:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(a1, (uint64_t)&v35);
  if (v37 != 6)
  {
    outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)&v35);
    return outlined init with copy of String.LocalizationValue.FormatArgument(a1, a5);
  }
  int v10 = v35;
  unint64_t v11 = a2[1];
  unint64_t v12 = *(void *)(*a2 + 16);
  if (v11 != v12)
  {
    if (v11 >= v12)
    {
      __break(1u);
      JUMPOUT(0x181DD980CLL);
    }
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(*a2 + 40 * v11 + 32, (uint64_t)&v35);
    a2[1] = v11 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v35, (uint64_t)v32);
    *(void *)&long long v35 = a3;
    *((void *)&v35 + 1) = a4;
    uint64_t v16 = processPlaceholderReplacement(_:locale:)((uint64_t)v31, (uint64_t)v32, &v35);
    uint64_t v18 = v17;
    unint64_t v19 = 0xE400000000000000;
    uint64_t v20 = 1684827173;
    switch(v10)
    {
      case 0:
        goto LABEL_19;
      case 1:
        if (v16 != 1970039845) {
          goto LABEL_23;
        }
        goto LABEL_20;
      case 2:
        unint64_t v19 = 0xE200000000000000;
        uint64_t v20 = 26149;
LABEL_19:
        if (v16 == v20) {
          goto LABEL_20;
        }
        goto LABEL_23;
      case 3:
        unint64_t v19 = 0xE300000000000000;
        if (v16 != 6712357) {
          goto LABEL_23;
        }
        goto LABEL_20;
      default:
        while (2)
        {
          unint64_t v19 = 0xE200000000000000;
          if (v16 != 16421) {
            goto LABEL_23;
          }
LABEL_20:
          if (v18 == v19)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
LABEL_23:
            char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t v16 = swift_bridgeObjectRelease();
            if ((v23 & 1) == 0)
            {
              switch(v10)
              {
                case 0:
                  uint64_t v24 = MEMORY[0x1E4FBC1C8];
                  unint64_t v27 = MEMORY[0x1E4FBC240];
                  goto LABEL_33;
                case 1:
                  uint64_t v24 = MEMORY[0x1E4FBC538];
                  unint64_t v27 = MEMORY[0x1E4FBC598];
                  goto LABEL_33;
                case 2:
                  uint64_t v24 = MEMORY[0x1E4FBB470];
                  uint64_t v29 = MEMORY[0x1E4FBB470];
                  unint64_t v30 = MEMORY[0x1E4FBB4D0];
                  LODWORD(v28[0]) = 0;
                  break;
                case 3:
                  uint64_t v24 = MEMORY[0x1E4FBB3D0];
                  unint64_t v27 = MEMORY[0x1E4FBB460];
LABEL_33:
                  uint64_t v29 = v24;
                  unint64_t v30 = v27;
                  v28[0] = 0;
                  break;
                case 4:
                  uint64_t v24 = MEMORY[0x1E4FBB1A0];
                  uint64_t v29 = MEMORY[0x1E4FBB1A0];
                  unint64_t v30 = lazy protocol witness table accessor for type String and conformance String();
                  v28[0] = 0x296C6C756E28;
                  v28[1] = 0xE600000000000000;
                  break;
                default:
                  continue;
              }
LABEL_25:
              uint64_t v25 = __swift_project_boxed_opaque_existential_1(v28, v24);
              uint64_t v36 = v24;
              boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v35);
              (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v24 - 8) + 16))(boxed_opaque_existential_1, v25, v24);
              char v37 = 0;
              outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v35, a5);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
              return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
            }
          }
          break;
        }
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v31, (uint64_t)v28);
        uint64_t v24 = v29;
        goto LABEL_25;
    }
  }
  switch((char)v35)
  {
    case 1:
      uint64_t v13 = MEMORY[0x1E4FBC538];
      unint64_t v14 = MEMORY[0x1E4FBC598];
      goto LABEL_15;
    case 2:
      uint64_t v13 = MEMORY[0x1E4FBB470];
      uint64_t v33 = MEMORY[0x1E4FBB470];
      unint64_t v34 = MEMORY[0x1E4FBB4D0];
      LODWORD(v32[0]) = 0;
      goto LABEL_17;
    case 3:
      uint64_t v13 = MEMORY[0x1E4FBB3D0];
      unint64_t v14 = MEMORY[0x1E4FBB460];
      goto LABEL_15;
    case 4:
      uint64_t v13 = MEMORY[0x1E4FBB1A0];
      uint64_t v33 = MEMORY[0x1E4FBB1A0];
      unint64_t v34 = lazy protocol witness table accessor for type String and conformance String();
      v32[0] = 0x296C6C756E28;
      v32[1] = 0xE600000000000000;
      goto LABEL_17;
    default:
      uint64_t v13 = MEMORY[0x1E4FBC1C8];
      unint64_t v14 = MEMORY[0x1E4FBC240];
LABEL_15:
      uint64_t v33 = v13;
      unint64_t v34 = v14;
      v32[0] = 0;
LABEL_17:
      char v21 = __swift_project_boxed_opaque_existential_1(v32, v13);
      uint64_t v36 = v13;
      char v22 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v35);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v22, v21, v13);
      char v37 = 0;
      outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v35, a5);
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
}

uint64_t processPlaceholderReplacement(_:locale:)(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v22 = *a3;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a2, (uint64_t)v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _FormatSpecifiable);
  if (!swift_dynamicCast())
  {
    uint64_t v26 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    outlined destroy of Any?((uint64_t)&v24, &demangling cache variable for type metadata for _FormatSpecifiable?);
    long long v27 = 0u;
    long long v28 = 0u;
    uint64_t AssociatedConformanceWitness = 0;
    goto LABEL_6;
  }
  uint64_t v5 = *((void *)&v25 + 1);
  uint64_t v6 = v26;
  __swift_project_boxed_opaque_existential_1(&v24, *((uint64_t *)&v25 + 1));
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 32);
  *((void *)&v28 + 1) = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v27);
  v7(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  if (!*((void *)&v28 + 1))
  {
LABEL_6:
    outlined destroy of Any?((uint64_t)&v27, &demangling cache variable for type metadata for (CVarArg & Sendable)?);
    v30[0] = v22;
    _convertObjectToSendableArgument(_:locale:)(a2, (char **)a1);
    return 16421;
  }
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v27, (uint64_t)v30);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v30, (uint64_t)&v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg & Sendable);
  uint64_t v8 = MEMORY[0x1E4FBC1C8];
  if (swift_dynamicCast())
  {
    uint64_t v9 = 1684827173;
    uint64_t v10 = v24;
LABEL_9:
    uint64_t v11 = MEMORY[0x1E4FBC240];
LABEL_10:
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v11;
    *(void *)a1 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return v9;
  }
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v30, (uint64_t)&v27);
  if (swift_dynamicCast())
  {
    uint64_t v9 = 1684827173;
    uint64_t v10 = (int)v24;
    goto LABEL_9;
  }
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v30, (uint64_t)&v27);
  uint64_t v8 = MEMORY[0x1E4FBC538];
  if (swift_dynamicCast())
  {
    uint64_t v9 = 1970039845;
    uint64_t v10 = v24;
LABEL_16:
    uint64_t v11 = MEMORY[0x1E4FBC598];
    goto LABEL_10;
  }
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v30, (uint64_t)&v27);
  if (swift_dynamicCast())
  {
    uint64_t v9 = 1970039845;
    uint64_t v10 = v24;
    goto LABEL_16;
  }
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v30, (uint64_t)&v27);
  uint64_t v13 = MEMORY[0x1E4FBB470];
  if (swift_dynamicCast())
  {
    int v14 = v24;
    uint64_t v15 = MEMORY[0x1E4FBB4D0];
    *(void *)(a1 + 24) = v13;
    *(void *)(a1 + 32) = v15;
    *(_DWORD *)a1 = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return 26149;
  }
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v30, (uint64_t)&v27);
  uint64_t v16 = MEMORY[0x1E4FBB3D0];
  if (swift_dynamicCast())
  {
    uint64_t v9 = 6712357;
    uint64_t v17 = v24;
    uint64_t v18 = MEMORY[0x1E4FBB460];
    *(void *)(a1 + 24) = v16;
    *(void *)(a1 + 32) = v18;
    *(void *)a1 = v17;
LABEL_23:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    return v9;
  }
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v30, (uint64_t)&v27);
  uint64_t v19 = MEMORY[0x1E4FBC958];
  if (swift_dynamicCast())
  {
    uint64_t v9 = 6712357;
    uint64_t v20 = v24;
    *(void *)(a1 + 24) = v19;
    *(void *)(a1 + 32) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(void *)a1 = v20;
    goto LABEL_23;
  }
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v30, (uint64_t)&v27);
  *(void *)&long long v24 = 0;
  *((void *)&v24 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  *(void *)&long long v24 = 0xD000000000000027;
  *((void *)&v24 + 1) = 0x80000001823B0CD0;
  __swift_project_boxed_opaque_existential_1(&v27, *((uint64_t *)&v28 + 1));
  swift_getDynamicType();
  v21._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t one-time initialization function for attributedStringsCacheLock()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<String.LocalizationValue.AttributedStringCache>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  static String.LocalizationValue.attributedStringsCacheLock = result;
  return result;
}

uint64_t specialized closure #1 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void *)result;
  if (!*(void *)(*(void *)result + 16)) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v11 & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v12 = *(void *)(v6 + 56) + 32 * v10;
  uint64_t v13 = *(void *)v12;
  char v14 = *(unsigned char *)(v12 + 8);
  uint64_t v15 = *(ValueMetadata **)(v12 + 16);
  int v16 = *(unsigned __int8 *)(v12 + 24);
  swift_retain();
  uint64_t result = swift_bridgeObjectRelease();
  if (v15 != &type metadata for AttributeScopes.FoundationAttributes || ((v16 ^ a4) & 1) != 0)
  {
    uint64_t result = swift_release();
LABEL_7:
    uint64_t v13 = 0;
    char v14 = 0;
  }
  *(void *)a5 = v13;
  *(unsigned char *)(a5 + 8) = v14;
  return result;
}

uint64_t closure #1 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7 = *(void *)result;
  if (!*(void *)(*(void *)result + 16)) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v13 & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v14 = *(void *)(v7 + 56) + 32 * v12;
  uint64_t v15 = *(void *)v14;
  char v16 = *(unsigned char *)(v14 + 8);
  uint64_t v17 = *(void *)(v14 + 16);
  int v18 = *(unsigned __int8 *)(v14 + 24);
  swift_retain();
  uint64_t result = swift_bridgeObjectRelease();
  if (v17 != a4 || v18 != (a5 & 1))
  {
    uint64_t result = swift_release();
LABEL_7:
    uint64_t v15 = 0;
    char v16 = 0;
  }
  *(void *)a6 = v15;
  *(unsigned char *)(a6 + 8) = v16;
  return result;
}

uint64_t specialized closure #2 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v52 = *a1;
  uint64_t v12 = *a1;
  *a1 = 0x8000000000000000;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    char v6 = v13;
    if (*(void *)(v12 + 24) < v17)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, isUniquelyReferenced_nonNull_native);
      uint64_t v18 = v52;
      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v6 & 1) != (v20 & 1)) {
        goto LABEL_47;
      }
      unint64_t v14 = v19;
      goto LABEL_7;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v18 = v12;
LABEL_7:
      if (v6)
      {
        uint64_t v21 = *(void *)(v18 + 56) + 32 * v14;
        swift_release();
        *(void *)uint64_t v21 = a4;
        *(unsigned char *)(v21 + 8) = a5 & 1;
        *(void *)(v21 + 16) = &type metadata for AttributeScopes.FoundationAttributes;
        *(unsigned char *)(v21 + 24) = a6 & 1;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a4, a5 & 1, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes, a6 & 1, (void *)v18);
        swift_bridgeObjectRetain();
      }
      *a1 = v18;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (str: (parsed: AttributedString, hasInflectionAttributes: Bool)?, scopeType: Any.Type, hasSourcePositions: Bool)>);
  uint64_t v23 = static _DictionaryStorage.copy(original:)();
  uint64_t v18 = v23;
  if (!*(void *)(v12 + 16))
  {
LABEL_44:
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  long long v24 = (void *)(v23 + 64);
  unint64_t v25 = (unint64_t)((1 << *(unsigned char *)(v18 + 32)) + 63) >> 6;
  if (v18 != v12 || (unint64_t)v24 >= v12 + 64 + 8 * v25) {
    memmove(v24, (const void *)(v12 + 64), 8 * v25);
  }
  uint64_t v47 = v12 + 64;
  int64_t v26 = 0;
  *(void *)(v18 + 16) = *(void *)(v12 + 16);
  uint64_t v27 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v28 = -1;
  if (v27 < 64) {
    uint64_t v28 = ~(-1 << v27);
  }
  unint64_t v29 = v28 & *(void *)(v12 + 64);
  int64_t v48 = (unint64_t)(v27 + 63) >> 6;
  while (1)
  {
    if (v29)
    {
      unint64_t v30 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      int64_t v49 = v26;
      unint64_t v31 = v30 | (v26 << 6);
      goto LABEL_20;
    }
    int64_t v43 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v43 >= v48) {
      goto LABEL_44;
    }
    unint64_t v44 = *(void *)(v47 + 8 * v43);
    int64_t v45 = v26 + 1;
    if (!v44)
    {
      int64_t v45 = v26 + 2;
      if (v26 + 2 >= v48) {
        goto LABEL_44;
      }
      unint64_t v44 = *(void *)(v47 + 8 * v45);
      if (!v44)
      {
        int64_t v45 = v26 + 3;
        if (v26 + 3 >= v48) {
          goto LABEL_44;
        }
        unint64_t v44 = *(void *)(v47 + 8 * v45);
        if (!v44)
        {
          int64_t v45 = v26 + 4;
          if (v26 + 4 >= v48) {
            goto LABEL_44;
          }
          unint64_t v44 = *(void *)(v47 + 8 * v45);
          if (!v44)
          {
            int64_t v45 = v26 + 5;
            if (v26 + 5 >= v48) {
              goto LABEL_44;
            }
            unint64_t v44 = *(void *)(v47 + 8 * v45);
            if (!v44)
            {
              int64_t v45 = v26 + 6;
              if (v26 + 6 >= v48) {
                goto LABEL_44;
              }
              unint64_t v44 = *(void *)(v47 + 8 * v45);
              if (!v44)
              {
                int64_t v45 = v26 + 7;
                if (v26 + 7 >= v48) {
                  goto LABEL_44;
                }
                unint64_t v44 = *(void *)(v47 + 8 * v45);
                if (!v44) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_43:
    unint64_t v29 = (v44 - 1) & v44;
    int64_t v49 = v45;
    unint64_t v31 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_20:
    uint64_t v32 = 16 * v31;
    uint64_t v33 = (uint64_t *)(*(void *)(v12 + 48) + 16 * v31);
    uint64_t v34 = *v33;
    uint64_t v35 = v33[1];
    uint64_t v36 = 32 * v31;
    uint64_t v37 = *(void *)(v12 + 56) + v36;
    uint64_t v38 = *(void *)v37;
    char v39 = *(unsigned char *)(v37 + 8);
    uint64_t v40 = *(void *)(v37 + 16);
    LOBYTE(v37) = *(unsigned char *)(v37 + 24);
    char v41 = (void *)(*(void *)(v18 + 48) + v32);
    *char v41 = v34;
    v41[1] = v35;
    uint64_t v42 = *(void *)(v18 + 56) + v36;
    *(void *)uint64_t v42 = v38;
    *(unsigned char *)(v42 + 8) = v39;
    *(void *)(v42 + 16) = v40;
    *(unsigned char *)(v42 + 24) = v37;
    swift_retain();
    swift_bridgeObjectRetain();
    int64_t v26 = v49;
  }
  uint64_t v46 = v26 + 8;
  if (v26 + 8 >= v48) {
    goto LABEL_44;
  }
  unint64_t v44 = *(void *)(v47 + 8 * v46);
  if (v44)
  {
    int64_t v45 = v26 + 8;
    goto LABEL_43;
  }
  while (1)
  {
    int64_t v45 = v46 + 1;
    if (__OFADD__(v46, 1)) {
      break;
    }
    if (v45 >= v48) {
      goto LABEL_44;
    }
    unint64_t v44 = *(void *)(v47 + 8 * v45);
    ++v46;
    if (v44) {
      goto LABEL_43;
    }
  }
LABEL_46:
  __break(1u);
LABEL_47:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #2 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *a1;
  uint64_t v13 = *a1;
  *a1 = 0x8000000000000000;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    char v7 = v14;
    if (*(void *)(v13 + 24) < v18)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, isUniquelyReferenced_nonNull_native);
      uint64_t v19 = v54;
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v7 & 1) != (v21 & 1)) {
        goto LABEL_47;
      }
      unint64_t v15 = v20;
      goto LABEL_7;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v19 = v13;
LABEL_7:
      if (v7)
      {
        uint64_t v22 = *(void *)(v19 + 56) + 32 * v15;
        swift_release();
        *(void *)uint64_t v22 = a4;
        *(unsigned char *)(v22 + 8) = a5 & 1;
        *(void *)(v22 + 16) = a6;
        *(unsigned char *)(v22 + 24) = a7 & 1;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v15, a2, a3, a4, a5 & 1, a6, a7 & 1, (void *)v19);
        swift_bridgeObjectRetain();
      }
      *a1 = v19;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (str: (parsed: AttributedString, hasInflectionAttributes: Bool)?, scopeType: Any.Type, hasSourcePositions: Bool)>);
  uint64_t v24 = static _DictionaryStorage.copy(original:)();
  uint64_t v19 = v24;
  if (!*(void *)(v13 + 16))
  {
LABEL_44:
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  unint64_t v25 = (void *)(v24 + 64);
  unint64_t v26 = (unint64_t)((1 << *(unsigned char *)(v19 + 32)) + 63) >> 6;
  if (v19 != v13 || (unint64_t)v25 >= v13 + 64 + 8 * v26) {
    memmove(v25, (const void *)(v13 + 64), 8 * v26);
  }
  uint64_t v48 = v13 + 64;
  int64_t v27 = 0;
  *(void *)(v19 + 16) = *(void *)(v13 + 16);
  uint64_t v28 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & *(void *)(v13 + 64);
  int64_t v49 = (unint64_t)(v28 + 63) >> 6;
  while (1)
  {
    if (v30)
    {
      unint64_t v31 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      int64_t v50 = v27;
      unint64_t v32 = v31 | (v27 << 6);
      goto LABEL_20;
    }
    int64_t v44 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v44 >= v49) {
      goto LABEL_44;
    }
    unint64_t v45 = *(void *)(v48 + 8 * v44);
    int64_t v46 = v27 + 1;
    if (!v45)
    {
      int64_t v46 = v27 + 2;
      if (v27 + 2 >= v49) {
        goto LABEL_44;
      }
      unint64_t v45 = *(void *)(v48 + 8 * v46);
      if (!v45)
      {
        int64_t v46 = v27 + 3;
        if (v27 + 3 >= v49) {
          goto LABEL_44;
        }
        unint64_t v45 = *(void *)(v48 + 8 * v46);
        if (!v45)
        {
          int64_t v46 = v27 + 4;
          if (v27 + 4 >= v49) {
            goto LABEL_44;
          }
          unint64_t v45 = *(void *)(v48 + 8 * v46);
          if (!v45)
          {
            int64_t v46 = v27 + 5;
            if (v27 + 5 >= v49) {
              goto LABEL_44;
            }
            unint64_t v45 = *(void *)(v48 + 8 * v46);
            if (!v45)
            {
              int64_t v46 = v27 + 6;
              if (v27 + 6 >= v49) {
                goto LABEL_44;
              }
              unint64_t v45 = *(void *)(v48 + 8 * v46);
              if (!v45)
              {
                int64_t v46 = v27 + 7;
                if (v27 + 7 >= v49) {
                  goto LABEL_44;
                }
                unint64_t v45 = *(void *)(v48 + 8 * v46);
                if (!v45) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_43:
    unint64_t v30 = (v45 - 1) & v45;
    int64_t v50 = v46;
    unint64_t v32 = __clz(__rbit64(v45)) + (v46 << 6);
LABEL_20:
    uint64_t v33 = 16 * v32;
    uint64_t v34 = (uint64_t *)(*(void *)(v13 + 48) + 16 * v32);
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    uint64_t v37 = 32 * v32;
    uint64_t v38 = *(void *)(v13 + 56) + v37;
    uint64_t v39 = *(void *)v38;
    char v40 = *(unsigned char *)(v38 + 8);
    uint64_t v41 = *(void *)(v38 + 16);
    LOBYTE(v38) = *(unsigned char *)(v38 + 24);
    uint64_t v42 = (void *)(*(void *)(v19 + 48) + v33);
    *uint64_t v42 = v35;
    v42[1] = v36;
    uint64_t v43 = *(void *)(v19 + 56) + v37;
    *(void *)uint64_t v43 = v39;
    *(unsigned char *)(v43 + 8) = v40;
    *(void *)(v43 + 16) = v41;
    *(unsigned char *)(v43 + 24) = v38;
    swift_retain();
    swift_bridgeObjectRetain();
    int64_t v27 = v50;
  }
  uint64_t v47 = v27 + 8;
  if (v27 + 8 >= v49) {
    goto LABEL_44;
  }
  unint64_t v45 = *(void *)(v48 + 8 * v47);
  if (v45)
  {
    int64_t v46 = v27 + 8;
    goto LABEL_43;
  }
  while (1)
  {
    int64_t v46 = v47 + 1;
    if (__OFADD__(v47, 1)) {
      break;
    }
    if (v46 >= v49) {
      goto LABEL_44;
    }
    unint64_t v45 = *(void *)(v48 + 8 * v46);
    ++v47;
    if (v45) {
      goto LABEL_43;
    }
  }
LABEL_46:
  __break(1u);
LABEL_47:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #3 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v48 = *a1;
  uint64_t v9 = *a1;
  *a1 = 0x8000000000000000;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v4 = v10;
    if (*(void *)(v9 + 24) < v14)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, isUniquelyReferenced_nonNull_native);
      uint64_t v15 = v48;
      unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v17 & 1)) {
        goto LABEL_47;
      }
      unint64_t v11 = v16;
      if ((v4 & 1) == 0) {
        goto LABEL_43;
      }
LABEL_8:
      uint64_t v18 = *(void *)(v15 + 56) + 32 * v11;
      swift_release();
      *(void *)uint64_t v18 = 0;
      *(unsigned char *)(v18 + 8) = 0;
      *(void *)(v18 + 16) = &type metadata for AttributeScopes.FoundationAttributes;
      *(unsigned char *)(v18 + 24) = a4 & 1;
LABEL_44:
      *a1 = v15;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v15 = v9;
      if (v10) {
        goto LABEL_8;
      }
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v11, a2, a3, 0, 0, (uint64_t)&type metadata for AttributeScopes.FoundationAttributes, a4 & 1, (void *)v15);
      swift_bridgeObjectRetain();
      goto LABEL_44;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (str: (parsed: AttributedString, hasInflectionAttributes: Bool)?, scopeType: Any.Type, hasSourcePositions: Bool)>);
  uint64_t v19 = static _DictionaryStorage.copy(original:)();
  uint64_t v15 = v19;
  if (!*(void *)(v9 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
  unint64_t v20 = (void *)(v19 + 64);
  unint64_t v21 = (unint64_t)((1 << *(unsigned char *)(v15 + 32)) + 63) >> 6;
  if (v15 != v9 || (unint64_t)v20 >= v9 + 64 + 8 * v21) {
    memmove(v20, (const void *)(v9 + 64), 8 * v21);
  }
  uint64_t v44 = v9 + 64;
  int64_t v22 = 0;
  *(void *)(v15 + 16) = *(void *)(v9 + 16);
  uint64_t v23 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & *(void *)(v9 + 64);
  int64_t v45 = (unint64_t)(v23 + 63) >> 6;
  while (1)
  {
    if (v25)
    {
      unint64_t v26 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      int64_t v46 = v22;
      unint64_t v27 = v26 | (v22 << 6);
      goto LABEL_18;
    }
    int64_t v39 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v39 >= v45) {
      goto LABEL_42;
    }
    unint64_t v40 = *(void *)(v44 + 8 * v39);
    int64_t v41 = v22 + 1;
    if (!v40)
    {
      int64_t v41 = v22 + 2;
      if (v22 + 2 >= v45) {
        goto LABEL_42;
      }
      unint64_t v40 = *(void *)(v44 + 8 * v41);
      if (!v40)
      {
        int64_t v41 = v22 + 3;
        if (v22 + 3 >= v45) {
          goto LABEL_42;
        }
        unint64_t v40 = *(void *)(v44 + 8 * v41);
        if (!v40)
        {
          int64_t v41 = v22 + 4;
          if (v22 + 4 >= v45) {
            goto LABEL_42;
          }
          unint64_t v40 = *(void *)(v44 + 8 * v41);
          if (!v40)
          {
            int64_t v41 = v22 + 5;
            if (v22 + 5 >= v45) {
              goto LABEL_42;
            }
            unint64_t v40 = *(void *)(v44 + 8 * v41);
            if (!v40)
            {
              int64_t v41 = v22 + 6;
              if (v22 + 6 >= v45) {
                goto LABEL_42;
              }
              unint64_t v40 = *(void *)(v44 + 8 * v41);
              if (!v40)
              {
                int64_t v41 = v22 + 7;
                if (v22 + 7 >= v45) {
                  goto LABEL_42;
                }
                unint64_t v40 = *(void *)(v44 + 8 * v41);
                if (!v40) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_41:
    unint64_t v25 = (v40 - 1) & v40;
    int64_t v46 = v41;
    unint64_t v27 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_18:
    uint64_t v28 = 16 * v27;
    uint64_t v29 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v27);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    uint64_t v32 = 32 * v27;
    uint64_t v33 = *(void *)(v9 + 56) + v32;
    uint64_t v34 = *(void *)v33;
    char v35 = *(unsigned char *)(v33 + 8);
    uint64_t v36 = *(void *)(v33 + 16);
    LOBYTE(v33) = *(unsigned char *)(v33 + 24);
    uint64_t v37 = (void *)(*(void *)(v15 + 48) + v28);
    *uint64_t v37 = v30;
    v37[1] = v31;
    uint64_t v38 = *(void *)(v15 + 56) + v32;
    *(void *)uint64_t v38 = v34;
    *(unsigned char *)(v38 + 8) = v35;
    *(void *)(v38 + 16) = v36;
    *(unsigned char *)(v38 + 24) = v33;
    swift_retain();
    swift_bridgeObjectRetain();
    int64_t v22 = v46;
  }
  uint64_t v42 = v22 + 8;
  if (v22 + 8 >= v45) {
    goto LABEL_42;
  }
  unint64_t v40 = *(void *)(v44 + 8 * v42);
  if (v40)
  {
    int64_t v41 = v22 + 8;
    goto LABEL_41;
  }
  while (1)
  {
    int64_t v41 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      break;
    }
    if (v41 >= v45) {
      goto LABEL_42;
    }
    unint64_t v40 = *(void *)(v44 + 8 * v41);
    ++v42;
    if (v40) {
      goto LABEL_41;
    }
  }
LABEL_46:
  __break(1u);
LABEL_47:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #3 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v50 = *a1;
  uint64_t v11 = *a1;
  *a1 = 0x8000000000000000;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v5 = v12;
    if (*(void *)(v11 + 24) < v16)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
      uint64_t v17 = v50;
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v5 & 1) != (v19 & 1)) {
        goto LABEL_47;
      }
      unint64_t v13 = v18;
      if ((v5 & 1) == 0) {
        goto LABEL_43;
      }
LABEL_8:
      uint64_t v20 = *(void *)(v17 + 56) + 32 * v13;
      swift_release();
      *(void *)uint64_t v20 = 0;
      *(unsigned char *)(v20 + 8) = 0;
      *(void *)(v20 + 16) = a4;
      *(unsigned char *)(v20 + 24) = a5 & 1;
LABEL_44:
      *a1 = v17;
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v17 = v11;
      if (v12) {
        goto LABEL_8;
      }
LABEL_43:
      specialized _NativeDictionary._insert(at:key:value:)(v13, a2, a3, 0, 0, a4, a5 & 1, (void *)v17);
      swift_bridgeObjectRetain();
      goto LABEL_44;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (str: (parsed: AttributedString, hasInflectionAttributes: Bool)?, scopeType: Any.Type, hasSourcePositions: Bool)>);
  uint64_t v21 = static _DictionaryStorage.copy(original:)();
  uint64_t v17 = v21;
  if (!*(void *)(v11 + 16))
  {
LABEL_42:
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
  int64_t v22 = (void *)(v21 + 64);
  unint64_t v23 = (unint64_t)((1 << *(unsigned char *)(v17 + 32)) + 63) >> 6;
  if (v17 != v11 || (unint64_t)v22 >= v11 + 64 + 8 * v23) {
    memmove(v22, (const void *)(v11 + 64), 8 * v23);
  }
  uint64_t v46 = v11 + 64;
  int64_t v24 = 0;
  *(void *)(v17 + 16) = *(void *)(v11 + 16);
  uint64_t v25 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v27 = v26 & *(void *)(v11 + 64);
  int64_t v47 = (unint64_t)(v25 + 63) >> 6;
  while (1)
  {
    if (v27)
    {
      unint64_t v28 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      int64_t v48 = v24;
      unint64_t v29 = v28 | (v24 << 6);
      goto LABEL_18;
    }
    int64_t v41 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v41 >= v47) {
      goto LABEL_42;
    }
    unint64_t v42 = *(void *)(v46 + 8 * v41);
    int64_t v43 = v24 + 1;
    if (!v42)
    {
      int64_t v43 = v24 + 2;
      if (v24 + 2 >= v47) {
        goto LABEL_42;
      }
      unint64_t v42 = *(void *)(v46 + 8 * v43);
      if (!v42)
      {
        int64_t v43 = v24 + 3;
        if (v24 + 3 >= v47) {
          goto LABEL_42;
        }
        unint64_t v42 = *(void *)(v46 + 8 * v43);
        if (!v42)
        {
          int64_t v43 = v24 + 4;
          if (v24 + 4 >= v47) {
            goto LABEL_42;
          }
          unint64_t v42 = *(void *)(v46 + 8 * v43);
          if (!v42)
          {
            int64_t v43 = v24 + 5;
            if (v24 + 5 >= v47) {
              goto LABEL_42;
            }
            unint64_t v42 = *(void *)(v46 + 8 * v43);
            if (!v42)
            {
              int64_t v43 = v24 + 6;
              if (v24 + 6 >= v47) {
                goto LABEL_42;
              }
              unint64_t v42 = *(void *)(v46 + 8 * v43);
              if (!v42)
              {
                int64_t v43 = v24 + 7;
                if (v24 + 7 >= v47) {
                  goto LABEL_42;
                }
                unint64_t v42 = *(void *)(v46 + 8 * v43);
                if (!v42) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_41:
    unint64_t v27 = (v42 - 1) & v42;
    int64_t v48 = v43;
    unint64_t v29 = __clz(__rbit64(v42)) + (v43 << 6);
LABEL_18:
    uint64_t v30 = 16 * v29;
    uint64_t v31 = (uint64_t *)(*(void *)(v11 + 48) + 16 * v29);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    uint64_t v34 = 32 * v29;
    uint64_t v35 = *(void *)(v11 + 56) + v34;
    uint64_t v36 = *(void *)v35;
    char v37 = *(unsigned char *)(v35 + 8);
    uint64_t v38 = *(void *)(v35 + 16);
    LOBYTE(v35) = *(unsigned char *)(v35 + 24);
    int64_t v39 = (void *)(*(void *)(v17 + 48) + v30);
    *int64_t v39 = v32;
    v39[1] = v33;
    uint64_t v40 = *(void *)(v17 + 56) + v34;
    *(void *)uint64_t v40 = v36;
    *(unsigned char *)(v40 + 8) = v37;
    *(void *)(v40 + 16) = v38;
    *(unsigned char *)(v40 + 24) = v35;
    swift_retain();
    swift_bridgeObjectRetain();
    int64_t v24 = v48;
  }
  uint64_t v44 = v24 + 8;
  if (v24 + 8 >= v47) {
    goto LABEL_42;
  }
  unint64_t v42 = *(void *)(v46 + 8 * v44);
  if (v42)
  {
    int64_t v43 = v24 + 8;
    goto LABEL_41;
  }
  while (1)
  {
    int64_t v43 = v44 + 1;
    if (__OFADD__(v44, 1)) {
      break;
    }
    if (v43 >= v47) {
      goto LABEL_42;
    }
    unint64_t v42 = *(void *)(v46 + 8 * v43);
    ++v44;
    if (v42) {
      goto LABEL_41;
    }
  }
LABEL_46:
  __break(1u);
LABEL_47:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t String.LocalizationValue.restoreAttributedStringArguments(_:in:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  v2 = v1;
  uint64_t v347 = v3;
  char v4 = (_OWORD *)*v1;
  long long v5 = *(_OWORD *)(*v1 + 16);
  long long v6 = *(_OWORD *)(*v1 + 32);
  v633[2] = *(_OWORD *)(*v1 + 48);
  v633[1] = v6;
  v633[0] = v5;
  swift_retain_n();
  outlined retain of Locale((uint64_t)v633);
  uint64_t v7 = BigString.startIndex.getter();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  outlined release of Locale((uint64_t)v633);
  long long v14 = v4[1];
  long long v15 = v4[2];
  long long v632 = v4[3];
  v631[1] = v15;
  v631[0] = v14;
  long long v16 = v4[1];
  long long v17 = v4[2];
  v634[2] = v632;
  v634[1] = v17;
  v634[0] = v16;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v634, (uint64_t)v635);
  outlined retain of Locale((uint64_t)v635);
  uint64_t v18 = BigString.endIndex.getter();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  outlined release of Locale((uint64_t)v631);
  if (static BigString.Index.< infix(_:_:)()) {
    goto LABEL_184;
  }
  v366 = v2;
  uint64_t v623 = v7;
  uint64_t v624 = v9;
  uint64_t v625 = v11;
  uint64_t v626 = v13;
  uint64_t v627 = v18;
  uint64_t v628 = v20;
  uint64_t v629 = v22;
  uint64_t v630 = v24;
  AttributedString.Runs.init(_:in:)((uint64_t)v4, &v458);
  swift_release();
  long long v479 = v463;
  long long v480 = v464;
  long long v481 = v465;
  long long v482 = v466;
  long long v475 = v459;
  long long v476 = v460;
  long long v477 = v461;
  long long v478 = v462;
  uint64_t v25 = v471;
  uint64_t v26 = v472;
  uint64_t v27 = v473;
  uint64_t v28 = v474;
  uint64_t v358 = v468;
  uint64_t v359 = v467;
  uint64_t v357 = v469;
  uint64_t v355 = v458;
  uint64_t v356 = v470;
  if (static BigString.Index.== infix(_:_:)())
  {
LABEL_3:
    long long v444 = v479;
    long long v445 = v480;
    long long v446 = v481;
    long long v447 = v482;
    long long v440 = v475;
    long long v441 = v476;
    long long v442 = v477;
    long long v443 = v478;
    uint64_t v439 = v355;
    uint64_t v448 = v359;
    uint64_t v449 = v358;
    uint64_t v450 = v357;
    uint64_t v451 = v356;
    uint64_t v452 = v25;
    uint64_t v453 = v26;
    uint64_t v454 = v27;
    uint64_t v455 = v28;
    v456 = &outlined read-only object #0 of String.LocalizationValue.restoreAttributedStringArguments(_:in:);
    uint64_t v457 = MEMORY[0x1E4FBC860];
    return outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v439);
  }
  uint64_t v31 = v358;
  uint64_t v30 = v359;
  uint64_t v32 = v356;
  uint64_t v33 = v357;
  uint64_t v367 = v27;
  uint64_t v368 = v25;
  uint64_t v372 = v26;
  uint64_t v383 = v28;
LABEL_7:
  *(_OWORD *)&v429[72] = v479;
  *(_OWORD *)&v429[88] = v480;
  *(_OWORD *)&v429[104] = v481;
  *(_OWORD *)&v429[120] = v482;
  *(_OWORD *)&v429[8] = v475;
  *(_OWORD *)&v429[24] = v476;
  *(_OWORD *)&v429[40] = v477;
  *(_OWORD *)&v429[56] = v478;
  *(_OWORD *)&v434[72] = v479;
  *(_OWORD *)&v434[88] = v480;
  *(_OWORD *)&v434[104] = v481;
  *(_OWORD *)&v434[120] = v482;
  *(_OWORD *)&v434[8] = v475;
  *(_OWORD *)&v434[24] = v476;
  *(void *)&long long v387 = v33;
  *((void *)&v387 + 1) = v32;
  uint64_t v385 = v31;
  *(_OWORD *)&v434[40] = v477;
  *(_OWORD *)&v434[56] = v478;
  *(void *)v434 = v355;
  *(void *)&v434[136] = v359;
  *(void *)&long long v435 = v358;
  *((void *)&v435 + 1) = v357;
  *(void *)&long long v436 = v356;
  *((void *)&v436 + 1) = v25;
  *(void *)&long long v437 = v26;
  *((void *)&v437 + 1) = v27;
  uint64_t v438 = v28;
  *(void *)&long long v403 = v30;
  *((void *)&v403 + 1) = v31;
  *(void *)&long long v404 = v33;
  *((void *)&v404 + 1) = v32;
  AttributedString.Runs.subscript.getter(&v416);
  uint64_t v375 = v416;
  long long v444 = v479;
  long long v445 = v480;
  long long v446 = v481;
  long long v447 = v482;
  long long v440 = v475;
  long long v441 = v476;
  long long v442 = v477;
  long long v443 = v478;
  uint64_t v439 = v355;
  uint64_t v448 = v359;
  uint64_t v449 = v358;
  uint64_t v450 = v357;
  uint64_t v451 = v356;
  uint64_t v452 = v25;
  uint64_t v453 = v26;
  uint64_t v454 = v27;
  uint64_t v455 = v383;
  v456 = &outlined read-only object #0 of String.LocalizationValue.restoreAttributedStringArguments(_:in:);
  uint64_t v457 = MEMORY[0x1E4FBC860];
  *(void *)v429 = v355;
  *(void *)&v429[136] = v359;
  *(void *)&long long v430 = v358;
  *((void *)&v430 + 1) = v357;
  *(void *)&long long v431 = v356;
  *((void *)&v431 + 1) = v25;
  *(void *)&long long v432 = v26;
  *((void *)&v432 + 1) = v27;
  uint64_t v433 = v383;
  *(void *)&long long v416 = v30;
  *((void *)&v416 + 1) = v31;
  long long v417 = v387;
  swift_retain();
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v439);
  AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)((uint64_t *)&v416, (uint64_t)&outlined read-only object #0 of String.LocalizationValue.restoreAttributedStringArguments(_:in:), MEMORY[0x1E4FBC860], (uint64_t *)v434);
  swift_release();
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v439);
  uint64_t v34 = *(void *)v434;
  uint64_t v32 = *(void *)&v434[24];
  uint64_t v31 = *(void *)&v434[8];
  uint64_t v33 = *(void *)&v434[16];
  uint64_t v381 = v30;
  if (static BigString.Index.< infix(_:_:)())
  {
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
    goto LABEL_174;
  }
  uint64_t v384 = v34;
  uint64_t v35 = specialized AttributedString._AttributeStorage.subscript.getter(v375);
  char v37 = v36;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v37)
  {
    uint64_t v27 = v367;
    uint64_t v25 = v368;
    uint64_t v26 = v372;
    uint64_t v30 = v384;
    uint64_t v28 = v383;
    goto LABEL_6;
  }
  unint64_t v38 = v35 - 1;
  uint64_t v26 = v372;
  if (__OFSUB__(v35, 1)) {
    goto LABEL_154;
  }
  if ((v38 & 0x8000000000000000) != 0) {
    goto LABEL_155;
  }
  if (v38 >= *(void *)(v347 + 16)) {
    goto LABEL_156;
  }
  uint64_t v39 = v347 + 32 + 24 * v38;
  int v40 = *(unsigned __int8 *)(v39 + 16);
  if (v40 == 255)
  {
    uint64_t v28 = v383;
    uint64_t v27 = v367;
    uint64_t v25 = v368;
    uint64_t v30 = v384;
    goto LABEL_6;
  }
  int64_t v41 = *(_OWORD **)v39;
  uint64_t v42 = *(void *)(v39 + 8);
  uint64_t v43 = v384;
  uint64_t v353 = v33;
  uint64_t v354 = v31;
  uint64_t v352 = v32;
  unsigned __int8 v380 = *(unsigned char *)(v39 + 16);
  uint64_t v382 = v42;
  uint64_t v365 = *(void *)v39;
  if (v40)
  {
    *(void *)v429 = *(void *)v39;
    *(void *)&v429[8] = v42;
    uint64_t v52 = (uint64_t)v41;
    outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup((uint64_t)v41, v42, 1);
    outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup(v52, v42, 1);
    v53 = v366;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v54 = (void *)*v366;
      long long v55 = *(_OWORD *)(*v366 + 16);
      long long v56 = *(_OWORD *)(*v366 + 32);
      v622[2] = *(_OWORD *)(*v366 + 48);
      v622[1] = v56;
      v622[0] = v55;
      uint64_t v57 = v54[8];
      uint64_t v58 = v54[9];
      uint64_t v59 = v54[10];
      uint64_t v60 = v54[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v622);
      swift_unknownObjectRetain();
      uint64_t v61 = v59;
      v53 = v366;
      uint64_t v62 = v60;
      uint64_t v43 = v384;
      uint64_t *v366 = AttributedString.Guts.init(string:runs:)(v622, v57, v58, v61, v62);
      swift_release();
    }
    v63 = (_OWORD *)*v53;
    long long v64 = *(_OWORD *)(*v53 + 16);
    long long v65 = *(_OWORD *)(*v53 + 32);
    v621[2] = *(_OWORD *)(*v53 + 48);
    v621[1] = v65;
    v621[0] = v64;
    swift_retain();
    outlined retain of Locale((uint64_t)v621);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v621);
    long long v66 = v63[1];
    long long v67 = v63[2];
    long long v620 = v63[3];
    v619[1] = v67;
    v619[0] = v66;
    long long v68 = v63[1];
    long long v69 = v63[2];
    v636[2] = v620;
    v636[1] = v69;
    v636[0] = v68;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v636, (uint64_t)v637);
    outlined retain of Locale((uint64_t)v637);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v619);
    swift_release();
    v70 = (_OWORD *)*v53;
    uint64_t v609 = v381;
    uint64_t v610 = v385;
    long long v611 = v387;
    uint64_t v612 = v43;
    uint64_t v613 = v31;
    uint64_t v614 = v33;
    uint64_t v615 = v32;
    long long v71 = v70[2];
    long long v616 = v70[1];
    long long v617 = v71;
    long long v618 = v70[3];
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v498);
    uint64_t v72 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v74 = v73;
    uint64_t v76 = v75;
    uint64_t v78 = v77;
    uint64_t v79 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v81 = v80;
    uint64_t v83 = v82;
    uint64_t v85 = v84;
    outlined release of Locale((uint64_t)v499);
    swift_release();
    *(void *)v434 = v70;
    *(void *)&v434[8] = v72;
    *(void *)&v434[16] = v74;
    *(void *)&v434[24] = v76;
    *(void *)&v434[32] = v78;
    *(void *)&v434[40] = v79;
    *(void *)&v434[48] = v81;
    *(void *)&v434[56] = v83;
    *(void *)&v434[64] = v85;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    v86 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    v87 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v87);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v86, (uint64_t *)&v416);
    os_unfair_lock_unlock(v87);
    swift_release();
    uint64_t v88 = v416;
    *(void *)&v434[72] = v416;
    BigString.init()();
    *(void *)&long long v416 = 0;
    MEMORY[0x185309530](&v416, 8);
    uint64_t v89 = v416;
    type metadata accessor for AttributedString.Guts();
    uint64_t v90 = swift_allocObject();
    uint64_t v26 = v372;
    if ((BigString.isEmpty.getter() & 1) == 0) {
      goto LABEL_181;
    }
    long long v91 = v501;
    *(_OWORD *)(v90 + 16) = v500;
    *(_OWORD *)(v90 + 32) = v91;
    *(_OWORD *)(v90 + 48) = v502;
    *(void *)(v90 + 64) = 0;
    *(void *)(v90 + 72) = 0;
    *(void *)(v90 + 80) = 0;
    *(void *)(v90 + 88) = v89;
    uint64_t *v366 = v90;
    swift_release();
    LOBYTE(v416) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)v429, (char *)&v416);
    if (*(void *)&v434[72] == v88)
    {
      uint64_t *v366 = *(void *)v434;
      swift_release();
      outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v365, v382, v380);
      outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v365, v382, v380);
      uint64_t v27 = v367;
      uint64_t v25 = v368;
      uint64_t v28 = v383;
      uint64_t v30 = v384;
      uint64_t v33 = v353;
      uint64_t v31 = v354;
      uint64_t v32 = v352;
      goto LABEL_6;
    }
    goto LABEL_197;
  }
  long long v44 = v41[2];
  v608[0] = v41[1];
  v608[1] = v44;
  v608[2] = v41[3];
  int64_t v45 = v41;
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v41, v42, v40);
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v45, v42, v40);
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v45, v42, v40);
  outlined retain of Locale((uint64_t)v608);
  BigString.startIndex.getter();
  unsigned __int8 v46 = v40;
  outlined release of Locale((uint64_t)v608);
  long long v47 = v45[1];
  long long v48 = v45[2];
  long long v607 = v45[3];
  v606[1] = v48;
  v606[0] = v47;
  long long v49 = v45[1];
  long long v50 = v45[2];
  v638[2] = v607;
  v638[1] = v50;
  v638[0] = v49;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v638, (uint64_t)v639);
  outlined retain of Locale((uint64_t)v639);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v606);
  char v51 = static BigString.Index.== infix(_:_:)();
  outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v45, v42, v46);
  if (v51)
  {
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v45, v42, v380);
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?((uint64_t)v45, v42, v380);
LABEL_16:
    uint64_t v27 = v367;
    uint64_t v25 = v368;
    uint64_t v28 = v383;
    uint64_t v30 = v384;
    uint64_t v33 = v353;
    uint64_t v31 = v354;
    uint64_t v32 = v352;
    uint64_t v26 = v372;
    goto LABEL_6;
  }
  v92 = v45 + 1;
  v93 = (_OWORD *)*v366;
  long long v94 = *(_OWORD *)(*v366 + 16);
  long long v95 = *(_OWORD *)(*v366 + 32);
  v605[2] = *(_OWORD *)(*v366 + 48);
  v605[1] = v95;
  v605[0] = v94;
  swift_retain();
  outlined retain of Locale((uint64_t)v605);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v605);
  long long v96 = v93[1];
  long long v97 = v93[2];
  long long v604 = v93[3];
  v603[1] = v97;
  v603[0] = v96;
  long long v98 = v93[1];
  long long v99 = v93[2];
  v640[2] = v604;
  v640[1] = v99;
  v640[0] = v98;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v640, (uint64_t)v641);
  outlined retain of Locale((uint64_t)v641);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v603);
  swift_release();
  uint64_t v593 = v381;
  uint64_t v594 = v385;
  long long v595 = v387;
  uint64_t v596 = v384;
  uint64_t v597 = v31;
  uint64_t v598 = v33;
  uint64_t v599 = v32;
  long long v100 = v93[2];
  long long v600 = v93[1];
  long long v601 = v100;
  long long v602 = v93[3];
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v483);
  uint64_t v101 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v103 = v102;
  uint64_t v105 = v104;
  uint64_t v107 = v106;
  uint64_t v108 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v110 = v109;
  uint64_t v112 = v111;
  uint64_t v114 = v113;
  outlined release of Locale((uint64_t)v484);
  swift_release();
  uint64_t v582 = v101;
  uint64_t v583 = v103;
  uint64_t v584 = v105;
  uint64_t v585 = v107;
  uint64_t v586 = v108;
  uint64_t v587 = v110;
  uint64_t v588 = v112;
  uint64_t v589 = v114;
  long long v115 = v93[2];
  long long v590 = v93[1];
  long long v591 = v115;
  long long v592 = v93[3];
  swift_retain_n();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v485);
  uint64_t v116 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v118 = v117;
  uint64_t v120 = v119;
  uint64_t v122 = v121;
  uint64_t v123 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v125 = v124;
  uint64_t v127 = v126;
  uint64_t v129 = v128;
  outlined release of Locale((uint64_t)v486);
  swift_release_n();
  v575[10] = v93;
  v575[11] = v116;
  v575[12] = v118;
  v575[13] = v120;
  v575[14] = v122;
  v575[15] = v123;
  v575[16] = v125;
  v575[17] = v127;
  v575[18] = v129;
  v575[19] = 0;
  long long v130 = *v92;
  long long v131 = v92[1];
  v581[2] = v92[2];
  v581[1] = v131;
  v581[0] = v130;
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?(v365, v382, v380);
  outlined retain of Locale((uint64_t)v581);
  uint64_t v376 = BigString.startIndex.getter();
  uint64_t v133 = v132;
  uint64_t v135 = v134;
  uint64_t v137 = v136;
  outlined release of Locale((uint64_t)v581);
  long long v138 = *v92;
  long long v139 = v92[1];
  long long v580 = v92[2];
  v579[1] = v139;
  v579[0] = v138;
  long long v140 = *v92;
  long long v141 = v92[1];
  v642[2] = v580;
  v642[1] = v141;
  v642[0] = v140;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v642, (uint64_t)v643);
  outlined retain of Locale((uint64_t)v643);
  uint64_t v142 = BigString.endIndex.getter();
  uint64_t v144 = v143;
  uint64_t v146 = v145;
  uint64_t v148 = v147;
  outlined release of Locale((uint64_t)v579);
  v575[20] = v376;
  v575[21] = v133;
  v575[22] = v135;
  v575[23] = v137;
  v575[24] = v142;
  v575[25] = v144;
  v575[26] = v146;
  v575[27] = v148;
  long long v149 = v92[1];
  long long v576 = *v92;
  long long v577 = v149;
  long long v578 = v92[2];
  swift_retain();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v487);
  uint64_t v150 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v373 = v151;
  uint64_t v377 = v150;
  uint64_t v153 = v152;
  uint64_t v155 = v154;
  uint64_t v156 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v158 = v157;
  uint64_t v160 = v159;
  uint64_t v162 = v161;
  outlined release of Locale((uint64_t)v488);
  outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v365, v382, v380);
  v575[0] = v365;
  v575[1] = v377;
  v575[2] = v153;
  v575[3] = v373;
  v575[4] = v155;
  v575[5] = v156;
  v575[6] = v158;
  v575[7] = v160;
  v575[8] = v162;
  v575[9] = 0;
  LOBYTE(v156) = specialized Sequence<>.elementsEqual<A>(_:)(v575);
  outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v365, v382, v380);
  swift_release();
  if (v156)
  {
    long long v163 = v92[1];
    v552[0] = *v92;
    v552[1] = v163;
    v552[2] = v92[2];
    outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?(v365, v382, v380);
    outlined retain of Locale((uint64_t)v552);
    uint64_t v164 = BigString.startIndex.getter();
    uint64_t v166 = v165;
    uint64_t v168 = v167;
    uint64_t v170 = v169;
    outlined release of Locale((uint64_t)v552);
    long long v171 = *v92;
    long long v172 = v92[1];
    long long v551 = v92[2];
    v550[1] = v172;
    v550[0] = v171;
    long long v173 = *v92;
    long long v174 = v92[1];
    v648[2] = v551;
    v648[1] = v174;
    v648[0] = v173;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v648, (uint64_t)v649);
    outlined retain of Locale((uint64_t)v649);
    uint64_t v175 = BigString.endIndex.getter();
    uint64_t v177 = v176;
    uint64_t v179 = v178;
    uint64_t v181 = v180;
    outlined release of Locale((uint64_t)v550);
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_188;
    }
    uint64_t v542 = v164;
    uint64_t v543 = v166;
    uint64_t v544 = v168;
    uint64_t v545 = v170;
    uint64_t v546 = v175;
    uint64_t v547 = v177;
    uint64_t v548 = v179;
    uint64_t v549 = v181;
    AttributedString.Runs.init(_:in:)(v365, v429);
    long long v436 = v431;
    long long v437 = v432;
    uint64_t v438 = v433;
    *(_OWORD *)&v434[96] = *(_OWORD *)&v429[96];
    *(_OWORD *)&v434[112] = *(_OWORD *)&v429[112];
    long long v435 = v430;
    *(_OWORD *)&v434[128] = *(_OWORD *)&v429[128];
    *(_OWORD *)&v434[32] = *(_OWORD *)&v429[32];
    *(_OWORD *)&v434[48] = *(_OWORD *)&v429[48];
    *(_OWORD *)&v434[80] = *(_OWORD *)&v429[80];
    *(_OWORD *)&v434[64] = *(_OWORD *)&v429[64];
    *(_OWORD *)&v434[16] = *(_OWORD *)&v429[16];
    *(_OWORD *)v434 = *(_OWORD *)v429;
    uint64_t v182 = *(void *)&v429[8];
    uint64_t v183 = *(void *)&v429[72];
    if (*(void *)&v429[8] == *(void *)&v429[72])
    {
      outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v365, v382, v380);
      outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v365, v382, v380);
      outlined release of AttributedString.Runs((uint64_t)v434);
      goto LABEL_16;
    }
    v350 = v92;
    unint64_t v351 = *(void *)&v434[24];
    uint64_t v224 = *(void *)&v434[40];
    uint64_t v364 = *(void *)&v434[56];
    uint64_t v225 = *(void *)&v434[48];
    uint64_t v360 = *(void *)&v434[64];
    uint64_t v361 = *(void *)&v434[32];
    uint64_t v226 = *(void *)&v434[16];
    v369 = *(void **)v434;
    v346 = (long long *)(*(void *)v434 + 16);
    uint64_t v345 = *(void *)&v429[72];
    uint64_t v227 = v385;
    while (1)
    {
      if (v182 >= v183) {
        goto LABEL_157;
      }
      uint64_t v386 = v227;
      long long v431 = v436;
      long long v432 = v437;
      uint64_t v433 = v438;
      *(_OWORD *)&v429[96] = *(_OWORD *)&v434[96];
      *(_OWORD *)&v429[112] = *(_OWORD *)&v434[112];
      long long v430 = v435;
      *(_OWORD *)&v429[128] = *(_OWORD *)&v434[128];
      *(_OWORD *)&v429[32] = *(_OWORD *)&v434[32];
      *(_OWORD *)&v429[48] = *(_OWORD *)&v434[48];
      *(_OWORD *)&v429[80] = *(_OWORD *)&v434[80];
      *(_OWORD *)&v429[64] = *(_OWORD *)&v434[64];
      *(_OWORD *)&v429[16] = *(_OWORD *)&v434[16];
      *(_OWORD *)v429 = *(_OWORD *)v434;
      *(void *)&long long v403 = v182;
      uint64_t v378 = v226;
      *((void *)&v403 + 1) = v226;
      *(void *)&long long v404 = v351;
      *((void *)&v404 + 1) = v361;
      *(void *)&long long v405 = v224;
      *((void *)&v405 + 1) = v225;
      *(void *)&long long v406 = v364;
      *((void *)&v406 + 1) = v360;
      AttributedString.Runs._resolve(_:)((uint64_t *)&v403, (uint64_t *)&v416);
      if ((void)v416 != v369[11]) {
        goto LABEL_158;
      }
      unint64_t v228 = *((void *)&v416 + 1);
      if ((void)v417)
      {
        v229 = (void *)(v417 + 24 * ((*((void *)&v416 + 1) >> ((4 * *(unsigned char *)(v417 + 18) + 8) & 0x3C)) & 0xFLL));
        unint64_t v231 = v229[3];
        uint64_t v230 = v229[4];
        uint64_t v232 = v229[5];
        outlined retain of AttributedString.Runs((uint64_t)v434);
        uint64_t v349 = v230;
        swift_bridgeObjectRetain();
        uint64_t v348 = v232;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v233 = v369[8];
        outlined retain of AttributedString.Runs((uint64_t)v434);
        swift_unknownObjectRetain();
        unint64_t v231 = specialized Rope._Node.subscript.getter(v228, v233);
        uint64_t v348 = v235;
        uint64_t v349 = v234;
        swift_unknownObjectRelease();
      }
      static BigString.Index.< infix(_:_:)();
      uint64_t v236 = BigString.Index.utf8Offset.getter();
      uint64_t v237 = v236 + v231;
      if (__OFADD__(v236, v231)) {
        goto LABEL_159;
      }
      uint64_t v238 = BigString.Index.utf8Offset.getter();
      if (v238 >= v237) {
        uint64_t v239 = v237;
      }
      else {
        uint64_t v239 = v238;
      }
      long long v240 = *v346;
      long long v241 = v346[1];
      long long v541 = v346[2];
      v540[1] = v241;
      v540[0] = v240;
      long long v242 = *v346;
      long long v243 = v346[1];
      v650[2] = v541;
      v650[1] = v243;
      v650[0] = v242;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v650, (uint64_t)v651);
      outlined retain of Locale((uint64_t)v651);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v540);
      if (__OFSUB__(v239, BigString.Index.utf8Offset.getter())) {
        goto LABEL_160;
      }
      BigString.UTF8View.index(_:offsetBy:)();
      outlined release of Locale((uint64_t)v489);
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_161;
      }
      uint64_t v244 = v369[8];
      uint64_t v245 = v369[9];
      uint64_t v246 = v369[11];
      uint64_t v362 = v246;
      uint64_t v363 = v369[10];
      uint64_t v247 = v361;
      if (v361 != 1 && v378 == v246)
      {
        uint64_t v248 = v360;
        uint64_t v249 = v182;
        uint64_t v250 = v369[9];
        if (v360 == 2)
        {
          unint64_t v251 = v351;
          if (v244)
          {
            outlined retain of AttributedString.Runs((uint64_t)v434);
            swift_unknownObjectRetain();
            uint64_t v246 = v378;
            uint64_t v252 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v378, v351, v361, v244, v245, v363);
          }
          else
          {
            swift_retain();
            uint64_t v252 = 0;
            uint64_t v246 = v378;
          }
        }
        else
        {
          outlined retain of AttributedString.Runs((uint64_t)v434);
          swift_unknownObjectRetain();
          uint64_t v252 = BigString.Index.utf8Offset.getter();
          uint64_t v246 = v378;
          unint64_t v251 = v351;
        }
        goto LABEL_129;
      }
      if (v244) {
        uint64_t v253 = v369[9];
      }
      else {
        uint64_t v253 = 0;
      }
      uint64_t v249 = v182;
      uint64_t v248 = v360;
      if (v182 < 0 || v253 < v182) {
        goto LABEL_179;
      }
      if (v244 && v182 < v245 && *(_WORD *)(v244 + 16)) {
        break;
      }
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)v434);
      unint64_t v266 = swift_unknownObjectRetain();
      unint64_t v251 = specialized Rope._endPath.getter(v266);
      swift_unknownObjectRelease();
      uint64_t v247 = 0;
      if (!v244)
      {
        uint64_t v250 = v245;
        uint64_t v252 = 0;
        goto LABEL_129;
      }
LABEL_89:
      swift_unknownObjectRetain();
      uint64_t v250 = v245;
      uint64_t v252 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v246, v251, v247, v244, v245, v363);
      swift_unknownObjectRelease_n();
LABEL_129:
      *(void *)v429 = v246;
      *(void *)&v429[8] = v251;
      *(void *)&v429[16] = v247;
      BOOL v259 = __OFADD__(v249, 1);
      uint64_t v273 = v249 + 1;
      if (v259) {
        goto LABEL_162;
      }
      if (v246 != v362) {
        goto LABEL_163;
      }
      uint64_t v374 = v273;
      if (v247)
      {
        unint64_t v274 = *(void *)(v247 + 24 * ((v251 >> ((4 * *(unsigned char *)(v247 + 18) + 8) & 0x3C)) & 0xF) + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v274 = specialized Rope._Node.subscript.getter(v251, v244);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v259 = __OFADD__(v252, v274);
      unint64_t v275 = v252 + v274;
      if (v259) {
        goto LABEL_164;
      }
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(v429, v244, v250, v363, v362);
      swift_unknownObjectRelease_n();
      unint64_t v351 = *(void *)&v429[8];
      uint64_t v379 = *(void *)v429;
      uint64_t v361 = *(void *)&v429[16];
      if (v248 == 2)
      {
        long long v276 = *v346;
        long long v277 = v346[1];
        long long v539 = v346[2];
        v538[1] = v277;
        v538[0] = v276;
        long long v278 = *v346;
        long long v279 = v346[1];
        v652[2] = v539;
        v652[1] = v279;
        v652[0] = v278;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v652, (uint64_t)v653);
        outlined retain of Locale((uint64_t)v653);
        v280 = &v491;
        BigString.utf8.getter();
        outlined release of Locale((uint64_t)v538);
        long long v281 = *v346;
        long long v282 = v346[1];
        long long v537 = v346[2];
        v536[1] = v282;
        v536[0] = v281;
        long long v283 = *v346;
        long long v284 = v346[1];
        v654[2] = v537;
        v654[1] = v284;
        v654[0] = v283;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v654, (uint64_t)v655);
        outlined retain of Locale((uint64_t)v655);
        BigString.startIndex.getter();
        outlined release of Locale((uint64_t)v536);
      }
      else
      {
        long long v285 = *v346;
        long long v286 = v346[1];
        long long v535 = v346[2];
        v534[1] = v286;
        v534[0] = v285;
        long long v287 = *v346;
        long long v288 = v346[1];
        v656[2] = v535;
        v656[1] = v288;
        v656[0] = v287;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v656, (uint64_t)v657);
        outlined retain of Locale((uint64_t)v657);
        BigString.utf8.getter();
        outlined release of Locale((uint64_t)v534);
        if (__OFSUB__(v275, BigString.Index.utf8Offset.getter())) {
          goto LABEL_180;
        }
        v280 = &v490;
      }
      uint64_t v289 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v370 = v290;
      uint64_t v371 = v289;
      uint64_t v364 = v291;
      uint64_t v360 = v292;
      outlined release of Locale((uint64_t)v280);
      outlined release of AttributedString.Runs((uint64_t)v434);
      long long v293 = *v350;
      long long v294 = v350[1];
      v533[2] = v350[2];
      v533[1] = v294;
      v533[0] = v293;
      outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?(v365, v382, v380);
      outlined retain of Locale((uint64_t)v533);
      uint64_t v295 = BigString.startIndex.getter();
      uint64_t v297 = v296;
      uint64_t v299 = v298;
      uint64_t v301 = v300;
      outlined release of Locale((uint64_t)v533);
      long long v302 = *v350;
      long long v303 = v350[1];
      long long v532 = v350[2];
      v531[1] = v303;
      v531[0] = v302;
      long long v304 = *v350;
      long long v305 = v350[1];
      v658[2] = v532;
      v658[1] = v305;
      v658[0] = v304;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v658, (uint64_t)v659);
      outlined retain of Locale((uint64_t)v659);
      uint64_t v306 = BigString.endIndex.getter();
      uint64_t v308 = v307;
      uint64_t v310 = v309;
      uint64_t v312 = v311;
      outlined release of Locale((uint64_t)v531);
      uint64_t v520 = v295;
      uint64_t v521 = v297;
      uint64_t v522 = v299;
      uint64_t v523 = v301;
      uint64_t v524 = v306;
      uint64_t v525 = v308;
      uint64_t v526 = v310;
      uint64_t v527 = v312;
      long long v313 = v350[1];
      long long v528 = *v350;
      long long v529 = v313;
      long long v530 = v350[2];
      swift_retain();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v492);
      BigSubstring.UnicodeScalarView.startIndex.getter();
      BigSubstring.UnicodeScalarView.endIndex.getter();
      outlined release of Locale((uint64_t)v493);
      outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v365, v382, v380);
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_165;
      }
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_166;
      }
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_167;
      }
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_168;
      }
      long long v314 = v350[1];
      v519[3] = *v350;
      v519[4] = v314;
      v519[5] = v350[2];
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.distance(from:to:)();
      outlined release of Locale((uint64_t)v494);
      outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v365, v382, v380);
      v315 = (_OWORD *)*v366;
      long long v316 = *(_OWORD *)(*v366 + 16);
      long long v317 = *(_OWORD *)(*v366 + 32);
      v519[2] = *(_OWORD *)(*v366 + 48);
      v519[1] = v317;
      v519[0] = v316;
      swift_retain();
      outlined retain of Locale((uint64_t)v519);
      uint64_t v318 = BigString.startIndex.getter();
      uint64_t v320 = v319;
      uint64_t v322 = v321;
      uint64_t v324 = v323;
      outlined release of Locale((uint64_t)v519);
      long long v325 = v315[1];
      long long v326 = v315[2];
      long long v518 = v315[3];
      v517[1] = v326;
      v517[0] = v325;
      long long v327 = v315[1];
      v660[1] = v315[2];
      v660[2] = v518;
      v660[0] = v327;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v660, (uint64_t)v661);
      outlined retain of Locale((uint64_t)v661);
      uint64_t v328 = BigString.endIndex.getter();
      uint64_t v330 = v329;
      uint64_t v332 = v331;
      uint64_t v334 = v333;
      outlined release of Locale((uint64_t)v517);
      uint64_t v506 = v318;
      uint64_t v507 = v320;
      uint64_t v508 = v322;
      uint64_t v509 = v324;
      uint64_t v510 = v328;
      uint64_t v511 = v330;
      uint64_t v512 = v332;
      uint64_t v513 = v334;
      long long v335 = v315[2];
      long long v514 = v315[1];
      long long v515 = v335;
      long long v516 = v315[3];
      swift_retain();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v495);
      BigSubstring.UnicodeScalarView.startIndex.getter();
      BigSubstring.UnicodeScalarView.endIndex.getter();
      outlined release of Locale((uint64_t)v496);
      swift_release();
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_169;
      }
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_170;
      }
      long long v336 = v315[2];
      long long v503 = v315[1];
      long long v504 = v336;
      long long v505 = v315[3];
      BigString.unicodeScalars.getter();
      uint64_t v337 = BigString.UnicodeScalarView.index(_:offsetBy:)();
      uint64_t v339 = v338;
      uint64_t v341 = v340;
      uint64_t v343 = v342;
      outlined release of Locale((uint64_t)v497);
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_171;
      }
      char v344 = static BigString.Index.< infix(_:_:)();
      swift_release();
      if (v344) {
        goto LABEL_172;
      }
      if (static BigString.Index.< infix(_:_:)()) {
        goto LABEL_173;
      }
      *(void *)&long long v416 = v349;
      *((void *)&v416 + 1) = v348;
      *(void *)v429 = v381;
      *(void *)&v429[8] = v386;
      *(_OWORD *)&v429[16] = v387;
      *(void *)&v429[32] = v337;
      *(void *)&v429[40] = v339;
      *(void *)&v429[48] = v341;
      *(void *)&v429[56] = v343;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #1 in String.LocalizationValue.restoreAttributedStringArguments(_:in:)((uint64_t *)&v416, v366, (uint64_t *)v429, v382);
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v381 = v337;
      uint64_t v227 = v339;
      *(void *)&long long v387 = v341;
      *((void *)&v387 + 1) = v343;
      uint64_t v182 = v374;
      uint64_t v183 = v345;
      uint64_t v27 = v367;
      uint64_t v25 = v368;
      uint64_t v28 = v383;
      uint64_t v30 = v384;
      uint64_t v33 = v353;
      uint64_t v31 = v354;
      uint64_t v32 = v352;
      uint64_t v225 = v370;
      uint64_t v224 = v371;
      uint64_t v226 = v379;
      if (v374 == v345)
      {
        outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v365, v382, v380);
        outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v365, v382, v380);
        outlined release of AttributedString.Runs((uint64_t)v434);
        uint64_t v26 = v372;
LABEL_6:
        if (static BigString.Index.== infix(_:_:)()) {
          goto LABEL_3;
        }
        goto LABEL_7;
      }
    }
    uint64_t v254 = *(unsigned __int8 *)(v244 + 18);
    if (*(unsigned char *)(v244 + 18))
    {
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)v434);
      swift_unknownObjectRetain();
      uint64_t v255 = v244;
      while (1)
      {
        unint64_t v257 = *(unsigned __int16 *)(v255 + 16);
        if (!*(_WORD *)(v255 + 16)) {
          goto LABEL_60;
        }
        uint64_t v258 = *(void *)(v255 + 32);
        BOOL v259 = __OFSUB__(v249, v258);
        uint64_t v260 = v249 - v258;
        if (v259) {
          goto LABEL_152;
        }
        if (__OFADD__(v260, 1)) {
          goto LABEL_153;
        }
        if (v260 + 1 <= 0)
        {
          unint64_t v257 = 0;
        }
        else
        {
          if (v257 == 1) {
            goto LABEL_59;
          }
          uint64_t v261 = *(void *)(v255 + 56);
          uint64_t v249 = v260 - v261;
          if (__OFSUB__(v260, v261)) {
            goto LABEL_177;
          }
          if (__OFADD__(v249, 1)) {
            goto LABEL_178;
          }
          if (v249 + 1 < 1)
          {
            unint64_t v257 = 1;
            uint64_t v249 = v260;
          }
          else
          {
            if (v257 == 2) {
              goto LABEL_60;
            }
            uint64_t v262 = *(void *)(v255 + 80);
            BOOL v259 = __OFSUB__(v249, v262);
            uint64_t v260 = v249 - v262;
            if (v259) {
              goto LABEL_182;
            }
            if (__OFADD__(v260, 1)) {
              goto LABEL_183;
            }
            if (v260 + 1 >= 1)
            {
              if (v257 != 3)
              {
                uint64_t v263 = 3;
                if (v257 > 3) {
                  uint64_t v263 = *(unsigned __int16 *)(v255 + 16);
                }
                v264 = (void *)(v255 + 104);
                uint64_t v265 = 3;
                while (v263 != v265)
                {
                  uint64_t v249 = v260 - *v264;
                  if (__OFSUB__(v260, *v264)) {
                    goto LABEL_175;
                  }
                  if (__OFADD__(v249, 1)) {
                    goto LABEL_176;
                  }
                  if (v249 + 1 < 1)
                  {
                    unint64_t v257 = v265;
                    uint64_t v249 = v260;
                    goto LABEL_61;
                  }
                  ++v265;
                  v264 += 3;
                  uint64_t v260 = v249;
                  if (v257 == v265) {
                    goto LABEL_60;
                  }
                }
LABEL_174:
                __break(1u);
LABEL_175:
                __break(1u);
LABEL_176:
                __break(1u);
LABEL_177:
                __break(1u);
LABEL_178:
                __break(1u);
LABEL_179:
                __break(1u);
LABEL_180:
                __break(1u);
LABEL_181:
                __break(1u);
LABEL_182:
                __break(1u);
LABEL_183:
                __break(1u);
LABEL_184:
                __break(1u);
LABEL_185:
                __break(1u);
LABEL_186:
                __break(1u);
                goto LABEL_187;
              }
LABEL_59:
              uint64_t v249 = v260;
LABEL_60:
              if (v249) {
                goto LABEL_151;
              }
              goto LABEL_61;
            }
            unint64_t v257 = 2;
          }
        }
LABEL_61:
        char v256 = (4 * *(unsigned char *)(v255 + 18) + 8) & 0x3C;
        uint64_t v254 = ((-15 << v256) - 1) & v254 | (v257 << v256);
        uint64_t v247 = *(void *)(v255 + 24 + 24 * v257);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        uint64_t v255 = v247;
        if (!*(unsigned char *)(v247 + 18)) {
          goto LABEL_93;
        }
      }
    }
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v434);
    swift_unknownObjectRetain();
    uint64_t v247 = v244;
LABEL_93:
    unint64_t v267 = *(unsigned __int16 *)(v247 + 16);
    if (!*(_WORD *)(v247 + 16))
    {
      if (v249) {
        goto LABEL_185;
      }
      goto LABEL_127;
    }
    unint64_t v268 = v249 - 1;
    if (__OFSUB__(v249, 1)) {
      goto LABEL_186;
    }
    if (__OFADD__(v268, 1))
    {
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
      goto LABEL_189;
    }
    if (v249 <= 0)
    {
      unint64_t v267 = 0;
    }
    else
    {
      if (v267 == 1) {
        goto LABEL_106;
      }
      BOOL v259 = __OFSUB__(v268, 1);
      unint64_t v268 = v249 - 2;
      if (v259) {
        goto LABEL_193;
      }
      if (__OFADD__(v268, 1)) {
        goto LABEL_194;
      }
      if (v249 - 1 < 1)
      {
        unint64_t v267 = 1;
        goto LABEL_127;
      }
      if (v267 == 2)
      {
LABEL_106:
        if (v268) {
          goto LABEL_185;
        }
        goto LABEL_127;
      }
      BOOL v259 = __OFSUB__(v268, 1);
      unint64_t v268 = v249 - 3;
      if (v259) {
        goto LABEL_195;
      }
      if (__OFADD__(v268, 1)) {
        goto LABEL_196;
      }
      if (v249 - 2 >= 1)
      {
        if (v267 != 3)
        {
          uint64_t v269 = 0;
          uint64_t v270 = 3;
          if (v267 > 3) {
            uint64_t v270 = *(unsigned __int16 *)(v247 + 16);
          }
          unint64_t v271 = v270 - 3;
          if (v268 >= v267 - 4) {
            unint64_t v272 = v267 - 4;
          }
          else {
            unint64_t v272 = v249 - 3;
          }
          if (v272 >= v249 + 0x7FFFFFFFFFFFFFFDLL) {
            unint64_t v272 = v249 + 0x7FFFFFFFFFFFFFFDLL;
          }
          while (v271 > v272)
          {
            if (v249 + 0x7FFFFFFFFFFFFFFDLL == v269) {
              goto LABEL_192;
            }
            if (v268 == v269)
            {
              unint64_t v267 = v249;
              goto LABEL_127;
            }
            if (v267 - 3 == ++v269)
            {
              if (v268 == v269) {
                goto LABEL_127;
              }
              goto LABEL_185;
            }
          }
          goto LABEL_191;
        }
        goto LABEL_106;
      }
      unint64_t v267 = 2;
    }
LABEL_127:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v251 = v254 & 0xFFFFFFFFFFFFF0FFLL | (v267 << 8);
    uint64_t v249 = v182;
    goto LABEL_89;
  }
  long long v184 = v92[1];
  v574[0] = *v92;
  v574[1] = v184;
  v574[2] = v92[2];
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?(v365, v382, v380);
  outlined retain of Locale((uint64_t)v574);
  uint64_t v185 = BigString.startIndex.getter();
  uint64_t v187 = v186;
  uint64_t v189 = v188;
  uint64_t v191 = v190;
  outlined release of Locale((uint64_t)v574);
  long long v192 = *v92;
  long long v193 = v92[1];
  long long v573 = v92[2];
  v572[1] = v193;
  v572[0] = v192;
  long long v194 = *v92;
  long long v195 = v92[1];
  v644[2] = v573;
  v644[1] = v195;
  v644[0] = v194;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v644, (uint64_t)v645);
  outlined retain of Locale((uint64_t)v645);
  uint64_t v196 = BigString.endIndex.getter();
  uint64_t v198 = v197;
  uint64_t v200 = v199;
  uint64_t v202 = v201;
  outlined release of Locale((uint64_t)v572);
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_189:
    __break(1u);
    goto LABEL_190;
  }
  uint64_t v564 = v185;
  uint64_t v565 = v187;
  uint64_t v566 = v189;
  uint64_t v567 = v191;
  uint64_t v568 = v196;
  uint64_t v569 = v198;
  uint64_t v570 = v200;
  uint64_t v571 = v202;
  AttributedString.Runs.init(_:in:)(v365, &v416);
  long long v431 = v426;
  long long v432 = v427;
  uint64_t v433 = v428;
  *(_OWORD *)&v429[96] = v422;
  *(_OWORD *)&v429[112] = v423;
  long long v430 = v425;
  *(_OWORD *)&v429[128] = v424;
  *(_OWORD *)&v429[32] = v418;
  *(_OWORD *)&v429[48] = v419;
  *(_OWORD *)&v429[80] = v421;
  *(_OWORD *)&v429[64] = v420;
  *(_OWORD *)&v429[16] = v417;
  *(_OWORD *)v429 = v416;
  long long v203 = v92[1];
  v563[0] = *v92;
  v563[1] = v203;
  v563[2] = v92[2];
  outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?(v365, v382, v380);
  outlined retain of Locale((uint64_t)v563);
  uint64_t v204 = BigString.startIndex.getter();
  uint64_t v206 = v205;
  uint64_t v208 = v207;
  uint64_t v210 = v209;
  outlined release of Locale((uint64_t)v563);
  long long v211 = *v92;
  long long v212 = v92[1];
  long long v562 = v92[2];
  v561[1] = v212;
  v561[0] = v211;
  long long v213 = *v92;
  long long v214 = v92[1];
  v646[2] = v562;
  v646[1] = v214;
  v646[0] = v213;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v646, (uint64_t)v647);
  outlined retain of Locale((uint64_t)v647);
  uint64_t v215 = BigString.endIndex.getter();
  uint64_t v217 = v216;
  uint64_t v219 = v218;
  uint64_t v221 = v220;
  outlined release of Locale((uint64_t)v561);
  if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
  {
    uint64_t v553 = v204;
    uint64_t v554 = v206;
    uint64_t v555 = v208;
    uint64_t v556 = v210;
    uint64_t v557 = v215;
    uint64_t v558 = v217;
    uint64_t v559 = v219;
    uint64_t v560 = v221;
    AttributedString.Runs.init(_:in:)(v365, &v403);
    long long v436 = v413;
    long long v437 = v414;
    uint64_t v438 = v415;
    *(_OWORD *)&v434[96] = v409;
    *(_OWORD *)&v434[112] = v410;
    long long v435 = v412;
    *(_OWORD *)&v434[128] = v411;
    *(_OWORD *)&v434[32] = v405;
    *(_OWORD *)&v434[48] = v406;
    *(_OWORD *)&v434[80] = v408;
    *(_OWORD *)&v434[64] = v407;
    *(_OWORD *)&v434[16] = v404;
    *(_OWORD *)v434 = v403;
    outlined release of AttributedString.Runs((uint64_t)v434);
    long long v399 = v431;
    long long v400 = v432;
    uint64_t v401 = v433;
    long long v395 = *(_OWORD *)&v429[96];
    long long v396 = *(_OWORD *)&v429[112];
    long long v397 = *(_OWORD *)&v429[128];
    long long v398 = v430;
    long long v391 = *(_OWORD *)&v429[32];
    long long v392 = *(_OWORD *)&v429[48];
    long long v393 = *(_OWORD *)&v429[64];
    long long v394 = *(_OWORD *)&v429[80];
    long long v389 = *(_OWORD *)v429;
    long long v390 = *(_OWORD *)&v429[16];
    v388[0] = *(_OWORD *)&v434[8];
    v388[1] = *(_OWORD *)&v434[24];
    v388[2] = *(_OWORD *)&v434[40];
    v388[3] = *(_OWORD *)&v434[56];
    AttributedString.Runs.subscript.getter((uint64_t)v388, v402);
    outlined release of AttributedString.Runs((uint64_t)v429);
    uint64_t v222 = v402[0];
    uint64_t v223 = v402[1];
    swift_release();
    *(void *)&v388[0] = v222;
    *((void *)&v388[0] + 1) = v223;
    *(void *)&long long v389 = v381;
    uint64_t v30 = v384;
    *((void *)&v389 + 1) = v385;
    long long v390 = v387;
    *(void *)&long long v391 = v384;
    uint64_t v33 = v353;
    uint64_t v31 = v354;
    *((void *)&v391 + 1) = v354;
    *(void *)&long long v392 = v353;
    uint64_t v32 = v352;
    *((void *)&v392 + 1) = v352;
    closure #1 in String.LocalizationValue.restoreAttributedStringArguments(_:in:)((uint64_t *)v388, v366, (uint64_t *)&v389, v382);
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v365, v382, v380);
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v365, v382, v380);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = v367;
    uint64_t v25 = v368;
    uint64_t v28 = v383;
    uint64_t v26 = v372;
    goto LABEL_6;
  }
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Range<>.init<A>(_:in:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v19, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
  outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)v20, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
  if ((v21 & 1) == 0)
  {
    unint64_t v6 = v20[0];
    outlined init with take of LocalePreferences?(a1 + 72, (uint64_t)v18, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    uint64_t result = outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)v22, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition.Offsets?);
    if ((v23 & 1) == 0) {
      goto LABEL_17;
    }
  }
  specialized AttributedString.MarkdownSourcePosition.calculateOffsets<A>(within:)((uint64_t)v14);
  outlined init with take of LocalePreferences?((uint64_t)v14, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for (start: AttributedString.MarkdownSourcePosition.Offsets, end: AttributedString.MarkdownSourcePosition.Offsets)?);
  if (v17)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  unint64_t v6 = v15[0];
  uint64_t v8 = v16;
  if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v13 = MEMORY[0x185302230](15, v15[0], a2, a3);
    if (!__OFADD__(v8, 1))
    {
      unint64_t v6 = v13;
      a2 = MEMORY[0x185302230](15, v8 + 1, a2, a3);
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    goto LABEL_34;
  }
  if ((v15[0] & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    unint64_t v9 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v9 < v15[0]) {
    goto LABEL_32;
  }
  a2 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v9 < a2)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    uint64_t result = MEMORY[0x185302230](15, v6, a2, a3);
    if (!__OFADD__(v8, 1))
    {
      unint64_t v6 = result;
      unint64_t v12 = MEMORY[0x185302230](15, v8 + 1, a2, a3);
      uint64_t result = swift_bridgeObjectRelease();
LABEL_27:
      if (v12 >> 14 >= v6 >> 14) {
        return v6;
      }
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  unint64_t v6 = (v6 << 16) | 4;
  a2 = (a2 << 16) | 4;
LABEL_15:
  if (a2 >> 14 >= v6 >> 14) {
    return v6;
  }
  __break(1u);
LABEL_17:
  uint64_t v8 = v22[0];
  if ((a3 & 0x1000000000000000) != 0) {
    goto LABEL_36;
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    unint64_t v10 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v10 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v6) {
    goto LABEL_39;
  }
  unint64_t v11 = v22[0] + 1;
  if (!__OFADD__(v22[0], 1))
  {
    uint64_t result = swift_bridgeObjectRelease();
    if ((v11 & 0x8000000000000000) == 0)
    {
      if (v10 >= v11)
      {
        unint64_t v6 = (v6 << 16) | 4;
        unint64_t v12 = (v11 << 16) | 4;
        goto LABEL_27;
      }
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t closure #1 in String.LocalizationValue.restoreAttributedStringArguments(_:in:)(uint64_t *a1, uint64_t *a2, uint64_t *a3, char a4)
{
  uint64_t v92 = *a1;
  uint64_t v93 = a1[1];
  uint64_t v5 = a3[1];
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[3];
  uint64_t v9 = a3[4];
  uint64_t v8 = a3[5];
  uint64_t v11 = a3[6];
  uint64_t v10 = a3[7];
  uint64_t v94 = *a3;
  if (a4)
  {
    uint64_t v91 = a3[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      long long v48 = (void *)*a2;
      long long v49 = *(_OWORD *)(*a2 + 16);
      long long v50 = *(_OWORD *)(*a2 + 48);
      long long v130 = *(_OWORD *)(*a2 + 32);
      long long v131 = v50;
      long long v129 = v49;
      uint64_t v51 = v48[8];
      uint64_t v87 = v48[9];
      uint64_t v89 = v8;
      uint64_t v52 = v10;
      uint64_t v53 = v48[10];
      uint64_t v54 = v48[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v129);
      swift_unknownObjectRetain();
      uint64_t v55 = v54;
      uint64_t v10 = v52;
      uint64_t v8 = v89;
      *a2 = AttributedString.Guts.init(string:runs:)(&v129, v51, v87, v53, v55);
      swift_release();
    }
    long long v56 = (_OWORD *)*a2;
    long long v57 = *(_OWORD *)(*a2 + 16);
    long long v58 = *(_OWORD *)(*a2 + 48);
    long long v127 = *(_OWORD *)(*a2 + 32);
    long long v128 = v58;
    long long v126 = v57;
    swift_retain();
    outlined retain of Locale((uint64_t)&v126);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v126);
    long long v59 = v56[1];
    long long v60 = v56[3];
    long long v124 = v56[2];
    long long v125 = v60;
    long long v123 = v59;
    long long v61 = v56[1];
    long long v133 = v56[2];
    long long v134 = v60;
    long long v132 = v61;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v132, (uint64_t)v135);
    outlined retain of Locale((uint64_t)v135);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v123);
    swift_release();
    uint64_t v32 = *a2;
    long long v96 = (_OWORD *)v94;
    uint64_t v97 = v91;
    uint64_t v98 = v6;
    uint64_t v99 = v7;
    uint64_t v100 = v9;
    uint64_t v101 = v8;
    uint64_t v102 = v11;
    uint64_t v103 = v10;
    long long v62 = *(_OWORD *)(v32 + 32);
    long long v120 = *(_OWORD *)(v32 + 16);
    long long v121 = v62;
    long long v122 = *(_OWORD *)(v32 + 48);
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v106);
    uint64_t v44 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v45 = v63;
    uint64_t v39 = v64;
    uint64_t v41 = v65;
    uint64_t v94 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v88 = v67;
    uint64_t v90 = v66;
    uint64_t v86 = v68;
    outlined release of Locale((uint64_t)v108);
    swift_release();
    if (one-time initialization token for currentIdentity == -1) {
      goto LABEL_12;
    }
  }
  else
  {
    v135[0] = *a1;
    v135[1] = v93;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      unint64_t v12 = (void *)*a2;
      long long v13 = *(_OWORD *)(*a2 + 16);
      long long v14 = *(_OWORD *)(*a2 + 48);
      long long v130 = *(_OWORD *)(*a2 + 32);
      long long v131 = v14;
      long long v129 = v13;
      uint64_t v15 = v12[8];
      uint64_t v90 = v12[9];
      uint64_t v92 = v6;
      uint64_t v93 = v7;
      uint64_t v16 = v12[10];
      uint64_t v17 = v12[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v129);
      swift_unknownObjectRetain();
      uint64_t v18 = v16;
      uint64_t v6 = v92;
      uint64_t v19 = v17;
      uint64_t v7 = v93;
      *a2 = AttributedString.Guts.init(string:runs:)(&v129, v15, v90, v18, v19);
      swift_release();
    }
    uint64_t v20 = (_OWORD *)*a2;
    long long v21 = *(_OWORD *)(*a2 + 16);
    long long v22 = *(_OWORD *)(*a2 + 48);
    long long v127 = *(_OWORD *)(*a2 + 32);
    long long v128 = v22;
    long long v126 = v21;
    swift_retain();
    outlined retain of Locale((uint64_t)&v126);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v126);
    long long v23 = v20[1];
    long long v24 = v20[3];
    long long v124 = v20[2];
    long long v125 = v24;
    long long v123 = v23;
    long long v25 = v20[1];
    long long v133 = v20[2];
    long long v134 = v24;
    long long v132 = v25;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v132, (uint64_t)v106);
    outlined retain of Locale((uint64_t)v106);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v123);
    swift_release();
    uint64_t v26 = (_OWORD *)*a2;
    uint64_t v112 = v94;
    uint64_t v113 = v5;
    uint64_t v114 = v6;
    uint64_t v115 = v7;
    uint64_t v116 = v9;
    uint64_t v117 = v8;
    uint64_t v118 = v11;
    uint64_t v119 = v10;
    long long v27 = v26[2];
    long long v120 = v26[1];
    long long v121 = v27;
    long long v122 = v26[3];
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v107);
    uint64_t v28 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    uint64_t v35 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    outlined release of Locale((uint64_t)v108);
    swift_release();
    long long v96 = v26;
    uint64_t v97 = v28;
    uint64_t v98 = v30;
    uint64_t v99 = v32;
    uint64_t v100 = v34;
    uint64_t v101 = v35;
    uint64_t v102 = v37;
    uint64_t v103 = v39;
    uint64_t v104 = v41;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    uint64_t v42 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    uint64_t v43 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v43);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v42, (uint64_t *)&v109);
    os_unfair_lock_unlock(v43);
    swift_release();
    uint64_t v44 = v109;
    uint64_t v105 = v109;
    BigString.init()();
    *(void *)long long v95 = 0;
    MEMORY[0x185309530](v95, 8);
    uint64_t v45 = *(void *)v95;
    type metadata accessor for AttributedString.Guts();
    uint64_t v46 = swift_allocObject();
    if (BigString.isEmpty.getter())
    {
      long long v47 = v110;
      *(_OWORD *)(v46 + 16) = v109;
      *(_OWORD *)(v46 + 32) = v47;
      *(_OWORD *)(v46 + 48) = v111;
      *(void *)(v46 + 64) = 0;
      *(void *)(v46 + 72) = 0;
      *(void *)(v46 + 80) = 0;
      *(void *)(v46 + 88) = v45;
      *a2 = v46;
      swift_release();
      v95[0] = 0;
      AttributedSubstring.mergeAttributes(_:mergePolicy:)(v135, v95);
      if (v105 == v44)
      {
        *a2 = (uint64_t)v96;
        return swift_release();
      }
      goto LABEL_20;
    }
    __break(1u);
  }
  swift_once();
LABEL_12:
  long long v69 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  v70 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v70);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v69, &v112);
  os_unfair_lock_unlock(v70);
  swift_release();
  BigString.init()();
  uint64_t v112 = 0;
  MEMORY[0x185309530](&v112, 8);
  uint64_t v71 = v112;
  type metadata accessor for AttributedString.Guts();
  uint64_t v72 = swift_allocObject();
  if (BigString.isEmpty.getter())
  {
    long long v73 = v107[1];
    *(_OWORD *)(v72 + 16) = v107[0];
    *(_OWORD *)(v72 + 32) = v73;
    *(_OWORD *)(v72 + 48) = v107[2];
    *(void *)(v72 + 64) = 0;
    *(void *)(v72 + 72) = 0;
    *(void *)(v72 + 80) = 0;
    *(void *)(v72 + 88) = v71;
    *a2 = v72;
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      long long v74 = *(_OWORD *)(v32 + 32);
      long long v109 = *(_OWORD *)(v32 + 16);
      long long v110 = v74;
      long long v111 = *(_OWORD *)(v32 + 48);
      uint64_t v75 = *(void *)(v32 + 64);
      uint64_t v76 = *(void *)(v32 + 72);
      uint64_t v85 = v41;
      uint64_t v77 = v45;
      uint64_t v78 = v44;
      uint64_t v79 = v39;
      uint64_t v80 = *(void *)(v32 + 80);
      uint64_t v81 = *(void *)(v32 + 88);
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v109);
      swift_unknownObjectRetain();
      uint64_t v82 = v81;
      uint64_t v39 = v79;
      uint64_t v44 = v78;
      uint64_t v45 = v77;
      uint64_t v41 = v85;
      uint64_t v83 = AttributedString.Guts.init(string:runs:)(&v109, v75, v76, v80, v82);
      swift_release();
      uint64_t v32 = v83;
    }
    uint64_t v112 = v44;
    uint64_t v113 = v45;
    uint64_t v114 = v39;
    uint64_t v115 = v41;
    uint64_t v116 = v94;
    uint64_t v117 = v90;
    uint64_t v118 = v88;
    uint64_t v119 = v86;
    AttributedString.Guts.setAttributes(_:in:)(v92, v93);
    *a2 = v32;
    return swift_release();
  }
  __break(1u);
LABEL_20:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized String.LocalizationValue.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.CodingKeys and conformance String.LocalizationValue.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

void _assertValidDecodedFormat(_:validFormatSpecifiers:codingPath:)()
{
}

uint64_t Int8._arg.getter(char a1)
{
  return a1;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance Int8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t Int16._arg.getter(__int16 a1)
{
  return a1;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance Int16(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t UInt8._arg.getter(uint64_t result)
{
  return result;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance UInt8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t UInt16._arg.getter(uint64_t result)
{
  return (unsigned __int16)result;
}

void protocol witness for _FormatSpecifiable._arg.getter in conformance UInt16(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

float protocol witness for _FormatSpecifiable._arg.getter in conformance Float@<S0>(_DWORD *a1@<X8>)
{
  float result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t LocalizedStringResource.key.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocalizedStringResource.defaultValue.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  *a1 = v1[2];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t LocalizedStringResource.table.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocalizedStringResource.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 56);
  return swift_unknownObjectRetain();
}

__n128 LocalizedStringResource.locale.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v1 + 56) = *a1;
  return result;
}

uint64_t (*LocalizedStringResource.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalizedStringResource.bundle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (void *)v1[9];
  uint64_t v2 = v1[10];
  uint64_t v4 = v1[11];
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = 1;
  swift_retain();
  id v5 = v3;

  return swift_retain();
}

uint64_t LocalizedStringResource.localizedStringResource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  uint64_t v9 = *(void **)(v1 + 72);
  uint64_t v8 = *(void *)(v1 + 80);
  uint64_t v10 = *(void *)(v1 + 104);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(void *)(a1 + 72) = v9;
  *(void *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 88);
  *(void *)(a1 + 104) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v11 = v9;
  swift_retain();

  return swift_retain();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LocalizedStringResource.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized LocalizedStringResource.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LocalizedStringResource.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LocalizedStringResource.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type LocalizedStringResource.CodingKeys and conformance LocalizedStringResource.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t specialized LocalizedStringResource._withExtensionForBundle<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject **a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v8 = a1;
  outlined init with take of LocalePreferences?(a1 + 96, (uint64_t)v121, &demangling cache variable for type metadata for String?);
  outlined init with take of LocalePreferences?((uint64_t)v121, (uint64_t)v130, &demangling cache variable for type metadata for String?);
  uint64_t v115 = a2;
  uint64_t v114 = a3;
  uint64_t v112 = a4;
  if (!v130[1])
  {
    if (one-time initialization token for localizedStringLogger != -1) {
      swift_once();
    }
    uint64_t v113 = v4;
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)localizedStringLogger);
    long long v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v23, v24)) {
      goto LABEL_33;
    }
    long long v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v25 = 0;
    uint64_t v26 = "LocalizedStringResource did not contain a sandbox extension token. Proceeding to lookup localized string witho"
          "ut consuming a sandbox extension.";
    goto LABEL_32;
  }
  uint64_t v10 = (void *)v130[0];
  Swift::String v119 = *(Swift::String *)(v8 + 72);
  uint64_t v120 = *(void *)(v8 + 88);
  outlined retain of URL((void **)&v119);
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v113 = v10;
    Swift::String v122 = v119;
    uint64_t v123 = v120;
    outlined retain of URL((void **)&v119);
    Swift::String v11 = URL.path(percentEncoded:)(1);
    Swift::String v122 = v11;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v11._countAndFlagsBits, (unint64_t)v11._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v117._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v12 = specialized Set._Variant.insert(_:)(&v116, 0x2FuLL);
    uint64_t countAndFlagsBits = v117._countAndFlagsBits;
    Swift::String v14 = v122;
    uint64_t v15 = ((unint64_t)v122._object >> 56) & 0xF;
    if (((uint64_t)v122._object & 0x2000000000000000) == 0) {
      uint64_t v15 = v122._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v15)
    {
      uint64_t v111 = v8;
      Swift::String v117 = v122;
      MEMORY[0x1F4188790](v12);
      uint64_t v102 = &v117;
      uint64_t v103 = countAndFlagsBits;
      swift_bridgeObjectRetain();
      uint64_t v16 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v101, v14._countAndFlagsBits, (unint64_t)v14._object);
      if (v17 == 1)
      {
        Swift::String v18 = v117;
        swift_bridgeObjectRetain();
        uint64_t v19 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v18._countAndFlagsBits, (unint64_t)v18._object, countAndFlagsBits);
        unint64_t v21 = v20;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v19 = (void (*)(char *, void))v16;
        unint64_t v21 = v17;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a2 = v115;
      uint64_t v5 = v4;
      if (!v21)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of URL((id *)&v119);
        uint64_t v19 = 0;
        unint64_t v21 = 0xE000000000000000;
        uint64_t v8 = v111;
        goto LABEL_24;
      }
      uint64_t v8 = v111;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v19 = 0;
      unint64_t v21 = 0xE000000000000000;
      a2 = v115;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of URL((id *)&v119);
LABEL_24:
    int v27 = specialized String.withFileSystemRepresentation<A>(_:)((uint64_t)v19, v21);
    swift_bridgeObjectRelease();
    a3 = v114;
    a4 = v112;
    goto LABEL_25;
  }
  if (!objc_msgSend( (id) v119._countAndFlagsBits, sel_fileSystemRepresentation))
  {
    outlined release of URL((id *)&v119);
    goto LABEL_26;
  }
  int v27 = foundation_sandbox_check_path();
LABEL_25:
  outlined release of URL((id *)&v119);
  if (!v27)
  {
    if (one-time initialization token for localizedStringLogger != -1) {
      swift_once();
    }
    uint64_t v113 = v5;
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)localizedStringLogger);
    long long v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v23, v24)) {
      goto LABEL_33;
    }
    long long v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v25 = 0;
    uint64_t v26 = "LocalizedStringResource contained a sandbox extension token but sandbox check passed without consuming the tok"
          "en. Proceeding to lookup localized string without consuming a sandbox extension.";
LABEL_32:
    _os_log_impl(&dword_181795000, v23, v24, v26, v25, 2u);
    MEMORY[0x185309510](v25, -1, -1);
LABEL_33:

LABEL_34:
    uint64_t v28 = 0;
    uint64_t v29 = 1;
    goto LABEL_35;
  }
LABEL_26:
  String.utf8CString.getter();
  uint64_t v28 = sandbox_extension_consume();
  swift_release();
  uint64_t v113 = v5;
  if (v28 != -1)
  {
    uint64_t v29 = 0;
    goto LABEL_35;
  }
  if (one-time initialization token for localizedStringLogger != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  __swift_project_value_buffer(v49, (uint64_t)localizedStringLogger);
  outlined retain of LocalizedStringResource(v8);
  outlined retain of LocalizedStringResource(v8);
  long long v50 = Logger.logObject.getter();
  int v51 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v50, (os_log_type_t)v51))
  {
    outlined release of LocalizedStringResource(v8);
    outlined release of LocalizedStringResource(v8);

    goto LABEL_34;
  }
  uint64_t v52 = swift_slowAlloc();
  uint64_t v110 = swift_slowAlloc();
  *(void *)&long long v116 = v110;
  *(_DWORD *)uint64_t v52 = 136315394;
  outlined retain of URL((void **)&v119);
  char v53 = _foundation_swift_url_feature_enabled();
  LODWORD(v111) = v51;
  if (v53)
  {
    long long v109 = v50;
    Swift::String v122 = v119;
    uint64_t v123 = v120;
    outlined retain of URL((void **)&v119);
    Swift::String v54 = URL.path(percentEncoded:)(1);
    Swift::String v122 = v54;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v54._countAndFlagsBits, (unint64_t)v54._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v117._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v55 = specialized Set._Variant.insert(_:)(&v131, 0x2FuLL);
    uint64_t v56 = v117._countAndFlagsBits;
    Swift::String v57 = v122;
    uint64_t v58 = ((unint64_t)v122._object >> 56) & 0xF;
    if (((uint64_t)v122._object & 0x2000000000000000) == 0) {
      uint64_t v58 = v122._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v58)
    {
      Swift::String v117 = v122;
      MEMORY[0x1F4188790](v55);
      uint64_t v102 = &v117;
      uint64_t v103 = v56;
      swift_bridgeObjectRetain();
      long long v59 = v113;
      uint64_t v113 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v101, v57._countAndFlagsBits, (unint64_t)v57._object);
      long long v61 = v59;
      if (v60 == 1)
      {
        Swift::String v62 = v117;
        swift_bridgeObjectRetain();
        uint64_t v113 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v62._countAndFlagsBits, (unint64_t)v62._object, v56);
        unint64_t object = v63;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t object = v60;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a4 = v112;
      if (!object)
      {
        uint64_t v113 = v59;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of URL((id *)&v119);
        uint64_t v95 = 0;
        unint64_t object = 0xE000000000000000;
        goto LABEL_82;
      }
      uint64_t v95 = (uint64_t)v113;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v95 = 0;
      unint64_t object = 0xE000000000000000;
      long long v61 = v113;
    }
    uint64_t v113 = v61;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of URL((id *)&v119);
LABEL_82:
    outlined release of URL((id *)&v119);
    a3 = v114;
    goto LABEL_83;
  }
  uint64_t v80 = (void *)v119._countAndFlagsBits;
  id v81 = objc_msgSend((id)v119._countAndFlagsBits, sel__parameterString);
  if (!v81)
  {
    id v96 = objc_msgSend(v80, sel_path);
    if (v96)
    {
      uint64_t v97 = v96;
      uint64_t v95 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
      unint64_t object = v98;

      outlined release of URL((id *)&v119);
    }
    else
    {
      outlined release of URL((id *)&v119);
      uint64_t v95 = 0;
      unint64_t object = 0xE000000000000000;
    }
    goto LABEL_84;
  }
  uint64_t v82 = v81;
  long long v109 = v50;
  uint64_t v83 = a4;
  id v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
  uint64_t v86 = v85;

  if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
    && (id v87 = objc_msgSend(v80, sel_path)) != 0)
  {
    uint64_t v88 = v87;
    id v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    uint64_t v91 = v90;

    v122._uint64_t countAndFlagsBits = (uint64_t)v89;
    v122._unint64_t object = v91;
    swift_bridgeObjectRetain();
    v92._uint64_t countAndFlagsBits = 59;
    v92._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v92);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v93._uint64_t countAndFlagsBits = (uint64_t)v84;
    v93._unint64_t object = v86;
    String.append(_:)(v93);
    swift_bridgeObjectRelease();
  }
  else
  {
    v122._uint64_t countAndFlagsBits = 59;
    v122._unint64_t object = (void *)0xE100000000000000;
    v94._uint64_t countAndFlagsBits = (uint64_t)v84;
    v94._unint64_t object = v86;
    String.append(_:)(v94);
  }
  swift_bridgeObjectRelease();
  outlined release of URL((id *)&v119);
  unint64_t object = (unint64_t)v122._object;
  uint64_t v95 = v122._countAndFlagsBits;
  a4 = v83;
LABEL_83:
  long long v50 = v109;
LABEL_84:
  uint64_t v99 = v110;
  v122._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, object, (uint64_t *)&v116);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined release of LocalizedStringResource(v8);
  uint64_t v100 = outlined release of LocalizedStringResource(v8);
  *(_WORD *)(v52 + 12) = 1026;
  LODWORD(v122._countAndFlagsBits) = MEMORY[0x185301870](v100);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  _os_log_impl(&dword_181795000, v50, (os_log_type_t)v111, "Unable to consume sandbox extension for path '%s' (errno: %{public}d)", (uint8_t *)v52, 0x12u);
  uint64_t v29 = 1;
  swift_arrayDestroy();
  MEMORY[0x185309510](v99, -1, -1);
  MEMORY[0x185309510](v52, -1, -1);

  uint64_t v28 = 0;
  a2 = v115;
LABEL_35:
  Swift::String v117 = *(Swift::String *)(v8 + 72);
  uint64_t v118 = *(void *)(v8 + 88);
  id v31 = objc_allocWithZone((Class)NSBundle);
  uint64_t v32 = v117._countAndFlagsBits;
  outlined retain of URL((void **)&v117);
  uint64_t v33 = objc_msgSend(v31, sel_initWithURL_, v32);
  uint64_t v34 = v33;
  if (!v33)
  {
    outlined release of URL((id *)&v117);
    if (v29) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  uint64_t v111 = v29;
  uint64_t v35 = *(void *)(a2 + 48);
  uint64_t v110 = v28;
  long long v109 = v33;
  if (v35)
  {
    uint64_t v36 = *(void *)(a2 + 40);
    outlined retain of AttributedString.LocalizationOptions(a2);
    goto LABEL_65;
  }
  outlined retain of AttributedString.LocalizationOptions(a2);
  id v37 = [v34 localizations];
  if (!v37) {
    id v37 = (id)_ContiguousArrayBuffer._asCocoaArray()();
  }
  uint64_t v38 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_1821037E0;
  long long v116 = *(_OWORD *)(a3 + 56);
  uint64_t v40 = *((void *)&v116 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 64);
  outlined retain of Locale((uint64_t)&v116);
  uint64_t v43 = v42(ObjectType, v40);
  uint64_t v45 = v44;
  outlined release of Locale((uint64_t)&v116);
  *(void *)(v39 + 32) = v43;
  *(void *)(v39 + 40) = v45;
  id v46 = objc_msgSend(v38, sel_preferredLocalizationsFromArray_forPreferences_, v37, _ContiguousArrayBuffer._asCocoaArray()());

  swift_unknownObjectRelease();
  if (v46)
  {
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }
    uint64_t v47 = swift_dynamicCastClass();
    a3 = v114;
    if (!v47)
    {
      swift_unknownObjectRelease();
      objc_msgSend(v46, sel_copy);
      unint64_t v65 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      long long v48 = (void *)specialized _arrayForceCast<A, B>(_:)(v65);

      swift_bridgeObjectRelease();
      a2 = v115;
      if (v48[2]) {
        goto LABEL_61;
      }
      goto LABEL_64;
    }
    long long v48 = (void *)v47;
  }
  else
  {
    long long v48 = (void *)MEMORY[0x1E4FBC860];
    a3 = v114;
  }
  a2 = v115;
  if (v48[2])
  {
LABEL_61:
    uint64_t v36 = v48[4];
    uint64_t v35 = v48[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }
LABEL_64:
  swift_bridgeObjectRelease();
  uint64_t v36 = 0;
  uint64_t v35 = 0;
LABEL_65:
  uint64_t v66 = *(void *)a2;
  uint64_t v67 = *(void **)(a2 + 8);
  char v68 = *(unsigned char *)(a2 + 16);
  char v69 = *(unsigned char *)(a2 + 17);
  uint64_t v70 = *(void *)(a2 + 24);
  char v71 = *(unsigned char *)(a2 + 32);
  char v72 = *(unsigned char *)(a2 + 33);
  uint64_t v73 = *(void *)(a3 + 16);
  uint64_t v108 = *(void **)(a3 + 24);
  uint64_t v107 = *(void *)a3;
  uint64_t v106 = *(void *)(a3 + 8);
  v122._uint64_t countAndFlagsBits = v66;
  v122._unint64_t object = v67;
  LOBYTE(v123) = v68;
  BYTE1(v123) = v69;
  uint64_t v124 = v70;
  char v125 = v71;
  char v126 = v72;
  uint64_t v127 = v36;
  uint64_t v128 = v35;
  char v129 = 1;
  long long v74 = *(_OWORD **)(a3 + 32);
  uint64_t v105 = *(void *)(a3 + 40);
  uint64_t v75 = *(void *)(a3 + 56);
  uint64_t v104 = *(void *)(a3 + 48);
  uint64_t v76 = *(void *)(a3 + 64);
  swift_bridgeObjectRetain();
  uint64_t v77 = (uint64_t)v109;
  uint64_t v78 = v109;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(v107, v106, (uint64_t)&v122, v105, v104, v77, v75, v76, 1u, v73, v108, v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  a2 = v115;
  swift_unknownObjectRelease();

  a3 = v114;
  outlined release of URL((id *)&v117);
  uint64_t v34 = v131;
  a4 = v112;
  if ((v111 & 1) == 0) {
LABEL_66:
  }
    sandbox_extension_release();
LABEL_67:
  outlined release of AttributedString.LocalizationOptions(a2);
  *a4 = v34;
  return outlined release of LocalizedStringResource(a3);
}

uint64_t specialized LocalizedStringResource._withExtensionForBundle<A>(_:)@<X0>(void (*a1)(void *__return_ptr, void)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void (*v78)(void *__return_ptr, void);
  os_log_t v79;
  uint64_t v80;
  uint64_t v81;
  Swift::String v82;
  char v83;
  Swift::String v84;
  uint64_t v85;
  long long v86;
  uint64_t v87;
  Swift::String v88;
  uint64_t v89;
  unsigned char v90[16];
  void v91[3];
  uint64_t v92;

  uint64_t v5 = v4;
  uint64_t v6 = v3;
  outlined init with take of LocalePreferences?(v3 + 96, (uint64_t)v90, &demangling cache variable for type metadata for String?);
  outlined init with take of LocalePreferences?((uint64_t)v90, (uint64_t)v91, &demangling cache variable for type metadata for String?);
  if (!v91[1])
  {
    if (one-time initialization token for localizedStringLogger != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)localizedStringLogger);
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v24, v25)) {
      goto LABEL_46;
    }
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    int v27 = "LocalizedStringResource did not contain a sandbox extension token. Proceeding to lookup localized string witho"
          "ut consuming a sandbox extension.";
LABEL_32:
    _os_log_impl(&dword_181795000, v24, v25, v27, v26, 2u);
    MEMORY[0x185309510](v26, -1, -1);
LABEL_46:

    char v30 = 1;
    goto LABEL_47;
  }
  uint64_t v10 = v91[0];
  uint64_t v88 = *(Swift::String *)(v3 + 72);
  id v89 = *(void *)(v3 + 88);
  outlined retain of URL((void **)&v88);
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v79 = v10;
    uint64_t v80 = a2;
    id v81 = v4;
    uint64_t v85 = v89;
    outlined retain of URL((void **)&v88);
    Swift::String v11 = URL.path(percentEncoded:)(1);
    id v84 = v11;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v11._countAndFlagsBits, (unint64_t)v11._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }
    v82._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v12 = specialized Set._Variant.insert(_:)(&v92, 0x2FuLL);
    uint64_t countAndFlagsBits = v82._countAndFlagsBits;
    Swift::String v14 = v84;
    uint64_t v15 = ((unint64_t)v84._object >> 56) & 0xF;
    if (((uint64_t)v84._object & 0x2000000000000000) == 0) {
      uint64_t v15 = v84._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v15)
    {
      uint64_t v78 = a1;
      uint64_t v77 = a3;
      uint64_t v82 = v84;
      MEMORY[0x1F4188790](v12);
      uint64_t v73 = &v82;
      uint64_t v74 = countAndFlagsBits;
      swift_bridgeObjectRetain();
      uint64_t v16 = v81;
      unint64_t v17 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v72, v14._countAndFlagsBits, (unint64_t)v14._object);
      if (v18 == 1)
      {
        Swift::String v19 = v82;
        swift_bridgeObjectRetain();
        unint64_t v20 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v19._countAndFlagsBits, (unint64_t)v19._object, countAndFlagsBits);
        unint64_t v22 = v21;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v20 = (void (*)(char *, void))v17;
        unint64_t v22 = v18;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a3 = v77;
      uint64_t v5 = v16;
      if (!v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of URL((id *)&v88);
        unint64_t v20 = 0;
        unint64_t v22 = 0xE000000000000000;
        a1 = v78;
        goto LABEL_24;
      }
      a1 = v78;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v20 = 0;
      unint64_t v22 = 0xE000000000000000;
      uint64_t v5 = v81;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of URL((id *)&v88);
LABEL_24:
    int v28 = specialized String.withFileSystemRepresentation<A>(_:)((uint64_t)v20, v22);
    swift_bridgeObjectRelease();
    a2 = v80;
    goto LABEL_25;
  }
  if (!objc_msgSend( (id) v88._countAndFlagsBits, sel_fileSystemRepresentation))
  {
    outlined release of URL((id *)&v88);
    goto LABEL_26;
  }
  int v28 = foundation_sandbox_check_path();
LABEL_25:
  outlined release of URL((id *)&v88);
  if (!v28)
  {
    if (one-time initialization token for localizedStringLogger != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)localizedStringLogger);
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v24, v25)) {
      goto LABEL_46;
    }
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    int v27 = "LocalizedStringResource contained a sandbox extension token but sandbox check passed without consuming the tok"
          "en. Proceeding to lookup localized string without consuming a sandbox extension.";
    goto LABEL_32;
  }
LABEL_26:
  String.utf8CString.getter();
  uint64_t v29 = sandbox_extension_consume();
  swift_release();
  if (v29 != -1)
  {
    char v30 = 0;
    goto LABEL_47;
  }
  if (one-time initialization token for localizedStringLogger != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)localizedStringLogger);
  outlined retain of LocalizedStringResource(v6);
  outlined retain of LocalizedStringResource(v6);
  os_log_type_t v24 = Logger.logObject.getter();
  int v33 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v24, (os_log_type_t)v33))
  {
    outlined release of LocalizedStringResource(v6);
    outlined release of LocalizedStringResource(v6);
    goto LABEL_46;
  }
  uint64_t v78 = a1;
  uint64_t v34 = swift_slowAlloc();
  uint64_t v35 = swift_slowAlloc();
  Swift::String v92 = v35;
  *(_DWORD *)uint64_t v34 = 136315394;
  outlined retain of URL((void **)&v88);
  int v36 = _foundation_swift_url_feature_enabled();
  id v81 = v5;
  uint64_t v79 = v24;
  int v76 = v33;
  uint64_t v75 = v35;
  if (!v36)
  {
    uint64_t v52 = (void *)v88._countAndFlagsBits;
    id v53 = objc_msgSend((id)v88._countAndFlagsBits, sel__parameterString);
    if (v53)
    {
      Swift::String v54 = v53;
      id v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      Swift::String v57 = v56;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (id v58 = objc_msgSend(v52, sel_path)) != 0)
      {
        long long v59 = v58;
        id v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
        Swift::String v62 = v61;

        v84._uint64_t countAndFlagsBits = (uint64_t)v60;
        v84._unint64_t object = v62;
        swift_bridgeObjectRetain();
        v63._uint64_t countAndFlagsBits = 59;
        v63._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v64._uint64_t countAndFlagsBits = (uint64_t)v55;
        v64._unint64_t object = v57;
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
      }
      else
      {
        v84._uint64_t countAndFlagsBits = 59;
        v84._unint64_t object = (void *)0xE100000000000000;
        v65._uint64_t countAndFlagsBits = (uint64_t)v55;
        v65._unint64_t object = v57;
        String.append(_:)(v65);
      }
      swift_bridgeObjectRelease();
      outlined release of URL((id *)&v88);
      unint64_t object = (unint64_t)v84._object;
      uint64_t v48 = v84._countAndFlagsBits;
      uint64_t v5 = v81;
    }
    else
    {
      id v66 = objc_msgSend(v52, sel_path);
      uint64_t v5 = v81;
      if (v66)
      {
        uint64_t v67 = v66;
        uint64_t v48 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        unint64_t object = v68;

        outlined release of URL((id *)&v88);
      }
      else
      {
        outlined release of URL((id *)&v88);
        uint64_t v48 = 0;
        unint64_t object = 0xE000000000000000;
      }
    }
    goto LABEL_66;
  }
  uint64_t v80 = a2;
  id v84 = v88;
  uint64_t v85 = v89;
  outlined retain of URL((void **)&v88);
  Swift::String v37 = URL.path(percentEncoded:)(1);
  id v84 = v37;
  swift_bridgeObjectRetain();
  if (String.count.getter() > 1
    && (specialized BidirectionalCollection.last.getter(v37._countAndFlagsBits, (unint64_t)v37._object) & 0x1FF) == 0x2F)
  {
    specialized RangeReplaceableCollection<>.popLast()();
    swift_bridgeObjectRelease();
  }
  v82._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
  uint64_t v38 = specialized Set._Variant.insert(_:)(&v83, 0x2FuLL);
  uint64_t v39 = v82._countAndFlagsBits;
  Swift::String v40 = v84;
  uint64_t v41 = ((unint64_t)v84._object >> 56) & 0xF;
  if (((uint64_t)v84._object & 0x2000000000000000) == 0) {
    uint64_t v41 = v84._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (v41)
  {
    uint64_t v77 = a3;
    uint64_t v82 = v84;
    MEMORY[0x1F4188790](v38);
    uint64_t v73 = &v82;
    uint64_t v74 = v39;
    swift_bridgeObjectRetain();
    uint64_t v42 = v81;
    uint64_t v43 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)v72, v40._countAndFlagsBits, (unint64_t)v40._object);
    uint64_t v5 = v42;
    if (v44 == 1)
    {
      uint64_t v45 = v42;
      unint64_t v47 = (unint64_t)v82._object;
      Swift::Int v46 = v82._countAndFlagsBits;
      swift_bridgeObjectRetain();
      uint64_t v48 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v46, v47, v39);
      unint64_t object = v49;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v5 = v45;
    }
    else
    {
      uint64_t v48 = (uint64_t)v43;
      unint64_t object = v44;
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    a3 = v77;
    if (!object)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of URL((id *)&v88);
      uint64_t v48 = 0;
      unint64_t object = 0xE000000000000000;
      goto LABEL_65;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v48 = 0;
    unint64_t object = 0xE000000000000000;
    uint64_t v5 = v81;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of URL((id *)&v88);
LABEL_65:
  outlined release of URL((id *)&v88);
LABEL_66:
  v84._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, object, &v92);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined release of LocalizedStringResource(v6);
  uint64_t v69 = outlined release of LocalizedStringResource(v6);
  *(_WORD *)(v34 + 12) = 1026;
  LODWORD(v84._countAndFlagsBits) = MEMORY[0x185301870](v69);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  os_log_t v70 = v79;
  _os_log_impl(&dword_181795000, v79, (os_log_type_t)v76, "Unable to consume sandbox extension for path '%s' (errno: %{public}d)", (uint8_t *)v34, 0x12u);
  char v30 = 1;
  uint64_t v71 = v75;
  swift_arrayDestroy();
  MEMORY[0x185309510](v71, -1, -1);
  MEMORY[0x185309510](v34, -1, -1);

  a1 = v78;
LABEL_47:
  uint64_t v86 = *(_OWORD *)(v6 + 72);
  id v87 = *(void *)(v6 + 88);
  id v84 = *(Swift::String *)(v6 + 72);
  uint64_t v85 = *(void *)(v6 + 88);
  outlined retain of URL((void **)&v86);
  a1(&v82, &v84);
  uint64_t result = (uint64_t)outlined release of URL((id *)&v86);
  if (!v5)
  {
    if ((v30 & 1) == 0) {
      uint64_t result = sandbox_extension_release();
    }
    *a3 = v82._countAndFlagsBits;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance LocalizedStringResource(void *a1)
{
}

uint64_t protocol witness for CustomLocalizedStringResourceConvertible.localizedStringResource.getter in conformance LocalizedStringResource@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 48);
  uint64_t v9 = *(void **)(v1 + 72);
  uint64_t v8 = *(void *)(v1 + 80);
  uint64_t v10 = *(void *)(v1 + 104);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
  *(void *)(a1 + 72) = v9;
  *(void *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v1 + 88);
  *(void *)(a1 + 104) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v11 = v9;
  swift_retain();

  return swift_retain();
}

double protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance LocalizedStringResource@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = LocalizedStringResource.init(stringLiteral:)(*a1, a1[1], a2).n128_u64[0];
  return result;
}

uint64_t _NSLocalizedStringResourceSwiftWrapper.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  outlined init with copy of (Hashable & Sendable)?(a1, (uint64_t)&v33, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v35)
  {
    outlined destroy of Any?((uint64_t)&v33, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_6:
    char v18 = 0;
    return v18 & 1;
  }
  outlined init with take of Any(&v33, v44);
  outlined init with copy of Any((uint64_t)v44, (uint64_t)&v33);
  if ((swift_dynamicCast() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    goto LABEL_6;
  }
  uint64_t v26 = (void *)v27[0];
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 8);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 16);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 24);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 32);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 40);
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 48);
  uint64_t v10 = *(void **)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 72);
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 80);
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 104);
  *(void *)&long long v33 = *(void *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped);
  *((void *)&v33 + 1) = v3;
  uint64_t v34 = v5;
  uint64_t v35 = v4;
  uint64_t v36 = v7;
  uint64_t v37 = v6;
  long long v39 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 56);
  uint64_t v38 = v8;
  Swift::String v40 = v10;
  uint64_t v41 = v9;
  long long v42 = *(_OWORD *)(v1 + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 88);
  uint64_t v43 = v11;
  uint64_t v12 = v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped;
  uint64_t v13 = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 24);
  uint64_t v20 = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 16);
  uint64_t v15 = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 32);
  uint64_t v14 = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 40);
  uint64_t v21 = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 48);
  uint64_t v16 = *(void **)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 72);
  uint64_t v24 = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 80);
  uint64_t v25 = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 8);
  uint64_t v17 = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 104);
  v27[0] = *(void *)(v27[0] + OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped);
  v27[1] = v25;
  void v27[2] = v20;
  v27[3] = v13;
  v27[4] = v15;
  v27[5] = v14;
  v27[6] = v21;
  long long v28 = *(_OWORD *)(v12 + 56);
  uint64_t v29 = v16;
  uint64_t v30 = v24;
  long long v31 = *(_OWORD *)(v12 + 88);
  uint64_t v32 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v23 = v10;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v22 = v16;
  swift_retain();
  swift_retain();
  char v18 = specialized static LocalizedStringResource.== infix(_:_:)((uint64_t)&v33, (uint64_t)v27);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  return v18 & 1;
}

__n128 LocalizedStringResource.init(nsLocalizedStringResource:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of Any(a1, (uint64_t)v23);
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for _NSLocalizedStringResource);
  swift_dynamicCast();
  id v4 = objc_msgSend(v22, sel_resource);

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1);
  type metadata accessor for _NSLocalizedStringResourceSwiftWrapper();
  swift_dynamicCast();
  uint64_t v5 = &v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped];
  uint64_t v6 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 8];
  uint64_t v7 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 16];
  uint64_t v18 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 24];
  uint64_t v19 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped];
  uint64_t v8 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 32];
  uint64_t v9 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 48];
  uint64_t v10 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 80];
  uint64_t v16 = *(void **)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 72];
  uint64_t v17 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 40];
  uint64_t v11 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 88];
  uint64_t v20 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 96];
  uint64_t v12 = *(void *)&v21[OBJC_IVAR____NSLocalizedStringResourceSwiftWrapper_wrapped + 104];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __n128 v15 = *(__n128 *)(v5 + 56);
  swift_unknownObjectRetain();
  id v13 = v16;
  swift_retain();
  swift_retain();

  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v18;
  *(void *)(a2 + 32) = v8;
  *(void *)(a2 + 40) = v17;
  *(void *)(a2 + 48) = v9;
  __n128 result = v15;
  *(__n128 *)(a2 + 56) = v15;
  *(void *)(a2 + 72) = v13;
  *(void *)(a2 + 80) = v10;
  *(void *)(a2 + 88) = v11;
  *(void *)(a2 + 96) = v20;
  *(void *)(a2 + 104) = v12;
  return result;
}

uint64_t AttributedString.init(localized:)@<X0>(long long *a1@<X0>, NSObject **a2@<X8>)
{
  long long v3 = a1[5];
  long long v25 = a1[4];
  long long v26 = v3;
  long long v27 = a1[6];
  long long v4 = a1[1];
  long long v21 = *a1;
  long long v22 = v4;
  long long v5 = a1[3];
  long long v23 = a1[2];
  long long v24 = v5;
  v14[0] = 0;
  v14[1] = 0;
  __int16 v15 = 1;
  uint64_t v16 = 0;
  __int16 v17 = 256;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  outlined retain of LocalizedStringResource((uint64_t)&v21);
  specialized LocalizedStringResource._withExtensionForBundle<A>(_:)((uint64_t)&v21, (uint64_t)v14, (uint64_t)&v21, &v13);
  uint64_t v6 = v13;
  if (v13)
  {
    uint64_t result = outlined release of LocalizedStringResource((uint64_t)&v21);
  }
  else
  {
    uint64_t v9 = (void *)*((void *)&v22 + 1);
    uint64_t v8 = v22;
    uint64_t v10 = (_OWORD *)v23;
    uint64_t v11 = *((void *)&v24 + 1);
    uint64_t v12 = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v14, 0, 0, 0, v11, v12, 0, v8, v9, v10);
    outlined release of LocalizedStringResource((uint64_t)&v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v6 = v13;
  }
  *a2 = v6;
  return result;
}

uint64_t AttributedString.init<A>(localized:including:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[9];
  uint64_t v18 = *a1;
  long long v19 = *(_OWORD *)(a1 + 1);
  uint64_t v20 = v5;
  uint64_t v21 = v6;
  long long v8 = *(_OWORD *)(a1 + 7);
  long long v22 = *(_OWORD *)(a1 + 5);
  long long v23 = v8;
  uint64_t v24 = v7;
  long long v9 = *((_OWORD *)a1 + 6);
  long long v25 = *((_OWORD *)a1 + 5);
  long long v26 = v9;
  long long v11 = 0uLL;
  __int16 v12 = 1;
  uint64_t v13 = 0;
  __int16 v14 = 256;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v17 = 0;
  AttributedString.init<A>(localized:options:including:)((long long *)&v18, &v11, a2, a2, a3, &v27);
  uint64_t result = swift_release();
  *a4 = v27;
  return result;
}

uint64_t AttributedString.init<A>(localized:options:including:)@<X0>(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  long long v10 = a1[5];
  *(_OWORD *)&v32[16] = a1[4];
  long long v33 = v10;
  long long v34 = a1[6];
  long long v11 = a1[1];
  long long v29 = *a1;
  long long v30 = v11;
  long long v12 = a1[3];
  long long v31 = a1[2];
  *(_OWORD *)uint64_t v32 = v12;
  long long v13 = *a2;
  long long v14 = a2[1];
  long long v15 = a2[2];
  *(_OWORD *)((char *)v37 + 9) = *(long long *)((char *)a2 + 41);
  long long v36 = v14;
  v37[0] = v15;
  long long v35 = v13;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = &v35;
  long long v22 = &v29;
  uint64_t v23 = a3;
  specialized LocalizedStringResource._withExtensionForBundle<A>(_:)((void (*)(void *__return_ptr, void))partial apply for closure #1 in AttributedString.init<A>(localized:options:including:), (uint64_t)v18, (uint64_t *)v25);
  uint64_t v16 = *(void *)&v25[0];
  if (*(void *)&v25[0])
  {
    outlined release of AttributedString.LocalizationOptions((uint64_t)&v35);
    uint64_t result = outlined release of LocalizedStringResource((uint64_t)&v29);
  }
  else
  {
    long long v38 = v30;
    uint64_t v39 = v31;
    void v26[2] = v30;
    uint64_t v27 = v31;
    v25[0] = v35;
    v25[1] = v36;
    v26[0] = v37[0];
    *(_OWORD *)((char *)v26 + 9) = *(_OWORD *)((char *)v37 + 9);
    long long v40 = *(_OWORD *)&v32[8];
    long long v24 = *(_OWORD *)&v32[8];
    outlined retain of String.LocalizationValue((uint64_t)&v38);
    outlined retain of Locale((uint64_t)&v40);
    String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v25, 0, 0, 0, (uint64_t)&v24, a3, 0, a4, a5);
    outlined release of LocalizedStringResource((uint64_t)&v29);
    outlined release of Locale((uint64_t)&v40);
    outlined release of String.LocalizationValue((uint64_t)&v38);
    uint64_t result = outlined release of AttributedString.LocalizationOptions((uint64_t)&v35);
    uint64_t v16 = v28;
  }
  *a6 = v16;
  return result;
}

uint64_t AttributedString.init(localized:options:)@<X0>(long long *a1@<X0>, long long *a2@<X1>, NSObject **a3@<X8>)
{
  long long v4 = a1[5];
  long long v24 = a1[4];
  long long v25 = v4;
  long long v26 = a1[6];
  long long v5 = a1[1];
  long long v20 = *a1;
  long long v21 = v5;
  long long v6 = a1[3];
  long long v22 = a1[2];
  long long v23 = v6;
  long long v7 = *a2;
  long long v8 = a2[1];
  long long v9 = a2[2];
  *(_OWORD *)&v19[9] = *(long long *)((char *)a2 + 41);
  v18[1] = v8;
  *(_OWORD *)uint64_t v19 = v9;
  v18[0] = v7;
  outlined retain of AttributedString.LocalizationOptions((uint64_t)v18);
  outlined retain of LocalizedStringResource((uint64_t)&v20);
  specialized LocalizedStringResource._withExtensionForBundle<A>(_:)((uint64_t)&v20, (uint64_t)v18, (uint64_t)&v20, &v17);
  long long v10 = v17;
  if (v17)
  {
    outlined release of AttributedString.LocalizationOptions((uint64_t)v18);
    uint64_t result = outlined release of LocalizedStringResource((uint64_t)&v20);
  }
  else
  {
    long long v13 = (void *)*((void *)&v21 + 1);
    uint64_t v12 = v21;
    long long v14 = (_OWORD *)v22;
    uint64_t v15 = *((void *)&v23 + 1);
    uint64_t v16 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v18, 0, 0, 0, v15, v16, 0, v12, v13, v14);
    outlined release of LocalizedStringResource((uint64_t)&v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    uint64_t result = outlined release of AttributedString.LocalizationOptions((uint64_t)v18);
    long long v10 = v17;
  }
  *a3 = v10;
  return result;
}

uint64_t AttributedString.init<A>(localized:options:including:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[9];
  char v9 = *(unsigned char *)(a2 + 16);
  char v10 = *(unsigned char *)(a2 + 17);
  uint64_t v11 = *(void *)(a2 + 24);
  char v12 = *(unsigned char *)(a2 + 32);
  char v13 = *(unsigned char *)(a2 + 33);
  char v14 = *(unsigned char *)(a2 + 56);
  uint64_t v25 = *a1;
  long long v26 = *(_OWORD *)(a1 + 1);
  uint64_t v27 = v6;
  uint64_t v28 = v7;
  long long v29 = *(_OWORD *)(a1 + 5);
  long long v30 = *(_OWORD *)(a1 + 7);
  uint64_t v31 = v8;
  long long v15 = *((_OWORD *)a1 + 6);
  long long v32 = *((_OWORD *)a1 + 5);
  long long v33 = v15;
  long long v17 = *(_OWORD *)a2;
  char v18 = v9;
  char v19 = v10;
  uint64_t v20 = v11;
  char v21 = v12;
  char v22 = v13;
  long long v23 = *(_OWORD *)(a2 + 40);
  char v24 = v14;
  AttributedString.init<A>(localized:options:including:)((long long *)&v25, &v17, a3, a3, a4, &v34);
  uint64_t result = swift_release();
  *a5 = v34;
  return result;
}

id closure #1 in AttributedString.init<A>(localized:options:including:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, void *a7@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone((Class)NSBundle), sel_initWithURL_, *a1);
  if (!result)
  {
    *a7 = 0;
    return result;
  }
  char v14 = result;
  uint64_t v46 = a4;
  unint64_t v47 = a7;
  uint64_t v15 = *(void *)(a2 + 48);
  unint64_t v44 = a6;
  uint64_t v45 = a5;
  uint64_t v43 = result;
  if (!v15)
  {
    outlined retain of AttributedString.LocalizationOptions(a2);
    id v17 = objc_msgSend(v14, sel_localizations);
    if (!v17) {
      id v17 = (id)_ContiguousArrayBuffer._asCocoaArray()();
    }
    id v42 = self;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1821037E0;
    v60[0] = *(_OWORD *)(a3 + 56);
    uint64_t v19 = *((void *)&v60[0] + 1);
    uint64_t ObjectType = swift_getObjectType();
    char v21 = *(uint64_t (**)(uint64_t, uint64_t))(*((void *)&v60[0] + 1) + 64);
    outlined retain of Locale((uint64_t)v60);
    uint64_t v22 = v21(ObjectType, v19);
    uint64_t v24 = v23;
    outlined release of Locale((uint64_t)v60);
    *(void *)(v18 + 32) = v22;
    *(void *)(v18 + 40) = v24;
    id v25 = objc_msgSend(v42, sel_preferredLocalizationsFromArray_forPreferences_, v17, _ContiguousArrayBuffer._asCocoaArray()());

    swift_unknownObjectRelease();
    if (v25)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      uint64_t v26 = swift_dynamicCastClass();
      if (v26)
      {
        uint64_t v27 = (void *)v26;

        if (!v27[2]) {
          goto LABEL_14;
        }
LABEL_16:
        uint64_t v16 = v27[4];
        uint64_t v15 = v27[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      swift_unknownObjectRelease();
      objc_msgSend(v25, sel_copy);
      unint64_t v28 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      uint64_t v27 = (void *)specialized _arrayForceCast<A, B>(_:)(v28);

      swift_bridgeObjectRelease();
      if (v27[2]) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v27 = (void *)MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
        goto LABEL_16;
      }
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v16 = 0;
    uint64_t v15 = 0;
    goto LABEL_17;
  }
  uint64_t v16 = *(void *)(a2 + 40);
  outlined retain of AttributedString.LocalizationOptions(a2);
LABEL_17:
  uint64_t v29 = *(void *)a2;
  uint64_t v30 = *(void *)(a2 + 8);
  char v31 = *(unsigned char *)(a2 + 16);
  char v32 = *(unsigned char *)(a2 + 17);
  uint64_t v33 = *(void *)(a2 + 24);
  char v34 = *(unsigned char *)(a2 + 32);
  char v35 = *(unsigned char *)(a2 + 33);
  long long v58 = *(_OWORD *)(a3 + 16);
  uint64_t v41 = *(void *)(a3 + 40);
  uint64_t v59 = *(void *)(a3 + 32);
  char v49 = v31;
  uint64_t v36 = *(void *)a3;
  uint64_t v37 = *(void *)(a3 + 8);
  v48[0] = v29;
  v48[1] = v30;
  char v50 = v32;
  uint64_t v51 = v33;
  char v52 = v34;
  char v53 = v35;
  uint64_t v54 = v16;
  uint64_t v55 = v15;
  char v56 = 1;
  uint64_t v38 = *(void *)(a3 + 48);
  uint64_t v39 = a3 + 56;
  long long v57 = *(_OWORD *)(a3 + 56);
  outlined retain of String.LocalizationValue((uint64_t)&v58);
  swift_bridgeObjectRetain();
  id v40 = v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of Locale((uint64_t)&v57);
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(v36, v37, (uint64_t)v48, v41, v38, (uint64_t)v43, v39, v46, 1u, v45, v44);

  outlined release of Locale((uint64_t)&v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of String.LocalizationValue((uint64_t)&v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id result = (id)swift_bridgeObjectRelease();
  *unint64_t v47 = v61;
  return result;
}

uint64_t specialized AttributedString.MarkdownSourcePosition.calculateOffsets<A>(within:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = String.utf8CString.getter();
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v8 = self;
  long long v29 = 0u;
  *(_OWORD *)uint64_t v30 = 0u;
  BOOL v24 = 1;
  *(int64x2_t *)&v30[16] = vdupq_n_s64(1uLL);
  objc_msgSend(v8, sel_calculateOffsetsForLine_column_inString_size_withExistingOffsets_, v3, v4, v6, v7, &v29);
  uint64_t v9 = 0;
  if ((void)v25 == 0x7FFFFFFFFFFFFFFFLL
    || *((void *)&v25 + 1) == 0x7FFFFFFFFFFFFFFFLL
    || v26 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v10 = v7;
    uint64_t v11 = v6;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    if ((void)v27 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v19 = v1[2];
      uint64_t v20 = v1[3];
      long long v29 = v25;
      *(void *)uint64_t v30 = v26;
      *(_OWORD *)&v30[8] = v27;
      *(void *)&v30[24] = v28;
      objc_msgSend(v8, (SEL)&selRef__downloadTaskWithURL_delegate_completionHandler_ + 6, v19, v20, v11, v10, &v29);
      BOOL v24 = (void)v27 == 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v12 = *((void *)&v25 + 1);
      uint64_t v9 = v25;
      uint64_t v13 = v26;
      uint64_t v14 = v27;
      uint64_t v16 = *((void *)&v25 + 1);
      uint64_t v15 = v25;
      uint64_t v17 = v26;
      uint64_t v18 = v27;
    }
  }
  uint64_t v21 = v12;
  uint64_t v22 = v13;
  uint64_t result = swift_release();
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v21;
  *(void *)(a1 + 16) = v22;
  *(void *)(a1 + 24) = v14;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = v16;
  *(void *)(a1 + 48) = v17;
  *(void *)(a1 + 56) = v18;
  *(unsigned char *)(a1 + 64) = v24;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(Swift::String *a1, uint64_t a2, NSDecimal **a3)
{
  uint64_t v5 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0);
  MEMORY[0x1F4188790](v5 - 8);
  int64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *a3;
  Swift::String v10 = *a1;
  String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.locale(_:)(&v10._countAndFlagsBits, (uint64_t)v7);
  Swift::String v10 = String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.format(_:)(v8);
  outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v7, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
  return String.init<A>(_:)();
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t *a3@<X8>)
{
  memcpy(__dst, a2, sizeof(__dst));
  uint64_t result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, __dst);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t specialized static InflectionConcept.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)a2;
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0)
    {
      outlined copy of InflectionConcept();
      outlined copy of InflectionConcept();
      char v5 = specialized static Array<A>.== infix(_:_:)(v2, v3);
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  if ((*(unsigned char *)(a2 + 16) & 1) == 0)
  {
LABEL_9:
    outlined copy of InflectionConcept();
    outlined copy of InflectionConcept();
    char v5 = 0;
    goto LABEL_13;
  }
  if (v2 == v3 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  outlined copy of InflectionConcept();
  outlined copy of InflectionConcept();
LABEL_13:
  outlined consume of InflectionConcept();
  outlined consume of InflectionConcept();
  return v5 & 1;
}

uint64_t specialized static LocalizedStringResource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 72);
  long long v19 = *(_OWORD *)(a1 + 80);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  long long v20 = *(_OWORD *)(a2 + 56);
  long long v21 = *(_OWORD *)(a1 + 56);
  uint64_t v16 = *(void *)(a2 + 72);
  long long v17 = *(_OWORD *)(a2 + 80);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (v11 = _stringCompareWithSmolCheck(_:_:expecting:)(), unsigned __int8 v12 = 0, (v11 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (specialized static Array<A>.== infix(_:_:)(v2))
    {
      if (v4 == v7 && v3 == v9)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unsigned __int8 v12 = 0;
        if ((v14 & 1) == 0) {
          return v12 & 1;
        }
      }
      if (v5)
      {
        if (v10)
        {
          if (v6 != v8 || v5 != v10)
          {
            char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
            unsigned __int8 v12 = 0;
            if ((v15 & 1) == 0) {
              return v12 & 1;
            }
          }
          goto LABEL_19;
        }
      }
      else if (!v10)
      {
LABEL_19:
        *(_OWORD *)uint64_t v23 = v21;
        *(_OWORD *)uint64_t v22 = v20;
        if (specialized static Locale.== infix(_:_:)((uint64_t)v23, (uint64_t)v22))
        {
          *(void *)uint64_t v23 = v18;
          *(_OWORD *)&v23[8] = v19;
          v22[0] = v16;
          *(_OWORD *)&v22[1] = v17;
          unsigned __int8 v12 = specialized static URL.== infix(_:_:)((uint64_t)v23, v22);
          return v12 & 1;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    unsigned __int8 v12 = 0;
  }
  return v12 & 1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v15;
    uint64_t v8 = a1 + 32;
    do
    {
      specialized String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)((uint64_t *)v14, (uint64_t)v12, 0, a2, a3);
      outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v12[0], v12[1], v13);
      uint64_t v15 = v4;
      unint64_t v10 = *(void *)(v4 + 16);
      unint64_t v9 = *(void *)(v4 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        uint64_t v4 = v15;
      }
      *(void *)(v4 + 16) = v10 + 1;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v14, v4 + 40 * v10 + 32);
      v8 += 120;
      --v3;
    }
    while (v3);
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys);
  }
  return result;
}

uint64_t sub_181DE1F5C()
{
  return 24;
}

__n128 sub_181DE1F68(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for implicit closure #1 in String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:format:)()
{
  return swift_getAtKeyPath();
}

unint64_t lazy protocol witness table accessor for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys;
  if (!lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [TermOfAddress] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TermOfAddress]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys);
  }
  return result;
}

uint64_t outlined release of AttributedString.LocalizationOptions(uint64_t a1)
{
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg506_sSS10d3E17ef101V23_formatAttributedString_17preparedArguments7options5scope0D13Configuration6localeAA0eF0VSS_SayAC14gh51VGAK0B7OptionsVxmSo12NSDictionaryCSgAA6LocaleVtAA14l11ScopeRzlFs7ij17_p6vararg_AM01_R5m9OSg11attrO44InfotAMXEfU_AA0R6ScopesO0A10AttributesV_TGm5AF6LocaleVTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v18;
    uint64_t v8 = a1 + 32;
    do
    {
      specialized String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)(v16, (char *)v17 + 8, 1, a2, a3);
      uint64_t v18 = v4;
      unint64_t v10 = *(void *)(v4 + 16);
      unint64_t v9 = *(void *)(v4 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        uint64_t v4 = v18;
      }
      *(void *)(v4 + 16) = v10 + 1;
      char v11 = (_OWORD *)(v4 + (v10 << 6));
      long long v12 = v16[0];
      long long v13 = v16[1];
      long long v14 = v17[0];
      *(_OWORD *)((char *)v11 + 73) = *(_OWORD *)((char *)v17 + 9);
      v11[3] = v13;
      v11[4] = v14;
      v11[2] = v12;
      v8 += 120;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t partial apply for specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(Swift::String *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (NSDecimal **)(v1 + ((*(void *)(v3 + 64) + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL));

  return specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, v1 + v4, v5);
}

uint64_t partial apply for specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + v4;
  uint64_t v6 = v1 + ((*(void *)(v3 + 64) + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = *(_DWORD *)(v6 + 16);
  uint64_t v8 = *(void *)v6;
  uint64_t v9 = *(void *)(v6 + 8);

  return specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, v5, v8, v9, v7);
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  double v5;
  uint64_t vars8;

  uint64_t v3 = *(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(double *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, v1 + v4, v5);
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  uint64_t v3 = *(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, v1 + v4, v5);
}

{
  uint64_t v1;
  long long v2;
  long long v3;
  long long v4;
  _OWORD v6[6];
  __int16 v7;

  uint64_t v2 = *(_OWORD *)(v1 + 96);
  v6[4] = *(_OWORD *)(v1 + 80);
  v6[5] = v2;
  int v7 = *(_WORD *)(v1 + 112);
  uint64_t v3 = *(_OWORD *)(v1 + 32);
  v6[0] = *(_OWORD *)(v1 + 16);
  v6[1] = v3;
  unint64_t v4 = *(_OWORD *)(v1 + 64);
  v6[2] = *(_OWORD *)(v1 + 48);
  v6[3] = v4;
  return specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, (uint64_t)v6, *(double *)(v1 + 120), *(double *)(v1 + 128)) & 1;
}

{
  uint64_t v1;
  long long v2;
  long long v3;
  long long v4;
  long long v6[6];
  _OWORD v7[2];

  uint64_t v2 = *(_OWORD *)(v1 + 96);
  v6[4] = *(_OWORD *)(v1 + 80);
  v6[5] = v2;
  v7[0] = *(_OWORD *)(v1 + 112);
  *(_OWORD *)((char *)v7 + 10) = *(_OWORD *)(v1 + 122);
  uint64_t v3 = *(_OWORD *)(v1 + 32);
  v6[0] = *(_OWORD *)(v1 + 16);
  v6[1] = v3;
  unint64_t v4 = *(_OWORD *)(v1 + 64);
  v6[2] = *(_OWORD *)(v1 + 48);
  v6[3] = v4;
  return specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(a1, v6, *(double *)(v1 + 144)) & 1;
}

uint64_t partial apply for specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0)
                 - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];

  return specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(v5, v6, v4);
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars8;

  uint64_t v3 = *(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0) - 8);
  uint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  int v7 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(v5, v6, v1 + v4, v7);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  long long v4;
  long long v5;
  long long v6;
  _OWORD v8[6];
  __int16 v9;

  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *(_OWORD *)(v1 + 96);
  v8[4] = *(_OWORD *)(v1 + 80);
  v8[5] = v4;
  uint64_t v9 = *(_WORD *)(v1 + 112);
  uint64_t v5 = *(_OWORD *)(v1 + 32);
  v8[0] = *(_OWORD *)(v1 + 16);
  v8[1] = v5;
  uint64_t v6 = *(_OWORD *)(v1 + 64);
  v8[2] = *(_OWORD *)(v1 + 48);
  v8[3] = v6;
  return specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(v3, v2, (uint64_t)v8, *(double *)(v1 + 120), *(double *)(v1 + 128));
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  long long v4;
  long long v5;
  long long v6;
  long long v8[6];
  _OWORD v9[2];

  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *(_OWORD *)(v1 + 96);
  v8[4] = *(_OWORD *)(v1 + 80);
  v8[5] = v4;
  v9[0] = *(_OWORD *)(v1 + 112);
  *(_OWORD *)((char *)v9 + 10) = *(_OWORD *)(v1 + 122);
  uint64_t v5 = *(_OWORD *)(v1 + 32);
  v8[0] = *(_OWORD *)(v1 + 16);
  v8[1] = v5;
  uint64_t v6 = *(_OWORD *)(v1 + 64);
  v8[2] = *(_OWORD *)(v1 + 48);
  v8[3] = v6;
  return specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(v3, v2, v8, *(double *)(v1 + 144));
}

uint64_t objectdestroy_6Tm()
{
  uint64_t v1 = *(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v6 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
LABEL_6:
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v6) + 36);
    uint64_t v8 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_10;
    }
    swift_unknownObjectRelease();
    uint64_t v6 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency)
              + 40);
  uint64_t v8 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  uint64_t v9 = v0 + v3 + v7 + *(int *)(v8 + 36);
  uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
LABEL_10:

  return MEMORY[0x1F4186498](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t objectdestroy_15Tm()
{
  uint64_t v1 = *(void *)(type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v6 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
LABEL_6:
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v6) + 36);
    uint64_t v8 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_10;
    }
    swift_unknownObjectRelease();
    uint64_t v6 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency)
              + 40);
  uint64_t v8 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  uint64_t v9 = v0 + v3 + v7 + *(int *)(v8 + 36);
  uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
LABEL_10:

  return MEMORY[0x1F4186498](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_181DE2B58()
{
  return objectdestroy_18Tm(136);
}

uint64_t sub_181DE2BB0()
{
  return objectdestroy_18Tm(136);
}

uint64_t sub_181DE2C04()
{
  return objectdestroy_18Tm(114);
}

uint64_t objectdestroy_18Tm(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v1, a1, 7);
}

uint64_t sub_181DE2C60()
{
  return objectdestroy_27Tm(152);
}

uint64_t sub_181DE2CC0()
{
  return objectdestroy_27Tm(152);
}

uint64_t sub_181DE2D1C()
{
  return objectdestroy_27Tm(138);
}

uint64_t objectdestroy_27Tm(uint64_t a1)
{
  outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 112), *(void *)(v1 + 120), *(void *)(v1 + 128), *(_WORD *)(v1 + 136));

  return MEMORY[0x1F4186498](v1, a1, 7);
}

uint64_t lazy protocol witness table accessor for type NSNumber and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSMorphologyPronoun(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id partial apply for closure #1 in AttributedString.init<A>(localized:options:including:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in AttributedString.init<A>(localized:options:including:)(a1, *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t outlined retain of AttributedString.LocalizationOptions(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber and conformance String.LocalizationOptions._PluralizationNumber()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber and conformance String.LocalizationOptions._PluralizationNumber;
  if (!lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber and conformance String.LocalizationOptions._PluralizationNumber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationOptions._PluralizationNumber and conformance String.LocalizationOptions._PluralizationNumber);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String.LocalizationValue.StringInterpolation and conformance String.LocalizationValue.StringInterpolation()
{
  unint64_t result = lazy protocol witness table cache variable for type String.LocalizationValue.StringInterpolation and conformance String.LocalizationValue.StringInterpolation;
  if (!lazy protocol witness table cache variable for type String.LocalizationValue.StringInterpolation and conformance String.LocalizationValue.StringInterpolation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.LocalizationValue.StringInterpolation and conformance String.LocalizationValue.StringInterpolation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InflectionConcept and conformance InflectionConcept()
{
  unint64_t result = lazy protocol witness table cache variable for type InflectionConcept and conformance InflectionConcept;
  if (!lazy protocol witness table cache variable for type InflectionConcept and conformance InflectionConcept)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InflectionConcept and conformance InflectionConcept);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber and conformance AttributedString.LocalizationOptions._PluralizationNumber()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber and conformance AttributedString.LocalizationOptions._PluralizationNumber;
  if (!lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber and conformance AttributedString.LocalizationOptions._PluralizationNumber)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.LocalizationOptions._PluralizationNumber and conformance AttributedString.LocalizationOptions._PluralizationNumber);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.FormattingOptions and conformance AttributedString.FormattingOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions;
  if (!lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions);
  }
  return result;
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Int()
{
  return MEMORY[0x1E4FBC240];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Int8()
{
  return MEMORY[0x1E4FBC1C0];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in UInt()
{
  return MEMORY[0x1E4FBC598];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in UInt8()
{
  return MEMORY[0x1E4FBC530];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Float()
{
  return MEMORY[0x1E4FBB4D0];
}

uint64_t associated type witness table accessor for _FormatSpecifiable._Arg : CVarArg in Double()
{
  return MEMORY[0x1E4FBB460];
}

unint64_t instantiation function for generic protocol witness table for CGFloat(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for String.LocalizationOptions()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for String.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for String.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for String.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for String.LocalizationOptions(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 41)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for String.LocalizationOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for String.LocalizationOptions()
{
  return &type metadata for String.LocalizationOptions;
}

ValueMetadata *type metadata accessor for String.LocalizationOptions._PluralizationNumber()
{
  return &type metadata for String.LocalizationOptions._PluralizationNumber;
}

ValueMetadata *type metadata accessor for String.LocalizationValue.Placeholder()
{
  return &type metadata for String.LocalizationValue.Placeholder;
}

void *assignWithCopy for String.LocalizationValue(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for String.LocalizationValue(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined copy of InflectionConcept()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for InflectionConcept()
{
  return outlined consume of InflectionConcept();
}

uint64_t outlined consume of InflectionConcept()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for InflectionConcept(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of InflectionConcept();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for InflectionConcept(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of InflectionConcept();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of InflectionConcept();
  return a1;
}

uint64_t assignWithTake for InflectionConcept(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of InflectionConcept();
  return a1;
}

ValueMetadata *type metadata accessor for InflectionConcept()
{
  return &type metadata for InflectionConcept;
}

uint64_t destroy for AttributedString.LocalizationOptions()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttributedString.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v4 = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for AttributedString.LocalizationOptions(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.LocalizationOptions(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 57)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.LocalizationOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.LocalizationOptions()
{
  return &type metadata for AttributedString.LocalizationOptions;
}

uint64_t getEnumTagSinglePayload for AttributedString.LocalizationOptions._PluralizationNumber(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AttributedString.LocalizationOptions._PluralizationNumber(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for AttributedString.LocalizationOptions._PluralizationNumber(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for AttributedString.LocalizationOptions._PluralizationNumber(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.LocalizationOptions._PluralizationNumber()
{
  return &type metadata for AttributedString.LocalizationOptions._PluralizationNumber;
}

ValueMetadata *type metadata accessor for AttributedString.FormattingOptions()
{
  return &type metadata for AttributedString.FormattingOptions;
}

ValueMetadata *type metadata accessor for AttributedString.InterpolationOptions()
{
  return &type metadata for AttributedString.InterpolationOptions;
}

uint64_t dispatch thunk of _FormatSpecifiable._arg.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

void *assignWithCopy for LocalizedStringResource(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[8];
  a1[7] = a2[7];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[8] = v4;
  char v5 = (void *)a2[9];
  uint64_t v6 = (void *)a1[9];
  a1[9] = v5;
  id v7 = v5;

  a1[10] = a2[10];
  swift_retain();
  swift_release();
  a1[11] = a2[11];
  swift_retain();
  swift_release();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LocalizedStringResource(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_unknownObjectRelease();
  char v5 = *(void **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);

  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined copy of LocalizedStringResource.BundleDescription(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 1)
  {
    char v5 = (void *)result;
    swift_retain();
    id v6 = v5;
    return swift_retain();
  }
  return result;
}

void *destroy for LocalizedStringResource.BundleDescription(uint64_t a1)
{
  return outlined consume of LocalizedStringResource.BundleDescription(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for LocalizedStringResource.BundleDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of LocalizedStringResource.BundleDescription(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for LocalizedStringResource.BundleDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of LocalizedStringResource.BundleDescription(*(void *)a2, v4, v5, v6);
  id v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of LocalizedStringResource.BundleDescription(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for LocalizedStringResource.BundleDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of LocalizedStringResource.BundleDescription(v5, v7, v6, v8);
  return a1;
}

uint64_t dispatch thunk of CustomLocalizedStringResourceConvertible.localizedStringResource.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void *type metadata accessor for AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  return &unk_1ECA37870;
}

void *type metadata accessor for AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  return &unk_1ECA37920;
}

void *type metadata accessor for AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  return &unk_1ECA37900;
}

void *type metadata accessor for InflectionConcept.CodingKeys()
{
  return &unk_1ECA39F90;
}

void *type metadata accessor for InflectionConcept.TermsOfAddressCodingKeys()
{
  return &unk_1ECA3A020;
}

void *type metadata accessor for InflectionConcept.LocalizedPhraseCodingKeys()
{
  return &unk_1ECA3A0B0;
}

unsigned char *storeEnumTagSinglePayload for String.LocalizationValue.Placeholder(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181DE4278);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.CodingKeys()
{
  return &unk_1ECA4CEB0;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.IntCodingKeys()
{
  return &unk_1ECA4CF40;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.UintCodingKeys()
{
  return &unk_1ECA4CF60;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.FloatCodingKeys()
{
  return &unk_1ECA4CF80;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.DoubleCodingKeys()
{
  return &unk_1ECA4CFA0;
}

void *type metadata accessor for String.LocalizationValue.Placeholder.ObjectCodingKeys()
{
  return &unk_1ECA4CFC0;
}

void *type metadata accessor for String.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  return &unk_1ECA4EED0;
}

unsigned char *storeEnumTagSinglePayload for AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181DE43D4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys()
{
  return &unk_1ECA4EF80;
}

void *type metadata accessor for String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys()
{
  return &unk_1ECA4EF60;
}

uint64_t specialized String.LocalizationValue.Placeholder.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7630441 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1953393013 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74616F6C66 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C62756F64 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7463656A626FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized InflectionConcept.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x41664F736D726574 && a2 == 0xEE00737365726464;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657A696C61636F6CLL && a2 == 0xEF65736172685064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized String.LocalizationOptions._PluralizationNumber.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6369666963657073 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized String.LocalizationValue.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7955819 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E656D75677261 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized LocalizedStringResource.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7955819 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x56746C7561666564 && a2 == 0xEC00000065756C61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C626174 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x5255656C646E7562 && a2 == 0xE90000000000004CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001823B0830)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_181DE5968()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 128, 7);
}

void partial apply for specialized closure #2 in PropertyListDecoder._decode<A>(_:from:format:)(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  specialized closure #2 in PropertyListDecoder._decode<A>(_:from:format:)(a1, a2, *(void *)(v3 + 16), *(void (**)(unint64_t *__return_ptr, void *))(v3 + 24), *(void **)(v3 + 40), a3);
}

void partial apply for specialized closure #3 in PropertyListDecoder._decode<A>(_:from:format:)(unint64_t a1, unint64_t a2)
{
  specialized closure #3 in PropertyListDecoder._decode<A>(_:from:format:)(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void (**)(long long *))(v2 + 32));
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleVSgWOg(uint64_t a1)
{
  if ((*(void *)(a1 + 64) >> 1) > 0x80000000) {
    return -(*(void *)(a1 + 64) >> 1);
  }
  else {
    return 0;
  }
}

uint64_t outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int16 a16)
{
  if ((a16 & 0xFEF8) != 0
    || (a9 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL
    || ((a13 | a11 | a15) & 0xF000000000000007) != 0)
  {
    return outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  return result;
}

uint64_t outlined retain of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))
{
  __int16 v4 = *(_WORD *)(a1 + 120);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), v4);
  return a1;
}

uint64_t outlined consume of Date.IntervalFormatStyle?(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t outlined retain of Date.IntervalFormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t _s10Foundation14FormatterCacheV9formatter3for7creatorq_x_q_yKXEtKFq_SgSDyxq_GzYbXEfU_AA015ICUDateIntervalB0C9SignatureV_AJSgTG5TA_0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  memcpy(__dst, *(const void **)(v2 + 16), sizeof(__dst));
  uint64_t result = specialized closure #1 in FormatterCache.formatter(for:creator:)(a1, __dst);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t outlined retain of LocalePreferences?(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined release of (Date, String.LocalizationValue.FormatArgument.DateArgumentFormatStyle)(uint64_t a1)
{
  return a1;
}

uint64_t _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in String.LocalizationValue._formatAttributedString<A>(_:preparedArguments:options:scope:formatConfiguration:locale:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 48);
  long long v6 = *(_OWORD *)(v1 + 32);
  return String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)(a1, (uint64_t)(a1 + 5), 1, (uint64_t *)&v6, v4, v2, v3);
}

uint64_t type metadata accessor for _FoundationPlusScope()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #3 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(uint64_t *a1)
{
  return closure #3 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned char *)(v1 + 56));
}

uint64_t partial apply for closure #2 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(uint64_t *a1)
{
  return closure #2 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned char *)(v1 + 56), *(void *)(v1 + 64), *(unsigned char *)(v1 + 72));
}

uint64_t _s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 136);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 - 1) & ~(((int)v1 - 1) >> 31);
}

uint64_t sub_181DE5EF0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)()
{
  return closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(v0);
}

uint64_t partial apply for closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t, char *), uint64_t a5)
{
  return closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_181DE5F38()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(a1, a2, a3, a4, a5, *(uint64_t (**)(void))(v5 + 16));
}

uint64_t partial apply for closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t, char *), uint64_t a4)
{
  return closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, a3, a4, v4);
}

uint64_t sub_181DE5F58()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t sub_181DE5F70()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, void (*a3)(id, uint64_t, uint64_t, char *), uint64_t a4)
{
  return closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, a3, a4, *(uint64_t **)(v4 + 16));
}

uint64_t sub_181DE5F88()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t sub_181DE5FA0()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(void *a1, uint64_t a2, uint64_t a3)
{
  return closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_181DE5FB8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ()(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_181DE5FD0()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2)
{
  return closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_181DE5FE8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool)(uint64_t a1, uint64_t a2)
{
  return thunk for @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_181DE6000()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

double partial apply for closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, a3, *(void **)(v4 + 16), a4);
}

uint64_t sub_181DE6018()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_181DE6030()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2)
{
  return closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_181DE6048()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned _NSRange) -> (@owned String)(uint64_t a1, uint64_t a2)
{
  return thunk for @callee_guaranteed (@unowned _NSRange) -> (@owned String)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_181DE6060()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, a3, a4, *(void **)(v4 + 16));
}

uint64_t sub_181DE60A0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t sub_181DE60B8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, a2, a3, *(uint64_t **)(v3 + 16), *(void **)(v3 + 24));
}

uint64_t sub_181DE60F8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return thunk for @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ()(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

double partial apply for closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_181DE611C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Any) -> (@out Any?)(uint64_t a1)
{
  return thunk for @callee_guaranteed (@in_guaranteed Any) -> (@out Any?)(a1, *(uint64_t (**)(void))(v1 + 16));
}

double _s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 2;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  return result;
}

uint64_t partial apply for closure #1 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(a1, *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(unsigned char *)(v2 + 56), a2);
}

uint64_t partial apply for specialized closure #3 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(uint64_t *a1)
{
  return specialized closure #3 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

uint64_t partial apply for specialized closure #2 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(uint64_t *a1)
{
  return specialized closure #2 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40), *(unsigned char *)(v1 + 41));
}

uint64_t sub_181DE61C8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181DE61D8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181DE61E8()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181DE61F8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181DE6208()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181DE6218()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181DE6228()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181DE6238()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181DE6248()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181DE6258()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181DE6268()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181DE6278()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181DE6288()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181DE6298()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t objectdestroy_224Tm()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181DE62EC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for specialized closure #1 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), a2);
}

uint64_t outlined init with take of AttributedString.LocalizationOptions._PluralizationNumber(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a1 + 8);
  *(void *)a2 = v2;
  return a2;
}

uint64_t sub_181DE6334()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 <= 0xFD) {
    outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup(*(void *)(v0 + 16), *(void *)(v0 + 24), v1 & 1);
  }

  return MEMORY[0x1F4186498](v0, 33, 7);
}

ValueMetadata *type metadata accessor for String.LocalizationValue.AttributedStringCache()
{
  return &type metadata for String.LocalizationValue.AttributedStringCache;
}

uint64_t type metadata completion function for _FoundationPlusScope()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _FoundationPlusScope(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = ~v5;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18uLL)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v5 + 16) & v6));
    swift_retain();
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5) & v6, ((unint64_t)a2 + v5) & v6);
  }
  return v3;
}

uint64_t destroy for _FoundationPlusScope(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for _FoundationPlusScope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((*(unsigned __int8 *)(v4 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithCopy for _FoundationPlusScope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((*(unsigned __int8 *)(v4 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t initializeWithTake for _FoundationPlusScope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for _FoundationPlusScope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((*(unsigned __int8 *)(v4 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _FoundationPlusScope(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1
      }
                                                                      + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _FoundationPlusScope(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x181DE6A4CLL);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8] & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

uint64_t TermOfAddress.isSupportedInLanguage(_:)(long long *a1)
{
  long long v2 = a1[3];
  long long v56 = a1[2];
  long long v57 = v2;
  long long v3 = a1[5];
  long long v58 = a1[4];
  long long v59 = v3;
  long long v4 = a1[1];
  long long v54 = *a1;
  long long v55 = v4;
  uint64_t v5 = v1[12];
  if ((unint64_t)(v5 - 1) < 3) {
    goto LABEL_2;
  }
  if (!v5)
  {
    long long v7 = v54;
    long long v8 = v55;
    outlined retain of Locale.Language((uint64_t *)&v54, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    uint64_t v10 = *((void *)&v7 + 1);
    uint64_t v9 = v7;
    unint64_t object = (void *)*((void *)&v8 + 1);
    uint64_t countAndFlagsBits = v8;
    if (!*((void *)&v7 + 1))
    {
      uint64_t v13 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v54);
      uint64_t v10 = v14;
      if (v14)
      {
        uint64_t v9 = v13;
        Swift::String v15 = String.lowercased()();
        uint64_t countAndFlagsBits = v15._countAndFlagsBits;
        unint64_t object = v15._object;
      }
      else
      {
        uint64_t v9 = 0;
        uint64_t countAndFlagsBits = 0;
        unint64_t object = 0;
      }
    }
    outlined copy of Locale.LanguageCode?(v7, *((uint64_t *)&v7 + 1));
    outlined retain of Locale.Language((uint64_t *)&v54, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    Swift::String v33 = String.lowercased()();
    if (v10)
    {
      if (countAndFlagsBits == v33._countAndFlagsBits && object == v33._object) {
        char v6 = 1;
      }
      else {
        char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Locale.LanguageCode?(v9, v10);
      return v6 & 1;
    }
    outlined consume of Locale.LanguageCode?(v9, 0);
    uint64_t v34 = 28261;
    uint64_t v35 = 0xE200000000000000;
LABEL_31:
    outlined consume of Locale.LanguageCode?(v34, v35);
    char v6 = 0;
    return v6 & 1;
  }
  uint64_t v47 = v1[1];
  uint64_t v48 = *v1;
  uint64_t v16 = v1[2];
  uint64_t v17 = v1[3];
  uint64_t v18 = v1[4];
  uint64_t v19 = v1[5];
  uint64_t v21 = v1[6];
  uint64_t v20 = v1[7];
  uint64_t v23 = v1[8];
  uint64_t v22 = v1[9];
  uint64_t v25 = v1[10];
  uint64_t v24 = v1[11];
  v60[0] = v48;
  v60[1] = v47;
  _OWORD v60[2] = v16;
  v60[3] = v17;
  v60[4] = v18;
  v60[5] = v19;
  v60[6] = v21;
  v60[7] = v20;
  v60[8] = v23;
  v60[9] = v22;
  v60[10] = v25;
  v60[11] = v24;
  outlined copy of Locale.LanguageCode?(v48, v47);
  uint64_t v49 = v19;
  uint64_t v50 = v18;
  uint64_t v26 = v19;
  uint64_t v27 = v16;
  outlined copy of Locale.LanguageCode?(v18, v26);
  uint64_t v28 = v47;
  uint64_t v29 = v48;
  outlined copy of Locale.LanguageCode?(v23, v22);
  uint64_t v30 = v48;
  uint64_t v53 = v47;
  uint64_t v46 = v27;
  uint64_t v51 = (void *)v17;
  if (!v47)
  {
    outlined copy of Locale.LanguageCode?(v48, 0);
    outlined copy of Locale.LanguageCode?(v50, v49);
    outlined copy of Locale.LanguageCode?(v23, v22);
    uint64_t v52 = specialized _withFixedCharBuffer(size:_:)(257, v60);
    uint64_t v53 = v31;
    outlined consume of Locale.LanguageCode?(v48, 0);
    outlined consume of Locale.LanguageCode?(v50, v49);
    outlined consume of Locale.LanguageCode?(v23, v22);
    if (v53)
    {
      uint64_t v30 = v52;
      Swift::String v32 = String.lowercased()();
      uint64_t v46 = v32._countAndFlagsBits;
      uint64_t v51 = v32._object;
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v53 = 0;
      uint64_t v46 = 0;
      uint64_t v51 = 0;
    }
    uint64_t v28 = 0;
    uint64_t v29 = v48;
  }
  outlined copy of Locale.LanguageCode?(v29, v28);
  outlined consume of Locale.LanguageCode?(v29, v28);
  outlined consume of Locale.LanguageCode?(v50, v49);
  outlined consume of Locale.LanguageCode?(v23, v22);
  long long v36 = v54;
  long long v37 = v55;
  outlined retain of Locale.Language((uint64_t *)&v54, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
  uint64_t v39 = *((void *)&v36 + 1);
  uint64_t v38 = v36;
  uint64_t v41 = (void *)*((void *)&v37 + 1);
  uint64_t v40 = v37;
  if (!*((void *)&v36 + 1))
  {
    uint64_t v42 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v54);
    uint64_t v39 = v43;
    if (v43)
    {
      uint64_t v38 = v42;
      Swift::String v44 = String.lowercased()();
      uint64_t v40 = v44._countAndFlagsBits;
      uint64_t v41 = v44._object;
    }
    else
    {
      uint64_t v38 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
    }
  }
  outlined copy of Locale.LanguageCode?(v36, *((uint64_t *)&v36 + 1));
  outlined retain of Locale.Language((uint64_t *)&v54, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  if (!v53)
  {
    if (!v39)
    {
LABEL_2:
      char v6 = 1;
      return v6 & 1;
    }
    goto LABEL_30;
  }
  if (!v39)
  {
LABEL_30:
    outlined consume of Locale.LanguageCode?(v30, v53);
    uint64_t v34 = v38;
    uint64_t v35 = v39;
    goto LABEL_31;
  }
  if (v46 == v40 && v51 == v41) {
    char v6 = 1;
  }
  else {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  outlined copy of Locale.LanguageCode?(v30, v53);
  outlined consume of Locale.LanguageCode?(v38, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Locale.LanguageCode?(v30, v53);
  return v6 & 1;
}

void TermOfAddress.morphology(for:)(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = a1[3];
  long long v64 = a1[2];
  long long v65 = v4;
  long long v5 = a1[5];
  long long v66 = a1[4];
  long long v67 = v5;
  long long v6 = a1[1];
  long long v62 = *a1;
  long long v63 = v6;
  uint64_t v8 = *v2;
  uint64_t v7 = v2[1];
  uint64_t v9 = v2[2];
  uint64_t v10 = v2[3];
  uint64_t v11 = v2[4];
  uint64_t v12 = v2[5];
  uint64_t v14 = v2[6];
  uint64_t v13 = v2[7];
  uint64_t v15 = v2[8];
  uint64_t v16 = v2[9];
  uint64_t v17 = v2[10];
  uint64_t v18 = v2[11];
  unint64_t v19 = v2[12];
  char v20 = 1;
  uint64_t v21 = 3586;
  switch(v19)
  {
    case 0uLL:
      goto LABEL_5;
    case 1uLL:
      uint64_t v21 = 3584;
      goto LABEL_5;
    case 2uLL:
      uint64_t v21 = 3585;
      goto LABEL_5;
    case 3uLL:
      self;
      id v31 = +[NSMorphology _userMorphologyWithOverrides]();
      if (v31)
      {
        Swift::String v32 = v31;
        memset(v61, 0, 21);
        specialized static Morphology._conditionallyBridgeFromObjectiveC(_:result:)(v31, (uint64_t)v61);

        char v34 = BYTE2(v61[0]);
        uint64_t v33 = v61[1];
        unint64_t v35 = LODWORD(v61[2]) | ((unint64_t)BYTE4(v61[2]) << 32);
        if (v61[1])
        {
          v36.i64[0] = 0xFFFFFFFFFFLL;
          v36.i64[1] = 0xFFFFFFFFFFLL;
          uint64x2_t v37 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v35), v36);
          int16x8_t v38 = (int16x8_t)vshlq_u64(v37, (uint64x2_t)xmmword_182108550);
          *(_WORD *)a2 = v61[0];
          *(unsigned char *)(a2 + 2) = v34;
          *(void *)(a2 + 8) = v33;
          *(unsigned char *)(a2 + 16) = v35;
          *(int32x2_t *)v37.i8 = vmovn_s64((int64x2_t)vshlq_u64(v37, (uint64x2_t)xmmword_182108540));
          *(int32x2_t *)v38.i8 = vmovn_s64((int64x2_t)v38);
          v38.i16[1] = v38.i16[2];
          v38.i16[2] = v37.i16[0];
          v38.i16[3] = v37.i16[2];
          *(_DWORD *)(a2 + 17) = vmovn_s16(v38).u32[0];
        }
        else
        {
          *(void *)a2 = v61[0];
          *(void *)(a2 + 8) = 0;
          *(_DWORD *)(a2 + 16) = v35;
          *(unsigned char *)(a2 + 20) = BYTE4(v35);
        }
      }
      else
      {
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 13) = 0;
      }
      return;
    default:
      char v20 = 0;
      uint64_t v21 = 3587;
LABEL_5:
      char v58 = v20;
      uint64_t v47 = v10;
      uint64_t v48 = v9;
      uint64_t v49 = v7;
      uint64_t v50 = v13;
      uint64_t v59 = v21;
      uint64_t v60 = a2;
      uint64_t v51 = v14;
      uint64_t v52 = v12;
      uint64_t v53 = v11;
      uint64_t v54 = v15;
      uint64_t v55 = v18;
      uint64_t v56 = v17;
      uint64_t v57 = v16;
      long long v22 = v62;
      long long v23 = v63;
      outlined retain of Locale.Language((uint64_t *)&v62, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
      uint64_t v25 = *((void *)&v22 + 1);
      uint64_t v24 = v22;
      unint64_t object = (void *)*((void *)&v23 + 1);
      uint64_t countAndFlagsBits = v23;
      if (!*((void *)&v22 + 1))
      {
        uint64_t v28 = specialized _withFixedCharBuffer(size:_:)(257, (uint64_t *)&v62);
        uint64_t v25 = v29;
        if (v29)
        {
          uint64_t v24 = v28;
          Swift::String v30 = String.lowercased()();
          uint64_t countAndFlagsBits = v30._countAndFlagsBits;
          unint64_t object = v30._object;
        }
        else
        {
          uint64_t v24 = 0;
          uint64_t countAndFlagsBits = 0;
          unint64_t object = 0;
        }
      }
      outlined copy of Locale.LanguageCode?(v22, *((uint64_t *)&v22 + 1));
      outlined retain of Locale.Language((uint64_t *)&v62, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
      Swift::String v39 = String.lowercased()();
      if (!v25)
      {
        outlined consume of Locale.LanguageCode?(v24, 0);
        outlined consume of Locale.LanguageCode?(28261, 0xE200000000000000);
        goto LABEL_20;
      }
      if (countAndFlagsBits != v39._countAndFlagsBits || object != v39._object)
      {
        char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of Locale.LanguageCode?(v24, v25);
        if (v40) {
          goto LABEL_18;
        }
LABEL_20:
        if ((v58 & 1) == 0)
        {
          *(void *)uint64_t v60 = 0;
          *(void *)(v60 + 8) = 0;
          *(void *)(v60 + 13) = 0;
          return;
        }
        uint64_t v41 = 393216;
        goto LABEL_33;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Locale.LanguageCode?(v24, v25);
LABEL_18:
      if (v19 < 3)
      {
        uint64_t v41 = qword_1821F8538[v19];
        goto LABEL_33;
      }
      outlined copy of TermOfAddress._TermOfAddress(v8, v49, v48, v47, v53, v52, v51, v50, v54, v57, v56, v55, v19);
      outlined consume of Locale.LanguageCode?(v8, v49);
      outlined consume of Locale.LanguageCode?(v53, v52);
      outlined consume of Locale.LanguageCode?(v54, v57);
      uint64_t v42 = *(void *)(v19 + 16);
      if (v42)
      {
        swift_bridgeObjectRetain();
        unint64_t v43 = v19 + 40;
        do
        {
          if (!*(unsigned char *)(v43 + 24))
          {
            String.lowercased()();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v44._uint64_t countAndFlagsBits = 31077;
            v44._unint64_t object = (void *)0xE200000000000000;
            Swift::Bool v45 = String.hasSuffix(_:)(v44);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v45)
            {
              swift_bridgeObjectRelease_n();
              uint64_t v41 = 0x20000;
              goto LABEL_33;
            }
          }
          v43 += 64;
          --v42;
        }
        while (v42);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v41 = 0;
LABEL_33:
      uint64_t v46 = MEMORY[0x1E4FBC868];
      *(void *)uint64_t v60 = v41 | v59;
      *(void *)(v60 + 8) = v46;
      *(unsigned char *)(v60 + 20) = 2;
      *(_DWORD *)(v60 + 16) = 33751822;
      return;
  }
}

Swift::Bool __swiftcall NSTermOfAddress.isSupportedInLanguage(_:)(Swift::String a1)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  LODWORD(v119) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v3 = swift_release();
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  if (Language > 0)
  {
    v107[Language] = 0;
    uint64_t v3 = MEMORY[0x185301F80](v107, 0);
    uint64_t v4 = v3;
  }
  uint64_t v104 = v5;
  MEMORY[0x1F4188790](v3);
  LODWORD(v119) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  uint64_t v7 = swift_release();
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if ((int)v119 <= 0 && Script > 0)
  {
    v83[Script] = 0;
    uint64_t v7 = MEMORY[0x185301F80](v83, 0);
    uint64_t v8 = v7;
  }
  uint64_t v105 = v9;
  MEMORY[0x1F4188790](v7);
  LODWORD(v119) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v11 = 0;
  if ((int)v119 > 0)
  {
    uint64_t v106 = 0;
    uint64_t v12 = v104;
  }
  else
  {
    uint64_t v106 = 0;
    uint64_t v12 = v104;
    if (Country > 0)
    {
      v83[Country] = 0;
      uint64_t v11 = MEMORY[0x185301F80](v83);
      uint64_t v106 = v13;
    }
  }
  swift_bridgeObjectRelease();
  if (v12)
  {
    uint64_t v14 = v4;
    Swift::String v15 = String.lowercased()();
    unint64_t object = v15._object;
    uint64_t countAndFlagsBits = v15._countAndFlagsBits;
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t object = 0;
    uint64_t countAndFlagsBits = 0;
  }
  uint64_t v16 = v8;
  uint64_t v17 = v106;
  if (v105)
  {
    uint64_t v119 = v8;
    uint64_t v120 = v105;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    Swift::String v18 = String._capitalized()();
    uint64_t v19 = v18._countAndFlagsBits;
    uint64_t v100 = v18._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17)
    {
LABEL_15:
      Swift::String v20 = String.uppercased()();
      unint64_t v98 = v20._object;
      uint64_t v99 = v20._countAndFlagsBits;
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v19 = 0;
    uint64_t v100 = 0;
    if (v106) {
      goto LABEL_15;
    }
  }
  uint64_t v11 = 0;
  unint64_t v98 = 0;
  uint64_t v99 = 0;
LABEL_18:
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSTermOfAddress);
  uint64_t v21 = self;
  id v22 = v1;
  id v23 = objc_msgSend(v21, sel_neutral);
  char v24 = static NSObject.== infix(_:_:)();

  uint64_t v103 = v16;
  uint64_t v92 = v14;
  if (v24)
  {
    uint64_t v25 = v19;
    uint64_t v26 = v11;
    uint64_t v27 = v14;
    uint64_t v28 = v22;
    uint64_t v29 = v104;

    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64x2_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    goto LABEL_57;
  }
  id v43 = objc_msgSend(v21, sel_feminine);
  char v44 = static NSObject.== infix(_:_:)();

  if (v44)
  {
    uint64_t v25 = v19;
    uint64_t v26 = v11;
    uint64_t v27 = v14;
    Swift::Bool v45 = v22;
    uint64_t v29 = v104;

    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64x2_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 1;
    goto LABEL_57;
  }
  id v46 = objc_msgSend(v21, sel_masculine);
  char v47 = static NSObject.== infix(_:_:)();

  if (v47)
  {
    uint64_t v25 = v19;
    uint64_t v26 = v11;
    uint64_t v27 = v14;
    uint64_t v48 = v22;
    uint64_t v29 = v104;

    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64x2_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 2;
    goto LABEL_57;
  }
  id v49 = objc_msgSend(v21, sel_currentUser);
  char v50 = static NSObject.== infix(_:_:)();

  if (v50)
  {
    uint64_t v25 = v19;
    uint64_t v26 = v11;
    uint64_t v27 = v14;
    uint64_t v51 = v22;
    uint64_t v29 = v104;

    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64x2_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 3;
    goto LABEL_57;
  }
  id v52 = objc_msgSend(v22, sel_languageIdentifier);
  id v89 = v22;
  if (v52)
  {
    uint64_t v53 = v52;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v52);

    MEMORY[0x1F4188790](v54);
    LODWORD(v119) = 0;
    String.utf8CString.getter();
    int v55 = uloc_getLanguage();
    swift_release();
    uint64_t v56 = 0;
    if ((int)v119 > 0)
    {
      uint64_t v95 = 0;
    }
    else
    {
      uint64_t v95 = 0;
      if (v55 > 0)
      {
        v83[v55] = 0;
        uint64_t v56 = MEMORY[0x185301F80](v83);
        uint64_t v95 = v57;
      }
    }
    uint64_t v93 = v56;
    MEMORY[0x1F4188790](v56);
    LODWORD(v119) = 0;
    String.utf8CString.getter();
    int v58 = uloc_getScript();
    uint64_t v59 = swift_release();
    uint64_t v94 = 0;
    if ((int)v119 > 0)
    {
      uint64_t v29 = v104;
      uint64_t v97 = 0;
    }
    else
    {
      uint64_t v29 = v104;
      uint64_t v97 = 0;
      if (v58 > 0)
      {
        v83[v58] = 0;
        uint64_t v59 = MEMORY[0x185301F80](v83);
        uint64_t v94 = v59;
        uint64_t v97 = v60;
      }
    }
    MEMORY[0x1F4188790](v59);
    LODWORD(v119) = 0;
    String.utf8CString.getter();
    int v61 = uloc_getCountry();
    swift_release();
    uint64_t v62 = 0;
    uint64_t v30 = v93;
    uint64_t v63 = 0;
    if ((int)v119 <= 0 && v61 > 0)
    {
      v83[v61] = 0;
      uint64_t v62 = MEMORY[0x185301F80](v83, 0);
    }
    uint64_t v87 = v62;
    uint64_t v88 = v63;
    uint64_t v25 = v19;
    swift_bridgeObjectRelease();
    uint64_t v31 = (uint64_t)v95;
    uint64_t v26 = v11;
    if (v95)
    {
      Swift::String v65 = String.lowercased()();
      long long v64 = v65._object;
      uint64_t v86 = v65._countAndFlagsBits;
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v86 = 0;
      long long v64 = 0;
    }
    uint64_t v27 = v92;
    uint64_t v34 = v94;
    uint64_t v94 = (uint64_t)v64;
    if (v97)
    {
      uint64_t v119 = v34;
      uint64_t v120 = v97;
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      Swift::String v66 = String._capitalized()();
      uint64_t v93 = v66._countAndFlagsBits;
      id v96 = v66._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v88)
      {
LABEL_44:
        Swift::String v67 = String.uppercased()();
        id v84 = v67._object;
        uint64_t v85 = v67._countAndFlagsBits;
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v34 = 0;
      uint64_t v93 = 0;
      id v96 = 0;
      if (v88) {
        goto LABEL_44;
      }
    }
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    id v84 = 0;
    uint64_t v85 = 0;
    goto LABEL_47;
  }
  uint64_t v25 = v19;
  uint64_t v26 = v11;
  uint64_t v27 = v14;
  uint64_t v29 = v104;
  uint64_t v30 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v34 = 0;
  id v96 = 0;
  uint64_t v97 = 0;
  uint64_t v88 = 0;
  id v84 = 0;
  uint64_t v85 = 0;
  uint64_t v31 = 1;
LABEL_47:
  unint64_t v68 = objc_msgSend(v89, sel_pronouns, v84, v85);
  if (v68)
  {
    uint64_t v69 = v68;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    uint64_t v70 = swift_dynamicCastClass();
    uint64_t v71 = v69;
    if (v70)
    {
      uint64_t v71 = *(void **)(v70 + 24);
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    uint64_t v95 = v71;
    uint64_t v72 = swift_dynamicCastClass();
    if (v72)
    {
      unint64_t v73 = v72;
    }
    else
    {
      swift_unknownObjectRelease();
      uint64_t v95 = objc_msgSend(v69, sel_copy);
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      unint64_t v73 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }
    uint64_t v95 = specialized Sequence.compactMap<A>(_:)(v73);
    LOBYTE(v68) = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v95 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v35 = v97;
  if (v31 == 1)
  {
    __break(1u);
    return (char)v68;
  }

  uint64_t v32 = v86;
  uint64_t v38 = v87;
  uint64_t v36 = v93;
  uint64_t v33 = v94;
  uint64_t v39 = v88;
  uint64_t v42 = (uint64_t)v95;
  uint64x2_t v37 = v96;
  uint64_t v41 = (uint64_t)v84;
  uint64_t v40 = v85;
LABEL_57:
  uint64_t v95 = (void *)v31;
  id v96 = v37;
  uint64_t v93 = v30;
  uint64_t v94 = v34;
  uint64_t v97 = v35;
  uint64_t v119 = v30;
  uint64_t v120 = v31;
  uint64_t v121 = v32;
  uint64_t v122 = v33;
  uint64_t v123 = v34;
  uint64_t v124 = v35;
  uint64_t v125 = v36;
  char v126 = v37;
  uint64_t v127 = v38;
  uint64_t v128 = v39;
  uint64_t v129 = v40;
  uint64_t v130 = v41;
  uint64_t v131 = v42;
  *(void *)&long long v108 = v27;
  *((void *)&v108 + 1) = v29;
  uint64_t v109 = countAndFlagsBits;
  uint64_t v110 = object;
  uint64_t v111 = v103;
  uint64_t v112 = v105;
  uint64_t v90 = v25;
  uint64_t v91 = v26;
  uint64_t v113 = v25;
  uint64_t v114 = v100;
  uint64_t v115 = v26;
  uint64_t v116 = v106;
  uint64_t v117 = v99;
  uint64_t v118 = v98;
  uint64_t v74 = v38;
  uint64_t v75 = v40;
  unint64_t v76 = v42;
  uint64_t v77 = v32;
  uint64_t v78 = v33;
  uint64_t v79 = v39;
  uint64_t v80 = v41;
  char v81 = TermOfAddress.isSupportedInLanguage(_:)(&v108);
  outlined consume of TermOfAddress._TermOfAddress(v93, (uint64_t)v95, v77, v78, v94, v97, v36, (uint64_t)v96, v74, v79, v75, v80, v76);
  outlined consume of Locale.LanguageCode?(v92, v104);
  outlined consume of Locale.LanguageCode?(v103, v105);
  outlined consume of Locale.LanguageCode?(v91, v106);
  LOBYTE(v68) = v81 & 1;
  return (char)v68;
}

Foundation::Morphology_optional __swiftcall NSTermOfAddress.morphologyForLanguage(_:)(Swift::String a1)
{
  uint64_t v3 = v1;
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  LODWORD(v107) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v5 = swift_release();
  uint64_t v94 = 0;
  uint64_t v6 = 0;
  if (Language > 0)
  {
    v95[Language] = 0;
    uint64_t v5 = MEMORY[0x185301F80](v95);
    uint64_t v94 = v5;
    uint64_t v6 = v7;
  }
  MEMORY[0x1F4188790](v5);
  LODWORD(v107) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  swift_release();
  uint64_t v9 = 0;
  uint64_t v80 = v3;
  uint64_t v10 = 0;
  if ((int)v107 <= 0 && Script > 0)
  {
    v71[Script] = 0;
    uint64_t v9 = MEMORY[0x185301F80](v71, 0);
  }
  uint64_t v93 = v10;
  uint64_t v11 = v9;
  MEMORY[0x1F4188790](v9);
  LODWORD(v107) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if ((int)v107 <= 0 && Country > 0)
  {
    v71[Country] = 0;
    uint64_t v13 = MEMORY[0x185301F80](v71);
    uint64_t v14 = v15;
  }
  swift_bridgeObjectRelease();
  if (v6)
  {
    Swift::String v16 = String.lowercased()();
    unint64_t object = v16._object;
    uint64_t countAndFlagsBits = v16._countAndFlagsBits;
  }
  else
  {
    uint64_t v94 = 0;
    unint64_t object = 0;
    uint64_t countAndFlagsBits = 0;
  }
  uint64_t v17 = v11;
  if (v93)
  {
    uint64_t v107 = v11;
    uint64_t v108 = v93;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    Swift::String v18 = String._capitalized()();
    uint64_t v88 = v18._object;
    uint64_t v89 = v18._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14)
    {
LABEL_14:
      Swift::String v19 = String.uppercased()();
      uint64_t v85 = v19._object;
      uint64_t v86 = v19._countAndFlagsBits;
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    if (v14) {
      goto LABEL_14;
    }
  }
  uint64_t v13 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
LABEL_17:
  type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSTermOfAddress);
  Swift::String v20 = self;
  id v21 = v2;
  id v22 = objc_msgSend(v20, sel_neutral);
  char v23 = static NSObject.== infix(_:_:)();

  uint64_t v92 = v13;
  uint64_t v87 = v14;
  if (v23)
  {

    char v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    goto LABEL_55;
  }
  id v37 = objc_msgSend(v20, sel_feminine);
  char v38 = static NSObject.== infix(_:_:)();

  if (v38)
  {

    char v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 1;
    goto LABEL_55;
  }
  id v39 = objc_msgSend(v20, sel_masculine);
  char v40 = static NSObject.== infix(_:_:)();

  if (v40)
  {

    char v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 2;
    goto LABEL_55;
  }
  id v41 = objc_msgSend(v20, sel_currentUser);
  char v42 = static NSObject.== infix(_:_:)();

  if (v42)
  {

    char v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 3;
    goto LABEL_55;
  }
  id v43 = objc_msgSend(v21, sel_languageIdentifier);
  char v24 = v43;
  if (v43)
  {
    id v84 = v21;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v43);

    MEMORY[0x1F4188790](v44);
    LODWORD(v107) = 0;
    String.utf8CString.getter();
    int v45 = uloc_getLanguage();
    swift_release();
    uint64_t v46 = 0;
    char v47 = 0;
    if ((int)v107 <= 0 && v45 > 0)
    {
      v71[v45] = 0;
      uint64_t v46 = MEMORY[0x185301F80](v71, 0);
    }
    uint64_t v83 = v47;
    char v81 = (void *)v46;
    MEMORY[0x1F4188790](v46);
    LODWORD(v107) = 0;
    String.utf8CString.getter();
    int v48 = uloc_getScript();
    uint64_t v49 = swift_release();
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    if ((int)v107 <= 0 && v48 > 0)
    {
      v71[v48] = 0;
      uint64_t v49 = MEMORY[0x185301F80](v71, 0);
      uint64_t v50 = v49;
    }
    uint64_t v82 = v51;
    MEMORY[0x1F4188790](v49);
    LODWORD(v107) = 0;
    String.utf8CString.getter();
    int v52 = uloc_getCountry();
    swift_release();
    uint64_t v53 = 0;
    if ((int)v107 > 0)
    {
      uint64_t v76 = 0;
      id v21 = v84;
    }
    else
    {
      uint64_t v76 = 0;
      id v21 = v84;
      if (v52 > 0)
      {
        v71[v52] = 0;
        uint64_t v53 = MEMORY[0x185301F80](v71);
        uint64_t v76 = v54;
      }
    }
    uint64_t v77 = v53;
    swift_bridgeObjectRelease();
    uint64_t v25 = (uint64_t)v83;
    if (v83)
    {
      char v24 = v81;
      Swift::String v55 = String.lowercased()();
      uint64_t v75 = v55._countAndFlagsBits;
      id v84 = v55._object;
    }
    else
    {
      char v24 = 0;
      uint64_t v75 = 0;
      id v84 = 0;
    }
    uint64_t v28 = v50;
    uint64_t v29 = v82;
    if (v82)
    {
      uint64_t v107 = v28;
      uint64_t v108 = v82;
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      Swift::String v56 = String._capitalized()();
      char v81 = (void *)v56._countAndFlagsBits;
      uint64_t v74 = v56._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v33 = v76;
      if (v76)
      {
LABEL_42:
        Swift::String v57 = String.uppercased()();
        uint64_t v72 = v57._object;
        uint64_t v73 = v57._countAndFlagsBits;
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v28 = 0;
      char v81 = 0;
      uint64_t v74 = 0;
      uint64_t v33 = v76;
      if (v76) {
        goto LABEL_42;
      }
    }
    uint64_t v77 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    goto LABEL_45;
  }
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  id v84 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  char v81 = 0;
  uint64_t v77 = 0;
  uint64_t v33 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v25 = 1;
LABEL_45:
  int v58 = objc_msgSend(v21, sel_pronouns, v72, v73);
  if (v58)
  {
    int v61 = v58;
    uint64_t v76 = v33;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    uint64_t v62 = swift_dynamicCastClass();
    uint64_t v63 = v61;
    if (v62)
    {
      uint64_t v63 = *(void **)(v62 + 24);
      swift_retain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    uint64_t v83 = v63;
    uint64_t v64 = swift_dynamicCastClass();
    if (v64)
    {
      unint64_t v65 = v64;
    }
    else
    {
      swift_unknownObjectRelease();
      uint64_t v83 = objc_msgSend(v61, sel_copy);
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
      unint64_t v65 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
    }
    uint64_t v83 = specialized Sequence.compactMap<A>(_:)(v65);
    int v58 = (void *)swift_bridgeObjectRelease();
    uint64_t v33 = v76;
  }
  else
  {
    uint64_t v83 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v25 == 1)
  {
    __break(1u);
    goto LABEL_57;
  }

  uint64_t v32 = v77;
  uint64_t v31 = (uint64_t)v74;
  uint64_t v26 = v75;
  uint64_t v36 = (uint64_t)v83;
  uint64_t v27 = v84;
  uint64_t v30 = (uint64_t)v81;
  uint64_t v35 = (uint64_t)v72;
  uint64_t v34 = v73;
LABEL_55:
  char v81 = v24;
  uint64_t v82 = v29;
  uint64_t v83 = (void *)v25;
  id v84 = v27;
  uint64_t v77 = v28;
  uint64_t v78 = v6;
  uint64_t v107 = (uint64_t)v24;
  uint64_t v108 = v25;
  uint64_t v109 = v26;
  uint64_t v110 = v27;
  uint64_t v111 = v28;
  uint64_t v112 = v29;
  uint64_t v113 = v30;
  uint64_t v114 = v31;
  uint64_t v115 = v32;
  uint64_t v116 = v33;
  uint64_t v117 = v34;
  uint64_t v118 = v35;
  uint64_t v119 = v36;
  *(void *)&long long v96 = v94;
  *((void *)&v96 + 1) = v6;
  uint64_t v97 = countAndFlagsBits;
  unint64_t v98 = object;
  uint64_t v99 = v17;
  uint64_t v79 = v17;
  uint64_t v100 = v93;
  uint64_t v101 = v89;
  uint64_t v102 = v88;
  uint64_t v103 = v92;
  uint64_t v104 = v87;
  uint64_t v105 = v86;
  uint64_t v106 = v85;
  uint64_t v66 = v32;
  uint64_t v67 = v34;
  unint64_t v68 = v36;
  uint64_t v69 = v26;
  uint64_t v70 = v30;
  TermOfAddress.morphology(for:)(&v96, v80);
  outlined consume of TermOfAddress._TermOfAddress((uint64_t)v81, (uint64_t)v83, v69, (uint64_t)v84, v77, v82, v70, v31, v66, v33, v67, v35, v68);
  outlined consume of Locale.LanguageCode?(v94, v78);
  outlined consume of Locale.LanguageCode?(v79, v93);
  int v58 = (void *)outlined consume of Locale.LanguageCode?(v92, v87);
LABEL_57:
  *(_DWORD *)&result.value.grammaticalCase.value = v60;
  result.value.definiteness.value = BYTE4(v60);
  result.value.customPronouns._rawValue = v59;
  *(void *)&result.value.grammaticalGender.value = v58;
  return result;
}

uint64_t PredicateExpressions.UnaryMinus.wrapped.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.UnaryMinus.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t PredicateExpressions.UnaryMinus.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v13[1] = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  double v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)v13 - v10;
  uint64_t v14 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, double))(v5 + 16))(&v14, v6, v5, v9);
  if (!v3)
  {
    dispatch thunk of static SignedNumeric.- prefix(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.UnaryMinus<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.UnaryMinus.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_UnaryMinus<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t PredicateExpressions.UnaryMinus.description.getter()
{
  _StringGuts.grow(_:)(23);
  v0._unint64_t object = (void *)0x80000001823B0D00;
  v0._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 41;
  v1._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t PredicateExpressions.UnaryMinus<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t PredicateExpressions.UnaryMinus<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v17 = a4;
  uint64_t v18 = a3;
  uint64_t v16 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  Swift::String v20 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PredicateExpressions.UnaryMinus();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    uint64_t v14 = v8;
    uint64_t v15 = v9;
    __swift_project_boxed_opaque_existential_1(v19, v19[3]);
    uint64_t v12 = v20;
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v11, v12, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v17, v11, v14);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.UnaryMinus<A>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.UnaryMinus<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.UnaryMinus<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.UnaryMinus<A>(void *a1)
{
  return PredicateExpressions.UnaryMinus<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.UnaryMinus(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.UnaryMinus(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x181DE94E4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

void __ParseOldStylePropertyList(utf16:)(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (String.UTF16View.count.getter() < 1)
  {
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    swift_allocError();
    *unsigned int v10 = 0xD000000000000031;
    v10[1] = 0x80000001823B0D20;
    swift_willThrow();
    return;
  }
  unint64_t v60 = a1;
  unint64_t v61 = a2;
  long long v62 = xmmword_1821F8670;
  swift_bridgeObjectRetain();
  if ((advanceToNonSpace(_:)(&v60) & 1) == 0)
  {
    *(void *)(a3 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    swift_bridgeObjectRelease();
    *(void *)a3 = MEMORY[0x1E4FBC868];
    return;
  }
  if (advanceToNonSpace(_:)(&v60))
  {
    unsigned __int16 v6 = specialized _ParseInfo.currChar.getter(a1, a2, v62);
    _ParseInfo.advance()();
    switch(v6)
    {
      case '""':
      case '\'':
        uint64_t v7 = parseQuotedPlistString(_:quote:)((uint64_t)&v60, v6);
        if (!v8) {
          goto LABEL_12;
        }
        goto LABEL_6;
      case '#':
      case '$':
      case '%':
      case '&':
      case ')':
      case '*':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
        goto LABEL_24;
      case '(':
        uint64_t v35 = parsePlistArray(_:depth:)((uint64_t)&v60, 0);
        if (!v35) {
          goto LABEL_12;
        }
        uint64_t v19 = v35;
        Swift::String v20 = &demangling cache variable for type metadata for [Any];
        goto LABEL_41;
      case '<':
        uint64_t v7 = parsePlistData(_:)((uint64_t)&v60);
        if (v8 >> 60 == 15) {
          goto LABEL_12;
        }
        BOOL v9 = &type metadata for Data;
        goto LABEL_44;
      default:
        if (v6 != 123)
        {
LABEL_24:
          if ((unsigned __int16)(v6 - 58) > 0xFFF5u
            || (unsigned __int16)((v6 & 0xFFDF) - 91) > 0xFFE5u
            || v6 - 36 <= 0x3B && ((1 << (v6 - 36)) & 0x800000000400E01) != 0)
          {
            _ParseInfo.retreat()();
            unint64_t v30 = v62;
            uint64_t v31 = HIBYTE(a2) & 0xF;
            if ((a2 & 0x2000000000000000) == 0) {
              uint64_t v31 = a1 & 0xFFFFFFFFFFFFLL;
            }
            unint64_t v32 = 4 * v31;
            unint64_t v33 = (unint64_t)v62 >> 14;
            if ((unint64_t)v62 >> 14 >= 4 * v31) {
              goto LABEL_38;
            }
            unint64_t v53 = (unint64_t)v62 >> 14;
            uint64_t v63 = v62;
            do
            {
              unsigned __int16 v34 = specialized _ParseInfo.currChar.getter(a1, a2, v30);
              if ((unsigned __int16)(v34 - 58) <= 0xFFF5u
                && (unsigned __int16)((v34 & 0xFFDF) - 91) <= 0xFFE5u
                && (v34 - 36 > 0x3B || ((1 << (v34 - 36)) & 0x800000000400E01) == 0))
              {
                break;
              }
              _ParseInfo.advance()();
              unint64_t v30 = v62;
              unint64_t v33 = (unint64_t)v62 >> 14;
            }
            while ((unint64_t)v62 >> 14 < v32);
            if (v33 == v53)
            {
LABEL_38:
              lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
              uint64_t v12 = swift_allocError();
              int v13 = "Unexpected EOF while parsing string";
              unint64_t v14 = 0xD000000000000023;
              goto LABEL_10;
            }
            if (v33 < v53)
            {
              __break(1u);
              JUMPOUT(0x181DE9CE0);
            }
            uint64_t v48 = MEMORY[0x185302300](v63, v30, a1, a2);
            uint64_t v7 = MEMORY[0x185302370](v48);
            if (v8)
            {
LABEL_6:
              BOOL v9 = (ValueMetadata *)MEMORY[0x1E4FBB1A0];
LABEL_44:
              *((void *)&v59 + 1) = v9;
              *(void *)&long long v58 = v7;
              *((void *)&v58 + 1) = v8;
              break;
            }
            __break(1u);
          }
          _ParseInfo.retreat()();
          _StringGuts.grow(_:)(38);
          swift_bridgeObjectRelease();
          *(void *)&long long v56 = 0xD000000000000018;
          *((void *)&v56 + 1) = 0x80000001823B0DF0;
          lazy protocol witness table accessor for type UInt16 and conformance UInt16();
          v49._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
          String.append(_:)(v49);
          swift_bridgeObjectRelease();
          v50._uint64_t countAndFlagsBits = 0x6E696C2074612027;
          v50._unint64_t object = (void *)0xEA00000000002065;
          String.append(_:)(v50);
          *(void *)&long long v54 = specialized lineNumberStrings(_:)(a1, a2, v62);
          v51._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v51);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
          uint64_t v12 = swift_allocError();
          *int v52 = v56;
          goto LABEL_11;
        }
        uint64_t v18 = parsePlistDict(_:depth:)((uint64_t)&v60);
        if (!v18) {
          goto LABEL_12;
        }
        uint64_t v19 = v18;
        Swift::String v20 = &demangling cache variable for type metadata for [String : Any];
LABEL_41:
        *((void *)&v59 + 1) = __swift_instantiateConcreteTypeFromMangledName(v20);
        *(void *)&long long v58 = v19;
        break;
    }
  }
  else
  {
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    uint64_t v12 = swift_allocError();
    int v13 = "Unexpected EOF while parsing plist";
    unint64_t v14 = 0xD000000000000022;
LABEL_10:
    *int v11 = v14;
    v11[1] = (unint64_t)(v13 - 32) | 0x8000000000000000;
LABEL_11:

    *((void *)&v62 + 1) = v12;
LABEL_12:
    long long v58 = 0u;
    long long v59 = 0u;
  }
  outlined init with copy of Any?((uint64_t)&v58, (uint64_t)&v56);
  uint64_t v15 = *((void *)&v57 + 1);
  outlined destroy of Any?((uint64_t)&v56);
  if (!v15 || (advanceToNonSpace(_:)(&v60) & 1) == 0) {
    goto LABEL_47;
  }
  outlined init with copy of Any?((uint64_t)&v58, (uint64_t)&v56);
  if (!*((void *)&v57 + 1))
  {
    outlined destroy of Any?((uint64_t)&v56);
    goto LABEL_23;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_23:
    *(void *)&long long v56 = 0;
    *((void *)&v56 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    *(void *)&long long v56 = 0xD000000000000019;
    *((void *)&v56 + 1) = 0x80000001823B0DD0;
    unint64_t v21 = v60;
    unint64_t v22 = v61;
    long long v23 = v62;
    swift_bridgeObjectRetain();
    id v24 = *((id *)&v23 + 1);
    unint64_t v25 = specialized lineNumberStrings(_:)(v21, v22, v23);
    swift_bridgeObjectRelease();

    *(void *)&long long v54 = v25;
    v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    long long v27 = v56;
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    uint64_t v28 = swift_allocError();
    *uint64_t v29 = v27;
    outlined destroy of Any?((uint64_t)&v58);

    *((void *)&v62 + 1) = v28;
    long long v58 = 0u;
    long long v59 = 0u;
    goto LABEL_47;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();

  unint64_t v60 = a1;
  unint64_t v61 = a2;
  long long v62 = xmmword_1821F8670;
  uint64_t v16 = parsePlistDictContent(_:depth:)((uint64_t)&v60, 0);
  if (v16)
  {
    uint64_t v17 = v16;
    *((void *)&v57 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(void *)&long long v56 = v17;
    outlined destroy of Any?((uint64_t)&v58);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v58);
    long long v56 = 0u;
    long long v57 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v56, (uint64_t)&v58);
LABEL_47:
  outlined init with copy of Any?((uint64_t)&v58, (uint64_t)&v54);
  if (v55)
  {
    outlined destroy of Any?((uint64_t)&v58);
    outlined init with take of Any(&v54, &v56);
    outlined init with take of Any(&v56, (_OWORD *)a3);
    swift_bridgeObjectRelease();
    uint64_t v36 = (void *)*((void *)&v62 + 1);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v54);
    id v37 = (void *)*((void *)&v62 + 1);
    if (*((void *)&v62 + 1))
    {
      char v38 = (void *)*((void *)&v62 + 1);
    }
    else
    {
      *(void *)&long long v56 = 0;
      *((void *)&v56 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      *(void *)&long long v56 = 0xD000000000000030;
      *((void *)&v56 + 1) = 0x80000001823B0D90;
      unint64_t v40 = v60;
      unint64_t v39 = v61;
      unint64_t v41 = v62;
      swift_bridgeObjectRetain();
      unint64_t v42 = specialized lineNumberStrings(_:)(v40, v39, v41);
      swift_bridgeObjectRelease();
      *(void *)&long long v54 = v42;
      v43._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      uint64_t v45 = *((void *)&v56 + 1);
      uint64_t v44 = v56;
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      swift_allocError();
      char v38 = 0;
      *uint64_t v46 = v44;
      v46[1] = v45;
      id v37 = (void *)*((void *)&v62 + 1);
    }
    id v47 = v38;
    swift_willThrow();
    outlined destroy of Any?((uint64_t)&v58);
    swift_bridgeObjectRelease();
    uint64_t v36 = v37;
  }
}

unint64_t _ParseInfo.advance()()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  unint64_t v3 = v0[2];
  uint64_t v4 = ((unint64_t)*v0 >> 59) & 1;
  if ((v1 & 0x1000000000000000) == 0) {
    LOBYTE(v4) = 1;
  }
  if ((v0[2] & 0xC) == 4 << v4) {
    unint64_t v3 = _StringGuts._slowEnsureMatchingEncoding(_:)(v3, *v0, v0[1]);
  }
  unint64_t v5 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    unint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v6 = v3 >> 16;
  if (v3 >> 16 >= v5)
  {
    __break(1u);
    goto LABEL_23;
  }
  if ((v1 & 0x1000000000000000) != 0)
  {
LABEL_23:
    unint64_t result = MEMORY[0x185302270]();
    goto LABEL_29;
  }
  uint64_t v7 = (v1 >> 62) & 1;
  if ((v1 & 0x2000000000000000) == 0) {
    LOBYTE(v7) = v2 < 0;
  }
  if ((v7 & 1) == 0)
  {
    if ((v3 & 0xC001) != 0)
    {
      if ((v1 & 0x2000000000000000) == 0)
      {
LABEL_15:
        if ((v2 & 0x1000000000000000) != 0)
        {
          LODWORD(v9) = *(unsigned __int8 *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32 + v6);
          if ((v9 & 0x80) != 0) {
            goto LABEL_17;
          }
LABEL_26:
          uint64_t v9 = 1;
          goto LABEL_27;
        }
        unint64_t v13 = v3;
        unint64_t v12 = v6;
        uint64_t v9 = _StringObject.sharedUTF8.getter();
        unint64_t v3 = v13;
        LODWORD(v9) = *(unsigned __int8 *)(v9 + v12);
        if ((v9 & 0x80) == 0) {
          goto LABEL_26;
        }
LABEL_17:
        LODWORD(v9) = __clz(v9 ^ 0xFF) - 24;
        if (v9 == 4)
        {
          if ((v3 & 0xC000) == 0)
          {
            unsigned __int16 v10 = 16388;
LABEL_28:
            unint64_t result = v3 & 0xFFFFFFFFFFFF0000 | v10;
            goto LABEL_29;
          }
          uint64_t v9 = 4;
        }
        else
        {
          uint64_t v9 = v9;
        }
LABEL_27:
        v3 += v9 << 16;
        unsigned __int16 v10 = 5;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v11 = _StringGuts.scalarAlignSlow(_:)(v3, v2, v1);
      unint64_t v3 = v11 & 0xFFFFFFFFFFFFFFF2 | 1;
      unint64_t v6 = v11 >> 16;
      if ((v1 & 0x2000000000000000) == 0) {
        goto LABEL_15;
      }
    }
    v14[0] = v2;
    v14[1] = v1 & 0xFFFFFFFFFFFFFFLL;
    LODWORD(v9) = *((unsigned __int8 *)v14 + v6);
    if ((v9 & 0x80) == 0) {
      goto LABEL_26;
    }
    goto LABEL_17;
  }
  unint64_t result = (v3 & 0xFFFFFFFFFFFF0000) + 65549;
LABEL_29:
  v0[2] = result;
  return result;
}

void _ParseInfo.retreat()()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = (*(void *)v0 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0) {
    LOBYTE(v4) = 1;
  }
  if ((*(void *)(v0 + 16) & 0xCLL) != 4 << v4)
  {
    if (v3 >= 0x4000) {
      goto LABEL_5;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v3 = _StringGuts._slowEnsureMatchingEncoding(_:)(*(void *)(v0 + 16), *(void *)v0, *(void *)(v0 + 8));
  if (v3 < 0x4000) {
    goto LABEL_23;
  }
LABEL_5:
  uint64_t v5 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v5 = v1 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v5 < v3 >> 14) {
    goto LABEL_24;
  }
  if ((v2 & 0x1000000000000000) != 0)
  {
LABEL_25:
    unint64_t v7 = MEMORY[0x185302280](v3, v1, v2);
    goto LABEL_21;
  }
  uint64_t v6 = (v2 >> 62) & 1;
  if ((v2 & 0x2000000000000000) == 0) {
    LOBYTE(v6) = v1 < 0;
  }
  if (v6)
  {
    unint64_t v7 = (v3 & 0xFFFFFFFFFFFF0000) - 65523;
LABEL_21:
    *(void *)(v0 + 16) = v7;
    return;
  }
  if ((v3 & 0xC000) != 0)
  {
    unint64_t v7 = v3 & 0xFFFFFFFFFFFF0000 | 5;
    goto LABEL_21;
  }
  if ((v3 & 1) == 0) {
    unint64_t v3 = _StringGuts.scalarAlignSlow(_:)(v3, v1, v2) & 0xFFFFFFFFFFFFFFF2 | 1;
  }
  Swift::Int v8 = _StringGuts.fastUTF8ScalarLength(endingAt:)(v3 >> 16);
  if (v8 == 4)
  {
    unint64_t v7 = (v3 & 0xFFFFFFFFFFFF0000) - 245756;
    goto LABEL_21;
  }
  if (!__OFSUB__(0, v8))
  {
    unint64_t v7 = (((v3 >> 16) - v8) << 16) | 5;
    goto LABEL_21;
  }
  __break(1u);
}

uint64_t advanceToNonSpace(_:)(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  unint64_t v3 = a1[2];
  uint64_t v4 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v4 = *a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v5 = 4 * v4;
  if (4 * v4 <= v3 >> 14) {
    return 0;
  }
  while (1)
  {
    unsigned __int16 v8 = specialized _ParseInfo.currChar.getter(v1, v2, v3);
    _ParseInfo.advance()();
    if (v8 <= 0x1Fu)
    {
      if (v8 - 9 >= 5) {
        goto LABEL_98;
      }
      goto LABEL_6;
    }
    if (v8 - 8232 >= 2 && v8 != 32) {
      break;
    }
LABEL_6:
    unint64_t v1 = *a1;
    unint64_t v2 = a1[1];
    unint64_t v3 = a1[2];
    uint64_t v7 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0) {
      uint64_t v7 = *a1 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v5 = 4 * v7;
    if (4 * v7 <= v3 >> 14) {
      return 0;
    }
  }
  if (v8 != 47) {
    goto LABEL_98;
  }
  unint64_t v9 = a1[2];
  if (v5 <= v9 >> 14) {
    goto LABEL_98;
  }
  if ((unsigned __int16)specialized _ParseInfo.currChar.getter(v1, v2, a1[2]) == 47)
  {
    _ParseInfo.advance()();
    unint64_t v11 = *a1;
    unint64_t v10 = a1[1];
    unint64_t v12 = a1[2];
    BOOL v13 = (v10 & 0x2000000000000000) == 0;
    if ((v10 & 0x2000000000000000) != 0) {
      unint64_t v14 = HIBYTE(v10) & 0xF;
    }
    else {
      unint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
    }
    if (v12 >> 14 < 4 * v14)
    {
      while (1)
      {
        uint64_t v15 = (v11 >> 59) & 1;
        if ((v10 & 0x1000000000000000) == 0) {
          LOBYTE(v15) = 1;
        }
        if ((v12 & 0xC) == 4 << v15) {
          unint64_t v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v11, v10);
        }
        unint64_t v16 = v12 >> 16;
        if (v12 >> 16 >= v14)
        {
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
          JUMPOUT(0x181DEA578);
        }
        if ((v10 & 0x1000000000000000) == 0) {
          break;
        }
        LOWORD(v22) = String.UTF16View._foreignSubscript(position:)();
LABEL_51:
        char v28 = 1;
        if ((unsigned __int16)v22 - 8232 >= 2
          && (unsigned __int16)v22 != 10
          && (unsigned __int16)v22 != 13)
        {
          _ParseInfo.advance()();
          char v28 = 0;
        }
        unint64_t v11 = *a1;
        unint64_t v10 = a1[1];
        BOOL v13 = (v10 & 0x2000000000000000) == 0;
        if ((v10 & 0x2000000000000000) != 0) {
          unint64_t v14 = HIBYTE(v10) & 0xF;
        }
        else {
          unint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
        }
        if ((v28 & 1) == 0)
        {
          unint64_t v12 = a1[2];
          if (v12 >> 14 < 4 * v14) {
            continue;
          }
        }
        goto LABEL_6;
      }
      if (v12)
      {
        if (v13) {
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v16 = _StringGuts.scalarAlignSlow(_:)(v12, v11, v10) >> 16;
        if (v13)
        {
LABEL_27:
          if ((v11 & 0x1000000000000000) != 0) {
            uint64_t v17 = (v10 & 0xFFFFFFFFFFFFFFFLL) + 32;
          }
          else {
            uint64_t v17 = _StringObject.sharedUTF8.getter();
          }
          unsigned int v18 = *(unsigned __int8 *)(v17 + v16);
          if (*(char *)(v17 + v16) < 0)
          {
            switch(__clz(v18 ^ 0xFF))
            {
              case 0x1Au:
                uint64_t v19 = (char *)(v16 + v17);
                goto LABEL_39;
              case 0x1Bu:
                Swift::String v20 = (char *)(v16 + v17);
                goto LABEL_41;
              case 0x1Cu:
                unint64_t v21 = (char *)(v16 + v17);
                goto LABEL_43;
              default:
                goto LABEL_45;
            }
          }
          goto LABEL_45;
        }
      }
      unint64_t v39 = v11;
      uint64_t v40 = v10 & 0xFFFFFFFFFFFFFFLL;
      unsigned int v18 = *((unsigned __int8 *)&v39 + v16);
      if (*((char *)&v39 + v16) < 0)
      {
        switch(__clz(v18 ^ 0xFF))
        {
          case 0x1Au:
            uint64_t v19 = (char *)&v39 + v16;
LABEL_39:
            unsigned int v18 = v19[1] & 0x3F | ((v18 & 0x1F) << 6);
            break;
          case 0x1Bu:
            Swift::String v20 = (char *)&v39 + v16;
LABEL_41:
            char v23 = v20[1];
            char v24 = v20[2];
            int v25 = ((v18 & 0xF) << 12) | ((v23 & 0x3F) << 6);
            goto LABEL_44;
          case 0x1Cu:
            unint64_t v21 = (char *)&v39 + v16;
LABEL_43:
            char v26 = v21[1];
            char v27 = v21[2];
            char v24 = v21[3];
            int v25 = ((v18 & 0xF) << 18) | ((v26 & 0x3F) << 12) | ((v27 & 0x3F) << 6);
LABEL_44:
            unsigned int v18 = v25 & 0xFFFFFFC0 | v24 & 0x3F;
            break;
          default:
            break;
        }
      }
LABEL_45:
      if ((v12 & 0xC000) == 0x4000)
      {
        if (v18 < 0x10000) {
          goto LABEL_101;
        }
        LOWORD(v22) = v18 & 0x3FF | 0xDC00;
      }
      else if (HIWORD(v18))
      {
        unsigned int v22 = ((v18 + 67043328) >> 10) - 10240;
      }
      else
      {
        LOWORD(v22) = v18;
      }
      goto LABEL_51;
    }
    goto LABEL_6;
  }
  if ((unsigned __int16)specialized _ParseInfo.currChar.getter(v1, v2, v9) == 42)
  {
    _ParseInfo.advance()();
LABEL_65:
    unint64_t v29 = *a1;
    unint64_t v30 = a1[1];
    unint64_t v31 = a1[2];
    while (1)
    {
      if ((v30 & 0x2000000000000000) != 0) {
        unint64_t v32 = HIBYTE(v30) & 0xF;
      }
      else {
        unint64_t v32 = v29 & 0xFFFFFFFFFFFFLL;
      }
      if (v31 >> 14 >= 4 * v32) {
        goto LABEL_6;
      }
      uint64_t v33 = (v29 >> 59) & 1;
      if ((v30 & 0x1000000000000000) == 0) {
        LOBYTE(v33) = 1;
      }
      if ((v31 & 0xC) == 4 << v33) {
        unint64_t v31 = _StringGuts._slowEnsureMatchingEncoding(_:)(v31, v29, v30);
      }
      if (v31 >> 16 >= v32) {
        goto LABEL_100;
      }
      if ((v30 & 0x1000000000000000) != 0)
      {
        LOWORD(v34) = String.UTF16View._foreignSubscript(position:)();
        goto LABEL_90;
      }
      if (v31)
      {
        if ((v30 & 0x2000000000000000) == 0) {
          goto LABEL_78;
        }
      }
      else
      {
        _StringGuts.scalarAlignSlow(_:)(v31, v29, v30);
        if ((v30 & 0x2000000000000000) == 0)
        {
LABEL_78:
          if ((v29 & 0x1000000000000000) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          goto LABEL_84;
        }
      }
      unint64_t v39 = v29;
      uint64_t v40 = v30 & 0xFFFFFFFFFFFFFFLL;
LABEL_84:
      unsigned int v34 = _decodeScalar(_:startingAt:)();
      if ((v31 & 0xC000) == 0x4000)
      {
        if (v34 < 0x10000) {
          goto LABEL_102;
        }
        LOWORD(v35) = v34 & 0x3FF | 0xDC00;
        goto LABEL_91;
      }
      if (HIWORD(v34))
      {
        int v35 = (unsigned __int16)((v34 + 67043328) >> 10) + 55296;
        if ((v35 & 0x10000) != 0) {
          goto LABEL_103;
        }
        goto LABEL_91;
      }
LABEL_90:
      LOWORD(v35) = v34;
LABEL_91:
      _ParseInfo.advance()();
      int v36 = (unsigned __int16)v35;
      unint64_t v29 = *a1;
      unint64_t v30 = a1[1];
      unint64_t v31 = a1[2];
      if (v36 == 42)
      {
        uint64_t v37 = HIBYTE(v30) & 0xF;
        if ((v30 & 0x2000000000000000) == 0) {
          uint64_t v37 = v29 & 0xFFFFFFFFFFFFLL;
        }
        if (v31 >> 14 < 4 * v37)
        {
          if ((unsigned __int16)specialized _ParseInfo.currChar.getter(*a1, a1[1], a1[2]) != 47) {
            goto LABEL_65;
          }
          _ParseInfo.advance()();
          goto LABEL_6;
        }
      }
    }
  }
LABEL_98:
  _ParseInfo.retreat()();
  return 1;
}

void parsePlistObject(_:requireObject:depth:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a3 >= 0x201)
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    unint64_t v27 = 0xD00000000000002FLL;
    unint64_t v28 = 0x80000001823B1010;
    unint64_t v6 = *(void *)a1;
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v8 = *(void *)(a1 + 16);
LABEL_3:
    specialized lineNumberStrings(_:)(v6, v7, v8);
    v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    uint64_t v10 = swift_allocError();
    *unint64_t v11 = v27;
    v11[1] = v28;
    goto LABEL_4;
  }
  if (advanceToNonSpace(_:)((unint64_t *)a1))
  {
    unint64_t v14 = *(void *)a1;
    unint64_t v15 = *(void *)(a1 + 8);
    unsigned __int16 v16 = specialized _ParseInfo.currChar.getter(*(void *)a1, v15, *(void *)(a1 + 16));
    _ParseInfo.advance()();
    switch(v16)
    {
      case '""':
      case '\'':
        uint64_t v17 = parseQuotedPlistString(_:quote:)(a1, v16);
        if (!v18) {
          goto LABEL_5;
        }
        goto LABEL_20;
      case '#':
      case '$':
      case '%':
      case '&':
      case ')':
      case '*':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
        goto LABEL_15;
      case '(':
        uint64_t v24 = parsePlistArray(_:depth:)(a1, a3);
        if (!v24) {
          goto LABEL_5;
        }
        uint64_t v21 = v24;
        unsigned int v22 = &demangling cache variable for type metadata for [Any];
        goto LABEL_23;
      case '<':
        uint64_t v17 = parsePlistData(_:)(a1);
        if (v18 >> 60 == 15) {
          goto LABEL_5;
        }
        char v23 = &type metadata for Data;
        goto LABEL_26;
      default:
        if (v16 == 123)
        {
          uint64_t v20 = parsePlistDict(_:depth:)(a1);
          if (!v20) {
            goto LABEL_5;
          }
          uint64_t v21 = v20;
          unsigned int v22 = &demangling cache variable for type metadata for [String : Any];
LABEL_23:
          *(void *)(a4 + 24) = __swift_instantiateConcreteTypeFromMangledName(v22);
          *(void *)a4 = v21;
          return;
        }
LABEL_15:
        if ((unsigned __int16)(v16 - 58) > 0xFFF5u
          || (unsigned __int16)((v16 & 0xFFDF) - 91) > 0xFFE5u
          || v16 - 36 <= 0x3B && ((1 << (v16 - 36)) & 0x800000000400E01) != 0)
        {
          _ParseInfo.retreat()();
          uint64_t v17 = parseUnquotedPlistString(_:)(a1);
          if (!v18) {
            goto LABEL_5;
          }
LABEL_20:
          char v23 = (ValueMetadata *)MEMORY[0x1E4FBB1A0];
LABEL_26:
          *(void *)(a4 + 24) = v23;
          *(void *)a4 = v17;
          *(void *)(a4 + 8) = v18;
          return;
        }
        _ParseInfo.retreat()();
        if ((a2 & 1) == 0) {
          goto LABEL_5;
        }
        _StringGuts.grow(_:)(38);
        swift_bridgeObjectRelease();
        unint64_t v27 = 0xD000000000000018;
        unint64_t v28 = 0x80000001823B0DF0;
        lazy protocol witness table accessor for type UInt16 and conformance UInt16();
        v25._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        v26._uint64_t countAndFlagsBits = 0x6E696C2074612027;
        v26._unint64_t object = (void *)0xEA00000000002065;
        String.append(_:)(v26);
        unint64_t v8 = *(void *)(a1 + 16);
        unint64_t v6 = v14;
        unint64_t v7 = v15;
        break;
    }
    goto LABEL_3;
  }
  if ((a2 & 1) == 0) {
    goto LABEL_5;
  }
  lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
  uint64_t v10 = swift_allocError();
  *uint64_t v19 = 0xD000000000000022;
  v19[1] = 0x80000001823B0D60;
LABEL_4:

  *(void *)(a1 + 24) = v10;
LABEL_5:
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
}

uint64_t parsePlistDictContent(_:depth:)(uint64_t a1, int a2)
{
  uint64_t v4 = MEMORY[0x1E4FBC868];
  uint64_t v48 = MEMORY[0x1E4FBC868];
  if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) == 0)
  {
LABEL_43:

    *(void *)(a1 + 24) = 0;
    return v4;
  }
  uint64_t v5 = (a2 + 1);
  BOOL v6 = a2 == -1;
  uint64_t v7 = MEMORY[0x1E4FBB1A0];
  while (1)
  {
    unsigned __int16 v8 = specialized _ParseInfo.currChar.getter(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
    unsigned __int16 v9 = v8;
    if (v8 == 39 || v8 == 34)
    {
      _ParseInfo.advance()();
      uint64_t v10 = parseQuotedPlistString(_:quote:)(a1, v9);
    }
    else
    {
      if ((unsigned __int16)(v8 - 58) <= 0xFFF5u
        && (unsigned __int16)((v8 & 0xFFDF) - 91) <= 0xFFE5u
        && (v8 - 36 > 0x3B || ((1 << (v8 - 36)) & 0x800000000400E01) == 0))
      {
LABEL_42:
        uint64_t v4 = v48;
        goto LABEL_43;
      }
      uint64_t v10 = parseUnquotedPlistString(_:)(a1);
    }
    uint64_t v12 = v10;
    uint64_t v13 = v11;
    if (!v11) {
      goto LABEL_42;
    }
    if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)&long long v46 = 0;
      *((void *)&v46 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(void *)&long long v46 = 0xD000000000000014;
      *((void *)&v46 + 1) = 0x80000001823B0FD0;
      *(void *)&long long v44 = specialized lineNumberStrings(_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
      v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      long long v29 = v46;
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      uint64_t v26 = swift_allocError();
      *unint64_t v30 = v29;
      goto LABEL_47;
    }
    unint64_t v14 = *(void *)a1;
    unint64_t v15 = *(void *)(a1 + 8);
    unint64_t v16 = *(void *)(a1 + 16);
    if ((unsigned __int16)specialized _ParseInfo.currChar.getter(*(void *)a1, v15, v16) == 59)
    {
      uint64_t v47 = v7;
      *(void *)&long long v46 = v12;
      *((void *)&v46 + 1) = v13;
      swift_bridgeObjectRetain();
      goto LABEL_39;
    }
    if ((unsigned __int16)specialized _ParseInfo.currChar.getter(v14, v15, v16) != 61)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      uint64_t v26 = swift_allocError();
      *unint64_t v31 = 0xD000000000000014;
      v31[1] = 0x80000001823B0FF0;
      goto LABEL_47;
    }
    _ParseInfo.advance()();
    if (v6) {
      break;
    }
    if (!depthIsValid(_:depth:)(a1, v5)) {
      goto LABEL_50;
    }
    if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) == 0)
    {
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      uint64_t v32 = swift_allocError();
      *uint64_t v33 = 0xD000000000000022;
      v33[1] = 0x80000001823B0D60;
      goto LABEL_49;
    }
    unsigned __int16 v17 = specialized _ParseInfo.currChar.getter(v14, v15, *(void *)(a1 + 16));
    _ParseInfo.advance()();
    switch(v17)
    {
      case '""':
      case '\'':
        uint64_t v18 = parseQuotedPlistString(_:quote:)(a1, v17);
        if (!v19) {
          goto LABEL_50;
        }
        goto LABEL_32;
      case '#':
      case '$':
      case '%':
      case '&':
      case ')':
      case '*':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
        goto LABEL_27;
      case '(':
        uint64_t v22 = parsePlistArray(_:depth:)(a1, v5);
        if (!v22) {
          goto LABEL_50;
        }
        uint64_t v23 = v22;
        *((void *)&v45 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
        *(void *)&long long v44 = v23;
        goto LABEL_38;
      case '<':
        uint64_t v18 = parsePlistData(_:)(a1);
        if (v19 >> 60 == 15) {
          goto LABEL_50;
        }
        *((void *)&v45 + 1) = &type metadata for Data;
        goto LABEL_37;
      default:
        if (v17 == 123)
        {
          uint64_t v20 = parsePlistDictContent(_:depth:)(a1, v5);
          if (!v20) {
            goto LABEL_50;
          }
          uint64_t v21 = v20;
          if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) == 0
            || (unsigned __int16)specialized _ParseInfo.currChar.getter(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16)) != 125)
          {
            swift_bridgeObjectRelease();
            _StringGuts.grow(_:)(50);
            swift_bridgeObjectRelease();
            unint64_t v42 = 0xD000000000000030;
            unint64_t v43 = 0x80000001823B0E40;
            unint64_t v35 = *(void *)a1;
            unint64_t v36 = *(void *)(a1 + 8);
            unint64_t v37 = *(void *)(a1 + 16);
            goto LABEL_53;
          }
          _ParseInfo.advance()();
          *((void *)&v45 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
          *(void *)&long long v44 = v21;
        }
        else
        {
LABEL_27:
          if ((unsigned __int16)(v17 - 58) <= 0xFFF5u
            && (unsigned __int16)((v17 & 0xFFDF) - 91) <= 0xFFE5u
            && (v17 - 36 > 0x3B || ((1 << (v17 - 36)) & 0x800000000400E01) == 0))
          {
            goto LABEL_55;
          }
          _ParseInfo.retreat()();
          uint64_t v18 = parseUnquotedPlistString(_:)(a1);
          if (!v19) {
            goto LABEL_50;
          }
LABEL_32:
          *((void *)&v45 + 1) = v7;
LABEL_37:
          *(void *)&long long v44 = v18;
          *((void *)&v44 + 1) = v19;
        }
LABEL_38:
        outlined init with take of Any(&v44, &v46);
        break;
    }
LABEL_39:
    outlined init with copy of Any((uint64_t)&v46, (uint64_t)&v44);
    specialized Dictionary.subscript.setter((uint64_t)&v44, v12, v13);
    if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) == 0
      || (unsigned __int16)specialized _ParseInfo.currChar.getter(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16)) != 59)
    {
      swift_bridgeObjectRelease();
      *(void *)&long long v44 = 0;
      *((void *)&v44 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(void *)&long long v44 = 0xD000000000000014;
      *((void *)&v44 + 1) = 0x80000001823B0FD0;
      specialized lineNumberStrings(_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
      v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      long long v25 = v44;
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      uint64_t v26 = swift_allocError();
      *unint64_t v27 = v25;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
LABEL_47:

      uint64_t v4 = 0;
      *(void *)(a1 + 24) = v26;
      return v4;
    }
    _ParseInfo.advance()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
    if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) == 0) {
      goto LABEL_42;
    }
  }
  __break(1u);
LABEL_55:
  _ParseInfo.retreat()();
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  unint64_t v42 = 0xD000000000000018;
  unint64_t v43 = 0x80000001823B0DF0;
  lazy protocol witness table accessor for type UInt16 and conformance UInt16();
  v40._uint64_t countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._uint64_t countAndFlagsBits = 0x6E696C2074612027;
  v41._unint64_t object = (void *)0xEA00000000002065;
  String.append(_:)(v41);
  unint64_t v37 = *(void *)(a1 + 16);
  unint64_t v35 = v14;
  unint64_t v36 = v15;
LABEL_53:
  specialized lineNumberStrings(_:)(v35, v36, v37);
  v38._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
  uint64_t v32 = swift_allocError();
  *unint64_t v39 = v42;
  v39[1] = v43;
LABEL_49:

  *(void *)(a1 + 24) = v32;
LABEL_50:
  long long v44 = 0u;
  long long v45 = 0u;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Any?((uint64_t)&v44);
  return 0;
}

BOOL depthIsValid(_:depth:)(uint64_t a1, unsigned int a2)
{
  if (a2 >= 0x201)
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    specialized lineNumberStrings(_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
    v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    uint64_t v5 = swift_allocError();
    *BOOL v6 = 0xD00000000000002FLL;
    v6[1] = 0x80000001823B1010;

    *(void *)(a1 + 24) = v5;
  }
  return a2 < 0x201;
}

uint64_t parsePlistDict(_:depth:)(uint64_t a1)
{
  uint64_t v2 = parsePlistDictContent(_:depth:)();
  if (v2)
  {
    if ((advanceToNonSpace(_:)((unint64_t *)a1) & 1) != 0
      && (unsigned __int16)specialized _ParseInfo.currChar.getter(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16)) == 125)
    {
      _ParseInfo.advance()();
    }
    else
    {
      swift_bridgeObjectRelease();
      _StringGuts.grow(_:)(50);
      swift_bridgeObjectRelease();
      specialized lineNumberStrings(_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
      v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      uint64_t v4 = swift_allocError();
      *uint64_t v5 = 0xD000000000000030;
      v5[1] = 0x80000001823B0E40;

      uint64_t v2 = 0;
      *(void *)(a1 + 24) = v4;
    }
  }
  return v2;
}

uint64_t parsePlistArray(_:depth:)(uint64_t result, int a2)
{
  uint64_t v2 = (a2 + 1);
  if (a2 == -1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    parsePlistObject(_:requireObject:depth:)(result, 0, v2, (uint64_t)&v15);
    if (v16)
    {
      uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
      while (1)
      {
        outlined init with take of Any(&v15, v17);
        outlined init with copy of Any((uint64_t)v17, (uint64_t)&v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        }
        unint64_t v6 = v4[2];
        unint64_t v5 = v4[3];
        if (v6 >= v5 >> 1) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
        }
        v4[2] = v6 + 1;
        outlined init with take of Any(&v15, &v4[4 * v6 + 4]);
        if ((advanceToNonSpace(_:)((unint64_t *)v3) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          *(void *)&long long v15 = 0;
          *((void *)&v15 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(33);
          swift_bridgeObjectRelease();
          *(void *)&long long v15 = 0xD00000000000001FLL;
          *((void *)&v15 + 1) = 0x80000001823B0EB0;
          specialized lineNumberStrings(_:)(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16));
          v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v7);
          swift_bridgeObjectRelease();
          long long v8 = v15;
          lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
          uint64_t v9 = swift_allocError();
          *uint64_t v10 = v8;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
          goto LABEL_20;
        }
        if ((unsigned __int16)specialized _ParseInfo.currChar.getter(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16)) != 44)break; {
        _ParseInfo.advance()();
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
        parsePlistObject(_:requireObject:depth:)(v3, 0, v2, (uint64_t)&v15);
        if (!v16) {
          goto LABEL_13;
        }
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    }
    else
    {
      uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
LABEL_13:
      outlined destroy of Any?((uint64_t)&v15);
    }
    if ((advanceToNonSpace(_:)((unint64_t *)v3) & 1) != 0
      && (uint64_t v11 = *(void **)(v3 + 24),
          (unsigned __int16)specialized _ParseInfo.currChar.getter(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16)) == 41))
    {

      *(void *)(v3 + 24) = 0;
      _ParseInfo.advance()();
    }
    else
    {
      swift_bridgeObjectRelease();
      *(void *)&v17[0] = 0;
      *((void *)&v17[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      *(void *)&v17[0] = 0xD00000000000002BLL;
      *((void *)&v17[0] + 1) = 0x80000001823B0E80;
      *(void *)&long long v15 = specialized lineNumberStrings(_:)(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16));
      v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      long long v13 = v17[0];
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      uint64_t v9 = swift_allocError();
      _OWORD *v14 = v13;
LABEL_20:

      uint64_t v4 = 0;
      *(void *)(v3 + 24) = v9;
    }
    return (uint64_t)v4;
  }
  return result;
}

uint64_t parsePlistData(_:)(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v25 = xmmword_1821115B0;
  uint64_t v2 = getDataBytes(_:bytes:)((unint64_t *)a1, (uint64_t)v24, 400);
  if (v2 >= 1)
  {
    uint64_t v3 = v24;
    do
    {
      uint64_t v4 = specialized Data.append<A>(contentsOf:)(0, v2, (uint64_t)v3, 400);
      MEMORY[0x1F4188790](v4);
      uint64_t v3 = v20;
      uint64_t v2 = getDataBytes(_:bytes:)((unint64_t *)a1, (uint64_t)v20, 400);
    }
    while (v2 > 0);
  }
  if (v2 == -2)
  {
    unint64_t v22 = 0;
    unint64_t v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v5._unint64_t object = (void *)0x80000001823B0F00;
    v5._uint64_t countAndFlagsBits = 0xD000000000000023;
    String.append(_:)(v5);
    unint64_t v21 = specialized lineNumberStrings(_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    uint64_t v7 = 0x6E6576656E75203BLL;
    unint64_t v8 = 0xEF6874676E656C20;
LABEL_14:
    String.append(_:)(*(Swift::String *)&v7);
    goto LABEL_15;
  }
  if (v2 < 0)
  {
    unint64_t v22 = 0;
    unint64_t v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    unint64_t v22 = 0xD000000000000023;
    unint64_t v23 = 0x80000001823B0F00;
    unint64_t v21 = specialized lineNumberStrings(_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
    v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t v7 = 0x696C61766E69203BLL;
    unint64_t v8 = 0xED00007865682064;
    goto LABEL_14;
  }

  *(void *)(a1 + 24) = 0;
  unint64_t v9 = *(void *)a1;
  unint64_t v10 = *(void *)(a1 + 8);
  unint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0) {
    uint64_t v12 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 >> 14 < 4 * v12
    && (unsigned __int16)specialized _ParseInfo.currChar.getter(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16)) == 62)
  {
    _ParseInfo.advance()();
    return v25;
  }
  unint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  unint64_t v22 = 0xD00000000000002BLL;
  unint64_t v23 = 0x80000001823B0ED0;
  unint64_t v21 = specialized lineNumberStrings(_:)(v9, v10, v11);
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
LABEL_15:
  unint64_t v16 = v22;
  unint64_t v17 = v23;
  lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
  uint64_t v18 = swift_allocError();
  *unint64_t v19 = v16;
  v19[1] = v17;

  *(void *)(a1 + 24) = v18;
  outlined consume of Data._Representation(v25, *((unint64_t *)&v25 + 1));
  return 0;
}

uint64_t parseQuotedPlistString(_:quote:)(uint64_t a1, unsigned __int16 a2)
{
  long long v39 = 0uLL;
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)a1;
  uint64_t v6 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v6 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v7 = 4 * v6;
  unint64_t v8 = v4 >> 14;
  if (v4 >> 14 >= 4 * v6) {
    goto LABEL_34;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v37 = *(void *)(a1 + 16);
  do
  {
    unint64_t v12 = v4;
    while (1)
    {
      int v13 = (unsigned __int16)specialized _ParseInfo.currChar.getter(v5, v3, v12);
      if (v13 == a2) {
        goto LABEL_27;
      }
      if (v13 == 92) {
        break;
      }
      _ParseInfo.advance()();
      unint64_t v5 = *(void *)a1;
      unint64_t v3 = *(void *)(a1 + 8);
      unint64_t v12 = *(void *)(a1 + 16);
      uint64_t v14 = HIBYTE(v3) & 0xF;
      if ((v3 & 0x2000000000000000) == 0) {
        uint64_t v14 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v7 = 4 * v14;
      unint64_t v8 = v12 >> 14;
      if (v12 >> 14 >= 4 * v14) {
        goto LABEL_27;
      }
    }
    if (!v10) {
      long long v39 = xmmword_182107DC0;
    }
    if (v8 < v4 >> 14)
    {
      __break(1u);
      goto LABEL_43;
    }
    uint64_t v15 = MEMORY[0x185302300](v4, v12, v5, v3);
    uint64_t v16 = MEMORY[0x185302370](v15);
    if (!v17) {
      goto LABEL_46;
    }
    String.append(_:)(*(Swift::String *)&v16);
    swift_bridgeObjectRelease();
    _ParseInfo.advance()();
    unint64_t v18 = *(void *)(a1 + 16);
    if (v7 <= v18 >> 14)
    {
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      *(void *)&long long v38 = 0xD000000000000028;
      *((void *)&v38 + 1) = 0x80000001823B0F60;
      unint64_t v27 = v5;
      unint64_t v28 = v3;
      unint64_t v29 = v18;
      goto LABEL_35;
    }
    unsigned __int16 v19 = specialized _ParseInfo.currChar.getter(v5, v3, *(void *)(a1 + 16));
    _ParseInfo.advance()();
    if ((unsigned __int16)(v19 - 56) <= 0xFFF7u)
    {
      switch(v19)
      {
        case 'U':
          unsigned __int16 v20 = parseU16Scalar(_:)((unint64_t *)a1);
          goto LABEL_21;
        case 'a':
        case 'b':
        case 'f':
        case 'n':
        case 'r':
        case 't':
        case 'v':
          goto LABEL_23;
        default:
          goto LABEL_22;
      }
    }
    unsigned __int16 v20 = parseOctal(startingWith:_:)(v19, a1);
LABEL_21:
    unsigned __int16 v19 = v20;
LABEL_22:
    if (v19 >> 11 == 27) {
      goto LABEL_45;
    }
LABEL_23:
    if (!*((void *)&v39 + 1)) {
      goto LABEL_47;
    }
    String.UnicodeScalarView.append(_:)();
    uint64_t v10 = *((void *)&v39 + 1);
    uint64_t v11 = v39;
    unint64_t v3 = *(void *)(a1 + 8);
    unint64_t v4 = *(void *)(a1 + 16);
    unint64_t v5 = *(void *)a1;
    uint64_t v21 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v21 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v7 = 4 * v21;
    unint64_t v8 = v4 >> 14;
    unint64_t v12 = *(void *)(a1 + 16);
  }
  while (v4 >> 14 < 4 * v21);
LABEL_27:
  if (v8 >= v7)
  {
    unint64_t v4 = v37;
LABEL_34:
    *(void *)(a1 + 16) = v4;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    *(void *)&long long v38 = 0xD00000000000002CLL;
    *((void *)&v38 + 1) = 0x80000001823B0F30;
    unint64_t v27 = v5;
    unint64_t v28 = v3;
    unint64_t v29 = v4;
LABEL_35:
    specialized lineNumberStrings(_:)(v27, v28, v29);
    v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    uint64_t v31 = swift_allocError();
    *uint64_t v32 = v38;

    *(void *)(a1 + 24) = v31;
    swift_bridgeObjectRelease();
    return 0;
  }
  unint64_t v22 = *(void **)(a1 + 24);
  unint64_t v23 = v4 >> 14;
  if (v10)
  {
    if (v23 == v8) {
      goto LABEL_39;
    }
    if (v8 >= v23)
    {
      uint64_t v24 = MEMORY[0x185302300](v4, v12, v5, v3);
      uint64_t v25 = MEMORY[0x185302370](v24);
      if (v26)
      {
        String.append(_:)(*(Swift::String *)&v25);
        swift_bridgeObjectRelease();
        uint64_t v11 = v39;
        goto LABEL_39;
      }
LABEL_49:
      __break(1u);
      JUMPOUT(0x181DEBD98);
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v8 < v23)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v33 = MEMORY[0x185302300](v4, v12, v5, v3);
  uint64_t v34 = MEMORY[0x185302370](v33);
  if (!v35) {
    goto LABEL_48;
  }
  uint64_t v11 = v34;
LABEL_39:
  _ParseInfo.advance()();

  *(void *)(a1 + 24) = 0;
  return v11;
}

uint64_t parseUnquotedPlistString(_:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)a1;
  uint64_t v5 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v5 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v6 = 4 * v5;
  unint64_t v7 = v3 >> 14;
  if (v3 >> 14 >= 4 * v5) {
    goto LABEL_11;
  }
  unint64_t v14 = v3 >> 14;
  uint64_t v15 = *(void *)(a1 + 16);
  do
  {
    unsigned __int16 v8 = specialized _ParseInfo.currChar.getter(v4, v2, v3);
    if ((unsigned __int16)(v8 - 58) <= 0xFFF5u
      && (unsigned __int16)((v8 & 0xFFDF) - 91) <= 0xFFE5u
      && (v8 - 36 > 0x3B || ((1 << (v8 - 36)) & 0x800000000400E01) == 0))
    {
      break;
    }
    _ParseInfo.advance()();
    unint64_t v3 = *(void *)(a1 + 16);
    unint64_t v7 = v3 >> 14;
  }
  while (v3 >> 14 < v6);
  uint64_t result = v15;
  if (v7 == v14)
  {
LABEL_11:
    lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
    uint64_t v10 = swift_allocError();
    *uint64_t v11 = 0xD000000000000023;
    v11[1] = 0x80000001823B0E10;

    uint64_t result = 0;
    *(void *)(a1 + 24) = v10;
    return result;
  }
  if (v7 >= v14)
  {
    uint64_t v12 = MEMORY[0x185302300](v15, v3, v4, v2);
    uint64_t result = MEMORY[0x185302370](v12);
    if (v13) {
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenStepPlistError and conformance OpenStepPlistError;
  if (!lazy protocol witness table cache variable for type OpenStepPlistError and conformance OpenStepPlistError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenStepPlistError and conformance OpenStepPlistError);
  }
  return result;
}

uint64_t parseOctal(startingWith:_:)(__int16 a1, uint64_t a2)
{
  char v2 = a1 - 48;
  if ((unsigned __int16)(a1 - 48) >= 0x100u)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    unint64_t v4 = *(void *)a2;
    unint64_t v5 = *(void *)(a2 + 8);
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = *(void *)a2 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v7 = 4 * v6;
    unint64_t v8 = *(void *)(a2 + 16);
    if (4 * v6 > v8 >> 14)
    {
      __int16 v9 = specialized _ParseInfo.currChar.getter(*(void *)a2, *(void *)(a2 + 8), v8);
      if ((unsigned __int16)(v9 - 56) >= 0xFFF8u)
      {
        char v2 = v9 + 8 * v2 - 48;
        _ParseInfo.advance()();
        unint64_t v10 = *(void *)(a2 + 16);
        if (v7 > v10 >> 14)
        {
          __int16 v11 = specialized _ParseInfo.currChar.getter(v4, v5, v10);
          if ((unsigned __int16)(v11 - 56) >= 0xFFF8u)
          {
            char v2 = v11 + 8 * v2 - 48;
            _ParseInfo.advance()();
          }
        }
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(unsigned char *)(inited + 32) = v2;
    id v13 = specialized String.init<A>(bytes:encoding:)(inited, 2);
    unint64_t v15 = v14;
    swift_setDeallocating();
    if (v15)
    {
      unsigned int v16 = specialized Collection.first.getter((uint64_t)v13, v15);
      swift_bridgeObjectRelease();
      if ((v16 & 0x10000) != 0) {
        return 0;
      }
      else {
        return v16;
      }
    }
    else
    {
      lazy protocol witness table accessor for type OpenStepPlistError and conformance OpenStepPlistError();
      uint64_t v18 = swift_allocError();
      *unsigned __int16 v19 = 0xD000000000000032;
      v19[1] = 0x80000001823B0F90;

      uint64_t result = 0;
      *(void *)(a2 + 24) = v18;
    }
  }
  return result;
}

uint64_t parseU16Scalar(_:)(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v4 = 4 * v3;
  unint64_t v5 = a1[2];
  if (4 * v3 <= v5 >> 14) {
    return 0;
  }
  int v7 = specialized _ParseInfo.currChar.getter(*a1, v2, v5);
  if ((unsigned __int16)v7 <= 0x7Fu && isxdigit((unsigned __int16)v7))
  {
    _ParseInfo.advance()();
    unsigned int v8 = v7 - 87;
    if ((unsigned __int16)v7 <= 0x46u) {
      unsigned int v8 = v7 - 55;
    }
    if ((unsigned __int16)v7 <= 0x39u) {
      uint64_t v9 = (v7 - 48);
    }
    else {
      uint64_t v9 = v8;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  unint64_t v10 = a1[2];
  if (v4 > v10 >> 14)
  {
    int v11 = specialized _ParseInfo.currChar.getter(v1, v2, v10);
    if ((unsigned __int16)v11 <= 0x7Fu && isxdigit((unsigned __int16)v11))
    {
      _ParseInfo.advance()();
      if ((unsigned __int16)v11 <= 0x39u)
      {
        int v12 = (unsigned __int16)(16 * v9);
        uint64_t v9 = v12 + (unsigned __int16)(v11 - 48);
        if ((v9 & 0x10000) != 0) {
          goto LABEL_41;
        }
      }
      else if ((unsigned __int16)v11 <= 0x46u)
      {
        uint64_t v9 = (16 * v9 + v11 - 55);
      }
      else
      {
        int v12 = (unsigned __int16)(16 * v9);
        uint64_t v9 = v12 + (unsigned __int16)(v11 - 87);
        if ((v9 & 0x10000) != 0) {
          goto LABEL_39;
        }
      }
    }
    unint64_t v13 = a1[2];
    if (v4 <= v13 >> 14) {
      return v9;
    }
    int v14 = specialized _ParseInfo.currChar.getter(v1, v2, v13);
    if ((unsigned __int16)v14 <= 0x7Fu && isxdigit((unsigned __int16)v14))
    {
      _ParseInfo.advance()();
      if ((unsigned __int16)v14 <= 0x39u)
      {
        int v12 = (unsigned __int16)(16 * v9);
        uint64_t v9 = v12 + (unsigned __int16)(v14 - 48);
        if ((v9 & 0x10000) != 0) {
          goto LABEL_41;
        }
      }
      else if ((unsigned __int16)v14 <= 0x46u)
      {
        uint64_t v9 = (16 * v9 + v14 - 55);
      }
      else
      {
        int v12 = (unsigned __int16)(16 * v9);
        uint64_t v9 = v12 + (unsigned __int16)(v14 - 87);
        if ((v9 & 0x10000) != 0) {
          goto LABEL_39;
        }
      }
    }
    unint64_t v15 = a1[2];
    if (v4 <= v15 >> 14) {
      return v9;
    }
    LODWORD(v1) = specialized _ParseInfo.currChar.getter(v1, v2, v15);
    if ((unsigned __int16)v1 > 0x7Fu || !isxdigit((unsigned __int16)v1)) {
      return v9;
    }
    _ParseInfo.advance()();
    int v12 = 16 * v9;
    if ((unsigned __int16)v1 <= 0x39u) {
      goto LABEL_40;
    }
    if ((unsigned __int16)v1 <= 0x46u) {
      return (v12 + v1 - 55);
    }
    int v12 = (unsigned __int16)(16 * v9);
    uint64_t v9 = v12 + (unsigned __int16)(v1 - 87);
    if ((v9 & 0x10000) == 0) {
      return v9;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    int v12 = (unsigned __int16)v12;
    uint64_t v9 = (unsigned __int16)v12 + (unsigned __int16)(v1 - 48);
    if ((v9 & 0x10000) != 0)
    {
LABEL_41:
      __break(1u);
      return (v12 + v1 - 55);
    }
  }
  return v9;
}

uint64_t getDataBytes(_:bytes:)(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v6 = *a1 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v7 = 4 * v6;
  unint64_t v8 = a1[2];
  if (4 * v6 <= v8 >> 14 || a3 < 1) {
    return 0;
  }
  uint64_t v12 = 0;
  while (1)
  {
    while (1)
    {
      unsigned __int16 v13 = specialized _ParseInfo.currChar.getter(v4, v5, v8);
      if (v13 == 62) {
        return v12;
      }
      if (v13 >= 0x100u) {
        goto LABEL_37;
      }
      char v14 = v13;
      if ((v13 & 0xFEu) - 58 > 0xFFFFFFF5)
      {
        char v16 = -48;
        goto LABEL_21;
      }
      if ((v13 - 103) > 0xF9u)
      {
        char v16 = -87;
        goto LABEL_21;
      }
      if ((v13 - 71) >= 0xFAu) {
        break;
      }
      unsigned int v15 = v13;
      uint64_t result = -1;
      if (v15 > 0x20 || ((1 << v14) & 0x100002400) == 0) {
        return result;
      }
      _ParseInfo.advance()();
      unint64_t v8 = a1[2];
      if (v7 <= v8 >> 14) {
        return v12;
      }
    }
    char v16 = -55;
LABEL_21:
    _ParseInfo.advance()();
    unint64_t v17 = a1[2];
    if (v7 <= v17 >> 14) {
      return -2;
    }
    unsigned __int16 v18 = specialized _ParseInfo.currChar.getter(v4, v5, v17);
    if (v18 >= 0x100u) {
      goto LABEL_37;
    }
    if ((v18 & 0xFEu) - 58 > 0xFFFFFFF5)
    {
      char v19 = -48;
    }
    else if ((v18 - 103) > 0xF9u)
    {
      char v19 = -87;
    }
    else
    {
      if ((v18 - 71) < 0xFAu) {
        return -2;
      }
      char v19 = -55;
    }
    unsigned int v20 = 16 * ((v16 + v14) & 0xF) + (v19 + v18);
    if ((v20 >> 8)) {
      break;
    }
    *(unsigned char *)(a2 + v12++) = v20;
    _ParseInfo.advance()();
    unint64_t v8 = a1[2];
    if (v7 <= v8 >> 14) {
      return v12;
    }
    uint64_t result = v12;
    if (v12 >= a3) {
      return result;
    }
  }
  __break(1u);
LABEL_37:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Data.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<UnsafeMutableBufferPointer<UInt8>>);
  v16[3] = v8;
  v16[4] = lazy protocol witness table accessor for type Slice<UnsafeMutableBufferPointer<UInt8>> and conformance <> Slice<A>();
  uint64_t v9 = (void *)swift_allocObject();
  v16[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  unint64_t v10 = __swift_project_boxed_opaque_existential_1(v16, v8);
  uint64_t v11 = v10[2];
  if (v11)
  {
    uint64_t v12 = v10[1];
    unsigned __int16 v13 = (unsigned char *)(v11 + *v10);
    char v14 = (unsigned char *)(v11 + v12);
  }
  else
  {
    char v14 = 0;
    unsigned __int16 v13 = 0;
  }
  Data._Representation.append(contentsOf:)(v13, v14);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

uint64_t specialized _ParseInfo.currChar.getter(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0) {
    LOBYTE(v6) = 1;
  }
  if ((a3 & 0xC) == 4 << v6) {
    unint64_t v3 = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a1, a2);
  }
  unint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    unint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3 >> 16 >= v7)
  {
    __break(1u);
    goto LABEL_20;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
LABEL_20:
    return String.UTF16View._foreignSubscript(position:)();
  }
  if ((v3 & 1) == 0) {
    _StringGuts.scalarAlignSlow(_:)(v3, a1, a2);
  }
  uint64_t result = _StringGuts.fastUTF8Scalar(startingAt:)();
  if ((v3 & 0xC000) != 0x4000)
  {
    if (WORD1(result))
    {
      uint64_t v9 = (unsigned __int16)((result + 67043328) >> 10) + 55296;
      if ((v9 & 0x10000) == 0) {
        return v9;
      }
      __break(1u);
    }
    return result;
  }
  if (result >= 0x10000) {
    return result & 0x3FF | 0xFFFFDC00;
  }
  __break(1u);
  return result;
}

unint64_t specialized lineNumberStrings(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v3 = HIBYTE(a2) & 0xF;
  }
  else {
    unint64_t v3 = result & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    uint64_t v5 = result;
    unint64_t v6 = 0;
    uint64_t v7 = (result >> 59) & 1;
    if ((a2 & 0x1000000000000000) == 0) {
      LOBYTE(v7) = 1;
    }
    uint64_t v8 = 4 << v7;
    uint64_t v27 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v28 = a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (a2 >> 62) & 1;
    if ((a2 & 0x2000000000000000) == 0) {
      LOBYTE(v9) = (result & 0x8000000000000000) != 0;
    }
    char v30 = v9;
    unint64_t v29 = a3 >> 14;
    if (4 * v3 >= a3 >> 14) {
      uint64_t v10 = a3 >> 14;
    }
    else {
      uint64_t v10 = 4 * v3;
    }
    unint64_t v26 = v10;
    uint64_t v11 = 1;
    unint64_t v12 = 15;
    while (1)
    {
      if (v6 >= v29) {
        return v11;
      }
      unint64_t v13 = v12 & 0xC;
      unint64_t v14 = v12;
      if (v13 == v8)
      {
        uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v5, a2);
        unint64_t v14 = result;
      }
      if (v14 >> 16 >= v3)
      {
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
        return result;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t result = String.UTF16View._foreignSubscript(position:)();
        goto LABEL_32;
      }
      if (v14)
      {
        if ((a2 & 0x2000000000000000) == 0) {
          goto LABEL_22;
        }
      }
      else
      {
        _StringGuts.scalarAlignSlow(_:)(v14, v5, a2);
        if ((a2 & 0x2000000000000000) == 0)
        {
LABEL_22:
          if ((v5 & 0x1000000000000000) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          goto LABEL_27;
        }
      }
      uint64_t v31 = v5;
      uint64_t v32 = v28;
LABEL_27:
      uint64_t result = _decodeScalar(_:startingAt:)();
      if ((v14 & 0xC000) == 0x4000)
      {
        if (result < 0x10000) {
          goto LABEL_126;
        }
        goto LABEL_40;
      }
      if (WORD1(result))
      {
        uint64_t result = (unsigned __int16)((result + 67043328) >> 10) + 55296;
        if ((result & 0x10000) != 0) {
          goto LABEL_128;
        }
      }
LABEL_32:
      if ((unsigned __int16)result == 13)
      {
        BOOL v15 = __OFADD__(v11++, 1);
        if (v15) {
          goto LABEL_129;
        }
        unint64_t v16 = v12;
        if (v13 == v8)
        {
          uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v5, a2);
          unint64_t v16 = result;
        }
        unint64_t v17 = v16 >> 16;
        if (v16 >> 16 >= v3) {
          goto LABEL_130;
        }
        if ((a2 & 0x1000000000000000) != 0)
        {
          uint64_t result = MEMORY[0x185302270](v16, v5, a2);
          unint64_t v18 = result;
        }
        else
        {
          if (v30)
          {
            unint64_t v18 = (v16 & 0xFFFFFFFFFFFF0000) + 65549;
            goto LABEL_75;
          }
          if ((v16 & 0xC001) != 0)
          {
            if ((a2 & 0x2000000000000000) == 0) {
              goto LABEL_51;
            }
LABEL_71:
            uint64_t v31 = v5;
            uint64_t v32 = v28;
            LODWORD(v20) = *((unsigned __int8 *)&v31 + v17);
            if ((v20 & 0x80) == 0)
            {
LABEL_72:
              uint64_t v20 = 1;
LABEL_73:
              v16 += v20 << 16;
              unsigned __int16 v21 = 5;
              goto LABEL_74;
            }
          }
          else
          {
            uint64_t result = _StringGuts.scalarAlignSlow(_:)(v16, v5, a2);
            unint64_t v16 = result & 0xFFFFFFFFFFFFFFF2 | 1;
            unint64_t v17 = result >> 16;
            if ((a2 & 0x2000000000000000) != 0) {
              goto LABEL_71;
            }
LABEL_51:
            uint64_t result = v27;
            if ((v5 & 0x1000000000000000) != 0)
            {
              LODWORD(v20) = *(unsigned __int8 *)(v27 + v17);
              if ((v20 & 0x80) == 0) {
                goto LABEL_72;
              }
            }
            else
            {
              uint64_t result = _StringObject.sharedUTF8.getter();
              LODWORD(v20) = *(unsigned __int8 *)(result + v17);
              if ((v20 & 0x80) == 0) {
                goto LABEL_72;
              }
            }
          }
          LODWORD(v20) = __clz(v20 ^ 0xFF) - 24;
          if (v20 != 4)
          {
            uint64_t v20 = v20;
            goto LABEL_73;
          }
          if ((v16 & 0xC000) != 0)
          {
            uint64_t v20 = 4;
            goto LABEL_73;
          }
          unsigned __int16 v21 = 16388;
LABEL_74:
          unint64_t v18 = v16 & 0xFFFFFFFFFFFF0000 | v21;
        }
LABEL_75:
        if (v26 <= v18 >> 14) {
          goto LABEL_100;
        }
        unint64_t v22 = v18;
        if ((v18 & 0xC) == v8)
        {
          uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v18, v5, a2);
          unint64_t v22 = result;
        }
        if (v22 >> 16 >= v3) {
          goto LABEL_132;
        }
        if ((a2 & 0x1000000000000000) != 0)
        {
          LOWORD(v23) = String.UTF16View._foreignSubscript(position:)();
        }
        else
        {
          if (v22)
          {
            if ((a2 & 0x2000000000000000) == 0)
            {
LABEL_82:
              if ((v5 & 0x1000000000000000) == 0) {
                _StringObject.sharedUTF8.getter();
              }
              goto LABEL_89;
            }
          }
          else
          {
            _StringGuts.scalarAlignSlow(_:)(v22, v5, a2);
            if ((a2 & 0x2000000000000000) == 0) {
              goto LABEL_82;
            }
          }
          uint64_t v31 = v5;
          uint64_t v32 = v28;
LABEL_89:
          uint64_t result = _decodeScalar(_:startingAt:)();
          if ((v22 & 0xC000) == 0x4000)
          {
            if (result < 0x10000) {
              goto LABEL_134;
            }
            LOWORD(v23) = result & 0x3FF | 0xDC00;
          }
          else if (WORD1(result))
          {
            int v23 = (unsigned __int16)((result + 67043328) >> 10) + 55296;
            if ((v23 & 0x10000) != 0) {
              goto LABEL_135;
            }
          }
          else
          {
            LOWORD(v23) = result;
          }
        }
        uint64_t result = specialized FixedWidthInteger.init(_:)(10, 0xE100000000000000);
        if ((result & 0x10000) == 0)
        {
          if ((unsigned __int16)v23 == (unsigned __int16)result) {
            unint64_t v12 = v18;
          }
          unint64_t v13 = v12 & 0xC;
        }
        goto LABEL_100;
      }
LABEL_40:
      unint64_t v19 = v12;
      if (v13 == v8)
      {
        uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v5, a2);
        unint64_t v19 = result;
      }
      if (v19 >> 16 >= v3) {
        goto LABEL_125;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t result = String.UTF16View._foreignSubscript(position:)();
        goto LABEL_65;
      }
      if (v19)
      {
        if ((a2 & 0x2000000000000000) == 0) {
          goto LABEL_46;
        }
      }
      else
      {
        _StringGuts.scalarAlignSlow(_:)(v19, v5, a2);
        if ((a2 & 0x2000000000000000) == 0)
        {
LABEL_46:
          if ((v5 & 0x1000000000000000) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          goto LABEL_60;
        }
      }
      uint64_t v31 = v5;
      uint64_t v32 = v28;
LABEL_60:
      uint64_t result = _decodeScalar(_:startingAt:)();
      if ((v19 & 0xC000) == 0x4000)
      {
        if (result < 0x10000) {
          goto LABEL_131;
        }
        goto LABEL_100;
      }
      if (WORD1(result))
      {
        uint64_t result = (unsigned __int16)((result + 67043328) >> 10) + 55296;
        if ((result & 0x10000) != 0) {
          goto LABEL_133;
        }
      }
LABEL_65:
      if ((unsigned __int16)result == 10)
      {
        BOOL v15 = __OFADD__(v11++, 1);
        if (v15) {
          goto LABEL_127;
        }
      }
LABEL_100:
      if (v13 == v8)
      {
        uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v5, a2);
        unint64_t v12 = result;
      }
      unint64_t v24 = v12 >> 16;
      if (v12 >> 16 >= v3) {
        goto LABEL_124;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t result = MEMORY[0x185302270](v12, v5, a2);
        unint64_t v12 = result;
        goto LABEL_14;
      }
      if (v30)
      {
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65549;
        goto LABEL_14;
      }
      if ((v12 & 0xC001) != 0)
      {
        if ((a2 & 0x2000000000000000) == 0) {
          goto LABEL_107;
        }
      }
      else
      {
        uint64_t result = _StringGuts.scalarAlignSlow(_:)(v12, v5, a2);
        unint64_t v12 = result & 0xFFFFFFFFFFFFFFF2 | 1;
        unint64_t v24 = result >> 16;
        if ((a2 & 0x2000000000000000) == 0)
        {
LABEL_107:
          uint64_t result = v27;
          if ((v5 & 0x1000000000000000) != 0)
          {
            LODWORD(v25) = *(unsigned __int8 *)(v27 + v24);
            if ((v25 & 0x80) == 0) {
              goto LABEL_117;
            }
          }
          else
          {
            uint64_t result = _StringObject.sharedUTF8.getter();
            LODWORD(v25) = *(unsigned __int8 *)(result + v24);
            if ((v25 & 0x80) == 0)
            {
LABEL_117:
              uint64_t v25 = 1;
              goto LABEL_118;
            }
          }
          goto LABEL_109;
        }
      }
      uint64_t v31 = v5;
      uint64_t v32 = v28;
      LODWORD(v25) = *((unsigned __int8 *)&v31 + v24);
      if ((v25 & 0x80) == 0) {
        goto LABEL_117;
      }
LABEL_109:
      LODWORD(v25) = __clz(v25 ^ 0xFF) - 24;
      if (v25 != 4)
      {
        uint64_t v25 = v25;
        goto LABEL_118;
      }
      if ((v12 & 0xC000) != 0)
      {
        uint64_t v25 = 4;
LABEL_118:
        unint64_t v12 = (v12 + (v25 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_14;
      }
      unint64_t v12 = v12 & 0xFFFFFFFFFFFF0000 | 0x4004;
LABEL_14:
      unint64_t v6 = v12 >> 14;
      if (v12 >> 14 >= 4 * v3) {
        return v11;
      }
    }
  }
  return 1;
}

unint64_t lazy protocol witness table accessor for type Slice<UnsafeMutableBufferPointer<UInt8>> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<UnsafeMutableBufferPointer<UInt8>> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<UnsafeMutableBufferPointer<UInt8>> and conformance <> Slice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<UnsafeMutableBufferPointer<UInt8>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<UnsafeMutableBufferPointer<UInt8>> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t sub_181DECEA8()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

ValueMetadata *type metadata accessor for OpenStepPlistError()
{
  return &type metadata for OpenStepPlistError;
}

uint64_t specialized ICULegacyNumberFormatter.parseAsInt<A>(_:upperBound:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = String.UTF16View.distance(from:to:)();
  if (v10)
  {
    uint64_t v11 = v10;
    unint64_t v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v10, 0);
    unint64_t v13 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v16, (uint64_t)(v12 + 4), v11, a1, a2, a3, a4);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    if (v13 != v11) {
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v12 = (void *)MEMORY[0x1E4FBC860];
  }
  v16[0] = 0;
  if (v12[2] >> 31)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  uint64_t v14 = unum_parseInt64();
  swift_release();
  if (v16[0] > 0) {
    return 0;
  }
  *a5 = 0;
  return v14;
}

uint64_t IntegerParseStrategy.init<A>(format:lenient:)@<X0>(_OWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return IntegerParseStrategy.init<A>(format:lenient:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle, a5);
}

{
  return IntegerParseStrategy.init<A>(format:lenient:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle.Percent, a5);
}

uint64_t IntegerParseStrategy.init<A>(format:lenient:)@<X0>(long long *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for IntegerFormatStyle.Currency();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(uint64_t, long long *, uint64_t))(v10 + 16))(a3, a1, v9);
  swift_getWitnessTable();
  uint64_t v11 = (int *)type metadata accessor for IntegerParseStrategy();
  *(unsigned char *)(a3 + v11[11]) = a2;
  uint64_t v12 = v11[13];
  long long v15 = *a1;
  *(_OWORD *)(a3 + v12) = v15;
  outlined init with copy of CurrencyFormatStyleConfiguration.Collection((uint64_t)a1 + *(int *)(v9 + 40), (uint64_t)v8, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  unint64_t v13 = *(void (**)(long long *, uint64_t))(v10 + 8);
  swift_unknownObjectRetain();
  v13(a1, v9);
  swift_storeEnumTagMultiPayload();
  return _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v8, a3 + v11[12], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
}

uint64_t IntegerParseStrategy.init<A>(format:lenient:)@<X0>(_OWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9 = a5(0, a3, a4);
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(void *)(v9 - 8) + 16))(a6, a1, v9);
  swift_getWitnessTable();
  uint64_t v10 = (int *)type metadata accessor for IntegerParseStrategy();
  *(unsigned char *)(a6 + v10[11]) = a2;
  *(_OWORD *)(a6 + v10[13]) = *a1;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)a1 + *(int *)(v9 + 36), a6 + v10[12], type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t IntegerParseStrategy.parse(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X4>, int *a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v14 = type metadata accessor for ICULegacyNumberFormatter.Signature(0);
  uint64_t v15 = *(void *)(*(void *)(v14 - 8) + 64);
  MEMORY[0x1F4188790](v14);
  uint64_t v124 = (uint64_t)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unint64_t v19 = (char *)&v104 - v17;
  if (a3 >> 14 >= a4 >> 14)
  {
    swift_getAssociatedTypeWitness();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v55 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56);
    return v55(a6, 1, 1, TupleTypeMetadata2);
  }
  uint64_t v123 = v18;
  unint64_t v117 = a3;
  uint64_t v118 = a1;
  uint64_t v115 = a2;
  unint64_t v116 = a4;
  uint64_t v119 = a5;
  uint64_t v120 = a6;
  uint64_t v20 = a5[11];
  uint64_t v21 = v7 + a5[12];
  unint64_t v22 = (uint64_t *)(v7 + a5[13]);
  uint64_t v23 = *v22;
  uint64_t v24 = v22[1];
  char v25 = *(unsigned char *)(v7 + v20);
  outlined init with copy of CurrencyFormatStyleConfiguration.Collection(v21, (uint64_t)&v104 - v17, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 64);
  swift_unknownObjectRetain_n();
  uint64_t v28 = v27(ObjectType, v24);
  uint64_t v30 = v29;
  uint64_t v121 = v23;
  swift_unknownObjectRelease();
  uint64_t v31 = (uint64_t *)&v19[*(int *)(v14 + 20)];
  *uint64_t v31 = v28;
  v31[1] = v30;
  v19[*(int *)(v14 + 24)] = v25;
  uint64_t v32 = (uint64_t)v19;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v33 = static ICULegacyNumberFormatter.cache;
  uint64_t v34 = (os_unfair_lock_s *)unk_1E8ED3298;
  uint64_t v35 = v124;
  outlined init with copy of CurrencyFormatStyleConfiguration.Collection(v32, v124, type metadata accessor for ICULegacyNumberFormatter.Signature);
  unint64_t v36 = (*(unsigned __int8 *)(v123 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80);
  uint64_t v37 = swift_allocObject();
  uint64_t v38 = _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWObTm_0(v35, v37 + v36, type metadata accessor for ICULegacyNumberFormatter.Signature);
  MEMORY[0x1F4188790](v38);
  uint64_t v122 = v32;
  *(&v104 - 2) = v32;
  long long v39 = v34 + 4;
  swift_retain_n();
  os_unfair_lock_lock(v34 + 6);
  closure #1 in FormatterCache.formatter(for:creator:)specialized partial apply((uint64_t)&v34[4], (uint64_t *)&v125);
  os_unfair_lock_unlock(v34 + 6);
  swift_release();
  if (v125)
  {
    uint64_t v114 = v37;
    swift_release();
    uint64_t v40 = v122;
    goto LABEL_6;
  }
  os_unfair_lock_t v112 = v34 + 6;
  uint64_t v113 = v34;
  uint64_t v61 = partial apply for implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
  uint64_t v114 = v37;
  uint64_t v111 = v61;
  uint64_t v63 = v113;
  swift_retain();
  os_unfair_lock_lock(v112);
  uint64_t v64 = *(void *)&v63[4]._os_unfair_lock_opaque;
  uint64_t v40 = v122;
  if (v33 >= *(void *)(v64 + 16)) {
    swift_bridgeObjectRetain();
  }
  else {
    *(void *)&v39->_os_unfair_lock_opaque = MEMORY[0x1E4FBC868];
  }
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v129[0] = *(void *)&v39->_os_unfair_lock_opaque;
  uint64_t v66 = v129[0];
  *(void *)&v39->_os_unfair_lock_opaque = 0x8000000000000000;
  unint64_t v68 = specialized __RawDictionaryStorage.find<A>(_:)(v40);
  uint64_t v69 = *(void *)(v66 + 16);
  BOOL v70 = (v67 & 1) == 0;
  uint64_t v71 = v69 + v70;
  if (__OFADD__(v69, v70))
  {
    __break(1u);
  }
  else
  {
    if (*(void *)(v66 + 24) < v71)
    {
      char v72 = v67;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v71, isUniquelyReferenced_nonNull_native);
      uint64_t v73 = v129[0];
      unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(v40);
      if ((v72 & 1) != (v75 & 1)) {
        goto LABEL_67;
      }
      unint64_t v68 = v74;
      char v76 = v72;
      uint64_t v77 = v111;
      uint64_t v66 = v73;
      if ((v76 & 1) == 0) {
        goto LABEL_63;
      }
LABEL_26:
      uint64_t v78 = *(void *)(v66 + 56);
      uint64_t v79 = v66;
      uint64_t v80 = 8 * v68;
      swift_release();
      *(void *)(v78 + v80) = v77;
      uint64_t v66 = v79;
LABEL_64:
      uint64_t v103 = v112;
      *(void *)&v113[4]._os_unfair_lock_opaque = v66;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v103);
      swift_release_n();
      swift_bridgeObjectRelease();
LABEL_6:
      outlined destroy of ICULegacyNumberFormatter.Signature(v40, type metadata accessor for ICULegacyNumberFormatter.Signature);
      swift_unknownObjectRelease();
      swift_release();
      unint64_t v41 = String.subscript.getter();
      unint64_t v43 = v42;
      uint64_t v45 = v44;
      unint64_t v47 = v46;
      v129[0] = 0;
      uint64_t v48 = specialized ICULegacyNumberFormatter.parseAsInt<A>(_:upperBound:)(v41, v42, v44, v46, v129);
      if (v49)
      {
        uint64_t v57 = specialized ICULegacyNumberFormatter.parseAsInt<A>(_:upperBound:)(v41, v43, v45, v47, v129);
        if (v58)
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_getAssociatedTypeWitness();
          uint64_t v62 = swift_getTupleTypeMetadata2();
          return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v120, 1, 1, v62);
        }
        uint64_t v59 = v57;
        unint64_t v125 = v41;
        unint64_t v126 = v43;
        uint64_t v127 = v45;
        unint64_t v128 = v47;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        uint64_t v60 = String.Index.init<A>(utf16Offset:in:)();
        swift_getAssociatedTypeWitness();
        uint64_t v52 = swift_getTupleTypeMetadata2();
        unint64_t v53 = v120;
        *uint64_t v120 = v60;
        unint64_t v125 = v59;
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        dispatch thunk of BinaryInteger.init<A>(clamping:)();
      }
      else
      {
        uint64_t v50 = v48;
        unint64_t v125 = v41;
        unint64_t v126 = v43;
        uint64_t v127 = v45;
        unint64_t v128 = v47;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        uint64_t v51 = String.Index.init<A>(utf16Offset:in:)();
        swift_getAssociatedTypeWitness();
        uint64_t v52 = swift_getTupleTypeMetadata2();
        unint64_t v53 = v120;
        *uint64_t v120 = v51;
        unint64_t v125 = v50;
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        dispatch thunk of BinaryInteger.init<A>(_:)();
      }
      swift_release();
      return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v53, 0, 1, v52);
    }
    uint64_t v77 = v111;
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v67) {
        goto LABEL_26;
      }
LABEL_63:
      uint64_t v101 = v124;
      unint64_t v102 = v68;
      outlined init with copy of CurrencyFormatStyleConfiguration.Collection(v40, v124, type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v102, v101, v77, (void *)v66);
      goto LABEL_64;
    }
  }
  int v107 = v67;
  unint64_t v108 = v68;
  uint64_t v106 = v64;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  uint64_t v81 = static _DictionaryStorage.copy(original:)();
  uint64_t v82 = v66;
  uint64_t v66 = v81;
  uint64_t v83 = v82;
  if (!*(void *)(v82 + 16))
  {
LABEL_62:
    swift_bridgeObjectRelease();
    uint64_t v77 = v111;
    unint64_t v68 = v108;
    uint64_t v40 = v122;
    if (v107) {
      goto LABEL_26;
    }
    goto LABEL_63;
  }
  id v84 = (char *)(v81 + 64);
  uint64_t v85 = 1 << *(unsigned char *)(v66 + 32);
  uint64_t v110 = (char *)(v83 + 64);
  unint64_t v86 = (unint64_t)(v85 + 63) >> 6;
  uint64_t v105 = v66;
  if (v66 != v83 || v84 >= &v110[8 * v86]) {
    memmove(v84, v110, 8 * v86);
  }
  int64_t v87 = 0;
  uint64_t v66 = v105;
  *(void *)(v105 + 16) = *(void *)(v83 + 16);
  uint64_t v88 = 1 << *(unsigned char *)(v83 + 32);
  uint64_t v89 = -1;
  if (v88 < 64) {
    uint64_t v89 = ~(-1 << v88);
  }
  unint64_t v90 = v89 & *(void *)(v83 + 64);
  int64_t v109 = (unint64_t)(v88 + 63) >> 6;
  uint64_t v91 = v124;
  while (1)
  {
    if (v90)
    {
      unint64_t v92 = __clz(__rbit64(v90));
      v90 &= v90 - 1;
      unint64_t v93 = v92 | (v87 << 6);
      uint64_t v94 = v123;
      goto LABEL_36;
    }
    int64_t v98 = v87 + 1;
    uint64_t v94 = v123;
    if (__OFADD__(v87, 1))
    {
      __break(1u);
      goto LABEL_66;
    }
    if (v98 >= v109) {
      goto LABEL_62;
    }
    unint64_t v99 = *(void *)&v110[8 * v98];
    ++v87;
    if (!v99)
    {
      int64_t v87 = v98 + 1;
      if (v98 + 1 >= v109) {
        goto LABEL_62;
      }
      unint64_t v99 = *(void *)&v110[8 * v87];
      if (!v99)
      {
        int64_t v87 = v98 + 2;
        if (v98 + 2 >= v109) {
          goto LABEL_62;
        }
        unint64_t v99 = *(void *)&v110[8 * v87];
        if (!v99)
        {
          int64_t v87 = v98 + 3;
          if (v98 + 3 >= v109) {
            goto LABEL_62;
          }
          unint64_t v99 = *(void *)&v110[8 * v87];
          if (!v99)
          {
            int64_t v87 = v98 + 4;
            if (v98 + 4 >= v109) {
              goto LABEL_62;
            }
            unint64_t v99 = *(void *)&v110[8 * v87];
            if (!v99)
            {
              int64_t v87 = v98 + 5;
              if (v98 + 5 >= v109) {
                goto LABEL_62;
              }
              unint64_t v99 = *(void *)&v110[8 * v87];
              if (!v99)
              {
                int64_t v87 = v98 + 6;
                if (v98 + 6 >= v109) {
                  goto LABEL_62;
                }
                unint64_t v99 = *(void *)&v110[8 * v87];
                if (!v99)
                {
                  int64_t v87 = v98 + 7;
                  if (v98 + 7 >= v109) {
                    goto LABEL_62;
                  }
                  unint64_t v99 = *(void *)&v110[8 * v87];
                  if (!v99) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_61:
    unint64_t v90 = (v99 - 1) & v99;
    unint64_t v93 = __clz(__rbit64(v99)) + (v87 << 6);
LABEL_36:
    unint64_t v95 = *(void *)(v94 + 72) * v93;
    outlined init with copy of CurrencyFormatStyleConfiguration.Collection(*(void *)(v83 + 48) + v95, v91, type metadata accessor for ICULegacyNumberFormatter.Signature);
    uint64_t v96 = 8 * v93;
    uint64_t v97 = *(void *)(*(void *)(v83 + 56) + 8 * v93);
    _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWObTm_0(v91, *(void *)(v66 + 48) + v95, type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(void *)(*(void *)(v66 + 56) + v96) = v97;
    swift_retain();
  }
  int64_t v100 = v98 + 8;
  if (v100 >= v109) {
    goto LABEL_62;
  }
  unint64_t v99 = *(void *)&v110[8 * v100];
  if (v99)
  {
    int64_t v87 = v100;
    uint64_t v94 = v123;
    uint64_t v91 = v124;
    uint64_t v66 = v105;
    goto LABEL_61;
  }
  while (1)
  {
    int64_t v87 = v100 + 1;
    if (__OFADD__(v100, 1)) {
      break;
    }
    uint64_t v94 = v123;
    uint64_t v91 = v124;
    uint64_t v66 = v105;
    if (v87 >= v109) {
      goto LABEL_62;
    }
    unint64_t v99 = *(void *)&v110[8 * v87];
    ++v100;
    if (v99) {
      goto LABEL_61;
    }
  }
LABEL_66:
  __break(1u);
LABEL_67:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t IntegerParseStrategy.formatStyle.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t IntegerParseStrategy.formatStyle.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*IntegerParseStrategy.formatStyle.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t IntegerParseStrategy.lenient.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 44));
}

uint64_t IntegerParseStrategy.lenient.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 44)) = result;
  return result;
}

uint64_t (*IntegerParseStrategy.lenient.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t IntegerParseStrategy.hash(into:)(uint64_t a1, int *a2)
{
  void (*v87)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  Swift::UInt v115;
  Swift::UInt v116;
  Swift::UInt8 v117;
  Swift::UInt8 v118;
  Swift::UInt8 v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int *v131;
  unsigned char v132[144];
  char v133[8];
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  char v148;
  char v149;
  char v150;
  void v151[18];
  unsigned char v152[144];
  unsigned char v153[144];
  unsigned char v154[72];

  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  unint64_t v128 = *(void *)(v5 - 8);
  uint64_t v129 = v5;
  MEMORY[0x1F4188790](v5);
  unint64_t v126 = (char *)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v124 = (uint64_t)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v123 = (uint64_t)&v121 - v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v122 = (uint64_t)&v121 - v12;
  unint64_t v125 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v125);
  uint64_t v14 = (char *)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v127);
  uint64_t v16 = (char *)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  unint64_t v19 = (char *)&v121 - v18;
  uint64_t v20 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v20);
  unint64_t v22 = (unsigned __int8 *)&v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v2 + a2[11]));
  uint64_t v130 = v2;
  uint64_t v131 = a2;
  outlined init with copy of CurrencyFormatStyleConfiguration.Collection(v2 + a2[12], (uint64_t)v22, type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v22, (uint64_t)v16, type metadata accessor for NumberFormatStyleConfiguration.Collection);
      Hasher._combine(_:)(1uLL);
      if (v16[8])
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt64 v32 = *(void *)v16;
        Hasher._combine(_:)(1u);
        if ((v32 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v33 = v32;
        }
        else {
          Swift::UInt64 v33 = 0;
        }
        Hasher._combine(_:)(v33);
      }
      uint64_t v35 = v128;
      uint64_t v34 = v129;
      unint64_t v36 = (int *)v127;
      outlined init with take of LocalePreferences?((uint64_t)(v16 + 16), (uint64_t)v154, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
      specialized Optional<A>.hash(into:)();
      int v37 = v16[73];
      if (v37 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v46 = v37 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v46);
      }
      int v47 = *((unsigned __int16 *)v16 + 37);
      unsigned int v48 = v47 | (v16[76] << 16);
      if (v47 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v48 & 1);
        Hasher._combine(_:)((v48 >> 8) & 1);
        Hasher._combine(_:)(HIWORD(v48) & 1);
      }
      uint64_t v23 = v131;
      int v53 = v16[77];
      if (v53 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v59 = v53 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v59);
      }
      uint64_t v60 = v123;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v16[v36[9]], v123, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v60, 1, v34) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v66 = v126;
        (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v126, v60, v34);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v66, v34);
      }
      int v67 = &v16[v36[10]];
      int v68 = v67[8];
      if (v68 == 255)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v73 = *(void *)v67;
        Hasher._combine(_:)(1u);
        if (v68)
        {
          Hasher._combine(_:)(1uLL);
          if ((v73 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            Swift::UInt64 v79 = v73;
          }
          else {
            Swift::UInt64 v79 = 0;
          }
          Hasher._combine(_:)(v79);
        }
        else
        {
          Hasher._combine(_:)(0);
          Hasher._combine(_:)(v73);
        }
      }
      uint64_t v26 = v130;
      Swift::UInt v80 = v16[v36[11]];
      if (v80 == 3)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v80);
      }
      uint64_t v77 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
      uint64_t v78 = (uint64_t)v16;
      goto LABEL_96;
    case 2u:
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v22, (uint64_t)v14, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
      Hasher._combine(_:)(2uLL);
      uint64_t v23 = v131;
      if (v14[8])
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt64 v38 = *(void *)v14;
        Hasher._combine(_:)(1u);
        if ((v38 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v39 = v38;
        }
        else {
          Swift::UInt64 v39 = 0;
        }
        Hasher._combine(_:)(v39);
      }
      uint64_t v40 = v128;
      unint64_t v41 = (int *)v125;
      outlined init with take of LocalePreferences?((uint64_t)(v14 + 16), (uint64_t)v154, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
      specialized Optional<A>.hash(into:)();
      int v42 = v14[73];
      if (v42 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v49 = v42 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v49);
      }
      unint64_t v50 = *(unsigned int *)(v14 + 74);
      if (*(_DWORD *)(v14 + 74) == 2)
      {
        LOBYTE(v51) = 0;
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v50 & 1);
        Hasher._combine(_:)((v50 >> 8) & 1);
        Hasher._combine(_:)(WORD1(v50) & 1);
        unsigned int v51 = BYTE3(v50) & 1;
      }
      uint64_t v54 = v129;
      Hasher._combine(_:)(v51);
      int v55 = v14[78];
      if (v55 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v61 = v55 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v61);
      }
      uint64_t v62 = v124;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v14[v41[9]], v124, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v62, 1, v54) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v69 = v126;
        (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v126, v62, v54);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v69, v54);
      }
      BOOL v70 = &v14[v41[10]];
      int v71 = v70[8];
      if (v71 == 255)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v74 = *(void *)v70;
        Hasher._combine(_:)(1u);
        if (v71)
        {
          Hasher._combine(_:)(1uLL);
          if ((v74 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            Swift::UInt64 v81 = v74;
          }
          else {
            Swift::UInt64 v81 = 0;
          }
          Hasher._combine(_:)(v81);
        }
        else
        {
          Hasher._combine(_:)(0);
          Hasher._combine(_:)(v74);
        }
      }
      uint64_t v26 = v130;
      Hasher._combine(_:)(v14[v41[11]]);
      Swift::UInt v82 = v14[v41[12]];
      if (v82 == 3)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v82);
      }
      uint64_t v77 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection;
      uint64_t v78 = (uint64_t)v14;
      goto LABEL_96;
    case 3u:
      uint64_t v24 = *v22;
      Swift::UInt v25 = v22[1];
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v24 + 1);
      uint64_t v23 = v131;
      if (v25 == 5)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v25);
      }
      uint64_t v26 = v130;
      goto LABEL_97;
    default:
      _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWObTm_0((uint64_t)v22, (uint64_t)v19, type metadata accessor for NumberFormatStyleConfiguration.Collection);
      Hasher._combine(_:)(0);
      if (v19[8])
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt64 v27 = *(void *)v19;
        Hasher._combine(_:)(1u);
        if ((v27 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          Swift::UInt64 v28 = v27;
        }
        else {
          Swift::UInt64 v28 = 0;
        }
        Hasher._combine(_:)(v28);
      }
      uint64_t v30 = (int *)v127;
      uint64_t v29 = v128;
      outlined init with take of LocalePreferences?((uint64_t)(v19 + 16), (uint64_t)v154, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
      specialized Optional<A>.hash(into:)();
      int v31 = v19[73];
      if (v31 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v43 = v31 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v43);
      }
      int v44 = *((unsigned __int16 *)v19 + 37);
      unsigned int v45 = v44 | (v19[76] << 16);
      if (v44 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v45 & 1);
        Hasher._combine(_:)((v45 >> 8) & 1);
        Hasher._combine(_:)(HIWORD(v45) & 1);
      }
      int v52 = v19[77];
      if (v52 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v56 = v52 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v56);
      }
      uint64_t v57 = v129;
      uint64_t v58 = v122;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)&v19[v30[9]], v122, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v58, 1, v57) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v63 = v126;
        (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v126, v58, v57);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)();
        (*(void (**)(char *, uint64_t))(v29 + 8))(v63, v57);
      }
      uint64_t v64 = &v19[v30[10]];
      int v65 = v64[8];
      if (v65 == 255)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Swift::UInt v72 = *(void *)v64;
        Hasher._combine(_:)(1u);
        if (v65)
        {
          Hasher._combine(_:)(1uLL);
          if ((v72 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            Swift::UInt64 v75 = v72;
          }
          else {
            Swift::UInt64 v75 = 0;
          }
          Hasher._combine(_:)(v75);
        }
        else
        {
          Hasher._combine(_:)(0);
          Hasher._combine(_:)(v72);
        }
      }
      uint64_t v23 = v131;
      Swift::UInt v76 = v19[v30[11]];
      if (v76 == 3)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v76);
      }
      uint64_t v26 = v130;
      uint64_t v77 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
      uint64_t v78 = (uint64_t)v19;
LABEL_96:
      outlined destroy of ICULegacyNumberFormatter.Signature(v78, v77);
LABEL_97:
      uint64_t v83 = *(void *)(v26 + v23[13] + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v85 = *(uint64_t (**)(uint64_t, uint64_t))(v83 + 48);
      swift_unknownObjectRetain();
      if (v85(ObjectType, v83))
      {
        Swift::UInt8 v86 = 1;
LABEL_101:
        Hasher._combine(_:)(v86);
        return swift_unknownObjectRelease();
      }
      Hasher._combine(_:)(0);
      (*(void (**)(uint64_t, uint64_t))(v83 + 64))(ObjectType, v83);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      int64_t v87 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v83 + 464);
      swift_unknownObjectRetain();
      v87(v151, ObjectType, v83);
      swift_unknownObjectRelease();
      outlined init with take of LocalePreferences?((uint64_t)v151, (uint64_t)v152, &demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?((uint64_t)v152, (uint64_t)v153, &demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v153) == 1)
      {
        Swift::UInt8 v86 = 0;
        goto LABEL_101;
      }
      outlined init with take of LocalePreferences?((uint64_t)v152, (uint64_t)v133, &demangling cache variable for type metadata for LocalePreferences?);
      Hasher._combine(_:)(1u);
      if (v133[0] == 2)
      {
        uint64_t v88 = 0;
      }
      else
      {
        uint64_t v88 = v133[0] & 1;
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v88);
      uint64_t v89 = v134;
      if (!v134)
      {
        Hasher._combine(_:)(0);
        uint64_t v94 = v133;
        goto LABEL_116;
      }
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v89 + 16));
      unint64_t v90 = *(void *)(v89 + 16);
      if (!v90)
      {
        outlined init with take of LocalePreferences?((uint64_t)v152, (uint64_t)v132, &demangling cache variable for type metadata for LocalePreferences?);
        uint64_t v94 = v132;
LABEL_116:
        outlined retain of LocalePreferences(v94);
        if (!v135) {
          goto LABEL_110;
        }
        goto LABEL_117;
      }
      outlined retain of LocalePreferences?((uint64_t)v152, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      swift_bridgeObjectRetain();
      uint64_t v91 = v89 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v91 += 16;
        --v90;
      }
      while (v90);
      swift_bridgeObjectRelease();
      if (!v135)
      {
LABEL_110:
        Hasher._combine(_:)(0);
        if (!v136) {
          goto LABEL_111;
        }
        goto LABEL_118;
      }
LABEL_117:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (!v136)
      {
LABEL_111:
        Hasher._combine(_:)(0);
        unint64_t v92 = v137;
        if (!v137) {
          goto LABEL_112;
        }
LABEL_119:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v92);
        swift_bridgeObjectRelease();
        unint64_t v93 = v138;
        if (!v138) {
          goto LABEL_113;
        }
        goto LABEL_120;
      }
LABEL_118:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      unint64_t v92 = v137;
      if (v137) {
        goto LABEL_119;
      }
LABEL_112:
      Hasher._combine(_:)(0);
      unint64_t v93 = v138;
      if (!v138)
      {
LABEL_113:
        Hasher._combine(_:)(0);
        goto LABEL_121;
      }
LABEL_120:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v93);
      swift_bridgeObjectRelease();
LABEL_121:
      unint64_t v95 = v139;
      uint64_t v96 = v140;
      int64_t v98 = v141;
      uint64_t v97 = v142;
      unint64_t v99 = v143;
      if (v139)
      {
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        int64_t v100 = v96;
        uint64_t v101 = v98;
        unint64_t v102 = v97;
        uint64_t v103 = v99;
        uint64_t v104 = v95;
        _CFObject.hash(into:)();
        uint64_t v131 = (int *)v95;
        if (v96) {
          goto LABEL_123;
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        int64_t v109 = v99;
        uint64_t v110 = v96;
        uint64_t v111 = v98;
        os_unfair_lock_t v112 = v97;
        uint64_t v131 = 0;
        if (v96)
        {
LABEL_123:
          Hasher._combine(_:)(1u);
          type metadata accessor for CFDictionaryRef(0);
          _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
          uint64_t v105 = v96;
          _CFObject.hash(into:)();

          if (v98) {
            goto LABEL_124;
          }
          goto LABEL_129;
        }
      }
      Hasher._combine(_:)(0);
      if (v98)
      {
LABEL_124:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        uint64_t v106 = v98;
        _CFObject.hash(into:)();

        if (v97) {
          goto LABEL_125;
        }
LABEL_130:
        Hasher._combine(_:)(0);
        if (v99) {
          goto LABEL_126;
        }
        goto LABEL_131;
      }
LABEL_129:
      Hasher._combine(_:)(0);
      if (!v97) {
        goto LABEL_130;
      }
LABEL_125:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      int v107 = v97;
      _CFObject.hash(into:)();

      if (v99)
      {
LABEL_126:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0);
        _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
        unint64_t v108 = v99;
        _CFObject.hash(into:)();

        goto LABEL_132;
      }
LABEL_131:
      Hasher._combine(_:)(0);
      unint64_t v108 = 0;
LABEL_132:

      uint64_t v113 = v144;
      if (v113)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v113);
        swift_bridgeObjectRelease();
        uint64_t v114 = v145;
        if (v145) {
          goto LABEL_134;
        }
LABEL_137:
        Hasher._combine(_:)(0);
        if (v146) {
          goto LABEL_135;
        }
LABEL_138:
        Hasher._combine(_:)(0);
        goto LABEL_139;
      }
      Hasher._combine(_:)(0);
      uint64_t v114 = v145;
      if (!v145) {
        goto LABEL_137;
      }
LABEL_134:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v114);
      swift_bridgeObjectRelease();
      if (!v146) {
        goto LABEL_138;
      }
LABEL_135:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
LABEL_139:
      if (v147 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v115 = v147 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v115);
      }
      if (v148 == 2)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        unint64_t v116 = v148 & 1;
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v116);
      }
      if (v149 == 2)
      {
        unint64_t v117 = 0;
      }
      else
      {
        unint64_t v117 = v149 & 1;
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v117);
      if (v150 == 2)
      {
        uint64_t v118 = 0;
      }
      else
      {
        uint64_t v119 = v150 & 1;
        Hasher._combine(_:)(1u);
        uint64_t v118 = v119;
      }
      Hasher._combine(_:)(v118);
      outlined retain of LocalePreferences?((uint64_t)v152, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      outlined retain of LocalePreferences?((uint64_t)v152, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      return swift_unknownObjectRelease();
  }
}

uint64_t static IntegerParseStrategy.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (uint64_t v4 = type metadata accessor for IntegerParseStrategy(),
        *(unsigned __int8 *)(a1 + *(int *)(v4 + 44)) == *(unsigned __int8 *)(a2 + *(int *)(v4 + 44)))
    && (uint64_t v5 = v4,
        (specialized static ICULegacyNumberFormatter.NumberFormatType.== infix(_:_:)(a1 + *(int *)(v4 + 48), a2 + *(int *)(v4 + 48)) & 1) != 0))
  {
    uint64_t v6 = *(int *)(v5 + 52);
    long long v7 = *(_OWORD *)(a1 + v6);
    long long v10 = *(_OWORD *)(a2 + v6);
    long long v11 = v7;
    char v8 = specialized static Locale.== infix(_:_:)((uint64_t)&v11, (uint64_t)&v10);
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

unint64_t IntegerParseStrategy.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x745374616D726F66;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x746E65696E656CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x656C61636F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance IntegerParseStrategy<A>.CodingKeys()
{
  return IntegerParseStrategy.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerParseStrategy<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerParseStrategy<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t IntegerParseStrategy.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  v13[0] = a2;
  v13[1] = v3;
  type metadata accessor for IntegerParseStrategy.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  long long v7 = (char *)v13 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  uint64_t v8 = v13[2];
  uint64_t v9 = v13[3];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v9) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v11 = v5;
  uint64_t v12 = v13[0];
  LOBYTE(v14) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v14) = 2;
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_0(&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType, (void (*)(uint64_t))type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  long long v14 = *(_OWORD *)(v8 + *(int *)(v12 + 52));
  char v15 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v7, v4);
}

Swift::Int IntegerParseStrategy.hashValue.getter(int *a1)
{
  Hasher.init(_seed:)();
  IntegerParseStrategy.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

uint64_t IntegerParseStrategy.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = a4;
  uint64_t v31 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v31);
  uint64_t v30 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v8);
  Swift::UInt64 v33 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IntegerParseStrategy.CodingKeys();
  swift_getWitnessTable();
  uint64_t v35 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v28 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t v32 = a3;
  uint64_t v12 = type metadata accessor for IntegerParseStrategy();
  uint64_t v26 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v14 = (char *)&v26 - v13;
  uint64_t v15 = a1[3];
  unint64_t v36 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  uint64_t v34 = v11;
  uint64_t v16 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  }
  uint64_t v17 = v30;
  uint64_t v19 = v28;
  uint64_t v18 = v29;
  LOBYTE(v38) = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v14, v33, a2);
  LOBYTE(v38) = 1;
  char v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v37 = v12;
  v14[*(int *)(v12 + 44)] = v20 & 1;
  LOBYTE(v38) = 2;
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_0(&lazy protocol witness table cache variable for type ICULegacyNumberFormatter.NumberFormatType and conformance ICULegacyNumberFormatter.NumberFormatType, (void (*)(uint64_t))type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t v21 = (uint64_t)v17;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v22 = v37;
  _s10Foundation30NumberFormatStyleConfigurationO10CollectionVWObTm_0(v21, (uint64_t)&v14[*(int *)(v37 + 48)], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  char v39 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v34, v35);
  *(_OWORD *)&v14[*(int *)(v22 + 52)] = v38;
  uint64_t v24 = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 16))(v27, v14, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v23);
}

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerParseStrategy<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return IntegerParseStrategy.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerParseStrategy<A>(void *a1, uint64_t a2)
{
  return IntegerParseStrategy.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerParseStrategy<A>(uint64_t a1, int *a2)
{
  Hasher.init(_seed:)();
  IntegerParseStrategy.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerParseStrategy<A>(uint64_t a1, uint64_t a2)
{
  return static IntegerParseStrategy.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for ParseStrategy.parse(_:) in conformance IntegerParseStrategy<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return IntegerParseStrategy.parse(_:)(*(void *)a1, *(void **)(a1 + 8), a2, a3);
}

uint64_t type metadata accessor for IntegerParseStrategy.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in IntegerParseStrategy<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for IntegerParseStrategy<A>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for IntegerParseStrategy(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10 | 7;
  if (*(_DWORD *)(v9 + 84)) {
    uint64_t v13 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v9 + 64) + 1;
  }
  uint64_t v12 = (v10 + 78) & ~v10;
  uint64_t v14 = v10 + 79;
  if (((v13 + 7 + ((v10 + 79) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 11 <= ((v13 + 7 + v12) & 0xFFFFFFFFFFFFFFF8) + 10) {
    unint64_t v15 = ((v13 + 7 + v12) & 0xFFFFFFFFFFFFFFF8) + 10;
  }
  else {
    unint64_t v15 = ((v13 + 7 + ((v10 + 79) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 11;
  }
  unsigned int v16 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v16 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v15 + (((v10 | 7) + v7 + 1) & ~(v10 | 7)) + 8) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    char v20 = (void *)(v19 + (((v16 | 7) + 16) & ~(unint64_t)(v16 | 7)));
    swift_retain();
  }
  else
  {
    size_t __n = v13;
    uint64_t v60 = v10 + 78;
    uint64_t v62 = *(void *)(v8 - 8);
    uint64_t v63 = v8;
    uint64_t v61 = v13 + 7;
    uint64_t v21 = ~v11;
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    *((unsigned char *)a1 + v7) = *((unsigned char *)a2 + v7);
    uint64_t v22 = ((unint64_t)a1 + v7 + v11 + 1) & v21;
    uint64_t v23 = ((unint64_t)a2 + v7 + v11 + 1) & v21;
    unsigned int v24 = *(unsigned __int8 *)(v23 + v15);
    unsigned int v25 = v24 - 4;
    if (v24 >= 4)
    {
      if (v15 <= 3) {
        int v26 = v15;
      }
      else {
        int v26 = 4;
      }
      switch(v26)
      {
        case 2:
          int v27 = *(unsigned __int16 *)v23;
          break;
        case 3:
          int v27 = *(unsigned __int16 *)v23 | (*(unsigned __int8 *)(v23 + 2) << 16);
          break;
        case 4:
          int v27 = *(_DWORD *)v23;
          break;
        default:
          int v27 = *(unsigned __int8 *)v23;
          break;
      }
      int v28 = (v27 | (v25 << (8 * v15))) + 4;
      unsigned int v24 = v27 + 4;
      if (v15 < 4) {
        unsigned int v24 = v28;
      }
    }
    uint64_t v29 = ~v10;
    char v20 = a1;
    switch(v24)
    {
      case 1u:
        uint64_t v36 = *(void *)v23;
        *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
        *(void *)uint64_t v22 = v36;
        long long v37 = *(_OWORD *)(v23 + 16);
        long long v38 = *(_OWORD *)(v23 + 32);
        long long v39 = *(_OWORD *)(v23 + 48);
        *(_OWORD *)(v22 + 57) = *(_OWORD *)(v23 + 57);
        *(_OWORD *)(v22 + 32) = v38;
        *(_OWORD *)(v22 + 48) = v39;
        *(_OWORD *)(v22 + 16) = v37;
        *(unsigned char *)(v22 + 73) = *(unsigned char *)(v23 + 73);
        LOWORD(v36) = *(_WORD *)(v23 + 74);
        *(unsigned char *)(v22 + 76) = *(unsigned char *)(v23 + 76);
        *(_WORD *)(v22 + 74) = v36;
        *(unsigned char *)(v22 + 77) = *(unsigned char *)(v23 + 77);
        uint64_t v40 = (void *)((v60 + v22) & v29);
        unint64_t v41 = (const void *)((v60 + v23) & v29);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v62 + 48))(v41, 1, v63))
        {
          memcpy(v40, v41, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v62 + 16))(v40, v41, v63);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(v40, 0, 1, v63);
        }
        unint64_t v52 = ((unint64_t)v40 + v61) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v53 = ((unint64_t)v41 + v61) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v54 = *(void *)v53;
        *(unsigned char *)(v52 + 8) = *(unsigned char *)(v53 + 8);
        *(void *)unint64_t v52 = v54;
        *(unsigned char *)(v52 + 9) = *(unsigned char *)(v53 + 9);
        char v48 = 1;
        break;
      case 2u:
        uint64_t v42 = *(void *)v23;
        *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
        *(void *)uint64_t v22 = v42;
        long long v43 = *(_OWORD *)(v23 + 16);
        long long v44 = *(_OWORD *)(v23 + 32);
        long long v45 = *(_OWORD *)(v23 + 48);
        *(_OWORD *)(v22 + 57) = *(_OWORD *)(v23 + 57);
        *(_OWORD *)(v22 + 32) = v44;
        *(_OWORD *)(v22 + 48) = v45;
        *(_OWORD *)(v22 + 16) = v43;
        *(unsigned char *)(v22 + 73) = *(unsigned char *)(v23 + 73);
        *(_DWORD *)(v22 + 74) = *(_DWORD *)(v23 + 74);
        *(unsigned char *)(v22 + 78) = *(unsigned char *)(v23 + 78);
        Swift::UInt v46 = (void *)((v14 + v22) & v29);
        int v47 = (const void *)((v14 + v23) & v29);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v62 + 48))(v47, 1, v63))
        {
          memcpy(v46, v47, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v62 + 16))(v46, v47, v63);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(v46, 0, 1, v63);
        }
        unint64_t v55 = ((unint64_t)v46 + v61) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v56 = ((unint64_t)v47 + v61) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v57 = *(void *)v56;
        *(unsigned char *)(v55 + 8) = *(unsigned char *)(v56 + 8);
        *(void *)unint64_t v55 = v57;
        *(unsigned char *)(v55 + 9) = *(unsigned char *)(v56 + 9);
        *(unsigned char *)(v55 + 10) = *(unsigned char *)(v56 + 10);
        char v48 = 2;
        break;
      case 3u:
        *(_WORD *)uint64_t v22 = *(_WORD *)v23;
        char v48 = 3;
        break;
      default:
        uint64_t v30 = *(void *)v23;
        *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
        *(void *)uint64_t v22 = v30;
        long long v31 = *(_OWORD *)(v23 + 16);
        long long v32 = *(_OWORD *)(v23 + 32);
        long long v33 = *(_OWORD *)(v23 + 48);
        *(_OWORD *)(v22 + 57) = *(_OWORD *)(v23 + 57);
        *(_OWORD *)(v22 + 32) = v32;
        *(_OWORD *)(v22 + 48) = v33;
        *(_OWORD *)(v22 + 16) = v31;
        *(unsigned char *)(v22 + 73) = *(unsigned char *)(v23 + 73);
        LOWORD(v30) = *(_WORD *)(v23 + 74);
        *(unsigned char *)(v22 + 76) = *(unsigned char *)(v23 + 76);
        *(_WORD *)(v22 + 74) = v30;
        *(unsigned char *)(v22 + 77) = *(unsigned char *)(v23 + 77);
        uint64_t v34 = (void *)((v60 + v22) & v29);
        uint64_t v35 = (const void *)((v60 + v23) & v29);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v62 + 48))(v35, 1, v63))
        {
          memcpy(v34, v35, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v62 + 16))(v34, v35, v63);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(v34, 0, 1, v63);
        }
        char v48 = 0;
        unint64_t v49 = ((unint64_t)v34 + v61) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v50 = ((unint64_t)v35 + v61) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v51 = *(void *)v50;
        *(unsigned char *)(v49 + 8) = *(unsigned char *)(v50 + 8);
        *(void *)unint64_t v49 = v51;
        *(unsigned char *)(v49 + 9) = *(unsigned char *)(v50 + 9);
        break;
    }
    *(unsigned char *)(v22 + v15) = v48;
    *(_OWORD *)(((v22 | 7) + v15 + 1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((v23 | 7) + v15 + 1) & 0xFFFFFFFFFFFFFFF8);
    swift_unknownObjectRetain();
  }
  return v20;
}

uint64_t initializeWithCopy for IntegerParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(unsigned char *)(v6 + a1) = *(unsigned char *)(v6 + a2);
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 | 7) + 1;
  uint64_t v13 = (v12 + v7) & ~(v11 | 7);
  uint64_t v14 = (v12 + v8) & ~(v11 | 7);
  uint64_t v15 = v11 + 78;
  if (*(_DWORD *)(v10 + 84)) {
    size_t v16 = *(void *)(v10 + 64);
  }
  else {
    size_t v16 = *(void *)(v10 + 64) + 1;
  }
  size_t v17 = v16 + 7;
  uint64_t v18 = v11 + 79;
  if (((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11 <= ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 10)
    unint64_t v19 = ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 10;
  else {
    unint64_t v19 = ((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11;
  }
  unsigned int v20 = *(unsigned __int8 *)(v14 + v19);
  unsigned int v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v19 <= 3) {
      int v22 = v19;
    }
    else {
      int v22 = 4;
    }
    switch(v22)
    {
      case 2:
        int v23 = *(unsigned __int16 *)v14;
        break;
      case 3:
        int v23 = *(unsigned __int16 *)v14 | (*(unsigned __int8 *)(v14 + 2) << 16);
        break;
      case 4:
        int v23 = *(_DWORD *)v14;
        break;
      default:
        int v23 = *(unsigned __int8 *)v14;
        break;
    }
    int v24 = (v23 | (v21 << (8 * v19))) + 4;
    unsigned int v20 = v23 + 4;
    if (v19 < 4) {
      unsigned int v20 = v24;
    }
  }
  uint64_t v25 = ~v11;
  switch(v20)
  {
    case 1u:
      uint64_t v32 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      *(void *)uint64_t v13 = v32;
      long long v33 = *(_OWORD *)(v14 + 16);
      long long v34 = *(_OWORD *)(v14 + 32);
      long long v35 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v34;
      *(_OWORD *)(v13 + 48) = v35;
      *(_OWORD *)(v13 + 16) = v33;
      *(unsigned char *)(v13 + 73) = *(unsigned char *)(v14 + 73);
      LOWORD(v32) = *(_WORD *)(v14 + 74);
      *(unsigned char *)(v13 + 76) = *(unsigned char *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v32;
      *(unsigned char *)(v13 + 77) = *(unsigned char *)(v14 + 77);
      uint64_t v36 = (void *)((v15 + v13) & v25);
      long long v37 = (const void *)((v15 + v14) & v25);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v37, 1, v9))
      {
        memcpy(v36, v37, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v36, v37, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v36, 0, 1, v9);
      }
      unint64_t v48 = ((unint64_t)v36 + v17) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v49 = ((unint64_t)v37 + v17) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v50 = *(void *)v49;
      *(unsigned char *)(v48 + 8) = *(unsigned char *)(v49 + 8);
      *(void *)unint64_t v48 = v50;
      *(unsigned char *)(v48 + 9) = *(unsigned char *)(v49 + 9);
      char v44 = 1;
      break;
    case 2u:
      uint64_t v38 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      *(void *)uint64_t v13 = v38;
      long long v39 = *(_OWORD *)(v14 + 16);
      long long v40 = *(_OWORD *)(v14 + 32);
      long long v41 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v40;
      *(_OWORD *)(v13 + 48) = v41;
      *(_OWORD *)(v13 + 16) = v39;
      *(unsigned char *)(v13 + 73) = *(unsigned char *)(v14 + 73);
      *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
      *(unsigned char *)(v13 + 78) = *(unsigned char *)(v14 + 78);
      uint64_t v42 = (void *)((v18 + v13) & v25);
      long long v43 = (const void *)((v18 + v14) & v25);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v43, 1, v9))
      {
        memcpy(v42, v43, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v42, v43, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v42, 0, 1, v9);
      }
      unint64_t v51 = ((unint64_t)v42 + v17) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v52 = ((unint64_t)v43 + v17) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v53 = *(void *)v52;
      *(unsigned char *)(v51 + 8) = *(unsigned char *)(v52 + 8);
      *(void *)unint64_t v51 = v53;
      *(unsigned char *)(v51 + 9) = *(unsigned char *)(v52 + 9);
      *(unsigned char *)(v51 + 10) = *(unsigned char *)(v52 + 10);
      char v44 = 2;
      break;
    case 3u:
      *(_WORD *)uint64_t v13 = *(_WORD *)v14;
      char v44 = 3;
      break;
    default:
      uint64_t v26 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      *(void *)uint64_t v13 = v26;
      long long v27 = *(_OWORD *)(v14 + 16);
      long long v28 = *(_OWORD *)(v14 + 32);
      long long v29 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v28;
      *(_OWORD *)(v13 + 48) = v29;
      *(_OWORD *)(v13 + 16) = v27;
      *(unsigned char *)(v13 + 73) = *(unsigned char *)(v14 + 73);
      LOWORD(v26) = *(_WORD *)(v14 + 74);
      *(unsigned char *)(v13 + 76) = *(unsigned char *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v26;
      *(unsigned char *)(v13 + 77) = *(unsigned char *)(v14 + 77);
      uint64_t v30 = (void *)((v15 + v13) & v25);
      long long v31 = (const void *)((v15 + v14) & v25);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v31, 1, v9))
      {
        memcpy(v30, v31, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v30, v31, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v30, 0, 1, v9);
      }
      char v44 = 0;
      unint64_t v45 = ((unint64_t)v30 + v17) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v46 = ((unint64_t)v31 + v17) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v47 = *(void *)v46;
      *(unsigned char *)(v45 + 8) = *(unsigned char *)(v46 + 8);
      *(void *)unint64_t v45 = v47;
      *(unsigned char *)(v45 + 9) = *(unsigned char *)(v46 + 9);
      break;
  }
  *(unsigned char *)(v13 + v19) = v44;
  *(_OWORD *)(((v13 | 7) + v19 + 1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((v14 | 7) + v19 + 1) & 0xFFFFFFFFFFFFFFF8);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IntegerParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = (unsigned char *)(v6 + a2);
  *(unsigned char *)(v6 + a1) = *v8;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v10;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 | 7) + 1;
  uint64_t v14 = (v13 + v7) & ~(v12 | 7);
  uint64_t v15 = (unint64_t)&v8[v13] & ~(v12 | 7);
  if (v14 == v15)
  {
    int v28 = *(_DWORD *)(v10 + 84);
    size_t v29 = *(void *)(v10 + 64);
    uint64_t v30 = (v12 + 79) & ~v12;
    uint64_t v18 = (v12 + 78) & ~v12;
  }
  else
  {
    uint64_t v16 = v9;
    uint64_t v17 = v12 + 78;
    uint64_t v18 = (v12 + 78) & ~v12;
    if (*(_DWORD *)(v10 + 84)) {
      uint64_t v19 = *(void *)(v10 + 64);
    }
    else {
      uint64_t v19 = *(void *)(v10 + 64) + 1;
    }
    unint64_t v20 = ((v19 + 7 + v18) & 0xFFFFFFFFFFFFFFF8) + 10;
    uint64_t v81 = a1;
    unint64_t v21 = (v19 + 7 + ((v12 + 79) & ~v12)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = v21 + 11;
    if (v21 + 11 <= v20) {
      unint64_t v23 = ((v19 + 7 + v18) & 0xFFFFFFFFFFFFFFF8) + 10;
    }
    else {
      unint64_t v23 = v21 + 11;
    }
    unsigned int v24 = *(unsigned __int8 *)(v14 + v23);
    unsigned int v25 = v24 - 4;
    if (v24 >= 4)
    {
      if (v23 <= 3) {
        int v26 = v23;
      }
      else {
        int v26 = 4;
      }
      switch(v26)
      {
        case 2:
          int v27 = *(unsigned __int16 *)v14;
          break;
        case 3:
          int v27 = *(unsigned __int16 *)v14 | (*(unsigned __int8 *)(v14 + 2) << 16);
          break;
        case 4:
          int v27 = *(_DWORD *)v14;
          break;
        default:
          int v27 = *(unsigned __int8 *)v14;
          break;
      }
      int v31 = (v27 | (v25 << (8 * v23))) + 4;
      unsigned int v24 = v27 + 4;
      if (v23 < 4) {
        unsigned int v24 = v31;
      }
    }
    size_t __n = v19;
    uint64_t v32 = ~v12;
    int v84 = *(_DWORD *)(v10 + 84);
    size_t v83 = *(void *)(v10 + 64);
    switch(v24)
    {
      case 2u:
        uint64_t v80 = v12 + 78;
        uint64_t v33 = v14 + v12 + 79;
        goto LABEL_23;
      case 3u:
        goto LABEL_26;
      default:
        uint64_t v80 = v12 + 78;
        uint64_t v33 = v17 + v14;
LABEL_23:
        uint64_t v34 = v33 & v32;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v33 & v32, 1, v9)) {
          (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v34, v16);
        }
        uint64_t v18 = (v12 + 78) & ~v12;
        size_t v35 = v83;
        uint64_t v17 = v80;
        if (!v84) {
LABEL_26:
        }
          size_t v35 = __n;
        unint64_t v36 = ((v18 + v35 + 7) & 0xFFFFFFFFFFFFFFF8) + 10;
        if (v20 > v36) {
          unint64_t v36 = v20;
        }
        if (v22 > v36) {
          unint64_t v36 = v22;
        }
        unsigned int v37 = *(unsigned __int8 *)(v15 + v36);
        unsigned int v38 = v37 - 4;
        if (v37 >= 4)
        {
          if (v23 <= 3) {
            int v39 = v23;
          }
          else {
            int v39 = 4;
          }
          switch(v39)
          {
            case 2:
              int v40 = *(unsigned __int16 *)v15;
              break;
            case 3:
              int v40 = *(unsigned __int16 *)v15 | (*(unsigned __int8 *)(v15 + 2) << 16);
              break;
            case 4:
              int v40 = *(_DWORD *)v15;
              break;
            default:
              int v40 = *(unsigned __int8 *)v15;
              break;
          }
          int v41 = (v40 | (v38 << (8 * v23))) + 4;
          unsigned int v37 = v40 + 4;
          if (v23 < 4) {
            unsigned int v37 = v41;
          }
        }
        switch(v37)
        {
          case 1u:
            uint64_t v49 = *(void *)v15;
            *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
            *(void *)uint64_t v14 = v49;
            long long v50 = *(_OWORD *)(v15 + 16);
            long long v51 = *(_OWORD *)(v15 + 32);
            long long v52 = *(_OWORD *)(v15 + 48);
            *(_OWORD *)(v14 + 57) = *(_OWORD *)(v15 + 57);
            *(_OWORD *)(v14 + 32) = v51;
            *(_OWORD *)(v14 + 48) = v52;
            *(_OWORD *)(v14 + 16) = v50;
            *(unsigned char *)(v14 + 73) = *(unsigned char *)(v15 + 73);
            LOWORD(v49) = *(_WORD *)(v15 + 74);
            *(unsigned char *)(v14 + 76) = *(unsigned char *)(v15 + 76);
            *(_WORD *)(v14 + 74) = v49;
            *(unsigned char *)(v14 + 77) = *(unsigned char *)(v15 + 77);
            uint64_t v53 = (void *)((v17 + v14) & v32);
            uint64_t v54 = (const void *)((v17 + v15) & v32);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v54, 1, v16))
            {
              size_t v55 = __n;
              memcpy(v53, v54, __n);
              int v28 = v84;
              uint64_t v18 = (v12 + 78) & ~v12;
              size_t v29 = v83;
              uint64_t v30 = (v12 + 79) & ~v12;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v53, v54, v16);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v53, 0, 1, v16);
              int v28 = v84;
              uint64_t v18 = (v12 + 78) & ~v12;
              size_t v29 = v83;
              uint64_t v30 = (v12 + 79) & ~v12;
              size_t v55 = __n;
            }
            unint64_t v68 = ((unint64_t)v53 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v69 = ((unint64_t)v54 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v70 = *(void *)v69;
            *(unsigned char *)(v68 + 8) = *(unsigned char *)(v69 + 8);
            *(void *)unint64_t v68 = v70;
            *(unsigned char *)(v68 + 9) = *(unsigned char *)(v69 + 9);
            *(unsigned char *)(v14 + v23) = 1;
            goto LABEL_57;
          case 2u:
            uint64_t v56 = *(void *)v15;
            *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
            *(void *)uint64_t v14 = v56;
            long long v57 = *(_OWORD *)(v15 + 16);
            long long v58 = *(_OWORD *)(v15 + 32);
            long long v59 = *(_OWORD *)(v15 + 48);
            *(_OWORD *)(v14 + 57) = *(_OWORD *)(v15 + 57);
            *(_OWORD *)(v14 + 32) = v58;
            *(_OWORD *)(v14 + 48) = v59;
            *(_OWORD *)(v14 + 16) = v57;
            *(unsigned char *)(v14 + 73) = *(unsigned char *)(v15 + 73);
            *(_DWORD *)(v14 + 74) = *(_DWORD *)(v15 + 74);
            *(unsigned char *)(v14 + 78) = *(unsigned char *)(v15 + 78);
            uint64_t v60 = (const void *)((v12 + 79 + v15) & v32);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v60, 1, v16))
            {
              size_t v61 = __n;
              memcpy((void *)((v14 + v12 + 79) & v32), v60, __n);
            }
            else
            {
              (*(void (**)(uint64_t, const void *, uint64_t))(v11 + 16))((v14 + v12 + 79) & v32, v60, v16);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))((v14 + v12 + 79) & v32, 0, 1, v16);
              size_t v61 = __n;
            }
            unint64_t v62 = (((v14 + v12 + 79) & v32) + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v63 = ((unint64_t)v60 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v64 = *(void *)v63;
            *(unsigned char *)(v62 + 8) = *(unsigned char *)(v63 + 8);
            *(void *)unint64_t v62 = v64;
            *(unsigned char *)(v62 + 9) = *(unsigned char *)(v63 + 9);
            *(unsigned char *)(v62 + 10) = *(unsigned char *)(v63 + 10);
            *(unsigned char *)(v14 + v23) = 2;
            a1 = v81;
            int v28 = v84;
            uint64_t v18 = (v12 + 78) & ~v12;
            size_t v29 = v83;
            goto LABEL_52;
          case 3u:
            *(_WORD *)uint64_t v14 = *(_WORD *)v15;
            *(unsigned char *)(v14 + v23) = 3;
            a1 = v81;
            int v28 = v84;
            size_t v29 = v83;
LABEL_52:
            uint64_t v30 = (v12 + 79) & ~v12;
            break;
          default:
            uint64_t v42 = *(void *)v15;
            *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
            *(void *)uint64_t v14 = v42;
            long long v43 = *(_OWORD *)(v15 + 16);
            long long v44 = *(_OWORD *)(v15 + 32);
            long long v45 = *(_OWORD *)(v15 + 48);
            *(_OWORD *)(v14 + 57) = *(_OWORD *)(v15 + 57);
            *(_OWORD *)(v14 + 32) = v44;
            *(_OWORD *)(v14 + 48) = v45;
            *(_OWORD *)(v14 + 16) = v43;
            *(unsigned char *)(v14 + 73) = *(unsigned char *)(v15 + 73);
            LOWORD(v42) = *(_WORD *)(v15 + 74);
            *(unsigned char *)(v14 + 76) = *(unsigned char *)(v15 + 76);
            *(_WORD *)(v14 + 74) = v42;
            *(unsigned char *)(v14 + 77) = *(unsigned char *)(v15 + 77);
            unint64_t v46 = (void *)((v17 + v14) & v32);
            uint64_t v47 = (const void *)((v17 + v15) & v32);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v47, 1, v16))
            {
              size_t v48 = __n;
              memcpy(v46, v47, __n);
              int v28 = v84;
              uint64_t v18 = (v12 + 78) & ~v12;
              size_t v29 = v83;
              uint64_t v30 = (v12 + 79) & ~v12;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v46, v47, v16);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v46, 0, 1, v16);
              int v28 = v84;
              uint64_t v18 = (v12 + 78) & ~v12;
              size_t v29 = v83;
              uint64_t v30 = (v12 + 79) & ~v12;
              size_t v48 = __n;
            }
            unint64_t v65 = ((unint64_t)v46 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v66 = ((unint64_t)v47 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v67 = *(void *)v66;
            *(unsigned char *)(v65 + 8) = *(unsigned char *)(v66 + 8);
            *(void *)unint64_t v65 = v67;
            *(unsigned char *)(v65 + 9) = *(unsigned char *)(v66 + 9);
            *(unsigned char *)(v14 + v23) = 0;
LABEL_57:
            a1 = v81;
            break;
        }
        break;
    }
  }
  if (v28) {
    size_t v71 = v29;
  }
  else {
    size_t v71 = v29 + 1;
  }
  size_t v72 = v71 + 7;
  unint64_t v73 = ((v72 + v18) & 0xFFFFFFFFFFFFFFF8) + 10;
  unint64_t v74 = ((v72 + v30) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v74 <= v73) {
    unint64_t v74 = v73;
  }
  unint64_t v75 = v74 + 1;
  Swift::UInt v76 = (void *)(((v14 | 7) + v75) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v77 = (void *)(((v15 | 7) + v75) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v78 = v77[1];
  *Swift::UInt v76 = *v77;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v76[1] = v78;
  return a1;
}

uint64_t initializeWithTake for IntegerParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(unsigned char *)(v6 + a1) = *(unsigned char *)(v6 + a2);
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 | 7) + 1;
  uint64_t v13 = (v12 + v7) & ~(v11 | 7);
  uint64_t v14 = (v12 + v8) & ~(v11 | 7);
  uint64_t v15 = v11 + 78;
  if (*(_DWORD *)(v10 + 84)) {
    size_t v16 = *(void *)(v10 + 64);
  }
  else {
    size_t v16 = *(void *)(v10 + 64) + 1;
  }
  size_t v17 = v16 + 7;
  uint64_t v18 = v11 + 79;
  if (((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11 <= ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 10)
    unint64_t v19 = ((v16 + 7 + ((v11 + 78) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 10;
  else {
    unint64_t v19 = ((v16 + 7 + ((v11 + 79) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 11;
  }
  unsigned int v20 = *(unsigned __int8 *)(v14 + v19);
  unsigned int v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v19 <= 3) {
      int v22 = v19;
    }
    else {
      int v22 = 4;
    }
    switch(v22)
    {
      case 2:
        int v23 = *(unsigned __int16 *)v14;
        break;
      case 3:
        int v23 = *(unsigned __int16 *)v14 | (*(unsigned __int8 *)(v14 + 2) << 16);
        break;
      case 4:
        int v23 = *(_DWORD *)v14;
        break;
      default:
        int v23 = *(unsigned __int8 *)v14;
        break;
    }
    int v24 = (v23 | (v21 << (8 * v19))) + 4;
    unsigned int v20 = v23 + 4;
    if (v19 < 4) {
      unsigned int v20 = v24;
    }
  }
  uint64_t v25 = ~v11;
  switch(v20)
  {
    case 1u:
      uint64_t v32 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      *(void *)uint64_t v13 = v32;
      long long v33 = *(_OWORD *)(v14 + 16);
      long long v34 = *(_OWORD *)(v14 + 32);
      long long v35 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v34;
      *(_OWORD *)(v13 + 48) = v35;
      *(_OWORD *)(v13 + 16) = v33;
      *(unsigned char *)(v13 + 73) = *(unsigned char *)(v14 + 73);
      LOWORD(v32) = *(_WORD *)(v14 + 74);
      *(unsigned char *)(v13 + 76) = *(unsigned char *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v32;
      *(unsigned char *)(v13 + 77) = *(unsigned char *)(v14 + 77);
      unint64_t v36 = (void *)((v15 + v13) & v25);
      unsigned int v37 = (const void *)((v15 + v14) & v25);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v37, 1, v9))
      {
        memcpy(v36, v37, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v36, v37, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v36, 0, 1, v9);
      }
      unint64_t v48 = ((unint64_t)v36 + v17) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v49 = ((unint64_t)v37 + v17) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v50 = *(void *)v49;
      *(unsigned char *)(v48 + 8) = *(unsigned char *)(v49 + 8);
      *(void *)unint64_t v48 = v50;
      *(unsigned char *)(v48 + 9) = *(unsigned char *)(v49 + 9);
      char v44 = 1;
      break;
    case 2u:
      uint64_t v38 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      *(void *)uint64_t v13 = v38;
      long long v39 = *(_OWORD *)(v14 + 16);
      long long v40 = *(_OWORD *)(v14 + 32);
      long long v41 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v40;
      *(_OWORD *)(v13 + 48) = v41;
      *(_OWORD *)(v13 + 16) = v39;
      *(unsigned char *)(v13 + 73) = *(unsigned char *)(v14 + 73);
      *(_DWORD *)(v13 + 74) = *(_DWORD *)(v14 + 74);
      *(unsigned char *)(v13 + 78) = *(unsigned char *)(v14 + 78);
      uint64_t v42 = (void *)((v18 + v13) & v25);
      long long v43 = (const void *)((v18 + v14) & v25);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v43, 1, v9))
      {
        memcpy(v42, v43, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v42, v43, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v42, 0, 1, v9);
      }
      unint64_t v51 = ((unint64_t)v42 + v17) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v52 = ((unint64_t)v43 + v17) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v53 = *(void *)v52;
      *(unsigned char *)(v51 + 8) = *(unsigned char *)(v52 + 8);
      *(void *)unint64_t v51 = v53;
      *(unsigned char *)(v51 + 9) = *(unsigned char *)(v52 + 9);
      *(unsigned char *)(v51 + 10) = *(unsigned char *)(v52 + 10);
      char v44 = 2;
      break;
    case 3u:
      *(_WORD *)uint64_t v13 = *(_WORD *)v14;
      char v44 = 3;
      break;
    default:
      uint64_t v26 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      *(void *)uint64_t v13 = v26;
      long long v27 = *(_OWORD *)(v14 + 16);
      long long v28 = *(_OWORD *)(v14 + 32);
      long long v29 = *(_OWORD *)(v14 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
      *(_OWORD *)(v13 + 32) = v28;
      *(_OWORD *)(v13 + 48) = v29;
      *(_OWORD *)(v13 + 16) = v27;
      *(unsigned char *)(v13 + 73) = *(unsigned char *)(v14 + 73);
      LOWORD(v26) = *(_WORD *)(v14 + 74);
      *(unsigned char *)(v13 + 76) = *(unsigned char *)(v14 + 76);
      *(_WORD *)(v13 + 74) = v26;
      *(unsigned char *)(v13 + 77) = *(unsigned char *)(v14 + 77);
      uint64_t v30 = (void *)((v15 + v13) & v25);
      int v31 = (const void *)((v15 + v14) & v25);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v31, 1, v9))
      {
        memcpy(v30, v31, v16);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v30, v31, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v30, 0, 1, v9);
      }
      char v44 = 0;
      unint64_t v45 = ((unint64_t)v30 + v17) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v46 = ((unint64_t)v31 + v17) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v47 = *(void *)v46;
      *(unsigned char *)(v45 + 8) = *(unsigned char *)(v46 + 8);
      *(void *)unint64_t v45 = v47;
      *(unsigned char *)(v45 + 9) = *(unsigned char *)(v46 + 9);
      break;
  }
  *(unsigned char *)(v13 + v19) = v44;
  *(_OWORD *)(((v13 | 7) + v19 + 1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((v14 | 7) + v19 + 1) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for IntegerParseStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = (unsigned char *)(v6 + a2);
  *(unsigned char *)(v6 + a1) = *v8;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v10;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 | 7) + 1;
  uint64_t v14 = (v13 + v7) & ~(v12 | 7);
  uint64_t v15 = (unint64_t)&v8[v13] & ~(v12 | 7);
  if (v14 == v15)
  {
    int v28 = *(_DWORD *)(v10 + 84);
    size_t v29 = *(void *)(v10 + 64);
    uint64_t v30 = (v12 + 79) & ~v12;
    uint64_t v18 = (v12 + 78) & ~v12;
  }
  else
  {
    uint64_t v16 = v9;
    uint64_t v17 = v12 + 78;
    uint64_t v18 = (v12 + 78) & ~v12;
    if (*(_DWORD *)(v10 + 84)) {
      uint64_t v19 = *(void *)(v10 + 64);
    }
    else {
      uint64_t v19 = *(void *)(v10 + 64) + 1;
    }
    unint64_t v20 = ((v19 + 7 + v18) & 0xFFFFFFFFFFFFFFF8) + 10;
    uint64_t v81 = a1;
    unint64_t v21 = (v19 + 7 + ((v12 + 79) & ~v12)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = v21 + 11;
    if (v21 + 11 <= v20) {
      unint64_t v23 = ((v19 + 7 + v18) & 0xFFFFFFFFFFFFFFF8) + 10;
    }
    else {
      unint64_t v23 = v21 + 11;
    }
    unsigned int v24 = *(unsigned __int8 *)(v14 + v23);
    unsigned int v25 = v24 - 4;
    if (v24 >= 4)
    {
      if (v23 <= 3) {
        int v26 = v23;
      }
      else {
        int v26 = 4;
      }
      switch(v26)
      {
        case 2:
          int v27 = *(unsigned __int16 *)v14;
          break;
        case 3:
          int v27 = *(unsigned __int16 *)v14 | (*(unsigned __int8 *)(v14 + 2) << 16);
          break;
        case 4:
          int v27 = *(_DWORD *)v14;
          break;
        default:
          int v27 = *(unsigned __int8 *)v14;
          break;
      }
      int v31 = (v27 | (v25 << (8 * v23))) + 4;
      unsigned int v24 = v27 + 4;
      if (v23 < 4) {
        unsigned int v24 = v31;
      }
    }
    size_t __n = v19;
    uint64_t v32 = ~v12;
    int v84 = *(_DWORD *)(v10 + 84);
    size_t v83 = *(void *)(v10 + 64);
    switch(v24)
    {
      case 2u:
        uint64_t v80 = v12 + 78;
        uint64_t v33 = v14 + v12 + 79;
        goto LABEL_23;
      case 3u:
        goto LABEL_26;
      default:
        uint64_t v80 = v12 + 78;
        uint64_t v33 = v17 + v14;
LABEL_23:
        uint64_t v34 = v33 & v32;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v33 & v32, 1, v9)) {
          (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v34, v16);
        }
        uint64_t v18 = (v12 + 78) & ~v12;
        size_t v35 = v83;
        uint64_t v17 = v80;
        if (!v84) {
LABEL_26:
        }
          size_t v35 = __n;
        unint64_t v36 = ((v18 + v35 + 7) & 0xFFFFFFFFFFFFFFF8) + 10;
        if (v20 > v36) {
          unint64_t v36 = v20;
        }
        if (v22 > v36) {
          unint64_t v36 = v22;
        }
        unsigned int v37 = *(unsigned __int8 *)(v15 + v36);
        unsigned int v38 = v37 - 4;
        if (v37 >= 4)
        {
          if (v23 <= 3) {
            int v39 = v23;
          }
          else {
            int v39 = 4;
          }
          switch(v39)
          {
            case 2:
              int v40 = *(unsigned __int16 *)v15;
              break;
            case 3:
              int v40 = *(unsigned __int16 *)v15 | (*(unsigned __int8 *)(v15 + 2) << 16);
              break;
            case 4:
              int v40 = *(_DWORD *)v15;
              break;
            default:
              int v40 = *(unsigned __int8 *)v15;
              break;
          }
          int v41 = (v40 | (v38 << (8 * v23))) + 4;
          unsigned int v37 = v40 + 4;
          if (v23 < 4) {
            unsigned int v37 = v41;
          }
        }
        switch(v37)
        {
          case 1u:
            uint64_t v49 = *(void *)v15;
            *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
            *(void *)uint64_t v14 = v49;
            long long v50 = *(_OWORD *)(v15 + 16);
            long long v51 = *(_OWORD *)(v15 + 32);
            long long v52 = *(_OWORD *)(v15 + 48);
            *(_OWORD *)(v14 + 57) = *(_OWORD *)(v15 + 57);
            *(_OWORD *)(v14 + 32) = v51;
            *(_OWORD *)(v14 + 48) = v52;
            *(_OWORD *)(v14 + 16) = v50;
            *(unsigned char *)(v14 + 73) = *(unsigned char *)(v15 + 73);
            LOWORD(v49) = *(_WORD *)(v15 + 74);
            *(unsigned char *)(v14 + 76) = *(unsigned char *)(v15 + 76);
            *(_WORD *)(v14 + 74) = v49;
            *(unsigned char *)(v14 + 77) = *(unsigned char *)(v15 + 77);
            uint64_t v53 = (void *)((v17 + v14) & v32);
            uint64_t v54 = (const void *)((v17 + v15) & v32);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v54, 1, v16))
            {
              size_t v55 = __n;
              memcpy(v53, v54, __n);
              int v28 = v84;
              uint64_t v18 = (v12 + 78) & ~v12;
              size_t v29 = v83;
              uint64_t v30 = (v12 + 79) & ~v12;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v53, v54, v16);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v53, 0, 1, v16);
              int v28 = v84;
              uint64_t v18 = (v12 + 78) & ~v12;
              size_t v29 = v83;
              uint64_t v30 = (v12 + 79) & ~v12;
              size_t v55 = __n;
            }
            unint64_t v68 = ((unint64_t)v53 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v69 = ((unint64_t)v54 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v70 = *(void *)v69;
            *(unsigned char *)(v68 + 8) = *(unsigned char *)(v69 + 8);
            *(void *)unint64_t v68 = v70;
            *(unsigned char *)(v68 + 9) = *(unsigned char *)(v69 + 9);
            *(unsigned char *)(v14 + v23) = 1;
            goto LABEL_57;
          case 2u:
            uint64_t v56 = *(void *)v15;
            *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
            *(void *)uint64_t v14 = v56;
            long long v57 = *(_OWORD *)(v15 + 16);
            long long v58 = *(_OWORD *)(v15 + 32);
            long long v59 = *(_OWORD *)(v15 + 48);
            *(_OWORD *)(v14 + 57) = *(_OWORD *)(v15 + 57);
            *(_OWORD *)(v14 + 32) = v58;
            *(_OWORD *)(v14 + 48) = v59;
            *(_OWORD *)(v14 + 16) = v57;
            *(unsigned char *)(v14 + 73) = *(unsigned char *)(v15 + 73);
            *(_DWORD *)(v14 + 74) = *(_DWORD *)(v15 + 74);
            *(unsigned char *)(v14 + 78) = *(unsigned char *)(v15 + 78);
            uint64_t v60 = (const void *)((v12 + 79 + v15) & v32);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v60, 1, v16))
            {
              size_t v61 = __n;
              memcpy((void *)((v14 + v12 + 79) & v32), v60, __n);
            }
            else
            {
              (*(void (**)(uint64_t, const void *, uint64_t))(v11 + 32))((v14 + v12 + 79) & v32, v60, v16);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))((v14 + v12 + 79) & v32, 0, 1, v16);
              size_t v61 = __n;
            }
            unint64_t v62 = (((v14 + v12 + 79) & v32) + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v63 = ((unint64_t)v60 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v64 = *(void *)v63;
            *(unsigned char *)(v62 + 8) = *(unsigned char *)(v63 + 8);
            *(void *)unint64_t v62 = v64;
            *(unsigned char *)(v62 + 9) = *(unsigned char *)(v63 + 9);
            *(unsigned char *)(v62 + 10) = *(unsigned char *)(v63 + 10);
            *(unsigned char *)(v14 + v23) = 2;
            a1 = v81;
            int v28 = v84;
            uint64_t v18 = (v12 + 78) & ~v12;
            size_t v29 = v83;
            goto LABEL_52;
          case 3u:
            *(_WORD *)uint64_t v14 = *(_WORD *)v15;
            *(unsigned char *)(v14 + v23) = 3;
            a1 = v81;
            int v28 = v84;
            size_t v29 = v83;
LABEL_52:
            uint64_t v30 = (v12 + 79) & ~v12;
            break;
          default:
            uint64_t v42 = *(void *)v15;
            *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
            *(void *)uint64_t v14 = v42;
            long long v43 = *(_OWORD *)(v15 + 16);
            long long v44 = *(_OWORD *)(v15 + 32);
            long long v45 = *(_OWORD *)(v15 + 48);
            *(_OWORD *)(v14 + 57) = *(_OWORD *)(v15 + 57);
            *(_OWORD *)(v14 + 32) = v44;
            *(_OWORD *)(v14 + 48) = v45;
            *(_OWORD *)(v14 + 16) = v43;
            *(unsigned char *)(v14 + 73) = *(unsigned char *)(v15 + 73);
            LOWORD(v42) = *(_WORD *)(v15 + 74);
            *(unsigned char *)(v14 + 76) = *(unsigned char *)(v15 + 76);
            *(_WORD *)(v14 + 74) = v42;
            *(unsigned char *)(v14 + 77) = *(unsigned char *)(v15 + 77);
            unint64_t v46 = (void *)((v17 + v14) & v32);
            uint64_t v47 = (const void *)((v17 + v15) & v32);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v47, 1, v16))
            {
              size_t v48 = __n;
              memcpy(v46, v47, __n);
              int v28 = v84;
              uint64_t v18 = (v12 + 78) & ~v12;
              size_t v29 = v83;
              uint64_t v30 = (v12 + 79) & ~v12;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v46, v47, v16);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v46, 0, 1, v16);
              int v28 = v84;
              uint64_t v18 = (v12 + 78) & ~v12;
              size_t v29 = v83;
              uint64_t v30 = (v12 + 79) & ~v12;
              size_t v48 = __n;
            }
            unint64_t v65 = ((unint64_t)v46 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v66 = ((unint64_t)v47 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v67 = *(void *)v66;
            *(unsigned char *)(v65 + 8) = *(unsigned char *)(v66 + 8);
            *(void *)unint64_t v65 = v67;
            *(unsigned char *)(v65 + 9) = *(unsigned char *)(v66 + 9);
            *(unsigned char *)(v14 + v23) = 0;
LABEL_57:
            a1 = v81;
            break;
        }
        break;
    }
  }
  if (v28) {
    size_t v71 = v29;
  }
  else {
    size_t v71 = v29 + 1;
  }
  size_t v72 = v71 + 7;
  unint64_t v73 = ((v72 + v18) & 0xFFFFFFFFFFFFFFF8) + 10;
  unint64_t v74 = ((v72 + v30) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v74 <= v73) {
    unint64_t v74 = v73;
  }
  unint64_t v75 = v74 + 1;
  Swift::UInt v76 = (void *)(((v14 | 7) + v75) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v77 = (void *)(((v15 | 7) + v75) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v78 = v77[1];
  *Swift::UInt v76 = *v77;
  swift_unknownObjectRelease();
  v76[1] = v78;
  return a1;
}

uint64_t getEnumTagSinglePayload for IntegerParseStrategy(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(type metadata accessor for FloatingPointRoundingRule() - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  int v10 = *(_DWORD *)(v8 + 84);
  uint64_t v11 = *(void *)(v8 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v7;
  }
  BOOL v13 = v10 == 0;
  uint64_t v14 = *(void *)(v6 + 64);
  if (v13) {
    ++v11;
  }
  uint64_t v15 = v11 + 7;
  unint64_t v16 = ((v15 + ((v9 + 78) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 10;
  unint64_t v17 = ((v15 + ((v9 + 79) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v17 > v16) {
    unint64_t v16 = v17;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v18 = v9 | 7;
  if (v12 < a2)
  {
    unint64_t v19 = ((v16 + ((v14 + v18 + 1) & ~v18) + 8) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v20 = v19 & 0xFFFFFFF8;
    if ((v19 & 0xFFFFFFF8) != 0) {
      unsigned int v21 = 2;
    }
    else {
      unsigned int v21 = a2 - v12 + 1;
    }
    if (v21 >= 0x10000) {
      unsigned int v22 = 4;
    }
    else {
      unsigned int v22 = 2;
    }
    if (v21 < 0x100) {
      unsigned int v22 = 1;
    }
    if (v21 >= 2) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    switch(v23)
    {
      case 1:
        int v24 = *((unsigned __int8 *)a1 + v19);
        if (!v24) {
          break;
        }
        goto LABEL_26;
      case 2:
        int v24 = *(unsigned __int16 *)((char *)a1 + v19);
        if (v24) {
          goto LABEL_26;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x181DF2014);
      case 4:
        int v24 = *(int *)((char *)a1 + v19);
        if (!v24) {
          break;
        }
LABEL_26:
        int v26 = v24 - 1;
        if (v20)
        {
          int v26 = 0;
          int v27 = *a1;
        }
        else
        {
          int v27 = 0;
        }
        return v12 + (v27 | v26) + 1;
      default:
        break;
    }
  }
  if (v7 < 0x7FFFFFFF)
  {
    unint64_t v29 = *(void *)(((((unint64_t)a1 + v14 + v18 + 1) & ~v18 | 7) + v16 + 1) & 0xFFFFFFFFFFFFFFF8);
    if (v29 >= 0xFFFFFFFF) {
      LODWORD(v29) = -1;
    }
    return (v29 + 1);
  }
  else
  {
    int v28 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v6 + 48);
    return v28(a1, v7, v5);
  }
}

void storeEnumTagSinglePayload for IntegerParseStrategy(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v35 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(type metadata accessor for FloatingPointRoundingRule() - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 + 78) & ~v11;
  int v13 = *(_DWORD *)(v10 + 84);
  uint64_t v14 = *(void *)(v10 + 64);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = v9;
  }
  BOOL v16 = v13 == 0;
  uint64_t v17 = (v11 + 79) & ~v11;
  uint64_t v18 = *(void *)(v8 + 64);
  uint64_t v19 = v11 | 7;
  uint64_t v20 = (v18 + (v11 | 7) + 1) & ~(v11 | 7);
  if (v16) {
    uint64_t v21 = v14 + 1;
  }
  else {
    uint64_t v21 = v14;
  }
  uint64_t v22 = v21 + 7;
  unint64_t v23 = ((v22 + v12) & 0xFFFFFFFFFFFFFFF8) + 10;
  unint64_t v24 = ((v22 + v17) & 0xFFFFFFFFFFFFFFF8) + 11;
  if (v24 <= v23) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = ((v24 + v20 + 8) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v15 >= a3)
  {
    int v28 = 0;
    int v29 = a2 - v15;
    if (a2 <= v15)
    {
LABEL_22:
      switch(v28)
      {
        case 1:
          *((unsigned char *)a1 + v25) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_35;
        case 2:
          *(_WORD *)((char *)a1 + v25) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_35;
        case 3:
          goto LABEL_48;
        case 4:
          *(_DWORD *)((char *)a1 + v25) = 0;
          goto LABEL_34;
        default:
LABEL_34:
          if (a2)
          {
LABEL_35:
            if (v9 < 0x7FFFFFFF)
            {
              uint64_t v33 = (void *)(((((unint64_t)a1 + v18 + v19 + 1) & ~v19 | 7) + v24 + 1) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v34 = a2 ^ 0x80000000;
                v33[1] = 0;
              }
              else
              {
                uint64_t v34 = (a2 - 1);
              }
              *uint64_t v33 = v34;
            }
            else
            {
              uint64_t v32 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v35 + 56);
              v32(a1, a2, v9, v7);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((v24 + v20 + 8) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v26 = a3 - v15 + 1;
    }
    else {
      unsigned int v26 = 2;
    }
    if (v26 >= 0x10000) {
      int v27 = 4;
    }
    else {
      int v27 = 2;
    }
    if (v26 < 0x100) {
      int v27 = 1;
    }
    if (v26 >= 2) {
      int v28 = v27;
    }
    else {
      int v28 = 0;
    }
    int v29 = a2 - v15;
    if (a2 <= v15) {
      goto LABEL_22;
    }
  }
  if (((v24 + v20 + 8) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v30 = v29;
  }
  else {
    int v30 = 1;
  }
  if (((v24 + v20 + 8) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v31 = ~v15 + a2;
    bzero(a1, ((v24 + v20 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v31;
  }
  switch(v28)
  {
    case 1:
      *((unsigned char *)a1 + v25) = v30;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v25) = v30;
      break;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x181DF22F8);
    case 4:
      *(_DWORD *)((char *)a1 + v25) = v30;
      break;
    default:
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for IntegerParseStrategy.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181DF23ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in IntegerParseStrategy<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in IntegerParseStrategy<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in IntegerParseStrategy<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

unint64_t encodingFromDataForExtendedAttribute(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = (unint64_t)specialized Data.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
  if (v7 == 1)
  {
    outlined copy of Data._Representation(a1, a2);
    uint64_t v8 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
    uint64_t v9 = (unsigned __int8 *)(v8 + 32);
    uint64_t v10 = *(void *)(v8 + 16);
    uint64_t v11 = static String._tryFromUTF8(_:)();
    if (v12)
    {
      uint64_t v13 = v11;
      unint64_t v14 = v12;
      swift_release();
      outlined consume of Data._Representation(a1, a2);
    }
    else
    {
      uint64_t v13 = (uint64_t)specialized String.init<A, B>(_validating:as:)(v9, v10);
      unint64_t v14 = v15;
      swift_release();
      unint64_t result = outlined consume of Data._Representation(a1, a2);
      if (!v14) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    uint64_t v13 = result;
    unint64_t v14 = v7;
    if (!v7) {
      goto LABEL_18;
    }
  }
  specialized Collection<>.firstIndex(of:)(59, 0xE100000000000000, v13, v14);
  if (v16) {
    goto LABEL_14;
  }
  unint64_t v17 = String.index(after:)();
  uint64_t v18 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v18 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 >> 14 >= 4 * v18)
  {
LABEL_14:
    uint64_t v31 = String.subscript.getter();
    unint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((v31 ^ v33) >= 0x4000)
    {
      MEMORY[0x185301F50](v31, v33, v35, v37);
      swift_bridgeObjectRelease();
      CFStringRef v38 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      CFStringEncoding v39 = CFStringConvertIANACharSetNameToEncoding(v38);
      unint64_t result = swift_unknownObjectRelease();
      if (v39 != -1)
      {
        unint64_t result = CFStringConvertEncodingToNSStringEncoding(v39);
        unint64_t v40 = result;
        char v41 = 0;
LABEL_19:
        *(void *)a3 = v40;
        *(unsigned char *)(a3 + 8) = v41;
        return result;
      }
    }
    else
    {
      unint64_t result = swift_bridgeObjectRelease();
    }
LABEL_18:
    unint64_t v40 = 0;
    char v41 = 1;
    goto LABEL_19;
  }
  unint64_t v19 = String.subscript.getter();
  uint64_t v23 = v22;
  if (!((v19 ^ v20) >> 14))
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v24 = v19;
  uint64_t v25 = v20;
  uint64_t v26 = v21;
  uint64_t v27 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SuSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Su_SsTG5SiTf1cn_n(v19, v20, v21, v22, 10);
  if ((v28 & 0x100) != 0)
  {
    unint64_t v29 = specialized _parseInteger<A, B>(ascii:radix:)(v24, v25, v26, v23, 10);
    char v43 = v42;
    swift_bridgeObjectRelease();
    if (v43) {
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v29 = v27;
    char v30 = v28;
    swift_bridgeObjectRelease();
    if (v30) {
      goto LABEL_14;
    }
  }
  if (!HIDWORD(v29))
  {
    if (CFStringIsEncodingAvailable(v29))
    {
      unint64_t v40 = CFStringConvertEncodingToNSStringEncoding(v29);
      unint64_t result = swift_bridgeObjectRelease();
      char v41 = 0;
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized UTF32EndianAdaptor.Iterator.next()()
{
  if (*(unsigned char *)(v0 + 65))
  {
LABEL_2:
    Swift::UInt8_optional v1 = Data.Iterator.next()();
    if ((*(_WORD *)&v1 & 0x100) != 0) {
      goto LABEL_24;
    }
    Swift::UInt8 value = v1.value;
LABEL_15:
    Swift::UInt8_optional v12 = Data.Iterator.next()();
    if ((*(_WORD *)&v12 & 0x100) == 0)
    {
      Swift::UInt8_optional v7 = v12;
      Swift::UInt8_optional v13 = Data.Iterator.next()();
      if ((*(_WORD *)&v13 & 0x100) == 0)
      {
        Swift::UInt8 v9 = v13.value;
        LOWORD(v10) = Data.Iterator.next()();
        if ((v10 & 0x100) == 0) {
          goto LABEL_18;
        }
      }
    }
LABEL_24:
    unsigned int v14 = 0;
    unsigned __int8 v3 = 1;
    return v14 | ((unint64_t)v3 << 32);
  }
  unsigned __int8 v3 = 1;
  *(unsigned char *)(v0 + 65) = 1;
  Swift::UInt8_optional v4 = Data.Iterator.next()();
  if ((*(_WORD *)&v4 & 0x100) != 0)
  {
    unsigned int v14 = 0;
    return v14 | ((unint64_t)v3 << 32);
  }
  Swift::UInt8 value = v4.value;
  int v5 = v4.value;
  if (v4.value != 255 && v4.value) {
    goto LABEL_15;
  }
  Swift::UInt8_optional v6 = Data.Iterator.next()();
  if ((*(_WORD *)&v6 & 0x100) != 0) {
    goto LABEL_24;
  }
  Swift::UInt8_optional v7 = v6;
  Swift::UInt8_optional v8 = Data.Iterator.next()();
  if ((*(_WORD *)&v8 & 0x100) != 0) {
    goto LABEL_24;
  }
  Swift::UInt8 v9 = v8.value;
  LOWORD(v10) = Data.Iterator.next()();
  if ((v10 & 0x100) != 0) {
    goto LABEL_24;
  }
  if (v5 == 255 && v7.value == 254 && !(v9 | v10))
  {
    int v11 = *(unsigned __int8 *)(v0 + 64);
    if (v11 != 2)
    {
      unsigned __int8 v3 = 0;
      if (v11) {
        unsigned int v14 = -131072;
      }
      else {
        unsigned int v14 = 65279;
      }
      return v14 | ((unint64_t)v3 << 32);
    }
    *(unsigned char *)(v0 + 64) = 0;
    goto LABEL_2;
  }
  if (!(v5 | v7.value) && v9 == 254 && v10 == 255)
  {
    int v19 = *(unsigned __int8 *)(v0 + 64);
    if (v19 != 2)
    {
      unsigned __int8 v3 = 0;
      if (v19) {
        unsigned int v14 = 65279;
      }
      else {
        unsigned int v14 = -131072;
      }
      return v14 | ((unint64_t)v3 << 32);
    }
    *(unsigned char *)(v0 + 64) = 1;
    goto LABEL_2;
  }
LABEL_18:
  unsigned __int8 v3 = 0;
  unsigned int v14 = (unsigned __int16)(value | (unsigned __int16)(*(_WORD *)&v7 << 8)) | (v9 << 16) | (v10 << 24);
  int v15 = *(unsigned __int8 *)(v0 + 64);
  BOOL v16 = (v15 & 1) != 0 || v15 == 2;
  unsigned int v17 = bswap32(v14);
  if (v16) {
    unsigned int v14 = v17;
  }
  return v14 | ((unint64_t)v3 << 32);
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unint64_t result;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  if (*((unsigned char *)v0 + 17) == 1)
  {
    Swift::UInt8_optional v1 = *v0;
    uint64_t v2 = v0[1];
LABEL_3:
    unsigned __int8 v3 = *(void *)(v1 + 16);
    if (v2 == v3) {
      goto LABEL_34;
    }
    if (v2 < v3)
    {
      Swift::UInt8_optional v4 = v1 + 32;
      int v5 = *(unsigned __int8 *)(v1 + 32 + v2);
      v0[1] = v2 + 1;
      if (v2 + 1 == v3) {
        goto LABEL_34;
      }
      if (v2 + 1 < v3)
      {
        Swift::UInt8_optional v6 = *(unsigned __int8 *)(v4 + v2 + 1);
        v0[1] = v2 + 2;
        if (v2 + 2 != v3)
        {
          if (v2 + 2 < v3)
          {
            Swift::UInt8_optional v7 = *(unsigned __int8 *)(v4 + v2 + 2);
            v0[1] = v2 + 3;
            if (v2 + 3 != v3)
            {
              if (v2 + 3 < v3)
              {
                Swift::UInt8_optional v8 = 0;
                Swift::UInt8 v9 = *(unsigned __int8 *)(v4 + v2 + 3);
                v0[1] = v2 + 4;
                int v10 = v5 | (v6 << 8) | (v7 << 16) | (v9 << 24);
LABEL_49:
                uint64_t v25 = *((unsigned __int8 *)v0 + 16);
                uint64_t v26 = (v25 & 1) != 0 || v25 == 2;
                uint64_t v27 = bswap32(v10);
                if (v26) {
                  int v10 = v27;
                }
                return v10 | ((unint64_t)v8 << 32);
              }
              goto LABEL_65;
            }
            goto LABEL_34;
          }
          goto LABEL_62;
        }
LABEL_34:
        int v10 = 0;
        Swift::UInt8_optional v8 = 1;
        return v10 | ((unint64_t)v8 << 32);
      }
      goto LABEL_60;
    }
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  Swift::UInt8_optional v8 = 1;
  *((unsigned char *)v0 + 17) = 1;
  Swift::UInt8_optional v1 = *v0;
  int v11 = v0[1];
  Swift::UInt8_optional v12 = *(void *)(*v0 + 16);
  if (v11 == v12)
  {
    int v10 = 0;
    return v10 | ((unint64_t)v8 << 32);
  }
  if (v11 >= v12) {
    goto LABEL_59;
  }
  Swift::UInt8_optional v13 = v1 + 32;
  unsigned int v14 = *(unsigned __int8 *)(v1 + 32 + v11);
  int v15 = v11 + 1;
  v0[1] = v11 + 1;
  if (!v14 || v14 == 255)
  {
    if (v15 == v12) {
      goto LABEL_34;
    }
    if (v15 >= v12)
    {
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    BOOL v16 = *(unsigned __int8 *)(v13 + v15);
    v0[1] = v11 + 2;
    if (v11 + 2 == v12) {
      goto LABEL_34;
    }
    if (v11 + 2 >= v12)
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    unsigned int v17 = *(unsigned __int8 *)(v13 + v11 + 2);
    v0[1] = v11 + 3;
    if (v11 + 3 == v12) {
      goto LABEL_34;
    }
    if (v11 + 3 >= v12)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    uint64_t v18 = *(unsigned __int8 *)(v13 + v11 + 3);
    uint64_t v2 = v11 + 4;
    v0[1] = v2;
    if (v14 == 255 && v16 == 254 && !v17 && !v18)
    {
      int v19 = *((unsigned __int8 *)v0 + 16);
      if (v19 != 2)
      {
        Swift::UInt8_optional v8 = 0;
        if (v19) {
          int v10 = -131072;
        }
        else {
          int v10 = 65279;
        }
        return v10 | ((unint64_t)v8 << 32);
      }
      *((unsigned char *)v0 + 16) = 0;
      goto LABEL_3;
    }
    if (!v14 && !v16 && v17 == 254 && v18 == 255)
    {
      uint64_t v24 = *((unsigned __int8 *)v0 + 16);
      if (v24 != 2)
      {
        Swift::UInt8_optional v8 = 0;
        if (v24) {
          int v10 = 65279;
        }
        else {
          int v10 = -131072;
        }
        return v10 | ((unint64_t)v8 << 32);
      }
      *((unsigned char *)v0 + 16) = 1;
      goto LABEL_3;
    }
    Swift::UInt8_optional v8 = 0;
    uint64_t v23 = v14 | (v16 << 8) | (v17 << 16);
LABEL_48:
    int v10 = v23 | (v18 << 24);
    goto LABEL_49;
  }
  if (v15 == v12) {
    goto LABEL_34;
  }
  if (v15 >= v12)
  {
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  unint64_t v20 = *(unsigned __int8 *)(v13 + v15);
  v0[1] = v11 + 2;
  if (v11 + 2 == v12) {
    goto LABEL_34;
  }
  if (v11 + 2 >= v12)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  unint64_t v21 = *(unsigned __int8 *)(v13 + v11 + 2);
  v0[1] = v11 + 3;
  if (v11 + 3 == v12) {
    goto LABEL_34;
  }
  if (v11 + 3 < v12)
  {
    Swift::UInt8_optional v8 = 0;
    uint64_t v18 = *(unsigned __int8 *)(v13 + v11 + 3);
    v0[1] = v11 + 4;
    uint64_t v23 = v14 | (v20 << 8) | (v21 << 16);
    goto LABEL_48;
  }
LABEL_68:
  __break(1u);
  return result;
}

{
  unsigned __int8 **v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v18;

  Swift::UInt8_optional v1 = *v0;
  if (*((unsigned char *)v0 + 17))
  {
    if (!v1)
    {
LABEL_30:
      Swift::UInt8_optional v4 = 1;
      return v1 | ((unint64_t)v4 << 32);
    }
LABEL_3:
    uint64_t v2 = v0[1];
    if (v1 == v2) {
      goto LABEL_29;
    }
    char *v0 = v1 + 1;
    if (v1 + 1 == v2) {
      goto LABEL_29;
    }
    unsigned __int8 v3 = *v1;
    goto LABEL_20;
  }
  Swift::UInt8_optional v4 = 1;
  *((unsigned char *)v0 + 17) = 1;
  if (!v1) {
    return v1 | ((unint64_t)v4 << 32);
  }
  uint64_t v2 = v0[1];
  if (v1 == v2) {
    goto LABEL_29;
  }
  int v5 = v1 + 1;
  char *v0 = v1 + 1;
  unsigned __int8 v3 = *v1;
  if (!*v1 || v3 == 255)
  {
    if (v5 == v2) {
      goto LABEL_29;
    }
    char *v0 = v1 + 2;
    if (v1 + 2 == v2) {
      goto LABEL_29;
    }
    Swift::UInt8_optional v6 = v1[1];
    char *v0 = v1 + 3;
    if (v1 + 3 == v2) {
      goto LABEL_29;
    }
    Swift::UInt8_optional v7 = v1[2];
    Swift::UInt8_optional v8 = v1 + 4;
    char *v0 = v1 + 4;
    Swift::UInt8 v9 = v1[3];
    if (v3 != 255 || v6 != 254 || v7 || v9)
    {
      if (v3 || v6 || v7 != 254 || v9 != 255)
      {
        Swift::UInt8_optional v4 = 0;
        Swift::UInt8_optional v13 = v3 | (v6 << 8) | (v7 << 16);
        goto LABEL_23;
      }
      uint64_t v18 = *((unsigned __int8 *)v0 + 16);
      if (v18 != 2)
      {
        Swift::UInt8_optional v4 = 0;
        if (v18) {
          LODWORD(v1) = 65279;
        }
        else {
          LODWORD(v1) = -131072;
        }
        return v1 | ((unint64_t)v4 << 32);
      }
      *((unsigned char *)v0 + 16) = 1;
    }
    else
    {
      int v10 = *((unsigned __int8 *)v0 + 16);
      if (v10 != 2)
      {
        Swift::UInt8_optional v4 = 0;
        if (v10) {
          LODWORD(v1) = -131072;
        }
        else {
          LODWORD(v1) = 65279;
        }
        return v1 | ((unint64_t)v4 << 32);
      }
      *((unsigned char *)v0 + 16) = 0;
    }
    Swift::UInt8_optional v1 = v8;
    goto LABEL_3;
  }
  if (v5 == v2)
  {
LABEL_29:
    LODWORD(v1) = 0;
    goto LABEL_30;
  }
LABEL_20:
  char *v0 = v1 + 2;
  if (v1 + 2 == v2) {
    goto LABEL_29;
  }
  int v11 = v1[1];
  char *v0 = v1 + 3;
  if (v1 + 3 == v2) {
    goto LABEL_29;
  }
  Swift::UInt8_optional v4 = 0;
  Swift::UInt8_optional v12 = v1[2];
  char *v0 = v1 + 4;
  Swift::UInt8_optional v13 = v3 | (v11 << 8) | (v12 << 16);
  Swift::UInt8 v9 = v1[3];
LABEL_23:
  LODWORD(v1) = v13 | (v9 << 24);
  unsigned int v14 = *((unsigned __int8 *)v0 + 16);
  int v15 = (v14 & 1) != 0 || v14 == 2;
  BOOL v16 = bswap32(v1);
  if (v15) {
    LODWORD(v1) = v16;
  }
  return v1 | ((unint64_t)v4 << 32);
}

{
  unsigned __int8 **v0;
  unsigned __int8 *v1;
  int v2;
  __int16 v3;
  unsigned __int8 v4;
  __int16 v5;
  unsigned __int8 v6;
  int v7;
  unsigned __int8 v8;
  unsigned int v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  unsigned __int8 v16;
  int v17;
  int v18;
  __int16 v19;
  __int16 v20;
  int v22;
  int v23;
  BOOL v24;
  unsigned int v25;

  if (*((unsigned char *)v0 + 17)) {
    goto LABEL_2;
  }
  Swift::UInt8_optional v8 = 1;
  *((unsigned char *)v0 + 17) = 1;
  int v10 = *v0;
  if (*v0 >= v0[1])
  {
    Swift::UInt8 v9 = 0;
    return v9 | ((unint64_t)v8 << 32);
  }
  Swift::UInt8_optional v12 = *v10;
  int v11 = v12;
  char *v0 = v10 + 1;
  if (v12 && v11 != 255)
  {
    int v19 = specialized BufferViewIterator.next()();
    if ((v19 & 0x100) != 0) {
      goto LABEL_22;
    }
    unsigned int v14 = v19;
    unint64_t v20 = specialized BufferViewIterator.next()();
    if ((v20 & 0x100) != 0) {
      goto LABEL_22;
    }
    BOOL v16 = v20;
    unsigned int v17 = specialized BufferViewIterator.next()();
    if ((v17 & 0x100) != 0) {
      goto LABEL_22;
    }
    goto LABEL_29;
  }
  Swift::UInt8_optional v13 = specialized BufferViewIterator.next()();
  if ((v13 & 0x100) != 0) {
    goto LABEL_22;
  }
  unsigned int v14 = v13;
  int v15 = specialized BufferViewIterator.next()();
  if ((v15 & 0x100) != 0) {
    goto LABEL_22;
  }
  BOOL v16 = v15;
  unsigned int v17 = specialized BufferViewIterator.next()();
  if ((v17 & 0x100) != 0) {
    goto LABEL_22;
  }
  if (v11 == 255 && v14 == 254 && !(v16 | v17))
  {
    uint64_t v18 = *((unsigned __int8 *)v0 + 16);
    if (v18 != 2)
    {
      Swift::UInt8_optional v8 = 0;
      if (v18) {
        Swift::UInt8 v9 = -131072;
      }
      else {
        Swift::UInt8 v9 = 65279;
      }
      return v9 | ((unint64_t)v8 << 32);
    }
    *((unsigned char *)v0 + 16) = 0;
    goto LABEL_2;
  }
  if (v11 | v14 || v16 != 254 || v17 != 255)
  {
LABEL_29:
    Swift::UInt8_optional v8 = 0;
    Swift::UInt8 v9 = (unsigned __int16)(v11 | (v14 << 8)) | (v16 << 16) | (v17 << 24);
    goto LABEL_30;
  }
  unint64_t v22 = *((unsigned __int8 *)v0 + 16);
  if (v22 != 2)
  {
    Swift::UInt8_optional v8 = 0;
    if (v22) {
      Swift::UInt8 v9 = 65279;
    }
    else {
      Swift::UInt8 v9 = -131072;
    }
    return v9 | ((unint64_t)v8 << 32);
  }
  *((unsigned char *)v0 + 16) = 1;
LABEL_2:
  Swift::UInt8_optional v1 = *v0;
  if (*v0 >= v0[1]
    || (v2 = *v1, *v0 = v1 + 1, unsigned __int8 v3 = specialized BufferViewIterator.next()(), (v3 & 0x100) != 0)
    || (v4 = v3, int v5 = specialized BufferViewIterator.next()(), (v5 & 0x100) != 0)
    || (Swift::UInt8_optional v6 = v5, v7 = specialized BufferViewIterator.next()(), (v7 & 0x100) != 0))
  {
LABEL_22:
    Swift::UInt8 v9 = 0;
    Swift::UInt8_optional v8 = 1;
    return v9 | ((unint64_t)v8 << 32);
  }
  Swift::UInt8_optional v8 = 0;
  Swift::UInt8 v9 = v2 & 0xFF0000FF | (unsigned __int16)(v4 << 8) | (v6 << 16) | (v7 << 24);
LABEL_30:
  uint64_t v23 = *((unsigned __int8 *)v0 + 16);
  uint64_t v24 = (v23 & 1) != 0 || v23 == 2;
  uint64_t v25 = bswap32(v9);
  if (v24) {
    Swift::UInt8 v9 = v25;
  }
  return v9 | ((unint64_t)v8 << 32);
}

id specialized String.init<A>(bytes:encoding:)(uint64_t a1, uint64_t a2)
{
  if (a2 > 2415919359)
  {
    if (a2 > 2550137087)
    {
      if (a2 == 2550137088)
      {
        uint64_t v9 = 1;
      }
      else
      {
        if (a2 != 2617245952) {
          goto LABEL_30;
        }
        uint64_t v9 = 0;
      }
      goto LABEL_25;
    }
    if (a2 == 2415919360)
    {
      uint64_t v9 = 1;
    }
    else
    {
      if (a2 != 2483028224) {
        goto LABEL_30;
      }
      uint64_t v9 = 0;
    }
LABEL_21:
    closure #2 in String.init<A>(bytes:encoding:)(a1 + 32, *(void *)(a1 + 16), v9, (void (*)(long long *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #2 in String.init<A>(bytes:encoding:), &v22);
    if (*((void *)&v22 + 1) < 2uLL)
    {
      uint64_t v12 = swift_bridgeObjectRetain();
      unint64_t v7 = specialized String.init<A, B>(_validating:as:)(v12, v9);
      if (v13) {
        return (id)v7;
      }
      return 0;
    }
    return (id)v22;
  }
  if (a2 > 9)
  {
    uint64_t v9 = 2;
    if (a2 != 10)
    {
      if (a2 != 2348810496) {
        goto LABEL_30;
      }
LABEL_25:
      closure #2 in String.init<A>(bytes:encoding:)(a1 + 32, *(void *)(a1 + 16), v9, (void (*)(long long *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #3 in String.init<A>(bytes:encoding:), &v22);
      if (*((void *)&v22 + 1) < 2uLL)
      {
        swift_bridgeObjectRetain();
        unint64_t v7 = specialized String.init<A, B>(_validating:as:)();
        if (v14) {
          return (id)v7;
        }
        return 0;
      }
      return (id)v22;
    }
    goto LABEL_21;
  }
  if (a2 == 1)
  {
    uint64_t v5 = specialized String.init<A, B>(_validating:as:)((char *)(a1 + 32), *(void *)(a1 + 16));
    if (v10) {
      return (id)v5;
    }
    if (one-time initialization token for compatibility1 != -1) {
      swift_once();
    }
    if (static String.compatibility1)
    {
      uint64_t v18 = *(void *)(a1 + 16);
      id v19 = objc_allocWithZone((Class)NSString);
      swift_bridgeObjectRetain();
      id v20 = objc_msgSend(v19, sel_initWithBytes_length_encoding_, a1 + 32, v18, 1);
      if (v20)
      {
        unint64_t v21 = v20;
        id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        swift_bridgeObjectRelease();

        return v11;
      }
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  if (a2 != 4)
  {
LABEL_30:
    id v16 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, a1 + 32, *(void *)(a1 + 16), a2);
    if (v16)
    {
      unsigned int v17 = v16;
      id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);

      return v11;
    }
    return 0;
  }
  unsigned __int8 v3 = (unsigned __int8 *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = static String._tryFromUTF8(_:)();
  if (!v6)
  {
    unint64_t v7 = (unint64_t)specialized String.init<A, B>(_validating:as:)(v3, v4);
    if (!v8) {
      return 0;
    }
    return (id)v7;
  }
  return (id)v5;
}

uint64_t specialized String.init<A, B>(_validating:as:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x1E4FBC860]);
  uint64_t v7 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a1;
      goto LABEL_4;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
LABEL_4:
      outlined copy of Data._Representation(a1, a2);
      outlined copy of Data._Representation(a1, a2);
      outlined copy of Data._Representation(a1, a2);
      break;
    default:
      break;
  }
  Data.Iterator.init(_:at:)(a1, a2, v7, &v51);
  outlined consume of Data._Representation(a1, a2);
  uint64_t v46 = a1;
  unint64_t v47 = a2;
  outlined consume of Data._Representation(a1, a2);
  char v52 = a3;
  char v53 = 0;
  unsigned int v48 = 0;
  unsigned __int8 v49 = 0;
  unint64_t v44 = *((void *)&v51 + 1);
  uint64_t v45 = v51;
  outlined copy of Data._Representation(v51, *((unint64_t *)&v51 + 1));
  uint64_t v8 = 1;
LABEL_6:
  uint64_t v9 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v9 & 0x10000) != 0)
  {
LABEL_77:
    outlined consume of Data._Representation(v51, *((unint64_t *)&v51 + 1));
    outlined consume of Data._Representation(v45, v44);
    swift_bridgeObjectRetain();
    uint64_t v40 = static String._tryFromUTF8(_:)();
    uint64_t v42 = v41;
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v46, v47);
    swift_bridgeObjectRelease();
    if (v42) {
      return v40;
    }
    else {
      return 0;
    }
  }
  LOWORD(v10) = v9;
  if ((v9 & 0xF800) == 0xD800)
  {
    unsigned int v10 = (unsigned __int16)v9 | (HIWORD(v48) << 16);
    unsigned __int8 v11 = 16;
    goto LABEL_9;
  }
  while (1)
  {
    unsigned int v10 = (unsigned __int16)v10;
    char v25 = 1;
LABEL_52:
    if ((unsigned __int16)v10 >= 0x80u)
    {
      int v33 = (v10 & 0x3F) << 8;
      if ((unsigned __int16)v10 >= 0x800u)
      {
        if ((v10 & 0xF800) == 0xD800)
        {
          if (v25)
          {
            int v36 = (v10 & 0x3F) << 8;
            int v37 = (v36 | ((unsigned __int16)v10 >> 6)) + 33217;
            int v38 = (((unsigned __int16)v10 >> 12) | ((v36 | ((unsigned __int16)v10 >> 6) & 0x3F) << 8)) + 8487393;
            if ((unsigned __int16)v10 >= 0x800u) {
              int v37 = v38;
            }
            if ((unsigned __int16)v10 <= 0x7Fu) {
              int v27 = (unsigned __int16)v10 + 1;
            }
            else {
              int v27 = v37;
            }
            goto LABEL_54;
          }
          unsigned int v39 = ((v10 & 0x3FF) << 10) | HIWORD(v10) & 0x3FF;
          unsigned int v34 = ((v39 + 0x10000) >> 4) & 0x3F00 | ((v39 + 0x10000) >> 18) | (((v39 >> 6) & 0x3F | (((v39 + 0x10000) & 0x3F) << 8)) << 16);
          int v35 = -2122219023;
        }
        else
        {
          unsigned int v34 = ((v33 | ((unsigned __int16)v10 >> 6) & 0x3F) << 8) | ((unsigned __int16)v10 >> 12);
          int v35 = 8487393;
        }
      }
      else
      {
        unsigned int v34 = v33 | ((unsigned __int16)v10 >> 6);
        int v35 = 33217;
      }
      int v27 = v34 + v35;
      goto LABEL_54;
    }
    int v27 = (v10 + 1);
    if ((_BYTE)v10 == 0xFF)
    {
LABEL_62:
      uint64_t v32 = v8;
      goto LABEL_63;
    }
LABEL_54:
    unint64_t v28 = *((void *)v6 + 2);
    for (unsigned int i = v27; ; i >>= 8)
    {
      while (1)
      {
        unint64_t v30 = *((void *)v6 + 3);
        if (v28 >= v30 >> 1) {
          uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v28 + 1, 1, v6);
        }
        *((void *)v6 + 2) = v28 + 1;
        v6[v28 + 32] = i - 1;
        if ((v8 & ((char)(i - 1) < 0)) == 1) {
          break;
        }
        ++v28;
        BOOL v31 = i >= 0x100;
        i >>= 8;
        if (!v31) {
          goto LABEL_62;
        }
      }
      uint64_t v32 = 0;
      uint64_t v8 = 0;
      ++v28;
      if (i < 0x100) {
        break;
      }
    }
LABEL_63:
    unsigned __int8 v11 = v49;
    uint64_t v8 = v32;
    if (!v49) {
      goto LABEL_6;
    }
    unsigned int v10 = v48;
    if ((v48 & 0xF800) == 0xD800) {
      break;
    }
    lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
    uint64_t v26 = (void (*)(char *, void))Locale.Language.components.modify();
    specialized RangeReplaceableCollection.remove(at:)(0);
    v26(v50, 0);
  }
LABEL_9:
  while ((v53 & 1) == 0)
  {
    char v53 = 1;
    Swift::UInt8_optional v15 = Data.Iterator.next()();
    if ((*(_WORD *)&v15 & 0x100) != 0) {
      goto LABEL_39;
    }
    Swift::UInt8 value = v15.value;
    unsigned int v16 = v15.value;
    LOWORD(v14) = Data.Iterator.next()();
    if (v16 < 0xFE)
    {
      if ((v14 & 0x100) != 0) {
        goto LABEL_39;
      }
LABEL_21:
      unsigned int v18 = value | (v14 << 8);
      BOOL v19 = (v52 & 1) != 0 || v52 == 2;
      unsigned int v20 = bswap32(v18) >> 16;
      if (!v19) {
        LOWORD(v20) = v18;
      }
      goto LABEL_26;
    }
    if ((v14 & 0x100) != 0) {
      goto LABEL_39;
    }
    if (v16 == 255 && v14 == 254)
    {
      if (v52 == 2)
      {
        char v17 = 0;
LABEL_32:
        char v52 = v17;
        break;
      }
      if (v52) {
        LOWORD(v20) = -2;
      }
      else {
        LOWORD(v20) = -257;
      }
    }
    else
    {
      if (v16 != 254 || v14 != 255) {
        goto LABEL_21;
      }
      if (v52 == 2)
      {
        char v17 = 1;
        goto LABEL_32;
      }
      if (v52) {
        LOWORD(v20) = -257;
      }
      else {
        LOWORD(v20) = -2;
      }
    }
LABEL_26:
    unsigned int v10 = ((-65535 << v11) - 1) & v10 | ((unsigned __int16)v20 << v11);
    v11 += 16;
    if (v11 >= 0x20u) {
      goto LABEL_40;
    }
  }
  Swift::UInt8_optional v12 = Data.Iterator.next()();
  if ((*(_WORD *)&v12 & 0x100) == 0)
  {
    Swift::UInt8 value = v12.value;
    LOWORD(v14) = Data.Iterator.next()();
    if ((v14 & 0x100) == 0) {
      goto LABEL_21;
    }
  }
LABEL_39:
  if (!v11) {
    goto LABEL_77;
  }
LABEL_40:
  unsigned int v21 = v10 & 0xFC00FC00;
  if ((v10 & 0xFC00FC00) == 0xDC00D800) {
    char v22 = 32;
  }
  else {
    char v22 = 16;
  }
  unsigned __int8 v49 = v11 - v22;
  BOOL v23 = v21 == -603924480;
  if (v21 == -603924480) {
    char v24 = 32;
  }
  else {
    char v24 = 16;
  }
  unsigned int v48 = (unint64_t)v10 >> v24;
  if (v23)
  {
    char v25 = 0;
    goto LABEL_52;
  }
  outlined consume of Data._Representation(v51, *((unint64_t *)&v51 + 1));
  outlined consume of Data._Representation(v45, v44);
  outlined consume of Data._Representation(v46, v47);
  swift_bridgeObjectRelease();
  return 0;
}

{
  char *v6;
  uint64_t v7;
  long long v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int i;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  long long v25;
  char v26;
  char v27;
  uint64_t v28;

  unint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x1E4FBC860]);
  uint64_t v7 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a1;
      goto LABEL_4;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
LABEL_4:
      outlined copy of Data._Representation(a1, a2);
      outlined copy of Data._Representation(a1, a2);
      outlined copy of Data._Representation(a1, a2);
      break;
    default:
      break;
  }
  Data.Iterator.init(_:at:)(a1, a2, v7, &v25);
  outlined consume of Data._Representation(a1, a2);
  outlined consume of Data._Representation(a1, a2);
  uint64_t v8 = v25;
  uint64_t v26 = a3;
  int v27 = 0;
  outlined copy of Data._Representation(v25, *((unint64_t *)&v25 + 1));
  uint64_t v9 = specialized UTF32EndianAdaptor.Iterator.next()();
  if ((v9 & 0x100000000) == 0)
  {
    unsigned int v10 = 1;
    while (1)
    {
      if (WORD1(v9) > 0x10u || (v9 & 0xFFFFF800) == 0xD800)
      {
        outlined consume of Data._Representation(v25, *((unint64_t *)&v25 + 1));
        outlined consume of Data._Representation(v8, *((unint64_t *)&v8 + 1));
        outlined consume of Data._Representation(a1, a2);
        swift_bridgeObjectRelease();
        return 0;
      }
      if ((v9 & 0xFFFFFF80) != 0) {
        break;
      }
      if (v9 > 0xFF) {
        __break(1u);
      }
      unsigned __int8 v11 = (v9 + 1);
      if ((_BYTE)v9 != 0xFF) {
        goto LABEL_12;
      }
LABEL_20:
      unsigned int v16 = v10;
LABEL_21:
      uint64_t v9 = specialized UTF32EndianAdaptor.Iterator.next()();
      unsigned int v10 = v16;
      if ((v9 & 0x100000000) != 0) {
        goto LABEL_28;
      }
    }
    char v17 = (v9 & 0x3F) << 8;
    unsigned int v18 = (v17 | (v9 >> 6) & 0x3F) << 8;
    BOOL v19 = (((v18 | (v9 >> 12) & 0x3F) << 8) | (v9 >> 18)) - 2122219023;
    unsigned int v20 = (v18 | (v9 >> 12)) + 8487393;
    if (WORD1(v9)) {
      unsigned int v20 = v19;
    }
    unsigned __int8 v11 = (v17 | (v9 >> 6)) + 33217;
    if (v9 > 0x7FF) {
      unsigned __int8 v11 = v20;
    }
LABEL_12:
    Swift::UInt8_optional v12 = *((void *)v6 + 2);
    for (unsigned int i = v11; ; i >>= 8)
    {
      while (1)
      {
        int v14 = *((void *)v6 + 3);
        if (v12 >= v14 >> 1) {
          uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v12 + 1, 1, v6);
        }
        *((void *)v6 + 2) = v12 + 1;
        v6[v12 + 32] = i - 1;
        if ((v10 & ((char)(i - 1) < 0)) == 1) {
          break;
        }
        ++v12;
        Swift::UInt8_optional v15 = i >= 0x100;
        i >>= 8;
        if (!v15) {
          goto LABEL_20;
        }
      }
      unsigned int v16 = 0;
      unsigned int v10 = 0;
      ++v12;
      if (i < 0x100) {
        break;
      }
    }
    goto LABEL_21;
  }
LABEL_28:
  outlined consume of Data._Representation(v25, *((unint64_t *)&v25 + 1));
  outlined consume of Data._Representation(v8, *((unint64_t *)&v8 + 1));
  swift_bridgeObjectRetain();
  unsigned int v21 = static String._tryFromUTF8(_:)();
  BOOL v23 = v22;
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(a1, a2);
  swift_bridgeObjectRelease();
  if (v23) {
    return v21;
  }
  else {
    return 0;
  }
}

uint64_t specialized String.init<A, B>(_validating:as:)(uint64_t a1, char a2)
{
  uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x1E4FBC860]);
  uint64_t v39 = a1;
  uint64_t v40 = 0;
  char v41 = a2;
  char v42 = 0;
  unsigned int v37 = 0;
  unsigned __int8 v38 = 0;
  swift_bridgeObjectRetain_n();
  uint64_t v5 = 1;
LABEL_2:
  uint64_t v6 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v6 & 0x10000) != 0) {
    goto LABEL_50;
  }
  LOWORD(v7) = v6;
  if ((v6 & 0xF800) != 0xD800)
  {
    while (1)
    {
      unsigned int v7 = (unsigned __int16)v7;
      char v17 = 1;
LABEL_25:
      if ((unsigned __int16)v7 >= 0x80u)
      {
        int v25 = (v7 & 0x3F) << 8;
        if ((unsigned __int16)v7 < 0x800u)
        {
          unsigned int v26 = v25 | ((unsigned __int16)v7 >> 6);
          int v27 = 33217;
LABEL_40:
          int v19 = v26 + v27;
          goto LABEL_27;
        }
        if ((v7 & 0xF800) != 0xD800)
        {
          unsigned int v26 = ((v25 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8) | ((unsigned __int16)v7 >> 12);
          int v27 = 8487393;
          goto LABEL_40;
        }
        if ((v17 & 1) == 0)
        {
          unsigned int v31 = ((v7 & 0x3FF) << 10) | HIWORD(v7) & 0x3FF;
          unsigned int v26 = ((v31 + 0x10000) >> 4) & 0x3F00 | ((v31 + 0x10000) >> 18) | (((v31 >> 6) & 0x3F | (((v31 + 0x10000) & 0x3F) << 8)) << 16);
          int v27 = -2122219023;
          goto LABEL_40;
        }
        int v28 = (v7 & 0x3F) << 8;
        int v29 = (v28 | ((unsigned __int16)v7 >> 6)) + 33217;
        int v30 = (((unsigned __int16)v7 >> 12) | ((v28 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8)) + 8487393;
        if ((unsigned __int16)v7 >= 0x800u) {
          int v29 = v30;
        }
        if ((unsigned __int16)v7 <= 0x7Fu) {
          int v19 = (unsigned __int16)v7 + 1;
        }
        else {
          int v19 = v29;
        }
      }
      else
      {
        int v19 = (v7 + 1);
        if ((_BYTE)v7 == 0xFF)
        {
LABEL_35:
          uint64_t v24 = v5;
          goto LABEL_36;
        }
      }
LABEL_27:
      unint64_t v20 = *((void *)v4 + 2);
      for (unsigned int i = v19; ; i >>= 8)
      {
        while (1)
        {
          unint64_t v22 = *((void *)v4 + 3);
          if (v20 >= v22 >> 1) {
            uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v20 + 1, 1, v4);
          }
          *((void *)v4 + 2) = v20 + 1;
          v4[v20 + 32] = i - 1;
          if ((v5 & ((char)(i - 1) < 0)) == 1) {
            break;
          }
          ++v20;
          BOOL v23 = i >= 0x100;
          i >>= 8;
          if (!v23) {
            goto LABEL_35;
          }
        }
        uint64_t v24 = 0;
        uint64_t v5 = 0;
        ++v20;
        if (i < 0x100) {
          break;
        }
      }
LABEL_36:
      unsigned __int8 v8 = v38;
      uint64_t v5 = v24;
      if (!v38) {
        goto LABEL_2;
      }
      unsigned int v7 = v37;
      if ((v37 & 0xF800) == 0xD800) {
        goto LABEL_5;
      }
      lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
      unsigned int v18 = (void (*)(unsigned char *, void))Locale.Language.components.modify();
      specialized RangeReplaceableCollection.remove(at:)(0);
      v18(v36, 0);
    }
  }
  unsigned int v7 = (unsigned __int16)v6 | (HIWORD(v37) << 16);
  unsigned __int8 v8 = 16;
LABEL_5:
  uint64_t v9 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v9 & 0x10000) != 0)
  {
    unsigned __int8 v10 = v8;
    goto LABEL_12;
  }
  unsigned int v7 = ((-65535 << v8) - 1) & v7 | ((unsigned __int16)v9 << v8);
  unsigned __int8 v10 = v8 + 16;
  if ((v8 + 16) > 0x1Fu) {
    goto LABEL_13;
  }
  uint64_t v11 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v11 & 0x10000) != 0)
  {
LABEL_12:
    if (v10) {
      goto LABEL_13;
    }
LABEL_50:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v32 = static String._tryFromUTF8(_:)();
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (v34) {
      return v32;
    }
    else {
      return 0;
    }
  }
  unsigned int v7 = ((-65535 << v10) - 1) & v7 | ((unsigned __int16)v11 << v10);
  unsigned __int8 v10 = v8 + 32;
  if (v8 >= 0xE0u)
  {
    uint64_t v12 = specialized UTF16EndianAdaptor.Iterator.next()();
    if ((v12 & 0x10000) == 0)
    {
      unsigned int v7 = ((-65535 << v8) - 1) & v7 | ((unsigned __int16)v12 << v8);
      unsigned __int8 v10 = v8 + 48;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  unsigned int v13 = v7 & 0xFC00FC00;
  if ((v7 & 0xFC00FC00) == 0xDC00D800) {
    char v14 = 32;
  }
  else {
    char v14 = 16;
  }
  unsigned __int8 v38 = v10 - v14;
  BOOL v15 = v13 == -603924480;
  if (v13 == -603924480) {
    char v16 = 32;
  }
  else {
    char v16 = 16;
  }
  unsigned int v37 = (unint64_t)v7 >> v16;
  if (v15)
  {
    char v17 = 0;
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized String.init<A, B>(_validating:as:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x1E4FBC860]);
  uint64_t v7 = a1 + a2;
  if (!a1) {
    uint64_t v7 = 0;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v7;
  char v44 = a3;
  char v45 = 0;
  unsigned int v40 = 0;
  unsigned __int8 v41 = 0;
  uint64_t v8 = 1;
LABEL_4:
  uint64_t v9 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v9 & 0x10000) != 0) {
    goto LABEL_52;
  }
  LOWORD(v10) = v9;
  if ((v9 & 0xF800) != 0xD800)
  {
    while (1)
    {
      unsigned int v10 = (unsigned __int16)v10;
      char v20 = 1;
LABEL_27:
      if ((unsigned __int16)v10 >= 0x80u)
      {
        int v28 = (v10 & 0x3F) << 8;
        if ((unsigned __int16)v10 < 0x800u)
        {
          unsigned int v29 = v28 | ((unsigned __int16)v10 >> 6);
          int v30 = 33217;
LABEL_42:
          int v22 = v29 + v30;
          goto LABEL_29;
        }
        if ((v10 & 0xF800) != 0xD800)
        {
          unsigned int v29 = ((v28 | ((unsigned __int16)v10 >> 6) & 0x3F) << 8) | ((unsigned __int16)v10 >> 12);
          int v30 = 8487393;
          goto LABEL_42;
        }
        if ((v20 & 1) == 0)
        {
          unsigned int v34 = ((v10 & 0x3FF) << 10) | HIWORD(v10) & 0x3FF;
          unsigned int v29 = ((v34 + 0x10000) >> 4) & 0x3F00 | ((v34 + 0x10000) >> 18) | (((v34 >> 6) & 0x3F | (((v34 + 0x10000) & 0x3F) << 8)) << 16);
          int v30 = -2122219023;
          goto LABEL_42;
        }
        int v31 = (v10 & 0x3F) << 8;
        int v32 = (v31 | ((unsigned __int16)v10 >> 6)) + 33217;
        int v33 = (((unsigned __int16)v10 >> 12) | ((v31 | ((unsigned __int16)v10 >> 6) & 0x3F) << 8)) + 8487393;
        if ((unsigned __int16)v10 >= 0x800u) {
          int v32 = v33;
        }
        if ((unsigned __int16)v10 <= 0x7Fu) {
          int v22 = (unsigned __int16)v10 + 1;
        }
        else {
          int v22 = v32;
        }
      }
      else
      {
        int v22 = (v10 + 1);
        if ((_BYTE)v10 == 0xFF)
        {
LABEL_37:
          uint64_t v27 = v8;
          goto LABEL_38;
        }
      }
LABEL_29:
      unint64_t v23 = *((void *)v6 + 2);
      for (unsigned int i = v22; ; i >>= 8)
      {
        while (1)
        {
          unint64_t v25 = *((void *)v6 + 3);
          if (v23 >= v25 >> 1) {
            uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v23 + 1, 1, v6);
          }
          *((void *)v6 + 2) = v23 + 1;
          v6[v23 + 32] = i - 1;
          if ((v8 & ((char)(i - 1) < 0)) == 1) {
            break;
          }
          ++v23;
          BOOL v26 = i >= 0x100;
          i >>= 8;
          if (!v26) {
            goto LABEL_37;
          }
        }
        uint64_t v27 = 0;
        uint64_t v8 = 0;
        ++v23;
        if (i < 0x100) {
          break;
        }
      }
LABEL_38:
      unsigned __int8 v11 = v41;
      uint64_t v8 = v27;
      if (!v41) {
        goto LABEL_4;
      }
      unsigned int v10 = v40;
      if ((v40 & 0xF800) == 0xD800) {
        goto LABEL_7;
      }
      lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
      unsigned int v21 = (void (*)(uint64_t *, void))Locale.Language.components.modify();
      specialized RangeReplaceableCollection.remove(at:)(0);
      v21(&v39, 0);
    }
  }
  unsigned int v10 = (unsigned __int16)v9 | (HIWORD(v40) << 16);
  unsigned __int8 v11 = 16;
LABEL_7:
  uint64_t v12 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v12 & 0x10000) != 0)
  {
    unsigned __int8 v13 = v11;
    goto LABEL_14;
  }
  unsigned int v10 = ((-65535 << v11) - 1) & v10 | ((unsigned __int16)v12 << v11);
  unsigned __int8 v13 = v11 + 16;
  if ((v11 + 16) > 0x1Fu) {
    goto LABEL_15;
  }
  uint64_t v14 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v14 & 0x10000) != 0)
  {
LABEL_14:
    if (v13) {
      goto LABEL_15;
    }
LABEL_52:
    swift_bridgeObjectRetain();
    uint64_t v35 = static String._tryFromUTF8(_:)();
    uint64_t v37 = v36;
    swift_bridgeObjectRelease_n();
    if (v37) {
      return v35;
    }
    else {
      return 0;
    }
  }
  unsigned int v10 = ((-65535 << v13) - 1) & v10 | ((unsigned __int16)v14 << v13);
  unsigned __int8 v13 = v11 + 32;
  if (v11 >= 0xE0u)
  {
    uint64_t v15 = specialized UTF16EndianAdaptor.Iterator.next()();
    if ((v15 & 0x10000) == 0)
    {
      unsigned int v10 = ((-65535 << v11) - 1) & v10 | ((unsigned __int16)v15 << v11);
      unsigned __int8 v13 = v11 + 48;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_15:
  unsigned int v16 = v10 & 0xFC00FC00;
  if ((v10 & 0xFC00FC00) == 0xDC00D800) {
    char v17 = 32;
  }
  else {
    char v17 = 16;
  }
  unsigned __int8 v41 = v13 - v17;
  BOOL v18 = v16 == -603924480;
  if (v16 == -603924480) {
    char v19 = 32;
  }
  else {
    char v19 = 16;
  }
  unsigned int v40 = (unint64_t)v10 >> v19;
  if (v18)
  {
    char v20 = 0;
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  return 0;
}

{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char v16;
  BOOL v17;
  char v18;
  char v19;
  void (*v20)(uint64_t *, void);
  int v21;
  unint64_t v22;
  unsigned int i;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  unsigned int v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;

  uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x1E4FBC860]);
  unsigned __int8 v41 = a1;
  uint64_t v42 = a1 + a2;
  uint64_t v43 = a3;
  char v44 = 0;
  uint64_t v7 = 1;
  uint64_t v39 = 0;
  unsigned int v40 = 0;
LABEL_2:
  uint64_t v8 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v8 & 0x10000) != 0) {
    goto LABEL_50;
  }
  LOWORD(v9) = v8;
  if ((v8 & 0xF800) != 0xD800)
  {
    while (1)
    {
      uint64_t v9 = (unsigned __int16)v9;
      char v19 = 1;
LABEL_25:
      if ((unsigned __int16)v9 >= 0x80u)
      {
        uint64_t v27 = (v9 & 0x3F) << 8;
        if ((unsigned __int16)v9 < 0x800u)
        {
          int v28 = v27 | ((unsigned __int16)v9 >> 6);
          unsigned int v29 = 33217;
LABEL_40:
          unsigned int v21 = v28 + v29;
          goto LABEL_27;
        }
        if ((v9 & 0xF800) != 0xD800)
        {
          int v28 = ((v27 | ((unsigned __int16)v9 >> 6) & 0x3F) << 8) | ((unsigned __int16)v9 >> 12);
          unsigned int v29 = 8487393;
          goto LABEL_40;
        }
        if ((v19 & 1) == 0)
        {
          int v33 = ((v9 & 0x3FF) << 10) | HIWORD(v9) & 0x3FF;
          int v28 = ((v33 + 0x10000) >> 4) & 0x3F00 | ((v33 + 0x10000) >> 18) | (((v33 >> 6) & 0x3F | (((v33 + 0x10000) & 0x3F) << 8)) << 16);
          unsigned int v29 = -2122219023;
          goto LABEL_40;
        }
        int v30 = (v9 & 0x3F) << 8;
        int v31 = (v30 | ((unsigned __int16)v9 >> 6)) + 33217;
        int v32 = (((unsigned __int16)v9 >> 12) | ((v30 | ((unsigned __int16)v9 >> 6) & 0x3F) << 8)) + 8487393;
        if ((unsigned __int16)v9 >= 0x800u) {
          int v31 = v32;
        }
        if ((unsigned __int16)v9 <= 0x7Fu) {
          unsigned int v21 = (unsigned __int16)v9 + 1;
        }
        else {
          unsigned int v21 = v31;
        }
      }
      else
      {
        unsigned int v21 = (v9 + 1);
        if ((_BYTE)v9 == 0xFF)
        {
LABEL_35:
          BOOL v26 = v7;
          goto LABEL_36;
        }
      }
LABEL_27:
      int v22 = *((void *)v6 + 2);
      for (unsigned int i = v21; ; i >>= 8)
      {
        while (1)
        {
          uint64_t v24 = *((void *)v6 + 3);
          if (v22 >= v24 >> 1) {
            uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v22 + 1, 1, v6);
          }
          *((void *)v6 + 2) = v22 + 1;
          v6[v22 + 32] = i - 1;
          if ((v7 & ((char)(i - 1) < 0)) == 1) {
            break;
          }
          ++v22;
          unint64_t v25 = i >= 0x100;
          i >>= 8;
          if (!v25) {
            goto LABEL_35;
          }
        }
        BOOL v26 = 0;
        uint64_t v7 = 0;
        ++v22;
        if (i < 0x100) {
          break;
        }
      }
LABEL_36:
      unsigned int v10 = v40;
      uint64_t v7 = v26;
      if (!v40) {
        goto LABEL_2;
      }
      uint64_t v9 = v39;
      if ((v39 & 0xF800) == 0xD800) {
        goto LABEL_5;
      }
      lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
      char v20 = (void (*)(uint64_t *, void))Locale.Language.components.modify();
      specialized RangeReplaceableCollection.remove(at:)(0);
      v20(&v38, 0);
    }
  }
  uint64_t v9 = (unsigned __int16)v8 | (HIWORD(v39) << 16);
  unsigned int v10 = 16;
LABEL_5:
  unsigned __int8 v11 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v11 & 0x10000) != 0)
  {
    uint64_t v12 = v10;
    goto LABEL_12;
  }
  uint64_t v9 = ((-65535 << v10) - 1) & v9 | ((unsigned __int16)v11 << v10);
  uint64_t v12 = v10 + 16;
  if ((v10 + 16) > 0x1Fu) {
    goto LABEL_13;
  }
  unsigned __int8 v13 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v13 & 0x10000) != 0)
  {
LABEL_12:
    if (v12) {
      goto LABEL_13;
    }
LABEL_50:
    swift_bridgeObjectRetain();
    unsigned int v34 = static String._tryFromUTF8(_:)();
    uint64_t v36 = v35;
    swift_bridgeObjectRelease_n();
    if (v36) {
      return v34;
    }
    else {
      return 0;
    }
  }
  uint64_t v9 = ((-65535 << v12) - 1) & v9 | ((unsigned __int16)v13 << v12);
  uint64_t v12 = v10 + 32;
  if (v10 >= 0xE0u)
  {
    uint64_t v14 = specialized UTF16EndianAdaptor.Iterator.next()();
    if ((v14 & 0x10000) == 0)
    {
      uint64_t v9 = ((-65535 << v10) - 1) & v9 | ((unsigned __int16)v14 << v10);
      uint64_t v12 = v10 + 48;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v15 = v9 & 0xFC00FC00;
  if ((v9 & 0xFC00FC00) == 0xDC00D800) {
    unsigned int v16 = 32;
  }
  else {
    unsigned int v16 = 16;
  }
  unsigned int v40 = v12 - v16;
  char v17 = v15 == -603924480;
  if (v15 == -603924480) {
    BOOL v18 = 32;
  }
  else {
    BOOL v18 = 16;
  }
  uint64_t v39 = (unint64_t)v9 >> v18;
  if (v17)
  {
    char v19 = 0;
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized String.init<A, B>(_validating:as:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unsigned int v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unsigned __int8 v13 = (char *)&v43 - v12;
  uint64_t v14 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0, MEMORY[0x1E4FBC860]);
  uint64_t v46 = v4;
  uint64_t v47 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  dispatch thunk of Sequence.makeIterator()();
  char v44 = v13;
  uint64_t v45 = v8;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, AssociatedTypeWitness);
  unsigned int v50 = 0;
  unsigned __int8 v51 = 0;
  uint64_t v16 = 1;
LABEL_2:
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if (v49)
  {
LABEL_48:
    uint64_t v37 = *(void (**)(char *, uint64_t))(v45 + 8);
    v37(v10, AssociatedTypeWitness);
    v37(v44, AssociatedTypeWitness);
    swift_bridgeObjectRetain();
    uint64_t v38 = static String._tryFromUTF8(_:)();
    uint64_t v40 = v39;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, a2);
    swift_bridgeObjectRelease();
    if (v40) {
      return v38;
    }
    else {
      return 0;
    }
  }
  unsigned int v17 = v48;
  if ((v48 & 0xF800) == 0xD800)
  {
    unsigned int v50 = ((-65535 << v51) - 1) & v50 | (v48 << v51);
    v51 += 16;
    goto LABEL_5;
  }
  while (1)
  {
    int v22 = 1;
LABEL_23:
    if ((unsigned __int16)v17 >= 0x80u)
    {
      int v30 = (v17 & 0x3F) << 8;
      if ((unsigned __int16)v17 >= 0x800u)
      {
        if ((v17 & 0xF800) == 0xD800)
        {
          if (v22)
          {
            int v33 = (v17 & 0x3F) << 8;
            int v34 = (v33 | ((unsigned __int16)v17 >> 6)) + 33217;
            int v35 = (((unsigned __int16)v17 >> 12) | ((v33 | ((unsigned __int16)v17 >> 6) & 0x3F) << 8)) + 8487393;
            if ((unsigned __int16)v17 >= 0x800u) {
              int v34 = v35;
            }
            if ((unsigned __int16)v17 <= 0x7Fu) {
              int v24 = (unsigned __int16)v17 + 1;
            }
            else {
              int v24 = v34;
            }
            goto LABEL_25;
          }
          unsigned int v36 = ((v17 & 0x3FF) << 10) | HIWORD(v17) & 0x3FF;
          unsigned int v31 = ((v36 + 0x10000) >> 4) & 0x3F00 | ((v36 + 0x10000) >> 18) | (((v36 >> 6) & 0x3F | (((v36 + 0x10000) & 0x3F) << 8)) << 16);
          int v32 = -2122219023;
        }
        else
        {
          unsigned int v31 = ((v30 | ((unsigned __int16)v17 >> 6) & 0x3F) << 8) | ((unsigned __int16)v17 >> 12);
          int v32 = 8487393;
        }
      }
      else
      {
        unsigned int v31 = v30 | ((unsigned __int16)v17 >> 6);
        int v32 = 33217;
      }
      int v24 = v31 + v32;
      goto LABEL_25;
    }
    int v24 = (v17 + 1);
    if ((_BYTE)v17 == 0xFF)
    {
LABEL_33:
      uint64_t v29 = v16;
      goto LABEL_34;
    }
LABEL_25:
    unint64_t v25 = *((void *)v15 + 2);
    for (unsigned int i = v24; ; i >>= 8)
    {
      while (1)
      {
        unint64_t v27 = *((void *)v15 + 3);
        if (v25 >= v27 >> 1) {
          uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v25 + 1, 1, v15);
        }
        *((void *)v15 + 2) = v25 + 1;
        v15[v25 + 32] = i - 1;
        if ((v16 & ((char)(i - 1) < 0)) == 1) {
          break;
        }
        ++v25;
        BOOL v28 = i >= 0x100;
        i >>= 8;
        if (!v28) {
          goto LABEL_33;
        }
      }
      uint64_t v29 = 0;
      uint64_t v16 = 0;
      ++v25;
      if (i < 0x100) {
        break;
      }
    }
LABEL_34:
    uint64_t v16 = v29;
    if (!v51) {
      goto LABEL_2;
    }
    if ((v50 & 0xF800) == 0xD800) {
      break;
    }
    unsigned int v17 = (unsigned __int16)v50;
    lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
    unint64_t v23 = (void (*)(unsigned __int16 *, void))Locale.Language.components.modify();
    specialized RangeReplaceableCollection.remove(at:)(0);
    v23(&v48, 0);
  }
  swift_getAssociatedConformanceWitness();
LABEL_5:
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (v49) {
      break;
    }
    unsigned int v17 = ((-65535 << v51) - 1) & v50 | (v48 << v51);
    unsigned int v50 = v17;
    unsigned __int8 v18 = v51 + 16;
    v51 += 16;
    if (v51 >= 0x20u) {
      goto LABEL_10;
    }
  }
  unsigned __int8 v18 = v51;
  if (!v51) {
    goto LABEL_48;
  }
  unsigned int v17 = v50;
LABEL_10:
  unsigned int v19 = v17 & 0xFC00FC00;
  if ((v17 & 0xFC00FC00) == 0xDC00D800) {
    char v20 = 32;
  }
  else {
    char v20 = 16;
  }
  unsigned __int8 v51 = v18 - v20;
  if (v19 == -603924480) {
    char v21 = 32;
  }
  else {
    char v21 = 16;
  }
  unsigned int v50 = (unint64_t)v17 >> v21;
  if (v19 == -603924480)
  {
    int v22 = 0;
    goto LABEL_23;
  }
  unsigned __int8 v41 = *(void (**)(char *, uint64_t))(v45 + 8);
  v41(v10, AssociatedTypeWitness);
  v41(v44, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, a2);
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  char v45;

  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unsigned int v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unsigned __int8 v13 = (char *)&v39 - v12;
  uint64_t v14 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14 & ~(v14 >> 63), 0, MEMORY[0x1E4FBC860]);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v43 = a1;
  v16(v6, a1, a2);
  dispatch thunk of Sequence.makeIterator()();
  unsigned __int8 v41 = v8;
  uint64_t v42 = v13;
  unsigned int v17 = v10;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if (v45)
  {
    unsigned __int8 v18 = v41;
    unsigned int v19 = v43;
LABEL_3:
    char v20 = *(void (**)(char *, uint64_t))(v18 + 8);
    v20(v17, AssociatedTypeWitness);
    v20(v42, AssociatedTypeWitness);
    swift_bridgeObjectRetain();
    char v21 = static String._tryFromUTF8(_:)();
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v19, a2);
    swift_bridgeObjectRelease();
    if (v23) {
      return v21;
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v25 = 1;
    BOOL v26 = v44;
    unsigned __int8 v18 = v41;
    unsigned int v19 = v43;
    while (1)
    {
      unint64_t v27 = HIWORD(v26);
      if (HIWORD(v26) > 0x10u || (v26 & 0xFFFFF800) == 0xD800) {
        break;
      }
      uint64_t v40 = v4;
      if (v26 > 0x7F)
      {
        int v34 = (v26 & 0x3F) << 8;
        if (v26 > 0x7FF)
        {
          int v35 = v26 >> 12;
          unsigned int v36 = (v34 | (v26 >> 6) & 0x3F) << 8;
          BOOL v28 = (((v36 | (v26 >> 12) & 0x3F) << 8) | (v26 >> 18)) - 2122219023;
          uint64_t v37 = (v36 | v35) + 8487393;
          if (!v27) {
            BOOL v28 = v37;
          }
        }
        else
        {
          BOOL v28 = (v34 | (v26 >> 6)) + 33217;
        }
      }
      else
      {
        BOOL v28 = v26 + 1;
      }
      uint64_t v29 = *((void *)v15 + 2);
      int v30 = v28;
      do
      {
        while (1)
        {
          unsigned int v31 = *((void *)v15 + 3);
          if (v29 >= v31 >> 1) {
            uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v29 + 1, 1, v15);
          }
          *((void *)v15 + 2) = v29 + 1;
          v15[v29 + 32] = v30 - 1;
          if ((v25 & ((char)(v30 - 1) < 0)) != 1) {
            break;
          }
          int v33 = 0;
          unint64_t v25 = 0;
          ++v29;
          if (v30 < 0x100) {
            goto LABEL_19;
          }
          v30 >>= 8;
        }
        ++v29;
        int v32 = v30 >= 0x100;
        v30 >>= 8;
      }
      while (v32);
      int v33 = v25;
LABEL_19:
      dispatch thunk of IteratorProtocol.next()();
      BOOL v26 = v44;
      unint64_t v25 = v33;
      unsigned int v19 = v43;
      uint64_t v4 = v40;
      if (v45) {
        goto LABEL_3;
      }
    }
    uint64_t v38 = *(void (**)(char *, uint64_t))(v18 + 8);
    v38(v17, AssociatedTypeWitness);
    v38(v42, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v19, a2);
    swift_bridgeObjectRelease();
    return 0;
  }
}

unint64_t specialized String.init<A, B>(_validating:as:)()
{
  uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRetain_n();
  unint64_t result = specialized UTF32EndianAdaptor.Iterator.next()();
  if ((result & 0x100000000) == 0)
  {
    uint64_t v2 = 1;
    while (1)
    {
      if (WORD1(result) > 0x10u || (result & 0xFFFFF800) == 0xD800)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
      if ((result & 0xFFFFFF80) != 0) {
        break;
      }
      if (result > 0xFF)
      {
        __break(1u);
        return result;
      }
      unsigned int v3 = (result + 1);
      if ((_BYTE)result != 0xFF) {
        goto LABEL_8;
      }
LABEL_16:
      uint64_t v8 = v2;
LABEL_17:
      unint64_t result = specialized UTF32EndianAdaptor.Iterator.next()();
      uint64_t v2 = v8;
      if ((result & 0x100000000) != 0) {
        goto LABEL_24;
      }
    }
    int v9 = (result & 0x3F) << 8;
    unsigned int v10 = (v9 | (result >> 6) & 0x3F) << 8;
    unsigned int v11 = (((v10 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
    unsigned int v12 = (v10 | (result >> 12)) + 8487393;
    if (WORD1(result)) {
      unsigned int v12 = v11;
    }
    unsigned int v3 = (v9 | (result >> 6)) + 33217;
    if (result > 0x7FF) {
      unsigned int v3 = v12;
    }
LABEL_8:
    unint64_t v4 = *((void *)v0 + 2);
    for (unsigned int i = v3; ; i >>= 8)
    {
      while (1)
      {
        unint64_t v6 = *((void *)v0 + 3);
        if (v4 >= v6 >> 1) {
          uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v4 + 1, 1, v0);
        }
        *((void *)v0 + 2) = v4 + 1;
        v0[v4 + 32] = i - 1;
        if ((v2 & ((char)(i - 1) < 0)) == 1) {
          break;
        }
        ++v4;
        BOOL v7 = i >= 0x100;
        i >>= 8;
        if (!v7) {
          goto LABEL_16;
        }
      }
      uint64_t v8 = 0;
      uint64_t v2 = 0;
      ++v4;
      if (i < 0x100) {
        break;
      }
    }
    goto LABEL_17;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v13 = static String._tryFromUTF8(_:)();
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v15) {
    return v13;
  }
  else {
    return 0;
  }
}

{
  char *v0;
  unint64_t result;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int i;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x1E4FBC860]);
  unint64_t result = specialized UTF32EndianAdaptor.Iterator.next()();
  if ((result & 0x100000000) == 0)
  {
    uint64_t v2 = 1;
    while (1)
    {
      if (result >> 11 == 27 || WORD1(result) > 0x10u)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      if ((result & 0xFFFFFF80) != 0) {
        break;
      }
      if (result > 0xFF)
      {
        __break(1u);
        return result;
      }
      unsigned int v3 = (result + 1);
      if ((_BYTE)result != 0xFF) {
        goto LABEL_8;
      }
LABEL_16:
      uint64_t v8 = v2;
LABEL_17:
      unint64_t result = specialized UTF32EndianAdaptor.Iterator.next()();
      uint64_t v2 = v8;
      if ((result & 0x100000000) != 0) {
        goto LABEL_24;
      }
    }
    int v9 = (result & 0x3F) << 8;
    unsigned int v10 = (v9 | (result >> 6) & 0x3F) << 8;
    unsigned int v11 = (((v10 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
    unsigned int v12 = (v10 | (result >> 12)) + 8487393;
    if (WORD1(result)) {
      unsigned int v3 = v11;
    }
    else {
      unsigned int v3 = v12;
    }
    if (result <= 0x7FF) {
      unsigned int v3 = (v9 | (result >> 6)) + 33217;
    }
LABEL_8:
    unint64_t v4 = *((void *)v0 + 2);
    for (unsigned int i = v3; ; i >>= 8)
    {
      while (1)
      {
        unint64_t v6 = *((void *)v0 + 3);
        if (v4 >= v6 >> 1) {
          uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v4 + 1, 1, v0);
        }
        *((void *)v0 + 2) = v4 + 1;
        v0[v4 + 32] = i - 1;
        if ((v2 & ((char)(i - 1) < 0)) == 1) {
          break;
        }
        ++v4;
        BOOL v7 = i >= 0x100;
        i >>= 8;
        if (!v7) {
          goto LABEL_16;
        }
      }
      uint64_t v8 = 0;
      uint64_t v2 = 0;
      ++v4;
      if (i < 0x100) {
        break;
      }
    }
    goto LABEL_17;
  }
LABEL_24:
  swift_bridgeObjectRetain();
  uint64_t v13 = static String._tryFromUTF8(_:)();
  uint64_t v15 = v14;
  swift_bridgeObjectRelease_n();
  if (v15) {
    return v13;
  }
  else {
    return 0;
  }
}

{
  char *v0;
  unint64_t result;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int i;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x1E4FBC860]);
  unint64_t result = specialized UTF32EndianAdaptor.Iterator.next()();
  if ((result & 0x100000000) == 0)
  {
    uint64_t v2 = 1;
    while (1)
    {
      if (result >> 11 == 27 || WORD1(result) > 0x10u)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
      if ((result & 0xFFFFFF80) != 0) {
        break;
      }
      if (result > 0xFF)
      {
        __break(1u);
        return result;
      }
      unsigned int v3 = (result + 1);
      if ((_BYTE)result != 0xFF) {
        goto LABEL_8;
      }
LABEL_16:
      uint64_t v8 = v2;
LABEL_17:
      unint64_t result = specialized UTF32EndianAdaptor.Iterator.next()();
      uint64_t v2 = v8;
      if ((result & 0x100000000) != 0) {
        goto LABEL_24;
      }
    }
    int v9 = (result & 0x3F) << 8;
    unsigned int v10 = (v9 | (result >> 6) & 0x3F) << 8;
    unsigned int v11 = (((v10 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
    unsigned int v12 = (v10 | (result >> 12)) + 8487393;
    if (WORD1(result)) {
      unsigned int v3 = v11;
    }
    else {
      unsigned int v3 = v12;
    }
    if (result <= 0x7FF) {
      unsigned int v3 = (v9 | (result >> 6)) + 33217;
    }
LABEL_8:
    unint64_t v4 = *((void *)v0 + 2);
    for (unsigned int i = v3; ; i >>= 8)
    {
      while (1)
      {
        unint64_t v6 = *((void *)v0 + 3);
        if (v4 >= v6 >> 1) {
          uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v4 + 1, 1, v0);
        }
        *((void *)v0 + 2) = v4 + 1;
        v0[v4 + 32] = i - 1;
        if ((v2 & ((char)(i - 1) < 0)) == 1) {
          break;
        }
        ++v4;
        BOOL v7 = i >= 0x100;
        i >>= 8;
        if (!v7) {
          goto LABEL_16;
        }
      }
      uint64_t v8 = 0;
      uint64_t v2 = 0;
      ++v4;
      if (i < 0x100) {
        break;
      }
    }
    goto LABEL_17;
  }
LABEL_24:
  swift_bridgeObjectRetain();
  uint64_t v13 = static String._tryFromUTF8(_:)();
  uint64_t v15 = v14;
  swift_bridgeObjectRelease_n();
  if (v15) {
    return v13;
  }
  else {
    return 0;
  }
}

void (*specialized String.init<A, B>(_validating:as:)(unsigned __int8 *a1, uint64_t a2))(unsigned char *, void)
{
  unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0, MEMORY[0x1E4FBC860]);
  unsigned int v5 = 0;
  unsigned __int8 v6 = 0;
  if (a1) {
    BOOL v7 = (char *)&a1[a2];
  }
  else {
    BOOL v7 = 0;
  }
  unsigned int v30 = 0;
  unsigned __int8 v31 = 0;
  uint64_t v8 = MEMORY[0x1E4FBC670];
  char v9 = 1;
  while (v6)
  {
    if ((v5 & 0x80) != 0)
    {
      if (!a1) {
        goto LABEL_25;
      }
      unsigned int v11 = a1;
      if (a1 == (unsigned __int8 *)v7) {
        goto LABEL_25;
      }
LABEL_12:
      a1 = v11 + 1;
      unsigned int v5 = ((-255 << v6) - 1) & v5 | (*v11 << v6);
      unsigned __int8 v15 = v6 + 8;
      if ((v6 + 8) >= 0x20u) {
        goto LABEL_24;
      }
      if (a1 != (unsigned __int8 *)v7)
      {
        a1 = v11 + 2;
        unsigned int v5 = ((-255 << v15) - 1) & v5 | (v11[1] << v15);
        unsigned __int8 v15 = v6 + 16;
        if ((v6 + 16) > 0x1Fu) {
          goto LABEL_24;
        }
        if (a1 != (unsigned __int8 *)v7)
        {
          a1 = v11 + 3;
          unsigned int v5 = ((-255 << v15) - 1) & v5 | (v11[2] << v15);
          unsigned __int8 v15 = v6 + 24;
          if ((v6 + 24) > 0x1Fu) {
            goto LABEL_24;
          }
          if (a1 != (unsigned __int8 *)v7)
          {
            a1 = v11 + 4;
            unsigned int v5 = ((-255 << v15) - 1) & v5 | (v11[3] << v15);
            unsigned __int8 v15 = v6 + 32;
            if (v6 >= 0xE0u)
            {
              if (a1 == (unsigned __int8 *)v7) {
                goto LABEL_21;
              }
              unsigned int v5 = ((-255 << v6) - 1) & v5 | (v11[4] << v6);
              unsigned __int8 v15 = v6 + 40;
              if ((v6 + 40) < 0x20u) {
                goto LABEL_21;
              }
              a1 = v11 + 5;
            }
LABEL_24:
            unsigned __int8 v6 = v15;
            goto LABEL_25;
          }
        }
      }
LABEL_21:
      unsigned __int8 v6 = v15;
      a1 = (unsigned __int8 *)v7;
      if (!v15) {
        goto LABEL_53;
      }
LABEL_25:
      if ((v5 & 0xC0E0) == 0x80C0)
      {
        if ((v5 & 0x1E) == 0) {
          goto LABEL_52;
        }
        unsigned int v16 = 16;
      }
      else if ((v5 & 0xC0C0F0) == 0x8080E0)
      {
        if ((v5 & 0x200F) == 0 || (v5 & 0x200F) == 0x200D) {
          goto LABEL_52;
        }
        unsigned int v16 = 24;
      }
      else
      {
        if ((v5 & 0xC0C0C0F8) != 0x808080F0 || (v5 & 0x3007) == 0 || __rev16(v5 & 0x3007) > 0x400)
        {
LABEL_52:
          Swift::UInt8 v25 = Unicode.UTF8.ForwardParser._invalidLength()();
          unsigned int v30 = (unint64_t)v5 >> ((8 * v25) & 0x38);
          unsigned __int8 v31 = v6 - 8 * v25;
          swift_bridgeObjectRelease();
          return 0;
        }
        unsigned int v16 = 32;
      }
      unsigned int v30 = (unint64_t)v5 >> v16;
      unsigned __int8 v31 = v6 - v16;
      int v17 = ((1 << (v16 >> 1) << (v16 >> 1)) - 1) & (v5 + 16843009);
      if (v17) {
        goto LABEL_37;
      }
      goto LABEL_5;
    }
    lazy protocol witness table accessor for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser();
    unint64_t result = (void (*)(unsigned char *, void))Locale.Language.components.modify();
    char v24 = *(unsigned char *)(v23 + 4);
    if (!v24)
    {
      __break(1u);
      return result;
    }
    *(_DWORD *)v23 >>= 8;
    *(unsigned char *)(v23 + 4) = v24 - 8;
    result(v29, 0);
    int v17 = (v5 + 1);
    uint64_t v8 = MEMORY[0x1E4FBC670];
    if ((_BYTE)v5 != 0xFF)
    {
LABEL_37:
      unint64_t v14 = *((void *)v4 + 2);
      for (unsigned int i = v17; ; i >>= 8)
      {
        while (1)
        {
LABEL_38:
          unint64_t v18 = *((void *)v4 + 3);
          if (v14 >= v18 >> 1)
          {
            uint64_t v20 = v8;
            char v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v14 + 1, 1, v4);
            uint64_t v8 = v20;
            unint64_t v4 = v21;
          }
          *((void *)v4 + 2) = v14 + 1;
          v4[v14 + 32] = i - 1;
          if ((v9 & ((char)(i - 1) < 0)) == 1) {
            break;
          }
          ++v14;
          BOOL v19 = i >= 0x100;
          i >>= 8;
          if (!v19) {
            goto LABEL_5;
          }
        }
        char v9 = 0;
        ++v14;
        if (i < 0x100) {
          break;
        }
      }
    }
LABEL_5:
    unsigned __int8 v6 = v31;
    unsigned int v5 = v30;
  }
  if (a1 && a1 != (unsigned __int8 *)v7)
  {
    int v10 = (char)*a1++;
    unsigned int v11 = a1;
    int v12 = v10;
    if ((v10 & 0x80000000) == 0)
    {
      unsigned int i = v12 + 1;
      unint64_t v14 = *((void *)v4 + 2);
      goto LABEL_38;
    }
    unsigned int v5 = v5 & 0xFFFFFF00 | v12;
    unsigned __int8 v6 = 8;
    if (a1 != (unsigned __int8 *)v7) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_53:
  swift_bridgeObjectRetain();
  uint64_t v26 = static String._tryFromUTF8(_:)();
  uint64_t v28 = v27;
  swift_bridgeObjectRelease_n();
  if (v28) {
    return (void (*)(unsigned char *, void))v26;
  }
  else {
    return 0;
  }
}

uint64_t specialized thunk for @callee_guaranteed (@unowned UnsafeBufferPointer<UInt8>) -> (@owned String?, @error @owned Error)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized String.init<A, B>(_validating:as:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

id makeNSString #1 <A>(bytes:) in String.init<A>(bytes:encoding:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithBytes_length_encoding_, a1, a2, a3);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = v3;
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v5;
}

id partial apply for makeNSString #1 <A>(bytes:) in String.init<A>(bytes:encoding:)(uint64_t a1, uint64_t a2)
{
  return makeNSString #1 <A>(bytes:) in String.init<A>(bytes:encoding:)(a1, a2, *(void *)(v2 + 16));
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafeBufferPointer<UInt8>) -> (@owned String?, @error @owned Error)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }
  return result;
}

void *closure #2 in String.init<A>(bytes:encoding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  return closure #2 in String.init<A>(bytes:encoding:)(a1, a2, a3, (void (*)(long long *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #2 in String.init<A>(bytes:encoding:), a4);
}

void *closure #3 in String.init<A>(bytes:encoding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  return closure #2 in String.init<A>(bytes:encoding:)(a1, a2, a3, (void (*)(long long *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #3 in String.init<A>(bytes:encoding:), a4);
}

void *partial apply for closure #3 in String.init<A>(bytes:encoding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return closure #2 in String.init<A>(bytes:encoding:)(a1, a2, *(unsigned __int8 *)(v3 + 16), (void (*)(long long *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #3 in String.init<A>(bytes:encoding:), a3);
}

void *partial apply for closure #2 in String.init<A>(bytes:encoding:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return closure #2 in String.init<A>(bytes:encoding:)(a1, a2, *(unsigned __int8 *)(v3 + 16), (void (*)(long long *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #2 in String.init<A>(bytes:encoding:), a3);
}

unint64_t closure #1 in closure #3 in String.init<A>(bytes:encoding:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = 0;
LABEL_2:
  while (1)
  {
    unint64_t result = specialized UTF32EndianAdaptor.Iterator.next()();
    if ((result & 0x100000000) != 0) {
      break;
    }
    if (WORD1(result) > 0x10u || (result & 0xFFFFF800) == 55296)
    {
      *a2 = 0;
      a2[1] = 0;
      return result;
    }
    if ((result & 0xFFFFFF80) != 0)
    {
      int v10 = (result & 0x3F) << 8;
      unsigned int v11 = (v10 | (result >> 6) & 0x3F) << 8;
      unsigned int v12 = (((v11 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
      unsigned int v13 = (v11 | (result >> 12)) + 8487393;
      if (WORD1(result)) {
        unsigned int v7 = v12;
      }
      else {
        unsigned int v7 = v13;
      }
      if (result <= 0x7FF) {
        unsigned int v7 = (v10 | (result >> 6)) + 33217;
      }
LABEL_10:
      uint64_t v8 = v4;
      while (1)
      {
        *(unsigned char *)(a1 + v8) = v7 - 1;
        uint64_t v4 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          break;
        }
        ++v8;
        BOOL v9 = v7 >= 0x100;
        v7 >>= 8;
        if (!v9) {
          goto LABEL_2;
        }
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (result > 0xFF)
    {
      __break(1u);
      goto LABEL_23;
    }
    unsigned int v7 = (result + 1);
    if ((_BYTE)result != 0xFF) {
      goto LABEL_10;
    }
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t result = static String._tryFromUTF8(_:)();
    *a2 = result;
    a2[1] = v14;
    return result;
  }
LABEL_24:
  __break(1u);
  return result;
}

__CFString *String.init(contentsOfFile:encoding:)(uint64_t a1, uint64_t a2, __CFString **a3)
{
  uint64_t v4 = *a3;
  uint64_t v24 = MEMORY[0x1E4FBC868];
  *(void *)&long long v21 = a1;
  *((void *)&v21 + 1) = a2;
  uint64_t v22 = 0;
  LOBYTE(v23) = 0;
  swift_bridgeObjectRetain();
  uint64_t v5 = readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)(&v21, 1, 0, 1, 0, MEMORY[0x1E4FBC860], &v24);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v3)
  {
    uint64_t v8 = (__CFString *)specialized String.init<A>(bytes:encoding:)(v5, v7, (uint64_t)v4);
    if (v9)
    {
      uint64_t v4 = v8;
      outlined consume of Data._Representation(v5, v7);
      return v4;
    }
    uint64_t v4 = @"NSCocoaErrorDomain";
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v11 = objc_allocWithZone((Class)NSError);
    uint64_t v12 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, 259, _NativeDictionary.bridged()(), (void)v21, *((void *)&v21 + 1), v22, v23);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v14 = objc_msgSend(v13, sel_domain);
    id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    int v17 = v16;

    if (v15 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v17 != v18)
    {
      uint64_t v4 = v18;
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v20)
      {
LABEL_12:
        swift_willThrow();
        outlined consume of Data._Representation(v5, v7);
        return v4;
      }
      __break(1u);
    }
    swift_bridgeObjectRelease_n();
    goto LABEL_12;
  }
  return v4;
}

__CFString *String.init(contentsOf:encoding:)(uint64_t *a1, __CFString **a2)
{
  uint64_t v3 = *a2;
  uint64_t v21 = *a1;
  long long v22 = *(_OWORD *)(a1 + 1);
  id v4 = specialized Data.init(contentsOf:options:)((uint64_t)&v21, 0);
  if (!v2)
  {
    uint64_t v6 = (uint64_t)v4;
    unint64_t v7 = v5;
    uint64_t v8 = (__CFString *)specialized String.init<A>(bytes:encoding:)((uint64_t)v4, v5, (uint64_t)v3);
    if (v9)
    {
      uint64_t v3 = v8;
      outlined consume of Data._Representation(v6, v7);
      return v3;
    }
    uint64_t v3 = @"NSCocoaErrorDomain";
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v11 = objc_allocWithZone((Class)NSError);
    uint64_t v12 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, 259, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v14 = objc_msgSend(v13, sel_domain);
    id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    int v17 = v16;

    if (v15 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v17 != v18)
    {
      uint64_t v3 = v18;
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v20)
      {
LABEL_12:
        swift_willThrow();
        outlined consume of Data._Representation(v6, v7);
        return v3;
      }
      __break(1u);
    }
    swift_bridgeObjectRelease_n();
    goto LABEL_12;
  }
  return v3;
}

uint64_t String.init(contentsOfFile:usedEncoding:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v42 = MEMORY[0x1E4FBC868];
  *(void *)&long long v39 = a1;
  *((void *)&v39 + 1) = a2;
  uint64_t v40 = 0;
  char v41 = 0;
  swift_bridgeObjectRetain();
  uint64_t v6 = readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)(&v39, 0, 0, 1, 0, (uint64_t)&outlined read-only object #0 of String.init(contentsOfFile:usedEncoding:), &v42);
  unint64_t v8 = v7;
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  uint64_t v9 = v42;
  if (v3) {
    goto LABEL_2;
  }
  if (!*(void *)(v42 + 16)
    || (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x80000001823A8E40), (v11 & 1) == 0))
  {
LABEL_7:
    outlined copy of Data._Representation(v6, v8);
    id v15 = specialized String.init(dataOfUnknownEncoding:usedEncoding:)(v6, v8, a3);
    if (v16)
    {
      id v4 = v15;
      outlined consume of Data._Representation(v6, v8);
      swift_bridgeObjectRelease();
      return (uint64_t)v4;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v18 = objc_allocWithZone((Class)NSError);
    uint64_t v19 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v20 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, 259, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v4 = objc_msgSend(v20, sel_domain);
    id v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v23 = v22;

    if (v21 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v23 != v24)
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v26)
      {
LABEL_17:
        swift_willThrow();
LABEL_18:
        outlined consume of Data._Representation(v6, v8);
LABEL_2:
        swift_bridgeObjectRelease();
        return (uint64_t)v4;
      }
      __break(1u);
    }
    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  uint64_t v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
  uint64_t v14 = *v12;
  unint64_t v13 = v12[1];
  outlined copy of Data._Representation(*v12, v13);
  encodingFromDataForExtendedAttribute(_:)(v14, v13, (uint64_t)&v39);
  if (BYTE8(v39))
  {
    outlined consume of Data._Representation(v14, v13);
    goto LABEL_7;
  }
  unint64_t v38 = v13;
  uint64_t v27 = v39;
  uint64_t v28 = specialized String.init<A>(bytes:encoding:)(v6, v8, v39);
  if (v29)
  {
    id v4 = v28;
    outlined consume of Data._Representation(v14, v38);
    outlined consume of Data._Representation(v6, v8);
    swift_bridgeObjectRelease();
    *a3 = v27;
    return (uint64_t)v4;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v30 = objc_allocWithZone((Class)NSError);
  uint64_t v31 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v32 = objc_msgSend(v30, sel_initWithDomain_code_userInfo_, v31, 259, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v33 = objc_msgSend(v32, sel_domain);
  id v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  id v4 = v35;

  if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v4 == v36)
  {
    swift_bridgeObjectRelease_n();
LABEL_25:
    swift_willThrow();
    outlined consume of Data._Representation(v14, v38);
    goto LABEL_18;
  }
  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v37) {
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t String.init(contentsOf:usedEncoding:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v46 = MEMORY[0x1E4FBC868];
  *(void *)&long long v43 = v6;
  *((void *)&v43 + 1) = v5;
  uint64_t v44 = v7;
  char v45 = 1;
  swift_retain();
  id v8 = v6;
  swift_retain();
  id v9 = &outlined read-only object #0 of String.init(contentsOf:usedEncoding:);
  uint64_t v10 = v3;
  uint64_t v11 = readDataFromFile(path:reportProgress:maxLength:options:attributesToRead:attributes:)(&v43, 0, 0, 1, 0, (uint64_t)&outlined read-only object #0 of String.init(contentsOf:usedEncoding:), &v46);
  unint64_t v13 = v12;
  swift_arrayDestroy();
  swift_release();
  swift_release();

  uint64_t v14 = v46;
  if (v10) {
    goto LABEL_2;
  }
  if (*(void *)(v46 + 16))
  {
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x80000001823A8E40);
    if (v16)
    {
      int v17 = (uint64_t *)(*(void *)(v14 + 56) + 16 * v15);
      uint64_t v19 = *v17;
      unint64_t v18 = v17[1];
      outlined copy of Data._Representation(*v17, v18);
      encodingFromDataForExtendedAttribute(_:)(v19, v18, (uint64_t)&v43);
      if ((BYTE8(v43) & 1) == 0)
      {
        unint64_t v42 = v18;
        uint64_t v31 = v43;
        id v32 = specialized String.init<A>(bytes:encoding:)(v11, v13, v43);
        if (v33)
        {
          id v9 = v32;
          outlined consume of Data._Representation(v19, v42);
          outlined consume of Data._Representation(v11, v13);
          swift_bridgeObjectRelease();
          *a2 = v31;
          return (uint64_t)v9;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v34 = objc_allocWithZone((Class)NSError);
        uint64_t v35 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v36 = objc_msgSend(v34, sel_initWithDomain_code_userInfo_, v35, 259, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v37 = objc_msgSend(v36, sel_domain);
        id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        id v9 = v39;

        if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v9 == v40)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if ((v41 & 1) == 0) {
            goto LABEL_24;
          }
        }
        swift_willThrow();
        outlined consume of Data._Representation(v19, v42);
        goto LABEL_15;
      }
      outlined consume of Data._Representation(v19, v18);
    }
  }
  outlined copy of Data._Representation(v11, v13);
  id v20 = specialized String.init(dataOfUnknownEncoding:usedEncoding:)(v11, v13, a2);
  if (v21)
  {
    id v9 = v20;
    outlined consume of Data._Representation(v11, v13);
    swift_bridgeObjectRelease();
    return (uint64_t)v9;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v23 = objc_allocWithZone((Class)NSError);
  uint64_t v24 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v25 = objc_msgSend(v23, sel_initWithDomain_code_userInfo_, v24, 259, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v9 = objc_msgSend(v25, sel_domain);
  id v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v28 = v27;

  if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v28 == v29)
  {
    swift_bridgeObjectRelease_n();
LABEL_14:
    swift_willThrow();
LABEL_15:
    outlined consume of Data._Representation(v11, v13);
LABEL_2:
    swift_bridgeObjectRelease();
    return (uint64_t)v9;
  }
  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v30) {
    goto LABEL_14;
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

unint64_t extendedAttributeData(for:)(unint64_t *a1)
{
  CFStringEncoding v1 = CFStringConvertNSStringEncodingToEncoding(*a1);
  if (v1 == -1) {
    return 0;
  }
  CFStringRef v2 = (id)CFStringConvertEncodingToIANACharSetName(v1);
  if (v2)
  {
    uint64_t v3 = (__CFString *)v2;
    unint64_t v11 = 0xE000000000000000;
    type metadata accessor for CFStringRef(0);
    id v4 = v3;
    _print_unlocked<A, B>(_:_:)();
    v5._uint64_t countAndFlagsBits = 59;
    v5._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    uint64_t v10 = 4;
    unint64_t v7 = String.data(using:allowLossyConversion:)(&v10, 0, 0, 0xE000000000000000);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v11 = 0xE100000000000000;
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    uint64_t v10 = 4;
    unint64_t v7 = String.data(using:allowLossyConversion:)(&v10, 0, 0x3BuLL, 0xE100000000000000);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t StringProtocol.write<A>(toFile:atomically:encoding:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  id v9 = a5;
  uint64_t v59 = a2;
  uint64_t v60 = a1;
  uint64_t v10 = *((void *)a5 - 1);
  MEMORY[0x1F4188790](a1);
  unint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = *v13;
  id v61 = *v13;
  uint64_t v15 = StringProtocol.data(using:allowLossyConversion:)((uint64_t *)&v61, 0);
  if (v16 >> 60 == 15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v17 = objc_allocWithZone((Class)NSError);
    uint64_t v18 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v14 = objc_msgSend(v17, sel_initWithDomain_code_userInfo_, v18, 517, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v9 = objc_msgSend(v14, sel_domain);
    id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v21 = v20;

    if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v21 == v22)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v15 = swift_bridgeObjectRelease();
      if ((v10 & 1) == 0)
      {
        __break(1u);
        goto LABEL_8;
      }
    }
    return swift_willThrow();
  }
LABEL_8:
  uint64_t v24 = v15;
  unint64_t v25 = v16;
  uint64_t v58 = a7;
  id v61 = v14;
  unint64_t v26 = extendedAttributeData(for:)((unint64_t *)&v61);
  if (v27 >> 60 == 15)
  {
    uint64_t v28 = (void *)MEMORY[0x1E4FBC868];
LABEL_15:
    uint64_t v46 = v59 & 1;
    (*(void (**)(char *, uint64_t, id))(v10 + 16))(v12, v60, v9);
    uint64_t v47 = String.init<A>(_:)();
    uint64_t v49 = v48;
    MEMORY[0x1F4188790](v47);
    *(&v51 - 8) = v50;
    *(&v51 - 7) = v49;
    *(&v51 - 6) = 0;
    *((unsigned char *)&v51 - 40) = 0;
    *(&v51 - 4) = v46;
    *(&v51 - 3) = (uint64_t)v28;
    *((unsigned char *)&v51 - 16) = 0;
    specialized Data._Representation.withUnsafeBytes<A>(_:)((uint64_t (*)(uint64_t, uint64_t))_s10Foundation11writeToFile4path4data7options10attributes14reportProgressyAA9PathOrURLO_AA4DataVSo20NSDataWritingOptionsVSDySSAKGSbtKFySWKXEfU_TA_0, (uint64_t)(&v51 - 10), v24, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined consume of Data?(v24, v25);
  }
  unint64_t v30 = v26;
  unint64_t v31 = v27;
  uint64_t v54 = v7;
  unint64_t v55 = v25;
  uint64_t v53 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Data)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  *(void *)(inited + 32) = 0xD000000000000016;
  *(void *)(inited + 40) = 0x80000001823A8E40;
  *(void *)(inited + 48) = v30;
  *(void *)(inited + 56) = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  uint64_t v28 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v57 = *(void *)(inited + 32);
  uint64_t v33 = v30;
  uint64_t v34 = *(void *)(inited + 40);
  uint64_t v35 = *(void *)(inited + 48);
  unint64_t v36 = *(void *)(inited + 56);
  uint64_t v52 = v33;
  outlined copy of Data?(v33, v31);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v56 = v35;
  uint64_t v37 = v35;
  unint64_t v38 = v36;
  uint64_t v39 = v57;
  outlined copy of Data._Representation(v37, v38);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v39, v34);
  if (v40)
  {
    __break(1u);
  }
  else
  {
    v28[(result >> 6) + 8] |= 1 << result;
    char v41 = (uint64_t *)(v28[6] + 16 * result);
    *char v41 = v39;
    v41[1] = v34;
    unint64_t v42 = (uint64_t *)(v28[7] + 16 * result);
    unint64_t v25 = v55;
    *unint64_t v42 = v56;
    v42[1] = v38;
    uint64_t v43 = v28[2];
    BOOL v44 = __OFADD__(v43, 1);
    uint64_t v45 = v43 + 1;
    if (!v44)
    {
      v28[2] = v45;
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v52, v31);
      uint64_t v24 = v53;
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

unint64_t StringProtocol.write(to:atomically:encoding:)(uint64_t a1, uint64_t a2, id *a3)
{
  Swift::String v6 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  id v8 = *a3;
  id v55 = *a3;
  uint64_t v9 = StringProtocol.data(using:allowLossyConversion:)((uint64_t *)&v55, 0);
  if (v10 >> 60 == 15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v11 = objc_allocWithZone((Class)NSError);
    uint64_t v12 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, 517, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v8 = objc_msgSend(v13, sel_domain);
    id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v16 = v15;

    if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v16 == v17)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v5 = v17;
      uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v9 = swift_bridgeObjectRelease();
      if ((v7 & 1) == 0)
      {
        __break(1u);
        goto LABEL_8;
      }
    }
    return swift_willThrow();
  }
LABEL_8:
  uint64_t v19 = v9;
  unint64_t v20 = v10;
  uint64_t v52 = a2;
  id v53 = v6;
  uint64_t v54 = v3;
  id v55 = v8;
  unint64_t v21 = extendedAttributeData(for:)((unint64_t *)&v55);
  if (v22 >> 60 == 15)
  {
    id v23 = (void *)MEMORY[0x1E4FBC868];
LABEL_15:
    MEMORY[0x1F4188790](v21);
    v43[2] = v53;
    v43[3] = v5;
    v43[4] = v7;
    char v44 = 1;
    uint64_t v45 = v41;
    uint64_t v46 = v23;
    char v47 = 0;
    swift_retain();
    id v42 = v53;
    swift_retain();
    specialized Data._Representation.withUnsafeBytes<A>(_:)((uint64_t (*)(uint64_t, uint64_t))_s10Foundation11writeToFile4path4data7options10attributes14reportProgressyAA9PathOrURLO_AA4DataVSo20NSDataWritingOptionsVSDySSAKGSbtKFySWKXEfU_TA_0, (uint64_t)v43, v19, v20);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    return outlined consume of Data?(v19, v20);
  }
  uint64_t v25 = v21;
  unint64_t v26 = v22;
  uint64_t v49 = v19;
  uint64_t v50 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Data)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  *(void *)(inited + 32) = 0xD000000000000016;
  *(void *)(inited + 40) = 0x80000001823A8E40;
  *(void *)(inited + 48) = v25;
  *(void *)(inited + 56) = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  id v23 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v28 = *(void *)(inited + 32);
  uint64_t v29 = *(void *)(inited + 40);
  uint64_t v30 = *(void *)(inited + 48);
  unint64_t v31 = *(void *)(inited + 56);
  uint64_t v48 = v25;
  uint64_t v32 = v25;
  uint64_t v33 = v30;
  outlined copy of Data?(v32, v26);
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v51 = v31;
  outlined copy of Data._Representation(v33, v31);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v28, v29);
  if (v34)
  {
    __break(1u);
  }
  else
  {
    v23[(result >> 6) + 8] |= 1 << result;
    uint64_t v35 = (uint64_t *)(v23[6] + 16 * result);
    *uint64_t v35 = v28;
    v35[1] = v29;
    unint64_t v36 = (uint64_t *)(v23[7] + 16 * result);
    uint64_t v5 = v50;
    unint64_t v37 = v51;
    *unint64_t v36 = v33;
    v36[1] = v37;
    uint64_t v38 = v23[2];
    BOOL v39 = __OFADD__(v38, 1);
    uint64_t v40 = v38 + 1;
    if (!v39)
    {
      v23[2] = v40;
      swift_release();
      swift_bridgeObjectRelease();
      unint64_t v21 = outlined consume of Data?(v48, v26);
      uint64_t v19 = v49;
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SuSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Su_SsTG5SiTf1cn_n(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    id v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    id v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    id v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SuSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Su_SsTG5SiTf1nnc_nTf4xnn_n((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SuSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Su_SsTG5SiTf1nnc_nTf4xnn_n(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_96;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_92;
  }
  if (v17 < a3 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v18 < v15)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  uint64_t v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    uint64_t v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v33 = a6 + 48;
        unsigned __int8 v34 = a6 + 55;
        unsigned __int8 v35 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v33 = 58;
        }
        else
        {
          unsigned __int8 v35 = 97;
          unsigned __int8 v34 = 65;
        }
        if (v19)
        {
          unint64_t v24 = 0;
          unint64_t v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            unsigned int v38 = *v36;
            if (v38 < 0x30 || v38 >= v33)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                uint64_t v29 = 0;
                if (v38 < 0x61 || v38 >= v35) {
                  return v29;
                }
                char v39 = -87;
              }
              else
              {
                char v39 = -55;
              }
            }
            else
            {
              char v39 = -48;
            }
            if (!is_mul_ok(v24, a6)) {
              return 0;
            }
            unint64_t v40 = v24 * a6;
            unsigned __int8 v41 = v38 + v39;
            BOOL v32 = __CFADD__(v40, v41);
            unint64_t v24 = v40 + v41;
            if (v32) {
              return 0;
            }
            ++v36;
            --v37;
          }
          while (v37);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_95;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v42 = a6 + 48;
      unsigned __int8 v43 = a6 + 55;
      unsigned __int8 v44 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v42 = 58;
      }
      else
      {
        unsigned __int8 v44 = 97;
        unsigned __int8 v43 = 65;
      }
      if (v19)
      {
        unint64_t v24 = 0;
        while (1)
        {
          unsigned int v45 = *v19;
          if (v45 < 0x30 || v45 >= v42)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              uint64_t v29 = 0;
              if (v45 < 0x61 || v45 >= v44) {
                return v29;
              }
              char v46 = -87;
            }
            else
            {
              char v46 = -55;
            }
          }
          else
          {
            char v46 = -48;
          }
          if (!is_mul_ok(v24, a6)) {
            return 0;
          }
          unint64_t v47 = v24 * a6;
          unsigned __int8 v48 = v45 + v46;
          BOOL v32 = __CFADD__(v47, v48);
          unint64_t v24 = v47 + v48;
          if (v32) {
            return 0;
          }
          ++v19;
          if (!--result) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        unint64_t v24 = 0;
        uint64_t v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          if (!is_mul_ok(v24, a6)) {
            return 0;
          }
          unint64_t v30 = v24 * a6;
          unsigned __int8 v31 = v27 + v28;
          BOOL v32 = v30 >= v31;
          unint64_t v24 = v30 - v31;
          if (!v32) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

void *specialized String.init(dataOfUnknownEncoding:usedEncoding:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v3 = 4;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x181DF858CLL);
      }
      uint64_t v7 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v7 < 4)
      {
        if (v7 < 2)
        {
LABEL_23:
          uint64_t v3 = 4;
          goto LABEL_24;
        }
LABEL_17:
        if ((v7 & 1) == 0
          && (Data.subscript.getter(0, a1, a2) == 254
           && Data.subscript.getter(1, a1, a2) == 0xFF
           || Data.subscript.getter(0, a1, a2) == 0xFF
           && Data.subscript.getter(1, a1, a2) == 254))
        {
          uint64_t v3 = 10;
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      if ((Data.subscript.getter(0, a1, a2) != 0xFF
         || Data.subscript.getter(1, a1, a2) != 254
         || Data.subscript.getter(2, a1, a2)
         || Data.subscript.getter(3, a1, a2))
        && (Data.subscript.getter(0, a1, a2)
         || Data.subscript.getter(1, a1, a2)
         || Data.subscript.getter(3, a1, a2) != 254
         || Data.subscript.getter(4, a1, a2) != 0xFF))
      {
        goto LABEL_17;
      }
      uint64_t v3 = 2348810496;
LABEL_24:
      unint64_t v10 = specialized String.init<A>(bytes:encoding:)(a1, a2, v3);
      uint64_t v12 = v11;
      outlined consume of Data._Representation(a1, a2);
      if (v12) {
        *a3 = v3;
      }
      return v10;
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      uint64_t v7 = v8 - v9;
      if (!__OFSUB__(v8, v9)) {
        goto LABEL_6;
      }
      goto LABEL_29;
    case 3uLL:
      goto LABEL_24;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TimeZoneCache()
{
  return &type metadata for TimeZoneCache;
}

uint64_t destroy for TimeZoneCache.State(id *a1)
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TimeZoneCache.State(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  uint64_t v5 = *(void **)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  uint64_t v7 = *(void **)(a2 + 88);
  Swift::String v6 = *(void **)(a2 + 96);
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = v6;
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v8;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_unknownObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = v5;
  id v10 = v7;
  id v11 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TimeZoneCache.State(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v4;
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[4] = v5;
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Swift::String v6 = (void *)a1[10];
  uint64_t v7 = (void *)a2[10];
  a1[10] = v7;
  id v8 = v7;

  id v9 = (void *)a1[11];
  id v10 = (void *)a2[11];
  a1[11] = v10;
  id v11 = v10;

  uint64_t v12 = (void *)a1[12];
  uint64_t v13 = (void *)a2[12];
  a1[12] = v13;
  id v14 = v13;

  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TimeZoneCache.State(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();

  uint64_t v4 = *(void **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);

  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeZoneCache.State(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TimeZoneCache.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unint64_t static Predicate.true.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a2 & 0xFFFFFFFFFFFFFFFELL;
  if (a1 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    uint64_t v7 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a1)
    {
      id v10 = (uint64_t *)((char *)&v20 - v9);
      uint64_t v11 = a1;
      do
      {
        v5 += 8;
        *v10++ = type metadata accessor for PredicateExpressions.Variable();
        --v11;
      }
      while (v11);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v7 = TupleTypeMetadata;
  }
  uint64_t v12 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  id v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (one-time initialization token for nextID != -1) {
      swift_once();
    }
    int64_t v15 = (int *)(v7 + 32);
    uint64_t v16 = a1;
    do
    {
      if (a1 == 1) {
        int v17 = 0;
      }
      else {
        int v17 = *v15;
      }
      *(void *)&v14[v17] = atomic_fetch_add_explicit(&static PredicateExpressions.VariableID.nextID, 1uLL, memory_order_relaxed);
      v15 += 4;
      --v16;
    }
    while (v16);
  }
  uint64_t v18 = type metadata accessor for Predicate();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3 + *(int *)(v18 + 36), v14, v7);
  *(void *)(a3 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
  unint64_t result = lazy protocol witness table accessor for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>();
  *(void *)(a3 + 32) = result;
  *(unsigned char *)a3 = 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>);
  }
  return result;
}

unint64_t static Predicate.false.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a2 & 0xFFFFFFFFFFFFFFFELL;
  if (a1 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    uint64_t v7 = TupleTypeMetadata;
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (a1)
    {
      id v10 = (uint64_t *)((char *)&v20 - v9);
      uint64_t v11 = a1;
      do
      {
        v5 += 8;
        *v10++ = type metadata accessor for PredicateExpressions.Variable();
        --v11;
      }
      while (v11);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v7 = TupleTypeMetadata;
  }
  uint64_t v12 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata);
  id v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (one-time initialization token for nextID != -1) {
      swift_once();
    }
    int64_t v15 = (int *)(v7 + 32);
    uint64_t v16 = a1;
    do
    {
      if (a1 == 1) {
        int v17 = 0;
      }
      else {
        int v17 = *v15;
      }
      *(void *)&v14[v17] = atomic_fetch_add_explicit(&static PredicateExpressions.VariableID.nextID, 1uLL, memory_order_relaxed);
      v15 += 4;
      --v16;
    }
    while (v16);
  }
  uint64_t v18 = type metadata accessor for Predicate();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3 + *(int *)(v18 + 36), v14, v7);
  *(void *)(a3 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.Value<Bool>);
  unint64_t result = lazy protocol witness table accessor for type PredicateExpressions.Value<Bool> and conformance <A> PredicateExpressions.Value<A>();
  *(void *)(a3 + 32) = result;
  *(unsigned char *)a3 = 0;
  return result;
}

void *initializeBufferWithCopyOfBuffer for Predicate(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    uint64_t v8 = (**(uint64_t (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v9 = *(int *)(a3 + 36);
    id v10 = (char *)v4 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = *(void *)(a3 + 16);
    if (v12 == 1)
    {
      uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    }
    else
    {
      MEMORY[0x1F4188790](v8);
      if (v12)
      {
        unint64_t v16 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
        int v17 = (uint64_t *)((char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
        uint64_t v18 = v12;
        do
        {
          v16 += 8;
          *v17++ = type metadata accessor for PredicateExpressions.Variable();
          --v18;
        }
        while (v18);
      }
      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    (*(void (**)(char *, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 16))(v10, v11);
  }
  return v4;
}

uint64_t *assignWithCopy for Predicate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  Swift::String v6 = __swift_assign_boxed_opaque_existential_1(a1, a2);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = *(void *)(a3 + 16);
  if (v8 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](v6);
    if (v8)
    {
      unint64_t v11 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v12 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v13 = v8;
      do
      {
        v11 += 8;
        *v12++ = type metadata accessor for PredicateExpressions.Variable();
        --v13;
      }
      while (v13);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(char *, char *))(*(void *)(TupleTypeMetadata - 8) + 24))((char *)a1 + v7, (char *)a2 + v7);
  return a1;
}

uint64_t initializeWithTake for Predicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if (v7)
    {
      unint64_t v11 = *(void *)(v9 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v12 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v13 = v7;
      do
      {
        v11 += 8;
        *v12++ = type metadata accessor for PredicateExpressions.Variable();
        --v13;
      }
      while (v13);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 32))(a1 + v6, a2 + v6);
  return a1;
}

uint64_t assignWithTake for Predicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_destroy_boxed_opaque_existential_1(a1);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = *(void *)(a3 + 16);
  if (v9 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
  }
  else
  {
    MEMORY[0x1F4188790](v6);
    if (v9)
    {
      unint64_t v12 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v13 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v14 = v9;
      do
      {
        v12 += 8;
        *v13++ = type metadata accessor for PredicateExpressions.Variable();
        --v14;
      }
      while (v14);
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 40))(a1 + v8, a2 + v8);
  return a1;
}

uint64_t sub_181DF9450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = *(void *)(a3 + 16);
    if (v8 == 1)
    {
      uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    }
    else
    {
      MEMORY[0x1F4188790](a1);
      if (v8)
      {
        unint64_t v11 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v12 = (uint64_t *)((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
        uint64_t v13 = v8;
        do
        {
          v11 += 8;
          *v12++ = type metadata accessor for PredicateExpressions.Variable();
          --v13;
        }
        while (v13);
      }
      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 48))(a1 + *(int *)(a3 + 36), a2);
  }
}

uint64_t sub_181DF9598(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = *(void *)(a4 + 16);
    if (v7 == 1)
    {
      uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable();
    }
    else
    {
      MEMORY[0x1F4188790](result);
      if (v7)
      {
        unint64_t v10 = *(void *)(a4 + 24) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v11 = (uint64_t *)((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
        uint64_t v12 = v7;
        do
        {
          v10 += 8;
          *v11++ = type metadata accessor for PredicateExpressions.Variable();
          --v12;
        }
        while (v12);
      }
      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2);
  }
  return result;
}

ValueMetadata *type metadata accessor for PredicateExpressions()
{
  return &type metadata for PredicateExpressions;
}

uint64_t one-time initialization function for IDNScriptAllowedList()
{
  uint64_t result = closure #1 in variable initialization expression of static URL.UnicodeLookalikeTable.IDNScriptAllowedList();
  static URL.UnicodeLookalikeTable.IDNScriptAllowedList = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static URL.UnicodeLookalikeTable.IDNScriptAllowedList()
{
  uint64_t v24 = MEMORY[0x1E4FBC870];
  long long v23 = xmmword_1821F8A10;
  unsigned int v0 = MEMORY[0x1853097C0](4106, &v23);
  if (v0 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v0);
  }
  long long v23 = xmmword_1821F8A20;
  unsigned int v1 = MEMORY[0x1853097C0](4106, &v23);
  if (v1 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v1);
  }
  long long v23 = xmmword_1821F8A30;
  unsigned int v2 = MEMORY[0x1853097C0](4106, &v23);
  if (v2 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v2);
  }
  long long v23 = xmmword_1821F8A40;
  unsigned int v3 = MEMORY[0x1853097C0](4106, &v23);
  if (v3 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v3);
  }
  long long v23 = xmmword_1821F8A50;
  unsigned int v4 = MEMORY[0x1853097C0](4106, &v23);
  if (v4 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v4);
  }
  if (((unint64_t)"n3URL21UnicodeLookalikeTable" & 0x1000000000000000) != 0)
  {
    _StringGuts._slowWithCString<A>(_:)();
    unint64_t v6 = v23;
    if ((unint64_t)v23 < 0xC8) {
LABEL_16:
    }
      specialized Set._Variant.insert(_:)((unint64_t *)&v23, v6);
  }
  else
  {
    if (((unint64_t)"n3URL21UnicodeLookalikeTable" & 0x2000000000000000) != 0)
    {
      *(void *)&long long v23 = 0xD000000000000013;
      *((void *)&v23 + 1) = (unint64_t)"n3URL21UnicodeLookalikeTable" & 0xFFFFFFFFFFFFFFLL;
      uint64_t v5 = &v23;
    }
    else
    {
      uint64_t v5 = (long long *)(((unint64_t)"n3URL21UnicodeLookalikeTable" & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    unint64_t v6 = (int)MEMORY[0x1853097C0](4106, v5);
    if (v6 < 0xC8) {
      goto LABEL_16;
    }
  }
  long long v23 = xmmword_1821F8A60;
  unsigned int v7 = MEMORY[0x1853097C0](4106, &v23);
  if (v7 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v7);
  }
  long long v23 = xmmword_1821F8A70;
  unsigned int v8 = MEMORY[0x1853097C0](4106, &v23);
  if (v8 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v8);
  }
  long long v23 = xmmword_1821F8A80;
  unsigned int v9 = MEMORY[0x1853097C0](4106, &v23);
  if (v9 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v9);
  }
  long long v23 = xmmword_1821F8A90;
  unsigned int v10 = MEMORY[0x1853097C0](4106, &v23);
  if (v10 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v10);
  }
  long long v23 = xmmword_1821F8AA0;
  unsigned int v11 = MEMORY[0x1853097C0](4106, &v23);
  if (v11 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v11);
  }
  long long v23 = xmmword_1821F8AB0;
  unsigned int v12 = MEMORY[0x1853097C0](4106, &v23);
  if (v12 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v12);
  }
  long long v23 = xmmword_1821F8AC0;
  unsigned int v13 = MEMORY[0x1853097C0](4106, &v23);
  if (v13 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v13);
  }
  long long v23 = xmmword_1821F8AD0;
  unsigned int v14 = MEMORY[0x1853097C0](4106, &v23);
  if (v14 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v14);
  }
  if (((unint64_t)"Canadian_Aboriginal" & 0x1000000000000000) != 0)
  {
    _StringGuts._slowWithCString<A>(_:)();
    unint64_t v16 = v23;
    if ((unint64_t)v23 < 0xC8) {
LABEL_38:
    }
      specialized Set._Variant.insert(_:)((unint64_t *)&v23, v16);
  }
  else
  {
    if (((unint64_t)"Canadian_Aboriginal" & 0x2000000000000000) != 0)
    {
      *(void *)&long long v23 = 0xD000000000000014;
      *((void *)&v23 + 1) = (unint64_t)"Canadian_Aboriginal" & 0xFFFFFFFFFFFFFFLL;
      uint64_t v15 = &v23;
    }
    else
    {
      uint64_t v15 = (long long *)(((unint64_t)"Canadian_Aboriginal" & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    unint64_t v16 = (int)MEMORY[0x1853097C0](4106, v15);
    if (v16 < 0xC8) {
      goto LABEL_38;
    }
  }
  long long v23 = xmmword_1821F8AE0;
  unsigned int v17 = MEMORY[0x1853097C0](4106, &v23);
  if (v17 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v17);
  }
  long long v23 = xmmword_1821F8AF0;
  unsigned int v18 = MEMORY[0x1853097C0](4106, &v23);
  if (v18 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v18);
  }
  long long v23 = xmmword_1821F8B00;
  unsigned int v19 = MEMORY[0x1853097C0](4106, &v23);
  if (v19 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v19);
  }
  long long v23 = xmmword_1821F8B10;
  unsigned int v20 = MEMORY[0x1853097C0](4106, &v23);
  if (v20 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v20);
  }
  long long v23 = xmmword_1821F8B20;
  unsigned int v21 = MEMORY[0x1853097C0](4106, &v23);
  if (v21 < 0xC8) {
    specialized Set._Variant.insert(_:)((unint64_t *)&v23, v21);
  }
  return v24;
}

uint64_t closure #1 in allowIDNScript #1 (_:to:) in closure #1 in variable initialization expression of static URL.UnicodeLookalikeTable.IDNScriptAllowedList@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = MEMORY[0x1853097C0](4106, a1);
  *a2 = (int)result;
  return result;
}

uint64_t type metadata accessor for URL.UnicodeLookalikeTable()
{
  return self;
}

uint64_t Unicode.Scalar.isLookalikeScalarOfScriptType(_:)(int a1, int a2)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 3:
      if ((a2 - 1352) >= 0x3E) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = (0x2221000000002221uLL >> (a2 - 72)) & 1;
      }
      break;
    case 35:
      uint64_t result = a2 == 3046;
      break;
    case 38:
      uint64_t result = a2 == 3585;
      break;
    case 40:
      uint64_t result = 1;
      if (a2 <= 5550)
      {
        if (((a2 - 5229) > 0x3D || ((1 << (a2 - 109)) & 0x2000000000000025) == 0)
          && a2 != 5500
          && a2 != 5511)
        {
LABEL_16:
          uint64_t result = 0;
        }
      }
      else
      {
        switch(a2)
        {
          case 5551:
          case 5556:
          case 5573:
          case 5598:
          case 5609:
          case 5617:
          case 5620:
            return result;
          case 5552:
          case 5553:
          case 5554:
          case 5555:
          case 5557:
          case 5558:
          case 5559:
          case 5560:
          case 5561:
          case 5562:
          case 5563:
          case 5564:
          case 5565:
          case 5566:
          case 5567:
          case 5568:
          case 5569:
          case 5570:
          case 5571:
          case 5572:
          case 5574:
          case 5575:
          case 5576:
          case 5577:
          case 5578:
          case 5579:
          case 5580:
          case 5581:
          case 5582:
          case 5583:
          case 5584:
          case 5585:
          case 5586:
          case 5587:
          case 5588:
          case 5589:
          case 5590:
          case 5591:
          case 5592:
          case 5593:
          case 5594:
          case 5595:
          case 5596:
          case 5597:
          case 5599:
          case 5600:
          case 5601:
          case 5602:
          case 5603:
          case 5604:
          case 5605:
          case 5606:
          case 5607:
          case 5608:
          case 5610:
          case 5611:
          case 5612:
          case 5613:
          case 5614:
          case 5615:
          case 5616:
          case 5618:
          case 5619:
            goto LABEL_16;
          default:
            if ((a2 - 5741) >= 2) {
              goto LABEL_16;
            }
            break;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

unint64_t String.UnicodeScalarView.hasSuffix(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v8 = a1;
  }
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v9 = 11;
  }
  else {
    uint64_t v9 = 7;
  }
  unint64_t v10 = v9 | (v8 << 16);
  uint64_t v11 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, v10, a1, a2);
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v12 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0) {
    uint64_t v13 = 11;
  }
  else {
    uint64_t v13 = 7;
  }
  unint64_t v14 = v13 | (v12 << 16);
  if (v11 >= String.UnicodeScalarView.distance(from:to:)(0xFuLL, v14, a3, a4))
  {
    char v16 = 0;
    return v16 & 1;
  }
  unint64_t result = String.UnicodeScalarView.distance(from:to:)(0xFuLL, v10, a1, a2);
  if (__OFSUB__(0, result))
  {
    __break(1u);
  }
  else
  {
    unint64_t result = String.UnicodeScalarView.index(_:offsetBy:)(v14, -(uint64_t)result, a3, a4);
    if (4 * v12 >= result >> 14)
    {
      String.UnicodeScalarView.subscript.getter();
      lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
      String.UnicodeScalarView.append<A>(contentsOf:)();
      char v16 = specialized Sequence<>.elementsEqual<A>(_:)(a1, a2, 0, 0xE000000000000000);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16 & 1;
    }
  }
  __break(1u);
  return result;
}

unint64_t String.UnicodeScalarView.index(_:offsetBy:limitedBy:)(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v7 = a3;
  uint64_t v10 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v10) = 1;
  }
  uint64_t v11 = 4 << v10;
  if ((a3 & 0xC) == 4 << v10) {
LABEL_55:
  }
    unint64_t v7 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7, a4, a5);
  unint64_t v12 = a1;
  if ((a1 & 0xC) == v11) {
    unint64_t v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a4, a5);
  }
  unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a4, a5);
  v7 >>= 14;
  if (a2 < 0)
  {
    uint64_t v11 = 0;
    a1 = v12 >> 14;
    unsigned int v20 = (char *)&v28 + 6;
    while (a1 < v7 || v7 < result >> 14)
    {
      if (result < 0x10000)
      {
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        unsigned int v27 = v20;
        unint64_t result = String.UnicodeScalarView._foreignIndex(before:)();
        unsigned int v20 = v27;
      }
      else
      {
        unint64_t v21 = result >> 16;
        if ((a5 & 0x2000000000000000) != 0)
        {
          unint64_t v29 = a4;
          uint64_t v30 = a5 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v29 + v21 - 1) & 0xC0) == 0x80)
          {
            uint64_t v24 = 0;
            do
              int v25 = v20[v21 + v24--] & 0xC0;
            while (v25 == 128);
            uint64_t v26 = 1 - v24;
          }
          else
          {
            uint64_t v26 = 1;
          }
          v21 -= v26;
        }
        else
        {
          uint64_t v22 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000) == 0)
          {
            char v28 = v20;
            uint64_t v22 = _StringObject.sharedUTF8.getter();
            unsigned int v20 = v28;
          }
          do
            int v23 = *(unsigned char *)(v22 - 1 + v21--) & 0xC0;
          while (v23 == 128);
        }
        unint64_t result = (v21 << 16) | 5;
      }
      if (--v11 <= a2)
      {
        if (a1 < v7 || result >> 14 >= v7) {
          return result;
        }
        return 0;
      }
    }
    return 0;
  }
  a1 = v12 >> 14;
  if (a2)
  {
    if ((a5 & 0x2000000000000000) != 0) {
      unint64_t v14 = HIBYTE(a5) & 0xF;
    }
    else {
      unint64_t v14 = a4 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v11 = a5 & 0xFFFFFFFFFFFFFFLL;
    while (v7 < a1 || result >> 14 < v7)
    {
      unint64_t v15 = result >> 16;
      if (result >> 16 >= v14)
      {
        __break(1u);
        goto LABEL_54;
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
        if (!--a2) {
          goto LABEL_26;
        }
      }
      else
      {
        if ((a5 & 0x2000000000000000) != 0)
        {
          unint64_t v29 = a4;
          uint64_t v30 = a5 & 0xFFFFFFFFFFFFFFLL;
          int v17 = *((unsigned __int8 *)&v29 + v15);
        }
        else
        {
          uint64_t v16 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000) == 0) {
            uint64_t v16 = _StringObject.sharedUTF8.getter();
          }
          int v17 = *(unsigned __int8 *)(v16 + v15);
        }
        int v18 = (char)v17;
        unsigned int v19 = __clz(v17 ^ 0xFF) - 24;
        if (v18 >= 0) {
          LOBYTE(v19) = 1;
        }
        unint64_t result = ((v15 + v19) << 16) | 5;
        if (!--a2) {
          goto LABEL_26;
        }
      }
    }
    return 0;
  }
LABEL_26:
  if (v7 >= a1 && v7 < result >> 14) {
    return 0;
  }
  return result;
}

unint64_t specialized URL.UnicodeLookalikeTable.isLookalikeSequence(withScalar:previousScalar:ofScriptType:)(int a1, uint64_t c, int a3)
{
  int v3 = c;
  unint64_t result = 0;
  if (c != 47 && (c & 0x100000000) == 0)
  {
    if (a3 == 2)
    {
      if ((a1 - 1632) >= 0xFFFFFFEB)
      {
        if ((c & 0x80000000) == 0) {
          return ublock_getCode(c) != UBLOCK_ARABIC;
        }
        __break(1u);
        goto LABEL_28;
      }
      return 0;
    }
    if (Unicode.Scalar.isLookalikeScalarOfScriptType(_:)(a3, a1))
    {
      if (v3 < 0)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
      }
      if (uscript_getScript() != a3)
      {
        if ((v3 - 65) > 0xFFFFFFDF)
        {
          if (v3 - 35) < 0x1E && ((0x30801005u >> (v3 - 35))) {
            return 1;
          }
        }
        else
        {
          unint64_t result = 1;
          if ((v3 - 94) > 0x20 || ((1 << (v3 - 94)) & 0x1E0000007) == 0) {
            return result;
          }
        }
      }
    }
    if ((Unicode.Scalar.isLookalikeScalarOfScriptType(_:)(a3, v3) & 1) == 0) {
      return 0;
    }
    if (a1 < 0) {
      goto LABEL_29;
    }
    if (uscript_getScript() == a3) {
      return 0;
    }
    if ((a1 - 65) > 0xFFFFFFDF)
    {
      if ((a1 - 35) < 0x1E) {
        return (0x30801005u >> (a1 - 35)) & 1;
      }
      return 0;
    }
    if ((a1 - 94) < 0x21) {
      return (0x1FFFFFF8uLL >> (a1 - 94)) & 1;
    }
    return 1;
  }
  return result;
}

uint64_t specialized URL.UnicodeLookalikeTable.isLookalikeScalar(_:withPreviousScalar:)(UChar32 a1, unint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_46;
  }
  unint64_t v2 = a2;
  UChar32 v3 = a1;
  if (!u_isprint(a1) || u_isUWhiteSpace(v3) || u_hasBinaryProperty(v3, UCHAR_DEFAULT_IGNORABLE_CODE_POINT)) {
    goto LABEL_5;
  }
  UBlockCode Code = ublock_getCode(v3);
  LOBYTE(a1) = 1;
  if (Code == UBLOCK_IPA_EXTENSIONS || Code == UBLOCK_DESERET) {
    return a1 & 1;
  }
  if (v3 > 5940)
  {
    if (v3 > 8530)
    {
      if ((v3 - 8531) < 0xB) {
        return a1 & 1;
      }
    }
    else
    {
      if (v3 > 7933)
      {
        switch(v3)
        {
          case 8208:
          case 8209:
          case 8228:
          case 8231:
          case 8249:
          case 8250:
          case 8257:
          case 8260:
          case 8274:
            return a1 & 1;
          case 8210:
          case 8211:
          case 8212:
          case 8213:
          case 8214:
          case 8215:
          case 8216:
          case 8217:
          case 8218:
          case 8219:
          case 8220:
          case 8221:
          case 8222:
          case 8223:
          case 8224:
          case 8225:
          case 8226:
          case 8227:
          case 8229:
          case 8230:
          case 8232:
          case 8233:
          case 8234:
          case 8235:
          case 8236:
          case 8237:
          case 8238:
          case 8239:
          case 8240:
          case 8241:
          case 8242:
          case 8243:
          case 8244:
          case 8245:
          case 8246:
          case 8247:
          case 8248:
          case 8251:
          case 8252:
          case 8253:
          case 8254:
          case 8255:
          case 8256:
          case 8258:
          case 8259:
          case 8261:
          case 8262:
          case 8263:
          case 8264:
          case 8265:
          case 8266:
          case 8267:
          case 8268:
          case 8269:
          case 8270:
          case 8271:
          case 8272:
          case 8273:
            goto LABEL_42;
          default:
            if ((v3 - 7934) >= 2) {
              goto LABEL_42;
            }
            break;
        }
        return a1 & 1;
      }
      if ((v3 - 7428) <= 0x1E && ((1 << (v3 - 4)) & 0x71000801) != 0
        || (v3 - 7836) < 2
        || v3 == 5941)
      {
        return a1 & 1;
      }
    }
  }
  else
  {
    if (v3 > 1459)
    {
      switch(v3)
      {
        case 1460:
        case 1465:
        case 1466:
        case 1468:
        case 1473:
        case 1474:
        case 1475:
        case 1476:
        case 1524:
        case 1545:
        case 1546:
          return a1 & 1;
        case 1461:
        case 1462:
        case 1463:
        case 1464:
        case 1467:
        case 1469:
        case 1470:
        case 1471:
        case 1472:
        case 1477:
        case 1478:
        case 1479:
        case 1480:
        case 1481:
        case 1482:
        case 1483:
        case 1484:
        case 1485:
        case 1486:
        case 1487:
        case 1488:
        case 1489:
        case 1490:
        case 1491:
        case 1492:
        case 1493:
        case 1494:
        case 1495:
        case 1496:
        case 1497:
        case 1498:
        case 1499:
        case 1500:
        case 1501:
        case 1502:
        case 1503:
        case 1504:
        case 1505:
        case 1506:
        case 1507:
        case 1508:
        case 1509:
        case 1510:
        case 1511:
        case 1512:
        case 1513:
        case 1514:
        case 1515:
        case 1516:
        case 1517:
        case 1518:
        case 1519:
        case 1520:
        case 1521:
        case 1522:
        case 1523:
        case 1525:
        case 1526:
        case 1527:
        case 1528:
        case 1529:
        case 1530:
        case 1531:
        case 1532:
        case 1533:
        case 1534:
        case 1535:
        case 1536:
        case 1537:
        case 1538:
        case 1539:
        case 1540:
        case 1541:
        case 1542:
        case 1543:
        case 1544:
          goto LABEL_42;
        default:
          if (((v3 - 1748) > 0x30 || ((1 << (v3 + 44)) & 0x1E00010000001) == 0)
            && ((v3 - 1616) > 0x1A || ((1 << (v3 - 80)) & 0x4010001) == 0))
          {
            goto LABEL_42;
          }
          break;
      }
      return a1 & 1;
    }
    if (v3 <= 566)
    {
      if ((v3 - 188) < 3 || v3 == 448 || v3 == 451) {
        return a1 & 1;
      }
    }
    else if (v3 > 820)
    {
      if ((v3 - 821) <= 3 && v3 != 822 || v3 == 1417) {
        return a1 & 1;
      }
    }
    else if ((v3 - 567) <= 0x2A && ((1 << (v3 - 55)) & 0x40004000001) != 0 {
           || v3 == 720)
    }
    {
      return a1 & 1;
    }
  }
LABEL_42:
  if (v3 > 12828)
  {
LABEL_46:
    if (v3 <= 65086)
    {
      if (v3 > 42800)
      {
        if (v3 <= 65043)
        {
          if (v3 == 42801 || v3 == 42865) {
            return a1 & 1;
          }
          int v7 = 42889;
          goto LABEL_88;
        }
        int v6 = -65044;
      }
      else
      {
        if ((v3 - 13230) <= 0x31 && ((1 << (v3 + 82)) & 0x2000001000003) != 0) {
          return a1 & 1;
        }
        int v6 = -12829;
      }
    }
    else
    {
      if (v3 <= 65531)
      {
        if ((v3 - 65087) <= 0x1F && ((1 << (v3 - 63)) & 0xC0000001) != 0
          || (v3 - 65294) < 2)
        {
          return a1 & 1;
        }
        int v7 = 65377;
        goto LABEL_88;
      }
      if ((v3 - 128271) < 5) {
        return a1 & 1;
      }
      int v6 = -65532;
    }
    if ((v3 + v6) < 2) {
      return a1 & 1;
    }
    goto LABEL_89;
  }
  if (v3 > 11002)
  {
    switch(v3)
    {
      case 12272:
      case 12273:
      case 12274:
      case 12275:
      case 12276:
      case 12277:
      case 12278:
      case 12279:
      case 12280:
      case 12281:
      case 12282:
      case 12283:
      case 12290:
      case 12296:
      case 12308:
      case 12309:
      case 12339:
      case 12341:
        return a1 & 1;
      case 12284:
      case 12285:
      case 12286:
      case 12287:
      case 12288:
      case 12289:
      case 12291:
      case 12292:
      case 12293:
      case 12294:
      case 12295:
      case 12297:
      case 12298:
      case 12299:
      case 12300:
      case 12301:
      case 12302:
      case 12303:
      case 12304:
      case 12305:
      case 12306:
      case 12307:
      case 12310:
      case 12311:
      case 12312:
      case 12313:
      case 12314:
      case 12315:
      case 12316:
      case 12317:
      case 12318:
      case 12319:
      case 12320:
      case 12321:
      case 12322:
      case 12323:
      case 12324:
      case 12325:
      case 12326:
      case 12327:
      case 12328:
      case 12329:
      case 12330:
      case 12331:
      case 12332:
      case 12333:
      case 12334:
      case 12335:
      case 12336:
      case 12337:
      case 12338:
      case 12340:
        goto LABEL_89;
      default:
        if (v3 == 11003) {
          return a1 & 1;
        }
        int v7 = 11005;
        break;
    }
LABEL_88:
    if (v3 == v7) {
      return a1 & 1;
    }
    goto LABEL_89;
  }
  if (v3 > 9022)
  {
    if (v3 <= 9584)
    {
      if (v3 == 9023 || v3 == 9134) {
        return a1 & 1;
      }
      int v7 = 9290;
    }
    else
    {
      if ((v3 - 9585) < 2 || v3 == 10742) {
        return a1 & 1;
      }
      int v7 = 10744;
    }
    goto LABEL_88;
  }
  if (v3 > 8721)
  {
    if ((v3 - 8722) <= 0x24 && ((1 << (v3 - 18)) & 0x1000000019) != 0) {
      return a1 & 1;
    }
    goto LABEL_89;
  }
  if ((v3 - 8542) < 2) {
    return a1 & 1;
  }
  if (v3 == 46)
  {
LABEL_59:
    LOBYTE(a1) = 0;
    return a1 & 1;
  }
  if (v3 == 775)
  {
    if ((v2 & 0x100000000) == 0 && (v2 == 305 || v2 == 567 || v2 == 1493)) {
      return a1 & 1;
    }
    goto LABEL_59;
  }
LABEL_89:
  uint64_t v8 = HIDWORD(v2) & 1;
  if (specialized URL.UnicodeLookalikeTable.isLookalikeSequence(withScalar:previousScalar:ofScriptType:)(v3, v2 | (unint64_t)(v8 << 32), 3) & 1) != 0|| (specialized URL.UnicodeLookalikeTable.isLookalikeSequence(withScalar:previousScalar:ofScriptType:)(v3, v2 | (unint64_t)(v8 << 32), 35) & 1) != 0|| (specialized URL.UnicodeLookalikeTable.isLookalikeSequence(withScalar:previousScalar:ofScriptType:)(v3, v2 | (unint64_t)(v8 << 32), 40))
  {
LABEL_5:
    LOBYTE(a1) = 1;
    return a1 & 1;
  }
  LOBYTE(a1) = specialized URL.UnicodeLookalikeTable.isLookalikeSequence(withScalar:previousScalar:ofScriptType:)(v3, v2 | (unint64_t)(v8 << 32), 38);
  if ((a1 & 1) == 0 && (v2 & 0x100000000) == 0)
  {
    LOBYTE(a1) = 0;
    if ((v3 - 1632) >= 0xFFFFFFEB && v2 != 47)
    {
      if ((v2 & 0x80000000) != 0)
      {
        __break(1u);
        JUMPOUT(0x181DFAA4CLL);
      }
      LOBYTE(a1) = ublock_getCode(v2) != UBLOCK_ARABIC;
    }
  }
  return a1 & 1;
}

uint64_t specialized URL.UnicodeLookalikeTable.allCharactersInIDNScriptAllowList(in:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    swift_bridgeObjectRetain();
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    char v7 = 1;
    while (1)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        UChar32 v8 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        UChar32 v8 = _decodeScalar(_:startingAt:)();
      }
      UChar32 v10 = v8;
      uint64_t v11 = v9;
      if (v8 < 0) {
        break;
      }
      int Script = uscript_getScript();
      if (one-time initialization token for IDNScriptAllowedList != -1) {
        swift_once();
      }
      uint64_t v13 = static URL.UnicodeLookalikeTable.IDNScriptAllowedList;
      if (!*(void *)(static URL.UnicodeLookalikeTable.IDNScriptAllowedList + 16)) {
        goto LABEL_24;
      }
      uint64_t v14 = static Hasher._hash(seed:_:)();
      uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
      unint64_t v16 = v14 & ~v15;
      if (((*(void *)(v13 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)(v13 + 48);
      if (*(void *)(v17 + 8 * v16) != Script)
      {
        uint64_t v18 = ~v15;
        while (1)
        {
          unint64_t v16 = (v16 + 1) & v18;
          if (((*(void *)(v13 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
            break;
          }
          if (*(void *)(v17 + 8 * v16) == Script) {
            goto LABEL_21;
          }
        }
LABEL_24:
        swift_bridgeObjectRelease();
        return 0;
      }
LABEL_21:
      if (specialized URL.UnicodeLookalikeTable.isLookalikeScalar(_:withPreviousScalar:)(v10, v5 | ((unint64_t)(v7 & 1) << 32)))goto LABEL_24; {
      char v7 = 0;
      }
      v6 += v11;
      unsigned int v5 = v10;
      if (v6 >= v2) {
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_26:
    swift_bridgeObjectRelease();
  }
  return 1;
}

uint64_t specialized BidirectionalCollection.dropLast(_:)(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v3 = a2;
    }
    uint64_t v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
      uint64_t v4 = 11;
    }
    String.UnicodeScalarView.index(_:offsetBy:limitedBy:)(v4 | (v3 << 16), -result, 0xFuLL, a2, a3);
    return String.UnicodeScalarView.subscript.getter();
  }
  return result;
}

uint64_t specialized String.UnicodeScalarView.init<A>(_:)(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  if (v2)
  {
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    while (1)
    {
      unsigned int v5 = *(_DWORD *)(a1 + 4 * v4 + 32);
      if (v5 >> 11 == 27) {
        break;
      }
      if (HIWORD(v5) > 0x10u)
      {
        __break(1u);
        break;
      }
      unint64_t v7 = *(void *)(v8 + 16);
      unint64_t v6 = *(void *)(v8 + 24);
      if (v7 >= v6 >> 1) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      }
      ++v4;
      *(void *)(v8 + 16) = v7 + 1;
      *(_DWORD *)(v8 + 4 * v7 + 32) = v5;
      if (v2 == v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Unicode.Scalar]);
    lazy protocol witness table accessor for type [Unicode.Scalar] and conformance [A]();
    String.UnicodeScalarView.append<A>(contentsOf:)();
    swift_release();
    return 0;
  }
  return result;
}

BOOL specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a1 >> 14;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000) != 0)
      {
        int v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        int v9 = _decodeScalar(_:startingAt:)();
      }
      int v10 = v9;
      if (v9 != 1105 && (v9 - 1072) >= 0x20 && v9 != 45 && (v9 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v10 == 46;
      }
    }
    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
  }
  return 1;
}

{
  unint64_t v4;
  uint64_t v5;
  int v10;
  int v11;
  BOOL v12;

  unint64_t v4 = a1 >> 14;
  unsigned int v5 = 1;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000) != 0)
      {
        int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        int v10 = _decodeScalar(_:startingAt:)();
      }
      uint64_t v11 = v10;
      if ((v10 - 1104) <= 0xFFFFFFDF)
      {
        unint64_t v12 = (v10 - 1105) > 0xD || ((1 << (v10 - 81)) & 0x2021) == 0;
        if (v12 && v10 != 8217 && v10 != 45 && (v10 - 48) > 9)
        {
          swift_bridgeObjectRelease();
          return v11 == 46;
        }
      }
    }
    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
    return 1;
  }
  return v5;
}

{
  unint64_t v4;
  int v9;
  int v10;
  BOOL v11;

  unint64_t v4 = a1 >> 14;
  if (a1 >> 14 == a2 >> 14) {
    return 1;
  }
  swift_bridgeObjectRetain();
  do
  {
    Substring.UnicodeScalarView.formIndex(before:)();
    _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
    if ((a4 & 0x1000000000000000) != 0)
    {
      int v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      int v9 = _decodeScalar(_:startingAt:)();
    }
    int v10 = v9;
    if ((v9 - 1104) <= 0xFFFFFFDF)
    {
      if (v9 <= 1170)
      {
        if (v9 == 1105 || v9 == 1110) {
          continue;
        }
      }
      else
      {
        uint64_t v11 = (v9 - 1171) > 0x28 || ((1 << (v9 + 109)) & 0x10050010101) == 0;
        if (!v11 || v9 == 1241 || v9 == 1257) {
          continue;
        }
      }
      if (v9 != 45 && (v9 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v10 == 46;
      }
    }
  }
  while (v4 != a2 >> 14);
  swift_bridgeObjectRelease();
  return 1;
}

{
  unint64_t v4;
  int v9;
  int v10;
  BOOL v11;

  unint64_t v4 = a1 >> 14;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000) != 0)
      {
        int v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        int v9 = _decodeScalar(_:startingAt:)();
      }
      int v10 = v9;
      if ((v9 - 1104) <= 0xFFFFFFDF)
      {
        uint64_t v11 = (v9 - 1110) > 0x3B || ((1 << (v9 - 86)) & 0x800000000000003) == 0;
        if (v11 && v9 != 1028 && v9 != 1105 && v9 != 45 && (v9 - 48) > 9)
        {
          swift_bridgeObjectRelease();
          return v10 == 46;
        }
      }
    }
    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
  }
  return 1;
}

{
  unint64_t v4;
  uint64_t v5;
  int v10;
  int v11;

  unint64_t v4 = a1 >> 14;
  unsigned int v5 = 1;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000) != 0)
      {
        int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        int v10 = _decodeScalar(_:startingAt:)();
      }
      uint64_t v11 = v10;
      if ((v10 - 1081) <= 0xFFFFFFF6
        && (v10 - 1097) <= 0xFFFFFFF0
        && ((v10 - 1106) > 0xD || ((1 << (v10 - 82)) & 0x23C1) == 0)
        && v10 != 45
        && (v10 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v11 == 46;
      }
    }
    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
    return 1;
  }
  return v5;
}

{
  unint64_t v4;
  uint64_t v5;
  int v10;
  int v11;

  unint64_t v4 = a1 >> 14;
  unsigned int v5 = 1;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000) != 0)
      {
        int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        int v10 = _decodeScalar(_:startingAt:)();
      }
      uint64_t v11 = v10;
      if ((v10 - 1081) <= 0xFFFFFFF6
        && (v10 - 1097) <= 0xFFFFFFF0
        && ((v10 - 1107) > 0xC || ((1 << (v10 - 83)) & 0x12E5) == 0)
        && v10 != 45
        && (v10 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v11 == 46;
      }
    }
    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
    return 1;
  }
  return v5;
}

{
  unint64_t v4;
  int v9;
  int v10;

  unint64_t v4 = a1 >> 14;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000) != 0)
      {
        int v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        int v9 = _decodeScalar(_:startingAt:)();
      }
      int v10 = v9;
      if ((v9 - 1104) <= 0xFFFFFFDF
        && v9 != 1105
        && v9 != 1199
        && v9 != 1257
        && v9 != 45
        && (v9 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v10 == 46;
      }
    }
    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
  }
  return 1;
}

{
  unint64_t v4;
  uint64_t v5;
  int v10;
  int v11;

  unint64_t v4 = a1 >> 14;
  unsigned int v5 = 1;
  if (a1 >> 14 != a2 >> 14)
  {
    swift_bridgeObjectRetain();
    do
    {
      Substring.UnicodeScalarView.formIndex(before:)();
      _StringGuts.validateScalarIndex(_:in:)(a2, a1, a2, a3, a4);
      if ((a4 & 0x1000000000000000) != 0)
      {
        int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        int v10 = _decodeScalar(_:startingAt:)();
      }
      uint64_t v11 = v10;
      if (v10 != 1100
        && (v10 - 1072) >= 0x1B
        && ((v10 - 1102) > 0xF || ((1 << (v10 - 78)) & 0x8007) == 0)
        && v10 != 45
        && (v10 - 48) > 9)
      {
        swift_bridgeObjectRelease();
        return v11 == 46;
      }
    }
    while (v4 != a2 >> 14);
    swift_bridgeObjectRelease();
    return 1;
  }
  return v5;
}

BOOL specialized URL.UnicodeLookalikeTable.allCharactersAllowedByTLDRules(in:)(unint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain();
  v2._uint64_t countAndFlagsBits = 46;
  v2._unint64_t object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v2)) {
    specialized RangeReplaceableCollection<>.removeLast(_:)(1uLL);
  }
  int64_t v279 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0);
  int64_t v3 = v279;
  unint64_t i = *(void *)(v279 + 16);
  unint64_t v4 = *(void *)(v279 + 24);
  int64_t v6 = v4 >> 1;
  int64_t v7 = i + 1;
  if (v4 >> 1 <= i) {
    goto LABEL_195;
  }
  while (1)
  {
    *(void *)(v3 + 16) = v7;
    *(_DWORD *)(v3 + 4 * i + 32) = 46;
    int64_t v8 = i + 2;
    if (v6 < v8)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4 > 1, v8, 1);
      int64_t v3 = v279;
    }
    *(void *)(v3 + 16) = v8;
    *(_DWORD *)(v3 + 4 * v7 + 32) = 1088;
    unint64_t v10 = *(void *)(v3 + 16);
    unint64_t v9 = *(void *)(v3 + 24);
    if (v10 >= v9 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
    }
    *(void *)(v279 + 16) = v10 + 1;
    *(_DWORD *)(v279 + 4 * v10 + 32) = 1092;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Unicode.Scalar]);
    lazy protocol witness table accessor for type [Unicode.Scalar] and conformance [A]();
    String.UnicodeScalarView.append<A>(contentsOf:)();
    swift_release();
    int64_t v7 = 0;
    swift_bridgeObjectRetain();
    uint64_t v11 = String.count.getter();
    swift_bridgeObjectRelease();
    unint64_t i = 7;
    if (String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000) < v11)
    {
      uint64_t v12 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
      if ((a2 & 0x2000000000000000) != 0) {
        uint64_t v13 = HIBYTE(a2) & 0xF;
      }
      else {
        uint64_t v13 = a1 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v14 = 7;
      if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
        uint64_t v14 = 11;
      }
      unint64_t v15 = v14 | (v13 << 16);
      if (v12 < String.UnicodeScalarView.distance(from:to:)(0xFuLL, v15, a1, a2))
      {
        uint64_t v16 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
        if (__OFSUB__(0, v16))
        {
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
LABEL_202:
          __break(1u);
          goto LABEL_203;
        }
        if (4 * v13 < String.UnicodeScalarView.index(_:offsetBy:)(v15, -v16, a1, a2) >> 14) {
          goto LABEL_197;
        }
        swift_bridgeObjectRetain();
        String.UnicodeScalarView.subscript.getter();
        lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
        String.UnicodeScalarView.append<A>(contentsOf:)();
        char v17 = specialized Sequence<>.elementsEqual<A>(_:)(0, 0xE000000000000000, 0, 0xE000000000000000);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v17)
        {
          uint64_t v18 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
          swift_bridgeObjectRetain();
          unint64_t v19 = specialized BidirectionalCollection.dropLast(_:)(v18, a1, a2);
          unint64_t v21 = v20;
          uint64_t v23 = v22;
          unint64_t v25 = v24;
          swift_bridgeObjectRelease();
          if (v19 >> 14 != v21 >> 14)
          {
            while (1)
            {
              Substring.UnicodeScalarView.formIndex(before:)();
              _StringGuts.validateScalarIndex(_:in:)(v21, v19, v21, v23, v25);
              if ((v25 & 0x1000000000000000) != 0)
              {
                int v26 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
              }
              else
              {
                if ((v25 & 0x2000000000000000) == 0 && (v23 & 0x1000000000000000) == 0) {
                  _StringObject.sharedUTF8.getter();
                }
                int v26 = _decodeScalar(_:startingAt:)();
              }
              int v27 = v26;
              if (v26 != 1105 && (v26 - 1072) >= 0x20 && v26 != 45 && (v26 - 48) > 9) {
                break;
              }
              if (v19 >> 14 == v21 >> 14) {
                goto LABEL_190;
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            BOOL v29 = v27 == 46;
            goto LABEL_111;
          }
          goto LABEL_190;
        }
      }
    }
    int64_t v279 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0);
    int v30 = dword_1ECA44430;
    if (dword_1ECA44430 >> 11 == 27) {
      goto LABEL_193;
    }
    if (HIWORD(dword_1ECA44430) > 0x10u) {
      goto LABEL_191;
    }
    int64_t v7 = v279;
    unint64_t v32 = *(void *)(v279 + 16);
    unint64_t v31 = *(void *)(v279 + 24);
    unint64_t i = v32 + 1;
    if (v32 >= v31 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
      int64_t v7 = v279;
    }
    *(void *)(v7 + 16) = i;
    *(_DWORD *)(v7 + 4 * v32 + 32) = v30;
    int v33 = dword_1ECA44434;
    if (dword_1ECA44434 >> 11 == 27) {
      goto LABEL_193;
    }
    if (dword_1ECA44434 > 0x10FFFF) {
      goto LABEL_191;
    }
    int64_t v279 = v7;
    unint64_t v34 = *(void *)(v7 + 24);
    int64_t v35 = v32 + 2;
    if (i >= v34 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35, 1);
    }
    *(void *)(v7 + 16) = v35;
    *(_DWORD *)(v7 + 4 * i + 32) = v33;
    int v36 = dword_1ECA44438;
    if (dword_1ECA44438 >> 11 == 27) {
      goto LABEL_193;
    }
    if (dword_1ECA44438 > 0x10FFFF) {
      goto LABEL_191;
    }
    int64_t v279 = v7;
    unint64_t v38 = *(void *)(v7 + 16);
    unint64_t v37 = *(void *)(v7 + 24);
    unint64_t i = v38 + 1;
    if (v38 >= v37 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
    }
    *(void *)(v7 + 16) = i;
    *(_DWORD *)(v7 + 4 * v38 + 32) = v36;
    int v39 = dword_1ECA4443C;
    if (dword_1ECA4443C >> 11 == 27) {
      goto LABEL_193;
    }
    if (dword_1ECA4443C > 0x10FFFF)
    {
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
      goto LABEL_194;
    }
    unint64_t v40 = *(void *)(v7 + 24);
    int64_t v41 = v38 + 2;
    if (i >= v40 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41, 1);
    }
    *(void *)(v7 + 16) = v41;
    *(_DWORD *)(v7 + 4 * i + 32) = v39;
    String.UnicodeScalarView.append<A>(contentsOf:)();
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t v42 = String.count.getter();
    swift_bridgeObjectRelease();
    if (String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000) < v42)
    {
      uint64_t v43 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
      if ((a2 & 0x2000000000000000) != 0) {
        uint64_t v44 = HIBYTE(a2) & 0xF;
      }
      else {
        uint64_t v44 = a1 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v45 = 7;
      if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
        uint64_t v45 = 11;
      }
      unint64_t v46 = v45 | (v44 << 16);
      if (v43 < String.UnicodeScalarView.distance(from:to:)(0xFuLL, v46, a1, a2))
      {
        uint64_t v47 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
        if (__OFSUB__(0, v47)) {
          goto LABEL_198;
        }
        if (4 * v44 < String.UnicodeScalarView.index(_:offsetBy:)(v46, -v47, a1, a2) >> 14) {
          goto LABEL_199;
        }
        swift_bridgeObjectRetain();
        String.UnicodeScalarView.subscript.getter();
        lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
        String.UnicodeScalarView.append<A>(contentsOf:)();
        char v48 = specialized Sequence<>.elementsEqual<A>(_:)(0, 0xE000000000000000, 0, 0xE000000000000000);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v48)
        {
          uint64_t v49 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
          swift_bridgeObjectRetain();
          unint64_t v50 = specialized BidirectionalCollection.dropLast(_:)(v49, a1, a2);
          unint64_t v52 = v51;
          uint64_t v54 = v53;
          unint64_t v56 = v55;
          swift_bridgeObjectRelease();
          if (v50 >> 14 != v52 >> 14)
          {
            while (1)
            {
              Substring.UnicodeScalarView.formIndex(before:)();
              _StringGuts.validateScalarIndex(_:in:)(v52, v50, v52, v54, v56);
              if ((v56 & 0x1000000000000000) != 0)
              {
                int v57 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
              }
              else
              {
                if ((v56 & 0x2000000000000000) == 0 && (v54 & 0x1000000000000000) == 0) {
                  _StringObject.sharedUTF8.getter();
                }
                int v57 = _decodeScalar(_:startingAt:)();
              }
              int v58 = v57;
              if (v57 != 1105 && (v57 - 1072) >= 0x20 && v57 != 45 && (v57 - 48) > 9) {
                break;
              }
              if (v50 >> 14 == v52 >> 14) {
                goto LABEL_189;
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            BOOL v29 = v58 == 46;
            goto LABEL_111;
          }
LABEL_189:
          swift_bridgeObjectRelease();
LABEL_190:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          BOOL v80 = 1;
          goto LABEL_182;
        }
      }
    }
    uint64_t v280 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 7, 0);
    for (unint64_t i = 0; i != 28; i += 4)
    {
      unsigned int v60 = *(_DWORD *)((char *)&outlined read-only object #1 of URL.UnicodeLookalikeTable.allCharactersAllowedByTLDRules(in:)
                      + i
                      + 32);
      if (v60 >> 11 == 27) {
        goto LABEL_185;
      }
      if (v60 > 0x10FFFF)
      {
        __break(1u);
LABEL_185:
        __break(1u);
        goto LABEL_190;
      }
      unint64_t v62 = *(void *)(v280 + 16);
      unint64_t v61 = *(void *)(v280 + 24);
      if (v62 >= v61 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
      }
      *(void *)(v280 + 16) = v62 + 1;
      *(_DWORD *)(v280 + 4 * v62 + 32) = v60;
    }
    String.UnicodeScalarView.append<A>(contentsOf:)();
    swift_release();
    int64_t v7 = 0;
    swift_bridgeObjectRetain();
    uint64_t v63 = String.count.getter();
    swift_bridgeObjectRelease();
    if (String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000) < v63)
    {
      uint64_t v64 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
      if ((a2 & 0x2000000000000000) != 0) {
        unint64_t i = HIBYTE(a2) & 0xF;
      }
      else {
        unint64_t i = a1 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v65 = 7;
      if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
        uint64_t v65 = 11;
      }
      unint64_t v66 = v65 | (i << 16);
      if (v64 < String.UnicodeScalarView.distance(from:to:)(0xFuLL, v66, a1, a2))
      {
        uint64_t v67 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
        if (__OFSUB__(0, v67)) {
          goto LABEL_200;
        }
        if (4 * i < String.UnicodeScalarView.index(_:offsetBy:)(v66, -v67, a1, a2) >> 14) {
          goto LABEL_201;
        }
        swift_bridgeObjectRetain();
        String.UnicodeScalarView.subscript.getter();
        lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
        String.UnicodeScalarView.append<A>(contentsOf:)();
        char v68 = specialized Sequence<>.elementsEqual<A>(_:)(0, 0xE000000000000000, 0, 0xE000000000000000);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v68) {
          break;
        }
      }
    }
    int64_t v279 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 5, 0);
    int v81 = dword_1ECA443B8;
    if (dword_1ECA443B8 >> 11 == 27) {
      goto LABEL_194;
    }
    if (dword_1ECA443B8 > 0x10FFFF) {
      goto LABEL_192;
    }
    int64_t v7 = v279;
    unint64_t i = *(void *)(v279 + 16);
    unint64_t v82 = *(void *)(v279 + 24);
    unint64_t v83 = i + 1;
    if (i >= v82 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v82 > 1, i + 1, 1);
      int64_t v7 = v279;
    }
    *(void *)(v7 + 16) = v83;
    *(_DWORD *)(v7 + 4 * i + 32) = v81;
    int v84 = dword_1ECA443BC;
    if (dword_1ECA443BC >> 11 != 27)
    {
      if (dword_1ECA443BC > 0x10FFFF) {
        goto LABEL_192;
      }
      int64_t v279 = v7;
      unint64_t v85 = *(void *)(v7 + 24);
      if (v83 >= v85 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, i + 2, 1);
      }
      *(void *)(v7 + 16) = i + 2;
      *(_DWORD *)(v7 + 4 * v83 + 32) = v84;
      int v86 = dword_1ECA443C0;
      if (dword_1ECA443C0 >> 11 != 27)
      {
        if (dword_1ECA443C0 > 0x10FFFF) {
          goto LABEL_192;
        }
        int64_t v279 = v7;
        unint64_t i = *(void *)(v7 + 16);
        unint64_t v87 = *(void *)(v7 + 24);
        unint64_t v88 = i + 1;
        if (i >= v87 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v87 > 1, i + 1, 1);
        }
        *(void *)(v7 + 16) = v88;
        *(_DWORD *)(v7 + 4 * i + 32) = v86;
        int v89 = dword_1ECA443C4;
        if (dword_1ECA443C4 >> 11 != 27)
        {
          if (dword_1ECA443C4 > 0x10FFFF) {
            goto LABEL_192;
          }
          int64_t v279 = v7;
          unint64_t v90 = *(void *)(v7 + 24);
          if (v88 >= v90 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v90 > 1, i + 2, 1);
          }
          *(void *)(v7 + 16) = i + 2;
          *(_DWORD *)(v7 + 4 * v88 + 32) = v89;
          unint64_t i = dword_1ECA443C8;
          if (dword_1ECA443C8 >> 11 != 27)
          {
            if (dword_1ECA443C8 > 0x10FFFF) {
              goto LABEL_192;
            }
            unint64_t v92 = *(void *)(v7 + 16);
            unint64_t v91 = *(void *)(v7 + 24);
            if (v92 >= v91 >> 1) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v91 > 1, v92 + 1, 1);
            }
            *(void *)(v7 + 16) = v92 + 1;
            *(_DWORD *)(v7 + 4 * v92 + 32) = i;
            String.UnicodeScalarView.append<A>(contentsOf:)();
            swift_release();
            swift_bridgeObjectRetain();
            uint64_t v93 = String.count.getter();
            swift_bridgeObjectRelease();
            if (String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000) >= v93) {
              goto LABEL_145;
            }
            uint64_t v94 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
            if ((a2 & 0x2000000000000000) != 0) {
              uint64_t v95 = HIBYTE(a2) & 0xF;
            }
            else {
              uint64_t v95 = a1 & 0xFFFFFFFFFFFFLL;
            }
            uint64_t v96 = 7;
            if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
              uint64_t v96 = 11;
            }
            unint64_t v97 = v96 | (v95 << 16);
            if (v94 >= String.UnicodeScalarView.distance(from:to:)(0xFuLL, v97, a1, a2)) {
              goto LABEL_145;
            }
            uint64_t v98 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0, 0xE000000000000000);
            if (__OFSUB__(0, v98)) {
              goto LABEL_202;
            }
            if (4 * v95 >= String.UnicodeScalarView.index(_:offsetBy:)(v97, -v98, a1, a2) >> 14)
            {
              swift_bridgeObjectRetain();
              String.UnicodeScalarView.subscript.getter();
              lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
              String.UnicodeScalarView.append<A>(contentsOf:)();
              char v99 = specialized Sequence<>.elementsEqual<A>(_:)(0, 0xE000000000000000, 0, 0xE000000000000000);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v99)
              {
                uint64_t v100 = specialized Collection.count.getter(0, 0xE000000000000000);
                swift_bridgeObjectRetain();
                unint64_t v101 = specialized BidirectionalCollection.dropLast(_:)(v100, a1, a2);
                unint64_t v103 = v102;
                uint64_t v105 = v104;
                unint64_t v107 = v106;
                swift_bridgeObjectRelease();
                BOOL v80 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v101, v103, v105, v107);
                swift_bridgeObjectRelease();
LABEL_181:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_182;
              }
LABEL_145:
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
              uint64_t inited = swift_initStackObject();
              uint64_t v109 = specialized static Array._adoptStorage(_:count:)(inited, 7);
              *(_OWORD *)uint64_t v110 = xmmword_1821F8B30;
              *(void *)(v110 + 16) = 0x43900000430;
              *(_DWORD *)(v110 + 24) = 1085;
              uint64_t v111 = destructiveProjectEnumData for PredicateCodableError(v109, v110);
              unint64_t v112 = specialized String.UnicodeScalarView.init<A>(_:)(v111);
              unint64_t v114 = v113;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              uint64_t v115 = String.count.getter();
              swift_bridgeObjectRelease();
              if (specialized Collection.count.getter(v112, v114) < v115)
              {
                swift_bridgeObjectRetain();
                char v116 = String.UnicodeScalarView.hasSuffix(_:)(v112, v114, a1, a2);
                swift_bridgeObjectRelease();
                if (v116)
                {
                  uint64_t v117 = specialized Collection.count.getter(v112, v114);
                  swift_bridgeObjectRetain();
                  unint64_t v118 = specialized BidirectionalCollection.dropLast(_:)(v117, a1, a2);
                  unint64_t v120 = v119;
                  uint64_t v122 = v121;
                  unint64_t v124 = v123;
                  swift_bridgeObjectRelease();
                  BOOL v80 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v118, v120, v122, v124);
                  swift_bridgeObjectRelease();
LABEL_180:
                  swift_bridgeObjectRelease();
                  goto LABEL_181;
                }
              }
              uint64_t v125 = swift_initStackObject();
              uint64_t v126 = specialized static Array._adoptStorage(_:count:)(v125, 5);
              *(_OWORD *)uint64_t v127 = xmmword_1821F8B40;
              *(_DWORD *)(v127 + 16) = 1090;
              uint64_t v128 = destructiveProjectEnumData for PredicateCodableError(v126, v127);
              unint64_t v129 = specialized String.UnicodeScalarView.init<A>(_:)(v128);
              unint64_t v131 = v130;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              uint64_t v132 = String.count.getter();
              swift_bridgeObjectRelease();
              if (specialized Collection.count.getter(v129, v131) < v132)
              {
                swift_bridgeObjectRetain();
                char v133 = String.UnicodeScalarView.hasSuffix(_:)(v129, v131, a1, a2);
                swift_bridgeObjectRelease();
                if (v133)
                {
                  uint64_t v134 = specialized Collection.count.getter(v129, v131);
                  swift_bridgeObjectRetain();
                  unint64_t v135 = specialized BidirectionalCollection.dropLast(_:)(v134, a1, a2);
                  unint64_t v137 = v136;
                  uint64_t v139 = v138;
                  unint64_t v141 = v140;
                  swift_bridgeObjectRelease();
                  BOOL v80 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v135, v137, v139, v141);
                  swift_bridgeObjectRelease();
LABEL_179:
                  swift_bridgeObjectRelease();
                  goto LABEL_180;
                }
              }
              uint64_t v142 = swift_initStackObject();
              uint64_t v143 = specialized static Array._adoptStorage(_:count:)(v142, 4);
              *uint64_t v144 = xmmword_1821F8B50;
              uint64_t v145 = destructiveProjectEnumData for PredicateCodableError(v143, v144);
              unint64_t v146 = specialized String.UnicodeScalarView.init<A>(_:)(v145);
              unint64_t v148 = v147;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              uint64_t v149 = String.count.getter();
              swift_bridgeObjectRelease();
              if (specialized Collection.count.getter(v146, v148) < v149)
              {
                swift_bridgeObjectRetain();
                char v150 = String.UnicodeScalarView.hasSuffix(_:)(v146, v148, a1, a2);
                swift_bridgeObjectRelease();
                if (v150)
                {
                  uint64_t v151 = specialized Collection.count.getter(v146, v148);
                  swift_bridgeObjectRetain();
                  unint64_t v152 = specialized BidirectionalCollection.dropLast(_:)(v151, a1, a2);
                  unint64_t v154 = v153;
                  uint64_t v156 = v155;
                  unint64_t v158 = v157;
                  swift_bridgeObjectRelease();
                  BOOL v80 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v152, v154, v156, v158);
                  swift_bridgeObjectRelease();
                  goto LABEL_178;
                }
              }
              uint64_t v159 = swift_initStackObject();
              uint64_t v160 = specialized static Array._adoptStorage(_:count:)(v159, 4);
              *uint64_t v161 = xmmword_1821F8B60;
              uint64_t v162 = destructiveProjectEnumData for PredicateCodableError(v160, v161);
              unint64_t v163 = specialized String.UnicodeScalarView.init<A>(_:)(v162);
              unint64_t v165 = v164;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              uint64_t v166 = String.count.getter();
              swift_bridgeObjectRelease();
              if (specialized Collection.count.getter(v163, v165) < v166)
              {
                swift_bridgeObjectRetain();
                char v167 = String.UnicodeScalarView.hasSuffix(_:)(v163, v165, a1, a2);
                swift_bridgeObjectRelease();
                if (v167)
                {
                  uint64_t v168 = specialized Collection.count.getter(v163, v165);
                  swift_bridgeObjectRetain();
                  unint64_t v169 = specialized BidirectionalCollection.dropLast(_:)(v168, a1, a2);
                  unint64_t v171 = v170;
                  uint64_t v173 = v172;
                  unint64_t v175 = v174;
                  swift_bridgeObjectRelease();
                  BOOL v80 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v169, v171, v173, v175);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  goto LABEL_178;
                }
              }
              uint64_t v176 = swift_initStackObject();
              uint64_t v177 = specialized static Array._adoptStorage(_:count:)(v176, 4);
              *uint64_t v178 = xmmword_1821F8B70;
              uint64_t v179 = destructiveProjectEnumData for PredicateCodableError(v177, v178);
              unint64_t v180 = specialized String.UnicodeScalarView.init<A>(_:)(v179);
              unint64_t v182 = v181;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              uint64_t v183 = String.count.getter();
              swift_bridgeObjectRelease();
              if (specialized Collection.count.getter(v180, v182) < v183
                && (swift_bridgeObjectRetain(),
                    char v184 = String.UnicodeScalarView.hasSuffix(_:)(v180, v182, a1, a2),
                    swift_bridgeObjectRelease(),
                    (v184 & 1) != 0))
              {
                uint64_t v185 = specialized Collection.count.getter(v180, v182);
                swift_bridgeObjectRetain();
                unint64_t v186 = specialized BidirectionalCollection.dropLast(_:)(v185, a1, a2);
                unint64_t v188 = v187;
                uint64_t v190 = v189;
                unint64_t v192 = v191;
                swift_bridgeObjectRelease();
                BOOL v80 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v186, v188, v190, v192);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v193 = swift_initStackObject();
                uint64_t v194 = specialized static Array._adoptStorage(_:count:)(v193, 4);
                *long long v195 = xmmword_1821F8B80;
                uint64_t v196 = destructiveProjectEnumData for PredicateCodableError(v194, v195);
                unint64_t v197 = specialized String.UnicodeScalarView.init<A>(_:)(v196);
                unint64_t v199 = v198;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                uint64_t v200 = String.count.getter();
                swift_bridgeObjectRelease();
                if (specialized Collection.count.getter(v197, v199) >= v200
                  || (swift_bridgeObjectRetain(),
                      char v201 = String.UnicodeScalarView.hasSuffix(_:)(v197, v199, a1, a2),
                      swift_bridgeObjectRelease(),
                      (v201 & 1) == 0))
                {
                  uint64_t v210 = swift_initStackObject();
                  uint64_t v211 = specialized static Array._adoptStorage(_:count:)(v210, 4);
                  *long long v212 = xmmword_1821F8B90;
                  uint64_t v213 = destructiveProjectEnumData for PredicateCodableError(v211, v212);
                  unint64_t v214 = specialized String.UnicodeScalarView.init<A>(_:)(v213);
                  unint64_t v216 = v215;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  uint64_t v217 = String.count.getter();
                  swift_bridgeObjectRelease();
                  if (specialized Collection.count.getter(v214, v216) < v217
                    && (swift_bridgeObjectRetain(),
                        char v218 = String.UnicodeScalarView.hasSuffix(_:)(v214, v216, a1, a2),
                        swift_bridgeObjectRelease(),
                        (v218 & 1) != 0))
                  {
                    uint64_t v219 = specialized Collection.count.getter(v214, v216);
                    swift_bridgeObjectRetain();
                    unint64_t v220 = specialized BidirectionalCollection.dropLast(_:)(v219, a1, a2);
                    unint64_t v222 = v221;
                    uint64_t v224 = v223;
                    unint64_t v226 = v225;
                    swift_bridgeObjectRelease();
                    BOOL v80 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v220, v222, v224, v226);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    uint64_t v227 = swift_initStackObject();
                    uint64_t v228 = specialized static Array._adoptStorage(_:count:)(v227, 4);
                    _OWORD *v229 = xmmword_1821F8BA0;
                    uint64_t v230 = destructiveProjectEnumData for PredicateCodableError(v228, v229);
                    unint64_t v231 = specialized String.UnicodeScalarView.init<A>(_:)(v230);
                    unint64_t v233 = v232;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRetain();
                    uint64_t v234 = String.count.getter();
                    swift_bridgeObjectRelease();
                    if (specialized Collection.count.getter(v231, v233) >= v234
                      || (swift_bridgeObjectRetain(),
                          char v235 = String.UnicodeScalarView.hasSuffix(_:)(v231, v233, a1, a2),
                          swift_bridgeObjectRelease(),
                          (v235 & 1) == 0))
                    {
                      uint64_t v244 = swift_initStackObject();
                      uint64_t v245 = specialized static Array._adoptStorage(_:count:)(v244, 4);
                      *uint64_t v246 = xmmword_1821F8BB0;
                      uint64_t v247 = destructiveProjectEnumData for PredicateCodableError(v245, v246);
                      unint64_t v248 = specialized String.UnicodeScalarView.init<A>(_:)(v247);
                      unint64_t v250 = v249;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRetain();
                      uint64_t v251 = String.count.getter();
                      swift_bridgeObjectRelease();
                      if (specialized Collection.count.getter(v248, v250) < v251
                        && (swift_bridgeObjectRetain(),
                            char v252 = String.UnicodeScalarView.hasSuffix(_:)(v248, v250, a1, a2),
                            swift_bridgeObjectRelease(),
                            (v252 & 1) != 0))
                      {
                        uint64_t v253 = specialized Collection.count.getter(v248, v250);
                        swift_bridgeObjectRetain();
                        unint64_t v254 = specialized BidirectionalCollection.dropLast(_:)(v253, a1, a2);
                        unint64_t v256 = v255;
                        uint64_t v258 = v257;
                        unint64_t v260 = v259;
                        swift_bridgeObjectRelease();
                        BOOL v80 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v254, v256, v258, v260);
                      }
                      else
                      {
                        uint64_t v261 = swift_initStackObject();
                        uint64_t v262 = specialized static Array._adoptStorage(_:count:)(v261, 3);
                        *(void *)uint64_t v263 = 0x4310000002ELL;
                        *(_DWORD *)(v263 + 8) = 1075;
                        uint64_t v264 = destructiveProjectEnumData for PredicateCodableError(v262, v263);
                        unint64_t v265 = specialized String.UnicodeScalarView.init<A>(_:)(v264);
                        unint64_t v267 = v266;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRetain();
                        uint64_t v268 = String.count.getter();
                        swift_bridgeObjectRelease();
                        if (specialized Collection.count.getter(v265, v267) >= v268
                          || (swift_bridgeObjectRetain(),
                              char v269 = String.UnicodeScalarView.hasSuffix(_:)(v265, v267, a1, a2),
                              swift_bridgeObjectRelease(),
                              (v269 & 1) == 0))
                        {
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          BOOL v80 = 0;
                          goto LABEL_182;
                        }
                        uint64_t v270 = specialized Collection.count.getter(v265, v267);
                        swift_bridgeObjectRetain();
                        unint64_t v271 = specialized BidirectionalCollection.dropLast(_:)(v270, a1, a2);
                        unint64_t v278 = v272;
                        uint64_t v274 = v273;
                        unint64_t v276 = v275;
                        swift_bridgeObjectRelease();
                        BOOL v80 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v271, v278, v274, v276);
                        swift_bridgeObjectRelease();
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      goto LABEL_178;
                    }
                    uint64_t v236 = specialized Collection.count.getter(v231, v233);
                    swift_bridgeObjectRetain();
                    unint64_t v237 = specialized BidirectionalCollection.dropLast(_:)(v236, a1, a2);
                    unint64_t v239 = v238;
                    uint64_t v241 = v240;
                    unint64_t v243 = v242;
                    swift_bridgeObjectRelease();
                    BOOL v80 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v237, v239, v241, v243);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                  }
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
LABEL_178:
                  swift_bridgeObjectRelease();
                  goto LABEL_179;
                }
                uint64_t v202 = specialized Collection.count.getter(v197, v199);
                swift_bridgeObjectRetain();
                unint64_t v203 = specialized BidirectionalCollection.dropLast(_:)(v202, a1, a2);
                unint64_t v205 = v204;
                uint64_t v207 = v206;
                unint64_t v209 = v208;
                swift_bridgeObjectRelease();
                BOOL v80 = specialized URL.UnicodeLookalikeTable.secondLevelDomain(_:allowedBy:)(v203, v205, v207, v209);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              goto LABEL_178;
            }
LABEL_203:
            __break(1u);
            goto LABEL_190;
          }
        }
      }
    }
LABEL_194:
    __break(1u);
LABEL_195:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4 > 1, v7, 1);
    int64_t v3 = v279;
    unint64_t v4 = *(void *)(v279 + 24);
    int64_t v6 = v4 >> 1;
  }
  uint64_t v69 = specialized Collection.count.getter(0, 0xE000000000000000);
  swift_bridgeObjectRetain();
  unint64_t v70 = specialized BidirectionalCollection.dropLast(_:)(v69, a1, a2);
  unint64_t v72 = v71;
  uint64_t v74 = v73;
  unint64_t v76 = v75;
  swift_bridgeObjectRelease();
  if (v70 >> 14 == v72 >> 14)
  {
LABEL_188:
    swift_bridgeObjectRelease();
    goto LABEL_189;
  }
  while (1)
  {
    Substring.UnicodeScalarView.formIndex(before:)();
    _StringGuts.validateScalarIndex(_:in:)(v72, v70, v72, v74, v76);
    if ((v76 & 0x1000000000000000) != 0)
    {
      int v77 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((v76 & 0x2000000000000000) == 0 && (v74 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      int v77 = _decodeScalar(_:startingAt:)();
    }
    int v78 = v77;
    if (v77 != 1105 && (v77 - 1072) >= 0x20 && v77 != 45 && (v77 - 48) > 9) {
      break;
    }
    if (v70 >> 14 == v72 >> 14) {
      goto LABEL_188;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  BOOL v29 = v78 == 46;
LABEL_111:
  BOOL v80 = v29;
LABEL_182:
  swift_bridgeObjectRelease();
  return v80;
}

unint64_t lazy protocol witness table accessor for type [Unicode.Scalar] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Unicode.Scalar] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Unicode.Scalar] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Unicode.Scalar]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Unicode.Scalar] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView);
  }
  return result;
}

uint64_t PredicateExpressions.Equal.init(lhs:rhs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.Equal();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 60), a2, a4);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Equal(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.Equal(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x181DFE130);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          unint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

void Substring._enumerateComponents(separatedBy:options:withBlock:)(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(uint64_t), uint64_t a7, unint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v86 = a7;
  unint64_t v92 = a3;
  uint64_t v93 = a4;
  uint64_t v101 = a10;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v73 = &v68[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v18);
  unint64_t v72 = &v68[-v19];
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match);
  uint64_t v20 = *(void *)(v82 - 8);
  MEMORY[0x1F4188790](v82);
  unint64_t v71 = &v68[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v22);
  unint64_t v70 = &v68[-v23];
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  MEMORY[0x1F4188790](v24 - 8);
  int v84 = &v68[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  MEMORY[0x1F4188790](v83);
  unint64_t v91 = &v68[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v100 = a9;
  unint64_t v28 = a9 >> 14;
  unint64_t v29 = a8 >> 14;
  if (a8 >> 14 >= a9 >> 14)
  {
    unint64_t v64 = a8 >> 14;
LABEL_34:
    if (v28 >= v64)
    {
      uint64_t v66 = Substring.subscript.getter();
      a6(v66);
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    unint64_t v97 = a5;
    int v81 = a5 & 1;
    Swift::UInt64 v79 = (unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    int v78 = (void (**)(unsigned char *, char *, uint64_t))(v26 + 32);
    unint64_t v76 = (uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v20 + 48);
    uint64_t v74 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v20 + 32);
    unint64_t v75 = (void (**)(unsigned char *, uint64_t))(v20 + 8);
    int v77 = (void (**)(unsigned char *, uint64_t))(v26 + 8);
    unint64_t v90 = a2;
    unint64_t v80 = a2 ^ a1;
    unint64_t v88 = a8;
    uint64_t v89 = a11;
    unint64_t v30 = a1;
    unint64_t v31 = a8;
    unint64_t v87 = v30;
    unint64_t v85 = a9 >> 14;
    uint64_t v96 = a6;
    while (v28 >= v29)
    {
      unint64_t v99 = v29;
      swift_bridgeObjectRetain();
      unint64_t v32 = Substring.subscript.getter();
      unint64_t v34 = v33;
      unint64_t v98 = v35;
      uint64_t v106 = v36;
      swift_bridgeObjectRelease();
      if ((v97 & 0x400) != 0)
      {
        unint64_t v94 = v31;
        if (one-time initialization token for cache != -1) {
          swift_once();
        }
        uint64_t v45 = static RegexPatternCache.cache;
        swift_retain();
        uint64_t v46 = MEMORY[0x185301F50](v30, v90, v92, v93);
        MEMORY[0x1F4188790](v46);
        swift_retain();
        os_unfair_lock_lock((os_unfair_lock_t)(v45 + 24));
        uint64_t v47 = v84;
        uint64_t v48 = v95;
        partial apply for closure #1 in RegexPatternCache.regex(for:caseInsensitive:)((void *)(v45 + 16), v84);
        uint64_t v95 = v48;
        uint64_t v49 = (os_unfair_lock_s *)(v45 + 24);
        if (v48)
        {
          os_unfair_lock_unlock(v49);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release_n();
          return;
        }
        os_unfair_lock_unlock(v49);
        swift_bridgeObjectRelease();
        swift_release_n();
        uint64_t v50 = v83;
        if ((*v79)(v47, 1, v83) == 1)
        {
          outlined destroy of Any?((uint64_t)v47, &demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
          a6 = v96;
          unint64_t v28 = v85;
LABEL_33:
          swift_bridgeObjectRelease();
          unint64_t v64 = v99;
          goto LABEL_34;
        }
        (*v78)(v91, v47, v50);
        if ((v97 & 8) != 0)
        {
          unint64_t v102 = v32;
          unint64_t v103 = v34;
          unint64_t v104 = v98;
          uint64_t v105 = v106;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
          unsigned int v60 = v72;
          BidirectionalCollection<>.prefixMatch<A>(of:)();
          uint64_t v52 = v82;
          int v61 = (*v76)(v60, 1, v82);
          a6 = v96;
          unint64_t v28 = v85;
          if (v61 == 1)
          {
            (*v77)(v91, v50);
            uint64_t v65 = (uint64_t)v60;
            goto LABEL_32;
          }
          uint64_t v54 = v70;
          (*v74)(v70, v60, v52);
        }
        else
        {
          unint64_t v102 = v32;
          unint64_t v103 = v34;
          unint64_t v104 = v98;
          uint64_t v105 = v106;
          type metadata accessor for AnyRegexOutput();
          lazy protocol witness table accessor for type Substring and conformance Substring();
          lazy protocol witness table accessor for type Regex<AnyRegexOutput> and conformance Regex<A>();
          unint64_t v51 = v73;
          BidirectionalCollection<>.firstMatch<A, B>(of:)();
          uint64_t v52 = v82;
          int v53 = (*v76)(v51, 1, v82);
          a6 = v96;
          unint64_t v28 = v85;
          if (v53 == 1)
          {
            (*v77)(v91, v50);
            uint64_t v65 = (uint64_t)v51;
LABEL_32:
            outlined destroy of Any?(v65, &demangling cache variable for type metadata for Regex<AnyRegexOutput>.Match?);
            goto LABEL_33;
          }
          uint64_t v54 = v71;
          (*v74)(v71, v51, v52);
        }
        unint64_t v40 = Regex.Match.range.getter();
        unint64_t v42 = v62;
        (*v75)(v54, v52);
        (*v77)(v91, v50);
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((v32 ^ v34) < 0x4000 || v80 < 0x4000) {
          goto LABEL_33;
        }
        uint64_t v37 = (v97 >> 3) & 1;
        uint64_t v38 = (v97 >> 7) & 1;
        uint64_t v39 = (v97 >> 8) & 1;
        if ((v97 & 2) != 0)
        {
          unsigned int v55 = (v97 >> 2) & 1;
          int v69 = v97 & 1;
          unint64_t v56 = v106;
          swift_bridgeObjectRetain();
          unint64_t v94 = v31;
          unint64_t v57 = v93;
          swift_bridgeObjectRetain();
          char v67 = v55;
          unint64_t v28 = v85;
          unint64_t v40 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v30, v90, v92, v57, v39, v38, v69, v37, v67, v32, v34, v98, v56);
          unint64_t v42 = v58;
          char v44 = v59;
          swift_bridgeObjectRelease_n();
        }
        else
        {
          unint64_t v40 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v30, v90, v92, v93, (v97 >> 8) & 1, (v97 >> 7) & 1, v97 & 1, (v97 >> 3) & 1, (v97 & 4) != 0, v32, v34, v98, v106);
          unint64_t v42 = v41;
          char v44 = v43;
        }
        swift_bridgeObjectRelease();
        if (v44)
        {
          unint64_t v64 = v99;
          a6 = v96;
          goto LABEL_34;
        }
      }
      unint64_t v64 = v42 >> 14;
      if (v40 >> 14 == v42 >> 14)
      {
        unint64_t v64 = v99;
        a6 = v96;
        goto LABEL_34;
      }
      if (v40 >> 14 < v99) {
        goto LABEL_37;
      }
      uint64_t v63 = Substring.subscript.getter();
      a6 = v96;
      v96(v63);
      swift_bridgeObjectRelease();
      unint64_t v31 = v42;
      unint64_t v29 = v42 >> 14;
      unint64_t v30 = v87;
      if (v64 >= v28) {
        goto LABEL_34;
      }
    }
    __break(1u);
LABEL_37:
    __break(1u);
  }
  __break(1u);
}

uint64_t UInt8._lowercased.getter(int a1)
{
  return ((0x3FFE000000000uLL >> ((a1 - 1) >> 1)) & 0x20) + a1;
}

uint64_t static UInt8.newline.getter()
{
  return 10;
}

uint64_t static UInt8.carriageReturn.getter()
{
  return 13;
}

uint64_t UInt8._numericValue.getter(char a1)
{
  if ((a1 - 58) >= 0xF6u) {
    return (a1 - 48);
  }
  else {
    return 0;
  }
}

uint64_t UInt8._uppercased.getter(int a1)
{
  return a1 - 32 * ((0x1FFF000000000000uLL >> ((a1 - 1) >> 1)) & 1);
}

unint64_t Character.isExtendCharacter.getter(unint64_t a1, unint64_t a2)
{
  if (a1 == 2573 && a2 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 0;
  }
  if ((Character._isSingleScalar.getter() & 1) == 0) {
    goto LABEL_10;
  }
  unint64_t result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100000000) != 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  if ((result & 0xFFFFFF80) != 0)
  {
LABEL_10:
    if ((a2 & 0x2000000000000000) != 0) {
      uint64_t v6 = HIBYTE(a2) & 0xF;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
    }
    if (!v6) {
      return 1;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    while (1)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v8 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        uint64_t v8 = _decodeScalar(_:startingAt:)();
      }
      if (BYTE2(v8) > 0xEu) {
        break;
      }
      uint64_t v10 = (uint64_t)*(&__CFUniCharGraphemeExtendCharacterSetBitmap_1 + BYTE2(v8));
      if (!v10 || ((*(unsigned __int8 *)(v10 + ((unsigned __int16)v8 >> 3)) >> (v8 & 7)) & 1) == 0) {
        break;
      }
      v7 += v9;
      if (v7 >= v6)
      {
        uint64_t v5 = 1;
        goto LABEL_27;
      }
    }
    uint64_t v5 = 0;
LABEL_27:
    swift_bridgeObjectRelease();
    return v5;
  }
  unint64_t result = specialized Collection.first.getter(a1, a2);
  if ((result & 0x100000000) == 0)
  {
    if ((result & 0xFFFFFF00) != 0) {
      __break(1u);
    }
    return 0;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t Unicode.Scalar._transform(toHalfWidth:stripDiacritics:caseFolding:)(char a1, char a2, char a3, uint64_t a4)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v9 = *(void *)(v8 - 8);
  v10.n128_f64[0] = MEMORY[0x1F4188790](v8);
  unsigned int v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0 && a4 >> 8 >= 0xFF && a4 <= 0xFFEE)
  {
    LODWORD(v20[0]) = a4;
    CFUniCharCompatibilityDecompose();
    a4 = LODWORD(v20[0]);
    if (LODWORD(v20[0]) >> 11 == 27) {
      __break(1u);
    }
    if (HIWORD(LODWORD(v20[0])) > 0x10u)
    {
      __break(1u);
      goto LABEL_17;
    }
  }
  if ((a2 & 1) == 0)
  {
LABEL_10:
    if (a3)
    {
      Unicode.Scalar.properties.getter();
      uint64_t v14 = Unicode.Scalar.Properties._caseFolded.getter();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      return v14;
    }
    if (a4 <= 0x7F)
    {
      unsigned int v15 = a4 + 1;
LABEL_14:
      v20[0] = (v15 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v15) >> 3))));
      return MEMORY[0x185302020](v20, v10);
    }
LABEL_17:
    int v17 = (a4 & 0x3F) << 8;
    if (a4 >= 0x800)
    {
      unsigned int v18 = (v17 | (a4 >> 6) & 0x3F) << 8;
      unsigned int v19 = (((v18 | (a4 >> 12) & 0x3F) << 8) | (a4 >> 18)) - 2122219023;
      unsigned int v15 = (v18 | (a4 >> 12)) + 8487393;
      if (WORD1(a4)) {
        unsigned int v15 = v19;
      }
    }
    else
    {
      unsigned int v15 = (v17 | (a4 >> 6)) + 33217;
    }
    goto LABEL_14;
  }
  uint64_t v13 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(a4), 5);
  if (!BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(a4, v13, 0x700030005))
  {
    LODWORD(a4) = Unicode.Scalar._stripDiacritics()(a4);
    goto LABEL_10;
  }
  return 0;
}

uint64_t Substring.UnicodeScalarView._compare(_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v7 = a6 >> 14;
  unint64_t v8 = a5 >> 14;
  if (a5 >> 14 >= a6 >> 14 || (unint64_t v12 = a2 >> 14, a2 >> 14 <= a1 >> 14))
  {
LABEL_6:
    if (v8 == v7)
    {
      if ((a1 ^ a2) >> 14) {
        return -1;
      }
      else {
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    while (1)
    {
      unsigned int v9 = Substring.UnicodeScalarView.subscript.getter();
      unsigned int v10 = Substring.UnicodeScalarView.subscript.getter();
      if (v9 != v10) {
        break;
      }
      Substring.UnicodeScalarView.formIndex(after:)();
      Substring.UnicodeScalarView.formIndex(after:)();
      unint64_t v8 = a5 >> 14;
      if (a5 >> 14 >= v7 || v12 <= a1 >> 14) {
        goto LABEL_6;
      }
    }
    if (v9 >= v10) {
      return v10 < v9;
    }
    else {
      return -1;
    }
  }
}

uint64_t _allASCII(_:)(char *a1, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  if ((a1 & 7) != 0)
  {
    if (a2 >= 1)
    {
      if (*a1 < 0) {
        return 0;
      }
      uint64_t v2 = 1;
      uint64_t v3 = 9;
      if (a2 >= 2 && (((_BYTE)a1 + 1) & 7) != 0)
      {
        if (a1[1] < 0) {
          return 0;
        }
        uint64_t v2 = 2;
        uint64_t v3 = 10;
        if (a2 >= 3 && (((_BYTE)a1 + 2) & 7) != 0)
        {
          if (a1[2] < 0) {
            return 0;
          }
          uint64_t v2 = 3;
          uint64_t v3 = 11;
          if (a2 >= 4 && (((_BYTE)a1 + 3) & 7) != 0)
          {
            if (a1[3] < 0) {
              return 0;
            }
            uint64_t v2 = 4;
            uint64_t v3 = 12;
            if (a2 >= 5 && (((_BYTE)a1 + 4) & 7) != 0)
            {
              if (a1[4] < 0) {
                return 0;
              }
              uint64_t v2 = 5;
              uint64_t v3 = 13;
              if (a2 >= 6 && (((_BYTE)a1 + 5) & 7) != 0)
              {
                if (a1[5] < 0) {
                  return 0;
                }
                uint64_t v2 = 6;
                uint64_t v3 = 14;
                if (a2 >= 7 && (((_BYTE)a1 + 6) & 7) != 0)
                {
                  if (a1[6] < 0) {
                    return 0;
                  }
                  uint64_t v2 = 7;
                  uint64_t v3 = 15;
                  if (a2 >= 8 && (((_BYTE)a1 - 1) & 7) != 0)
                  {
                    if (a1[7] < 0) {
                      return 0;
                    }
                    uint64_t v2 = 8;
                    uint64_t v3 = 16;
                    if (a2 >= 9 && (a1 & 7) != 0) {
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (v3 <= a2) {
        goto LABEL_40;
      }
      if (v2 < a2)
      {
LABEL_30:
        if (a1[v2] < 0) {
          return 0;
        }
        goto LABEL_35;
      }
    }
    return 1;
  }
  if (a2 > 7)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 8;
LABEL_40:
    while ((*(void *)&a1[v2] & 0x8080808080808080) == 0)
    {
      uint64_t v8 = v3 + 8;
      uint64_t v2 = v3;
      uint64_t v3 = v8;
      if (v8 > a2)
      {
        uint64_t v2 = v8 - 8;
        if (v8 - 8 < a2) {
          goto LABEL_30;
        }
        return 1;
      }
    }
    return 0;
  }
  if (a2 <= 0) {
    return 1;
  }
  uint64_t v2 = 0;
  if (*a1 < 0) {
    return 0;
  }
LABEL_35:
  uint64_t v4 = v2 + 1;
  do
  {
    BOOL v5 = v4 >= a2;
    if (v4 >= a2) {
      break;
    }
    int v6 = a1[v4++];
  }
  while ((v6 & 0x80000000) == 0);
  return v5;
}

unint64_t lazy protocol witness table accessor for type Character and conformance Character()
{
  unint64_t result = lazy protocol witness table cache variable for type Character and conformance Character;
  if (!lazy protocol witness table cache variable for type Character and conformance Character)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Character and conformance Character);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for String(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Substring(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Substring and conformance Substring();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Unicode.Scalar and conformance Unicode.Scalar()
{
  unint64_t result = lazy protocol witness table cache variable for type Unicode.Scalar and conformance Unicode.Scalar;
  if (!lazy protocol witness table cache variable for type Unicode.Scalar and conformance Unicode.Scalar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.Scalar and conformance Unicode.Scalar);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for String.UnicodeScalarView(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type String.UnicodeScalarView and conformance String.UnicodeScalarView();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String.UnicodeScalarView and conformance String.UnicodeScalarView()
{
  unint64_t result = lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView;
  if (!lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.UnicodeScalarView and conformance String.UnicodeScalarView);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Substring.UnicodeScalarView(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for String.UTF8View(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View()
{
  unint64_t result = lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View;
  if (!lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View;
  if (!lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Substring.UTF8View(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Substring.UTF8View and conformance Substring.UTF8View();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring.UTF8View and conformance Substring.UTF8View()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring.UTF8View and conformance Substring.UTF8View;
  if (!lazy protocol witness table cache variable for type Substring.UTF8View and conformance Substring.UTF8View)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring.UTF8View and conformance Substring.UTF8View);
  }
  return result;
}

unint64_t _StringGuts.validateScalarIndex(_:in:)(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  char v9 = (a5 & 0x1000000000000000) == 0 || (a4 & 0x800000000000000) != 0;
  unint64_t v10 = result & 0xC;
  uint64_t v11 = 4 << v9;
  if ((result & 1) == 0 || v10 == v11)
  {
LABEL_9:
    if (v10 == v11) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a4, a5);
    }
    if (result >> 14 < a2 >> 14 || result >> 14 >= a3 >> 14)
    {
      __break(1u);
    }
    else if (result)
    {
      return result;
    }
    return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a4, a5) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  unint64_t v10 = result >> 14;
  if (result >> 14 < a2 >> 14 || (uint64_t v11 = a3 >> 14, v10 >= a3 >> 14))
  {
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

id @objc static NSLocale._currentLocaleWithBundleLocalizations(_:allowsMixedLocalizations:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = specialized static Array._unconditionallyBridgeFromObjectiveC(_:)(a3);
  id v6 = specialized static NSLocale._currentLocaleWithBundleLocalizations(_:allowsMixedLocalizations:)(v5, a4);
  swift_bridgeObjectRelease();

  return v6;
}

uint64_t @objc static NSLocale._resetCurrent()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static LocaleCache.cache + 16;
  unsigned int v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.reset()(v0);
  os_unfair_lock_unlock(v1);
  return swift_release_n();
}

id @objc static NSLocale._availableLocaleIdentifiers.getter()
{
  specialized static Locale.availableIdentifiers.getter();
  uint64_t v0 = (void *)_ContiguousArrayBuffer._asCocoaArray()();

  return v0;
}

id @objc static NSLocale._isoLanguageCodes.getter(uint64_t a1, uint64_t a2)
{
  return @objc static NSLocale._isoLanguageCodes.getter(a1, a2, &one-time initialization token for _isoLanguageCodeStrings);
}

uint64_t static Locale.isoLanguageCodes.getter()
{
  return static Locale.isoLanguageCodes.getter(&one-time initialization token for _isoLanguageCodeStrings);
}

uint64_t static Locale.isoRegionCodes.getter()
{
  return static Locale.isoLanguageCodes.getter(&one-time initialization token for isoCountries);
}

uint64_t static Locale.isoLanguageCodes.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

id @objc static NSLocale._isoCurrencyCodes.getter()
{
  specialized static Locale.isoCurrencyCodes.getter();
  uint64_t v0 = (void *)_ContiguousArrayBuffer._asCocoaArray()();

  return v0;
}

id @objc static NSLocale._commonISOCurrencyCodes.getter()
{
  specialized static Locale.Currency.commonISOCurrencies.getter();
  uint64_t v0 = (void *)_ContiguousArrayBuffer._asCocoaArray()();

  return v0;
}

id @objc static NSLocale._canonicalLocaleIdentifier(from:)(uint64_t a1, uint64_t a2, void *a3)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
  CFStringRef v4 = (const __CFString *)String._bridgeToObjectiveCImpl()();
  CanonicalLocaleIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v3, v4);
  swift_unknownObjectRelease();
  if (CanonicalLocaleIdentifierFromString)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLocaleIdentifierFromString);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  id v6 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();

  return v6;
}

uint64_t @objc static NSLocale._windowsLocaleCode(fromLocaleIdentifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v3 = specialized static NSLocale._windowsLocaleCode(fromLocaleIdentifier:)();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t static Locale.lineDirection(forLanguage:)(uint64_t a1, uint64_t a2)
{
  return static Locale.characterDirection(forLanguage:)(a1, a2, Locale.Language.lineLayoutDirection.getter);
}

uint64_t @objc static NSLocale._lineDirection(forLanguage:)(uint64_t a1, uint64_t a2, void *a3)
{
  return @objc static NSLocale._characterDirection(forLanguage:)(a1, a2, a3, Locale.Language.lineLayoutDirection.getter);
}

id @objc static NSLocale._numberingSystem(forLocaleIdentifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  specialized static NSLocale._numberingSystem(forLocaleIdentifier:)((uint64_t)v3, v4);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    unint64_t v7 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v7 = 0;
  }

  return v7;
}

id @objc static NSLocale._validNumberingSystems(forLocaleIdentifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  specialized static NSLocale._validNumberingSystems(forLocaleIdentifier:)((uint64_t)v3, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = (void *)_ContiguousArrayBuffer._asCocoaArray()();

  return v5;
}

id @objc static NSLocale._localeIdentifierByReplacingLanguageCodeAndScriptCode(_:desiredComponents:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v7 = v6;
  id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  specialized static Locale.localeIdentifierByReplacingLanguageCodeAndScriptCode(localeIDWithDesiredLangCode:localeIDWithDesiredComponents:)((uint64_t)v5, v7, (uint64_t)v8, v9);
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11)
  {
    unint64_t v12 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v12 = 0;
  }

  return v12;
}

id @objc NSLocale._localeWithNewCalendarIdentifier(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id v4 = 0;
  }
  else
  {
    id v4 = a1;
  }
  return v4;
}

uint64_t @objc NSLocale._doesNotRequireSpecialCaseHandling()(void *a1)
{
  id v1 = a1;
  id v2 = objc_msgSend(v1, sel_localeIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  LOBYTE(v2) = specialized static Locale.identifierDoesNotRequireSpecialCaseHandling(_:)();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

id _NSSwiftLocale.init(localeIdentifier:)()
{
  id v1 = v0;
  uint64_t v2 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
  *((unsigned char *)v0 + OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling) = 2;
  uint64_t v3 = one-time initialization token for cache;
  id v4 = v1;
  uint64_t v5 = swift_bridgeObjectRetain();
  if (v3 != -1) {
    uint64_t v5 = swift_once();
  }
  uint64_t v6 = (os_unfair_lock_s *)static LocaleCache.cache;
  MEMORY[0x1F4188790](v5);
  swift_retain_n();
  os_unfair_lock_lock(v6 + 31);
  closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v6[4], &v12);
  os_unfair_lock_unlock(v6 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_OWORD *)&v4[OBJC_IVAR____NSSwiftLocale_locale] = v12;
  char v7 = specialized static Locale.identifierDoesNotRequireSpecialCaseHandling(_:)();
  swift_bridgeObjectRelease();
  *((unsigned char *)v1 + v2) = v7 & 1;

  uint64_t v8 = String._bridgeToObjectiveCImpl()();
  v11.receiver = v4;
  v11.super_class = (Class)type metadata accessor for _NSSwiftLocale();
  id v9 = objc_msgSendSuper2(&v11, sel_initWithLocaleIdentifier_, v8);
  swift_unknownObjectRelease();
  return v9;
}

uint64_t _NSSwiftLocale.init(coder:)(void *a1)
{
  uint64_t v2 = (uint64_t)v1;
  id v4 = (long long *)OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
  v1[OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling] = 2;
  uint64_t v5 = v1;
  if (!objc_msgSend(a1, sel_allowsKeyedCoding))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 40) = v9;
    *(void *)(inited + 48) = 0xD000000000000026;
    *(void *)(inited + 56) = 0x80000001823ACDA0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v10 = (void *)static _DictionaryStorage.allocate(capacity:)();
    id v4 = &v56;
    outlined init with copy of (String, Any)(inited + 32, (uint64_t)&v56);
    uint64_t v11 = *((void *)&v56 + 1);
    uint64_t v2 = v56;
    swift_retain();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v11);
    if (v13)
    {
      __break(1u);
    }
    else
    {
      v10[(v12 >> 6) + 8] |= 1 << v12;
      uint64_t v14 = (uint64_t *)(v10[6] + 16 * v12);
      uint64_t *v14 = v2;
      v14[1] = v11;
      outlined init with take of Any(v57, (_OWORD *)(v10[7] + 32 * v12));
      uint64_t v15 = v10[2];
      BOOL v16 = __OFADD__(v15, 1);
      uint64_t v17 = v15 + 1;
      if (!v16)
      {
        v10[2] = v17;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v18 = objc_allocWithZone((Class)NSError);
        uint64_t v19 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v20 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, 4864, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v21 = objc_msgSend(v20, sel_domain);
        id v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        uint64_t v2 = v23;

        if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v2 == v24) {
          goto LABEL_20;
        }
        uint64_t v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v6)
        {
LABEL_22:
          objc_msgSend(a1, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());
          swift_unknownObjectRelease();

          type metadata accessor for _NSSwiftLocale();
          swift_deallocPartialClassInstance();
          return 0;
        }
        __break(1u);
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v6 = (uint64_t)v55;
  id v7 = objc_msgSend(a1, sel_decodeObjectForKey_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    goto LABEL_11;
  }
LABEL_10:
  *(_OWORD *)(v6 + 16) = 0u;
  v55[0] = 0u;
LABEL_11:
  outlined init with take of LocalePreferences?((uint64_t)v55, (uint64_t)&v56, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (*((void *)&v57[0] + 1))
  {
    if (swift_dynamicCast())
    {
      int v53 = v5;
      uint64_t v25 = one-time initialization token for cache;
      uint64_t v26 = swift_bridgeObjectRetain();
      if (v25 == -1)
      {
LABEL_14:
        v52[1] = v52;
        uint64_t v27 = (os_unfair_lock_s *)static LocaleCache.cache;
        MEMORY[0x1F4188790](v26);
        swift_retain_n();
        os_unfair_lock_lock(v27 + 31);
        closure #1 in LocaleCache.fixed(_:)partial apply((uint64_t)&v27[4], &v56);
        os_unfair_lock_unlock(v27 + 31);
        swift_bridgeObjectRelease();
        swift_release_n();
        unint64_t v28 = v53;
        *(_OWORD *)&v53[OBJC_IVAR____NSSwiftLocale_locale] = v56;
        char v29 = specialized static Locale.identifierDoesNotRequireSpecialCaseHandling(_:)();
        swift_bridgeObjectRelease();
        *((unsigned char *)v4 + v2) = v29 & 1;

        uint64_t v30 = String._bridgeToObjectiveCImpl()();
        unint64_t v31 = (objc_class *)type metadata accessor for _NSSwiftLocale();
        v54.receiver = v28;
        v54.super_class = v31;
        id v32 = objc_msgSendSuper2(&v54, sel_initWithLocaleIdentifier_, v30);
        swift_unknownObjectRelease();

        return (uint64_t)v32;
      }
LABEL_28:
      uint64_t v26 = swift_once();
      goto LABEL_14;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v56);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v33 = swift_initStackObject();
  *(_OWORD *)(v33 + 16) = xmmword_1821037E0;
  *(void *)(v33 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(v33 + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(v33 + 40) = v34;
  *(void *)(v33 + 48) = 0xD00000000000001DLL;
  *(void *)(v33 + 56) = 0x80000001823ACDD0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  unint64_t v35 = (void *)static _DictionaryStorage.allocate(capacity:)();
  id v4 = &v56;
  outlined init with copy of (String, Any)(v33 + 32, (uint64_t)&v56);
  uint64_t v36 = *((void *)&v56 + 1);
  uint64_t v2 = v56;
  swift_retain();
  unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v36);
  if (v38) {
    goto LABEL_26;
  }
  v35[(v37 >> 6) + 8] |= 1 << v37;
  uint64_t v39 = (uint64_t *)(v35[6] + 16 * v37);
  *uint64_t v39 = v2;
  v39[1] = v36;
  outlined init with take of Any(v57, (_OWORD *)(v35[7] + 32 * v37));
  uint64_t v40 = v35[2];
  BOOL v16 = __OFADD__(v40, 1);
  uint64_t v41 = v40 + 1;
  if (v16)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  void v35[2] = v41;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v42 = objc_allocWithZone((Class)NSError);
  uint64_t v43 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v44 = objc_msgSend(v42, sel_initWithDomain_code_userInfo_, v43, 4864, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v45 = objc_msgSend(v44, sel_domain);
  id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
  uint64_t v48 = v47;

  if (v46 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v48 == v49)
  {
LABEL_20:
    swift_bridgeObjectRelease_n();
    goto LABEL_22;
  }
  char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v50) {
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t _NSSwiftLocale.variantCode.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftLocale_locale + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 168);
  swift_unknownObjectRetain();
  uint64_t v5 = v3(ObjectType, v1);
  if (v4)
  {
    if ((v4 & 0x2000000000000000) != 0) {
      uint64_t v6 = HIBYTE(v4) & 0xF;
    }
    else {
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }
    swift_unknownObjectRelease();
    if (!v6)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    swift_unknownObjectRelease();
  }
  return v5;
}

uint64_t _NSSwiftLocale.exemplarCharacterSet.getter@<X0>(uint64_t *a1@<X8>)
{
  void (*v5)(CFAllocatorRef *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v7;
  CFAllocatorRef alloc;

  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____NSSwiftLocale_locale + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(void (**)(CFAllocatorRef *__return_ptr, uint64_t, uint64_t))(v3 + 184);
  swift_unknownObjectRetain();
  v5(&alloc, ObjectType, v3);
  swift_unknownObjectRelease();
  uint64_t result = (uint64_t)alloc;
  if (alloc) {
    goto LABEL_4;
  }
  uint64_t result = (uint64_t)CFCharacterSetCreateMutable(0);
  if (result)
  {
    id v7 = result;
    type metadata accessor for __CharacterSetStorage();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v7;
    *(unsigned char *)(result + 24) = 1;
LABEL_4:
    *a1 = result;
    return result;
  }
  __break(1u);
  return result;
}

Swift::String_optional __swiftcall _NSSwiftLocale.localizedString(forCalendarIdentifier:)(Swift::String forCalendarIdentifier)
{
  uint64_t v2 = (void *)String._bridgeToObjectiveCImpl()();
  static Calendar._fromNSCalendarIdentifier(_:)(v2, &v14);
  swift_unknownObjectRelease();
  char v3 = v14;
  if (v14 == 16)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(v1 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    uint64_t ObjectType = swift_getObjectType();
    char v13 = v3;
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 112);
    swift_unknownObjectRetain();
    uint64_t v4 = v8(&v13, ObjectType, v6);
    uint64_t v5 = v9;
    swift_unknownObjectRelease();
  }
  uint64_t v10 = v4;
  uint64_t v11 = v5;
  result.value._unint64_t object = v11;
  result.value._uint64_t countAndFlagsBits = v10;
  return result;
}

id _NSSwiftLocale.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _NSSwiftLocale();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static Locale._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftLocale();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    id result = (id)swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _LocaleBridged();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    uint64_t v6 = _s10Foundation14_LocaleBridgedCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (void (*)(uint64_t))type metadata accessor for _LocaleBridged);
    id result = a1;
  }
  *a2 = v5;
  a2[1] = v6;
  return result;
}

uint64_t static Locale._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftLocale();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _LocaleBridged();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    uint64_t v6 = _s10Foundation14_LocaleBridgedCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (void (*)(uint64_t))type metadata accessor for _LocaleBridged);
    id v7 = a1;
  }
  *a2 = v5;
  a2[1] = v6;
  return 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Locale(void *a1, uint64_t *a2)
{
  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftLocale();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _LocaleBridged();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    uint64_t v6 = _s10Foundation14_LocaleBridgedCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (void (*)(uint64_t))type metadata accessor for _LocaleBridged);
    id v7 = a1;
  }
  *a2 = v5;
  a2[1] = v6;
  return 1;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Locale@<X0>(id result@<X0>, uint64_t *a2@<X8>)
{
  if (result)
  {
    objc_super v2 = result;
    type metadata accessor for _NSSwiftLocale();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale);
      uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftLocale_locale + 8);
      id result = (id)swift_unknownObjectRetain();
    }
    else
    {
      type metadata accessor for _LocaleBridged();
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = v2;
      uint64_t v6 = _s10Foundation14_LocaleBridgedCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (void (*)(uint64_t))type metadata accessor for _LocaleBridged);
      id result = v2;
    }
    *a2 = v5;
    a2[1] = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NSLocale._toCustomAnyHashable()()
{
  type metadata accessor for _NSSwiftLocale();
  if (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _LocaleBridged();
    *(void *)(swift_allocObject() + 16) = v0;
    _s10Foundation14_LocaleBridgedCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (void (*)(uint64_t))type metadata accessor for _LocaleBridged);
    id v1 = v0;
  }
  lazy protocol witness table accessor for type Locale and conformance Locale();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSLocale()
{
  id v1 = *v0;
  type metadata accessor for _NSSwiftLocale();
  if (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _LocaleBridged();
    *(void *)(swift_allocObject() + 16) = v1;
    _s10Foundation14_LocaleBridgedCAcA01_B8ProtocolAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, (void (*)(uint64_t))type metadata accessor for _LocaleBridged);
    id v2 = v1;
  }
  lazy protocol witness table accessor for type Locale and conformance Locale();
  AnyHashable.init<A>(_:)();
}

uint64_t one-time initialization function for languageIdentifier()
{
  uint64_t result = String._bridgeToObjectiveCImpl()();
  static NSLocaleKey.languageIdentifier = result;
  return result;
}

id specialized static NSLocale._currentLocaleWithBundleLocalizations(_:allowsMixedLocalizations:)(uint64_t a1, char a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  if ((a2 & 1) == 0)
  {
    swift_retain();
    unint64_t v12 = LocaleCache.preferredLanguages(forCurrentUser:)(0);
    CFStringRef v13 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    CFPropertyListRef v14 = CFPreferencesCopyAppValue(v13, (CFStringRef)*MEMORY[0x1E4F1D3D8]);
    swift_unknownObjectRelease();
    if (!v14 || (*(void *)&v67[0] = v14, (swift_dynamicCast() & 1) == 0))
    {
      swift_release();
LABEL_34:
      swift_bridgeObjectRelease();
      return 0;
    }
    unint64_t v15 = *((void *)&v63[0] + 1);
    uint64_t v62 = *(void *)&v63[0];
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16)
    {
      unint64_t v58 = *((void *)&v63[0] + 1);
      unsigned int v60 = v12;
      CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
      swift_bridgeObjectRetain();
      uint64_t v18 = a1 + 40;
      uint64_t v19 = (void *)MEMORY[0x1E4FBC860];
      do
      {
        CFStringRef v20 = (const __CFString *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRetain();
        CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v17, v20);
        swift_unknownObjectRelease();
        if (CanonicalLanguageIdentifierFromString)
        {
          id v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
          unint64_t v24 = v23;
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          id v22 = 0;
          unint64_t v24 = 0xE000000000000000;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
        }
        unint64_t v26 = v19[2];
        unint64_t v25 = v19[3];
        if (v26 >= v25 >> 1) {
          uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v19);
        }
        v18 += 16;
        v19[2] = v26 + 1;
        uint64_t v27 = &v19[2 * v26];
        v27[4] = v22;
        v27[5] = v24;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
      unint64_t v15 = v58;
      unint64_t v12 = v60;
      if (!v19[2]) {
        goto LABEL_32;
      }
    }
    else if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
    {
      goto LABEL_32;
    }
    if (v12[2])
    {
      uint64_t v28 = HIBYTE(v15) & 0xF;
      if ((v15 & 0x2000000000000000) == 0) {
        uint64_t v28 = v62 & 0xFFFFFFFFFFFFLL;
      }
      if (v28)
      {
        specialized static Locale.canonicalizeLocalizations(_:)((uint64_t)v12);
        char v29 = self;
        swift_bridgeObjectRetain();
        uint64_t v30 = _ContiguousArrayBuffer._asCocoaArray()();
        id v31 = objc_msgSend(v29, sel_preferredLocalizationsFromArray_forPreferences_, v30, _ContiguousArrayBuffer._asCocoaArray()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (v31)
        {
          type metadata accessor for __SwiftDeferredNSArray();
          swift_unknownObjectRetain();
          if (swift_dynamicCastClass())
          {
            swift_retain();
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
          uint64_t v32 = swift_dynamicCastClass();
          if (v32)
          {
            uint64_t v33 = (void *)v32;
          }
          else
          {
            swift_unknownObjectRelease();
            objc_msgSend(v31, sel_copy);
            unint64_t v35 = _bridgeCocoaArray<A>(_:)();
            swift_unknownObjectRelease();
            uint64_t v33 = (void *)specialized _arrayForceCast<A, B>(_:)(v35);

            swift_bridgeObjectRelease();
          }
        }
        else
        {
          uint64_t v33 = (void *)MEMORY[0x1E4FBC860];
        }
        if (!v33[2])
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_33;
        }
        uint64_t v36 = v33[4];
        uint64_t v37 = v33[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v38 = specialized _withFixedCharBuffer(size:_:)(257, v62, v15);
        uint64_t v40 = v39;
        swift_bridgeObjectRelease();
        if (v40)
        {
          Locale.Components.init(identifier:)(v38, v40, v63);
          if (*((void *)&v63[0] + 1))
          {
            uint64_t v41 = v65;
            if (v65)
            {
              uint64_t v61 = v36;
              unint64_t v42 = v15;
              uint64_t v43 = v64;
              v67[0] = v63[0];
              outlined copy of Locale.LanguageCode?(v64, (uint64_t)v65);
              swift_bridgeObjectRetain();
              v44._uint64_t countAndFlagsBits = 45;
              v44._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v44);
              swift_bridgeObjectRetain();
              outlined consume of Locale.LanguageCode?(v43, (uint64_t)v41);
              v45._uint64_t countAndFlagsBits = v43;
              unint64_t v15 = v42;
              uint64_t v36 = v61;
              v45._unint64_t object = v41;
              String.append(_:)(v45);
              swift_bridgeObjectRelease();
              outlined release of Locale.Components((uint64_t *)v63);
              uint64_t v46 = *((void *)&v67[0] + 1);
              uint64_t v38 = *(void *)&v67[0];
              goto LABEL_47;
            }
          }
          outlined release of Locale.Components((uint64_t *)v63);
          uint64_t v38 = 0;
        }
        uint64_t v46 = 0;
LABEL_47:
        swift_bridgeObjectRetain();
        uint64_t v47 = specialized _withFixedCharBuffer(size:_:)(257, v36, v37);
        uint64_t v49 = v48;
        swift_bridgeObjectRelease();
        if (v49)
        {
          Locale.Components.init(identifier:)(v47, v49, v63);
          if (*((void *)&v63[0] + 1) && (char v50 = v65) != 0)
          {
            uint64_t v59 = v46;
            uint64_t v51 = v64;
            v67[0] = v63[0];
            outlined copy of Locale.LanguageCode?(v64, (uint64_t)v65);
            swift_bridgeObjectRetain();
            v52._uint64_t countAndFlagsBits = 45;
            v52._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v52);
            swift_bridgeObjectRetain();
            outlined consume of Locale.LanguageCode?(v51, (uint64_t)v50);
            v53._uint64_t countAndFlagsBits = v51;
            uint64_t v46 = v59;
            v53._unint64_t object = v50;
            String.append(_:)(v53);
            swift_bridgeObjectRelease();
            outlined release of Locale.Components((uint64_t *)v63);
            uint64_t v49 = *((void *)&v67[0] + 1);
            uint64_t v47 = *(void *)&v67[0];
          }
          else
          {
            outlined release of Locale.Components((uint64_t *)v63);
            uint64_t v47 = 0;
            uint64_t v49 = 0;
          }
        }
        if (!v46 || !v49)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_33;
        }
        if (v38 == v47 && v46 == v49)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v54 & 1) == 0)
          {
            uint64_t v62 = specialized static Locale.localeIdentifierByReplacingLanguageCodeAndScriptCode(localeIDWithDesiredLangCode:localeIDWithDesiredComponents:)(v36, v37, v62, v15);
            unint64_t v57 = v56;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!v57)
            {
              swift_release();
              return 0;
            }
            unint64_t v15 = v57;
LABEL_62:
            LocaleCache.preferences()(v63);
            destructiveProjectEnumData for PredicateCodableError(v63, v55);
            outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v67, &demangling cache variable for type metadata for LocalePreferences?);
            type metadata accessor for _LocaleICU();
            swift_allocObject();
            uint64_t v4 = (uint64_t)specialized _LocaleICU.init(identifier:prefs:)(v62, v15, (uint64_t)v67);
            swift_bridgeObjectRelease();
            goto LABEL_5;
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_62;
      }
    }
LABEL_32:
    swift_bridgeObjectRelease();
LABEL_33:
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_34;
  }
  swift_retain();
  LocaleCache.preferences()(v63);
  type metadata accessor for _LocaleICU();
  swift_allocObject();
  uint64_t v4 = _LocaleICU.init(name:prefs:disableBundleMatching:)(0, 0, (uint64_t *)v63, 1u);
LABEL_5:
  swift_release();
  uint64_t v5 = _s10Foundation14_LocaleBridgedCAcA01_B8ProtocolAAWlTm_0(&lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU, (void (*)(uint64_t))type metadata accessor for _LocaleICU);
  uint64_t v6 = (objc_class *)type metadata accessor for _NSSwiftLocale();
  id v7 = objc_allocWithZone(v6);
  uint64_t v8 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
  uint64_t v9 = (uint64_t *)&v7[OBJC_IVAR____NSSwiftLocale_locale];
  *uint64_t v9 = v4;
  v9[1] = v5;
  v7[v8] = 2;
  uint64_t v10 = String._bridgeToObjectiveCImpl()();
  v66.receiver = v7;
  v66.super_class = v6;
  swift_unknownObjectRetain();
  id v11 = objc_msgSendSuper2(&v66, sel_initWithLocaleIdentifier_, v10);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v11;
}

uint64_t specialized static Locale.isoCurrencyCodes.getter()
{
  uint64_t v0 = specialized static Locale.Currency.isoCurrencies.getter();
  int64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v10;
    char v3 = (uint64_t *)(v0 + 40);
    do
    {
      uint64_t v5 = *(v3 - 1);
      uint64_t v4 = *v3;
      unint64_t v6 = *(void *)(v10 + 16);
      unint64_t v7 = *(void *)(v10 + 24);
      swift_bridgeObjectRetain();
      if (v6 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v6 + 1, 1);
      }
      v3 += 4;
      *(void *)(v10 + 16) = v6 + 1;
      uint64_t v8 = v10 + 16 * v6;
      *(void *)(v8 + 32) = v5;
      *(void *)(v8 + 40) = v4;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  return v2;
}

unint64_t instantiation function for generic protocol witness table for Locale(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Locale and conformance Locale();
  a1[2] = lazy protocol witness table accessor for type Locale and conformance Locale();
  a1[3] = lazy protocol witness table accessor for type Locale and conformance Locale();
  unint64_t result = lazy protocol witness table accessor for type Locale and conformance Locale();
  a1[4] = result;
  return result;
}

uint64_t specialized static NSLocale._windowsLocaleCode(fromLocaleIdentifier:)()
{
  String.utf8CString.getter();
  uint64_t LCID = uloc_getLCID();
  swift_release();
  return LCID;
}

uint64_t specialized static NSLocale._numberingSystem(forLocaleIdentifier:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(a1, a2, v8);
  unint64_t object = v9;
  if (v9)
  {
    uint64_t countAndFlagsBits = v8[21];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined release of Locale.Components(v8);
  }
  else
  {
    static Locale.NumberingSystem.defaultNumberingSystem(for:)(a1, a2, &v7);
    outlined release of Locale.Components(v8);
    unint64_t object = v7._object;
    if (!v7._object) {
      return 0;
    }
    uint64_t countAndFlagsBits = v7._countAndFlagsBits;
  }
  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(countAndFlagsBits, (uint64_t)object);
  return countAndFlagsBits;
}

uint64_t specialized static NSLocale._validNumberingSystems(forLocaleIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = specialized static Locale.NumberingSystem.validNumberingSystems(for:)(a1, a2);
  int64_t v3 = v2[2];
  if (v3)
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v12;
    uint64_t v5 = v2 + 5;
    do
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v6 = *v5;
      unint64_t v8 = *(void *)(v12 + 16);
      unint64_t v9 = *(void *)(v12 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v9 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v8 + 1, 1);
      }
      v5 += 4;
      *(void *)(v12 + 16) = v8 + 1;
      uint64_t v10 = v12 + 16 * v8;
      *(void *)(v10 + 32) = v7;
      *(void *)(v10 + 40) = v6;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  return v4;
}

uint64_t KeyedEncodingContainer.encode<A, B>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v25[4] = a5;
  v25[1] = a2;
  _OWORD v25[2] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v27 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  CFPropertyListRef v14 = (char *)v25 - v13;
  uint64_t v15 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x1F4188790](v19);
  unint64_t v23 = (char *)v25 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)v25 - v22, a1, v19, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v23, 1, a4) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v23, a4);
  KeyedEncodingContainer.superEncoder(forKey:)();
  (*(void (**)(void))(a9 + 16))();
  (*(void (**)(unsigned char *, char *, uint64_t, uint64_t))(a7 + 16))(v28, v14, a4, a7);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, a4);
}

uint64_t KeyedDecodingContainer.decode<A, B>(_:forKey:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  v16[0] = a1;
  v16[1] = a2;
  _OWORD v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  void v16[5] = a6;
  uint64_t v10 = type metadata accessor for CodableConfiguration();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v16 - v11;
  if (KeyedDecodingContainer.contains(_:)())
  {
    swift_getWitnessTable();
    uint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)();
    if (v7) {
      return result;
    }
    uint64_t v14 = *(void *)(a1 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a7, v12, a1);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v14 = *(void *)(a1 - 8);
    uint64_t v15 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(a7, v15, 1, a1);
}

uint64_t type metadata accessor for CodableConfiguration()
{
  return swift_getGenericMetadata();
}

uint64_t CodableConfiguration.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t KeyedEncodingContainer.encode<A, B>(_:forKey:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD v17[2] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)v17 - v14;
  KeyedEncodingContainer.superEncoder(forKey:)();
  (*(void (**)(uint64_t, uint64_t))(a8 + 16))(a6, a8);
  (*(void (**)(unsigned char *, char *, uint64_t, uint64_t))(a7 + 16))(v18, v15, a5, a7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A, B>(_:forKey:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v25 = a6;
  uint64_t v26 = a8;
  v24[0] = a2;
  v24[1] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v28 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v24 - v16;
  uint64_t v18 = *(void *)(a5 - 8);
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)v24 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v17, a1, v14, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, a5) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v17, a5);
  KeyedEncodingContainer.superEncoder(forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26);
  (*(void (**)(unsigned char *, char *, uint64_t, uint64_t))(a7 + 16))(v29, v13, a5, a7);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, a5);
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  KeyedEncodingContainer.superEncoder(forKey:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(a6 + 16))(v10, a3, a5, a6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v19[1] = a4;
  uint64_t v21 = a3;
  v19[0] = a2;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v19 - v11;
  uint64_t v13 = *(void *)(a5 - 8);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a1, v9, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a5) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v12, a5);
  KeyedEncodingContainer.superEncoder(forKey:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(a6 + 16))(v20, v21, a5, a6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, a5);
}

uint64_t KeyedDecodingContainer.decode<A, B>(_:forKey:configuration:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v16 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  uint64_t v12 = &v15[-v11 - 8];
  uint64_t result = KeyedDecodingContainer.superDecoder(forKey:)();
  if (!v5)
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a2, a4);
    return (*(uint64_t (**)(unsigned char *, char *, uint64_t, uint64_t))(a3 + 16))(v15, v12, a1, a3);
  }
  return result;
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A, B>(_:forKey:configuration:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v18 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  uint64_t v12 = (char *)v15 - v11;
  if ((KeyedDecodingContainer.contains(_:)() & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a5, 1, 1, a1);
  }
  v15[1] = a2;
  uint64_t v16 = a5;
  uint64_t v13 = v18;
  uint64_t result = KeyedDecodingContainer.superDecoder(forKey:)();
  if (!v5)
  {
    (*(void (**)(void))(v13 + 16))();
    (*(void (**)(unsigned char *, char *, uint64_t, uint64_t))(a3 + 16))(v17, v12, a1, a3);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(v16, 0, 1, a1);
  }
  return result;
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:configuration:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v12 = a1;
  uint64_t v14 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = &v13[-v9 - 8];
  uint64_t result = KeyedDecodingContainer.superDecoder(forKey:)();
  if (!v4)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, AssociatedTypeWitness);
    return (*(uint64_t (**)(unsigned char *, char *, uint64_t, uint64_t))(a3 + 16))(v13, v10, a2, a3);
  }
  return result;
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:configuration:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v18 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v14 - v9;
  if ((KeyedDecodingContainer.contains(_:)() & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a4, 1, 1, a2);
  }
  uint64_t v15 = v8;
  uint64_t v16 = a3;
  uint64_t v11 = v18;
  uint64_t v17 = a4;
  uint64_t v12 = v20;
  uint64_t result = KeyedDecodingContainer.superDecoder(forKey:)();
  if (!v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v10, v11, AssociatedTypeWitness);
    (*(void (**)(unsigned char *, char *, uint64_t))(v16 + 16))(v19, v10, a2);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(v17, 0, 1, a2);
  }
  return result;
}

uint64_t UnkeyedEncodingContainer.encode<A, B>(_:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v17[1] = a6;
  _OWORD v17[2] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)v17 - v14;
  dispatch thunk of UnkeyedEncodingContainer.superEncoder()();
  (*(void (**)(uint64_t, uint64_t))(a8 + 16))(a5, a8);
  (*(void (**)(unsigned char *, char *, uint64_t, uint64_t))(a7 + 16))(v18, v15, a4, a7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t UnkeyedEncodingContainer.encode<A>(_:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  dispatch thunk of UnkeyedEncodingContainer.superEncoder()();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(a6 + 16))(v10, a2, a4, a6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t UnkeyedDecodingContainer.decode<A, B>(_:configuration:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v16 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  uint64_t v12 = &v15[-v11 - 8];
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.superDecoder()();
  if (!v5)
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a2, a4);
    return (*(uint64_t (**)(unsigned char *, char *, uint64_t, uint64_t))(a3 + 16))(v15, v12, a1, a3);
  }
  return result;
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent<A, B>(_:configuration:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v19 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  uint64_t v12 = (char *)&v15 - v11;
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.decodeNil()();
  if (!v5)
  {
    uint64_t v16 = a3;
    uint64_t v17 = a5;
    uint64_t v14 = v19;
    if (result)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(v17, 1, 1, a1);
    }
    else
    {
      dispatch thunk of UnkeyedDecodingContainer.superDecoder()();
      (*(void (**)(uint64_t, uint64_t))(v14 + 16))(a2, v14);
      (*(void (**)(unsigned char *, char *, uint64_t))(v16 + 16))(v18, v12, a1);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(v17, 0, 1, a1);
    }
  }
  return result;
}

uint64_t UnkeyedDecodingContainer.decode<A>(_:configuration:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v12 = a1;
  uint64_t v14 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = &v13[-v9 - 8];
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.superDecoder()();
  if (!v4)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, AssociatedTypeWitness);
    return (*(uint64_t (**)(unsigned char *, char *, uint64_t, uint64_t))(a3 + 16))(v13, v10, a2, a3);
  }
  return result;
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent<A>(_:configuration:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v17 = a1;
  uint64_t v15 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v13 - v9;
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.decodeNil()();
  if (!v4)
  {
    uint64_t v14 = a3;
    uint64_t v12 = v17;
    if (result)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(v15, 1, 1, a2);
    }
    else
    {
      dispatch thunk of UnkeyedDecodingContainer.superDecoder()();
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, AssociatedTypeWitness);
      (*(void (**)(unsigned char *, char *, uint64_t))(v14 + 16))(v16, v10, a2);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(v15, 0, 1, a2);
    }
  }
  return result;
}

uint64_t CodableConfiguration.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t CodableConfiguration.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*CodableConfiguration.wrappedValue.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t CodableConfiguration.init(wrappedValue:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1);
}

uint64_t CodableConfiguration.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[5];
  uint64_t v5 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  double v8 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v12 - v9;
  (*(void (**)(double))(a2[7] + 16))(v8);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v4 + 16))(a1, v10, v5, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
}

uint64_t CodableConfiguration.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v22 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  uint64_t v14 = &v21[-v13 - 8];
  uint64_t v15 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = &v21[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v21);
  (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t))(a4 + 16))(v21, v14, a2, a4);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (!v6) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v15 + 32))(v22, v18, a2);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableConfiguration<A, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return CodableConfiguration.init(from:)(a1, a2[2], a2[3], a2[4], a2[6], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableConfiguration<A, B>(uint64_t a1, void *a2)
{
  return CodableConfiguration.encode(to:)(a1, a2);
}

uint64_t static CodableConfiguration<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> CodableConfiguration<A, B>()
{
  return static CodableConfiguration<>.== infix(_:_:)() & 1;
}

uint64_t CodableConfiguration<>.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int CodableConfiguration<>.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> CodableConfiguration<A, B>()
{
  return CodableConfiguration<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> CodableConfiguration<A, B>()
{
  return CodableConfiguration<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> CodableConfiguration<A, B>()
{
  return Hasher._finalize()();
}

uint64_t Optional<A>.encode(to:configuration:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = &v21[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(unsigned char *, uint64_t, double))(v8 + 16))(v10, v18, v15);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) == 1)
  {
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, a3);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v21, v22);
    dispatch thunk of SingleValueEncodingContainer.encodeNil()();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 32))(v17, v10, v12);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(a4 + 16))(a1, a2, v12, a4);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v17, v12);
  }
}

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance <A> A?(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Optional<A>.encode(to:configuration:)(a1, a2, a3, *(void *)(a4 - 8));
}

uint64_t Optional<A>.init(from:configuration:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v42 = a5;
  uint64_t v48 = a2;
  uint64_t v40 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v36 - v8;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v41 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  double v15 = (char *)&v36 - v14;
  uint64_t v16 = a1[3];
  Swift::String v45 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  uint64_t v17 = v43;
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v17)
  {
    uint64_t v37 = v12;
    uint64_t v38 = v10;
    uint64_t v39 = v15;
    uint64_t v43 = 0;
    uint64_t v19 = AssociatedTypeWitness;
    __swift_project_boxed_opaque_existential_1(v47, v47[3]);
    if (dispatch thunk of SingleValueDecodingContainer.decodeNil()())
    {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v48, v19);
      uint64_t v20 = a3;
      uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56);
      uint64_t v22 = v39;
      v21(v39, 1, 1, v20);
      uint64_t v24 = v41;
      uint64_t v23 = v42;
      uint64_t v25 = v38;
      uint64_t v18 = (uint64_t)v45;
    }
    else
    {
      uint64_t v18 = (uint64_t)v45;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v45, (uint64_t)v46);
      uint64_t v26 = v7;
      uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      uint64_t v28 = v9;
      char v29 = v9;
      uint64_t v30 = v48;
      uint64_t v31 = v19;
      v27(v29, v48, v19);
      uint64_t v32 = v37;
      uint64_t v33 = v43;
      (*(void (**)(unsigned char *, char *, uint64_t))(v40 + 16))(v46, v28, a3);
      uint64_t v23 = v42;
      if (v33)
      {
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v30, v31);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
        return __swift_destroy_boxed_opaque_existential_1(v18);
      }
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v30, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v32, 0, 1, a3);
      uint64_t v34 = v32;
      uint64_t v24 = v41;
      uint64_t v25 = v38;
      uint64_t v22 = v39;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v39, v34, v38);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v23, v22, v25);
    return __swift_destroy_boxed_opaque_existential_1(v18);
  }
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v48, AssociatedTypeWitness);
  uint64_t v18 = (uint64_t)v45;
  return __swift_destroy_boxed_opaque_existential_1(v18);
}

uint64_t protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance <A> A?@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Optional<A>.init(from:configuration:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8), a5);
}

uint64_t Array<A>.encode(to:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a4;
  uint64_t v33 = a2;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v32 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v34 = (char *)&v22 - v11;
  __swift_project_boxed_opaque_existential_1(v12, v12[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  uint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v31 = MEMORY[0x185302620](v13, v6);
  if (!v31)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  }
  uint64_t v14 = 0;
  uint64_t v28 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a5 + 16);
  uint64_t v29 = a5 + 16;
  unint64_t v24 = a3 & 0xC000000000000001;
  uint64_t v25 = a3;
  uint64_t v30 = (void (**)(char *, void *, uint64_t))(v8 + 16);
  uint64_t v26 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v27 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v15 = a5;
  while (1)
  {
    if ((_swift_isClassOrObjCExistentialType() & 1) == 0 || !v24)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v34, a3+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v14, v6);
      uint64_t v16 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_12;
      }
      goto LABEL_6;
    }
    uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
    if (v23 != 8) {
      break;
    }
    v35[0] = result;
    (*v30)(v34, v35, v6);
    swift_unknownObjectRelease();
    uint64_t v16 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
LABEL_6:
    uint64_t v17 = v6;
    uint64_t v18 = v32;
    (*v27)(v32, v34, v17);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v36, v37);
    dispatch thunk of UnkeyedEncodingContainer.superEncoder()();
    uint64_t v19 = v38;
    v28(v35, v33, v17, v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    uint64_t v20 = v18;
    uint64_t v6 = v17;
    (*v26)(v20, v17);
    if (v19)
    {
      swift_bridgeObjectRelease();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    }
    uint64_t v38 = 0;
    ++v14;
    a3 = v25;
    if (v16 == v31) {
      goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Array<A>.encode(to:configuration:)(a1, a2, *v4, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

char *Array<A>.init(from:configuration:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a2;
  uint64_t v37 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v41 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = (char *)MEMORY[0x1E4FBC860];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v13 = v43;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v13)
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v42, AssociatedTypeWitness);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v9;
  }
  uint64_t v43 = v12;
  uint64_t v34 = v9;
  unint64_t v35 = a1;
  uint64_t v14 = v37;
  uint64_t v36 = v7;
  __swift_project_boxed_opaque_existential_1(v45, v46);
  if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) == 0)
  {
    uint64_t v17 = v14;
    uint64_t v39 = v14 + 16;
    uint64_t v40 = (void (**)(char *, uint64_t, uint64_t))(v36 + 16);
    uint64_t v38 = v41 + 32;
    uint64_t v18 = MEMORY[0x1E4FBC860];
    uint64_t v15 = AssociatedTypeWitness;
    uint64_t v19 = v34;
    while (1)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v45, v46);
      dispatch thunk of UnkeyedDecodingContainer.superDecoder()();
      (*v40)(v19, v42, v15);
      (*(void (**)(char *, char *, uint64_t, uint64_t))(v17 + 16))(v44, v19, a3, v17);
      if (_swift_isClassOrObjCExistentialType())
      {
        char isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        uint64_t v47 = (char *)v18;
        if ((isUniquelyReferenced_nonNull_bridgeObject & 1) == 0
          || (_swift_isClassOrObjCExistentialType() & 1) != 0 && (v18 < 0 || (v18 & 0x4000000000000000) != 0))
        {
LABEL_20:
          if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v18 < 0 || (v18 & 0x4000000000000000) != 0))
          {
            specialized _ArrayBuffer._nonNative.getter(v18);
            swift_unknownObjectRetain();
            uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
            swift_unknownObjectRelease();
          }
          else
          {
            char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
            uint64_t v25 = v18 & 0xFFFFFFFFFFFFFF8;
            if ((isClassOrObjCExistentialType & 1) == 0) {
              uint64_t v25 = v18;
            }
            uint64_t v26 = *(void *)(v25 + 16);
          }
          uint64_t v18 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26 + 1, 1, v18, a3);
          uint64_t v47 = (char *)v18;
        }
      }
      else
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v47 = (char *)v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          goto LABEL_20;
        }
      }
      if (_swift_isClassOrObjCExistentialType()) {
        uint64_t v27 = v18 & 0xFFFFFFFFFFFFFF8;
      }
      else {
        uint64_t v27 = v18;
      }
      uint64_t v28 = *(void *)(v27 + 16);
      if (_swift_isClassOrObjCExistentialType()) {
        uint64_t v29 = v18 & 0xFFFFFFFFFFFFFF8;
      }
      else {
        uint64_t v29 = v18;
      }
      unint64_t v30 = *(void *)(v29 + 24);
      uint64_t v31 = v28 + 1;
      if (v28 + 1 > (uint64_t)(v30 >> 1))
      {
        Swift::Bool v32 = v30 > 1;
        type metadata accessor for Array();
        Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32, v28 + 1, 1);
        uint64_t v18 = (uint64_t)v47;
      }
      if (_swift_isClassOrObjCExistentialType())
      {
        uint64_t v20 = v18 & 0xFFFFFFFFFFFFFF8;
        *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) = v31;
      }
      else
      {
        *(void *)(v18 + 16) = v31;
        uint64_t v20 = v18 & 0xFFFFFFFFFFFFFF8;
      }
      if (_swift_isClassOrObjCExistentialType()) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = v18;
      }
      (*(void (**)(unint64_t, char *, uint64_t))(v41 + 32))(v21+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v28, v43, a3);
      uint64_t v47 = (char *)v18;
      __swift_project_boxed_opaque_existential_1(v45, v46);
      if (dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter()) {
        goto LABEL_5;
      }
    }
  }
  uint64_t v15 = AssociatedTypeWitness;
LABEL_5:
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v42, v15);
  uint64_t v9 = v47;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  return v9;
}

char *protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance <A> [A]@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  uint64_t result = Array<A>.init(from:configuration:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
  if (!v5) {
    *a5 = result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in <> CodableConfiguration<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t dispatch thunk of static EncodingConfigurationProviding.encodingConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EncodableWithConfiguration.encode(to:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static DecodingConfigurationProviding.decodingConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DecodableWithConfiguration.init(from:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t type metadata completion function for CodableConfiguration()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CodableConfiguration(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for CodableConfiguration(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x181E05B34);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t specialized swift_willThrowTyped(long long *a1)
{
  outlined init with take of PredicateCodableError(a1, (uint64_t)v2);
  lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
  return swift_willThrowTypedImpl();
}

Swift::Int _CalendarGregorian._algorithmA(smaller:larger:at:)(char *a1, char *a2, void *a3)
{
  char v3 = *a1;
  char v4 = *a2;
  *(Foundation::Date *)&v5._Swift::Double time = (Foundation::Date)*a3;
  char v11 = *a2;
  Swift::Double time = v5._time;
  _CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v11, v5);
  if (v14) {
    return 0;
  }
  double v7 = v12._time;
  double v6 = v13;
  LOBYTE(time) = v3;
  char v11 = v4;
  v12._Swift::Double time = v12._time + 0.1;
  Swift::Int_optional v15 = _CalendarGregorian.ordinality(of:in:for:)((Foundation::Calendar::Component)&time, (Foundation::Calendar::Component)&v11, v12);
  if (v15.is_nil) {
    return 0;
  }
  Swift::Int value = v15.value;
  LOBYTE(time) = v3;
  char v11 = v4;
  v12._Swift::Double time = v6 + v7 + -0.1;
  Swift::Int_optional v16 = _CalendarGregorian.ordinality(of:in:for:)((Foundation::Calendar::Component)&time, (Foundation::Calendar::Component)&v11, v12);
  if (v16.is_nil) {
    return 0;
  }
  if (v16.value >= value)
  {
    if (__OFADD__(v16.value, 1))
    {
      __break(1u);
    }
    else if (v16.value + 1 >= value)
    {
      return value;
    }
    __break(1u);
    JUMPOUT(0x181E05D6CLL);
  }
  return value;
}

uint64_t _CalendarGregorian._algorithmB(smaller:larger:at:)(char *a1, char *a2, Swift::Double *a3)
{
  char v3 = *a1;
  v4._Swift::Double time = *a3;
  char v39 = *a2;
  Swift::Double time = v4._time;
  _CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v39, v4);
  if (v36) {
    return 0;
  }
  double v7 = v34;
  double v6 = v35;
  char v39 = 2;
  Swift::Double time = v34 + 1.0;
  *(void *)&double v8 = (unint64_t)_CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v39, COERCE_FOUNDATION_DATE(v34 + 1.0));
  double v10 = v34;
  double v9 = v35;
  char v39 = v3;
  char v37 = 2;
  Swift::Double time = v34 + 0.1;
  uint64_t v11 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF((uint64_t)&v39, &v37, &time, (uint64_t)&v34, v8);
  if (v13) {
    return 0;
  }
  uint64_t v5 = v11;
  double v14 = v9 + v10;
  char v39 = v3;
  char v37 = 2;
  Swift::Double time = v14 + -0.1;
  uint64_t result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF((uint64_t)&v39, &v37, &time, (uint64_t)&v34, v12);
  if (v16) {
    return 0;
  }
  if (result < v5) {
    return v5;
  }
  uint64_t v17 = result + 1;
  if (__OFADD__(result, 1))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v17 >= v5)
  {
    double v18 = v6 + v7 + -1.0;
    v19._Swift::Double time = v14 + 1.0;
    if (v14 + 1.0 < v18)
    {
      uint64_t v20 = -13;
      uint64_t v21 = v5;
      while (1)
      {
        char v39 = 2;
        Swift::Double time = v19._time;
        *(void *)&double v22 = (unint64_t)_CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v39, v19);
        if (v36) {
          return v21;
        }
        double v24 = v34;
        double v23 = v35;
        char v39 = v3;
        char v37 = 2;
        Swift::Double time = v34 + 0.1;
        uint64_t v25 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF((uint64_t)&v39, &v37, &time, (uint64_t)&v34, v22);
        if (v27) {
          return v21;
        }
        uint64_t v5 = v25;
        double v28 = v23 + v24;
        char v39 = v3;
        char v37 = 2;
        Swift::Double time = v28 + -0.1;
        uint64_t result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF((uint64_t)&v39, &v37, &time, (uint64_t)&v34, v26);
        if (v29) {
          return v21;
        }
        if (v21 == v17) {
          break;
        }
        if (v5 >= v21) {
          uint64_t v5 = v21;
        }
        uint64_t v30 = v17 - v21;
        if (__OFSUB__(v17, v21)) {
          goto LABEL_33;
        }
        BOOL v31 = __OFADD__(v5, v30);
        uint64_t v32 = v5 + v30;
        if (v31) {
          goto LABEL_34;
        }
        uint64_t v17 = v32 + result;
        if (__OFADD__(v32, result)) {
          goto LABEL_35;
        }
        if (v17 < v5) {
          goto LABEL_36;
        }
        v19._Swift::Double time = v28 + 1.0;
        BOOL v33 = v28 + 1.0 >= v18 || v20++ == 0;
        uint64_t v21 = v5;
        if (v33) {
          return v5;
        }
      }
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    return v5;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t _CalendarGregorian._algorithmC(smaller:larger:at:)(char *a1, char *a2, void *a3)
{
  char v3 = *a1;
  *(Foundation::Date *)&v4._Swift::Double time = (Foundation::Date)*a3;
  char v16 = *a2;
  Swift::Double time = v4._time;
  _CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v16, v4);
  if (v13) {
    return 0;
  }
  double v6 = v12[0];
  double v5 = v12[1];
  char v16 = v3;
  char v14 = 1;
  Swift::Double time = v12[0] + 0.1;
  uint64_t v7 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF((uint64_t)&v16, &v14, &time, (uint64_t)v12, 0.1);
  if (v8) {
    return 0;
  }
  uint64_t v9 = v7;
  char v16 = v3;
  char v14 = 1;
  Swift::Double time = v5 + v6 + -0.1;
  uint64_t result = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF((uint64_t)&v16, &v14, &time, (uint64_t)v12, v5 + v6);
  if (v11) {
    return 0;
  }
  if (result < v9) {
    return v9;
  }
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else if (result + 1 >= v9)
  {
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t _CalendarGregorian._algorithmD(at:)(double *a1, double a2)
{
  double v2 = *a1;
  char v15 = 10;
  double v14 = v2;
  unint64_t v3 = (unint64_t)_CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v15, *(Foundation::Date *)&a2);
  if (v12) {
    return 0;
  }
  char v15 = 2;
  _CalendarGregorian.dateInterval(of:for:)((Foundation::Calendar::Component)&v15, (Foundation::Date)v3);
  double v4 = v11[1] + v11[0];
  char v15 = 3;
  char v13 = 2;
  double v14 = v11[0] + 0.1;
  uint64_t v5 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF((uint64_t)&v15, &v13, &v14, (uint64_t)v11, 0.1);
  if (v6) {
    return 0;
  }
  uint64_t v7 = v5;
  char v15 = 3;
  char v13 = 2;
  double v14 = v4 + -0.1;
  uint64_t v8 = _s10Foundation18_CalendarGregorianC11_ordinality2of2in3forSiSgAA0B0V9ComponentO_AlA4DateVtAA0cB5ErrorOYKF((uint64_t)&v15, &v13, &v14, (uint64_t)v11, -0.1);
  if (v9) {
    return 0;
  }
  if (v8 >= v7)
  {
    if (__OFADD__(v8, 1))
    {
      __break(1u);
    }
    else if (v8 + 1 >= v7)
    {
      return v7;
    }
    __break(1u);
    JUMPOUT(0x181E06D74);
  }
  return v7;
}

uint64_t actualMax #1 (inRange:) in _CalendarGregorian.minMaxRange(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6)
{
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    JUMPOUT(0x181E07194);
  }
  uint64_t v6 = a2;
  if (a2 == a1) {
    return v6;
  }
  _CalendarGregorian.date(from:)((long long *)a4, (uint64_t)__dst);
  if (__dst[1]) {
    return 0;
  }
  double v10 = *(double *)__dst;
  if (*(void *)(a4 + 16))
  {
    uint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else
  {
    uint64_t v12 = *(void *)(a3 + 104);
    uint64_t v11 = *(void *)(a3 + 112);
    swift_unknownObjectRetain();
  }
  uint64_t v13 = a1 + 1;
  BOOL v14 = __OFADD__(a1, 1);
  swift_unknownObjectRetain();
  if (v14)
  {
LABEL_48:
    __break(1u);
    swift_unknownObjectRelease();
    return 0;
  }
  uint64_t v15 = a1;
  while (2)
  {
    unsigned __int8 v30 = a5;
    double v29 = v10;
    *(void *)&v28[0] = v12;
    *(void *)&v28[1] = v11;
    _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF(&v30, &v29, 1, v28, (uint64_t)v27, v31);
    uint64_t v24 = a6;
    double v23 = v31[0];
    v22[0] = v12;
    v22[1] = v11;
    _CalendarGregorian.dateComponents(_:from:in:)(&v24, &v23, v22, __src);
    memcpy(__dst, __src, 0x11AuLL);
    outlined release of DateComponents((uint64_t)__dst);
    uint64_t v16 = a1;
    switch(a5)
    {
      case 1u:
        if (__dst[7]) {
          goto LABEL_49;
        }
        uint64_t v17 = __dst[6];
        goto LABEL_44;
      case 2u:
        if (__dst[9]) {
          goto LABEL_49;
        }
        uint64_t v17 = __dst[8];
        goto LABEL_44;
      case 3u:
        if (__dst[11]) {
          goto LABEL_49;
        }
        uint64_t v17 = __dst[10];
        goto LABEL_44;
      case 4u:
        if (__dst[15]) {
          goto LABEL_49;
        }
        uint64_t v17 = __dst[14];
        goto LABEL_44;
      case 5u:
        if (__dst[17]) {
          goto LABEL_49;
        }
        uint64_t v17 = __dst[16];
        goto LABEL_44;
      case 6u:
        if (__dst[19]) {
          goto LABEL_49;
        }
        uint64_t v17 = __dst[18];
        goto LABEL_44;
      case 7u:
        if (__dst[23]) {
          goto LABEL_49;
        }
        uint64_t v17 = __dst[22];
        goto LABEL_44;
      case 8u:
        if (__dst[25]) {
          goto LABEL_49;
        }
        uint64_t v17 = __dst[24];
        goto LABEL_44;
      case 9u:
        if (__dst[27]) {
          goto LABEL_49;
        }
        uint64_t v17 = __dst[26];
        goto LABEL_44;
      case 0xAu:
        if (__dst[31]) {
          goto LABEL_49;
        }
        uint64_t v17 = __dst[30];
        goto LABEL_44;
      case 0xBu:
        if (__dst[33]) {
          goto LABEL_49;
        }
        uint64_t v17 = __dst[32];
        goto LABEL_44;
      case 0xCu:
        if (__dst[35]) {
          goto LABEL_49;
        }
        uint64_t v17 = __dst[34];
        goto LABEL_44;
      case 0xDu:
        if (__dst[21]) {
          goto LABEL_49;
        }
        uint64_t v17 = __dst[20];
        goto LABEL_44;
      case 0xEu:
      case 0xFu:
      case 0x10u:
        goto LABEL_51;
      case 0x11u:
        if (__dst[13]) {
          goto LABEL_49;
        }
        uint64_t v17 = __dst[12];
        goto LABEL_44;
      default:
        if (__dst[5])
        {
LABEL_49:
          uint64_t v16 = v15;
          goto LABEL_51;
        }
        uint64_t v17 = __dst[4];
LABEL_44:
        uint64_t v16 = v15;
        if (v17 != v13) {
          goto LABEL_51;
        }
        if (v13 != v6)
        {
          uint64_t v15 = v13;
          if (__OFADD__(v13++, 1)) {
            goto LABEL_48;
          }
          continue;
        }
        uint64_t v16 = v6;
LABEL_51:
        swift_unknownObjectRelease();
        return v16;
    }
  }
}

Foundation::Date_optional __swiftcall _CalendarGregorian.start(of:at:)(Foundation::Calendar::Component of, Foundation::Date at)
{
  char v5 = *(unsigned char *)of;
  double v6 = *v2;
  uint64_t v7 = v3;
  switch(*(unsigned char *)of)
  {
    case 1:
    case 2:
    case 3:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x11:
      goto LABEL_2;
    case 4:
      uint64_t v21 = *(void *)(v4 + 112);
      uint64_t ObjectType = swift_getObjectType();
      v26[0] = v6;
      double v23 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v21 + 40);
      swift_unknownObjectRetain();
      uint64_t v24 = v23(v26, ObjectType, v21);
      of = swift_unknownObjectRelease();
      at._Swift::Double time = floor((v6 + (double)v24) / 3600.0) * 3600.0 - (double)v24;
      goto LABEL_25;
    case 5:
      at._Swift::Double time = floor(v6 / 60.0) * 60.0;
      goto LABEL_25;
    case 6:
      at._Swift::Double time = floor(v6);
      goto LABEL_25;
    case 7:
    case 8:
      char v5 = 3;
LABEL_2:
      LOBYTE(v25) = v5;
      id v28 = *(id *)&v6;
      at._Swift::Double time = _CalendarGregorian._firstInstant(of:at:)((Foundation::Calendar::Component)&v25, at)._time;
      if (*(Foundation::Date *)&v8._time)
      {
        id v28 = *(id *)&v8._time;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        if (!swift_dynamicCast())
        {

          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x181E07714);
        }
        if (v27 < 0)
        {
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v18 = type metadata accessor for Logger();
          __swift_project_value_buffer(v18, (uint64_t)static _CalendarGregorian.logger);
          double v10 = Logger.logObject.getter();
          os_log_type_t v11 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v10, v11)) {
            goto LABEL_17;
          }
          uint64_t v12 = swift_slowAlloc();
          uint64_t v13 = swift_slowAlloc();
          uint64_t v25 = v13;
          *(_DWORD *)uint64_t v12 = 136446466;
          uint64_t v19 = Calendar.Component.debugDescription.getter();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v25);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v12 + 12) = 2050;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v16 = "Not advancing in firstInstant(of:at:). unit: %{public}s, at: %{public}f";
        }
        else
        {
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v9 = type metadata accessor for Logger();
          __swift_project_value_buffer(v9, (uint64_t)static _CalendarGregorian.logger);
          double v10 = Logger.logObject.getter();
          os_log_type_t v11 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v10, v11)) {
            goto LABEL_17;
          }
          uint64_t v12 = swift_slowAlloc();
          uint64_t v13 = swift_slowAlloc();
          uint64_t v25 = v13;
          *(_DWORD *)uint64_t v12 = 136446466;
          uint64_t v14 = Calendar.Component.debugDescription.getter();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v25);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v12 + 12) = 2050;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v16 = "Overflowing in firstInstant(of:at:). unit: %{public}s, at: %{public}f";
        }
        _os_log_impl(&dword_181795000, v10, v11, v16, (uint8_t *)v12, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x185309510](v13, -1, -1);
        MEMORY[0x185309510](v12, -1, -1);
LABEL_17:

        *(void *)uint64_t v7 = 0;
        *(unsigned char *)(v7 + 8) = 1;

        goto LABEL_31;
      }
      unint64_t v17 = *(void *)&v26[0];
LABEL_10:
      *(void *)uint64_t v7 = v17;
LABEL_26:
      *(unsigned char *)(v7 + 8) = 0;
LABEL_31:
      result.Swift::Int value = at;
      result.is_nil = of;
      return result;
    case 0xD:
      at._Swift::Double time = floor(v6 * 1000000000.0) * 0.000000001;
LABEL_25:
      *(double *)uint64_t v7 = at._time;
      goto LABEL_26;
    case 0xE:
    case 0xF:
    case 0x10:
      *(void *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 8) = 1;
      goto LABEL_31;
    default:
      at._Swift::Double time = -6.3113904e10;
      if (v6 >= -6.3113904e10) {
        unint64_t v17 = 0xC22D63C37F000000;
      }
      else {
        unint64_t v17 = 0xC2903AC786FE0000;
      }
      goto LABEL_10;
  }
}

uint64_t _s10Foundation18_CalendarGregorianC26dateAfterDateWithTargetDoWyAA0F0V_Si9daysAddedtAF_SitAA0cB5ErrorOYKF(double *a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  double v8 = *a2;
  __dst[0] = 128;
  v70[0] = v8;
  *(_OWORD *)__src = *(_OWORD *)(v4 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(__dst, v70, __src, v73);
  swift_unknownObjectRelease();
  outlined release of DateComponents((uint64_t)v73);
  if (v75) {
    goto LABEL_87;
  }
  if (v74 == a3)
  {
    uint64_t result = 0;
    *a1 = v8;
    return result;
  }
  uint64_t v62 = a1;
  uint64_t v10 = 0;
  uint64_t v64 = a3;
  while (1)
  {
    double v11 = *(double *)(v5 + 104);
    double v12 = *(double *)(v5 + 112);
    double v13 = fmod(v8, 1.0);
    if (v13 >= 0.0) {
      double v14 = v8 - v13;
    }
    else {
      double v14 = v8 - v13 + -1.0;
    }
    if (v13 >= 0.0) {
      double v15 = v13;
    }
    else {
      double v15 = v13 + 1.0;
    }
    uint64_t v16 = unk_1ECA588D8;
    if ((unk_1ECA588D8 & ~qword_1ECA588D0) == 0) {
      uint64_t v16 = 0;
    }
    uint64_t v17 = v16 | qword_1ECA588D0;
    uint64_t v18 = qword_1ECA588E0;
    if ((qword_1ECA588E0 & ~v17) == 0) {
      uint64_t v18 = 0;
    }
    v69[0] = v18 | v17;
    *(double *)char v68 = v8;
    v70[0] = v11;
    v70[1] = v12;
    swift_unknownObjectRetain_n();
    _CalendarGregorian.dateComponents(_:from:in:)(v69, (double *)v68, (uint64_t *)v70, __src);
    swift_unknownObjectRelease();
    memcpy(__dst, __src, 0x11AuLL);
    if (__dst[15] & 1) != 0 || (__dst[17] & 1) != 0 || (__dst[19]) {
      goto LABEL_83;
    }
    uint64_t v19 = __dst[14];
    uint64_t v20 = __dst[16];
    uint64_t v21 = __dst[18];
    outlined release of DateComponents((uint64_t)__dst);
    uint64_t v22 = 3600 * v19;
    if ((unsigned __int128)(v19 * (__int128)3600) >> 64 != (3600 * v19) >> 63)
    {
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
      JUMPOUT(0x181E07E14);
    }
    uint64_t v23 = 60 * v20;
    if ((unsigned __int128)(v20 * (__int128)60) >> 64 != (60 * v20) >> 63) {
      goto LABEL_69;
    }
    BOOL v24 = __OFADD__(v22, v23);
    uint64_t v25 = v22 + v23;
    if (v24) {
      goto LABEL_70;
    }
    BOOL v24 = __OFADD__(v25, v21);
    uint64_t v26 = v25 + v21;
    if (v24) {
      goto LABEL_71;
    }
    double v27 = v14 + 86400.0;
    uint64_t v28 = unk_1ECA58910;
    if ((unk_1ECA58910 & ~qword_1ECA58908) == 0) {
      uint64_t v28 = 0;
    }
    uint64_t v29 = v28 | qword_1ECA58908;
    uint64_t v30 = qword_1ECA58918;
    if ((qword_1ECA58918 & ~v29) == 0) {
      uint64_t v30 = 0;
    }
    v67[0] = v30 | v29;
    v65[0] = v14 + 86400.0;
    v68[0] = *(_OWORD *)(v5 + 104);
    swift_unknownObjectRetain();
    _CalendarGregorian.dateComponents(_:from:in:)(v67, v65, (uint64_t *)v68, v70);
    swift_unknownObjectRelease();
    memcpy(v69, v70, 0x11AuLL);
    if (v69[15] & 1) != 0 || (v69[17] & 1) != 0 || (v69[19]) {
      goto LABEL_84;
    }
    uint64_t v31 = v69[14];
    uint64_t v32 = v69[16];
    uint64_t v33 = v69[18];
    outlined release of DateComponents((uint64_t)v69);
    uint64_t v34 = 3600 * v31;
    if ((unsigned __int128)(v31 * (__int128)3600) >> 64 != (3600 * v31) >> 63) {
      goto LABEL_72;
    }
    uint64_t v35 = 60 * v32;
    if ((unsigned __int128)(v32 * (__int128)60) >> 64 != (60 * v32) >> 63) {
      goto LABEL_73;
    }
    BOOL v24 = __OFADD__(v34, v35);
    uint64_t v36 = v34 + v35;
    if (v24) {
      goto LABEL_74;
    }
    BOOL v24 = __OFADD__(v36, v33);
    uint64_t v37 = v36 + v33;
    if (v24) {
      goto LABEL_75;
    }
    double v38 = (double)v26;
    if ((double)v26 == (double)v37)
    {
      double v39 = v27;
      if (v27 < -3187299600.0) {
        goto LABEL_57;
      }
    }
    else
    {
      uint64_t ObjectType = swift_getObjectType();
      *(double *)char v68 = v27;
      uint64_t v41 = *(uint64_t (**)(_OWORD *, uint64_t, void))(*(void *)&v12 + 40);
      uint64_t v42 = v41(v68, ObjectType, *(void *)&v12);
      *(double *)char v68 = v8;
      uint64_t v43 = v41(v68, ObjectType, *(void *)&v12);
      if (v42 == v43)
      {
        double v39 = v27;
      }
      else
      {
        uint64_t v44 = v43;
        if (__OFSUB__(v43, v42)) {
          goto LABEL_77;
        }
        double v39 = v27 + (double)(v43 - v42);
        uint64_t v45 = unk_1ECA58948;
        if ((unk_1ECA58948 & ~qword_1ECA58940) == 0) {
          uint64_t v45 = 0;
        }
        uint64_t v46 = v45 | qword_1ECA58940;
        uint64_t v47 = qword_1ECA58950;
        if ((qword_1ECA58950 & ~v46) == 0) {
          uint64_t v47 = 0;
        }
        *(void *)&double v76 = v47 | v46;
        double v66 = v27 + (double)(v43 - v42);
        *(_OWORD *)uint64_t v65 = *(_OWORD *)(v5 + 104);
        swift_unknownObjectRetain();
        _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)&v76, &v66, (uint64_t *)v65, v68);
        swift_unknownObjectRelease();
        memcpy(v67, v68, 0x11AuLL);
        if (v67[15] & 1) != 0 || (v67[17] & 1) != 0 || (v67[19]) {
          goto LABEL_86;
        }
        uint64_t v48 = v67[14];
        uint64_t v49 = v67[16];
        uint64_t v50 = v67[18];
        outlined release of DateComponents((uint64_t)v67);
        uint64_t v51 = 3600 * v48;
        if ((unsigned __int128)(v48 * (__int128)3600) >> 64 != (3600 * v48) >> 63) {
          goto LABEL_78;
        }
        uint64_t v52 = 60 * v49;
        if ((unsigned __int128)(v49 * (__int128)60) >> 64 != (60 * v49) >> 63) {
          goto LABEL_79;
        }
        BOOL v24 = __OFADD__(v51, v52);
        uint64_t v53 = v51 + v52;
        if (v24) {
          goto LABEL_80;
        }
        BOOL v24 = __OFADD__(v53, v50);
        uint64_t v54 = v53 + v50;
        if (v24) {
          goto LABEL_81;
        }
        if ((double)v54 != v38 && v44 < v42) {
          double v39 = v27;
        }
      }
      a3 = v64;
      if (v39 < -3187299600.0)
      {
LABEL_57:
        swift_unknownObjectRelease();
        goto LABEL_58;
      }
    }
    uint64_t v55 = swift_getObjectType();
    *(double *)char v67 = v39 + -172800.0;
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t, double))(*(void *)&v12 + 80))(v68, v67, v55, COERCE_DOUBLE(*(void *)&v12));
    if (BYTE8(v68[0])) {
      goto LABEL_57;
    }
    double v56 = *(double *)v68;
    if (*(double *)v68 >= v39 + -172800.0 + 345600000.0 || v39 < *(double *)v68) {
      goto LABEL_57;
    }
    *(double *)char v68 = *(double *)v68 + -1.0;
    unint64_t v58 = *(uint64_t (**)(_OWORD *, uint64_t, void))(*(void *)&v12 + 40);
    uint64_t v59 = v58(v68, v55, *(void *)&v12);
    *(double *)char v68 = v56 + 1.0;
    uint64_t v60 = v58(v68, v55, *(void *)&v12);
    swift_unknownObjectRelease();
    uint64_t v61 = v59 - v60;
    if (__OFSUB__(v59, v60)) {
      goto LABEL_82;
    }
    a3 = v64;
    if (v61 >= 1 && v39 < v56 + (double)v61) {
      double v39 = v39 - (double)v61;
    }
LABEL_58:
    double v57 = v15 + v39 + 0.0;
    if (v8 >= v57) {
      break;
    }
    *(void *)&v65[0] = 128;
    double v76 = v15 + v39 + 0.0;
    v68[0] = *(_OWORD *)(v5 + 104);
    swift_unknownObjectRetain();
    _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v65, &v76, (uint64_t *)v68, v67);
    swift_unknownObjectRelease();
    memcpy(v68, v67, 0x11AuLL);
    outlined release of DateComponents((uint64_t)v68);
    if (BYTE8(v68[11])) {
      goto LABEL_85;
    }
    uint64_t result = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_76;
    }
    ++v10;
    double v8 = v15 + v39 + 0.0;
    if (*(void *)&v68[11] == a3)
    {
      *uint64_t v62 = v57;
      return result;
    }
  }
  *(double *)a4 = v57;
  *(double *)(a4 + 8) = v8;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(unsigned char *)(a4 + 32) = 0x80;
  *(double *)char v68 = v15 + v39 + 0.0;
  *((double *)v68 + 1) = v8;
  v68[1] = 0uLL;
  LOBYTE(v68[2]) = 0x80;
  lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
  return swift_willThrowTypedImpl();
}

uint64_t _s10Foundation18_CalendarGregorianC9dayOfYear04fromF05month0D0S2i_S2itAA0cB5ErrorOYKF(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2 - 2;
  if (__OFSUB__(a2, 2))
  {
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v7 = result;
  uint64_t v8 = result + 4716;
  if (__OFADD__(result, 4716))
  {
LABEL_8:
    lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
    uint64_t result = swift_willThrowTypedImpl();
    *(_OWORD *)a4 = xmmword_1821A0620;
    *(_OWORD *)(a4 + 16) = xmmword_18210C780;
    *(unsigned char *)(a4 + 32) = 1;
    return result;
  }
  if (__OFSUB__(12, v5)) {
    goto LABEL_40;
  }
  uint64_t v9 = (14 - a2) / 12;
  BOOL v10 = __OFSUB__(v8, v9);
  uint64_t v11 = v8 - v9;
  if (v10)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (__OFSUB__(v5, 1))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (__OFADD__(a2 - 3, 12))
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if ((unsigned __int128)(v11 * (__int128)1461) >> 64 != (1461 * v11) >> 63) {
    goto LABEL_8;
  }
  uint64_t v13 = a3 + 1461 * v11 / 4;
  if (__OFADD__(a3, 1461 * v11 / 4)) {
    goto LABEL_44;
  }
  BOOL v10 = __OFSUB__(v13, 1);
  uint64_t v14 = v13 - 1;
  if (v10)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  BOOL v10 = __OFSUB__(v14, 1401);
  uint64_t v15 = v14 - 1401;
  if (v10)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  int v16 = 26215 * (__int16)(153 * ((__int16)(a2 + 9) % 12) + 2);
  BOOL v10 = __OFADD__(v15, (int)((v16 >> 17) + (v16 >> 31)));
  uint64_t v17 = v15 + (int)((v16 >> 17) + (v16 >> 31));
  if (v10)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v18 = 3 * ((v11 + 184) / 100);
  uint64_t v19 = v17 - v18 / 4;
  if (__OFSUB__(v17, v18 / 4))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v20 = v19 + 38;
  if (!__OFADD__(v19, 38))
  {
    uint64_t v21 = *(void *)(v4 + 64);
    if (v21 > result)
    {
      for (uint64_t i = 4; ; uint64_t i = 400)
      {
        if (v7 % i) {
          uint64_t result = (uint64_t)&_s10Foundation18_CalendarGregorianC9dayOfYear04fromF05month0D0S2i_S2itAA0cB5ErrorOYKFTv_r;
        }
        else {
          uint64_t result = (uint64_t)&_s10Foundation18_CalendarGregorianC9dayOfYear04fromF05month0D0S2i_S2itAA0cB5ErrorOYKFTv0_r;
        }
        unint64_t v23 = a2 - 1;
        if (a2 >= 1) {
          goto LABEL_24;
        }
LABEL_37:
        __break(1u);
LABEL_38:
        ;
      }
    }
    if ((result & 3) == 0) {
      goto LABEL_35;
    }
    uint64_t result = (uint64_t)&_s10Foundation18_CalendarGregorianC9dayOfYear04fromF05month0D0S2i_S2itAA0cB5ErrorOYKFTv_r;
    unint64_t v23 = a2 - 1;
    if (a2 < 1) {
      goto LABEL_37;
    }
LABEL_24:
    while (v23 < *(void *)(result + 16))
    {
      uint64_t v4 = *(void *)(v4 + 56);
      uint64_t v24 = *(void *)(result + 8 * v23 + 32);
      swift_bridgeObjectRelease();
      uint64_t result = v24 + a3;
      if (__OFADD__(v24, a3)) {
        goto LABEL_51;
      }
      if (v20 < v4 || v21 != v7) {
        return result;
      }
      uint64_t v26 = v7 - 1;
      if (__OFSUB__(v7, 1)) {
        goto LABEL_52;
      }
      uint64_t v27 = ((unsigned __int128)(v26 * (__int128)0x5C28F5C28F5C28F5) >> 64) - v26;
      uint64_t v28 = v26 / 400 + (v27 >> 6) + ((unint64_t)v27 >> 63) + 2;
      BOOL v10 = __OFADD__(result, v28);
      result += v28;
      if (!v10) {
        return result;
      }
      __break(1u);
LABEL_35:
      if (__ROR8__(0x8F5C28F5C28F5C29 * v7 + 0x51EB851EB851EB8, 2) < 0x28F5C28F5C28F5DuLL) {
        goto LABEL_38;
      }
      uint64_t result = (uint64_t)&_s10Foundation18_CalendarGregorianC9dayOfYear04fromF05month0D0S2i_S2itAA0cB5ErrorOYKFTv0_r;
      unint64_t v23 = a2 - 1;
      if (a2 < 1) {
        goto LABEL_37;
      }
    }
    goto LABEL_50;
  }
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

Swift::Double __swiftcall _CalendarGregorian.timeInDay(inSmallComponent:for:)(Foundation::Calendar::Component inSmallComponent, Foundation::Date a2)
{
  int v4 = *(unsigned __int8 *)inSmallComponent;
  uint64_t v5 = *v2;
  uint64_t v6 = unk_1ECA3B730;
  if ((unk_1ECA3B730 & ~qword_1ECA3B728) == 0) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = qword_1ECA3B738;
  if ((qword_1ECA3B738 & ~(v6 | qword_1ECA3B728)) == 0) {
    uint64_t v7 = 0;
  }
  uint64_t v14 = v7 | v6 | qword_1ECA3B728;
  uint64_t v13 = v5;
  long long v12 = *(_OWORD *)(v3 + 104);
  swift_unknownObjectRetain();
  _CalendarGregorian.dateComponents(_:from:in:)(&v14, (double *)&v13, (uint64_t *)&v12, v15);
  swift_unknownObjectRelease();
  if (v17 & 1) != 0 || (v19 & 1) != 0 || (v21) {
    goto LABEL_15;
  }
  uint64_t v8 = v16;
  uint64_t v9 = v18;
  uint64_t v10 = v20;
  outlined release of DateComponents((uint64_t)v15);
  Swift::Double result = 0.0;
  if (v4 != 13)
  {
    Swift::Double result = (double)v10 / 1000000000.0 + 0.0;
    if (v4 != 6)
    {
      Swift::Double result = result + (double)v9;
      if (v4 != 5)
      {
        if ((unsigned __int128)(v8 * (__int128)60) >> 64 == (60 * v8) >> 63) {
          return result + (double)(60 * v8);
        }
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x181E08420);
      }
    }
  }
  return result;
}

Swift::Int __swiftcall _CalendarGregorian.relativeWeekdayForLastDayOfPeriod(periodLength:referenceDayOfPeriod:referenceDayWeekday:)(Swift::Int periodLength, Swift::Int referenceDayOfPeriod, Swift::Int referenceDayWeekday)
{
  void (*v8)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char v9;
  char v10;
  Swift::Int result;
  uint64_t v12;
  BOOL v13;
  Swift::Int v14;
  uint64_t v15;

  Swift::Int v6 = periodLength - referenceDayOfPeriod;
  if (__OFSUB__(periodLength, referenceDayOfPeriod)) {
    goto LABEL_16;
  }
  Swift::Int v5 = v6 + referenceDayWeekday;
  if (__OFADD__(v6, referenceDayWeekday)) {
    goto LABEL_17;
  }
  if (*((unsigned char *)v4 + 128) != 1) {
    goto LABEL_10;
  }
  if (*((void *)v4 + 11))
  {
    uint64_t v3 = *((void *)v4 + 12);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 328);
    swift_unknownObjectRetain();
    v8(&v15, ObjectType, v3);
    LOBYTE(v3) = v15;
    if (one-time initialization token for weekdays != -1) {
      goto LABEL_18;
    }
    while (1)
    {
      int v4 = static Locale.Weekday.weekdays;
      swift_bridgeObjectRetain();
      uint64_t v3 = specialized Collection<>.firstIndex(of:)(v3, (uint64_t)v4);
      uint64_t v10 = v9;
      Swift::Double result = swift_bridgeObjectRelease();
      if (v10) {
        break;
      }
      swift_unknownObjectRelease();
      long long v12 = v3 + 1;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
LABEL_10:
        long long v12 = *((void *)v4 + 15);
      }
      uint64_t v13 = __OFSUB__(v5, v12);
      uint64_t v14 = v5 - v12;
      if (!v13) {
        return v14 % 7;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      swift_once();
    }
    __break(1u);
  }
  else
  {
    uint64_t v14 = v5 - 1;
    if (__OFSUB__(v5, 1)) {
      goto LABEL_15;
    }
    return v14 % 7;
  }
  return result;
}

uint64_t _CalendarGregorian.dayOfMonthConsideringGregorianCutover(_:inTimeZone:)(double *a1, double *a2, long long *a3)
{
  double v5 = *a2;
  uint64_t v6 = unk_1ECA3B4B8;
  if ((unk_1ECA3B4B8 & ~qword_1ECA3B4B0) == 0) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = qword_1ECA3B4C0;
  if ((qword_1ECA3B4C0 & ~(v6 | qword_1ECA3B4B0)) == 0) {
    uint64_t v7 = 0;
  }
  uint64_t v19 = v7 | v6 | qword_1ECA3B4B0;
  double v18 = v5;
  long long v17 = *a3;
  uint64_t result = (uint64_t)_CalendarGregorian.dateComponents(_:from:in:)(&v19, &v18, (uint64_t *)&v17, v20);
  if (v22 & 1) != 0 || (v24 & 1) != 0 || (v26) {
    goto LABEL_25;
  }
  Swift::Int v9 = year;
  uint64_t v10 = v25;
  Swift::Int v11 = _CalendarGregorian.numberOfDaysInMonth(_:year:)(_, year);
  uint64_t result = outlined release of DateComponents((uint64_t)v20);
  if (v9 == *(void *)(v3 + 64))
  {
    double v12 = *(double *)(v3 + 72);
    uint64_t v13 = v10;
    if (v5 >= v12)
    {
      uint64_t v13 = v10 - 10;
      if (__OFSUB__(v10, 10)) {
        goto LABEL_24;
      }
    }
    uint64_t v14 = v13 - 1;
    if (__OFSUB__(v13, 1))
    {
      __break(1u);
    }
    else if ((unsigned __int128)(v14 * (__int128)86400) >> 64 == (86400 * v14) >> 63)
    {
      double v15 = v5 - (double)(86400 * v14);
      *a1 = v15;
      if (v15 < v12 && v15 + (double)(86400 * (v11 - 10)) >= v12) {
        return v13;
      }
      return v10;
    }
    __break(1u);
  }
  else
  {
    uint64_t v16 = v10 - 1;
    if (!__OFSUB__(v10, 1))
    {
      if ((unsigned __int128)(v16 * (__int128)86400) >> 64 == (86400 * v16) >> 63)
      {
        *a1 = v5 - (double)(86400 * v16);
        return v10;
      }
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

void _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF(unsigned char *a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, _OWORD *a5@<X4>, double *a6@<X8>, Foundation::Date a7@<D0>)
{
  double v11 = *a2;
  if (!a3)
  {
LABEL_35:
    *a6 = v11;
    return;
  }
  uint64_t v12 = (uint64_t)&v250[16] + 8;
  uint64_t v13 = *a1;
  uint64_t v14 = unk_1ECA584F8;
  if ((unk_1ECA584F8 & ~qword_1ECA584F0) == 0) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = v14 | qword_1ECA584F0;
  uint64_t v16 = qword_1ECA58500;
  if ((qword_1ECA58500 & ~v15) == 0) {
    uint64_t v16 = 0;
  }
  uint64_t v17 = v16 | v15;
  if ((unk_1ECA58508 & ~v17) != 0) {
    uint64_t v18 = unk_1ECA58508;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = v18 | v17;
  uint64_t v20 = qword_1ECA58510;
  if ((qword_1ECA58510 & ~v19) == 0) {
    uint64_t v20 = 0;
  }
  uint64_t v21 = v20 | v19;
  if ((unk_1ECA58518 & ~v21) != 0) {
    uint64_t v22 = unk_1ECA58518;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = v22 | v21;
  uint64_t v25 = qword_1ECA58520;
  uint64_t v24 = unk_1ECA58528;
  if ((qword_1ECA58520 & ~v23) == 0) {
    uint64_t v25 = 0;
  }
  uint64_t v26 = v25 | v23;
  if ((unk_1ECA58528 & ~v26) == 0) {
    uint64_t v24 = 0;
  }
  uint64_t v27 = v24 | v26;
  uint64_t v28 = unk_1ECA58558;
  if ((unk_1ECA58558 & ~qword_1ECA58550) == 0) {
    uint64_t v28 = 0;
  }
  uint64_t v29 = v28 | qword_1ECA58550;
  uint64_t v30 = qword_1ECA58560;
  if ((qword_1ECA58560 & ~v29) == 0) {
    uint64_t v30 = 0;
  }
  uint64_t v31 = v30 | v29;
  if ((unk_1ECA58568 & ~v31) != 0) {
    uint64_t v32 = unk_1ECA58568;
  }
  else {
    uint64_t v32 = 0;
  }
  uint64_t v33 = v32 | v31;
  uint64_t v34 = qword_1ECA58570;
  if ((qword_1ECA58570 & ~v33) == 0) {
    uint64_t v34 = 0;
  }
  uint64_t v35 = v34 | v33;
  double v36 = *a4;
  double v37 = a4[1];
  if ((unk_1ECA58578 & ~v35) != 0) {
    uint64_t v38 = unk_1ECA58578;
  }
  else {
    uint64_t v38 = 0;
  }
  uint64_t v39 = v38 | v35;
  uint64_t v41 = qword_1ECA58580;
  uint64_t v40 = unk_1ECA58588;
  if ((qword_1ECA58580 & ~v39) == 0) {
    uint64_t v41 = 0;
  }
  uint64_t v42 = v41 | v39;
  if ((unk_1ECA58588 & ~v42) == 0) {
    uint64_t v40 = 0;
  }
  uint64_t v43 = v40 | v42;
  uint64_t v44 = 3600;
  Swift::Int v45 = 24;
  uint64_t v46 = a3;
  switch(*a1)
  {
    case 1:
      unint64_t v231 = (char *)&v249[16] + 8;
      unint64_t v232 = a5;
      unint64_t v233 = a6;
      *(void *)&long long v234 = v8;
      *(void *)&v248[0] = v27;
      *(double *)uint64_t v245 = v11;
      double v235 = v37;
      double v236 = v36;
      *(double *)unint64_t v249 = v36;
      *((double *)v249 + 1) = v37;
      uint64_t v237 = v7;
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v248, (double *)v245, (uint64_t *)v249, v250);
      if (BYTE8(v250[3])) {
        goto LABEL_375;
      }
      unint64_t v92 = *(void **)&v250[2];
      uint64_t v93 = v46;
      char v94 = BYTE8(v250[2]);
      double v95 = v235;
      uint64_t v96 = v231;
      if ((BYTE8(v250[2]) & 1) == 0)
      {
        uint64_t v93 = v46;
        if (!*(void *)&v250[2])
        {
          uint64_t v93 = -v46;
          if (__OFSUB__(0, v46)) {
            goto LABEL_344;
          }
        }
      }
      Swift::Int v45 = *(void *)&v250[3] + v93;
      if (__OFADD__(*(void *)&v250[3], v93)) {
        goto LABEL_329;
      }
      if (v45 < 1)
      {
        Swift::Int v45 = 1;
      }
      else if (v45 == 0x7FFFFFFFFFFFFFFFLL)
      {
        Swift::Int v45 = 0;
        int v97 = 1;
        goto LABEL_185;
      }
      int v97 = 0;
LABEL_185:
      uint64_t v159 = *(void *)&v250[5];
      char v160 = BYTE8(v250[5]);
      char v161 = BYTE8(v250[4]);
      uint64_t v162 = *(void *)&v250[4];
      if ((BYTE8(v250[5]) & 1) == 0 && (v97 & 1) == 0 && (BYTE8(v250[4]) & 1) == 0)
      {
        uint64_t v228 = *(void **)&v250[2];
        uint64_t v229 = v46;
        LODWORD(v230) = v97;
        char v163 = BYTE8(v250[5]);
        Swift::Int v164 = _CalendarGregorian.numberOfDaysInMonth(_:year:)(*(Swift::Int *)&v250[4], v45);
        char v160 = v163;
        unint64_t v92 = v228;
        uint64_t v46 = v229;
        uint64_t v96 = v231;
        double v95 = v235;
        if (v159 <= 1) {
          uint64_t v165 = 1;
        }
        else {
          uint64_t v165 = v159;
        }
        if (v164 >= v159) {
          uint64_t v159 = v165;
        }
        else {
          uint64_t v159 = v164;
        }
        LOBYTE(v97) = (_BYTE)v230;
      }
      *(void *)&v249[2] = v92;
      BYTE8(v249[2]) = v94;
      *(void *)&v249[3] = v45;
      BYTE8(v249[3]) = v97;
      *(void *)&v249[4] = v162;
      BYTE8(v249[4]) = v161;
      *(void *)&v249[5] = v159;
      BYTE8(v249[5]) = v160;
      *(void *)&v249[6] = *(void *)&v250[6];
      BYTE8(v249[6]) = BYTE8(v250[6]);
      *(void *)&v249[7] = *(void *)&v250[7];
      BYTE8(v249[7]) = BYTE8(v250[7]);
      *(void *)&v249[8] = *(void *)&v250[8];
      BYTE8(v249[8]) = BYTE8(v250[8]);
      *(void *)&v249[9] = *(void *)&v250[9];
      BYTE8(v249[9]) = BYTE8(v250[9]);
      *(void *)&v249[10] = *(void *)&v250[10];
      BYTE8(v249[10]) = BYTE8(v250[10]);
      *(void *)&v249[11] = *(void *)&v250[11];
      BYTE8(v249[11]) = BYTE8(v250[11]);
      *(void *)&v249[12] = *(void *)&v250[12];
      BYTE8(v249[12]) = BYTE8(v250[12]);
      *(void *)&v249[13] = *(void *)&v250[13];
      BYTE8(v249[13]) = BYTE8(v250[13]);
      *(void *)&v249[14] = *(void *)&v250[14];
      BYTE8(v249[14]) = BYTE8(v250[14]);
      *(void *)&v249[15] = *(void *)&v250[15];
      BYTE8(v249[15]) = BYTE8(v250[15]);
      *uint64_t v96 = BYTE8(v250[16]);
      v96[16] = BYTE8(v250[17]);
      *(void *)&v249[16] = *(void *)&v250[16];
      *(void *)&v249[17] = *(void *)&v250[17];
      BYTE9(v249[17]) = BYTE9(v250[17]);
      v249[0] = v250[0];
      v249[1] = v250[1];
      memcpy(v248, v249, 0x11AuLL);
      v243[0] = v236;
      v243[1] = v95;
      LOBYTE(v241) = 1;
      outlined retain of DateComponents((uint64_t)v249);
      _s10Foundation18_CalendarGregorianC4date4from10inTimeZone011dstRepeatedG6Policy0i7SkippedgK0AA4DateVAA0M10ComponentsV_AA0gH0VAN014DaylightSavinggK0OAPtAA0cB5ErrorOYKF(v248, (uint64_t)v243, (char *)&v241, (uint64_t)v245, (double *)v238);
      outlined release of DateComponents((uint64_t)v249);
      outlined release of DateComponents((uint64_t)v249);
      if (!(void)v234) {
        goto LABEL_221;
      }
      goto LABEL_308;
    case 2:
      unint64_t v231 = (char *)&v249[16] + 8;
      unint64_t v232 = a5;
      unint64_t v233 = a6;
      *(void *)&long long v234 = v8;
      *(void *)&v248[0] = v27;
      *(double *)uint64_t v245 = v11;
      double v235 = v37;
      double v236 = v36;
      *(double *)unint64_t v249 = v36;
      *((double *)v249 + 1) = v37;
      uint64_t v237 = v7;
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v248, (double *)v245, (uint64_t *)v249, v250);
      if (BYTE8(v250[4])) {
        goto LABEL_379;
      }
      uint64_t v120 = specialized _CalendarGregorian.add(amount:to:wrappingTo:)(v46, *(uint64_t *)&v250[4], 1, 13);
      uint64_t v121 = v120;
      if (v120 == 0x7FFFFFFFFFFFFFFFLL) {
        Swift::Int v122 = 0;
      }
      else {
        Swift::Int v122 = v120;
      }
      uint64_t v123 = *(void *)&v250[5];
      char v124 = BYTE8(v250[5]);
      if (v120 == 0x7FFFFFFFFFFFFFFFLL) {
        char v125 = 1;
      }
      else {
        char v125 = BYTE8(v250[5]);
      }
      char v126 = v125 ^ 1 | BYTE8(v250[3]);
      if ((v125 & 1) == 0 && (BYTE8(v250[3]) & 1) == 0)
      {
        Swift::Int v127 = _CalendarGregorian.numberOfDaysInMonth(_:year:)(v122, *(Swift::Int *)&v250[3]);
        char v126 = 0;
        if (v123 <= 1) {
          uint64_t v128 = 1;
        }
        else {
          uint64_t v128 = v123;
        }
        if (v127 >= v123) {
          uint64_t v123 = v128;
        }
        else {
          uint64_t v123 = v127;
        }
      }
      *(void *)&v249[2] = *(void *)&v250[2];
      BYTE8(v249[2]) = BYTE8(v250[2]);
      *(void *)&v249[3] = *(void *)&v250[3];
      BYTE8(v249[3]) = v126;
      *(void *)&v249[4] = v122;
      BYTE8(v249[4]) = v121 == 0x7FFFFFFFFFFFFFFFLL;
      *(void *)&v249[5] = v123;
      BYTE8(v249[5]) = v124;
      *(void *)&v249[6] = *(void *)&v250[6];
      BYTE8(v249[6]) = BYTE8(v250[6]);
      *(void *)&v249[7] = *(void *)&v250[7];
      BYTE8(v249[7]) = BYTE8(v250[7]);
      *(void *)&v249[8] = *(void *)&v250[8];
      BYTE8(v249[8]) = BYTE8(v250[8]);
      *(void *)&v249[9] = *(void *)&v250[9];
      BYTE8(v249[9]) = BYTE8(v250[9]);
      *(void *)&v249[10] = *(void *)&v250[10];
      BYTE8(v249[10]) = BYTE8(v250[10]);
      *(void *)&v249[11] = *(void *)&v250[11];
      BYTE8(v249[11]) = BYTE8(v250[11]);
      *(void *)&v249[12] = *(void *)&v250[12];
      BYTE8(v249[12]) = BYTE8(v250[12]);
      *(void *)&v249[13] = *(void *)&v250[13];
      BYTE8(v249[13]) = BYTE8(v250[13]);
      *(void *)&v249[14] = *(void *)&v250[14];
      BYTE8(v249[14]) = BYTE8(v250[14]);
      *(void *)&v249[15] = *(void *)&v250[15];
      BYTE8(v249[15]) = BYTE8(v250[15]);
      unint64_t v129 = v231;
      *unint64_t v231 = BYTE8(v250[16]);
      v129[16] = BYTE8(v250[17]);
      *(void *)&v249[16] = *(void *)&v250[16];
      *(void *)&v249[17] = *(void *)&v250[17];
      BYTE9(v249[17]) = BYTE9(v250[17]);
      v249[0] = v250[0];
      v249[1] = v250[1];
      memcpy(v248, v249, 0x11AuLL);
      v243[0] = v236;
      v243[1] = v235;
      LOBYTE(v241) = 0;
      goto LABEL_219;
    case 3:
      uint64_t v230 = (char *)&v248[16] + 8;
      unint64_t v231 = (char *)&v245[16] + 8;
      unint64_t v232 = a5;
      unint64_t v233 = a6;
      *(void *)&long long v234 = v8;
      *(double *)unint64_t v248 = v11;
      *(double *)unint64_t v250 = v36;
      *((double *)v250 + 1) = v37;
      *(double *)&uint64_t v13 = v36;
      uint64_t v44 = v7;
      _CalendarGregorian.dayOfMonthConsideringGregorianCutover(_:inTimeZone:)((double *)v249, (double *)v248, v250);
      if (v82)
      {
        uint64_t v83 = 86400 * v81;
        if ((unsigned __int128)(v81 * (__int128)86400) >> 64 == (86400 * v81) >> 63)
        {
          if ((unsigned __int128)(v46 * (__int128)86400) >> 64 == (86400 * v46) >> 63)
          {
            double v84 = *(double *)v249;
            double v85 = (double)v83;
            double v86 = remainder(v11 - *(double *)v249 + (double)(86400 * v46), (double)v83);
            double v87 = -0.0;
            if (v86 < 0.0) {
              double v87 = v85;
            }
            *unint64_t v233 = v84 + v86 + v87;
            return;
          }
        }
        else
        {
          __break(1u);
LABEL_343:
          __break(1u);
LABEL_344:
          __break(1u);
        }
        __break(1u);
LABEL_346:
        __break(1u);
LABEL_347:
        __break(1u);
        goto LABEL_348;
      }
      *(void *)&v245[0] = v27;
      v243[0] = v11;
      double v235 = v37;
      double v236 = *(double *)&v13;
      *(void *)&v248[0] = v13;
      *((double *)v248 + 1) = v37;
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v245, v243, (uint64_t *)v248, v249);
      *(void *)&v245[0] = 8;
      v243[0] = v11;
      v248[0] = *(_OWORD *)(v7 + 104);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v245, v243, (uint64_t *)v248, v250);
      swift_unknownObjectRelease();
      outlined release of DateComponents((uint64_t)v250);
      if (BYTE8(v250[5])) {
        goto LABEL_380;
      }
      uint64_t v140 = *(void *)&v250[5];
      LOBYTE(v245[0]) = 3;
      memcpy(v248, v249, 0x11AuLL);
      outlined retain of DateComponents((uint64_t)v248);
      uint64_t v141 = _CalendarGregorian.minMaxRange(of:in:)((unsigned __int8 *)v245, v249);
      uint64_t v13 = v142;
      char v144 = v143;
      outlined release of DateComponents((uint64_t)v248);
      if (v144) {
        goto LABEL_381;
      }
      uint64_t v145 = specialized _CalendarGregorian.add(amount:to:wrappingTo:)(v46, v140, v141, v13);
      *(void *)&v245[2] = *(void *)&v248[2];
      BYTE8(v245[2]) = BYTE8(v248[2]);
      *(void *)&v245[3] = *(void *)&v248[3];
      BYTE8(v245[3]) = BYTE8(v248[3]);
      *(void *)&v245[4] = *(void *)&v248[4];
      BYTE8(v245[4]) = BYTE8(v248[4]);
      if (v145 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v146 = 0;
      }
      else {
        uint64_t v146 = v145;
      }
      *(void *)&v245[5] = v146;
      BYTE8(v245[5]) = v145 == 0x7FFFFFFFFFFFFFFFLL;
      *(void *)&v245[6] = *(void *)&v248[6];
      BYTE8(v245[6]) = BYTE8(v248[6]);
      *(void *)&v245[7] = *(void *)&v248[7];
      BYTE8(v245[7]) = BYTE8(v248[7]);
      *(void *)&v245[8] = *(void *)&v248[8];
      BYTE8(v245[8]) = BYTE8(v248[8]);
      *(void *)&v245[9] = *(void *)&v248[9];
      BYTE8(v245[9]) = BYTE8(v248[9]);
      *(void *)&v245[10] = *(void *)&v248[10];
      BYTE8(v245[10]) = BYTE8(v248[10]);
      *(void *)&v245[11] = *(void *)&v248[11];
      BYTE8(v245[11]) = BYTE8(v248[11]);
      *(void *)&v245[12] = *(void *)&v248[12];
      BYTE8(v245[12]) = BYTE8(v248[12]);
      *(void *)&v245[13] = *(void *)&v248[13];
      BYTE8(v245[13]) = BYTE8(v248[13]);
      *(void *)&v245[14] = *(void *)&v248[14];
      BYTE8(v245[14]) = BYTE8(v248[14]);
      *(void *)&v245[15] = *(void *)&v248[15];
      BYTE8(v245[15]) = BYTE8(v248[15]);
      unint64_t v147 = v230;
      unint64_t v148 = v231;
      *unint64_t v231 = *v230;
      v148[16] = v147[16];
      *(void *)&v245[16] = *(void *)&v248[16];
      *(void *)&v245[17] = *(void *)&v248[17];
      BYTE9(v245[17]) = BYTE9(v248[17]);
      v245[0] = v248[0];
      v245[1] = v248[1];
      memcpy(v243, v245, 0x11AuLL);
      double v241 = v236;
      double v242 = v235;
      LOBYTE(v246) = 1;
      outlined retain of DateComponents((uint64_t)v245);
      _s10Foundation18_CalendarGregorianC4date4from10inTimeZone011dstRepeatedG6Policy0i7SkippedgK0AA4DateVAA0M10ComponentsV_AA0gH0VAN014DaylightSavinggK0OAPtAA0cB5ErrorOYKF(v243, (uint64_t)&v241, (char *)&v246, (uint64_t)v238, &v247);
      if (!(void)v234)
      {
        outlined release of DateComponents((uint64_t)v245);
        outlined release of DateComponents((uint64_t)v245);
        double v64 = v247;
        goto LABEL_222;
      }
      outlined release of DateComponents((uint64_t)v245);
      outlined release of DateComponents((uint64_t)v245);
      char v171 = v239;
      long long v172 = v238[0];
      long long v173 = v238[1];
      goto LABEL_309;
    case 4:
      goto LABEL_140;
    case 5:
      Swift::Int v45 = 60;
      uint64_t v44 = 60;
      goto LABEL_140;
    case 6:
      uint64_t v44 = 1;
      Swift::Int v45 = 60;
LABEL_140:
      uint64_t v12 = (uint64_t)a6;
      uint64_t v27 = v8;
      LOBYTE(v249[0]) = *a1;
      *(double *)unint64_t v250 = v11;
      Swift::Int v130 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v249, a7);
      uint64_t v131 = specialized _CalendarGregorian.add(amount:to:wrappingTo:)(v46, v130, 0, v45);
      Swift::Int v45 = v131;
      if (v131 >= v130 || v46 < 1)
      {
        Swift::Int v45 = v131 - v130;
        if (__OFSUB__(v131, v130)) {
          goto LABEL_322;
        }
        v9._Swift::Double time = 0.0;
        goto LABEL_210;
      }
      if ((v13 - 4) >= 3) {
        goto LABEL_386;
      }
      uint64_t v46 = (v13 - 1);
      LOBYTE(v249[0]) = v13;
      *(double *)unint64_t v250 = v11;
      v9._Swift::Double time = _CalendarGregorian.timeInDay(inSmallComponent:for:)((Foundation::Calendar::Component)v249, v132);
      LOBYTE(v248[0]) = v13 - 1;
      *(double *)unint64_t v249 = v11;
      _CalendarGregorian._firstInstant(of:at:)((Foundation::Calendar::Component)v248, v9);
      if (!v133)
      {
        double v11 = *(double *)v250;
        goto LABEL_210;
      }
      *(void *)&v249[0] = v133;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      if (!swift_dynamicCast())
      {

LABEL_386:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x181E0AC1CLL);
      }
      if ((SLOBYTE(v250[2]) & 0x80000000) == 0)
      {
        if (one-time initialization token for logger != -1) {
          goto LABEL_341;
        }
        goto LABEL_147;
      }
      if (one-time initialization token for logger != -1) {
        goto LABEL_349;
      }
      while (2)
      {
        uint64_t v174 = type metadata accessor for Logger();
        __swift_project_value_buffer(v174, (uint64_t)static _CalendarGregorian.logger);
        uint64_t v27 = Logger.logObject.getter();
        os_log_type_t v135 = static os_log_type_t.error.getter();
        if (os_log_type_enabled((os_log_t)v27, v135))
        {
          unint64_t v233 = (double *)v12;
          uint64_t v136 = swift_slowAlloc();
          uint64_t v237 = swift_slowAlloc();
          *(void *)&v248[0] = v237;
          *(_DWORD *)uint64_t v136 = 136446466;
          *(void *)&double v236 = v136 + 4;
          LOBYTE(v245[0]) = v46;
          uint64_t v175 = Calendar.Component.debugDescription.getter();
          *(void *)&v245[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v175, v176, (uint64_t *)v248);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v136 + 12) = 2050;
          *(double *)uint64_t v245 = v11;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v139 = "Not advancing in firstInstant(of:at:). unit: %{public}s, at: %{public}f";
          goto LABEL_208;
        }
        while (2)
        {

LABEL_210:
          if ((unsigned __int128)(v45 * (__int128)v44) >> 64 == (v45 * v44) >> 63)
          {
            *(double *)uint64_t v12 = v9._time + v11 + (double)(v45 * v44);
            return;
          }
          __break(1u);
LABEL_322:
          __break(1u);
LABEL_323:
          __break(1u);
LABEL_324:
          uint64_t v101 = swift_once();
LABEL_110:
          unint64_t v102 = (os_unfair_lock_s *)static TimeZoneCache.cache;
          MEMORY[0x1F4188790](v101);
          uint64_t v13 = (uint64_t)&v102[36];
          swift_retain_n();
          os_unfair_lock_lock(v102 + 36);
          partial apply for closure #1 in TimeZoneCache.offsetFixed(_:)((unint64_t)&v102[4], v249);
          if ((void)v234) {
            goto LABEL_383;
          }
          os_unfair_lock_unlock(v102 + 36);
          swift_release_n();
          if (!*(void *)&v249[0]) {
            goto LABEL_376;
          }
          v248[0] = v249[0];
          long long v234 = v249[0];
          _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)&v247, &v246, (uint64_t *)v248, v250);
          swift_unknownObjectRelease();
          memcpy(v249, v250, 0x11AuLL);
          uint64_t v103 = outlined release of DateComponents((uint64_t)v249);
          if (BYTE8(v249[11])) {
            goto LABEL_377;
          }
          uint64_t v228 = *(void **)&v249[11];
          v243[0] = v11;
          unint64_t v104 = (os_unfair_lock_s *)static TimeZoneCache.cache;
          MEMORY[0x1F4188790](v103);
          uint64_t v12 = (uint64_t)&v104[4];
          uint64_t v13 = (uint64_t)&v104[36];
          swift_retain_n();
          os_unfair_lock_lock(v104 + 36);
          closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v104[4], v248);
          *(void *)&long long v234 = 0;
          os_unfair_lock_unlock(v104 + 36);
          swift_release_n();
          if (!*(void *)&v248[0]) {
            goto LABEL_378;
          }
          long long v227 = v248[0];
          Swift::Int v45 = _CalendarGregorian.dayOfMonthConsideringGregorianCutover(_:inTimeZone:)((double *)v245, v243, v248);
          Swift::Int v106 = v105;
          uint64_t v44 = v107;
          swift_unknownObjectRelease();
          double v108 = *(double *)v245;
          uint64_t v109 = _CalendarGregorian.firstWeekday.getter();
          Swift::Int v110 = (Swift::Int)v228;
          if (__OFSUB__(v228, v109))
          {
LABEL_327:
            __break(1u);
LABEL_328:
            __break(1u);
LABEL_329:
            __break(1u);
LABEL_330:
            __break(1u);
LABEL_331:
            __break(1u);
LABEL_332:
            __break(1u);
LABEL_333:
            __break(1u);
LABEL_334:
            __break(1u);
LABEL_335:
            __break(1u);
LABEL_336:
            __break(1u);
LABEL_337:
            __break(1u);
LABEL_338:
            __break(1u);
            goto LABEL_339;
          }
          unint64_t v111 = (unint64_t)v228 + ((uint64_t)v228 - v109 < 0 ? 7uLL : 0) - v109;
          BOOL v54 = __OFSUB__(v111, v45);
          unint64_t v112 = v111 - v45;
          if (v54) {
            goto LABEL_332;
          }
          BOOL v54 = __OFADD__(v112, 1);
          int64_t v113 = v112 + 1;
          if (v54) {
            goto LABEL_335;
          }
          LODWORD(v227) = v44;
          uint64_t v114 = v113 % 7;
          if (v114 >= 0) {
            uint64_t v44 = v114;
          }
          else {
            uint64_t v44 = v114 + 7;
          }
          if (*(unsigned char *)(v237 + 144) == 1)
          {
            if (!*(void *)(v237 + 88)) {
              goto LABEL_164;
            }
            uint64_t v115 = *(void *)(v237 + 96);
            uint64_t ObjectType = swift_getObjectType();
            uint64_t v229 = v46;
            v226[1] = v115 + 344;
            uint64_t v117 = *(uint64_t (**)(uint64_t, uint64_t))(v115 + 344);
            swift_unknownObjectRetain();
            uint64_t v118 = v117(ObjectType, v115);
            uint64_t v46 = v229;
            uint64_t v119 = v118;
            swift_unknownObjectRelease();
            Swift::Int v110 = (Swift::Int)v228;
          }
          else
          {
            uint64_t v119 = *(void *)(v237 + 136);
          }
          if (7 - v44 < v119)
          {
            uint64_t v12 = 8;
            goto LABEL_165;
          }
LABEL_164:
          uint64_t v12 = 1;
LABEL_165:
          Swift::Int v150 = _CalendarGregorian.relativeWeekdayForLastDayOfPeriod(periodLength:referenceDayOfPeriod:referenceDayWeekday:)(v106, v45, v110);
          uint64_t v151 = v106 + 7 - v150;
          if (__OFADD__(v106, 7 - v150)) {
            goto LABEL_337;
          }
          if ((unsigned __int128)(v46 * (__int128)7) >> 64 != (7 * v46) >> 63)
          {
LABEL_339:
            __break(1u);
LABEL_340:
            __break(1u);
LABEL_341:
            swift_once();
LABEL_147:
            uint64_t v134 = type metadata accessor for Logger();
            __swift_project_value_buffer(v134, (uint64_t)static _CalendarGregorian.logger);
            uint64_t v27 = Logger.logObject.getter();
            os_log_type_t v135 = static os_log_type_t.error.getter();
            if (os_log_type_enabled((os_log_t)v27, v135))
            {
              unint64_t v233 = (double *)v12;
              uint64_t v136 = swift_slowAlloc();
              uint64_t v237 = swift_slowAlloc();
              *(void *)&v248[0] = v237;
              *(_DWORD *)uint64_t v136 = 136446466;
              *(void *)&double v236 = v136 + 4;
              LOBYTE(v245[0]) = v46;
              uint64_t v137 = Calendar.Component.debugDescription.getter();
              *(void *)&v245[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v137, v138, (uint64_t *)v248);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v136 + 12) = 2050;
              *(double *)uint64_t v245 = v11;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              uint64_t v139 = "Overflowing in firstInstant(of:at:). unit: %{public}s, at: %{public}f";
LABEL_208:
              _os_log_impl(&dword_181795000, (os_log_t)v27, v135, v139, (uint8_t *)v136, 0x16u);
              swift_arrayDestroy();
              MEMORY[0x185309510](v237, -1, -1);
              uint64_t v12 = (uint64_t)v233;
              MEMORY[0x185309510](v136, -1, -1);
              continue;
            }
            continue;
          }
          break;
        }
        if (v151 < v12 - v44) {
          goto LABEL_340;
        }
        uint64_t v152 = specialized _CalendarGregorian.add(amount:to:wrappingTo:)(7 * v46, v45, v12 - v44, v151);
        if (v152 > 0)
        {
          if (v106 >= v152) {
            uint64_t v44 = v152;
          }
          else {
            uint64_t v44 = v106;
          }
          if ((v227 & 1) == 0) {
            goto LABEL_198;
          }
LABEL_173:
          uint64_t v153 = v44 - 1;
          if (__OFSUB__(v44, 1)) {
            goto LABEL_347;
          }
          if ((unsigned __int128)(v153 * (__int128)86400) >> 64 == (86400 * v153) >> 63)
          {
            *unint64_t v233 = v108 + (double)(86400 * v153) - v9._time;
            return;
          }
LABEL_348:
          __break(1u);
LABEL_349:
          swift_once();
          continue;
        }
        break;
      }
      uint64_t v44 = 1;
      if (v227) {
        goto LABEL_173;
      }
LABEL_198:
      uint64_t v228 = v226;
      *(void *)&v243[0] = v27;
      *(double *)unint64_t v238 = v11;
      uint64_t v166 = (os_unfair_lock_s *)static TimeZoneCache.cache;
      MEMORY[0x1F4188790](v152);
      uint64_t v13 = (uint64_t)&v166[36];
      swift_retain_n();
      os_unfair_lock_lock(v166 + 36);
      uint64_t v167 = v234;
      closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v166[4], v245);
      if (v167) {
        goto LABEL_383;
      }
      os_unfair_lock_unlock(v166 + 36);
      swift_release_n();
      if (!*(void *)&v245[0])
      {
LABEL_382:
        __break(1u);
LABEL_383:
        os_unfair_lock_unlock((os_unfair_lock_t)v13);
        __break(1u);
        goto LABEL_386;
      }
      long long v234 = v245[0];
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v243, (double *)v238, (uint64_t *)v245, v248);
      swift_unknownObjectRelease();
      *(void *)&v245[2] = *(void *)&v248[2];
      BYTE8(v245[2]) = BYTE8(v248[2]);
      *(void *)&v245[3] = *(void *)&v248[3];
      BYTE8(v245[3]) = BYTE8(v248[3]);
      *(void *)&v245[4] = *(void *)&v248[4];
      BYTE8(v245[4]) = BYTE8(v248[4]);
      if (v44 == 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v168 = 0;
      }
      else {
        uint64_t v168 = v44;
      }
      *(void *)&v245[5] = v168;
      BYTE8(v245[5]) = v44 == 0x7FFFFFFFFFFFFFFFLL;
      *(void *)&v245[6] = *(void *)&v248[6];
      BYTE8(v245[6]) = BYTE8(v248[6]);
      *(void *)&v245[7] = *(void *)&v248[7];
      BYTE8(v245[7]) = BYTE8(v248[7]);
      *(void *)&v245[8] = *(void *)&v248[8];
      BYTE8(v245[8]) = BYTE8(v248[8]);
      *(void *)&v245[9] = *(void *)&v248[9];
      BYTE8(v245[9]) = BYTE8(v248[9]);
      *(void *)&v245[10] = *(void *)&v248[10];
      BYTE8(v245[10]) = BYTE8(v248[10]);
      *(void *)&v245[11] = *(void *)&v248[11];
      BYTE8(v245[11]) = BYTE8(v248[11]);
      *(void *)&v245[12] = *(void *)&v248[12];
      BYTE8(v245[12]) = BYTE8(v248[12]);
      *(void *)&v245[13] = *(void *)&v248[13];
      BYTE8(v245[13]) = BYTE8(v248[13]);
      *(void *)&v245[14] = *(void *)&v248[14];
      BYTE8(v245[14]) = BYTE8(v248[14]);
      *(void *)&v245[15] = *(void *)&v248[15];
      BYTE8(v245[15]) = BYTE8(v248[15]);
      unint64_t v169 = v230;
      unint64_t v170 = v231;
      *unint64_t v231 = *v230;
      v170[16] = v169[16];
      *(void *)&v245[16] = *(void *)&v248[16];
      *(void *)&v245[17] = *(void *)&v248[17];
      BYTE9(v245[17]) = BYTE9(v248[17]);
      v245[0] = v248[0];
      v245[1] = v248[1];
      memcpy(v243, v245, 0x11AuLL);
      double v241 = v236;
      double v242 = v235;
      char v240 = 1;
      outlined retain of DateComponents((uint64_t)v245);
      _s10Foundation18_CalendarGregorianC4date4from10inTimeZone011dstRepeatedG6Policy0i7SkippedgK0AA4DateVAA0M10ComponentsV_AA0gH0VAN014DaylightSavinggK0OAPtAA0cB5ErrorOYKF(v243, (uint64_t)&v241, &v240, (uint64_t)v238, &v244);
      outlined release of DateComponents((uint64_t)v245);
      outlined release of DateComponents((uint64_t)v245);
      double v64 = v244;
LABEL_222:
      uint64_t v12 = (uint64_t)v233;
LABEL_311:
      if (v46 >= 1)
      {
        *(double *)unint64_t v248 = v64;
        *(double *)unint64_t v249 = v236;
        *((double *)v249 + 1) = v235;
        _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)((double *)v248, (uint64_t)v249, (uint64_t)v250);
        if ((v250[1] & 1) == 0) {
          double v64 = v64 - *((double *)v250 + 1);
        }
      }
      *(double *)uint64_t v12 = v64;
      return;
    case 7:
      uint64_t v12 = (uint64_t)a6;
      double v235 = a4[1];
      double v236 = v36;
      uint64_t v44 = v8;
      LOBYTE(v249[0]) = 7;
      *(double *)unint64_t v250 = v11;
      Swift::Int v45 = _CalendarGregorian.dateComponent(_:from:)((Foundation::Calendar::Component)v249, a7);
      uint64_t v59 = _CalendarGregorian.firstWeekday.getter();
      uint64_t v60 = v45 - v59;
      if (__OFSUB__(v45, v59)) {
        goto LABEL_323;
      }
      uint64_t v61 = v60 + 7;
      if (v60 >= 0) {
        uint64_t v61 = v45 - v59;
      }
      if ((unsigned __int128)(v61 * (__int128)86400) >> 64 != (86400 * v61) >> 63) {
        goto LABEL_330;
      }
      if ((unsigned __int128)(v46 * (__int128)86400) >> 64 != (86400 * v46) >> 63) {
        goto LABEL_333;
      }
      double v62 = v11 - (double)(86400 * v61);
      double v63 = remainder(v11 + (double)(86400 * v46) - v62, 604800.0);
      if (v63 < 0.0) {
        double v63 = v63 + 604800.0;
      }
      double v64 = v62 + v63;
      goto LABEL_311;
    case 8:
      uint64_t v65 = a6;
      uint64_t v13 = v8;
      uint64_t v66 = unk_1ECA585B8;
      if ((unk_1ECA585B8 & ~qword_1ECA585B0) == 0) {
        uint64_t v66 = 0;
      }
      uint64_t v67 = qword_1ECA585C0;
      if ((qword_1ECA585C0 & ~(v66 | qword_1ECA585B0)) == 0) {
        uint64_t v67 = 0;
      }
      *(void *)&v248[0] = v67 | v66 | qword_1ECA585B0;
      *(double *)uint64_t v245 = v11;
      double v235 = v37;
      double v236 = v36;
      *(double *)unint64_t v249 = v36;
      *((double *)v249 + 1) = v37;
      uint64_t v12 = v7;
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v248, (double *)v245, (uint64_t *)v249, v250);
      if (BYTE8(v250[3]) & 1) != 0 || (BYTE8(v250[5]) & 1) != 0 || (BYTE8(v250[4])) {
        goto LABEL_371;
      }
      Swift::Int v45 = *(void *)&v250[5];
      uint64_t v44 = *(void *)&v250[5] - 1;
      if (__OFSUB__(*(void *)&v250[5], 1)) {
        goto LABEL_326;
      }
      Swift::Int v68 = _CalendarGregorian.numberOfDaysInMonth(_:year:)(*(Swift::Int *)&v250[4], *(Swift::Int *)&v250[3]);
      if (__OFSUB__(v68, v45)) {
        goto LABEL_331;
      }
      uint64_t v69 = 604800 * (v44 / 7);
      if ((unsigned __int128)(v44 / 7 * (__int128)604800) >> 64 != v69 >> 63) {
        goto LABEL_334;
      }
      if ((unsigned __int128)(v46 * (__int128)604800) >> 64 != (604800 * v46) >> 63) {
        goto LABEL_336;
      }
      uint64_t v70 = v44 / 7 + (v68 - v45) / 7 + 1;
      uint64_t v71 = 604800 * v70;
      if ((unsigned __int128)(v70 * (__int128)604800) >> 64 != (604800 * v70) >> 63) {
        goto LABEL_338;
      }
      double v72 = v11 - (double)v69;
      double v73 = (double)v71;
      double v74 = remainder(v11 + (double)(604800 * v46) - v72, (double)v71);
      outlined release of DateComponents((uint64_t)v250);
      double v75 = -0.0;
      if (v74 < 0.0) {
        double v75 = v73;
      }
      double v64 = v72 + v74 + v75;
      uint64_t v12 = (uint64_t)v65;
      goto LABEL_311;
    case 0xA:
      uint64_t v230 = (char *)&v248[16] + 8;
      unint64_t v231 = (char *)&v245[16] + 8;
      uint64_t v237 = v7;
      unint64_t v232 = a5;
      unint64_t v233 = a6;
      *(void *)&long long v234 = v8;
      double v98 = v36;
      uint64_t v99 = swift_getObjectType();
      *(double *)unint64_t v250 = v11;
      unint64_t v100 = *(uint64_t (**)(long long *, uint64_t, void))(*(void *)&v37 + 40);
      double v235 = v37;
      double v236 = v98;
      uint64_t v101 = v100(v250, v99, *(void *)&v37);
      v9._Swift::Double time = (double)v101;
      double v11 = v11 + (double)v101;
      double v247 = *(double *)&qword_1ECA585E8;
      double v246 = v11;
      if (one-time initialization token for cache == -1) {
        goto LABEL_110;
      }
      goto LABEL_324;
    case 0xB:
      uint64_t v230 = (char *)&v248[16] + 8;
      unint64_t v231 = (char *)&v249[16] + 8;
      unint64_t v232 = a5;
      unint64_t v233 = a6;
      *(void *)&long long v234 = v8;
      *(void *)&v248[0] = v43;
      *(double *)uint64_t v245 = v11;
      double v235 = v37;
      double v236 = v36;
      *(double *)unint64_t v249 = v36;
      *((double *)v249 + 1) = v37;
      uint64_t v237 = v7;
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v248, (double *)v245, (uint64_t *)v249, v250);
      if (BYTE8(v250[16]) & 1) != 0 || (BYTE8(v250[17]) & 1) != 0 || (BYTE8(v250[11])) {
        goto LABEL_370;
      }
      uint64_t v13 = *(uint64_t *)&v250[16];
      uint64_t v44 = *(void *)&v250[16] + v46;
      if (__OFADD__(*(void *)&v250[16], v46))
      {
        __break(1u);
LABEL_326:
        __break(1u);
        goto LABEL_327;
      }
      Swift::Int v47 = *(void *)&v250[11];
      uint64_t v228 = *(void **)&v250[17];
      if ((unint64_t)(v44 - 53) > 0xFFFFFFFFFFFFFFCBLL) {
        goto LABEL_306;
      }
      *(void *)&long long v227 = *(void *)&v250[11];
      uint64_t v48 = unk_1ECA58618;
      if ((unk_1ECA58618 & ~qword_1ECA58610) == 0) {
        uint64_t v48 = 0;
      }
      uint64_t v49 = qword_1ECA58620;
      if ((qword_1ECA58620 & ~(v48 | qword_1ECA58610)) == 0) {
        uint64_t v49 = 0;
      }
      *(void *)&v245[0] = v49 | v48 | qword_1ECA58610;
      v243[0] = v11;
      v248[0] = *(_OWORD *)(v237 + 104);
      Swift::Int v45 = *(void *)&v248[0];
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v245, v243, (uint64_t *)v248, v249);
      swift_unknownObjectRelease();
      if (BYTE8(v249[4]) & 1) != 0 || (BYTE8(v249[3]) & 1) != 0 || (BYTE8(v249[5])) {
        goto LABEL_373;
      }
      uint64_t v12 = *(void *)&v249[4];
      uint64_t v50 = *(void *)&v249[4] - 2;
      if (__OFSUB__(*(void *)&v249[4], 2)) {
        goto LABEL_346;
      }
      uint64_t v51 = *(void *)&v249[3];
      uint64_t v52 = *(void *)&v249[3] + 4716;
      if (__OFADD__(*(void *)&v249[3], 4716)) {
        goto LABEL_56;
      }
      if (__OFSUB__(12, v50))
      {
        __break(1u);
      }
      else
      {
        uint64_t v53 = (14 - *(void *)&v249[4]) / 12;
        BOOL v54 = __OFSUB__(v52, v53);
        uint64_t v55 = v52 - v53;
        if (!v54)
        {
          if (!__OFSUB__(v50, 1))
          {
            if (!__OFADD__(*(void *)&v249[4] - 3, 12))
            {
              if ((unsigned __int128)(v55 * (__int128)1461) >> 64 != (1461 * v55) >> 63)
              {
LABEL_56:
                v248[0] = xmmword_1821A0620;
                v248[1] = xmmword_18210C780;
                LOBYTE(v248[2]) = 1;
                lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
                swift_willThrowTypedImpl();
                outlined release of DateComponents((uint64_t)v249);
                double v56 = v232;
                *unint64_t v232 = xmmword_1821A0620;
                v56[1] = xmmword_18210C780;
                *((unsigned char *)v56 + 32) = 1;
                char v57 = BYTE9(v250[17]);
                v248[0] = v250[0];
                v248[1] = v250[1];
                *(void *)&v248[2] = *(void *)&v250[2];
                BYTE8(v248[2]) = BYTE8(v250[2]);
                *(void *)&v248[3] = *(void *)&v250[3];
                BYTE8(v248[3]) = BYTE8(v250[3]);
                *(void *)&v248[4] = *(void *)&v250[4];
                BYTE8(v248[4]) = BYTE8(v250[4]);
                *(void *)&v248[5] = *(void *)&v250[5];
                BYTE8(v248[5]) = BYTE8(v250[5]);
                *(void *)&v248[6] = *(void *)&v250[6];
                BYTE8(v248[6]) = BYTE8(v250[6]);
                *(void *)&v248[7] = *(void *)&v250[7];
                BYTE8(v248[7]) = BYTE8(v250[7]);
                *(void *)&v248[8] = *(void *)&v250[8];
                BYTE8(v248[8]) = BYTE8(v250[8]);
                *(void *)&v248[9] = *(void *)&v250[9];
                BYTE8(v248[9]) = BYTE8(v250[9]);
                *(void *)&v248[10] = *(void *)&v250[10];
                BYTE8(v248[10]) = BYTE8(v250[10]);
                *(void *)&v248[11] = v227;
                BYTE8(v248[11]) = 0;
                *(void *)&v248[12] = *(void *)&v250[12];
                BYTE8(v248[12]) = BYTE8(v250[12]);
                *(void *)&v248[13] = *(void *)&v250[13];
                BYTE8(v248[13]) = BYTE8(v250[13]);
                *(void *)&v248[14] = *(void *)&v250[14];
                BYTE8(v248[14]) = BYTE8(v250[14]);
                *(void *)&v248[15] = *(void *)&v250[15];
                BYTE8(v248[15]) = BYTE8(v250[15]);
                unint64_t v58 = v230;
                *uint64_t v230 = 0;
                *(void *)&v248[16] = v13;
                *(void *)&v248[17] = v228;
                v58[16] = 0;
                BYTE9(v248[17]) = v57;
                outlined release of DateComponents((uint64_t)v248);
                return;
              }
              uint64_t v186 = *(void *)&v249[5];
              uint64_t v187 = *(void *)&v249[5] + 1461 * v55 / 4;
              if (!__OFADD__(*(void *)&v249[5], 1461 * v55 / 4))
              {
                BOOL v54 = __OFSUB__(v187, 1);
                uint64_t v188 = v187 - 1;
                if (!v54)
                {
                  BOOL v54 = __OFSUB__(v188, 1401);
                  uint64_t v189 = v188 - 1401;
                  if (!v54)
                  {
                    int v190 = 26215 * (__int16)(153 * ((__int16)(LOWORD(v249[4]) + 9) % 12) + 2);
                    BOOL v54 = __OFADD__(v189, (int)((v190 >> 17) + (v190 >> 31)));
                    uint64_t v191 = v189 + (int)((v190 >> 17) + (v190 >> 31));
                    if (!v54)
                    {
                      uint64_t v192 = 3 * ((v55 + 184) / 100);
                      uint64_t v193 = v191 - v192 / 4;
                      if (!__OFSUB__(v191, v192 / 4))
                      {
                        uint64_t v230 = (unsigned char *)(v13 + v46);
                        uint64_t v194 = v193 + 38;
                        if (!__OFADD__(v193, 38))
                        {
                          uint64_t v195 = *(void *)(v237 + 64);
                          if (*(uint64_t *)&v249[3] >= v195)
                          {
                            if ((v249[3] & 3) != 0)
                            {
                              unint64_t v197 = &_s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKFTv4_r;
                              goto LABEL_247;
                            }
                            if (__ROR8__(0x8F5C28F5C28F5C29 * *(void *)&v249[3] + 0x51EB851EB851EB8, 2) >= 0x28F5C28F5C28F5DuLL)
                            {
                              unint64_t v197 = &_s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKFTv5_r;
                              goto LABEL_247;
                            }
                            uint64_t v196 = 400;
                          }
                          else
                          {
                            uint64_t v196 = 4;
                          }
                          if (*(void *)&v249[3] % v196) {
                            unint64_t v197 = &_s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKFTv4_r;
                          }
                          else {
                            unint64_t v197 = &_s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKFTv5_r;
                          }
LABEL_247:
                          unint64_t v198 = *(void *)&v249[4] - 1;
                          if (*(uint64_t *)&v249[4] >= 1)
                          {
                            uint64_t v229 = v46;
                            if (v198 < v197[2])
                            {
                              uint64_t v199 = v195;
                              uint64_t v200 = *(void *)(v237 + 56);
                              uint64_t v201 = v197[v198 + 4];
                              swift_bridgeObjectRelease();
                              Swift::Int v202 = v201 + v186;
                              if (!__OFADD__(v201, v186))
                              {
                                uint64_t v46 = v229;
                                if (v194 >= v200)
                                {
                                  BOOL v203 = v51 == v199;
                                  uint64_t v204 = v237;
                                  uint64_t v205 = (uint64_t)v228;
                                  if (!v203) {
                                    goto LABEL_258;
                                  }
                                  uint64_t v206 = v51 - 1;
                                  if (__OFSUB__(v51, 1))
                                  {
LABEL_366:
                                    __break(1u);
LABEL_367:
                                    __break(1u);
                                    goto LABEL_368;
                                  }
                                  uint64_t v207 = ((unsigned __int128)(v206 * (__int128)0x5C28F5C28F5C28F5) >> 64) - v206;
                                  uint64_t v208 = v206 / 400 + (v207 >> 6) + ((unint64_t)v207 >> 63) + 2;
                                  BOOL v54 = __OFADD__(v202, v208);
                                  v202 += v208;
                                  if (!v54)
                                  {
LABEL_258:
                                    if (v12 != 1)
                                    {
                                      Swift::Int v47 = v227;
                                      if (v13 != 1)
                                      {
                                        uint64_t v209 = *(void *)(v204 + 64);
                                        goto LABEL_286;
                                      }
                                      uint64_t v211 = v205 - 1;
                                      if (__OFSUB__(v205, 1))
                                      {
LABEL_368:
                                        __break(1u);
                                        goto LABEL_369;
                                      }
                                      uint64_t v209 = *(void *)(v204 + 64);
                                      if (v209 > v211)
                                      {
                                        uint64_t v212 = 4;
                                        goto LABEL_268;
                                      }
                                      if ((v211 & 3) != 0) {
                                        goto LABEL_276;
                                      }
LABEL_284:
                                      if (__ROR8__(0x8F5C28F5C28F5C29 * v211 + 0x51EB851EB851EB8, 2) >= 0x28F5C28F5C28F5DuLL) {
                                        goto LABEL_285;
                                      }
                                      uint64_t v212 = 400;
LABEL_268:
                                      if (!(v211 % v212))
                                      {
LABEL_285:
                                        BOOL v54 = __OFSUB__(v202, 366);
                                        v202 -= 366;
                                        if (v54)
                                        {
LABEL_369:
                                          __break(1u);
LABEL_370:
                                          __break(1u);
LABEL_371:
                                          __break(1u);
LABEL_372:
                                          __break(1u);
LABEL_373:
                                          __break(1u);
LABEL_374:
                                          __break(1u);
LABEL_375:
                                          __break(1u);
LABEL_376:
                                          __break(1u);
LABEL_377:
                                          __break(1u);
LABEL_378:
                                          __break(1u);
LABEL_379:
                                          __break(1u);
LABEL_380:
                                          __break(1u);
LABEL_381:
                                          __break(1u);
                                          goto LABEL_382;
                                        }
LABEL_286:
                                        if (v209 <= v205)
                                        {
                                          if ((v205 & 3) != 0) {
                                            goto LABEL_291;
                                          }
                                          if (__ROR8__(0x8F5C28F5C28F5C29 * v205 + 0x51EB851EB851EB8, 2) >= 0x28F5C28F5C28F5DuLL)
                                          {
LABEL_293:
                                            Swift::Int v214 = 366;
LABEL_294:
                                            Swift::Int v215 = _CalendarGregorian.relativeWeekdayForLastDayOfPeriod(periodLength:referenceDayOfPeriod:referenceDayWeekday:)(v214, v202, v47);
                                            if (*(unsigned char *)(v237 + 144) == 1)
                                            {
                                              if (!*(void *)(v237 + 88))
                                              {
                                                unint64_t v220 = v230;
                                                if (v215 > 5)
                                                {
LABEL_300:
                                                  Swift::Int v221 = _CalendarGregorian.weekNumber(desiredDay:dayOfPeriod:weekday:)(v214, v214, v215 + 1);
                                                  outlined release of DateComponents((uint64_t)v249);
                                                  unint64_t v222 = &v220[v221];
                                                  if (!__OFADD__(v220, v221))
                                                  {
                                                    BOOL v54 = __OFSUB__(v222, 1);
                                                    uint64_t v223 = (uint64_t)(v222 - 1);
                                                    if (!v54)
                                                    {
                                                      if (v221)
                                                      {
                                                        if (v223 != 0x8000000000000000 || v221 != -1)
                                                        {
                                                          uint64_t v44 = v223 % v221 + 1;
LABEL_306:
                                                          uint64_t v229 = v46;
                                                          uint64_t v230 = (unsigned char *)v44;
                                                          LODWORD(v227) = BYTE9(v250[17]);
                                                          v249[0] = v250[0];
                                                          v249[1] = v250[1];
                                                          *(void *)&v249[2] = *(void *)&v250[2];
                                                          BYTE8(v249[2]) = BYTE8(v250[2]);
                                                          *(void *)&v249[3] = *(void *)&v250[3];
                                                          BYTE8(v249[3]) = BYTE8(v250[3]);
                                                          *(void *)&v249[4] = *(void *)&v250[4];
                                                          BYTE8(v249[4]) = BYTE8(v250[4]);
                                                          *(void *)&v249[5] = *(void *)&v250[5];
                                                          BYTE8(v249[5]) = BYTE8(v250[5]);
                                                          *(void *)&v249[6] = *(void *)&v250[6];
                                                          BYTE8(v249[6]) = BYTE8(v250[6]);
                                                          *(void *)&v249[7] = *(void *)&v250[7];
                                                          BYTE8(v249[7]) = BYTE8(v250[7]);
                                                          *(void *)&v249[8] = *(void *)&v250[8];
                                                          BYTE8(v249[8]) = BYTE8(v250[8]);
                                                          *(void *)&v249[9] = *(void *)&v250[9];
                                                          BYTE8(v249[9]) = BYTE8(v250[9]);
                                                          *(void *)&v249[10] = *(void *)&v250[10];
                                                          BYTE8(v249[10]) = BYTE8(v250[10]);
                                                          *(void *)&v249[11] = v47;
                                                          BYTE8(v249[11]) = 0;
                                                          *(void *)&v249[12] = *(void *)&v250[12];
                                                          BYTE8(v249[12]) = BYTE8(v250[12]);
                                                          *(void *)&v249[13] = *(void *)&v250[13];
                                                          BYTE8(v249[13]) = BYTE8(v250[13]);
                                                          *(void *)&v249[14] = *(void *)&v250[14];
                                                          BYTE8(v249[14]) = BYTE8(v250[14]);
                                                          *(void *)&v249[15] = *(void *)&v250[15];
                                                          BYTE8(v249[15]) = BYTE8(v250[15]);
                                                          uint64_t v224 = v231;
                                                          *unint64_t v231 = 0;
                                                          *(void *)&v249[16] = v44;
                                                          *(void *)&v249[17] = v228;
                                                          v224[16] = 0;
                                                          BYTE9(v249[17]) = v227;
                                                          memcpy(v248, v249, 0x11AuLL);
                                                          v243[0] = v236;
                                                          v243[1] = v235;
                                                          LOBYTE(v241) = 1;
                                                          outlined retain of DateComponents((uint64_t)v249);
                                                          _s10Foundation18_CalendarGregorianC4date4from10inTimeZone011dstRepeatedG6Policy0i7SkippedgK0AA4DateVAA0M10ComponentsV_AA0gH0VAN014DaylightSavinggK0OAPtAA0cB5ErrorOYKF(v248, (uint64_t)v243, (char *)&v241, (uint64_t)v245, (double *)v238);
                                                          if ((void)v234) {
                                                            goto LABEL_307;
                                                          }
                                                          goto LABEL_310;
                                                        }
                                                        goto LABEL_367;
                                                      }
                                                      goto LABEL_365;
                                                    }
LABEL_364:
                                                    __break(1u);
LABEL_365:
                                                    __break(1u);
                                                    goto LABEL_366;
                                                  }
LABEL_363:
                                                  __break(1u);
                                                  goto LABEL_364;
                                                }
LABEL_299:
                                                v214 -= 7;
                                                goto LABEL_300;
                                              }
                                              uint64_t v216 = *(void *)(v237 + 96);
                                              *(void *)&long long v227 = v215;
                                              uint64_t v217 = swift_getObjectType();
                                              char v218 = *(uint64_t (**)(uint64_t, uint64_t))(v216 + 344);
                                              swift_unknownObjectRetain();
                                              uint64_t v219 = v218(v217, v216);
                                              uint64_t v46 = v229;
                                              uint64_t v13 = v219;
                                              swift_unknownObjectRelease();
                                              Swift::Int v215 = v227;
                                            }
                                            else
                                            {
                                              uint64_t v13 = *(uint64_t *)(v237 + 136);
                                            }
                                            unint64_t v220 = v230;
                                            if (6 - v215 < v13) {
                                              goto LABEL_300;
                                            }
                                            goto LABEL_299;
                                          }
                                          uint64_t v213 = 400;
                                        }
                                        else
                                        {
                                          uint64_t v213 = 4;
                                        }
                                        if (!(v205 % v213)) {
                                          goto LABEL_293;
                                        }
LABEL_291:
                                        Swift::Int v214 = 365;
                                        goto LABEL_294;
                                      }
LABEL_276:
                                      BOOL v54 = __OFSUB__(v202, 365);
                                      v202 -= 365;
                                      if (v54) {
                                        goto LABEL_369;
                                      }
                                      goto LABEL_286;
                                    }
                                    uint64_t v209 = *(void *)(v204 + 64);
                                    Swift::Int v47 = v227;
                                    if (v13 < 53) {
                                      goto LABEL_286;
                                    }
                                    if (v209 <= v205)
                                    {
                                      if ((v205 & 3) != 0) {
                                        goto LABEL_272;
                                      }
                                      if (__ROR8__(0x8F5C28F5C28F5C29 * v205 + 0x51EB851EB851EB8, 2) >= 0x28F5C28F5C28F5DuLL) {
                                        goto LABEL_281;
                                      }
                                      uint64_t v210 = 400;
                                    }
                                    else
                                    {
                                      uint64_t v210 = 4;
                                    }
                                    if (!(v205 % v210))
                                    {
LABEL_281:
                                      uint64_t v211 = 366;
                                      BOOL v54 = __OFADD__(v202, 366);
                                      v202 += 366;
                                      if (!v54) {
                                        goto LABEL_286;
                                      }
                                      goto LABEL_283;
                                    }
LABEL_272:
                                    uint64_t v211 = 365;
                                    BOOL v54 = __OFADD__(v202, 365);
                                    v202 += 365;
                                    if (!v54) {
                                      goto LABEL_286;
                                    }
LABEL_283:
                                    __break(1u);
                                    goto LABEL_284;
                                  }
                                  __break(1u);
                                }
                                uint64_t v204 = v237;
                                uint64_t v205 = (uint64_t)v228;
                                goto LABEL_258;
                              }
LABEL_362:
                              __break(1u);
                              goto LABEL_363;
                            }
LABEL_361:
                            __break(1u);
                            goto LABEL_362;
                          }
LABEL_360:
                          __break(1u);
                          goto LABEL_361;
                        }
LABEL_359:
                        __break(1u);
                        goto LABEL_360;
                      }
LABEL_358:
                      __break(1u);
                      goto LABEL_359;
                    }
LABEL_357:
                    __break(1u);
                    goto LABEL_358;
                  }
LABEL_356:
                  __break(1u);
                  goto LABEL_357;
                }
LABEL_355:
                __break(1u);
                goto LABEL_356;
              }
LABEL_354:
              __break(1u);
              goto LABEL_355;
            }
LABEL_353:
            __break(1u);
            goto LABEL_354;
          }
LABEL_352:
          __break(1u);
          goto LABEL_353;
        }
      }
      __break(1u);
      goto LABEL_352;
    case 0xC:
      unint64_t v231 = (char *)&v249[16] + 8;
      unint64_t v232 = a5;
      unint64_t v233 = a6;
      *(void *)&long long v234 = v8;
      *(void *)&v248[0] = v43;
      *(double *)uint64_t v245 = v11;
      double v235 = v37;
      double v236 = v36;
      *(double *)unint64_t v249 = v36;
      *((double *)v249 + 1) = v37;
      uint64_t v237 = v7;
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v248, (double *)v245, (uint64_t *)v249, v250);
      if (BYTE8(v250[17])) {
        goto LABEL_374;
      }
      uint64_t v76 = *(void *)&v250[2];
      uint64_t v77 = v46;
      char v78 = BYTE8(v250[2]);
      Swift::UInt64 v79 = v231;
      if ((BYTE8(v250[2]) & 1) == 0)
      {
        uint64_t v77 = v46;
        if (!*(void *)&v250[2])
        {
          uint64_t v77 = -v46;
          if (__OFSUB__(0, v46)) {
            goto LABEL_343;
          }
        }
      }
      uint64_t v44 = *(void *)&v250[17] + v77;
      if (__OFADD__(*(void *)&v250[17], v77)) {
        goto LABEL_328;
      }
      if (v44 < 1)
      {
        uint64_t v44 = 1;
      }
      else if (v44 == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v44 = 0;
        char v80 = 1;
        goto LABEL_178;
      }
      char v80 = 0;
LABEL_178:
      uint64_t v154 = *(void *)&v250[5];
      char v155 = BYTE8(v250[5]);
      uint64_t v156 = *(unsigned char **)&v250[4];
      char v157 = BYTE8(v250[5]) ^ 1 | BYTE8(v250[4]);
      if (BYTE8(v250[5]) & 1) != 0 || (BYTE8(v250[4]))
      {
        double v158 = v235;
      }
      else if (BYTE8(v250[3]))
      {
        char v157 = 0;
        double v158 = v235;
      }
      else
      {
        uint64_t v230 = *(unsigned char **)&v250[4];
        LODWORD(v228) = BYTE8(v250[2]);
        Swift::Int v177 = _CalendarGregorian.numberOfDaysInMonth(_:year:)(*(Swift::Int *)&v250[4], *(Swift::Int *)&v250[3]);
        char v78 = (char)v228;
        uint64_t v156 = v230;
        Swift::UInt64 v79 = v231;
        double v158 = v235;
        char v157 = 0;
        if (v154 <= 1) {
          uint64_t v178 = 1;
        }
        else {
          uint64_t v178 = v154;
        }
        if (v177 >= v154) {
          uint64_t v154 = v178;
        }
        else {
          uint64_t v154 = v177;
        }
      }
      *Swift::UInt64 v79 = BYTE8(v250[16]);
      v79[16] = v80;
      *(void *)&v249[2] = v76;
      BYTE8(v249[2]) = v78;
      *(void *)&v249[3] = *(void *)&v250[3];
      BYTE8(v249[3]) = BYTE8(v250[3]);
      *(void *)&v249[4] = v156;
      BYTE8(v249[4]) = v157;
      *(void *)&v249[5] = v154;
      BYTE8(v249[5]) = v155;
      *(void *)&v249[6] = *(void *)&v250[6];
      BYTE8(v249[6]) = BYTE8(v250[6]);
      *(void *)&v249[7] = *(void *)&v250[7];
      BYTE8(v249[7]) = BYTE8(v250[7]);
      *(void *)&v249[8] = *(void *)&v250[8];
      BYTE8(v249[8]) = BYTE8(v250[8]);
      *(void *)&v249[9] = *(void *)&v250[9];
      BYTE8(v249[9]) = BYTE8(v250[9]);
      *(void *)&v249[10] = *(void *)&v250[10];
      BYTE8(v249[10]) = BYTE8(v250[10]);
      *(void *)&v249[11] = *(void *)&v250[11];
      BYTE8(v249[11]) = BYTE8(v250[11]);
      *(void *)&v249[12] = *(void *)&v250[12];
      BYTE8(v249[12]) = BYTE8(v250[12]);
      *(void *)&v249[13] = *(void *)&v250[13];
      BYTE8(v249[13]) = BYTE8(v250[13]);
      *(void *)&v249[14] = *(void *)&v250[14];
      BYTE8(v249[14]) = BYTE8(v250[14]);
      *(void *)&v249[15] = *(void *)&v250[15];
      BYTE8(v249[15]) = BYTE8(v250[15]);
      *(void *)&v249[16] = *(void *)&v250[16];
      *(void *)&v249[17] = v44;
      BYTE9(v249[17]) = BYTE9(v250[17]);
      v249[0] = v250[0];
      v249[1] = v250[1];
      memcpy(v248, v249, 0x11AuLL);
      v243[0] = v236;
      v243[1] = v158;
      LOBYTE(v241) = 1;
LABEL_219:
      outlined retain of DateComponents((uint64_t)v249);
      _s10Foundation18_CalendarGregorianC4date4from10inTimeZone011dstRepeatedG6Policy0i7SkippedgK0AA4DateVAA0M10ComponentsV_AA0gH0VAN014DaylightSavinggK0OAPtAA0cB5ErrorOYKF(v248, (uint64_t)v243, (char *)&v241, (uint64_t)v245, (double *)v238);
      if ((void)v234) {
        goto LABEL_307;
      }
      outlined release of DateComponents((uint64_t)v249);
      outlined release of DateComponents((uint64_t)v249);
LABEL_221:
      double v64 = *(double *)v238;
      goto LABEL_222;
    case 0xD:
      *a6 = (double)a3 * 0.000000001 + v11;
      return;
    case 0x11:
      unint64_t v231 = (char *)&v249[16] + 8;
      unint64_t v232 = a5;
      unint64_t v88 = a6;
      *(void *)&long long v234 = v8;
      *(void *)&v248[0] = v27 | 0x40000;
      *(double *)uint64_t v245 = v11;
      double v235 = v37;
      double v236 = v36;
      *(double *)unint64_t v249 = v36;
      *((double *)v249 + 1) = v37;
      uint64_t v237 = v7;
      _CalendarGregorian.dateComponents(_:from:in:)((uint64_t *)v248, (double *)v245, (uint64_t *)v249, v250);
      if (BYTE8(v250[3]) & 1) != 0 || (BYTE8(v250[6])) {
        goto LABEL_372;
      }
      uint64_t v89 = *(void *)&v250[3];
      uint64_t v90 = *(void *)(v237 + 64);
      unint64_t v233 = v88;
      if (*(uint64_t *)&v250[3] >= v90)
      {
        if ((v250[3] & 3) != 0) {
          goto LABEL_160;
        }
        if (__ROR8__(0x8F5C28F5C28F5C29 * *(void *)&v250[3] + 0x51EB851EB851EB8, 2) >= 0x28F5C28F5C28F5DuLL) {
          goto LABEL_224;
        }
        uint64_t v91 = 400;
      }
      else
      {
        uint64_t v91 = 4;
      }
      if (!(*(void *)&v250[3] % v91))
      {
LABEL_224:
        uint64_t v149 = 367;
LABEL_225:
        uint64_t v179 = specialized _CalendarGregorian.add(amount:to:wrappingTo:)(v46, *(uint64_t *)&v250[6], 1, v149);
        char v180 = BYTE9(v250[17]);
        char v181 = BYTE8(v250[17]);
        if (v179 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v182 = 0;
        }
        else {
          uint64_t v182 = v179;
        }
        uint64_t v183 = *(void *)&v250[17];
        uint64_t v184 = *(void *)&v250[16];
        uint64_t v229 = v46;
        v249[0] = v250[0];
        v249[1] = v250[1];
        *(void *)&v249[2] = *(void *)&v250[2];
        BYTE8(v249[2]) = BYTE8(v250[2]);
        *(void *)&v249[3] = v89;
        BYTE8(v249[3]) = 0;
        *(void *)&v249[4] = 0;
        BYTE8(v249[4]) = 1;
        *(void *)&v249[5] = 0;
        BYTE8(v249[5]) = 1;
        *(void *)&v249[6] = v182;
        BYTE8(v249[6]) = v179 == 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&v249[7] = *(void *)&v250[7];
        BYTE8(v249[7]) = BYTE8(v250[7]);
        *(void *)&v249[8] = *(void *)&v250[8];
        BYTE8(v249[8]) = BYTE8(v250[8]);
        *(void *)&v249[9] = *(void *)&v250[9];
        BYTE8(v249[9]) = BYTE8(v250[9]);
        *(void *)&v249[10] = *(void *)&v250[10];
        BYTE8(v249[10]) = BYTE8(v250[10]);
        *(void *)&v249[11] = *(void *)&v250[11];
        BYTE8(v249[11]) = BYTE8(v250[11]);
        *(void *)&v249[12] = *(void *)&v250[12];
        BYTE8(v249[12]) = BYTE8(v250[12]);
        *(void *)&v249[13] = *(void *)&v250[13];
        BYTE8(v249[13]) = BYTE8(v250[13]);
        *(void *)&v249[14] = *(void *)&v250[14];
        BYTE8(v249[14]) = BYTE8(v250[14]);
        *(void *)&v249[15] = *(void *)&v250[15];
        BYTE8(v249[15]) = BYTE8(v250[15]);
        uint64_t v185 = v231;
        *unint64_t v231 = BYTE8(v250[16]);
        *(void *)&v249[16] = v184;
        *(void *)&v249[17] = v183;
        v185[16] = v181;
        BYTE9(v249[17]) = v180;
        memcpy(v248, v249, 0x11AuLL);
        v243[0] = v236;
        v243[1] = v235;
        LOBYTE(v241) = 0;
        outlined retain of DateComponents((uint64_t)v250);
        outlined retain of DateComponents((uint64_t)v249);
        _s10Foundation18_CalendarGregorianC4date4from10inTimeZone011dstRepeatedG6Policy0i7SkippedgK0AA4DateVAA0M10ComponentsV_AA0gH0VAN014DaylightSavinggK0OAPtAA0cB5ErrorOYKF(v248, (uint64_t)v243, (char *)&v241, (uint64_t)v245, (double *)v238);
        if ((void)v234)
        {
          outlined release of DateComponents((uint64_t)v250);
LABEL_307:
          outlined release of DateComponents((uint64_t)v249);
          outlined release of DateComponents((uint64_t)v249);
LABEL_308:
          char v171 = v245[2];
          long long v172 = v245[0];
          long long v173 = v245[1];
LABEL_309:
          unint64_t v225 = v232;
          *unint64_t v232 = v172;
          v225[1] = v173;
          *((unsigned char *)v225 + 32) = v171;
          return;
        }
        outlined release of DateComponents((uint64_t)v250);
LABEL_310:
        outlined release of DateComponents((uint64_t)v249);
        outlined release of DateComponents((uint64_t)v249);
        double v64 = *(double *)v238;
        uint64_t v12 = (uint64_t)v233;
        uint64_t v46 = v229;
        goto LABEL_311;
      }
LABEL_160:
      uint64_t v149 = 366;
      goto LABEL_225;
    default:
      goto LABEL_35;
  }
}

uint64_t _s10Foundation18_CalendarGregorianC4date19byAddingAndWrapping2toAA4DateVAA0J10ComponentsV_AHtAA0cB5ErrorOYKF@<X0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  char v10 = *(unsigned char *)(a1 + 56);
  uint64_t v43 = *(void *)(a1 + 64);
  char v46 = *(unsigned char *)(a1 + 72);
  uint64_t v45 = *(void *)(a1 + 208);
  double v11 = *a2;
  char v48 = *(unsigned char *)(a1 + 216);
  char v12 = *(unsigned char *)(a1 + 280);
  char v40 = *(unsigned char *)(a1 + 232);
  char v42 = *(unsigned char *)(a1 + 248);
  uint64_t v41 = *(void *)(a1 + 256);
  char v44 = *(unsigned char *)(a1 + 264);
  uint64_t v47 = *(void *)(a1 + 272);
  uint64_t v21 = *(void *)(a1 + 160);
  int v24 = *(unsigned __int8 *)(a1 + 168);
  uint64_t v23 = *(void *)(a1 + 144);
  char v26 = *(unsigned char *)(a1 + 152);
  uint64_t v25 = *(void *)(a1 + 128);
  char v28 = *(unsigned char *)(a1 + 136);
  uint64_t v27 = *(void *)(a1 + 112);
  char v30 = *(unsigned char *)(a1 + 120);
  uint64_t v29 = *(void *)(a1 + 176);
  char v32 = *(unsigned char *)(a1 + 184);
  uint64_t v31 = *(void *)(a1 + 96);
  char v34 = *(unsigned char *)(a1 + 104);
  uint64_t v33 = *(void *)(a1 + 80);
  char v37 = *(unsigned char *)(a1 + 88);
  uint64_t v35 = *(void *)(a1 + 192);
  uint64_t v36 = *(void *)(a1 + 224);
  char v39 = *(unsigned char *)(a1 + 200);
  uint64_t v38 = *(void *)(a1 + 240);
  if (*(void *)(a1 + 16))
  {
    uint64_t v13 = *(void *)(a1 + 24);
    uint64_t v14 = *(void *)(a1 + 16);
    if (*(unsigned char *)(a1 + 40)) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = *(void *)(v4 + 112);
    uint64_t v14 = *(void *)(v4 + 104);
    swift_unknownObjectRetain();
    if (v8)
    {
LABEL_3:
      swift_unknownObjectRetain();
      if (v10) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  char v55 = 0;
  double v54 = v11;
  uint64_t v52 = v14;
  uint64_t v53 = v13;
  swift_unknownObjectRetain();
  _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF(&v55, &v54, v7, (double *)&v52, v50, v56, v17);
  if (v6) {
    goto LABEL_51;
  }
  uint64_t v6 = 0;
  double v11 = v56[0];
  if (v10)
  {
LABEL_4:
    if (v12) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_13:
  char v55 = 1;
  double v54 = v11;
  uint64_t v52 = v14;
  uint64_t v53 = v13;
  _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF(&v55, &v54, v9, (double *)&v52, v50, v56, v15);
  if (v6) {
    goto LABEL_51;
  }
  uint64_t v6 = 0;
  double v11 = v56[0];
  if (v12)
  {
LABEL_5:
    if (v48) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_15:
  char v55 = 12;
  double v54 = v11;
  uint64_t v52 = v14;
  uint64_t v53 = v13;
  _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF(&v55, &v54, v47, (double *)&v52, v50, v56, v15);
  if (v6) {
    goto LABEL_51;
  }
  uint64_t v6 = 0;
  double v11 = v56[0];
  if (v48)
  {
LABEL_6:
    if (v46) {
      goto LABEL_7;
    }
LABEL_19:
    char v55 = 2;
    double v54 = v11;
    uint64_t v52 = v14;
    uint64_t v53 = v13;
    _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF(&v55, &v54, v43, (double *)&v52, v50, v56, v15);
    if (v6) {
      goto LABEL_51;
    }
    uint64_t v6 = 0;
    double v11 = v56[0];
    if (v44) {
      goto LABEL_8;
    }
LABEL_21:
    char v55 = 11;
    double v54 = v11;
    uint64_t v52 = v14;
    uint64_t v53 = v13;
    uint64_t v16 = v41;
    goto LABEL_22;
  }
LABEL_17:
  char v55 = 9;
  double v54 = v11;
  uint64_t v52 = v14;
  uint64_t v53 = v13;
  _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF(&v55, &v54, v45, (double *)&v52, v50, v56, v15);
  if (v6) {
    goto LABEL_51;
  }
  uint64_t v6 = 0;
  double v11 = v56[0];
  if ((v46 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_7:
  if ((v44 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_8:
  if (v40) {
    goto LABEL_24;
  }
  char v55 = 11;
  double v54 = v11;
  uint64_t v52 = v14;
  uint64_t v53 = v13;
  uint64_t v16 = v36;
LABEL_22:
  _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF(&v55, &v54, v16, (double *)&v52, v50, v56, v15);
  if (v6) {
    goto LABEL_51;
  }
  uint64_t v6 = 0;
  double v11 = v56[0];
LABEL_24:
  if ((v42 & 1) == 0)
  {
    char v55 = 10;
    double v54 = v11;
    uint64_t v52 = v14;
    uint64_t v53 = v13;
    _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF(&v55, &v54, v38, (double *)&v52, v50, v56, v15);
    if (v6) {
      goto LABEL_51;
    }
    uint64_t v6 = 0;
    double v11 = v56[0];
  }
  if ((v39 & 1) == 0)
  {
    char v55 = 8;
    double v54 = v11;
    uint64_t v52 = v14;
    uint64_t v53 = v13;
    _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF(&v55, &v54, v35, (double *)&v52, v50, v56, v15);
    if (v6) {
      goto LABEL_51;
    }
    uint64_t v6 = 0;
    double v11 = v56[0];
  }
  if ((v37 & 1) == 0)
  {
    char v55 = 3;
    double v54 = v11;
    uint64_t v52 = v14;
    uint64_t v53 = v13;
    _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF(&v55, &v54, v33, (double *)&v52, v50, v56, v15);
    if (v6) {
      goto LABEL_51;
    }
    uint64_t v6 = 0;
    double v11 = v56[0];
  }
  if ((v34 & 1) == 0)
  {
    char v55 = 17;
    double v54 = v11;
    uint64_t v52 = v14;
    uint64_t v53 = v13;
    _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF(&v55, &v54, v31, (double *)&v52, v50, v56, v15);
    if (v6) {
      goto LABEL_51;
    }
    uint64_t v6 = 0;
    double v11 = v56[0];
  }
  if ((v32 & 1) == 0)
  {
    char v55 = 7;
    double v54 = v11;
    uint64_t v52 = v14;
    uint64_t v53 = v13;
    _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF(&v55, &v54, v29, (double *)&v52, v50, v56, v15);
    if (v6) {
      goto LABEL_51;
    }
    uint64_t v6 = 0;
    double v11 = v56[0];
  }
  if ((v30 & 1) == 0)
  {
    char v55 = 4;
    double v54 = v11;
    uint64_t v52 = v14;
    uint64_t v53 = v13;
    _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF(&v55, &v54, v27, (double *)&v52, v50, v56, v15);
    if (v6) {
      goto LABEL_51;
    }
    uint64_t v6 = 0;
    double v11 = v56[0];
  }
  if ((v28 & 1) == 0)
  {
    char v55 = 5;
    double v54 = v11;
    uint64_t v52 = v14;
    uint64_t v53 = v13;
    _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF(&v55, &v54, v25, (double *)&v52, v50, v56, v15);
    if (v6) {
      goto LABEL_51;
    }
    uint64_t v6 = 0;
    double v11 = v56[0];
  }
  if (v26) {
    goto LABEL_48;
  }
  char v55 = 6;
  double v54 = v11;
  uint64_t v52 = v14;
  uint64_t v53 = v13;
  _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF(&v55, &v54, v23, (double *)&v52, v50, v56, v15);
  if (v6)
  {
LABEL_51:
    uint64_t result = swift_unknownObjectRelease();
    char v19 = v51;
    long long v20 = v50[1];
    *(_OWORD *)a3 = v50[0];
    *(_OWORD *)(a3 + 16) = v20;
    *(unsigned char *)(a3 + 32) = v19;
    return result;
  }
  uint64_t v6 = 0;
  double v11 = v56[0];
LABEL_48:
  if (v24)
  {
    uint64_t result = swift_unknownObjectRelease();
    *a4 = v11;
    return result;
  }
  char v55 = 13;
  double v54 = v11;
  uint64_t v52 = v14;
  uint64_t v53 = v13;
  _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF(&v55, &v54, v21, (double *)&v52, v50, v56, v15);
  if (v6) {
    goto LABEL_51;
  }
  uint64_t result = swift_unknownObjectRelease();
  *a4 = v56[0];
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _CalendarGregorian()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError()
{
  unint64_t result = lazy protocol witness table cache variable for type GregorianCalendarError and conformance GregorianCalendarError;
  if (!lazy protocol witness table cache variable for type GregorianCalendarError and conformance GregorianCalendarError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GregorianCalendarError and conformance GregorianCalendarError);
  }
  return result;
}

uint64_t specialized _CalendarGregorian.add(amount:to:wrappingTo:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!result) {
    return a2;
  }
  uint64_t v4 = a2 + result;
  if (__OFADD__(a2, result))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v5 = v4 - a3;
  if (__OFSUB__(v4, a3))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v5 == 0x8000000000000000 && v6 == -1) {
    goto LABEL_17;
  }
  uint64_t v7 = v5 % v6;
  if (v7 < 0)
  {
    BOOL v8 = __OFADD__(v7, v6);
    v7 += v6;
    if (v8) {
      goto LABEL_18;
    }
  }
  a2 = v7 + a3;
  if (!__OFADD__(v7, a3)) {
    return a2;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

double *specialized static Date.subsecondsOffsetInNanoScale(_:_:)(double *result, double *a2)
{
  double v2 = *result;
  if (*result == *a2) {
    return 0;
  }
  if (*result >= *a2) {
    double v3 = *result;
  }
  else {
    double v3 = *a2;
  }
  if (*result >= *a2) {
    double v2 = *a2;
  }
  double v4 = round((ceil(v2) - v2 + v3 - floor(v3)) * 1000000000.0);
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v4 < 9.22337204e18) {
    return (double *)(uint64_t)v4;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for ResolvedDateComponents(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7C && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 124);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 40) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 40) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7B) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ResolvedDateComponents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = a2 - 124;
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2)
    {
      *(void *)(result + 32) = 0;
      *(_OWORD *)unint64_t result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(unsigned char *)(result + 40) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for ResolvedDateComponents(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40) >> 5;
}

uint64_t destructiveProjectEnumData for ResolvedDateComponents(uint64_t result)
{
  *(unsigned char *)(result + 40) &= 0x1Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for ResolvedDateComponents(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = *(unsigned char *)(result + 40) & 1 | (32 * a2);
  return result;
}

ValueMetadata *type metadata accessor for ResolvedDateComponents()
{
  return &type metadata for ResolvedDateComponents;
}

uint64_t getEnumTagSinglePayload for GregorianCalendarError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 16) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for GregorianCalendarError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 2 * -a2;
      *(void *)(result + 24) = 0;
      *(unsigned char *)(result + 32) = 0;
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for GregorianCalendarError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32) >> 7;
}

uint64_t destructiveProjectEnumData for GregorianCalendarError(uint64_t result)
{
  *(unsigned char *)(result + 32) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for GregorianCalendarError(uint64_t result, char a2)
{
  char v2 = *(unsigned char *)(result + 32) & 1 | (a2 << 7);
  *(void *)(result + 16) &= 1uLL;
  *(unsigned char *)(result + 32) = v2;
  return result;
}

ValueMetadata *type metadata accessor for GregorianCalendarError()
{
  return &type metadata for GregorianCalendarError;
}

uint64_t PredicateExpressions.Filter.sequence.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.Filter.filter.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

uint64_t PredicateExpressions.Filter.variable.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(result + 64));
  return result;
}

uint64_t PredicateExpressions.Filter.init(_:_:)@<X0>(uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  v23[1] = a3;
  int v24 = a2;
  uint64_t v16 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v18 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for nextID != -1) {
    swift_once();
  }
  unint64_t add_explicit = atomic_fetch_add_explicit(&static PredicateExpressions.VariableID.nextID, 1uLL, memory_order_relaxed);
  v25[0] = a4;
  v25[1] = a5;
  _OWORD v25[2] = a6;
  v25[3] = a7;
  v25[4] = a8;
  uint64_t v20 = type metadata accessor for PredicateExpressions.Filter();
  *(void *)(a9 + *(int *)(v20 + 64)) = add_explicit;
  uint64_t v21 = *(void *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(a9, a1, a4);
  v25[0] = add_explicit;
  v24(v25);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a1, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a9 + *(int *)(v20 + 60), v18, a5);
}

uint64_t PredicateExpressions.Filter.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v6 = a2[4];
  uint64_t v7 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = *a1;
  uint64_t v15 = v16;
  BOOL v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  uint64_t v9 = v8(&v15, v7, v6);
  if (v3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    MEMORY[0x1F4188790](v9);
    uint64_t v10 = a2[3];
    *(&AssociatedTypeWitness - 8) = v7;
    *(&AssociatedTypeWitness - 7) = v10;
    uint64_t v12 = a2[5];
    uint64_t v11 = a2[6];
    *(&AssociatedTypeWitness - 6) = v6;
    *(&AssociatedTypeWitness - 5) = v12;
    *(&AssociatedTypeWitness - 4) = v11;
    *(&AssociatedTypeWitness - 3) = (uint64_t)&v16;
    *(&AssociatedTypeWitness - 2) = v2;
    uint64_t v2 = Sequence.filter(_:)();
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t closure #1 in PredicateExpressions.Filter.evaluate(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v25 = a1;
  uint64_t v24 = a5;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v24 - v17;
  v27[0] = a4;
  v27[1] = a5;
  void v27[2] = a6;
  v27[3] = a7;
  v27[4] = a8;
  uint64_t v19 = *(void *)(a3 + *(int *)(type metadata accessor for PredicateExpressions.Filter() + 64));
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v18, v25, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, AssociatedTypeWitness);
  v27[0] = v19;
  PredicateBindings.subscript.setter((uint64_t)v18, v27, AssociatedTypeWitness);
  v27[0] = *a2;
  uint64_t v21 = v26;
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(a7 + 16))(&v28, v27, v24, a7);
  if (!v21) {
    char v22 = v28;
  }
  return v22 & 1;
}

uint64_t partial apply for closure #1 in PredicateExpressions.Filter.evaluate(_:)(uint64_t a1)
{
  return closure #1 in PredicateExpressions.Filter.evaluate(_:)(a1, *(uint64_t **)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48)) & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Filter<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = PredicateExpressions.Filter.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t static PredicateExpressions.build_filter<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  uint64_t v27 = a3;
  uint64_t v28 = a2;
  uint64_t v29 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void (**)(char *, double))(v16 + 16);
  v21(v20, v18);
  if (one-time initialization token for nextID != -1) {
    swift_once();
  }
  unint64_t add_explicit = atomic_fetch_add_explicit(&static PredicateExpressions.VariableID.nextID, 1uLL, memory_order_relaxed);
  v30[0] = a4;
  v30[1] = a5;
  v30[2] = a6;
  _OWORD v30[3] = v25;
  v30[4] = v26;
  uint64_t v23 = type metadata accessor for PredicateExpressions.Filter();
  *(void *)(a9 + *(int *)(v23 + 64)) = add_explicit;
  ((void (*)(uint64_t, char *, uint64_t))v21)(a9, v20, a4);
  v30[0] = add_explicit;
  v28(v30);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v20, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(a9 + *(int *)(v23 + 60), v14, a5);
}

uint64_t PredicateExpressions.Filter.description.getter()
{
  _StringGuts.grow(_:)(46);
  v0._unint64_t object = (void *)0x80000001823B17A0;
  v0._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x626169726176202CLL;
  v1._unint64_t object = (void *)0xEC000000203A656CLL;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 41;
  v3._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = 0x656C626169726156;
  v4._unint64_t object = (void *)0xE900000000000028;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x7265746C6966202CLL;
  v5._unint64_t object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._uint64_t countAndFlagsBits = 41;
  v6._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t PredicateExpressions.Filter<>.encode(to:)(void *a1, uint64_t a2)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v3)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    uint64_t v8 = *(void *)(v2 + *(int *)(a2 + 64));
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v6, v7);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedTypeWitness();
    type metadata accessor for PredicateExpressions.Variable();
    swift_getWitnessTable();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t PredicateExpressions.Filter<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v40 = a4;
  uint64_t v33 = a6;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v36 = a5;
  uint64_t v37 = v9;
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v13);
  char v39 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42[0] = v15;
  v42[1] = v16;
  uint64_t v34 = v18;
  uint64_t v35 = v17;
  v42[2] = v17;
  uint64_t v43 = v19;
  uint64_t v44 = v18;
  uint64_t v20 = type metadata accessor for PredicateExpressions.Filter();
  uint64_t v32 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  char v22 = (char *)&v31 - v21;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v23 = v41;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v23) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v41 = a1;
  uint64_t v31 = v22;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v42, v43);
  uint64_t v24 = v39;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v31, v24, a2);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v42, v43);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v40 = v20;
  uint64_t v25 = *(int *)(v20 + 60);
  uint64_t v26 = v31;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&v31[v25], v11, a3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for PredicateExpressions.Variable();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v42, v43);
  swift_getWitnessTable();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v27 = (uint64_t)v41;
  uint64_t v28 = v40;
  *(void *)&v26[*(int *)(v40 + 64)] = v45;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  uint64_t v29 = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v33, v26, v28);
  __swift_destroy_boxed_opaque_existential_1(v27);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v26, v28);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Filter<A, B>(void *a1)
{
  a1[1] = swift_getWitnessTable();
  a1[2] = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  a1[3] = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Filter<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.Filter<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Filter<A, B>(void *a1, uint64_t a2)
{
  return PredicateExpressions.Filter<>.encode(to:)(a1, a2);
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.Filter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  Swift::String v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64) + 7;
  unint64_t v12 = ((v11 + ((v6 + v9) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v13 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *Swift::String v4 = *a2;
    Swift::String v4 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v18 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v17, v18, v7);
    *(void *)((v11 + (((unint64_t)v4 + v10) & v17)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v11 + v18) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for PredicateExpressions.Filter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  *(void *)((*(void *)(v9 + 48) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v9 + 48) + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.Filter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  *(void *)((*(void *)(v9 + 40) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v9 + 40) + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.Filter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  *(void *)((*(void *)(v9 + 32) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v9 + 32) + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.Filter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  *(void *)((*(void *)(v9 + 24) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v9 + 24) + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Filter(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  if (v10 < a2)
  {
    unint64_t v12 = ((*(void *)(*(void *)(v5 - 8) + 64) + (v11 & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v13 = a2 - v10;
    uint64_t v14 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = v13 + 1;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v12);
        if (!v17) {
          break;
        }
        goto LABEL_21;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v17) {
          goto LABEL_21;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x181E0CE04);
      case 4:
        int v17 = *(int *)((char *)a1 + v12);
        if (!v17) {
          break;
        }
LABEL_21:
        unsigned int v18 = v17 - 1;
        if (v14)
        {
          unsigned int v18 = 0;
          int v19 = *a1;
        }
        else
        {
          int v19 = 0;
        }
        return v10 + (v19 | v18) + 1;
      default:
        break;
    }
  }
  if (!v10) {
    return 0;
  }
  if (v6 >= v8) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
}

void storeEnumTagSinglePayload for PredicateExpressions.Filter(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = ((*(void *)(*(void *)(v8 - 8) + 64) + (v13 & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v12 >= a3)
  {
    int v18 = 0;
    int v19 = a2 - v12;
    if (a2 <= v12)
    {
LABEL_17:
      switch(v18)
      {
        case 1:
          a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_41;
        case 4:
          *(_DWORD *)&a1[v14] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 >= v10)
            {
              uint64_t v24 = *(void (**)(void))(v6 + 56);
              v24();
            }
            else
            {
              unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
              uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
              v23(v22);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v15 = a3 - v12;
    if (((*(_DWORD *)(*(void *)(v8 - 8) + 64) + (v13 & ~v11) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v18 = v17;
    }
    else {
      int v18 = 0;
    }
    int v19 = a2 - v12;
    if (a2 <= v12) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(v8 - 8) + 64) + (v13 & ~v11) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v20 = v19;
  }
  else {
    int v20 = 1;
  }
  if (((*(_DWORD *)(*(void *)(v8 - 8) + 64) + (v13 & ~v11) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v21 = ~v12 + a2;
    bzero(a1, v14);
    *(_DWORD *)a1 = v21;
  }
  switch(v18)
  {
    case 1:
      a1[v14] = v20;
      break;
    case 2:
      *(_WORD *)&a1[v14] = v20;
      break;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x181E0D078);
    case 4:
      *(_DWORD *)&a1[v14] = v20;
      break;
    default:
      return;
  }
}

Swift::String __swiftcall BinaryFloatingPoint.formatted()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FloatingPointFormatStyle();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v21 - v4);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = static LocaleCache.cache + 16;
  unsigned int v7 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v6, &v22);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  uint64_t v8 = v22;
  unint64_t v9 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating();
  unsigned int v10 = (char *)v5 + *(int *)(v2 + 36);
  *(void *)unsigned int v10 = 0;
  v10[8] = 1;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = 0;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 5) = 0x1FFFFFFFELL;
  *((void *)v10 + 7) = 0;
  *((void *)v10 + 8) = 0;
  *((void *)v10 + 6) = 0;
  *((_DWORD *)v10 + 18) = 131584;
  *((_WORD *)v10 + 38) = 512;
  uint64_t v11 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  unsigned int v12 = &v10[v11[9]];
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  size_t v14 = &v10[v11[10]];
  *(void *)size_t v14 = 0;
  v14[8] = -1;
  v10[v11[11]] = 3;
  *uint64_t v5 = v8;
  v5[1] = v9;
  uint64_t v15 = FloatingPointFormatStyle.format(_:)(v1, v2);
  int v17 = v16;
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v18 = v15;
  int v19 = v17;
  result._unint64_t object = v19;
  result._uint64_t countAndFlagsBits = v18;
  return result;
}

uint64_t BinaryFloatingPoint.formatted<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v19[1] = a5;
  void v19[2] = a6;
  v19[3] = a1;
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  double v15 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v17 = (char *)v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, v6, a2, v15);
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 48))(v17, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, AssociatedTypeWitness);
}

uint64_t BinaryFloatingPoint.init<A>(_:strategy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  _OWORD v25[2] = a7;
  v25[3] = a5;
  v25[0] = a8;
  v25[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  int v20 = (char *)v25 - v19;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(a6 + 48);
  uint64_t v26 = a1;
  v21(a1, a4, a6, v18);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
    uint64_t v22 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v26, v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v20, AssociatedTypeWitness);
    dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
    uint64_t v24 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v26, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v20, AssociatedTypeWitness);
  }
}

uint64_t BinaryFloatingPoint.init<A>(_:strategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 48))(a1, a4, a6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t BinaryFloatingPoint.init(_:format:lenient:)@<X0>(unint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return BinaryFloatingPoint.init(_:format:lenient:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle, a7, 0);
}

{
  return BinaryFloatingPoint.init(_:format:lenient:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle.Percent, a7, 1);
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  void (*v26)(long long *, uint64_t, uint64_t, double);
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(long long *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  long long v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  char v48 = a1;
  LODWORD(v46) = a4;
  uint64_t v50 = a3;
  uint64_t v45 = a2;
  uint64_t v40 = a7;
  uint64_t v47 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v47);
  uint64_t v43 = (uint64_t)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for FloatingPointFormatStyle.Currency();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (long long *)((char *)&v38 - v12);
  swift_getWitnessTable();
  uint64_t v41 = a6;
  uint64_t v14 = (int *)type metadata accessor for FloatingPointParseStrategy();
  uint64_t v44 = *((void *)v14 - 1);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v38 - v18;
  char v42 = a5;
  char v39 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v38 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v38 - v24;
  uint64_t v26 = *(void (**)(long long *, uint64_t, uint64_t, double))(v11 + 16);
  v26(v13, v50, v10, v23);
  ((void (*)(char *, long long *, uint64_t))v26)(v16, v13, v10);
  uint64_t v27 = v11;
  uint64_t v28 = v45;
  v16[v14[11]] = v46;
  uint64_t v29 = v14[13];
  char v46 = *v13;
  *(_OWORD *)&v16[v29] = v46;
  char v30 = v43;
  outlined init with copy of CurrencyFormatStyleConfiguration.Collection((uint64_t)v13 + *(int *)(v10 + 40), v43);
  uint64_t v31 = *(void (**)(long long *, uint64_t))(v27 + 8);
  swift_unknownObjectRetain();
  *(void *)&char v46 = v31;
  v31(v13, v10);
  swift_storeEnumTagMultiPayload();
  uint64_t v32 = v30;
  uint64_t v33 = v44;
  outlined init with take of NumberFormatStyleConfiguration.Collection(v32, (uint64_t)&v16[v14[12]], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  (*(void (**)(char *, char *, int *))(v33 + 32))(v19, v16, v14);
  uint64_t v34 = v49;
  FloatingPointParseStrategy.parse(_:)(v48, v28, (uint64_t)v14, (uint64_t)v25);
  if (v34)
  {
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v46)(v50, v10);
    return (*(uint64_t (**)(char *, int *))(v33 + 8))(v19, v14);
  }
  else
  {
    (*(void (**)(char *, int *))(v33 + 8))(v19, v14);
    swift_bridgeObjectRelease();
    uint64_t v36 = v39;
    uint64_t v37 = v42;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v38, v25, v42);
    dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
    ((void (*)(uint64_t, uint64_t))v46)(v50, v10);
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v25, v37);
  }
}

uint64_t BinaryFloatingPoint.init(_:format:lenient:)@<X0>(unint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>, int a9)
{
  unint64_t v40 = a1;
  uint64_t v37 = a2;
  uint64_t v34 = a8;
  int v38 = a4;
  int v39 = a9;
  uint64_t v12 = a7(0, a5, a6);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (_OWORD *)((char *)&v32 - v14);
  swift_getWitnessTable();
  uint64_t v35 = a6;
  uint64_t v16 = (int *)type metadata accessor for FloatingPointParseStrategy();
  uint64_t v17 = *((void *)v16 - 1);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v32 - v18;
  uint64_t v36 = a5;
  uint64_t v33 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v32 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v32 - v24;
  uint64_t v42 = v13;
  uint64_t v26 = *(void (**)(_OWORD *, uint64_t, uint64_t, double))(v13 + 16);
  uint64_t v43 = a3;
  v26(v15, a3, v12, v23);
  ((void (*)(char *, _OWORD *, uint64_t))v26)(v19, v15, v12);
  uint64_t v27 = v37;
  v19[v16[11]] = v38;
  *(_OWORD *)&v19[v16[13]] = *v15;
  outlined init with take of NumberFormatStyleConfiguration.Collection((uint64_t)v15 + *(int *)(v12 + 36), (uint64_t)&v19[v16[12]], type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = v41;
  FloatingPointParseStrategy.parse(_:)(v40, v27, (uint64_t)v16, (uint64_t)v25);
  if (v28)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v12);
    return (*(uint64_t (**)(char *, int *))(v17 + 8))(v19, v16);
  }
  else
  {
    (*(void (**)(char *, int *))(v17 + 8))(v19, v16);
    swift_bridgeObjectRelease();
    uint64_t v30 = v33;
    uint64_t v31 = v36;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v32, v25, v36);
    dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v25, v31);
  }
}

Foundation::Date_optional __swiftcall _TimeZoneBridged.nextDaylightSavingTimeTransition(after:)(Foundation::Date after)
{
  uint64_t v4 = v2;
  uint64_t v5 = *(void **)(v3 + 16);
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, *v1);
  id v7 = objc_msgSend(v5, sel_nextDaylightSavingTimeTransitionAfterDate_, v6);

  if (v7)
  {
    objc_msgSend(v7, sel_timeIntervalSinceReferenceDate);
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v11 = 0;
  }
  *(void *)uint64_t v4 = v11;
  *(unsigned char *)(v4 + 8) = v7 == 0;
  result.Swift::Int value = *(Foundation::Date *)&v9;
  result.is_nil = v8;
  return result;
}

id _TimeZoneBridged.localizedName(for:locale:)(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(v2 + 16);
  if (*a2)
  {
    uint64_t v5 = a2[1];
    uint64_t ObjectType = swift_getObjectType();
    id v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 488))(ObjectType, v5);
  }
  else
  {
    id v7 = 0;
  }
  id v8 = objc_msgSend(v4, sel_localizedName_locale_, a1, v7);

  if (!v8) {
    return 0;
  }
  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  return v9;
}

uint64_t type metadata accessor for _TimeZoneBridged()
{
  return self;
}

void protocol witness for _TimeZoneProtocol.init(secondsFromGMT:) in conformance _TimeZoneBridged()
{
}

void protocol witness for _TimeZoneProtocol.init(identifier:) in conformance _TimeZoneBridged()
{
}

id protocol witness for _TimeZoneProtocol.identifier.getter in conformance _TimeZoneBridged()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_name);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id protocol witness for _TimeZoneProtocol.secondsFromGMT(for:) in conformance _TimeZoneBridged(double *a1)
{
  id v2 = *(void **)(v1 + 16);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  id v4 = objc_msgSend(v2, sel_secondsFromGMTForDate_, v3);

  return v4;
}

double protocol witness for _TimeZoneProtocol.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:) in conformance _TimeZoneBridged(double *a1)
{
  double v2 = *a1;
  id v3 = *(void **)(v1 + 16);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  objc_msgSend(v3, sel_secondsFromGMTForDate_, v4);

  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v2);
  objc_msgSend(v3, sel_daylightSavingTimeOffsetForDate_, v5);
  double v7 = v6;

  return v7;
}

id protocol witness for _TimeZoneProtocol.abbreviation(for:) in conformance _TimeZoneBridged(double *a1)
{
  double v2 = *(void **)(v1 + 16);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  id v4 = objc_msgSend(v2, sel_abbreviationForDate_, v3);

  if (!v4) {
    return 0;
  }
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v5;
}

id protocol witness for _TimeZoneProtocol.isDaylightSavingTime(for:) in conformance _TimeZoneBridged(double *a1)
{
  double v2 = *(void **)(v1 + 16);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  id v4 = objc_msgSend(v2, sel_isDaylightSavingTimeForDate_, v3);

  return v4;
}

double protocol witness for _TimeZoneProtocol.daylightSavingTimeOffset(for:) in conformance _TimeZoneBridged(double *a1)
{
  double v2 = *(void **)(v1 + 16);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  objc_msgSend(v2, sel_daylightSavingTimeOffsetForDate_, v3);
  double v5 = v4;

  return v5;
}

uint64_t protocol witness for _TimeZoneProtocol.bridgeToNSTimeZone() in conformance _TimeZoneBridged()
{
  objc_msgSend(*(id *)(v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSTimeZone();
  swift_dynamicCast();
  return v2;
}

id protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _TimeZoneBridged()
{
  id v1 = objc_msgSend(*(id *)(*(void *)v0 + 16), sel_name);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

unint64_t instantiation function for generic protocol witness table for _TimeZoneBridged(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _TimeZoneBridged and conformance _TimeZoneBridged();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _TimeZoneBridged and conformance _TimeZoneBridged()
{
  unint64_t result = lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged;
  if (!lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged)
  {
    type metadata accessor for _TimeZoneBridged();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged);
  }
  return result;
}

unint64_t type metadata accessor for NSTimeZone()
{
  unint64_t result = lazy cache variable for type metadata for NSTimeZone;
  if (!lazy cache variable for type metadata for NSTimeZone)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSTimeZone);
  }
  return result;
}

unint64_t BinaryInteger.numericStringRepresentation.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  id v3 = (char *)&v8 - v2;
  dispatch thunk of BinaryInteger.words.getter();
  char v4 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v6 = numericStringRepresentationForBinaryInteger<A>(words:isSigned:)((uint64_t)v3, v4 & 1, AssociatedTypeWitness, *(void *)(*(void *)(AssociatedConformanceWitness + 8) + 8));
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v6;
}

unint64_t numericStringRepresentationForBinaryInteger<A>(words:isSigned:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  uint64_t isStackAllocationSafe = dispatch thunk of Collection.count.getter();
  if (isStackAllocationSafe < 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v9 = isStackAllocationSafe;
  if ((unint64_t)(isStackAllocationSafe + 0x1000000000000000) >> 61)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  if (8 * isStackAllocationSafe <= 1024
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v11 = (void *)((char *)v17 - v10);
    uint64_t v12 = specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a1, (uint64_t)v17 - v10, v9, a3, a4);
    if ((v12 & 0x8000000000000000) == 0) {
      return numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(v11, v12, a2 & 1);
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v14 = (void *)swift_slowAlloc();
  uint64_t v15 = specialized UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(a1, (uint64_t)v14, v9, a3, a4);
  if (v15 < 0) {
    goto LABEL_13;
  }
  unint64_t v16 = numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(v14, v15, a2 & 1);
  MEMORY[0x185309510](v14, -1, -1);
  return v16;
}

unint64_t numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(void *a1, uint64_t a2, char a3)
{
  unsigned int v3 = 0;
  void v17[2] = *MEMORY[0x1E4F143B8];
  v17[0] = a1;
  v17[1] = a2;
  if ((a3 & 1) != 0 && a2)
  {
    if ((a1[a2 - 1] & 0x8000000000000000) != 0)
    {
      if (a2 < 0) {
        goto LABEL_23;
      }
      char v4 = 1;
      uint64_t v5 = a2;
      do
      {
        uint64_t v6 = v4 & 1;
        uint64_t v7 = ~*a1;
        BOOL v8 = __CFADD__(v7, v6);
        uint64_t v9 = v7 + v6;
        char v4 = v8;
        *a1++ = v9;
        --v5;
      }
      while (v5);
      unsigned int v3 = 1;
    }
    else
    {
      unsigned int v3 = 0;
    }
  }
  if ((unint64_t)(a2 - 0x200000000000000) >> 58 != 63)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t isStackAllocationSafe = maxDecimalDigitCountForUnsignedInteger(bitWidth:)(a2 << 6);
  int64_t v11 = isStackAllocationSafe + v3;
  if (__OFADD__(isStackAllocationSafe, v3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v11 < 0)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  if (v11 <= 1024 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)((unint64_t)&v15 - v12, v11, (uint64_t)v17, v3, &v16);
    return v16;
  }
  else
  {
    unint64_t v14 = swift_slowAlloc();
    closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(v14, v11, (uint64_t)v17, v3, &v16);
    MEMORY[0x185309510](v14, -1, -1);
    return v16;
  }
}

uint64_t maxDecimalDigitCountForUnsignedInteger(bitWidth:)(uint64_t a1)
{
  if (a1 < 0) {
    goto LABEL_13;
  }
  double v1 = COERCE_DOUBLE(specialized Double.init<A>(exactly:)(a1));
  if (v2)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  double v3 = v1 * 0.301029996;
  if ((~COERCE__INT64(v1 * 0.301029996) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = (uint64_t)v3 + 1;
  if (__OFADD__((uint64_t)v3, 1))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

unint64_t closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)@<X0>(unint64_t __b@<X0>, int64_t __len@<X2>, uint64_t a3@<X3>, char a4@<W4>, unint64_t *a5@<X8>)
{
  unint64_t v8 = __b;
  if (__b && __len)
  {
    if (__len < 1) {
      goto LABEL_31;
    }
    memset((void *)__b, 48, __len);
  }
  __b = formQuotientWithRemainderForUnsignedInteger(words:dividingBy:)(*(void *)a3, *(void *)(a3 + 8), 0x8AC7230489E80000);
  uint64_t v11 = *(void *)(a3 + 8);
  if ((v11 & 0x8000000000000000) == 0)
  {
    int64_t v12 = __len;
    do
    {
      if (v11 && !*(void *)(*(void *)a3 + 8 * (v11 - 1)))
      {
        if (v11 == 1)
        {
          uint64_t v11 = 0;
        }
        else
        {
          uint64_t v13 = v11;
          while (!*(void *)(*(void *)a3 - 16 + 8 * v13))
          {
            if (--v13 == 1)
            {
              uint64_t v14 = 0;
              goto LABEL_16;
            }
          }
          uint64_t v14 = v13 - 1;
LABEL_16:
          BOOL v15 = v11 < v14;
          uint64_t v11 = v14;
          if (v15)
          {
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
            return __b;
          }
        }
      }
      *(void *)(a3 + 8) = v11;
      uint64_t v16 = v12;
      do
      {
        int64_t v10 = v16 - 1;
        if (v16 < 1)
        {
          __break(1u);
          goto LABEL_29;
        }
        *(unsigned char *)(v8 - 1 + v16--) = (__b % 0xA) | 0x30;
        BOOL v15 = __b > 9;
        __b /= 0xAuLL;
      }
      while (v15);
      if (!v11) {
        goto LABEL_23;
      }
      v12 -= 19;
      __b = formQuotientWithRemainderForUnsignedInteger(words:dividingBy:)(*(void *)a3, *(void *)(a3 + 8), 0x8AC7230489E80000);
      uint64_t v11 = *(void *)(a3 + 8);
    }
    while ((v11 & 0x8000000000000000) == 0);
  }
  __break(1u);
LABEL_23:
  if (a4)
  {
    if (!v10) {
      goto LABEL_32;
    }
    unint64_t v17 = v8 + v10--;
    *(unsigned char *)(v17 - 1) = 45;
  }
  __b = __len - v10;
  if (__len < v10) {
    goto LABEL_30;
  }
  MEMORY[0x1F4188790](__b);
  __b = String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
  *a5 = __b;
  a5[1] = v18;
  return __b;
}

uint64_t formQuotientWithRemainderForUnsignedInteger(words:dividingBy:)(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return a2;
  }
  if (a3)
  {
    uint64_t v4 = a2;
    a2 = 0;
    uint64_t v5 = result - 8;
    while (1)
    {
      uint64_t v6 = v4 - 1;
      if (v4 < 1) {
        break;
      }
      if (a2 >= a3) {
        goto LABEL_9;
      }
      uint64_t v7 = 8 * v4;
      uint64_t v8 = *(void *)(v5 + 8 * v4);
      uint64_t result = __udivti3();
      a2 = v8 - result * a3;
      *(void *)(v5 + v7) = result;
      uint64_t v4 = v6;
      if (!v6) {
        return a2;
      }
    }
    __break(1u);
LABEL_9:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #2 in closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(char *a1, int64_t a2, char *__src, int64_t __n)
{
  if (!__src || !__n) {
    return __n;
  }
  if (a2 < __n)
  {
    __break(1u);
  }
  else
  {
    if (!a1) {
      return __n;
    }
    if ((__n & 0x8000000000000000) == 0 && (&a1[__n] <= __src || &__src[__n] <= a1))
    {
      memcpy(a1, __src, __n);
      return __n;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #2 in closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(char *a1, int64_t a2)
{
  return closure #2 in closure #1 in numericStringRepresentationForMutableBinaryInteger(words:isSigned:)(a1, a2, *(char **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t specialized static Comparable.>= infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3 || a6)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a1 == a4 && a2 == a5) {
      char v6 = 1;
    }
    else {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
    }
    return v6 & 1;
  }
  return result;
}

BOOL specialized static Comparable.>= infix(_:_:)(double a1, double a2, double a3, double a4)
{
  BOOL v4 = a1 < a3;
  if (a3 >= a1 && a3 <= a1) {
    BOOL v4 = a2 < a4;
  }
  return !v4;
}

uint64_t _PlistKeyedEncodingContainerXML.codingPath.getter()
{
  return _CodingPathNode.path.getter(*(void *)(v0 + 32));
}

uint64_t _PlistKeyedEncodingContainerXML.encodeNil(forKey:)()
{
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v1 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(*(void *)v0 + 56);
  unint64_t v4 = *(void *)(*(void *)v0 + 64);
  char v5 = *(unsigned char *)(*(void *)v0 + 72);
  int v6 = *(unsigned __int8 *)(v0 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v2, v1, *(unsigned char *)(v0 + 24));
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
  uint64_t v7 = dispatch thunk of CodingKey.stringValue.getter();
  if (v6 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v9 = v7;
  unint64_t v10 = v8;
  outlined copy of _XMLPlistEncodingFormat.Reference(v2, v1, 7);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v55 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = 0x8000000000000000;
  uint64_t v54 = v9;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10, 0);
  uint64_t v14 = *(void *)(v55 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    if (*(void *)(v55 + 24) < v16)
    {
      char v17 = v12;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
      uint64_t v18 = v55;
      uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v10, 0);
      if ((v17 & 1) != (v20 & 1)) {
        goto LABEL_51;
      }
      unint64_t v13 = v19;
      if ((v17 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v21 = *(void *)(v18 + 56) + 24 * v13;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v21, *(void *)(v21 + 8), *(unsigned char *)(v21 + 16));
      *(void *)uint64_t v21 = v3;
      *(void *)(v21 + 8) = v4;
      *(unsigned char *)(v21 + 16) = v5;
LABEL_47:
      *(void *)(v2 + 16) = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v2, v1, 7);
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
      return outlined consume of _XMLPlistEncodingFormat.Reference(v2, v1, 7);
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v18 = v55;
      if (v12) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v13, v54, v10, 0, v3, v4, v5, (void *)v18);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  unint64_t v46 = v13;
  char v47 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v22 = static _DictionaryStorage.copy(original:)();
  uint64_t v18 = v22;
  if (!*(void *)(v55 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    unint64_t v13 = v46;
    if (v47) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
  double v23 = (char *)(v22 + 64);
  uint64_t v24 = (char *)(v55 + 64);
  unint64_t v25 = (unint64_t)((1 << *(unsigned char *)(v18 + 32)) + 63) >> 6;
  uint64_t v48 = v55 + 64;
  if (v18 != v55 || v23 >= &v24[8 * v25]) {
    memmove(v23, v24, 8 * v25);
  }
  int64_t v26 = 0;
  *(void *)(v18 + 16) = *(void *)(v55 + 16);
  uint64_t v27 = 1 << *(unsigned char *)(v55 + 32);
  uint64_t v28 = -1;
  if (v27 < 64) {
    uint64_t v28 = ~(-1 << v27);
  }
  unint64_t v29 = v28 & *(void *)(v55 + 64);
  int64_t v49 = (unint64_t)(v27 + 63) >> 6;
  while (1)
  {
    if (v29)
    {
      uint64_t v52 = (v29 - 1) & v29;
      int64_t v53 = v26;
      unint64_t v30 = __clz(__rbit64(v29)) | (v26 << 6);
      goto LABEL_19;
    }
    int64_t v41 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v41 >= v49) {
      goto LABEL_45;
    }
    unint64_t v42 = *(void *)(v48 + 8 * v41);
    int64_t v43 = v26 + 1;
    if (!v42)
    {
      int64_t v43 = v26 + 2;
      if (v26 + 2 >= v49) {
        goto LABEL_45;
      }
      unint64_t v42 = *(void *)(v48 + 8 * v43);
      if (!v42)
      {
        int64_t v43 = v26 + 3;
        if (v26 + 3 >= v49) {
          goto LABEL_45;
        }
        unint64_t v42 = *(void *)(v48 + 8 * v43);
        if (!v42)
        {
          int64_t v43 = v26 + 4;
          if (v26 + 4 >= v49) {
            goto LABEL_45;
          }
          unint64_t v42 = *(void *)(v48 + 8 * v43);
          if (!v42)
          {
            int64_t v43 = v26 + 5;
            if (v26 + 5 >= v49) {
              goto LABEL_45;
            }
            unint64_t v42 = *(void *)(v48 + 8 * v43);
            if (!v42)
            {
              int64_t v43 = v26 + 6;
              if (v26 + 6 >= v49) {
                goto LABEL_45;
              }
              unint64_t v42 = *(void *)(v48 + 8 * v43);
              if (!v42)
              {
                int64_t v43 = v26 + 7;
                if (v26 + 7 >= v49) {
                  goto LABEL_45;
                }
                unint64_t v42 = *(void *)(v48 + 8 * v43);
                if (!v42)
                {
                  int64_t v43 = v26 + 8;
                  if (v26 + 8 >= v49) {
                    goto LABEL_45;
                  }
                  unint64_t v42 = *(void *)(v48 + 8 * v43);
                  if (!v42) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    uint64_t v52 = (v42 - 1) & v42;
    int64_t v53 = v43;
    unint64_t v30 = __clz(__rbit64(v42)) + (v43 << 6);
LABEL_19:
    uint64_t v31 = 24 * v30;
    uint64_t v32 = *(void *)(v55 + 48) + v31;
    uint64_t v33 = *(void *)v32;
    unint64_t v34 = *(void *)(v32 + 8);
    uint64_t v35 = *(void *)(v55 + 56) + v31;
    uint64_t v50 = *(void *)v35;
    uint64_t v36 = *(void *)v35;
    unint64_t v51 = *(void *)(v35 + 8);
    uint64_t v37 = *(void *)(v18 + 48) + v31;
    char v38 = *(unsigned char *)(v32 + 16);
    char v39 = *(unsigned char *)(v35 + 16);
    *(void *)uint64_t v37 = *(void *)v32;
    *(void *)(v37 + 8) = v34;
    *(unsigned char *)(v37 + 16) = v38;
    uint64_t v40 = *(void *)(v18 + 56) + v31;
    *(void *)uint64_t v40 = v36;
    *(void *)(v40 + 8) = v51;
    *(unsigned char *)(v40 + 16) = v39;
    outlined copy of _XMLPlistEncodingFormat.Reference(v33, v34, v38);
    outlined copy of _XMLPlistEncodingFormat.Reference(v50, v51, v39);
    unint64_t v29 = v52;
    int64_t v26 = v53;
  }
  uint64_t v44 = v26 + 9;
  if (v26 + 9 >= v49) {
    goto LABEL_45;
  }
  unint64_t v42 = *(void *)(v48 + 8 * v44);
  if (v42)
  {
    int64_t v43 = v26 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v43 = v44 + 1;
    if (__OFADD__(v44, 1)) {
      break;
    }
    if (v43 >= v49) {
      goto LABEL_45;
    }
    unint64_t v42 = *(void *)(v48 + 8 * v43);
    ++v44;
    if (v42) {
      goto LABEL_44;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(char a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v2 = *(void *)(v1 + 16);
  unint64_t v4 = (uint64_t *)(*(void *)v1 + 80);
  char v5 = (char *)(*(void *)v1 + 120);
  if ((a1 & 1) == 0) {
    unint64_t v4 = (uint64_t *)(*(void *)v1 + 104);
  }
  uint64_t v6 = *v4;
  if (a1) {
    uint64_t v7 = (unint64_t *)(*(void *)v1 + 88);
  }
  else {
    uint64_t v7 = (unint64_t *)(*(void *)v1 + 112);
  }
  unint64_t v8 = *v7;
  if (a1) {
    char v5 = (char *)(*(void *)v1 + 96);
  }
  char v9 = *v5;
  int v10 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(*(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
  outlined copy of _XMLPlistEncodingFormat.Reference(v6, v8, v9);
  uint64_t v11 = dispatch thunk of CodingKey.stringValue.getter();
  if (v10 != 7)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v13 = v11;
  unint64_t v14 = v12;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v2, 7);
  outlined copy of _XMLPlistEncodingFormat.Reference(v6, v8, v9);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v59 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000;
  uint64_t v58 = v13;
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14, 0);
  uint64_t v18 = *(void *)(v59 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    if (*(void *)(v59 + 24) < v20)
    {
      char v21 = v16;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
      uint64_t v22 = v59;
      uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v58, v14, 0);
      if ((v21 & 1) != (v24 & 1)) {
        goto LABEL_58;
      }
      unint64_t v17 = v23;
      if ((v21 & 1) == 0) {
        goto LABEL_53;
      }
LABEL_16:
      uint64_t v25 = *(void *)(v22 + 56) + 24 * v17;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v25, *(void *)(v25 + 8), *(unsigned char *)(v25 + 16));
      *(void *)uint64_t v25 = v6;
      *(void *)(v25 + 8) = v8;
      *(unsigned char *)(v25 + 16) = v9;
LABEL_54:
      *(void *)(v3 + 16) = v22;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v2, 7);
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v6, v8, v9);
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v2, 7);
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v22 = v59;
      if (v16) {
        goto LABEL_16;
      }
LABEL_53:
      specialized _NativeDictionary._insert(at:key:value:)(v17, v58, v14, 0, v6, v8, v9, (void *)v22);
      swift_bridgeObjectRetain();
      goto LABEL_54;
    }
  }
  unint64_t v50 = v17;
  char v51 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v26 = static _DictionaryStorage.copy(original:)();
  uint64_t v22 = v26;
  if (!*(void *)(v59 + 16))
  {
LABEL_52:
    swift_bridgeObjectRelease();
    unint64_t v17 = v50;
    if (v51) {
      goto LABEL_16;
    }
    goto LABEL_53;
  }
  uint64_t v27 = (char *)(v26 + 64);
  uint64_t v28 = (char *)(v59 + 64);
  unint64_t v29 = (unint64_t)((1 << *(unsigned char *)(v22 + 32)) + 63) >> 6;
  uint64_t v52 = v59 + 64;
  if (v22 != v59 || v27 >= &v28[8 * v29]) {
    memmove(v27, v28, 8 * v29);
  }
  int64_t v30 = 0;
  *(void *)(v22 + 16) = *(void *)(v59 + 16);
  uint64_t v31 = 1 << *(unsigned char *)(v59 + 32);
  uint64_t v32 = -1;
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  unint64_t v33 = v32 & *(void *)(v59 + 64);
  int64_t v53 = (unint64_t)(v31 + 63) >> 6;
  while (1)
  {
    if (v33)
    {
      uint64_t v56 = (v33 - 1) & v33;
      int64_t v57 = v30;
      unint64_t v34 = __clz(__rbit64(v33)) | (v30 << 6);
      goto LABEL_26;
    }
    int64_t v45 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
      goto LABEL_56;
    }
    if (v45 >= v53) {
      goto LABEL_52;
    }
    unint64_t v46 = *(void *)(v52 + 8 * v45);
    int64_t v47 = v30 + 1;
    if (!v46)
    {
      int64_t v47 = v30 + 2;
      if (v30 + 2 >= v53) {
        goto LABEL_52;
      }
      unint64_t v46 = *(void *)(v52 + 8 * v47);
      if (!v46)
      {
        int64_t v47 = v30 + 3;
        if (v30 + 3 >= v53) {
          goto LABEL_52;
        }
        unint64_t v46 = *(void *)(v52 + 8 * v47);
        if (!v46)
        {
          int64_t v47 = v30 + 4;
          if (v30 + 4 >= v53) {
            goto LABEL_52;
          }
          unint64_t v46 = *(void *)(v52 + 8 * v47);
          if (!v46)
          {
            int64_t v47 = v30 + 5;
            if (v30 + 5 >= v53) {
              goto LABEL_52;
            }
            unint64_t v46 = *(void *)(v52 + 8 * v47);
            if (!v46)
            {
              int64_t v47 = v30 + 6;
              if (v30 + 6 >= v53) {
                goto LABEL_52;
              }
              unint64_t v46 = *(void *)(v52 + 8 * v47);
              if (!v46)
              {
                int64_t v47 = v30 + 7;
                if (v30 + 7 >= v53) {
                  goto LABEL_52;
                }
                unint64_t v46 = *(void *)(v52 + 8 * v47);
                if (!v46)
                {
                  int64_t v47 = v30 + 8;
                  if (v30 + 8 >= v53) {
                    goto LABEL_52;
                  }
                  unint64_t v46 = *(void *)(v52 + 8 * v47);
                  if (!v46) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_51:
    uint64_t v56 = (v46 - 1) & v46;
    int64_t v57 = v47;
    unint64_t v34 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_26:
    uint64_t v35 = 24 * v34;
    uint64_t v36 = *(void *)(v59 + 48) + v35;
    uint64_t v37 = *(void *)v36;
    unint64_t v38 = *(void *)(v36 + 8);
    uint64_t v39 = *(void *)(v59 + 56) + v35;
    uint64_t v54 = *(void *)v39;
    uint64_t v40 = *(void *)v39;
    unint64_t v55 = *(void *)(v39 + 8);
    uint64_t v41 = *(void *)(v22 + 48) + v35;
    char v42 = *(unsigned char *)(v36 + 16);
    char v43 = *(unsigned char *)(v39 + 16);
    *(void *)uint64_t v41 = *(void *)v36;
    *(void *)(v41 + 8) = v38;
    *(unsigned char *)(v41 + 16) = v42;
    uint64_t v44 = *(void *)(v22 + 56) + v35;
    *(void *)uint64_t v44 = v40;
    *(void *)(v44 + 8) = v55;
    *(unsigned char *)(v44 + 16) = v43;
    outlined copy of _XMLPlistEncodingFormat.Reference(v37, v38, v42);
    outlined copy of _XMLPlistEncodingFormat.Reference(v54, v55, v43);
    unint64_t v33 = v56;
    int64_t v30 = v57;
  }
  uint64_t v48 = v30 + 9;
  if (v30 + 9 >= v53) {
    goto LABEL_52;
  }
  unint64_t v46 = *(void *)(v52 + 8 * v48);
  if (v46)
  {
    int64_t v47 = v30 + 9;
    goto LABEL_51;
  }
  while (1)
  {
    int64_t v47 = v48 + 1;
    if (__OFADD__(v48, 1)) {
      break;
    }
    if (v47 >= v53) {
      goto LABEL_52;
    }
    unint64_t v46 = *(void *)(v52 + 8 * v47);
    ++v48;
    if (v46) {
      goto LABEL_51;
    }
  }
LABEL_57:
  __break(1u);
LABEL_58:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v51;

  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(unsigned char *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  unint64_t v8 = v6;
  char v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  unint64_t v14 = (v11 & 1) == 0;
  BOOL v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      char v16 = v51;
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      goto LABEL_8;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      char v16 = v51;
LABEL_8:
      if (v2)
      {
        BOOL v19 = *(void *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v19, *(void *)(v19 + 8), *(unsigned char *)(v19 + 16));
        *(void *)BOOL v19 = a1;
        *(void *)(v19 + 8) = 0;
        *(unsigned char *)(v19 + 16) = 2;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0, 2, (void *)v16);
        swift_bridgeObjectRetain();
      }
      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  char v21 = static _DictionaryStorage.copy(original:)();
  char v16 = v21;
  if (!*(void *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v22 = (char *)(v21 + 64);
  uint64_t v23 = (char *)(v51 + 64);
  char v24 = (unint64_t)((1 << *(unsigned char *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24]) {
    memmove(v22, v23, 8 * v24);
  }
  uint64_t v25 = 0;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v26 = 1 << *(unsigned char *)(v51 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  uint64_t v28 = v27 & *(void *)(v51 + 64);
  int64_t v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      uint64_t v48 = (v28 - 1) & v28;
      int64_t v49 = v25;
      unint64_t v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }
    uint64_t v40 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v40 >= v45) {
      goto LABEL_47;
    }
    uint64_t v41 = *(void *)(v44 + 8 * v40);
    char v42 = v25 + 1;
    if (!v41)
    {
      char v42 = v25 + 2;
      if (v25 + 2 >= v45) {
        goto LABEL_47;
      }
      uint64_t v41 = *(void *)(v44 + 8 * v42);
      if (!v41)
      {
        char v42 = v25 + 3;
        if (v25 + 3 >= v45) {
          goto LABEL_47;
        }
        uint64_t v41 = *(void *)(v44 + 8 * v42);
        if (!v41)
        {
          char v42 = v25 + 4;
          if (v25 + 4 >= v45) {
            goto LABEL_47;
          }
          uint64_t v41 = *(void *)(v44 + 8 * v42);
          if (!v41)
          {
            char v42 = v25 + 5;
            if (v25 + 5 >= v45) {
              goto LABEL_47;
            }
            uint64_t v41 = *(void *)(v44 + 8 * v42);
            if (!v41)
            {
              char v42 = v25 + 6;
              if (v25 + 6 >= v45) {
                goto LABEL_47;
              }
              uint64_t v41 = *(void *)(v44 + 8 * v42);
              if (!v41)
              {
                char v42 = v25 + 7;
                if (v25 + 7 >= v45) {
                  goto LABEL_47;
                }
                uint64_t v41 = *(void *)(v44 + 8 * v42);
                if (!v41)
                {
                  char v42 = v25 + 8;
                  if (v25 + 8 >= v45) {
                    goto LABEL_47;
                  }
                  uint64_t v41 = *(void *)(v44 + 8 * v42);
                  if (!v41) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_46:
    uint64_t v48 = (v41 - 1) & v41;
    int64_t v49 = v42;
    unint64_t v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    int64_t v30 = 24 * v29;
    uint64_t v31 = *(void *)(v51 + 48) + v30;
    uint64_t v32 = *(void *)v31;
    unint64_t v33 = *(void *)(v31 + 8);
    unint64_t v34 = *(void *)(v51 + 56) + v30;
    unint64_t v46 = *(void *)v34;
    uint64_t v35 = *(void *)v34;
    int64_t v47 = *(void *)(v34 + 8);
    uint64_t v36 = *(void *)(v16 + 48) + v30;
    uint64_t v37 = *(unsigned char *)(v31 + 16);
    unint64_t v38 = *(unsigned char *)(v34 + 16);
    *(void *)uint64_t v36 = *(void *)v31;
    *(void *)(v36 + 8) = v33;
    *(unsigned char *)(v36 + 16) = v37;
    uint64_t v39 = *(void *)(v16 + 56) + v30;
    *(void *)uint64_t v39 = v35;
    *(void *)(v39 + 8) = v47;
    *(unsigned char *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    uint64_t v28 = v48;
    uint64_t v25 = v49;
  }
  char v43 = v25 + 9;
  if (v25 + 9 >= v45) {
    goto LABEL_47;
  }
  uint64_t v41 = *(void *)(v44 + 8 * v43);
  if (v41)
  {
    char v42 = v25 + 9;
    goto LABEL_46;
  }
  while (1)
  {
    char v42 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v42 >= v45) {
      goto LABEL_47;
    }
    uint64_t v41 = *(void *)(v44 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_46;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(__int16 a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(unsigned char *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    char v2 = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v51;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      goto LABEL_8;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v16 = v51;
LABEL_8:
      if (v2)
      {
        uint64_t v19 = *(void *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v19, *(void *)(v19 + 8), *(unsigned char *)(v19 + 16));
        *(void *)uint64_t v19 = a1;
        *(void *)(v19 + 8) = 0;
        *(unsigned char *)(v19 + 16) = 2;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0, 2, (void *)v16);
        swift_bridgeObjectRetain();
      }
      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v21 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v21;
  if (!*(void *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v22 = (char *)(v21 + 64);
  uint64_t v23 = (char *)(v51 + 64);
  unint64_t v24 = (unint64_t)((1 << *(unsigned char *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24]) {
    memmove(v22, v23, 8 * v24);
  }
  int64_t v25 = 0;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v26 = 1 << *(unsigned char *)(v51 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & *(void *)(v51 + 64);
  int64_t v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      uint64_t v48 = (v28 - 1) & v28;
      int64_t v49 = v25;
      unint64_t v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }
    int64_t v40 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v40 >= v45) {
      goto LABEL_47;
    }
    unint64_t v41 = *(void *)(v44 + 8 * v40);
    int64_t v42 = v25 + 1;
    if (!v41)
    {
      int64_t v42 = v25 + 2;
      if (v25 + 2 >= v45) {
        goto LABEL_47;
      }
      unint64_t v41 = *(void *)(v44 + 8 * v42);
      if (!v41)
      {
        int64_t v42 = v25 + 3;
        if (v25 + 3 >= v45) {
          goto LABEL_47;
        }
        unint64_t v41 = *(void *)(v44 + 8 * v42);
        if (!v41)
        {
          int64_t v42 = v25 + 4;
          if (v25 + 4 >= v45) {
            goto LABEL_47;
          }
          unint64_t v41 = *(void *)(v44 + 8 * v42);
          if (!v41)
          {
            int64_t v42 = v25 + 5;
            if (v25 + 5 >= v45) {
              goto LABEL_47;
            }
            unint64_t v41 = *(void *)(v44 + 8 * v42);
            if (!v41)
            {
              int64_t v42 = v25 + 6;
              if (v25 + 6 >= v45) {
                goto LABEL_47;
              }
              unint64_t v41 = *(void *)(v44 + 8 * v42);
              if (!v41)
              {
                int64_t v42 = v25 + 7;
                if (v25 + 7 >= v45) {
                  goto LABEL_47;
                }
                unint64_t v41 = *(void *)(v44 + 8 * v42);
                if (!v41)
                {
                  int64_t v42 = v25 + 8;
                  if (v25 + 8 >= v45) {
                    goto LABEL_47;
                  }
                  unint64_t v41 = *(void *)(v44 + 8 * v42);
                  if (!v41) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_46:
    uint64_t v48 = (v41 - 1) & v41;
    int64_t v49 = v42;
    unint64_t v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    uint64_t v30 = 24 * v29;
    uint64_t v31 = *(void *)(v51 + 48) + v30;
    uint64_t v32 = *(void *)v31;
    unint64_t v33 = *(void *)(v31 + 8);
    uint64_t v34 = *(void *)(v51 + 56) + v30;
    uint64_t v46 = *(void *)v34;
    uint64_t v35 = *(void *)v34;
    unint64_t v47 = *(void *)(v34 + 8);
    uint64_t v36 = *(void *)(v16 + 48) + v30;
    char v37 = *(unsigned char *)(v31 + 16);
    char v38 = *(unsigned char *)(v34 + 16);
    *(void *)uint64_t v36 = *(void *)v31;
    *(void *)(v36 + 8) = v33;
    *(unsigned char *)(v36 + 16) = v37;
    uint64_t v39 = *(void *)(v16 + 56) + v30;
    *(void *)uint64_t v39 = v35;
    *(void *)(v39 + 8) = v47;
    *(unsigned char *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    unint64_t v28 = v48;
    int64_t v25 = v49;
  }
  uint64_t v43 = v25 + 9;
  if (v25 + 9 >= v45) {
    goto LABEL_47;
  }
  unint64_t v41 = *(void *)(v44 + 8 * v43);
  if (v41)
  {
    int64_t v42 = v25 + 9;
    goto LABEL_46;
  }
  while (1)
  {
    int64_t v42 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v42 >= v45) {
      goto LABEL_47;
    }
    unint64_t v41 = *(void *)(v44 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_46;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(int a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(unsigned char *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    char v2 = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v51;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      goto LABEL_8;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v16 = v51;
LABEL_8:
      if (v2)
      {
        uint64_t v19 = *(void *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v19, *(void *)(v19 + 8), *(unsigned char *)(v19 + 16));
        *(void *)uint64_t v19 = a1;
        *(void *)(v19 + 8) = 0;
        *(unsigned char *)(v19 + 16) = 2;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0, 2, (void *)v16);
        swift_bridgeObjectRetain();
      }
      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v21 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v21;
  if (!*(void *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v22 = (char *)(v21 + 64);
  uint64_t v23 = (char *)(v51 + 64);
  unint64_t v24 = (unint64_t)((1 << *(unsigned char *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24]) {
    memmove(v22, v23, 8 * v24);
  }
  int64_t v25 = 0;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v26 = 1 << *(unsigned char *)(v51 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & *(void *)(v51 + 64);
  int64_t v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      uint64_t v48 = (v28 - 1) & v28;
      int64_t v49 = v25;
      unint64_t v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }
    int64_t v40 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v40 >= v45) {
      goto LABEL_47;
    }
    unint64_t v41 = *(void *)(v44 + 8 * v40);
    int64_t v42 = v25 + 1;
    if (!v41)
    {
      int64_t v42 = v25 + 2;
      if (v25 + 2 >= v45) {
        goto LABEL_47;
      }
      unint64_t v41 = *(void *)(v44 + 8 * v42);
      if (!v41)
      {
        int64_t v42 = v25 + 3;
        if (v25 + 3 >= v45) {
          goto LABEL_47;
        }
        unint64_t v41 = *(void *)(v44 + 8 * v42);
        if (!v41)
        {
          int64_t v42 = v25 + 4;
          if (v25 + 4 >= v45) {
            goto LABEL_47;
          }
          unint64_t v41 = *(void *)(v44 + 8 * v42);
          if (!v41)
          {
            int64_t v42 = v25 + 5;
            if (v25 + 5 >= v45) {
              goto LABEL_47;
            }
            unint64_t v41 = *(void *)(v44 + 8 * v42);
            if (!v41)
            {
              int64_t v42 = v25 + 6;
              if (v25 + 6 >= v45) {
                goto LABEL_47;
              }
              unint64_t v41 = *(void *)(v44 + 8 * v42);
              if (!v41)
              {
                int64_t v42 = v25 + 7;
                if (v25 + 7 >= v45) {
                  goto LABEL_47;
                }
                unint64_t v41 = *(void *)(v44 + 8 * v42);
                if (!v41)
                {
                  int64_t v42 = v25 + 8;
                  if (v25 + 8 >= v45) {
                    goto LABEL_47;
                  }
                  unint64_t v41 = *(void *)(v44 + 8 * v42);
                  if (!v41) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_46:
    uint64_t v48 = (v41 - 1) & v41;
    int64_t v49 = v42;
    unint64_t v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    uint64_t v30 = 24 * v29;
    uint64_t v31 = *(void *)(v51 + 48) + v30;
    uint64_t v32 = *(void *)v31;
    unint64_t v33 = *(void *)(v31 + 8);
    uint64_t v34 = *(void *)(v51 + 56) + v30;
    uint64_t v46 = *(void *)v34;
    uint64_t v35 = *(void *)v34;
    unint64_t v47 = *(void *)(v34 + 8);
    uint64_t v36 = *(void *)(v16 + 48) + v30;
    char v37 = *(unsigned char *)(v31 + 16);
    char v38 = *(unsigned char *)(v34 + 16);
    *(void *)uint64_t v36 = *(void *)v31;
    *(void *)(v36 + 8) = v33;
    *(unsigned char *)(v36 + 16) = v37;
    uint64_t v39 = *(void *)(v16 + 56) + v30;
    *(void *)uint64_t v39 = v35;
    *(void *)(v39 + 8) = v47;
    *(unsigned char *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    unint64_t v28 = v48;
    int64_t v25 = v49;
  }
  uint64_t v43 = v25 + 9;
  if (v25 + 9 >= v45) {
    goto LABEL_47;
  }
  unint64_t v41 = *(void *)(v44 + 8 * v43);
  if (v41)
  {
    int64_t v42 = v25 + 9;
    goto LABEL_46;
  }
  while (1)
  {
    int64_t v42 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v42 >= v45) {
      goto LABEL_47;
    }
    unint64_t v41 = *(void *)(v44 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_46;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(unsigned __int8 a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(unsigned char *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    char v2 = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v51;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      goto LABEL_8;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v16 = v51;
LABEL_8:
      if (v2)
      {
        uint64_t v19 = *(void *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v19, *(void *)(v19 + 8), *(unsigned char *)(v19 + 16));
        *(void *)uint64_t v19 = a1;
        *(void *)(v19 + 8) = 0;
        *(unsigned char *)(v19 + 16) = 1;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0, 1, (void *)v16);
        swift_bridgeObjectRetain();
      }
      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v21 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v21;
  if (!*(void *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v22 = (char *)(v21 + 64);
  uint64_t v23 = (char *)(v51 + 64);
  unint64_t v24 = (unint64_t)((1 << *(unsigned char *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24]) {
    memmove(v22, v23, 8 * v24);
  }
  int64_t v25 = 0;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v26 = 1 << *(unsigned char *)(v51 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & *(void *)(v51 + 64);
  int64_t v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      uint64_t v48 = (v28 - 1) & v28;
      int64_t v49 = v25;
      unint64_t v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }
    int64_t v40 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v40 >= v45) {
      goto LABEL_47;
    }
    unint64_t v41 = *(void *)(v44 + 8 * v40);
    int64_t v42 = v25 + 1;
    if (!v41)
    {
      int64_t v42 = v25 + 2;
      if (v25 + 2 >= v45) {
        goto LABEL_47;
      }
      unint64_t v41 = *(void *)(v44 + 8 * v42);
      if (!v41)
      {
        int64_t v42 = v25 + 3;
        if (v25 + 3 >= v45) {
          goto LABEL_47;
        }
        unint64_t v41 = *(void *)(v44 + 8 * v42);
        if (!v41)
        {
          int64_t v42 = v25 + 4;
          if (v25 + 4 >= v45) {
            goto LABEL_47;
          }
          unint64_t v41 = *(void *)(v44 + 8 * v42);
          if (!v41)
          {
            int64_t v42 = v25 + 5;
            if (v25 + 5 >= v45) {
              goto LABEL_47;
            }
            unint64_t v41 = *(void *)(v44 + 8 * v42);
            if (!v41)
            {
              int64_t v42 = v25 + 6;
              if (v25 + 6 >= v45) {
                goto LABEL_47;
              }
              unint64_t v41 = *(void *)(v44 + 8 * v42);
              if (!v41)
              {
                int64_t v42 = v25 + 7;
                if (v25 + 7 >= v45) {
                  goto LABEL_47;
                }
                unint64_t v41 = *(void *)(v44 + 8 * v42);
                if (!v41)
                {
                  int64_t v42 = v25 + 8;
                  if (v25 + 8 >= v45) {
                    goto LABEL_47;
                  }
                  unint64_t v41 = *(void *)(v44 + 8 * v42);
                  if (!v41) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_46:
    uint64_t v48 = (v41 - 1) & v41;
    int64_t v49 = v42;
    unint64_t v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    uint64_t v30 = 24 * v29;
    uint64_t v31 = *(void *)(v51 + 48) + v30;
    uint64_t v32 = *(void *)v31;
    unint64_t v33 = *(void *)(v31 + 8);
    uint64_t v34 = *(void *)(v51 + 56) + v30;
    uint64_t v46 = *(void *)v34;
    uint64_t v35 = *(void *)v34;
    unint64_t v47 = *(void *)(v34 + 8);
    uint64_t v36 = *(void *)(v16 + 48) + v30;
    char v37 = *(unsigned char *)(v31 + 16);
    char v38 = *(unsigned char *)(v34 + 16);
    *(void *)uint64_t v36 = *(void *)v31;
    *(void *)(v36 + 8) = v33;
    *(unsigned char *)(v36 + 16) = v37;
    uint64_t v39 = *(void *)(v16 + 56) + v30;
    *(void *)uint64_t v39 = v35;
    *(void *)(v39 + 8) = v47;
    *(unsigned char *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    unint64_t v28 = v48;
    int64_t v25 = v49;
  }
  uint64_t v43 = v25 + 9;
  if (v25 + 9 >= v45) {
    goto LABEL_47;
  }
  unint64_t v41 = *(void *)(v44 + 8 * v43);
  if (v41)
  {
    int64_t v42 = v25 + 9;
    goto LABEL_46;
  }
  while (1)
  {
    int64_t v42 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v42 >= v45) {
      goto LABEL_47;
    }
    unint64_t v41 = *(void *)(v44 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_46;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(unsigned __int16 a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(unsigned char *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    char v2 = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v51;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      goto LABEL_8;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v16 = v51;
LABEL_8:
      if (v2)
      {
        uint64_t v19 = *(void *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v19, *(void *)(v19 + 8), *(unsigned char *)(v19 + 16));
        *(void *)uint64_t v19 = a1;
        *(void *)(v19 + 8) = 0;
        *(unsigned char *)(v19 + 16) = 1;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0, 1, (void *)v16);
        swift_bridgeObjectRetain();
      }
      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v21 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v21;
  if (!*(void *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v22 = (char *)(v21 + 64);
  uint64_t v23 = (char *)(v51 + 64);
  unint64_t v24 = (unint64_t)((1 << *(unsigned char *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24]) {
    memmove(v22, v23, 8 * v24);
  }
  int64_t v25 = 0;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v26 = 1 << *(unsigned char *)(v51 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & *(void *)(v51 + 64);
  int64_t v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      uint64_t v48 = (v28 - 1) & v28;
      int64_t v49 = v25;
      unint64_t v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }
    int64_t v40 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v40 >= v45) {
      goto LABEL_47;
    }
    unint64_t v41 = *(void *)(v44 + 8 * v40);
    int64_t v42 = v25 + 1;
    if (!v41)
    {
      int64_t v42 = v25 + 2;
      if (v25 + 2 >= v45) {
        goto LABEL_47;
      }
      unint64_t v41 = *(void *)(v44 + 8 * v42);
      if (!v41)
      {
        int64_t v42 = v25 + 3;
        if (v25 + 3 >= v45) {
          goto LABEL_47;
        }
        unint64_t v41 = *(void *)(v44 + 8 * v42);
        if (!v41)
        {
          int64_t v42 = v25 + 4;
          if (v25 + 4 >= v45) {
            goto LABEL_47;
          }
          unint64_t v41 = *(void *)(v44 + 8 * v42);
          if (!v41)
          {
            int64_t v42 = v25 + 5;
            if (v25 + 5 >= v45) {
              goto LABEL_47;
            }
            unint64_t v41 = *(void *)(v44 + 8 * v42);
            if (!v41)
            {
              int64_t v42 = v25 + 6;
              if (v25 + 6 >= v45) {
                goto LABEL_47;
              }
              unint64_t v41 = *(void *)(v44 + 8 * v42);
              if (!v41)
              {
                int64_t v42 = v25 + 7;
                if (v25 + 7 >= v45) {
                  goto LABEL_47;
                }
                unint64_t v41 = *(void *)(v44 + 8 * v42);
                if (!v41)
                {
                  int64_t v42 = v25 + 8;
                  if (v25 + 8 >= v45) {
                    goto LABEL_47;
                  }
                  unint64_t v41 = *(void *)(v44 + 8 * v42);
                  if (!v41) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_46:
    uint64_t v48 = (v41 - 1) & v41;
    int64_t v49 = v42;
    unint64_t v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    uint64_t v30 = 24 * v29;
    uint64_t v31 = *(void *)(v51 + 48) + v30;
    uint64_t v32 = *(void *)v31;
    unint64_t v33 = *(void *)(v31 + 8);
    uint64_t v34 = *(void *)(v51 + 56) + v30;
    uint64_t v46 = *(void *)v34;
    uint64_t v35 = *(void *)v34;
    unint64_t v47 = *(void *)(v34 + 8);
    uint64_t v36 = *(void *)(v16 + 48) + v30;
    char v37 = *(unsigned char *)(v31 + 16);
    char v38 = *(unsigned char *)(v34 + 16);
    *(void *)uint64_t v36 = *(void *)v31;
    *(void *)(v36 + 8) = v33;
    *(unsigned char *)(v36 + 16) = v37;
    uint64_t v39 = *(void *)(v16 + 56) + v30;
    *(void *)uint64_t v39 = v35;
    *(void *)(v39 + 8) = v47;
    *(unsigned char *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    unint64_t v28 = v48;
    int64_t v25 = v49;
  }
  uint64_t v43 = v25 + 9;
  if (v25 + 9 >= v45) {
    goto LABEL_47;
  }
  unint64_t v41 = *(void *)(v44 + 8 * v43);
  if (v41)
  {
    int64_t v42 = v25 + 9;
    goto LABEL_46;
  }
  while (1)
  {
    int64_t v42 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v42 >= v45) {
      goto LABEL_47;
    }
    unint64_t v41 = *(void *)(v44 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_46;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(unsigned int a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(unsigned char *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    char v2 = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v51;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v2 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      goto LABEL_8;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v16 = v51;
LABEL_8:
      if (v2)
      {
        uint64_t v19 = *(void *)(v16 + 56) + 24 * v12;
        outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v19, *(void *)(v19 + 8), *(unsigned char *)(v19 + 16));
        *(void *)uint64_t v19 = a1;
        *(void *)(v19 + 8) = 0;
        *(unsigned char *)(v19 + 16) = 1;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, a1, 0, 1, (void *)v16);
        swift_bridgeObjectRetain();
      }
      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v21 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v21;
  if (!*(void *)(v51 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v22 = (char *)(v21 + 64);
  uint64_t v23 = (char *)(v51 + 64);
  unint64_t v24 = (unint64_t)((1 << *(unsigned char *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24]) {
    memmove(v22, v23, 8 * v24);
  }
  int64_t v25 = 0;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v26 = 1 << *(unsigned char *)(v51 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & *(void *)(v51 + 64);
  int64_t v45 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      uint64_t v48 = (v28 - 1) & v28;
      int64_t v49 = v25;
      unint64_t v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_21;
    }
    int64_t v40 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v40 >= v45) {
      goto LABEL_47;
    }
    unint64_t v41 = *(void *)(v44 + 8 * v40);
    int64_t v42 = v25 + 1;
    if (!v41)
    {
      int64_t v42 = v25 + 2;
      if (v25 + 2 >= v45) {
        goto LABEL_47;
      }
      unint64_t v41 = *(void *)(v44 + 8 * v42);
      if (!v41)
      {
        int64_t v42 = v25 + 3;
        if (v25 + 3 >= v45) {
          goto LABEL_47;
        }
        unint64_t v41 = *(void *)(v44 + 8 * v42);
        if (!v41)
        {
          int64_t v42 = v25 + 4;
          if (v25 + 4 >= v45) {
            goto LABEL_47;
          }
          unint64_t v41 = *(void *)(v44 + 8 * v42);
          if (!v41)
          {
            int64_t v42 = v25 + 5;
            if (v25 + 5 >= v45) {
              goto LABEL_47;
            }
            unint64_t v41 = *(void *)(v44 + 8 * v42);
            if (!v41)
            {
              int64_t v42 = v25 + 6;
              if (v25 + 6 >= v45) {
                goto LABEL_47;
              }
              unint64_t v41 = *(void *)(v44 + 8 * v42);
              if (!v41)
              {
                int64_t v42 = v25 + 7;
                if (v25 + 7 >= v45) {
                  goto LABEL_47;
                }
                unint64_t v41 = *(void *)(v44 + 8 * v42);
                if (!v41)
                {
                  int64_t v42 = v25 + 8;
                  if (v25 + 8 >= v45) {
                    goto LABEL_47;
                  }
                  unint64_t v41 = *(void *)(v44 + 8 * v42);
                  if (!v41) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_46:
    uint64_t v48 = (v41 - 1) & v41;
    int64_t v49 = v42;
    unint64_t v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_21:
    uint64_t v30 = 24 * v29;
    uint64_t v31 = *(void *)(v51 + 48) + v30;
    uint64_t v32 = *(void *)v31;
    unint64_t v33 = *(void *)(v31 + 8);
    uint64_t v34 = *(void *)(v51 + 56) + v30;
    uint64_t v46 = *(void *)v34;
    uint64_t v35 = *(void *)v34;
    unint64_t v47 = *(void *)(v34 + 8);
    uint64_t v36 = *(void *)(v16 + 48) + v30;
    char v37 = *(unsigned char *)(v31 + 16);
    char v38 = *(unsigned char *)(v34 + 16);
    *(void *)uint64_t v36 = *(void *)v31;
    *(void *)(v36 + 8) = v33;
    *(unsigned char *)(v36 + 16) = v37;
    uint64_t v39 = *(void *)(v16 + 56) + v30;
    *(void *)uint64_t v39 = v35;
    *(void *)(v39 + 8) = v47;
    *(unsigned char *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v38);
    unint64_t v28 = v48;
    int64_t v25 = v49;
  }
  uint64_t v43 = v25 + 9;
  if (v25 + 9 >= v45) {
    goto LABEL_47;
  }
  unint64_t v41 = *(void *)(v44 + 8 * v43);
  if (v41)
  {
    int64_t v42 = v25 + 9;
    goto LABEL_46;
  }
  while (1)
  {
    int64_t v42 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v42 >= v45) {
      goto LABEL_47;
    }
    unint64_t v41 = *(void *)(v44 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_46;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(float a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(unsigned char *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v51 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v5) = v11;
    if (*(void *)(v51 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v51;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v5 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      double v19 = a1;
      if ((v5 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v20 = *(void *)(v16 + 56) + 24 * v12;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v20, *(void *)(v20 + 8), *(unsigned char *)(v20 + 16));
      *(double *)uint64_t v20 = v19;
      *(void *)(v20 + 8) = 0;
      *(unsigned char *)(v20 + 16) = 3;
LABEL_47:
      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v16 = v51;
      double v19 = a1;
      if (v11) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, *(uint64_t *)&v19, 0, 3, (void *)v16);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v21 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v21;
  if (!*(void *)(v51 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    double v19 = a1;
    if (v5) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
  uint64_t v22 = (char *)(v21 + 64);
  uint64_t v23 = (char *)(v51 + 64);
  unint64_t v24 = (unint64_t)((1 << *(unsigned char *)(v16 + 32)) + 63) >> 6;
  uint64_t v45 = v51 + 64;
  if (v16 != v51 || v22 >= &v23[8 * v24]) {
    memmove(v22, v23, 8 * v24);
  }
  int64_t v25 = 0;
  *(void *)(v16 + 16) = *(void *)(v51 + 16);
  uint64_t v26 = 1 << *(unsigned char *)(v51 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & *(void *)(v51 + 64);
  int64_t v46 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      uint64_t v49 = (v28 - 1) & v28;
      int64_t v50 = v25;
      unint64_t v29 = __clz(__rbit64(v28)) | (v25 << 6);
      goto LABEL_19;
    }
    int64_t v40 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v40 >= v46) {
      goto LABEL_45;
    }
    unint64_t v41 = *(void *)(v45 + 8 * v40);
    int64_t v42 = v25 + 1;
    if (!v41)
    {
      int64_t v42 = v25 + 2;
      if (v25 + 2 >= v46) {
        goto LABEL_45;
      }
      unint64_t v41 = *(void *)(v45 + 8 * v42);
      if (!v41)
      {
        int64_t v42 = v25 + 3;
        if (v25 + 3 >= v46) {
          goto LABEL_45;
        }
        unint64_t v41 = *(void *)(v45 + 8 * v42);
        if (!v41)
        {
          int64_t v42 = v25 + 4;
          if (v25 + 4 >= v46) {
            goto LABEL_45;
          }
          unint64_t v41 = *(void *)(v45 + 8 * v42);
          if (!v41)
          {
            int64_t v42 = v25 + 5;
            if (v25 + 5 >= v46) {
              goto LABEL_45;
            }
            unint64_t v41 = *(void *)(v45 + 8 * v42);
            if (!v41)
            {
              int64_t v42 = v25 + 6;
              if (v25 + 6 >= v46) {
                goto LABEL_45;
              }
              unint64_t v41 = *(void *)(v45 + 8 * v42);
              if (!v41)
              {
                int64_t v42 = v25 + 7;
                if (v25 + 7 >= v46) {
                  goto LABEL_45;
                }
                unint64_t v41 = *(void *)(v45 + 8 * v42);
                if (!v41)
                {
                  int64_t v42 = v25 + 8;
                  if (v25 + 8 >= v46) {
                    goto LABEL_45;
                  }
                  unint64_t v41 = *(void *)(v45 + 8 * v42);
                  if (!v41) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    uint64_t v49 = (v41 - 1) & v41;
    int64_t v50 = v42;
    unint64_t v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_19:
    uint64_t v30 = 24 * v29;
    uint64_t v31 = *(void *)(v51 + 48) + v30;
    uint64_t v32 = *(void *)v31;
    unint64_t v33 = *(void *)(v31 + 8);
    uint64_t v34 = *(void *)(v51 + 56) + v30;
    uint64_t v47 = *(void *)v34;
    uint64_t v35 = *(void *)v34;
    unint64_t v48 = *(void *)(v34 + 8);
    uint64_t v36 = *(void *)(v16 + 48) + v30;
    char v37 = *(unsigned char *)(v31 + 16);
    char v38 = *(unsigned char *)(v34 + 16);
    *(void *)uint64_t v36 = *(void *)v31;
    *(void *)(v36 + 8) = v33;
    *(unsigned char *)(v36 + 16) = v37;
    uint64_t v39 = *(void *)(v16 + 56) + v30;
    *(void *)uint64_t v39 = v35;
    *(void *)(v39 + 8) = v48;
    *(unsigned char *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v47, v48, v38);
    unint64_t v28 = v49;
    int64_t v25 = v50;
  }
  uint64_t v43 = v25 + 9;
  if (v25 + 9 >= v46) {
    goto LABEL_45;
  }
  unint64_t v41 = *(void *)(v45 + 8 * v43);
  if (v41)
  {
    int64_t v42 = v25 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v42 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v42 >= v46) {
      goto LABEL_45;
    }
    unint64_t v41 = *(void *)(v45 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_44;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.encode(_:forKey:)(double a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, *(unsigned char *)(v1 + 24));
  uint64_t v6 = dispatch thunk of CodingKey.stringValue.getter();
  if (v5 != 7)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v50 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
  uint64_t v13 = *(void *)(v50 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v5) = v11;
    if (*(void *)(v50 + 24) < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v50;
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9, 0);
      if ((v5 & 1) != (v18 & 1)) {
        goto LABEL_51;
      }
      unint64_t v12 = v17;
      if ((v5 & 1) == 0) {
        goto LABEL_46;
      }
LABEL_9:
      uint64_t v19 = *(void *)(v16 + 56) + 24 * v12;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v19, *(void *)(v19 + 8), *(unsigned char *)(v19 + 16));
      *(double *)uint64_t v19 = a1;
      *(void *)(v19 + 8) = 0;
      *(unsigned char *)(v19 + 16) = 3;
LABEL_47:
      *(void *)(v3 + 16) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
      swift_bridgeObjectRelease();
      return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 7);
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v16 = v50;
      if (v11) {
        goto LABEL_9;
      }
LABEL_46:
      specialized _NativeDictionary._insert(at:key:value:)(v12, v8, v9, 0, *(uint64_t *)&a1, 0, 3, (void *)v16);
      swift_bridgeObjectRetain();
      goto LABEL_47;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v20 = static _DictionaryStorage.copy(original:)();
  uint64_t v16 = v20;
  if (!*(void *)(v50 + 16))
  {
LABEL_45:
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
  uint64_t v21 = (char *)(v20 + 64);
  uint64_t v22 = (char *)(v50 + 64);
  unint64_t v23 = (unint64_t)((1 << *(unsigned char *)(v16 + 32)) + 63) >> 6;
  uint64_t v44 = v50 + 64;
  if (v16 != v50 || v21 >= &v22[8 * v23]) {
    memmove(v21, v22, 8 * v23);
  }
  int64_t v24 = 0;
  *(void *)(v16 + 16) = *(void *)(v50 + 16);
  uint64_t v25 = 1 << *(unsigned char *)(v50 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v27 = v26 & *(void *)(v50 + 64);
  int64_t v45 = (unint64_t)(v25 + 63) >> 6;
  while (1)
  {
    if (v27)
    {
      uint64_t v48 = (v27 - 1) & v27;
      int64_t v49 = v24;
      unint64_t v28 = __clz(__rbit64(v27)) | (v24 << 6);
      goto LABEL_19;
    }
    int64_t v39 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v39 >= v45) {
      goto LABEL_45;
    }
    unint64_t v40 = *(void *)(v44 + 8 * v39);
    int64_t v41 = v24 + 1;
    if (!v40)
    {
      int64_t v41 = v24 + 2;
      if (v24 + 2 >= v45) {
        goto LABEL_45;
      }
      unint64_t v40 = *(void *)(v44 + 8 * v41);
      if (!v40)
      {
        int64_t v41 = v24 + 3;
        if (v24 + 3 >= v45) {
          goto LABEL_45;
        }
        unint64_t v40 = *(void *)(v44 + 8 * v41);
        if (!v40)
        {
          int64_t v41 = v24 + 4;
          if (v24 + 4 >= v45) {
            goto LABEL_45;
          }
          unint64_t v40 = *(void *)(v44 + 8 * v41);
          if (!v40)
          {
            int64_t v41 = v24 + 5;
            if (v24 + 5 >= v45) {
              goto LABEL_45;
            }
            unint64_t v40 = *(void *)(v44 + 8 * v41);
            if (!v40)
            {
              int64_t v41 = v24 + 6;
              if (v24 + 6 >= v45) {
                goto LABEL_45;
              }
              unint64_t v40 = *(void *)(v44 + 8 * v41);
              if (!v40)
              {
                int64_t v41 = v24 + 7;
                if (v24 + 7 >= v45) {
                  goto LABEL_45;
                }
                unint64_t v40 = *(void *)(v44 + 8 * v41);
                if (!v40)
                {
                  int64_t v41 = v24 + 8;
                  if (v24 + 8 >= v45) {
                    goto LABEL_45;
                  }
                  unint64_t v40 = *(void *)(v44 + 8 * v41);
                  if (!v40) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    uint64_t v48 = (v40 - 1) & v40;
    int64_t v49 = v41;
    unint64_t v28 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_19:
    uint64_t v29 = 24 * v28;
    uint64_t v30 = *(void *)(v50 + 48) + v29;
    uint64_t v31 = *(void *)v30;
    unint64_t v32 = *(void *)(v30 + 8);
    uint64_t v33 = *(void *)(v50 + 56) + v29;
    uint64_t v46 = *(void *)v33;
    uint64_t v34 = *(void *)v33;
    unint64_t v47 = *(void *)(v33 + 8);
    uint64_t v35 = *(void *)(v16 + 48) + v29;
    char v36 = *(unsigned char *)(v30 + 16);
    char v37 = *(unsigned char *)(v33 + 16);
    *(void *)uint64_t v35 = *(void *)v30;
    *(void *)(v35 + 8) = v32;
    *(unsigned char *)(v35 + 16) = v36;
    uint64_t v38 = *(void *)(v16 + 56) + v29;
    *(void *)uint64_t v38 = v34;
    *(void *)(v38 + 8) = v47;
    *(unsigned char *)(v38 + 16) = v37;
    outlined copy of _XMLPlistEncodingFormat.Reference(v31, v32, v36);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v37);
    unint64_t v27 = v48;
    int64_t v24 = v49;
  }
  uint64_t v42 = v24 + 9;
  if (v24 + 9 >= v45) {
    goto LABEL_45;
  }
  unint64_t v40 = *(void *)(v44 + 8 * v42);
  if (v40)
  {
    int64_t v41 = v24 + 9;
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v41 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      break;
    }
    if (v41 >= v45) {
      goto LABEL_45;
    }
    unint64_t v40 = *(void *)(v44 + 8 * v41);
    ++v42;
    if (v40) {
      goto LABEL_44;
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.nestedUnkeyedContainer(forKey:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4 = v3;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v109 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v103 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v111 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v107 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  double v108 = (char *)&v95 - v13;
  uint64_t v14 = *(void *)(a2 + 24);
  unint64_t v106 = a1;
  uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(unsigned char *)(v4 + 24) != 7)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  uint64_t v17 = v15;
  unint64_t v18 = v16;
  uint64_t v20 = *(void *)(v4 + 8);
  unint64_t v19 = *(void *)(v4 + 16);
  uint64_t v21 = *(void *)(v20 + 16);
  uint64_t v22 = *(void *)(v21 + 16);
  Swift::Int v105 = a3;
  unint64_t v110 = v16;
  uint64_t v102 = v14;
  if (v22)
  {
    unint64_t v100 = v4;
    uint64_t v101 = v8;
    outlined copy of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
    swift_bridgeObjectRetain();
    uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18, 0);
    if (v24)
    {
      uint64_t v25 = *(void *)(v21 + 56) + 24 * v23;
      unint64_t v26 = *(void *)(v25 + 8);
      int v27 = *(unsigned __int8 *)(v25 + 16);
      uint64_t v104 = *(void *)v25;
      outlined copy of _XMLPlistEncodingFormat.Reference(v104, v26, v27);
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
      uint64_t v8 = v101;
      if (v27 != 6)
      {
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      unint64_t v4 = v100;
LABEL_53:
      uint64_t v73 = *(void *)v4;
      unint64_t v74 = *(void *)(v4 + 32);
      double v75 = v108;
      uint64_t v76 = v109;
      (*(void (**)(char *, unint64_t, uint64_t))(v109 + 16))(v108, v106, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v75, 0, 1, v8);
      uint64_t v77 = v107;
      (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v107, v75, v10);
      uint64_t v78 = v10;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v77, 1, v8) == 1)
      {
        Swift::UInt64 v79 = *(void (**)(char *, uint64_t))(v111 + 8);
        swift_retain();
        v79(v75, v78);
        v79(v77, v78);
        swift_retain();
        swift_bridgeObjectRelease();
LABEL_61:
        unint64_t v92 = v105;
        v105[3] = (uint64_t)&unk_1ECA43248;
        v92[4] = lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML();
        uint64_t result = swift_allocObject();
        uint64_t *v92 = result;
        uint64_t v94 = v104;
        *(void *)(result + 16) = v73;
        *(void *)(result + 24) = v94;
        *(void *)(result + 32) = v26;
        *(unsigned char *)(result + 40) = 6;
        *(void *)(result + 48) = v74;
        return result;
      }
      unint64_t v106 = v26;
      char v80 = *(void (**)(char *, char *, uint64_t))(v76 + 32);
      uint64_t v81 = v111;
      char v82 = v77;
      uint64_t v83 = v75;
      double v84 = v103;
      v80(v103, v82, v8);
      double v85 = (uint64_t *)swift_allocObject();
      uint64_t v86 = v102;
      v85[5] = v8;
      v85[6] = v86;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v85 + 2);
      v80((char *)boxed_opaque_existential_1, v84, v8);
      unint64_t v88 = *(void (**)(char *, uint64_t))(v81 + 8);
      swift_retain();
      v88(v83, v10);
      v85[7] = v74;
      if (v74 >> 62)
      {
        if (v74 >> 62 != 1)
        {
          unint64_t v26 = v106;
          uint64_t v91 = 1;
          goto LABEL_60;
        }
        uint64_t v89 = (uint64_t *)((v74 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        uint64_t v89 = (uint64_t *)(v74 + 64);
      }
      unint64_t v26 = v106;
      uint64_t v90 = *v89;
      swift_retain();
      uint64_t v91 = v90 + 1;
      if (!__OFADD__(v90, 1))
      {
LABEL_60:
        v85[8] = v91;
        swift_bridgeObjectRelease();
        unint64_t v74 = (unint64_t)v85;
        goto LABEL_61;
      }
      __break(1u);
      goto LABEL_64;
    }
    swift_bridgeObjectRelease();
    outlined consume of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
    unint64_t v4 = v100;
    uint64_t v8 = v101;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<ContiguousArray<_XMLPlistEncodingFormat.Reference>>);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = MEMORY[0x1E4FBC860];
  outlined copy of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
  swift_retain();
  unint64_t v29 = v19;
  outlined copy of _XMLPlistEncodingFormat.Reference(v20, v19, 7);
  swift_retain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v31 = v18;
  char v32 = isUniquelyReferenced_nonNull_native;
  uint64_t v112 = *(void *)(v20 + 16);
  uint64_t v33 = v112;
  *(void *)(v20 + 16) = 0x8000000000000000;
  unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v31, 0);
  uint64_t v36 = *(void *)(v33 + 16);
  BOOL v37 = (v34 & 1) == 0;
  uint64_t v38 = v36 + v37;
  if (__OFADD__(v36, v37))
  {
    __break(1u);
  }
  else
  {
    if (*(void *)(v33 + 24) < v38)
    {
      char v39 = v34;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, v32);
      uint64_t v40 = v112;
      uint64_t v41 = v110;
      uint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v110, 0);
      if ((v39 & 1) != (v43 & 1)) {
        goto LABEL_68;
      }
      unint64_t v35 = v42;
      if ((v39 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      uint64_t v44 = *(void *)(v40 + 56) + 24 * v35;
      outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v44, *(void *)(v44 + 8), *(unsigned char *)(v44 + 16));
      *(void *)uint64_t v44 = v28;
      *(void *)(v44 + 8) = 0;
      *(unsigned char *)(v44 + 16) = 6;
LABEL_52:
      *(void *)(v20 + 16) = v40;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of _XMLPlistEncodingFormat.Reference(v20, v29, 7);
      uint64_t v104 = v28;
      swift_release();
      outlined consume of _XMLPlistEncodingFormat.Reference(v20, v29, 7);
      unint64_t v26 = 0;
      goto LABEL_53;
    }
    if (v32)
    {
      uint64_t v40 = v33;
      uint64_t v41 = v110;
      if (v34) {
        goto LABEL_14;
      }
LABEL_51:
      specialized _NativeDictionary._insert(at:key:value:)(v35, v17, v41, 0, v28, 0, 6, (void *)v40);
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
  }
  unint64_t v95 = v35;
  int v96 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v45 = static _DictionaryStorage.copy(original:)();
  uint64_t v40 = v45;
  uint64_t v41 = v110;
  if (!*(void *)(v33 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    unint64_t v35 = v95;
    if (v96) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
  uint64_t v46 = (void *)(v45 + 64);
  unint64_t v47 = (unint64_t)((1 << *(unsigned char *)(v40 + 32)) + 63) >> 6;
  int v97 = (const void *)(v33 + 64);
  if (v40 != v33 || (unint64_t)v46 >= v33 + 64 + 8 * v47) {
    memmove(v46, v97, 8 * v47);
  }
  uint64_t v48 = 0;
  *(void *)(v40 + 16) = *(void *)(v33 + 16);
  uint64_t v49 = 1 << *(unsigned char *)(v33 + 32);
  uint64_t v50 = -1;
  if (v49 < 64) {
    uint64_t v50 = ~(-1 << v49);
  }
  unint64_t v51 = v50 & *(void *)(v33 + 64);
  int64_t v98 = (unint64_t)(v49 + 63) >> 6;
  while (1)
  {
    uint64_t v41 = v110;
    if (v51)
    {
      uint64_t v101 = (v51 - 1) & v51;
      uint64_t v104 = v48;
      unint64_t v52 = __clz(__rbit64(v51)) | (v48 << 6);
      goto LABEL_24;
    }
    int64_t v64 = v48 + 1;
    if (__OFADD__(v48, 1)) {
      goto LABEL_65;
    }
    if (v64 >= v98) {
      goto LABEL_50;
    }
    unint64_t v65 = *((void *)v97 + v64);
    uint64_t v66 = v48 + 1;
    if (!v65)
    {
      uint64_t v66 = v48 + 2;
      if (v48 + 2 >= v98) {
        goto LABEL_50;
      }
      unint64_t v65 = *((void *)v97 + v66);
      if (!v65)
      {
        uint64_t v66 = v48 + 3;
        if (v48 + 3 >= v98) {
          goto LABEL_50;
        }
        unint64_t v65 = *((void *)v97 + v66);
        if (!v65)
        {
          uint64_t v66 = v48 + 4;
          if (v48 + 4 >= v98) {
            goto LABEL_50;
          }
          unint64_t v65 = *((void *)v97 + v66);
          if (!v65)
          {
            uint64_t v66 = v48 + 5;
            if (v48 + 5 >= v98) {
              goto LABEL_50;
            }
            unint64_t v65 = *((void *)v97 + v66);
            if (!v65)
            {
              uint64_t v66 = v48 + 6;
              if (v48 + 6 >= v98) {
                goto LABEL_50;
              }
              unint64_t v65 = *((void *)v97 + v66);
              if (!v65)
              {
                uint64_t v66 = v48 + 7;
                if (v48 + 7 >= v98) {
                  goto LABEL_50;
                }
                unint64_t v65 = *((void *)v97 + v66);
                if (!v65)
                {
                  uint64_t v66 = v48 + 8;
                  if (v48 + 8 >= v98) {
                    goto LABEL_50;
                  }
                  unint64_t v65 = *((void *)v97 + v66);
                  if (!v65) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_49:
    uint64_t v101 = (v65 - 1) & v65;
    uint64_t v104 = v66;
    unint64_t v52 = __clz(__rbit64(v65)) + (v66 << 6);
LABEL_24:
    uint64_t v53 = 24 * v52;
    uint64_t v54 = *(void *)(v33 + 48) + v53;
    uint64_t v55 = *(void *)v54;
    unint64_t v56 = *(void *)(v54 + 8);
    uint64_t v57 = *(void *)(v33 + 56) + v53;
    unint64_t v58 = *(void *)(v57 + 8);
    uint64_t v99 = *(void *)v57;
    uint64_t v59 = v99;
    unint64_t v100 = v58;
    uint64_t v60 = *(void *)(v40 + 48) + v53;
    char v61 = *(unsigned char *)(v54 + 16);
    char v62 = *(unsigned char *)(v57 + 16);
    *(void *)uint64_t v60 = v55;
    *(void *)(v60 + 8) = v56;
    *(unsigned char *)(v60 + 16) = v61;
    uint64_t v63 = *(void *)(v40 + 56) + v53;
    *(void *)uint64_t v63 = v59;
    *(void *)(v63 + 8) = v58;
    *(unsigned char *)(v63 + 16) = v62;
    outlined copy of _XMLPlistEncodingFormat.Reference(v55, v56, v61);
    outlined copy of _XMLPlistEncodingFormat.Reference(v99, v100, v62);
    uint64_t v48 = v104;
    unint64_t v51 = v101;
  }
  uint64_t v67 = v48 + 9;
  if (v48 + 9 >= v98) {
    goto LABEL_50;
  }
  uint64_t v68 = v8;
  uint64_t v69 = v17;
  unint64_t v70 = v4;
  uint64_t v71 = v28;
  uint64_t v72 = v10;
  unint64_t v65 = *((void *)v97 + v67);
  if (v65)
  {
    uint64_t v66 = v67;
    goto LABEL_49;
  }
  while (1)
  {
    uint64_t v66 = v67 + 1;
    if (__OFADD__(v67, 1)) {
      break;
    }
    uint64_t v41 = v110;
    uint64_t v10 = v72;
    uint64_t v28 = v71;
    unint64_t v4 = v70;
    uint64_t v17 = v69;
    uint64_t v8 = v68;
    if (v66 >= v98) {
      goto LABEL_50;
    }
    unint64_t v65 = *((void *)v97 + v66);
    ++v67;
    if (v65) {
      goto LABEL_49;
    }
  }
LABEL_67:
  __break(1u);
LABEL_68:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(*(void *)v1 + 40);
  unint64_t v6 = *(void *)(v1 + 16);
  char v7 = *(unsigned char *)(v1 + 24);
  uint64_t v8 = type metadata accessor for __PlistReferencingEncoderXML();
  uint64_t v9 = swift_allocObject();
  swift_retain();
  swift_retain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v4, v6, v7);
  uint64_t v10 = specialized __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)(v3, 0x7265707573, 0xE500000000000000, 0, 0, v5, v4, v6, v7, v9);
  a1[3] = v8;
  uint64_t result = lazy protocol witness table accessor for type __PlistEncoderXML and conformance __PlistEncoderXML(&lazy protocol witness table cache variable for type __PlistReferencingEncoderXML and conformance __PlistEncoderXML, 255, (void (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderXML);
  a1[4] = result;
  *a1 = v10;
  return result;
}

uint64_t _PlistKeyedEncodingContainerXML.superEncoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  char v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)v3;
  uint64_t v9 = *(void *)(v3 + 8);
  unint64_t v10 = *(void *)(*(void *)v3 + 40);
  unint64_t v11 = *(void *)(v3 + 16);
  char v12 = *(unsigned char *)(v3 + 24);
  v21[0] = v9;
  v21[1] = v11;
  char v22 = v12;
  uint64_t v13 = type metadata accessor for __PlistReferencingEncoderXML();
  uint64_t v14 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v18, v4);
  swift_retain();
  swift_retain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v9, v11, v12);
  uint64_t v15 = specialized __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)(v8, (uint64_t)v7, v10, v21, v14, v4, *(void *)(v19 + 24));
  unint64_t v16 = v20;
  v20[3] = v13;
  uint64_t result = lazy protocol witness table accessor for type __PlistEncoderXML and conformance __PlistEncoderXML(&lazy protocol witness table cache variable for type __PlistReferencingEncoderXML and conformance __PlistEncoderXML, 255, (void (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderXML);
  v16[4] = result;
  *unint64_t v16 = v15;
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance _PlistKeyedEncodingContainerXML<A>()
{
  return _PlistKeyedEncodingContainerXML.encodeNil(forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(char a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(double a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(float a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(__int16 a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(int a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(unsigned __int8 a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(unsigned __int16 a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>(unsigned int a1)
{
  return _PlistKeyedEncodingContainerXML.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _PlistKeyedEncodingContainerXML<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

void _PlistUnkeyedEncodingContainerXML.encodeNil()()
{
  if (*(unsigned char *)(v0 + 24) == 6)
  {
    unint64_t v1 = *(void *)(v0 + 16);
    uint64_t v3 = *(void *)(*(void *)v0 + 56);
    unint64_t v4 = *(void *)(*(void *)v0 + 64);
    char v5 = *(unsigned char *)(*(void *)v0 + 72);
    uint64_t v2 = *(void *)(v0 + 8);
    uint64_t v6 = (uint64_t *)(v2 + 16);
    uint64_t v7 = *(void *)(v2 + 16);
    outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
    outlined copy of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
    outlined copy of _XMLPlistEncodingFormat.Reference(v2, v1, 6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 16) = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
      uint64_t v7 = *v6;
    }
    unint64_t v10 = *(void *)(v7 + 16);
    unint64_t v9 = *(void *)(v7 + 24);
    if (v10 >= v9 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      uint64_t v7 = *v6;
    }
    *(void *)(v7 + 16) = v10 + 1;
    uint64_t v11 = v7 + 24 * v10;
    *(void *)(v11 + 32) = v3;
    *(void *)(v11 + 40) = v4;
    *(unsigned char *)(v11 + 48) = v5;
    *(void *)(v2 + 16) = v7;
    outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, v5);
    outlined consume of _XMLPlistEncodingFormat.Reference(v2, v1, 6);
  }
  else
  {
    __break(1u);
  }
}

uint64_t _PlistUnkeyedEncodingContainerXML.encode(_:)(uint64_t result)
{
  if (result) {
    uint64_t v2 = (uint64_t *)(*(void *)v1 + 80);
  }
  else {
    uint64_t v2 = (uint64_t *)(*(void *)v1 + 104);
  }
  if (result) {
    uint64_t v3 = (unint64_t *)(*(void *)v1 + 88);
  }
  else {
    uint64_t v3 = (unint64_t *)(*(void *)v1 + 112);
  }
  if (result) {
    unint64_t v4 = (char *)(*(void *)v1 + 96);
  }
  else {
    unint64_t v4 = (char *)(*(void *)v1 + 120);
  }
  if (*(unsigned char *)(v1 + 24) == 6)
  {
    unint64_t v6 = *(void *)(v1 + 16);
    uint64_t v7 = *v2;
    unint64_t v8 = *v3;
    char v9 = *v4;
    uint64_t v5 = *(void *)(v1 + 8);
    unint64_t v10 = (uint64_t *)(v5 + 16);
    uint64_t v11 = *(void *)(v5 + 16);
    outlined copy of _XMLPlistEncodingFormat.Reference(*v2, *v3, *v4);
    outlined copy of _XMLPlistEncodingFormat.Reference(v7, v8, v9);
    outlined copy of _XMLPlistEncodingFormat.Reference(v5, v6, 6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v5 + 16) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
      uint64_t v11 = *v10;
    }
    unint64_t v14 = *(void *)(v11 + 16);
    unint64_t v13 = *(void *)(v11 + 24);
    if (v14 >= v13 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      uint64_t v11 = *v10;
    }
    *(void *)(v11 + 16) = v14 + 1;
    uint64_t v15 = v11 + 24 * v14;
    *(void *)(v15 + 32) = v7;
    *(void *)(v15 + 40) = v8;
    *(unsigned char *)(v15 + 48) = v9;
    *(void *)(v5 + 16) = v11;
    outlined consume of _XMLPlistEncodingFormat.Reference(v7, v8, v9);
    return outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(unsigned char *)(v1 + 24) == 6)
  {
    uint64_t v2 = result;
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    unint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
      unint64_t v6 = *v5;
    }
    char v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      unint64_t v6 = *v5;
    }
    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 24 * v9;
    *(void *)(v10 + 32) = v2;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 2;
    *(void *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(unsigned char *)(v1 + 24) == 6)
  {
    uint64_t v2 = result;
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    unint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
      unint64_t v6 = *v5;
    }
    char v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      unint64_t v6 = *v5;
    }
    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 24 * v9;
    *(void *)(v10 + 32) = v2;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 2;
    *(void *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(unsigned char *)(v1 + 24) == 6)
  {
    uint64_t v2 = result;
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    unint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
      unint64_t v6 = *v5;
    }
    char v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      unint64_t v6 = *v5;
    }
    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 24 * v9;
    *(void *)(v10 + 32) = v2;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 2;
    *(void *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(unsigned char *)(v1 + 24) == 6)
  {
    uint64_t v2 = result;
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    unint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
      unint64_t v6 = *v5;
    }
    char v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      unint64_t v6 = *v5;
    }
    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 24 * v9;
    *(void *)(v10 + 32) = v2;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 2;
    *(void *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(unsigned char *)(v1 + 24) == 6)
  {
    uint64_t v2 = result;
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    unint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
      unint64_t v6 = *v5;
    }
    char v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      unint64_t v6 = *v5;
    }
    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 24 * v9;
    *(void *)(v10 + 32) = v2;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 1;
    *(void *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  unsigned __int16 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(unsigned char *)(v1 + 24) == 6)
  {
    uint64_t v2 = result;
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    unint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
      unint64_t v6 = *v5;
    }
    char v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      unint64_t v6 = *v5;
    }
    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 24 * v9;
    *(void *)(v10 + 32) = v2;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 1;
    *(void *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(unsigned char *)(v1 + 24) == 6)
  {
    uint64_t v2 = result;
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    unint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
      unint64_t v6 = *v5;
    }
    char v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      unint64_t v6 = *v5;
    }
    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 24 * v9;
    *(void *)(v10 + 32) = v2;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 1;
    *(void *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (*(unsigned char *)(v1 + 24) == 6)
  {
    uint64_t v2 = result;
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    unint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
      unint64_t v6 = *v5;
    }
    char v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      unint64_t v6 = *v5;
    }
    *(void *)(v6 + 16) = v9 + 1;
    unint64_t v10 = v6 + 24 * v9;
    *(void *)(v10 + 32) = v2;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 1;
    *(void *)(v3 + 16) = v6;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void _PlistUnkeyedEncodingContainerXML.encode(_:)(float a1)
{
  if (*(unsigned char *)(v1 + 24) == 6)
  {
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    uint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
      uint64_t v6 = *v5;
    }
    unint64_t v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      uint64_t v6 = *v5;
    }
    *(void *)(v6 + 16) = v9 + 1;
    uint64_t v10 = v6 + 24 * v9;
    *(double *)(v10 + 32) = a1;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 3;
    *(void *)(v3 + 16) = v6;
    outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
}

void _PlistUnkeyedEncodingContainerXML.encode(_:)(double a1)
{
  if (*(unsigned char *)(v1 + 24) == 6)
  {
    unint64_t v4 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v5 = (uint64_t *)(v3 + 16);
    uint64_t v6 = *(void *)(v3 + 16);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v3 + 16) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
      uint64_t v6 = *v5;
    }
    unint64_t v9 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    if (v9 >= v8 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      uint64_t v6 = *v5;
    }
    *(void *)(v6 + 16) = v9 + 1;
    uint64_t v10 = v6 + 24 * v9;
    *(double *)(v10 + 32) = a1;
    *(void *)(v10 + 40) = 0;
    *(unsigned char *)(v10 + 48) = 3;
    *(void *)(v3 + 16) = v6;
    outlined consume of _XMLPlistEncodingFormat.Reference(v3, v4, 6);
  }
  else
  {
    __break(1u);
  }
}

uint64_t _PlistUnkeyedEncodingContainerXML.encode(_:)(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(v2 + 24) == 6)
  {
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(v2 + 16);
    uint64_t v5 = *(void *)(v2 + 8);
    uint64_t v7 = (uint64_t *)(v5 + 16);
    uint64_t v8 = *(void *)(v5 + 16);
    outlined copy of _XMLPlistEncodingFormat.Reference(v5, v6, 6);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v5 + 16) = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1);
      uint64_t v8 = *v7;
    }
    unint64_t v11 = *(void *)(v8 + 16);
    unint64_t v10 = *(void *)(v8 + 24);
    if (v11 >= v10 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      uint64_t v8 = *v7;
    }
    *(void *)(v8 + 16) = v11 + 1;
    uint64_t v12 = v8 + 24 * v11;
    *(void *)(v12 + 32) = v4;
    *(void *)(v12 + 40) = a2;
    *(unsigned char *)(v12 + 48) = 0;
    *(void *)(v5 + 16) = v8;
    return outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, 6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void _PlistUnkeyedEncodingContainerXML.nestedContainer<A>(keyedBy:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  int v4 = *(unsigned __int8 *)(v0 + 24);
  if (v4 != 7 && v4 != 6) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)(*(void *)(v2 + 16) + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = MEMORY[0x1E4FBC868];
  if (v4 == 6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = (uint64_t *)(v2 + 16);
    uint64_t v9 = *(void *)(v2 + 16);
    outlined copy of _XMLPlistEncodingFormat.Reference(v2, v3, 6);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 16) = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
      uint64_t v9 = *v8;
    }
    unint64_t v12 = *(void *)(v9 + 16);
    unint64_t v11 = *(void *)(v9 + 24);
    if (v12 >= v11 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      uint64_t v9 = *v8;
    }
    *(void *)(v9 + 16) = v12 + 1;
    uint64_t v13 = v9 + 24 * v12;
    *(void *)(v13 + 32) = v7;
    *(void *)(v13 + 40) = 0;
    *(unsigned char *)(v13 + 48) = 7;
    *(void *)(v2 + 16) = v9;
    outlined consume of _XMLPlistEncodingFormat.Reference(v2, v3, 6);
    unint64_t v14 = *(void *)(v1 + 32);
    uint64_t v15 = (void *)swift_allocObject();
    v15[5] = &type metadata for _CodingKey;
    v15[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v16 = swift_allocObject();
    void v15[2] = v16;
    *(void *)(v16 + 24) = 0;
    *(void *)(v16 + 32) = 0;
    *(void *)(v16 + 16) = v5;
    *(unsigned char *)(v16 + 40) = 2;
    v15[7] = v14;
    if (v14 >> 62)
    {
      uint64_t v17 = 0;
      if (v14 >> 62 != 1)
      {
LABEL_13:
        if (!__OFADD__(v17, 1))
        {
          v15[8] = v17 + 1;
          type metadata accessor for _PlistKeyedEncodingContainerXML();
          swift_retain();
          swift_getWitnessTable();
          KeyedEncodingContainer.init<A>(_:)();
          return;
        }
        __break(1u);
        goto LABEL_16;
      }
      uint64_t v18 = (uint64_t *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      uint64_t v18 = (uint64_t *)(v14 + 64);
    }
    uint64_t v17 = *v18;
    swift_retain();
    goto LABEL_13;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
}

void _PlistUnkeyedEncodingContainerXML.nestedUnkeyedContainer()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (uint64_t *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  unint64_t v5 = *(void *)(v1 + 16);
  int v6 = *(unsigned __int8 *)(v1 + 24);
  if (v6 != 7 && v6 != 6) {
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(*(void *)(v4 + 16) + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<ContiguousArray<_XMLPlistEncodingFormat.Reference>>);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = MEMORY[0x1E4FBC860];
  if (v6 != 6)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    return;
  }
  uint64_t v9 = v8;
  unint64_t v10 = (uint64_t *)(v4 + 16);
  uint64_t v11 = *(void *)(v4 + 16);
  outlined copy of _XMLPlistEncodingFormat.Reference(v4, v5, 6);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 16) = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
    uint64_t v11 = *v10;
  }
  unint64_t v14 = *(void *)(v11 + 16);
  unint64_t v13 = *(void *)(v11 + 24);
  if (v14 >= v13 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    uint64_t v11 = *v10;
  }
  *(void *)(v11 + 16) = v14 + 1;
  uint64_t v15 = v11 + 24 * v14;
  *(void *)(v15 + 32) = v9;
  *(void *)(v15 + 40) = 0;
  *(unsigned char *)(v15 + 48) = 6;
  *(void *)(v4 + 16) = v11;
  outlined consume of _XMLPlistEncodingFormat.Reference(v4, v5, 6);
  uint64_t v16 = *v2;
  unint64_t v17 = v2[4];
  uint64_t v18 = (void *)swift_allocObject();
  v18[5] = &type metadata for _CodingKey;
  v18[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v19 = swift_allocObject();
  _OWORD v18[2] = v19;
  *(void *)(v19 + 24) = 0;
  *(void *)(v19 + 32) = 0;
  *(void *)(v19 + 16) = v7;
  *(unsigned char *)(v19 + 40) = 2;
  v18[7] = v17;
  if (v17 >> 62)
  {
    uint64_t v20 = 0;
    if (v17 >> 62 != 1) {
      goto LABEL_13;
    }
    uint64_t v21 = (uint64_t *)((v17 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v17 + 64);
  }
  uint64_t v20 = *v21;
  swift_retain();
LABEL_13:
  if (__OFADD__(v20, 1))
  {
    __break(1u);
    goto LABEL_18;
  }
  v18[8] = v20 + 1;
  a1[3] = (uint64_t)&unk_1ECA43248;
  a1[4] = lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerXML and conformance _PlistUnkeyedEncodingContainerXML();
  uint64_t v22 = swift_allocObject();
  *a1 = v22;
  *(void *)(v22 + 16) = v16;
  *(void *)(v22 + 24) = v9;
  *(void *)(v22 + 32) = 0;
  *(unsigned char *)(v22 + 40) = 6;
  *(void *)(v22 + 48) = v18;

  swift_retain();
}

void _PlistUnkeyedEncodingContainerXML.superEncoder()(uint64_t *a1@<X8>)
{
  uint64_t v4 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v5 = *(void *)(v1 + 16);
  int v6 = *(unsigned __int8 *)(v1 + 24);
  if (v6 == 7 || v6 == 6)
  {
    uint64_t v7 = *(void *)(*(void *)(v3 + 16) + 16);
    unint64_t v8 = *(void *)(v4 + 40);
    v11[0] = v3;
    v11[1] = v5;
    char v12 = v6;
    uint64_t v9 = type metadata accessor for __PlistReferencingEncoderXML();
    swift_allocObject();
    swift_retain();
    swift_retain();
    outlined copy of _XMLPlistEncodingFormat.Reference(v3, v5, v6);
    uint64_t v10 = __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)(v4, v7, v8, (uint64_t)v11);
    a1[3] = v9;
    a1[4] = lazy protocol witness table accessor for type __PlistEncoderXML and conformance __PlistEncoderXML(&lazy protocol witness table cache variable for type __PlistReferencingEncoderXML and conformance __PlistEncoderXML, 255, (void (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderXML);
    *a1 = v10;
  }
  else
  {
    __break(1u);
  }
}

uint64_t protocol witness for UnkeyedEncodingContainer.count.getter in conformance _PlistUnkeyedEncodingContainerXML()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 == 7 || v1 == 6) {
    return *(void *)(*(void *)(*(void *)(v0 + 8) + 16) + 16);
  }
  __break(1u);
  return result;
}

void protocol witness for UnkeyedEncodingContainer.encodeNil() in conformance _PlistUnkeyedEncodingContainerXML()
{
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerXML(uint64_t a1)
{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerXML(uint64_t a1, uint64_t a2)
{
  return _PlistUnkeyedEncodingContainerXML.encode(_:)(a1, a2);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerXML(double a1)
{
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerXML(float a1)
{
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerXML()
{
  return UnkeyedEncodingContainer.encode(_:)();
}

{
  return UnkeyedEncodingContainer.encode(_:)();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encodeNil()()
{
  if (((*(uint64_t (**)(void))(*(void *)v0 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v4, 1);
    uint64_t v7 = *(void *)v0;
    goto LABEL_5;
  }
  uint64_t v8 = *((void *)v0 + 2);
  v0 += 16;
  uint64_t v7 = v8;
  uint64_t v1 = *((void *)v0 + 5);
  unint64_t v2 = *((void *)v0 + 6);
  char v3 = v0[56];
  outlined copy of _XMLPlistEncodingFormat.Reference(v1, v2, v3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v0 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
    uint64_t v7 = *(void *)v0;
  }
  unint64_t v5 = *(void *)(v7 + 16);
  unint64_t v6 = *(void *)(v7 + 24);
  int64_t v4 = v5 + 1;
  if (v5 >= v6 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v7 + 16) = v4;
  uint64_t v10 = v7 + 24 * v5;
  *(void *)(v10 + 32) = v1;
  *(void *)(v10 + 40) = v2;
  *(unsigned char *)(v10 + 48) = v3;
  *(void *)uint64_t v0 = v7;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::Bool a1)
{
  uint64_t v6 = a1;
  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_15:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v4, 1);
    uint64_t v8 = *v1;
    goto LABEL_13;
  }
  uint64_t v9 = v1[2];
  v1 += 2;
  uint64_t v8 = v9;
  uint64_t v10 = v1 + 8;
  BOOL v11 = (v6 & 1) == 0;
  if ((v6 & 1) == 0) {
    uint64_t v10 = v1 + 11;
  }
  uint64_t v6 = *v10;
  if (v11) {
    char v12 = v1 + 12;
  }
  else {
    char v12 = v1 + 9;
  }
  unint64_t v2 = *v12;
  if (v11) {
    unint64_t v13 = (char *)(v1 + 13);
  }
  else {
    unint64_t v13 = (char *)(v1 + 10);
  }
  char v3 = *v13;
  outlined copy of _XMLPlistEncodingFormat.Reference(v6, v2, *v13);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1);
    uint64_t v8 = *v1;
  }
  unint64_t v5 = *(void *)(v8 + 16);
  unint64_t v7 = *(void *)(v8 + 24);
  int64_t v4 = v5 + 1;
  if (v5 >= v7 >> 1) {
    goto LABEL_15;
  }
LABEL_13:
  *(void *)(v8 + 16) = v4;
  uint64_t v15 = v8 + 24 * v5;
  *(void *)(v15 + 32) = v6;
  *(void *)(v15 + 40) = v2;
  *(unsigned char *)(v15 + 48) = v3;
  void *v1 = v8;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::Int8 a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }
  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
    uint64_t v6 = *v1;
  }
  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0;
  *(unsigned char *)(v9 + 48) = 2;
  void *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::Int16 a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }
  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
    uint64_t v6 = *v1;
  }
  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0;
  *(unsigned char *)(v9 + 48) = 2;
  void *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::Int32 a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }
  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
    uint64_t v6 = *v1;
  }
  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0;
  *(unsigned char *)(v9 + 48) = 2;
  void *v1 = v6;
}

uint64_t __PlistEncoderXML.encode(_:)(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }
  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((result & 1) == 0)
  {
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
    uint64_t v6 = *v1;
  }
  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0;
  *(unsigned char *)(v9 + 48) = 2;
  void *v1 = v6;
  return result;
}

{
  void *v1;
  int64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }
  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((result & 1) == 0)
  {
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
    uint64_t v6 = *v1;
  }
  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0;
  *(unsigned char *)(v9 + 48) = 1;
  void *v1 = v6;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::UInt8 a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }
  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
    uint64_t v6 = *v1;
  }
  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0;
  *(unsigned char *)(v9 + 48) = 1;
  void *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::UInt16 a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }
  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
    uint64_t v6 = *v1;
  }
  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0;
  *(unsigned char *)(v9 + 48) = 1;
  void *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::UInt32 a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }
  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
    uint64_t v6 = *v1;
  }
  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0;
  *(unsigned char *)(v9 + 48) = 1;
  void *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::Float a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }
  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
    uint64_t v6 = *v1;
  }
  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(double *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0;
  *(unsigned char *)(v9 + 48) = 3;
  void *v1 = v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistEncoderXML.encode(_:)(Swift::Double a1)
{
  if (((*(uint64_t (**)(void))(*v1 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v2, 1);
    uint64_t v6 = *v1;
    goto LABEL_5;
  }
  uint64_t v7 = v1[2];
  v1 += 2;
  uint64_t v6 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v1 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
    uint64_t v6 = *v1;
  }
  unint64_t v3 = *(void *)(v6 + 16);
  unint64_t v5 = *(void *)(v6 + 24);
  int64_t v2 = v3 + 1;
  if (v3 >= v5 >> 1) {
    goto LABEL_7;
  }
LABEL_5:
  *(void *)(v6 + 16) = v2;
  uint64_t v9 = v6 + 24 * v3;
  *(Swift::Double *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = 0;
  *(unsigned char *)(v9 + 48) = 3;
  void *v1 = v6;
}

uint64_t __PlistEncoderXML.encode<A>(_:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t v7 = v4;
  if (((*(uint64_t (**)(void))(*v3 + 240))() & 1) == 0)
  {
    __break(1u);
LABEL_12:
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, a2, 1);
    uint64_t v14 = *v3;
    goto LABEL_10;
  }
  unint64_t v12 = v3[5];
  swift_retain();
  specialized __PlistEncoderXML.wrapGeneric<A, B>(_:for:_:)(a1, v12, 0, 0, 0, 255, a2, a3, v17);
  if (v7) {
    return swift_release();
  }
  LOBYTE(a1) = v18;
  if (v18 == 255)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
    LOBYTE(a1) = 7;
    a3 = swift_allocObject();
    *(void *)(a3 + 16) = MEMORY[0x1E4FBC868];
    swift_release();
    uint64_t v5 = 0;
  }
  else
  {
    a3 = v17[0];
    uint64_t v5 = v17[1];
    swift_release();
  }
  uint64_t v15 = v3[2];
  v3 += 2;
  uint64_t v14 = v15;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v3 = v15;
  if ((result & 1) == 0)
  {
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1);
    uint64_t v14 = *v3;
  }
  unint64_t v6 = *(void *)(v14 + 16);
  unint64_t v11 = *(void *)(v14 + 24);
  a2 = v6 + 1;
  if (v6 >= v11 >> 1) {
    goto LABEL_12;
  }
LABEL_10:
  *(void *)(v14 + 16) = a2;
  uint64_t v16 = v14 + 24 * v6;
  *(void *)(v16 + 32) = a3;
  *(void *)(v16 + 40) = v5;
  *(unsigned char *)(v16 + 48) = a1;
  *unint64_t v3 = v14;
  return result;
}

void protocol witness for SingleValueEncodingContainer.encodeNil() in conformance __PlistEncoderXML()
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::Bool a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::Double a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::Float a1)
{
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(uint64_t a1)
{
  return __PlistEncoderXML.encode(_:)(a1);
}

{
  return __PlistEncoderXML.encode(_:)(a1);
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(a1);
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(a1);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::Int8 a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::Int16 a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::Int32 a1)
{
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML()
{
  return SingleValueEncodingContainer.encode(_:)();
}

{
  return SingleValueEncodingContainer.encode(_:)();
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::UInt8 a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::UInt16 a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderXML(Swift::UInt32 a1)
{
}

uint64_t protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance __PlistEncoderXML(uint64_t a1, int64_t a2, uint64_t a3)
{
  return __PlistEncoderXML.encode<A>(_:)(a1, a2, a3);
}

uint64_t __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(unsigned __int8 *)(a4 + 16);
  *(void *)(v4 + 128) = a1;
  *(_OWORD *)(v4 + 136) = *(_OWORD *)a4;
  *(void *)(v4 + 152) = v7;
  *(void *)(v4 + 160) = a2;
  *(void *)(v4 + 168) = 0;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v10 = (void *)swift_allocObject();
  v10[5] = &type metadata for _CodingKey;
  v10[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t result = swift_allocObject();
  v10[2] = result;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = a2;
  *(unsigned char *)(result + 40) = 2;
  unint64_t v12 = a3 >> 62;
  v10[7] = a3;
  if (a3 >> 62)
  {
    uint64_t v13 = 0;
    if (v12 != 1) {
      goto LABEL_6;
    }
    uint64_t v14 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v14 = (uint64_t *)(a3 + 64);
  }
  uint64_t v13 = *v14;
  uint64_t result = swift_retain();
LABEL_6:
  if (!__OFADD__(v13, 1))
  {
    v10[8] = v13 + 1;
    if (v12)
    {
      if (v12 != 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v15 = 0;
        goto LABEL_13;
      }
      uint64_t v15 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
    }
    else
    {
      uint64_t v15 = *(void *)(a3 + 64);
    }
    swift_bridgeObjectRetain();
    swift_release();
LABEL_13:
    *(void *)(v4 + 16) = MEMORY[0x1E4FBC860];
    *(void *)(v4 + 24) = v9;
    *(void *)(v4 + 32) = v8;
    *(void *)(v4 + 40) = v10;
    *(void *)(v4 + 56) = 0;
    *(void *)(v4 + 64) = 0;
    *(void *)(v4 + 48) = v15;
    *(unsigned char *)(v4 + 72) = 8;
    *(_OWORD *)(v4 + 80) = xmmword_18210C780;
    *(unsigned char *)(v4 + 96) = 8;
    *(_OWORD *)(v4 + 104) = xmmword_18210F2A0;
    *(unsigned char *)(v4 + 120) = 8;
    return v4;
  }
  __break(1u);
  return result;
}

BOOL __PlistReferencingEncoderXML.canEncodeNewValue.getter()
{
  uint64_t v1 = *(void *)(v0[2] + 16);
  unint64_t v2 = v0[5];
  swift_retain();
  uint64_t v3 = _CodingPathNode.path.getter(v2);
  swift_release();
  uint64_t v4 = *(void *)(v3 + 16);
  swift_bridgeObjectRelease();
  unint64_t v5 = *(void *)(v0[16] + 40);
  swift_retain();
  uint64_t v6 = _CodingPathNode.path.getter(v5);
  swift_release();
  uint64_t v7 = *(void *)(v6 + 16);
  swift_bridgeObjectRelease();
  return v1 == v4 + ~v7;
}

uint64_t __PlistReferencingEncoderXML.__ivar_destroyer()
{
  swift_release();
  uint64_t v1 = v0[17];
  unint64_t v2 = v0[18];
  uint64_t v3 = v0[19];

  return outlined consume of __PlistReferencingEncoderXML.Reference(v1, v2, v3);
}

uint64_t __PlistReferencingEncoderXML.__deallocating_deinit()
{
  uint64_t v3 = v0;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + 16;
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6 == 1)
  {
    specialized ContiguousArray._customRemoveLast()((uint64_t)&v65);
    char v9 = v67;
    if (v67 == 255)
    {
      specialized ContiguousArray.remove(at:)(*(void *)(*(void *)v4 + 16) - 1, (uint64_t)&v65);
      uint64_t v11 = v65;
      unint64_t v10 = v66;
      char v9 = v67;
    }
    else
    {
      uint64_t v11 = v65;
      unint64_t v10 = v66;
    }
  }
  else
  {
    if (v6) {
      goto LABEL_70;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _XMLPlistEncodingFormat.Reference.Box<[_XMLPlistEncodingFormat.Reference : _XMLPlistEncodingFormat.Reference]>);
    char v9 = 7;
    uint64_t v11 = swift_allocObject();
    unint64_t v10 = 0;
    *(void *)(v11 + 16) = MEMORY[0x1E4FBC868];
  }
  uint64_t v12 = *(void *)(v3 + 136);
  uint64_t v13 = *(void *)(v3 + 152);
  uint64_t v14 = *(void *)(v3 + 160);
  if ((v13 & 0x8000000000000000) == 0)
  {
    if (*(void *)(v3 + 152) == 6)
    {
      uint64_t v15 = *(void *)(v12 + 16);
      v12 += 16;
      if (*(void *)(v15 + 16) < v14)
      {
        __break(1u);
      }
      else if ((v14 & 0x8000000000000000) == 0)
      {
        specialized ContiguousArray.replaceSubrange<A>(_:with:)(*(void *)(v3 + 160), *(void *)(v3 + 160), v11, v10, v9);
LABEL_63:
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v49 = *(void *)(v3 + 80);
        unint64_t v50 = *(void *)(v3 + 88);
        uint64_t v51 = *(void *)(v3 + 104);
        unint64_t v52 = *(void *)(v3 + 112);
        char v53 = *(unsigned char *)(v3 + 96);
        char v54 = *(unsigned char *)(v3 + 120);
        outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)(v3 + 56), *(void *)(v3 + 64), *(unsigned char *)(v3 + 72));
        outlined consume of _XMLPlistEncodingFormat.Reference(v49, v50, v53);
        outlined consume of _XMLPlistEncodingFormat.Reference(v51, v52, v54);
        swift_release();
        outlined consume of __PlistReferencingEncoderXML.Reference(*(void *)(v3 + 136), *(void *)(v3 + 144), *(void *)(v3 + 152));
        return swift_deallocClassInstance();
      }
      __break(1u);
      goto LABEL_23;
    }
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  if (*(void *)(v3 + 152) != 7) {
    goto LABEL_68;
  }
  unint64_t v16 = *(void *)(v3 + 144);
  unint64_t v1 = *(void *)(v3 + 168);
  outlined copy of _XMLPlistEncodingFormat.Reference(v11, v10, v9);
  outlined copy of _XMLPlistEncodingFormat.Reference(v11, v10, v9);
  outlined copy of __PlistReferencingEncoderXML.Reference(v12, v16, v13);
  unint64_t v64 = v16;
  outlined copy of _XMLPlistEncodingFormat.Reference(v12, v16, 7);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v65 = *(void *)(v12 + 16);
  uint64_t v2 = v65;
  *(void *)(v12 + 16) = 0x8000000000000000;
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v1, 0);
  uint64_t v18 = *(void *)(v2 + 16);
  BOOL v19 = (v7 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (*(void *)(v2 + 24) < v20)
  {
    char v21 = v7;
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
    uint64_t v22 = v65;
    uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v1, 0);
    if ((v21 & 1) != (v24 & 1)) {
      goto LABEL_71;
    }
    unint64_t v8 = v23;
    char v25 = v21;
    unint64_t v26 = v64;
    if ((v25 & 1) == 0) {
      goto LABEL_61;
    }
    goto LABEL_20;
  }
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v22 = v2;
    unint64_t v26 = v64;
    if ((v7 & 1) == 0)
    {
LABEL_61:
      specialized _NativeDictionary._insert(at:key:value:)(v8, v14, v1, 0, v11, v10, v9, (void *)v22);
      swift_bridgeObjectRetain();
      goto LABEL_62;
    }
LABEL_20:
    uint64_t v27 = *(void *)(v22 + 56) + 24 * v8;
    outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)v27, *(void *)(v27 + 8), *(unsigned char *)(v27 + 16));
    *(void *)uint64_t v27 = v11;
    *(void *)(v27 + 8) = v10;
    *(unsigned char *)(v27 + 16) = v9;
LABEL_62:
    *(void *)(v12 + 16) = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of _XMLPlistEncodingFormat.Reference(v12, v26, 7);
    outlined consume of _XMLPlistEncodingFormat.Reference(v11, v10, v9);
    swift_bridgeObjectRelease();
    outlined consume of _XMLPlistEncodingFormat.Reference(v11, v10, v9);
    outlined consume of _XMLPlistEncodingFormat.Reference(v12, v26, 7);
    goto LABEL_63;
  }
LABEL_24:
  unint64_t v56 = v8;
  char v57 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<_XMLPlistEncodingFormat.Reference, _XMLPlistEncodingFormat.Reference>);
  uint64_t v28 = static _DictionaryStorage.copy(original:)();
  uint64_t v22 = v28;
  if (!*(void *)(v2 + 16))
  {
LABEL_60:
    swift_bridgeObjectRelease();
    unint64_t v26 = v64;
    unint64_t v8 = v56;
    if ((v57 & 1) == 0) {
      goto LABEL_61;
    }
    goto LABEL_20;
  }
  unint64_t v29 = (char *)(v28 + 64);
  __src = (char *)(v2 + 64);
  unint64_t v30 = (unint64_t)((1 << *(unsigned char *)(v22 + 32)) + 63) >> 6;
  if (v22 != v2 || v29 >= &__src[8 * v30]) {
    memmove(v29, __src, 8 * v30);
  }
  int64_t v60 = 0;
  *(void *)(v22 + 16) = *(void *)(v2 + 16);
  uint64_t v31 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v32 = -1;
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  unint64_t v63 = v32 & *(void *)(v2 + 64);
  int64_t v58 = (unint64_t)(v31 + 63) >> 6;
  while (1)
  {
    if (v63)
    {
      unint64_t v33 = __clz(__rbit64(v63));
      v63 &= v63 - 1;
      unint64_t v34 = v33 | (v60 << 6);
      goto LABEL_32;
    }
    int64_t v45 = v60 + 1;
    if (__OFADD__(v60, 1)) {
      goto LABEL_67;
    }
    if (v45 >= v58) {
      goto LABEL_60;
    }
    unint64_t v46 = *(void *)&__src[8 * v45];
    int64_t v47 = v60 + 1;
    if (!v46)
    {
      int64_t v47 = v60 + 2;
      if (v60 + 2 >= v58) {
        goto LABEL_60;
      }
      unint64_t v46 = *(void *)&__src[8 * v47];
      if (!v46)
      {
        int64_t v47 = v60 + 3;
        if (v60 + 3 >= v58) {
          goto LABEL_60;
        }
        unint64_t v46 = *(void *)&__src[8 * v47];
        if (!v46)
        {
          int64_t v47 = v60 + 4;
          if (v60 + 4 >= v58) {
            goto LABEL_60;
          }
          unint64_t v46 = *(void *)&__src[8 * v47];
          if (!v46)
          {
            int64_t v47 = v60 + 5;
            if (v60 + 5 >= v58) {
              goto LABEL_60;
            }
            unint64_t v46 = *(void *)&__src[8 * v47];
            if (!v46)
            {
              int64_t v47 = v60 + 6;
              if (v60 + 6 >= v58) {
                goto LABEL_60;
              }
              unint64_t v46 = *(void *)&__src[8 * v47];
              if (!v46)
              {
                int64_t v47 = v60 + 7;
                if (v60 + 7 >= v58) {
                  goto LABEL_60;
                }
                unint64_t v46 = *(void *)&__src[8 * v47];
                if (!v46)
                {
                  int64_t v47 = v60 + 8;
                  if (v60 + 8 >= v58) {
                    goto LABEL_60;
                  }
                  unint64_t v46 = *(void *)&__src[8 * v47];
                  if (!v46)
                  {
                    int64_t v47 = v60 + 9;
                    if (v60 + 9 >= v58) {
                      goto LABEL_60;
                    }
                    unint64_t v46 = *(void *)&__src[8 * v47];
                    if (!v46) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_59:
    unint64_t v63 = (v46 - 1) & v46;
    int64_t v60 = v47;
    unint64_t v34 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_32:
    uint64_t v35 = 24 * v34;
    uint64_t v36 = *(void *)(v2 + 48) + v35;
    uint64_t v37 = *(void *)v36;
    unint64_t v38 = *(void *)(v36 + 8);
    uint64_t v39 = *(void *)(v2 + 56) + v35;
    uint64_t v61 = *(void *)v39;
    uint64_t v40 = *(void *)v39;
    unint64_t v62 = *(void *)(v39 + 8);
    uint64_t v41 = *(void *)(v22 + 48) + v35;
    char v42 = *(unsigned char *)(v36 + 16);
    char v43 = *(unsigned char *)(v39 + 16);
    *(void *)uint64_t v41 = *(void *)v36;
    *(void *)(v41 + 8) = v38;
    *(unsigned char *)(v41 + 16) = v42;
    uint64_t v44 = *(void *)(v22 + 56) + v35;
    *(void *)uint64_t v44 = v40;
    *(void *)(v44 + 8) = v62;
    *(unsigned char *)(v44 + 16) = v43;
    outlined copy of _XMLPlistEncodingFormat.Reference(v37, v38, v42);
    outlined copy of _XMLPlistEncodingFormat.Reference(v61, v62, v43);
  }
  int64_t v48 = v60 + 10;
  if (v60 + 10 >= v58) {
    goto LABEL_60;
  }
  unint64_t v46 = *(void *)&__src[8 * v48];
  if (v46)
  {
    int64_t v47 = v60 + 10;
    goto LABEL_59;
  }
  while (1)
  {
    int64_t v47 = v48 + 1;
    if (__OFADD__(v48, 1)) {
      break;
    }
    if (v47 >= v58) {
      goto LABEL_60;
    }
    unint64_t v46 = *(void *)&__src[8 * v47];
    ++v48;
    if (v46) {
      goto LABEL_59;
    }
  }
LABEL_69:
  __break(1u);
LABEL_70:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_71:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for __PlistReferencingEncoderXML()
{
  return self;
}

uint64_t outlined copy of __PlistReferencingEncoderXML.Reference(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    outlined copy of _XMLPlistEncodingFormat.Reference(a1, a2, a3);
    return swift_bridgeObjectRetain();
  }
  else
  {
    return outlined copy of _XMLPlistEncodingFormat.Reference(a1, a2, a3);
  }
}

uint64_t destroy for __PlistReferencingEncoderXML.Reference(uint64_t a1)
{
  return outlined consume of __PlistReferencingEncoderXML.Reference(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t outlined consume of __PlistReferencingEncoderXML.Reference(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    outlined consume of _XMLPlistEncodingFormat.Reference(a1, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return outlined consume of _XMLPlistEncodingFormat.Reference(a1, a2, a3);
  }
}

uint64_t *initializeWithCopy for __PlistReferencingEncoderXML.Reference(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  outlined copy of __PlistReferencingEncoderXML.Reference(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

uint64_t *assignWithCopy for __PlistReferencingEncoderXML.Reference(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  outlined copy of __PlistReferencingEncoderXML.Reference(*a2, v4, v5);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  outlined consume of __PlistReferencingEncoderXML.Reference(v8, v9, v10);
  return a1;
}

uint64_t *assignWithTake for __PlistReferencingEncoderXML.Reference(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v7;
  a1[4] = v3;
  outlined consume of __PlistReferencingEncoderXML.Reference(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for __PlistReferencingEncoderXML.Reference(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 16) >> 4;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for __PlistReferencingEncoderXML.Reference(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = 0;
      *(void *)(result + 16) = 16 * -a2;
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for __PlistReferencingEncoderXML.Reference(uint64_t a1)
{
  return *(void *)(a1 + 16) >> 63;
}

uint64_t destructiveProjectEnumData for __PlistReferencingEncoderXML.Reference(uint64_t result)
{
  *(void *)(result + 16) &= ~0x8000000000000000;
  return result;
}

uint64_t destructiveInjectEnumTag for __PlistReferencingEncoderXML.Reference(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = *(void *)(result + 16) & 0xFLL | (a2 << 63);
  return result;
}

void *type metadata accessor for __PlistReferencingEncoderXML.Reference()
{
  return &unk_1ECA41BD8;
}

uint64_t destroy for _XMLPlistEncodingFormat(uint64_t a1)
{
  outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 56);
  char v4 = *(unsigned char *)(a1 + 64);

  return outlined consume of _XMLPlistEncodingFormat.Reference(v2, v3, v4);
}

uint64_t initializeWithCopy for _XMLPlistEncodingFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of _XMLPlistEncodingFormat.Reference(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(v2 + 24);
  unint64_t v8 = *(void *)(v2 + 32);
  char v9 = *(unsigned char *)(v2 + 40);
  outlined copy of _XMLPlistEncodingFormat.Reference(v7, v8, v9);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  uint64_t v10 = *(void *)(v2 + 48);
  unint64_t v11 = *(void *)(v2 + 56);
  LOBYTE(v2) = *(unsigned char *)(v2 + 64);
  outlined copy of _XMLPlistEncodingFormat.Reference(v10, v11, v2);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v2;
  return a1;
}

uint64_t assignWithCopy for _XMLPlistEncodingFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of _XMLPlistEncodingFormat.Reference(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  char v9 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of _XMLPlistEncodingFormat.Reference(v7, v8, v9);
  uint64_t v10 = *(void *)(v2 + 24);
  unint64_t v11 = *(void *)(v2 + 32);
  char v12 = *(unsigned char *)(v2 + 40);
  outlined copy of _XMLPlistEncodingFormat.Reference(v10, v11, v12);
  uint64_t v13 = *(void *)(a1 + 24);
  unint64_t v14 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  char v15 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v12;
  outlined consume of _XMLPlistEncodingFormat.Reference(v13, v14, v15);
  uint64_t v16 = *(void *)(v2 + 48);
  unint64_t v17 = *(void *)(v2 + 56);
  LOBYTE(v2) = *(unsigned char *)(v2 + 64);
  outlined copy of _XMLPlistEncodingFormat.Reference(v16, v17, v2);
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v17;
  char v20 = *(unsigned char *)(a1 + 64);
  *(unsigned char *)(a1 + 64) = v2;
  outlined consume of _XMLPlistEncodingFormat.Reference(v18, v19, v20);
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for _XMLPlistEncodingFormat(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v7 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, v7);
  char v8 = *(unsigned char *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 24);
  unint64_t v10 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  char v11 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v8;
  outlined consume of _XMLPlistEncodingFormat.Reference(v9, v10, v11);
  char v12 = *(unsigned char *)(a2 + 64);
  uint64_t v13 = *(void *)(a1 + 48);
  unint64_t v14 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  char v15 = *(unsigned char *)(a1 + 64);
  *(unsigned char *)(a1 + 64) = v12;
  outlined consume of _XMLPlistEncodingFormat.Reference(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for _XMLPlistEncodingFormat(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF8 && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 248);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 8) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _XMLPlistEncodingFormat(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF7)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 248;
    if (a3 >= 0xF8) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF8) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _XMLPlistEncodingFormat()
{
  return &type metadata for _XMLPlistEncodingFormat;
}

void *type metadata accessor for _PlistEncodingStorageXML()
{
  return &unk_1ECA403C0;
}

_UNKNOWN **associated type witness table accessor for PlistEncodingFormat.Writer : PlistWriting in _XMLPlistEncodingFormat()
{
  return &protocol witness table for _XMLPlistEncodingFormat.Writer;
}

_UNKNOWN **associated type witness table accessor for PlistWriting.Reference : PlistEncodingReference in _XMLPlistEncodingFormat.Writer()
{
  return &protocol witness table for _XMLPlistEncodingFormat.Reference;
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendOpen(_:withNewLine:)(Foundation::XMLPlistTag _, Swift::Bool withNewLine)
{
  uint64_t v7 = 60;
  unint64_t v8 = 0xE100000000000000;
  specialized String.withUTF8<A>(_:)(&v7);
  swift_bridgeObjectRelease();
  int v4 = (char *)XMLPlistTag.tagName.getter(_);
  _XMLPlistEncodingFormat.Writer.append(_:)(v4, v5, v6);
  if (withNewLine)
  {
    uint64_t v7 = 2622;
    unint64_t v8 = 0xE200000000000000;
  }
  else
  {
    uint64_t v7 = 62;
    unint64_t v8 = 0xE100000000000000;
  }
  specialized String.withUTF8<A>(_:)(&v7);
  swift_bridgeObjectRelease();
}

uint64_t _XMLPlistEncodingFormat.Writer.append(_:)(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  v6[0] = a1;
  v6[1] = a2;
  swift_bridgeObjectRetain();
  a3(v6, v3);

  return swift_bridgeObjectRelease();
}

uint64_t _XMLPlistEncodingFormat.Writer.appendArray(_:indentation:)(uint64_t a1, Swift::Int a2)
{
  uint64_t v3 = v2;
  v117[36] = *MEMORY[0x1E4F143B8];
  uint64_t v94 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    v117[0] = 60;
    v117[1] = 0xE100000000000000;
    specialized String.withUTF8<A>(_:)(v117);
    swift_bridgeObjectRelease();
    _XMLPlistEncodingFormat.Writer.append(_:)("array", 5);
    v117[0] = 671279;
    v117[1] = 0xE300000000000000;
    specialized String.withUTF8<A>(_:)(v117);
    return swift_bridgeObjectRelease();
  }
  v117[0] = 60;
  v117[1] = 0xE100000000000000;
  Swift::Int v91 = a2;
  specialized String.withUTF8<A>(_:)(v117);
  swift_bridgeObjectRelease();
  _XMLPlistEncodingFormat.Writer.append(_:)("array", 5);
  v117[0] = 2622;
  v117[1] = 0xE200000000000000;
  specialized String.withUTF8<A>(_:)(v117);
  swift_bridgeObjectRelease();
  Swift::Int v5 = v91 + 1;
  if (__OFADD__(v91, 1)) {
    goto LABEL_107;
  }
  uint64_t v100 = v94 + 32;
  uint64_t v95 = v3 + 24;
  Swift::Int v6 = 8;
  if (v5 < 8) {
    Swift::Int v6 = v91 + 1;
  }
  Swift::Int v97 = v6;
  swift_retain();
  uint64_t v7 = 0;
  long long v93 = xmmword_1822056F0;
  long long v92 = xmmword_182205700;
  uint64_t v98 = v4;
  uint64_t v96 = v3;
  Swift::Int v101 = v91 + 1;
  while (2)
  {
    uint64_t v12 = v100 + 24 * v7;
    uint64_t v13 = *(uint64_t *)v12;
    unint64_t v14 = *(void *)(v12 + 8);
    uint64_t v102 = v7 + 1;
    uint64_t v15 = *(unsigned __int8 *)(v12 + 16);
    outlined copy of _XMLPlistEncodingFormat.Reference(v13, v14, *(unsigned char *)(v12 + 16));
    _XMLPlistEncodingFormat.Writer.appendIndents(_:)(v5);
    switch(v15)
    {
      case 1:
        *(void *)&v116[0] = 60;
        *((void *)&v116[0] + 1) = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v116);
        swift_bridgeObjectRelease();
        _XMLPlistEncodingFormat.Writer.append(_:)("integer", 7);
        *(void *)&v116[0] = 62;
        *((void *)&v116[0] + 1) = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v116);
        swift_bridgeObjectRelease();
        *(void *)&v116[0] = v13;
        lazy protocol witness table accessor for type UInt64 and conformance UInt64();
        goto LABEL_32;
      case 2:
        *(void *)&v116[0] = 60;
        *((void *)&v116[0] + 1) = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v116);
        swift_bridgeObjectRelease();
        _XMLPlistEncodingFormat.Writer.append(_:)("integer", 7);
        *(void *)&v116[0] = 62;
        *((void *)&v116[0] + 1) = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v116);
        swift_bridgeObjectRelease();
        *(void *)&v116[0] = v13;
        lazy protocol witness table accessor for type Int64 and conformance Int64();
LABEL_32:
        *(void *)&v116[0] = BinaryInteger.description.getter();
        *((void *)&v116[0] + 1) = v37;
        swift_bridgeObjectRetain();
        specialized String.withUTF8<A>(_:)((uint64_t *)v116);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)&v116[0] = 12092;
        *((void *)&v116[0] + 1) = 0xE200000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v116);
        swift_bridgeObjectRelease();
        unint64_t v38 = "integer";
        uint64_t v39 = 7;
        goto LABEL_63;
      case 3:
        *(void *)&v116[0] = 60;
        *((void *)&v116[0] + 1) = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v116);
        swift_bridgeObjectRelease();
        _XMLPlistEncodingFormat.Writer.append(_:)("real", 4);
        *(void *)&v116[0] = 62;
        *((void *)&v116[0] + 1) = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v116);
        swift_bridgeObjectRelease();
        if ((v13 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000)
        {
          uint64_t v35 = 0x74696E69666E692DLL;
          if (*(double *)&v13 > 0.0) {
            uint64_t v35 = 0x74696E69666E692BLL;
          }
          unint64_t v36 = 0xE900000000000079;
          goto LABEL_62;
        }
        uint64_t v61 = Double.description.getter();
        unint64_t v63 = v62;
        *(void *)&v116[0] = v61;
        *((void *)&v116[0] + 1) = v62;
        swift_bridgeObjectRetain();
        v64._uint64_t countAndFlagsBits = 12334;
        v64._unint64_t object = (void *)0xE200000000000000;
        Swift::Bool v65 = String.hasSuffix(_:)(v64);
        swift_bridgeObjectRelease();
        if (!v65) {
          goto LABEL_61;
        }
        if ((v63 & 0x2000000000000000) != 0) {
          uint64_t v66 = HIBYTE(v63) & 0xF;
        }
        else {
          uint64_t v66 = v61 & 0xFFFFFFFFFFFFLL;
        }
        unint64_t v67 = String.index(_:offsetBy:limitedBy:)();
        if ((v68 & 1) == 0)
        {
          if (4 * v66 < v67 >> 14) {
            goto LABEL_108;
          }
          String.removeSubrange(_:)();
LABEL_61:
          unint64_t v36 = *((void *)&v116[0] + 1);
          uint64_t v35 = *(void *)&v116[0];
LABEL_62:
          *(void *)&v116[0] = v35;
          *((void *)&v116[0] + 1) = v36;
          swift_bridgeObjectRetain();
          specialized String.withUTF8<A>(_:)((uint64_t *)v116);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)&v116[0] = 12092;
          *((void *)&v116[0] + 1) = 0xE200000000000000;
          specialized String.withUTF8<A>(_:)((uint64_t *)v116);
          swift_bridgeObjectRelease();
          unint64_t v38 = "real";
          uint64_t v39 = 4;
LABEL_63:
          _XMLPlistEncodingFormat.Writer.append(_:)(v38, v39);
          *(void *)&v116[0] = 2622;
          *((void *)&v116[0] + 1) = 0xE200000000000000;
          specialized String.withUTF8<A>(_:)((uint64_t *)v116);
          swift_bridgeObjectRelease();
          goto LABEL_8;
        }
        goto LABEL_123;
      case 4:
        *(void *)&v116[0] = 60;
        *((void *)&v116[0] + 1) = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v116);
        swift_bridgeObjectRelease();
        _XMLPlistEncodingFormat.Writer.append(_:)("date", 4);
        *(void *)&v116[0] = 62;
        *((void *)&v116[0] + 1) = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v116);
        uint64_t v16 = swift_bridgeObjectRelease();
        if (one-time initialization token for cache != -1) {
          uint64_t v16 = swift_once();
        }
        unint64_t v17 = (os_unfair_lock_s *)static CalendarCache.cache;
        MEMORY[0x1F4188790](v16);
        *((unsigned char *)&v90 - 16) = 7;
        swift_retain_n();
        os_unfair_lock_lock(v17 + 15);
        closure #1 in CalendarCache.fixed(_:)partial apply((uint64_t)&v17[4], v116);
        os_unfair_lock_unlock(v17 + 15);
        uint64_t v18 = swift_release_n();
        long long v106 = v116[0];
        if (one-time initialization token for cache != -1) {
          uint64_t v18 = swift_once();
        }
        unint64_t v19 = (os_unfair_lock_s *)static TimeZoneCache.cache;
        MEMORY[0x1F4188790](v18);
        *(&v90 - 2) = 0;
        swift_retain_n();
        os_unfair_lock_lock(v19 + 36);
        closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v19[4], v116);
        os_unfair_lock_unlock(v19 + 36);
        swift_release_n();
        if (!*(void *)&v116[0]) {
          goto LABEL_116;
        }
        Calendar.timeZone.setter((uint64_t *)v116);
        long long v99 = v106;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
        uint64_t v20 = static _SetStorage.allocate(capacity:)();
        uint64_t v21 = 0;
        uint64_t v22 = v20 + 56;
        while (1)
        {
          Swift::UInt v26 = outlined read-only object #0 of _XMLPlistEncodingFormat.Writer.appendArray(_:indentation:)[v21 + 32];
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v26);
          Swift::Int v27 = Hasher._finalize()();
          uint64_t v28 = -1 << *(unsigned char *)(v20 + 32);
          unint64_t v29 = v27 & ~v28;
          unint64_t v30 = v29 >> 6;
          uint64_t v31 = *(void *)(v22 + 8 * (v29 >> 6));
          uint64_t v32 = 1 << v29;
          uint64_t v33 = *(void *)(v20 + 48);
          if (((1 << v29) & v31) != 0)
          {
            if (*(unsigned __int8 *)(v33 + v29) == v26) {
              goto LABEL_19;
            }
            uint64_t v34 = ~v28;
            while (1)
            {
              unint64_t v29 = (v29 + 1) & v34;
              unint64_t v30 = v29 >> 6;
              uint64_t v31 = *(void *)(v22 + 8 * (v29 >> 6));
              uint64_t v32 = 1 << v29;
              if ((v31 & (1 << v29)) == 0) {
                break;
              }
              if (*(unsigned __int8 *)(v33 + v29) == v26) {
                goto LABEL_19;
              }
            }
          }
          *(void *)(v22 + 8 * v30) = v32 | v31;
          *(unsigned char *)(v33 + v29) = v26;
          uint64_t v23 = *(void *)(v20 + 16);
          BOOL v24 = __OFADD__(v23, 1);
          uint64_t v25 = v23 + 1;
          if (v24)
          {
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
            goto LABEL_117;
          }
          *(void *)(v20 + 16) = v25;
LABEL_19:
          if (++v21 == 7)
          {
            long long v115 = v99;
            swift_unknownObjectRetain();
            uint64_t v48 = swift_retain();
            Calendar.ComponentSet.init(_:)(v48, v103);
            if (*(double *)&v13 <= 1.59271755e13) {
              double v49 = *(double *)&v13;
            }
            else {
              double v49 = 1.59271755e13;
            }
            double v113 = fmax(v49, -2.11845067e11);
            Calendar._dateComponents(_:from:)(v103, &v113, v116);
            swift_unknownObjectRelease();
            swift_release();
            unint64_t v50 = memcpy(v117, v116, 0x11AuLL);
            uint64_t v51 = (os_unfair_lock_s *)static TimeZoneCache.cache;
            MEMORY[0x1F4188790](v50);
            *(&v90 - 2) = 0;
            swift_retain_n();
            os_unfair_lock_lock(v51 + 36);
            closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v51[4], v116);
            os_unfair_lock_unlock(v51 + 36);
            uint64_t v52 = swift_release_n();
            uint64_t v53 = *(void *)&v116[0];
            if (*(void *)&v116[0])
            {
              *(void *)&long long v99 = &v90;
              uint64_t v54 = *((void *)&v116[0] + 1);
              uint64_t v55 = (os_unfair_lock_s *)static TimeZoneCache.cache;
              MEMORY[0x1F4188790](v52);
              *(&v90 - 2) = 0;
              swift_retain_n();
              os_unfair_lock_lock(v55 + 36);
              closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v55[4], v116);
              os_unfair_lock_unlock(v55 + 36);
              swift_release_n();
              if (*(void *)&v116[0])
              {
                swift_unknownObjectRetain();
                swift_unknownObjectRelease();
                *(void *)&v116[0] = v53;
                *((void *)&v116[0] + 1) = v54;
                uint64_t v3 = v96;
                if (one-time initialization token for cache != -1) {
                  swift_once();
                }
                type metadata accessor for _LocaleUnlocalized();
                swift_retain();
                uint64_t inited = swift_initStaticObject();
                swift_release();
                uint64_t v57 = lazy protocol witness table accessor for type __PlistEncoderXML and conformance __PlistEncoderXML((unint64_t *)&lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized, 255, (void (*)(uint64_t))type metadata accessor for _LocaleUnlocalized);
                *(void *)&long long v115 = inited;
                *((void *)&v115 + 1) = v57;
                double v113 = 0.0;
                char v114 = 1;
                type metadata accessor for _CalendarGregorian();
                swift_allocObject();
                _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)&v105, (uint64_t *)v116, &v115, 2, 0, 4, 0, (uint64_t)&v113);
                int v107 = 0x10000;
                char v108 = 1;
                uint64_t v109 = 0;
                uint64_t v110 = v58;
                uint64_t v111 = v53;
                uint64_t v112 = v54;
                char v104 = 0;
                MEMORY[0x1F4188790](v58);
                closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)((uint64_t)(&v90 - 18), 129, (uint64_t)&v107, (uint64_t)v117, &v104, 0, 0, v103);
                uint64_t v59 = v103[0];
                uint64_t v60 = v103[1];
                swift_unknownObjectRelease();
                swift_release();
                *(void *)&v116[0] = v59;
                *((void *)&v116[0] + 1) = v60;
                swift_bridgeObjectRetain();
                specialized String.withUTF8<A>(_:)((uint64_t *)v116);
                swift_bridgeObjectRelease();
                outlined release of DateComponents((uint64_t)v117);
                swift_bridgeObjectRelease();
                swift_unknownObjectRelease();
                *(void *)&v116[0] = 12092;
                *((void *)&v116[0] + 1) = 0xE200000000000000;
                specialized String.withUTF8<A>(_:)((uint64_t *)v116);
                swift_bridgeObjectRelease();
                _XMLPlistEncodingFormat.Writer.append(_:)("date", 4);
                *(void *)&v116[0] = 2622;
                *((void *)&v116[0] + 1) = 0xE200000000000000;
                specialized String.withUTF8<A>(_:)((uint64_t *)v116);
                swift_bridgeObjectRelease();
                outlined consume of _XMLPlistEncodingFormat.Reference(v13, v14, 4);
                uint64_t v4 = v98;
                goto LABEL_8;
              }
LABEL_118:
              __break(1u);
            }
LABEL_117:
            __break(1u);
            goto LABEL_118;
          }
        }
      case 5:
        *(void *)&v116[0] = 60;
        *((void *)&v116[0] + 1) = 0xE100000000000000;
        outlined copy of Data._Representation(v13, v14);
        specialized String.withUTF8<A>(_:)((uint64_t *)v116);
        swift_bridgeObjectRelease();
        _XMLPlistEncodingFormat.Writer.append(_:)("data", 4);
        *(void *)&v116[0] = 2622;
        *((void *)&v116[0] + 1) = 0xE200000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v116);
        uint64_t v40 = swift_bridgeObjectRelease();
        MEMORY[0x1F4188790](v40);
        *(void *)&long long v106 = &v90 - 10;
        switch(v14 >> 62)
        {
          case 1uLL:
            if (v13 >> 32 < (int)v13) {
              goto LABEL_110;
            }
            uint64_t v82 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
            if (!v82) {
              goto LABEL_122;
            }
            uint64_t v83 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
            if (__OFSUB__((int)v13, v83)) {
              goto LABEL_111;
            }
            if (*(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= (v13 >> 32) - (int)v13) {
              uint64_t v84 = (v13 >> 32) - (int)v13;
            }
            else {
              uint64_t v84 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
            }
            if (v84 < 0) {
              goto LABEL_113;
            }
            double v85 = (unsigned char *)(v82 + (int)v13 - v83);
            outlined copy of _XMLPlistEncodingFormat.Reference(v13, v14, 5);
            uint64_t v86 = v85;
            uint64_t v4 = v98;
            closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(v86, v84, &v106, (uint64_t)(&v90 - 10), v97, v3, (char *)&v90 - 80);
            outlined consume of _XMLPlistEncodingFormat.Reference(v13, v14, 5);
            goto LABEL_92;
          case 2uLL:
            uint64_t v72 = *(void *)(v13 + 16);
            uint64_t v73 = *(void *)(v13 + 24);
            uint64_t v74 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
            if (!v74)
            {
              if (!__OFSUB__(v73, v72)) {
                __break(1u);
              }
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
              goto LABEL_124;
            }
            uint64_t v75 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
            BOOL v24 = __OFSUB__(v72, v75);
            uint64_t v76 = v72 - v75;
            if (v24) {
              goto LABEL_109;
            }
            BOOL v24 = __OFSUB__(v73, v72);
            uint64_t v77 = v73 - v72;
            if (v24) {
              goto LABEL_121;
            }
            if (*(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) >= v77) {
              uint64_t v78 = v77;
            }
            else {
              uint64_t v78 = *(void *)((v14 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
            }
            if (v78 < 0) {
              goto LABEL_112;
            }
            uint64_t v79 = v3;
            char v80 = (unsigned char *)(v74 + v76);
            swift_retain();
            swift_retain();
            uint64_t v81 = v80;
            uint64_t v3 = v79;
            closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(v81, v78, &v106, (uint64_t)(&v90 - 10), v97, v79, (char *)&v90 - 80);
            swift_release();
            swift_release();
            uint64_t v4 = v98;
LABEL_92:
            _XMLPlistEncodingFormat.Writer.appendIndents(_:)(v101);
            *(void *)&v116[0] = 12092;
            *((void *)&v116[0] + 1) = 0xE200000000000000;
            specialized String.withUTF8<A>(_:)((uint64_t *)v116);
            swift_bridgeObjectRelease();
            _XMLPlistEncodingFormat.Writer.append(_:)("data", 4);
            *(void *)&v116[0] = 2622;
            *((void *)&v116[0] + 1) = 0xE200000000000000;
            specialized String.withUTF8<A>(_:)((uint64_t *)v116);
            swift_bridgeObjectRelease();
            outlined consume of _XMLPlistEncodingFormat.Reference(v13, v14, 5);
            uint64_t v9 = v13;
            unint64_t v10 = v14;
            char v11 = 5;
LABEL_7:
            outlined consume of _XMLPlistEncodingFormat.Reference(v9, v10, v11);
LABEL_8:
            Swift::Int v5 = v101;
            uint64_t v7 = v102;
            if (v102 != v4) {
              continue;
            }
            swift_release();
            _XMLPlistEncodingFormat.Writer.appendIndents(_:)(v91);
            *(void *)&v116[0] = 12092;
            *((void *)&v116[0] + 1) = 0xE200000000000000;
            specialized String.withUTF8<A>(_:)((uint64_t *)v116);
            swift_bridgeObjectRelease();
            _XMLPlistEncodingFormat.Writer.append(_:)("array", 5);
            *(void *)&v116[0] = 2622;
            *((void *)&v116[0] + 1) = 0xE200000000000000;
            specialized String.withUTF8<A>(_:)((uint64_t *)v116);
            return swift_bridgeObjectRelease();
          case 3uLL:
            *(void *)((char *)v116 + 6) = 0;
            *(void *)&v116[0] = 0;
            uint64_t v41 = 0;
            goto LABEL_91;
          default:
            *(void *)&v116[0] = v13;
            WORD4(v116[0]) = v14;
            BYTE10(v116[0]) = BYTE2(v14);
            BYTE11(v116[0]) = BYTE3(v14);
            BYTE12(v116[0]) = BYTE4(v14);
            uint64_t v41 = BYTE6(v14);
            BYTE13(v116[0]) = BYTE5(v14);
LABEL_91:
            closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(v116, v41, &v106, (uint64_t)(&v90 - 10), v97, v3, (char *)&v90 - 80);
            goto LABEL_92;
        }
      case 6:
        outlined copy of _XMLPlistEncodingFormat.Reference(v13, v14, 6);
        uint64_t v42 = swift_retain();
        _XMLPlistEncodingFormat.Writer.appendArray(_:indentation:)(v42, v101);
        outlined consume of _XMLPlistEncodingFormat.Reference(v13, v14, 6);
        swift_release();
        uint64_t v9 = v13;
        unint64_t v10 = v14;
        char v11 = 6;
        goto LABEL_7;
      case 7:
        outlined copy of _XMLPlistEncodingFormat.Reference(v13, v14, 7);
        uint64_t v8 = swift_bridgeObjectRetain();
        _XMLPlistEncodingFormat.Writer.appendDictionary(_:indentation:)((Swift::OpaquePointer)v8, v101);
        outlined consume of _XMLPlistEncodingFormat.Reference(v13, v14, 7);
        swift_bridgeObjectRelease();
        uint64_t v9 = v13;
        unint64_t v10 = v14;
        char v11 = 7;
        goto LABEL_7;
      case 8:
        if (!(v13 | v14))
        {
          *(void *)&v116[0] = 60;
          *((void *)&v116[0] + 1) = 0xE100000000000000;
          specialized String.withUTF8<A>(_:)((uint64_t *)v116);
          swift_bridgeObjectRelease();
          _XMLPlistEncodingFormat.Writer.append(_:)("string", 6);
          *(void *)&v116[0] = 62;
          *((void *)&v116[0] + 1) = 0xE100000000000000;
          specialized String.withUTF8<A>(_:)((uint64_t *)v116);
          swift_bridgeObjectRelease();
          _XMLPlistEncodingFormat.Writer.append(_:)("$null", 5);
          *(void *)&v116[0] = 12092;
          *((void *)&v116[0] + 1) = 0xE200000000000000;
          specialized String.withUTF8<A>(_:)((uint64_t *)v116);
          swift_bridgeObjectRelease();
          unint64_t v38 = "string";
          uint64_t v39 = 6;
          goto LABEL_63;
        }
        if (v13 ^ 1 | v14)
        {
          v116[0] = v93;
          _XMLPlistEncodingFormat.Writer.append(_:)((char *)v116, 1);
          swift_bridgeObjectRelease();
          uint64_t v69 = *(void *)(v3 + 16);
          if (__OFSUB__(0x2000, v69)) {
            goto LABEL_106;
          }
          if (0x2000 - v69 < 5)
          {
            if (v69 > 0)
            {
              unint64_t v70 = (unsigned char *)(*(void *)v3 + v69);
              if (*(void *)v3) {
                uint64_t v71 = v70;
              }
              else {
                uint64_t v71 = 0;
              }
              Data._Representation.append(contentsOf:)(*(unsigned char **)v3, v71);
              *(void *)(v3 + 16) = 0;
            }
            unint64_t v46 = "false";
            int64_t v47 = "";
            goto LABEL_73;
          }
          if (!*(void *)v3)
          {
LABEL_125:
            __break(1u);
            swift_willThrow();
            __break(1u);
            JUMPOUT(0x181E172C0);
          }
          uint64_t v88 = *(void *)v3 + v69;
          *(unsigned char *)(v88 + 4) = 101;
          *(_DWORD *)uint64_t v88 = 1936482662;
          BOOL v24 = __OFADD__(v69, 5);
          uint64_t v87 = v69 + 5;
          if (v24) {
            goto LABEL_114;
          }
        }
        else
        {
          v116[0] = v93;
          _XMLPlistEncodingFormat.Writer.append(_:)((char *)v116, 1);
          swift_bridgeObjectRelease();
          uint64_t v43 = *(void *)(v3 + 16);
          if (__OFSUB__(0x2000, v43)) {
            goto LABEL_105;
          }
          if (0x2000 - v43 < 4)
          {
            if (v43 > 0)
            {
              uint64_t v44 = (unsigned char *)(*(void *)v3 + v43);
              if (*(void *)v3) {
                int64_t v45 = v44;
              }
              else {
                int64_t v45 = 0;
              }
              Data._Representation.append(contentsOf:)(*(unsigned char **)v3, v45);
              *(void *)(v3 + 16) = 0;
            }
            unint64_t v46 = "true";
            int64_t v47 = "";
LABEL_73:
            Data._Representation.append(contentsOf:)(v46, v47);
LABEL_100:
            v116[0] = v92;
            _XMLPlistEncodingFormat.Writer.append(_:)((char *)v116, 3);
            swift_bridgeObjectRelease();
            goto LABEL_8;
          }
          if (!*(void *)v3)
          {
LABEL_124:
            __break(1u);
            goto LABEL_125;
          }
          *(_DWORD *)(*(void *)v3 + v43) = 1702195828;
          BOOL v24 = __OFADD__(v43, 4);
          uint64_t v87 = v43 + 4;
          if (v24) {
            goto LABEL_115;
          }
        }
        *(void *)(v3 + 16) = v87;
        goto LABEL_100;
      default:
        *(void *)&v116[0] = 60;
        *((void *)&v116[0] + 1) = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v116);
        swift_bridgeObjectRelease();
        _XMLPlistEncodingFormat.Writer.append(_:)("string", 6);
        *(void *)&v116[0] = 62;
        *((void *)&v116[0] + 1) = 0xE100000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v116);
        swift_bridgeObjectRelease();
        *(void *)&v116[0] = v13;
        *((void *)&v116[0] + 1) = v14;
        swift_bridgeObjectRetain();
        specialized String.withUTF8<A>(_:)((uint64_t *)v116, v3);
        swift_bridgeObjectRelease();
        *(void *)&v116[0] = 12092;
        *((void *)&v116[0] + 1) = 0xE200000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v116);
        swift_bridgeObjectRelease();
        _XMLPlistEncodingFormat.Writer.append(_:)("string", 6);
        *(void *)&v116[0] = 2622;
        *((void *)&v116[0] + 1) = 0xE200000000000000;
        specialized String.withUTF8<A>(_:)((uint64_t *)v116);
        swift_bridgeObjectRelease();
        uint64_t v9 = v13;
        unint64_t v10 = v14;
        char v11 = 0;
        goto LABEL_7;
    }
  }
}

void _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v12[0] = v13;
  uint64_t v12[3] = v12;
  v12[4] = v13;
  if (a3 >= 8) {
    Swift::Int v4 = 8;
  }
  else {
    Swift::Int v4 = a3;
  }
  v12[5] = v4;
  v12[7] = v13;
  v12[8] = 80;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      outlined copy of Data._Representation(a1, a2);
      _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFyt_Tg5015_s10Foundation4B58V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_yt_Tg5AA0L4ViewVys0Q0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1nncn_n((int)a1, a1 >> 32, (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL), (uint64_t (*)(uint64_t))partial apply for closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:));
      outlined consume of Data._Representation(a1, a2);
      break;
    case 2uLL:
      uint64_t v8 = (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFyt_Tg5015_s10Foundation4B58V14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_yt_Tg5AA0L4ViewVys0Q0VGxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1nncn_n(v9, v10, v8, (uint64_t (*)(uint64_t))partial apply for closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:));
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v11, 0, 14);
      uint64_t v7 = 0;
      goto LABEL_10;
    default:
      v11[0] = a1;
      LOWORD(v11[1]) = a2;
      BYTE2(v11[1]) = BYTE2(a2);
      BYTE3(v11[1]) = BYTE3(a2);
      BYTE4(v11[1]) = BYTE4(a2);
      uint64_t v7 = BYTE6(a2);
      BYTE5(v11[1]) = BYTE5(a2);
LABEL_10:
      closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(v11, v7, v12, (uint64_t)v13, v4, v3, v13);
      break;
  }
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendDate(_:)(Foundation::Date a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  double v2 = *v1;
  if (one-time initialization token for cache != -1) {
LABEL_23:
  }
    unint64_t v1 = (double *)swift_once();
  uint64_t v3 = (os_unfair_lock_s *)static CalendarCache.cache;
  MEMORY[0x1F4188790](v1);
  LOBYTE(v35) = 7;
  swift_retain_n();
  os_unfair_lock_lock(v3 + 15);
  closure #1 in CalendarCache.fixed(_:)partial apply((uint64_t)&v3[4], v47);
  os_unfair_lock_unlock(v3 + 15);
  uint64_t v4 = swift_release_n();
  long long v40 = v47[0];
  if (one-time initialization token for cache != -1) {
    uint64_t v4 = swift_once();
  }
  Swift::Int v5 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v4);
  uint64_t v35 = 0;
  swift_retain_n();
  os_unfair_lock_lock(v5 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v5[4], v47);
  os_unfair_lock_unlock(v5 + 36);
  swift_release_n();
  if (!*(void *)&v47[0])
  {
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  Calendar.timeZone.setter((uint64_t *)v47);
  long long v36 = v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v6 = static _SetStorage.allocate(capacity:)();
  uint64_t v7 = 0;
  uint64_t v8 = v6 + 56;
  do
  {
    Swift::UInt v9 = outlined read-only object #0 of _XMLPlistEncodingFormat.Writer.appendDate(_:)[v7 + 32];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v9);
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v12 = v10 & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)(v8 + 8 * (v12 >> 6));
    uint64_t v15 = 1 << v12;
    uint64_t v16 = *(void *)(v6 + 48);
    if (((1 << v12) & v14) != 0)
    {
      if (*(unsigned __int8 *)(v16 + v12) == v9) {
        goto LABEL_6;
      }
      uint64_t v17 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v17;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)(v8 + 8 * (v12 >> 6));
        uint64_t v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v16 + v12) == v9) {
          goto LABEL_6;
        }
      }
    }
    *(void *)(v8 + 8 * v13) = v15 | v14;
    *(unsigned char *)(v16 + v12) = v9;
    uint64_t v18 = *(void *)(v6 + 16);
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19)
    {
      __break(1u);
      goto LABEL_23;
    }
    *(void *)(v6 + 16) = v20;
LABEL_6:
    ++v7;
  }
  while (v7 != 7);
  v47[0] = v36;
  swift_unknownObjectRetain();
  uint64_t v21 = swift_retain();
  Calendar.ComponentSet.init(_:)(v21, &v44);
  double v22 = 1.59271755e13;
  if (v2 <= 1.59271755e13) {
    double v22 = v2;
  }
  *(void *)&long long v43 = fmax(v22, -2.11845067e11);
  Calendar._dateComponents(_:from:)(&v44, (double *)&v43, v46);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v23 = memcpy(v47, v46, 0x11AuLL);
  BOOL v24 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v23);
  uint64_t v35 = 0;
  swift_retain_n();
  os_unfair_lock_lock(v24 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v24[4], v46);
  os_unfair_lock_unlock(v24 + 36);
  uint64_t v25 = swift_release_n();
  uint64_t v26 = *(void *)&v46[0];
  if (!*(void *)&v46[0]) {
    goto LABEL_25;
  }
  uint64_t v27 = *((void *)&v46[0] + 1);
  uint64_t v28 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v25);
  uint64_t v35 = 0;
  swift_retain_n();
  os_unfair_lock_lock(v28 + 36);
  closure #1 in TimeZoneCache.offsetFixed(_:)partial apply((unint64_t)&v28[4], v46);
  os_unfair_lock_unlock(v28 + 36);
  swift_release_n();
  if (!*(void *)&v46[0]) {
    goto LABEL_26;
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v44 = v26;
  uint64_t v45 = v27;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  type metadata accessor for _LocaleUnlocalized();
  swift_retain();
  uint64_t inited = swift_initStaticObject();
  swift_release();
  uint64_t v30 = lazy protocol witness table accessor for type __PlistEncoderXML and conformance __PlistEncoderXML((unint64_t *)&lazy protocol witness table cache variable for type _LocaleUnlocalized and conformance _LocaleUnlocalized, 255, (void (*)(uint64_t))type metadata accessor for _LocaleUnlocalized);
  *(void *)&long long v43 = inited;
  *((void *)&v43 + 1) = v30;
  uint64_t v41 = 0;
  char v42 = 1;
  type metadata accessor for _CalendarGregorian();
  swift_allocObject();
  _CalendarGregorian.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)((uint64_t)&v39, &v44, &v43, 2, 0, 4, 0, (uint64_t)&v41);
  LODWORD(v46[0]) = 0x10000;
  BYTE4(v46[0]) = 1;
  *((void *)&v46[0] + 1) = 0;
  *(void *)&v46[1] = v31;
  *((void *)&v46[1] + 1) = v26;
  *(void *)&v46[2] = v27;
  char v38 = 0;
  MEMORY[0x1F4188790](v31);
  closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)((uint64_t)&v34, 129, (uint64_t)v46, (uint64_t)v47, &v38, 0, 0, v37);
  uint64_t v33 = v37[0];
  uint64_t v32 = v37[1];
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v44 = v33;
  uint64_t v45 = v32;
  swift_bridgeObjectRetain();
  specialized String.withUTF8<A>(_:)(&v44);
  swift_bridgeObjectRelease();
  outlined release of DateComponents((uint64_t)v47);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
}

Swift::Void __swiftcall _XMLPlistEncodingFormat.Writer.appendEscaped(_:)(Swift::UInt8 a1)
{
  switch(a1)
  {
    case '&':
      uint64_t v1 = 0x3B706D6126;
      unint64_t v2 = 0xE500000000000000;
LABEL_8:
      uint64_t v8 = v1;
      unint64_t v9 = v2;
      specialized String.withUTF8<A>(_:)(&v8);
      swift_bridgeObjectRelease();
      return;
    case '>':
      uint64_t v1 = 997484326;
LABEL_7:
      unint64_t v2 = 0xE400000000000000;
      goto LABEL_8;
    case '<':
      uint64_t v1 = 997485606;
      goto LABEL_7;
  }
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  uint64_t v8 = 0xD00000000000002DLL;
  unint64_t v9 = 0x80000001823B18D0;
  unsigned int v4 = (((a1 & 0x3F) << 8) | (a1 >> 6)) + 33217;
  if ((a1 & 0x80) == 0) {
    unsigned int v4 = (a1 + 1);
  }
  uint64_t v7 = (v4 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v4) >> 3)) & 7)));
  v5._uint64_t countAndFlagsBits = MEMORY[0x185302020](&v7);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 39;
  v6._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void one-time initialization function for dataEncodeTable()
{
  static _XMLPlistEncodingFormat.Writer.dataEncodeTable = &outlined read-only object #0 of one-time initialization function for dataEncodeTable;
}

void closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(unsigned char *a1, uint64_t a2, void *a3, uint64_t a4, Swift::Int a5, uint64_t a6, char *a7)
{
  if (a2 < 1)
  {
    LOBYTE(v7) = 0;
LABEL_27:
    if (a2 % 3 != 1)
    {
      if (!(a2 % 3))
      {
        uint64_t v35 = (unsigned char *)*a3;
        goto LABEL_37;
      }
      Swift::Int v10 = (unsigned char *)*a3;
      if (one-time initialization token for dataEncodeTable != -1) {
        goto LABEL_54;
      }
      goto LABEL_34;
    }
    Swift::Int v10 = (unsigned char *)*a3;
    if (one-time initialization token for dataEncodeTable != -1) {
      goto LABEL_52;
    }
    goto LABEL_31;
  }
  unint64_t v9 = 0;
  Swift::Int v10 = 0;
  uint64_t v11 = &a1[a2];
  uint64_t v12 = 8 * a5;
  unint64_t v13 = &OBJC_IVAR____NSAttributedStringGrammarInflection__englishCustomPronoun;
  uint64_t v14 = &OBJC_IVAR____NSAttributedStringGrammarInflection__englishCustomPronoun;
  unint64_t v15 = (unint64_t)(a5 - 0x1000000000000000) >> 61;
  unint64_t v46 = v15;
  while (!__OFADD__(v9, 1))
  {
    unint64_t v7 = a1[v9];
    if (v9 == 3 * (v9 / 3))
    {
      uint64_t v16 = (unsigned char *)*a3;
      if (*((void *)v13 + 219) != -1)
      {
        unint64_t v50 = a1[v9];
        uint64_t v31 = a1;
        Swift::Int v10 = (unsigned char *)a5;
        uint64_t v32 = a3;
        swift_once();
        unint64_t v15 = v46;
        uint64_t v14 = &OBJC_IVAR____NSAttributedStringGrammarInflection__englishCustomPronoun;
        unint64_t v13 = &OBJC_IVAR____NSAttributedStringGrammarInflection__englishCustomPronoun;
        a3 = v32;
        a1 = v31;
        unint64_t v7 = v50;
        a5 = (Swift::Int)v10;
      }
      uint64_t v17 = *((void *)v14 + 324);
      unint64_t v18 = v7 >> 2;
      if (*(void *)(v17 + 16) <= v7 >> 2) {
        goto LABEL_47;
      }
LABEL_15:
      BOOL v19 = (unsigned char *)(v17 + v18 + 32);
      uint64_t v20 = 1;
      goto LABEL_21;
    }
    if (v9 % 3 == 1)
    {
      uint64_t v16 = (unsigned char *)*a3;
      if (*((void *)v13 + 219) != -1)
      {
        unint64_t v49 = a1[v9];
        unint64_t v29 = a1;
        Swift::Int v43 = a5;
        uint64_t v30 = a3;
        swift_once();
        unint64_t v15 = v46;
        uint64_t v14 = &OBJC_IVAR____NSAttributedStringGrammarInflection__englishCustomPronoun;
        unint64_t v13 = &OBJC_IVAR____NSAttributedStringGrammarInflection__englishCustomPronoun;
        a3 = v30;
        a1 = v29;
        unint64_t v7 = v49;
        a5 = v43;
      }
      uint64_t v17 = *((void *)v14 + 324);
      unint64_t v18 = ((unint64_t)(v7 | (v10 << 8)) >> 4) & 0x3F;
      if (v18 >= *(void *)(v17 + 16)) {
        goto LABEL_46;
      }
      goto LABEL_15;
    }
    uint64_t v21 = (unsigned char *)*a3;
    if (*((void *)v13 + 219) != -1)
    {
      unint64_t v33 = a1[v9];
      uint64_t v51 = a1;
      Swift::Int v44 = a5;
      uint64_t v34 = a3;
      swift_once();
      unint64_t v15 = v46;
      uint64_t v14 = &OBJC_IVAR____NSAttributedStringGrammarInflection__englishCustomPronoun;
      unint64_t v13 = &OBJC_IVAR____NSAttributedStringGrammarInflection__englishCustomPronoun;
      a3 = v34;
      a1 = v51;
      unint64_t v7 = v33;
      a5 = v44;
    }
    uint64_t v22 = *((void *)v14 + 324);
    unint64_t v23 = ((unint64_t)(v7 | (v10 << 8)) >> 6) & 0x3F;
    unint64_t v24 = *(void *)(v22 + 16);
    if (v23 >= v24) {
      goto LABEL_48;
    }
    uint64_t v25 = v22 + 32;
    *uint64_t v21 = *(unsigned char *)(v25 + v23);
    if ((v7 & 0x3F) >= v24) {
      goto LABEL_49;
    }
    uint64_t v16 = (unsigned char *)(*a3 + 1);
    BOOL v19 = (unsigned char *)(v25 + (v7 & 0x3F));
    uint64_t v20 = 2;
LABEL_21:
    *uint64_t v16 = *v19;
    uint64_t v26 = (unsigned char *)(*a3 + v20);
    *a3 = v26;
    if (v15 < 7) {
      goto LABEL_43;
    }
    if (__OFADD__(&v26[-a4], v12)) {
      goto LABEL_44;
    }
    if ((uint64_t)&v26[v12 - a4] >= 76)
    {
      uint64_t v48 = (unsigned char *)v7;
      unint64_t v7 = (unint64_t)a1;
      *uint64_t v26 = 10;
      uint64_t v27 = *a3 - a4 + 1;
      Swift::Int v10 = (unsigned char *)a5;
      uint64_t v28 = a3;
      _XMLPlistEncodingFormat.Writer.appendIndents(_:)(a5);
      if (v27 < 0) {
        goto LABEL_45;
      }
      _XMLPlistEncodingFormat.Writer.append(_:)(a7, v27);
      *uint64_t v28 = a4;
      a5 = (Swift::Int)v10;
      a1 = (unsigned char *)v7;
      unint64_t v7 = (unint64_t)v48;
      a3 = v28;
      unint64_t v13 = &OBJC_IVAR____NSAttributedStringGrammarInflection__englishCustomPronoun;
      uint64_t v14 = &OBJC_IVAR____NSAttributedStringGrammarInflection__englishCustomPronoun;
      unint64_t v15 = v46;
    }
    ++v9;
    Swift::Int v10 = (unsigned char *)v7;
    if (&a1[v9] >= v11) {
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  while (2)
  {
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    Swift::Int v39 = a5;
    long long v40 = a3;
    swift_once();
    a3 = v40;
    a5 = v39;
LABEL_31:
    unint64_t v36 = 16 * (v7 & 3);
    if (v36 < *((void *)static _XMLPlistEncodingFormat.Writer.dataEncodeTable + 2))
    {
      *Swift::Int v10 = *((unsigned char *)static _XMLPlistEncodingFormat.Writer.dataEncodeTable + v36 + 32);
      *(unsigned char *)(*a3 + 1) = 61;
      *(unsigned char *)(*a3 + 2) = 61;
      uint64_t v35 = (unsigned char *)(*a3 + 3);
LABEL_36:
      *a3 = v35;
LABEL_37:
      Swift::Int v10 = &v35[-a4];
      if ((uint64_t)&v35[-a4] < 1) {
        return;
      }
      *uint64_t v35 = 10;
      _XMLPlistEncodingFormat.Writer.appendIndents(_:)(a5);
      uint64_t v38 = (uint64_t)(v10 + 1);
      if (__OFADD__(v10, 1)) {
        continue;
      }
      if ((v38 & 0x8000000000000000) == 0)
      {
        _XMLPlistEncodingFormat.Writer.append(_:)(a7, v38);
        return;
      }
      goto LABEL_51;
    }
    break;
  }
  __break(1u);
LABEL_54:
  Swift::Int v41 = a5;
  char v42 = a3;
  swift_once();
  a3 = v42;
  a5 = v41;
LABEL_34:
  unint64_t v37 = 4 * (v7 & 0xF);
  if (v37 < *((void *)static _XMLPlistEncodingFormat.Writer.dataEncodeTable + 2))
  {
    *Swift::Int v10 = *((unsigned char *)static _XMLPlistEncodingFormat.Writer.dataEncodeTable + v37 + 32);
    *(unsigned char *)(*a3 + 1) = 61;
    uint64_t v35 = (unsigned char *)(*a3 + 2);
    goto LABEL_36;
  }
  __break(1u);
}

Swift::Int _XMLPlistEncodingFormat.Reference.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v3)
  {
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of _XMLPlistEncodingFormat.Reference(v1, v2, 0);
    return Hasher._finalize()();
  }
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance _XMLPlistEncodingFormat.Reference()
{
  if (*(unsigned char *)(v0 + 16))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v3 = v0;
    uint64_t v1 = *(void *)v0;
    unint64_t v2 = *(void *)(v3 + 8);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    return outlined consume of _XMLPlistEncodingFormat.Reference(v1, v2, 0);
  }
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _XMLPlistEncodingFormat.Reference()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v3)
  {
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of _XMLPlistEncodingFormat.Reference(v1, v2, 0);
    return Hasher._finalize()();
  }
  return result;
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.<= infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized static Comparable.<= infix(_:_:));
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.<= infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))specialized static Comparable.>= infix(_:_:));
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance _XMLPlistEncodingFormat.Reference(uint64_t *a1, uint64_t *a2)
{
  if (*((unsigned char *)a2 + 16) || *((unsigned char *)a1 + 16))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v2 = *a1;
    uint64_t v3 = a1[1];
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    if (v4 == v2 && v5 == v3)
    {
      return 0;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(unsigned int a1, uint64_t (*a2)(uint64_t *))
{
  if (a1 > 0x7F)
  {
    int v4 = (a1 & 0x3F) << 8;
    if (a1 >= 0x800)
    {
      int v5 = (v4 | (a1 >> 6) & 0x3F) << 8;
      int v6 = (((v5 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      unsigned int v2 = (v5 | (a1 >> 12)) + 8487393;
      if (HIWORD(a1)) {
        unsigned int v2 = v6;
      }
    }
    else
    {
      unsigned int v2 = (v4 | (a1 >> 6)) + 33217;
    }
  }
  else
  {
    unsigned int v2 = a1 + 1;
  }
  uint64_t v7 = (v2 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v2) >> 3))));
  return a2(&v7);
}

char *specialized ContiguousArray.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v7 = *v5;
  int64_t v8 = *(void *)(*v5 + 16);
  if (v8 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v11 = 1 - v10;
  if (__OFSUB__(1, v10))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v12 = v8 + v11;
  if (__OFADD__(v8, v11))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *int v5 = v7;
  if (!isUniquelyReferenced_nonNull_native || v12 > *(void *)(v7 + 24) >> 1)
  {
    if (v8 <= v12) {
      int64_t v16 = v8 + v11;
    }
    else {
      int64_t v16 = v8;
    }
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v16, 1);
    uint64_t v7 = *v5;
  }
  uint64_t v17 = v7 + 32 + 24 * a1;
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v11) {
    goto LABEL_20;
  }
  uint64_t v19 = *(void *)(v7 + 16);
  BOOL v20 = __OFSUB__(v19, a2);
  uint64_t v21 = v19 - a2;
  if (v20) {
    goto LABEL_26;
  }
  if ((v21 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v17 + 24);
    uint64_t v22 = (char *)(v7 + 32 + 24 * a2);
    size_t v23 = 24 * v21;
    if ((char *)(v17 + 24) != v22 || result >= &v22[v23]) {
      uint64_t result = (char *)memmove(result, v22, v23);
    }
    uint64_t v24 = *(void *)(v7 + 16);
    BOOL v20 = __OFADD__(v24, v11);
    uint64_t v25 = v24 + v11;
    if (!v20)
    {
      *(void *)(v7 + 16) = v25;
LABEL_20:
      *(void *)uint64_t v17 = a3;
      *(void *)(v17 + 8) = a4;
      *(unsigned char *)(v17 + 16) = a5;
      *int v5 = v7;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (__OFADD__(v6, v9))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v6 + v9 > *(void *)(v5 + 24) >> 1)
  {
    MEMORY[0x185303240]();
    uint64_t v5 = *v3;
  }
  int64_t v12 = (void *)(v5 + 32 + 8 * a1);
  type metadata accessor for _BPlistEncodingFormat.Reference();
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_17;
  }
  uint64_t v13 = *(void *)(v5 + 16);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_25;
  }
  if (v15 < 0)
  {
LABEL_27:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  int64_t v16 = (char *)(v12 + 1);
  uint64_t v17 = (char *)(v5 + 32 + 8 * a2);
  if (v12 + 1 != (void *)v17 || v16 >= &v17[8 * v15]) {
    memmove(v16, v17, 8 * v15);
  }
  uint64_t v18 = *(void *)(v5 + 16);
  BOOL v14 = __OFADD__(v18, v9);
  uint64_t v19 = v18 + v9;
  if (v14)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  *(void *)(v5 + 16) = v19;
LABEL_17:
  *int64_t v12 = a3;

  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, unsigned int a4)
{
  if (a1 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v6 = *v4;
  int64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v11 = a3 - v9;
  if (__OFSUB__(a3, v9))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  int64_t v12 = v7 + v11;
  if (__OFADD__(v7, v11))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *int v4 = v6;
  if (!result || v12 > *(void *)(v6 + 24) >> 1)
  {
    if (v7 <= v12) {
      int64_t v15 = v7 + v11;
    }
    else {
      int64_t v15 = v7;
    }
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result, v15, 1);
    uint64_t v6 = *v4;
  }
  uint64_t v16 = v6 + 32;
  uint64_t v17 = (char *)(v6 + 32 + a1);
  uint64_t v18 = &v17[a3];
  if (!v11)
  {
LABEL_20:
    if (a3 < 1)
    {
LABEL_34:
      *int v4 = v6;
      return result;
    }
    unint64_t v25 = a3 + a1 + v6 + 32;
    if (v25 <= v6 + a1 + 33) {
      unint64_t v25 = v6 + a1 + 33;
    }
    unint64_t v26 = v25 - (v6 + a1) - 33;
    if (v26 >= a3) {
      unint64_t v26 = a3;
    }
    unint64_t v27 = v26 + 1;
    if (v27 > 0x20)
    {
      uint64_t v29 = v27 & 0x1F;
      if ((v27 & 0x1F) == 0) {
        uint64_t v29 = 32;
      }
      unint64_t v28 = v27 - v29;
      v17 += v28;
      int8x16_t v30 = vdupq_n_s8(a4);
      uint64_t v31 = (int8x16_t *)(a1 + v6 + 48);
      unint64_t v32 = v28;
      do
      {
        v31[-1] = v30;
        *uint64_t v31 = v30;
        v31 += 2;
        v32 -= 32;
      }
      while (v32);
    }
    else
    {
      unint64_t v28 = 0;
    }
    unint64_t v33 = a3 - v28;
    while (v33)
    {
      *v17++ = a4;
      --v33;
      if (v17 >= v18) {
        goto LABEL_34;
      }
    }
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v19 = *(void *)(v6 + 16);
  size_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    uint64_t v21 = (char *)(v16 + a2);
    if (v18 != (char *)(v16 + a2) || v18 >= &v21[v20]) {
      uint64_t result = (uint64_t)memmove(&v17[a3], v21, v20);
    }
    uint64_t v22 = *(void *)(v6 + 16);
    BOOL v23 = __OFADD__(v22, v11);
    uint64_t v24 = v22 + v11;
    if (v23) {
      goto LABEL_42;
    }
    *(void *)(v6 + 16) = v24;
    goto LABEL_20;
  }
LABEL_43:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of _XMLPlistEncodingFormat.Reference?(uint64_t result, unint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined consume of _XMLPlistEncodingFormat.Reference(result, a2, a3);
  }
  return result;
}

uint64_t sub_181E18EC8()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_181E18F0C()
{
  outlined consume of _CodingKey(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return MEMORY[0x1F4186498](v0, 41, 7);
}

uint64_t specialized __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10)
{
  uint64_t v57 = a6;
  v58[3] = &type metadata for _CodingKey;
  unint64_t v53 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v58[4] = v53;
  uint64_t v17 = swift_allocObject();
  v58[0] = v17;
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  *(void *)(v17 + 32) = a4;
  *(unsigned char *)(v17 + 40) = a5;
  *(void *)(a10 + 128) = a1;
  swift_retain();
  swift_retain();
  uint64_t v18 = _CodingKey.stringValue.getter(a2, a3, a4, a5);
  *(void *)(a10 + 136) = a7;
  *(void *)(a10 + 144) = a8;
  *(void *)(a10 + 152) = a9 | 0x8000000000000000;
  *(void *)(a10 + 160) = v18;
  *(void *)(a10 + 168) = v19;
  swift_release();
  uint64_t v54 = *(void *)(a1 + 24);
  uint64_t v55 = a1;
  uint64_t v56 = *(void *)(a1 + 32);
  size_t v20 = __swift_project_boxed_opaque_existential_1(v58, (uint64_t)&type metadata for _CodingKey);
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  v24.n128_f64[0] = MEMORY[0x1F4188790](v21);
  unint64_t v25 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v26 = (char *)&v53 - v25;
  unint64_t v27 = off_1ECA30F70;
  unint64_t v28 = v20;
  uint64_t v30 = v29;
  ((void (*)(char *, void *, ValueMetadata *, __n128))off_1ECA30F70->initializeWithCopy)((char *)&v53 - v25, v28, &type metadata for _CodingKey, v24);
  uint64_t v31 = ((uint64_t (*)(char *, void, uint64_t, ValueMetadata *))v27->storeEnumTagSinglePayload)((char *)&v53 - v25, 0, 1, &type metadata for _CodingKey);
  MEMORY[0x1F4188790](v31);
  unint64_t v33 = (char *)&v53 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v35 = MEMORY[0x1F4188790](v34);
  unint64_t v36 = (char *)&v53 - v25;
  (*(void (**)(char *, char *, uint64_t, double))(v22 + 16))((char *)&v53 - v25, (char *)&v53 - v25, v30, v35);
  if (((unsigned int (*)(char *, uint64_t, ValueMetadata *))v27->getEnumTagSinglePayload)((char *)&v53 - v25, 1, &type metadata for _CodingKey) == 1)
  {
    unint64_t v37 = *(void (**)(char *, uint64_t))(v22 + 8);
    uint64_t v38 = v56;
    swift_bridgeObjectRetain();
    v37((char *)&v53 - v25, v30);
    v37((char *)&v53 - v25, v30);
    unint64_t v39 = v57;
    swift_retain();
    swift_release();
    unint64_t v40 = v39 >> 62;
    Swift::Int v41 = (uint64_t *)v39;
    if (v39 >> 62)
    {
LABEL_3:
      if (v40 != 1)
      {
        uint64_t v48 = 0;
LABEL_14:
        uint64_t v52 = v54;
        *(void *)(a10 + 16) = MEMORY[0x1E4FBC860];
        *(void *)(a10 + 24) = v52;
        *(void *)(a10 + 32) = v38;
        *(void *)(a10 + 40) = v41;
        *(void *)(a10 + 56) = 0;
        *(void *)(a10 + 64) = 0;
        *(void *)(a10 + 48) = v48;
        *(unsigned char *)(a10 + 72) = 8;
        *(_OWORD *)(a10 + 80) = xmmword_18210C780;
        *(unsigned char *)(a10 + 96) = 8;
        *(_OWORD *)(a10 + 104) = xmmword_18210F2A0;
        *(unsigned char *)(a10 + 120) = 8;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
        return a10;
      }
      char v42 = (uint64_t *)((v39 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_13:
      uint64_t v48 = *v42;
      swift_release();
      goto LABEL_14;
    }
LABEL_12:
    char v42 = (uint64_t *)(v39 + 64);
    goto LABEL_13;
  }
  initializeWithTake = (void (*)(char *, char *, ValueMetadata *))v27->initializeWithTake;
  initializeWithTake(v33, v36, &type metadata for _CodingKey);
  Swift::Int v41 = (uint64_t *)swift_allocObject();
  unint64_t v44 = v53;
  v41[5] = (uint64_t)&type metadata for _CodingKey;
  v41[6] = v44;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v41 + 2);
  initializeWithTake((char *)boxed_opaque_existential_1, v33, &type metadata for _CodingKey);
  unint64_t v46 = *(void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v38 = v56;
  swift_bridgeObjectRetain();
  v46(v26, v30);
  unint64_t v39 = v57;
  v41[7] = v57;
  unint64_t v40 = v39 >> 62;
  if (v39 >> 62)
  {
    if (v40 != 1)
    {
      uint64_t v51 = 1;
LABEL_11:
      v41[8] = v51;
      swift_release();
      if (v40) {
        goto LABEL_3;
      }
      goto LABEL_12;
    }
    int64_t v47 = (uint64_t *)((v39 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    int64_t v47 = (uint64_t *)(v39 + 64);
  }
  uint64_t v49 = *v47;
  uint64_t result = swift_retain();
  uint64_t v51 = v49 + 1;
  if (!__OFADD__(v49, 1)) {
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t specialized __PlistReferencingEncoderXML.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v54 = a3;
  *(void *)&long long v56 = a6;
  *((void *)&v56 + 1) = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v55);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(boxed_opaque_existential_1, a2, a6);
  uint64_t v13 = *a4;
  uint64_t v14 = a4[1];
  uint64_t v15 = *((unsigned __int8 *)a4 + 16);
  *(void *)(a5 + 128) = a1;
  swift_retain();
  swift_retain();
  uint64_t v16 = dispatch thunk of CodingKey.stringValue.getter();
  *(void *)(a5 + 136) = v13;
  *(void *)(a5 + 144) = v14;
  *(void *)(a5 + 152) = v15 | 0x8000000000000000;
  *(void *)(a5 + 160) = v16;
  *(void *)(a5 + 168) = v17;
  swift_release();
  uint64_t v50 = *(void *)(a1 + 24);
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v52 = a1;
  uint64_t v53 = v18;
  long long v49 = v56;
  uint64_t v19 = v56;
  uint64_t v51 = __swift_project_boxed_opaque_existential_1(v55, v56);
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  v23.n128_f64[0] = MEMORY[0x1F4188790](v20);
  unint64_t v24 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v25 = (char *)&v49 - v24;
  uint64_t v26 = *(void *)(v19 - 8);
  (*(void (**)(char *, void *, uint64_t, __n128))(v26 + 16))((char *)&v49 - v24, v51, v19, v23);
  uint64_t v27 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v26 + 56))((char *)&v49 - v24, 0, 1, v19);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v49 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = v20;
  double v32 = MEMORY[0x1F4188790](v31);
  unint64_t v33 = (char *)&v49 - v24;
  (*(void (**)(char *, char *, uint64_t, double))(v21 + 16))((char *)&v49 - v24, (char *)&v49 - v24, v30, v32);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))((char *)&v49 - v24, 1, v19) == 1)
  {
    uint64_t v34 = *(void (**)(char *, uint64_t))(v21 + 8);
    uint64_t v35 = v53;
    swift_bridgeObjectRetain();
    v34((char *)&v49 - v24, v30);
    v34((char *)&v49 - v24, v30);
    unint64_t v36 = v54;
    swift_retain();
    swift_release();
    unint64_t v37 = v36 >> 62;
    uint64_t v38 = v36;
    if (v36 >> 62)
    {
LABEL_3:
      if (v37 != 1)
      {
        uint64_t v44 = 0;
LABEL_14:
        uint64_t v48 = v50;
        *(void *)(a5 + 16) = MEMORY[0x1E4FBC860];
        *(void *)(a5 + 24) = v48;
        *(void *)(a5 + 32) = v35;
        *(void *)(a5 + 40) = v38;
        *(void *)(a5 + 56) = 0;
        *(void *)(a5 + 64) = 0;
        *(void *)(a5 + 48) = v44;
        *(unsigned char *)(a5 + 72) = 8;
        *(_OWORD *)(a5 + 80) = xmmword_18210C780;
        *(unsigned char *)(a5 + 96) = 8;
        *(_OWORD *)(a5 + 104) = xmmword_18210F2A0;
        *(unsigned char *)(a5 + 120) = 8;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
        return a5;
      }
      unint64_t v39 = (uint64_t *)((v36 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_13:
      uint64_t v44 = *v39;
      swift_release();
      goto LABEL_14;
    }
LABEL_12:
    unint64_t v39 = (uint64_t *)(v36 + 64);
    goto LABEL_13;
  }
  unint64_t v40 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  v40(v29, v33, v19);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 40) = v49;
  Swift::Int v41 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v38 + 16));
  v40((char *)v41, v29, v19);
  char v42 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v35 = v53;
  swift_bridgeObjectRetain();
  v42(v25, v30);
  unint64_t v36 = v54;
  *(void *)(v38 + 56) = v54;
  unint64_t v37 = v36 >> 62;
  if (v36 >> 62)
  {
    if (v37 != 1)
    {
      uint64_t v47 = 1;
LABEL_11:
      *(void *)(v38 + 64) = v47;
      swift_release();
      if (v37) {
        goto LABEL_3;
      }
      goto LABEL_12;
    }
    Swift::Int v43 = (uint64_t *)((v36 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    Swift::Int v43 = (uint64_t *)(v36 + 64);
  }
  uint64_t v45 = *v43;
  uint64_t result = swift_retain();
  uint64_t v47 = v45 + 1;
  if (!__OFADD__(v45, 1)) {
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t specialized static _XMLPlistEncodingFormat.Reference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16) || *(unsigned char *)(a2 + 16))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    return 1;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return result;
}

uint64_t specialized static _XMLPlistEncodingFormat.Reference.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16) || *(unsigned char *)(a2 + 16))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    return 0;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return result;
}

uint64_t sub_181E19974()
{
  swift_release();
  outlined consume of _XMLPlistEncodingFormat.Reference(*(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t specialized _XMLPlistEncodingFormat.Writer.realDescription(_:)(double a1)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000)
  {
    if (a1 <= 0.0) {
      return 0x74696E69666E692DLL;
    }
    else {
      return 0x74696E69666E692BLL;
    }
  }
  else
  {
    uint64_t v1 = Double.description.getter();
    swift_bridgeObjectRetain();
    v2._uint64_t countAndFlagsBits = 12334;
    v2._unint64_t object = (void *)0xE200000000000000;
    Swift::Bool v3 = String.hasSuffix(_:)(v2);
    swift_bridgeObjectRelease();
    if (v3) {
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
    }
  }
  return v1;
}

void partial apply for closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(unsigned char *a1, uint64_t a2)
{
}

{
  uint64_t v2;

  closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(char **)(v2 + 48));
}

void partial apply for closure #1 in _XMLPlistEncodingFormat.Writer.append(_:)(char *a1, uint64_t a2)
{
}

uint64_t initializeWithCopy for _PlistKeyedEncodingContainerXML(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  swift_retain();
  outlined copy of _XMLPlistEncodingFormat.Reference(v4, v5, v6);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _PlistKeyedEncodingContainerXML(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of _XMLPlistEncodingFormat.Reference(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v9 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of _XMLPlistEncodingFormat.Reference(v7, v8, v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _PlistKeyedEncodingContainerXML(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  char v7 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of _XMLPlistEncodingFormat.Reference(v5, v6, v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

void *type metadata accessor for _PlistUnkeyedEncodingContainerXML()
{
  return &unk_1ECA43248;
}

uint64_t destroy for _XMLPlistEncodingFormat.Writer(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t initializeWithCopy for _XMLPlistEncodingFormat.Writer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 32);
  outlined copy of Data._Representation(v3, v4);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  return a1;
}

void *assignWithCopy for _XMLPlistEncodingFormat.Writer(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v3 = a2[3];
  unint64_t v4 = a2[4];
  outlined copy of Data._Representation(v3, v4);
  uint64_t v5 = a1[3];
  unint64_t v6 = a1[4];
  a1[3] = v3;
  a1[4] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t assignWithTake for _XMLPlistEncodingFormat.Writer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v3;
  outlined consume of Data._Representation(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for _XMLPlistEncodingFormat.Writer(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 32) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 32) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for _XMLPlistEncodingFormat.Writer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2)
    {
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _XMLPlistEncodingFormat.Writer()
{
  return &type metadata for _XMLPlistEncodingFormat.Writer;
}

uint64_t initializeBufferWithCopyOfBuffer for _XMLPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of _XMLPlistEncodingFormat.Reference(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for _XMLPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of _XMLPlistEncodingFormat.Reference(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of _XMLPlistEncodingFormat.Reference(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for _XMLPlistEncodingFormat.Reference(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of _XMLPlistEncodingFormat.Reference(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for _XMLPlistEncodingFormat.Reference(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF8 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 248);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 8) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _XMLPlistEncodingFormat.Reference(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF7)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 248;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF8) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF8) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for _XMLPlistEncodingFormat.Reference(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 7u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 8);
  }
}

uint64_t destructiveInjectEnumTag for _XMLPlistEncodingFormat.Reference(uint64_t result, unsigned int a2)
{
  if (a2 >= 8)
  {
    *(void *)uint64_t result = a2 - 8;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 8;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

id static TimeZone._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, uint64_t *a2@<X8>)
{
  if (result)
  {
    Swift::String v2 = result;
    type metadata accessor for _NSSwiftTimeZone();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
      uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
      uint64_t result = (id)swift_unknownObjectRetain();
    }
    else
    {
      type metadata accessor for _TimeZoneBridged();
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = v2;
      uint64_t v6 = _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_1(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (void (*)(uint64_t))type metadata accessor for _TimeZoneBridged);
      uint64_t result = v2;
    }
    *a2 = v5;
    a2[1] = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double static TimeZone.default.getter@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  Swift::String v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  unsigned int v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.default.getter(v2, (uint64_t *)&v5);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  double result = *(double *)&v5;
  *a1 = v5;
  return result;
}

Swift::String_optional __swiftcall TimeZone.abbreviation(for:)(Foundation::Date a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = v3;
  uint64_t v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 56))(&v9, ObjectType, v4);
  result.value._unint64_t object = v7;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::Bool __swiftcall TimeZone.isDaylightSavingTime(for:)(Foundation::Date a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = v3;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 64))(&v7, ObjectType, v4) & 1;
}

Swift::Double __swiftcall TimeZone.daylightSavingTimeOffset(for:)(Foundation::Date a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = v3;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 72))(&v7, ObjectType, v4);
  return result;
}

Foundation::Date_optional __swiftcall TimeZone.nextDaylightSavingTimeTransition(after:)(Foundation::Date after)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = v3;
  char v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 80))(&v8, ObjectType, v4);
  result.Swift::Int value = *(Foundation::Date *)&v7;
  result.is_nil = v6;
  return result;
}

uint64_t TimeZone.localizedName(for:locale:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  v9[0] = v4;
  v9[1] = v5;
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v6 + 88))(a1, v9, ObjectType, v6);
}

uint64_t static TimeZone.abbreviationDictionary.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static TimeZoneCache.cache + 16;
  uint64_t v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.timeZoneAbbreviations()(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  return v3;
}

uint64_t static TimeZone.default.setter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  TimeZoneCache.setDefault(_:)();

  return swift_unknownObjectRelease();
}

uint64_t TimeZone.nextDaylightSavingTimeTransition.getter()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  return (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v1 + 80))(&__tp, ObjectType, v1);
}

uint64_t (*static TimeZone.default.modify(_OWORD *a1))()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (uint64_t *)(static TimeZoneCache.cache + 16);
  uint64_t v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.default.getter(v2, v5);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  *a1 = *(_OWORD *)v5;
  return static TimeZone.default.modify;
}

uint64_t static TimeZone.default.modify()
{
  TimeZoneCache.setDefault(_:)();

  return swift_unknownObjectRelease();
}

uint64_t static TimeZone.abbreviationDictionary.setter(uint64_t a1)
{
  if (one-time initialization token for cache != -1) {
    a1 = swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](a1);
  swift_retain_n();
  os_unfair_lock_lock(v1 + 36);
  partial apply for closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)((uint64_t)&v1[4]);
  os_unfair_lock_unlock(v1 + 36);
  swift_bridgeObjectRelease();
  return swift_release_n();
}

uint64_t (*static TimeZone.abbreviationDictionary.modify(void *a1))(uint64_t a1, char a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static TimeZoneCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in TimeZoneCache.timeZoneAbbreviations()(v2, &v5);
  a1[1] = 0;
  os_unfair_lock_unlock(v3);
  swift_release_n();
  *a1 = v5;
  return static TimeZone.abbreviationDictionary.modify;
}

uint64_t static TimeZone.abbreviationDictionary.modify(uint64_t a1, char a2)
{
  uint64_t v3 = static TimeZoneCache.cache + 16;
  uint64_t v4 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  if (a2)
  {
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v4);
    closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)partial apply(v3);
    os_unfair_lock_unlock(v4);
    swift_release_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    os_unfair_lock_lock(v4);
    closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)partial apply(v3);
    os_unfair_lock_unlock(v4);
    swift_release_n();
  }
  return swift_bridgeObjectRelease();
}

void static TimeZone.cldrKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 31348;
  a1[1] = 0xE200000000000000;
}

void static TimeZone.legacyKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 0x656E6F7A656D6974;
  a1[1] = 0xE800000000000000;
}

uint64_t TimeZone.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 112))(a1, ObjectType, v3);
}

Swift::Int TimeZone.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v1 + 112))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TimeZone()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v1 + 112))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

uint64_t TimeZone.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  v26[1] = a1;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  v26[0] = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v26[0] - 8);
  MEMORY[0x1F4188790](v26[0]);
  uint64_t v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  Swift::Double v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __darwin_time_t v9 = *v1;
  uint64_t v8 = v1[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_18210C690;
  *(_OWORD *)(v10 + 32) = xmmword_182110490;
  uint64_t ObjectType = swift_getObjectType();
  int64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 32);
  swift_unknownObjectRetain();
  uint64_t v13 = v12(ObjectType, v8);
  uint64_t v15 = v14;
  swift_unknownObjectRelease();
  *(void *)(v10 + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(v10 + 48) = v13;
  *(void *)(v10 + 56) = v15;
  *(_OWORD *)(v10 + 80) = xmmword_182205D90;
  *(void *)(v10 + 120) = ObjectType;
  *(void *)(v10 + 96) = v9;
  *(_OWORD *)(v10 + 128) = xmmword_182205DA0;
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  uint64_t v16 = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v8 + 56))(&__tp, ObjectType, v8);
  uint64_t v18 = v17;
  *(void *)(v10 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(v10 + 144) = v16;
  *(void *)(v10 + 152) = v18;
  *(_OWORD *)(v10 + 176) = xmmword_182205DB0;
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  uint64_t v19 = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v8 + 40))(&__tp, ObjectType, v8);
  uint64_t v20 = MEMORY[0x1E4FBB550];
  *(void *)(v10 + 192) = v19;
  *(void *)(v10 + 216) = v20;
  *(void *)(v10 + 224) = 0xD000000000000014;
  *(void *)(v10 + 232) = 0x80000001823B1930;
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  char v21 = (*(uint64_t (**)(timespec *, uint64_t, uint64_t))(v8 + 64))(&__tp, ObjectType, v8);
  *(void *)(v10 + 264) = MEMORY[0x1E4FBB390];
  *(unsigned char *)(v10 + 240) = v21 & 1;
  __tp.tv_sec = v9;
  __tp.tv_nsec = v8;
  void v26[2] = v10;
  uint64_t v22 = *MEMORY[0x1E4FBC410];
  uint64_t v23 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 104))(v7, v22, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v7, 0, 1, v23);
  (*(void (**)(char *, void, void))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v26[0]);
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeZone.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TimeZone.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeZone.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeZone.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TimeZone.CodingKeys and conformance TimeZone.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

id static TimeZone._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftTimeZone();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
    id result = (id)swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _TimeZoneBridged();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    uint64_t v6 = _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_1(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (void (*)(uint64_t))type metadata accessor for _TimeZoneBridged);
    id result = a1;
  }
  *a2 = v5;
  a2[1] = v6;
  return result;
}

uint64_t static TimeZone._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftTimeZone();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _TimeZoneBridged();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    uint64_t v6 = _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_1(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (void (*)(uint64_t))type metadata accessor for _TimeZoneBridged);
    id v7 = a1;
  }
  *a2 = v5;
  a2[1] = v6;
  return 1;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance TimeZone()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 120))(ObjectType, v1);
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance TimeZone(void *a1, uint64_t *a2)
{
  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftTimeZone();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
    id result = (id)swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _TimeZoneBridged();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    uint64_t v6 = _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_1(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (void (*)(uint64_t))type metadata accessor for _TimeZoneBridged);
    id result = a1;
  }
  *a2 = v5;
  a2[1] = v6;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance TimeZone(void *a1, uint64_t *a2)
{
  swift_unknownObjectRelease();
  type metadata accessor for _NSSwiftTimeZone();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
    uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _TimeZoneBridged();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    uint64_t v6 = _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_1(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (void (*)(uint64_t))type metadata accessor for _TimeZoneBridged);
    id v7 = a1;
  }
  *a2 = v5;
  a2[1] = v6;
  return 1;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance TimeZone@<X0>(id result@<X0>, uint64_t *a2@<X8>)
{
  if (result)
  {
    unint64_t v2 = result;
    type metadata accessor for _NSSwiftTimeZone();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
      uint64_t v6 = *(void *)(v4 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
      id result = (id)swift_unknownObjectRetain();
    }
    else
    {
      type metadata accessor for _TimeZoneBridged();
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = v2;
      uint64_t v6 = _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_1(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (void (*)(uint64_t))type metadata accessor for _TimeZoneBridged);
      id result = v2;
    }
    *a2 = v5;
    a2[1] = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NSTimeZone._toCustomAnyHashable()()
{
  type metadata accessor for _NSSwiftTimeZone();
  if (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _TimeZoneBridged();
    *(void *)(swift_allocObject() + 16) = v0;
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_1(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (void (*)(uint64_t))type metadata accessor for _TimeZoneBridged);
    id v1 = v0;
  }
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSTimeZone()
{
  id v1 = *v0;
  type metadata accessor for _NSSwiftTimeZone();
  if (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _TimeZoneBridged();
    *(void *)(swift_allocObject() + 16) = v1;
    _s10Foundation16_TimeZoneBridgedCAcA01_bC8ProtocolAAWlTm_1(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, (void (*)(uint64_t))type metadata accessor for _TimeZoneBridged);
    id v2 = v1;
  }
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  AnyHashable.init<A>(_:)();
}

BOOL static TimeZone.DaylightSavingTimePolicy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void TimeZone.DaylightSavingTimePolicy.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int TimeZone.DaylightSavingTimePolicy.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t instantiation function for generic protocol witness table for TimeZone(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  a1[2] = lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  a1[3] = lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  unint64_t result = lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  a1[4] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TimeZone.DaylightSavingTimePolicy and conformance TimeZone.DaylightSavingTimePolicy()
{
  unint64_t result = lazy protocol witness table cache variable for type TimeZone.DaylightSavingTimePolicy and conformance TimeZone.DaylightSavingTimePolicy;
  if (!lazy protocol witness table cache variable for type TimeZone.DaylightSavingTimePolicy and conformance TimeZone.DaylightSavingTimePolicy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeZone.DaylightSavingTimePolicy and conformance TimeZone.DaylightSavingTimePolicy);
  }
  return result;
}

ValueMetadata *type metadata accessor for TimeZone.DaylightSavingTimePolicy()
{
  return &type metadata for TimeZone.DaylightSavingTimePolicy;
}

uint64_t specialized TimeZone.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x616470756F747561 && a2 == 0xEC000000676E6974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)(a1);
}

uint64_t specialized _PlistDecodingStorage.topContainer.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    outlined init with copy of Any(a1 + 32 * v3, (uint64_t)v7);
    outlined init with copy of Any?((uint64_t)v7, (uint64_t)&v5);
    if (v6)
    {
      outlined init with take of Any(&v5, a2);
      return outlined destroy of Any?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = outlined destroy of Any?((uint64_t)&v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
  __break(1u);
  return result;
}

uint64_t specialized _PlistDecodingStorage.popContainer()()
{
  Swift::UInt v1 = *(void **)v0;
  if (!*(void *)(*(void *)v0 + 16))
  {
    __break(1u);
LABEL_6:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    Swift::UInt v1 = (void *)result;
    uint64_t v3 = *(void *)(result + 16);
    if (v3) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v3 = v1[2];
  if (v3)
  {
LABEL_4:
    uint64_t v4 = v3 - 1;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v1[4 * v3]);
    v1[2] = v4;
    *(void *)uint64_t v0 = v1;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t __PlistDictionaryDecoder.unbox<A>(_:as:)@<X0>(void *a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a2 == &type metadata for Date)
  {
    uint64_t result = __PlistDictionaryDecoder.unbox(_:as:)(a1, (uint64_t)&v17);
    if (v5) {
      return result;
    }
    *(void *)&v21[0] = v17;
    BYTE8(v21[0]) = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
LABEL_14:
    int v16 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a4, v16 ^ 1u, 1, a3);
  }
  if (a2 == &type metadata for Data)
  {
    uint64_t result = specialized __PlistDictionaryDecoder.unbox(_:as:)(a1);
    if (v5) {
      return result;
    }
    uint64_t v17 = result;
    uint64_t v18 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    goto LABEL_14;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)&v17);
  outlined init with copy of Any((uint64_t)&v17, (uint64_t)v21);
  uint64_t v8 = (void *)(v4 + 16);
  __darwin_time_t v9 = *(void **)(v4 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 16) = v9;
  uint64_t v22 = a4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    __darwin_time_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    *uint64_t v8 = v9;
  }
  unint64_t v12 = v9[2];
  unint64_t v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    __darwin_time_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
    *uint64_t v8 = v9;
  }
  void v9[2] = v12 + 1;
  outlined init with take of Any(v21, &v9[4 * v12 + 4]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  uint64_t v19 = type metadata accessor for __PlistDictionaryDecoder();
  uint64_t v20 = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder(&lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder);
  uint64_t v17 = v4;
  swift_retain();
  uint64_t v13 = v22;
  dispatch thunk of Decodable.init(from:)();
  if (!v5) {
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v13, 0, 1, a3);
  }
  return specialized _PlistDecodingStorage.popContainer()();
}

uint64_t __PlistDictionaryDecoder.unbox<A>(_:as:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v7 = v6;
  uint64_t v26 = a3;
  uint64_t v29 = a6;
  uint64_t v32 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v25 - v12;
  outlined init with copy of Any(a1, (uint64_t)v30);
  outlined init with copy of Any((uint64_t)v30, (uint64_t)v31);
  uint64_t v15 = (void *)(v7 + 16);
  uint64_t v14 = *(void **)(v7 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v7 + 16) = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    void *v15 = v14;
  }
  unint64_t v18 = v14[2];
  unint64_t v17 = v14[3];
  if (v18 >= v17 >> 1)
  {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v14);
    void *v15 = v14;
  }
  void v14[2] = v18 + 1;
  outlined init with take of Any(v31, &v14[4 * v18 + 4]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  _OWORD v30[3] = type metadata accessor for __PlistDictionaryDecoder();
  v30[4] = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder(&lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder);
  v30[0] = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v26, AssociatedTypeWitness);
  uint64_t v19 = *(void (**)(void *, char *, uint64_t, uint64_t))(a5 + 16);
  swift_retain();
  uint64_t v20 = v28;
  uint64_t v21 = v29;
  uint64_t v22 = v13;
  uint64_t v23 = v32;
  v19(v30, v22, v32, a5);
  if (!v20) {
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v21, 0, 1, v23);
  }
  return specialized _PlistDecodingStorage.popContainer()();
}

void *__PlistDictionaryDecoder.init(referencing:at:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
  v3[2] = MEMORY[0x1E4FBC860];
  outlined init with copy of Any(a1, (uint64_t)v13);
  outlined init with copy of Any((uint64_t)v13, (uint64_t)v12);
  v3[2] = v7;
  uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v7);
  v3[2] = v8;
  unint64_t v10 = v8[2];
  unint64_t v9 = v8[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v8);
    v3[2] = v8;
  }
  v8[2] = v10 + 1;
  outlined init with take of Any(v12, &v8[4 * v10 + 4]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  __swift_destroy_boxed_opaque_existential_1(a1);
  v3[3] = a3;
  v3[4] = a2;
  return v3;
}

uint64_t __PlistDictionaryDecoder.topValueIsNull.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v0, v6);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  swift_dynamicCast();
  uint64_t v1 = v5[3];
  outlined destroy of Any?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v1) {
    return 1;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v6);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v5[0] == 0x6C6C756E24 && v5[1] == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v3) {
      return 1;
    }
  }
  return 0;
}

uint64_t __PlistDictionaryDecoder.container<A>(keyedBy:)()
{
  if (__PlistDictionaryDecoder.topValueIsNull.getter())
  {
    uint64_t v1 = type metadata accessor for DecodingError();
    swift_allocError();
    char v3 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *char v3 = type metadata accessor for KeyedDecodingContainer();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v1 - 8) + 104))(v3, *MEMORY[0x1E4FBBA80], v1);
  }
  else
  {
    uint64_t v4 = swift_bridgeObjectRetain();
    specialized _PlistDecodingStorage.topContainer.getter(v4, &v11);
    swift_bridgeObjectRelease();
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if (swift_dynamicCast())
    {
      uint64_t v6 = *(void *)(v0 + 32);
      *(void *)&long long v11 = v0;
      *((void *)&v11 + 1) = v10;
      uint64_t v12 = v6;
      type metadata accessor for _PlistDictionaryKeyedDecodingContainer();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      return KeyedDecodingContainer.init<A>(_:)();
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = swift_bridgeObjectRetain();
    specialized _PlistDecodingStorage.topContainer.getter(v8, &v11);
    swift_bridgeObjectRelease();
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._typeMismatch(at:expectation:reality:)(v5, &v11, v9);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  }
  return swift_willThrow();
}

uint64_t __PlistDictionaryDecoder.unkeyedContainer()@<X0>(void *a1@<X8>)
{
  if (__PlistDictionaryDecoder.topValueIsNull.getter())
  {
    uint64_t v3 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v5 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x1E4FBBA80], v3);
  }
  else
  {
    uint64_t v6 = swift_bridgeObjectRetain();
    specialized _PlistDecodingStorage.topContainer.getter(v6, v14);
    swift_bridgeObjectRelease();
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    if (swift_dynamicCast())
    {
      uint64_t v8 = *(void *)(v1 + 32);
      a1[3] = &unk_1ECA444C0;
      a1[4] = lazy protocol witness table accessor for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer();
      unint64_t v9 = (void *)swift_allocObject();
      *a1 = v9;
      void v9[2] = v1;
      v9[3] = v13;
      v9[4] = v8;
      v9[5] = 0;
      swift_retain();
      return swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    uint64_t v11 = swift_bridgeObjectRetain();
    specialized _PlistDecodingStorage.topContainer.getter(v11, v14);
    swift_bridgeObjectRelease();
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._typeMismatch(at:expectation:reality:)(v7, v14, v12);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  return swift_willThrow();
}

uint64_t __PlistDictionaryDecoder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __PlistDictionaryDecoder()
{
  return self;
}

uint64_t protocol witness for Decoder.container<A>(keyedBy:) in conformance __PlistDictionaryDecoder()
{
  return __PlistDictionaryDecoder.container<A>(keyedBy:)();
}

uint64_t protocol witness for Decoder.unkeyedContainer() in conformance __PlistDictionaryDecoder@<X0>(void *a1@<X8>)
{
  return __PlistDictionaryDecoder.unkeyedContainer()(a1);
}

uint64_t protocol witness for Decoder.singleValueContainer() in conformance __PlistDictionaryDecoder@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for __PlistDictionaryDecoder();
  a1[4] = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder(&lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder);
  *a1 = v3;
  return swift_retain();
}

uint64_t protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:) in conformance __PlistDictionaryDecoder@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return __PlistDictionaryDecoder.decode<A>(_:)(a1, a2, a3);
}

uint64_t __PlistDictionaryDecoder.decode<A>(_:)@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v9 = (char *)v20 - v8;
  uint64_t v10 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v10, v21);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v20[0] == 0x6C6C756E24 && v20[1] == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t v12 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v14 = v13;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      void *v14 = a1;
      *(void *)&v21[0] = 0;
      *((void *)&v21[0] + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      *(void *)&v21[0] = 0x6465746365707845;
      *((void *)&v21[0] + 1) = 0xE900000000000020;
      v15._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._unint64_t object = (void *)0x80000001823B19B0;
      v16._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
      String.append(_:)(v16);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(ValueMetadata **, void, uint64_t))(*(void *)(v12 - 8) + 104))(v14, *MEMORY[0x1E4FBBA80], v12);
      return swift_willThrow();
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_6;
    }
  }
  uint64_t v18 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v18, v21);
  swift_bridgeObjectRelease();
  __PlistDictionaryDecoder.unbox<A>(_:as:)(v21, a1, a2, (uint64_t)v9);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  if (!v3)
  {
    uint64_t v19 = *(void *)(a2 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v9, 1, a2);
    if (result == 1) {
      __break(1u);
    }
    else {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a3, v9, a2);
    }
  }
  return result;
}

uint64_t protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:configuration:) in conformance __PlistDictionaryDecoder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return __PlistDictionaryDecoder.decode<A>(_:configuration:)(a1, a2, a3, a4, a5);
}

uint64_t __PlistDictionaryDecoder.decode<A>(_:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v14, v25);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v24[0] == 0x6C6C756E24 && v24[1] == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_7:
      uint64_t v16 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v18 = v17;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v18 = a1;
      *(void *)&v25[0] = 0;
      *((void *)&v25[0] + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      *(void *)&v25[0] = 0x6465746365707845;
      *((void *)&v25[0] + 1) = 0xE900000000000020;
      v19._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._unint64_t object = (void *)0x80000001823B19B0;
      v20._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
      String.append(_:)(v20);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x1E4FBBA80], v16);
      return swift_willThrow();
    }
    uint64_t v26 = a5;
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v26 = a5;
  }
  uint64_t v22 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v22, v25);
  swift_bridgeObjectRelease();
  __PlistDictionaryDecoder.unbox<A>(_:as:configuration:)((uint64_t)v25, a1, a2, a3, a4, (uint64_t)v13);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  if (!v5)
  {
    uint64_t v23 = *(void *)(a3 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v13, 1, a3);
    if (result == 1) {
      __break(1u);
    }
    else {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(v26, v13, a3);
    }
  }
  return result;
}

uint64_t _PlistDictionaryKeyedDecodingContainer.allKeys.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v9[2] = a4;
  v9[3] = a5;
  swift_bridgeObjectRetain();
  uint64_t v7 = _sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlFxq_Sgs5Error_pRi_zRi0_zRi__Ri0__r0_lySSqd__Isgnrzo_SD4KeysVySSyp_GABsAG_pAJRszr__lIetMggozo_Tp5((void (*)(void))partial apply for closure #1 in _PlistDictionaryKeyedDecodingContainer.allKeys.getter, (uint64_t)v9, a2, a4);
  swift_bridgeObjectRelease();
  return v7;
}

BOOL _PlistDictionaryKeyedDecodingContainer.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  if (*(void *)(a3 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5), (v7 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v6, (uint64_t)&v10);
    swift_bridgeObjectRelease();
    BOOL v8 = *((void *)&v11 + 1) != 0;
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
    swift_bridgeObjectRelease();
    BOOL v8 = 0;
  }
  outlined destroy of Any?((uint64_t)&v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v8;
}

uint64_t _PlistDictionaryKeyedDecodingContainer.decodeNil(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11), (v13 & 1) == 0))
  {
    long long v26 = 0u;
    long long v27 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v12, (uint64_t)&v26);
  swift_bridgeObjectRelease();
  if (!*((void *)&v27 + 1))
  {
LABEL_9:
    outlined destroy of Any?((uint64_t)&v26, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v17 = v16;
    uint64_t v29 = (char *)v16
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    void v17[3] = a5;
    v17[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
    *(void *)&v28[0] = 0;
    *((void *)&v28[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(void *)&v28[0] = 0xD00000000000001DLL;
    *((void *)&v28[0] + 1) = 0x80000001823B2190;
    v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 2238496;
    v20._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    uint64_t v14 = v28;
    v22._uint64_t countAndFlagsBits = 3025186;
    v22._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v22);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBA68], v15);
    swift_willThrow();
    return v14 & 1;
  }
  outlined init with take of Any(&v26, v28);
  outlined init with copy of Any((uint64_t)v28, (uint64_t)&v26);
  if (swift_dynamicCast())
  {
    if (v24 == 0x6C6C756E24 && v25 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      LOBYTE(v14) = 1;
    }
    else
    {
      LOBYTE(v14) = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    LOBYTE(v14) = 0;
  }
  return v14 & 1;
}

uint64_t _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = a4;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  char v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15), (v17 & 1) == 0))
  {
    long long v41 = 0u;
    long long v42 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v16, (uint64_t)&v41);
  swift_bridgeObjectRelease();
  if (!*((void *)&v42 + 1))
  {
LABEL_13:
    outlined destroy of Any?((uint64_t)&v41, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v28 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v30 = v29;
    uint64_t v45 = (char *)v29
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    _OWORD v30[3] = a5;
    v30[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(boxed_opaque_existential_1, a1, a5);
    *(void *)&long long v41 = 0;
    *((void *)&v41 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(void *)&long long v41 = 0xD00000000000001DLL;
    *((void *)&v41 + 1) = 0x80000001823B2190;
    v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = 2238496;
    v33._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v33);
    v34._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v18 = &v41;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._uint64_t countAndFlagsBits = 3025186;
    v35._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v35);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v28 - 8) + 104))(v30, *MEMORY[0x1E4FBBA68], v28);
    swift_willThrow();
    return v18 & 1;
  }
  outlined init with take of Any(&v41, v44);
  unint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v39(v13, a1, a5);
  uint64_t v18 = *(long long **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 32) = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v18 = (long long *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v18 + 2) + 1, 1, v18);
    *(void *)(a2 + 32) = v18;
  }
  unint64_t v21 = *((void *)v18 + 2);
  unint64_t v20 = *((void *)v18 + 3);
  unint64_t v38 = v21 + 1;
  if (v21 >= v20 >> 1)
  {
    uint64_t v18 = (long long *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v18);
    *(void *)(a2 + 32) = v18;
  }
  *((void *)&v42 + 1) = a5;
  uint64_t v43 = a6;
  Swift::String v22 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v41);
  v39((char *)v22, (uint64_t)v13, a5);
  *((void *)v18 + 2) = v38;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v41, (uint64_t)v18 + 40 * v21 + 32);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a5);
  LOBYTE(v18) = a2;
  uint64_t v23 = v45;
  char v24 = specialized __PlistDictionaryDecoder.unbox(_:as:)(v44);
  if (!v23)
  {
    if (v24 != 2)
    {
      LOBYTE(v18) = v24 & 1;
      $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      return v18 & 1;
    }
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    long long v27 = v26;
    uint64_t v45 = (char *)v26
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                 + 48);
    *long long v27 = MEMORY[0x1E4FBB390];
    *(void *)&long long v41 = 0;
    *((void *)&v41 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v18 = &v41;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x1E4FBBA80], v25);
    swift_willThrow();
  }
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  return v18 & 1;
}

uint64_t $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2[2])
  {
    __break(1u);
LABEL_6:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    uint64_t v2 = (void *)result;
    uint64_t v4 = *(void *)(result + 16);
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t v1 = a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v4 = v2[2];
  if (v4)
  {
LABEL_4:
    uint64_t v5 = v4 - 1;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v2[5 * v4 - 1]);
    v2[2] = v5;
    *(void *)(v1 + 32) = v2;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

long long *_PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_OWORD *), uint64_t a8, uint64_t a9, uint64_t (*a10)(_OWORD *))
{
  uint64_t v46 = a8;
  uint64_t v47 = a4;
  uint64_t v53 = a7;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  char v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v21 & 1) == 0))
  {
    long long v49 = 0u;
    long long v50 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v20, (uint64_t)&v49);
  swift_bridgeObjectRelease();
  if (!*((void *)&v50 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v49, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v31 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v33 = v32;
    uint64_t v53 = (uint64_t (*)(_OWORD *))((char *)v32
                                           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                                                    + 48));
    v33[3] = a5;
    v33[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(boxed_opaque_existential_1, a1, a5);
    *(void *)&long long v49 = 0;
    *((void *)&v49 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(void *)&long long v49 = 0xD00000000000001DLL;
    *((void *)&v49 + 1) = 0x80000001823B2190;
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 2238496;
    v36._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v36);
    v37._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v28 = &v49;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 3025186;
    v38._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v38);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v31 - 8) + 104))(v33, *MEMORY[0x1E4FBBA68], v31);
    swift_willThrow();
    return v28;
  }
  outlined init with take of Any(&v49, v52);
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v44(v17, a1, a5);
  Swift::String v22 = *(void **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 32) = v22;
  uint64_t v45 = a2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    Swift::String v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
    *(void *)(a2 + 32) = v22;
  }
  unint64_t v25 = v22[2];
  unint64_t v24 = v22[3];
  if (v25 >= v24 >> 1)
  {
    Swift::String v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v22);
    *(void *)(v45 + 32) = v22;
  }
  *((void *)&v50 + 1) = a5;
  uint64_t v51 = a6;
  long long v26 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v49);
  v44((char *)v26, (uint64_t)v17, a5);
  uint64_t v22[2] = v25 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v49, (uint64_t)&v22[5 * v25 + 4]);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
  uint64_t v27 = v45;
  uint64_t v28 = (long long *)v45;
  uint64_t v29 = v48;
  uint64_t v30 = v53(v52);
  if (!v29)
  {
    uint64_t v28 = (long long *)v30;
    if ((v30 & 0x100) != 0)
    {
      uint64_t v53 = a10;
      uint64_t v48 = a9;
      uint64_t v40 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v42 = v41;
      uint64_t v44 = (void (*)(char *, uint64_t, uint64_t))((char *)v41
                                                          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                                                                   + 48));
      *long long v42 = v46;
      *(void *)&long long v49 = 0;
      *((void *)&v49 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      uint64_t v28 = &v49;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v40 - 8) + 104))(v42, *MEMORY[0x1E4FBBA80], v40);
      swift_willThrow();
    }
  }
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  return v28;
}

{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  long long *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  long long v49;
  long long v50;
  uint64_t v51;
  _OWORD v52[2];
  uint64_t (*v53)(_OWORD *);

  uint64_t v46 = a8;
  uint64_t v47 = a4;
  uint64_t v53 = a7;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  char v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v21 & 1) == 0))
  {
    long long v49 = 0u;
    long long v50 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v20, (uint64_t)&v49);
  swift_bridgeObjectRelease();
  if (!*((void *)&v50 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v49, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v31 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v33 = v32;
    uint64_t v53 = (uint64_t (*)(_OWORD *))((char *)v32
                                           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                                                    + 48));
    v33[3] = a5;
    v33[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(boxed_opaque_existential_1, a1, a5);
    *(void *)&long long v49 = 0;
    *((void *)&v49 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(void *)&long long v49 = 0xD00000000000001DLL;
    *((void *)&v49 + 1) = 0x80000001823B2190;
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 2238496;
    v36._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v36);
    v37._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v28 = &v49;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 3025186;
    v38._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v38);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v31 - 8) + 104))(v33, *MEMORY[0x1E4FBBA68], v31);
    swift_willThrow();
    return v28;
  }
  outlined init with take of Any(&v49, v52);
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v44(v17, a1, a5);
  Swift::String v22 = *(void **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 32) = v22;
  uint64_t v45 = a2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    Swift::String v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
    *(void *)(a2 + 32) = v22;
  }
  unint64_t v25 = v22[2];
  unint64_t v24 = v22[3];
  if (v25 >= v24 >> 1)
  {
    Swift::String v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v22);
    *(void *)(v45 + 32) = v22;
  }
  *((void *)&v50 + 1) = a5;
  uint64_t v51 = a6;
  long long v26 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v49);
  v44((char *)v26, (uint64_t)v17, a5);
  uint64_t v22[2] = v25 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v49, (uint64_t)&v22[5 * v25 + 4]);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
  uint64_t v27 = v45;
  uint64_t v28 = (long long *)v45;
  uint64_t v29 = v48;
  uint64_t v30 = v53(v52);
  if (!v29)
  {
    uint64_t v28 = (long long *)v30;
    if ((v30 & 0x10000) != 0)
    {
      uint64_t v53 = a10;
      uint64_t v48 = a9;
      uint64_t v40 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v42 = v41;
      uint64_t v44 = (void (*)(char *, uint64_t, uint64_t))((char *)v41
                                                          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                                                                   + 48));
      *long long v42 = v46;
      *(void *)&long long v49 = 0;
      *((void *)&v49 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      uint64_t v28 = &v49;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v40 - 8) + 104))(v42, *MEMORY[0x1E4FBBA80], v40);
      swift_willThrow();
    }
  }
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  return v28;
}

{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  long long *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  long long v49;
  long long v50;
  uint64_t v51;
  _OWORD v52[2];
  uint64_t (*v53)(_OWORD *);

  uint64_t v46 = a8;
  uint64_t v47 = a4;
  uint64_t v53 = a7;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  char v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v21 & 1) == 0))
  {
    long long v49 = 0u;
    long long v50 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v20, (uint64_t)&v49);
  swift_bridgeObjectRelease();
  if (!*((void *)&v50 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v49, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v31 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v33 = v32;
    uint64_t v53 = (uint64_t (*)(_OWORD *))((char *)v32
                                           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                                                    + 48));
    v33[3] = a5;
    v33[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(boxed_opaque_existential_1, a1, a5);
    *(void *)&long long v49 = 0;
    *((void *)&v49 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(void *)&long long v49 = 0xD00000000000001DLL;
    *((void *)&v49 + 1) = 0x80000001823B2190;
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 2238496;
    v36._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v36);
    v37._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v28 = &v49;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 3025186;
    v38._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v38);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v31 - 8) + 104))(v33, *MEMORY[0x1E4FBBA68], v31);
    swift_willThrow();
    return v28;
  }
  outlined init with take of Any(&v49, v52);
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v44(v17, a1, a5);
  Swift::String v22 = *(void **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 32) = v22;
  uint64_t v45 = a2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    Swift::String v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
    *(void *)(a2 + 32) = v22;
  }
  unint64_t v25 = v22[2];
  unint64_t v24 = v22[3];
  if (v25 >= v24 >> 1)
  {
    Swift::String v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v22);
    *(void *)(v45 + 32) = v22;
  }
  *((void *)&v50 + 1) = a5;
  uint64_t v51 = a6;
  long long v26 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v49);
  v44((char *)v26, (uint64_t)v17, a5);
  uint64_t v22[2] = v25 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v49, (uint64_t)&v22[5 * v25 + 4]);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
  uint64_t v27 = v45;
  uint64_t v28 = (long long *)v45;
  uint64_t v29 = v48;
  uint64_t v30 = v53(v52);
  if (!v29)
  {
    uint64_t v28 = (long long *)v30;
    if ((v30 & 0x100000000) != 0)
    {
      uint64_t v53 = a10;
      uint64_t v48 = a9;
      uint64_t v40 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v42 = v41;
      uint64_t v44 = (void (*)(char *, uint64_t, uint64_t))((char *)v41
                                                          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                                                                   + 48));
      *long long v42 = v46;
      *(void *)&long long v49 = 0;
      *((void *)&v49 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      uint64_t v28 = &v49;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v40 - 8) + 104))(v42, *MEMORY[0x1E4FBBA80], v40);
      swift_willThrow();
    }
  }
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  return v28;
}

{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  long long *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *boxed_opaque_existential_1;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  long long v50;
  long long v51;
  uint64_t v52;
  _OWORD v53[2];
  uint64_t (*v54)(_OWORD *);

  uint64_t v47 = a8;
  uint64_t v48 = a4;
  unint64_t v54 = a7;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  char v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v21 & 1) == 0))
  {
    long long v50 = 0u;
    uint64_t v51 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v20, (uint64_t)&v50);
  swift_bridgeObjectRelease();
  if (!*((void *)&v51 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v50, (uint64_t *)&demangling cache variable for type metadata for Any?);
    Swift::String v32 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v34 = v33;
    unint64_t v54 = (uint64_t (*)(_OWORD *))((char *)v33
                                           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                                                    + 48));
    v34[3] = a5;
    v34[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(boxed_opaque_existential_1, a1, a5);
    *(void *)&long long v50 = 0;
    *((void *)&v50 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(void *)&long long v50 = 0xD00000000000001DLL;
    *((void *)&v50 + 1) = 0x80000001823B2190;
    v36._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._uint64_t countAndFlagsBits = 2238496;
    v37._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v37);
    v38._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v28 = &v50;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._uint64_t countAndFlagsBits = 3025186;
    v39._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v39);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v32 - 8) + 104))(v34, *MEMORY[0x1E4FBBA68], v32);
    swift_willThrow();
    return v28;
  }
  outlined init with take of Any(&v50, v53);
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v45(v17, a1, a5);
  Swift::String v22 = *(void **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 32) = v22;
  uint64_t v46 = a2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    Swift::String v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
    *(void *)(a2 + 32) = v22;
  }
  unint64_t v25 = v22[2];
  unint64_t v24 = v22[3];
  if (v25 >= v24 >> 1)
  {
    Swift::String v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v22);
    *(void *)(v46 + 32) = v22;
  }
  *((void *)&v51 + 1) = a5;
  uint64_t v52 = a6;
  long long v26 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v50);
  v45((char *)v26, (uint64_t)v17, a5);
  uint64_t v22[2] = v25 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v50, (uint64_t)&v22[5 * v25 + 4]);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
  uint64_t v27 = v46;
  uint64_t v28 = (long long *)v46;
  uint64_t v29 = v49;
  uint64_t v30 = v54(v53);
  if (v29) {
    goto LABEL_15;
  }
  if (v31)
  {
    unint64_t v54 = a10;
    long long v49 = a9;
    long long v41 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v43 = v42;
    uint64_t v45 = (void (*)(char *, uint64_t, uint64_t))((char *)v42
                                                        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                                                                 + 48));
    *uint64_t v43 = v47;
    *(void *)&long long v50 = 0;
    *((void *)&v50 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v28 = &v50;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v41 - 8) + 104))(v43, *MEMORY[0x1E4FBBA80], v41);
    swift_willThrow();
LABEL_15:
    $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v27);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    return v28;
  }
  uint64_t v28 = (long long *)v30;
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  return v28;
}

float _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = a4;
  uint64_t v12 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) == 0))
  {
    long long v42 = 0u;
    long long v43 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v17, (uint64_t)&v42);
  swift_bridgeObjectRelease();
  if (!*((void *)&v43 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v42, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v28 = v27;
    long long v41 = (char *)v27
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    void v28[3] = a5;
    v28[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v28);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16))(boxed_opaque_existential_1, a1, a5);
    *(void *)&long long v42 = 0;
    *((void *)&v42 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(void *)&long long v42 = 0xD00000000000001DLL;
    *((void *)&v42 + 1) = 0x80000001823B2190;
    v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 2238496;
    v31._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v31);
    v32._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = 3025186;
    v33._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v33);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x1E4FBBA68], v26);
    swift_willThrow();
    return v6;
  }
  outlined init with take of Any(&v42, v45);
  unint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v39(v14, a1, a5);
  uint64_t v19 = *(void **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 32) = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    *(void *)(a2 + 32) = v19;
  }
  unint64_t v22 = v19[2];
  unint64_t v21 = v19[3];
  unint64_t v38 = v22 + 1;
  if (v22 >= v21 >> 1)
  {
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v19);
    *(void *)(a2 + 32) = v19;
  }
  *((void *)&v43 + 1) = a5;
  uint64_t v44 = a6;
  uint64_t v23 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v42);
  v39((char *)v23, (uint64_t)v14, a5);
  void v19[2] = v38;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v42, (uint64_t)&v19[5 * v22 + 4]);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a5);
  unint64_t v24 = v41;
  specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)(v45);
  if (v24) {
    goto LABEL_15;
  }
  if ((v25 & 0x100000000) != 0)
  {
    uint64_t v35 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v37 = v36;
    long long v41 = (char *)v36
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                 + 48);
    *Swift::String v37 = MEMORY[0x1E4FBB470];
    *(void *)&long long v42 = 0;
    *((void *)&v42 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v37, *MEMORY[0x1E4FBBA80], v35);
    swift_willThrow();
LABEL_15:
    $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
    return v6;
  }
  float v6 = *(float *)&v25;
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  return v6;
}

double _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v41 = a4;
  uint64_t v12 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v18 & 1) == 0))
  {
    long long v43 = 0u;
    long long v44 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v17, (uint64_t)&v43);
  swift_bridgeObjectRelease();
  if (!*((void *)&v44 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v43, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v27 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v28;
    long long v42 = (char *)v28
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    v29[3] = a5;
    v29[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16))(boxed_opaque_existential_1, a1, a5);
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(void *)&long long v43 = 0xD00000000000001DLL;
    *((void *)&v43 + 1) = 0x80000001823B2190;
    v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 2238496;
    v32._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v32);
    v33._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 3025186;
    v34._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v34);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v27 - 8) + 104))(v29, *MEMORY[0x1E4FBBA68], v27);
    swift_willThrow();
    return v6;
  }
  outlined init with take of Any(&v43, v46);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v40(v14, a1, a5);
  uint64_t v19 = *(void **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 32) = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    *(void *)(a2 + 32) = v19;
  }
  unint64_t v22 = v19[2];
  unint64_t v21 = v19[3];
  unint64_t v39 = v22 + 1;
  if (v22 >= v21 >> 1)
  {
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v19);
    *(void *)(a2 + 32) = v19;
  }
  *((void *)&v44 + 1) = a5;
  uint64_t v45 = a6;
  uint64_t v23 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v43);
  v40((char *)v23, (uint64_t)v14, a5);
  void v19[2] = v39;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v43, (uint64_t)&v19[5 * v22 + 4]);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a5);
  unint64_t v24 = v42;
  uint64_t v25 = specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)((uint64_t)v46);
  if (v24) {
    goto LABEL_15;
  }
  if (v26)
  {
    uint64_t v36 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v38 = v37;
    long long v42 = (char *)v37
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                 + 48);
    *unint64_t v38 = MEMORY[0x1E4FBB3D0];
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v36 - 8) + 104))(v38, *MEMORY[0x1E4FBBA80], v36);
    swift_willThrow();
LABEL_15:
    $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    return v6;
  }
  double v6 = *(double *)&v25;
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  return v6;
}

long long *_PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v42 = a4;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v15), (v17 & 1) == 0))
  {
    long long v43 = 0u;
    long long v44 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v16, (uint64_t)&v43);
  swift_bridgeObjectRelease();
  if (!*((void *)&v44 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v43, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v27 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v28;
    uint64_t v47 = (char *)v28
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context))
                 + 48);
    v29[3] = a5;
    v29[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(boxed_opaque_existential_1, a1, a5);
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(void *)&long long v43 = 0xD00000000000001DLL;
    *((void *)&v43 + 1) = 0x80000001823B2190;
    v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 2238496;
    v32._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v32);
    v33._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v23 = &v43;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 3025186;
    v34._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v34);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v27 - 8) + 104))(v29, *MEMORY[0x1E4FBBA68], v27);
    swift_willThrow();
    return v23;
  }
  outlined init with take of Any(&v43, v46);
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v41(v13, a1, a5);
  char v18 = *(void **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 32) = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    *(void *)(a2 + 32) = v18;
  }
  unint64_t v21 = v18[2];
  unint64_t v20 = v18[3];
  unint64_t v40 = v21 + 1;
  if (v21 >= v20 >> 1)
  {
    char v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v18);
    *(void *)(a2 + 32) = v18;
  }
  *((void *)&v44 + 1) = a5;
  uint64_t v45 = a6;
  unint64_t v22 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v43);
  v41((char *)v22, (uint64_t)v13, a5);
  _OWORD v18[2] = v40;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v43, (uint64_t)&v18[5 * v21 + 4]);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a5);
  uint64_t v23 = (long long *)a2;
  unint64_t v24 = v47;
  uint64_t v25 = specialized __PlistDictionaryDecoder.unbox(_:as:)(v46);
  if (!v24)
  {
    if (v26)
    {
      uint64_t v23 = (long long *)v25;
      $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
      return v23;
    }
    uint64_t v36 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v38 = v37;
    uint64_t v47 = (char *)v37
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                 + 48);
    *unint64_t v38 = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v23 = &v43;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v36 - 8) + 104))(v38, *MEMORY[0x1E4FBBA80], v36);
    swift_willThrow();
  }
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  return v23;
}

uint64_t _PlistDictionaryKeyedDecodingContainer.decode<A>(_:forKey:)@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10)
{
  uint64_t v57 = a7;
  uint64_t v55 = a5;
  long long v56 = a1;
  uint64_t v64 = a3;
  unint64_t v54 = a9;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v53 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v16 = (char *)&v50 - v15;
  uint64_t v17 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v18);
  unint64_t v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a4 + 16)
    || (v59 = a4, unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22), (v24 & 1) == 0))
  {
    long long v60 = 0u;
    long long v61 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(v59 + 56) + 32 * v23, (uint64_t)&v60);
  swift_bridgeObjectRelease();
  if (!*((void *)&v61 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v60, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v41 = type metadata accessor for DecodingError();
    uint64_t v58 = swift_allocError();
    long long v43 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingKey, DecodingError.Context));
    v43[3] = a6;
    v43[4] = a8;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v43);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 16))(boxed_opaque_existential_1, a2, a6);
    *(void *)&long long v60 = 0;
    *((void *)&v60 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(void *)&long long v60 = 0xD00000000000001DLL;
    *((void *)&v60 + 1) = 0x80000001823B2190;
    v45._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._uint64_t countAndFlagsBits = 2238496;
    v46._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v46);
    v47._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._uint64_t countAndFlagsBits = 3025186;
    v48._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v48);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v41 - 8) + 104))(v43, *MEMORY[0x1E4FBBA68], v41);
    return swift_willThrow();
  }
  uint64_t v52 = a10;
  outlined init with take of Any(&v60, v63);
  uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v51(v20, a2, a6);
  uint64_t v25 = v64;
  uint64_t v26 = *(void **)(v64 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v25 + 32) = v26;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
    *(void *)(v64 + 32) = v26;
  }
  unint64_t v29 = v26[2];
  unint64_t v28 = v26[3];
  unint64_t v50 = v29 + 1;
  if (v29 >= v28 >> 1)
  {
    uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v26);
    *(void *)(v64 + 32) = v26;
  }
  *((void *)&v61 + 1) = a6;
  uint64_t v62 = a8;
  Swift::String v30 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v60);
  v51((char *)v30, (uint64_t)v20, a6);
  void v26[2] = v50;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v60, (uint64_t)&v26[5 * v29 + 4]);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, a6);
  uint64_t v31 = v57;
  uint64_t v32 = v64;
  uint64_t v33 = v58;
  __PlistDictionaryDecoder.unbox<A>(_:as:)(v63, v56, v57, (uint64_t)v16);
  if (v33) {
    goto LABEL_14;
  }
  uint64_t v34 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v16, 1, v31) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v54, v16, v31);
LABEL_14:
    uint64_t v40 = v32;
    goto LABEL_15;
  }
  (*(void (**)(char *, uint64_t))(v53 + 8))(v16, v14);
  uint64_t v35 = type metadata accessor for DecodingError();
  uint64_t v58 = swift_allocError();
  Swift::String v37 = v36;
  unint64_t v54 = (char *)v36
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
               + 48);
  *Swift::String v37 = v56;
  *(void *)&long long v60 = 0;
  *((void *)&v60 + 1) = 0xE000000000000000;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  *(void *)&long long v60 = 0x6465746365707845;
  *((void *)&v60 + 1) = 0xE900000000000020;
  v38._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v39._unint64_t object = (void *)0x80000001823B21B0;
  String.append(_:)(v39);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v37, *MEMORY[0x1E4FBBA80], v35);
  swift_willThrow();
  uint64_t v40 = v32;
LABEL_15:
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v40);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
}

uint64_t _PlistDictionaryKeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, char *a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  v40[0] = a8;
  uint64_t v41 = a6;
  uint64_t v43 = a3;
  uint64_t v13 = *(void *)(a5 - 8);
  double v14 = MEMORY[0x1F4188790](a1);
  unint64_t v16 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void (**)(char *, double))(v13 + 16);
  v40[2] = v18;
  v17(v16, v14);
  uint64_t v19 = *(void **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v42 = a2;
  *(void *)(a2 + 32) = v19;
  v40[3] = a4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    *(void *)(v42 + 32) = v19;
  }
  unint64_t v22 = v19[2];
  unint64_t v21 = v19[3];
  if (v22 >= v21 >> 1)
  {
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v19);
    *(void *)(v42 + 32) = v19;
  }
  uint64_t v44 = a9;
  uint64_t v48 = a5;
  uint64_t v49 = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v47);
  ((void (*)(uint64_t *, char *, uint64_t))v17)(boxed_opaque_existential_1, v16, a5);
  void v19[2] = v22 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v47, (uint64_t)&v19[5 * v22 + 4]);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, a5);
  uint64_t v24 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v26 = v43;
  if (*(void *)(v43 + 16))
  {
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
    if (v28)
    {
      outlined init with copy of Any(*(void *)(v26 + 56) + 32 * v27, (uint64_t)&v45);
    }
    else
    {
      long long v45 = 0u;
      long long v46 = 0u;
    }
  }
  else
  {
    long long v45 = 0u;
    long long v46 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v46 + 1))
  {
    outlined init with take of Any(&v45, &v47);
    outlined init with copy of Any((uint64_t)&v47, (uint64_t)&v45);
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if (swift_dynamicCast())
    {
      uint64_t v30 = v42;
      uint64_t v31 = *(void *)(v42 + 32);
      *(void *)&long long v45 = v42;
      *((void *)&v45 + 1) = v50;
      *(void *)&long long v46 = v31;
      type metadata accessor for _PlistDictionaryKeyedDecodingContainer();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      KeyedDecodingContainer.init<A>(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
      return $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v30);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._typeMismatch(at:expectation:reality:)(v29, &v47, v39);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v45, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v33 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v35 = v34;
    uint64_t v41 = (char *)v34
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                 + 48);
    *uint64_t v35 = type metadata accessor for KeyedDecodingContainer();
    *(void *)&long long v47 = 0;
    *((void *)&v47 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(64);
    v36._unint64_t object = (void *)0x80000001823B2150;
    v36._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
    String.append(_:)(v36);
    v37._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 34;
    v38._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v33 - 8) + 104))(v35, *MEMORY[0x1E4FBBA80], v33);
    swift_willThrow();
  }
  return $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v42);
}

uint64_t _PlistDictionaryKeyedDecodingContainer.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v42 = a3;
  v41[0] = a7;
  uint64_t v11 = *(void *)(a5 - 8);
  double v12 = MEMORY[0x1F4188790](a1);
  double v14 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void (**)(char *, double))(v11 + 16);
  v41[1] = v16;
  v15(v14, v12);
  uint64_t v17 = *(void **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = a4;
  uint64_t v44 = a2;
  *(void *)(a2 + 32) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    *(void *)(v44 + 32) = v17;
  }
  unint64_t v20 = v17[2];
  unint64_t v19 = v17[3];
  if (v20 >= v19 >> 1)
  {
    uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v17);
    *(void *)(v44 + 32) = v17;
  }
  uint64_t v49 = a5;
  uint64_t v50 = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v48);
  ((void (*)(uint64_t *, char *, uint64_t))v15)(boxed_opaque_existential_1, v14, a5);
  void v17[2] = v20 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v48, (uint64_t)&v17[5 * v20 + 4]);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a5);
  uint64_t v22 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v24 = v42;
  if (*(void *)(v42 + 16))
  {
    unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23);
    if (v26)
    {
      outlined init with copy of Any(*(void *)(v24 + 56) + 32 * v25, (uint64_t)&v46);
    }
    else
    {
      long long v46 = 0u;
      long long v47 = 0u;
    }
  }
  else
  {
    long long v46 = 0u;
    long long v47 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v47 + 1))
  {
    outlined init with take of Any(&v46, &v48);
    outlined init with copy of Any((uint64_t)&v48, (uint64_t)&v46);
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    if (swift_dynamicCast())
    {
      uint64_t v28 = v51;
      uint64_t v29 = v44;
      uint64_t v30 = *(void *)(v44 + 32);
      uint64_t v31 = (void *)v41[0];
      *(void *)(v41[0] + 24) = &unk_1ECA444C0;
      v31[4] = lazy protocol witness table accessor for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer();
      uint64_t v32 = (void *)swift_allocObject();
      *uint64_t v31 = v32;
      v32[2] = v29;
      void v32[3] = v28;
      v32[4] = v30;
      v32[5] = 0;
      swift_retain();
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
      return $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v29);
    }
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError._typeMismatch(at:expectation:reality:)(v27, &v48, v40);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v46, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v34 = type metadata accessor for DecodingError();
    uint64_t v45 = swift_allocError();
    Swift::String v36 = v35;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *Swift::String v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
    *(void *)&long long v48 = 0;
    *((void *)&v48 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(66);
    v37._unint64_t object = (void *)0x80000001823B2110;
    v37._uint64_t countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v37);
    v38._uint64_t countAndFlagsBits = dispatch thunk of CodingKey.stringValue.getter();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._uint64_t countAndFlagsBits = 34;
    v39._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v39);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v34 - 8) + 104))(v36, *MEMORY[0x1E4FBBA80], v34);
    swift_willThrow();
  }
  return $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(v44);
}

uint64_t _PlistDictionaryKeyedDecodingContainer._superDecoder(forKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v36 = a4;
  uint64_t v34 = a7;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)a1, (uint64_t)&v41);
  uint64_t v10 = *(void **)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 32) = v10;
  uint64_t v35 = a3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    *(void *)(a2 + 32) = v10;
  }
  unint64_t v13 = v10[2];
  unint64_t v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
    *(void *)(a2 + 32) = v10;
  }
  long long v33 = v42;
  uint64_t v14 = v42;
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v41, v42);
  uint64_t v16 = *(void *)(v14 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  unint64_t v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v16 + 16))(v19, v17);
  *(_OWORD *)&v40[8] = v33;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v39);
  (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v19, v14);
  v10[2] = v13 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v39, (uint64_t)&v10[5 * v13 + 4]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v21 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v23 = v35;
  if (*(void *)(v35 + 16) && (unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22), (v25 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v23 + 56) + 32 * v24, (uint64_t)&v39);
  }
  else
  {
    long long v39 = 0u;
    *(_OWORD *)uint64_t v40 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*(void *)&v40[8])
  {
    outlined init with take of Any(&v39, &v41);
  }
  else
  {
    *(void *)&long long v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v26 = swift_allocObject();
    *(void *)&long long v41 = v26;
    *(_OWORD *)(v26 + 16) = 0u;
    *(_OWORD *)(v26 + 32) = 0u;
    outlined destroy of Any?((uint64_t)&v39, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  outlined init with copy of Any((uint64_t)&v41, (uint64_t)&v39);
  uint64_t v28 = *(void *)(a2 + 24);
  uint64_t v27 = *(void *)(a2 + 32);
  uint64_t v29 = type metadata accessor for __PlistDictionaryDecoder();
  uint64_t v30 = swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __PlistDictionaryDecoder.init(referencing:at:options:)((uint64_t)&v39, v27, v28);
  uint64_t v31 = v34;
  v34[3] = v29;
  v31[4] = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder(&lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder);
  *uint64_t v31 = v30;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
  $defer #1 <A>() in _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t _PlistDictionaryKeyedDecodingContainer.superDecoder()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  v14[3] = &type metadata for _CodingKey;
  v14[4] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v12 = swift_allocObject();
  v14[0] = v12;
  *(_OWORD *)(v12 + 16) = xmmword_1821115C0;
  *(void *)(v12 + 32) = 0;
  *(unsigned char *)(v12 + 40) = 0;
  return _PlistDictionaryKeyedDecodingContainer._superDecoder(forKey:)(v14, a1, a2, a3, a4, a5, a6);
}

uint64_t _PlistDictionaryKeyedDecodingContainer.superDecoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  v16[3] = a5;
  v16[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
  return _PlistDictionaryKeyedDecodingContainer._superDecoder(forKey:)(v16, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.codingPath.getter in conformance _PlistDictionaryKeyedDecodingContainer<A>()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.allKeys.getter in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1)
{
  return _PlistDictionaryKeyedDecodingContainer.allKeys.getter(*v1, v1[1], v1[2], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

BOOL protocol witness for KeyedDecodingContainerProtocol.contains(_:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1)
{
  return _PlistDictionaryKeyedDecodingContainer.contains(_:)(a1, *v1, v1[1]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, _PlistDictionaryKeyedDecodingContainer.decodeNil(forKey:)) & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)) & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1;
}

long long *protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v2, v2[1], v2[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

double protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v2, v2[1], v2[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

float protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v2, v2[1], v2[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

long long *protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBB550], 0xD00000000000002ALL, (uint64_t (*)(_OWORD *))0x80000001823B2380);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBC098], 0xD00000000000002BLL, (uint64_t (*)(_OWORD *))0x80000001823B2350);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBC0F8], 0xD00000000000002CLL, (uint64_t (*)(_OWORD *))0x80000001823B2320);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBC150], 0xD00000000000002CLL, (uint64_t (*)(_OWORD *))0x80000001823B22F0);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBC1C8], 0xD00000000000002CLL, (uint64_t (*)(_OWORD *))0x80000001823B22C0);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBB808], 0xD00000000000002BLL, (uint64_t (*)(_OWORD *))0x80000001823B2290);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBC358], 0xD00000000000002CLL, (uint64_t (*)(_OWORD *))0x80000001823B2260);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBC450], 0xD00000000000002DLL, (uint64_t (*)(_OWORD *))0x80000001823B2230);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBC4C0], 0xD00000000000002DLL, (uint64_t (*)(_OWORD *))0x80000001823B2200);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(_OWORD *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBC538], 0xD00000000000002DLL, (uint64_t (*)(_OWORD *))0x80000001823B21D0);
}

long long *protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *), uint64_t a5, uint64_t a6, uint64_t (*a7)(_OWORD *))
{
  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v7, v7[1], v7[2], *(void *)(a2 + 16), *(void *)(a2 + 24), a4, a5, a6, a7);
}

{
  uint64_t *v7;

  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v7, v7[1], v7[2], *(void *)(a2 + 16), *(void *)(a2 + 24), a4, a5, a6, a7);
}

{
  uint64_t *v7;

  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v7, v7[1], v7[2], *(void *)(a2 + 16), *(void *)(a2 + 24), a4, a5, a6, a7);
}

{
  uint64_t *v7;

  return _PlistDictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v7, v7[1], v7[2], *(void *)(a2 + 16), *(void *)(a2 + 24), a4, a5, a6, a7);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>()
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))_PlistDictionaryKeyedDecodingContainer.decode<A>(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))_PlistDictionaryKeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))
{
  return a7(a1, a2, *v7, v7[1], v7[2], *(void *)(a5 + 16), a3, *(void *)(a5 + 24), a4);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))_PlistDictionaryKeyedDecodingContainer.nestedUnkeyedContainer(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder() in conformance _PlistDictionaryKeyedDecodingContainer<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return _PlistDictionaryKeyedDecodingContainer.superDecoder()(*v2, v2[1], v2[2], *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))_PlistDictionaryKeyedDecodingContainer.superDecoder(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _PlistDictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t _PlistDictionaryUnkeyedDecodingContainer.decodeNil()()
{
  v18[13] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[3];
  if (v2 < *(void *)(v1 + 16))
  {
    if (v2 < 0)
    {
      __break(1u);
      goto LABEL_14;
    }
    outlined init with copy of Any(v1 + 32 * v2 + 32, (uint64_t)v18);
    if (swift_dynamicCast())
    {
      if (v16 == 0x6C6C756E24 && v17 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v11)
      {
LABEL_9:
        uint64_t v12 = v0[3];
        BOOL v13 = __OFADD__(v12, 1);
        uint64_t v14 = v12 + 1;
        if (!v13)
        {
          v0[3] = v14;
          char v10 = 1;
          return v10 & 1;
        }
LABEL_14:
        __break(1u);
      }
    }
    char v10 = 0;
    return v10 & 1;
  }
  uint64_t v3 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v6 = *(void *)(*v0 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  uint64_t v8 = v0[3];
  *(void *)(inited + 56) = &type metadata for _CodingKey;
  *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v9 = swift_allocObject();
  *(void *)(inited + 32) = v9;
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 32) = 0;
  *(unsigned char *)(v9 + 40) = 2;
  v18[0] = v6;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x1E4FBBA80], v3);
  swift_willThrow();
  return v10 & 1;
}

uint64_t $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void **)(*a1 + 32);
  if (!v2[2])
  {
    __break(1u);
LABEL_8:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    uint64_t v2 = (void *)result;
    uint64_t v4 = *(void *)(result + 16);
    if (v4) {
      goto LABEL_4;
    }
LABEL_9:
    __break(1u);
    return result;
  }
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v4 = v2[2];
  if (!v4) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v5 = v4 - 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v2[5 * v4 - 1]);
  v2[2] = v5;
  *(void *)(v1 + 32) = v2;

  return swift_release();
}

uint64_t _PlistDictionaryUnkeyedDecodingContainer.decode<A>(_:)@<X0>(ValueMetadata *a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = v4;
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = v6[1];
  uint64_t v16 = v6[3];
  if (v16 >= *(void *)(v15 + 16))
  {
    uint64_t v30 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v32 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v32 = a1;
    uint64_t v33 = *(void *)(*v6 + 32);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    uint64_t v35 = v6[3];
    *(void *)(inited + 56) = &type metadata for _CodingKey;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v36 = swift_allocObject();
    *(void *)(inited + 32) = v36;
    *(void *)(v36 + 16) = v35;
    *(void *)(v36 + 24) = 0;
    *(void *)(v36 + 32) = 0;
    *(unsigned char *)(v36 + 40) = 2;
    *(void *)&long long v68 = v33;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(ValueMetadata **, void, uint64_t))(*(void *)(v30 - 8) + 104))(v32, *MEMORY[0x1E4FBBA80], v30);
    return swift_willThrow();
  }
  uint64_t v62 = a3;
  unint64_t v63 = (char *)&v57 - v13;
  uint64_t v64 = v5;
  Swift::Bool v65 = a2;
  uint64_t v59 = v14;
  uint64_t v60 = v12;
  uint64_t v17 = *v6;
  uint64_t v18 = *(void **)(*v6 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v17 + 32) = v18;
  uint64_t v61 = a4;
  unint64_t v20 = a1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    *(void *)(v17 + 32) = v18;
  }
  uint64_t v22 = (ValueMetadata *)v18[2];
  unint64_t v21 = v18[3];
  uint64_t v23 = (uint64_t *)((char *)&v22->Kind + 1);
  if ((unint64_t)v22 >= v21 >> 1)
  {
    uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), (int64_t)&v22->Kind + 1, 1, v18);
    *(void *)(v17 + 32) = v18;
  }
  uint64_t v69 = &type metadata for _CodingKey;
  unint64_t v58 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v70 = v58;
  uint64_t v24 = swift_allocObject();
  *(void *)&long long v68 = v24;
  *(void *)(v24 + 24) = 0;
  *(void *)(v24 + 32) = 0;
  *(void *)(v24 + 16) = v16;
  *(unsigned char *)(v24 + 40) = 2;
  _OWORD v18[2] = v23;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v68, (uint64_t)&v18[5 * (void)v22 + 4]);
  if (v16 < 0)
  {
    __break(1u);
  }
  else if ((unint64_t)v16 < *(void *)(v15 + 16))
  {
    outlined init with copy of Any(v15 + 32 * v16 + 32, (uint64_t)v67);
    uint64_t v22 = v20;
    if (v20 == &type metadata for Date)
    {
      uint64_t v38 = v64;
      __PlistDictionaryDecoder.unbox(_:as:)(v67, (uint64_t)&v68);
      unint64_t v20 = v65;
      if (v38) {
        goto LABEL_19;
      }
      *(void *)&v66[0] = v68;
      BYTE8(v66[0]) = BYTE8(v68);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    }
    else
    {
      unint64_t v20 = v65;
      if (v22 != &type metadata for Data)
      {
        outlined init with copy of Any((uint64_t)v67, (uint64_t)&v68);
        outlined init with copy of Any((uint64_t)&v68, (uint64_t)v66);
        uint64_t v18 = (void *)(v17 + 16);
        uint64_t v23 = *(void **)(v17 + 16);
        char v25 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v17 + 16) = v23;
        if (v25) {
          goto LABEL_11;
        }
        goto LABEL_30;
      }
      uint64_t v39 = v64;
      uint64_t v40 = specialized __PlistDictionaryDecoder.unbox(_:as:)(v67);
      if (v39) {
        goto LABEL_19;
      }
      *(void *)&long long v68 = v40;
      *((void *)&v68 + 1) = v41;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    }
    uint64_t v29 = v63;
    int v43 = swift_dynamicCast();
    Description = (void (**)(char *, void, uint64_t, ValueMetadata *))v20[-1].Description;
    Description[7](v29, v43 ^ 1u, 1, v20);
LABEL_23:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
    if (((unsigned int (*)(char *, uint64_t, ValueMetadata *))Description[6])(v29, 1, v20) == 1)
    {
      (*(void (**)(char *, uint64_t))(v59 + 8))(v29, v60);
      uint64_t v44 = type metadata accessor for DecodingError();
      swift_allocError();
      long long v46 = v45;
      Swift::Bool v65 = (ValueMetadata *)((char *)v45
                            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
                                     + 48));
      *long long v46 = v22;
      uint64_t v47 = *(void *)(*v6 + 32);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v48 = swift_initStackObject();
      *(_OWORD *)(v48 + 16) = xmmword_1821037E0;
      uint64_t v49 = v6[3];
      unint64_t v50 = v58;
      *(void *)(v48 + 56) = &type metadata for _CodingKey;
      *(void *)(v48 + 64) = v50;
      uint64_t v51 = swift_allocObject();
      *(void *)(v48 + 32) = v51;
      *(void *)(v51 + 16) = v49;
      *(void *)(v51 + 24) = 0;
      *(void *)(v51 + 32) = 0;
      *(unsigned char *)(v51 + 40) = 2;
      *(void *)&long long v68 = v47;
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v48);
      *(void *)&long long v68 = 0;
      *((void *)&v68 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      *(void *)&long long v68 = 0x6465746365707845;
      *((void *)&v68 + 1) = 0xE900000000000020;
      v52._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v52);
      swift_bridgeObjectRelease();
      v53._unint64_t object = (void *)0x80000001823B1E50;
      v53._uint64_t countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v53);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v44 - 8) + 104))(v46, *MEMORY[0x1E4FBBA80], v44);
      swift_willThrow();
    }
    else
    {
      ((void (*)(uint64_t, char *, ValueMetadata *))Description[4])(v61, v29, v20);
      uint64_t v54 = v6[3];
      BOOL v55 = __OFADD__(v54, 1);
      uint64_t v56 = v54 + 1;
      if (v55) {
        __break(1u);
      }
      v6[3] = v56;
    }
    return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v6);
  }
  __break(1u);
LABEL_30:
  uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
  *uint64_t v18 = v23;
LABEL_11:
  unint64_t v27 = v23[2];
  unint64_t v26 = v23[3];
  if (v27 >= v26 >> 1)
  {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v23);
    *uint64_t v18 = v23;
  }
  void v23[2] = v27 + 1;
  outlined init with take of Any(v66, &v23[4 * v27 + 4]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
  uint64_t v69 = (ValueMetadata *)type metadata accessor for __PlistDictionaryDecoder();
  uint64_t v70 = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder(&lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder);
  *(void *)&long long v68 = v17;
  swift_retain();
  uint64_t v29 = v63;
  uint64_t v28 = v64;
  dispatch thunk of Decodable.init(from:)();
  if (!v28)
  {
    Description = (void (**)(char *, void, uint64_t, ValueMetadata *))v20[-1].Description;
    Description[7](v29, 0, 1, v20);
    specialized _PlistDecodingStorage.popContainer()();
    goto LABEL_23;
  }
  specialized _PlistDecodingStorage.popContainer()();
LABEL_19:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
  return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v6);
}

uint64_t _PlistDictionaryUnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[3];
  uint64_t v3 = *(void **)(*v0 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 32) = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    *(void *)(v1 + 32) = v3;
  }
  unint64_t v6 = v3[2];
  unint64_t v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v3);
    *(void *)(v1 + 32) = v3;
  }
  unint64_t v27 = &type metadata for _CodingKey;
  unint64_t v28 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v7 = swift_allocObject();
  *(void *)&long long v26 = v7;
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 32) = 0;
  *(void *)(v7 + 16) = v2;
  *(unsigned char *)(v7 + 40) = 2;
  v3[2] = v6 + 1;
  uint64_t result = outlined init with take of any PredicateExpression<Self.Output == B1>(&v26, (uint64_t)&v3[5 * v6 + 4]);
  uint64_t v9 = v0[1];
  if (v2 >= *(void *)(v9 + 16))
  {
    uint64_t v10 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v12 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v12 = type metadata accessor for KeyedDecodingContainer();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v10 - 8) + 104))(v12, *MEMORY[0x1E4FBBA80], v10);
    swift_willThrow();
    return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v0);
  }
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of Any(v9 + 32 * v2 + 32, (uint64_t)&v26);
    outlined init with copy of Any((uint64_t)&v26, (uint64_t)v25);
    if (swift_dynamicCast())
    {
      if (v23 == 0x6C6C756E24 && v24 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
LABEL_13:
        uint64_t v14 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v16 = v15;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *uint64_t v16 = type metadata accessor for KeyedDecodingContainer();
        swift_bridgeObjectRetain();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
LABEL_18:
        swift_willThrow();
        goto LABEL_19;
      }
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v13) {
        goto LABEL_13;
      }
    }
    outlined init with copy of Any((uint64_t)&v26, (uint64_t)v25);
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    uint64_t result = swift_dynamicCast();
    if (!result)
    {
      type metadata accessor for DecodingError();
      swift_allocError();
      static DecodingError._typeMismatch(at:expectation:reality:)(v17, &v26, v22);
      goto LABEL_18;
    }
    uint64_t v18 = v0[3];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (!v19)
    {
      v0[3] = v20;
      uint64_t v21 = *(void *)(*v0 + 32);
      v25[0] = *v0;
      v25[1] = v23;
      _OWORD v25[2] = v21;
      type metadata accessor for _PlistDictionaryKeyedDecodingContainer();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      KeyedDecodingContainer.init<A>(_:)();
LABEL_19:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
      return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v0);
    }
  }
  __break(1u);
  return result;
}

uint64_t _PlistDictionaryUnkeyedDecodingContainer.nestedUnkeyedContainer()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[3];
  unint64_t v5 = *(void **)(*v1 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 32) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    *(void *)(v3 + 32) = v5;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    *(void *)(v3 + 32) = v5;
  }
  uint64_t v31 = &type metadata for _CodingKey;
  unint64_t v32 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v9 = swift_allocObject();
  *(void *)&long long v30 = v9;
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 32) = 0;
  *(void *)(v9 + 16) = v4;
  *(unsigned char *)(v9 + 40) = 2;
  v5[2] = v8 + 1;
  uint64_t result = outlined init with take of any PredicateExpression<Self.Output == B1>(&v30, (uint64_t)&v5[5 * v8 + 4]);
  uint64_t v11 = v1[1];
  if (v4 >= *(void *)(v11 + 16))
  {
    uint64_t v12 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t *v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v14, *MEMORY[0x1E4FBBA80], v12);
    swift_willThrow();
    return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v1);
  }
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of Any(v11 + 32 * v4 + 32, (uint64_t)&v30);
    outlined init with copy of Any((uint64_t)&v30, (uint64_t)v29);
    if (swift_dynamicCast())
    {
      if (v27 == 0x6C6C756E24 && v28 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
LABEL_13:
        uint64_t v16 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v18 = v17;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnkeyedDecodingContainer);
        swift_bridgeObjectRetain();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x1E4FBBA80], v16);
LABEL_18:
        swift_willThrow();
        goto LABEL_19;
      }
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v15) {
        goto LABEL_13;
      }
    }
    outlined init with copy of Any((uint64_t)&v30, (uint64_t)v29);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    uint64_t result = swift_dynamicCast();
    if (!result)
    {
      type metadata accessor for DecodingError();
      swift_allocError();
      static DecodingError._typeMismatch(at:expectation:reality:)(v19, &v30, v26);
      goto LABEL_18;
    }
    uint64_t v20 = v1[3];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v1[3] = v22;
      uint64_t v23 = *v1;
      uint64_t v24 = *(void *)(*v1 + 32);
      a1[3] = &unk_1ECA444C0;
      a1[4] = lazy protocol witness table accessor for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer();
      char v25 = (void *)swift_allocObject();
      *a1 = v25;
      _OWORD v25[2] = v23;
      v25[3] = v27;
      void v25[4] = v24;
      void v25[5] = 0;
      swift_retain();
      swift_bridgeObjectRetain();
LABEL_19:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v30);
      return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v1);
    }
  }
  __break(1u);
  return result;
}

uint64_t _PlistDictionaryUnkeyedDecodingContainer.superDecoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = v1[3];
  unint64_t v6 = *(void **)(*v1 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 32) = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    *(void *)(v4 + 32) = v6;
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
    *(void *)(v4 + 32) = v6;
  }
  BOOL v21 = &type metadata for _CodingKey;
  unint64_t v22 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v20 = v10;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = v5;
  *(unsigned char *)(v10 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  uint64_t result = outlined init with take of any PredicateExpression<Self.Output == B1>(&v20, (uint64_t)&v6[5 * v9 + 4]);
  uint64_t v12 = v2[1];
  if (v5 >= *(void *)(v12 + 16))
  {
    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, *MEMORY[0x1E4FBBA80], v17);
    swift_willThrow();
    return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
  }
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = *(void *)(v4 + 32);
    v2[3] = v5 + 1;
    outlined init with copy of Any(v12 + 32 * v5 + 32, (uint64_t)&v20);
    uint64_t v14 = *(void *)(v4 + 24);
    uint64_t v15 = type metadata accessor for __PlistDictionaryDecoder();
    uint64_t v16 = swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __PlistDictionaryDecoder.init(referencing:at:options:)((uint64_t)&v20, v13, v14);
    a1[3] = v15;
    a1[4] = lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder(&lazy protocol witness table cache variable for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder);
    *a1 = v16;
    return $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.count.getter in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return *(void *)(*(void *)(v0 + 8) + 16);
}

BOOL protocol witness for UnkeyedDecodingContainer.isAtEnd.getter in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return *(void *)(v0 + 24) >= *(void *)(*(void *)(v0 + 8) + 16);
}

uint64_t protocol witness for UnkeyedDecodingContainer.currentIndex.getter in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return *(void *)(v0 + 24);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeNil() in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return _PlistDictionaryUnkeyedDecodingContainer.decodeNil()() & 1;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)() & 1;
}

{
  return UnkeyedDecodingContainer.decode(_:)();
}

{
  return UnkeyedDecodingContainer.decode(_:)();
}

long long *protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(long long *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBB550]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(long long *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBC098]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(long long *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBC0F8]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(long long *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBC1C8]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(long long *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBB808]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(long long *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBC358]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(long long *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBC450]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(long long *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBC538]);
}

double protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)();
}

float protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)();
}

unint64_t protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(long long *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBC150]);
}

{
  return specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)((uint64_t (*)(long long *))specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:), MEMORY[0x1E4FBC4C0]);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode<A>(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer@<X0>(ValueMetadata *a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _PlistDictionaryUnkeyedDecodingContainer.decode<A>(_:)(a1, a2, a3, a4);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  uint64_t result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE18]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE20]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE28]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE30]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE40]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE38]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE48]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE50]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(a1, a2, MEMORY[0x1E4FBBE58]);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

{
  return a3() & 0x1FFFF;
}

{
  unint64_t v3;

  uint64_t v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  uint64_t result = a3();
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent<A>(_:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:) in conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  return _PlistDictionaryUnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedUnkeyedContainer() in conformance _PlistDictionaryUnkeyedDecodingContainer@<X0>(void *a1@<X8>)
{
  return _PlistDictionaryUnkeyedDecodingContainer.nestedUnkeyedContainer()(a1);
}

uint64_t protocol witness for UnkeyedDecodingContainer.superDecoder() in conformance _PlistDictionaryUnkeyedDecodingContainer@<X0>(uint64_t *a1@<X8>)
{
  return _PlistDictionaryUnkeyedDecodingContainer.superDecoder()(a1);
}

Swift::Bool __swiftcall __PlistDictionaryDecoder.decodeNil()()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v0, &v6);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v4 == 0x6C6C756E24 && v5 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      char v2 = 1;
    }
    else
    {
      char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    char v2 = 0;
  }
  return v2 & 1;
}

BOOL protocol witness for SingleValueDecodingContainer.decodeNil() in conformance __PlistDictionaryDecoder()
{
  return __PlistDictionaryDecoder.decodeNil()();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __PlistDictionaryDecoder()
{
  return specialized __PlistDictionaryDecoder.decode(_:)() & 1;
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return SingleValueDecodingContainer.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

{
  return SingleValueDecodingContainer.decode(_:)();
}

_OWORD *protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __PlistDictionaryDecoder()
{
  return specialized __PlistDictionaryDecoder.decode(_:)();
}

long long *specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = (long long *)a1;
  outlined init with copy of Any(a1, (uint64_t)v102);
  if (swift_dynamicCast())
  {
    if ((void)v98 == 0x6C6C756E24 && *((void *)&v98 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        goto LABEL_7;
      }
    }
    return 0;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v102);
  if (swift_dynamicCast()) {
    return (long long *)v98;
  }
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    uint64_t v88 = v3;
    uint64_t v90 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    uint64_t v8 = v103;
    uint64_t v7 = v104;
    unint64_t v9 = __swift_project_boxed_opaque_existential_1(v102, v103);
    uint64_t v94 = v84;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t))(v10 + 64);
    double v12 = MEMORY[0x1F4188790](v9);
    unint64_t v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    long long v93 = (unsigned char *)v10;
    uint64_t v14 = *(void (**)(unsigned char *, double))(v10 + 16);
    v14(&v84[-v13], v12);
    uint64_t v15 = *(void *)(v7 + 8);
    uint64_t v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
    char v17 = v16;
    Swift::Int v91 = v84;
    uint64_t v95 = v11;
    double v18 = MEMORY[0x1F4188790](v16);
    char v105 = (void (*)(unsigned char *, unsigned char *, uint64_t, double))v14;
    ((void (*)(unsigned char *, unsigned char *, uint64_t, double))v14)(&v84[-v13], &v84[-v13], v8, v18);
    uint64_t v96 = &v84[-v13];
    uint64_t v97 = v15;
    BOOL v19 = (v17 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
    unint64_t v31 = (unint64_t)v95;
    uint64_t v33 = v93 + 8;
    unint64_t v32 = (uint64_t (*)(unsigned char *, uint64_t))*((void *)v93 + 1);
    uint64_t v34 = v32(&v84[-v13], v8);
    double v35 = MEMORY[0x1F4188790](v34);
    uint64_t v36 = &v84[-v13];
    v105(&v84[-v13], v96, v8, v35);
    long long v92 = v84;
    uint64_t v95 = v32;
    if (v19)
    {
      uint64_t v89 = v33;
      *(void *)&long long v98 = 0x8000000000000000;
      if (dispatch thunk of static BinaryInteger.isSigned.getter())
      {
        uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v37 < 64)
        {
LABEL_49:
          uint64_t v66 = dispatch thunk of BinaryInteger._lowWord.getter();
          unint64_t v32 = v95;
          v95(v36, v8);
          uint64_t v51 = v96;
          if (v66 < (uint64_t)v98) {
            goto LABEL_56;
          }
LABEL_26:
          uint64_t v52 = dispatch thunk of BinaryInteger.bitWidth.getter();
          uint64_t v89 = v84;
          double v53 = MEMORY[0x1F4188790](v52);
          v105(&v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v51, v8, v53);
          if (v52 < 65)
          {
            uint64_t v56 = dispatch thunk of BinaryInteger.bitWidth.getter();
            uint64_t v54 = v32(&v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
            if (v56 == 64)
            {
              uint64_t v54 = dispatch thunk of static BinaryInteger.isSigned.getter();
              char v55 = v54 ^ 1;
            }
            else
            {
              char v55 = 0;
            }
          }
          else
          {
            uint64_t v54 = v32(&v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
            char v55 = 1;
          }
          double v60 = MEMORY[0x1F4188790](v54);
          v105(&v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v51, v8, v60);
          long long v93 = v84;
          if (v55)
          {
            *(void *)&long long v98 = 0x7FFFFFFFFFFFFFFFLL;
            char v61 = dispatch thunk of static BinaryInteger.isSigned.getter();
            uint64_t v62 = dispatch thunk of BinaryInteger.bitWidth.getter();
            if (v61)
            {
              if (v62 > 64)
              {
                MEMORY[0x1F4188790](v62);
                lazy protocol witness table accessor for type Int and conformance Int();
                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                char v63 = dispatch thunk of static Comparable.< infix(_:_:)();
                unint64_t v32 = v95;
                v95(&v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
                uint64_t v64 = &v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
                goto LABEL_51;
              }
            }
            else if (v62 >= 64)
            {
              v101[0] = 0x7FFFFFFFFFFFFFFFLL;
              MEMORY[0x1F4188790](v62);
              lazy protocol witness table accessor for type Int and conformance Int();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              char v63 = dispatch thunk of static Comparable.< infix(_:_:)();
              unint64_t v32 = v95;
              v95(&v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
              uint64_t v64 = &v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
LABEL_51:
              v32(v64, v8);
              if (v63) {
                goto LABEL_56;
              }
LABEL_44:
              uint64_t v4 = (long long *)dispatch thunk of BinaryInteger._lowWord.getter();
              v32(v51, v8);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
              return v4;
            }
            dispatch thunk of BinaryInteger._lowWord.getter();
          }
          unint64_t v32 = v95;
          v95(&v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
          goto LABEL_44;
        }
        goto LABEL_45;
      }
      char v57 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v57)
      {
        if (v37 <= 64)
        {
          uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          uint64_t v87 = v84;
          MEMORY[0x1F4188790](AssociatedTypeWitness);
          swift_getAssociatedConformanceWitness();
          uint64_t v68 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          uint64_t v86 = v84;
          MEMORY[0x1F4188790](v68);
          unint64_t v69 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          int v85 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v70 = (void (*)(unsigned char *, uint64_t))v95;
          uint64_t v71 = v95(&v84[-v69], v8);
          double v72 = MEMORY[0x1F4188790](v71);
          uint64_t v73 = &v84[-v69];
          (*((void (**)(unsigned char *, unsigned char *, uint64_t, double))v93 + 4))(&v84[-v69], v36, v8, v72);
          uint64_t v51 = v96;
          if (v85)
          {
            v70(&v84[-v69], v8);
            v70(v51, v8);
LABEL_57:
            uint64_t v75 = type metadata accessor for DecodingError();
            swift_allocError();
            uint64_t v77 = v76;
            *(void *)&long long v98 = 0;
            *((void *)&v98 + 1) = 0xE000000000000000;
            swift_bridgeObjectRetain();
            _StringGuts.grow(_:)(52);
            v78._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
            v78._unint64_t object = (void *)0x80000001823B1A00;
            String.append(_:)(v78);
            __swift_project_boxed_opaque_existential_1(v102, v103);
            v79._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v4 = &v98;
            String.append(_:)(v79);
            swift_bridgeObjectRelease();
            v80._unint64_t object = (void *)0x80000001823B1A20;
            v80._uint64_t countAndFlagsBits = 0xD000000000000012;
            String.append(_:)(v80);
            v81._uint64_t countAndFlagsBits = 7630409;
            v81._unint64_t object = (void *)0xE300000000000000;
            String.append(_:)(v81);
            v82._uint64_t countAndFlagsBits = 46;
            v82._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v82);
            DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v75 - 8) + 104))(v77, *MEMORY[0x1E4FBBA78], v75);
            goto LABEL_58;
          }
          uint64_t v87 = v84;
          unint64_t v32 = (uint64_t (*)(unsigned char *, uint64_t))v70;
          long long v93 = (unsigned char *)v98;
          uint64_t v74 = dispatch thunk of BinaryInteger._lowWord.getter();
          v70(v73, v8);
          if (v74 >= (uint64_t)v93) {
            goto LABEL_26;
          }
LABEL_56:
          v32(v51, v8);
          goto LABEL_57;
        }
LABEL_45:
        long long v93 = v84;
        MEMORY[0x1F4188790](v37);
        lazy protocol witness table accessor for type Int and conformance Int();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v65 = dispatch thunk of static Comparable.< infix(_:_:)();
        unint64_t v32 = v95;
        v95(&v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
        v32(v36, v8);
        uint64_t v51 = v96;
        if ((v65 & 1) == 0) {
          goto LABEL_26;
        }
        goto LABEL_56;
      }
      if (v37 < 64) {
        goto LABEL_49;
      }
      unint64_t v32 = v95;
      v95(v36, v8);
    }
    else
    {
      v32(&v84[-v13], v8);
    }
    uint64_t v51 = v96;
    goto LABEL_26;
  }
  uint64_t v100 = 0;
  long long v98 = 0u;
  long long v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    long long v20 = __swift_project_boxed_opaque_existential_1(v102, v103);
    double v21 = MEMORY[0x1F4188790](v20);
    (*(void (**)(unsigned char *, double))(v23 + 16))(&v84[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)], v21);
    lazy protocol witness table accessor for type Int and conformance Int();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE8(v98) & 1) == 0)
    {
      uint64_t v4 = (long long *)v98;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      return v4;
    }
    uint64_t v24 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v26 = v25;
    *(void *)&long long v98 = 0;
    *((void *)&v98 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v4 = &v98;
    _StringGuts.grow(_:)(52);
    v27._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v27._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v27);
    _print_unlocked<A, B>(_:_:)();
    v28._unint64_t object = (void *)0x80000001823B1A20;
    v28._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v28);
    v29._uint64_t countAndFlagsBits = 7630409;
    v29._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v29);
    v30._uint64_t countAndFlagsBits = 46;
    v30._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v24 - 8) + 104))(v26, *MEMORY[0x1E4FBBA78], v24);
LABEL_58:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
    return v4;
  }
  uint64_t v100 = 0;
  long long v98 = 0u;
  long long v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v102);
  type metadata accessor for NSNumber();
  if (swift_dynamicCast())
  {
    uint64_t v38 = (void *)v98;
    uint64_t v39 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v41 = v40;
    v102[0] = 0;
    v102[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v42._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v42._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v42);
    id v43 = objc_msgSend(v38, sel_description);
    id v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    long long v46 = v45;

    uint64_t v4 = (long long *)v102;
    v47._uint64_t countAndFlagsBits = (uint64_t)v44;
    v47._unint64_t object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._unint64_t object = (void *)0x80000001823B1A20;
    v48._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v48);
    v49._uint64_t countAndFlagsBits = 7630409;
    v49._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v49);
    v50._uint64_t countAndFlagsBits = 46;
    v50._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v50);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104))(v41, *MEMORY[0x1E4FBBA78], v39);
    swift_willThrow();
  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v59 = v58;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E4FBB550], v4, v59);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v4;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  long long *v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(unsigned char *, uint64_t);
  double v12;
  unint64_t v13;
  void (*v14)(unsigned char *, double);
  uint64_t v15;
  uint64_t v16;
  char v17;
  double v18;
  BOOL v19;
  void *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  unint64_t v31;
  uint64_t (*v32)(unsigned char *, uint64_t);
  unsigned char *v33;
  uint64_t v34;
  double v35;
  unsigned char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  unsigned char *v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  void *v58;
  void *v59;
  double v60;
  char v61;
  uint64_t v62;
  char v63;
  unsigned char *v64;
  char v65;
  uint64_t v66;
  uint64_t AssociatedTypeWitness;
  uint64_t v68;
  unint64_t v69;
  void (*v70)(unsigned char *, uint64_t);
  uint64_t v71;
  double v72;
  unsigned char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Swift::String v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  Swift::String v82;
  unsigned char v84[12];
  int v85;
  unsigned char *v86;
  unsigned char *v87;
  uint64_t v88;
  unsigned char *v89;
  uint64_t v90;
  unsigned char *v91;
  unsigned char *v92;
  unsigned char *v93;
  unsigned char *v94;
  uint64_t (*v95)(unsigned char *, uint64_t);
  unsigned char *v96;
  uint64_t v97;
  long long v98;
  long long v99;
  uint64_t v100;
  void v101[4];
  void v102[3];
  uint64_t v103;
  uint64_t v104;
  void (*v105)(unsigned char *, unsigned char *, uint64_t, double);

  uint64_t v3 = v1;
  uint64_t v4 = (long long *)a1;
  outlined init with copy of Any(a1, (uint64_t)v102);
  if (swift_dynamicCast())
  {
    if ((void)v98 == 0x6C6C756E24 && *((void *)&v98 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        goto LABEL_7;
      }
    }
    return 0;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v102);
  if (swift_dynamicCast()) {
    return (long long *)v98;
  }
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    uint64_t v88 = v3;
    uint64_t v90 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    uint64_t v8 = v103;
    uint64_t v7 = v104;
    unint64_t v9 = __swift_project_boxed_opaque_existential_1(v102, v103);
    uint64_t v94 = v84;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t))(v10 + 64);
    double v12 = MEMORY[0x1F4188790](v9);
    unint64_t v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    long long v93 = (unsigned char *)v10;
    uint64_t v14 = *(void (**)(unsigned char *, double))(v10 + 16);
    v14(&v84[-v13], v12);
    uint64_t v15 = *(void *)(v7 + 8);
    uint64_t v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
    char v17 = v16;
    Swift::Int v91 = v84;
    uint64_t v95 = v11;
    double v18 = MEMORY[0x1F4188790](v16);
    char v105 = (void (*)(unsigned char *, unsigned char *, uint64_t, double))v14;
    ((void (*)(unsigned char *, unsigned char *, uint64_t, double))v14)(&v84[-v13], &v84[-v13], v8, v18);
    uint64_t v96 = &v84[-v13];
    uint64_t v97 = v15;
    BOOL v19 = (v17 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
    unint64_t v31 = (unint64_t)v95;
    uint64_t v33 = v93 + 8;
    unint64_t v32 = (uint64_t (*)(unsigned char *, uint64_t))*((void *)v93 + 1);
    uint64_t v34 = v32(&v84[-v13], v8);
    double v35 = MEMORY[0x1F4188790](v34);
    uint64_t v36 = &v84[-v13];
    v105(&v84[-v13], v96, v8, v35);
    long long v92 = v84;
    uint64_t v95 = v32;
    if (v19)
    {
      uint64_t v89 = v33;
      *(void *)&long long v98 = 0x8000000000000000;
      if (dispatch thunk of static BinaryInteger.isSigned.getter())
      {
        uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v37 < 64)
        {
LABEL_49:
          uint64_t v66 = dispatch thunk of BinaryInteger._lowWord.getter();
          unint64_t v32 = v95;
          v95(v36, v8);
          uint64_t v51 = v96;
          if (v66 < (uint64_t)v98) {
            goto LABEL_56;
          }
LABEL_26:
          uint64_t v52 = dispatch thunk of BinaryInteger.bitWidth.getter();
          uint64_t v89 = v84;
          double v53 = MEMORY[0x1F4188790](v52);
          v105(&v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v51, v8, v53);
          if (v52 < 65)
          {
            uint64_t v56 = dispatch thunk of BinaryInteger.bitWidth.getter();
            uint64_t v54 = v32(&v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
            if (v56 == 64)
            {
              uint64_t v54 = dispatch thunk of static BinaryInteger.isSigned.getter();
              char v55 = v54 ^ 1;
            }
            else
            {
              char v55 = 0;
            }
          }
          else
          {
            uint64_t v54 = v32(&v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
            char v55 = 1;
          }
          double v60 = MEMORY[0x1F4188790](v54);
          v105(&v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v51, v8, v60);
          long long v93 = v84;
          if (v55)
          {
            *(void *)&long long v98 = 0x7FFFFFFFFFFFFFFFLL;
            char v61 = dispatch thunk of static BinaryInteger.isSigned.getter();
            uint64_t v62 = dispatch thunk of BinaryInteger.bitWidth.getter();
            if (v61)
            {
              if (v62 > 64)
              {
                MEMORY[0x1F4188790](v62);
                lazy protocol witness table accessor for type Int64 and conformance Int64();
                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                char v63 = dispatch thunk of static Comparable.< infix(_:_:)();
                unint64_t v32 = v95;
                v95(&v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
                uint64_t v64 = &v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
                goto LABEL_51;
              }
            }
            else if (v62 >= 64)
            {
              v101[0] = 0x7FFFFFFFFFFFFFFFLL;
              MEMORY[0x1F4188790](v62);
              lazy protocol witness table accessor for type Int64 and conformance Int64();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              char v63 = dispatch thunk of static Comparable.< infix(_:_:)();
              unint64_t v32 = v95;
              v95(&v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
              uint64_t v64 = &v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
LABEL_51:
              v32(v64, v8);
              if (v63) {
                goto LABEL_56;
              }
LABEL_44:
              uint64_t v4 = (long long *)dispatch thunk of BinaryInteger._lowWord.getter();
              v32(v51, v8);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
              return v4;
            }
            dispatch thunk of BinaryInteger._lowWord.getter();
          }
          unint64_t v32 = v95;
          v95(&v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
          goto LABEL_44;
        }
        goto LABEL_45;
      }
      char v57 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v57)
      {
        if (v37 <= 64)
        {
          uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          uint64_t v87 = v84;
          MEMORY[0x1F4188790](AssociatedTypeWitness);
          swift_getAssociatedConformanceWitness();
          uint64_t v68 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          uint64_t v86 = v84;
          MEMORY[0x1F4188790](v68);
          unint64_t v69 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          int v85 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v70 = (void (*)(unsigned char *, uint64_t))v95;
          uint64_t v71 = v95(&v84[-v69], v8);
          double v72 = MEMORY[0x1F4188790](v71);
          uint64_t v73 = &v84[-v69];
          (*((void (**)(unsigned char *, unsigned char *, uint64_t, double))v93 + 4))(&v84[-v69], v36, v8, v72);
          uint64_t v51 = v96;
          if (v85)
          {
            v70(&v84[-v69], v8);
            v70(v51, v8);
LABEL_57:
            uint64_t v75 = type metadata accessor for DecodingError();
            swift_allocError();
            uint64_t v77 = v76;
            *(void *)&long long v98 = 0;
            *((void *)&v98 + 1) = 0xE000000000000000;
            swift_bridgeObjectRetain();
            _StringGuts.grow(_:)(52);
            v78._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
            v78._unint64_t object = (void *)0x80000001823B1A00;
            String.append(_:)(v78);
            __swift_project_boxed_opaque_existential_1(v102, v103);
            v79._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v4 = &v98;
            String.append(_:)(v79);
            swift_bridgeObjectRelease();
            v80._unint64_t object = (void *)0x80000001823B1A20;
            v80._uint64_t countAndFlagsBits = 0xD000000000000012;
            String.append(_:)(v80);
            v81._uint64_t countAndFlagsBits = 0x3436746E49;
            v81._unint64_t object = (void *)0xE500000000000000;
            String.append(_:)(v81);
            v82._uint64_t countAndFlagsBits = 46;
            v82._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v82);
            DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v75 - 8) + 104))(v77, *MEMORY[0x1E4FBBA78], v75);
            goto LABEL_58;
          }
          uint64_t v87 = v84;
          unint64_t v32 = (uint64_t (*)(unsigned char *, uint64_t))v70;
          long long v93 = (unsigned char *)v98;
          uint64_t v74 = dispatch thunk of BinaryInteger._lowWord.getter();
          v70(v73, v8);
          if (v74 >= (uint64_t)v93) {
            goto LABEL_26;
          }
LABEL_56:
          v32(v51, v8);
          goto LABEL_57;
        }
LABEL_45:
        long long v93 = v84;
        MEMORY[0x1F4188790](v37);
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v65 = dispatch thunk of static Comparable.< infix(_:_:)();
        unint64_t v32 = v95;
        v95(&v84[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
        v32(v36, v8);
        uint64_t v51 = v96;
        if ((v65 & 1) == 0) {
          goto LABEL_26;
        }
        goto LABEL_56;
      }
      if (v37 < 64) {
        goto LABEL_49;
      }
      unint64_t v32 = v95;
      v95(v36, v8);
    }
    else
    {
      v32(&v84[-v13], v8);
    }
    uint64_t v51 = v96;
    goto LABEL_26;
  }
  uint64_t v100 = 0;
  long long v98 = 0u;
  long long v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    long long v20 = __swift_project_boxed_opaque_existential_1(v102, v103);
    double v21 = MEMORY[0x1F4188790](v20);
    (*(void (**)(unsigned char *, double))(v23 + 16))(&v84[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)], v21);
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE8(v98) & 1) == 0)
    {
      uint64_t v4 = (long long *)v98;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      return v4;
    }
    uint64_t v24 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v26 = v25;
    *(void *)&long long v98 = 0;
    *((void *)&v98 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v4 = &v98;
    _StringGuts.grow(_:)(52);
    v27._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v27._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v27);
    _print_unlocked<A, B>(_:_:)();
    v28._unint64_t object = (void *)0x80000001823B1A20;
    v28._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v28);
    v29._uint64_t countAndFlagsBits = 0x3436746E49;
    v29._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v29);
    v30._uint64_t countAndFlagsBits = 46;
    v30._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v24 - 8) + 104))(v26, *MEMORY[0x1E4FBBA78], v24);
LABEL_58:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
    return v4;
  }
  uint64_t v100 = 0;
  long long v98 = 0u;
  long long v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)v4, (uint64_t)v102);
  type metadata accessor for NSNumber();
  if (swift_dynamicCast())
  {
    uint64_t v38 = (void *)v98;
    uint64_t v39 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v41 = v40;
    v102[0] = 0;
    v102[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v42._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v42._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v42);
    id v43 = objc_msgSend(v38, sel_description);
    id v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    long long v46 = v45;

    uint64_t v4 = (long long *)v102;
    v47._uint64_t countAndFlagsBits = (uint64_t)v44;
    v47._unint64_t object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._unint64_t object = (void *)0x80000001823B1A20;
    v48._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v48);
    v49._uint64_t countAndFlagsBits = 0x3436746E49;
    v49._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v49);
    v50._uint64_t countAndFlagsBits = 46;
    v50._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v50);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104))(v41, *MEMORY[0x1E4FBBA78], v39);
    swift_willThrow();
  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v59 = v58;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E4FBC1C8], v4, v59);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v4;
}

uint64_t specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(void *a1)
{
  uint64_t v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v95);
  if (swift_dynamicCast())
  {
    if ((void)v91 == 0x6C6C756E24 && *((void *)&v91 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        goto LABEL_7;
      }
    }
    return 0;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v95);
  if (swift_dynamicCast()) {
    return v91;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v94);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    uint64_t v83 = v3;
    uint64_t v86 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)v95);
    uint64_t v9 = v96;
    uint64_t v8 = v97;
    uint64_t v10 = __swift_project_boxed_opaque_existential_1(v95, v96);
    uint64_t v89 = &v81;
    uint64_t v11 = *(unint64_t **)(v9 - 8);
    unint64_t v12 = v11[8];
    double v13 = MEMORY[0x1F4188790](v10);
    unint64_t v14 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v15 = (unint64_t *)v11[2];
    ((void (*)(char *, double))v15)((char *)&v81 - v14, v13);
    long long v98 = *(unint64_t **)(v8 + 8);
    uint64_t v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
    LOBYTE(v8) = v16;
    uint64_t v88 = &v81;
    double v17 = MEMORY[0x1F4188790](v16);
    uint64_t v90 = (char *)&v81 - v14;
    uint64_t v87 = v15;
    ((void (*)(char *, char *, uint64_t, double))v15)((char *)&v81 - v14, (char *)&v81 - v14, v9, v17);
    if (v8)
    {
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      int v85 = &v81;
      MEMORY[0x1F4188790](AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      uint64_t v19 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      uint64_t v84 = &v81;
      MEMORY[0x1F4188790](v19);
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v20 = dispatch thunk of static Comparable.< infix(_:_:)();
      double v21 = (void (*)(char *, uint64_t))v11[1];
      v21((char *)&v81 - v14, v9);
      v21((char *)&v81 - v14, v9);
      if (v20)
      {
        v21(v90, v9);
        uint64_t v22 = v83;
LABEL_37:
        uint64_t v72 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v74 = v73;
        uint64_t v7 = *(void *)(v22 + 32);
        *(void *)&long long v91 = 0;
        *((void *)&v91 + 1) = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(52);
        v75._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
        v75._unint64_t object = (void *)0x80000001823B1A00;
        String.append(_:)(v75);
        __swift_project_boxed_opaque_existential_1(v95, v96);
        v76._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v76);
        swift_bridgeObjectRelease();
        v77._unint64_t object = (void *)0x80000001823B1A20;
        v77._uint64_t countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v77);
        v78._uint64_t countAndFlagsBits = 1953384789;
        v78._unint64_t object = (void *)0xE400000000000000;
        String.append(_:)(v78);
        v79._uint64_t countAndFlagsBits = 46;
        v79._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v79);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v72 - 8) + 104))(v74, *MEMORY[0x1E4FBBA78], v72);
        goto LABEL_38;
      }
      uint64_t v84 = (unint64_t *)v21;
      int v85 = v11;
    }
    else
    {
      int v85 = v11;
      uint64_t v84 = (unint64_t *)v11[1];
      ((void (*)(char *, uint64_t))v84)((char *)&v81 - v14, v9);
    }
    Swift::String v47 = v90;
    uint64_t v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
    double v49 = MEMORY[0x1F4188790](v48);
    Swift::String v50 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    ((void (*)(char *, char *, uint64_t, double))v87)(v50, v47, v9, v49);
    long long v98 = &v81;
    if (v48 <= 63)
    {
      uint64_t v51 = v84;
      ((void (*)(char *, uint64_t))v84)((char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
      goto LABEL_24;
    }
    *(void *)&long long v91 = -1;
    char v52 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v52)
    {
      if (v53 <= 64)
      {
        uint64_t v54 = swift_getAssociatedTypeWitness();
        uint64_t v87 = &v81;
        MEMORY[0x1F4188790](v54);
        swift_getAssociatedConformanceWitness();
        uint64_t v55 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        unint64_t v81 = (unint64_t)&v81;
        MEMORY[0x1F4188790](v55);
        unint64_t v82 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v56 = (char *)&v81 - v82;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v57 = dispatch thunk of static Comparable.> infix(_:_:)();
        unint64_t v58 = v85;
        uint64_t v59 = v56;
        double v60 = v84;
        uint64_t v61 = ((uint64_t (*)(char *, uint64_t))v84)(v59, v9);
        uint64_t v87 = &v81;
        unint64_t v81 = v91;
        double v62 = MEMORY[0x1F4188790](v61);
        char v63 = (char *)&v81 - v82;
        uint64_t v64 = v50;
        uint64_t v51 = v60;
        ((void (*)(char *, char *, uint64_t, double))v58[4])((char *)&v81 - v82, v64, v9, v62);
        if ((v57 & 1) == 0)
        {
          ((void (*)(char *, uint64_t))v60)(v63, v9);
          Swift::String v47 = v90;
          goto LABEL_24;
        }
        unint64_t v65 = dispatch thunk of BinaryInteger._lowWord.getter();
        ((void (*)(char *, uint64_t))v51)(v63, v9);
        Swift::String v47 = v90;
        if (v81 >= v65)
        {
LABEL_24:
          uint64_t v7 = dispatch thunk of BinaryInteger._lowWord.getter();
          ((void (*)(char *, uint64_t))v51)(v47, v9);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
          return v7;
        }
LABEL_36:
        ((void (*)(char *, uint64_t))v51)(v47, v9);
        uint64_t v22 = v83;
        goto LABEL_37;
      }
    }
    else if (v53 <= 64)
    {
      unint64_t v70 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v51 = v84;
      ((void (*)(char *, uint64_t))v84)((char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
      BOOL v71 = (unint64_t)v91 >= v70;
      Swift::String v47 = v90;
      if (v71) {
        goto LABEL_24;
      }
      goto LABEL_36;
    }
    uint64_t v87 = &v81;
    MEMORY[0x1F4188790](v53);
    lazy protocol witness table accessor for type UInt and conformance UInt();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v68 = dispatch thunk of static Comparable.< infix(_:_:)();
    unint64_t v69 = v84;
    ((void (*)(char *, uint64_t))v84)((char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    uint64_t v51 = v69;
    ((void (*)(char *, uint64_t))v69)((char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    Swift::String v47 = v90;
    if ((v68 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_36;
  }
  uint64_t v93 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v94);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)v95);
    uint64_t v23 = __swift_project_boxed_opaque_existential_1(v95, v96);
    double v24 = MEMORY[0x1F4188790](v23);
    (*(void (**)(char *, double))(v26 + 16))((char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v24);
    lazy protocol witness table accessor for type UInt and conformance UInt();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE8(v91) & 1) == 0)
    {
      uint64_t v7 = v91;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
      return v7;
    }
    uint64_t v27 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v28;
    uint64_t v7 = *(void *)(v3 + 32);
    *(void *)&long long v91 = 0;
    *((void *)&v91 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v30._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v30._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v30);
    _print_unlocked<A, B>(_:_:)();
    v31._unint64_t object = (void *)0x80000001823B1A20;
    v31._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v31);
    v32._uint64_t countAndFlagsBits = 1953384789;
    v32._unint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v32);
    v33._uint64_t countAndFlagsBits = 46;
    v33._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v27 - 8) + 104))(v29, *MEMORY[0x1E4FBBA78], v27);
LABEL_38:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
    return v7;
  }
  uint64_t v93 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v95);
  type metadata accessor for NSNumber();
  if (swift_dynamicCast())
  {
    uint64_t v34 = (void *)v91;
    uint64_t v35 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v37 = v36;
    uint64_t v7 = *(void *)(v3 + 32);
    v95[0] = 0;
    v95[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v38._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v38._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v38);
    id v39 = objc_msgSend(v34, sel_description);
    id v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    Swift::String v42 = v41;

    v43._uint64_t countAndFlagsBits = (uint64_t)v40;
    v43._unint64_t object = v42;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._unint64_t object = (void *)0x80000001823B1A20;
    v44._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v44);
    v45._uint64_t countAndFlagsBits = 1953384789;
    v45._unint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v45);
    v46._uint64_t countAndFlagsBits = 46;
    v46._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v46);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v35 - 8) + 104))(v37, *MEMORY[0x1E4FBBA78], v35);
    swift_willThrow();
  }
  else
  {
    uint64_t v7 = *(void *)(v3 + 32);
    type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v67 = v66;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E4FBB808], a1, v67);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v7;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t *v11;
  unint64_t v12;
  double v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  double v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  void *v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  id v39;
  id v40;
  void *v41;
  void *v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  char *v47;
  uint64_t v48;
  double v49;
  char *v50;
  unint64_t *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char v57;
  unint64_t *v58;
  char *v59;
  unint64_t *v60;
  uint64_t v61;
  double v62;
  char *v63;
  char *v64;
  unint64_t v65;
  void *v66;
  void *v67;
  char v68;
  unint64_t *v69;
  unint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t *v89;
  char *v90;
  long long v91;
  long long v92;
  uint64_t v93;
  unsigned char v94[32];
  void v95[3];
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;

  uint64_t v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v95);
  if (swift_dynamicCast())
  {
    if ((void)v91 == 0x6C6C756E24 && *((void *)&v91 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        goto LABEL_7;
      }
    }
    return 0;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v95);
  if (swift_dynamicCast()) {
    return v91;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v94);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    uint64_t v83 = v3;
    uint64_t v86 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)v95);
    uint64_t v9 = v96;
    uint64_t v8 = v97;
    uint64_t v10 = __swift_project_boxed_opaque_existential_1(v95, v96);
    uint64_t v89 = &v81;
    uint64_t v11 = *(unint64_t **)(v9 - 8);
    unint64_t v12 = v11[8];
    double v13 = MEMORY[0x1F4188790](v10);
    unint64_t v14 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v15 = (unint64_t *)v11[2];
    ((void (*)(char *, double))v15)((char *)&v81 - v14, v13);
    long long v98 = *(unint64_t **)(v8 + 8);
    uint64_t v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
    LOBYTE(v8) = v16;
    uint64_t v88 = &v81;
    double v17 = MEMORY[0x1F4188790](v16);
    uint64_t v90 = (char *)&v81 - v14;
    uint64_t v87 = v15;
    ((void (*)(char *, char *, uint64_t, double))v15)((char *)&v81 - v14, (char *)&v81 - v14, v9, v17);
    if (v8)
    {
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      int v85 = &v81;
      MEMORY[0x1F4188790](AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      uint64_t v19 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      uint64_t v84 = &v81;
      MEMORY[0x1F4188790](v19);
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v20 = dispatch thunk of static Comparable.< infix(_:_:)();
      double v21 = (void (*)(char *, uint64_t))v11[1];
      v21((char *)&v81 - v14, v9);
      v21((char *)&v81 - v14, v9);
      if (v20)
      {
        v21(v90, v9);
        uint64_t v22 = v83;
LABEL_37:
        uint64_t v72 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v74 = v73;
        uint64_t v7 = *(void *)(v22 + 32);
        *(void *)&long long v91 = 0;
        *((void *)&v91 + 1) = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(52);
        v75._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
        v75._unint64_t object = (void *)0x80000001823B1A00;
        String.append(_:)(v75);
        __swift_project_boxed_opaque_existential_1(v95, v96);
        v76._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v76);
        swift_bridgeObjectRelease();
        v77._unint64_t object = (void *)0x80000001823B1A20;
        v77._uint64_t countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v77);
        v78._uint64_t countAndFlagsBits = 0x3436746E4955;
        v78._unint64_t object = (void *)0xE600000000000000;
        String.append(_:)(v78);
        v79._uint64_t countAndFlagsBits = 46;
        v79._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v79);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v72 - 8) + 104))(v74, *MEMORY[0x1E4FBBA78], v72);
        goto LABEL_38;
      }
      uint64_t v84 = (unint64_t *)v21;
      int v85 = v11;
    }
    else
    {
      int v85 = v11;
      uint64_t v84 = (unint64_t *)v11[1];
      ((void (*)(char *, uint64_t))v84)((char *)&v81 - v14, v9);
    }
    Swift::String v47 = v90;
    uint64_t v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
    double v49 = MEMORY[0x1F4188790](v48);
    Swift::String v50 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    ((void (*)(char *, char *, uint64_t, double))v87)(v50, v47, v9, v49);
    long long v98 = &v81;
    if (v48 <= 63)
    {
      uint64_t v51 = v84;
      ((void (*)(char *, uint64_t))v84)((char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
      goto LABEL_24;
    }
    *(void *)&long long v91 = -1;
    char v52 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v52)
    {
      if (v53 <= 64)
      {
        uint64_t v54 = swift_getAssociatedTypeWitness();
        uint64_t v87 = &v81;
        MEMORY[0x1F4188790](v54);
        swift_getAssociatedConformanceWitness();
        uint64_t v55 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        unint64_t v81 = (unint64_t)&v81;
        MEMORY[0x1F4188790](v55);
        unint64_t v82 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v56 = (char *)&v81 - v82;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v57 = dispatch thunk of static Comparable.> infix(_:_:)();
        unint64_t v58 = v85;
        uint64_t v59 = v56;
        double v60 = v84;
        uint64_t v61 = ((uint64_t (*)(char *, uint64_t))v84)(v59, v9);
        uint64_t v87 = &v81;
        unint64_t v81 = v91;
        double v62 = MEMORY[0x1F4188790](v61);
        char v63 = (char *)&v81 - v82;
        uint64_t v64 = v50;
        uint64_t v51 = v60;
        ((void (*)(char *, char *, uint64_t, double))v58[4])((char *)&v81 - v82, v64, v9, v62);
        if ((v57 & 1) == 0)
        {
          ((void (*)(char *, uint64_t))v60)(v63, v9);
          Swift::String v47 = v90;
          goto LABEL_24;
        }
        unint64_t v65 = dispatch thunk of BinaryInteger._lowWord.getter();
        ((void (*)(char *, uint64_t))v51)(v63, v9);
        Swift::String v47 = v90;
        if (v81 >= v65)
        {
LABEL_24:
          uint64_t v7 = dispatch thunk of BinaryInteger._lowWord.getter();
          ((void (*)(char *, uint64_t))v51)(v47, v9);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
          return v7;
        }
LABEL_36:
        ((void (*)(char *, uint64_t))v51)(v47, v9);
        uint64_t v22 = v83;
        goto LABEL_37;
      }
    }
    else if (v53 <= 64)
    {
      unint64_t v70 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v51 = v84;
      ((void (*)(char *, uint64_t))v84)((char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
      BOOL v71 = (unint64_t)v91 >= v70;
      Swift::String v47 = v90;
      if (v71) {
        goto LABEL_24;
      }
      goto LABEL_36;
    }
    uint64_t v87 = &v81;
    MEMORY[0x1F4188790](v53);
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v68 = dispatch thunk of static Comparable.< infix(_:_:)();
    unint64_t v69 = v84;
    ((void (*)(char *, uint64_t))v84)((char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    uint64_t v51 = v69;
    ((void (*)(char *, uint64_t))v69)((char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    Swift::String v47 = v90;
    if ((v68 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_36;
  }
  uint64_t v93 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v94);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v91, (uint64_t)v95);
    uint64_t v23 = __swift_project_boxed_opaque_existential_1(v95, v96);
    double v24 = MEMORY[0x1F4188790](v23);
    (*(void (**)(char *, double))(v26 + 16))((char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v24);
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE8(v91) & 1) == 0)
    {
      uint64_t v7 = v91;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
      return v7;
    }
    uint64_t v27 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v28;
    uint64_t v7 = *(void *)(v3 + 32);
    *(void *)&long long v91 = 0;
    *((void *)&v91 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v30._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v30._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v30);
    _print_unlocked<A, B>(_:_:)();
    v31._unint64_t object = (void *)0x80000001823B1A20;
    v31._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v31);
    v32._uint64_t countAndFlagsBits = 0x3436746E4955;
    v32._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v32);
    v33._uint64_t countAndFlagsBits = 46;
    v33._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v27 - 8) + 104))(v29, *MEMORY[0x1E4FBBA78], v27);
LABEL_38:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
    return v7;
  }
  uint64_t v93 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  outlined destroy of Any?((uint64_t)&v91, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v95);
  type metadata accessor for NSNumber();
  if (swift_dynamicCast())
  {
    uint64_t v34 = (void *)v91;
    uint64_t v35 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v37 = v36;
    uint64_t v7 = *(void *)(v3 + 32);
    v95[0] = 0;
    v95[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v38._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v38._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v38);
    id v39 = objc_msgSend(v34, sel_description);
    id v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    Swift::String v42 = v41;

    v43._uint64_t countAndFlagsBits = (uint64_t)v40;
    v43._unint64_t object = v42;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._unint64_t object = (void *)0x80000001823B1A20;
    v44._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v44);
    v45._uint64_t countAndFlagsBits = 0x3436746E4955;
    v45._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v45);
    v46._uint64_t countAndFlagsBits = 46;
    v46._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v46);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v35 - 8) + 104))(v37, *MEMORY[0x1E4FBBA78], v35);
    swift_willThrow();
  }
  else
  {
    uint64_t v7 = *(void *)(v3 + 32);
    type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v67 = v66;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E4FBC538], a1, v67);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v7;
}

void specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(void *a1)
{
  uint64_t v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v94);
  if (swift_dynamicCast())
  {
    if ((void)v90 == 0x6C6C756E24 && *((void *)&v90 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return;
    }
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return;
    }
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v94);
  if (swift_dynamicCast()) {
    return;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v93);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    uint64_t v81 = v3;
    uint64_t v84 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v90, (uint64_t)v94);
    uint64_t v8 = v95;
    uint64_t v7 = v96;
    uint64_t v9 = __swift_project_boxed_opaque_existential_1(v94, v95);
    uint64_t v87 = &v78;
    uint64_t v10 = *(uint64_t **)(v8 - 8);
    uint64_t v11 = v10[8];
    double v12 = MEMORY[0x1F4188790](v9);
    unint64_t v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    unint64_t v14 = (uint64_t *)v10[2];
    ((void (*)(char *, double))v14)((char *)&v78 - v13, v12);
    uint64_t v89 = *(uint64_t **)(v7 + 8);
    uint64_t v15 = dispatch thunk of static BinaryInteger.isSigned.getter();
    LOBYTE(v7) = v15;
    uint64_t v86 = &v78;
    double v16 = MEMORY[0x1F4188790](v15);
    uint64_t v88 = (char *)&v78 - v13;
    int v85 = v14;
    ((void (*)(char *, char *, uint64_t, double))v14)((char *)&v78 - v13, (char *)&v78 - v13, v8, v16);
    if (v7)
    {
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v83 = &v78;
      MEMORY[0x1F4188790](AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      uint64_t v18 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      unint64_t v82 = &v78;
      MEMORY[0x1F4188790](v18);
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v19 = dispatch thunk of static Comparable.< infix(_:_:)();
      char v20 = (void (*)(char *, uint64_t))v10[1];
      v20((char *)&v78 - v13, v8);
      v20((char *)&v78 - v13, v8);
      if (v19)
      {
        v20(v88, v8);
LABEL_36:
        uint64_t v70 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v72 = v71;
        *(void *)&long long v90 = 0;
        *((void *)&v90 + 1) = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(52);
        v73._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
        v73._unint64_t object = (void *)0x80000001823B1A00;
        String.append(_:)(v73);
        __swift_project_boxed_opaque_existential_1(v94, v95);
        v74._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v74);
        swift_bridgeObjectRelease();
        v75._unint64_t object = (void *)0x80000001823B1A20;
        v75._uint64_t countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v75);
        v76._uint64_t countAndFlagsBits = 0x38746E4955;
        v76._unint64_t object = (void *)0xE500000000000000;
        String.append(_:)(v76);
        v77._uint64_t countAndFlagsBits = 46;
        v77._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v77);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v70 - 8) + 104))(v72, *MEMORY[0x1E4FBBA78], v70);
LABEL_37:
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
        return;
      }
      unint64_t v82 = (uint64_t *)v20;
      uint64_t v83 = v10;
    }
    else
    {
      uint64_t v83 = v10;
      unint64_t v82 = (uint64_t *)v10[1];
      ((void (*)(char *, uint64_t))v82)((char *)&v78 - v13, v8);
    }
    Swift::String v45 = v88;
    uint64_t v46 = dispatch thunk of BinaryInteger.bitWidth.getter();
    double v47 = MEMORY[0x1F4188790](v46);
    uint64_t v48 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    ((void (*)(char *, char *, uint64_t, double))v85)(v48, v45, v8, v47);
    uint64_t v89 = &v78;
    if (v46 <= 7)
    {
      double v49 = v82;
      ((void (*)(char *, uint64_t))v82)((char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
      goto LABEL_23;
    }
    LOBYTE(v90) = -1;
    char v50 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v50)
    {
      if (v51 <= 8)
      {
        uint64_t v52 = swift_getAssociatedTypeWitness();
        int v85 = &v78;
        MEMORY[0x1F4188790](v52);
        swift_getAssociatedConformanceWitness();
        uint64_t v53 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        Swift::String v79 = &v78;
        MEMORY[0x1F4188790](v53);
        unint64_t v80 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v54 = (char *)&v78 - v80;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v55 = dispatch thunk of static Comparable.> infix(_:_:)();
        uint64_t v56 = v83;
        char v57 = v54;
        unint64_t v58 = v82;
        uint64_t v59 = ((uint64_t (*)(char *, uint64_t))v82)(v57, v8);
        int v85 = &v78;
        LODWORD(v79) = v90;
        double v60 = MEMORY[0x1F4188790](v59);
        uint64_t v61 = (char *)&v78 - v80;
        double v62 = v48;
        double v49 = v58;
        ((void (*)(char *, char *, uint64_t, double))v56[4])((char *)&v78 - v80, v62, v8, v60);
        if ((v55 & 1) == 0)
        {
          ((void (*)(char *, uint64_t))v58)(v61, v8);
          Swift::String v45 = v88;
          goto LABEL_23;
        }
        unsigned __int8 v63 = dispatch thunk of BinaryInteger._lowWord.getter();
        ((void (*)(char *, uint64_t))v49)(v61, v8);
        Swift::String v45 = v88;
        if (v79 >= v63)
        {
LABEL_23:
          dispatch thunk of BinaryInteger._lowWord.getter();
          ((void (*)(char *, uint64_t))v49)(v45, v8);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
          return;
        }
LABEL_35:
        ((void (*)(char *, uint64_t))v49)(v45, v8);
        goto LABEL_36;
      }
    }
    else if (v51 <= 8)
    {
      unsigned __int8 v68 = dispatch thunk of BinaryInteger._lowWord.getter();
      double v49 = v82;
      ((void (*)(char *, uint64_t))v82)((char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
      BOOL v69 = v90 >= v68;
      Swift::String v45 = v88;
      if (v69) {
        goto LABEL_23;
      }
      goto LABEL_35;
    }
    int v85 = &v78;
    MEMORY[0x1F4188790](v51);
    lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v66 = dispatch thunk of static Comparable.< infix(_:_:)();
    unint64_t v67 = v82;
    ((void (*)(char *, uint64_t))v82)((char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    double v49 = v67;
    ((void (*)(char *, uint64_t))v67)((char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    Swift::String v45 = v88;
    if ((v66 & 1) == 0) {
      goto LABEL_23;
    }
    goto LABEL_35;
  }
  uint64_t v92 = 0;
  long long v90 = 0u;
  long long v91 = 0u;
  outlined destroy of Any?((uint64_t)&v90, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v93);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v90, (uint64_t)v94);
    double v21 = __swift_project_boxed_opaque_existential_1(v94, v95);
    double v22 = MEMORY[0x1F4188790](v21);
    (*(void (**)(char *, double))(v24 + 16))((char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
    lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE1(v90) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
      return;
    }
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    *(void *)&long long v90 = 0;
    *((void *)&v90 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v28._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v28._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v28);
    _print_unlocked<A, B>(_:_:)();
    v29._unint64_t object = (void *)0x80000001823B1A20;
    v29._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v29);
    v30._uint64_t countAndFlagsBits = 0x38746E4955;
    v30._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = 46;
    v31._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v31);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x1E4FBBA78], v25);
    goto LABEL_37;
  }
  uint64_t v92 = 0;
  long long v90 = 0u;
  long long v91 = 0u;
  outlined destroy of Any?((uint64_t)&v90, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v94);
  type metadata accessor for NSNumber();
  if (swift_dynamicCast())
  {
    Swift::String v32 = (void *)v90;
    uint64_t v33 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v35 = v34;
    v94[0] = 0;
    v94[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v36._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v36._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v36);
    id v37 = objc_msgSend(v32, sel_description);
    id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    id v40 = v39;

    v41._uint64_t countAndFlagsBits = (uint64_t)v38;
    v41._unint64_t object = v40;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._unint64_t object = (void *)0x80000001823B1A20;
    v42._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v42);
    v43._uint64_t countAndFlagsBits = 0x38746E4955;
    v43._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v43);
    v44._uint64_t countAndFlagsBits = 46;
    v44._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v33 - 8) + 104))(v35, *MEMORY[0x1E4FBBA78], v33);
    swift_willThrow();
  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v65 = v64;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E4FBC358], a1, v65);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  double v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  double v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  void *v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  id v37;
  id v38;
  void *v39;
  void *v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  char *v45;
  uint64_t v46;
  double v47;
  char *v48;
  uint64_t *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  uint64_t *v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  double v60;
  char *v61;
  char *v62;
  unsigned __int16 v63;
  void *v64;
  void *v65;
  char v66;
  uint64_t *v67;
  unsigned __int16 v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  char *v88;
  uint64_t *v89;
  long long v90;
  long long v91;
  uint64_t v92;
  unsigned char v93[32];
  void v94[3];
  uint64_t v95;
  uint64_t v96;

  uint64_t v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v94);
  if (swift_dynamicCast())
  {
    if ((void)v90 == 0x6C6C756E24 && *((void *)&v90 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return;
    }
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return;
    }
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v94);
  if (swift_dynamicCast()) {
    return;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v93);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    uint64_t v81 = v3;
    uint64_t v84 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v90, (uint64_t)v94);
    uint64_t v8 = v95;
    uint64_t v7 = v96;
    uint64_t v9 = __swift_project_boxed_opaque_existential_1(v94, v95);
    uint64_t v87 = &v78;
    uint64_t v10 = *(uint64_t **)(v8 - 8);
    uint64_t v11 = v10[8];
    double v12 = MEMORY[0x1F4188790](v9);
    unint64_t v13 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    unint64_t v14 = (uint64_t *)v10[2];
    ((void (*)(char *, double))v14)((char *)&v78 - v13, v12);
    uint64_t v89 = *(uint64_t **)(v7 + 8);
    uint64_t v15 = dispatch thunk of static BinaryInteger.isSigned.getter();
    LOBYTE(v7) = v15;
    uint64_t v86 = &v78;
    double v16 = MEMORY[0x1F4188790](v15);
    uint64_t v88 = (char *)&v78 - v13;
    int v85 = v14;
    ((void (*)(char *, char *, uint64_t, double))v14)((char *)&v78 - v13, (char *)&v78 - v13, v8, v16);
    if (v7)
    {
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v83 = &v78;
      MEMORY[0x1F4188790](AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      uint64_t v18 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      unint64_t v82 = &v78;
      MEMORY[0x1F4188790](v18);
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v19 = dispatch thunk of static Comparable.< infix(_:_:)();
      char v20 = (void (*)(char *, uint64_t))v10[1];
      v20((char *)&v78 - v13, v8);
      v20((char *)&v78 - v13, v8);
      if (v19)
      {
        v20(v88, v8);
LABEL_36:
        uint64_t v70 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v72 = v71;
        *(void *)&long long v90 = 0;
        *((void *)&v90 + 1) = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(52);
        v73._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
        v73._unint64_t object = (void *)0x80000001823B1A00;
        String.append(_:)(v73);
        __swift_project_boxed_opaque_existential_1(v94, v95);
        v74._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v74);
        swift_bridgeObjectRelease();
        v75._unint64_t object = (void *)0x80000001823B1A20;
        v75._uint64_t countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v75);
        v76._uint64_t countAndFlagsBits = 0x3631746E4955;
        v76._unint64_t object = (void *)0xE600000000000000;
        String.append(_:)(v76);
        v77._uint64_t countAndFlagsBits = 46;
        v77._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v77);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v70 - 8) + 104))(v72, *MEMORY[0x1E4FBBA78], v70);
LABEL_37:
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
        return;
      }
      unint64_t v82 = (uint64_t *)v20;
      uint64_t v83 = v10;
    }
    else
    {
      uint64_t v83 = v10;
      unint64_t v82 = (uint64_t *)v10[1];
      ((void (*)(char *, uint64_t))v82)((char *)&v78 - v13, v8);
    }
    Swift::String v45 = v88;
    uint64_t v46 = dispatch thunk of BinaryInteger.bitWidth.getter();
    double v47 = MEMORY[0x1F4188790](v46);
    uint64_t v48 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    ((void (*)(char *, char *, uint64_t, double))v85)(v48, v45, v8, v47);
    uint64_t v89 = &v78;
    if (v46 <= 15)
    {
      double v49 = v82;
      ((void (*)(char *, uint64_t))v82)((char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
      goto LABEL_23;
    }
    LOWORD(v90) = -1;
    char v50 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v50)
    {
      if (v51 <= 16)
      {
        uint64_t v52 = swift_getAssociatedTypeWitness();
        int v85 = &v78;
        MEMORY[0x1F4188790](v52);
        swift_getAssociatedConformanceWitness();
        uint64_t v53 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        Swift::String v79 = &v78;
        MEMORY[0x1F4188790](v53);
        unint64_t v80 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v54 = (char *)&v78 - v80;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v55 = dispatch thunk of static Comparable.> infix(_:_:)();
        uint64_t v56 = v83;
        char v57 = v54;
        unint64_t v58 = v82;
        uint64_t v59 = ((uint64_t (*)(char *, uint64_t))v82)(v57, v8);
        int v85 = &v78;
        LODWORD(v79) = (unsigned __int16)v90;
        double v60 = MEMORY[0x1F4188790](v59);
        uint64_t v61 = (char *)&v78 - v80;
        double v62 = v48;
        double v49 = v58;
        ((void (*)(char *, char *, uint64_t, double))v56[4])((char *)&v78 - v80, v62, v8, v60);
        if ((v55 & 1) == 0)
        {
          ((void (*)(char *, uint64_t))v58)(v61, v8);
          Swift::String v45 = v88;
          goto LABEL_23;
        }
        unsigned __int8 v63 = dispatch thunk of BinaryInteger._lowWord.getter();
        ((void (*)(char *, uint64_t))v49)(v61, v8);
        Swift::String v45 = v88;
        if (v79 >= v63)
        {
LABEL_23:
          dispatch thunk of BinaryInteger._lowWord.getter();
          ((void (*)(char *, uint64_t))v49)(v45, v8);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
          return;
        }
LABEL_35:
        ((void (*)(char *, uint64_t))v49)(v45, v8);
        goto LABEL_36;
      }
    }
    else if (v51 <= 16)
    {
      unsigned __int8 v68 = dispatch thunk of BinaryInteger._lowWord.getter();
      double v49 = v82;
      ((void (*)(char *, uint64_t))v82)((char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
      BOOL v69 = (unsigned __int16)v90 >= v68;
      Swift::String v45 = v88;
      if (v69) {
        goto LABEL_23;
      }
      goto LABEL_35;
    }
    int v85 = &v78;
    MEMORY[0x1F4188790](v51);
    lazy protocol witness table accessor for type UInt16 and conformance UInt16();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v66 = dispatch thunk of static Comparable.< infix(_:_:)();
    unint64_t v67 = v82;
    ((void (*)(char *, uint64_t))v82)((char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    double v49 = v67;
    ((void (*)(char *, uint64_t))v67)((char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    Swift::String v45 = v88;
    if ((v66 & 1) == 0) {
      goto LABEL_23;
    }
    goto LABEL_35;
  }
  uint64_t v92 = 0;
  long long v90 = 0u;
  long long v91 = 0u;
  outlined destroy of Any?((uint64_t)&v90, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v93);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v90, (uint64_t)v94);
    double v21 = __swift_project_boxed_opaque_existential_1(v94, v95);
    double v22 = MEMORY[0x1F4188790](v21);
    (*(void (**)(char *, double))(v24 + 16))((char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
    lazy protocol witness table accessor for type UInt16 and conformance UInt16();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE2(v90) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v94);
      return;
    }
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    *(void *)&long long v90 = 0;
    *((void *)&v90 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v28._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v28._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v28);
    _print_unlocked<A, B>(_:_:)();
    v29._unint64_t object = (void *)0x80000001823B1A20;
    v29._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v29);
    v30._uint64_t countAndFlagsBits = 0x3631746E4955;
    v30._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = 46;
    v31._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v31);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x1E4FBBA78], v25);
    goto LABEL_37;
  }
  uint64_t v92 = 0;
  long long v90 = 0u;
  long long v91 = 0u;
  outlined destroy of Any?((uint64_t)&v90, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v94);
  type metadata accessor for NSNumber();
  if (swift_dynamicCast())
  {
    Swift::String v32 = (void *)v90;
    uint64_t v33 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v35 = v34;
    v94[0] = 0;
    v94[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v36._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v36._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v36);
    id v37 = objc_msgSend(v32, sel_description);
    id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    id v40 = v39;

    v41._uint64_t countAndFlagsBits = (uint64_t)v38;
    v41._unint64_t object = v40;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._unint64_t object = (void *)0x80000001823B1A20;
    v42._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v42);
    v43._uint64_t countAndFlagsBits = 0x3631746E4955;
    v43._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v43);
    v44._uint64_t countAndFlagsBits = 46;
    v44._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v33 - 8) + 104))(v35, *MEMORY[0x1E4FBBA78], v33);
    swift_willThrow();
  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v65 = v64;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E4FBC450], a1, v65);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(char *, uint64_t);
  double v12;
  unint64_t v13;
  void (*v14)(char *, double);
  uint64_t v15;
  uint64_t v16;
  char v17;
  double v18;
  BOOL v19;
  void *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t (*v31)(char *, uint64_t);
  uint64_t (*v32)(char *, uint64_t);
  void *v33;
  uint64_t v34;
  double v35;
  char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  char *v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  void *v58;
  void *v59;
  double v60;
  char v61;
  uint64_t v62;
  char v63;
  char *v64;
  char v65;
  char v66;
  uint64_t AssociatedTypeWitness;
  uint64_t v68;
  unint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  double v72;
  char *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Swift::String v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  Swift::String v82;
  void v83[2];
  void *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t (*v92)(char *, uint64_t);
  char *v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t, double);
  long long v96;
  long long v97;
  uint64_t v98;
  unsigned char v99[32];
  void v100[3];
  uint64_t v101;
  uint64_t v102;
  int v103;

  uint64_t v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v100);
  if (swift_dynamicCast())
  {
    if ((void)v96 == 0x6C6C756E24 && *((void *)&v96 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return;
    }
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return;
    }
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v100);
  if (swift_dynamicCast()) {
    return;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v99);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    int v85 = v3;
    uint64_t v87 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v96, (uint64_t)v100);
    uint64_t v8 = v101;
    uint64_t v7 = v102;
    uint64_t v9 = __swift_project_boxed_opaque_existential_1(v100, v101);
    long long v91 = v83;
    uint64_t v10 = *(void **)(v8 - 8);
    uint64_t v11 = (uint64_t (*)(char *, uint64_t))v10[8];
    double v12 = MEMORY[0x1F4188790](v9);
    unint64_t v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    long long v90 = v10;
    unint64_t v14 = (void (*)(char *, double))v10[2];
    v14((char *)v83 - v13, v12);
    uint64_t v15 = *(void *)(v7 + 8);
    double v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
    double v17 = v16;
    uint64_t v88 = v83;
    uint64_t v92 = v11;
    uint64_t v18 = MEMORY[0x1F4188790](v16);
    uint64_t v95 = (void (*)(char *, char *, uint64_t, double))v14;
    ((void (*)(char *, char *, uint64_t, double))v14)((char *)v83 - v13, (char *)v83 - v13, v8, v18);
    uint64_t v93 = (char *)v83 - v13;
    uint64_t v94 = v15;
    char v19 = (v17 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 8;
    Swift::String v31 = v92;
    uint64_t v33 = v90 + 1;
    Swift::String v32 = (uint64_t (*)(char *, uint64_t))v90[1];
    uint64_t v34 = v32((char *)v83 - v13, v8);
    uint64_t v35 = MEMORY[0x1F4188790](v34);
    Swift::String v36 = (char *)v83 - v13;
    v95((char *)v83 - v13, v93, v8, v35);
    uint64_t v89 = v83;
    uint64_t v92 = v32;
    if (v19)
    {
      uint64_t v86 = v33;
      LOBYTE(v96) = 0x80;
      if (dispatch thunk of static BinaryInteger.isSigned.getter())
      {
        id v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v37 < 8)
        {
LABEL_48:
          char v66 = dispatch thunk of BinaryInteger._lowWord.getter();
          Swift::String v32 = v92;
          v92(v36, v8);
          uint64_t v51 = v93;
          if ((char)v96 > v66) {
            goto LABEL_55;
          }
LABEL_25:
          uint64_t v52 = dispatch thunk of BinaryInteger.bitWidth.getter();
          uint64_t v86 = v83;
          uint64_t v53 = MEMORY[0x1F4188790](v52);
          v95((char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0), v51, v8, v53);
          if (v52 < 9)
          {
            uint64_t v56 = dispatch thunk of BinaryInteger.bitWidth.getter();
            uint64_t v54 = v32((char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
            if (v56 == 8)
            {
              uint64_t v54 = dispatch thunk of static BinaryInteger.isSigned.getter();
              char v55 = v54 ^ 1;
            }
            else
            {
              char v55 = 0;
            }
          }
          else
          {
            uint64_t v54 = v32((char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
            char v55 = 1;
          }
          double v60 = MEMORY[0x1F4188790](v54);
          v95((char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0), v51, v8, v60);
          long long v90 = v83;
          if (v55)
          {
            LOBYTE(v96) = 127;
            uint64_t v61 = dispatch thunk of static BinaryInteger.isSigned.getter();
            double v62 = dispatch thunk of BinaryInteger.bitWidth.getter();
            if (v61)
            {
              if (v62 > 8)
              {
                MEMORY[0x1F4188790](v62);
                lazy protocol witness table accessor for type Int8 and conformance Int8();
                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                unsigned __int8 v63 = dispatch thunk of static Comparable.< infix(_:_:)();
                Swift::String v32 = v92;
                v92((char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
                uint64_t v64 = (char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0);
                goto LABEL_50;
              }
            }
            else if (v62 >= 8)
            {
              v99[0] = 127;
              MEMORY[0x1F4188790](v62);
              lazy protocol witness table accessor for type Int8 and conformance Int8();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              unsigned __int8 v63 = dispatch thunk of static Comparable.< infix(_:_:)();
              Swift::String v32 = v92;
              v92((char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
              uint64_t v64 = (char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_50:
              v32(v64, v8);
              if (v63) {
                goto LABEL_55;
              }
LABEL_43:
              dispatch thunk of BinaryInteger._lowWord.getter();
              v32(v51, v8);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
              return;
            }
            dispatch thunk of BinaryInteger._lowWord.getter();
          }
          Swift::String v32 = v92;
          v92((char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
          goto LABEL_43;
        }
        goto LABEL_44;
      }
      char v57 = dispatch thunk of static BinaryInteger.isSigned.getter();
      id v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v57)
      {
        if (v37 <= 8)
        {
          uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          uint64_t v84 = v83;
          MEMORY[0x1F4188790](AssociatedTypeWitness);
          swift_getAssociatedConformanceWitness();
          unsigned __int8 v68 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          v83[1] = v83;
          MEMORY[0x1F4188790](v68);
          BOOL v69 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0;
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          uint64_t v103 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v70 = (void (*)(char *, uint64_t))v92;
          uint64_t v71 = v92((char *)v83 - v69, v8);
          uint64_t v72 = MEMORY[0x1F4188790](v71);
          Swift::String v73 = (char *)v83 - v69;
          ((void (*)(char *, char *, uint64_t, double))v90[4])((char *)v83 - v69, v36, v8, v72);
          uint64_t v51 = v93;
          if (v103)
          {
            v70((char *)v83 - v69, v8);
            v70(v51, v8);
LABEL_56:
            Swift::String v75 = type metadata accessor for DecodingError();
            swift_allocError();
            Swift::String v77 = v76;
            *(void *)&uint64_t v96 = 0;
            *((void *)&v96 + 1) = 0xE000000000000000;
            swift_bridgeObjectRetain();
            _StringGuts.grow(_:)(52);
            v78._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
            v78._unint64_t object = (void *)0x80000001823B1A00;
            String.append(_:)(v78);
            __swift_project_boxed_opaque_existential_1(v100, v101);
            v79._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v79);
            swift_bridgeObjectRelease();
            v80._unint64_t object = (void *)0x80000001823B1A20;
            v80._uint64_t countAndFlagsBits = 0xD000000000000012;
            String.append(_:)(v80);
            v81._uint64_t countAndFlagsBits = 947154505;
            v81._unint64_t object = (void *)0xE400000000000000;
            String.append(_:)(v81);
            v82._uint64_t countAndFlagsBits = 46;
            v82._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v82);
            DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v75 - 8) + 104))(v77, *MEMORY[0x1E4FBBA78], v75);
LABEL_57:
            swift_willThrow();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
            return;
          }
          uint64_t v84 = v83;
          Swift::String v32 = (uint64_t (*)(char *, uint64_t))v70;
          LODWORD(v90) = (char)v96;
          Swift::String v74 = dispatch thunk of BinaryInteger._lowWord.getter();
          v70(v73, v8);
          if ((int)v90 <= v74) {
            goto LABEL_25;
          }
LABEL_55:
          v32(v51, v8);
          goto LABEL_56;
        }
LABEL_44:
        long long v90 = v83;
        MEMORY[0x1F4188790](v37);
        lazy protocol witness table accessor for type Int8 and conformance Int8();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        unint64_t v65 = dispatch thunk of static Comparable.< infix(_:_:)();
        Swift::String v32 = v92;
        v92((char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
        v32(v36, v8);
        uint64_t v51 = v93;
        if ((v65 & 1) == 0) {
          goto LABEL_25;
        }
        goto LABEL_55;
      }
      if (v37 < 8) {
        goto LABEL_48;
      }
      Swift::String v32 = v92;
      v92(v36, v8);
    }
    else
    {
      v32((char *)v83 - v13, v8);
    }
    uint64_t v51 = v93;
    goto LABEL_25;
  }
  long long v98 = 0;
  uint64_t v96 = 0u;
  uint64_t v97 = 0u;
  outlined destroy of Any?((uint64_t)&v96, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v99);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v96, (uint64_t)v100);
    char v20 = __swift_project_boxed_opaque_existential_1(v100, v101);
    double v21 = MEMORY[0x1F4188790](v20);
    (*(void (**)(char *, double))(v23 + 16))((char *)v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v21);
    lazy protocol witness table accessor for type Int8 and conformance Int8();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE1(v96) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
      return;
    }
    uint64_t v24 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v26 = v25;
    *(void *)&uint64_t v96 = 0;
    *((void *)&v96 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v27._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v27._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v27);
    _print_unlocked<A, B>(_:_:)();
    v28._unint64_t object = (void *)0x80000001823B1A20;
    v28._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v28);
    v29._uint64_t countAndFlagsBits = 947154505;
    v29._unint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v29);
    v30._uint64_t countAndFlagsBits = 46;
    v30._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v24 - 8) + 104))(v26, *MEMORY[0x1E4FBBA78], v24);
    goto LABEL_57;
  }
  long long v98 = 0;
  uint64_t v96 = 0u;
  uint64_t v97 = 0u;
  outlined destroy of Any?((uint64_t)&v96, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v100);
  type metadata accessor for NSNumber();
  if (swift_dynamicCast())
  {
    id v38 = (void *)v96;
    id v39 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v41 = v40;
    v100[0] = 0;
    v100[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v42._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v42._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v42);
    Swift::String v43 = objc_msgSend(v38, sel_description);
    Swift::String v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    uint64_t v46 = v45;

    v47._uint64_t countAndFlagsBits = (uint64_t)v44;
    v47._unint64_t object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._unint64_t object = (void *)0x80000001823B1A20;
    v48._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v48);
    v49._uint64_t countAndFlagsBits = 947154505;
    v49._unint64_t object = (void *)0xE400000000000000;
    String.append(_:)(v49);
    v50._uint64_t countAndFlagsBits = 46;
    v50._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v50);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104))(v41, *MEMORY[0x1E4FBBA78], v39);
    swift_willThrow();
  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v59 = v58;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E4FBC098], a1, v59);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t (*v11)(char *, uint64_t);
  double v12;
  unint64_t v13;
  void (*v14)(char *, double);
  uint64_t v15;
  uint64_t v16;
  char v17;
  double v18;
  BOOL v19;
  void *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t (*v31)(char *, uint64_t);
  uint64_t (*v32)(char *, uint64_t);
  void *v33;
  uint64_t v34;
  double v35;
  char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  id v43;
  id v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  char *v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  void *v58;
  void *v59;
  double v60;
  char v61;
  uint64_t v62;
  char v63;
  char *v64;
  char v65;
  __int16 v66;
  uint64_t AssociatedTypeWitness;
  uint64_t v68;
  unint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  double v72;
  char *v73;
  __int16 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Swift::String v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  Swift::String v82;
  void v83[2];
  void *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t (*v92)(char *, uint64_t);
  char *v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t, double);
  long long v96;
  long long v97;
  uint64_t v98;
  _WORD v99[16];
  void v100[3];
  uint64_t v101;
  uint64_t v102;
  int v103;

  uint64_t v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v100);
  if (swift_dynamicCast())
  {
    if ((void)v96 == 0x6C6C756E24 && *((void *)&v96 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return;
    }
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return;
    }
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v100);
  if (swift_dynamicCast()) {
    return;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v99);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    int v85 = v3;
    uint64_t v87 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v96, (uint64_t)v100);
    uint64_t v8 = v101;
    uint64_t v7 = v102;
    uint64_t v9 = __swift_project_boxed_opaque_existential_1(v100, v101);
    long long v91 = v83;
    uint64_t v10 = *(void **)(v8 - 8);
    uint64_t v11 = (uint64_t (*)(char *, uint64_t))v10[8];
    double v12 = MEMORY[0x1F4188790](v9);
    unint64_t v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    long long v90 = v10;
    unint64_t v14 = (void (*)(char *, double))v10[2];
    v14((char *)v83 - v13, v12);
    uint64_t v15 = *(void *)(v7 + 8);
    double v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
    double v17 = v16;
    uint64_t v88 = v83;
    uint64_t v92 = v11;
    uint64_t v18 = MEMORY[0x1F4188790](v16);
    uint64_t v95 = (void (*)(char *, char *, uint64_t, double))v14;
    ((void (*)(char *, char *, uint64_t, double))v14)((char *)v83 - v13, (char *)v83 - v13, v8, v18);
    uint64_t v93 = (char *)v83 - v13;
    uint64_t v94 = v15;
    char v19 = (v17 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 16;
    Swift::String v31 = v92;
    uint64_t v33 = v90 + 1;
    Swift::String v32 = (uint64_t (*)(char *, uint64_t))v90[1];
    uint64_t v34 = v32((char *)v83 - v13, v8);
    uint64_t v35 = MEMORY[0x1F4188790](v34);
    Swift::String v36 = (char *)v83 - v13;
    v95((char *)v83 - v13, v93, v8, v35);
    uint64_t v89 = v83;
    uint64_t v92 = v32;
    if (v19)
    {
      uint64_t v86 = v33;
      LOWORD(v96) = 0x8000;
      if (dispatch thunk of static BinaryInteger.isSigned.getter())
      {
        id v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v37 < 16)
        {
LABEL_48:
          char v66 = dispatch thunk of BinaryInteger._lowWord.getter();
          Swift::String v32 = v92;
          v92(v36, v8);
          uint64_t v51 = v93;
          if ((__int16)v96 > v66) {
            goto LABEL_55;
          }
LABEL_25:
          uint64_t v52 = dispatch thunk of BinaryInteger.bitWidth.getter();
          uint64_t v86 = v83;
          uint64_t v53 = MEMORY[0x1F4188790](v52);
          v95((char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0), v51, v8, v53);
          if (v52 < 17)
          {
            uint64_t v56 = dispatch thunk of BinaryInteger.bitWidth.getter();
            uint64_t v54 = v32((char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
            if (v56 == 16)
            {
              uint64_t v54 = dispatch thunk of static BinaryInteger.isSigned.getter();
              char v55 = v54 ^ 1;
            }
            else
            {
              char v55 = 0;
            }
          }
          else
          {
            uint64_t v54 = v32((char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
            char v55 = 1;
          }
          double v60 = MEMORY[0x1F4188790](v54);
          v95((char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0), v51, v8, v60);
          long long v90 = v83;
          if (v55)
          {
            LOWORD(v96) = 0x7FFF;
            uint64_t v61 = dispatch thunk of static BinaryInteger.isSigned.getter();
            double v62 = dispatch thunk of BinaryInteger.bitWidth.getter();
            if (v61)
            {
              if (v62 > 16)
              {
                MEMORY[0x1F4188790](v62);
                lazy protocol witness table accessor for type Int16 and conformance Int16();
                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                unsigned __int8 v63 = dispatch thunk of static Comparable.< infix(_:_:)();
                Swift::String v32 = v92;
                v92((char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
                uint64_t v64 = (char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0);
                goto LABEL_50;
              }
            }
            else if (v62 >= 16)
            {
              v99[0] = 0x7FFF;
              MEMORY[0x1F4188790](v62);
              lazy protocol witness table accessor for type Int16 and conformance Int16();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              unsigned __int8 v63 = dispatch thunk of static Comparable.< infix(_:_:)();
              Swift::String v32 = v92;
              v92((char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
              uint64_t v64 = (char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_50:
              v32(v64, v8);
              if (v63) {
                goto LABEL_55;
              }
LABEL_43:
              dispatch thunk of BinaryInteger._lowWord.getter();
              v32(v51, v8);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
              return;
            }
            dispatch thunk of BinaryInteger._lowWord.getter();
          }
          Swift::String v32 = v92;
          v92((char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
          goto LABEL_43;
        }
        goto LABEL_44;
      }
      char v57 = dispatch thunk of static BinaryInteger.isSigned.getter();
      id v37 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v57)
      {
        if (v37 <= 16)
        {
          uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          uint64_t v84 = v83;
          MEMORY[0x1F4188790](AssociatedTypeWitness);
          swift_getAssociatedConformanceWitness();
          unsigned __int8 v68 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          v83[1] = v83;
          MEMORY[0x1F4188790](v68);
          BOOL v69 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0;
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          uint64_t v103 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v70 = (void (*)(char *, uint64_t))v92;
          uint64_t v71 = v92((char *)v83 - v69, v8);
          uint64_t v72 = MEMORY[0x1F4188790](v71);
          Swift::String v73 = (char *)v83 - v69;
          ((void (*)(char *, char *, uint64_t, double))v90[4])((char *)v83 - v69, v36, v8, v72);
          uint64_t v51 = v93;
          if (v103)
          {
            v70((char *)v83 - v69, v8);
            v70(v51, v8);
LABEL_56:
            Swift::String v75 = type metadata accessor for DecodingError();
            swift_allocError();
            Swift::String v77 = v76;
            *(void *)&uint64_t v96 = 0;
            *((void *)&v96 + 1) = 0xE000000000000000;
            swift_bridgeObjectRetain();
            _StringGuts.grow(_:)(52);
            v78._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
            v78._unint64_t object = (void *)0x80000001823B1A00;
            String.append(_:)(v78);
            __swift_project_boxed_opaque_existential_1(v100, v101);
            v79._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v79);
            swift_bridgeObjectRelease();
            v80._unint64_t object = (void *)0x80000001823B1A20;
            v80._uint64_t countAndFlagsBits = 0xD000000000000012;
            String.append(_:)(v80);
            v81._uint64_t countAndFlagsBits = 0x3631746E49;
            v81._unint64_t object = (void *)0xE500000000000000;
            String.append(_:)(v81);
            v82._uint64_t countAndFlagsBits = 46;
            v82._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v82);
            DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v75 - 8) + 104))(v77, *MEMORY[0x1E4FBBA78], v75);
LABEL_57:
            swift_willThrow();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
            return;
          }
          uint64_t v84 = v83;
          Swift::String v32 = (uint64_t (*)(char *, uint64_t))v70;
          LODWORD(v90) = (__int16)v96;
          Swift::String v74 = dispatch thunk of BinaryInteger._lowWord.getter();
          v70(v73, v8);
          if ((int)v90 <= v74) {
            goto LABEL_25;
          }
LABEL_55:
          v32(v51, v8);
          goto LABEL_56;
        }
LABEL_44:
        long long v90 = v83;
        MEMORY[0x1F4188790](v37);
        lazy protocol witness table accessor for type Int16 and conformance Int16();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        unint64_t v65 = dispatch thunk of static Comparable.< infix(_:_:)();
        Swift::String v32 = v92;
        v92((char *)v83 - (((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
        v32(v36, v8);
        uint64_t v51 = v93;
        if ((v65 & 1) == 0) {
          goto LABEL_25;
        }
        goto LABEL_55;
      }
      if (v37 < 16) {
        goto LABEL_48;
      }
      Swift::String v32 = v92;
      v92(v36, v8);
    }
    else
    {
      v32((char *)v83 - v13, v8);
    }
    uint64_t v51 = v93;
    goto LABEL_25;
  }
  long long v98 = 0;
  uint64_t v96 = 0u;
  uint64_t v97 = 0u;
  outlined destroy of Any?((uint64_t)&v96, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v99);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v96, (uint64_t)v100);
    char v20 = __swift_project_boxed_opaque_existential_1(v100, v101);
    double v21 = MEMORY[0x1F4188790](v20);
    (*(void (**)(char *, double))(v23 + 16))((char *)v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v21);
    lazy protocol witness table accessor for type Int16 and conformance Int16();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE2(v96) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
      return;
    }
    uint64_t v24 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v26 = v25;
    *(void *)&uint64_t v96 = 0;
    *((void *)&v96 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v27._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v27._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v27);
    _print_unlocked<A, B>(_:_:)();
    v28._unint64_t object = (void *)0x80000001823B1A20;
    v28._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v28);
    v29._uint64_t countAndFlagsBits = 0x3631746E49;
    v29._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v29);
    v30._uint64_t countAndFlagsBits = 46;
    v30._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v24 - 8) + 104))(v26, *MEMORY[0x1E4FBBA78], v24);
    goto LABEL_57;
  }
  long long v98 = 0;
  uint64_t v96 = 0u;
  uint64_t v97 = 0u;
  outlined destroy of Any?((uint64_t)&v96, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v100);
  type metadata accessor for NSNumber();
  if (swift_dynamicCast())
  {
    id v38 = (void *)v96;
    id v39 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v41 = v40;
    v100[0] = 0;
    v100[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v42._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v42._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v42);
    Swift::String v43 = objc_msgSend(v38, sel_description);
    Swift::String v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    uint64_t v46 = v45;

    v47._uint64_t countAndFlagsBits = (uint64_t)v44;
    v47._unint64_t object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._unint64_t object = (void *)0x80000001823B1A20;
    v48._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v48);
    v49._uint64_t countAndFlagsBits = 0x3631746E49;
    v49._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v49);
    v50._uint64_t countAndFlagsBits = 46;
    v50._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v50);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104))(v41, *MEMORY[0x1E4FBBA78], v39);
    swift_willThrow();
  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v59 = v58;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E4FBC0F8], a1, v59);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t (*v12)(unsigned char *, uint64_t);
  double v13;
  unint64_t v14;
  void (*v15)(unsigned char *, double);
  uint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  BOOL v20;
  void *v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  unint64_t v32;
  uint64_t (*v33)(unsigned char *, uint64_t);
  unsigned char *v34;
  uint64_t v35;
  double v36;
  unsigned char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  unsigned char *v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  void *v59;
  void *v60;
  double v61;
  char v62;
  uint64_t v63;
  char v64;
  unsigned char *v65;
  char v66;
  int v67;
  uint64_t AssociatedTypeWitness;
  uint64_t v69;
  unint64_t v70;
  void (*v71)(unsigned char *, uint64_t);
  uint64_t v72;
  double v73;
  unsigned char *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  Swift::String v82;
  Swift::String v83;
  unsigned char v84[12];
  int v85;
  unsigned char *v86;
  unsigned char *v87;
  uint64_t v88;
  unsigned char *v89;
  uint64_t v90;
  unsigned char *v91;
  unsigned char *v92;
  unsigned char *v93;
  unsigned char *v94;
  uint64_t (*v95)(unsigned char *, uint64_t);
  unsigned char *v96;
  uint64_t v97;
  long long v98;
  long long v99;
  uint64_t v100;
  _DWORD v101[8];
  void v102[3];
  uint64_t v103;
  uint64_t v104;
  void (*v105)(unsigned char *, unsigned char *, uint64_t, double);

  uint64_t v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  if (swift_dynamicCast())
  {
    if ((void)v98 == 0x6C6C756E24 && *((void *)&v98 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        goto LABEL_7;
      }
    }
    uint64_t v7 = 1;
    goto LABEL_45;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  if (swift_dynamicCast())
  {
    uint64_t v7 = 0;
LABEL_45:
    LOBYTE(v102[0]) = v7;
    return;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    uint64_t v88 = v3;
    long long v90 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    uint64_t v9 = v103;
    uint64_t v8 = v104;
    uint64_t v10 = __swift_project_boxed_opaque_existential_1(v102, v103);
    uint64_t v94 = v84;
    uint64_t v11 = *(void *)(v9 - 8);
    double v12 = *(uint64_t (**)(unsigned char *, uint64_t))(v11 + 64);
    unint64_t v13 = MEMORY[0x1F4188790](v10);
    unint64_t v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v93 = (unsigned char *)v11;
    uint64_t v15 = *(void (**)(unsigned char *, double))(v11 + 16);
    v15(&v84[-v14], v13);
    double v16 = *(void *)(v8 + 8);
    double v17 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v18 = v17;
    long long v91 = v84;
    uint64_t v95 = v12;
    char v19 = MEMORY[0x1F4188790](v17);
    char v105 = (void (*)(unsigned char *, unsigned char *, uint64_t, double))v15;
    ((void (*)(unsigned char *, unsigned char *, uint64_t, double))v15)(&v84[-v14], &v84[-v14], v9, v19);
    uint64_t v96 = &v84[-v14];
    uint64_t v97 = v16;
    char v20 = (v18 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 32;
    Swift::String v32 = (unint64_t)v95;
    uint64_t v34 = v93 + 8;
    uint64_t v33 = (uint64_t (*)(unsigned char *, uint64_t))*((void *)v93 + 1);
    uint64_t v35 = v33(&v84[-v14], v9);
    Swift::String v36 = MEMORY[0x1F4188790](v35);
    id v37 = &v84[-v14];
    v105(&v84[-v14], v96, v9, v36);
    uint64_t v92 = v84;
    uint64_t v95 = v33;
    if (v20)
    {
      uint64_t v89 = v34;
      LODWORD(v98) = 0x80000000;
      if (dispatch thunk of static BinaryInteger.isSigned.getter())
      {
        id v38 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v38 < 32)
        {
LABEL_50:
          unint64_t v67 = dispatch thunk of BinaryInteger._lowWord.getter();
          uint64_t v33 = v95;
          v95(v37, v9);
          uint64_t v52 = v96;
          if ((int)v98 > v67) {
            goto LABEL_57;
          }
LABEL_26:
          uint64_t v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
          uint64_t v89 = v84;
          uint64_t v54 = MEMORY[0x1F4188790](v53);
          v105(&v84[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)], v52, v9, v54);
          if (v53 < 33)
          {
            char v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
            char v55 = v33(&v84[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
            if (v57 == 32)
            {
              char v55 = dispatch thunk of static BinaryInteger.isSigned.getter();
              uint64_t v56 = v55 ^ 1;
            }
            else
            {
              uint64_t v56 = 0;
            }
          }
          else
          {
            char v55 = v33(&v84[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
            uint64_t v56 = 1;
          }
          uint64_t v61 = MEMORY[0x1F4188790](v55);
          v105(&v84[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)], v52, v9, v61);
          uint64_t v93 = v84;
          if (v56)
          {
            LODWORD(v98) = 0x7FFFFFFF;
            double v62 = dispatch thunk of static BinaryInteger.isSigned.getter();
            unsigned __int8 v63 = dispatch thunk of BinaryInteger.bitWidth.getter();
            if (v62)
            {
              if (v63 > 32)
              {
                MEMORY[0x1F4188790](v63);
                lazy protocol witness table accessor for type Int32 and conformance Int32();
                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                uint64_t v64 = dispatch thunk of static Comparable.< infix(_:_:)();
                uint64_t v33 = v95;
                v95(&v84[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
                unint64_t v65 = &v84[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
                goto LABEL_52;
              }
            }
            else if (v63 >= 32)
            {
              v101[0] = 0x7FFFFFFF;
              MEMORY[0x1F4188790](v63);
              lazy protocol witness table accessor for type Int32 and conformance Int32();
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              uint64_t v64 = dispatch thunk of static Comparable.< infix(_:_:)();
              uint64_t v33 = v95;
              v95(&v84[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
              unint64_t v65 = &v84[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
LABEL_52:
              v33(v65, v9);
              if (v64) {
                goto LABEL_57;
              }
LABEL_44:
              dispatch thunk of BinaryInteger._lowWord.getter();
              v33(v52, v9);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
              uint64_t v7 = 0;
              goto LABEL_45;
            }
            dispatch thunk of BinaryInteger._lowWord.getter();
          }
          uint64_t v33 = v95;
          v95(&v84[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
          goto LABEL_44;
        }
        goto LABEL_46;
      }
      unint64_t v58 = dispatch thunk of static BinaryInteger.isSigned.getter();
      id v38 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v58)
      {
        if (v38 <= 32)
        {
          uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          uint64_t v87 = v84;
          MEMORY[0x1F4188790](AssociatedTypeWitness);
          swift_getAssociatedConformanceWitness();
          BOOL v69 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          uint64_t v86 = v84;
          MEMORY[0x1F4188790](v69);
          uint64_t v70 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          int v85 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v71 = (void (*)(unsigned char *, uint64_t))v95;
          uint64_t v72 = v95(&v84[-v70], v9);
          Swift::String v73 = MEMORY[0x1F4188790](v72);
          Swift::String v74 = &v84[-v70];
          (*((void (**)(unsigned char *, unsigned char *, uint64_t, double))v93 + 4))(&v84[-v70], v37, v9, v73);
          uint64_t v52 = v96;
          if (v85)
          {
            v71(&v84[-v70], v9);
            v71(v52, v9);
LABEL_58:
            Swift::String v76 = type metadata accessor for DecodingError();
            swift_allocError();
            uint64_t v78 = v77;
            *(void *)&long long v98 = 0;
            *((void *)&v98 + 1) = 0xE000000000000000;
            swift_bridgeObjectRetain();
            _StringGuts.grow(_:)(52);
            v79._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
            v79._unint64_t object = (void *)0x80000001823B1A00;
            String.append(_:)(v79);
            __swift_project_boxed_opaque_existential_1(v102, v103);
            v80._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v80);
            swift_bridgeObjectRelease();
            v81._unint64_t object = (void *)0x80000001823B1A20;
            v81._uint64_t countAndFlagsBits = 0xD000000000000012;
            String.append(_:)(v81);
            v82._uint64_t countAndFlagsBits = 0x3233746E49;
            v82._unint64_t object = (void *)0xE500000000000000;
            String.append(_:)(v82);
            v83._uint64_t countAndFlagsBits = 46;
            v83._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v83);
            DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v76 - 8) + 104))(v78, *MEMORY[0x1E4FBBA78], v76);
LABEL_59:
            swift_willThrow();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
            return;
          }
          uint64_t v87 = v84;
          uint64_t v33 = (uint64_t (*)(unsigned char *, uint64_t))v71;
          LODWORD(v93) = v98;
          Swift::String v75 = dispatch thunk of BinaryInteger._lowWord.getter();
          v71(v74, v9);
          if ((int)v93 <= v75) {
            goto LABEL_26;
          }
LABEL_57:
          v33(v52, v9);
          goto LABEL_58;
        }
LABEL_46:
        uint64_t v93 = v84;
        MEMORY[0x1F4188790](v38);
        lazy protocol witness table accessor for type Int32 and conformance Int32();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v66 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v33 = v95;
        v95(&v84[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)], v9);
        v33(v37, v9);
        uint64_t v52 = v96;
        if ((v66 & 1) == 0) {
          goto LABEL_26;
        }
        goto LABEL_57;
      }
      if (v38 < 32) {
        goto LABEL_50;
      }
      uint64_t v33 = v95;
      v95(v37, v9);
    }
    else
    {
      v33(&v84[-v14], v9);
    }
    uint64_t v52 = v96;
    goto LABEL_26;
  }
  uint64_t v100 = 0;
  long long v98 = 0u;
  long long v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    double v21 = __swift_project_boxed_opaque_existential_1(v102, v103);
    double v22 = MEMORY[0x1F4188790](v21);
    (*(void (**)(unsigned char *, double))(v24 + 16))(&v84[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)], v22);
    lazy protocol witness table accessor for type Int32 and conformance Int32();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE4(v98) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      uint64_t v7 = 0;
      goto LABEL_45;
    }
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    *(void *)&long long v98 = 0;
    *((void *)&v98 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v28._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v28._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v28);
    _print_unlocked<A, B>(_:_:)();
    v29._unint64_t object = (void *)0x80000001823B1A20;
    v29._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v29);
    v30._uint64_t countAndFlagsBits = 0x3233746E49;
    v30._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = 46;
    v31._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v31);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x1E4FBBA78], v25);
    goto LABEL_59;
  }
  uint64_t v100 = 0;
  long long v98 = 0u;
  long long v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  type metadata accessor for NSNumber();
  if (swift_dynamicCast())
  {
    id v39 = (void *)v98;
    id v40 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v42 = v41;
    v102[0] = 0;
    v102[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v43._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v43._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v43);
    Swift::String v44 = objc_msgSend(v39, sel_description);
    Swift::String v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    double v47 = v46;

    v48._uint64_t countAndFlagsBits = (uint64_t)v45;
    v48._unint64_t object = v47;
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._unint64_t object = (void *)0x80000001823B1A20;
    v49._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v49);
    v50._uint64_t countAndFlagsBits = 0x3233746E49;
    v50._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v50);
    v51._uint64_t countAndFlagsBits = 46;
    v51._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v51);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v40 - 8) + 104))(v42, *MEMORY[0x1E4FBBA78], v40);
    swift_willThrow();
  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    double v60 = v59;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E4FBC150], a1, v60);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  double v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  double v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  void *v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  char *v46;
  uint64_t v47;
  double v48;
  char *v49;
  uint64_t *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char v56;
  uint64_t *v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  double v61;
  char *v62;
  char *v63;
  unsigned int v64;
  void *v65;
  void *v66;
  char v67;
  uint64_t *v68;
  unsigned int v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  char *v88;
  long long v89;
  long long v90;
  uint64_t v91;
  unsigned char v92[32];
  void v93[3];
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;

  uint64_t v3 = v1;
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v93);
  if (swift_dynamicCast())
  {
    if ((void)v89 == 0x6C6C756E24 && *((void *)&v89 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        goto LABEL_7;
      }
    }
    uint64_t v7 = 1;
    goto LABEL_15;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v93);
  if (swift_dynamicCast())
  {
    uint64_t v7 = 0;
LABEL_15:
    LOBYTE(v93[0]) = v7;
    return;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v92);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    uint64_t v81 = v3;
    uint64_t v84 = v2;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v89, (uint64_t)v93);
    uint64_t v9 = v94;
    uint64_t v8 = v95;
    uint64_t v10 = __swift_project_boxed_opaque_existential_1(v93, v94);
    uint64_t v87 = &v79;
    uint64_t v11 = *(uint64_t **)(v9 - 8);
    double v12 = v11[8];
    unint64_t v13 = MEMORY[0x1F4188790](v10);
    unint64_t v14 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v15 = (uint64_t *)v11[2];
    ((void (*)(char *, double))v15)((char *)&v79 - v14, v13);
    uint64_t v96 = *(uint64_t **)(v8 + 8);
    double v16 = dispatch thunk of static BinaryInteger.isSigned.getter();
    LOBYTE(v8) = v16;
    uint64_t v86 = &v79;
    double v17 = MEMORY[0x1F4188790](v16);
    uint64_t v88 = (char *)&v79 - v14;
    int v85 = v15;
    ((void (*)(char *, char *, uint64_t, double))v15)((char *)&v79 - v14, (char *)&v79 - v14, v9, v17);
    if (v8)
    {
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v83 = &v79;
      MEMORY[0x1F4188790](AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      char v19 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      unint64_t v82 = &v79;
      MEMORY[0x1F4188790](v19);
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v20 = dispatch thunk of static Comparable.< infix(_:_:)();
      double v21 = (void (*)(char *, uint64_t))v11[1];
      v21((char *)&v79 - v14, v9);
      v21((char *)&v79 - v14, v9);
      if (v20)
      {
        v21(v88, v9);
LABEL_38:
        uint64_t v71 = type metadata accessor for DecodingError();
        swift_allocError();
        Swift::String v73 = v72;
        *(void *)&uint64_t v89 = 0;
        *((void *)&v89 + 1) = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(52);
        v74._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
        v74._unint64_t object = (void *)0x80000001823B1A00;
        String.append(_:)(v74);
        __swift_project_boxed_opaque_existential_1(v93, v94);
        v75._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v75);
        swift_bridgeObjectRelease();
        v76._unint64_t object = (void *)0x80000001823B1A20;
        v76._uint64_t countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v76);
        v77._uint64_t countAndFlagsBits = 0x3233746E4955;
        v77._unint64_t object = (void *)0xE600000000000000;
        String.append(_:)(v77);
        v78._uint64_t countAndFlagsBits = 46;
        v78._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v78);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v71 - 8) + 104))(v73, *MEMORY[0x1E4FBBA78], v71);
LABEL_39:
        swift_willThrow();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
        return;
      }
      unint64_t v82 = (uint64_t *)v21;
      uint64_t v83 = v11;
    }
    else
    {
      uint64_t v83 = v11;
      unint64_t v82 = (uint64_t *)v11[1];
      ((void (*)(char *, uint64_t))v82)((char *)&v79 - v14, v9);
    }
    uint64_t v46 = v88;
    double v47 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v48 = MEMORY[0x1F4188790](v47);
    double v49 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    ((void (*)(char *, char *, uint64_t, double))v85)(v49, v46, v9, v48);
    uint64_t v96 = &v79;
    if (v47 <= 31)
    {
      char v50 = v82;
      ((void (*)(char *, uint64_t))v82)((char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
      goto LABEL_25;
    }
    LODWORD(v89) = -1;
    uint64_t v51 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v52 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v51)
    {
      if (v52 <= 32)
      {
        uint64_t v53 = swift_getAssociatedTypeWitness();
        int v85 = &v79;
        MEMORY[0x1F4188790](v53);
        swift_getAssociatedConformanceWitness();
        uint64_t v54 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        Swift::String v79 = (uint64_t)&v79;
        MEMORY[0x1F4188790](v54);
        unint64_t v80 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
        char v55 = (char *)&v79 - v80;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        uint64_t v56 = dispatch thunk of static Comparable.> infix(_:_:)();
        char v57 = v83;
        unint64_t v58 = v55;
        uint64_t v59 = v82;
        double v60 = ((uint64_t (*)(char *, uint64_t))v82)(v58, v9);
        int v85 = &v79;
        LODWORD(v79) = v89;
        uint64_t v61 = MEMORY[0x1F4188790](v60);
        double v62 = (char *)&v79 - v80;
        unsigned __int8 v63 = v49;
        char v50 = v59;
        ((void (*)(char *, char *, uint64_t, double))v57[4])((char *)&v79 - v80, v63, v9, v61);
        if ((v56 & 1) == 0)
        {
          ((void (*)(char *, uint64_t))v59)(v62, v9);
          uint64_t v46 = v88;
          goto LABEL_25;
        }
        uint64_t v64 = dispatch thunk of BinaryInteger._lowWord.getter();
        ((void (*)(char *, uint64_t))v50)(v62, v9);
        uint64_t v46 = v88;
        if (v79 >= v64)
        {
LABEL_25:
          dispatch thunk of BinaryInteger._lowWord.getter();
          ((void (*)(char *, uint64_t))v50)(v46, v9);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
          uint64_t v7 = 0;
          goto LABEL_15;
        }
LABEL_37:
        ((void (*)(char *, uint64_t))v50)(v46, v9);
        goto LABEL_38;
      }
    }
    else if (v52 <= 32)
    {
      BOOL v69 = dispatch thunk of BinaryInteger._lowWord.getter();
      char v50 = v82;
      ((void (*)(char *, uint64_t))v82)((char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
      uint64_t v70 = v89 >= v69;
      uint64_t v46 = v88;
      if (v70) {
        goto LABEL_25;
      }
      goto LABEL_37;
    }
    int v85 = &v79;
    MEMORY[0x1F4188790](v52);
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    unint64_t v67 = dispatch thunk of static Comparable.< infix(_:_:)();
    unsigned __int8 v68 = v82;
    ((void (*)(char *, uint64_t))v82)((char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    char v50 = v68;
    ((void (*)(char *, uint64_t))v68)((char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    uint64_t v46 = v88;
    if ((v67 & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_37;
  }
  long long v91 = 0;
  uint64_t v89 = 0u;
  long long v90 = 0u;
  outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v92);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v89, (uint64_t)v93);
    double v22 = __swift_project_boxed_opaque_existential_1(v93, v94);
    uint64_t v23 = MEMORY[0x1F4188790](v22);
    (*(void (**)(char *, double))(v25 + 16))((char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v23);
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE4(v89) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
      uint64_t v7 = 0;
      goto LABEL_15;
    }
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v28 = v27;
    *(void *)&uint64_t v89 = 0;
    *((void *)&v89 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v29._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v29._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v29);
    _print_unlocked<A, B>(_:_:)();
    v30._unint64_t object = (void *)0x80000001823B1A20;
    v30._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v30);
    v31._uint64_t countAndFlagsBits = 0x3233746E4955;
    v31._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v31);
    v32._uint64_t countAndFlagsBits = 46;
    v32._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x1E4FBBA78], v26);
    goto LABEL_39;
  }
  long long v91 = 0;
  uint64_t v89 = 0u;
  long long v90 = 0u;
  outlined destroy of Any?((uint64_t)&v89, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v93);
  type metadata accessor for NSNumber();
  if (swift_dynamicCast())
  {
    uint64_t v33 = (void *)v89;
    uint64_t v34 = type metadata accessor for DecodingError();
    swift_allocError();
    Swift::String v36 = v35;
    v93[0] = 0;
    v93[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v37._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v37._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v37);
    id v38 = objc_msgSend(v33, sel_description);
    id v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    Swift::String v41 = v40;

    v42._uint64_t countAndFlagsBits = (uint64_t)v39;
    v42._unint64_t object = v41;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43._unint64_t object = (void *)0x80000001823B1A20;
    v43._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v43);
    v44._uint64_t countAndFlagsBits = 0x3233746E4955;
    v44._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v44);
    v45._uint64_t countAndFlagsBits = 46;
    v45._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v34 - 8) + 104))(v36, *MEMORY[0x1E4FBBA78], v34);
    swift_willThrow();
  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    char v66 = v65;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E4FBC4C0], a1, v66);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

void *specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)(uint64_t a1)
{
  uint64_t v1 = (void *)a1;
  outlined init with copy of Any(a1, (uint64_t)v52);
  if (swift_dynamicCast())
  {
    if ((void)v48 == 0x6C6C756E24 && *((void *)&v48 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0) {
        goto LABEL_7;
      }
    }
    return 0;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)v1, (uint64_t)v52);
  if (swift_dynamicCast()) {
    return (void *)v48;
  }
  outlined init with copy of Any((uint64_t)v1, (uint64_t)v51);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v48, (uint64_t)v52);
    uint64_t v4 = v53;
    uint64_t v5 = v54;
    char v6 = __swift_project_boxed_opaque_existential_1(v52, v53);
    double v7 = MEMORY[0x1F4188790](v6);
    uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v10 + 16))(v9, v7);
    unint64_t v11 = specialized BinaryFloatingPoint.init<A>(exactly:)(v9, v4, v5);
    if (v12)
    {
      uint64_t v1 = (void *)type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v14 = v13;
      *(void *)&long long v48 = 0;
      *((void *)&v48 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(52);
      v15._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      v15._unint64_t object = (void *)0x80000001823B1A00;
      String.append(_:)(v15);
      _print_unlocked<A, B>(_:_:)();
      v16._unint64_t object = (void *)0x80000001823B1A20;
      v16._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v16);
      v17._uint64_t countAndFlagsBits = 0x656C62756F44;
      v17._unint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v17);
      v18._uint64_t countAndFlagsBits = 46;
      v18._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, void *))(*(v1 - 1) + 104))(v14, *MEMORY[0x1E4FBBA78], v1);
LABEL_20:
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
      return v1;
    }
    goto LABEL_16;
  }
  uint64_t v50 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  outlined destroy of Any?((uint64_t)&v48, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)v1, (uint64_t)v51);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v48, (uint64_t)v52);
    uint64_t v19 = v53;
    char v20 = __swift_project_boxed_opaque_existential_1(v52, v53);
    double v21 = MEMORY[0x1F4188790](v20);
    uint64_t v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v24 + 16))(v23, v21);
    unint64_t v11 = Double.init<A>(exactly:)((uint64_t)v23, v19);
    if (v25)
    {
      uint64_t v1 = (void *)type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v39 = v38;
      *(void *)&long long v48 = 0;
      *((void *)&v48 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(52);
      v40._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      v40._unint64_t object = (void *)0x80000001823B1A00;
      String.append(_:)(v40);
      __swift_project_boxed_opaque_existential_1(v52, v53);
      v41._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      v42._unint64_t object = (void *)0x80000001823B1A20;
      v42._uint64_t countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v42);
      v43._uint64_t countAndFlagsBits = 0x656C62756F44;
      v43._unint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v43);
      v44._uint64_t countAndFlagsBits = 46;
      v44._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v44);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, void *))(*(v1 - 1) + 104))(v39, *MEMORY[0x1E4FBBA78], v1);
      goto LABEL_20;
    }
LABEL_16:
    uint64_t v1 = (void *)v11;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    return v1;
  }
  uint64_t v50 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  outlined destroy of Any?((uint64_t)&v48, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)v1, (uint64_t)v52);
  type metadata accessor for NSNumber();
  if (swift_dynamicCast())
  {
    uint64_t v1 = (void *)v48;
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v28 = v27;
    v52[0] = 0;
    v52[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v29._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v29._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v29);
    id v30 = objc_msgSend(v1, sel_description);
    id v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    uint64_t v33 = v32;

    v34._uint64_t countAndFlagsBits = (uint64_t)v31;
    v34._unint64_t object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._unint64_t object = (void *)0x80000001823B1A20;
    v35._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v35);
    v36._uint64_t countAndFlagsBits = 0x656C62756F44;
    v36._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v36);
    v37._uint64_t countAndFlagsBits = 46;
    v37._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x1E4FBBA78], v26);
    swift_willThrow();
  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v46 = v45;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E4FBB3D0], v1, v46);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v1;
}

void specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)(void *a1)
{
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v52);
  if (swift_dynamicCast())
  {
    if ((void)v48 == 0x6C6C756E24 && *((void *)&v48 + 1) == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0) {
        goto LABEL_7;
      }
    }
    char v4 = 1;
    goto LABEL_14;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v52);
  if (swift_dynamicCast())
  {
    char v4 = 0;
LABEL_14:
    LOBYTE(v52[0]) = v4;
    return;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v51);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v48, (uint64_t)v52);
    uint64_t v5 = v53;
    uint64_t v6 = v54;
    double v7 = __swift_project_boxed_opaque_existential_1(v52, v53);
    double v8 = MEMORY[0x1F4188790](v7);
    uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v11 + 16))(v10, v8);
    if ((specialized BinaryFloatingPoint.init<A>(exactly:)(v10, v5, v6) & 0x100000000) == 0)
    {
LABEL_11:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
      char v4 = 0;
      goto LABEL_14;
    }
    uint64_t v18 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v20 = v19;
    *(void *)&long long v48 = 0;
    *((void *)&v48 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v21._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v21._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v21);
    _print_unlocked<A, B>(_:_:)();
    v22._unint64_t object = (void *)0x80000001823B1A20;
    v22._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v22);
    v23._uint64_t countAndFlagsBits = 0x74616F6C46;
    v23._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v23);
    v24._uint64_t countAndFlagsBits = 46;
    v24._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA78], v18);
    goto LABEL_22;
  }
  uint64_t v50 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  outlined destroy of Any?((uint64_t)&v48, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v51);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v48, (uint64_t)v52);
    uint64_t v12 = v53;
    uint64_t v13 = __swift_project_boxed_opaque_existential_1(v52, v53);
    double v14 = MEMORY[0x1F4188790](v13);
    Swift::String v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v17 + 16))(v16, v14);
    if ((Float.init<A>(exactly:)((uint64_t)v16, v12) & 0x100000000) == 0) {
      goto LABEL_11;
    }
    uint64_t v38 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v40 = v39;
    *(void *)&long long v48 = 0;
    *((void *)&v48 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v41._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v41._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v41);
    __swift_project_boxed_opaque_existential_1(v52, v53);
    v42._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43._unint64_t object = (void *)0x80000001823B1A20;
    v43._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v43);
    v44._uint64_t countAndFlagsBits = 0x74616F6C46;
    v44._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v44);
    v45._uint64_t countAndFlagsBits = 46;
    v45._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v38 - 8) + 104))(v40, *MEMORY[0x1E4FBBA78], v38);
LABEL_22:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    return;
  }
  uint64_t v50 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  outlined destroy of Any?((uint64_t)&v48, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v52);
  type metadata accessor for NSNumber();
  if (swift_dynamicCast())
  {
    char v25 = (void *)v48;
    uint64_t v26 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v28 = v27;
    v52[0] = 0;
    v52[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52);
    v29._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v29._unint64_t object = (void *)0x80000001823B1A00;
    String.append(_:)(v29);
    id v30 = objc_msgSend(v25, sel_description);
    id v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    uint64_t v33 = v32;

    v34._uint64_t countAndFlagsBits = (uint64_t)v31;
    v34._unint64_t object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._unint64_t object = (void *)0x80000001823B1A20;
    v35._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v35);
    v36._uint64_t countAndFlagsBits = 0x74616F6C46;
    v36._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v36);
    v37._uint64_t countAndFlagsBits = 46;
    v37._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x1E4FBBA78], v26);
    swift_willThrow();
  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    double v47 = v46;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E4FBB470], a1, v47);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

uint64_t __PlistDictionaryDecoder.unbox(_:as:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v11);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_7;
  }
  if (v9 == 0x6C6C756E24 && v10 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (v5)
  {
LABEL_11:
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 1;
    return result;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v11);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    *(void *)a2 = v9;
    *(unsigned char *)(a2 + 8) = 0;
  }
  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    double v8 = v7;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)((uint64_t)&type metadata for Date, a1, v8);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

uint64_t Float.init<A>(exactly:)(uint64_t a1, uint64_t a2)
{
  if (dispatch thunk of BinaryInteger.bitWidth.getter() > 64)
  {
    lazy protocol witness table accessor for type Float and conformance Float();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    char v4 = static BinaryFloatingPoint<>._convert<A>(from:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
    if (v4)
    {
      LODWORD(v5) = v13;
LABEL_13:
      unsigned __int8 v12 = 0;
      uint64_t v5 = v5;
      return v5 | ((unint64_t)v12 << 32);
    }
LABEL_14:
    uint64_t v5 = 0;
    unsigned __int8 v12 = 1;
    return v5 | ((unint64_t)v12 << 32);
  }
  char v6 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v7 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  if (v6)
  {
    float v9 = (float)v7;
    if ((float)v7 >= 9.2234e18) {
      goto LABEL_14;
    }
    *(float *)&uint64_t v5 = (float)v7;
    if ((~LODWORD(v9) & 0x7F800000) != 0)
    {
      if (v9 > -9.2234e18)
      {
        uint64_t v10 = (uint64_t)v9;
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    float v11 = (float)(unint64_t)v7;
    if ((float)(unint64_t)v7 >= 1.8447e19) {
      goto LABEL_14;
    }
    *(float *)&uint64_t v5 = (float)(unint64_t)v7;
    if ((~LODWORD(v11) & 0x7F800000) != 0)
    {
      uint64_t v10 = (unint64_t)v11;
LABEL_12:
      if (v7 == v10) {
        goto LABEL_13;
      }
      goto LABEL_14;
    }
  }
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type __PlistDictionaryDecoder and conformance __PlistDictionaryDecoder(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for __PlistDictionaryDecoder();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t specialized BinaryFloatingPoint.init<A>(exactly:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v222 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v223 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  Swift::Int v221 = (char *)&v197 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v219 = *(void *)(v8 - 8);
  uint64_t v220 = v8;
  MEMORY[0x1F4188790](v8);
  char v218 = (char *)&v197 - v9;
  uint64_t v10 = *(void *)(a3 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t v230 = *(char **)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v208 = *(void *)(*((void *)v230 + 3) + 16);
  uint64_t v207 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v207);
  uint64_t v206 = (char *)&v197 - v11;
  uint64_t v231 = swift_checkMetadataState();
  uint64_t v229 = *(void *)(v231 - 8);
  MEMORY[0x1F4188790](v231);
  uint64_t v211 = (char *)&v197 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v210 = (char *)&v197 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v200 = (char *)&v197 - v16;
  MEMORY[0x1F4188790](v17);
  BOOL v203 = (char *)&v197 - v18;
  MEMORY[0x1F4188790](v19);
  uint64_t v209 = (char *)&v197 - v20;
  MEMORY[0x1F4188790](v21);
  unint64_t v225 = (char *)&v197 - v22;
  MEMORY[0x1F4188790](v23);
  Swift::Int v202 = (char *)&v197 - v24;
  MEMORY[0x1F4188790](v25);
  uint64_t v201 = (char *)&v197 - v26;
  MEMORY[0x1F4188790](v27);
  uint64_t v204 = (char *)&v197 - v28;
  MEMORY[0x1F4188790](v29);
  id v31 = (char *)&v197 - v30;
  MEMORY[0x1F4188790](v32);
  unint64_t v226 = (char *)&v197 - v33;
  MEMORY[0x1F4188790](v34);
  Swift::String v36 = (char *)&v197 - v35;
  MEMORY[0x1F4188790](v37);
  unint64_t v232 = (char *)&v197 - v38;
  uint64_t v39 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v217 = (char *)&v197 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v42);
  Swift::Int v214 = (char *)&v197 - v43;
  MEMORY[0x1F4188790](v44);
  uint64_t v216 = (char *)&v197 - v45;
  MEMORY[0x1F4188790](v46);
  uint64_t v213 = (char *)&v197 - v47;
  MEMORY[0x1F4188790](v48);
  Swift::Int v215 = (char *)&v197 - v49;
  MEMORY[0x1F4188790](v50);
  uint64_t v212 = (char *)&v197 - v51;
  MEMORY[0x1F4188790](v52);
  uint64_t v54 = (char *)&v197 - v53;
  MEMORY[0x1F4188790](v55);
  char v57 = (char *)&v197 - v56;
  uint64_t v233 = v10;
  if (dispatch thunk of FloatingPoint.isNaN.getter())
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(a1, a2);
    return 0;
  }
  uint64_t v228 = v39;
  uint64_t v224 = a1;
  uint64_t v59 = dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter();
  uint64_t v205 = a3;
  int v60 = v59 > 11 || dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter() > 52;
  uint64_t v61 = v228;
  uint64_t v62 = v228 + 16;
  unsigned __int8 v63 = v224;
  long long v227 = *(void (**)(char *, uint64_t, uint64_t))(v228 + 16);
  v227(v57, (uint64_t)v224, a2);
  if (v60) {
    LOBYTE(v60) = dispatch thunk of FloatingPoint.isFinite.getter();
  }
  unint64_t v65 = *(void (**)(char *, uint64_t))(v61 + 8);
  uint64_t v64 = (char *)(v61 + 8);
  char v66 = v57;
  unint64_t v67 = v65;
  v65(v66, a2);
  uint64_t v199 = v62;
  v227(v54, (uint64_t)v63, a2);
  if ((v60 & 1) == 0)
  {
    v67(v54, a2);
    goto LABEL_15;
  }
  char v68 = dispatch thunk of FloatingPoint.isZero.getter();
  v67(v54, a2);
  if (v68) {
    goto LABEL_15;
  }
  unint64_t v198 = v67;
  BOOL v69 = v232;
  dispatch thunk of FloatingPoint.exponent.getter();
  uint64_t v70 = Double.exponent.getter();
  int64_t v235 = v70;
  uint64_t v72 = v230;
  uint64_t v71 = v231;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    uint64_t v73 = v71;
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      Swift::String v74 = v226;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      goto LABEL_32;
    }
LABEL_37:
    uint64_t v90 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v89 = v229;
    if (v90 < v70) {
      goto LABEL_62;
    }
    goto LABEL_38;
  }
  char v86 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v87 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v86)
  {
    if (v87 > 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      Swift::String v74 = v226;
      uint64_t v73 = v231;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      BOOL v69 = v232;
LABEL_32:
      char v88 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v89 = v229;
      (*(void (**)(char *, uint64_t))(v229 + 8))(v74, v73);
      if (v88) {
        goto LABEL_62;
      }
LABEL_38:
      uint64_t v91 = Double.exponent.getter();
      int64_t v235 = v91;
      char v92 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v93 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v92)
      {
        if (v93 > 64)
        {
          lazy protocol witness table accessor for type Int and conformance Int();
          uint64_t v94 = v226;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v95 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v96 = *(void (**)(char *, uint64_t))(v89 + 8);
          v96(v94, v73);
          v96(v69, v73);
          unint64_t v67 = v198;
          if (v95) {
            goto LABEL_122;
          }
          goto LABEL_58;
        }
      }
      else if (v93 >= 64)
      {
        uint64_t v234 = v91;
        uint64_t v131 = v204;
        (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v204, v69, v73);
        unint64_t v67 = v198;
        if (v91 < 0)
        {
          (*(void (**)(char *, uint64_t))(v89 + 8))(v131, v73);
        }
        else
        {
          lazy protocol witness table accessor for type Int and conformance Int();
          Foundation::Date v132 = v226;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          uint64_t v133 = v131;
          char v134 = dispatch thunk of static Comparable.< infix(_:_:)();
          os_log_type_t v135 = *(void (**)(char *, uint64_t))(v89 + 8);
          v135(v132, v73);
          v135(v133, v73);
          if ((v134 & 1) == 0)
          {
LABEL_58:
            uint64_t v136 = dispatch thunk of BinaryFloatingPoint.significandWidth.getter();
            if (Double.significandWidth.getter() < v136) {
              goto LABEL_122;
            }
            goto LABEL_15;
          }
        }
LABEL_122:
        v67(v63, a2);
        return 0;
      }
      uint64_t v130 = dispatch thunk of BinaryInteger._lowWord.getter();
      (*(void (**)(char *, uint64_t))(v89 + 8))(v69, v73);
      unint64_t v67 = v198;
      if (v235 < v130) {
        goto LABEL_122;
      }
      goto LABEL_58;
    }
    uint64_t v122 = v231;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    uint64_t v123 = v226;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v124 = v232;
    char v125 = dispatch thunk of static Comparable.< infix(_:_:)();
    char v126 = v123;
    BOOL v69 = v124;
    uint64_t v89 = v229;
    unint64_t v197 = *(void (**)(char *, uint64_t))(v229 + 8);
    v197(v126, v122);
    (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v31, v69, v122);
    if (v125)
    {
      v197(v31, v122);
      uint64_t v73 = v122;
      goto LABEL_62;
    }
    int64_t v137 = v235;
    uint64_t v138 = dispatch thunk of BinaryInteger._lowWord.getter();
    v197(v31, v122);
    BOOL v154 = v138 < v137;
    uint64_t v89 = v229;
    uint64_t v73 = v122;
    if (!v154) {
      goto LABEL_38;
    }
  }
  else
  {
    if (v87 < 64)
    {
      uint64_t v73 = v231;
      BOOL v69 = v232;
      goto LABEL_37;
    }
    uint64_t v127 = v229;
    uint64_t v73 = v231;
    BOOL v69 = v232;
    (*(void (**)(char *, char *, uint64_t))(v229 + 16))(v36, v232, v231);
    uint64_t v234 = v70;
    if (v70 <= 0)
    {
      (*(void (**)(char *, uint64_t))(v127 + 8))(v36, v73);
      uint64_t v89 = v127;
      goto LABEL_38;
    }
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v128 = v226;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    LODWORD(v197) = dispatch thunk of static Comparable.< infix(_:_:)();
    unint64_t v129 = *(void (**)(char *, uint64_t))(v127 + 8);
    v129(v128, v73);
    v129(v36, v73);
    BOOL v69 = v232;
    uint64_t v89 = v127;
    if ((v197 & 1) == 0) {
      goto LABEL_38;
    }
  }
LABEL_62:
  uint64_t v139 = Double.exponent.getter();
  int64_t v235 = v139;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v140 = v226;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      goto LABEL_68;
    }
    goto LABEL_73;
  }
  char v141 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v142 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v141 & 1) == 0)
  {
    if (v142 >= 64)
    {
      uint64_t v162 = v201;
      BOOL v69 = v232;
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v201, v232, v73);
      uint64_t v234 = v139;
      if (v139 <= 0)
      {
        (*(void (**)(char *, uint64_t))(v89 + 8))(v162, v73);
      }
      else
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        char v163 = v226;
        Swift::Int v164 = v162;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v165 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v166 = *(void (**)(char *, uint64_t))(v229 + 8);
        v166(v163, v73);
        uint64_t v167 = v164;
        uint64_t v89 = v229;
        v166(v167, v73);
        BOOL v69 = v232;
        if (v165) {
          goto LABEL_90;
        }
      }
      goto LABEL_74;
    }
    BOOL v69 = v232;
LABEL_73:
    if (dispatch thunk of BinaryInteger._lowWord.getter() >= v139) {
      goto LABEL_74;
    }
    goto LABEL_90;
  }
  if (v142 <= 64)
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    char v155 = v226;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    uint64_t v156 = v232;
    char v157 = dispatch thunk of static Comparable.< infix(_:_:)();
    double v158 = *(void (**)(char *, uint64_t))(v89 + 8);
    uint64_t v159 = v155;
    BOOL v69 = v156;
    v158(v159, v73);
    char v160 = *(void (**)(char *, char *, uint64_t))(v89 + 16);
    char v161 = v202;
    v160(v202, v156, v73);
    if (v157)
    {
      v158(v161, v73);
      uint64_t v89 = v229;
    }
    else
    {
      int64_t v168 = v235;
      unint64_t v169 = v230;
      uint64_t v170 = dispatch thunk of BinaryInteger._lowWord.getter();
      v158(v161, v73);
      BOOL v154 = v170 < v168;
      BOOL v69 = v232;
      uint64_t v72 = v169;
      uint64_t v89 = v229;
      if (!v154) {
        goto LABEL_74;
      }
    }
LABEL_90:
    v198(v224, a2);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v69, v73);
    return 0;
  }
  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v140 = v226;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  BOOL v69 = v232;
LABEL_68:
  char v143 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v140, v73);
  if (v143) {
    goto LABEL_90;
  }
LABEL_74:
  uint64_t v204 = v64;
  Swift::Int v202 = (char *)dispatch thunk of BinaryFloatingPoint.significandWidth.getter();
  char v144 = *(void (**)(char *, char *, uint64_t))(v89 + 32);
  uint64_t v145 = v225;
  v144(v225, v69, v73);
  char v146 = dispatch thunk of static BinaryInteger.isSigned.getter();
  unint64_t v147 = v209;
  unint64_t v232 = *(char **)(v89 + 16);
  ((void (*)(char *, char *, uint64_t))v232)(v209, v145, v73);
  if ((v146 & 1) == 0)
  {
    uint64_t v149 = *(void (**)(char *, uint64_t))(v89 + 8);
    v149(v147, v73);
    Swift::Int v150 = v210;
    goto LABEL_107;
  }
  uint64_t v148 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v149 = *(void (**)(char *, uint64_t))(v89 + 8);
  v149(v147, v73);
  BOOL v154 = v148 < 65;
  Swift::Int v150 = v210;
  if (!v154)
  {
    uint64_t v209 = (char *)(v89 + 8);
    uint64_t v151 = v203;
    ((void (*)(char *, char *, uint64_t))v232)(v203, v225, v73);
    int64_t v235 = 0x8000000000000000;
    if (dispatch thunk of static BinaryInteger.isSigned.getter())
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
      {
        uint64_t v152 = dispatch thunk of BinaryInteger._lowWord.getter();
        v149(v151, v73);
        uint64_t v153 = (int64_t *)v235;
        BOOL v154 = v152 < v235;
        goto LABEL_103;
      }
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v175 = v226;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v174 = dispatch thunk of static Comparable.< infix(_:_:)();
      v149(v175, v73);
      v149(v151, v73);
    }
    else
    {
      LODWORD(v201) = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v171 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v201 & 1) == 0)
      {
        uint64_t v153 = &v235;
        if (v171 >= 64)
        {
LABEL_106:
          uint64_t v73 = v231;
          v149((char *)*(v153 - 32), v231);
          uint64_t v72 = v230;
          goto LABEL_107;
        }
        unint64_t v176 = v203;
        uint64_t v72 = v230;
        uint64_t v73 = v231;
        uint64_t v177 = dispatch thunk of BinaryInteger._lowWord.getter();
        v149(v176, v73);
        uint64_t v153 = (int64_t *)v235;
        if (v177 >= v235) {
          goto LABEL_107;
        }
LABEL_105:
        __break(1u);
        goto LABEL_106;
      }
      if (v171 <= 64)
      {
        uint64_t v73 = v231;
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        uint64_t v178 = v226;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        uint64_t v179 = v203;
        char v180 = dispatch thunk of static Comparable.< infix(_:_:)();
        v149(v178, v73);
        uint64_t v72 = v200;
        v144(v200, v179, v73);
        if (v180) {
          goto LABEL_124;
        }
        int64_t v181 = v235;
        uint64_t v182 = v230;
        uint64_t v183 = dispatch thunk of BinaryInteger._lowWord.getter();
        v149(v72, v73);
        BOOL v154 = v183 < v181;
        uint64_t v153 = (int64_t *)&v236;
        uint64_t v72 = v182;
LABEL_103:
        if (!v154) {
          goto LABEL_107;
        }
        goto LABEL_105;
      }
      lazy protocol witness table accessor for type Int and conformance Int();
      long long v172 = v226;
      uint64_t v72 = v230;
      uint64_t v73 = v231;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      long long v173 = v203;
      char v174 = dispatch thunk of static Comparable.< infix(_:_:)();
      v149(v172, v73);
      v149(v173, v73);
      uint64_t v153 = (int64_t *)&v236;
    }
    if ((v174 & 1) == 0) {
      goto LABEL_107;
    }
    goto LABEL_105;
  }
LABEL_107:
  uint64_t v184 = v225;
  uint64_t v185 = dispatch thunk of BinaryInteger.bitWidth.getter();
  ((void (*)(char *, char *, uint64_t))v232)(v150, v184, v73);
  if (v185 <= 64)
  {
    uint64_t v188 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v149(v150, v73);
    if (v188 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_120;
    }
  }
  else
  {
    v149(v150, v73);
  }
  ((void (*)(char *, char *, uint64_t))v232)(v211, v225, v73);
  int64_t v235 = 0x7FFFFFFFFFFFFFFFLL;
  char v186 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v187 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v186)
  {
    if (v187 > 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      while (1)
      {
        uint64_t v191 = v226;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v192 = v211;
        char v193 = dispatch thunk of static Comparable.< infix(_:_:)();
        v149(v191, v73);
        v149(v192, v73);
        if ((v193 & 1) == 0) {
          break;
        }
LABEL_117:
        __break(1u);
LABEL_118:
        uint64_t v234 = 0x7FFFFFFFFFFFFFFFLL;
        lazy protocol witness table accessor for type Int and conformance Int();
      }
      goto LABEL_120;
    }
  }
  else if (v187 >= 64)
  {
    goto LABEL_118;
  }
  uint64_t v189 = v211;
  uint64_t v190 = dispatch thunk of BinaryInteger._lowWord.getter();
  v149(v189, v73);
  if (v235 < v190) {
    goto LABEL_117;
  }
LABEL_120:
  uint64_t v194 = v225;
  uint64_t v195 = dispatch thunk of BinaryInteger._lowWord.getter();
  v149(v194, v73);
  uint64_t v196 = Double.exponent.getter();
  if (!__OFSUB__(v195, v196))
  {
    unsigned __int8 v63 = v224;
    unint64_t v67 = v198;
    if (v195 - v196 < (uint64_t)v202) {
      goto LABEL_122;
    }
LABEL_15:
    uint64_t v75 = dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter();
    uint64_t v76 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter();
    if (v75 == 11)
    {
      if (v76 == 52)
      {
        v227(v212, (uint64_t)v63, a2);
        int v80 = swift_dynamicCast();
        _D8 = *(double *)&v235;
        unint64_t v82 = v215;
        (*(void (**)(char *, char *, uint64_t))(v228 + 32))(v215, v63, a2);
        if (v80)
        {
          v67(v82, a2);
        }
        else
        {
          uint64_t v233 = dispatch thunk of FloatingPoint.sign.getter();
          char v108 = v218;
          dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
          uint64_t v109 = v220;
          swift_getAssociatedConformanceWitness();
          uint64_t v110 = v67;
          __int16 v111 = dispatch thunk of BinaryInteger._lowWord.getter();
          (*(void (**)(char *, uint64_t))(v219 + 8))(v108, v109);
          uint64_t v112 = v221;
          dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
          v110(v82, a2);
          uint64_t v113 = v223;
          swift_getAssociatedConformanceWitness();
          uint64_t v114 = dispatch thunk of BinaryInteger._lowWord.getter();
          (*(void (**)(char *, uint64_t))(v222 + 8))(v112, v113);
          *(void *)&_D8 = (v233 << 63) | ((unint64_t)(v111 & 0x7FF) << 52) | v114 & 0xFFFFFFFFFFFFFLL;
        }
        return *(void *)&_D8;
      }
    }
    else if (v75 == 8)
    {
      if (v76 == 23)
      {
        v227(v213, (uint64_t)v63, a2);
        int v83 = swift_dynamicCast();
        float v84 = *(float *)&v235;
        int v85 = v216;
        (*(void (**)(char *, char *, uint64_t))(v228 + 32))(v216, v63, a2);
        if (v83)
        {
          v67(v85, a2);
          _D8 = v84;
        }
        else
        {
          LODWORD(v233) = dispatch thunk of FloatingPoint.sign.getter();
          long long v115 = v218;
          dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
          uint64_t v116 = v220;
          swift_getAssociatedConformanceWitness();
          uint64_t v117 = v67;
          unsigned __int8 v118 = dispatch thunk of BinaryInteger._lowWord.getter();
          (*(void (**)(char *, uint64_t))(v219 + 8))(v115, v116);
          uint64_t v119 = v221;
          dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
          v117(v85, a2);
          uint64_t v120 = v223;
          swift_getAssociatedConformanceWitness();
          int v121 = dispatch thunk of BinaryInteger._lowWord.getter();
          (*(void (**)(char *, uint64_t))(v222 + 8))(v119, v120);
          _D8 = COERCE_FLOAT((v233 << 31) | (v118 << 23) | v121 & 0x7FFFFF);
        }
        return *(void *)&_D8;
      }
    }
    else if (v75 == 5 && v76 == 10)
    {
      v227(v214, (uint64_t)v63, a2);
      int v77 = swift_dynamicCast();
      _H8 = v235;
      Swift::String v79 = v217;
      (*(void (**)(char *, char *, uint64_t))(v228 + 32))(v217, v63, a2);
      if (v77)
      {
        v67(v79, a2);
      }
      else
      {
        LODWORD(v233) = dispatch thunk of FloatingPoint.sign.getter();
        uint64_t v97 = v218;
        dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
        uint64_t v98 = v220;
        swift_getAssociatedConformanceWitness();
        long long v99 = v67;
        char v100 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v219 + 8))(v97, v98);
        Swift::Int v101 = v221;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        v99(v79, a2);
        uint64_t v102 = v223;
        swift_getAssociatedConformanceWitness();
        __int16 v103 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v222 + 8))(v101, v102);
        _H8 = ((_WORD)v233 << 15) | ((v100 & 0x1F) << 10) | v103 & 0x3FF;
      }
      __asm { FCVT            D8, H8 }
      return *(void *)&_D8;
    }
    lazy protocol witness table accessor for type Double and conformance Double();
    static BinaryFloatingPoint._convert<A>(from:)();
    v67(v63, a2);
    _D8 = *(double *)&v235;
    return *(void *)&_D8;
  }
  __break(1u);
LABEL_124:
  unint64_t result = ((uint64_t (*)(char *, uint64_t))v149)(v72, v73);
  __break(1u);
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  void (*v68)(char *, uint64_t);
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  char *v80;
  int v81;
  double v82;
  char *v83;
  int v85;
  char *v86;
  unint64_t result;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char *v96;
  char v97;
  void (*v98)(char *, uint64_t);
  char *v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  char v102;
  char *v103;
  uint64_t v104;
  __int16 v105;
  char *v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  __int16 v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t);
  unsigned __int8 v120;
  char *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char v127;
  char *v128;
  uint64_t v129;
  char *v130;
  void (*v131)(char *, uint64_t);
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  char v136;
  void (*v137)(char *, uint64_t);
  uint64_t v138;
  int64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char v143;
  uint64_t v144;
  char v145;
  void (*v146)(char *, char *, uint64_t);
  char *v147;
  char v148;
  char *v149;
  uint64_t v150;
  void (*v151)(char *, uint64_t);
  char *v152;
  char *v153;
  uint64_t v154;
  int64_t *v155;
  BOOL v156;
  char *v157;
  char *v158;
  char v159;
  void (*v160)(char *, uint64_t);
  char *v161;
  void (*v162)(char *, char *, uint64_t);
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  char v167;
  void (*v168)(char *, uint64_t);
  char *v169;
  int64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  char v176;
  char *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char v182;
  int64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  char v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(char *, uint64_t);
  void (*v200)(char *, uint64_t);
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  char *v228;
  void (*v229)(char *, uint64_t, uint64_t);
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  int64_t v237;
  char v238;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v224 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v225 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v223 = (char *)&v199 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  Swift::Int v221 = *(void *)(v8 - 8);
  uint64_t v222 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v220 = (char *)&v199 - v9;
  uint64_t v10 = *(void *)(a3 + 16);
  swift_getAssociatedTypeWitness();
  unint64_t v232 = *(char **)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v210 = *(void *)(*((void *)v232 + 3) + 16);
  uint64_t v209 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v209);
  uint64_t v208 = (char *)&v199 - v11;
  uint64_t v233 = swift_checkMetadataState();
  uint64_t v231 = *(void *)(v233 - 8);
  MEMORY[0x1F4188790](v233);
  uint64_t v213 = (char *)&v199 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v212 = (char *)&v199 - v14;
  MEMORY[0x1F4188790](v15);
  Swift::Int v202 = (char *)&v199 - v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v205 = (char *)&v199 - v18;
  MEMORY[0x1F4188790](v19);
  uint64_t v211 = (char *)&v199 - v20;
  MEMORY[0x1F4188790](v21);
  long long v227 = (char *)&v199 - v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v204 = (char *)&v199 - v24;
  MEMORY[0x1F4188790](v25);
  BOOL v203 = (char *)&v199 - v26;
  MEMORY[0x1F4188790](v27);
  uint64_t v206 = (char *)&v199 - v28;
  MEMORY[0x1F4188790](v29);
  id v31 = (char *)&v199 - v30;
  MEMORY[0x1F4188790](v32);
  uint64_t v228 = (char *)&v199 - v33;
  MEMORY[0x1F4188790](v34);
  Swift::String v36 = (char *)&v199 - v35;
  MEMORY[0x1F4188790](v37);
  uint64_t v234 = (char *)&v199 - v38;
  uint64_t v39 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v219 = (char *)&v199 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v42);
  uint64_t v216 = (char *)&v199 - v43;
  MEMORY[0x1F4188790](v44);
  char v218 = (char *)&v199 - v45;
  MEMORY[0x1F4188790](v46);
  Swift::Int v215 = (char *)&v199 - v47;
  MEMORY[0x1F4188790](v48);
  uint64_t v217 = (char *)&v199 - v49;
  MEMORY[0x1F4188790](v50);
  Swift::Int v214 = (char *)&v199 - v51;
  MEMORY[0x1F4188790](v52);
  uint64_t v54 = (char *)&v199 - v53;
  MEMORY[0x1F4188790](v55);
  char v57 = (char *)&v199 - v56;
  int64_t v235 = v10;
  if (dispatch thunk of FloatingPoint.isNaN.getter())
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(a1, a2);
LABEL_3:
    unint64_t v58 = 0;
    uint64_t v59 = 1;
LABEL_29:
    LOBYTE(v237) = v59;
    return v58 | ((unint64_t)v59 << 32);
  }
  uint64_t v230 = v39;
  unint64_t v226 = a1;
  int v60 = dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter();
  uint64_t v207 = a3;
  uint64_t v61 = v60 > 8 || dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter() > 23;
  uint64_t v62 = v230;
  unsigned __int8 v63 = v230 + 16;
  uint64_t v64 = v226;
  uint64_t v229 = *(void (**)(char *, uint64_t, uint64_t))(v230 + 16);
  v229(v57, (uint64_t)v226, a2);
  if (v61) {
    LOBYTE(v61) = dispatch thunk of FloatingPoint.isFinite.getter();
  }
  char v66 = *(void (**)(char *, uint64_t))(v62 + 8);
  unint64_t v65 = (char *)(v62 + 8);
  unint64_t v67 = v57;
  char v68 = v66;
  v66(v67, a2);
  uint64_t v201 = v63;
  v229(v54, (uint64_t)v64, a2);
  if ((v61 & 1) == 0)
  {
    v68(v54, a2);
    goto LABEL_15;
  }
  BOOL v69 = dispatch thunk of FloatingPoint.isZero.getter();
  v68(v54, a2);
  if (v69) {
    goto LABEL_15;
  }
  uint64_t v200 = v68;
  uint64_t v70 = v234;
  dispatch thunk of FloatingPoint.exponent.getter();
  uint64_t v71 = Float.exponent.getter();
  uint64_t v237 = v71;
  uint64_t v73 = v232;
  uint64_t v72 = v233;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    Swift::String v74 = v72;
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v75 = v228;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      goto LABEL_33;
    }
LABEL_38:
    char v92 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v91 = v231;
    if (v92 < v71) {
      goto LABEL_63;
    }
    goto LABEL_39;
  }
  char v88 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v89 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v88)
  {
    if (v89 > 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v75 = v228;
      Swift::String v74 = v233;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v70 = v234;
LABEL_33:
      uint64_t v90 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v91 = v231;
      (*(void (**)(char *, uint64_t))(v231 + 8))(v75, v74);
      if (v90) {
        goto LABEL_63;
      }
LABEL_39:
      uint64_t v93 = Float.exponent.getter();
      uint64_t v237 = v93;
      uint64_t v94 = dispatch thunk of static BinaryInteger.isSigned.getter();
      char v95 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v94)
      {
        if (v95 > 64)
        {
          lazy protocol witness table accessor for type Int and conformance Int();
          uint64_t v96 = v228;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          uint64_t v97 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v98 = *(void (**)(char *, uint64_t))(v91 + 8);
          v98(v96, v74);
          v98(v70, v74);
          char v68 = v200;
          if (v97) {
            goto LABEL_123;
          }
          goto LABEL_59;
        }
      }
      else if (v95 >= 64)
      {
        char v236 = v93;
        uint64_t v133 = v206;
        (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v206, v70, v74);
        char v68 = v200;
        if (v93 < 0)
        {
          (*(void (**)(char *, uint64_t))(v91 + 8))(v133, v74);
        }
        else
        {
          lazy protocol witness table accessor for type Int and conformance Int();
          char v134 = v228;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          os_log_type_t v135 = v133;
          uint64_t v136 = dispatch thunk of static Comparable.< infix(_:_:)();
          int64_t v137 = *(void (**)(char *, uint64_t))(v91 + 8);
          v137(v134, v74);
          v137(v135, v74);
          if ((v136 & 1) == 0)
          {
LABEL_59:
            uint64_t v138 = dispatch thunk of BinaryFloatingPoint.significandWidth.getter();
            if (Float.significandWidth.getter() < v138) {
              goto LABEL_123;
            }
            goto LABEL_15;
          }
        }
LABEL_123:
        v68(v64, a2);
        goto LABEL_3;
      }
      Foundation::Date v132 = dispatch thunk of BinaryInteger._lowWord.getter();
      (*(void (**)(char *, uint64_t))(v91 + 8))(v70, v74);
      char v68 = v200;
      if (v237 < v132) {
        goto LABEL_123;
      }
      goto LABEL_59;
    }
    char v124 = v233;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    char v125 = v228;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v126 = v234;
    uint64_t v127 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v128 = v125;
    uint64_t v70 = v126;
    uint64_t v91 = v231;
    uint64_t v199 = *(void (**)(char *, uint64_t))(v231 + 8);
    v199(v128, v124);
    (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v31, v70, v124);
    if (v127)
    {
      v199(v31, v124);
      Swift::String v74 = v124;
      goto LABEL_63;
    }
    uint64_t v139 = v237;
    uint64_t v140 = dispatch thunk of BinaryInteger._lowWord.getter();
    v199(v31, v124);
    uint64_t v156 = v140 < v139;
    uint64_t v91 = v231;
    Swift::String v74 = v124;
    if (!v156) {
      goto LABEL_39;
    }
  }
  else
  {
    if (v89 < 64)
    {
      Swift::String v74 = v233;
      uint64_t v70 = v234;
      goto LABEL_38;
    }
    unint64_t v129 = v231;
    Swift::String v74 = v233;
    uint64_t v70 = v234;
    (*(void (**)(char *, char *, uint64_t))(v231 + 16))(v36, v234, v233);
    char v236 = v71;
    if (v71 <= 0)
    {
      (*(void (**)(char *, uint64_t))(v129 + 8))(v36, v74);
      uint64_t v91 = v129;
      goto LABEL_39;
    }
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v130 = v228;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    LODWORD(v199) = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v131 = *(void (**)(char *, uint64_t))(v129 + 8);
    v131(v130, v74);
    v131(v36, v74);
    uint64_t v70 = v234;
    uint64_t v91 = v129;
    if ((v199 & 1) == 0) {
      goto LABEL_39;
    }
  }
LABEL_63:
  char v141 = Float.exponent.getter();
  uint64_t v237 = v141;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v142 = v228;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      goto LABEL_69;
    }
    goto LABEL_74;
  }
  char v143 = dispatch thunk of static BinaryInteger.isSigned.getter();
  char v144 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v143 & 1) == 0)
  {
    if (v144 >= 64)
    {
      Swift::Int v164 = v203;
      uint64_t v70 = v234;
      (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v203, v234, v74);
      char v236 = v141;
      if (v141 <= 0)
      {
        (*(void (**)(char *, uint64_t))(v91 + 8))(v164, v74);
      }
      else
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        char v165 = v228;
        uint64_t v166 = v164;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v167 = dispatch thunk of static Comparable.< infix(_:_:)();
        int64_t v168 = *(void (**)(char *, uint64_t))(v231 + 8);
        v168(v165, v74);
        unint64_t v169 = v166;
        uint64_t v91 = v231;
        v168(v169, v74);
        uint64_t v70 = v234;
        if (v167) {
          goto LABEL_91;
        }
      }
      goto LABEL_75;
    }
    uint64_t v70 = v234;
LABEL_74:
    if (dispatch thunk of BinaryInteger._lowWord.getter() >= v141) {
      goto LABEL_75;
    }
    goto LABEL_91;
  }
  if (v144 <= 64)
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    char v157 = v228;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    double v158 = v234;
    uint64_t v159 = dispatch thunk of static Comparable.< infix(_:_:)();
    char v160 = *(void (**)(char *, uint64_t))(v91 + 8);
    char v161 = v157;
    uint64_t v70 = v158;
    v160(v161, v74);
    uint64_t v162 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
    char v163 = v204;
    v162(v204, v158, v74);
    if (v159)
    {
      v160(v163, v74);
      uint64_t v91 = v231;
    }
    else
    {
      uint64_t v170 = v237;
      uint64_t v171 = v232;
      long long v172 = dispatch thunk of BinaryInteger._lowWord.getter();
      v160(v163, v74);
      uint64_t v156 = v172 < v170;
      uint64_t v70 = v234;
      uint64_t v73 = v171;
      uint64_t v91 = v231;
      if (!v156) {
        goto LABEL_75;
      }
    }
LABEL_91:
    v200(v226, a2);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v70, v74);
    goto LABEL_3;
  }
  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v142 = v228;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  uint64_t v70 = v234;
LABEL_69:
  uint64_t v145 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v91 + 8))(v142, v74);
  if (v145) {
    goto LABEL_91;
  }
LABEL_75:
  uint64_t v206 = v65;
  uint64_t v204 = (char *)dispatch thunk of BinaryFloatingPoint.significandWidth.getter();
  char v146 = *(void (**)(char *, char *, uint64_t))(v91 + 32);
  unint64_t v147 = v227;
  v146(v227, v70, v74);
  uint64_t v148 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v149 = v211;
  uint64_t v234 = *(char **)(v91 + 16);
  ((void (*)(char *, char *, uint64_t))v234)(v211, v147, v74);
  if ((v148 & 1) == 0)
  {
    uint64_t v151 = *(void (**)(char *, uint64_t))(v91 + 8);
    v151(v149, v74);
    uint64_t v152 = v212;
    goto LABEL_108;
  }
  Swift::Int v150 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v151 = *(void (**)(char *, uint64_t))(v91 + 8);
  v151(v149, v74);
  uint64_t v156 = v150 < 65;
  uint64_t v152 = v212;
  if (!v156)
  {
    uint64_t v211 = (char *)(v91 + 8);
    uint64_t v153 = v205;
    ((void (*)(char *, char *, uint64_t))v234)(v205, v227, v74);
    uint64_t v237 = 0x8000000000000000;
    if (dispatch thunk of static BinaryInteger.isSigned.getter())
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
      {
        BOOL v154 = dispatch thunk of BinaryInteger._lowWord.getter();
        v151(v153, v74);
        char v155 = (int64_t *)v237;
        uint64_t v156 = v154 < v237;
        goto LABEL_104;
      }
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v177 = v228;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      unint64_t v176 = dispatch thunk of static Comparable.< infix(_:_:)();
      v151(v177, v74);
      v151(v153, v74);
    }
    else
    {
      LODWORD(v203) = dispatch thunk of static BinaryInteger.isSigned.getter();
      long long v173 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v203 & 1) == 0)
      {
        char v155 = &v237;
        if (v173 >= 64)
        {
LABEL_107:
          Swift::String v74 = v233;
          v151((char *)*(v155 - 32), v233);
          uint64_t v73 = v232;
          goto LABEL_108;
        }
        uint64_t v178 = v205;
        uint64_t v73 = v232;
        Swift::String v74 = v233;
        uint64_t v179 = dispatch thunk of BinaryInteger._lowWord.getter();
        v151(v178, v74);
        char v155 = (int64_t *)v237;
        if (v179 >= v237) {
          goto LABEL_108;
        }
LABEL_106:
        __break(1u);
        goto LABEL_107;
      }
      if (v173 <= 64)
      {
        Swift::String v74 = v233;
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        char v180 = v228;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        int64_t v181 = v205;
        uint64_t v182 = dispatch thunk of static Comparable.< infix(_:_:)();
        v151(v180, v74);
        uint64_t v73 = v202;
        v146(v202, v181, v74);
        if (v182) {
          goto LABEL_125;
        }
        uint64_t v183 = v237;
        uint64_t v184 = v232;
        uint64_t v185 = dispatch thunk of BinaryInteger._lowWord.getter();
        v151(v73, v74);
        uint64_t v156 = v185 < v183;
        char v155 = (int64_t *)&v238;
        uint64_t v73 = v184;
LABEL_104:
        if (!v156) {
          goto LABEL_108;
        }
        goto LABEL_106;
      }
      lazy protocol witness table accessor for type Int and conformance Int();
      char v174 = v228;
      uint64_t v73 = v232;
      Swift::String v74 = v233;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v175 = v205;
      unint64_t v176 = dispatch thunk of static Comparable.< infix(_:_:)();
      v151(v174, v74);
      v151(v175, v74);
      char v155 = (int64_t *)&v238;
    }
    if ((v176 & 1) == 0) {
      goto LABEL_108;
    }
    goto LABEL_106;
  }
LABEL_108:
  char v186 = v227;
  uint64_t v187 = dispatch thunk of BinaryInteger.bitWidth.getter();
  ((void (*)(char *, char *, uint64_t))v234)(v152, v186, v74);
  if (v187 <= 64)
  {
    uint64_t v190 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v151(v152, v74);
    if (v190 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_121;
    }
  }
  else
  {
    v151(v152, v74);
  }
  ((void (*)(char *, char *, uint64_t))v234)(v213, v227, v74);
  uint64_t v237 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v188 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v189 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v188)
  {
    if (v189 > 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      while (1)
      {
        char v193 = v228;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v194 = v213;
        uint64_t v195 = dispatch thunk of static Comparable.< infix(_:_:)();
        v151(v193, v74);
        v151(v194, v74);
        if ((v195 & 1) == 0) {
          break;
        }
LABEL_118:
        __break(1u);
LABEL_119:
        char v236 = 0x7FFFFFFFFFFFFFFFLL;
        lazy protocol witness table accessor for type Int and conformance Int();
      }
      goto LABEL_121;
    }
  }
  else if (v189 >= 64)
  {
    goto LABEL_119;
  }
  uint64_t v191 = v213;
  uint64_t v192 = dispatch thunk of BinaryInteger._lowWord.getter();
  v151(v191, v74);
  if (v237 < v192) {
    goto LABEL_118;
  }
LABEL_121:
  uint64_t v196 = v227;
  unint64_t v197 = dispatch thunk of BinaryInteger._lowWord.getter();
  v151(v196, v74);
  unint64_t v198 = Float.exponent.getter();
  if (!__OFSUB__(v197, v198))
  {
    uint64_t v64 = v226;
    char v68 = v200;
    if (v197 - v198 < (uint64_t)v204) {
      goto LABEL_123;
    }
LABEL_15:
    uint64_t v76 = dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter();
    int v77 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter();
    if (v76 == 11)
    {
      if (v77 == 52)
      {
        v229(v214, (uint64_t)v64, a2);
        uint64_t v81 = swift_dynamicCast();
        unint64_t v82 = *(double *)&v237;
        int v83 = v217;
        (*(void (**)(char *, char *, uint64_t))(v230 + 32))(v217, v64, a2);
        if (v81)
        {
          v68(v83, a2);
          *(float *)&_S8 = v82;
        }
        else
        {
          int64_t v235 = dispatch thunk of FloatingPoint.sign.getter();
          uint64_t v110 = v220;
          dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
          __int16 v111 = v222;
          swift_getAssociatedConformanceWitness();
          uint64_t v112 = v68;
          uint64_t v113 = dispatch thunk of BinaryInteger._lowWord.getter();
          (*(void (**)(char *, uint64_t))(v221 + 8))(v110, v111);
          uint64_t v114 = v223;
          dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
          v112(v83, a2);
          long long v115 = v225;
          swift_getAssociatedConformanceWitness();
          uint64_t v116 = dispatch thunk of BinaryInteger._lowWord.getter();
          (*(void (**)(char *, uint64_t))(v224 + 8))(v114, v115);
          *(float *)&_S8 = COERCE_DOUBLE((v235 << 63) | ((unint64_t)(v113 & 0x7FF) << 52) | v116 & 0xFFFFFFFFFFFFFLL);
        }
        goto LABEL_28;
      }
    }
    else if (v76 == 8)
    {
      if (v77 == 23)
      {
        v229(v215, (uint64_t)v64, a2);
        int v85 = swift_dynamicCast();
        _S8 = v237;
        char v86 = v218;
        (*(void (**)(char *, char *, uint64_t))(v230 + 32))(v218, v64, a2);
        if (v85)
        {
          v68(v86, a2);
        }
        else
        {
          LODWORD(v235) = dispatch thunk of FloatingPoint.sign.getter();
          uint64_t v117 = v220;
          dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
          unsigned __int8 v118 = v222;
          swift_getAssociatedConformanceWitness();
          uint64_t v119 = v68;
          uint64_t v120 = dispatch thunk of BinaryInteger._lowWord.getter();
          (*(void (**)(char *, uint64_t))(v221 + 8))(v117, v118);
          int v121 = v223;
          dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
          v119(v86, a2);
          uint64_t v122 = v225;
          swift_getAssociatedConformanceWitness();
          uint64_t v123 = dispatch thunk of BinaryInteger._lowWord.getter();
          (*(void (**)(char *, uint64_t))(v224 + 8))(v121, v122);
          _S8 = (v235 << 31) | (v120 << 23) | v123 & 0x7FFFFF;
        }
        goto LABEL_28;
      }
    }
    else if (v76 == 5 && v77 == 10)
    {
      v229(v216, (uint64_t)v64, a2);
      uint64_t v78 = swift_dynamicCast();
      _H8 = v237;
      int v80 = v219;
      (*(void (**)(char *, char *, uint64_t))(v230 + 32))(v219, v64, a2);
      if (v78)
      {
        v68(v80, a2);
      }
      else
      {
        LODWORD(v235) = dispatch thunk of FloatingPoint.sign.getter();
        long long v99 = v220;
        dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
        char v100 = v222;
        swift_getAssociatedConformanceWitness();
        Swift::Int v101 = v68;
        uint64_t v102 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v221 + 8))(v99, v100);
        __int16 v103 = v223;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        v101(v80, a2);
        uint64_t v104 = v225;
        swift_getAssociatedConformanceWitness();
        char v105 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*(void (**)(char *, uint64_t))(v224 + 8))(v103, v104);
        _H8 = ((_WORD)v235 << 15) | ((v102 & 0x1F) << 10) | v105 & 0x3FF;
      }
      __asm { FCVT            S8, H8 }
      goto LABEL_28;
    }
    lazy protocol witness table accessor for type Float and conformance Float();
    static BinaryFloatingPoint._convert<A>(from:)();
    v68(v64, a2);
    _S8 = v237;
LABEL_28:
    uint64_t v59 = 0;
    unint64_t v58 = _S8;
    goto LABEL_29;
  }
  __break(1u);
LABEL_125:
  unint64_t result = ((uint64_t (*)(char *, uint64_t))v151)(v73, v74);
  __break(1u);
  return result;
}

uint64_t specialized __PlistDictionaryDecoder.unbox(_:as:)(void *a1)
{
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v10);
  if (swift_dynamicCast())
  {
    uint64_t v3 = v8;
    BOOL v4 = v8 == 0x6C6C756E24 && v9 == 0xE500000000000000;
    if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(v1 + 32);
    type metadata accessor for DecodingError();
    swift_allocError();
    char v6 = v5;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E4FBB1A0], a1, v6);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  return v3;
}

{
  char v3;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned char v9[32];

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v9);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_7;
  }
  if (v7 == 0x6C6C756E24 && v8 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  uint64_t v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v3) {
    return 2;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v9);
  if (swift_dynamicCast()) {
    return v7;
  }
  type metadata accessor for DecodingError();
  swift_allocError();
  char v6 = v5;
  swift_bridgeObjectRetain();
  static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x1E4FBB390], a1, v6);
  swift_bridgeObjectRelease();
  return swift_willThrow();
}

{
  char v3;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned char v9[32];

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v9);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_7;
  }
  if (v7 == 0x6C6C756E24 && v8 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v3) {
    return 0;
  }
LABEL_7:
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v9);
  if (swift_dynamicCast()) {
    return v7;
  }
  type metadata accessor for DecodingError();
  swift_allocError();
  char v6 = v5;
  swift_bridgeObjectRetain();
  static DecodingError._typeMismatch(at:expectation:reality:)((uint64_t)&type metadata for Data, a1, v6);
  swift_bridgeObjectRelease();
  return swift_willThrow();
}

_OWORD *specialized __PlistDictionaryDecoder.decode(_:)()
{
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v1, v14);
  swift_bridgeObjectRelease();
  uint64_t v2 = MEMORY[0x1E4FBB1A0];
  if (swift_dynamicCast())
  {
    if (v12 == 0x6C6C756E24 && v13 == 0xE500000000000000) {
      goto LABEL_10;
    }
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v4)
    {
LABEL_11:
      uint64_t v8 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v10 = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v10 = v2;
      *(void *)&v14[0] = 0;
      *((void *)&v14[0] + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      char v6 = v14;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104))(v10, *MEMORY[0x1E4FBBA80], v8);
      swift_willThrow();
      return v6;
    }
  }
  uint64_t v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v14);
  swift_bridgeObjectRelease();
  char v6 = (_OWORD *)specialized __PlistDictionaryDecoder.unbox(_:as:)(v14);
  uint64_t v2 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (!v0 && !v2)
  {
    __break(1u);
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  return v6;
}

uint64_t specialized __PlistDictionaryDecoder.decode(_:)()
{
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v1, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v3 & 1) == 0) {
        goto LABEL_7;
      }
    }
    uint64_t v8 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v10 = MEMORY[0x1E4FBB390];
    *(void *)&v13[0] = 0;
    *((void *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104))(v10, *MEMORY[0x1E4FBBA80], v8);
    swift_willThrow();
    return v7 & 1;
  }
LABEL_7:
  uint64_t v4 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v4, v13);
  swift_bridgeObjectRelease();
  char v5 = specialized __PlistDictionaryDecoder.unbox(_:as:)(v13);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if (v0) {
    return v7 & 1;
  }
  if (v5 != 2)
  {
    char v7 = v5 & 1;
    return v7 & 1;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  uint64_t v1 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v1, v13);
  swift_bridgeObjectRelease();
  if (!swift_dynamicCast()) {
    goto LABEL_7;
  }
  if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_10:
    char v7 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v9 = MEMORY[0x1E4FBB3D0];
    *(void *)&v13[0] = 0;
    *((void *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, *MEMORY[0x1E4FBBA80], v7);
    return swift_willThrow();
  }
LABEL_7:
  uint64_t v4 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v4, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)((uint64_t)v13);
  if (v0) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  uint64_t v10 = v5;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if (v10) {
    __break(1u);
  }
  return result;
}

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v15);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v13 == 0x6C6C756E24 && v14 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }
    uint64_t v8 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v10 = MEMORY[0x1E4FBB808];
    *(void *)&v15[0] = 0;
    *((void *)&v15[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v0 = v15;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104))(v10, *MEMORY[0x1E4FBBA80], v8);
    swift_willThrow();
    return (uint64_t)v0;
  }
LABEL_7:
  char v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v15);
  swift_bridgeObjectRelease();
  char v6 = specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v15);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return (uint64_t)v0;
  }
  uint64_t v0 = (_OWORD *)v6;
  uint64_t v11 = v7;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if ((v11 & 1) == 0) {
    return (uint64_t)v0;
  }
  __break(1u);
  return result;
}

{
  long long *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  long long *v6;
  char v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v15);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v13 == 0x6C6C756E24 && v14 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }
    uint64_t v8 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v10 = MEMORY[0x1E4FBB550];
    *(void *)&v15[0] = 0;
    *((void *)&v15[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v0 = v15;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104))(v10, *MEMORY[0x1E4FBBA80], v8);
    swift_willThrow();
    return (uint64_t)v0;
  }
LABEL_7:
  char v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v15);
  swift_bridgeObjectRelease();
  char v6 = specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)((uint64_t)v15);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return (uint64_t)v0;
  }
  uint64_t v0 = v6;
  uint64_t v11 = v7;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if ((v11 & 1) == 0) {
    return (uint64_t)v0;
  }
  __break(1u);
  return result;
}

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }
    char v7 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v9 = MEMORY[0x1E4FBC098];
    *(void *)&v13[0] = 0;
    *((void *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v0 = v13;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, *MEMORY[0x1E4FBBA80], v7);
    swift_willThrow();
    return (uint64_t)v0;
  }
LABEL_7:
  char v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return (uint64_t)v0;
  }
  uint64_t v0 = v6;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if (((unsigned __int16)v0 & 0x100) == 0) {
    return (uint64_t)v0;
  }
  __break(1u);
  return result;
}

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }
    char v7 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v9 = MEMORY[0x1E4FBC0F8];
    *(void *)&v13[0] = 0;
    *((void *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v0 = v13;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, *MEMORY[0x1E4FBBA80], v7);
    swift_willThrow();
    return (uint64_t)v0;
  }
LABEL_7:
  char v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return (uint64_t)v0;
  }
  uint64_t v0 = v6;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if ((v0 & 0x10000) == 0) {
    return (uint64_t)v0;
  }
  __break(1u);
  return result;
}

{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }
    char v7 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v9 = MEMORY[0x1E4FBC150];
    *(void *)&v13[0] = 0;
    *((void *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v0 = (unint64_t)v13;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, *MEMORY[0x1E4FBBA80], v7);
    swift_willThrow();
    return v0;
  }
LABEL_7:
  char v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return v0;
  }
  uint64_t v0 = (unint64_t)v6;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if ((v0 & 0x100000000) == 0) {
    return v0;
  }
  __break(1u);
  return result;
}

{
  long long *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  long long *v6;
  char v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v15);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v13 == 0x6C6C756E24 && v14 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }
    uint64_t v8 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v10 = MEMORY[0x1E4FBC1C8];
    *(void *)&v15[0] = 0;
    *((void *)&v15[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v0 = v15;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104))(v10, *MEMORY[0x1E4FBBA80], v8);
    swift_willThrow();
    return (uint64_t)v0;
  }
LABEL_7:
  char v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v15);
  swift_bridgeObjectRelease();
  char v6 = specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)((uint64_t)v15);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return (uint64_t)v0;
  }
  uint64_t v0 = v6;
  uint64_t v11 = v7;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if ((v11 & 1) == 0) {
    return (uint64_t)v0;
  }
  __break(1u);
  return result;
}

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }
    char v7 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v9 = MEMORY[0x1E4FBC358];
    *(void *)&v13[0] = 0;
    *((void *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v0 = v13;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, *MEMORY[0x1E4FBBA80], v7);
    swift_willThrow();
    return (uint64_t)v0;
  }
LABEL_7:
  char v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return (uint64_t)v0;
  }
  uint64_t v0 = v6;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if (((unsigned __int16)v0 & 0x100) == 0) {
    return (uint64_t)v0;
  }
  __break(1u);
  return result;
}

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }
    char v7 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v9 = MEMORY[0x1E4FBC450];
    *(void *)&v13[0] = 0;
    *((void *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v0 = v13;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, *MEMORY[0x1E4FBBA80], v7);
    swift_willThrow();
    return (uint64_t)v0;
  }
LABEL_7:
  char v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return (uint64_t)v0;
  }
  uint64_t v0 = v6;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if ((v0 & 0x10000) == 0) {
    return (uint64_t)v0;
  }
  __break(1u);
  return result;
}

{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v13);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }
    char v7 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v9 = MEMORY[0x1E4FBC4C0];
    *(void *)&v13[0] = 0;
    *((void *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v0 = (unint64_t)v13;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, *MEMORY[0x1E4FBBA80], v7);
    swift_willThrow();
    return v0;
  }
LABEL_7:
  char v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v13);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    return v0;
  }
  uint64_t v0 = (unint64_t)v6;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if ((v0 & 0x100000000) == 0) {
    return v0;
  }
  __break(1u);
  return result;
}

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v2, v15);
  swift_bridgeObjectRelease();
  if (swift_dynamicCast())
  {
    if (v13 == 0x6C6C756E24 && v14 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        goto LABEL_7;
      }
    }
    uint64_t v8 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v10 = MEMORY[0x1E4FBC538];
    *(void *)&v15[0] = 0;
    *((void *)&v15[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v0 = v15;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104))(v10, *MEMORY[0x1E4FBBA80], v8);
    swift_willThrow();
    return (uint64_t)v0;
  }
LABEL_7:
  char v5 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v5, v15);
  swift_bridgeObjectRelease();
  char v6 = specialized __PlistDictionaryDecoder.unboxInteger<A>(_:as:)(v15);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return (uint64_t)v0;
  }
  uint64_t v0 = (_OWORD *)v6;
  uint64_t v11 = v7;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if ((v11 & 1) == 0) {
    return (uint64_t)v0;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  uint64_t v1 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v1, v13);
  swift_bridgeObjectRelease();
  if (!swift_dynamicCast()) {
    goto LABEL_7;
  }
  if (v11 == 0x6C6C756E24 && v12 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_10:
    char v7 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v9 = MEMORY[0x1E4FBB470];
    *(void *)&v13[0] = 0;
    *((void *)&v13[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, *MEMORY[0x1E4FBBA80], v7);
    return swift_willThrow();
  }
LABEL_7:
  uint64_t v4 = swift_bridgeObjectRetain();
  specialized _PlistDecodingStorage.topContainer.getter(v4, v13);
  swift_bridgeObjectRelease();
  specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)(v13);
  if (v0) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  uint64_t v10 = v5;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  if ((v10 & 0x100000000) != 0) {
    __break(1u);
  }
  return result;
}

long long *specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)()
{
  uint64_t v2 = v0;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = v0[1];
  uint64_t v4 = v0[3];
  if (v4 >= *(void *)(v3 + 16))
  {
    uint64_t v14 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v16 = MEMORY[0x1E4FBB1A0];
    uint64_t v17 = *(void *)(*v0 + 32);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    uint64_t v19 = v2[3];
    *(void *)(inited + 56) = &type metadata for _CodingKey;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v20 = swift_allocObject();
    *(void *)(inited + 32) = v20;
    *(void *)(v20 + 16) = v19;
    *(void *)(v20 + 24) = 0;
    *(void *)(v20 + 32) = 0;
    *(unsigned char *)(v20 + 40) = 2;
    *(void *)&long long v33 = v17;
    swift_bridgeObjectRetain();
    char v5 = &v33;
    specialized Array.append<A>(contentsOf:)(inited);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
    swift_willThrow();
    return v5;
  }
  char v5 = (long long *)*v0;
  char v6 = *(void **)(*v2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *((void *)v5 + 4) = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    *((void *)v5 + 4) = v6;
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    char v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
    *((void *)v5 + 4) = v6;
  }
  uint64_t v34 = &type metadata for _CodingKey;
  unint64_t v10 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  unint64_t v35 = v10;
  uint64_t v11 = swift_allocObject();
  *(void *)&long long v33 = v11;
  *(void *)(v11 + 24) = 0;
  *(void *)(v11 + 32) = 0;
  *(void *)(v11 + 16) = v4;
  *(unsigned char *)(v11 + 40) = 2;
  _OWORD v6[2] = v9 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v33, (uint64_t)&v6[5 * v9 + 4]);
  if (v4 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)v4 >= *(void *)(v3 + 16))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v33);
  uint64_t v12 = specialized __PlistDictionaryDecoder.unbox(_:as:)(&v33);
  if (!v1)
  {
    char v5 = (long long *)v12;
    uint64_t v22 = v13;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
    if (!v22)
    {
      uint64_t v26 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v28 = v27;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v28 = MEMORY[0x1E4FBB1A0];
      uint64_t v29 = *(void *)(*v2 + 32);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t v30 = swift_initStackObject();
      *(_OWORD *)(v30 + 16) = xmmword_1821037E0;
      uint64_t v31 = v2[3];
      *(void *)(v30 + 56) = &type metadata for _CodingKey;
      *(void *)(v30 + 64) = v10;
      uint64_t v32 = swift_allocObject();
      *(void *)(v30 + 32) = v32;
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0;
      *(unsigned char *)(v32 + 40) = 2;
      *(void *)&long long v33 = v29;
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v30);
      *(void *)&long long v33 = 0;
      *((void *)&v33 + 1) = 0xE000000000000000;
      char v5 = &v33;
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x1E4FBBA80], v26);
      swift_willThrow();
      goto LABEL_10;
    }
    uint64_t v23 = v2[3];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (!v24)
    {
      v2[3] = v25;
      $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
      return v5;
    }
LABEL_19:
    __break(1u);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
LABEL_10:
  $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
  return v5;
}

uint64_t specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)()
{
  uint64_t v2 = v0;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = v0[1];
  uint64_t v4 = v0[3];
  if (v4 < *(void *)(v3 + 16))
  {
    char v5 = (long long *)*v0;
    char v6 = *(void **)(*v2 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *((void *)v5 + 4) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      *((void *)v5 + 4) = v6;
    }
    unint64_t v9 = v6[2];
    unint64_t v8 = v6[3];
    if (v9 >= v8 >> 1)
    {
      char v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
      *((void *)v5 + 4) = v6;
    }
    long long v33 = &type metadata for _CodingKey;
    unint64_t v10 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    unint64_t v34 = v10;
    uint64_t v11 = swift_allocObject();
    *(void *)&long long v32 = v11;
    *(void *)(v11 + 24) = 0;
    *(void *)(v11 + 32) = 0;
    *(void *)(v11 + 16) = v4;
    *(unsigned char *)(v11 + 40) = 2;
    _OWORD v6[2] = v9 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v32, (uint64_t)&v6[5 * v9 + 4]);
    if (v4 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v4 < *(void *)(v3 + 16))
    {
      outlined init with copy of Any(v3 + 32 * v4 + 32, (uint64_t)&v32);
      char v12 = specialized __PlistDictionaryDecoder.unbox(_:as:)(&v32);
      if (v1)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
LABEL_13:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
        return v5 & 1;
      }
      char v20 = v12;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
      if (v20 == 2)
      {
        uint64_t v21 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v23 = v22;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *uint64_t v23 = MEMORY[0x1E4FBB390];
        uint64_t v24 = *(void *)(*v2 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v26 = v2[3];
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = v10;
        uint64_t v27 = swift_allocObject();
        *(void *)(inited + 32) = v27;
        *(void *)(v27 + 16) = v26;
        *(void *)(v27 + 24) = 0;
        *(void *)(v27 + 32) = 0;
        *(unsigned char *)(v27 + 40) = 2;
        *(void *)&long long v32 = v24;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(void *)&long long v32 = 0;
        *((void *)&v32 + 1) = 0xE000000000000000;
        char v5 = &v32;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, *MEMORY[0x1E4FBBA80], v21);
        swift_willThrow();
        goto LABEL_13;
      }
      uint64_t v29 = v2[3];
      BOOL v30 = __OFADD__(v29, 1);
      uint64_t v31 = v29 + 1;
      if (!v30)
      {
        LOBYTE(v5) = v20 & 1;
        v2[3] = v31;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
        return v5 & 1;
      }
LABEL_19:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v13 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v15 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  void *v15 = MEMORY[0x1E4FBB390];
  uint64_t v16 = *(void *)(*v0 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1821037E0;
  uint64_t v18 = v2[3];
  *(void *)(v17 + 56) = &type metadata for _CodingKey;
  *(void *)(v17 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v19 = swift_allocObject();
  *(void *)(v17 + 32) = v19;
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = 0;
  *(void *)(v19 + 32) = 0;
  *(unsigned char *)(v19 + 40) = 2;
  *(void *)&long long v32 = v16;
  swift_bridgeObjectRetain();
  char v5 = &v32;
  specialized Array.append<A>(contentsOf:)(v17);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, *MEMORY[0x1E4FBBA80], v13);
  swift_willThrow();
  return v5 & 1;
}

long long *specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(uint64_t (*a1)(long long *), uint64_t a2)
{
  char v5 = v2;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[3];
  if (v7 < *(void *)(v6 + 16))
  {
    unint64_t v9 = (long long *)*v2;
    unint64_t v10 = *(void **)(*v5 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *((void *)v9 + 4) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *((void *)v9 + 4) = v10;
    }
    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
      *((void *)v9 + 4) = v10;
    }
    uint64_t v37 = &type metadata for _CodingKey;
    unint64_t v34 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    unint64_t v38 = v34;
    uint64_t v14 = swift_allocObject();
    *(void *)&long long v36 = v14;
    *(void *)(v14 + 24) = 0;
    *(void *)(v14 + 32) = 0;
    *(void *)(v14 + 16) = v7;
    *(unsigned char *)(v14 + 40) = 2;
    v10[2] = v13 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v36, (uint64_t)&v10[5 * v13 + 4]);
    if (v7 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v7 < *(void *)(v6 + 16))
    {
      outlined init with copy of Any(v6 + 32 * v7 + 32, (uint64_t)&v36);
      uint64_t v15 = a1(&v36);
      if (v3)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }
      unint64_t v9 = (long long *)v15;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      if (((unsigned __int16)v9 & 0x100) != 0)
      {
        uint64_t v26 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v28 = v27;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *uint64_t v28 = a2;
        uint64_t v29 = *(void *)(*v5 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v31 = v5[3];
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = v34;
        uint64_t v32 = swift_allocObject();
        *(void *)(inited + 32) = v32;
        *(void *)(v32 + 16) = v31;
        *(void *)(v32 + 24) = 0;
        *(void *)(v32 + 32) = 0;
        *(unsigned char *)(v32 + 40) = 2;
        *(void *)&long long v36 = v29;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(void *)&long long v36 = 0;
        *((void *)&v36 + 1) = 0xE000000000000000;
        unint64_t v9 = &v36;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x1E4FBBA80], v26);
        swift_willThrow();
        goto LABEL_15;
      }
      uint64_t v23 = v5[3];
      BOOL v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (!v24)
      {
        v5[3] = v25;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }
LABEL_19:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v16 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v18 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *uint64_t v18 = a2;
  uint64_t v19 = *(void *)(*v2 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_1821037E0;
  uint64_t v21 = v5[3];
  *(void *)(v20 + 56) = &type metadata for _CodingKey;
  *(void *)(v20 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v22 = swift_allocObject();
  *(void *)(v20 + 32) = v22;
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = 0;
  *(void *)(v22 + 32) = 0;
  *(unsigned char *)(v22 + 40) = 2;
  *(void *)&long long v36 = v19;
  swift_bridgeObjectRetain();
  unint64_t v9 = &v36;
  specialized Array.append<A>(contentsOf:)(v20);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x1E4FBBA80], v16);
  swift_willThrow();
  return v9;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  long long *v9;
  void *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  long long v36;
  ValueMetadata *v37;
  unint64_t v38;
  uint64_t v39;

  char v5 = v2;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[3];
  if (v7 < *(void *)(v6 + 16))
  {
    unint64_t v9 = (long long *)*v2;
    unint64_t v10 = *(void **)(*v5 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *((void *)v9 + 4) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *((void *)v9 + 4) = v10;
    }
    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
      *((void *)v9 + 4) = v10;
    }
    uint64_t v37 = &type metadata for _CodingKey;
    unint64_t v34 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    unint64_t v38 = v34;
    uint64_t v14 = swift_allocObject();
    *(void *)&long long v36 = v14;
    *(void *)(v14 + 24) = 0;
    *(void *)(v14 + 32) = 0;
    *(void *)(v14 + 16) = v7;
    *(unsigned char *)(v14 + 40) = 2;
    v10[2] = v13 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v36, (uint64_t)&v10[5 * v13 + 4]);
    if (v7 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v7 < *(void *)(v6 + 16))
    {
      outlined init with copy of Any(v6 + 32 * v7 + 32, (uint64_t)&v36);
      uint64_t v15 = a1(&v36);
      if (v3)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }
      unint64_t v9 = (long long *)v15;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      if ((v9 & 0x10000) != 0)
      {
        uint64_t v26 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v28 = v27;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *uint64_t v28 = a2;
        uint64_t v29 = *(void *)(*v5 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v31 = v5[3];
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = v34;
        uint64_t v32 = swift_allocObject();
        *(void *)(inited + 32) = v32;
        *(void *)(v32 + 16) = v31;
        *(void *)(v32 + 24) = 0;
        *(void *)(v32 + 32) = 0;
        *(unsigned char *)(v32 + 40) = 2;
        *(void *)&long long v36 = v29;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(void *)&long long v36 = 0;
        *((void *)&v36 + 1) = 0xE000000000000000;
        unint64_t v9 = &v36;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x1E4FBBA80], v26);
        swift_willThrow();
        goto LABEL_15;
      }
      uint64_t v23 = v5[3];
      BOOL v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (!v24)
      {
        v5[3] = v25;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }
LABEL_19:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v16 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v18 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *uint64_t v18 = a2;
  uint64_t v19 = *(void *)(*v2 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_1821037E0;
  uint64_t v21 = v5[3];
  *(void *)(v20 + 56) = &type metadata for _CodingKey;
  *(void *)(v20 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v22 = swift_allocObject();
  *(void *)(v20 + 32) = v22;
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = 0;
  *(void *)(v22 + 32) = 0;
  *(unsigned char *)(v22 + 40) = 2;
  *(void *)&long long v36 = v19;
  swift_bridgeObjectRetain();
  unint64_t v9 = &v36;
  specialized Array.append<A>(contentsOf:)(v20);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x1E4FBBA80], v16);
  swift_willThrow();
  return v9;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  long long *v9;
  void *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t inited;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  long long v38;
  ValueMetadata *v39;
  unint64_t v40;
  uint64_t v41;

  char v5 = v2;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[3];
  if (v7 < *(void *)(v6 + 16))
  {
    unint64_t v9 = (long long *)*v2;
    unint64_t v10 = *(void **)(*v5 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *((void *)v9 + 4) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *((void *)v9 + 4) = v10;
    }
    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
      *((void *)v9 + 4) = v10;
    }
    uint64_t v39 = &type metadata for _CodingKey;
    long long v36 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v40 = v36;
    uint64_t v14 = swift_allocObject();
    *(void *)&unint64_t v38 = v14;
    *(void *)(v14 + 24) = 0;
    *(void *)(v14 + 32) = 0;
    *(void *)(v14 + 16) = v7;
    *(unsigned char *)(v14 + 40) = 2;
    v10[2] = v13 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v38, (uint64_t)&v10[5 * v13 + 4]);
    if (v7 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v7 < *(void *)(v6 + 16))
    {
      outlined init with copy of Any(v6 + 32 * v7 + 32, (uint64_t)&v38);
      uint64_t v15 = a1(&v38);
      if (v3)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }
      unint64_t v9 = (long long *)v15;
      BOOL v24 = v16;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
      if (v24)
      {
        uint64_t v28 = type metadata accessor for DecodingError();
        swift_allocError();
        BOOL v30 = v29;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *BOOL v30 = a2;
        uint64_t v31 = *(void *)(*v5 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        long long v33 = v5[3];
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = v36;
        unint64_t v34 = swift_allocObject();
        *(void *)(inited + 32) = v34;
        *(void *)(v34 + 16) = v33;
        *(void *)(v34 + 24) = 0;
        *(void *)(v34 + 32) = 0;
        *(unsigned char *)(v34 + 40) = 2;
        *(void *)&unint64_t v38 = v31;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(void *)&unint64_t v38 = 0;
        *((void *)&v38 + 1) = 0xE000000000000000;
        unint64_t v9 = &v38;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v28 - 8) + 104))(v30, *MEMORY[0x1E4FBBA80], v28);
        swift_willThrow();
        goto LABEL_15;
      }
      uint64_t v25 = v5[3];
      uint64_t v26 = __OFADD__(v25, 1);
      uint64_t v27 = v25 + 1;
      if (!v26)
      {
        v5[3] = v27;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }
LABEL_19:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v17 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v19 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *uint64_t v19 = a2;
  uint64_t v20 = *(void *)(*v2 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t v21 = swift_initStackObject();
  *(_OWORD *)(v21 + 16) = xmmword_1821037E0;
  uint64_t v22 = v5[3];
  *(void *)(v21 + 56) = &type metadata for _CodingKey;
  *(void *)(v21 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v23 = swift_allocObject();
  *(void *)(v21 + 32) = v23;
  *(void *)(v23 + 16) = v22;
  *(void *)(v23 + 24) = 0;
  *(void *)(v23 + 32) = 0;
  *(unsigned char *)(v23 + 40) = 2;
  *(void *)&unint64_t v38 = v20;
  swift_bridgeObjectRetain();
  unint64_t v9 = &v38;
  specialized Array.append<A>(contentsOf:)(v21);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, *MEMORY[0x1E4FBBA80], v17);
  swift_willThrow();
  return v9;
}

unint64_t specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(uint64_t (*a1)(long long *), uint64_t a2)
{
  char v5 = v2;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[3];
  if (v7 < *(void *)(v6 + 16))
  {
    unint64_t v9 = *v2;
    unint64_t v10 = *(void **)(*v5 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v9 + 32) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *(void *)(v9 + 32) = v10;
    }
    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
      *(void *)(v9 + 32) = v10;
    }
    uint64_t v37 = &type metadata for _CodingKey;
    unint64_t v34 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    unint64_t v38 = v34;
    uint64_t v14 = swift_allocObject();
    *(void *)&long long v36 = v14;
    *(void *)(v14 + 24) = 0;
    *(void *)(v14 + 32) = 0;
    *(void *)(v14 + 16) = v7;
    *(unsigned char *)(v14 + 40) = 2;
    v10[2] = v13 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v36, (uint64_t)&v10[5 * v13 + 4]);
    if (v7 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v7 < *(void *)(v6 + 16))
    {
      outlined init with copy of Any(v6 + 32 * v7 + 32, (uint64_t)&v36);
      uint64_t v15 = a1(&v36);
      if (v3)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }
      unint64_t v9 = v15;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      if ((v9 & 0x100000000) != 0)
      {
        uint64_t v26 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v28 = v27;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *uint64_t v28 = a2;
        uint64_t v29 = *(void *)(*v5 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v31 = v5[3];
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = v34;
        uint64_t v32 = swift_allocObject();
        *(void *)(inited + 32) = v32;
        *(void *)(v32 + 16) = v31;
        *(void *)(v32 + 24) = 0;
        *(void *)(v32 + 32) = 0;
        *(unsigned char *)(v32 + 40) = 2;
        *(void *)&long long v36 = v29;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(void *)&long long v36 = 0;
        *((void *)&v36 + 1) = 0xE000000000000000;
        unint64_t v9 = (unint64_t)&v36;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x1E4FBBA80], v26);
        swift_willThrow();
        goto LABEL_15;
      }
      uint64_t v23 = v5[3];
      BOOL v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (!v24)
      {
        v5[3] = v25;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v5);
        return v9;
      }
LABEL_19:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v16 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v18 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *uint64_t v18 = a2;
  uint64_t v19 = *(void *)(*v2 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_1821037E0;
  uint64_t v21 = v5[3];
  *(void *)(v20 + 56) = &type metadata for _CodingKey;
  *(void *)(v20 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v22 = swift_allocObject();
  *(void *)(v20 + 32) = v22;
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = 0;
  *(void *)(v22 + 32) = 0;
  *(unsigned char *)(v22 + 40) = 2;
  *(void *)&long long v36 = v19;
  swift_bridgeObjectRetain();
  unint64_t v9 = (unint64_t)&v36;
  specialized Array.append<A>(contentsOf:)(v20);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x1E4FBBA80], v16);
  swift_willThrow();
  return v9;
}

float specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)()
{
  uint64_t v3 = v0;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = v0[1];
  uint64_t v5 = v0[3];
  if (v5 < *(void *)(v4 + 16))
  {
    uint64_t v6 = *v0;
    uint64_t v7 = *(void **)(*v3 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v6 + 32) = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      *(void *)(v6 + 32) = v7;
    }
    unint64_t v10 = v7[2];
    unint64_t v9 = v7[3];
    if (v10 >= v9 >> 1)
    {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
      *(void *)(v6 + 32) = v7;
    }
    unint64_t v34 = &type metadata for _CodingKey;
    unint64_t v11 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    unint64_t v35 = v11;
    uint64_t v12 = swift_allocObject();
    *(void *)&long long v33 = v12;
    *(void *)(v12 + 24) = 0;
    *(void *)(v12 + 32) = 0;
    *(void *)(v12 + 16) = v5;
    *(unsigned char *)(v12 + 40) = 2;
    v7[2] = v10 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v33, (uint64_t)&v7[5 * v10 + 4]);
    if (v5 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v5 < *(void *)(v4 + 16))
    {
      outlined init with copy of Any(v4 + 32 * v5 + 32, (uint64_t)&v33);
      specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)(&v33);
      if (v1)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v3);
        return v2;
      }
      uint64_t v21 = v13;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      if ((v21 & 0x100000000) != 0)
      {
        uint64_t v25 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v27 = v26;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *uint64_t v27 = MEMORY[0x1E4FBB470];
        uint64_t v28 = *(void *)(*v3 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v30 = v3[3];
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = v11;
        uint64_t v31 = swift_allocObject();
        *(void *)(inited + 32) = v31;
        *(void *)(v31 + 16) = v30;
        *(void *)(v31 + 24) = 0;
        *(void *)(v31 + 32) = 0;
        *(unsigned char *)(v31 + 40) = 2;
        *(void *)&long long v33 = v28;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(void *)&long long v33 = 0;
        *((void *)&v33 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, *MEMORY[0x1E4FBBA80], v25);
        swift_willThrow();
        goto LABEL_15;
      }
      uint64_t v22 = v3[3];
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (!v23)
      {
        float v2 = *(float *)&v21;
        v3[3] = v24;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v3);
        return v2;
      }
LABEL_19:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v14 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v16 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *uint64_t v16 = MEMORY[0x1E4FBB470];
  uint64_t v17 = *(void *)(*v0 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t v18 = swift_initStackObject();
  *(_OWORD *)(v18 + 16) = xmmword_1821037E0;
  uint64_t v19 = v3[3];
  *(void *)(v18 + 56) = &type metadata for _CodingKey;
  *(void *)(v18 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v20 = swift_allocObject();
  *(void *)(v18 + 32) = v20;
  *(void *)(v20 + 16) = v19;
  *(void *)(v20 + 24) = 0;
  *(void *)(v20 + 32) = 0;
  *(unsigned char *)(v20 + 40) = 2;
  *(void *)&long long v33 = v17;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v18);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x1E4FBBA80], v14);
  swift_willThrow();
  return v2;
}

double specialized _PlistDictionaryUnkeyedDecodingContainer.decode(_:)()
{
  uint64_t v3 = v0;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = v0[1];
  uint64_t v5 = v0[3];
  if (v5 < *(void *)(v4 + 16))
  {
    uint64_t v6 = *v0;
    uint64_t v7 = *(void **)(*v3 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v6 + 32) = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      *(void *)(v6 + 32) = v7;
    }
    unint64_t v10 = v7[2];
    unint64_t v9 = v7[3];
    if (v10 >= v9 >> 1)
    {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
      *(void *)(v6 + 32) = v7;
    }
    uint64_t v36 = &type metadata for _CodingKey;
    unint64_t v11 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    unint64_t v37 = v11;
    uint64_t v12 = swift_allocObject();
    *(void *)&long long v35 = v12;
    *(void *)(v12 + 24) = 0;
    *(void *)(v12 + 32) = 0;
    *(void *)(v12 + 16) = v5;
    *(unsigned char *)(v12 + 40) = 2;
    v7[2] = v10 + 1;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v35, (uint64_t)&v7[5 * v10 + 4]);
    if (v5 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v5 < *(void *)(v4 + 16))
    {
      outlined init with copy of Any(v4 + 32 * v5 + 32, (uint64_t)&v35);
      uint64_t v13 = specialized __PlistDictionaryDecoder.unboxFloatingPoint<A>(_:as:)((uint64_t)&v35);
      if (v1)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
LABEL_15:
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v3);
        return v2;
      }
      uint64_t v22 = v13;
      char v23 = v14;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
      if (v23)
      {
        uint64_t v27 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v29 = v28;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
        *uint64_t v29 = MEMORY[0x1E4FBB3D0];
        uint64_t v30 = *(void *)(*v3 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v32 = v3[3];
        *(void *)(inited + 56) = &type metadata for _CodingKey;
        *(void *)(inited + 64) = v11;
        uint64_t v33 = swift_allocObject();
        *(void *)(inited + 32) = v33;
        *(void *)(v33 + 16) = v32;
        *(void *)(v33 + 24) = 0;
        *(void *)(v33 + 32) = 0;
        *(unsigned char *)(v33 + 40) = 2;
        *(void *)&long long v35 = v30;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(inited);
        *(void *)&long long v35 = 0;
        *((void *)&v35 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v27 - 8) + 104))(v29, *MEMORY[0x1E4FBBA80], v27);
        swift_willThrow();
        goto LABEL_15;
      }
      uint64_t v24 = v3[3];
      BOOL v25 = __OFADD__(v24, 1);
      uint64_t v26 = v24 + 1;
      if (!v25)
      {
        double v2 = *(double *)&v22;
        v3[3] = v26;
        $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v3);
        return v2;
      }
LABEL_19:
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v15 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v17 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *uint64_t v17 = MEMORY[0x1E4FBB3D0];
  uint64_t v18 = *(void *)(*v0 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1821037E0;
  uint64_t v20 = v3[3];
  *(void *)(v19 + 56) = &type metadata for _CodingKey;
  *(void *)(v19 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v21 = swift_allocObject();
  *(void *)(v19 + 32) = v21;
  *(void *)(v21 + 16) = v20;
  *(void *)(v21 + 24) = 0;
  *(void *)(v21 + 32) = 0;
  *(unsigned char *)(v21 + 40) = 2;
  *(void *)&long long v35 = v18;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v19);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBA80], v15);
  swift_willThrow();
  return v2;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int16 and conformance Int16()
{
  unint64_t result = lazy protocol witness table cache variable for type Int16 and conformance Int16;
  if (!lazy protocol witness table cache variable for type Int16 and conformance Int16)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int16 and conformance Int16);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int16 and conformance Int16;
  if (!lazy protocol witness table cache variable for type Int16 and conformance Int16)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int16 and conformance Int16);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  unint64_t result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer;
  if (!lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedDecodingContainer and conformance _PlistDictionaryUnkeyedDecodingContainer);
  }
  return result;
}

uint64_t sub_181E36C20()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t type metadata accessor for _PlistDictionaryKeyedDecodingContainer()
{
  return __swift_instantiateGenericMetadata();
}

void *initializeBufferWithCopyOfBuffer for _PlistDictionaryKeyedDecodingContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for _PlistDictionaryKeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _PlistDictionaryKeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for _PlistDictionaryKeyedDecodingContainer()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for _PlistDictionaryUnkeyedDecodingContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for _PlistDictionaryUnkeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for _PlistDictionaryUnkeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

void *type metadata accessor for _PlistDictionaryUnkeyedDecodingContainer()
{
  return &unk_1ECA444C0;
}

uint64_t sub_181E36F1C()
{
  outlined consume of _CodingKey(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return MEMORY[0x1F4186498](v0, 41, 7);
}

uint64_t sub_181E36F5C()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t protocol witness for SingleValueDecodingContainer.decode<A>(_:) in conformance __PlistDictionaryDecoder@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for _PlistDecoderEntryPointProtocol.decode<A>(_:) in conformance __PlistDictionaryDecoder(a1, a2, a3);
}

uint64_t _CalendarICU.firstWeekday.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)(&v3);
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v3;
}

uint64_t _CalendarICU.preferredFirstWeekday.getter()
{
  void (*v5)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  char v8;
  void v10[18];
  unsigned char v11[144];
  unsigned char v12[48];
  uint64_t v13;

  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 104);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 112);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
    swift_unknownObjectRetain();
    v5(v10, ObjectType, v3);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v10, (uint64_t)v11, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v12, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v12) == 1) {
      return 0;
    }
    uint64_t v6 = v13;
    swift_bridgeObjectRetain();
    outlined release of LocalePreferences?((uint64_t)v11);
    if (!v6)
    {
      return 0;
    }
    else
    {
      if (*(void *)(v6 + 16)
        && (uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(v1 + 24)), (v8 & 1) != 0))
      {
        uint64_t v2 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
      }
      else
      {
        uint64_t v2 = 0;
      }
      swift_bridgeObjectRelease();
    }
  }
  return v2;
}

uint64_t _CalendarICU.minimumDaysInFirstWeek.getter()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)(&v3);
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v3;
}

uint64_t _CalendarICU.preferredMinimumDaysInFirstweek.getter()
{
  void (*v5)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  char v8;
  void v10[18];
  unsigned char v11[144];
  unsigned char v12[56];
  uint64_t v13;

  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 104);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 112);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
    swift_unknownObjectRetain();
    v5(v10, ObjectType, v3);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v10, (uint64_t)v11, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v11, (uint64_t)v12, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v12) == 1) {
      return 0;
    }
    uint64_t v6 = v13;
    swift_bridgeObjectRetain();
    outlined release of LocalePreferences?((uint64_t)v11);
    if (!v6)
    {
      return 0;
    }
    else
    {
      if (*(void *)(v6 + 16)
        && (uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(v1 + 24)), (v8 & 1) != 0))
      {
        uint64_t v2 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
      }
      else
      {
        uint64_t v2 = 0;
      }
      swift_bridgeObjectRelease();
    }
  }
  return v2;
}

uint64_t _CalendarICU.hash(into:)(uint64_t a1)
{
  void (*v15)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char v18;
  Swift::UInt v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char v25;
  Swift::UInt v26;
  Swift::UInt v28;
  void v29[18];
  unsigned char v30[144];
  unsigned char v31[48];
  uint64_t v32;
  uint64_t v33;

  uint64_t v2 = v1;
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v28 = *(unsigned __int8 *)(v1 + 24);
  Hasher._combine(_:)(v28);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 112);
  swift_unknownObjectRetain();
  v7(a1, ObjectType, v5);
  swift_unknownObjectRelease();
  if (*(unsigned char *)(v1 + 64) == 1) {
    Swift::UInt Attribute = (int)ucal_getAttribute();
  }
  else {
    Swift::UInt Attribute = *(void *)(v1 + 56);
  }
  Hasher._combine(_:)(Attribute);
  if (*(unsigned char *)(v1 + 80) == 1) {
    Swift::UInt v9 = (int)ucal_getAttribute();
  }
  else {
    Swift::UInt v9 = *(void *)(v1 + 72);
  }
  Hasher._combine(_:)(v9);
  if (*(void *)(v1 + 104))
  {
    uint64_t v10 = *(void *)(v1 + 112);
    uint64_t v11 = swift_getObjectType();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v10 + 64);
    swift_unknownObjectRetain();
    v12(v11, v10);
    swift_unknownObjectRelease();
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v1 + 104))
  {
    uint64_t v13 = *(void *)(v1 + 112);
    uint64_t v14 = swift_getObjectType();
    uint64_t v15 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v13 + 464);
    swift_unknownObjectRetain();
    v15(v29, v14, v13);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)v30, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)v31, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v31) != 1)
    {
      uint64_t v16 = v32;
      swift_bridgeObjectRetain();
      outlined release of LocalePreferences?((uint64_t)v30);
      if (v16)
      {
        if (*(void *)(v16 + 16))
        {
          uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
          if (v18)
          {
            uint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
            swift_bridgeObjectRelease();
            Hasher._combine(_:)(1u);
            Hasher._combine(_:)(v19);
            if (!*(void *)(v2 + 104)) {
              goto LABEL_24;
            }
            goto LABEL_18;
          }
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  Hasher._combine(_:)(0);
  if (!*(void *)(v2 + 104))
  {
LABEL_24:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_18:
  uint64_t v20 = *(void *)(v2 + 112);
  uint64_t v21 = swift_getObjectType();
  uint64_t v22 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v20 + 464);
  swift_unknownObjectRetain();
  v22(v29, v21, v20);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)v30, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)v31, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v31) == 1) {
    goto LABEL_24;
  }
  char v23 = v33;
  swift_bridgeObjectRetain();
  outlined release of LocalePreferences?((uint64_t)v30);
  if (!v23) {
    goto LABEL_24;
  }
  if (!*(void *)(v23 + 16) || (uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v28), (v25 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  uint64_t v26 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v26);
LABEL_25:
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  return swift_release();
}

NSCalendar __swiftcall _CalendarICU.bridgeToNSCalendar()()
{
  uint64_t v1 = lazy protocol witness table accessor for type _CalendarICU and conformance _CalendarICU((unint64_t *)&lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU);
  uint64_t v2 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  uint64_t v3 = (char *)objc_allocWithZone(v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 32) = 0;
  *(void *)(v4 + 16) = v0;
  *(void *)(v4 + 24) = v1;
  *(void *)&v3[OBJC_IVAR____NSSwiftCalendar__lock] = v4;
  uint64_t v5 = *MEMORY[0x1E4F1C318];
  v7.receiver = v3;
  v7.super_class = v2;
  swift_retain();
  result.super.isa = (Class)objc_msgSendSuper2(&v7, sel_initWithCheckedCalendarIdentifier_, v5);
  if (!result.super.isa) {
    __break(1u);
  }
  return result;
}

uint64_t _CalendarICU.minimumRange(of:)(unsigned char *a1)
{
  uint64_t v2 = 0;
  switch(*a1)
  {
    case 4:
      return v2;
    case 5:
    case 6:
      uint64_t v2 = 0;
      break;
    case 7:
      uint64_t v2 = 1;
      break;
    case 9:
      uint64_t v2 = 1;
      break;
    case 0xD:
      uint64_t v2 = 0;
      break;
    case 0xE:
    case 0xF:
      uint64_t v2 = 0;
      break;
    default:
      uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
      MEMORY[0x1F4188790](a1);
      MEMORY[0x1F4188790](v4);
      swift_retain();
      os_unfair_lock_lock(v3 + 4);
      partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)((uint64_t)&v6);
      os_unfair_lock_unlock(v3 + 4);
      swift_release();
      uint64_t v2 = v6;
      break;
  }
  return v2;
}

uint64_t closure #1 in _CalendarICU.minimumRange(of:)@<X0>(char a1@<W2>, uint64_t a2@<X8>)
{
  int Limit = ucal_getLimit();
  uint64_t result = ucal_getLimit();
  if (a1 != 2)
  {
LABEL_6:
    int v7 = result + 1;
    if (!__OFADD__(result, 1))
    {
      if (v7 >= Limit)
      {
        uint64_t v6 = Limit;
        goto LABEL_9;
      }
LABEL_13:
      __break(1u);
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  LODWORD(v6) = Limit + 1;
  if (__OFADD__(Limit, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  int v7 = result + 2;
  if (__OFADD__(result, 2))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v6 = (int)v6;
  if (v7 < (int)v6)
  {
    __break(1u);
    goto LABEL_6;
  }
LABEL_9:
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

uint64_t _CalendarICU.maximumRange(of:)()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)((uint64_t)&v3);
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v3;
}

uint64_t _CalendarICU._locked_maximumRange(of:)(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = 0;
  switch(v1)
  {
    case 4:
      return result;
    case 5:
    case 6:
      return 0;
    case 7:
      return 1;
    case 9:
      return 1;
    case 13:
      return 0;
    case 14:
    case 15:
      return 0;
    default:
      int Limit = ucal_getLimit();
      int v4 = ucal_getLimit();
      if (v1 != 2)
      {
        if (!__OFADD__(v4, 1))
        {
          if (v4 + 1 >= Limit) {
            return Limit;
          }
LABEL_21:
          __break(1u);
        }
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      int v5 = Limit + 1;
      if (__OFADD__(Limit, 1))
      {
        __break(1u);
        goto LABEL_18;
      }
      int v6 = v4 + 2;
      if (__OFADD__(v4, 2))
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      uint64_t result = v5;
      if (v6 < v5)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      return result;
  }
}

Swift::Int _CalendarICU._locked_algorithmA(smaller:larger:at:)(char *a1, char *a2, double *a3)
{
  char v3 = *a1;
  char v4 = *a2;
  double v5 = *a3;
  char v11 = *a2;
  double v10 = v5;
  _CalendarICU._locked_dateInterval(of:at:)(&v11, &v10, (uint64_t)v12);
  if (v13) {
    goto LABEL_6;
  }
  double time = v12[0]._time;
  double v6 = v12[1]._time;
  LOBYTE(v10) = v3;
  char v11 = v4;
  v12[0]._double time = v12[0]._time + 0.1;
  Swift::Int_optional v14 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v10, (Foundation::Calendar::Component)&v11, v12[0]);
  if (v14.is_nil
    || (Swift::Int value = v14.value,
        LOBYTE(v10) = v3,
        char v11 = v4,
        v12[0]._double time = v6 + time + -0.1,
        Swift::Int_optional v15 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v10, (Foundation::Calendar::Component)&v11, v12[0]), v15.is_nil))
  {
LABEL_6:
    Swift::Int value = 0;
  }
  else if (v15.value >= value)
  {
    if (__OFADD__(v15.value, 1))
    {
      __break(1u);
    }
    else if (v15.value + 1 >= value)
    {
      goto LABEL_7;
    }
    __break(1u);
    return v15.value;
  }
LABEL_7:
  v15.Swift::Int value = value;
  return v15.value;
}

void _CalendarICU._locked_dateInterval(of:at:)(unsigned char *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  double v6 = *a2;
  if (*a2 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  double v7 = fmax(v6, -2.11845067e11);
  switch(*a1)
  {
    case 1:
    case 2:
    case 3:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x11:
      break;
    case 4:
      uint64_t v18 = *(void *)(v3 + 48);
      uint64_t ObjectType = swift_getObjectType();
      double v25 = v7;
      uint64_t v20 = *(uint64_t (**)(void, void, void))(v18 + 40);
      swift_unknownObjectRetain();
      uint64_t v21 = v20(&v25, ObjectType, v18);
      swift_unknownObjectRelease();
      *(void *)(a3 + 8) = 0x40AC200000000000;
      double v22 = floor((v7 + (double)v21) / 3600.0) * 3600.0 - (double)v21;
      goto LABEL_24;
    case 5:
      *(void *)(a3 + 8) = 0x404E000000000000;
      double v22 = floor(v7 / 60.0) * 60.0;
LABEL_24:
      *(double *)a3 = v22;
      *(unsigned char *)(a3 + 16) = 0;
      return;
    case 6:
      *(double *)a3 = floor(v7);
      uint64_t v12 = 0x3FF0000000000000;
      goto LABEL_27;
    case 7:
    case 8:
      int v5 = 3;
      break;
    case 0xD:
      *(double *)a3 = floor(v7 * 1000000000.0) * 0.000000001;
      uint64_t v12 = 0x3E112E0BE826D695;
LABEL_27:
      *(void *)(a3 + 8) = v12;
      *(unsigned char *)(a3 + 16) = 0;
      return;
    case 0xE:
    case 0xF:
    case 0x10:
      goto LABEL_50;
    default:
      switch(*(unsigned char *)(v3 + 24))
      {
        case 1:
          if (v7 < -8.02498752e10) {
            goto LABEL_50;
          }
          long long v17 = xmmword_182206730;
          goto LABEL_58;
        case 2:
          if (v7 < -1.46325744e11) {
            goto LABEL_50;
          }
          goto LABEL_48;
        case 3:
          if (v7 >= -5.41625184e10) {
            long long v17 = xmmword_182206740;
          }
          else {
            long long v17 = xmmword_182206750;
          }
          goto LABEL_58;
        case 4:
          if (v7 < -2.36439216e11) {
            goto LABEL_50;
          }
          if (v7 >= -6.2872416e10) {
            long long v17 = xmmword_1822066B0;
          }
          else {
            long long v17 = xmmword_1822066C0;
          }
          goto LABEL_58;
        case 5:
          if (v7 < -2.36439216e11) {
            goto LABEL_50;
          }
          long long v17 = xmmword_1822066D0;
          goto LABEL_58;
        case 6:
          if (v7 < -1.81778083e11) {
            goto LABEL_50;
          }
          long long v17 = xmmword_182206700;
          goto LABEL_58;
        case 8:
          if (v7 < -6.06455424e10) {
            goto LABEL_50;
          }
          long long v17 = xmmword_1822066E0;
          goto LABEL_58;
        case 9:
        case 0xE:
        case 0xF:
          if (v7 < -4.34999808e10) {
            goto LABEL_50;
          }
          long long v17 = xmmword_182206720;
          goto LABEL_58;
        case 0xA:
          if (v7 < -4.34998944e10) {
            goto LABEL_50;
          }
          long long v17 = xmmword_182206710;
          goto LABEL_58;
        case 0xB:
          if (v7 < -4.27909824e10) {
            goto LABEL_50;
          }
LABEL_48:
          int v5 = 0;
          goto LABEL_4;
        case 0xC:
          if (v7 < -4.3510176e10) {
            goto LABEL_50;
          }
          long long v17 = xmmword_1822066F0;
LABEL_58:
          *(_OWORD *)a3 = v17;
          *(unsigned char *)(a3 + 16) = 0;
          return;
        case 0xD:
          if (v7 >= -2808691200.0) {
            long long v17 = xmmword_182206760;
          }
          else {
            long long v17 = xmmword_182206770;
          }
          goto LABEL_58;
        default:
          if (v7 >= -6.3113904e10) {
            long long v17 = xmmword_1822051E0;
          }
          else {
            long long v17 = xmmword_1822051F0;
          }
          goto LABEL_58;
      }
  }
LABEL_4:
  LOBYTE(v23) = v5;
  double v25 = v7;
  _CalendarICU._locked_setToFirstInstant(of:at:)((unsigned __int8 *)&v23);
  int v24 = 0;
  ucal_getMillis();
  double v9 = v8;
  double v10 = v8 / 1000.0 + -978307200.0;
  switch(v5)
  {
    case 0:
      ucal_add();
      ucal_getMillis();
      if (v11 != v9) {
        goto LABEL_12;
      }
      *(double *)a3 = v10;
      uint64_t v12 = 0x4290000000000000;
      goto LABEL_27;
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
    case 17:
      ucal_add();
      goto LABEL_12;
    case 9:
      ucal_add();
      if (ucal_get() == 12)
      {
        ucal_add();
        int v13 = ucal_get();
        if (v13 != ucal_getLimit()) {
          ucal_set();
        }
      }
      goto LABEL_12;
    default:
LABEL_12:
      ucal_getLimit();
      ucal_set();
      ucal_getLimit();
      ucal_set();
      ucal_getLimit();
      ucal_set();
      ucal_set();
      int v24 = 0;
      ucal_getMillis();
      double v15 = v14 / 1000.0 + -978307200.0;
      double v23 = v15;
      _CalendarICU._locked_timeZoneTransitionInterval(at:)(&v23, (uint64_t)&v25);
      if ((v27 & 1) == 0)
      {
        if (v15 - v26 >= v10)
        {
          double v16 = v15 - v26 - v10;
          goto LABEL_18;
        }
        __break(1u);
LABEL_60:
        __break(1u);
      }
      if (v10 < v15)
      {
        if (v15 >= v10)
        {
          double v16 = v15 - v10;
LABEL_18:
          *(double *)a3 = v10;
          *(double *)(a3 + 8) = v16;
          *(unsigned char *)(a3 + 16) = 0;
          return;
        }
        goto LABEL_60;
      }
LABEL_50:
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(unsigned char *)(a3 + 16) = 1;
      return;
  }
}

Swift::Int_optional __swiftcall _CalendarICU._locked_ordinality(of:in:for:)(Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  Swift::Int value = 0;
  uint64_t v183 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 1;
  int v9 = *(unsigned __int8 *)of;
  double v10 = *v3;
  switch(*(unsigned char *)in)
  {
    case 0:
      switch(*(unsigned char *)of)
      {
        case 1:
        case 0xC:
          goto LABEL_339;
        case 2:
          unsigned __int8 v180 = 0;
          double v178 = v10;
          _CalendarICU._locked_start(of:at:)(&v180, &v178, (uint64_t)&v181);
          if (v182) {
            goto LABEL_331;
          }
          double time = v181._time;
          LOBYTE(v181._time) = 3;
          uint64_t v138 = _CalendarICU._locked_maximumRange(of:)((unsigned __int8 *)&v181);
          if (v140)
          {
            Swift::Int value = 0;
            LOBYTE(v8) = 0;
            goto LABEL_400;
          }
          uint64_t v141 = v139 - v138;
          if (__OFSUB__(v139, v138)) {
            goto LABEL_518;
          }
          BOOL v54 = __OFADD__(v141, 1);
          uint64_t v142 = v141 + 1;
          if (v54) {
            goto LABEL_519;
          }
          double v143 = floor((v10 - time) / 86400.0 / (double)v142 * 0.96875);
          if ((~*(void *)&v143 & 0x7FF0000000000000) == 0) {
            goto LABEL_520;
          }
          if (v143 <= -9.22337204e18) {
            goto LABEL_521;
          }
          if (v143 >= 9.22337204e18) {
            goto LABEL_532;
          }
          double v144 = (floor(v10) + 978307200.0) * 1000.0;
          if ((uint64_t)v143 <= 10) {
            uint64_t v145 = 0;
          }
          else {
            uint64_t v145 = (uint64_t)v143 - 10;
          }
          LOBYTE(v8) = 0;
          while (1)
          {
            Swift::Int value = v145 + 1;
            if (__OFADD__(v145, 1)) {
              break;
            }
            LODWORD(v181._time) = 0;
            MEMORY[0x1853098F0](*(void *)(v4 + 32));
            ucal_setMillis();
            _CalendarICU._locked_add(_:amount:wrap:status:)(2, ++v145, 0);
            if (v146 > v144) {
              goto LABEL_400;
            }
          }
LABEL_403:
          __break(1u);
          break;
        case 3:
          unsigned __int8 v180 = 0;
          double v178 = v10;
          _CalendarICU._locked_start(of:at:)(&v180, &v178, (uint64_t)&v181);
          double v147 = v181._time;
          char v148 = v182;
          LODWORD(v181._time) = 0;
          MEMORY[0x1853098F0](*(void *)(v4 + 32));
          ucal_setMillis();
          if (v148) {
            goto LABEL_331;
          }
          a3._double time = floor((v10 - v147) / 86400.0);
          if ((~*(void *)&a3._time & 0x7FF0000000000000) == 0) {
            goto LABEL_508;
          }
          if (a3._time <= -9.22337204e18) {
            goto LABEL_509;
          }
          if (a3._time >= 9.22337204e18) {
            goto LABEL_510;
          }
          Swift::Int value = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_312:
          LOBYTE(v178) = 3;
          unsigned __int8 v180 = 0;
          v181._double time = v10;
          Swift::Int_optional v215 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v178, (Foundation::Calendar::Component)&v180, a3);
          Swift::Int value = v215.value;
          if (v215.is_nil) {
            goto LABEL_400;
          }
          Swift::Int v149 = v215.value - 1;
          if (__OFSUB__(v215.value, 1)) {
            goto LABEL_511;
          }
          if (v149 > 0x555555555555554) {
            goto LABEL_331;
          }
          LODWORD(v181._time) = 0;
          uint64_t v150 = 24 * v149;
          if ((unsigned __int128)(v149 * (__int128)24) >> 64 != (24 * v149) >> 63) {
            goto LABEL_522;
          }
          int v151 = ucal_get();
          uint64_t v152 = v150 + v151;
          if (__OFADD__(v150, v151)) {
            goto LABEL_523;
          }
          Swift::Int value = v152 + 1;
          if (!__OFADD__(v152, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_320:
          LOBYTE(v178) = 4;
          unsigned __int8 v180 = 0;
          v181._double time = v10;
          Swift::Int_optional v216 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v178, (Foundation::Calendar::Component)&v180, a3);
          Swift::Int value = v216.value;
          if (v216.is_nil) {
            goto LABEL_400;
          }
          Swift::Int v153 = v216.value - 1;
          if (__OFSUB__(v216.value, 1)) {
            goto LABEL_512;
          }
          if (v153 > 0x222222222222221) {
            goto LABEL_331;
          }
          LODWORD(v181._time) = 0;
          uint64_t v154 = 60 * v153;
          if ((unsigned __int128)(v153 * (__int128)60) >> 64 != (60 * v153) >> 63) {
            goto LABEL_524;
          }
          int v155 = ucal_get();
          uint64_t v156 = v154 + v155;
          if (__OFADD__(v154, v155)) {
            goto LABEL_525;
          }
          Swift::Int value = v156 + 1;
          if (!__OFADD__(v156, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_328:
          LOBYTE(v178) = 5;
          unsigned __int8 v180 = 0;
          v181._double time = v10;
          Swift::Int_optional v217 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v178, (Foundation::Calendar::Component)&v180, a3);
          Swift::Int value = v217.value;
          if (v217.is_nil) {
            goto LABEL_400;
          }
          Swift::Int v157 = v217.value - 1;
          if (__OFSUB__(v217.value, 1)) {
            goto LABEL_513;
          }
          if (v157 > 0x222222222222221) {
            goto LABEL_331;
          }
          LODWORD(v181._time) = 0;
          uint64_t v173 = 60 * v157;
          if ((unsigned __int128)(v157 * (__int128)60) >> 64 != (60 * v157) >> 63) {
            goto LABEL_529;
          }
          int v174 = ucal_get();
          uint64_t v175 = v173 + v174;
          if (__OFADD__(v173, v174)) {
            goto LABEL_530;
          }
          Swift::Int value = v175 + 1;
          if (!__OFADD__(v175, 1)) {
            goto LABEL_399;
          }
          goto LABEL_531;
        case 4:
          goto LABEL_312;
        case 5:
          goto LABEL_320;
        case 6:
          goto LABEL_328;
        case 7:
        case 8:
          unsigned __int8 v180 = 0;
          double v178 = v10;
          _CalendarICU._locked_start(of:at:)(&v180, &v178, (uint64_t)&v181);
          if (v182) {
            goto LABEL_331;
          }
          double v12 = v181._time;
          double v13 = (floor(v10) + 978307200.0) * 1000.0;
          double v14 = (floor(v181._time) + 978307200.0) * 1000.0;
          LODWORD(v181._time) = 0;
          MEMORY[0x1853098F0](*(void *)(v4 + 32));
          ucal_setMillis();
          int v15 = ucal_get();
          MEMORY[0x1853098F0](*(void *)(v4 + 32));
          ucal_setMillis();
          for (; ucal_get() != v15; double v14 = v14 + 86400000.0)
            _CalendarICU._locked_add(_:amount:wrap:status:)(5, 1, 0);
          double v16 = floor((v10 - v12) / 86400.0 / 7.0);
          if ((~*(void *)&v16 & 0x7FF0000000000000) == 0) {
            goto LABEL_444;
          }
          if (v16 <= -9.22337204e18) {
            goto LABEL_445;
          }
          if (v16 >= 9.22337204e18) {
            goto LABEL_446;
          }
          if ((uint64_t)v16 <= 10) {
            uint64_t v17 = 0;
          }
          else {
            uint64_t v17 = (uint64_t)v16 - 10;
          }
          while (1)
          {
            Swift::Int value = v17 + 1;
            if (__OFADD__(v17, 1)) {
              break;
            }
            LODWORD(v181._time) = 0;
            MEMORY[0x1853098F0](*(void *)(v4 + 32));
            ucal_setMillis();
            _CalendarICU._locked_add(_:amount:wrap:status:)(3, ++v17, 0);
            if (v18 >= v13) {
              goto LABEL_399;
            }
          }
          __break(1u);
          goto LABEL_402;
        case 9:
          LOBYTE(v178) = 1;
          unsigned __int8 v180 = 0;
          v181._double time = v10;
          Swift::Int_optional v218 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v178, (Foundation::Calendar::Component)&v180, a3);
          Swift::Int value = v218.value;
          if (v218.is_nil) {
            goto LABEL_400;
          }
          LOBYTE(v178) = 9;
          unsigned __int8 v180 = 1;
          v181._double time = v10;
          Swift::Int_optional v219 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v178, (Foundation::Calendar::Component)&v180, v158);
          if (v219.is_nil)
          {
            Swift::Int value = v219.value;
            goto LABEL_400;
          }
          Swift::Int v159 = value - 1;
          if (__OFSUB__(value, 1)) {
            goto LABEL_526;
          }
          if ((unint64_t)(value - 0x2000000000000001) >> 62 != 3) {
            goto LABEL_527;
          }
          Swift::Int value = v219.value + 4 * v159;
          if (!__OFADD__(v219.value, 4 * v159)) {
            goto LABEL_399;
          }
LABEL_338:
          __break(1u);
LABEL_339:
          LODWORD(v181._time) = 0;
          MEMORY[0x1853098F0](*(void *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
LABEL_340:
          LOBYTE(v8) = 0;
          Swift::Int value = (int)ucal_get();
          goto LABEL_400;
        case 0xA:
        case 0xB:
          unsigned __int8 v180 = 0;
          double v178 = v10;
          _CalendarICU._locked_start(of:at:)(&v180, &v178, (uint64_t)&v181);
          if (v182) {
            goto LABEL_331;
          }
          uint64_t v70 = 0;
          double v71 = v181._time;
          double v72 = (floor(v10) + 978307200.0) * 1000.0;
          LODWORD(v181._time) = 0;
          while (1)
          {
            int v73 = ucal_get();
            uint64_t v74 = *(unsigned char *)(v4 + 64) == 1 ? (int)ucal_getAttribute() : *(void *)(v4 + 56);
            if (v74 == v73) {
              break;
            }
            _CalendarICU._locked_add(_:amount:wrap:status:)(5, 1, 0);
            BOOL v54 = __OFADD__(v70++, 1);
            if (v54) {
              goto LABEL_338;
            }
          }
          if (*(unsigned char *)(v4 + 80) == 1) {
            ucal_getAttribute();
          }
          double v169 = floor((v10 - v71) / 86400.0 / 7.0);
          if ((~*(void *)&v169 & 0x7FF0000000000000) == 0) {
            goto LABEL_447;
          }
          if (v169 <= -9.22337204e18) {
            goto LABEL_448;
          }
          if (v169 >= 9.22337204e18) {
            goto LABEL_449;
          }
          if ((uint64_t)v169 <= 10) {
            uint64_t v170 = 0;
          }
          else {
            uint64_t v170 = (uint64_t)v169 - 109;
          }
          while (1)
          {
            Swift::Int value = v170 + 1;
            if (__OFADD__(v170, 1)) {
              break;
            }
            MEMORY[0x1853098F0](*(void *)(v4 + 32));
            ucal_setMillis();
            _CalendarICU._locked_add(_:amount:wrap:status:)(3, ++v170, 0);
            if (v171 > v72) {
              goto LABEL_399;
            }
          }
LABEL_402:
          __break(1u);
          goto LABEL_403;
        default:
          goto LABEL_331;
      }
      goto LABEL_404;
    case 1:
      Swift::Int value = 0;
      switch(*(unsigned char *)of)
      {
        case 2:
          goto LABEL_31;
        case 3:
        case 0x11:
          LODWORD(v181._time) = 0;
          MEMORY[0x1853098F0](*(void *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          goto LABEL_340;
        case 4:
          LODWORD(v178) = 0;
          unsigned __int8 v180 = 3;
          char v179 = 1;
          v181._double time = v10;
          Swift::Int_optional v211 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
          Swift::Int value = v211.value;
          if (v211.is_nil) {
            goto LABEL_400;
          }
          Swift::Int v120 = v211.value - 1;
          if (__OFSUB__(v211.value, 1)) {
            goto LABEL_494;
          }
          uint64_t v121 = 24 * v120;
          if ((unsigned __int128)(v120 * (__int128)24) >> 64 != (24 * v120) >> 63) {
            goto LABEL_495;
          }
          int v122 = ucal_get();
          uint64_t v123 = v121 + v122;
          if (__OFADD__(v121, v122)) {
            goto LABEL_496;
          }
          Swift::Int value = v123 + 1;
          if (!__OFADD__(v123, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_265:
          LODWORD(v178) = 0;
          unsigned __int8 v180 = 4;
          char v179 = 1;
          v181._double time = v10;
          Swift::Int_optional v212 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
          Swift::Int value = v212.value;
          if (v212.is_nil) {
            goto LABEL_400;
          }
          Swift::Int v124 = v212.value - 1;
          if (__OFSUB__(v212.value, 1)) {
            goto LABEL_497;
          }
          uint64_t v125 = 60 * v124;
          if ((unsigned __int128)(v124 * (__int128)60) >> 64 != (60 * v124) >> 63) {
            goto LABEL_498;
          }
          int v126 = ucal_get();
          uint64_t v127 = v125 + v126;
          if (__OFADD__(v125, v126)) {
            goto LABEL_499;
          }
          Swift::Int value = v127 + 1;
          if (!__OFADD__(v127, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_272:
          LODWORD(v178) = 0;
          unsigned __int8 v180 = 5;
          char v179 = 1;
          v181._double time = v10;
          Swift::Int_optional v213 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
          Swift::Int value = v213.value;
          if (v213.is_nil) {
            goto LABEL_400;
          }
          Swift::Int v128 = v213.value - 1;
          if (__OFSUB__(v213.value, 1)) {
            goto LABEL_500;
          }
          uint64_t v129 = 60 * v128;
          if ((unsigned __int128)(v128 * (__int128)60) >> 64 != (60 * v128) >> 63) {
            goto LABEL_501;
          }
          int v130 = ucal_get();
          uint64_t v131 = v129 + v130;
          if (__OFADD__(v129, v130)) {
            goto LABEL_502;
          }
          Swift::Int value = v131 + 1;
          if (!__OFADD__(v131, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_279:
          LODWORD(v181._time) = 0;
          MEMORY[0x1853098F0](*(void *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          unsigned int v132 = ucal_get();
          if (*(unsigned char *)(v4 + 24) != 6)
          {
            if (v132 <= 0xC)
            {
              LOBYTE(v8) = 0;
              uint64_t v133 = &outlined read-only object #1 of _CalendarICU._locked_ordinality(of:in:for:);
              goto LABEL_365;
            }
LABEL_507:
            __break(1u);
LABEL_508:
            __break(1u);
LABEL_509:
            __break(1u);
LABEL_510:
            __break(1u);
LABEL_511:
            __break(1u);
LABEL_512:
            __break(1u);
LABEL_513:
            __break(1u);
LABEL_514:
            __break(1u);
          }
          if (v132 <= 0xC)
          {
            LOBYTE(v8) = 0;
            uint64_t v133 = &outlined read-only object #0 of _CalendarICU._locked_ordinality(of:in:for:);
LABEL_365:
            Swift::Int value = v133[v132 + 4];
            goto LABEL_400;
          }
          break;
        case 5:
          goto LABEL_265;
        case 6:
          goto LABEL_272;
        case 7:
        case 8:
          goto LABEL_134;
        case 9:
          goto LABEL_279;
        case 0xB:
          LODWORD(v181._time) = 0;
          MEMORY[0x1853098F0](*(void *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          int v134 = ucal_get();
          ucal_set();
          int v135 = ucal_get();
          if (*(unsigned char *)(v4 + 64) == 1) {
            uint64_t Attribute = (int)ucal_getAttribute();
          }
          else {
            uint64_t Attribute = *(void *)(v4 + 56);
          }
          if (*(unsigned char *)(v4 + 80) == 1) {
            uint64_t v162 = (int)ucal_getAttribute();
          }
          else {
            uint64_t v162 = *(void *)(v4 + 72);
          }
          uint64_t v163 = v134 + 7;
          BOOL v54 = __OFSUB__(v163, v162);
          uint64_t v164 = v163 - v162;
          if (v54) {
            goto LABEL_439;
          }
          BOOL v54 = __OFADD__(v162, v135);
          uint64_t v165 = v162 + v135;
          if (v54) {
            goto LABEL_440;
          }
          BOOL v54 = __OFSUB__(v165, Attribute);
          uint64_t v166 = v165 - Attribute;
          if (v54) {
            goto LABEL_441;
          }
          if (__OFADD__(v166, 6)) {
            goto LABEL_442;
          }
          uint64_t v167 = (v166 + 6) % 7;
          BOOL v54 = __OFADD__(v164, v167);
          uint64_t v168 = v164 + v167;
          if (v54) {
            goto LABEL_443;
          }
          Swift::Int value = v168 / 7;
          LODWORD(v181._time) = 0;
          MEMORY[0x1853098F0](*(void *)(v4 + 32));
          ucal_setMillis();
          LOBYTE(v8) = 0;
          goto LABEL_400;
        case 0xD:
          LOBYTE(v178) = 6;
          unsigned __int8 v180 = 1;
          v181._double time = v10;
          Swift::Int_optional v214 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v178, (Foundation::Calendar::Component)&v180, a3);
          Swift::Int value = v214.value;
          if (v214.is_nil) {
            goto LABEL_400;
          }
          a3._double time = (v10 - floor(v10) + (double)v214.value + -1.0) * 1000000000.0;
          if ((~*(void *)&a3._time & 0x7FF0000000000000) == 0) {
            goto LABEL_504;
          }
          if (a3._time <= -9.22337204e18) {
            goto LABEL_505;
          }
          if (a3._time >= 9.22337204e18) {
            goto LABEL_506;
          }
          Swift::Int value = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1)) {
            goto LABEL_399;
          }
          goto LABEL_338;
        default:
          goto LABEL_400;
      }
      goto LABEL_503;
    case 2:
      Swift::Int value = 0;
      switch(*(unsigned char *)of)
      {
        case 3:
          goto LABEL_339;
        case 4:
          LODWORD(v178) = 0;
          unsigned __int8 v180 = 3;
          char v179 = 2;
          v181._double time = v10;
          Swift::Int_optional v198 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
          Swift::Int value = v198.value;
          if (v198.is_nil) {
            goto LABEL_400;
          }
          Swift::Int v75 = v198.value - 1;
          if (__OFSUB__(v198.value, 1)) {
            goto LABEL_450;
          }
          uint64_t v76 = 24 * v75;
          if ((unsigned __int128)(v75 * (__int128)24) >> 64 != (24 * v75) >> 63) {
            goto LABEL_451;
          }
          int v77 = ucal_get();
          uint64_t v78 = v76 + v77;
          if (__OFADD__(v76, v77)) {
            goto LABEL_452;
          }
          Swift::Int value = v78 + 1;
          if (!__OFADD__(v78, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_155:
          LODWORD(v178) = 0;
          unsigned __int8 v180 = 4;
          char v179 = 2;
          v181._double time = v10;
          Swift::Int_optional v199 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
          Swift::Int value = v199.value;
          if (v199.is_nil) {
            goto LABEL_400;
          }
          Swift::Int v79 = v199.value - 1;
          if (__OFSUB__(v199.value, 1)) {
            goto LABEL_453;
          }
          uint64_t v80 = 60 * v79;
          if ((unsigned __int128)(v79 * (__int128)60) >> 64 != (60 * v79) >> 63) {
            goto LABEL_454;
          }
          int v81 = ucal_get();
          uint64_t v82 = v80 + v81;
          if (__OFADD__(v80, v81)) {
            goto LABEL_455;
          }
          Swift::Int value = v82 + 1;
          if (!__OFADD__(v82, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_162:
          LODWORD(v178) = 0;
          unsigned __int8 v180 = 5;
          char v179 = 2;
          v181._double time = v10;
          Swift::Int_optional v200 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
          Swift::Int value = v200.value;
          if (v200.is_nil) {
            goto LABEL_400;
          }
          Swift::Int v83 = v200.value - 1;
          if (__OFSUB__(v200.value, 1)) {
            goto LABEL_456;
          }
          uint64_t v84 = 60 * v83;
          if ((unsigned __int128)(v83 * (__int128)60) >> 64 != (60 * v83) >> 63) {
            goto LABEL_457;
          }
          int v85 = ucal_get();
          uint64_t v86 = v84 + v85;
          if (__OFADD__(v84, v85)) {
            goto LABEL_458;
          }
          Swift::Int value = v86 + 1;
          if (!__OFADD__(v86, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_169:
          LODWORD(v181._time) = 0;
          MEMORY[0x1853098F0](*(void *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          break;
        case 5:
          goto LABEL_155;
        case 6:
          goto LABEL_162;
        case 7:
        case 8:
          LOBYTE(v178) = 3;
          unsigned __int8 v180 = 2;
          v181._double time = v10;
          Swift::Int_optional v184 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v178, (Foundation::Calendar::Component)&v180, a3);
          Swift::Int value = v184.value;
          if (v184.is_nil) {
            goto LABEL_400;
          }
          if (__OFADD__(v184.value, 6)) {
            goto LABEL_438;
          }
          LOBYTE(v8) = 0;
          Swift::Int value = (v184.value + 6) / 7;
          goto LABEL_400;
        case 0xA:
          goto LABEL_169;
        case 0xD:
          LOBYTE(v178) = 6;
          unsigned __int8 v180 = 2;
          v181._double time = v10;
          Swift::Int_optional v201 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v178, (Foundation::Calendar::Component)&v180, a3);
          Swift::Int value = v201.value;
          if (v201.is_nil) {
            goto LABEL_400;
          }
          double v87 = (v10 - floor(v10) + (double)v201.value + -1.0) * 1000000000.0;
          if ((~*(void *)&v87 & 0x7FF0000000000000) == 0) {
            goto LABEL_459;
          }
          if (v87 <= -9.22337204e18) {
            goto LABEL_460;
          }
          if (v87 >= 9.22337204e18) {
            goto LABEL_461;
          }
          Swift::Int value = (uint64_t)v87 + 1;
          if (!__OFADD__((uint64_t)v87, 1)) {
            goto LABEL_399;
          }
          __break(1u);
          goto LABEL_177;
        default:
          goto LABEL_400;
      }
      goto LABEL_340;
    case 3:
    case 7:
    case 0x11:
      Swift::Int value = 0;
      switch(*(unsigned char *)of)
      {
        case 4:
          goto LABEL_31;
        case 5:
          LODWORD(v178) = 0;
          unsigned __int8 v180 = 4;
          char v179 = 3;
          v181._double time = v10;
          Swift::Int_optional v187 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
          Swift::Int value = v187.value;
          if (v187.is_nil) {
            goto LABEL_400;
          }
          Swift::Int v33 = v187.value - 1;
          if (__OFSUB__(v187.value, 1)) {
            goto LABEL_408;
          }
          uint64_t v34 = 60 * v33;
          if ((unsigned __int128)(v33 * (__int128)60) >> 64 != (60 * v33) >> 63) {
            goto LABEL_411;
          }
          int v35 = ucal_get();
          uint64_t v36 = v34 + v35;
          if (__OFADD__(v34, v35)) {
            goto LABEL_412;
          }
          Swift::Int value = v36 + 1;
          if (!__OFADD__(v36, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_56:
          LODWORD(v178) = 0;
          unsigned __int8 v180 = 5;
          char v179 = 3;
          v181._double time = v10;
          Swift::Int_optional v188 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
          Swift::Int value = v188.value;
          if (v188.is_nil) {
            goto LABEL_400;
          }
          Swift::Int v37 = v188.value - 1;
          if (__OFSUB__(v188.value, 1)) {
            goto LABEL_409;
          }
          uint64_t v38 = 60 * v37;
          if ((unsigned __int128)(v37 * (__int128)60) >> 64 != (60 * v37) >> 63) {
            goto LABEL_413;
          }
          int v39 = ucal_get();
          uint64_t v40 = v38 + v39;
          if (__OFADD__(v38, v39)) {
            goto LABEL_414;
          }
          Swift::Int value = v40 + 1;
          if (!__OFADD__(v40, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_63:
          LOBYTE(v178) = 6;
          unsigned __int8 v180 = 3;
          v181._double time = v10;
          Swift::Int_optional v189 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v178, (Foundation::Calendar::Component)&v180, a3);
          Swift::Int value = v189.value;
          if (v189.is_nil) {
            goto LABEL_400;
          }
          a3._double time = (v10 - floor(v10) + (double)v189.value + -1.0) * 1000000000.0;
          if ((~*(void *)&a3._time & 0x7FF0000000000000) == 0) {
            goto LABEL_410;
          }
          if (a3._time <= -9.22337204e18) {
            goto LABEL_415;
          }
          if (a3._time >= 9.22337204e18) {
            goto LABEL_416;
          }
          Swift::Int value = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1)) {
            goto LABEL_399;
          }
          __break(1u);
          break;
        case 6:
          goto LABEL_56;
        case 0xD:
          goto LABEL_63;
        default:
          goto LABEL_400;
      }
      goto LABEL_70;
    case 4:
      if (v9 == 13)
      {
        LOBYTE(v178) = 6;
        unsigned __int8 v180 = 4;
        v181._double time = v10;
        Swift::Int_optional v195 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v178, (Foundation::Calendar::Component)&v180, a3);
        Swift::Int value = v195.value;
        if (v195.is_nil) {
          goto LABEL_400;
        }
        a3._double time = (v10 - floor(v10) + (double)v195.value + -1.0) * 1000000000.0;
        if ((~*(void *)&a3._time & 0x7FF0000000000000) != 0)
        {
          if (a3._time > -9.22337204e18)
          {
            if (a3._time < 9.22337204e18)
            {
              Swift::Int value = (uint64_t)a3._time + 1;
              if (!__OFADD__((uint64_t)a3._time, 1)) {
                goto LABEL_399;
              }
              __break(1u);
              goto LABEL_118;
            }
LABEL_434:
            __break(1u);
LABEL_435:
            __break(1u);
            goto LABEL_436;
          }
        }
        else
        {
LABEL_432:
          __break(1u);
        }
        __break(1u);
        goto LABEL_434;
      }
      if (v9 != 6)
      {
        if (v9 == 5) {
          goto LABEL_31;
        }
        goto LABEL_331;
      }
LABEL_118:
      LODWORD(v178) = 0;
      unsigned __int8 v180 = 5;
      char v179 = 4;
      v181._double time = v10;
      Swift::Int_optional v196 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
      Swift::Int value = v196.value;
      if (v196.is_nil) {
        goto LABEL_400;
      }
      Swift::Int v56 = v196.value - 1;
      if (__OFSUB__(v196.value, 1)) {
        goto LABEL_435;
      }
      uint64_t v57 = 60 * v56;
      if ((unsigned __int128)(v56 * (__int128)60) >> 64 != (60 * v56) >> 63)
      {
LABEL_436:
        __break(1u);
        goto LABEL_437;
      }
      int v58 = ucal_get();
      uint64_t v59 = v57 + v58;
      if (__OFADD__(v57, v58))
      {
LABEL_437:
        __break(1u);
LABEL_438:
        __break(1u);
LABEL_439:
        __break(1u);
LABEL_440:
        __break(1u);
LABEL_441:
        __break(1u);
LABEL_442:
        __break(1u);
LABEL_443:
        __break(1u);
LABEL_444:
        __break(1u);
LABEL_445:
        __break(1u);
LABEL_446:
        __break(1u);
LABEL_447:
        __break(1u);
LABEL_448:
        __break(1u);
LABEL_449:
        __break(1u);
LABEL_450:
        __break(1u);
LABEL_451:
        __break(1u);
LABEL_452:
        __break(1u);
LABEL_453:
        __break(1u);
LABEL_454:
        __break(1u);
LABEL_455:
        __break(1u);
LABEL_456:
        __break(1u);
LABEL_457:
        __break(1u);
LABEL_458:
        __break(1u);
LABEL_459:
        __break(1u);
LABEL_460:
        __break(1u);
LABEL_461:
        __break(1u);
LABEL_462:
        __break(1u);
LABEL_463:
        __break(1u);
LABEL_464:
        __break(1u);
LABEL_465:
        __break(1u);
LABEL_466:
        __break(1u);
LABEL_467:
        __break(1u);
LABEL_468:
        __break(1u);
LABEL_469:
        __break(1u);
LABEL_470:
        __break(1u);
LABEL_471:
        __break(1u);
LABEL_472:
        __break(1u);
LABEL_473:
        __break(1u);
LABEL_474:
        __break(1u);
LABEL_475:
        __break(1u);
LABEL_476:
        __break(1u);
LABEL_477:
        __break(1u);
LABEL_478:
        __break(1u);
LABEL_479:
        __break(1u);
LABEL_480:
        __break(1u);
LABEL_481:
        __break(1u);
LABEL_482:
        __break(1u);
LABEL_483:
        __break(1u);
LABEL_484:
        __break(1u);
LABEL_485:
        __break(1u);
LABEL_486:
        __break(1u);
LABEL_487:
        __break(1u);
LABEL_488:
        __break(1u);
LABEL_489:
        __break(1u);
LABEL_490:
        __break(1u);
LABEL_491:
        __break(1u);
LABEL_492:
        __break(1u);
LABEL_493:
        __break(1u);
LABEL_494:
        __break(1u);
LABEL_495:
        __break(1u);
LABEL_496:
        __break(1u);
LABEL_497:
        __break(1u);
LABEL_498:
        __break(1u);
LABEL_499:
        __break(1u);
LABEL_500:
        __break(1u);
LABEL_501:
        __break(1u);
LABEL_502:
        __break(1u);
LABEL_503:
        __break(1u);
LABEL_504:
        __break(1u);
LABEL_505:
        __break(1u);
LABEL_506:
        __break(1u);
        goto LABEL_507;
      }
      Swift::Int value = v59 + 1;
      if (!__OFADD__(v59, 1)) {
        goto LABEL_399;
      }
      __break(1u);
LABEL_125:
      unsigned __int8 v180 = 9;
      double v178 = v10;
      _CalendarICU._locked_start(of:at:)(&v180, &v178, (uint64_t)&v181);
      if (v182) {
        goto LABEL_331;
      }
      double v60 = v181._time;
      LODWORD(v178) = 0;
      MEMORY[0x1853098F0](*(void *)(v4 + 32));
      double v6 = (floor(v60) + 978307200.0) * 1000.0;
      ucal_setMillis();
      uint64_t v8 = 0;
      do
      {
        int v61 = ucal_get();
        if (*(unsigned char *)(v4 + 64) == 1) {
          uint64_t v62 = (int)ucal_getAttribute();
        }
        else {
          uint64_t v62 = *(void *)(v4 + 56);
        }
        if (v62 == v61)
        {
LABEL_255:
          unsigned __int8 v180 = 11;
          char v179 = 1;
          v181._double time = v6 / 1000.0 + -978307200.0;
          Swift::Int_optional v210 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, v181);
          Swift::Int value = v210.value;
          if (v210.is_nil) {
            goto LABEL_362;
          }
          if (*(unsigned char *)(v4 + 80) == 1) {
            uint64_t v119 = (int)ucal_getAttribute();
          }
          else {
            uint64_t v119 = *(void *)(v4 + 72);
          }
          if (v8 < v119 || (BOOL v54 = __OFSUB__(value, 1), --value, !v54))
          {
            unsigned __int8 v180 = 11;
            char v179 = 1;
            v181._double time = v10;
            Swift::Int_optional v223 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, v118);
            if (v223.is_nil)
            {
LABEL_393:
              LOBYTE(v8) = 1;
              Swift::Int value = v223.value;
              goto LABEL_400;
            }
            Swift::Int v172 = v223.value - value;
            if (!__OFSUB__(v223.value, value))
            {
              Swift::Int value = v172 + 1;
              if (!__OFADD__(v172, 1))
              {
LABEL_399:
                LOBYTE(v8) = 0;
                goto LABEL_400;
              }
              __break(1u);
              goto LABEL_393;
            }
LABEL_517:
            __break(1u);
LABEL_518:
            __break(1u);
LABEL_519:
            __break(1u);
LABEL_520:
            __break(1u);
LABEL_521:
            __break(1u);
LABEL_522:
            __break(1u);
LABEL_523:
            __break(1u);
LABEL_524:
            __break(1u);
LABEL_525:
            __break(1u);
LABEL_526:
            __break(1u);
LABEL_527:
            __break(1u);
            goto LABEL_528;
          }
LABEL_516:
          __break(1u);
          goto LABEL_517;
        }
        _CalendarICU._locked_add(_:amount:wrap:status:)(5, 1, 0);
        double v6 = v63;
        BOOL v54 = __OFADD__(v8++, 1);
      }
      while (!v54);
      __break(1u);
LABEL_134:
      unsigned __int8 v180 = 1;
      double v178 = v10;
      _CalendarICU._locked_start(of:at:)(&v180, &v178, (uint64_t)&v181);
      if (v182) {
        goto LABEL_331;
      }
      double v65 = v181._time;
      LODWORD(v178) = 0;
      unsigned __int8 v180 = 11;
      char v179 = 1;
      v181._double time = v10;
      Swift::Int_optional v197 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, v64);
      Swift::Int v66 = v197.value;
      if (v197.is_nil)
      {
        Swift::Int value = v197.value;
        goto LABEL_400;
      }
      int v67 = ucal_get();
      LODWORD(v178) = 0;
      MEMORY[0x1853098F0](*(void *)(v4 + 32));
      double v68 = (floor(v65) + 978307200.0) * 1000.0;
      ucal_setMillis();
      while (ucal_get() != v67)
      {
        _CalendarICU._locked_add(_:amount:wrap:status:)(5, 1, 0);
        double v68 = v69;
      }
      unsigned __int8 v180 = 11;
      char v179 = 1;
      v181._double time = v68 / 1000.0 + -978307200.0;
      Swift::Int_optional v222 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, v181);
      Swift::Int value = v222.value;
      if (v222.is_nil) {
        goto LABEL_362;
      }
      Swift::Int v161 = v66 - v222.value;
      if (__OFSUB__(v66, v222.value))
      {
LABEL_528:
        __break(1u);
LABEL_529:
        __break(1u);
LABEL_530:
        __break(1u);
LABEL_531:
        __break(1u);
LABEL_532:
        __break(1u);
        JUMPOUT(0x181E3AAC0);
      }
      Swift::Int value = v161 + 1;
      if (!__OFADD__(v161, 1)) {
        goto LABEL_399;
      }
      __break(1u);
LABEL_362:
      LOBYTE(v8) = 1;
LABEL_400:
      Swift::Int v176 = value;
      Swift::Bool v177 = v8;
      result.Swift::Int value = v176;
      result.Swift::Bool is_nil = v177;
      return result;
    case 5:
      if (v9 != 13)
      {
        if (v9 == 6)
        {
LABEL_31:
          LODWORD(v181._time) = 0;
          MEMORY[0x1853098F0](*(void *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          LOBYTE(v8) = 0;
          Swift::Int value = (int)ucal_get() + 1;
          goto LABEL_400;
        }
LABEL_331:
        Swift::Int value = 0;
        goto LABEL_400;
      }
LABEL_70:
      LOBYTE(v178) = 6;
      unsigned __int8 v180 = 5;
      v181._double time = v10;
      Swift::Int_optional v190 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v178, (Foundation::Calendar::Component)&v180, a3);
      Swift::Int value = v190.value;
      if (v190.is_nil) {
        goto LABEL_400;
      }
      a3._double time = (v10 - floor(v10) + (double)v190.value + -1.0) * 1000000000.0;
      if ((~*(void *)&a3._time & 0x7FF0000000000000) == 0) {
        goto LABEL_417;
      }
      if (a3._time <= -9.22337204e18) {
        goto LABEL_418;
      }
      if (a3._time >= 9.22337204e18) {
        goto LABEL_419;
      }
      Swift::Int value = (uint64_t)a3._time + 1;
      if (!__OFADD__((uint64_t)a3._time, 1)) {
        goto LABEL_399;
      }
      __break(1u);
LABEL_77:
      LODWORD(v178) = 0;
      unsigned __int8 v180 = 3;
      char v179 = 11;
      v181._double time = v10;
      Swift::Int_optional v191 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
      Swift::Int value = v191.value;
      if (v191.is_nil) {
        goto LABEL_400;
      }
      Swift::Int v41 = v191.value - 1;
      if (__OFSUB__(v191.value, 1)) {
        goto LABEL_420;
      }
      uint64_t v42 = 24 * v41;
      if ((unsigned __int128)(v41 * (__int128)24) >> 64 != (24 * v41) >> 63) {
        goto LABEL_421;
      }
      int v43 = ucal_get();
      uint64_t v44 = v42 + v43;
      if (__OFADD__(v42, v43)) {
        goto LABEL_422;
      }
      Swift::Int value = v44 + 1;
      if (!__OFADD__(v44, 1)) {
        goto LABEL_399;
      }
      __break(1u);
LABEL_84:
      LODWORD(v178) = 0;
      unsigned __int8 v180 = 4;
      char v179 = 11;
      v181._double time = v10;
      Swift::Int_optional v192 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
      Swift::Int value = v192.value;
      if (v192.is_nil) {
        goto LABEL_400;
      }
      Swift::Int v45 = v192.value - 1;
      if (__OFSUB__(v192.value, 1)) {
        goto LABEL_423;
      }
      uint64_t v46 = 60 * v45;
      if ((unsigned __int128)(v45 * (__int128)60) >> 64 != (60 * v45) >> 63) {
        goto LABEL_424;
      }
      int v47 = ucal_get();
      uint64_t v48 = v46 + v47;
      if (__OFADD__(v46, v47)) {
        goto LABEL_425;
      }
      Swift::Int value = v48 + 1;
      if (!__OFADD__(v48, 1)) {
        goto LABEL_399;
      }
      __break(1u);
LABEL_91:
      LODWORD(v178) = 0;
      unsigned __int8 v180 = 5;
      char v179 = 11;
      v181._double time = v10;
      Swift::Int_optional v193 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
      Swift::Int value = v193.value;
      if (v193.is_nil) {
        goto LABEL_400;
      }
      Swift::Int v49 = v193.value - 1;
      if (__OFSUB__(v193.value, 1)) {
        goto LABEL_426;
      }
      uint64_t v50 = 60 * v49;
      if ((unsigned __int128)(v49 * (__int128)60) >> 64 != (60 * v49) >> 63) {
        goto LABEL_427;
      }
      int v51 = ucal_get();
      uint64_t v52 = v50 + v51;
      if (__OFADD__(v50, v51)) {
        goto LABEL_428;
      }
      Swift::Int value = v52 + 1;
      if (!__OFADD__(v52, 1)) {
        goto LABEL_399;
      }
      __break(1u);
LABEL_98:
      LOBYTE(v178) = 6;
      unsigned __int8 v180 = 11;
      v181._double time = v10;
      Swift::Int_optional v194 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v178, (Foundation::Calendar::Component)&v180, a3);
      Swift::Int value = v194.value;
      if (v194.is_nil) {
        goto LABEL_400;
      }
      double v53 = (v10 - floor(v10) + (double)v194.value + -1.0) * 1000000000.0;
      if ((~*(void *)&v53 & 0x7FF0000000000000) == 0) {
        goto LABEL_429;
      }
      if (v53 <= -9.22337204e18) {
        goto LABEL_430;
      }
      if (v53 < 9.22337204e18)
      {
        Swift::Int value = (uint64_t)v53 + 1;
        if (!__OFADD__((uint64_t)v53, 1)) {
          goto LABEL_399;
        }
        __break(1u);
LABEL_105:
        uint64_t v11 = *(void *)(v4 + 56);
LABEL_106:
        BOOL v54 = __OFSUB__(value, v11);
        uint64_t v55 = value - v11;
        if (!v54)
        {
          if (v55 <= 0) {
            Swift::Int value = v55 + 7;
          }
          else {
            Swift::Int value = v55;
          }
          LOBYTE(v8) = 0;
          goto LABEL_400;
        }
LABEL_404:
        __break(1u);
LABEL_405:
        __break(1u);
LABEL_406:
        __break(1u);
LABEL_407:
        __break(1u);
LABEL_408:
        __break(1u);
LABEL_409:
        __break(1u);
LABEL_410:
        __break(1u);
LABEL_411:
        __break(1u);
LABEL_412:
        __break(1u);
LABEL_413:
        __break(1u);
LABEL_414:
        __break(1u);
LABEL_415:
        __break(1u);
LABEL_416:
        __break(1u);
LABEL_417:
        __break(1u);
LABEL_418:
        __break(1u);
LABEL_419:
        __break(1u);
LABEL_420:
        __break(1u);
LABEL_421:
        __break(1u);
LABEL_422:
        __break(1u);
LABEL_423:
        __break(1u);
LABEL_424:
        __break(1u);
LABEL_425:
        __break(1u);
LABEL_426:
        __break(1u);
LABEL_427:
        __break(1u);
LABEL_428:
        __break(1u);
LABEL_429:
        __break(1u);
LABEL_430:
        __break(1u);
      }
      __break(1u);
      goto LABEL_432;
    case 6:
      if (v9 != 13) {
        goto LABEL_331;
      }
      double v19 = (v10 - floor(v10)) * 1000000000.0 + 1.0;
      if ((~*(void *)&v19 & 0x7FF0000000000000) == 0) {
        goto LABEL_405;
      }
      if (v19 <= -9.22337204e18) {
        goto LABEL_406;
      }
      if (v19 >= 9.22337204e18) {
        goto LABEL_407;
      }
      LOBYTE(v8) = 0;
      Swift::Int value = (uint64_t)v19;
      goto LABEL_400;
    case 9:
      Swift::Int value = 0;
      switch(*(unsigned char *)of)
      {
        case 2:
          LODWORD(v181._time) = 0;
          MEMORY[0x1853098F0](*(void *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          Swift::Int v102 = (int)ucal_get();
          if (*(unsigned char *)(v4 + 24) != 6) {
            goto LABEL_353;
          }
          if (v102 > 0xC) {
            goto LABEL_477;
          }
          LOBYTE(v8) = 0;
          __int16 v103 = &outlined read-only object #2 of _CalendarICU._locked_ordinality(of:in:for:);
          goto LABEL_355;
        case 3:
          unsigned __int8 v180 = 9;
          double v178 = v10;
          _CalendarICU._locked_start(of:at:)(&v180, &v178, (uint64_t)&v181);
          double v6 = v181._time;
          char v104 = v182;
          LODWORD(v181._time) = 0;
          MEMORY[0x1853098F0](*(void *)(v4 + 32));
          ucal_setMillis();
          if (v104) {
            goto LABEL_331;
          }
          a3._double time = floor((v10 - v6) / 86400.0);
          if ((~*(void *)&a3._time & 0x7FF0000000000000) == 0) {
            goto LABEL_478;
          }
          if (a3._time <= -9.22337204e18) {
            goto LABEL_479;
          }
          if (a3._time >= 9.22337204e18) {
            goto LABEL_480;
          }
          Swift::Int value = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_227:
          LODWORD(v178) = 0;
          unsigned __int8 v180 = 3;
          char v179 = 9;
          v181._double time = v10;
          Swift::Int_optional v206 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
          Swift::Int value = v206.value;
          if (v206.is_nil) {
            goto LABEL_400;
          }
          Swift::Int v105 = v206.value - 1;
          if (__OFSUB__(v206.value, 1)) {
            goto LABEL_481;
          }
          uint64_t v106 = 24 * v105;
          if ((unsigned __int128)(v105 * (__int128)24) >> 64 != (24 * v105) >> 63) {
            goto LABEL_482;
          }
          int v107 = ucal_get();
          uint64_t v108 = v106 + v107;
          if (__OFADD__(v106, v107)) {
            goto LABEL_483;
          }
          Swift::Int value = v108 + 1;
          if (!__OFADD__(v108, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_234:
          LODWORD(v178) = 0;
          unsigned __int8 v180 = 4;
          char v179 = 9;
          v181._double time = v10;
          Swift::Int_optional v207 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
          Swift::Int value = v207.value;
          if (v207.is_nil) {
            goto LABEL_400;
          }
          Swift::Int v109 = v207.value - 1;
          if (__OFSUB__(v207.value, 1)) {
            goto LABEL_484;
          }
          uint64_t v110 = 60 * v109;
          if ((unsigned __int128)(v109 * (__int128)60) >> 64 != (60 * v109) >> 63) {
            goto LABEL_485;
          }
          int v111 = ucal_get();
          uint64_t v112 = v110 + v111;
          if (__OFADD__(v110, v111)) {
            goto LABEL_486;
          }
          Swift::Int value = v112 + 1;
          if (!__OFADD__(v112, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_241:
          LODWORD(v178) = 0;
          unsigned __int8 v180 = 5;
          char v179 = 9;
          v181._double time = v10;
          Swift::Int_optional v208 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
          Swift::Int value = v208.value;
          if (v208.is_nil) {
            goto LABEL_400;
          }
          Swift::Int v113 = v208.value - 1;
          if (__OFSUB__(v208.value, 1)) {
            goto LABEL_487;
          }
          uint64_t v114 = 60 * v113;
          if ((unsigned __int128)(v113 * (__int128)60) >> 64 != (60 * v113) >> 63) {
            goto LABEL_488;
          }
          int v115 = ucal_get();
          uint64_t v116 = v114 + v115;
          if (__OFADD__(v114, v115)) {
            goto LABEL_489;
          }
          Swift::Int value = v116 + 1;
          if (!__OFADD__(v116, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_248:
          LOBYTE(v178) = 6;
          unsigned __int8 v180 = 9;
          v181._double time = v10;
          Swift::Int_optional v209 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v178, (Foundation::Calendar::Component)&v180, a3);
          Swift::Int value = v209.value;
          if (v209.is_nil) {
            goto LABEL_400;
          }
          double v117 = (v10 - floor(v10) + (double)v209.value + -1.0) * 1000000000.0;
          if ((~*(void *)&v117 & 0x7FF0000000000000) == 0) {
            goto LABEL_490;
          }
          if (v117 <= -9.22337204e18) {
            goto LABEL_491;
          }
          if (v117 >= 9.22337204e18) {
            goto LABEL_492;
          }
          Swift::Int value = (uint64_t)v117 + 1;
          if (!__OFADD__((uint64_t)v117, 1)) {
            goto LABEL_399;
          }
          __break(1u);
          break;
        case 4:
          goto LABEL_227;
        case 5:
          goto LABEL_234;
        case 6:
          goto LABEL_241;
        case 7:
        case 8:
          unsigned __int8 v180 = 9;
          double v178 = v10;
          _CalendarICU._locked_start(of:at:)(&v180, &v178, (uint64_t)&v181);
          if (v182) {
            goto LABEL_331;
          }
          double v21 = v181._time;
          LODWORD(v178) = 0;
          unsigned __int8 v180 = 11;
          char v179 = 1;
          v181._double time = v10;
          Swift::Int_optional v185 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, v20);
          Swift::Int v5 = v185.value;
          Swift::Bool is_nil = v185.is_nil;
          int v23 = ucal_get();
          if (is_nil) {
            goto LABEL_216;
          }
          int v24 = v23;
          LODWORD(v178) = 0;
          MEMORY[0x1853098F0](*(void *)(v4 + 32));
          double v25 = (floor(v21) + 978307200.0) * 1000.0;
          ucal_setMillis();
          while (ucal_get() != v24)
          {
            _CalendarICU._locked_add(_:amount:wrap:status:)(5, 1, 0);
            double v25 = v26;
          }
          goto LABEL_348;
        case 0xA:
        case 0xB:
          goto LABEL_125;
        case 0xD:
          goto LABEL_248;
        default:
          goto LABEL_400;
      }
      goto LABEL_255;
    case 0xA:
    case 0xB:
      Swift::Int value = 0;
      switch(*(unsigned char *)of)
      {
        case 3:
        case 7:
          LODWORD(v181._time) = 0;
          MEMORY[0x1853098F0](*(void *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          Swift::Int value = (int)ucal_get() + 1;
          if (*(unsigned char *)(v4 + 64) != 1) {
            goto LABEL_105;
          }
          uint64_t v11 = (int)ucal_getAttribute();
          break;
        case 4:
          goto LABEL_77;
        case 5:
          goto LABEL_84;
        case 6:
          goto LABEL_91;
        case 0xD:
          goto LABEL_98;
        default:
          goto LABEL_400;
      }
      goto LABEL_106;
    case 0xC:
      Swift::Int value = 0;
      switch(*(unsigned char *)of)
      {
        case 3:
LABEL_177:
          unsigned __int8 v180 = 12;
          double v178 = v10;
          _CalendarICU._locked_start(of:at:)(&v180, &v178, (uint64_t)&v181);
          if (v182) {
            goto LABEL_331;
          }
          a3._double time = floor((v10 - v181._time) / 86400.0);
          if ((~*(void *)&a3._time & 0x7FF0000000000000) == 0) {
            goto LABEL_462;
          }
          if (a3._time <= -9.22337204e18) {
            goto LABEL_463;
          }
          if (a3._time >= 9.22337204e18) {
            goto LABEL_464;
          }
          Swift::Int value = (uint64_t)a3._time + 1;
          if (!__OFADD__((uint64_t)a3._time, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_184:
          LODWORD(v178) = 0;
          unsigned __int8 v180 = 3;
          char v179 = 12;
          v181._double time = v10;
          Swift::Int_optional v202 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
          Swift::Int value = v202.value;
          if (v202.is_nil) {
            goto LABEL_400;
          }
          Swift::Int v88 = v202.value - 1;
          if (__OFSUB__(v202.value, 1)) {
            goto LABEL_465;
          }
          uint64_t v89 = 24 * v88;
          if ((unsigned __int128)(v88 * (__int128)24) >> 64 != (24 * v88) >> 63) {
            goto LABEL_466;
          }
          int v90 = ucal_get();
          uint64_t v91 = v89 + v90;
          if (__OFADD__(v89, v90)) {
            goto LABEL_467;
          }
          Swift::Int value = v91 + 1;
          if (!__OFADD__(v91, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_191:
          LODWORD(v178) = 0;
          unsigned __int8 v180 = 4;
          char v179 = 12;
          v181._double time = v10;
          Swift::Int_optional v203 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
          Swift::Int value = v203.value;
          if (v203.is_nil) {
            goto LABEL_400;
          }
          Swift::Int v92 = v203.value - 1;
          if (__OFSUB__(v203.value, 1)) {
            goto LABEL_468;
          }
          uint64_t v93 = 60 * v92;
          if ((unsigned __int128)(v92 * (__int128)60) >> 64 != (60 * v92) >> 63) {
            goto LABEL_469;
          }
          int v94 = ucal_get();
          uint64_t v95 = v93 + v94;
          if (__OFADD__(v93, v94)) {
            goto LABEL_470;
          }
          Swift::Int value = v95 + 1;
          if (!__OFADD__(v95, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_198:
          LODWORD(v178) = 0;
          unsigned __int8 v180 = 5;
          char v179 = 12;
          v181._double time = v10;
          Swift::Int_optional v204 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, a3);
          Swift::Int value = v204.value;
          if (v204.is_nil) {
            goto LABEL_400;
          }
          Swift::Int v96 = v204.value - 1;
          if (__OFSUB__(v204.value, 1)) {
            goto LABEL_471;
          }
          uint64_t v97 = 60 * v96;
          if ((unsigned __int128)(v96 * (__int128)60) >> 64 != (60 * v96) >> 63) {
            goto LABEL_472;
          }
          int v98 = ucal_get();
          uint64_t v99 = v97 + v98;
          if (__OFADD__(v97, v98)) {
            goto LABEL_473;
          }
          Swift::Int value = v99 + 1;
          if (!__OFADD__(v99, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_205:
          LODWORD(v181._time) = 0;
          MEMORY[0x1853098F0](*(void *)(v4 + 32), *(__n128 *)&a3._time);
          ucal_setMillis();
          int v100 = ucal_get();
          if (SLODWORD(v181._time) <= 0) {
            Swift::Int value = v100;
          }
          else {
            Swift::Int value = 0;
          }
          LOBYTE(v8) = SLODWORD(v181._time) > 0;
          goto LABEL_400;
        case 4:
          goto LABEL_184;
        case 5:
          goto LABEL_191;
        case 6:
          goto LABEL_198;
        case 7:
        case 8:
          unsigned __int8 v180 = 12;
          double v178 = v10;
          _CalendarICU._locked_start(of:at:)(&v180, &v178, (uint64_t)&v181);
          if (v182) {
            goto LABEL_331;
          }
          double v28 = v181._time;
          LODWORD(v178) = 0;
          unsigned __int8 v180 = 11;
          char v179 = 12;
          v181._double time = v10;
          Swift::Int_optional v186 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, v27);
          Swift::Int v5 = v186.value;
          Swift::Bool v29 = v186.is_nil;
          int v30 = ucal_get();
          if (v29) {
            goto LABEL_216;
          }
          int v31 = v30;
          LODWORD(v178) = 0;
          MEMORY[0x1853098F0](*(void *)(v4 + 32));
          double v25 = (floor(v28) + 978307200.0) * 1000.0;
          ucal_setMillis();
          while (ucal_get() != v31)
          {
            _CalendarICU._locked_add(_:amount:wrap:status:)(5, 1, 0);
            double v25 = v32;
          }
          unsigned __int8 v180 = 11;
          char v179 = 12;
          v181._double time = v25 / 1000.0 + -978307200.0;
          Swift::Int_optional v220 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, v181);
          Swift::Int value = v220.value;
          if (v220.is_nil) {
            goto LABEL_362;
          }
          Swift::Int v160 = v5 - v220.value;
          if (__OFSUB__(v5, v220.value)) {
            goto LABEL_514;
          }
          Swift::Int value = v160 + 1;
          if (!__OFADD__(v160, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_348:
          unsigned __int8 v180 = 11;
          char v179 = 1;
          v181._double time = v25 / 1000.0 + -978307200.0;
          Swift::Int_optional v221 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v180, (Foundation::Calendar::Component)&v179, v181);
          Swift::Int value = v221.value;
          if (v221.is_nil) {
            goto LABEL_362;
          }
          Swift::Int v102 = v5 - v221.value;
          if (__OFSUB__(v5, v221.value))
          {
            __break(1u);
            goto LABEL_516;
          }
          Swift::Int value = v102 + 1;
          if (!__OFADD__(v102, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_353:
          if (v102 <= 0xC)
          {
            LOBYTE(v8) = 0;
            __int16 v103 = &outlined read-only object #3 of _CalendarICU._locked_ordinality(of:in:for:);
LABEL_355:
            Swift::Int value = v103[v102 + 4];
            goto LABEL_400;
          }
          break;
        case 0xB:
          goto LABEL_205;
        case 0xD:
          LOBYTE(v178) = 6;
          unsigned __int8 v180 = 12;
          v181._double time = v10;
          Swift::Int_optional v205 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v178, (Foundation::Calendar::Component)&v180, a3);
          Swift::Int value = v205.value;
          if (v205.is_nil) {
            goto LABEL_400;
          }
          double v101 = (v10 - floor(v10) + (double)v205.value + -1.0) * 1000000000.0;
          if ((~*(void *)&v101 & 0x7FF0000000000000) == 0) {
            goto LABEL_474;
          }
          if (v101 <= -9.22337204e18) {
            goto LABEL_475;
          }
          if (v101 >= 9.22337204e18) {
            goto LABEL_476;
          }
          Swift::Int value = (uint64_t)v101 + 1;
          if (!__OFADD__((uint64_t)v101, 1)) {
            goto LABEL_399;
          }
          __break(1u);
LABEL_216:
          LOBYTE(v8) = 1;
          Swift::Int value = v5;
          goto LABEL_400;
        default:
          goto LABEL_400;
      }
      goto LABEL_493;
    default:
      goto LABEL_400;
  }
}

Swift::Int _CalendarICU._locked_algorithmB(smaller:larger:at:)(char *a1, char *a2, double *a3)
{
  char v3 = *a1;
  double v4 = *a3;
  char v25 = *a2;
  Swift::Double v24 = v4;
  _CalendarICU._locked_dateInterval(of:at:)(&v25, &v24, (uint64_t)&v26);
  if (v28) {
    goto LABEL_9;
  }
  double time = v26._time;
  double v5 = v27;
  char v25 = 2;
  Swift::Double v24 = v26._time + 1.0;
  _CalendarICU._locked_dateInterval(of:at:)(&v25, &v24, (uint64_t)&v26);
  if ((v28 & 1) == 0)
  {
    double v10 = v26._time;
    double v9 = v27;
    LOBYTE(v24) = v3;
    char v25 = 2;
    v26._double time = v26._time + 0.1;
    Swift::Int_optional v29 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v24, (Foundation::Calendar::Component)&v25, v26);
    if (!v29.is_nil)
    {
      Swift::Int value = v29.value;
      LOBYTE(v24) = v3;
      char v25 = 2;
      double v11 = v9 + v10;
      v26._double time = v11 + -0.1;
      Swift::Int_optional v30 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v24, (Foundation::Calendar::Component)&v25, COERCE_FOUNDATION_DATE(v11 + -0.1));
      if (!v30.is_nil)
      {
        if (v30.value < value) {
          goto LABEL_10;
        }
        Swift::Int v12 = v30.value + 1;
        if (__OFADD__(v30.value, 1))
        {
LABEL_38:
          __break(1u);
        }
        else if (v12 >= value)
        {
          double v13 = v5 + time + -1.0;
          double v14 = v11 + 1.0;
          if (v11 + 1.0 >= v13) {
            goto LABEL_10;
          }
          uint64_t v15 = -13;
          Swift::Int v7 = value;
          while (1)
          {
            char v25 = 2;
            Swift::Double v24 = v14;
            _CalendarICU._locked_dateInterval(of:at:)(&v25, &v24, (uint64_t)&v26);
            if (v28) {
              goto LABEL_4;
            }
            double v17 = v26._time;
            double v16 = v27;
            LOBYTE(v24) = v3;
            char v25 = 2;
            v26._double time = v26._time + 0.1;
            Swift::Int_optional v31 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v24, (Foundation::Calendar::Component)&v25, v26);
            if (v31.is_nil
              || (Swift::Int value = v31.value,
                  LOBYTE(v24) = v3,
                  char v25 = 2,
                  double v18 = v16 + v17,
                  v26._double time = v18 + -0.1,
                  Swift::Int_optional v30 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v24, (Foundation::Calendar::Component)&v25, COERCE_FOUNDATION_DATE(v18 + -0.1)), v30.is_nil))
            {
              Swift::Int value = v7;
              goto LABEL_10;
            }
            if (v7 == v12)
            {
              __break(1u);
LABEL_34:
              __break(1u);
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
LABEL_37:
              __break(1u);
              goto LABEL_38;
            }
            if (value >= v7) {
              Swift::Int value = v7;
            }
            Swift::Int v19 = v12 - v7;
            if (__OFSUB__(v12, v7)) {
              goto LABEL_34;
            }
            BOOL v20 = __OFADD__(value, v19);
            Swift::Int v21 = value + v19;
            if (v20) {
              goto LABEL_35;
            }
            Swift::Int v12 = v21 + v30.value;
            if (__OFADD__(v21, v30.value)) {
              goto LABEL_36;
            }
            if (v12 < value) {
              goto LABEL_37;
            }
            double v14 = v18 + 1.0;
            BOOL v22 = v18 + 1.0 >= v13 || v15++ == 0;
            Swift::Int v7 = value;
            if (v22) {
              goto LABEL_10;
            }
          }
        }
        __break(1u);
        return v30.value;
      }
    }
LABEL_9:
    Swift::Int value = 0;
    goto LABEL_10;
  }
  Swift::Int v7 = 0;
LABEL_4:
  Swift::Int value = v7;
LABEL_10:
  v30.Swift::Int value = value;
  return v30.value;
}

Swift::Int _CalendarICU._locked_algorithmC(smaller:larger:at:)(char *a1, char *a2, double *a3)
{
  char v3 = *a1;
  double v4 = *a3;
  char v10 = *a2;
  double v9 = v4;
  _CalendarICU._locked_dateInterval(of:at:)(&v10, &v9, (uint64_t)v11);
  if (v12)
  {
    Swift::Int value = 0;
  }
  else
  {
    double time = v11[0]._time;
    double v6 = v11[1]._time;
    LOBYTE(v9) = v3;
    char v10 = 1;
    v11[0]._double time = v11[0]._time + 0.1;
    Swift::Int_optional v13 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v9, (Foundation::Calendar::Component)&v10, v11[0]);
    if (v13.is_nil
      || (Swift::Int value = v13.value,
          LOBYTE(v9) = v3,
          char v10 = 1,
          v11[0]._double time = v6 + time + -0.1,
          Swift::Int_optional v14 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v9, (Foundation::Calendar::Component)&v10, v11[0]), v14.is_nil))
    {
      Swift::Int value = 0;
    }
    else if (v14.value >= value)
    {
      if (__OFADD__(v14.value, 1))
      {
        __break(1u);
      }
      else if (v14.value + 1 >= value)
      {
        goto LABEL_8;
      }
      __break(1u);
      return v14.value;
    }
  }
LABEL_8:
  v14.Swift::Int value = value;
  return v14.value;
}

Swift::Int _CalendarICU._locked_algorithmD(at:)(double *a1)
{
  double v1 = *a1;
  char v11 = 10;
  double v10 = v1;
  _CalendarICU._locked_dateInterval(of:at:)(&v11, &v10, (uint64_t)&v12);
  if (v14) {
    goto LABEL_12;
  }
  double v3 = v12;
  double v2 = v13;
  char v11 = 2;
  double v10 = v1;
  _CalendarICU._locked_dateInterval(of:at:)(&v11, &v10, (uint64_t)&v12);
  if (v14) {
    goto LABEL_12;
  }
  double v5 = v12;
  double v4 = v13;
  double v6 = v3 >= v12 ? v3 : v12;
  LOBYTE(v10) = 3;
  char v11 = 2;
  double v12 = v6 + 0.1;
  Swift::Int_optional v15 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v10, (Foundation::Calendar::Component)&v11, COERCE_FOUNDATION_DATE(v6 + 0.1));
  if (v15.is_nil) {
    goto LABEL_12;
  }
  Swift::Int value = v15.value;
  double v8 = v2 + v3;
  if (v2 + v3 >= v4 + v5) {
    double v8 = v4 + v5;
  }
  LOBYTE(v10) = 3;
  char v11 = 2;
  double v12 = v8 + -0.1;
  Swift::Int_optional v16 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v10, (Foundation::Calendar::Component)&v11, COERCE_FOUNDATION_DATE(v8 + -0.1));
  if (v16.is_nil)
  {
LABEL_12:
    Swift::Int value = 0;
  }
  else if (v16.value >= value)
  {
    if (__OFADD__(v16.value, 1))
    {
      __break(1u);
    }
    else if (v16.value + 1 >= value)
    {
      goto LABEL_13;
    }
    __break(1u);
    return v16.value;
  }
LABEL_13:
  v16.Swift::Int value = value;
  return v16.value;
}

uint64_t _CalendarICU.range(of:in:for:)()
{
  double v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)((uint64_t)&v3);
  os_unfair_lock_unlock(v1 + 4);
  swift_release();
  return v3;
}

uint64_t _CalendarICU._locked_range(of:in:for:)(unsigned char *a1, unsigned char *a2, double *a3)
{
  unsigned int v3 = *a2;
  double v4 = *a3;
  if (*a3 > 1.59271755e13) {
    double v4 = 1.59271755e13;
  }
  if (v3 <= 0xF && ((1 << v3) & 0xE100) != 0) {
    return 0;
  }
  unsigned int v7 = *a1;
  switch(*a1)
  {
    case 4:
      if (v3 - 4 < 3) {
        return 0;
      }
      char v8 = 4;
      goto LABEL_23;
    case 5:
      if (v3 - 5 < 2) {
        return 0;
      }
      char v8 = 5;
      goto LABEL_23;
    case 6:
      if (v3 == 6) {
        return 0;
      }
      char v8 = 6;
      goto LABEL_23;
    case 7:
      if (v3 - 3 < 5) {
        return 0;
      }
      char v8 = 7;
LABEL_23:
      LOBYTE(v17) = v8;
      return _CalendarICU._locked_maximumRange(of:)((unsigned __int8 *)&v17);
    case 0xD:
      char v8 = 13;
      goto LABEL_23;
    default:
      uint64_t result = 0;
      double v9 = fmax(v4, -2.11845067e11);
      switch(*a2)
      {
        case 0:
          uint64_t result = 0;
          if (v7 > 0xB) {
            return result;
          }
          if (((1 << v7) & 0xE0E) == 0)
          {
            if (v7 != 8) {
              return result;
            }
            LOBYTE(v17) = 3;
            uint64_t result = _CalendarICU._locked_maximumRange(of:)((unsigned __int8 *)&v17);
            if (v14) {
              return result;
            }
            if (__OFSUB__(v13, result))
            {
              __break(1u);
            }
            else if (!__OFADD__(result, v13 - result))
            {
              if (!__OFSUB__(v13, 1))
              {
                if (!__OFADD__(v13 - 1, 6))
                {
                  if (v13 + 5 >= -6) {
                    return 1;
                  }
LABEL_63:
                  __break(1u);
                  JUMPOUT(0x181E3B55CLL);
                }
LABEL_62:
                __break(1u);
                goto LABEL_63;
              }
LABEL_61:
              __break(1u);
              goto LABEL_62;
            }
            __break(1u);
            goto LABEL_61;
          }
          LOBYTE(v17) = v7;
          return _CalendarICU._locked_maximumRange(of:)((unsigned __int8 *)&v17);
        case 1:
          uint64_t result = 0;
          if (v7 > 0x11) {
            return result;
          }
          if (((1 << v7) & 0x20A04) != 0)
          {
            char v16 = v7;
            char v10 = 1;
            goto LABEL_39;
          }
          char v11 = 1;
          if (((1 << v7) & 0x508) == 0) {
            return result;
          }
          char v16 = v7;
          goto LABEL_47;
        case 2:
          uint64_t result = 0;
          switch(v7)
          {
            case 3u:
            case 8u:
            case 0xAu:
              char v16 = v7;
              char v10 = 2;
              goto LABEL_39;
            case 0xBu:
              char v16 = 11;
              char v12 = 2;
              goto LABEL_49;
            default:
              return result;
          }
          return result;
        case 9:
          uint64_t result = 0;
          if (v7 > 0xB) {
            return result;
          }
          if (((1 << v7) & 0x508) != 0)
          {
            char v16 = v7;
            char v11 = 9;
            goto LABEL_47;
          }
          if (((1 << v7) & 0x804) != 0)
          {
            char v16 = v7;
            char v12 = 9;
LABEL_49:
            char v15 = v12;
            double v17 = v9;
            return _CalendarICU._locked_algorithmC(smaller:larger:at:)(&v16, &v15, &v17);
          }
          return result;
        case 0xA:
          if (v7 != 3) {
            return 0;
          }
          double v17 = v9;
          return _CalendarICU._locked_algorithmD(at:)(&v17);
        case 0xC:
          uint64_t result = 0;
          if (v7 > 0xB) {
            return result;
          }
          if (((1 << v7) & 0xA04) != 0)
          {
            char v16 = v7;
            char v10 = 12;
LABEL_39:
            char v15 = v10;
            double v17 = v9;
            return _CalendarICU._locked_algorithmA(smaller:larger:at:)(&v16, &v15, &v17);
          }
          else if (((1 << v7) & 0x108) != 0)
          {
            char v16 = v7;
            char v11 = 12;
LABEL_47:
            char v15 = v11;
            double v17 = v9;
            return _CalendarICU._locked_algorithmB(smaller:larger:at:)(&v16, &v15, &v17);
          }
          return result;
        default:
          return result;
      }
  }
}

Swift::Int_optional __swiftcall _CalendarICU.ordinality(of:in:for:)(Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  double v4 = *(os_unfair_lock_s **)(v3 + 16);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)((uint64_t)&v7);
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  Swift::Int v5 = v7;
  Swift::Bool v6 = v8;
  result.Swift::Int value = v5;
  result.Swift::Bool is_nil = v6;
  return result;
}

unsigned __int8 *_CalendarICU._locked_start(of:at:)@<X0>(unsigned __int8 *result@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v5 = *result;
  double v6 = *a2;
  if (*a2 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  double v7 = fmax(v6, -2.11845067e11);
  switch(*result)
  {
    case 1u:
    case 2u:
    case 3u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0x11u:
      goto LABEL_4;
    case 4u:
      uint64_t v11 = *(void *)(v3 + 48);
      uint64_t ObjectType = swift_getObjectType();
      double v17 = v7;
      uint64_t v13 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v11 + 40);
      swift_unknownObjectRetain();
      uint64_t v14 = v13(&v17, ObjectType, v11);
      Swift::Int_optional result = (unsigned __int8 *)swift_unknownObjectRelease();
      double v9 = floor((v7 + (double)v14) / 3600.0) * 3600.0 - (double)v14;
      goto LABEL_5;
    case 5u:
      double v9 = floor(v7 / 60.0) * 60.0;
      goto LABEL_5;
    case 6u:
      double v9 = floor(v7);
      goto LABEL_5;
    case 7u:
    case 8u:
      unsigned __int8 v5 = 3;
LABEL_4:
      unsigned __int8 v18 = v5;
      HIDWORD(v17) = HIDWORD(v7);
      _CalendarICU._locked_setToFirstInstant(of:at:)(&v18);
      LODWORD(v17) = 0;
      Swift::Int_optional result = (unsigned __int8 *)ucal_getMillis();
      double v9 = v8 / 1000.0 + -978307200.0;
      goto LABEL_5;
    case 0xDu:
      double v9 = floor(v7 * 1000000000.0) * 0.000000001;
LABEL_5:
      *(double *)a3 = v9;
      goto LABEL_6;
    case 0xEu:
    case 0xFu:
    case 0x10u:
LABEL_37:
      *(void *)a3 = 0;
      *(unsigned char *)(a3 + 8) = 1;
      return result;
    default:
      switch(*(unsigned char *)(v3 + 24))
      {
        case 1:
          if (v7 < -8.02498752e10) {
            goto LABEL_37;
          }
          *(void *)a3 = 0xC232AF43EB000000;
          break;
        case 2:
          if (v7 < -1.46325744e11) {
            goto LABEL_37;
          }
          goto LABEL_35;
        case 3:
          if (v7 < -5.41625184e10)
          {
            uint64_t v15 = 0x327159C60000;
            goto LABEL_40;
          }
          *(void *)a3 = 0xC22938ACE3000000;
          break;
        case 4:
          if (v7 < -2.36439216e11) {
            goto LABEL_37;
          }
          if (v7 < -6.2872416e10) {
            goto LABEL_27;
          }
          uint64_t v16 = 0x46F9DE000000;
          goto LABEL_42;
        case 5:
          if (v7 < -2.36439216e11) {
            goto LABEL_37;
          }
LABEL_27:
          *(void *)a3 = 0xC24B86700FC00000;
          break;
        case 6:
          if (v7 < -1.81778083e11) {
            goto LABEL_37;
          }
          *(void *)a3 = 0xC2452968B6C00000;
          break;
        case 8:
          if (v7 < -6.06455424e10) {
            goto LABEL_37;
          }
          *(void *)a3 = 0xC22C3D8314000000;
          break;
        case 9:
        case 0xE:
        case 0xF:
          if (v7 < -4.34999808e10) {
            goto LABEL_37;
          }
          uint64_t v10 = 0x419A10000000;
          goto LABEL_45;
        case 0xA:
          if (v7 < -4.34998944e10) {
            goto LABEL_37;
          }
          uint64_t v10 = 0x41976D000000;
          goto LABEL_45;
        case 0xB:
          if (v7 < -4.27909824e10) {
            goto LABEL_37;
          }
LABEL_35:
          unsigned __int8 v5 = 0;
          goto LABEL_4;
        case 0xC:
          if (v7 < -4.3510176e10) {
            goto LABEL_37;
          }
          uint64_t v10 = 0x42D132000000;
LABEL_45:
          *(void *)a3 = v10 & 0xFFFFFFFFFFFFLL | 0xC224000000000000;
          break;
        case 0xD:
          if (v7 < -2808691200.0)
          {
            uint64_t v15 = 0x29DA4E80000;
            goto LABEL_40;
          }
          *(void *)a3 = 0xC1E4ED2740000000;
          break;
        default:
          if (v7 >= -6.3113904e10)
          {
            uint64_t v16 = 0x63C37F000000;
LABEL_42:
            *(void *)a3 = v16 & 0xFFFFFFFFFFFFLL | 0xC22D000000000000;
          }
          else
          {
            uint64_t v15 = 0x3AC786FE0000;
LABEL_40:
            *(void *)a3 = v15 & 0xFFFFFFFFFFFFLL | 0xC290000000000000;
          }
          break;
      }
LABEL_6:
      *(unsigned char *)(a3 + 8) = 0;
      return result;
  }
}

Swift::Bool __swiftcall _CalendarICU.isDateInWeekend(_:)(Foundation::Date a1)
{
  double v2 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)(&v4);
  os_unfair_lock_unlock(v2 + 4);
  swift_release();
  return v4;
}

void closure #1 in _CalendarICU.date(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1853098F0](*(void *)(a1 + 32));
  ucal_set();
  ucal_set();
  ucal_set();
  ucal_set();
  ucal_set();
  ucal_set();
  ucal_set();
  ucal_set();
  outlined init with take of LocalePreferences?(a2 + 32, (uint64_t)v30, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)&v31, &demangling cache variable for type metadata for Int?);
  if ((v32 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?(a2 + 48, (uint64_t)v29, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)&v33, &demangling cache variable for type metadata for Int?);
  if ((v34 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?(a2 + 256, (uint64_t)v28, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v28, (uint64_t)&v35, &demangling cache variable for type metadata for Int?);
  if ((v36 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?(a2 + 240, (uint64_t)v27, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v27, (uint64_t)&v37, &demangling cache variable for type metadata for Int?);
  if ((v38 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?(a2 + 272, (uint64_t)v26, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v26, (uint64_t)&v39, &demangling cache variable for type metadata for Int?);
  if ((v40 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?(a2 + 176, (uint64_t)v25, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v25, (uint64_t)&v41, &demangling cache variable for type metadata for Int?);
  if ((v42 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?(a2 + 192, (uint64_t)v24, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v24, (uint64_t)&v43, &demangling cache variable for type metadata for Int?);
  if ((v44 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?(a2 + 64, (uint64_t)v23, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v23, (uint64_t)&v45, &demangling cache variable for type metadata for Int?);
  if ((v46 & 1) == 0)
  {
    if (__OFSUB__(v45, 1)) {
      __break(1u);
    }
    ucal_set();
  }
  outlined init with take of LocalePreferences?(a2 + 96, (uint64_t)v22, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v22, (uint64_t)&v47, &demangling cache variable for type metadata for Int?);
  if ((v48 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?(a2 + 80, (uint64_t)v21, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v21, (uint64_t)&v49, &demangling cache variable for type metadata for Int?);
  if ((v50 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?(a2 + 112, (uint64_t)v20, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)&v51, &demangling cache variable for type metadata for Int?);
  if ((v52 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?(a2 + 128, (uint64_t)v19, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)&v53, &demangling cache variable for type metadata for Int?);
  if ((v54 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?(a2 + 144, (uint64_t)v18, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)&v55, &demangling cache variable for type metadata for Int?);
  if ((v56 & 1) == 0) {
    ucal_set();
  }
  outlined init with take of LocalePreferences?(a2 + 160, (uint64_t)v17, &demangling cache variable for type metadata for Int?);
  outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)&v57, &demangling cache variable for type metadata for Int?);
  if (v58) {
    double v5 = 0.0;
  }
  else {
    double v5 = (double)v57 * 0.000000001;
  }
  outlined init with take of LocalePreferences?(a2 + 281, (uint64_t)&v12, &demangling cache variable for type metadata for Bool?);
  outlined init with take of LocalePreferences?((uint64_t)&v12, (uint64_t)&v13, &demangling cache variable for type metadata for Bool?);
  if (v13) {
    ucal_set();
  }
  int v11 = 0;
  ucal_getMillis();
  double v7 = v5 + v6 / 1000.0 + -978307200.0;
  double v10 = v7;
  _CalendarICU._locked_timeZoneTransitionInterval(at:)(&v10, (uint64_t)v14);
  if ((v16 & 1) == 0) {
    double v7 = v7 - v15;
  }
  BOOL v8 = v11 > 0;
  double v9 = 0.0;
  if (v11 <= 0) {
    double v9 = v7;
  }
  *(double *)a3 = v9;
  *(unsigned char *)(a3 + 8) = v8;
}

void _CalendarICU._locked_timeZoneTransitionInterval(at:)(double *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = *a1;
  if (*a1 < -3187299600.0
    || (type metadata accessor for _TimeZoneICU(),
        double v16 = v4 + -172800.0 + 34400000.0,
        double v17 = v4 + -172800.0,
        static _TimeZoneICU.nextDaylightSavingTimeTransition(forLocked:startingAt:limit:)(&v17, &v16, (uint64_t)&v18),
        (v19 & 1) != 0)
    || (double v5 = v18, v6 = v18, v4 < v18))
  {
LABEL_8:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 1;
    return;
  }
  uint64_t v7 = *(void *)(v2 + 48);
  uint64_t ObjectType = swift_getObjectType();
  double v18 = v6 + -1.0;
  double v9 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v7 + 40);
  swift_unknownObjectRetain();
  uint64_t v10 = v9(&v18, ObjectType, v7);
  swift_unknownObjectRelease();
  uint64_t v11 = *(void *)(v2 + 48);
  uint64_t v12 = swift_getObjectType();
  double v18 = v6 + 1.0;
  char v13 = *(uint64_t (**)(double *, uint64_t, uint64_t))(v11 + 40);
  swift_unknownObjectRetain();
  uint64_t v14 = v13(&v18, v12, v11);
  swift_unknownObjectRelease();
  uint64_t v15 = v10 - v14;
  if (!__OFSUB__(v10, v14))
  {
    if (v15 >= 1 && v4 < v6 + (double)v15)
    {
      *(double *)a2 = v5;
      *(double *)(a2 + 8) = (double)v15;
      *(unsigned char *)(a2 + 16) = 0;
      return;
    }
    goto LABEL_8;
  }
  __break(1u);
}

void *closure #1 in _CalendarICU.dateComponents(_:from:to:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  __src[36] = *MEMORY[0x1E4F143B8];
  double v7 = 1.59271755e13;
  if (a4 <= 1.59271755e13)
  {
    double v8 = -2.11845067e11;
    if (a4 <= -2.11845067e11)
    {
      if (a5 <= 1.59271755e13)
      {
        double v8 = -2.11845067e11;
        double v7 = fmax(a5, -2.11845067e11);
      }
    }
    else
    {
      double v7 = 1.59271755e13;
      if (a5 <= 1.59271755e13) {
        double v7 = fmax(a5, -2.11845067e11);
      }
      double v8 = a4;
    }
  }
  else
  {
    double v8 = 1.59271755e13;
    if (a5 <= 1.59271755e13) {
      double v7 = fmax(a5, -2.11845067e11);
    }
    else {
      double v7 = 1.59271755e13;
    }
  }
  MEMORY[0x1853098F0](*(void *)(a1 + 32));
  double v9 = (v7 + 978307200.0) * 1000.0 - ((v8 + 978307200.0) * 1000.0 - floor((v8 + 978307200.0) * 1000.0));
  ucal_setMillis();
  long long v18 = 0uLL;
  v17[0] = 0;
  v17[1] = 0;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(&v18, v17, 0, 1, 0, 1, 0, 1, (uint64_t)__src, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1);
  if (a2)
  {
    ucal_getMillis();
    int v10 = ucal_get();
    ucal_setMillis();
    int v11 = ucal_get();
    ucal_setMillis();
    ucal_set();
    if (__OFSUB__(v11, v10))
    {
      __break(1u);
      goto LABEL_55;
    }
    __src[4] = v11 - v10;
    LOBYTE(__src[5]) = 0;
  }
  if ((a2 & 2) != 0)
  {
    __src[6] = (int)ucal_getFieldDifference();
    LOBYTE(__src[7]) = 0;
    if ((a2 & 0x1000) == 0)
    {
LABEL_16:
      if ((a2 & 0x200) == 0) {
        goto LABEL_17;
      }
      goto LABEL_31;
    }
  }
  else if ((a2 & 0x1000) == 0)
  {
    goto LABEL_16;
  }
  __src[34] = (int)ucal_getFieldDifference();
  LOBYTE(__src[35]) = 0;
  if ((a2 & 0x200) == 0)
  {
LABEL_17:
    if ((a2 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }
LABEL_31:
  __src[26] = 0;
  LOBYTE(__src[27]) = 0;
  if ((a2 & 4) == 0)
  {
LABEL_18:
    if ((a2 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_33;
  }
LABEL_32:
  __src[8] = (int)ucal_getFieldDifference();
  LOBYTE(__src[9]) = 0;
  if ((a2 & 0x800) == 0)
  {
LABEL_19:
    if ((a2 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_34;
  }
LABEL_33:
  __src[32] = (int)ucal_getFieldDifference();
  LOBYTE(__src[33]) = 0;
  if ((a2 & 0x400) == 0)
  {
LABEL_20:
    if ((a2 & 8) == 0) {
      goto LABEL_21;
    }
    goto LABEL_35;
  }
LABEL_34:
  __src[30] = (int)ucal_getFieldDifference();
  LOBYTE(__src[31]) = 0;
  if ((a2 & 8) == 0)
  {
LABEL_21:
    if ((a2 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_36;
  }
LABEL_35:
  __src[10] = (int)ucal_getFieldDifference();
  LOBYTE(__src[11]) = 0;
  if ((a2 & 0x40000) == 0)
  {
LABEL_22:
    if ((a2 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_37;
  }
LABEL_36:
  __src[12] = (int)ucal_getFieldDifference();
  LOBYTE(__src[13]) = 0;
  if ((a2 & 0x80) == 0)
  {
LABEL_23:
    if ((a2 & 0x100) == 0) {
      goto LABEL_24;
    }
    goto LABEL_38;
  }
LABEL_37:
  __src[22] = (int)ucal_getFieldDifference();
  LOBYTE(__src[23]) = 0;
  if ((a2 & 0x100) == 0)
  {
LABEL_24:
    if ((a2 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_39;
  }
LABEL_38:
  __src[24] = (int)ucal_getFieldDifference();
  LOBYTE(__src[25]) = 0;
  if ((a2 & 0x10) == 0)
  {
LABEL_25:
    if ((a2 & 0x20) == 0) {
      goto LABEL_26;
    }
    goto LABEL_40;
  }
LABEL_39:
  __src[14] = (int)ucal_getFieldDifference();
  LOBYTE(__src[15]) = 0;
  if ((a2 & 0x20) == 0)
  {
LABEL_26:
    if ((a2 & 0x40) == 0) {
      goto LABEL_27;
    }
    goto LABEL_41;
  }
LABEL_40:
  __src[16] = (int)ucal_getFieldDifference();
  LOBYTE(__src[17]) = 0;
  if ((a2 & 0x40) == 0)
  {
LABEL_27:
    if ((a2 & 0x2000) == 0) {
      return memcpy(a3, __src, 0x11AuLL);
    }
LABEL_42:
    ucal_getMillis();
    double v13 = floor((v9 - v12) * 1000000.0);
    if (v13 >= 2147483650.0)
    {
      BOOL v15 = 0;
      uint64_t v14 = 0x7FFFFFFFLL;
    }
    else
    {
      if (v13 > -2147483650.0)
      {
        if ((~*(void *)&v13 & 0x7FF0000000000000) != 0)
        {
          if (v13 > -9.22337204e18)
          {
            if (v13 < 9.22337204e18)
            {
              uint64_t v14 = (uint64_t)v13;
              BOOL v15 = (uint64_t)v13 == 0x7FFFFFFFFFFFFFFFLL;
              if ((uint64_t)v13 == 0x7FFFFFFFFFFFFFFFLL) {
                uint64_t v14 = 0;
              }
              goto LABEL_52;
            }
LABEL_57:
            __break(1u);
          }
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      BOOL v15 = 0;
      uint64_t v14 = 0xFFFFFFFF80000000;
    }
LABEL_52:
    __src[20] = v14;
    LOBYTE(__src[21]) = v15;
    return memcpy(a3, __src, 0x11AuLL);
  }
LABEL_41:
  __src[18] = (int)ucal_getFieldDifference();
  LOBYTE(__src[19]) = 0;
  if ((a2 & 0x2000) != 0) {
    goto LABEL_42;
  }
  return memcpy(a3, __src, 0x11AuLL);
}

void _CalendarICU._locked_setToFirstInstant(of:at:)(unsigned __int8 *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *a1;
  int v26 = 0;
  ucal_setMillis();
  unsigned int v3 = v2;
  unsigned int v24 = v2;
  int v4 = 0;
  int v5 = 0;
  int v6 = 0;
  int v7 = 0;
  int v8 = 0;
  char v9 = 1;
  char v10 = 1;
  char v11 = 1;
  char v12 = 1;
  char v13 = 1;
  switch(v3)
  {
    case 0u:
      int v14 = ucal_get();
      ucal_getLimit();
      ucal_set();
      int v4 = v14;
      char v9 = 0;
      goto LABEL_3;
    case 1u:
LABEL_3:
      int v5 = v4;
      ucal_getLimit();
      ucal_set();
      goto LABEL_18;
    case 2u:
      goto LABEL_19;
    case 3u:
    case 7u:
    case 8u:
    case 0x11u:
      goto LABEL_20;
    case 4u:
      goto LABEL_21;
    case 5u:
      goto LABEL_22;
    case 6u:
      ucal_set();
      goto LABEL_38;
    case 9u:
      unsigned int v15 = ucal_get();
      if (*(unsigned char *)(v1 + 24) != 6)
      {
        if (v15 <= 0xC) {
          goto LABEL_17;
        }
LABEL_42:
        __break(1u);
      }
      if (v15 > 0xC)
      {
        __break(1u);
        goto LABEL_42;
      }
LABEL_17:
      unsigned int v24 = 2;
      ucal_set();
      int v5 = 0;
LABEL_18:
      ucal_set();
      char v10 = v9;
LABEL_19:
      ucal_getLimit();
      ucal_set();
      int v6 = v5;
      char v11 = v10;
LABEL_20:
      ucal_getLimit();
      ucal_set();
      int v7 = v6;
      char v12 = v11;
LABEL_21:
      ucal_getLimit();
      ucal_set();
      int v8 = v7;
      char v13 = v12;
LABEL_22:
      ucal_getLimit();
      ucal_set();
      ucal_set();
      if ((v13 & 1) == 0 && (int)ucal_get() < v8)
      {
        do
        {
          ucal_getMillis();
          double v18 = v17;
          ucal_add();
        }
        while ((int)ucal_get() < v8);
        ucal_getMillis();
        double v20 = v19;
        do
        {
          ucal_setMillis();
          if ((int)ucal_get() < v8) {
            double v18 = (v20 + v18) * 0.5;
          }
          else {
            double v20 = (v20 + v18) * 0.5;
          }
        }
        while (vabdd_f64(v20, v18) >= 1000.0);
        do
        {
          double v18 = floor((v18 + 1000.0) / 1000.0) * 1000.0;
          ucal_setMillis();
        }
        while ((int)ucal_get() < v8);
      }
LABEL_31:
      if (v24 <= 8 && ((1 << v24) & 0x188) != 0)
      {
        int v22 = ucal_get();
        do
        {
          ucal_getMillis();
          ucal_add();
        }
        while (v22 == ucal_get());
        ucal_setMillis();
      }
LABEL_38:
      ucal_getMillis();
      double v25 = v23 / 1000.0 + -978307200.0;
      _CalendarICU._locked_timeZoneTransitionInterval(at:)(&v25, (uint64_t)v27);
      if ((v27[16] & 1) == 0) {
        ucal_setMillis();
      }
      return;
    case 0xAu:
    case 0xBu:
      goto LABEL_9;
    case 0xCu:
      ucal_getLimit();
      ucal_set();
LABEL_9:
      if (*(unsigned char *)(v1 + 64) == 1) {
        uint64_t Attribute = (int)ucal_getAttribute();
      }
      else {
        uint64_t Attribute = *(void *)(v1 + 56);
      }
      if (Attribute == (int)ucal_get())
      {
        int v6 = 0;
        unsigned int v24 = 3;
      }
      else
      {
        do
        {
          ucal_add();
          ucal_add();
        }
        while (Attribute != (int)ucal_get());
        int v6 = 0;
        unsigned int v24 = 3;
        char v11 = 1;
      }
      goto LABEL_20;
    default:
      goto LABEL_31;
  }
}

double _CalendarICU.totalSecondsInSmallUnits(_:status:)(int a1)
{
  double v1 = 0.0;
  if (a1 != 14 && a1 != 21)
  {
    double v1 = (double)(int)ucal_get() / 1000.0 + 0.0;
    if (a1 != 13)
    {
      double v1 = v1 + (double)(int)ucal_get();
      if (a1 != 12) {
        return v1 + (double)(int)ucal_get() * 60.0;
      }
    }
  }
  return v1;
}

void protocol witness for _CalendarProtocol.identifier.getter in conformance _CalendarICU(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 24);
}

uint64_t protocol witness for _CalendarProtocol.preferredFirstWeekday.getter in conformance _CalendarICU()
{
  return _CalendarICU.preferredFirstWeekday.getter();
}

uint64_t protocol witness for _CalendarProtocol.preferredMinimumDaysInFirstweek.getter in conformance _CalendarICU()
{
  return _CalendarICU.preferredMinimumDaysInFirstweek.getter();
}

void protocol witness for _CalendarProtocol.gregorianStartDate.getter in conformance _CalendarICU(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 96);
  *(void *)a1 = *(void *)(v1 + 88);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t protocol witness for _CalendarProtocol.minimumRange(of:) in conformance _CalendarICU(unsigned char *a1)
{
  return _CalendarICU.minimumRange(of:)(a1);
}

uint64_t protocol witness for _CalendarProtocol.maximumRange(of:) in conformance _CalendarICU()
{
  return _CalendarICU.maximumRange(of:)();
}

uint64_t protocol witness for _CalendarProtocol.range(of:in:for:) in conformance _CalendarICU()
{
  return _CalendarICU.range(of:in:for:)();
}

unint64_t protocol witness for _CalendarProtocol.ordinality(of:in:for:) in conformance _CalendarICU(Foundation::Calendar::Component a1, Foundation::Calendar::Component a2, double a3)
{
  return (unint64_t)_CalendarICU.ordinality(of:in:for:)(a1, a2, *(Foundation::Date *)&a3);
}

uint64_t protocol witness for _CalendarProtocol.dateInterval(of:for:) in conformance _CalendarICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)();
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:to:) in conformance _CalendarICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)();
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _CalendarICU()
{
  BYTE8(v2) = 0;
  *(void *)&long long v2 = *(unsigned __int8 *)(*(void *)v0 + 24);
  _print_unlocked<A, B>(_:_:)();
  return *(void *)((char *)&v2 + 1);
}

void *Calendar.eraSymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.longEraSymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.monthSymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.shortMonthSymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.veryShortMonthSymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.standaloneMonthSymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.shortStandaloneMonthSymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.veryShortStandaloneMonthSymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.weekdaySymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.shortWeekdaySymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.veryShortWeekdaySymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.standaloneWeekdaySymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.shortStandaloneWeekdaySymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.veryShortStandaloneWeekdaySymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.quarterSymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.shortQuarterSymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.standaloneQuarterSymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

void *Calendar.shortStandaloneQuarterSymbols.getter()
{
  long long v4 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v4, (uint64_t)&v14);
  long long v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = v17;
  long long v8 = v18;
  char v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  char v12 = v22;
  uint64_t v13 = v23;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  long long v2 = ICUDateFormatter.symbols(for:)();
  swift_release();
  return v2;
}

uint64_t Calendar.amSymbol.getter()
{
  long long v5 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v5, (uint64_t)&v15);
  long long v5 = v15;
  uint64_t v6 = v16;
  uint64_t v7 = v17;
  char v8 = v18;
  long long v9 = v19;
  char v10 = v20;
  uint64_t v11 = v21;
  uint64_t v12 = v22;
  char v13 = v23;
  uint64_t v14 = v24;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v1)
  {
    unsigned int v3 = ICUDateFormatter.symbols(for:)();
    uint64_t result = swift_release();
    if (v3[2])
    {
LABEL_3:
      uint64_t v4 = v3[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return v4;
    }
  }
  else
  {
    unsigned int v3 = (void *)MEMORY[0x1E4FBC860];
    if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

uint64_t Calendar.pmSymbol.getter()
{
  long long v5 = *v0;
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v5, (uint64_t)&v15);
  long long v5 = v15;
  uint64_t v6 = v16;
  uint64_t v7 = v17;
  char v8 = v18;
  long long v9 = v19;
  char v10 = v20;
  uint64_t v11 = v21;
  uint64_t v12 = v22;
  char v13 = v23;
  uint64_t v14 = v24;
  uint64_t v1 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v1)
  {
    unsigned int v3 = ICUDateFormatter.symbols(for:)();
    uint64_t result = swift_release();
  }
  else
  {
    unsigned int v3 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v3[2] < 2uLL)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = v3[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return v4;
  }
  return result;
}

void *partial apply for closure #1 in _CalendarICU.dateComponents(_:from:to:)@<X0>(void *a1@<X8>)
{
  return closure #1 in _CalendarICU.dateComponents(_:from:to:)(*(void *)(v1 + 32), *(void *)(v1 + 40), a1, *(double *)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t outlined release of LocalePreferences?(uint64_t a1)
{
  return a1;
}

void partial apply for closure #1 in _CalendarICU.date(from:)(uint64_t a1@<X8>)
{
  closure #1 in _CalendarICU.date(from:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in _CalendarICU.isDateInWeekend(_:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = ucal_isWeekend();
  *a1 = result != 0;
  return result;
}

void *partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

double partial apply for closure #1 in _CalendarICU.dateInterval(of:for:)@<D0>(uint64_t a1@<X8>)
{
  double v2 = *(double *)(v1 + 32);
  char v5 = *(unsigned char *)(v1 + 24);
  double v4 = v2;
  _CalendarICU._locked_dateInterval(of:at:)(&v5, &v4, a1);
  return result;
}

Swift::Int partial apply for closure #1 in _CalendarICU.ordinality(of:in:for:)@<X0>(uint64_t a1@<X8>)
{
  char v3 = *(unsigned char *)(v1 + 25);
  *(Foundation::Date *)&v4._double time = *(Foundation::Date *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 24);
  char v6 = v3;
  Swift::Int_optional v8 = _CalendarICU._locked_ordinality(of:in:for:)((Foundation::Calendar::Component)&v7, (Foundation::Calendar::Component)&v6, v4);
  *(void *)a1 = v8.value;
  *(unsigned char *)(a1 + 8) = v8.is_nil;
  return v8.value;
}

void *partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  double result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v6);
  if (!v2)
  {
    char v5 = v7;
    *(void *)a1 = v6;
    *(unsigned char *)(a1 + 8) = v5;
  }
  return result;
}

uint64_t partial apply for closure #1 in _CalendarICU.range(of:in:for:)@<X0>(uint64_t a1@<X8>)
{
  char v3 = *(unsigned char *)(v1 + 25);
  uint64_t v4 = *(void *)(v1 + 32);
  char v10 = *(unsigned char *)(v1 + 24);
  char v9 = v3;
  uint64_t v8 = v4;
  uint64_t result = _CalendarICU._locked_range(of:in:for:)(&v10, &v9, (double *)&v8);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7 & 1;
  return result;
}

double partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)@<D0>(uint64_t a1@<X8>)
{
  return partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  double result;
  char v5;
  long long v6;
  char v7;

  (*(void (**)(long long *__return_ptr))(v1 + 16))(&v6);
  if (!v2)
  {
    char v5 = v7;
    uint64_t result = *(double *)&v6;
    *(_OWORD *)a1 = v6;
    *(unsigned char *)(a1 + 16) = v5;
  }
  return result;
}

uint64_t partial apply for closure #1 in _CalendarICU.maximumRange(of:)@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 v6 = *(unsigned char *)(v1 + 24);
  uint64_t result = _CalendarICU._locked_maximumRange(of:)(&v6);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t partial apply for closure #1 in _CalendarICU.minimumRange(of:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in _CalendarICU.minimumRange(of:)(*(unsigned char *)(v1 + 28), a1);
}

void partial apply for closure #1 in _CalendarICU.minimumDaysInFirstWeek.getter(void *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 80) == 1) {
    uint64_t Attribute = (int)ucal_getAttribute();
  }
  else {
    uint64_t Attribute = *(void *)(v1 + 72);
  }
  *a1 = Attribute;
}

void *partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)@<X0>(void *a1@<X8>)
{
  return partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  void *result;
  uint64_t v5;

  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

void partial apply for closure #1 in _CalendarICU.firstWeekday.getter(void *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 64) == 1) {
    uint64_t Attribute = (int)ucal_getAttribute();
  }
  else {
    uint64_t Attribute = *(void *)(v1 + 56);
  }
  *a1 = Attribute;
}

void *closure #1 in _CalendarICU.dateComponents(_:from:)partial apply@<X0>(void *a1@<X8>)
{
  return partial apply for closure #1 in _CalendarICU.dateComponents(_:from:)(a1);
}

uint64_t static AnyHashable._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  outlined destroy of AnyHashable?(a2);
  type metadata accessor for NSObject();
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  id v3 = a1;
  return AnyHashable.init<A>(_:)();
}

BOOL static AnyHashable._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  outlined destroy of AnyHashable?(a2);
  v7[0] = a1;
  type metadata accessor for NSObject();
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  id v4 = a1;
  AnyHashable.init<A>(_:)();
  outlined init with copy of AnyHashable?(a2, (uint64_t)v7);
  BOOL v5 = v7[3] != 0;
  outlined destroy of AnyHashable?((uint64_t)v7);
  return v5;
}

uint64_t static AnyHashable._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (a1)
  {
    type metadata accessor for NSObject();
    lazy protocol witness table accessor for type NSObject and conformance NSObject();
    id v2 = a1;
  }
  return AnyHashable.init<A>(_:)();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance AnyHashable(void *a1, uint64_t a2)
{
  outlined destroy of AnyHashable?(a2);
  type metadata accessor for NSObject();
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  id v3 = a1;
  return AnyHashable.init<A>(_:)();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance AnyHashable(void *a1)
{
  if (a1)
  {
    type metadata accessor for NSObject();
    lazy protocol witness table accessor for type NSObject and conformance NSObject();
    id v2 = a1;
  }
  return AnyHashable.init<A>(_:)();
}

void NSDate.customPlaygroundQuickLook.getter(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), sel_init);
  objc_msgSend(v3, sel_setDateStyle_, 2);
  objc_msgSend(v3, sel_setTimeStyle_, 1);
  id v4 = objc_msgSend(v3, sel_stringFromDate_, v1);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 32) = 0;
}

void protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance NSDate(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), sel_init);
  objc_msgSend(v4, sel_setDateStyle_, 2);
  objc_msgSend(v4, sel_setTimeStyle_, 1);
  id v5 = objc_msgSend(v4, sel_stringFromDate_, v3);
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 32) = 0;
}

uint64_t PredicateExpressions.Range.init(lower:upper:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return PredicateExpressions.Range.init(lower:upper:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.Range, a8);
}

uint64_t PredicateExpressions.Range.evaluate(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v45 = a3;
  uint64_t v5 = a2[4];
  uint64_t v6 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  char v9 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v42 - v11;
  int v47 = *(void **)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  char v48 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  char v18 = (char *)v42 - v17;
  uint64_t v19 = *a1;
  uint64_t v49 = v19;
  char v20 = v51;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, double))(v5 + 16))(&v49, v6, v5, v16);
  if (!v20)
  {
    char v44 = v12;
    int v51 = v9;
    uint64_t v22 = v47;
    char v23 = v48;
    uint64_t v49 = v19;
    (*(void (**)(uint64_t *, void))(a2[5] + 16))(&v49, a2[3]);
    uint64_t v24 = a2[6];
    uint64_t v25 = AssociatedTypeWitness;
    if (dispatch thunk of static Comparable.<= infix(_:_:)())
    {
      v42[1] = v24;
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if (result)
      {
        uint64_t v26 = TupleTypeMetadata2;
        int v43 = &v44[*(int *)(TupleTypeMetadata2 + 48)];
        double v27 = v43;
        uint64_t v28 = (void (*)(void))v22[4];
        v28();
        ((void (*)(char *, char *, uint64_t))v28)(v27, v23, v25);
        Swift::Int_optional v29 = v51;
        Swift::Int_optional v30 = &v51[*(int *)(v26 + 48)];
        int v31 = (void (*)(char *, char *, uint64_t))v22[2];
        v31(v51, v44, v25);
        v31(v30, v43, v25);
        uint64_t v32 = v45;
        ((void (*)(uint64_t, char *, uint64_t))v28)(v45, v29, v25);
        char v48 = (char *)v22[1];
        ((void (*)(char *, uint64_t))v48)(v30, v25);
        int v33 = &v29[*(int *)(TupleTypeMetadata2 + 48)];
        ((void (*)(char *, char *, uint64_t))v28)(v29, v44, v25);
        ((void (*)(char *, char *, uint64_t))v28)(v33, v43, v25);
        uint64_t v34 = type metadata accessor for Range();
        ((void (*)(uint64_t, char *, uint64_t))v28)(v32 + *(int *)(v34 + 36), v33, v25);
        return ((uint64_t (*)(char *, uint64_t))v48)(v29, v25);
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      uint64_t v49 = 0;
      unint64_t v50 = 0xE000000000000000;
      _StringGuts.grow(_:)(54);
      v35._uint64_t countAndFlagsBits = 0xD000000000000020;
      v35._unint64_t object = (void *)0x80000001823B2570;
      String.append(_:)(v35);
      _print_unlocked<A, B>(_:_:)();
      v36._unint64_t object = (void *)0x80000001823B25A0;
      v36._uint64_t countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v36);
      _print_unlocked<A, B>(_:_:)();
      v37._uint64_t countAndFlagsBits = 41;
      v37._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v37);
      uint64_t v38 = v49;
      unint64_t v39 = v50;
      lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
      swift_allocError();
      *(void *)uint64_t v40 = v38;
      *(void *)(v40 + 8) = v39;
      *(unsigned char *)(v40 + 16) = 2;
      swift_willThrow();
      int v41 = (void (*)(char *, uint64_t))v22[1];
      v41(v23, AssociatedTypeWitness);
      return ((uint64_t (*)(char *, uint64_t))v41)(v18, AssociatedTypeWitness);
    }
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Range<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.Range.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_Range<A, B>(lower:upper:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return static PredicateExpressions.build_Range<A, B>(lower:upper:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.Range, a8);
}

uint64_t PredicateExpressions.Range.description.getter(int a1)
{
  return PredicateExpressions.Range.description.getter(a1, 27, 0x6F6C2865676E6152, (void *)0xED0000203A726577);
}

uint64_t PredicateExpressions.Range<>.encode(to:)(void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.Range<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.Range<>.init(from:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v5;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void, void *, double);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void v39[3];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  Swift::String v36 = a4;
  uint64_t v38 = a3;
  uint64_t v34 = a5;
  int v33 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  char v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v35 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  Swift::String v37 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v42 = v14;
  v39[0] = v14;
  v39[1] = v15;
  v39[2] = v16;
  uint64_t v40 = v17;
  int v41 = v18;
  char v20 = v19(0, v39, v12);
  uint64_t v32 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v28 - v21;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v5) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  Swift::Int_optional v30 = v22;
  int v31 = a1;
  Swift::Int_optional v29 = v20;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v39, v40);
  char v23 = v37;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v24 = v30;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v30, v23, v42);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v39, v40);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v25 = v29;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v24[*(int *)(v29 + 60)], v9, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  uint64_t v26 = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v34, v24, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v24, v25);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Range<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Range<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.Range<>.init(from:), a5, a6);
}

uint64_t PredicateExpressions.ClosedRange.init(lower:upper:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return PredicateExpressions.Range.init(lower:upper:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.ClosedRange, a8);
}

uint64_t PredicateExpressions.ClosedRange.evaluate(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v41 = a3;
  uint64_t v5 = a2[4];
  uint64_t v6 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  char v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  char v44 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v17 = *a1;
  uint64_t v46 = v17;
  uint64_t v18 = v45;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, double))(v5 + 16))(&v46, v6, v5, v16);
  if (!v18)
  {
    uint64_t v40 = v12;
    uint64_t v21 = v42;
    uint64_t v20 = TupleTypeMetadata2;
    uint64_t v46 = v17;
    (*(void (**)(uint64_t *, void))(a2[5] + 16))(&v46, a2[3]);
    uint64_t v22 = a2[6];
    uint64_t v23 = AssociatedTypeWitness;
    uint64_t v45 = v22;
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v24 = v20;
      uint64_t v25 = &v40[*(int *)(v20 + 48)];
      uint64_t v26 = *(void (**)(void))(v21 + 32);
      uint64_t v38 = v26;
      v26();
      double v27 = v25;
      unint64_t v39 = v25;
      ((void (*)(char *, char *, uint64_t))v26)(v25, v44, v23);
      uint64_t v28 = *(int *)(v24 + 48);
      Swift::Int_optional v29 = v9;
      Swift::Int_optional v30 = &v9[v28];
      uint64_t v31 = v23;
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
      v32(v29, v40, v23);
      v32(v30, v27, v23);
      uint64_t v33 = v41;
      uint64_t v34 = v38;
      ((void (*)(uint64_t, char *, uint64_t))v38)(v41, v29, v23);
      Swift::String v35 = *(void (**)(char *, uint64_t))(v42 + 8);
      v35(v30, v31);
      Swift::String v36 = &v29[*(int *)(TupleTypeMetadata2 + 48)];
      ((void (*)(char *, char *, uint64_t))v34)(v29, v40, v31);
      ((void (*)(char *, char *, uint64_t))v34)(v36, v39, v31);
      uint64_t v37 = type metadata accessor for ClosedRange();
      ((void (*)(uint64_t, char *, uint64_t))v34)(v33 + *(int *)(v37 + 36), v36, v31);
      return ((uint64_t (*)(char *, uint64_t))v35)(v29, v31);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.ClosedRange<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.ClosedRange.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_ClosedRange<A, B>(lower:upper:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return static PredicateExpressions.build_Range<A, B>(lower:upper:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.ClosedRange, a8);
}

uint64_t PredicateExpressions.ClosedRange.description.getter(int a1)
{
  return PredicateExpressions.Range.description.getter(a1, 33, 0xD000000000000013, (void *)0x80000001823B25C0);
}

uint64_t PredicateExpressions.Range.description.getter(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(a2);
  v6._uint64_t countAndFlagsBits = a3;
  v6._unint64_t object = a4;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._uint64_t countAndFlagsBits = 0x3A7265707075202CLL;
  v7._unint64_t object = (void *)0xE900000000000020;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._uint64_t countAndFlagsBits = 41;
  v8._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t PredicateExpressions.ClosedRange<>.encode(to:)(void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.ClosedRange<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.Range<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.ClosedRange<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Range<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.ClosedRange<>.init(from:), a5, a6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Range<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, uint64_t, void, void), uint64_t a5, uint64_t a6)
{
  return a4(a1, a2[2], a2[3], a2[4], *(void *)(a3 - 8), a6, a2[5], *(void *)(a3 - 24));
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ClosedRange<A, B>(void *a1)
{
  return PredicateExpressions.ClosedRange<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.RangeExpressionContains.init(range:element:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return PredicateExpressions.Range.init(lower:upper:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.RangeExpressionContains, a8);
}

uint64_t PredicateExpressions.Range.init(lower:upper:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void, void *)@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a9, a1);
  v19[0] = a3;
  v19[1] = a4;
  void v19[2] = a5;
  v19[3] = a6;
  void v19[4] = a7;
  uint64_t v17 = a8(0, v19);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a9 + *(int *)(v17 + 60), a2, a4);
}

uint64_t PredicateExpressions.RangeExpressionContains.evaluate(_:)(uint64_t *a1, void *a2)
{
  id v2 = a2;
  uint64_t v4 = a2[5];
  uint64_t v23 = v2[3];
  uint64_t v24 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v22 = (char *)&v20 - v6;
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[2];
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v14 = *a1;
  uint64_t v26 = v14;
  uint64_t v15 = v25;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, double))(v7 + 16))(&v26, v8, v7, v11);
  if (!v15)
  {
    uint64_t v16 = v9;
    uint64_t v25 = v10;
    uint64_t v17 = v21;
    uint64_t v18 = v22;
    uint64_t v26 = v14;
    (*(void (**)(uint64_t *, uint64_t))(v24 + 16))(&v26, v23);
    LOBYTE(v2) = dispatch thunk of RangeExpression.contains(_:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v18, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v16);
  }
  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.RangeExpressionContains<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PredicateExpressions.RangeExpressionContains.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t static PredicateExpressions.build_contains<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return static PredicateExpressions.build_Range<A, B>(lower:upper:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.RangeExpressionContains, a8);
}

uint64_t static PredicateExpressions.build_Range<A, B>(lower:upper:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void, void *)@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a9, a1);
  v19[0] = a3;
  v19[1] = a4;
  void v19[2] = a5;
  v19[3] = a6;
  void v19[4] = a7;
  uint64_t v17 = a8(0, v19);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a9 + *(int *)(v17 + 60), a2, a4);
}

uint64_t PredicateExpressions.RangeExpressionContains.description.getter()
{
  _StringGuts.grow(_:)(47);
  v0._unint64_t object = (void *)0x80000001823B25E0;
  v0._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x6E656D656C65202CLL;
  v1._unint64_t object = (void *)0xEB00000000203A74;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41;
  v2._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.RangeExpressionContains<>.encode(to:)(void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.RangeExpressionContains<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.Range<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.Range<A, B>(void *a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ClosedRange<A, B>(void *a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.RangeExpressionContains<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Range<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.RangeExpressionContains<>.init(from:), a5, a6);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Range(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.Range(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x181E404FCLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Range<A, B>(void *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ClosedRange<A, B>(a1);
}

uint64_t dispatch thunk of static AttributeScope.decodingConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static AttributeScope.encodingConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LoadedScopeCache.ScopeType(void *a1, void *a2)
{
  if (*a1) {
    BOOL v2 = *a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*a1 | *a2) == 0;
  }
  else {
    return *a1 == *a2;
  }
}

uint64_t getEnumTagSinglePayload for LoadedScopeCache.ScopeType(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LoadedScopeCache.ScopeType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for LoadedScopeCache(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LoadedScopeCache(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LoadedScopeCache(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithCopy for ScopeDescription(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for ScopeDescription(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t PredicateExpressions.StringContainsRegex.subject.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t PredicateExpressions.StringContainsRegex.regex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 68));
}

uint64_t PredicateExpressions.StringContainsRegex.init(subject:regex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.StringContainsRegex();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 68), a2, a4);
}

uint64_t PredicateExpressions.StringContainsRegex.description.getter()
{
  _StringGuts.grow(_:)(43);
  v0._unint64_t object = (void *)0x80000001823B2860;
  v0._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x3A7865676572202CLL;
  v1._unint64_t object = (void *)0xE900000000000020;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41;
  v2._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.StringContainsRegex.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v5 = a2[3];
  uint64_t v23 = a2[5];
  uint64_t v24 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v25 = (char *)&v21 - v7;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[2];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  size_t v14 = (char *)&v21 - v13;
  uint64_t v15 = *a1;
  uint64_t v27 = v15;
  uint64_t v16 = v26;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, double))(v8 + 16))(&v27, v9, v8, v12);
  if (!v16)
  {
    uint64_t v17 = v10;
    uint64_t v26 = v11;
    uint64_t v18 = v22;
    uint64_t v27 = v15;
    (*(void (**)(uint64_t *, uint64_t))(v23 + 16))(&v27, v24);
    unsigned int v20 = v25;
    char v2 = BidirectionalCollection<>.contains<A>(_:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v17);
  }
  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.StringContainsRegex<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PredicateExpressions.StringContainsRegex.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t PredicateExpressions.PredicateRegex.regex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PredicateExpressions.PredicateRegex._Storage(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PredicateExpressions.PredicateRegex._Storage(v1, (uint64_t)v5, type metadata accessor for PredicateExpressions.PredicateRegex._Storage);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, v5, v6);
}

uint64_t type metadata accessor for PredicateExpressions.PredicateRegex._Storage(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, type metadata singleton initialization cache for PredicateExpressions.PredicateRegex._Storage);
}

uint64_t PredicateExpressions.PredicateRegex.stringRepresentation.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PredicateExpressions.PredicateRegex(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PredicateExpressions.PredicateRegex.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v25[1] = a3;
  uint64_t v27 = a4;
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Regex();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for PredicateExpressions.PredicateRegex(0);
  uint64_t v11 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of RegexComponent.regex.getter();
  Regex<A>.init<A>(_:)();
  uint64_t v14 = Regex._literalPattern.getter();
  uint64_t v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  if (v16)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v10, v7);
    uint64_t v17 = v26;
    uint64_t v18 = (uint64_t *)&v13[*(int *)(v26 + 20)];
    *uint64_t v18 = v14;
    v18[1] = v16;
    uint64_t v19 = (uint64_t)v13;
    uint64_t v20 = v27;
    outlined init with take of PredicateExpressions.PredicateRegex(v19, v27, type metadata accessor for PredicateExpressions.PredicateRegex);
    uint64_t v21 = 0;
    uint64_t v22 = v20;
    uint64_t v23 = v17;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v21 = 1;
    uint64_t v23 = v26;
    uint64_t v22 = v27;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v22, v21, 1, v23);
}

uint64_t PredicateExpressions.PredicateRegex.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v23 = v4;
  uint64_t v24 = v5;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PredicateExpressions.PredicateRegex._Storage(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PredicateExpressions.PredicateRegex(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v21 = v10;
  uint64_t v22 = v13;
  __swift_project_boxed_opaque_existential_1(v25, v25[3]);
  uint64_t v14 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v15 = (uint64_t)v22;
  uint64_t v16 = (uint64_t *)&v22[*(int *)(v11 + 20)];
  *uint64_t v16 = v14;
  v16[1] = v17;
  swift_bridgeObjectRetain();
  Regex<A>.init(_:)();
  uint64_t v18 = (uint64_t)v21;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v7, v23);
  outlined init with take of PredicateExpressions.PredicateRegex(v18, v15, type metadata accessor for PredicateExpressions.PredicateRegex._Storage);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  outlined init with copy of PredicateExpressions.PredicateRegex._Storage(v15, v26, type metadata accessor for PredicateExpressions.PredicateRegex);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of PredicateExpressions.PredicateRegex(v15);
}

uint64_t outlined init with take of PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of PredicateExpressions.PredicateRegex._Storage(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t PredicateExpressions.PredicateRegex.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  type metadata accessor for PredicateExpressions.PredicateRegex(0);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.PredicateRegex@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PredicateExpressions.PredicateRegex.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.PredicateRegex(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance PredicateExpressions.PredicateRegex@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PredicateExpressions.PredicateRegex._Storage(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PredicateExpressions.PredicateRegex._Storage(v1, (uint64_t)v5, type metadata accessor for PredicateExpressions.PredicateRegex._Storage);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, v5, v6);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.PredicateRegex(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t static PredicateExpressions.build_Arg<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _OWORD v31[2] = a3;
  uint64_t v34 = a4;
  v31[1] = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Regex();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t v33 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.PredicateRegex?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[0] = type metadata accessor for PredicateExpressions.PredicateRegex(0);
  uint64_t v17 = *(void *)(v31[0] - 8);
  MEMORY[0x1F4188790](v31[0]);
  uint64_t v19 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v32 = (uint64_t)v31 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, a1, a2, v21);
  dispatch thunk of RegexComponent.regex.getter();
  Regex<A>.init<A>(_:)();
  uint64_t v23 = Regex._literalPattern.getter();
  uint64_t v25 = v24;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a2);
  if (v25)
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v19, v9, v7);
    uint64_t v26 = v31[0];
    uint64_t v27 = (uint64_t *)&v19[*(int *)(v31[0] + 20)];
    *uint64_t v27 = v23;
    v27[1] = v25;
    outlined init with take of PredicateExpressions.PredicateRegex((uint64_t)v19, (uint64_t)v16, type metadata accessor for PredicateExpressions.PredicateRegex);
    uint64_t v28 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v7);
    uint64_t v28 = 1;
    uint64_t v26 = v31[0];
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v16, v28, 1, v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v26) == 1)
  {
    outlined destroy of PredicateExpressions.PredicateRegex?((uint64_t)v16);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v29 = v32;
    outlined init with take of PredicateExpressions.PredicateRegex((uint64_t)v16, v32, type metadata accessor for PredicateExpressions.PredicateRegex);
    return outlined init with take of PredicateExpressions.PredicateRegex(v29, v34, type metadata accessor for PredicateExpressions.PredicateRegex);
  }
  return result;
}

uint64_t outlined destroy of PredicateExpressions.PredicateRegex?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PredicateExpressions.PredicateRegex?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PredicateExpressions.StringContainsRegex<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t PredicateExpressions.StringContainsRegex<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v34 = a4;
  uint64_t v36 = a3;
  uint64_t v32 = a5;
  uint64_t v31 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v11);
  Swift::String v35 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = v13;
  v37[0] = v13;
  v37[1] = v14;
  uint64_t v37[2] = v15;
  uint64_t v38 = v16;
  uint64_t v39 = v18;
  uint64_t v40 = v17;
  uint64_t v19 = type metadata accessor for PredicateExpressions.StringContainsRegex();
  uint64_t v30 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  double v21 = (char *)&v27 - v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v5) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v28 = v21;
  uint64_t v29 = a1;
  uint64_t v27 = v19;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v37, v38);
  uint64_t v22 = v35;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v23 = v28;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v28, v22, v41);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v37, v38);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v24 = v27;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(&v23[*(int *)(v27 + 68)], v9, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  uint64_t v25 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v32, v23, v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v23, v24);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringContainsRegex<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.StringContainsRegex<>.init(from:)(a1, *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.StringContainsRegex<A, B>(void *a1)
{
  return PredicateExpressions.StringContainsRegex<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.StringContainsRegex(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.StringContainsRegex(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x181E42630);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.PredicateRegex(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    unsigned int v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PredicateExpressions.PredicateRegex(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181E42A00);
}

uint64_t sub_181E42A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PredicateExpressions.PredicateRegex._Storage(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.PredicateRegex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181E42AD8);
}

uint64_t sub_181E42AD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for PredicateExpressions.PredicateRegex._Storage(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PredicateExpressions.PredicateRegex._Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  int v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for PredicateExpressions.PredicateRegex._Storage(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for PredicateExpressions.PredicateRegex._Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.PredicateRegex._Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.PredicateRegex._Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.PredicateRegex._Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.PredicateRegex._Storage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181E42E24);
}

uint64_t sub_181E42E24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.PredicateRegex._Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181E42EA8);
}

uint64_t sub_181E42EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void type metadata completion function for PredicateExpressions.PredicateRegex._Storage()
{
  type metadata accessor for Regex<AnyRegexOutput>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_getAssociatedTypeWitness();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v13 = (void *)swift_allocObject();
  _OWORD v13[2] = a5;
  v13[3] = a6;
  void v13[4] = a3;
  v13[5] = a4;
  unint64_t v15[4] = partial apply for closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:);
  v15[5] = v13;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1107296256;
  void v15[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderWriting?, @guaranteed Error?) -> ()) -> (@owned NSProgress?);
  v15[3] = &block_descriptor_18;
  size_t v14 = _Block_copy(v15);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_registerObjectOfClass_visibility_loadHandler_, ObjCClassFromMetadata, a2, v14);
  _Block_release(v14);
}

uint64_t sub_181E430D8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(void, _OWORD *))(v2 + 32);
  v5[1] = *(_OWORD *)(v2 + 16);
  uint64_t v6 = a1;
  uint64_t v7 = a2;
  return v3(partial apply for closure #1 in closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:), v5);
}

uint64_t closure #1 in closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v17 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v17 - v12, a1, v9, v11);
  uint64_t v14 = *(void *)(a5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = dispatch thunk of _ObjectiveCBridgeable._bridgeToObjectiveC()();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v13, a5);
  }
  a3(v15, a2);
  return swift_unknownObjectRelease();
}

id thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderWriting?, @guaranteed Error?) -> ()) -> (@owned NSProgress?)(uint64_t a1, void *aBlock)
{
  uint64_t v2 = *(uint64_t (**)(void, uint64_t))(a1 + 32);
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_retain();
  int v5 = (void *)v2(partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> (), v4);
  swift_release();
  swift_release();

  return v5;
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> ()(uint64_t a1, id a2, uint64_t a3)
{
  if (a2)
  {
    id v5 = a2;
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

id NSItemProvider.canLoadObject<A>(ofClass:)()
{
  swift_getAssociatedTypeWitness();
  return objc_msgSend(v0, sel_canLoadObjectOfClass_, swift_getObjCClassFromMetadata());
}

id NSItemProvider.loadObject<A>(ofClass:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getAssociatedTypeWitness();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  double v11 = (void *)swift_allocObject();
  Foundation::Date v11[2] = a4;
  void v11[3] = a5;
  v11[4] = a2;
  v11[5] = a3;
  unint64_t v15[4] = partial apply for closure #1 in NSItemProvider.loadObject<A>(ofClass:completionHandler:);
  v15[5] = v11;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1107296256;
  void v15[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderReading?, @guaranteed Error?) -> ();
  v15[3] = &block_descriptor_6_1;
  uint64_t v12 = _Block_copy(v15);
  swift_retain();
  swift_release();
  id v13 = objc_msgSend(v5, sel_loadObjectOfClass_completionHandler_, ObjCClassFromMetadata, v12);
  _Block_release(v12);
  return v13;
}

uint64_t closure #1 in NSItemProvider.loadObject<A>(ofClass:completionHandler:)(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v14 - v11;
  if (a1)
  {
    v14[1] = a1;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSItemProviderReading);
    swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v12, 0, 1, a5);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v12, 1, 1, a5);
  }
  a3(v12, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t partial apply for closure #1 in NSItemProvider.loadObject<A>(ofClass:completionHandler:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in NSItemProvider.loadObject<A>(ofClass:completionHandler:)(a1, a2, *(void (**)(char *, uint64_t))(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 16));
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderReading?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_181E437C8()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> ()(uint64_t a1, void *a2)
{
  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> ()(a1, a2, *(void *)(v2 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in NSItemProvider.registerObject<A>(ofClass:visibility:loadHandler:)(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 16));
}

uint64_t initializeWithCopy for AttributedString._InternalRuns(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for AttributedString._InternalRuns(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for AttributedString._InternalRuns(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString._InternalRuns(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString._InternalRuns(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedString._InternalRuns()
{
  return &type metadata for AttributedString._InternalRuns;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString._InternalRuns()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<AttributedString._InternalRuns> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<AttributedString._InternalRuns>);
}

uint64_t AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  swift_unknownObjectRetain();
  uint64_t v14 = specialized Rope.find<A>(at:in:preferEnd:)(a1, a2, a3, a4, a5, a6);
  unint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t result = swift_unknownObjectRelease();
  if (v14 == a6)
  {
    if (a3)
    {
      swift_unknownObjectRetain();
      uint64_t v22 = specialized Rope._Node.distanceFromStart<A>(to:in:)(a6, v16, v18, a3, a4);
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v23 = a1 - v20;
      if (!__OFSUB__(a1, v20))
      {
LABEL_4:
        *a7 = a6;
        a7[1] = v16;
        a7[2] = v18;
        a7[3] = v22;
        a7[4] = v23;
        a7[5] = v20;
        return result;
      }
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = a1 - v20;
      if (!__OFSUB__(a1, v20)) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t AttributedString._InternalRuns.subscript.getter(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v7 = *(_OWORD *)result;
  uint64_t v8 = *(void *)(result + 16);
  if ((void)v7 == a5)
  {
    outlined init with take of LocalePreferences?((uint64_t)&v8, (uint64_t)v9, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
    outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)&v10, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
    if (v10)
    {
      unint64_t v6 = *(void *)(v10 + 24 * ((*((void *)&v7 + 1) >> ((4 * *(unsigned char *)(v10 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_unknownObjectRetain();
      unint64_t v6 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v7 + 1), a2);
      swift_unknownObjectRelease();
    }
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AttributedString._InternalRuns.index(before:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, void *a4@<X8>)
{
  long long v5 = *(_OWORD *)result;
  long long v19 = v5;
  uint64_t v6 = *(void *)(result + 24);
  uint64_t v20 = *(void *)(result + 16);
  uint64_t v7 = *(void *)(result + 32);
  long long v17 = v5;
  uint64_t v18 = v20;
  uint64_t v8 = v6 - 1;
  if (__OFSUB__(v6, 1))
  {
    __break(1u);
    goto LABEL_19;
  }
  if ((void)v5 != a3)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (a2)
  {
    unint64_t v11 = *(unsigned __int8 *)(a2 + 18);
    swift_unknownObjectRetain();
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t result = outlined init with take of LocalePreferences?((uint64_t)&v20, (uint64_t)v21, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v11 >= *((void *)&v19 + 1)) {
    goto LABEL_20;
  }
  outlined init with take of LocalePreferences?((uint64_t)v21, (uint64_t)&v22, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v22)
  {
    char v12 = (4 * *(unsigned char *)(v22 + 18) + 8) & 0x3C;
    if (((*((void *)&v19 + 1) >> v12) & 0xFLL) != 0)
    {
      unint64_t v13 = ((((*((void *)&v19 + 1) >> v12) & 0xFLL) - 1) << v12) | ((-15 << v12) - 1) & *((void *)&v19 + 1);
      *((void *)&v17 + 1) = v13;
      uint64_t result = swift_unknownObjectRelease();
      goto LABEL_12;
    }
  }
  swift_unknownObjectRetain();
  char v14 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v17, a2);
  uint64_t result = swift_unknownObjectRelease_n();
  if (v14)
  {
    unint64_t v13 = *((void *)&v17 + 1);
LABEL_12:
    if ((void)v17 == a3)
    {
      uint64_t v15 = v18;
      if (v18)
      {
        unint64_t v16 = *(void *)(v18 + 24 * ((v13 >> ((4 * *(unsigned char *)(v18 + 18) + 8) & 0x3C)) & 0xF) + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        unint64_t v16 = specialized Rope._Node.subscript.getter(v13, a2);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (!__OFSUB__(v7, v16))
      {
        *a4 = a3;
        a4[1] = v13;
        a4[2] = v15;
        a4[3] = v8;
        a4[4] = v7 - v16;
        return result;
      }
      goto LABEL_22;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized AttributedString._InternalRuns.updateAndCoalesce(at:with:)(uint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v56 = a1[3];
  uint64_t v57 = a1[4];
  int v4 = (void *)a1[2];
  long long v64 = *(_OWORD *)a1;
  double v65 = v4;
  double v60 = specialized Rope.update<A>(at:by:)(&v64, a2, a3);
  int v61 = a2;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v9 = v64;
  long long v67 = v64;
  unint64_t v10 = *((void *)&v64 + 1);
  uint64_t v58 = v11;
  uint64_t v59 = v65;
  *(void *)&long long v68 = v65;
  swift_unknownObjectRetain();
  specialized Rope.formIndex(after:)(&v67, v5, v6, v8, v7);
  swift_unknownObjectRelease();
  unint64_t v13 = *((void *)&v67 + 1);
  uint64_t v12 = v67;
  uint64_t v14 = v68;
  unint64_t v15 = swift_unknownObjectRetain();
  unint64_t v16 = specialized Rope._endPath.getter(v15);
  uint64_t result = swift_unknownObjectRelease();
  if (v13 >= v16)
  {
    unint64_t v20 = v10;
    uint64_t v21 = v9;
    uint64_t v22 = *v61;
    if (!*v61) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v12 != v7)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v14)
  {
    uint64_t v18 = v14 + 24 * ((v13 >> ((4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v19 = *(void *)(v18 + 32);
    unint64_t v13 = *(void *)(v18 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v13, v5);
    uint64_t v19 = v23;
    unint64_t v13 = v24;
    swift_unknownObjectRelease();
  }
  unint64_t v20 = v10;
  uint64_t v21 = v9;
  uint64_t v25 = (uint64_t *)v61;
  if ((specialized static Dictionary<>.== infix(_:_:)(v19, (uint64_t)v60) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v22 = *v61;
    if (!*v61) {
      goto LABEL_20;
    }
LABEL_18:
    unsigned int v30 = *(unsigned __int8 *)(v22 + 18);
    goto LABEL_21;
  }
  char v26 = specialized static Set.== infix(_:_:)(v13, v58);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v26)
  {
    unint64_t v20 = specialized Rope._remove(at:)((uint64_t)&v67, v21, v10);
    unint64_t v27 = *v61;
    unint64_t v28 = v61[3];
    if (v20 < specialized Rope._endPath.getter(*v61) && *(unsigned char *)(v27 + 18))
    {
      uint64_t v29 = (v20 >> ((4 * *(unsigned char *)(v27 + 18) + 8) & 0x3C)) & 0xF;
      swift_unknownObjectRetain();
      specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v27 + 24, v29, v20);
      swift_unknownObjectRelease();
    }
    unint64_t v13 = v67;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v27) {
      goto LABEL_70;
    }
    uint64_t result = specialized Rope._Node._prepareModify(at:)(v20, (uint64_t)v66);
    long long v67 = v66[0];
    long long v68 = v66[1];
    long long v69 = v66[2];
    if (__OFADD__(*((void *)&v66[0] + 1), v13)) {
      goto LABEL_64;
    }
    *((void *)&v67 + 1) = *((void *)&v66[0] + 1) + v13;
    uint64_t v21 = v28 + 1;
    void v61[3] = v28 + 1;
    if (!*v61)
    {
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    uint64_t v25 = (uint64_t *)v61;
    uint64_t v59 = specialized Rope._Node._finalizeModify(_:)(v63, &v67);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v7 = v28 + 1;
  }
  uint64_t v22 = *v25;
  if (*v25) {
    goto LABEL_18;
  }
LABEL_20:
  unsigned int v30 = 0;
LABEL_21:
  if (v20 <= v30)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v48 = v56;
    uint64_t v49 = v57;
    unint64_t v50 = a1;
    uint64_t v31 = v59;
LABEL_42:
    *unint64_t v50 = v21;
    v50[1] = v20;
    _OWORD v50[2] = (uint64_t)v31;
    v50[3] = v48;
    v50[4] = v49;
    return result;
  }
  *(void *)&long long v67 = v21;
  *((void *)&v67 + 1) = v20;
  uint64_t v31 = v59;
  *(void *)&long long v68 = v59;
  if (v21 != v7)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v22)
  {
    unsigned int v32 = *(unsigned __int8 *)(v22 + 18);
    swift_unknownObjectRetain();
    if (v20 > v32) {
      goto LABEL_25;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (!v20) {
    goto LABEL_33;
  }
LABEL_25:
  if (v59)
  {
    char v33 = (4 * *((unsigned char *)v59 + 18) + 8) & 0x3C;
    if (((v20 >> v33) & 0xF) != 0)
    {
      unint64_t v13 = ((((v20 >> v33) & 0xF) - 1) << v33) | ((-15 << v33) - 1) & v20;
      swift_unknownObjectRelease();
      uint64_t v34 = v59;
LABEL_31:
      uint64_t v36 = &v34[3 * ((v13 >> ((4 * *((unsigned char *)v34 + 18) + 8) & 0x3C)) & 0xF)];
      uint64_t v38 = v36[4];
      uint64_t v37 = v36[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_35;
    }
  }
  swift_unknownObjectRetain();
  char v35 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v67, v22);
  uint64_t result = swift_unknownObjectRelease_n();
  if ((v35 & 1) == 0)
  {
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if ((void)v67 != v21)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  unint64_t v13 = *((void *)&v67 + 1);
  uint64_t v34 = (void *)v68;
  if ((void)v68) {
    goto LABEL_31;
  }
LABEL_34:
  swift_unknownObjectRetain();
  specialized Rope._Node.subscript.getter(v13, v22);
  uint64_t v38 = v39;
  uint64_t v37 = v40;
  swift_unknownObjectRelease();
LABEL_35:
  if ((specialized static Dictionary<>.== infix(_:_:)(v38, (uint64_t)v60) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  uint64_t v41 = v21;
  char v42 = specialized static Set.== infix(_:_:)(v37, v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v42 & 1) == 0)
  {
    uint64_t v48 = v56;
    uint64_t v49 = v57;
    unint64_t v50 = a1;
    uint64_t v21 = v41;
    goto LABEL_42;
  }
  unint64_t v43 = specialized Rope._remove(at:)((uint64_t)&v67, v41, v20);
  uint64_t v44 = *v61;
  unint64_t v45 = v61[3];
  if (v43 >= specialized Rope._endPath.getter(*v61))
  {
    uint64_t v46 = 0;
  }
  else
  {
    uint64_t v46 = v44;
    if (*(unsigned char *)(v44 + 18))
    {
      uint64_t v47 = (v43 >> ((4 * *(unsigned char *)(v44 + 18) + 8) & 0x3C)) & 0xF;
      swift_unknownObjectRetain();
      uint64_t v46 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v44 + 24, v47, v43);
      swift_unknownObjectRelease();
    }
  }
  *(void *)&long long v64 = v45;
  *((void *)&v64 + 1) = v43;
  double v65 = (void *)v46;
  uint64_t v51 = v67;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v44)
  {
    if (v43) {
      goto LABEL_47;
    }
    goto LABEL_59;
  }
  unint64_t v52 = *(unsigned __int8 *)(v44 + 18);
  uint64_t result = swift_unknownObjectRetain();
  if (v52 >= v43)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
LABEL_47:
  if (v46)
  {
    char v53 = (4 * *(unsigned char *)(v46 + 18) + 8) & 0x3C;
    if (((v43 >> v53) & 0xF) != 0)
    {
      *((void *)&v64 + 1) = ((((v43 >> v53) & 0xF) - 1) << v53) | ((-15 << v53) - 1) & v43;
      uint64_t result = swift_unknownObjectRelease();
      goto LABEL_52;
    }
  }
  swift_unknownObjectRetain();
  char v54 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v64, v44);
  uint64_t result = swift_unknownObjectRelease_n();
  if ((v54 & 1) == 0)
  {
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if ((void)v64 != v45)
  {
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
LABEL_52:
  if (!v44)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  unint64_t v20 = *((void *)&v64 + 1);
  uint64_t result = specialized Rope._Node._prepareModify(at:)(*((unint64_t *)&v64 + 1), (uint64_t)&v67);
  v63[0] = v67;
  v63[1] = v68;
  _OWORD v63[2] = v69;
  uint64_t v49 = v57 - *((void *)&v67 + 1);
  if (__OFSUB__(v57, *((void *)&v67 + 1))) {
    goto LABEL_66;
  }
  if (__OFADD__(*((void *)&v67 + 1), v51))
  {
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  *((void *)&v63[0] + 1) = *((void *)&v67 + 1) + v51;
  uint64_t v21 = v45 + 1;
  void v61[3] = v45 + 1;
  if (*v61)
  {
    uint64_t v31 = specialized Rope._Node._finalizeModify(_:)(&v62, v63);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v48 = v56 - 1;
    if (!__OFSUB__(v56, 1))
    {
      unint64_t v50 = a1;
      goto LABEL_42;
    }
    goto LABEL_68;
  }
LABEL_73:
  __break(1u);
  return result;
}

uint64_t AttributedString._InternalRuns.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unint64_t v10 = swift_unknownObjectRetain();
  unint64_t v11 = specialized Rope._endPath.getter(v10);
  uint64_t result = swift_unknownObjectRelease();
  if (a1) {
    uint64_t v13 = a3;
  }
  else {
    uint64_t v13 = 0;
  }
  if (a1) {
    uint64_t v14 = a2;
  }
  else {
    uint64_t v14 = 0;
  }
  *a5 = a4;
  a5[1] = v11;
  a5[2] = 0;
  a5[3] = v14;
  a5[4] = v13;
  return result;
}

uint64_t AttributedString._InternalRuns.index(after:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  long long v20 = *(_OWORD *)result;
  uint64_t v7 = *(void *)(result + 24);
  uint64_t v21 = *(void *)(result + 16);
  uint64_t v8 = *(void *)(result + 32);
  long long v18 = v20;
  uint64_t v19 = v21;
  uint64_t v9 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((void)v20 != a5)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  outlined init with take of LocalePreferences?((uint64_t)&v21, (uint64_t)v22, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  outlined init with take of LocalePreferences?((uint64_t)v22, (uint64_t)&v23, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v23)
  {
    unint64_t v14 = *(void *)(v23 + 24 * ((*((void *)&v20 + 1) >> ((4 * *(unsigned char *)(v23 + 18) + 8) & 0x3C)) & 0xFLL) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    unint64_t v14 = specialized Rope._Node.subscript.getter(*((unint64_t *)&v20 + 1), a2);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  BOOL v15 = __OFADD__(v8, v14);
  uint64_t v16 = v8 + v14;
  if (!v15)
  {
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v18, a2, a3, a4, a5);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v17 = v19;
    *(_OWORD *)a6 = v18;
    *(void *)(a6 + 16) = v17;
    *(void *)(a6 + 24) = v9;
    *(void *)(a6 + 32) = v16;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t AttributedString._InternalRuns.index(atRunOffset:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  if (a2) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = 0;
  }
  if (result < 0 || (uint64_t v8 = result, v7 < result))
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v9 = a5;
  uint64_t v10 = a4;
  if (!a2 || a3 <= result || !*(_WORD *)(a2 + 16))
  {
    unint64_t v24 = swift_unknownObjectRetain();
    unint64_t v25 = specialized Rope._endPath.getter(v24);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v15 = 0;
    if (!a2) {
      goto LABEL_53;
    }
    goto LABEL_28;
  }
  uint64_t v13 = *(unsigned __int8 *)(a2 + 18);
  if (!*(unsigned char *)(a2 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    unint64_t v27 = 0;
    uint64_t v14 = v8;
    uint64_t v15 = a2;
    uint64_t v28 = *(unsigned __int16 *)(a2 + 16);
    if (*(_WORD *)(a2 + 16)) {
      goto LABEL_30;
    }
LABEL_41:
    unint64_t v29 = v14;
    goto LABEL_51;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  uint64_t v14 = v8;
  uint64_t v15 = a2;
  do
  {
    uint64_t v17 = *(unsigned __int16 *)(v15 + 16);
    if (*(_WORD *)(v15 + 16))
    {
      uint64_t v18 = *(void *)(v15 + 32);
      BOOL v19 = __OFSUB__(v14, v18);
      uint64_t v20 = v14 - v18;
      if (v19) {
        goto LABEL_59;
      }
      if (__OFADD__(v20, 1)) {
        goto LABEL_60;
      }
      if (v20 + 1 < 1)
      {
        uint64_t v17 = 0;
        goto LABEL_13;
      }
      if (v17 != 1)
      {
        uint64_t v21 = (uint64_t *)(v15 + 56);
        uint64_t v22 = 1;
        while (1)
        {
          uint64_t v23 = *v21;
          v21 += 3;
          uint64_t v14 = v20 - v23;
          if (__OFSUB__(v20, v23)) {
            break;
          }
          if (__OFADD__(v14, 1)) {
            goto LABEL_57;
          }
          if (v14 + 1 < 1)
          {
            uint64_t v17 = v22;
            uint64_t v14 = v20;
            goto LABEL_13;
          }
          ++v22;
          uint64_t v20 = v14;
          if (v17 == v22) {
            goto LABEL_12;
          }
        }
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      uint64_t v14 = v20;
    }
LABEL_12:
    if (v14) {
      goto LABEL_58;
    }
LABEL_13:
    char v16 = (4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C;
    uint64_t v13 = ((-15 << v16) - 1) & v13 | (v17 << v16);
    uint64_t v15 = *(void *)(v15 + 24 + 24 * v17);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
  }
  while (*(unsigned char *)(v15 + 18));
  unint64_t v27 = v13 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v10 = a4;
  uint64_t v9 = a5;
  uint64_t v28 = *(unsigned __int16 *)(v15 + 16);
  if (!*(_WORD *)(v15 + 16)) {
    goto LABEL_41;
  }
LABEL_30:
  unint64_t v29 = v14 - 1;
  if (__OFSUB__(v14, 1)) {
    goto LABEL_63;
  }
  if (__OFADD__(v29, 1))
  {
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    return result;
  }
  if (v14 < 1)
  {
    uint64_t v28 = 0;
    goto LABEL_52;
  }
  if (v28 != 1)
  {
    unint64_t v30 = v28 - 2;
    if (v29 < v28 - 2) {
      unint64_t v30 = v14 - 1;
    }
    if (v30 >= v14 + 0x7FFFFFFFFFFFFFFFLL) {
      unint64_t v30 = v14 + 0x7FFFFFFFFFFFFFFFLL;
    }
    unint64_t v31 = v30 + 1;
    if (v31 >= 5)
    {
      uint64_t v33 = v31 & 3;
      if ((v31 & 3) == 0) {
        uint64_t v33 = 4;
      }
      unint64_t v34 = v31 - v33;
      uint64_t v32 = v34 + 1;
      int64x2_t v35 = 0uLL;
      int64x2_t v36 = (int64x2_t)(unint64_t)(v14 - 1);
      v37.i64[0] = -1;
      v37.i64[1] = -1;
      do
      {
        int64x2_t v36 = vaddq_s64(v36, v37);
        int64x2_t v35 = vaddq_s64(v35, v37);
        v34 -= 4;
      }
      while (v34);
      unint64_t v29 = vaddvq_s64(vaddq_s64(vzip2q_s64(v36, v35), vzip1q_s64(v36, v35)));
    }
    else
    {
      uint64_t v32 = 1;
    }
    while (v14 + 0x8000000000000000 != v32)
    {
      if (v14 == v32)
      {
        uint64_t v28 = v14;
        goto LABEL_52;
      }
      ++v32;
      --v29;
      if (v28 == v32) {
        goto LABEL_51;
      }
    }
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
LABEL_51:
  if (v29) {
    goto LABEL_65;
  }
LABEL_52:
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  unint64_t v25 = v27 | (v28 << 8);
  if (a2)
  {
LABEL_28:
    swift_unknownObjectRetain();
    uint64_t v26 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v25, v15, a2, a3, v10);
    uint64_t result = swift_unknownObjectRelease();
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v26 = 0;
LABEL_54:
  *a6 = v9;
  a6[1] = v25;
  a6[2] = v15;
  a6[3] = v8;
  a6[4] = v26;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString._InternalRuns.Index(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance AttributedString._InternalRuns.Index(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) < *(void *)(a2 + 32);
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance AttributedString._InternalRuns.Index(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32) >= *(void *)(a1 + 32);
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance AttributedString._InternalRuns.Index(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) >= *(void *)(a2 + 32);
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance AttributedString._InternalRuns.Index(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32) < *(void *)(a1 + 32);
}

void *AttributedString._InternalRuns.formIndex(after:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = result[3];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v9 = result;
  result[3] = v7;
  if (*result != a5)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  unint64_t v14 = result[1];
  uint64_t v13 = result[2];
  if (v13)
  {
    unint64_t v15 = *(void *)(v13 + 24 * ((v14 >> ((4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    unint64_t v15 = specialized Rope._Node.subscript.getter(v14, a2);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = (void *)swift_bridgeObjectRelease();
  uint64_t v16 = v9[4];
  BOOL v6 = __OFADD__(v16, v15);
  uint64_t v17 = v16 + v15;
  if (v6) {
    goto LABEL_12;
  }
  v9[4] = v17;
  swift_unknownObjectRetain();
  specialized Rope.formIndex(after:)(v9, a2, a3, a4, a5);

  return (void *)swift_unknownObjectRelease();
}

void *AttributedString._InternalRuns.formIndex(before:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5 = result[3];
  BOOL v6 = __OFSUB__(v5, 1);
  uint64_t v7 = v5 - 1;
  if (v6)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v8 = a5;
  uint64_t v9 = result;
  result[3] = v7;
  if (*result != a5)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v11 = result[1];
  if (!a2)
  {
    if (v11) {
      goto LABEL_5;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v12 = *(unsigned __int8 *)(a2 + 18);
  swift_unknownObjectRetain();
  if (v12 >= v11) {
    goto LABEL_13;
  }
LABEL_5:
  uint64_t v13 = v9[2];
  if (v13 && specialized closure #1 in Rope.formIndex(before:)(v13 + 16, (uint64_t)v9))
  {
    uint64_t result = (void *)swift_unknownObjectRelease();
    goto LABEL_9;
  }
  swift_unknownObjectRetain();
  char v14 = specialized Rope._Node.formPredecessor(of:)((uint64_t)v9, a2);
  uint64_t result = (void *)swift_unknownObjectRelease_n();
  if (v14)
  {
LABEL_9:
    if (*v9 == v8)
    {
      unint64_t v8 = v9[1];
      uint64_t v15 = v9[2];
      if (v15)
      {
        unint64_t v16 = *(void *)(v15 + 24 * ((v8 >> ((4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C)) & 0xF) + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_15;
      }
LABEL_14:
      swift_unknownObjectRetain();
      unint64_t v16 = specialized Rope._Node.subscript.getter(v8, a2);
      swift_unknownObjectRelease();
LABEL_15:
      swift_bridgeObjectRelease();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      uint64_t v17 = v9[4];
      BOOL v6 = __OFSUB__(v17, v16);
      uint64_t v18 = v17 - v16;
      if (!v6)
      {
        v9[4] = v18;
        return result;
      }
      goto LABEL_20;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AttributedString._InternalRuns.index(_:offsetBy:limitedBy:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v8 = a7;
  uint64_t v12 = a2;
  uint64_t v15 = *a1;
  if (a2 < 0)
  {
    uint64_t v16 = a1[4];
    if (v16 >= a3[4]) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v16 = a1[4];
    if (a3[4] >= v16)
    {
      uint64_t v34 = a1[2];
      unint64_t v37 = a1[1];
      unint64_t v30 = a3[1];
      uint64_t v32 = *a3;
      uint64_t v28 = a3[2];
      swift_unknownObjectRetain();
      uint64_t v17 = v8;
      uint64_t v18 = specialized Rope.distance<A>(from:to:in:)(v15, v37, v34, v32, v30, v28, a4, a5, a6, v8);
      uint64_t result = swift_unknownObjectRelease();
      if (v18 >= v12) {
        goto LABEL_7;
      }
LABEL_12:
      uint64_t v22 = 0;
      a6 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v8 = 1;
LABEL_13:
      *a8 = v22;
      a8[1] = a6;
      a8[2] = v8;
      a8[3] = v25;
      a8[4] = v26;
      return result;
    }
  }
  uint64_t v17 = a7;
LABEL_7:
  while (1)
  {
    uint64_t v38 = v16;
    uint64_t v40 = v15;
    int64x2_t v35 = a8;
    uint64_t v20 = a6;
    uint64_t v41 = v12;
    uint64_t v42 = v12;
    uint64_t v12 = a5;
    unint64_t v21 = a1[1];
    a5 = a1[2];
    uint64_t v43 = v15;
    unint64_t v44 = v21;
    uint64_t v45 = a5;
    swift_unknownObjectRetain();
    uint64_t v15 = v17;
    specialized Rope.formIndex<A>(_:offsetBy:in:preferEnd:)((uint64_t)&v43, &v42, 0, a4, v12, a6, v17);
    swift_unknownObjectRelease();
    uint64_t v22 = v43;
    a6 = v44;
    uint64_t v8 = v45;
    swift_unknownObjectRetain();
    uint64_t v16 = specialized Rope.distance<A>(from:to:in:)(v40, v21, a5, v22, a6, v8, a4, v12, v20, v15);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v23 = a1[3];
    BOOL v24 = __OFADD__(v23, v41);
    uint64_t v25 = v23 + v41;
    if (v24) {
      break;
    }
    a8 = v35;
    uint64_t v26 = v38 + v16;
    if (!__OFADD__(v38, v16)) {
      goto LABEL_13;
    }
    __break(1u);
LABEL_11:
    uint64_t v36 = a1[2];
    unint64_t v39 = a1[1];
    unint64_t v31 = a3[1];
    uint64_t v33 = *a3;
    uint64_t v29 = a3[2];
    swift_unknownObjectRetain();
    uint64_t v17 = v8;
    uint64_t v27 = specialized Rope.distance<A>(from:to:in:)(v15, v39, v36, v33, v31, v29, a4, a5, a6, v8);
    uint64_t result = swift_unknownObjectRelease();
    if (v27 > v12) {
      goto LABEL_12;
    }
  }
  __break(1u);
  return result;
}

double protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString._InternalRuns@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString._InternalRuns(a1, (void (*)(_OWORD *__return_ptr, uint64_t, void, void, void, void))AttributedString._InternalRuns.index(before:), a2);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString._InternalRuns(void *a1)
{
  return AttributedString._InternalRuns.formIndex(before:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void protocol witness for Collection.startIndex.getter in conformance AttributedString._InternalRuns(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*v1) {
    uint64_t v2 = *(unsigned __int8 *)(v2 + 18);
  }
  *a1 = v1[3];
  a1[1] = v2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance AttributedString._InternalRuns@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v7 = swift_unknownObjectRetain();
  unint64_t v8 = specialized Rope._endPath.getter(v7);
  uint64_t result = swift_unknownObjectRelease();
  if (v3) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v3) {
    uint64_t v11 = v4;
  }
  else {
    uint64_t v11 = 0;
  }
  *a1 = v5;
  a1[1] = v8;
  a1[2] = 0;
  a1[3] = v11;
  a1[4] = v10;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString._InternalRuns(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v5 = (char *)malloc(0x68uLL);
  *a1 = v5;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *((_OWORD *)v5 + 1) = v6;
  *((void *)v5 + 4) = *(void *)(a2 + 32);
  unint64_t v7 = AttributedString._InternalRuns.subscript.read((void (**)(void **))v5 + 5, (uint64_t)v5, *v2, v2[1], v2[2], v2[3]);
  *((void *)v5 + 9) = v8;
  v5 += 72;
  *((void *)v5 + 2) = v9;
  *((void *)v5 + 3) = v7;
  *((void *)v5 + 1) = v10;
  return protocol witness for Collection.subscript.read in conformance AttributedString._InternalRuns;
}

void protocol witness for Collection.subscript.read in conformance AttributedString._InternalRuns(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  (*(void (**)(void))(*(void *)a1 + 96))();

  free(v1);
}

void (*AttributedString._InternalRuns.subscript.read(void (**a1)(void **a1), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(void **a1)
{
  uint64_t result = (void (*)(void **))malloc(0x38uLL);
  *a1 = result;
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *((void *)result + 2) = *(void *)(a2 + 16);
  if (*(void *)result == a6)
  {
    uint64_t v11 = result;
    uint64_t v12 = (uint64_t)result + 24;
    uint64_t v13 = (uint64_t)result + 32;
    outlined init with take of LocalePreferences?((uint64_t)result + 16, (uint64_t)result + 32, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
    outlined init with take of LocalePreferences?(v13, v12, &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
    uint64_t v14 = *((void *)v11 + 3);
    if (v14)
    {
      uint64_t v15 = v14 + 24 * ((*((void *)v11 + 1) >> ((4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C)) & 0xFLL);
      uint64_t v16 = *(void *)(v15 + 32);
      uint64_t v17 = *(void *)(v15 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v18 = *((void *)v11 + 1);
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v18, a3);
      uint64_t v16 = v19;
      uint64_t v17 = v20;
      swift_unknownObjectRelease();
    }
    *((void *)v11 + 5) = v16;
    *((void *)v11 + 6) = v17;
    return AttributedString._InternalRuns.subscript.read;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AttributedString._InternalRuns.subscript.read(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance AttributedString._InternalRuns@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = a1[3];
  _OWORD v6[2] = a1[2];
  v6[3] = v3;
  v6[4] = a1[4];
  long long v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  return specialized Collection<>.subscript.getter((uint64_t)v6, *(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString._InternalRuns@<X0>(void *a1@<X8>)
{
  return specialized Collection<>.indices.getter(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance AttributedString._InternalRuns()
{
  if (*v0) {
    BOOL v1 = v0[2] == 0;
  }
  else {
    BOOL v1 = 1;
  }
  uint64_t v2 = v1;
  unint64_t v3 = swift_unknownObjectRetain();
  specialized Rope._endPath.getter(v3);
  swift_unknownObjectRelease();
  return v2;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance AttributedString._InternalRuns(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 2;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance AttributedString._InternalRuns@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v20 = a1[3];
  uint64_t v9 = *v3;
  uint64_t v8 = v3[1];
  uint64_t v17 = a1[4];
  uint64_t v18 = v8;
  uint64_t v11 = v3[2];
  uint64_t v10 = v3[3];
  uint64_t v22 = *a1;
  uint64_t v5 = v22;
  unint64_t v23 = v6;
  uint64_t v24 = v7;
  uint64_t v21 = a2;
  swift_unknownObjectRetain();
  specialized Rope.formIndex<A>(_:offsetBy:in:preferEnd:)((uint64_t)&v22, &v21, 0, v9, v8, v11, v10);
  swift_unknownObjectRelease();
  uint64_t v12 = v22;
  unint64_t v13 = v23;
  uint64_t v14 = v24;
  swift_unknownObjectRetain();
  uint64_t v15 = specialized Rope.distance<A>(from:to:in:)(v5, v6, v7, v12, v13, v14, v9, v18, v11, v10);
  uint64_t result = swift_unknownObjectRelease();
  if (__OFADD__(v20, a2))
  {
    __break(1u);
  }
  else if (!__OFADD__(v17, v15))
  {
    *a3 = v12;
    a3[1] = v13;
    a3[2] = v14;
    a3[3] = v20 + a2;
    a3[4] = v17 + v15;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance AttributedString._InternalRuns@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  AttributedString._InternalRuns.index(_:offsetBy:limitedBy:)(a1, a2, a3, *(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), v7);
  return outlined init with take of LocalePreferences?((uint64_t)v7, a4, &demangling cache variable for type metadata for AttributedString._InternalRuns.Index?);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance AttributedString._InternalRuns(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = *v2;
  uint64_t v10 = v2[1];
  uint64_t v12 = v2[2];
  uint64_t v11 = v2[3];
  swift_unknownObjectRetain();
  uint64_t v13 = specialized Rope.distance<A>(from:to:in:)(v3, v4, v5, v6, v7, v8, v9, v10, v12, v11);
  swift_unknownObjectRelease();
  return v13;
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AttributedString._InternalRuns(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *(void *)(a2 + 72);
  if (v2 >= *(void *)(a2 + 32))
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(result + 32);
  if (v2 < *(void *)(a2 + 32) || *(void *)(a2 + 72) < v2) {
    __break(1u);
  }
  return result;
}

{
  if (*(void *)(result + 32) < *(void *)(a2 + 32) || *(void *)(a2 + 72) < *(void *)(result + 72)) {
    __break(1u);
  }
  return result;
}

double protocol witness for Collection.index(after:) in conformance AttributedString._InternalRuns@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString._InternalRuns(a1, (void (*)(_OWORD *__return_ptr, uint64_t, void, void, void, void))AttributedString._InternalRuns.index(after:), a2);
}

double protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString._InternalRuns@<D0>(uint64_t a1@<X0>, void (*a2)(_OWORD *__return_ptr, uint64_t, void, void, void, void)@<X3>, uint64_t a3@<X8>)
{
  a2(v7, a1, *v3, v3[1], v3[2], v3[3]);
  double result = *(double *)v7;
  long long v6 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + 16) = v6;
  *(void *)(a3 + 32) = v8;
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance AttributedString._InternalRuns(void *a1)
{
  return AttributedString._InternalRuns.formIndex(after:)(a1, *v1, v1[1], v1[2], v1[3]);
}

void protocol witness for Sequence.makeIterator() in conformance AttributedString._InternalRuns(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v2 = v1[3];
  uint64_t v4 = *v1;
  if (*v1) {
    uint64_t v4 = *(unsigned __int8 *)(v4 + 18);
  }
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString._InternalRuns()
{
  if (*v0) {
    return v0[1];
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString._InternalRuns()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_unknownObjectRelease();
  return v1;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString._InternalRuns(void *a1, unint64_t *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString._InternalRuns@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_ly10Foundation16AttributedStringV5IndexVqd__Isgyrzo_AJ01_k13ConverterFromiJ0VABsAG_pANRszr__lIetMggrzo_Tp5(a1, a2);
}

unint64_t lazy protocol witness table accessor for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRuns.Index and conformance AttributedString._InternalRuns.Index);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString._InternalRuns()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type DefaultIndices<AttributedString._InternalRuns> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString._InternalRuns>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString._InternalRuns()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<AttributedString._InternalRuns> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString._InternalRuns>);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString._InternalRuns()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRuns> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<AttributedString._InternalRuns> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AttributedString._InternalRuns>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString._InternalRuns()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRuns> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<AttributedString._InternalRuns> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<AttributedString._InternalRuns>);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<AttributedString._InternalRuns> and conformance <> DefaultIndices<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    lazy protocol witness table accessor for type AttributedString._InternalRuns and conformance AttributedString._InternalRuns();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized closure #1 in AttributedString._InternalRuns.updateAndCoalesce(at:with:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *a3 = v6;
  a3[1] = v7;
  swift_bridgeObjectRetain_n();
  return swift_bridgeObjectRetain_n();
}

uint64_t specialized Rope.remove(at:)(uint64_t *a1)
{
  unint64_t v3 = specialized Rope._remove(at:)((uint64_t)&v9, *a1, a1[1]);
  unint64_t v4 = *v1;
  unint64_t v5 = v1[3];
  if (v3 >= specialized Rope._endPath.getter(*v1))
  {
    unint64_t v4 = 0;
  }
  else if (*(unsigned char *)(v4 + 18))
  {
    uint64_t v6 = (v3 >> ((4 * *(unsigned char *)(v4 + 18) + 8) & 0x3C)) & 0xF;
    swift_unknownObjectRetain();
    uint64_t v7 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v4 + 24, v6, v3);
    swift_unknownObjectRelease();
    unint64_t v4 = v7;
  }
  *a1 = v5;
  a1[1] = v3;
  a1[2] = v4;
  return v9;
}

uint64_t specialized static Rope._Node.redistributeChildren(_:_:to:)(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    uint64_t v6 = specialized Rope._Node.copy()(*a1);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    swift_unknownObjectRelease();
    *a1 = v6;
    a1[1] = v8;
    a1[2] = v10;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  uint64_t v12 = *a2;
  if ((result & 1) == 0)
  {
    uint64_t v12 = specialized Rope._Node.copy()(*a2);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t result = swift_unknownObjectRelease();
    *a2 = v12;
    a2[1] = v14;
    a2[2] = v16;
  }
  uint64_t v17 = *(unsigned __int16 *)(*a1 + 16);
  uint64_t v18 = *(unsigned __int16 *)(v12 + 16) + v17;
  if (v18 >= a3) {
    uint64_t v18 = a3;
  }
  uint64_t v19 = v18 - v17;
  if (__OFSUB__(v18, v17))
  {
    __break(1u);
    goto LABEL_16;
  }
  if (!v19) {
    return result;
  }
  if (v19 <= 0)
  {
    BOOL v23 = __OFSUB__(0, v19);
    uint64_t v19 = v17 - v18;
    if (!v23)
    {
      uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:);
      uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:);
      uint64_t v22 = a1;
      return specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)(v22, v19, v20, v21);
    }
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._appendChildren(movingFromPrefixOf:count:);
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._appendChildren(movingFromPrefixOf:count:);
  uint64_t v22 = a2;
  return specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)(v22, v19, v20, v21);
}

uint64_t specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)(uint64_t *a1, uint64_t a2)
{
  return specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:));
}

uint64_t specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *v4;
  int v10 = *(unsigned __int8 *)(*v4 + 18);
  uint64_t v11 = *v4 + 24;
  uint64_t v12 = *a1;
  uint64_t v13 = *a1 + 24;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v14 = v9 + 16;
  uint64_t v15 = v12 + 16;
  if (v10) {
    uint64_t v16 = a4(v15, v13, a2, v14, v11);
  }
  else {
    uint64_t v16 = a3(v15, v13, a2, v14, v11);
  }
  uint64_t v18 = v16;
  uint64_t v19 = v17;
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v21 = v4[1];
  BOOL v22 = __OFADD__(v21, v18);
  uint64_t v23 = v21 + v18;
  if (v22)
  {
    __break(1u);
    goto LABEL_10;
  }
  v4[1] = v23;
  uint64_t v24 = v4[2];
  BOOL v22 = __OFADD__(v24, v19);
  uint64_t v25 = v24 + v19;
  if (v22)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v4[2] = v25;
  uint64_t v26 = a1[1];
  BOOL v22 = __OFSUB__(v26, v18);
  uint64_t v27 = v26 - v18;
  if (v22)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  a1[1] = v27;
  uint64_t v28 = a1[2];
  BOOL v22 = __OFSUB__(v28, v19);
  uint64_t v29 = v28 - v19;
  if (!v22)
  {
    a1[2] = v29;
    return result;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t specialized Rope._UnsafeHandle._appendChildren(movingFromPrefixOf:count:)(_WORD *a1, char *__dst, uint64_t a3, _WORD *a4, uint64_t a5)
{
  if (a3 < 1) {
    return 0;
  }
  int v10 = (char *)(a5 + 24 * (unsigned __int16)*a4);
  uint64_t v11 = &__dst[24 * a3];
  if (v10 != __dst || v10 >= v11) {
    memmove(v10, __dst, 24 * a3);
  }
  uint64_t v13 = (unsigned __int16)*a1 - a3;
  if (v13 < 0) {
    goto LABEL_32;
  }
  memmove(__dst, v11, 24 * v13);
  uint64_t v14 = (unsigned __int16)*a4;
  BOOL v15 = __OFADD__(v14, a3);
  unint64_t v16 = v14 + a3;
  if (v15) {
    goto LABEL_28;
  }
  if ((v16 & 0x8000000000000000) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v16 >> 16)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  *a4 = v16;
  uint64_t v17 = (unsigned __int16)*a1 - a3;
  if (v17 < 0)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t result = 0;
  *a1 = v17;
  unint64_t v19 = (unsigned __int16)*a4;
  unint64_t v20 = v19 - a3;
  if (v19 < a3) {
    unint64_t v20 = 0;
  }
  if (v20 != v19)
  {
    uint64_t v21 = 0;
    uint64_t result = 0;
    if (a3 >= v19) {
      uint64_t v22 = (unsigned __int16)*a4;
    }
    else {
      uint64_t v22 = a3;
    }
    for (uint64_t i = (void *)(24 * (unsigned __int16)*a4 - 24 * v22 + a5 + 16); ; i += 3)
    {
      uint64_t v24 = *(i - 1);
      BOOL v15 = __OFADD__(result, v24);
      result += v24;
      if (v15) {
        break;
      }
      BOOL v15 = __OFADD__(v21, *i);
      v21 += *i;
      if (v15) {
        goto LABEL_27;
      }
      if (!--v22) {
        return result;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  return result;
}

{
  char *v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *i;

  if (a3 < 1) {
    return 0;
  }
  int v10 = (char *)(a5 + 24 * (unsigned __int16)*a4);
  uint64_t v11 = &__dst[24 * a3];
  if (v10 != __dst || v10 >= v11) {
    memmove(v10, __dst, 24 * a3);
  }
  uint64_t v13 = (unsigned __int16)*a1 - a3;
  if (v13 < 0) {
    goto LABEL_32;
  }
  memmove(__dst, v11, 24 * v13);
  uint64_t v14 = (unsigned __int16)*a4;
  BOOL v15 = __OFADD__(v14, a3);
  unint64_t v16 = v14 + a3;
  if (v15) {
    goto LABEL_28;
  }
  if ((v16 & 0x8000000000000000) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v16 >> 16)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  *a4 = v16;
  uint64_t v17 = (unsigned __int16)*a1 - a3;
  if (v17 < 0)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t result = 0;
  *a1 = v17;
  unint64_t v19 = (unsigned __int16)*a4;
  unint64_t v20 = v19 - a3;
  if (v19 < a3) {
    unint64_t v20 = 0;
  }
  if (v20 != v19)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    if (a3 >= v19) {
      uint64_t v23 = (unsigned __int16)*a4;
    }
    else {
      uint64_t v23 = a3;
    }
    for (uint64_t i = (void *)(a5 + 24 * (unsigned __int16)*a4 - 24 * v23); ; i += 3)
    {
      uint64_t result = v21 + 1;
      if (__OFADD__(v21, 1)) {
        break;
      }
      BOOL v15 = __OFADD__(v22, *i);
      v22 += *i;
      if (v15) {
        goto LABEL_27;
      }
      if (v23 == ++v21) {
        return result;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  return result;
}

char *specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:)(_WORD *a1, uint64_t a2, uint64_t a3, _WORD *a4, char *__src)
{
  if (a3 < 1) {
    return 0;
  }
  uint64_t result = (char *)memmove(&__src[24 * a3], __src, 24 * (unsigned __int16)*a4);
  unint64_t v11 = a2 + 24 * (unsigned __int16)*a1;
  uint64_t v12 = (char *)(v11 - 24 * a3);
  if (v11 <= (unint64_t)__src || v12 != __src) {
    uint64_t result = (char *)memmove(__src, v12, 24 * a3);
  }
  uint64_t v14 = (unsigned __int16)*a4;
  BOOL v15 = __OFADD__(v14, a3);
  unint64_t v16 = v14 + a3;
  if (v15)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((v16 & 0x8000000000000000) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v16 >> 16)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  *a4 = v16;
  uint64_t v17 = (unsigned __int16)*a1 - a3;
  if (v17 >= 0)
  {
    *a1 = v17;
    uint64_t v18 = (unsigned __int16)*a4;
    if (v18 >= a3) {
      uint64_t v18 = a3;
    }
    if (v18)
    {
      uint64_t v19 = 0;
      uint64_t result = 0;
      for (uint64_t i = __src + 16; ; i += 3)
      {
        uint64_t v21 = *(i - 1);
        BOOL v15 = __OFADD__(result, v21);
        result += v21;
        if (v15) {
          break;
        }
        BOOL v15 = __OFADD__(v19, *i);
        v19 += *i;
        if (v15) {
          goto LABEL_21;
        }
        if (!--v18) {
          return result;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    return 0;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:)(_WORD *a1, uint64_t a2, uint64_t a3, _WORD *a4, char *__src)
{
  if (a3 < 1) {
    return 0;
  }
  unint64_t v5 = __src;
  uint64_t result = (uint64_t)memmove(&__src[24 * a3], __src, 24 * (unsigned __int16)*a4);
  unint64_t v11 = a2 + 24 * (unsigned __int16)*a1;
  uint64_t v12 = (void *)(v11 - 24 * a3);
  if (v11 <= (unint64_t)v5 || v12 != v5) {
    uint64_t result = (uint64_t)memmove(v5, v12, 24 * a3);
  }
  uint64_t v14 = (unsigned __int16)*a4;
  BOOL v15 = __OFADD__(v14, a3);
  unint64_t v16 = v14 + a3;
  if (v15)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((v16 & 0x8000000000000000) != 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v16 >> 16)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  *a4 = v16;
  uint64_t v17 = (unsigned __int16)*a1 - a3;
  if (v17 < 0)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  *a1 = v17;
  uint64_t v18 = 0;
  if ((unsigned __int16)*a4 >= a3) {
    uint64_t result = a3;
  }
  else {
    uint64_t result = (unsigned __int16)*a4;
  }
  if (result)
  {
    uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v20 = result;
    while (v19)
    {
      BOOL v15 = __OFADD__(v18, *v5);
      v18 += *v5;
      if (v15) {
        goto LABEL_23;
      }
      --v19;
      v5 += 3;
      if (!--v20) {
        return result;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  return result;
}

uint64_t specialized Rope._remove(at:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (v3[3] != a2)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v16 = a3;
  if (!*v3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v5 = (void *)result;
  uint64_t result = specialized Rope._Node.remove(at:)(v14, v15, (uint64_t *)&v16);
  __int16 v6 = result;
  unint64_t v7 = *v3;
  if (*(_WORD *)(*v3 + 16) != 1)
  {
    if (!*(_WORD *)(*v3 + 16))
    {
      swift_unknownObjectRelease();
      unint64_t v7 = 0;
      *unint64_t v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
    }
    goto LABEL_10;
  }
  if (*(unsigned char *)(v7 + 18))
  {
    if (!v7)
    {
LABEL_17:
      __break(1u);
      return result;
    }
    unint64_t v9 = *(void *)(v7 + 32);
    unint64_t v8 = *(void *)(v7 + 40);
    unint64_t v10 = *(void *)(v7 + 24);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
    *unint64_t v3 = v10;
    v3[1] = v9;
    v3[2] = v8;
    if (((v16 - 1) & 0xFFFFFF00) == 0)
    {
      unint64_t v16 = v16 & 0xFFFFFFFFFFFFFF00 | (v16 - 1);
      unint64_t v7 = v10;
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_10:
  v3[3] = a2 + 1;
  uint64_t v11 = v14[1];
  uint64_t v12 = v14[2];
  *unint64_t v5 = v14[0];
  v5[1] = v11;
  _OWORD v5[2] = v12;
  if ((v6 & 0x100) == 0) {
    return v16;
  }
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v13 = specialized Rope._endPath.getter(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v13;
}

uint64_t specialized Rope._Node.remove(at:)(uint64_t *a1, void *a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  uint64_t v9 = *v3;
  if ((result & 1) == 0)
  {
    uint64_t v9 = specialized Rope._Node.copy()(*v3);
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t result = swift_unknownObjectRelease();
    *unint64_t v4 = v9;
    v4[1] = v11;
    v4[2] = v13;
  }
  char v14 = 4 * *(unsigned char *)(v9 + 18);
  char v15 = (v14 + 8) & 0x3C;
  unint64_t v16 = ((unint64_t)*a3 >> v15) & 0xF;
  if (v16 >= *(unsigned __int16 *)(v9 + 16))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (*(unsigned char *)(v9 + 18))
  {
    char v53 = a1;
    swift_unknownObjectRetain();
    unsigned int v17 = specialized Rope._Node.remove(at:)(&v54, v56, a3);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v18 = v56[0];
    uint64_t v19 = v4[1];
    BOOL v20 = __OFSUB__(v19, v56[0]);
    uint64_t v21 = v19 - v56[0];
    if (!v20)
    {
      unint64_t v52 = a2;
      uint64_t v22 = v56[1];
      v4[1] = v21;
      uint64_t v23 = v4[2];
      BOOL v20 = __OFSUB__(v23, v22);
      uint64_t v24 = v23 - v22;
      if (!v20)
      {
        v4[2] = v24;
        uint64_t v25 = v54;
        long long v26 = v55;
        if (v17)
        {
          uint64_t v50 = v54;
          long long v51 = v55;
          uint64_t v45 = (unsigned __int16 *)(*v4 + 16);
          uint64_t v46 = (uint64_t *)(*v4 + 24);
          swift_unknownObjectRetain();
          char v47 = specialized closure #1 in Rope._Node.fixDeficiency(on:)(v45, v46, a3);
          swift_unknownObjectRelease();
          if ((v17 & 0x100) == 0)
          {
            BOOL v28 = 0;
            long long v26 = v51;
            uint64_t v25 = v50;
            goto LABEL_21;
          }
          long long v26 = v51;
          uint64_t v25 = v50;
          if (v47)
          {
LABEL_9:
            uint64_t v27 = ((unint64_t)*a3 >> v15) & 0xF;
            if (v27 >= *(unsigned __int16 *)(*v4 + 16) - 1)
            {
              BOOL v28 = 1;
            }
            else
            {
              BOOL v28 = 0;
              *a3 = (((v27 + 1) << v15) | *a3 & ((-15 << v15) - 1)) & ((-256 << (v14 & 0x3C)) | 0xFF);
            }
            goto LABEL_21;
          }
        }
        else if ((v17 >> 8))
        {
          goto LABEL_9;
        }
        BOOL v28 = 0;
LABEL_21:
        uint64_t *v53 = v25;
        *(_OWORD *)(v53 + 1) = v26;
        *unint64_t v52 = v18;
        v52[1] = v22;
        LODWORD(v44) = *(unsigned __int16 *)(*v4 + 16);
        goto LABEL_22;
      }
      goto LABEL_28;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  char isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  uint64_t v30 = *v4;
  if ((isUniquelyReferenced_nonNull & 1) == 0)
  {
    uint64_t v30 = specialized Rope._Node.copy()(*v4);
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    swift_unknownObjectRelease();
    *unint64_t v4 = v30;
    v4[1] = v32;
    v4[2] = v34;
  }
  swift_unknownObjectRetain();
  uint64_t v35 = specialized Rope._UnsafeHandle._removeChild(at:)(v16, (_WORD *)(v30 + 16), v30 + 24);
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v40 = v4[1];
  BOOL v20 = __OFSUB__(v40, 1);
  uint64_t v41 = v40 - 1;
  if (v20) {
    goto LABEL_29;
  }
  v4[1] = v41;
  uint64_t v42 = v4[2];
  BOOL v20 = __OFSUB__(v42, v35);
  uint64_t v43 = v42 - v35;
  if (v20)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  v4[2] = v43;
  *a1 = v35;
  a1[1] = v37;
  a1[2] = v39;
  *a2 = 1;
  a2[1] = v35;
  uint64_t v44 = *(unsigned __int16 *)(*v4 + 16);
  BOOL v28 = v16 == v44;
LABEL_22:
  BOOL v48 = v44 < 8;
  if (v28) {
    int v49 = 256;
  }
  else {
    int v49 = 0;
  }
  return v49 | v48;
}

uint64_t specialized closure #1 in Rope._Node.fixDeficiency(on:)(unsigned __int16 *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  if (v3 < 2) {
    return 1;
  }
  int v7 = *((unsigned __int8 *)a1 + 2);
  uint64_t v8 = ((unint64_t)*a3 >> ((4 * v7 + 8) & 0x3C)) & 0xF;
  if (!v8)
  {
    uint64_t v20 = *(unsigned __int16 *)(*a2 + 16);
    char v14 = a2 + 3;
    unint64_t v15 = v20 + *(unsigned __int16 *)(a2[3] + 16);
    if (v15 > 0xF)
    {
      specialized static Rope._Node.redistributeChildren(_:_:to:)(a2, v14, v15 >> 1);
      return 0;
    }
    uint64_t v13 = 1;
LABEL_16:
    specialized static Rope._Node.redistributeChildren(_:_:to:)(&a2[3 * v8], v14, v15);
    specialized Rope._UnsafeHandle._removeChild(at:)(v13, a1, (uint64_t)a2);
    swift_unknownObjectRelease();
    return 0;
  }
  uint64_t v9 = &a2[3 * (int)v8 - 3];
  uint64_t v10 = *(unsigned __int16 *)(*v9 + 16);
  uint64_t v11 = &a2[3 * (((unint64_t)*a3 >> ((4 * v7 + 8) & 0x3C)) & 0xF)];
  uint64_t v12 = *(unsigned __int16 *)(*v11 + 16);
  if ((unint64_t)(v12 + v10) < 0x10)
  {
    specialized static Rope._Node.redistributeChildren(_:_:to:)(v9, &a2[3 * (((unint64_t)*a3 >> ((4 * v7 + 8) & 0x3C)) & 0xF)], v12 + v10);
    specialized Rope._UnsafeHandle._removeChild(at:)(v8, a1, (uint64_t)a2);
    uint64_t result = swift_unknownObjectRelease();
    if (((v7 - 1) & 0xFFFFFF00) == 0)
    {
      unint64_t v21 = *a3 & ((-15 << ((4 * v7 + 8) & 0x3C)) - 1) | ((v8 - 1) << ((4 * v7 + 8) & 0x3C));
      uint64_t v19 = ((((v21 >> ((4 * (v7 - 1) + 8) & 0x3C)) & 0xF) + v10) << ((4 * (v7 - 1) + 8) & 0x3C)) | v21 & ((-15 << ((4 * (v7 - 1) + 8) & 0x3C)) - 1);
      goto LABEL_14;
    }
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v13 = v8 + 1;
  if (v8 + 1 < v3)
  {
    char v14 = &a2[3 * v13];
    unint64_t v15 = v12 + *(unsigned __int16 *)(*v14 + 16);
    if (v15 <= 0xF) {
      goto LABEL_16;
    }
  }
  uint64_t result = specialized static Rope._Node.redistributeChildren(_:_:to:)(v9, &a2[3 * v8], (unint64_t)(v12 + v10) >> 1);
  if (((v7 - 1) & 0xFFFFFF00) == 0)
  {
    char v17 = (4 * (v7 - 1) + 8) & 0x3C;
    uint64_t v18 = (((unint64_t)*a3 >> v17) & 0xF) - v12 + *(unsigned __int16 *)(*v11 + 16);
    if (v18 >= 0)
    {
      uint64_t v19 = (v18 << v17) | *a3 & ((-15 << v17) - 1);
LABEL_14:
      *a3 = v19;
      return 1;
    }
    goto LABEL_20;
  }
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 24 * a2);
  if (!*(unsigned char *)(v3 + 18)) {
    return *(void *)(a1 + 24 * a2);
  }
  uint64_t v5 = (a3 >> ((4 * *(unsigned char *)(v3 + 18) + 8) & 0x3C)) & 0xF;
  swift_unknownObjectRetain();
  uint64_t v6 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v3 + 24, v5, a3);
  swift_unknownObjectRelease();
  return v6;
}

ValueMetadata *type metadata accessor for AttributedString._InternalRuns.Index()
{
  return &type metadata for AttributedString._InternalRuns.Index;
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return MEMORY[0x1F4188298](_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5TY0_, 0, 0);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5TY0_()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = *(unsigned __int8 **)(v1 + 8);
  if (v2 == *(unsigned __int8 **)(v1 + 16))
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v0[6] = v6;
    *uint64_t v6 = v0;
    v6[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5TQ1_;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  else
  {
    uint64_t v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    unint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
    return v4(v3);
  }
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5TQ1_(__int16 a1)
{
  unint64_t v4 = (void *)*v2;
  v4[7] = v1;
  swift_task_dealloc();
  if (v1)
  {
    if (v4[3])
    {
      swift_getObjectType();
      uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v7 = 0;
    }
    return MEMORY[0x1F4188298](_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5TY2_, v5, v7);
  }
  else
  {
    uint64_t v8 = (uint64_t (*)(void))v4[1];
    return v8(a1 & 0x1FF);
  }
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return MEMORY[0x1F4188298](_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5TY0_, 0, 0);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5TY0_()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = *(unsigned __int8 **)(v1 + 8);
  if (v2 == *(unsigned __int8 **)(v1 + 16))
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v0[6] = v6;
    *uint64_t v6 = v0;
    v6[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5TQ1_;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  else
  {
    uint64_t v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    unint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
    return v4(v3);
  }
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5TQ1_(__int16 a1)
{
  unint64_t v4 = (void *)*v2;
  v4[7] = v1;
  swift_task_dealloc();
  if (v1)
  {
    if (v4[3])
    {
      swift_getObjectType();
      uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v7 = 0;
    }
    return MEMORY[0x1F4188298](_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5TY2_, v5, v7);
  }
  else
  {
    uint64_t v8 = (uint64_t (*)(void))v4[1];
    return v8(a1 & 0x1FF);
  }
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5TY2_()
{
  v0[2] = v0[7];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

id @nonobjc NSFileHandle.__allocating_init(forReadingFrom:)(void **a1)
{
  v6[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  v6[0] = 0;
  id v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForReadingFromURL_error_, v1, v6);
  if (v2)
  {
    id v3 = v6[0];
  }
  else
  {
    if (v6[0])
    {
      v6[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v4 = (id)_nilObjCError;
    }
    swift_willThrow();
  }

  swift_release();
  swift_release();
  return v2;
}

uint64_t URL.AsyncBytes.AsyncIterator.buffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t URL.AsyncBytes.AsyncIterator.buffer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_unknownObjectRelease();
  *id v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*URL.AsyncBytes.AsyncIterator.buffer.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t URL.AsyncBytes.AsyncIterator.next()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](NSURLSession.AsyncBytes.Iterator.next(), 0, 0);
}

uint64_t closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[14] = a3;
  v4[15] = a4;
  v4[12] = a1;
  v4[13] = a2;
  return MEMORY[0x1F4188298](closure #1 in URL.AsyncBytes.AsyncIterator.init(_:), 0, 0);
}

uint64_t closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)()
{
  uint64_t v1 = *(void **)(v0 + 104);
  swift_retain();
  id v2 = v1;
  swift_retain();
  int v3 = _foundation_swift_url_feature_enabled();
  id v4 = *(void **)(v0 + 104);
  if (v3)
  {
    URL.scheme.getter();
    if (!v5)
    {

      swift_release();
      swift_release();
      goto LABEL_15;
    }
    Swift::String v6 = String.lowercased()();
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void **)(v0 + 104);
    if (v6._countAndFlagsBits == 1701603686 && v6._object == (void *)0xE400000000000000)
    {
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
LABEL_10:
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      uint64_t v9 = static IOActor.default;
      return MEMORY[0x1F4188298](closure #1 in URL.AsyncBytes.AsyncIterator.init(_:), v9, 0);
    }
    unsigned __int8 v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    unsigned __int8 v8 = objc_msgSend(*(id *)(v0 + 104), sel_isFileURL);
  }
  swift_release();
  swift_release();
  if (v8) {
    goto LABEL_10;
  }
LABEL_15:
  uint64_t v10 = *(void *)(v0 + 120);
  long long v17 = *(_OWORD *)(v0 + 104);
  id v11 = objc_msgSend(self, sel_sharedSession);
  *(void *)(v0 + 136) = v11;
  type metadata accessor for NSURLSession.CancelState();
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 144) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v13 = swift_initStackObject();
  *(void *)(v0 + 152) = v13;
  *(_DWORD *)(v13 + 32) = 0;
  *(unsigned char *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  *(void *)(inited + 16) = v13;
  uint64_t v14 = swift_task_alloc();
  *(void *)(v0 + 160) = v14;
  *(void *)(v14 + 16) = v11;
  *(_OWORD *)(v14 + 24) = v17;
  *(void *)(v14 + 40) = v10;
  *(void *)(v14 + 48) = 0;
  *(void *)(v14 + 56) = inited;
  unint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSURLSession.AsyncBytes, NSURLResponse));
  void *v15 = v0;
  v15[1] = closure #1 in URL.AsyncBytes.AsyncIterator.init(_:);
  return MEMORY[0x1F4188148](v0 + 80, &async function pointer to partial apply for closure #1 in NSURLSession.bytes(from:delegate:));
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  void *v6[4];
  void *v7;
  uint64_t v8;

  uint64_t v7 = v0;
  uint64_t v1 = (void *)v0[14];
  id v2 = (void *)v0[15];
  int v3 = (void *)v0[13];
  type metadata accessor for NSFileHandle();
  v6[0] = v3;
  v6[1] = v1;
  id v6[2] = v2;
  id v4 = v3;
  swift_retain();
  swift_retain();
  v0[16] = @nonobjc NSFileHandle.__allocating_init(forReadingFrom:)(v6);
  return MEMORY[0x1F4188298](closure #1 in URL.AsyncBytes.AsyncIterator.init(_:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  unsigned int v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  int *v11;
  void *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  uint64_t v1 = (void *)v0[16];
  type metadata accessor for _AsyncBytesBuffer.Storage();
  id v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 32) = 0;
  int v3 = v1;
  id v4 = objc_msgSend(v3, sel_fileDescriptor);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  Swift::String v6 = v3;
  uint64_t v7 = swift_dynamicCastClassUnconditional();
  unsigned __int8 v8 = *(void *)(v7 + 16);
  *(void *)(v7 + 16) = &async function pointer to partial apply for closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:);
  *(void *)(v7 + 24) = v5;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v8);

  swift_unknownObjectRelease();
  uint64_t v9 = (uint64_t *)v0[12];
  *uint64_t v9 = v2;
  v9[1] = v2 + 33;
  void v9[2] = v2 + 33;
  uint64_t result = swift_dynamicCastClassUnconditional();
  id v11 = *(int **)(result + 16);
  v0[23] = v11;
  v0[24] = *(void *)(result + 24);
  if (v11)
  {
    uint64_t v14 = (uint64_t (*)(uint64_t))((char *)v11 + *v11);
    swift_retain();
    uint64_t v12 = (void *)swift_task_alloc();
    v0[25] = v12;
    *uint64_t v12 = v0;
    v12[1] = closure #1 in URL.AsyncBytes.AsyncIterator.init(_:);
    uint64_t v13 = v0[12];
    return v14(v13);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = closure #1 in URL.AsyncBytes.AsyncIterator.init(_:);
  }
  else
  {
    swift_task_dealloc();
    id v2 = closure #1 in URL.AsyncBytes.AsyncIterator.init(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t result;
  int *v23;
  void *v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t (*v27)(uint64_t);
  uint64_t v28;

  uint64_t v1 = (void *)v0[17];
  swift_release();

  id v2 = v0[10];
  int v3 = (void *)v0[11];
  self;
  id v4 = swift_dynamicCastObjCClass();
  if (!v4)
  {
LABEL_10:
    type metadata accessor for _AsyncBytesBuffer.Storage();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = 0;
    *(void *)(v18 + 24) = 0;
    *(unsigned char *)(v18 + 32) = 0;
    swift_retain_n();
    uint64_t v19 = swift_dynamicCastClassUnconditional();
    uint64_t v20 = *(void *)(v19 + 16);
    *(void *)(v19 + 16) = &async function pointer to partial apply for closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
    *(void *)(v19 + 24) = v2;
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v20);
    swift_release_n();

    swift_unknownObjectRelease();
    unint64_t v21 = (uint64_t *)v0[12];
    *unint64_t v21 = v18;
    v21[1] = v18 + 33;
    _OWORD v21[2] = v18 + 33;
    uint64_t result = swift_dynamicCastClassUnconditional();
    uint64_t v23 = *(int **)(result + 16);
    v0[23] = v23;
    v0[24] = *(void *)(result + 24);
    if (v23)
    {
      uint64_t v27 = (uint64_t (*)(uint64_t))((char *)v23 + *v23);
      swift_retain();
      uint64_t v24 = (void *)swift_task_alloc();
      v0[25] = v24;
      *uint64_t v24 = v0;
      v24[1] = closure #1 in URL.AsyncBytes.AsyncIterator.init(_:);
      uint64_t v25 = v0[12];
      return v27(v25);
    }
    else
    {
      __break(1u);
    }
    return result;
  }
  uint64_t v5 = (void *)v4;
  Swift::String v6 = self;
  uint64_t v7 = v3;
  if (!objc_msgSend(v6, sel_isErrorStatusCode_, objc_msgSend(v5, sel_statusCode)))
  {
LABEL_9:

    goto LABEL_10;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain");
  unsigned __int8 v8 = objc_allocWithZone((Class)NSError);
  uint64_t v9 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v10 = objc_msgSend(v8, sel_initWithDomain_code_userInfo_, v9, -1011, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v11 = objc_msgSend(v10, sel_domain);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain") && v14 == v15)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    int v3 = v15;
    long long v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      __break(1u);
      goto LABEL_9;
    }
  }
  swift_willThrow();

  swift_release();
  long long v26 = (uint64_t (*)(void))v0[1];
  return v26();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 136);
  swift_release();

  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v0[23]);
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  id v2 = v0[27];
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(*(void *)(v0 + 184));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 208) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = closure #1 in URL.AsyncBytes.AsyncIterator.init(_:);
  }
  else
  {
    *(void *)(v4 + 216) = a1;
    uint64_t v5 = closure #1 in URL.AsyncBytes.AsyncIterator.init(_:);
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t _s10Foundation3URLV10AsyncBytesV0C8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5Tu
                                                + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF10Foundation3URLV10AsyncBytesV0G8IteratorV_Tgq5Tu);
  uint64_t v7 = (void *)swift_task_alloc();
  v4[4] = v7;
  *uint64_t v7 = v4;
  v7[1] = _sSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return v9(a2, a3);
}

uint64_t URL.AsyncBytes.makeAsyncIterator()()
{
  id v2 = *(void **)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  type metadata accessor for _AsyncBytesBuffer.Storage();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(unsigned char *)(v4 + 32) = 0;
  uint64_t v5 = (void *)swift_allocObject();
  _OWORD v5[2] = v2;
  v5[3] = v1;
  void v5[4] = v3;
  swift_retain();
  id v6 = v2;
  swift_retain();
  uint64_t v7 = swift_dynamicCastClassUnconditional();
  uint64_t v8 = *(void *)(v7 + 16);
  *(void *)(v7 + 16) = &async function pointer to partial apply for closure #1 in URL.AsyncBytes.AsyncIterator.init(_:);
  *(void *)(v7 + 24) = v5;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v8);
  return v4;
}

uint64_t partial apply for closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)(uint64_t a1)
{
  long long v7 = *(_OWORD *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = partial apply for closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  *(void *)(v5 + 120) = v4;
  *(_OWORD *)(v5 + 104) = v7;
  *(void *)(v5 + 96) = a1;
  return MEMORY[0x1F4188298](closure #1 in URL.AsyncBytes.AsyncIterator.init(_:), 0, 0);
}

void protocol witness for AsyncSequence.makeAsyncIterator() in conformance URL.AsyncBytes(uint64_t *a1@<X8>)
{
  uint64_t v4 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  type metadata accessor for _AsyncBytesBuffer.Storage();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 0;
  long long v7 = (void *)swift_allocObject();
  _OWORD v7[2] = v4;
  v7[3] = v3;
  v7[4] = v5;
  swift_retain();
  id v8 = v4;
  swift_retain();
  uint64_t v9 = swift_dynamicCastClassUnconditional();
  uint64_t v10 = *(void *)(v9 + 16);
  *(void *)(v9 + 16) = &closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)partial apply;
  *(void *)(v9 + 24) = v7;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v10);
  swift_release();
  swift_release();

  *a1 = v6;
  a1[1] = v6 + 33;
  a1[2] = v6 + 33;
}

uint64_t URL.resourceBytes.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  *a1 = *(void *)v1;
  a1[1] = v2;
  a1[2] = v4;
  swift_retain();
  id v5 = v3;

  return swift_retain();
}

uint64_t URL.lines.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  *a1 = *(void *)v1;
  a1[1] = v2;
  a1[2] = v4;
  swift_retain();
  id v5 = v3;

  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type URL.AsyncBytes.AsyncIterator and conformance URL.AsyncBytes.AsyncIterator()
{
  unint64_t result = lazy protocol witness table cache variable for type URL.AsyncBytes.AsyncIterator and conformance URL.AsyncBytes.AsyncIterator;
  if (!lazy protocol witness table cache variable for type URL.AsyncBytes.AsyncIterator and conformance URL.AsyncBytes.AsyncIterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL.AsyncBytes.AsyncIterator and conformance URL.AsyncBytes.AsyncIterator);
  }
  return result;
}

ValueMetadata *type metadata accessor for URL.AsyncBytes()
{
  return &type metadata for URL.AsyncBytes;
}

ValueMetadata *type metadata accessor for URL.AsyncBytes.AsyncIterator()
{
  return &type metadata for URL.AsyncBytes.AsyncIterator;
}

uint64_t closure #1 in URL.AsyncBytes.AsyncIterator.init(_:)partial apply(uint64_t a1)
{
  long long v7 = *(_OWORD *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)partial apply;
  *(void *)(v5 + 120) = v4;
  *(_OWORD *)(v5 + 104) = v7;
  *(void *)(v5 + 96) = a1;
  return MEMORY[0x1F4188298](closure #1 in URL.AsyncBytes.AsyncIterator.init(_:), 0, 0);
}

uint64_t partial apply for closure #2 in NSURLSession.bytes(from:delegate:)()
{
  return closure #2 in NSURLSession.bytes(from:delegate:)(v0);
}

unint64_t type metadata accessor for NSFileHandle()
{
  unint64_t result = lazy cache variable for type metadata for NSFileHandle;
  if (!lazy cache variable for type metadata for NSFileHandle)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSFileHandle);
  }
  return result;
}

uint64_t sub_181E4852C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t FloatingPointFormatStyle.Currency.format(_:)(uint64_t a1, uint64_t a2)
{
  return FloatingPointFormatStyle.Currency.format(_:)(a1, a2, (uint64_t)type metadata accessor for ICUCurrencyNumberFormatter, (uint64_t (*)(uint64_t, uint64_t, uint64_t))static ICUCurrencyNumberFormatter.create<A>(for:));
}

uint64_t FloatingPointFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 FloatingPointFormatStyle.locale.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  __n128 *v1 = *a1;
  return result;
}

uint64_t (*FloatingPointFormatStyle.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t FloatingPointFormatStyle.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.attributed.getter(a1, a2);
}

{
  uint64_t v2;
  uint64_t vars8;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
  type metadata accessor for FloatingPointFormatStyle.Attributed.Style();

  return swift_storeEnumTagMultiPayload();
}

uint64_t static FloatingPointFormatStyle.== infix(_:_:)(long long *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return static FloatingPointFormatStyle.== infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.CodingKeys(a1, a2, a3, (void (*)(unsigned char *, void, void, void))PredicateExpressions.KeyPath<>.CodingKeys.hash(into:));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t FloatingPointFormatStyle.encode(to:)(void *a1, uint64_t a2)
{
  return FloatingPointFormatStyle.encode(to:)(a1, a2, (void (*)(uint64_t, void, void))type metadata accessor for FloatingPointFormatStyle.CodingKeys);
}

Swift::Int FloatingPointFormatStyle.hashValue.getter(uint64_t a1)
{
  return FloatingPointFormatStyle.hashValue.getter(a1, (void (*)(unsigned char *, uint64_t))FloatingPointFormatStyle.hash(into:));
}

uint64_t FloatingPointFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v25 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FloatingPointFormatStyle.CodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v24 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v6 = (char *)&v22 - v5;
  uint64_t v7 = type metadata accessor for FloatingPointFormatStyle();
  uint64_t v22 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (_OWORD *)((char *)&v22 - v8);
  id v11 = (char *)&v22 + *(int *)(v10 + 36) - v8;
  *(void *)id v11 = 0;
  v11[8] = 1;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0x1FFFFFFFELL;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 6) = 0;
  *((_DWORD *)v11 + 18) = 131584;
  *((_WORD *)v11 + 38) = 512;
  uint64_t v12 = &v11[v3[9]];
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = &v11[v3[10]];
  *(void *)uint64_t v14 = 0;
  unsigned char v14[8] = -1;
  v11[v3[11]] = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  long long v26 = v6;
  uint64_t v15 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_1((uint64_t)v11, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  }
  else
  {
    uint64_t v29 = v7;
    uint64_t v16 = v24;
    uint64_t v17 = (uint64_t)v25;
    char v31 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v18 = v9;
    *uint64_t v9 = v30;
    LOBYTE(v30) = 1;
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_5(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for NumberFormatStyleConfiguration.Collection);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v26, v27);
    outlined assign with take of NumberFormatStyleConfiguration.Collection(v17, (uint64_t)v11);
    uint64_t v19 = v22;
    uint64_t v20 = v29;
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v22 + 16))(v23, v18, v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (*(uint64_t (**)(_OWORD *, uint64_t))(v19 + 8))(v18, v20);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointFormatStyle<A>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointFormatStyle<A>(void *a1, uint64_t a2)
{
  return FloatingPointFormatStyle.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>(a1, a2, a3, (void (*)(unsigned char *, uint64_t))FloatingPointFormatStyle.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointFormatStyle<A>(long long *a1, long long *a2, uint64_t a3)
{
  return static FloatingPointFormatStyle.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t (*FloatingPointFormatStyle.Percent.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t FloatingPointFormatStyle.Percent.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.attributed.getter(a1, a2);
}

uint64_t FloatingPointFormatStyle.rounded(rule:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5, v5, a4);
  uint64_t v11 = a5 + *(int *)(a4 + 36);
  uint64_t v12 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v13 = v11 + *(int *)(v12 + 36);
  outlined destroy of FloatingPointRoundingRule?(v13);
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  if ((a3 & 1) == 0)
  {
    uint64_t v17 = v11 + *(int *)(v12 + 40);
    *(void *)uint64_t v17 = a2;
    *(unsigned char *)(v17 + 8) = 1;
  }
  return result;
}

void FloatingPointFormatStyle.hash(into:)(uint64_t a1, uint64_t a2)
{
  void (*v15)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  void *v27;
  char *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  Swift::UInt v50;
  Swift::UInt v51;
  Swift::UInt8 v52;
  Swift::UInt8 v53;
  Swift::UInt8 v54;
  uint64_t v55;
  Swift::UInt64 v56;
  Swift::UInt64 v57;
  int v58;
  Swift::UInt v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  Swift::UInt v64;
  int *v65;
  char *v66;
  uint64_t v67;
  int v68;
  Swift::UInt v69;
  Swift::UInt64 v70;
  Swift::UInt v71;
  void *v72;
  id v73;
  uint64_t v74;
  void *v75;
  id v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned char v81[144];
  char v82[8];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  char v98;
  char v99;
  void v100[18];
  unsigned char v101[144];
  unsigned char v102[152];

  uint64_t v3 = v2;
  uint64_t v78 = a2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  Swift::Int v79 = v5;
  uint64_t v80 = v6;
  MEMORY[0x1F4188790](v5);
  int v77 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 48);
  swift_unknownObjectRetain();
  if ((v13(ObjectType, v11) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v11 + 64))(ObjectType, v11);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 464);
    swift_unknownObjectRetain();
    v15(v100, ObjectType, v11);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v101, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v101, (uint64_t)v102, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v102) == 1)
    {
      Swift::UInt8 v14 = 0;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v101, (uint64_t)v82, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v82[0] == 2)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = v82[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v18);
    uint64_t v19 = v83;
    if (v83)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v19 + 16));
      uint64_t v20 = *(void *)(v19 + 16);
      if (v20)
      {
        outlined retain of LocalePreferences?((uint64_t)v101, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        unint64_t v21 = v19 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v21 += 16;
          --v20;
        }
        while (v20);
        swift_bridgeObjectRelease();
        if (!v84)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v85) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v85)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          uint64_t v22 = v86;
          if (!v86) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v22 = v86;
        if (!v86)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          uint64_t v23 = v87;
          if (!v87)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }
LABEL_24:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v23);
          swift_bridgeObjectRelease();
LABEL_25:
          uint64_t v25 = v89;
          long long v26 = v90;
          uint64_t v76 = v91;
          uint64_t v27 = v92;
          int v73 = v88;
          uint64_t v74 = v2;
          double v72 = v92;
          if (v88)
          {
            BOOL v28 = v10;
            uint64_t v29 = v88;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            long long v30 = v25;
            char v31 = v26;
            uint64_t v32 = v76;
            uint64_t v33 = v27;
            uint64_t v34 = v29;
            _CFObject.hash(into:)();
            if (v25)
            {
LABEL_27:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v35 = v25;
              uint64_t v36 = v26;
              uint64_t v37 = v25;
              _CFObject.hash(into:)();

              long long v26 = v36;
              goto LABEL_30;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            uint64_t v38 = v27;
            uint64_t v39 = v25;
            uint64_t v40 = v26;
            uint64_t v41 = v76;
            BOOL v28 = v10;
            if (v25) {
              goto LABEL_27;
            }
          }
          uint64_t v35 = v25;
          Hasher._combine(_:)(0);
LABEL_30:
          uint64_t v42 = v72;
          Swift::Int v75 = v26;
          if (v26)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v43 = v26;
            _CFObject.hash(into:)();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          uint64_t v44 = v35;
          uint64_t v10 = v28;
          uint64_t v3 = v74;
          if (v76)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v45 = v76;
            _CFObject.hash(into:)();

            if (v42)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v46 = v42;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v42) {
              goto LABEL_35;
            }
          }
          Hasher._combine(_:)(0);
          uint64_t v46 = 0;
LABEL_38:
          char v47 = v75;

          BOOL v48 = v93;
          if (v48)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v48);
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          uint64_t v16 = v78;
          int v49 = v94;
          if (v94)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v49);
            swift_bridgeObjectRelease();
            if (v95)
            {
LABEL_43:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_46:
              uint64_t v17 = v79;
              if (v96 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                uint64_t v50 = v96 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v50);
              }
              if (v97 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                long long v51 = v97 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v51);
              }
              if (v98 == 2)
              {
                unint64_t v52 = 0;
              }
              else
              {
                unint64_t v52 = v98 & 1;
                Hasher._combine(_:)(1u);
              }
              Hasher._combine(_:)(v52);
              if (v99 == 2)
              {
                char v53 = 0;
              }
              else
              {
                uint64_t v54 = v99 & 1;
                Hasher._combine(_:)(1u);
                char v53 = v54;
              }
              Hasher._combine(_:)(v53);
              outlined retain of LocalePreferences?((uint64_t)v101, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v101, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_59;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v95) {
              goto LABEL_43;
            }
          }
          Hasher._combine(_:)(0);
          goto LABEL_46;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v22);
        swift_bridgeObjectRelease();
        uint64_t v23 = v87;
        if (!v87) {
          goto LABEL_17;
        }
        goto LABEL_24;
      }
      outlined init with take of LocalePreferences?((uint64_t)v101, (uint64_t)v81, &demangling cache variable for type metadata for LocalePreferences?);
      uint64_t v24 = v81;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v24 = v82;
    }
    outlined retain of LocalePreferences(v24);
    if (!v84) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  Swift::UInt8 v14 = 1;
LABEL_5:
  Hasher._combine(_:)(v14);
  swift_unknownObjectRelease();
  uint64_t v16 = v78;
  uint64_t v17 = v79;
LABEL_59:
  long long v55 = v3 + *(int *)(v16 + 36);
  if (*(unsigned char *)(v55 + 8))
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v56 = *(void *)v55;
    Hasher._combine(_:)(1u);
    if ((v56 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v57 = v56;
    }
    else {
      uint64_t v57 = 0;
    }
    Hasher._combine(_:)(v57);
  }
  outlined init with take of LocalePreferences?(v55 + 16, (uint64_t)v102, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  uint64_t v58 = *(unsigned __int8 *)(v55 + 73);
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v59 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v59);
  }
  double v60 = *(unsigned __int16 *)(v55 + 74);
  int v61 = v60 | (*(unsigned __int8 *)(v55 + 76) << 16);
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v61 & 1);
    Hasher._combine(_:)((v61 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v61) & 1);
  }
  uint64_t v62 = v80;
  double v63 = *(unsigned __int8 *)(v55 + 77);
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v64 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v64);
  }
  double v65 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  outlined init with copy of FloatingPointRoundingRule?(v55 + v65[9], (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v10, 1, v17) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::Int v66 = v77;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v77, v10, v17);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v66, v17);
  }
  long long v67 = v55 + v65[10];
  long long v68 = *(unsigned __int8 *)(v67 + 8);
  if (v68 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v69 = *(void *)v67;
    Hasher._combine(_:)(1u);
    if (v68)
    {
      Hasher._combine(_:)(1uLL);
      if ((v69 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v70 = v69;
      }
      else {
        uint64_t v70 = 0;
      }
      Hasher._combine(_:)(v70);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v69);
    }
  }
  double v71 = *(unsigned __int8 *)(v55 + v65[11]);
  if (v71 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v71);
  }
}

uint64_t static FloatingPointFormatStyle.Percent.== infix(_:_:)(long long *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return static FloatingPointFormatStyle.== infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FloatingPointFormatStyle.Percent);
}

uint64_t static FloatingPointFormatStyle.== infix(_:_:)(long long *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  long long v10 = *a1;
  long long v13 = *a2;
  long long v14 = v10;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *(int *)(a5(0, a3, a4) + 36);

  return static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)a1 + v11, (char *)a2 + v11);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Percent.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.CodingKeys(a1, a2, a3, (void (*)(unsigned char *, void, void, void))IntegerFormatStyle.Percent.CodingKeys.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, void, void, void))
{
  Hasher.init(_seed:)();
  a4(v8, *v4, *(void *)(a2 + 16), *(void *)(a2 + 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Percent.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Percent.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t FloatingPointFormatStyle.Percent.encode(to:)(void *a1, uint64_t a2)
{
  return FloatingPointFormatStyle.encode(to:)(a1, a2, (void (*)(uint64_t, void, void))type metadata accessor for FloatingPointFormatStyle.Percent.CodingKeys);
}

uint64_t FloatingPointFormatStyle.encode(to:)(void *a1, uint64_t a2, void (*a3)(uint64_t, void, void))
{
  a3(255, *(void *)(a2 + 16), *(void *)(a2 + 24));
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v11 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v8 = (long long *)v11[0];
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v8;
  char v13 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  uint64_t v9 = v11[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v9)
  {
    LOBYTE(v12) = 1;
    type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_5(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for NumberFormatStyleConfiguration.Collection);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int FloatingPointFormatStyle.Percent.hashValue.getter(uint64_t a1)
{
  return FloatingPointFormatStyle.hashValue.getter(a1, (void (*)(unsigned char *, uint64_t))FloatingPointFormatStyle.Percent.hash(into:));
}

uint64_t FloatingPointFormatStyle.Percent.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v25 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FloatingPointFormatStyle.Percent.CodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v24 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v6 = (char *)&v22 - v5;
  uint64_t v7 = type metadata accessor for FloatingPointFormatStyle.Percent();
  uint64_t v22 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (_OWORD *)((char *)&v22 - v8);
  uint64_t v11 = (char *)&v22 + *(int *)(v10 + 36) - v8;
  long long v12 = &v11[v3[9]];
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(void *)uint64_t v11 = 0x4059000000000000;
  v11[8] = 0;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0x1FFFFFFFELL;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 6) = 0;
  *((_DWORD *)v11 + 18) = 131584;
  *((_WORD *)v11 + 38) = 512;
  long long v14 = &v11[v3[10]];
  *(void *)long long v14 = 0;
  unsigned char v14[8] = -1;
  v11[v3[11]] = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  long long v26 = v6;
  uint64_t v15 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_1((uint64_t)v11, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  }
  else
  {
    uint64_t v29 = v7;
    uint64_t v16 = v24;
    uint64_t v17 = (uint64_t)v25;
    char v31 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v18 = v9;
    *uint64_t v9 = v30;
    LOBYTE(v30) = 1;
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_5(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for NumberFormatStyleConfiguration.Collection);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v26, v27);
    outlined assign with take of NumberFormatStyleConfiguration.Collection(v17, (uint64_t)v11);
    uint64_t v19 = v22;
    uint64_t v20 = v29;
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v22 + 16))(v23, v18, v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (*(uint64_t (**)(_OWORD *, uint64_t))(v19 + 8))(v18, v20);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointFormatStyle<A>.Percent@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.Percent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointFormatStyle<A>.Percent(void *a1, uint64_t a2)
{
  return FloatingPointFormatStyle.Percent.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Percent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>(a1, a2, a3, (void (*)(unsigned char *, uint64_t))FloatingPointFormatStyle.Percent.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointFormatStyle<A>.Percent(long long *a1, long long *a2, uint64_t a3)
{
  return static FloatingPointFormatStyle.Percent.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t (*FloatingPointFormatStyle.Currency.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t FloatingPointFormatStyle.Currency.currencyCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FloatingPointFormatStyle.Currency.init(code:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = *a3;
  *(void *)(a4 + 16) = a1;
  *(void *)(a4 + 24) = a2;
  uint64_t v4 = a4 + *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency() + 40);
  uint64_t v5 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v6 = v4 + v5[9];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0x1FFFFFFFELL;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 48) = 0;
  *(_WORD *)(v4 + 72) = 512;
  *(_DWORD *)(v4 + 74) = 2;
  *(unsigned char *)(v4 + 78) = 2;
  uint64_t v9 = v4 + v5[10];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = -1;
  *(unsigned char *)(v4 + v5[11]) = 1;
  *(unsigned char *)(v4 + v5[12]) = 3;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.attributed.getter(a1, a2);
}

uint64_t FloatingPointFormatStyle.Currency.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  *(unsigned char *)(a3 + *(int *)(a2 + 40) + 73) = v6;
  return result;
}

__n128 FloatingPointFormatStyle.Currency.precision(_:)@<Q0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v11 = a1[1];
  long long v12 = *a1;
  __n128 v10 = (__n128)a1[2];
  uint64_t v6 = *((void *)a1 + 6);
  char v7 = *((unsigned char *)a1 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  uint64_t v8 = a3 + *(int *)(a2 + 40);
  *(_OWORD *)(v8 + 16) = v12;
  *(_OWORD *)(v8 + 32) = v11;
  __n128 result = v10;
  *(__n128 *)(v8 + 48) = v10;
  *(void *)(v8 + 64) = v6;
  *(unsigned char *)(v8 + 72) = v7;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *a1;
  int v7 = a1[1];
  int v8 = a1[2];
  int v9 = a1[3];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  if (v7) {
    int v11 = 256;
  }
  else {
    int v11 = 0;
  }
  int v12 = v11 | v6;
  if (v8) {
    int v13 = 0x10000;
  }
  else {
    int v13 = 0;
  }
  if (v9) {
    int v14 = 0x1000000;
  }
  else {
    int v14 = 0;
  }
  *(_DWORD *)(a3 + *(int *)(a2 + 40) + 74) = v12 | v13 | v14;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  *(unsigned char *)(a3 + *(int *)(a2 + 40) + 78) = v6;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.rounded(rule:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5, v5, a4);
  uint64_t v11 = a5 + *(int *)(a4 + 40);
  uint64_t v12 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v13 = v11 + *(int *)(v12 + 36);
  outlined destroy of FloatingPointRoundingRule?(v13);
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  if ((a3 & 1) == 0)
  {
    uint64_t v17 = v11 + *(int *)(v12 + 40);
    *(void *)uint64_t v17 = a2;
    *(unsigned char *)(v17 + 8) = 1;
  }
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.scale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v4 = v3;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v4, a1);
  uint64_t v9 = a2 + *(int *)(a1 + 40);
  *(double *)uint64_t v9 = a3;
  *(unsigned char *)(v9 + 8) = 0;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.presentation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  uint64_t v7 = a3 + *(int *)(a2 + 40);
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  *(unsigned char *)(v7 + *(int *)(result + 44)) = v6;
  return result;
}

uint64_t FloatingPointFormatStyle.Currency.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  uint64_t v7 = a3 + *(int *)(a2 + 40);
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  *(unsigned char *)(v7 + *(int *)(result + 48)) = v6;
  return result;
}

void FloatingPointFormatStyle.Currency.hash(into:)(uint64_t a1, uint64_t a2)
{
  void (*v15)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  Swift::UInt v49;
  Swift::UInt v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  Swift::UInt8 v53;
  uint64_t v54;
  Swift::UInt64 v55;
  Swift::UInt64 v56;
  uint64_t v57;
  int v58;
  Swift::UInt v59;
  unint64_t v60;
  unsigned int v61;
  int v62;
  Swift::UInt v63;
  int *v64;
  char *v65;
  uint64_t v66;
  int v67;
  Swift::UInt v68;
  Swift::UInt64 v69;
  Swift::UInt v70;
  void *v71;
  id v72;
  char *v73;
  void *v74;
  id v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned char v80[144];
  char v81[8];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  char v97;
  char v98;
  void v99[18];
  unsigned char v100[144];
  unsigned char v101[152];

  uint64_t v3 = v2;
  int v77 = a2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v78 = v5;
  Swift::Int v79 = v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v76 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v8 - 8);
  __n128 v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 48);
  swift_unknownObjectRetain();
  if ((v13(ObjectType, v11) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v11 + 64))(ObjectType, v11);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 464);
    swift_unknownObjectRetain();
    v15(v99, ObjectType, v11);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v99, (uint64_t)v100, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v101, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v101) == 1)
    {
      Swift::UInt8 v14 = 0;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v81, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v81[0] == 2)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = v81[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v18);
    uint64_t v19 = v82;
    if (v82)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v19 + 16));
      uint64_t v20 = *(void *)(v19 + 16);
      if (v20)
      {
        outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        unint64_t v21 = v19 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v21 += 16;
          --v20;
        }
        while (v20);
        swift_bridgeObjectRelease();
        if (!v83)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v84) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v84)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          uint64_t v22 = v85;
          if (!v85) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v22 = v85;
        if (!v85)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          uint64_t v23 = v86;
          if (!v86)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }
LABEL_24:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v23);
          swift_bridgeObjectRelease();
LABEL_25:
          uint64_t v25 = v88;
          long long v26 = v89;
          Swift::Int v75 = v90;
          uint64_t v27 = v91;
          double v72 = v87;
          int v73 = v10;
          double v71 = v91;
          if (v87)
          {
            BOOL v28 = v87;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v29 = v25;
            long long v30 = v26;
            char v31 = v75;
            uint64_t v32 = v27;
            uint64_t v33 = v28;
            _CFObject.hash(into:)();
            if (v25)
            {
LABEL_27:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v34 = v25;
              uint64_t v35 = v26;
              uint64_t v36 = v25;
              _CFObject.hash(into:)();

              long long v26 = v35;
              goto LABEL_30;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            uint64_t v37 = v27;
            uint64_t v38 = v25;
            uint64_t v39 = v26;
            uint64_t v40 = v75;
            if (v25) {
              goto LABEL_27;
            }
          }
          uint64_t v34 = v25;
          Hasher._combine(_:)(0);
LABEL_30:
          uint64_t v41 = v71;
          uint64_t v74 = v26;
          if (v26)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v42 = v26;
            _CFObject.hash(into:)();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          uint64_t v43 = v34;
          __n128 v10 = v73;
          if (v75)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v44 = v75;
            _CFObject.hash(into:)();

            if (v41)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v45 = v41;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v41) {
              goto LABEL_35;
            }
          }
          Hasher._combine(_:)(0);
          uint64_t v45 = 0;
LABEL_38:
          uint64_t v46 = v74;

          char v47 = v92;
          if (v47)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v47);
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          uint64_t v16 = v77;
          BOOL v48 = v93;
          if (v93)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v48);
            swift_bridgeObjectRelease();
            if (v94)
            {
LABEL_43:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_46:
              uint64_t v17 = v78;
              if (v95 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                int v49 = v95 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v49);
              }
              if (v96 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                uint64_t v50 = v96 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v50);
              }
              if (v97 == 2)
              {
                long long v51 = 0;
              }
              else
              {
                long long v51 = v97 & 1;
                Hasher._combine(_:)(1u);
              }
              Hasher._combine(_:)(v51);
              if (v98 == 2)
              {
                unint64_t v52 = 0;
              }
              else
              {
                char v53 = v98 & 1;
                Hasher._combine(_:)(1u);
                unint64_t v52 = v53;
              }
              Hasher._combine(_:)(v52);
              outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_59;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v94) {
              goto LABEL_43;
            }
          }
          Hasher._combine(_:)(0);
          goto LABEL_46;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v22);
        swift_bridgeObjectRelease();
        uint64_t v23 = v86;
        if (!v86) {
          goto LABEL_17;
        }
        goto LABEL_24;
      }
      outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v80, &demangling cache variable for type metadata for LocalePreferences?);
      uint64_t v24 = v80;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v24 = v81;
    }
    outlined retain of LocalePreferences(v24);
    if (!v83) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  Swift::UInt8 v14 = 1;
LABEL_5:
  Hasher._combine(_:)(v14);
  swift_unknownObjectRelease();
  uint64_t v16 = v77;
  uint64_t v17 = v78;
LABEL_59:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v54 = v3 + *(int *)(v16 + 40);
  if (*(unsigned char *)(v54 + 8))
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v55 = *(void *)v54;
    Hasher._combine(_:)(1u);
    if ((v55 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v56 = v55;
    }
    else {
      uint64_t v56 = 0;
    }
    Hasher._combine(_:)(v56);
  }
  uint64_t v57 = v79;
  outlined init with take of LocalePreferences?(v54 + 16, (uint64_t)v101, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  uint64_t v58 = *(unsigned __int8 *)(v54 + 73);
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v59 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v59);
  }
  double v60 = *(unsigned int *)(v54 + 74);
  if (*(_DWORD *)(v54 + 74) == 2)
  {
    LOBYTE(v61) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v60 & 1);
    Hasher._combine(_:)((v60 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v60) & 1);
    int v61 = BYTE3(v60) & 1;
  }
  Hasher._combine(_:)(v61);
  uint64_t v62 = *(unsigned __int8 *)(v54 + 78);
  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    double v63 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v63);
  }
  long long v64 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of FloatingPointRoundingRule?(v54 + v64[9], (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v10, 1, v17) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    double v65 = v76;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v76, v10, v17);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v65, v17);
  }
  Swift::Int v66 = v54 + v64[10];
  long long v67 = *(unsigned __int8 *)(v66 + 8);
  if (v67 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v68 = *(void *)v66;
    Hasher._combine(_:)(1u);
    if (v67)
    {
      Hasher._combine(_:)(1uLL);
      if ((v68 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        long long v69 = v68;
      }
      else {
        long long v69 = 0;
      }
      Hasher._combine(_:)(v69);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v68);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v54 + v64[11]));
  uint64_t v70 = *(unsigned __int8 *)(v54 + v64[12]);
  if (v70 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v70);
  }
}

uint64_t static FloatingPointFormatStyle.Currency.== infix(_:_:)(long long *a1, long long *a2)
{
  long long v4 = *a1;
  long long v8 = *a2;
  long long v9 = v4;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v8) & 1) == 0) {
    return 0;
  }
  BOOL v5 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency() + 40);

  return static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)((char *)a1 + v6, (char *)a2 + v6);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Currency.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Currency.CodingKeys(a1, a2, a3, (void (*)(unsigned char *, void, void, void))IntegerFormatStyle.Currency.CodingKeys.hash(into:));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Currency.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Currency.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t FloatingPointFormatStyle.Currency.encode(to:)(void *a1)
{
  type metadata accessor for FloatingPointFormatStyle.Currency.CodingKeys();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  BOOL v5 = (char *)v10 - v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v6 = v2;
  uint64_t v7 = (long long *)v10[0];
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *v7;
  char v12 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  uint64_t v8 = v10[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v8)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 2;
    type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_5(&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v6);
}

Swift::Int FloatingPointFormatStyle.Currency.hashValue.getter(uint64_t a1)
{
  return FloatingPointFormatStyle.hashValue.getter(a1, (void (*)(unsigned char *, uint64_t))FloatingPointFormatStyle.Currency.hash(into:));
}

uint64_t FloatingPointFormatStyle.Currency.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v23 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v23);
  uint64_t v22 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FloatingPointFormatStyle.Currency.CodingKeys();
  swift_getWitnessTable();
  uint64_t v25 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v21 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  BOOL v5 = (char *)&v19 - v4;
  uint64_t v6 = type metadata accessor for FloatingPointFormatStyle.Currency();
  uint64_t v19 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v19 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v24 = v5;
  uint64_t v9 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v26 = v6;
  uint64_t v10 = (uint64_t)a1;
  uint64_t v12 = v21;
  long long v11 = v22;
  char v28 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  uint64_t v13 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)uint64_t v8 = v27;
  LOBYTE(v27) = 1;
  *((void *)v8 + 2) = KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v8 + 3) = v14;
  LOBYTE(v27) = 2;
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_5(&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v15 = (uint64_t)v11;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v13, v25);
  uint64_t v16 = v26;
  _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_1(v15, (uint64_t)&v8[*(int *)(v26 + 40)], type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v17 = v19;
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v20, v8, v16);
  __swift_destroy_boxed_opaque_existential_1(v10);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v8, v16);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointFormatStyle<A>.Currency@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.Currency.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointFormatStyle<A>.Currency(void *a1)
{
  return FloatingPointFormatStyle.Currency.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Currency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>(a1, a2, a3, (void (*)(unsigned char *, uint64_t))FloatingPointFormatStyle.Currency.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointFormatStyle<A>.Currency(long long *a1, long long *a2)
{
  return static FloatingPointFormatStyle.Currency.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance FloatingPointFormatStyle<A>.Currency@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = FloatingPointFormatStyle.Currency.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t FloatingPointFormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.parseStrategy.getter(a1, a2);
}

{
  uint64_t v4;
  double v5;
  uint64_t v6;
  _OWORD *v7;
  void (*v8)(_OWORD *, double);
  int *v9;
  uint64_t v11;

  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (_OWORD *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void (**)(_OWORD *, double))(v4 + 16);
  v8(v7, v5);
  ((void (*)(uint64_t, _OWORD *, uint64_t))v8)(a2, v7, a1);
  swift_getWitnessTable();
  uint64_t v9 = (int *)type metadata accessor for FloatingPointParseStrategy();
  *(unsigned char *)(a2 + v9[11]) = 1;
  *(_OWORD *)(a2 + v9[13]) = *v7;
  _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_1((uint64_t)v7 + *(int *)(a1 + 36), a2 + v9[12], type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t FloatingPointFormatStyle.Currency.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 - 8);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (long long *)((char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void (**)(long long *, uint64_t, uint64_t, double))(v9 + 16);
  v14(v13, v3, a1, v11);
  ((void (*)(uint64_t, long long *, uint64_t))v14)(a2, v13, a1);
  swift_getWitnessTable();
  uint64_t v15 = (int *)type metadata accessor for FloatingPointParseStrategy();
  *(unsigned char *)(a2 + v15[11]) = 1;
  uint64_t v16 = v15[13];
  long long v19 = *v13;
  *(_OWORD *)(a2 + v16) = v19;
  outlined init with copy of NumberFormatStyleConfiguration.Collection((uint64_t)v13 + *(int *)(a1 + 40), (uint64_t)v8, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v17 = *(void (**)(long long *, uint64_t))(v9 + 8);
  swift_unknownObjectRetain();
  v17(v13, a1);
  swift_storeEnumTagMultiPayload();
  return _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_1((uint64_t)v8, a2 + v15[12], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
}

uint64_t FloatingPointFormatStyle.Percent.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.parseStrategy.getter(a1, a2);
}

uint64_t FloatingPointFormatStyle.Attributed.Style.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a1;
  uint64_t v4 = type metadata accessor for FloatingPointFormatStyle.Percent();
  uint64_t v28 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v26 - v5;
  uint64_t v7 = type metadata accessor for FloatingPointFormatStyle.Currency();
  uint64_t v27 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v10 = type metadata accessor for FloatingPointFormatStyle();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v26 - v12;
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v17, v2, a2, v15);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v20 = v27;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v9, v17, v7);
      uint64_t v21 = v29;
      Hasher._combine(_:)(1uLL);
      FloatingPointFormatStyle.Currency.hash(into:)(v21, v7);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v9, v7);
    }
    else
    {
      uint64_t v24 = v28;
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v6, v17, v4);
      uint64_t v25 = v29;
      Hasher._combine(_:)(2uLL);
      FloatingPointFormatStyle.hash(into:)(v25, v4);
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v6, v4);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v17, v10);
    uint64_t v23 = v29;
    Hasher._combine(_:)(0);
    FloatingPointFormatStyle.hash(into:)(v23, v10);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t static FloatingPointFormatStyle.Attributed.Style.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v56 = a1;
  uint64_t v57 = a2;
  uint64_t v2 = type metadata accessor for FloatingPointFormatStyle.Percent();
  uint64_t v48 = *(void *)(v2 - 8);
  uint64_t v49 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v46 = (char *)&v46 - v3;
  uint64_t v4 = type metadata accessor for FloatingPointFormatStyle.Currency();
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  MEMORY[0x1F4188790](v4);
  char v47 = (char *)&v46 - v5;
  uint64_t v6 = type metadata accessor for FloatingPointFormatStyle();
  uint64_t v52 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v46 - v7;
  uint64_t v9 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  char v53 = (char *)&v46 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (long long *)((char *)&v46 - v16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v55 = *(void *)(TupleTypeMetadata2 - 8);
  double v19 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v21 = (char *)&v46 - v20;
  uint64_t v23 = (char *)&v46 + *(int *)(v22 + 48) - v20;
  uint64_t v54 = v10;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  v24((char *)&v46 - v20, v56, v9, v19);
  ((void (*)(char *, uint64_t, uint64_t))v24)(v23, v57, v9);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v26 = v53;
      ((void (*)(char *, char *, uint64_t))v24)(v53, v21, v9);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v28 = v50;
        uint64_t v27 = v51;
        uint64_t v29 = v47;
        (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v23, v51);
        long long v30 = *(_OWORD *)v26;
        long long v58 = *(_OWORD *)v29;
        long long v59 = v30;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v59, (uint64_t)&v58) & 1) != 0
          && (*((void *)v26 + 2) == *((void *)v29 + 2) && *((void *)v26 + 3) == *((void *)v29 + 3)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(&v26[*(int *)(v27 + 40)], &v29[*(int *)(v27 + 40)]) & 1) != 0)
        {
          char v31 = *(void (**)(char *, uint64_t))(v28 + 8);
          v31(v29, v27);
          uint64_t v32 = v26;
LABEL_16:
          v31(v32, v27);
LABEL_24:
          uint64_t v38 = 1;
LABEL_29:
          uint64_t v39 = v54;
          goto LABEL_30;
        }
        uint64_t v40 = *(void (**)(char *, uint64_t))(v28 + 8);
        v40(v29, v27);
        uint64_t v41 = v26;
LABEL_26:
        v40(v41, v27);
        goto LABEL_28;
      }
      (*(void (**)(char *, uint64_t))(v50 + 8))(v26, v51);
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v24)(v12, v21, v9);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v35 = v48;
        uint64_t v27 = v49;
        uint64_t v36 = (long long *)v46;
        (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v46, v23, v49);
        long long v37 = *(_OWORD *)v12;
        long long v58 = *v36;
        long long v59 = v37;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v59, (uint64_t)&v58) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)(&v12[*(int *)(v27 + 36)], (char *)v36 + *(int *)(v27 + 36)) & 1) != 0)
        {
          char v31 = *(void (**)(char *, uint64_t))(v35 + 8);
          v31((char *)v36, v27);
          uint64_t v32 = v12;
          goto LABEL_16;
        }
        uint64_t v40 = *(void (**)(char *, uint64_t))(v35 + 8);
        v40((char *)v36, v27);
        uint64_t v41 = v12;
        goto LABEL_26;
      }
      (*(void (**)(char *, uint64_t))(v48 + 8))(v12, v49);
    }
  }
  else
  {
    uint64_t v33 = (long long *)v8;
    uint64_t v34 = v52;
    ((void (*)(long long *, char *, uint64_t))v24)(v17, v21, v9);
    if (!swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(long long *, char *, uint64_t))(v34 + 32))(v33, v23, v6);
      long long v42 = *v17;
      long long v58 = *v33;
      long long v59 = v42;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v59, (uint64_t)&v58) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v17 + *(int *)(v6 + 36), (char *)v33 + *(int *)(v6 + 36)) & 1) != 0)
      {
        uint64_t v43 = *(void (**)(long long *, uint64_t))(v34 + 8);
        v43(v33, v6);
        v43(v17, v6);
        goto LABEL_24;
      }
      uint64_t v44 = *(void (**)(long long *, uint64_t))(v34 + 8);
      v44(v33, v6);
      v44(v17, v6);
LABEL_28:
      uint64_t v38 = 0;
      goto LABEL_29;
    }
    (*(void (**)(long long *, uint64_t))(v34 + 8))(v17, v6);
  }
  uint64_t v38 = 0;
  uint64_t v39 = v55;
  uint64_t v9 = TupleTypeMetadata2;
LABEL_30:
  (*(void (**)(char *, uint64_t))(v39 + 8))(v21, v9);
  return v38;
}

uint64_t FloatingPointFormatStyle.Attributed.Style.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E6974616F6C66 && a2 == 0xED0000746E696F50;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79636E6572727563 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E6563726570 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t FloatingPointFormatStyle.Attributed.Style.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x676E6974616F6C66;
  }
  if (a1 == 1) {
    return 0x79636E6572727563;
  }
  return 0x746E6563726570;
}

uint64_t FloatingPointFormatStyle.Attributed.Style.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v53 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.PercentCodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v57 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v37 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  uint64_t v54 = (char *)&v37 - v4;
  uint64_t v5 = type metadata accessor for FloatingPointFormatStyle.Percent();
  uint64_t v55 = *(void *)(v5 - 8);
  uint64_t v56 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v52 = (char *)&v37 - v6;
  uint64_t v7 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CurrencyCodingKeys();
  uint64_t v8 = swift_getWitnessTable();
  uint64_t v45 = v7;
  uint64_t v43 = v8;
  uint64_t v9 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v46 = (char *)&v37 - v10;
  uint64_t v11 = type metadata accessor for FloatingPointFormatStyle.Currency();
  uint64_t v47 = *(void *)(v11 - 8);
  uint64_t v48 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v44 = (char *)&v37 - v12;
  uint64_t v13 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.FloatingPointCodingKeys();
  uint64_t v14 = swift_getWitnessTable();
  uint64_t v40 = v13;
  uint64_t v39 = v14;
  uint64_t v42 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v38 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  long long v59 = (char *)&v37 - v15;
  uint64_t v41 = type metadata accessor for FloatingPointFormatStyle();
  uint64_t v60 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  long long v58 = (char *)&v37 - v16;
  uint64_t v17 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CodingKeys();
  swift_getWitnessTable();
  uint64_t v21 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v61 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v37 - v22;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v62, a2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    uint64_t v25 = v23;
    uint64_t v26 = v21;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v28 = v47;
      uint64_t v27 = v48;
      uint64_t v29 = v44;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v44, v20, v48);
      char v64 = 1;
      long long v30 = v46;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      swift_getWitnessTable();
      uint64_t v31 = v50;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v32 = v49;
    }
    else
    {
      uint64_t v28 = v55;
      uint64_t v27 = v56;
      uint64_t v29 = v52;
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v52, v20, v56);
      char v65 = 2;
      long long v30 = v54;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      swift_getWitnessTable();
      uint64_t v31 = v57;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v32 = v37;
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v31);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v27);
  }
  else
  {
    uint64_t v33 = v38;
    uint64_t v34 = v41;
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v58, v20, v41);
    char v63 = 0;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    swift_getWitnessTable();
    uint64_t v35 = v42;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v26 = v21;
    uint64_t v25 = v23;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v59, v35);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v58, v34);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v25, v26);
}

Swift::Int FloatingPointFormatStyle.Attributed.Style.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  FloatingPointFormatStyle.Attributed.Style.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

uint64_t FloatingPointFormatStyle.Attributed.Style.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  long long v68 = a4;
  uint64_t v7 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.PercentCodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v82 = v7;
  uint64_t v66 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v65 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  uint64_t v70 = (char *)&v56 - v8;
  uint64_t v9 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CurrencyCodingKeys();
  uint64_t v79 = swift_getWitnessTable();
  uint64_t v80 = v9;
  uint64_t v64 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v63 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  long long v69 = (char *)&v56 - v10;
  uint64_t v11 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style.FloatingPointCodingKeys();
  uint64_t v77 = swift_getWitnessTable();
  uint64_t v78 = v11;
  uint64_t v62 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v61 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  long long v67 = (char *)&v56 - v12;
  type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CodingKeys();
  swift_getWitnessTable();
  uint64_t v74 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v72 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v14 = (char *)&v56 - v13;
  uint64_t v75 = a2;
  uint64_t v76 = a3;
  uint64_t v71 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style();
  uint64_t v73 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71);
  uint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v56 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v56 - v21;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v56 - v24;
  uint64_t v26 = a1;
  uint64_t v27 = a1[3];
  Swift::Int v83 = v26;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  uint64_t v28 = v84;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v28) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
  }
  uint64_t v56 = v22;
  uint64_t v57 = v19;
  long long v58 = v16;
  uint64_t v60 = 0;
  long long v59 = v25;
  uint64_t v30 = v73;
  uint64_t v29 = v74;
  uint64_t v84 = v14;
  uint64_t v31 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v32 = _ArrayBuffer.requestNativeBuffer()();
  uint64_t v33 = v29;
  if (!v32)
  {
    uint64_t v89 = v31;
    type metadata accessor for Array();
    swift_getWitnessTable();
    uint64_t v32 = _copyCollectionToContiguousArray<A>(_:)();
  }
  swift_bridgeObjectRelease();
  uint64_t v34 = (2 * *(void *)(v32 + 16)) | 1;
  uint64_t v85 = v32;
  uint64_t v86 = v32 + 32;
  uint64_t v87 = 0;
  unint64_t v88 = v34;
  type metadata accessor for ArraySlice();
  swift_getWitnessTable();
  Collection<>.popFirst()();
  uint64_t v35 = v60;
  if (v89 == 3 || v87 != v88 >> 1)
  {
    uint64_t v41 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v43 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v43 = v71;
    uint64_t v44 = v84;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v41 - 8) + 104))(v43, *MEMORY[0x1E4FBBA70], v41);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v44, v33);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
  }
  uint64_t v36 = v84;
  if (!(_BYTE)v89)
  {
    LOBYTE(v89) = 0;
    uint64_t v46 = v67;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    if (!v35)
    {
      type metadata accessor for FloatingPointFormatStyle();
      swift_getWitnessTable();
      uint64_t v38 = v56;
      uint64_t v47 = v62;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v48 = v72;
      (*(void (**)(char *, uint64_t))(v61 + 8))(v46, v47);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v36, v33);
      uint64_t v53 = v71;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v89 != 1)
  {
    LOBYTE(v89) = 2;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v49 = v68;
    if (!v35)
    {
      type metadata accessor for FloatingPointFormatStyle.Percent();
      swift_getWitnessTable();
      uint64_t v50 = v58;
      uint64_t v51 = v66;
      uint64_t v52 = v70;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v52, v51);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v36, v33);
      uint64_t v53 = v71;
      swift_storeEnumTagMultiPayload();
      uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
      uint64_t v55 = v59;
      v54(v59, v50, v53);
LABEL_19:
      v54(v49, v55, v53);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
    }
LABEL_17:
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v36, v29);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
  }
  LOBYTE(v89) = 1;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v37 = v72;
  if (!v35)
  {
    type metadata accessor for FloatingPointFormatStyle.Currency();
    swift_getWitnessTable();
    uint64_t v38 = v57;
    uint64_t v39 = v64;
    uint64_t v40 = v69;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v40, v39);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v33);
    uint64_t v53 = v71;
LABEL_18:
    swift_storeEnumTagMultiPayload();
    uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    uint64_t v55 = v59;
    v54(v59, v38, v53);
    uint64_t v49 = v68;
    goto LABEL_19;
  }
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v29);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Currency.CodingKeys(a1, a2, a3, (void (*)(unsigned char *, void, void, void))FloatingPointParseStrategy.CodingKeys.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Currency.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, void, void, void))
{
  Hasher.init(_seed:)();
  a4(v8, *v4, *(void *)(a2 + 16), *(void *)(a2 + 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys()
{
  return FloatingPointFormatStyle.Attributed.Style.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = FloatingPointFormatStyle.Attributed.Style.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointFormatStyle<A>.Attributed.Style@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return FloatingPointFormatStyle.Attributed.Style.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointFormatStyle<A>.Attributed.Style(void *a1, uint64_t a2)
{
  return FloatingPointFormatStyle.Attributed.Style.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>(a1, a2, a3, (void (*)(unsigned char *, uint64_t))FloatingPointFormatStyle.Attributed.Style.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointFormatStyle<A>.Attributed.Style(uint64_t a1, uint64_t a2)
{
  return static FloatingPointFormatStyle.Attributed.Style.== infix(_:_:)(a1, a2);
}

uint64_t FloatingPointFormatStyle.Attributed.format(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void (*v97)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char v124;
  long long v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  long long v132;
  long long v133;
  long long v134;
  long long v135;
  long long v136;
  long long v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  os_unfair_lock_s *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  char *v159;
  uint64_t v160;
  long long v161;
  void (**v162)(char *, char *, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  unint64_t v177;
  uint64_t v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  char v189;
  long long v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  long long v200;
  long long v201;
  long long v202;
  long long v203;
  long long v204;
  long long v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  os_unfair_lock_s *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char v226;
  char *v227;
  long long v228;
  uint64_t v229;
  uint64_t result;
  char *v231;
  uint64_t v232;
  char *v233;
  void (**v234)(char *, char *, uint64_t);
  uint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  void (**v239)(char *, char *, uint64_t);
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  long long v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  long long v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  long long v263;
  long long v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _OWORD v273[9];
  long long v274;
  _OWORD v275[3];
  _OWORD v276[3];
  _OWORD v277[3];
  long long v278;
  long long v279;
  long long v280;
  uint64_t v281;
  uint64_t v282;
  long long v283;
  long long v284;
  long long v285;
  long long v286;
  long long v287;
  long long v288;
  long long v289;
  long long v290;
  long long v291;
  long long v292;
  long long v293;
  long long v294;
  long long v295;
  long long v296;
  long long v297;
  _OWORD v298[4];

  uint64_t v251 = a1;
  double v241 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v6 = type metadata accessor for FloatingPointFormatStyle.Percent();
  char v239 = *(void (***)(char *, char *, uint64_t))(v6 - 8);
  char v240 = v6;
  MEMORY[0x1F4188790](v6);
  unint64_t v238 = (char *)&v235 - v7;
  uint64_t v8 = type metadata accessor for FloatingPointFormatStyle.Currency();
  int64_t v235 = *(void *)(v8 - 8);
  char v236 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v237 = (char *)&v235 - v9;
  *((void *)&v249 + 1) = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v250 = (char *)&v235 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&unint64_t v249 = type metadata accessor for ICUNumberFormatter.Signature(0);
  MEMORY[0x1F4188790](v249);
  uint64_t v13 = (char *)&v235 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v242 = type metadata accessor for FloatingPointFormatStyle();
  uint64_t v14 = *(void *)(v242 - 8);
  MEMORY[0x1F4188790](v242);
  uint64_t v16 = (char *)&v235 - v15;
  uint64_t v17 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style();
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v235 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))((char *)&v235 - v19, v3, v17, v18);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    char v252 = 0;
    char v240 = v14;
    uint64_t v91 = v242;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v20, v242);
    unint64_t v248 = &v16[*(int *)(v91 + 36)];
    uint64_t v92 = *((void *)v16 + 1);
    uint64_t ObjectType = swift_getObjectType();
    int v94 = *(uint64_t (**)(uint64_t, uint64_t))(v92 + 472);
    swift_unknownObjectRetain();
    uint64_t v95 = v94(ObjectType, v92);
    double v246 = v96;
    double v247 = v95;
    swift_unknownObjectRelease();
    uint64_t v97 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v92 + 464);
    swift_unknownObjectRetain();
    v97(&v264, ObjectType, v92);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)&v264, (uint64_t)v273, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with copy of NumberFormatStyleConfiguration.Collection((uint64_t)v248, (uint64_t)v13, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    int v98 = v249;
    uint64_t v99 = &v13[*(int *)(v249 + 20)];
    int v100 = v246;
    *(void *)uint64_t v99 = v247;
    *((void *)v99 + 1) = v100;
    outlined init with take of LocalePreferences?((uint64_t)v273, (uint64_t)&v13[*(int *)(v98 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
    double v101 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v13);
    _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_1((uint64_t)v13, type metadata accessor for ICUNumberFormatter.Signature);
    if (!v101)
    {
      (*(void (**)(char *, uint64_t))(v240 + 8))(v16, v242);
      goto LABEL_72;
    }
    char v239 = (void (**)(char *, char *, uint64_t))v16;
    Swift::Int v102 = (uint64_t)v250;
    (*(void (**)(char *, uint64_t, uint64_t))(*((void *)&v249 + 1) + 16))(v250, v251, v5);
    *(double *)&__int16 v103 = specialized BinaryFloatingPoint.init<A>(_:)(v102, v5, v4);
    char v104 = ICUNumberFormatterBase.attributedFormatPositions(_:)(v103, 0, 0x100000000);
    if (v105)
    {
      int v107 = v104;
      uint64_t v108 = v105;
      Swift::Int v109 = v106;
      swift_bridgeObjectRetain();
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v275, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v264);
      uint64_t v110 = v264;
      int v111 = *((void *)v109 + 2);
      if (v111)
      {
        unint64_t v238 = (char *)v101;
        swift_bridgeObjectRetain();
        uint64_t v112 = lazy protocol witness table accessor for type String and conformance String();
        double v246 = v107;
        double v247 = v112;
        uint64_t v237 = v109;
        Swift::Int v113 = v109 + 48;
        uint64_t v245 = v108;
        do
        {
          uint64_t v251 = v111;
          uint64_t v114 = *((_DWORD *)v113 - 4);
          unint64_t v254 = v107;
          unint64_t v255 = v108;
          swift_bridgeObjectRetain();
          int v115 = String.Index.init<A>(utf16Offset:in:)();
          unint64_t v254 = v107;
          unint64_t v255 = v108;
          swift_bridgeObjectRetain();
          uint64_t v116 = String.Index.init<A>(utf16Offset:in:)();
          if (v116 >> 14 < v115 >> 14) {
            goto LABEL_84;
          }
          double v117 = v116;
          unint64_t v250 = v113;
          swift_retain();
          specialized Range<>.init<A>(_range:in:)(v115, v117, (_OWORD *)v110, &v254);
          Foundation::Date v118 = v257;
          if (v257 == 2) {
            goto LABEL_90;
          }
          Swift::Int v120 = v254;
          uint64_t v119 = v255;
          unint64_t v248 = (char *)v256;
          unint64_t v249 = v258;
          uint64_t v121 = v259;
          int v122 = v260;
          uint64_t v274 = MEMORY[0x1E4FBC868];
          uint64_t v123 = 0;
          Swift::Int v124 = 2;
          switch(v114)
          {
            case 0:
              goto LABEL_33;
            case 1:
              uint64_t v123 = 1;
LABEL_33:
              specialized AttributeContainer.subscript.setter(v123);
              break;
            case 2:
              goto LABEL_38;
            case 6:
              Swift::Int v124 = 0;
              goto LABEL_38;
            case 7:
              Swift::Int v124 = 3;
              goto LABEL_38;
            case 8:
              Swift::Int v124 = 4;
              goto LABEL_38;
            case 10:
              Swift::Int v124 = 1;
LABEL_38:
              specialized AttributeContainer.subscript.setter(v124);
              break;
            default:
              break;
          }
          uint64_t v263 = v274;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            uint64_t v125 = *(_OWORD *)(v110 + 32);
            uint64_t v292 = *(_OWORD *)(v110 + 16);
            long long v293 = v125;
            long long v294 = *(_OWORD *)(v110 + 48);
            int v126 = *(void *)(v110 + 64);
            uint64_t v127 = *(void *)(v110 + 72);
            double v244 = v121;
            Swift::Int v128 = *(void *)(v110 + 80);
            unint64_t v243 = *(void *)(v110 + 88);
            type metadata accessor for AttributedString.Guts();
            swift_allocObject();
            outlined retain of Locale((uint64_t)&v292);
            swift_unknownObjectRetain();
            uint64_t v129 = v128;
            uint64_t v121 = v244;
            int v130 = AttributedString.Guts.init(string:runs:)(&v292, v126, v127, v129, v243);
            swift_release();
            uint64_t v110 = v130;
          }
          uint64_t v131 = (uint64_t)v248;
          unsigned int v132 = *(_OWORD *)(v110 + 32);
          uint64_t v289 = *(_OWORD *)(v110 + 16);
          uint64_t v290 = v132;
          uint64_t v291 = *(_OWORD *)(v110 + 48);
          swift_retain();
          outlined retain of Locale((uint64_t)&v289);
          BigString.startIndex.getter();
          outlined release of Locale((uint64_t)&v289);
          uint64_t v133 = *(_OWORD *)(v110 + 16);
          int v134 = *(_OWORD *)(v110 + 48);
          long long v287 = *(_OWORD *)(v110 + 32);
          long long v288 = v134;
          long long v286 = v133;
          int v135 = *(_OWORD *)(v110 + 16);
          uint64_t v296 = *(_OWORD *)(v110 + 32);
          uint64_t v297 = v134;
          uint64_t v295 = v135;
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v295, (uint64_t)v298);
          outlined retain of Locale((uint64_t)v298);
          BigString.endIndex.getter();
          outlined release of Locale((uint64_t)&v286);
          swift_release();
          *(void *)&unint64_t v278 = v120;
          *((void *)&v278 + 1) = v119;
          *(void *)&int64_t v279 = v131;
          *((void *)&v279 + 1) = v118;
          uint64_t v280 = v249;
          long long v281 = v121;
          long long v282 = v122;
          uint64_t v136 = *(_OWORD *)(v110 + 16);
          int64_t v137 = *(_OWORD *)(v110 + 48);
          long long v284 = *(_OWORD *)(v110 + 32);
          long long v285 = v137;
          long long v283 = v136;
          swift_retain_n();
          BigString.unicodeScalars.getter();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)v276);
          uint64_t v138 = BigSubstring.UnicodeScalarView.startIndex.getter();
          char v140 = v139;
          uint64_t v142 = v141;
          double v144 = v143;
          uint64_t v145 = BigSubstring.UnicodeScalarView.endIndex.getter();
          double v147 = v146;
          Swift::Int v149 = v148;
          int v151 = v150;
          outlined release of Locale((uint64_t)&v264);
          swift_release();
          unint64_t v254 = v110;
          unint64_t v255 = v138;
          unint64_t v256 = v140;
          uint64_t v257 = v142;
          *(void *)&uint64_t v258 = v144;
          *((void *)&v258 + 1) = v145;
          unint64_t v259 = v147;
          unint64_t v260 = v149;
          uint64_t v261 = v151;
          if (one-time initialization token for currentIdentity != -1) {
            swift_once();
          }
          uint64_t v152 = (uint64_t *)(static AttributedString.currentIdentity + 16);
          Swift::Int v153 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
          swift_retain();
          os_unfair_lock_lock(v153);
          uint64_t v154 = v252;
          closure #1 in static AttributedString._nextModifyIdentity.getter(v152, &v253);
          char v252 = v154;
          os_unfair_lock_unlock(v153);
          swift_release();
          int v155 = v253;
          uint64_t v262 = v253;
          BigString.init()();
          uint64_t v253 = 0;
          MEMORY[0x185309530](&v253, 8);
          uint64_t v156 = v253;
          type metadata accessor for AttributedString.Guts();
          Swift::Int v157 = swift_allocObject();
          Foundation::Date v158 = BigString.isEmpty.getter();
          int v107 = v246;
          Swift::Int v159 = v250;
          Swift::Int v160 = v251;
          if ((v158 & 1) == 0) {
            goto LABEL_87;
          }
          Swift::Int v161 = v277[1];
          *(_OWORD *)(v157 + 16) = v277[0];
          *(_OWORD *)(v157 + 32) = v161;
          *(_OWORD *)(v157 + 48) = v277[2];
          *(void *)(v157 + 64) = 0;
          *(void *)(v157 + 72) = 0;
          *(void *)(v157 + 80) = 0;
          *(void *)(v157 + 88) = v156;
          swift_release();
          LOBYTE(v253) = 0;
          AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v263, (char *)&v253);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v262 != v155) {
            goto LABEL_92;
          }
          Swift::Int v113 = v159 + 24;
          uint64_t v110 = v254;
          swift_release();
          int v111 = v160 - 1;
          uint64_t v108 = v245;
        }
        while (v111);
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      Double.description.getter();
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(&v264, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], &v254);
      swift_release();
      uint64_t v110 = v254;
    }
    unint64_t v232 = v242;
    uint64_t v233 = (char *)v239;
    uint64_t v234 = (void (**)(char *, char *, uint64_t))v240;
    *double v241 = v110;
    return ((uint64_t (*)(char *, uint64_t))v234[1])(v233, v232);
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v163 = (uint64_t)v238;
    uint64_t v162 = v239;
    uint64_t v164 = v240;
    v239[4](v238, v20, v240);
    type metadata accessor for ICUPercentNumberFormatter();
    uint64_t v165 = static ICUPercentNumberFormatter.create<A>(for:)(v163);
    if (!v165)
    {
      ((void (*)(uint64_t, uint64_t))v162[1])(v163, v164);
      goto LABEL_72;
    }
    uint64_t v166 = (char *)v165;
    uint64_t v167 = (uint64_t)v250;
    (*(void (**)(char *, uint64_t, uint64_t))(*((void *)&v249 + 1) + 16))(v250, v251, v5);
    *(double *)&uint64_t v168 = specialized BinaryFloatingPoint.init<A>(_:)(v167, v5, v4);
    double v169 = ICUNumberFormatterBase.attributedFormatPositions(_:)(v168, 0, 0x100000000);
    if (v170)
    {
      Swift::Int v172 = v169;
      uint64_t v173 = v170;
      int v174 = v171;
      uint64_t v237 = v166;
      swift_bridgeObjectRetain();
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v276, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v273);
      uint64_t v175 = *(void *)&v273[0];
      Swift::Int v176 = *(char **)(v174 + 16);
      if (v176)
      {
        char v252 = 0;
        swift_bridgeObjectRetain();
        Swift::Bool v177 = lazy protocol witness table accessor for type String and conformance String();
        double v246 = v173;
        double v247 = v177;
        char v236 = v174;
        double v178 = v174 + 48;
        uint64_t v245 = v172;
        do
        {
          char v179 = *(_DWORD *)(v178 - 16);
          uint64_t v251 = v178;
          *(void *)&uint64_t v264 = v172;
          *((void *)&v264 + 1) = v173;
          swift_bridgeObjectRetain();
          unsigned __int8 v180 = String.Index.init<A>(utf16Offset:in:)();
          *(void *)&uint64_t v264 = v172;
          *((void *)&v264 + 1) = v173;
          swift_bridgeObjectRetain();
          Foundation::Date v181 = String.Index.init<A>(utf16Offset:in:)();
          if (v181 >> 14 < v180 >> 14) {
            goto LABEL_85;
          }
          char v182 = v181;
          unint64_t v250 = v176;
          swift_retain();
          specialized Range<>.init<A>(_range:in:)(v180, v182, (_OWORD *)v175, (uint64_t *)&v264);
          uint64_t v183 = v266;
          if (v266 == 2) {
            goto LABEL_91;
          }
          *(void *)&unint64_t v249 = *((void *)&v264 + 1);
          *((void *)&v249 + 1) = v264;
          unint64_t v248 = (char *)v265;
          Swift::Int_optional v184 = v267;
          Swift::Int_optional v185 = v268;
          Swift::Int_optional v186 = v269;
          Swift::Int_optional v187 = v270;
          v298[0] = MEMORY[0x1E4FBC868];
          Swift::Int_optional v188 = 0;
          Swift::Int_optional v189 = 2;
          switch(v179)
          {
            case 0:
              goto LABEL_55;
            case 1:
              Swift::Int_optional v188 = 1;
LABEL_55:
              specialized AttributeContainer.subscript.setter(v188);
              break;
            case 2:
              goto LABEL_60;
            case 6:
              Swift::Int_optional v189 = 0;
              goto LABEL_60;
            case 7:
              Swift::Int_optional v189 = 3;
              goto LABEL_60;
            case 8:
              Swift::Int_optional v189 = 4;
              goto LABEL_60;
            case 10:
              Swift::Int_optional v189 = 1;
LABEL_60:
              specialized AttributeContainer.subscript.setter(v189);
              break;
            default:
              break;
          }
          uint64_t v274 = v298[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            Swift::Int_optional v190 = *(_OWORD *)(v175 + 32);
            uint64_t v295 = *(_OWORD *)(v175 + 16);
            uint64_t v296 = v190;
            uint64_t v297 = *(_OWORD *)(v175 + 48);
            double v242 = v187;
            unint64_t v243 = v186;
            Swift::Int_optional v191 = v184;
            Swift::Int_optional v192 = *(void *)(v175 + 64);
            Swift::Int_optional v193 = *(void *)(v175 + 72);
            double v244 = v185;
            Swift::Int_optional v194 = *(void *)(v175 + 80);
            Swift::Int_optional v195 = *(void *)(v175 + 88);
            type metadata accessor for AttributedString.Guts();
            swift_allocObject();
            outlined retain of Locale((uint64_t)&v295);
            swift_unknownObjectRetain();
            Swift::Int_optional v196 = v193;
            Swift::Int_optional v184 = v191;
            Swift::Int_optional v197 = v194;
            Swift::Int_optional v185 = v244;
            Swift::Int_optional v198 = v195;
            Swift::Int_optional v187 = v242;
            Swift::Int_optional v186 = v243;
            Swift::Int_optional v199 = AttributedString.Guts.init(string:runs:)(&v295, v192, v196, v197, v198);
            swift_release();
            uint64_t v175 = v199;
          }
          Swift::Int_optional v200 = *(_OWORD *)(v175 + 32);
          uint64_t v292 = *(_OWORD *)(v175 + 16);
          long long v293 = v200;
          long long v294 = *(_OWORD *)(v175 + 48);
          swift_retain();
          outlined retain of Locale((uint64_t)&v292);
          BigString.startIndex.getter();
          outlined release of Locale((uint64_t)&v292);
          Swift::Int_optional v201 = *(_OWORD *)(v175 + 16);
          Swift::Int_optional v202 = *(_OWORD *)(v175 + 48);
          uint64_t v290 = *(_OWORD *)(v175 + 32);
          uint64_t v291 = v202;
          uint64_t v289 = v201;
          Swift::Int_optional v203 = *(_OWORD *)(v175 + 16);
          int64_t v279 = *(_OWORD *)(v175 + 32);
          uint64_t v280 = v202;
          unint64_t v278 = v203;
          outlined init with take of any PredicateExpression<Self.Output == B1>(&v278, (uint64_t)v275);
          outlined retain of Locale((uint64_t)v275);
          BigString.endIndex.getter();
          outlined release of Locale((uint64_t)&v289);
          swift_release();
          unint64_t v254 = *((void *)&v249 + 1);
          unint64_t v255 = v249;
          unint64_t v256 = (uint64_t)v248;
          uint64_t v257 = v183;
          *(void *)&uint64_t v258 = v184;
          *((void *)&v258 + 1) = v185;
          unint64_t v259 = v186;
          unint64_t v260 = v187;
          Swift::Int_optional v204 = *(_OWORD *)(v175 + 16);
          Swift::Int_optional v205 = *(_OWORD *)(v175 + 48);
          long long v287 = *(_OWORD *)(v175 + 32);
          long long v288 = v205;
          long long v286 = v204;
          swift_retain_n();
          BigString.unicodeScalars.getter();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)v277);
          Swift::Int_optional v206 = BigSubstring.UnicodeScalarView.startIndex.getter();
          Swift::Int_optional v208 = v207;
          Swift::Int_optional v210 = v209;
          Swift::Int_optional v212 = v211;
          Swift::Int_optional v213 = BigSubstring.UnicodeScalarView.endIndex.getter();
          Swift::Int_optional v215 = v214;
          Swift::Int_optional v217 = v216;
          Swift::Int_optional v219 = v218;
          outlined release of Locale((uint64_t)v273);
          swift_release();
          *(void *)&uint64_t v264 = v175;
          *((void *)&v264 + 1) = v206;
          unint64_t v265 = v208;
          unint64_t v266 = v210;
          unint64_t v267 = v212;
          uint64_t v268 = v213;
          char v269 = v215;
          uint64_t v270 = v217;
          unint64_t v271 = v219;
          if (one-time initialization token for currentIdentity != -1) {
            swift_once();
          }
          Swift::Int_optional v220 = (uint64_t *)(static AttributedString.currentIdentity + 16);
          Swift::Int_optional v221 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
          swift_retain();
          os_unfair_lock_lock(v221);
          Swift::Int_optional v222 = v252;
          closure #1 in static AttributedString._nextModifyIdentity.getter(v220, (uint64_t *)&v263);
          char v252 = v222;
          os_unfair_lock_unlock(v221);
          swift_release();
          Swift::Int_optional v223 = v263;
          unint64_t v272 = v263;
          BigString.init()();
          *(void *)&uint64_t v263 = 0;
          MEMORY[0x185309530](&v263, 8);
          uint64_t v224 = v263;
          type metadata accessor for AttributedString.Guts();
          unint64_t v225 = swift_allocObject();
          unint64_t v226 = BigString.isEmpty.getter();
          Swift::Int v172 = v245;
          uint64_t v173 = v246;
          long long v227 = v250;
          if ((v226 & 1) == 0) {
            goto LABEL_88;
          }
          uint64_t v228 = v284;
          *(_OWORD *)(v225 + 16) = v283;
          *(_OWORD *)(v225 + 32) = v228;
          *(_OWORD *)(v225 + 48) = v285;
          *(void *)(v225 + 64) = 0;
          *(void *)(v225 + 72) = 0;
          *(void *)(v225 + 80) = 0;
          *(void *)(v225 + 88) = v224;
          swift_release();
          LOBYTE(v263) = 0;
          AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v274, (char *)&v263);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v272 != v223) {
            goto LABEL_92;
          }
          double v178 = v251 + 24;
          uint64_t v175 = v264;
          swift_release();
          Swift::Int v176 = v227 - 1;
        }
        while (v176);
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      Double.description.getter();
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v273, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v264);
      swift_release();
      uint64_t v175 = v264;
    }
    unint64_t v232 = v240;
    uint64_t v233 = v238;
    uint64_t v234 = v239;
    *double v241 = v175;
    return ((uint64_t (*)(char *, uint64_t))v234[1])(v233, v232);
  }
  uint64_t v24 = v235;
  uint64_t v23 = v236;
  uint64_t v25 = v237;
  (*(void (**)(char *, char *, uint64_t))(v235 + 32))(v237, v20, v236);
  type metadata accessor for ICUCurrencyNumberFormatter();
  uint64_t v26 = static ICUCurrencyNumberFormatter.create<A>(for:)(v25);
  if (!v26)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v23);
LABEL_72:
    uint64_t v229 = (uint64_t)v250;
    (*(void (**)(char *, uint64_t, uint64_t))(*((void *)&v249 + 1) + 16))(v250, v251, v5);
    specialized BinaryFloatingPoint.init<A>(_:)(v229, v5, v4);
    Double.description.getter();
    BigString.init(_:)();
    uint64_t result = AttributedString.init(_:attributes:)(v273, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v264);
    *double v241 = v264;
    return result;
  }
  uint64_t v27 = v26;
  uint64_t v28 = (uint64_t)v250;
  (*(void (**)(char *, uint64_t, uint64_t))(*((void *)&v249 + 1) + 16))(v250, v251, v5);
  *(double *)&uint64_t v29 = specialized BinaryFloatingPoint.init<A>(_:)(v28, v5, v4);
  uint64_t v30 = ICUNumberFormatterBase.attributedFormatPositions(_:)(v29, 0, 0x100000000);
  if (!v31)
  {
    Double.description.getter();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v273, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v264);
    swift_release();
    uint64_t v36 = v264;
    goto LABEL_77;
  }
  uint64_t v33 = v30;
  unint64_t v34 = v31;
  uint64_t v35 = v32;
  double v242 = v27;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v276, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v273);
  uint64_t v36 = *(void *)&v273[0];
  if (!*(void *)(v35 + 16)) {
    goto LABEL_73;
  }
  uint64_t v251 = *(void *)(v35 + 16);
  char v252 = 0;
  swift_bridgeObjectRetain();
  unint64_t v37 = lazy protocol witness table accessor for type String and conformance String();
  double v247 = v34;
  unint64_t v248 = (char *)v37;
  char v240 = v35;
  uint64_t v38 = (char *)(v35 + 48);
  double v246 = v33;
  do
  {
    int v39 = *((_DWORD *)v38 - 4);
    *(void *)&uint64_t v264 = v33;
    *((void *)&v264 + 1) = v34;
    swift_bridgeObjectRetain();
    unint64_t v40 = String.Index.init<A>(utf16Offset:in:)();
    *(void *)&uint64_t v264 = v33;
    *((void *)&v264 + 1) = v34;
    swift_bridgeObjectRetain();
    unint64_t v41 = String.Index.init<A>(utf16Offset:in:)();
    if (v41 >> 14 < v40 >> 14)
    {
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181E4F9CCLL);
    }
    unint64_t v42 = v41;
    unint64_t v250 = v38;
    swift_retain();
    specialized Range<>.init<A>(_range:in:)(v40, v42, (_OWORD *)v36, (uint64_t *)&v264);
    uint64_t v43 = v266;
    if (v266 == 2) {
      goto LABEL_89;
    }
    uint64_t v44 = v264;
    *(void *)&unint64_t v249 = v265;
    *((void *)&v249 + 1) = *((void *)&v264 + 1);
    uint64_t v45 = v267;
    uint64_t v46 = v268;
    uint64_t v47 = v269;
    uint64_t v48 = v270;
    v298[0] = MEMORY[0x1E4FBC868];
    char v49 = 0;
    char v50 = 2;
    switch(v39)
    {
      case 0:
        goto LABEL_11;
      case 1:
        char v49 = 1;
LABEL_11:
        specialized AttributeContainer.subscript.setter(v49);
        break;
      case 2:
        goto LABEL_16;
      case 6:
        char v50 = 0;
        goto LABEL_16;
      case 7:
        char v50 = 3;
        goto LABEL_16;
      case 8:
        char v50 = 4;
        goto LABEL_16;
      case 10:
        char v50 = 1;
LABEL_16:
        specialized AttributeContainer.subscript.setter(v50);
        break;
      default:
        break;
    }
    uint64_t v274 = v298[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      long long v51 = *(_OWORD *)(v36 + 32);
      uint64_t v295 = *(_OWORD *)(v36 + 16);
      uint64_t v296 = v51;
      uint64_t v297 = *(_OWORD *)(v36 + 48);
      double v244 = v48;
      uint64_t v245 = v46;
      uint64_t v52 = v45;
      uint64_t v53 = *(void *)(v36 + 64);
      uint64_t v54 = *(void *)(v36 + 72);
      uint64_t v55 = v47;
      unint64_t v243 = v44;
      uint64_t v56 = *(void *)(v36 + 80);
      uint64_t v57 = *(void *)(v36 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v295);
      swift_unknownObjectRetain();
      uint64_t v58 = v54;
      uint64_t v45 = v52;
      uint64_t v59 = v56;
      uint64_t v47 = v55;
      uint64_t v48 = v244;
      uint64_t v46 = v245;
      uint64_t v60 = v57;
      uint64_t v44 = v243;
      uint64_t v61 = AttributedString.Guts.init(string:runs:)(&v295, v53, v58, v59, v60);
      swift_release();
      uint64_t v36 = v61;
    }
    long long v62 = *(_OWORD *)(v36 + 32);
    uint64_t v292 = *(_OWORD *)(v36 + 16);
    long long v293 = v62;
    long long v294 = *(_OWORD *)(v36 + 48);
    swift_retain();
    outlined retain of Locale((uint64_t)&v292);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v292);
    long long v63 = *(_OWORD *)(v36 + 16);
    long long v64 = *(_OWORD *)(v36 + 48);
    uint64_t v290 = *(_OWORD *)(v36 + 32);
    uint64_t v291 = v64;
    uint64_t v289 = v63;
    long long v65 = *(_OWORD *)(v36 + 16);
    int64_t v279 = *(_OWORD *)(v36 + 32);
    uint64_t v280 = v64;
    unint64_t v278 = v65;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v278, (uint64_t)v275);
    outlined retain of Locale((uint64_t)v275);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v289);
    swift_release();
    unint64_t v254 = v44;
    unint64_t v255 = *((void *)&v249 + 1);
    unint64_t v256 = v249;
    uint64_t v257 = v43;
    *(void *)&uint64_t v258 = v45;
    *((void *)&v258 + 1) = v46;
    unint64_t v259 = v47;
    unint64_t v260 = v48;
    long long v66 = *(_OWORD *)(v36 + 16);
    long long v67 = *(_OWORD *)(v36 + 48);
    long long v287 = *(_OWORD *)(v36 + 32);
    long long v288 = v67;
    long long v286 = v66;
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v277);
    uint64_t v68 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v70 = v69;
    uint64_t v72 = v71;
    uint64_t v74 = v73;
    uint64_t v75 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v77 = v76;
    uint64_t v79 = v78;
    uint64_t v81 = v80;
    outlined release of Locale((uint64_t)v273);
    swift_release();
    *(void *)&uint64_t v264 = v36;
    *((void *)&v264 + 1) = v68;
    unint64_t v265 = v70;
    unint64_t v266 = v72;
    unint64_t v267 = v74;
    uint64_t v268 = v75;
    char v269 = v77;
    uint64_t v270 = v79;
    unint64_t v271 = v81;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    uint64_t v82 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    Swift::Int v83 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v83);
    uint64_t v84 = v252;
    closure #1 in static AttributedString._nextModifyIdentity.getter(v82, (uint64_t *)&v263);
    char v252 = v84;
    os_unfair_lock_unlock(v83);
    swift_release();
    uint64_t v85 = v263;
    unint64_t v272 = v263;
    BigString.init()();
    *(void *)&uint64_t v263 = 0;
    MEMORY[0x185309530](&v263, 8);
    uint64_t v86 = v263;
    type metadata accessor for AttributedString.Guts();
    uint64_t v87 = swift_allocObject();
    char v88 = BigString.isEmpty.getter();
    uint64_t v33 = v246;
    unint64_t v34 = v247;
    uint64_t v89 = v250;
    if ((v88 & 1) == 0) {
      goto LABEL_86;
    }
    long long v90 = v284;
    *(_OWORD *)(v87 + 16) = v283;
    *(_OWORD *)(v87 + 32) = v90;
    *(_OWORD *)(v87 + 48) = v285;
    *(void *)(v87 + 64) = 0;
    *(void *)(v87 + 72) = 0;
    *(void *)(v87 + 80) = 0;
    *(void *)(v87 + 88) = v86;
    swift_release();
    LOBYTE(v263) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v274, (char *)&v263);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v272 != v85) {
      goto LABEL_92;
    }
    uint64_t v38 = v89 + 24;
    uint64_t v36 = v264;
    swift_release();
    --v251;
  }
  while (v251);
  swift_bridgeObjectRelease();
  uint64_t v24 = v235;
  uint64_t v23 = v236;
LABEL_73:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_77:
  uint64_t v231 = v237;
  *double v241 = v36;
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v231, v23);
}

uint64_t FloatingPointFormatStyle.Attributed.locale(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for FloatingPointFormatStyle.Percent();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (uint64_t *)((char *)&v36 - v7);
  uint64_t v9 = type metadata accessor for FloatingPointFormatStyle.Currency();
  uint64_t v38 = *(void *)(v9 - 8);
  uint64_t v39 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (uint64_t *)((char *)&v36 - v10);
  uint64_t v12 = type metadata accessor for FloatingPointFormatStyle();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (uint64_t *)((char *)&v36 - v13);
  uint64_t v15 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v36 - v18;
  uint64_t v21 = *a1;
  uint64_t v20 = a1[1];
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16);
  uint64_t v43 = a3;
  uint64_t v23 = a3;
  uint64_t v24 = v42;
  v22(v23, v42, a2, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v24, v15);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v27 = v38;
      uint64_t v26 = v39;
      (*(void (**)(void *, char *, uint64_t))(v38 + 32))(v11, v19, v39);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *uint64_t v11 = v21;
      v11[1] = v20;
      uint64_t v28 = v43;
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v43, v15);
      (*(void (**)(uint64_t, void *, uint64_t))(v27 + 16))(v28, v11, v26);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(void *, uint64_t))(v27 + 8))(v11, v26);
    }
    else
    {
      uint64_t v34 = v40;
      uint64_t v33 = v41;
      (*(void (**)(void *, char *, uint64_t))(v40 + 32))(v8, v19, v41);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *uint64_t v8 = v21;
      v8[1] = v20;
      uint64_t v35 = v43;
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v43, v15);
      (*(void (**)(uint64_t, void *, uint64_t))(v34 + 16))(v35, v8, v33);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(void *, uint64_t))(v34 + 8))(v8, v33);
    }
  }
  else
  {
    uint64_t v31 = v36;
    uint64_t v30 = v37;
    (*(void (**)(void *, char *, uint64_t))(v36 + 32))(v14, v19, v37);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    void *v14 = v21;
    v14[1] = v20;
    uint64_t v32 = v43;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v43, v15);
    (*(void (**)(uint64_t, void *, uint64_t))(v31 + 16))(v32, v14, v30);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(void *, uint64_t))(v31 + 8))(v14, v30);
  }
}

uint64_t FloatingPointFormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  uint64_t v27 = a1;
  uint64_t v2 = type metadata accessor for FloatingPointFormatStyle.Percent();
  uint64_t v26 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v24 - v3;
  uint64_t v5 = type metadata accessor for FloatingPointFormatStyle.Currency();
  uint64_t v25 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v24 - v6;
  uint64_t v8 = type metadata accessor for FloatingPointFormatStyle();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style();
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v24 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v24 - v14, v1, v12, v13);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v18 = v25;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v7, v15, v5);
      uint64_t v19 = v27;
      Hasher._combine(_:)(1uLL);
      FloatingPointFormatStyle.Currency.hash(into:)(v19, v5);
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v7, v5);
    }
    else
    {
      uint64_t v22 = v26;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v4, v15, v2);
      uint64_t v23 = v27;
      Hasher._combine(_:)(2uLL);
      FloatingPointFormatStyle.hash(into:)(v23, v2);
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v4, v2);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v8);
    uint64_t v21 = v27;
    Hasher._combine(_:)(0);
    FloatingPointFormatStyle.hash(into:)(v21, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FloatingPointFormatStyle<A>.Attributed.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FloatingPointFormatStyle<A>.Attributed.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t FloatingPointFormatStyle.Attributed.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v8 = *(void *)(a2 + 16);
  type metadata accessor for FloatingPointFormatStyle.Attributed.CodingKeys();
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for FloatingPointFormatStyle.Attributed.Style();
  swift_getWitnessTable();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int FloatingPointFormatStyle.Attributed.hashValue.getter(uint64_t a1)
{
  return FloatingPointFormatStyle.hashValue.getter(a1, (void (*)(unsigned char *, uint64_t))FloatingPointFormatStyle.Attributed.hash(into:));
}

Swift::Int FloatingPointFormatStyle.hashValue.getter(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1);
  return Hasher._finalize()();
}

uint64_t FloatingPointFormatStyle.Attributed.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style();
  uint64_t v23 = *(void *)(v3 - 8);
  uint64_t v24 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v25 = (char *)&v18 - v4;
  type metadata accessor for FloatingPointFormatStyle.Attributed.CodingKeys();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v21 = *(void *)(v5 - 8);
  uint64_t v22 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v18 - v6;
  uint64_t v8 = type metadata accessor for FloatingPointFormatStyle.Attributed();
  uint64_t v19 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v18 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v11 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v11)
  {
    uint64_t v18 = v10;
    uint64_t v26 = v8;
    uint64_t v12 = v21;
    uint64_t v14 = v23;
    uint64_t v13 = v24;
    swift_getWitnessTable();
    uint64_t v15 = v22;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v15);
    uint64_t v16 = v18;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v25, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v20, v16, v26);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FloatingPointFormatStyle<A>.Attributed@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FloatingPointFormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FloatingPointFormatStyle<A>.Attributed(void *a1, uint64_t a2)
{
  return FloatingPointFormatStyle.Attributed.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>.Attributed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>(a1, a2, a3, (void (*)(unsigned char *, uint64_t))FloatingPointFormatStyle.Attributed.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointFormatStyle<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a4(v7, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointFormatStyle<A>.Attributed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static FloatingPointFormatStyle.Attributed.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t FloatingPointFormatStyle.consuming(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return FloatingPointFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, 0, a7);
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance FloatingPointFormatStyle<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return FloatingPointFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance FloatingPointFormatStyle<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4188350](a1, WitnessTable);
}

uint64_t FloatingPointFormatStyle.Percent.consuming(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return FloatingPointFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, 1, a7);
}

uint64_t FloatingPointFormatStyle.consuming(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W7>, uint64_t *a8@<X8>)
{
  int v36 = a7;
  uint64_t v34 = a1;
  uint64_t v38 = a4;
  unint64_t v39 = a5;
  unint64_t v37 = a3;
  uint64_t v35 = a2;
  uint64_t v41 = a8;
  uint64_t v9 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (_OWORD *)((char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_getWitnessTable();
  uint64_t v12 = (int *)type metadata accessor for FloatingPointParseStrategy();
  uint64_t v13 = *((void *)v12 - 1);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v40 = *(void *)(a6 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (uint64_t *)((char *)&v30 - v19);
  uint64_t v21 = *(void (**)(_OWORD *, uint64_t, uint64_t, double))(v9 + 16);
  v21(v11, v33, a6, v18);
  ((void (*)(char *, _OWORD *, uint64_t))v21)(v15, v11, a6);
  v15[v12[11]] = 0;
  *(_OWORD *)&v15[v12[13]] = *v11;
  _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_1((uint64_t)v11 + *(int *)(a6 + 36), (uint64_t)&v15[v12[12]], type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  swift_storeEnumTagMultiPayload();
  FloatingPointParseStrategy.parse(_:startingAt:in:)(v34, v35, v37, v39, v12, v20);
  (*(void (**)(char *, int *))(v13 + 8))(v15, v12);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v20, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v31 + 8))(v20, v32);
    uint64_t v22 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v41, 1, 1, v22);
  }
  else
  {
    uint64_t v24 = *v20;
    uint64_t v25 = (char *)v20 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v26 = v40;
    uint64_t v27 = swift_getTupleTypeMetadata2();
    uint64_t v28 = v41;
    uint64_t v29 = (char *)v41 + *(int *)(v27 + 48);
    *uint64_t v41 = v24;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v29, v25, v26);
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v28, 0, 1, v27);
  }
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance FloatingPointFormatStyle<A>.Percent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return FloatingPointFormatStyle.Percent.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance FloatingPointFormatStyle<A>.Percent(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4188350](a1, WitnessTable);
}

uint64_t FloatingPointFormatStyle.Currency.consuming(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v50 = a4;
  unint64_t v51 = a5;
  uint64_t v48 = a2;
  unint64_t v49 = a3;
  uint64_t v47 = a1;
  uint64_t v52 = a7;
  uint64_t v45 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v45);
  uint64_t v43 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (long long *)((char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_getWitnessTable();
  uint64_t v13 = (int *)type metadata accessor for FloatingPointParseStrategy();
  uint64_t v42 = *((void *)v13 - 1);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  double v18 = (char *)&v38 - v17;
  uint64_t v46 = *(void *)(a6 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v39 = *(void *)(v19 - 8);
  uint64_t v40 = v19;
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (uint64_t *)((char *)&v38 - v21);
  uint64_t v23 = *(void (**)(char *, long long *, uint64_t))(v9 + 16);
  ((void (*)(long long *, void, uint64_t, double))v23)(v12, v44, a6, v20);
  v23(v15, v12, a6);
  v15[v13[11]] = 0;
  uint64_t v24 = v13[13];
  long long v44 = *v12;
  *(_OWORD *)&v15[v24] = v44;
  uint64_t v25 = v43;
  outlined init with copy of NumberFormatStyleConfiguration.Collection((uint64_t)v12 + *(int *)(a6 + 40), v43, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v26 = *(void (**)(long long *, uint64_t))(v9 + 8);
  swift_unknownObjectRetain();
  v26(v12, a6);
  swift_storeEnumTagMultiPayload();
  _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_1(v25, (uint64_t)&v15[v13[12]], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t v27 = v42;
  uint64_t v28 = v15;
  uint64_t v29 = TupleTypeMetadata2;
  (*(void (**)(char *, char *, int *))(v42 + 32))(v18, v28, v13);
  FloatingPointParseStrategy.parse(_:startingAt:in:)(v47, v48, v49, v51, v13, v22);
  (*(void (**)(char *, int *))(v27 + 8))(v18, v13);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v22, 1, v29) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(v22, v40);
    uint64_t v30 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v52, 1, 1, v30);
  }
  else
  {
    uint64_t v32 = *v22;
    uint64_t v33 = (char *)v22 + *(int *)(v29 + 48);
    uint64_t v34 = v46;
    uint64_t v35 = swift_getTupleTypeMetadata2();
    int v36 = v52;
    unint64_t v37 = (char *)v52 + *(int *)(v35 + 48);
    *uint64_t v52 = v32;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v37, v33, v34);
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v36, 0, 1, v35);
  }
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance FloatingPointFormatStyle<A>.Currency@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return FloatingPointFormatStyle.Currency.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance FloatingPointFormatStyle<A>.Currency(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4188350](a1, WitnessTable);
}

uint64_t static RegexComponent<>.localizedDouble(locale:)@<X0>(long long *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (char *)a2
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>)
              + 36);
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  long long v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = &v4[v5[10]];
  *(void *)uint64_t v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  *a2 = v10;

  return swift_unknownObjectRetain();
}

uint64_t static RegexComponent<>.localizedDoublePercentage(locale:)@<X0>(long long *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (char *)a2
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent)
              + 36);
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  long long v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(void *)uint64_t v4 = 0x4059000000000000;
  v4[8] = 0;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  uint64_t v8 = &v4[v5[10]];
  *(void *)uint64_t v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  *a2 = v10;

  return swift_unknownObjectRetain();
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.Style()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FloatingPointFormatStyle.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Percent.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Currency.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Currency()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>.Currency(void *a1)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>(a1);
}

uint64_t associated type witness table accessor for ParseableFormatStyle.Strategy : ParseStrategy in FloatingPointFormatStyle<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>.Currency(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>.Percent(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for FloatingPointFormatStyle<A>.Attributed(void *a1)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>(a1);
}

uint64_t base witness table accessor for RegexComponent in FloatingPointFormatStyle<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for RegexComponent in FloatingPointFormatStyle<A>.Percent()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for RegexComponent in FloatingPointFormatStyle<A>.Currency()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for FloatingPointFormatStyle.Percent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_4_2);
}

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle.Percent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_4_2);
}

uint64_t getEnumTagSinglePayload for FloatingPointFormatStyle.Currency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181E5189C);
}

uint64_t sub_181E5189C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle.Currency(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181E51960);
}

void *sub_181E51960(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 40);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for FloatingPointFormatStyle.Attributed()
{
  uint64_t result = type metadata accessor for FloatingPointFormatStyle.Attributed.Style();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FloatingPointFormatStyle.Attributed(uint64_t a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(*(void *)(type metadata accessor for FloatingPointFormatStyle.Attributed.Style() - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v19 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Percent() + 36);
      uint64_t v20 = a1 + v19;
      uint64_t v21 = (uint64_t)a2 + v19;
      *(void *)uint64_t v20 = *(uint64_t *)((char *)a2 + v19);
      *(unsigned char *)(v20 + 8) = *((unsigned char *)a2 + v19 + 8);
      long long v22 = *(_OWORD *)((char *)a2 + v19 + 32);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)((char *)a2 + v19 + 16);
      *(_OWORD *)(v20 + 32) = v22;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)((char *)a2 + v19 + 48);
      *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v19 + 57);
      *(unsigned char *)(v20 + 73) = *((unsigned char *)a2 + v19 + 73);
      *(_WORD *)(v20 + 74) = *(_WORD *)((char *)a2 + v19 + 74);
      *(unsigned char *)(v20 + 76) = *((unsigned char *)a2 + v19 + 76);
      *(unsigned char *)(v20 + 77) = *((unsigned char *)a2 + v19 + 77);
      uint64_t v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v24 = v23[9];
      __dsta = (void *)(v20 + v24);
      uint64_t v25 = (const void *)(v21 + v24);
      uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v27 = *(void *)(v26 - 8);
      uint64_t v28 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
      swift_unknownObjectRetain();
      if (v28(v25, 1, v26))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dsta, v25, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(__dsta, v25, v26);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(__dsta, 0, 1, v26);
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v6 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v6;
        uint64_t v7 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency() + 40);
        uint64_t v8 = a1 + v7;
        uint64_t v9 = (uint64_t)a2 + v7;
        *(void *)uint64_t v8 = *(uint64_t *)((char *)a2 + v7);
        *(unsigned char *)(v8 + 8) = *((unsigned char *)a2 + v7 + 8);
        long long v10 = *(_OWORD *)((char *)a2 + v7 + 32);
        *(_OWORD *)(v8 + 16) = *(_OWORD *)((char *)a2 + v7 + 16);
        *(_OWORD *)(v8 + 32) = v10;
        *(_OWORD *)(v8 + 48) = *(_OWORD *)((char *)a2 + v7 + 48);
        *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
        *(unsigned char *)(v8 + 73) = *((unsigned char *)a2 + v7 + 73);
        *(_DWORD *)(v8 + 74) = *(_DWORD *)((char *)a2 + v7 + 74);
        *(unsigned char *)(v8 + 78) = *((unsigned char *)a2 + v7 + 78);
        uint64_t v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v12 = v11[9];
        __dst = (void *)(v8 + v12);
        uint64_t v13 = (const void *)(v9 + v12);
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v16(v13, 1, v14))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(__dst, v13, v14);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
        }
        uint64_t v38 = v11[10];
        uint64_t v39 = v8 + v38;
        uint64_t v40 = v9 + v38;
        *(void *)uint64_t v39 = *(void *)v40;
        *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
        *(unsigned char *)(v8 + v11[11]) = *(unsigned char *)(v9 + v11[11]);
        *(unsigned char *)(v8 + v11[12]) = *(unsigned char *)(v9 + v11[12]);
        goto LABEL_16;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v30 = *(int *)(type metadata accessor for FloatingPointFormatStyle() + 36);
      uint64_t v20 = a1 + v30;
      uint64_t v21 = (uint64_t)a2 + v30;
      *(void *)uint64_t v20 = *(uint64_t *)((char *)a2 + v30);
      *(unsigned char *)(v20 + 8) = *((unsigned char *)a2 + v30 + 8);
      long long v31 = *(_OWORD *)((char *)a2 + v30 + 32);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)((char *)a2 + v30 + 16);
      *(_OWORD *)(v20 + 32) = v31;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)((char *)a2 + v30 + 48);
      *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v30 + 57);
      *(unsigned char *)(v20 + 73) = *((unsigned char *)a2 + v30 + 73);
      *(_WORD *)(v20 + 74) = *(_WORD *)((char *)a2 + v30 + 74);
      *(unsigned char *)(v20 + 76) = *((unsigned char *)a2 + v30 + 76);
      *(unsigned char *)(v20 + 77) = *((unsigned char *)a2 + v30 + 77);
      uint64_t v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v32 = v23[9];
      uint64_t v45 = (void *)(v20 + v32);
      uint64_t v33 = (const void *)(v21 + v32);
      uint64_t v34 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v35 = *(void *)(v34 - 8);
      int v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48);
      swift_unknownObjectRetain();
      if (v36(v33, 1, v34))
      {
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v45, v33, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v45, v33, v34);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v45, 0, 1, v34);
      }
    }
    uint64_t v41 = v23[10];
    uint64_t v42 = v20 + v41;
    uint64_t v43 = v21 + v41;
    *(void *)uint64_t v42 = *(void *)v43;
    *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
    *(unsigned char *)(v20 + v23[11]) = *(unsigned char *)(v21 + v23[11]);
LABEL_16:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  uint64_t v18 = *a2;
  *(void *)a1 = *a2;
  a1 = v18 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return a1;
}

uint64_t destroy for FloatingPointFormatStyle.Attributed(uint64_t a1)
{
  type metadata accessor for FloatingPointFormatStyle.Attributed.Style();
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for FloatingPointFormatStyle.Percent();
LABEL_6:
    uint64_t v4 = *(int *)(v3 + 36);
    uint64_t v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for FloatingPointFormatStyle();
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency() + 40);
  uint64_t v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  uint64_t v6 = a1 + *(int *)(v5 + 36) + v4;
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for FloatingPointFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FloatingPointFormatStyle.Attributed.Style();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v17 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Percent() + 36);
    uint64_t v18 = a1 + v17;
    uint64_t v19 = a2 + v17;
    *(void *)uint64_t v18 = *(void *)(a2 + v17);
    *(unsigned char *)(v18 + 8) = *(unsigned char *)(a2 + v17 + 8);
    long long v20 = *(_OWORD *)(a2 + v17 + 32);
    *(_OWORD *)(v18 + 16) = *(_OWORD *)(a2 + v17 + 16);
    *(_OWORD *)(v18 + 32) = v20;
    *(_OWORD *)(v18 + 48) = *(_OWORD *)(a2 + v17 + 48);
    *(_OWORD *)(v18 + 57) = *(_OWORD *)(a2 + v17 + 57);
    *(unsigned char *)(v18 + 73) = *(unsigned char *)(a2 + v17 + 73);
    *(_WORD *)(v18 + 74) = *(_WORD *)(a2 + v17 + 74);
    *(unsigned char *)(v18 + 76) = *(unsigned char *)(a2 + v17 + 76);
    *(unsigned char *)(v18 + 77) = *(unsigned char *)(a2 + v17 + 77);
    uint64_t v21 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v22 = v21[9];
    uint64_t v23 = (void *)(v18 + v22);
    uint64_t v24 = (const void *)(v19 + v22);
    uint64_t v25 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48);
    swift_unknownObjectRetain();
    if (v27(v24, 1, v25))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    uint64_t v47 = v21[10];
    uint64_t v48 = v18 + v47;
    uint64_t v49 = v19 + v47;
    *(void *)uint64_t v48 = *(void *)v49;
    *(unsigned char *)(v48 + 8) = *(unsigned char *)(v49 + 8);
    uint64_t v50 = v21[11];
    uint64_t v45 = (unsigned char *)(v18 + v50);
    uint64_t v46 = (unsigned char *)(v19 + v50);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    uint64_t v6 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency() + 40);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    *(void *)uint64_t v7 = *(void *)(a2 + v6);
    *(unsigned char *)(v7 + 8) = *(unsigned char *)(a2 + v6 + 8);
    long long v9 = *(_OWORD *)(a2 + v6 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + v6 + 16);
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + v6 + 48);
    *(_OWORD *)(v7 + 57) = *(_OWORD *)(a2 + v6 + 57);
    *(unsigned char *)(v7 + 73) = *(unsigned char *)(a2 + v6 + 73);
    *(_DWORD *)(v7 + 74) = *(_DWORD *)(a2 + v6 + 74);
    *(unsigned char *)(v7 + 78) = *(unsigned char *)(a2 + v6 + 78);
    long long v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    uint64_t v11 = v10[9];
    __dst = (void *)(v7 + v11);
    uint64_t v12 = (const void *)(v8 + v11);
    uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v12, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(__dst, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v41 = v10[10];
    uint64_t v42 = v7 + v41;
    uint64_t v43 = v8 + v41;
    *(void *)uint64_t v42 = *(void *)v43;
    *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
    *(unsigned char *)(v7 + v10[11]) = *(unsigned char *)(v8 + v10[11]);
    uint64_t v44 = v10[12];
    uint64_t v45 = (unsigned char *)(v7 + v44);
    uint64_t v46 = (unsigned char *)(v8 + v44);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v29 = *(int *)(type metadata accessor for FloatingPointFormatStyle() + 36);
    uint64_t v30 = a1 + v29;
    uint64_t v31 = a2 + v29;
    *(void *)uint64_t v30 = *(void *)(a2 + v29);
    *(unsigned char *)(v30 + 8) = *(unsigned char *)(a2 + v29 + 8);
    long long v32 = *(_OWORD *)(a2 + v29 + 32);
    *(_OWORD *)(v30 + 16) = *(_OWORD *)(a2 + v29 + 16);
    *(_OWORD *)(v30 + 32) = v32;
    *(_OWORD *)(v30 + 48) = *(_OWORD *)(a2 + v29 + 48);
    *(_OWORD *)(v30 + 57) = *(_OWORD *)(a2 + v29 + 57);
    *(unsigned char *)(v30 + 73) = *(unsigned char *)(a2 + v29 + 73);
    *(_WORD *)(v30 + 74) = *(_WORD *)(a2 + v29 + 74);
    *(unsigned char *)(v30 + 76) = *(unsigned char *)(a2 + v29 + 76);
    *(unsigned char *)(v30 + 77) = *(unsigned char *)(a2 + v29 + 77);
    uint64_t v33 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v34 = v33[9];
    uint64_t v35 = (void *)(v30 + v34);
    int v36 = (const void *)(v31 + v34);
    uint64_t v37 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v38 = *(void *)(v37 - 8);
    uint64_t v39 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48);
    swift_unknownObjectRetain();
    if (v39(v36, 1, v37))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v35, v36, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    uint64_t v51 = v33[10];
    uint64_t v52 = v30 + v51;
    uint64_t v53 = v31 + v51;
    *(void *)uint64_t v52 = *(void *)v53;
    *(unsigned char *)(v52 + 8) = *(unsigned char *)(v53 + 8);
    uint64_t v54 = v33[11];
    uint64_t v45 = (unsigned char *)(v30 + v54);
    uint64_t v46 = (unsigned char *)(v31 + v54);
  }
  *uint64_t v45 = *v46;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for FloatingPointFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v19 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Percent() + 36);
      uint64_t v20 = a1 + v19;
      uint64_t v21 = a2 + v19;
      LOBYTE(v19) = *(unsigned char *)(a2 + v19 + 8);
      *(void *)uint64_t v20 = *(void *)v21;
      *(unsigned char *)(v20 + 8) = v19;
      long long v22 = *(_OWORD *)(v21 + 57);
      long long v24 = *(_OWORD *)(v21 + 32);
      long long v23 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v24;
      *(_OWORD *)(v20 + 48) = v23;
      *(_OWORD *)(v20 + 57) = v22;
      *(unsigned char *)(v20 + 73) = *(unsigned char *)(v21 + 73);
      LOWORD(v19) = *(_WORD *)(v21 + 74);
      *(unsigned char *)(v20 + 76) = *(unsigned char *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v19;
      *(unsigned char *)(v20 + 77) = *(unsigned char *)(v21 + 77);
      uint64_t v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v26 = v25[9];
      uint64_t v27 = (void *)(v20 + v26);
      uint64_t v28 = (const void *)(v21 + v26);
      uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v31(v28, 1, v29))
      {
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v6 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency() + 40);
        uint64_t v7 = a1 + v6;
        uint64_t v8 = a2 + v6;
        LOBYTE(v6) = *(unsigned char *)(a2 + v6 + 8);
        *(void *)uint64_t v7 = *(void *)v8;
        *(unsigned char *)(v7 + 8) = v6;
        long long v9 = *(_OWORD *)(v8 + 57);
        long long v11 = *(_OWORD *)(v8 + 32);
        long long v10 = *(_OWORD *)(v8 + 48);
        *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
        *(_OWORD *)(v7 + 32) = v11;
        *(_OWORD *)(v7 + 48) = v10;
        *(_OWORD *)(v7 + 57) = v9;
        *(unsigned char *)(v7 + 73) = *(unsigned char *)(v8 + 73);
        *(_DWORD *)(v7 + 74) = *(_DWORD *)(v8 + 74);
        *(unsigned char *)(v7 + 78) = *(unsigned char *)(v8 + 78);
        uint64_t v12 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v13 = v12[9];
        __dst = (void *)(v7 + v13);
        uint64_t v14 = (const void *)(v8 + v13);
        uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v16 = *(void *)(v15 - 8);
        uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v17(v14, 1, v15))
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v14, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(__dst, v14, v15);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
        }
        uint64_t v43 = v12[10];
        uint64_t v44 = v7 + v43;
        uint64_t v45 = (uint64_t *)(v8 + v43);
        uint64_t v46 = *v45;
        *(unsigned char *)(v44 + 8) = *((unsigned char *)v45 + 8);
        *(void *)uint64_t v44 = v46;
        *(unsigned char *)(v7 + v12[11]) = *(unsigned char *)(v8 + v12[11]);
        uint64_t v47 = v12[12];
        uint64_t v48 = (unsigned char *)(v7 + v47);
        uint64_t v49 = (unsigned char *)(v8 + v47);
        goto LABEL_15;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v33 = *(int *)(type metadata accessor for FloatingPointFormatStyle() + 36);
      uint64_t v20 = a1 + v33;
      uint64_t v21 = a2 + v33;
      LOBYTE(v33) = *(unsigned char *)(a2 + v33 + 8);
      *(void *)uint64_t v20 = *(void *)v21;
      *(unsigned char *)(v20 + 8) = v33;
      long long v34 = *(_OWORD *)(v21 + 57);
      long long v36 = *(_OWORD *)(v21 + 32);
      long long v35 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v36;
      *(_OWORD *)(v20 + 48) = v35;
      *(_OWORD *)(v20 + 57) = v34;
      *(unsigned char *)(v20 + 73) = *(unsigned char *)(v21 + 73);
      LOWORD(v33) = *(_WORD *)(v21 + 74);
      *(unsigned char *)(v20 + 76) = *(unsigned char *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v33;
      *(unsigned char *)(v20 + 77) = *(unsigned char *)(v21 + 77);
      uint64_t v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v37 = v25[9];
      uint64_t v57 = (void *)(v20 + v37);
      uint64_t v38 = (const void *)(v21 + v37);
      uint64_t v39 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48);
      swift_unknownObjectRetain();
      if (v41(v38, 1, v39))
      {
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v57, v38, *(void *)(*(void *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v40 + 16))(v57, v38, v39);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v57, 0, 1, v39);
      }
    }
    uint64_t v50 = v25[10];
    uint64_t v51 = v20 + v50;
    uint64_t v52 = (uint64_t *)(v21 + v50);
    uint64_t v53 = *v52;
    *(unsigned char *)(v51 + 8) = *((unsigned char *)v52 + 8);
    *(void *)uint64_t v51 = v53;
    uint64_t v54 = v25[11];
    uint64_t v48 = (unsigned char *)(v20 + v54);
    uint64_t v49 = (unsigned char *)(v21 + v54);
LABEL_15:
    *uint64_t v48 = *v49;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for FloatingPointFormatStyle.Attributed(_OWORD *a1, _OWORD *a2)
{
  type metadata accessor for FloatingPointFormatStyle.Attributed.Style();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v17 = type metadata accessor for FloatingPointFormatStyle.Percent();
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      long long v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      uint64_t v6 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency() + 40);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
      v7[8] = *((unsigned char *)a2 + v6 + 8);
      long long v9 = *(_OWORD *)((char *)a2 + v6 + 32);
      *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
      *((_OWORD *)v7 + 2) = v9;
      *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
      *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
      v7[73] = *((unsigned char *)a2 + v6 + 73);
      *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
      v7[78] = *((unsigned char *)a2 + v6 + 78);
      long long v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v11 = v10[9];
      uint64_t v12 = &v7[v11];
      uint64_t v13 = &v8[v11];
      uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      uint64_t v35 = v10[10];
      long long v36 = &v7[v35];
      uint64_t v37 = &v8[v35];
      *(void *)long long v36 = *(void *)v37;
      v36[8] = v37[8];
      v7[v10[11]] = v8[v10[11]];
      uint64_t v38 = v10[12];
      uint64_t v33 = &v7[v38];
      long long v34 = &v8[v38];
      goto LABEL_13;
    }
    *a1 = *a2;
    uint64_t v17 = type metadata accessor for FloatingPointFormatStyle();
  }
  uint64_t v18 = *(int *)(v17 + 36);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
  v19[8] = *((unsigned char *)a2 + v18 + 8);
  long long v21 = *(_OWORD *)((char *)a2 + v18 + 32);
  *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
  *((_OWORD *)v19 + 2) = v21;
  *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
  *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
  v19[73] = *((unsigned char *)a2 + v18 + 73);
  *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
  v19[76] = *((unsigned char *)a2 + v18 + 76);
  v19[77] = *((unsigned char *)a2 + v18 + 77);
  long long v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v23 = v22[9];
  long long v24 = &v19[v23];
  uint64_t v25 = &v20[v23];
  uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v29 = v22[10];
  uint64_t v30 = &v19[v29];
  uint64_t v31 = &v20[v29];
  *(void *)uint64_t v30 = *(void *)v31;
  v30[8] = v31[8];
  uint64_t v32 = v22[11];
  uint64_t v33 = &v19[v32];
  long long v34 = &v20[v32];
LABEL_13:
  *uint64_t v33 = *v34;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for FloatingPointFormatStyle.Attributed(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style();
    (*(void (**)(_OWORD *, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v18 = type metadata accessor for FloatingPointFormatStyle.Percent();
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        long long v6 = a2[1];
        *a1 = *a2;
        a1[1] = v6;
        uint64_t v7 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency() + 40);
        uint64_t v8 = (char *)a1 + v7;
        long long v9 = (char *)a2 + v7;
        *(void *)uint64_t v8 = *(void *)((char *)a2 + v7);
        v8[8] = *((unsigned char *)a2 + v7 + 8);
        long long v10 = *(_OWORD *)((char *)a2 + v7 + 32);
        *((_OWORD *)v8 + 1) = *(_OWORD *)((char *)a2 + v7 + 16);
        *((_OWORD *)v8 + 2) = v10;
        *((_OWORD *)v8 + 3) = *(_OWORD *)((char *)a2 + v7 + 48);
        *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
        v8[73] = *((unsigned char *)a2 + v7 + 73);
        *(_DWORD *)(v8 + 74) = *(_DWORD *)((char *)a2 + v7 + 74);
        v8[78] = *((unsigned char *)a2 + v7 + 78);
        uint64_t v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v12 = v11[9];
        uint64_t v13 = &v8[v12];
        uint64_t v14 = &v9[v12];
        uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v16 = *(void *)(v15 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
        }
        uint64_t v36 = v11[10];
        uint64_t v37 = &v8[v36];
        uint64_t v38 = &v9[v36];
        *(void *)uint64_t v37 = *(void *)v38;
        v37[8] = v38[8];
        v8[v11[11]] = v9[v11[11]];
        uint64_t v39 = v11[12];
        long long v34 = &v8[v39];
        uint64_t v35 = &v9[v39];
LABEL_14:
        *long long v34 = *v35;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *a1 = *a2;
      uint64_t v18 = type metadata accessor for FloatingPointFormatStyle();
    }
    uint64_t v19 = *(int *)(v18 + 36);
    uint64_t v20 = (char *)a1 + v19;
    long long v21 = (char *)a2 + v19;
    *(void *)uint64_t v20 = *(void *)((char *)a2 + v19);
    v20[8] = *((unsigned char *)a2 + v19 + 8);
    long long v22 = *(_OWORD *)((char *)a2 + v19 + 32);
    *((_OWORD *)v20 + 1) = *(_OWORD *)((char *)a2 + v19 + 16);
    *((_OWORD *)v20 + 2) = v22;
    *((_OWORD *)v20 + 3) = *(_OWORD *)((char *)a2 + v19 + 48);
    *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v19 + 57);
    v20[73] = *((unsigned char *)a2 + v19 + 73);
    *((_WORD *)v20 + 37) = *(_WORD *)((char *)a2 + v19 + 74);
    v20[76] = *((unsigned char *)a2 + v19 + 76);
    v20[77] = *((unsigned char *)a2 + v19 + 77);
    uint64_t v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v24 = v23[9];
    uint64_t v25 = &v20[v24];
    uint64_t v26 = &v21[v24];
    uint64_t v27 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    uint64_t v30 = v23[10];
    uint64_t v31 = &v20[v30];
    uint64_t v32 = &v21[v30];
    *(void *)uint64_t v31 = *(void *)v32;
    v31[8] = v32[8];
    uint64_t v33 = v23[11];
    long long v34 = &v20[v33];
    uint64_t v35 = &v21[v33];
    goto LABEL_14;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FloatingPointFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181E534A0);
}

uint64_t sub_181E534A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style();
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FloatingPointFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181E53524);
}

uint64_t sub_181E53524(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointFormatStyle.Attributed.Style();
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

unsigned char *storeEnumTagSinglePayload for FloatingPointFormatStyle.Percent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181E53670);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata completion function for FloatingPointFormatStyle.Attributed.Style()
{
  uint64_t result = type metadata accessor for FloatingPointFormatStyle();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for FloatingPointFormatStyle.Currency();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for FloatingPointFormatStyle.Percent();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FloatingPointFormatStyle.Attributed.Style(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v20 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Percent() + 36);
      uint64_t v21 = a1 + v20;
      uint64_t v22 = (uint64_t)a2 + v20;
      *(void *)uint64_t v21 = *(uint64_t *)((char *)a2 + v20);
      *(unsigned char *)(v21 + 8) = *((unsigned char *)a2 + v20 + 8);
      long long v23 = *(_OWORD *)((char *)a2 + v20 + 32);
      *(_OWORD *)(v21 + 16) = *(_OWORD *)((char *)a2 + v20 + 16);
      *(_OWORD *)(v21 + 32) = v23;
      *(_OWORD *)(v21 + 48) = *(_OWORD *)((char *)a2 + v20 + 48);
      *(_OWORD *)(v21 + 57) = *(_OWORD *)((char *)a2 + v20 + 57);
      *(unsigned char *)(v21 + 73) = *((unsigned char *)a2 + v20 + 73);
      *(_WORD *)(v21 + 74) = *(_WORD *)((char *)a2 + v20 + 74);
      *(unsigned char *)(v21 + 76) = *((unsigned char *)a2 + v20 + 76);
      *(unsigned char *)(v21 + 77) = *((unsigned char *)a2 + v20 + 77);
      uint64_t v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v25 = v24[9];
      __dsta = (void *)(v21 + v25);
      uint64_t v26 = (const void *)(v22 + v25);
      uint64_t v27 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v28 = *(void *)(v27 - 8);
      uint64_t v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
      swift_unknownObjectRetain();
      if (v29(v26, 1, v27))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dsta, v26, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(__dsta, v26, v27);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(__dsta, 0, 1, v27);
      }
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v7 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v7;
        uint64_t v8 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency() + 40);
        uint64_t v9 = a1 + v8;
        uint64_t v10 = (uint64_t)a2 + v8;
        *(void *)uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
        *(unsigned char *)(v9 + 8) = *((unsigned char *)a2 + v8 + 8);
        long long v11 = *(_OWORD *)((char *)a2 + v8 + 32);
        *(_OWORD *)(v9 + 16) = *(_OWORD *)((char *)a2 + v8 + 16);
        *(_OWORD *)(v9 + 32) = v11;
        *(_OWORD *)(v9 + 48) = *(_OWORD *)((char *)a2 + v8 + 48);
        *(_OWORD *)(v9 + 57) = *(_OWORD *)((char *)a2 + v8 + 57);
        *(unsigned char *)(v9 + 73) = *((unsigned char *)a2 + v8 + 73);
        *(_DWORD *)(v9 + 74) = *(_DWORD *)((char *)a2 + v8 + 74);
        *(unsigned char *)(v9 + 78) = *((unsigned char *)a2 + v8 + 78);
        uint64_t v12 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v13 = v12[9];
        __dst = (void *)(v9 + v13);
        uint64_t v14 = (const void *)(v10 + v13);
        uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v16 = *(void *)(v15 - 8);
        uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v17(v14, 1, v15))
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v14, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(__dst, v14, v15);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
        }
        uint64_t v39 = v12[10];
        uint64_t v40 = v9 + v39;
        uint64_t v41 = v10 + v39;
        *(void *)uint64_t v40 = *(void *)v41;
        *(unsigned char *)(v40 + 8) = *(unsigned char *)(v41 + 8);
        *(unsigned char *)(v9 + v12[11]) = *(unsigned char *)(v10 + v12[11]);
        *(unsigned char *)(v9 + v12[12]) = *(unsigned char *)(v10 + v12[12]);
        goto LABEL_16;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v31 = *(int *)(type metadata accessor for FloatingPointFormatStyle() + 36);
      uint64_t v21 = a1 + v31;
      uint64_t v22 = (uint64_t)a2 + v31;
      *(void *)uint64_t v21 = *(uint64_t *)((char *)a2 + v31);
      *(unsigned char *)(v21 + 8) = *((unsigned char *)a2 + v31 + 8);
      long long v32 = *(_OWORD *)((char *)a2 + v31 + 32);
      *(_OWORD *)(v21 + 16) = *(_OWORD *)((char *)a2 + v31 + 16);
      *(_OWORD *)(v21 + 32) = v32;
      *(_OWORD *)(v21 + 48) = *(_OWORD *)((char *)a2 + v31 + 48);
      *(_OWORD *)(v21 + 57) = *(_OWORD *)((char *)a2 + v31 + 57);
      *(unsigned char *)(v21 + 73) = *((unsigned char *)a2 + v31 + 73);
      *(_WORD *)(v21 + 74) = *(_WORD *)((char *)a2 + v31 + 74);
      *(unsigned char *)(v21 + 76) = *((unsigned char *)a2 + v31 + 76);
      *(unsigned char *)(v21 + 77) = *((unsigned char *)a2 + v31 + 77);
      uint64_t v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v33 = v24[9];
      uint64_t v46 = (void *)(v21 + v33);
      long long v34 = (const void *)(v22 + v33);
      uint64_t v35 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v36 = *(void *)(v35 - 8);
      uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48);
      swift_unknownObjectRetain();
      if (v37(v34, 1, v35))
      {
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v46, v34, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v36 + 16))(v46, v34, v35);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v46, 0, 1, v35);
      }
    }
    uint64_t v42 = v24[10];
    uint64_t v43 = v21 + v42;
    uint64_t v44 = v22 + v42;
    *(void *)uint64_t v43 = *(void *)v44;
    *(unsigned char *)(v43 + 8) = *(unsigned char *)(v44 + 8);
    *(unsigned char *)(v21 + v24[11]) = *(unsigned char *)(v22 + v24[11]);
LABEL_16:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  uint64_t v19 = *a2;
  *(void *)a1 = *a2;
  a1 = v19 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

uint64_t destroy for FloatingPointFormatStyle.Attributed.Style(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for FloatingPointFormatStyle.Percent();
LABEL_6:
    uint64_t v4 = *(int *)(v3 + 36);
    uint64_t v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    goto LABEL_8;
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for FloatingPointFormatStyle();
    goto LABEL_6;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency() + 40);
  uint64_t v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
LABEL_8:
  uint64_t v6 = a1 + *(int *)(v5 + 36) + v4;
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for FloatingPointFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v17 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Percent() + 36);
    uint64_t v18 = a1 + v17;
    uint64_t v19 = a2 + v17;
    *(void *)uint64_t v18 = *(void *)(a2 + v17);
    *(unsigned char *)(v18 + 8) = *(unsigned char *)(a2 + v17 + 8);
    long long v20 = *(_OWORD *)(a2 + v17 + 32);
    *(_OWORD *)(v18 + 16) = *(_OWORD *)(a2 + v17 + 16);
    *(_OWORD *)(v18 + 32) = v20;
    *(_OWORD *)(v18 + 48) = *(_OWORD *)(a2 + v17 + 48);
    *(_OWORD *)(v18 + 57) = *(_OWORD *)(a2 + v17 + 57);
    *(unsigned char *)(v18 + 73) = *(unsigned char *)(a2 + v17 + 73);
    *(_WORD *)(v18 + 74) = *(_WORD *)(a2 + v17 + 74);
    *(unsigned char *)(v18 + 76) = *(unsigned char *)(a2 + v17 + 76);
    *(unsigned char *)(v18 + 77) = *(unsigned char *)(a2 + v17 + 77);
    uint64_t v21 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v22 = v21[9];
    long long v23 = (void *)(v18 + v22);
    uint64_t v24 = (const void *)(v19 + v22);
    uint64_t v25 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48);
    swift_unknownObjectRetain();
    if (v27(v24, 1, v25))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload != 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v29 = *(int *)(type metadata accessor for FloatingPointFormatStyle() + 36);
    uint64_t v18 = a1 + v29;
    uint64_t v19 = a2 + v29;
    *(void *)uint64_t v18 = *(void *)(a2 + v29);
    *(unsigned char *)(v18 + 8) = *(unsigned char *)(a2 + v29 + 8);
    long long v30 = *(_OWORD *)(a2 + v29 + 32);
    *(_OWORD *)(v18 + 16) = *(_OWORD *)(a2 + v29 + 16);
    *(_OWORD *)(v18 + 32) = v30;
    *(_OWORD *)(v18 + 48) = *(_OWORD *)(a2 + v29 + 48);
    *(_OWORD *)(v18 + 57) = *(_OWORD *)(a2 + v29 + 57);
    *(unsigned char *)(v18 + 73) = *(unsigned char *)(a2 + v29 + 73);
    *(_WORD *)(v18 + 74) = *(_WORD *)(a2 + v29 + 74);
    *(unsigned char *)(v18 + 76) = *(unsigned char *)(a2 + v29 + 76);
    *(unsigned char *)(v18 + 77) = *(unsigned char *)(a2 + v29 + 77);
    uint64_t v21 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v31 = v21[9];
    __dsta = (void *)(v18 + v31);
    long long v32 = (const void *)(v19 + v31);
    uint64_t v33 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48);
    swift_unknownObjectRetain();
    if (v35(v32, 1, v33))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dsta, v32, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(__dsta, v32, v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(__dsta, 0, 1, v33);
    }
LABEL_13:
    uint64_t v43 = v21[10];
    uint64_t v44 = v18 + v43;
    uint64_t v45 = v19 + v43;
    *(void *)uint64_t v44 = *(void *)v45;
    *(unsigned char *)(v44 + 8) = *(unsigned char *)(v45 + 8);
    uint64_t v46 = v21[11];
    uint64_t v41 = (unsigned char *)(v18 + v46);
    uint64_t v42 = (unsigned char *)(v19 + v46);
    goto LABEL_14;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency() + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(void *)uint64_t v7 = *(void *)(a2 + v6);
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(a2 + v6 + 8);
  long long v9 = *(_OWORD *)(a2 + v6 + 32);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + v6 + 16);
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + v6 + 48);
  *(_OWORD *)(v7 + 57) = *(_OWORD *)(a2 + v6 + 57);
  *(unsigned char *)(v7 + 73) = *(unsigned char *)(a2 + v6 + 73);
  *(_DWORD *)(v7 + 74) = *(_DWORD *)(a2 + v6 + 74);
  *(unsigned char *)(v7 + 78) = *(unsigned char *)(a2 + v6 + 78);
  uint64_t v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v11 = v10[9];
  __dst = (void *)(v7 + v11);
  uint64_t v12 = (const void *)(v8 + v11);
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(__dst, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v37 = v10[10];
  uint64_t v38 = v7 + v37;
  uint64_t v39 = v8 + v37;
  *(void *)uint64_t v38 = *(void *)v39;
  *(unsigned char *)(v38 + 8) = *(unsigned char *)(v39 + 8);
  *(unsigned char *)(v7 + v10[11]) = *(unsigned char *)(v8 + v10[11]);
  uint64_t v40 = v10[12];
  uint64_t v41 = (unsigned char *)(v7 + v40);
  uint64_t v42 = (unsigned char *)(v8 + v40);
LABEL_14:
  *uint64_t v41 = *v42;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for FloatingPointFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v19 = type metadata accessor for FloatingPointFormatStyle.Percent();
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v6 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency() + 40);
        uint64_t v7 = a1 + v6;
        uint64_t v8 = a2 + v6;
        LOBYTE(v6) = *(unsigned char *)(a2 + v6 + 8);
        *(void *)uint64_t v7 = *(void *)v8;
        *(unsigned char *)(v7 + 8) = v6;
        long long v9 = *(_OWORD *)(v8 + 57);
        long long v11 = *(_OWORD *)(v8 + 32);
        long long v10 = *(_OWORD *)(v8 + 48);
        *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
        *(_OWORD *)(v7 + 32) = v11;
        *(_OWORD *)(v7 + 48) = v10;
        *(_OWORD *)(v7 + 57) = v9;
        *(unsigned char *)(v7 + 73) = *(unsigned char *)(v8 + 73);
        *(_DWORD *)(v7 + 74) = *(_DWORD *)(v8 + 74);
        *(unsigned char *)(v7 + 78) = *(unsigned char *)(v8 + 78);
        uint64_t v12 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v13 = v12[9];
        __dst = (void *)(v7 + v13);
        uint64_t v14 = (const void *)(v8 + v13);
        uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v16 = *(void *)(v15 - 8);
        uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v17(v14, 1, v15))
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v14, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(__dst, v14, v15);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
        }
        uint64_t v40 = v12[10];
        uint64_t v41 = v7 + v40;
        uint64_t v42 = (uint64_t *)(v8 + v40);
        uint64_t v43 = *v42;
        *(unsigned char *)(v41 + 8) = *((unsigned char *)v42 + 8);
        *(void *)uint64_t v41 = v43;
        *(unsigned char *)(v7 + v12[11]) = *(unsigned char *)(v8 + v12[11]);
        uint64_t v44 = v12[12];
        uint64_t v38 = (unsigned char *)(v7 + v44);
        uint64_t v39 = (unsigned char *)(v8 + v44);
LABEL_14:
        *uint64_t v38 = *v39;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v19 = type metadata accessor for FloatingPointFormatStyle();
    }
    uint64_t v20 = *(int *)(v19 + 36);
    uint64_t v21 = a1 + v20;
    uint64_t v22 = a2 + v20;
    LOBYTE(v20) = *(unsigned char *)(a2 + v20 + 8);
    *(void *)uint64_t v21 = *(void *)v22;
    *(unsigned char *)(v21 + 8) = v20;
    long long v23 = *(_OWORD *)(v22 + 57);
    long long v25 = *(_OWORD *)(v22 + 32);
    long long v24 = *(_OWORD *)(v22 + 48);
    *(_OWORD *)(v21 + 16) = *(_OWORD *)(v22 + 16);
    *(_OWORD *)(v21 + 32) = v25;
    *(_OWORD *)(v21 + 48) = v24;
    *(_OWORD *)(v21 + 57) = v23;
    *(unsigned char *)(v21 + 73) = *(unsigned char *)(v22 + 73);
    LOWORD(v20) = *(_WORD *)(v22 + 74);
    *(unsigned char *)(v21 + 76) = *(unsigned char *)(v22 + 76);
    *(_WORD *)(v21 + 74) = v20;
    *(unsigned char *)(v21 + 77) = *(unsigned char *)(v22 + 77);
    uint64_t v26 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v27 = v26[9];
    __dsta = (void *)(v21 + v27);
    uint64_t v28 = (const void *)(v22 + v27);
    uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v30 = *(void *)(v29 - 8);
    uint64_t v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
    swift_unknownObjectRetain();
    if (v31(v28, 1, v29))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dsta, v28, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(__dsta, v28, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(__dsta, 0, 1, v29);
    }
    uint64_t v33 = v26[10];
    uint64_t v34 = v21 + v33;
    uint64_t v35 = (uint64_t *)(v22 + v33);
    uint64_t v36 = *v35;
    *(unsigned char *)(v34 + 8) = *((unsigned char *)v35 + 8);
    *(void *)uint64_t v34 = v36;
    uint64_t v37 = v26[11];
    uint64_t v38 = (unsigned char *)(v21 + v37);
    uint64_t v39 = (unsigned char *)(v22 + v37);
    goto LABEL_14;
  }
  return a1;
}

_OWORD *initializeWithTake for FloatingPointFormatStyle.Attributed.Style(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v17 = type metadata accessor for FloatingPointFormatStyle.Percent();
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      long long v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      uint64_t v6 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency() + 40);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
      v7[8] = *((unsigned char *)a2 + v6 + 8);
      long long v9 = *(_OWORD *)((char *)a2 + v6 + 32);
      *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
      *((_OWORD *)v7 + 2) = v9;
      *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
      *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
      v7[73] = *((unsigned char *)a2 + v6 + 73);
      *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
      v7[78] = *((unsigned char *)a2 + v6 + 78);
      long long v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v11 = v10[9];
      uint64_t v12 = &v7[v11];
      uint64_t v13 = &v8[v11];
      uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      uint64_t v35 = v10[10];
      uint64_t v36 = &v7[v35];
      uint64_t v37 = &v8[v35];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v37[8];
      v7[v10[11]] = v8[v10[11]];
      uint64_t v38 = v10[12];
      uint64_t v33 = &v7[v38];
      uint64_t v34 = &v8[v38];
      goto LABEL_13;
    }
    *a1 = *a2;
    uint64_t v17 = type metadata accessor for FloatingPointFormatStyle();
  }
  uint64_t v18 = *(int *)(v17 + 36);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
  v19[8] = *((unsigned char *)a2 + v18 + 8);
  long long v21 = *(_OWORD *)((char *)a2 + v18 + 32);
  *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
  *((_OWORD *)v19 + 2) = v21;
  *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
  *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
  v19[73] = *((unsigned char *)a2 + v18 + 73);
  *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
  v19[76] = *((unsigned char *)a2 + v18 + 76);
  v19[77] = *((unsigned char *)a2 + v18 + 77);
  uint64_t v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v23 = v22[9];
  long long v24 = &v19[v23];
  long long v25 = &v20[v23];
  uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v29 = v22[10];
  uint64_t v30 = &v19[v29];
  uint64_t v31 = &v20[v29];
  *(void *)uint64_t v30 = *(void *)v31;
  v30[8] = v31[8];
  uint64_t v32 = v22[11];
  uint64_t v33 = &v19[v32];
  uint64_t v34 = &v20[v32];
LABEL_13:
  *uint64_t v33 = *v34;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for FloatingPointFormatStyle.Attributed.Style(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    (*(void (**)(_OWORD *, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v18 = type metadata accessor for FloatingPointFormatStyle.Percent();
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        long long v6 = a2[1];
        *a1 = *a2;
        a1[1] = v6;
        uint64_t v7 = *(int *)(type metadata accessor for FloatingPointFormatStyle.Currency() + 40);
        uint64_t v8 = (char *)a1 + v7;
        long long v9 = (char *)a2 + v7;
        *(void *)uint64_t v8 = *(void *)((char *)a2 + v7);
        v8[8] = *((unsigned char *)a2 + v7 + 8);
        long long v10 = *(_OWORD *)((char *)a2 + v7 + 32);
        *((_OWORD *)v8 + 1) = *(_OWORD *)((char *)a2 + v7 + 16);
        *((_OWORD *)v8 + 2) = v10;
        *((_OWORD *)v8 + 3) = *(_OWORD *)((char *)a2 + v7 + 48);
        *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
        v8[73] = *((unsigned char *)a2 + v7 + 73);
        *(_DWORD *)(v8 + 74) = *(_DWORD *)((char *)a2 + v7 + 74);
        v8[78] = *((unsigned char *)a2 + v7 + 78);
        uint64_t v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
        uint64_t v12 = v11[9];
        uint64_t v13 = &v8[v12];
        uint64_t v14 = &v9[v12];
        uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v16 = *(void *)(v15 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
        }
        uint64_t v36 = v11[10];
        uint64_t v37 = &v8[v36];
        uint64_t v38 = &v9[v36];
        *(void *)uint64_t v37 = *(void *)v38;
        v37[8] = v38[8];
        v8[v11[11]] = v9[v11[11]];
        uint64_t v39 = v11[12];
        uint64_t v34 = &v8[v39];
        uint64_t v35 = &v9[v39];
LABEL_14:
        *uint64_t v34 = *v35;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *a1 = *a2;
      uint64_t v18 = type metadata accessor for FloatingPointFormatStyle();
    }
    uint64_t v19 = *(int *)(v18 + 36);
    uint64_t v20 = (char *)a1 + v19;
    long long v21 = (char *)a2 + v19;
    *(void *)uint64_t v20 = *(void *)((char *)a2 + v19);
    v20[8] = *((unsigned char *)a2 + v19 + 8);
    long long v22 = *(_OWORD *)((char *)a2 + v19 + 32);
    *((_OWORD *)v20 + 1) = *(_OWORD *)((char *)a2 + v19 + 16);
    *((_OWORD *)v20 + 2) = v22;
    *((_OWORD *)v20 + 3) = *(_OWORD *)((char *)a2 + v19 + 48);
    *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v19 + 57);
    v20[73] = *((unsigned char *)a2 + v19 + 73);
    *((_WORD *)v20 + 37) = *(_WORD *)((char *)a2 + v19 + 74);
    v20[76] = *((unsigned char *)a2 + v19 + 76);
    v20[77] = *((unsigned char *)a2 + v19 + 77);
    uint64_t v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v24 = v23[9];
    long long v25 = &v20[v24];
    uint64_t v26 = &v21[v24];
    uint64_t v27 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    uint64_t v30 = v23[10];
    uint64_t v31 = &v20[v30];
    uint64_t v32 = &v21[v30];
    *(void *)uint64_t v31 = *(void *)v32;
    v31[8] = v32[8];
    uint64_t v33 = v23[11];
    uint64_t v34 = &v20[v33];
    uint64_t v35 = &v21[v33];
    goto LABEL_14;
  }
  return a1;
}

uint64_t base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.Style()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in FloatingPointFormatStyle<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Percent.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Currency.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Attributed.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Attributed.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Currency.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Currency.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Percent.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Percent.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.Style.PercentCodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CurrencyCodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.Style.FloatingPointCodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FloatingPointFormatStyle.Attributed.Style.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for FloatingPointFormatStyle.Currency.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181E55208);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FloatingPointFormatStyle.Attributed.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181E552CCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.FloatingPointCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in FloatingPointFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t AttributedString.CharacterView.index(after:)@<X0>(uint64_t *a1@<X8>)
{
  int v3 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  long long v5 = v3[1];
  long long v6 = v3[3];
  v15[1] = v3[2];
  void v15[2] = v6;
  v15[0] = v5;
  long long v7 = v3[1];
  v16[1] = v3[2];
  _OWORD v16[2] = v6;
  v16[0] = v7;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v16, (uint64_t)v17);
  outlined retain of Locale((uint64_t)v17);
  uint64_t v8 = BigString.index(after:)();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  outlined release of Locale((uint64_t)v15);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v12;
    a1[3] = v14;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t AttributedString.CharacterView.index(before:)@<X0>(uint64_t *a1@<X8>)
{
  unint64_t v2 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  long long v4 = v2[1];
  long long v5 = v2[3];
  v15[1] = v2[2];
  void v15[2] = v5;
  v15[0] = v4;
  long long v6 = v2[1];
  v16[1] = v2[2];
  _OWORD v16[2] = v5;
  v16[0] = v6;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v16, (uint64_t)v17);
  outlined retain of Locale((uint64_t)v17);
  uint64_t v7 = BigString.index(before:)();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  outlined release of Locale((uint64_t)v15);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a1 = v7;
    a1[1] = v9;
    a1[2] = v11;
    a1[3] = v13;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection.init(repeating:count:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BigString.init()();
  v69[0] = 0;
  MEMORY[0x185309530](v69, 8);
  uint64_t v4 = v69[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v5 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v57 = a2;
  long long v7 = v66[0];
  long long v8 = v66[1];
  *(_OWORD *)(v5 + 16) = v66[0];
  *(_OWORD *)(v5 + 32) = v8;
  long long v9 = v67;
  *(_OWORD *)(v5 + 48) = v67;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(void *)(v5 + 88) = v4;
  v72[0] = v7;
  v72[1] = v8;
  v72[2] = v9;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v72, (uint64_t)v73);
  outlined retain of Locale((uint64_t)v73);
  uint64_t v10 = BigString.startIndex.getter();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  outlined release of Locale((uint64_t)v66);
  long long v17 = *(_OWORD *)(v5 + 32);
  v92[0] = *(_OWORD *)(v5 + 16);
  v92[1] = v17;
  long long v93 = *(_OWORD *)(v5 + 48);
  v94[0] = v92[0];
  v94[1] = v17;
  v94[2] = v93;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v94, (uint64_t)v95);
  outlined retain of Locale((uint64_t)v95);
  uint64_t v18 = BigString.endIndex.getter();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  outlined release of Locale((uint64_t)v92);
  uint64_t v81 = v10;
  uint64_t v82 = v12;
  uint64_t v83 = v14;
  uint64_t v84 = v16;
  uint64_t v85 = v18;
  uint64_t v86 = v20;
  uint64_t v87 = v22;
  uint64_t v88 = v24;
  long long v25 = *(_OWORD *)(v5 + 32);
  long long v89 = *(_OWORD *)(v5 + 16);
  long long v90 = v25;
  long long v91 = *(_OWORD *)(v5 + 48);
  swift_retain();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v68);
  uint64_t v26 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v33 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  unint64_t v39 = v38;
  outlined release of Locale((uint64_t)v69);
  uint64_t result = swift_release();
  uint64_t v59 = (_OWORD *)v5;
  uint64_t v60 = v28;
  uint64_t v61 = v32;
  uint64_t v62 = v33;
  uint64_t v63 = v35;
  uint64_t v64 = v37;
  long long v65 = v39;
  if (a1)
  {
    if (a1 < 0)
    {
LABEL_15:
      __break(1u);
      return result;
    }
    while (1)
    {
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        break;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_12;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_13;
      }
      long long v40 = v59[2];
      long long v78 = v59[1];
      long long v79 = v40;
      long long v80 = v59[3];
      BigString.unicodeScalars.getter();
      uint64_t v41 = BigString.UnicodeScalarView.index(roundingDown:)();
      uint64_t v43 = v42;
      uint64_t v45 = v44;
      uint64_t v58 = a1;
      uint64_t v47 = v46;
      outlined release of Locale((uint64_t)v70);
      long long v48 = v59[2];
      long long v75 = v59[1];
      long long v76 = v48;
      long long v77 = v59[3];
      BigString.unicodeScalars.getter();
      uint64_t v49 = BigString.UnicodeScalarView.index(roundingDown:)();
      uint64_t v51 = v50;
      uint64_t v53 = v52;
      uint64_t v55 = v54;
      outlined release of Locale((uint64_t)v71);
      v74[0] = v41;
      v74[1] = v43;
      v74[2] = v45;
      v74[3] = v47;
      v74[4] = v49;
      v74[5] = v51;
      v74[6] = v53;
      v74[7] = v55;
      uint64_t result = specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)v74);
      a1 = v58 - 1;
      if (v58 == 1)
      {
        uint64_t v5 = (uint64_t)v59;
        uint64_t v28 = v60;
        uint64_t v32 = v61;
        uint64_t v33 = v62;
        uint64_t v35 = v63;
        uint64_t v37 = v64;
        long long v56 = v65;
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  long long v56 = v39;
LABEL_10:
  *(void *)uint64_t v57 = v5;
  *(void *)(v57 + 8) = v26;
  *(void *)(v57 + 16) = v28;
  *(void *)(v57 + 24) = v30;
  *(void *)(v57 + 32) = v32;
  *(void *)(v57 + 40) = v33;
  *(void *)(v57 + 48) = v35;
  *(void *)(v57 + 56) = v37;
  *(_OWORD *)(v57 + 64) = v56;
  return result;
}

uint64_t specialized RangeReplaceableCollection.init(repeating:count:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  BigString.init()();
  long long v56 = 0;
  MEMORY[0x185309530](&v56, 8);
  uint64_t v4 = v56;
  type metadata accessor for AttributedString.Guts();
  uint64_t v5 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v53 = a2;
  long long v7 = v65[1];
  *(_OWORD *)(v5 + 16) = v65[0];
  *(_OWORD *)(v5 + 32) = v7;
  *(_OWORD *)(v5 + 48) = v65[2];
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(void *)(v5 + 88) = v4;
  swift_retain();
  outlined retain of Locale((uint64_t)v65);
  uint64_t v8 = BigString.startIndex.getter();
  uint64_t v10 = v9;
  uint64_t v54 = v11;
  uint64_t v13 = v12;
  outlined release of Locale((uint64_t)v65);
  long long v14 = *(_OWORD *)(v5 + 32);
  v69[0] = *(_OWORD *)(v5 + 16);
  v69[1] = v14;
  long long v70 = *(_OWORD *)(v5 + 48);
  v71[0] = v69[0];
  v71[1] = v14;
  v71[2] = v70;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v71, (uint64_t)v72);
  outlined retain of Locale((uint64_t)v72);
  uint64_t v15 = BigString.endIndex.getter();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  unint64_t v21 = v20;
  outlined release of Locale((uint64_t)v69);
  uint64_t result = swift_release();
  long long v56 = (_OWORD *)v5;
  uint64_t v57 = v8;
  uint64_t v52 = v10;
  uint64_t v58 = v10;
  uint64_t v22 = v13;
  uint64_t v23 = v54;
  uint64_t v59 = v54;
  uint64_t v60 = v22;
  uint64_t v61 = v15;
  uint64_t v62 = v17;
  uint64_t v63 = v19;
  long long v64 = v21;
  if (a1)
  {
    if (a1 < 0)
    {
LABEL_15:
      __break(1u);
      return result;
    }
    while (1)
    {
      uint64_t v24 = v61;
      uint64_t v25 = v62;
      uint64_t v26 = v63;
      uint64_t v27 = v64;
      swift_bridgeObjectRetain();
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        break;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_12;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_13;
      }
      uint64_t v28 = v56;
      long long v29 = v56[1];
      long long v30 = v56[3];
      v68[1] = v56[2];
      v68[2] = v30;
      v68[0] = v29;
      long long v31 = v56[1];
      v73[1] = v56[2];
      v73[2] = v30;
      v73[0] = v31;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v73, (uint64_t)v74);
      outlined retain of Locale((uint64_t)v74);
      uint64_t v32 = MEMORY[0x185301530](v24, v25, v26, v27);
      uint64_t v34 = v33;
      uint64_t v55 = a1;
      uint64_t v36 = v35;
      uint64_t v38 = v37;
      outlined release of Locale((uint64_t)v68);
      long long v39 = v28[1];
      long long v40 = v28[3];
      v67[1] = v28[2];
      v67[2] = v40;
      v67[0] = v39;
      long long v41 = v28[1];
      v75[1] = v28[2];
      v75[2] = v40;
      v75[0] = v41;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v75, (uint64_t)v76);
      outlined retain of Locale((uint64_t)v76);
      uint64_t v42 = MEMORY[0x185301530](v24, v25, v26, v27);
      uint64_t v44 = v43;
      uint64_t v46 = v45;
      uint64_t v48 = v47;
      outlined release of Locale((uint64_t)v67);
      v66[0] = v32;
      v66[1] = v34;
      _OWORD v66[2] = v36;
      _OWORD v66[3] = v38;
      v66[4] = v42;
      v66[5] = v44;
      v66[6] = v46;
      v66[7] = v48;
      specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v66);
      swift_bridgeObjectRelease();
      a1 = v55 - 1;
      if (v55 == 1)
      {
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v5 = (uint64_t)v56;
        uint64_t v49 = v57;
        uint64_t v50 = v58;
        uint64_t v23 = v59;
        uint64_t v22 = v60;
        uint64_t v15 = v61;
        uint64_t v17 = v62;
        uint64_t v19 = v63;
        long long v51 = v64;
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = swift_bridgeObjectRelease();
  long long v51 = v21;
  uint64_t v49 = v8;
  uint64_t v50 = v52;
LABEL_10:
  *(void *)uint64_t v53 = v5;
  *(void *)(v53 + 8) = v49;
  *(void *)(v53 + 16) = v50;
  *(void *)(v53 + 24) = v23;
  *(void *)(v53 + 32) = v22;
  *(void *)(v53 + 40) = v15;
  *(void *)(v53 + 48) = v17;
  *(void *)(v53 + 56) = v19;
  *(_OWORD *)(v53 + 64) = v51;
  return result;
}

uint64_t specialized RangeReplaceableCollection.append<A>(contentsOf:)()
{
  uint64_t v1 = v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v4 = (char *)&v23 - v3;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v26 = v4;
  uint64_t v27 = AssociatedTypeWitness;
  uint64_t v25 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  if (v33) {
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v27);
  }
  while (1)
  {
    int v6 = v32;
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      break;
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_8;
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_9;
    }
    uint64_t v8 = *(_OWORD **)v1;
    long long v9 = *(_OWORD *)(*(void *)v1 + 32);
    long long v40 = *(_OWORD *)(*(void *)v1 + 16);
    long long v41 = v9;
    long long v42 = v8[3];
    int v31 = v6;
    BigString.unicodeScalars.getter();
    uint64_t v10 = BigString.UnicodeScalarView.index(roundingDown:)();
    uint64_t v29 = v11;
    uint64_t v30 = v10;
    uint64_t v13 = v12;
    uint64_t v28 = v14;
    outlined release of Locale((uint64_t)&v34);
    long long v15 = v8[2];
    long long v37 = v8[1];
    long long v38 = v15;
    long long v39 = v8[3];
    BigString.unicodeScalars.getter();
    uint64_t v16 = BigString.UnicodeScalarView.index(roundingDown:)();
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    outlined release of Locale((uint64_t)&v35);
    v36[0] = v30;
    v36[1] = v29;
    void v36[2] = v13;
    v36[3] = v28;
    v36[4] = v16;
    v36[5] = v18;
    v36[6] = v20;
    v36[7] = v22;
    specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)v36);
    dispatch thunk of IteratorProtocol.next()();
    if (v33 == 1) {
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v27);
    }
  }
  __break(1u);
LABEL_8:
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

{
  void *v0;
  void *v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  char *v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _OWORD *v12;
  long long v13;
  long long v14;
  long long v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  long long v22;
  long long v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void v31[2];
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void v40[8];
  _OWORD v41[3];
  _OWORD v42[3];
  long long v43[3];
  unsigned char v44[40];
  long long v45[3];
  unsigned char v46[48];

  uint64_t v1 = v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31[0] = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v4 = (char *)v31 - v3;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  int v32 = v4;
  char v33 = AssociatedTypeWitness;
  v31[1] = AssociatedConformanceWitness;
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (!v39) {
      return (*(uint64_t (**)(char *, uint64_t))(v31[0] + 8))(v32, v33);
    }
    int v6 = v38;
    long long v7 = v1[5];
    uint64_t v8 = v1[6];
    long long v9 = v1[7];
    uint64_t v10 = v1[8];
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      break;
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_9;
    }
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result) {
      goto LABEL_10;
    }
    uint64_t v12 = (_OWORD *)*v1;
    uint64_t v13 = *(_OWORD *)(*v1 + 16);
    uint64_t v14 = *(_OWORD *)(*v1 + 48);
    v42[1] = *(_OWORD *)(*v1 + 32);
    void v42[2] = v14;
    v42[0] = v13;
    long long v15 = v12[1];
    v43[1] = v12[2];
    v43[2] = v14;
    v43[0] = v15;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v43, (uint64_t)v44);
    outlined retain of Locale((uint64_t)v44);
    long long v37 = v6;
    uint64_t v16 = MEMORY[0x185301530](v7, v8, v9, v10);
    uint64_t v35 = v17;
    uint64_t v36 = v16;
    uint64_t v19 = v18;
    uint64_t v34 = v20;
    outlined release of Locale((uint64_t)v42);
    uint64_t v21 = v12[1];
    uint64_t v22 = v12[3];
    v41[1] = v12[2];
    void v41[2] = v22;
    v41[0] = v21;
    uint64_t v23 = v12[1];
    v45[1] = v12[2];
    _OWORD v45[2] = v22;
    v45[0] = v23;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v45, (uint64_t)v46);
    outlined retain of Locale((uint64_t)v46);
    uint64_t v24 = MEMORY[0x185301530](v7, v8, v9, v10);
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    outlined release of Locale((uint64_t)v41);
    v40[0] = v36;
    v40[1] = v19;
    v40[2] = v35;
    v40[3] = v34;
    void v40[4] = v24;
    v40[5] = v26;
    v40[6] = v28;
    v40[7] = v30;
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v40);
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection.removeFirst()()
{
  uint64_t result = static BigString.Index.== infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v2 = (_OWORD *)*v0;
  uint64_t result = static BigString.Index.== infix(_:_:)();
  if (result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  long long v3 = v2[2];
  long long v40 = v2[1];
  long long v41 = v3;
  long long v42 = v2[3];
  BigString.unicodeScalars.getter();
  unsigned int v4 = BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v26);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  unsigned int v25 = v4;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v5 = v2 + 1;
  long long v6 = v2[2];
  long long v37 = v2[1];
  long long v38 = v6;
  long long v39 = v2[3];
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(_:offsetBy:limitedBy:)();
  uint64_t v8 = v7;
  uint64_t result = outlined release of Locale((uint64_t)v27);
  if (v8 != 2)
  {
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0)
    {
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0)
      {
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if ((result & 1) == 0)
        {
          uint64_t result = static BigString.Index.< infix(_:_:)();
          if ((result & 1) == 0)
          {
            uint64_t result = static BigString.Index.< infix(_:_:)();
            if ((result & 1) == 0)
            {
              long long v9 = v5[1];
              long long v34 = *v5;
              long long v35 = v9;
              long long v36 = v5[2];
              BigString.unicodeScalars.getter();
              uint64_t v10 = BigString.UnicodeScalarView.index(roundingDown:)();
              uint64_t v12 = v11;
              uint64_t v14 = v13;
              uint64_t v16 = v15;
              outlined release of Locale((uint64_t)v28);
              long long v17 = v5[1];
              long long v31 = *v5;
              long long v32 = v17;
              long long v33 = v5[2];
              BigString.unicodeScalars.getter();
              uint64_t v18 = BigString.UnicodeScalarView.index(roundingDown:)();
              uint64_t v20 = v19;
              uint64_t v22 = v21;
              uint64_t v24 = v23;
              outlined release of Locale((uint64_t)v29);
              v30[0] = v10;
              v30[1] = v12;
              v30[2] = v14;
              _OWORD v30[3] = v16;
              v30[4] = v18;
              void v30[5] = v20;
              v30[6] = v22;
              v30[7] = v24;
              specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)v30);
              return v25;
            }
            goto LABEL_28;
          }
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _OWORD *v6;
  long long v7;
  long long v8;
  long long v9;
  uint64_t v10;
  long long *v11;
  long long v12;
  long long v13;
  long long v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  long long v22;
  long long v23;
  long long v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  long long v32;
  long long v33;
  long long v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  void v44[8];
  _OWORD v45[3];
  _OWORD v46[3];
  _OWORD v47[3];
  _OWORD v48[3];
  long long v49[3];
  unsigned char v50[40];
  long long v51[3];
  unsigned char v52[40];
  long long v53[3];
  unsigned char v54[40];
  long long v55[3];
  unsigned char v56[48];

  uint64_t v1 = v0[1];
  unint64_t v2 = v0[2];
  long long v3 = v0[3];
  unsigned int v4 = v0[4];
  uint64_t result = static BigString.Index.== infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_17;
  }
  long long v6 = (_OWORD *)*v0;
  uint64_t result = static BigString.Index.== infix(_:_:)();
  if (result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v7 = v6[1];
  uint64_t v8 = v6[3];
  v48[1] = v6[2];
  void v48[2] = v8;
  v48[0] = v7;
  long long v9 = v6[1];
  v49[1] = v6[2];
  v49[2] = v8;
  v49[0] = v9;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v49, (uint64_t)v50);
  outlined retain of Locale((uint64_t)v50);
  uint64_t v10 = BigString.subscript.getter();
  outlined release of Locale((uint64_t)v48);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v43 = v6;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  long long v42 = v10;
  uint64_t v11 = v6 + 1;
  uint64_t v12 = v6[1];
  uint64_t v13 = v6[3];
  v47[1] = v6[2];
  v47[2] = v13;
  v47[0] = v12;
  uint64_t v14 = v6[1];
  v51[1] = v6[2];
  v51[2] = v13;
  v51[0] = v14;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v51, (uint64_t)v52);
  outlined retain of Locale((uint64_t)v52);
  uint64_t v15 = BigString.index(_:offsetBy:limitedBy:)();
  long long v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t result = outlined release of Locale((uint64_t)v47);
  if (v21 != 2)
  {
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0)
    {
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0)
      {
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if ((result & 1) == 0)
        {
          uint64_t result = static BigString.Index.< infix(_:_:)();
          if ((result & 1) == 0)
          {
            uint64_t result = static BigString.Index.< infix(_:_:)();
            if ((result & 1) == 0)
            {
              uint64_t v22 = *v11;
              uint64_t v23 = v43[3];
              v46[1] = v43[2];
              _OWORD v46[2] = v23;
              v46[0] = v22;
              uint64_t v24 = *v11;
              v53[1] = v43[2];
              v53[2] = v23;
              v53[0] = v24;
              outlined init with take of any PredicateExpression<Self.Output == B1>(v53, (uint64_t)v54);
              outlined retain of Locale((uint64_t)v54);
              unsigned int v25 = MEMORY[0x185301530](v1, v2, v3, v4);
              uint64_t v27 = v26;
              uint64_t v29 = v28;
              long long v31 = v30;
              outlined release of Locale((uint64_t)v46);
              long long v32 = *v11;
              long long v33 = v43[3];
              v45[1] = v43[2];
              _OWORD v45[2] = v33;
              v45[0] = v32;
              long long v34 = *v11;
              v55[1] = v43[2];
              _OWORD v55[2] = v33;
              v55[0] = v34;
              outlined init with take of any PredicateExpression<Self.Output == B1>(v55, (uint64_t)v56);
              outlined retain of Locale((uint64_t)v56);
              long long v35 = MEMORY[0x185301530](v15, v17, v19, v21);
              long long v37 = v36;
              long long v39 = v38;
              long long v41 = v40;
              outlined release of Locale((uint64_t)v45);
              v44[0] = v25;
              v44[1] = v27;
              _OWORD v44[2] = v29;
              v44[3] = v31;
              v44[4] = v35;
              v44[5] = v37;
              v44[6] = v39;
              v44[7] = v41;
              specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v44);
              return v42;
            }
            goto LABEL_28;
          }
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection.removeAll(where:)(uint64_t (*a1)(uint64_t *))
{
  long long v3 = (_OWORD *)*v1;
  uint64_t v117 = v1[7];
  swift_retain();
  BigString.init()();
  uint64_t v69 = 0;
  MEMORY[0x185309530](&v69, 8);
  uint64_t v4 = v69;
  type metadata accessor for AttributedString.Guts();
  uint64_t v5 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) == 0)
  {
LABEL_28:
    __break(1u);
    return result;
  }
  long long v66 = v3;
  uint64_t v59 = v1;
  long long v7 = v79[0];
  long long v8 = v79[1];
  *(_OWORD *)(v5 + 16) = v79[0];
  *(_OWORD *)(v5 + 32) = v8;
  long long v9 = v80;
  *(_OWORD *)(v5 + 48) = v80;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(void *)(v5 + 88) = v4;
  v87[0] = v7;
  v87[1] = v8;
  v87[2] = v9;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v87, (uint64_t)v88);
  outlined retain of Locale((uint64_t)v88);
  uint64_t v67 = BigString.startIndex.getter();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  outlined release of Locale((uint64_t)v79);
  long long v16 = *(_OWORD *)(v5 + 32);
  v113[0] = *(_OWORD *)(v5 + 16);
  v113[1] = v16;
  long long v114 = *(_OWORD *)(v5 + 48);
  v115[0] = v113[0];
  v115[1] = v16;
  v115[2] = v114;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v115, (uint64_t)v116);
  outlined retain of Locale((uint64_t)v116);
  uint64_t v17 = BigString.endIndex.getter();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  outlined release of Locale((uint64_t)v113);
  uint64_t v102 = v67;
  uint64_t v103 = v11;
  uint64_t v104 = v13;
  uint64_t v105 = v15;
  uint64_t v106 = v17;
  uint64_t v107 = v19;
  uint64_t v108 = v21;
  uint64_t v109 = v23;
  long long v24 = *(_OWORD *)(v5 + 32);
  long long v110 = *(_OWORD *)(v5 + 16);
  long long v111 = v24;
  long long v112 = *(_OWORD *)(v5 + 48);
  swift_retain();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v81);
  uint64_t v25 = BigSubstring.UnicodeScalarView.startIndex.getter();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v32 = BigSubstring.UnicodeScalarView.endIndex.getter();
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  unint64_t v38 = v37;
  outlined release of Locale((uint64_t)v82);
  swift_release();
  long long v70 = (_OWORD *)v5;
  uint64_t v71 = v25;
  uint64_t v72 = v27;
  uint64_t v73 = v29;
  uint64_t v74 = v31;
  uint64_t v75 = v32;
  uint64_t v76 = v34;
  uint64_t v77 = v36;
  long long v78 = v38;
  if ((static BigString.Index.== infix(_:_:)() & 1) == 0)
  {
    long long v65 = v66 + 1;
    while (1)
    {
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        break;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0) {
        goto LABEL_21;
      }
      long long v41 = v66[2];
      long long v99 = *v65;
      long long v100 = v41;
      long long v101 = v66[3];
      BigString.unicodeScalars.getter();
      int v68 = BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v83);
      swift_retain();
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_22;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_23;
      }
      long long v42 = v66[2];
      long long v96 = *v65;
      long long v97 = v42;
      long long v98 = v66[3];
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.index(after:)();
      outlined release of Locale((uint64_t)v84);
      char v43 = static BigString.Index.< infix(_:_:)();
      uint64_t result = swift_release();
      if (v43) {
        goto LABEL_24;
      }
      LODWORD(v69) = v68;
      char v44 = a1(&v69);
      if (v2)
      {
        swift_release();
        return swift_release();
      }
      if ((v44 & 1) == 0)
      {
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if (result) {
          goto LABEL_25;
        }
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if (result) {
          goto LABEL_26;
        }
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if (result) {
          goto LABEL_27;
        }
        uint64_t v45 = v70;
        long long v46 = v70[2];
        long long v93 = v70[1];
        long long v94 = v46;
        long long v95 = v70[3];
        BigString.unicodeScalars.getter();
        uint64_t v47 = BigString.UnicodeScalarView.index(roundingDown:)();
        uint64_t v62 = v48;
        uint64_t v63 = v47;
        uint64_t v60 = v50;
        uint64_t v61 = v49;
        outlined release of Locale((uint64_t)v85);
        long long v51 = v45[2];
        long long v90 = v45[1];
        long long v91 = v51;
        long long v92 = v45[3];
        BigString.unicodeScalars.getter();
        uint64_t v52 = BigString.UnicodeScalarView.index(roundingDown:)();
        uint64_t v54 = v53;
        uint64_t v56 = v55;
        uint64_t v58 = v57;
        outlined release of Locale((uint64_t)v86);
        v89[0] = v63;
        v89[1] = v62;
        v89[2] = v61;
        v89[3] = v60;
        v89[4] = v52;
        v89[5] = v54;
        v89[6] = v56;
        v89[7] = v58;
        specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)v89);
      }
      if (static BigString.Index.== infix(_:_:)())
      {
        uint64_t result = swift_release_n();
        uint64_t v5 = (uint64_t)v70;
        uint64_t v40 = v71;
        uint64_t v27 = v72;
        uint64_t v29 = v73;
        uint64_t v31 = v74;
        uint64_t v32 = v75;
        uint64_t v34 = v76;
        uint64_t v36 = v77;
        long long v39 = v78;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t result = swift_release_n();
  long long v39 = v38;
  uint64_t v40 = v25;
LABEL_19:
  *uint64_t v59 = v5;
  v59[1] = v40;
  v59[2] = v27;
  v59[3] = v29;
  v59[4] = v31;
  v59[5] = v32;
  v59[6] = v34;
  v59[7] = v36;
  *((_OWORD *)v59 + 4) = v39;
  return result;
}

uint64_t specialized RangeReplaceableCollection.removeAll(where:)(uint64_t (*a1)(void *))
{
  long long v3 = (_OWORD *)*v1;
  uint64_t v102 = v1[6];
  swift_retain();
  BigString.init()();
  v74[0] = 0;
  MEMORY[0x185309530](v74, 8);
  uint64_t v4 = v74[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v5 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) == 0)
  {
LABEL_28:
    __break(1u);
    return result;
  }
  uint64_t v69 = v3;
  uint64_t v60 = v1;
  long long v7 = v84[1];
  *(_OWORD *)(v5 + 16) = v84[0];
  *(_OWORD *)(v5 + 32) = v7;
  *(_OWORD *)(v5 + 48) = v84[2];
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(void *)(v5 + 88) = v4;
  swift_retain();
  outlined retain of Locale((uint64_t)v84);
  uint64_t v8 = BigString.startIndex.getter();
  uint64_t v70 = v10;
  uint64_t v72 = v9;
  uint64_t v12 = v11;
  outlined release of Locale((uint64_t)v84);
  long long v13 = *(_OWORD *)(v5 + 32);
  v90[0] = *(_OWORD *)(v5 + 16);
  v90[1] = v13;
  long long v91 = *(_OWORD *)(v5 + 48);
  v92[0] = v90[0];
  v92[1] = v13;
  _OWORD v92[2] = v91;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v92, (uint64_t)v93);
  outlined retain of Locale((uint64_t)v93);
  uint64_t v14 = BigString.endIndex.getter();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  unint64_t v20 = v19;
  outlined release of Locale((uint64_t)v90);
  swift_release();
  uint64_t v75 = (_OWORD *)v5;
  uint64_t v76 = v8;
  uint64_t v66 = v14;
  uint64_t v67 = v8;
  uint64_t v21 = v70;
  uint64_t v77 = v72;
  uint64_t v78 = v70;
  uint64_t v79 = v12;
  uint64_t v80 = v14;
  uint64_t v22 = v16;
  uint64_t v81 = v16;
  uint64_t v82 = v18;
  uint64_t v23 = v18;
  long long v83 = v20;
  if ((static BigString.Index.== infix(_:_:)() & 1) == 0)
  {
    int v68 = v69 + 1;
    uint64_t v27 = v2;
    while (1)
    {
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        break;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0) {
        goto LABEL_21;
      }
      long long v28 = *v68;
      long long v29 = v69[3];
      v89[1] = v69[2];
      v89[2] = v29;
      v89[0] = v28;
      long long v30 = *v68;
      v94[1] = v69[2];
      v94[2] = v29;
      v94[0] = v30;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v94, (uint64_t)v95);
      outlined retain of Locale((uint64_t)v95);
      uint64_t v71 = BigString.subscript.getter();
      uint64_t v73 = v31;
      outlined release of Locale((uint64_t)v89);
      swift_retain();
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_22;
      }
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if (result) {
        goto LABEL_23;
      }
      long long v32 = *v68;
      long long v33 = v69[3];
      v88[1] = v69[2];
      v88[2] = v33;
      v88[0] = v32;
      long long v34 = *v68;
      v96[1] = v69[2];
      v96[2] = v33;
      v96[0] = v34;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v96, (uint64_t)v97);
      outlined retain of Locale((uint64_t)v97);
      BigString.index(after:)();
      outlined release of Locale((uint64_t)v88);
      char v35 = static BigString.Index.< infix(_:_:)();
      uint64_t result = swift_release();
      if (v35) {
        goto LABEL_24;
      }
      v74[0] = v71;
      v74[1] = v73;
      char v36 = a1(v74);
      if (v27)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      if ((v36 & 1) == 0)
      {
        uint64_t v38 = v80;
        uint64_t v37 = v81;
        uint64_t v40 = v82;
        uint64_t v39 = v83;
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if (result) {
          goto LABEL_25;
        }
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if (result) {
          goto LABEL_26;
        }
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if (result) {
          goto LABEL_27;
        }
        long long v41 = v75;
        long long v42 = v75[1];
        long long v43 = v75[3];
        v87[1] = v75[2];
        v87[2] = v43;
        v87[0] = v42;
        long long v44 = v75[1];
        v98[1] = v75[2];
        v98[2] = v43;
        v98[0] = v44;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v98, (uint64_t)v99);
        outlined retain of Locale((uint64_t)v99);
        uint64_t v45 = MEMORY[0x185301530](v38, v37, v40, v39);
        uint64_t v63 = v46;
        uint64_t v64 = v45;
        uint64_t v61 = v48;
        uint64_t v62 = v47;
        outlined release of Locale((uint64_t)v87);
        long long v49 = v41[1];
        long long v50 = v41[3];
        v86[1] = v41[2];
        v86[2] = v50;
        v86[0] = v49;
        long long v51 = v41[1];
        long long v52 = v41[2];
        uint64_t v27 = 0;
        v100[1] = v52;
        v100[2] = v50;
        v100[0] = v51;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v100, (uint64_t)v101);
        outlined retain of Locale((uint64_t)v101);
        uint64_t v53 = MEMORY[0x185301530](v38, v37, v40, v39);
        uint64_t v55 = v54;
        uint64_t v57 = v56;
        uint64_t v59 = v58;
        outlined release of Locale((uint64_t)v86);
        v85[0] = v64;
        v85[1] = v63;
        v85[2] = v62;
        v85[3] = v61;
        v85[4] = v53;
        v85[5] = v55;
        v85[6] = v57;
        v85[7] = v59;
        specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v85);
      }
      swift_bridgeObjectRelease();
      if (static BigString.Index.== infix(_:_:)())
      {
        uint64_t result = swift_release_n();
        uint64_t v5 = (uint64_t)v75;
        uint64_t v25 = v76;
        uint64_t v21 = v78;
        uint64_t v72 = v77;
        uint64_t v12 = v79;
        uint64_t v26 = v80;
        uint64_t v22 = v81;
        uint64_t v23 = v82;
        long long v24 = v83;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t result = swift_release_n();
  long long v24 = v20;
  uint64_t v26 = v66;
  uint64_t v25 = v67;
LABEL_19:
  *uint64_t v60 = v5;
  v60[1] = v25;
  _OWORD v60[2] = v72;
  v60[3] = v21;
  v60[4] = v12;
  v60[5] = v26;
  v60[6] = v22;
  v60[7] = v23;
  *((_OWORD *)v60 + 4) = v24;
  return result;
}

void *specialized Rope.update<A>(at:by:)(void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[3];
  if (*result != v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (!*a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  long long v6 = result;
  uint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(result[1], (uint64_t)v9);
  v8[0] = v9[0];
  v8[1] = v9[1];
  v8[2] = v9[2];
  if (__OFADD__(*((void *)&v9[0] + 1), a3))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *((void *)&v8[0] + 1) = *((void *)&v9[0] + 1) + a3;
  a2[3] = v3 + 1;
  *long long v6 = v3 + 1;
  if (!*a2)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  id v6[2] = specialized Rope._Node._finalizeModify(_:)(&v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return (void *)swift_bridgeObjectRelease();
}

{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  _OWORD v8[3];
  _OWORD v9[3];
  uint64_t vars8;

  uint64_t v3 = a2[3];
  if (*result != v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (!*a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  long long v6 = result;
  uint64_t result = (void *)specialized Rope._Node._prepareModify(at:)(result[1], (uint64_t)v9);
  v8[0] = v9[0];
  v8[1] = v9[1];
  v8[2] = v9[2];
  if (__OFADD__(*((void *)&v9[0] + 1), a3))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *((void *)&v8[0] + 1) = *((void *)&v9[0] + 1) + a3;
  a2[3] = v3 + 1;
  *long long v6 = v3 + 1;
  if (!*a2)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  id v6[2] = specialized Rope._Node._finalizeModify(_:)(&v7, v8);
  swift_bridgeObjectRelease();

  return (void *)swift_bridgeObjectRelease();
}

uint64_t AttributedString.CharacterView.init()@<X0>(uint64_t *a1@<X8>)
{
  BigString.init()();
  *(void *)&v24[0] = 0;
  MEMORY[0x185309530](v24, 8);
  uint64_t v2 = *(void *)&v24[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v3 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if (result)
  {
    long long v5 = v21[1];
    *(_OWORD *)(v3 + 16) = v21[0];
    *(_OWORD *)(v3 + 32) = v5;
    *(_OWORD *)(v3 + 48) = v21[2];
    *(void *)(v3 + 64) = 0;
    *(void *)(v3 + 72) = 0;
    *(void *)(v3 + 80) = 0;
    *(void *)(v3 + 88) = v2;
    swift_retain();
    outlined retain of Locale((uint64_t)v21);
    uint64_t v6 = BigString.startIndex.getter();
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    outlined release of Locale((uint64_t)v21);
    long long v13 = *(_OWORD *)(v3 + 32);
    v22[0] = *(_OWORD *)(v3 + 16);
    v22[1] = v13;
    long long v23 = *(_OWORD *)(v3 + 48);
    v24[0] = v22[0];
    v24[1] = v13;
    void v24[2] = v23;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v24, (uint64_t)v25);
    outlined retain of Locale((uint64_t)v25);
    uint64_t v14 = BigString.endIndex.getter();
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    outlined release of Locale((uint64_t)v22);
    uint64_t result = swift_release();
    *a1 = v3;
    a1[1] = v6;
    a1[2] = v8;
    a1[3] = v10;
    a1[4] = v12;
    a1[5] = v14;
    a1[6] = v16;
    a1[7] = v18;
    a1[8] = v20;
    a1[9] = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path getter for AttributedString.characters : AttributedString@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(_OWORD **)a1;
  long long v4 = *(_OWORD *)(*(void *)a1 + 16);
  long long v5 = *(_OWORD *)(*(void *)a1 + 48);
  v25[1] = *(_OWORD *)(*(void *)a1 + 32);
  void v25[2] = v5;
  v25[0] = v4;
  swift_retain();
  outlined retain of Locale((uint64_t)v25);
  uint64_t v6 = BigString.startIndex.getter();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  outlined release of Locale((uint64_t)v25);
  long long v13 = v3[1];
  long long v14 = v3[3];
  v24[1] = v3[2];
  void v24[2] = v14;
  v24[0] = v13;
  long long v15 = v3[1];
  v26[1] = v3[2];
  void v26[2] = v14;
  v26[0] = v15;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v26, (uint64_t)v27);
  outlined retain of Locale((uint64_t)v27);
  uint64_t v16 = BigString.endIndex.getter();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t result = outlined release of Locale((uint64_t)v24);
  *a2 = v3;
  a2[1] = v6;
  a2[2] = v8;
  a2[3] = v10;
  a2[4] = v12;
  a2[5] = v16;
  a2[6] = v18;
  a2[7] = v20;
  a2[8] = v22;
  a2[9] = 0;
  return result;
}

uint64_t key path setter for AttributedString.characters : AttributedString(uint64_t *a1)
{
  uint64_t v1 = a1[9];
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a1 + 1);
  long long v5 = *(_OWORD *)(a1 + 3);
  long long v6 = *(_OWORD *)(a1 + 5);
  long long v7 = *(_OWORD *)(a1 + 7);
  uint64_t v8 = v1;
  swift_retain();
  return AttributedString.characters.setter(&v3);
}

uint64_t AttributedString.characters.setter(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v69 = a1[1];
  uint64_t v70 = (_OWORD *)*a1;
  uint64_t v67 = a1[3];
  uint64_t v68 = a1[2];
  uint64_t v65 = a1[5];
  uint64_t v66 = a1[4];
  uint64_t v63 = a1[7];
  uint64_t v64 = a1[6];
  uint64_t v62 = a1[8];
  long long v3 = *(_OWORD *)(*(void *)v1 + 16);
  long long v4 = *(_OWORD *)(*(void *)v1 + 48);
  v102[1] = *(_OWORD *)(*(void *)v1 + 32);
  v102[2] = v4;
  v102[0] = v3;
  swift_retain();
  outlined retain of Locale((uint64_t)v102);
  uint64_t v5 = BigString.startIndex.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  outlined release of Locale((uint64_t)v102);
  swift_release();
  long long v12 = *(_OWORD *)(*(void *)v1 + 16);
  long long v13 = *(_OWORD *)(*(void *)v1 + 48);
  v101[1] = *(_OWORD *)(*(void *)v1 + 32);
  v101[2] = v13;
  v101[0] = v12;
  swift_retain();
  outlined retain of Locale((uint64_t)v101);
  uint64_t v14 = BigString.endIndex.getter();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  outlined release of Locale((uint64_t)v101);
  swift_release();
  uint64_t v73 = v16;
  uint64_t v74 = v14;
  uint64_t v71 = v20;
  uint64_t v72 = v18;
  uint64_t v78 = v5;
  uint64_t v76 = v11;
  if (static BigString.Index.< infix(_:_:)())
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v11 = v87;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v21 = *(void **)v2;
    long long v22 = *(_OWORD *)(*(void *)v2 + 16);
    long long v23 = *(_OWORD *)(*(void *)v2 + 48);
    v100[1] = *(_OWORD *)(*(void *)v2 + 32);
    v100[2] = v23;
    v100[0] = v22;
    uint64_t v24 = v21[8];
    uint64_t v25 = v21[9];
    uint64_t v26 = v21[10];
    uint64_t v27 = v21[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v100);
    swift_unknownObjectRetain();
    *(void *)uint64_t v2 = AttributedString.Guts.init(string:runs:)(v100, v24, v25, v26, v27);
    swift_release();
  }
  uint64_t v75 = (uint64_t *)v2;
  uint64_t v2 = *(_OWORD **)v2;
  long long v28 = v2[1];
  long long v29 = v2[3];
  v99[1] = v2[2];
  v99[2] = v29;
  v99[0] = v28;
  swift_retain_n();
  outlined retain of Locale((uint64_t)v99);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v99);
  long long v30 = v2[1];
  long long v31 = v2[3];
  v98[1] = v2[2];
  v98[2] = v31;
  v98[0] = v30;
  long long v32 = v2[1];
  v103[1] = v2[2];
  uint64_t v103[2] = v31;
  v103[0] = v32;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v103, (uint64_t)v104);
  outlined retain of Locale((uint64_t)v104);
  BigString.endIndex.getter();
  outlined release of Locale((uint64_t)v98);
  swift_release();
  uint64_t v80 = v2;
  if (one-time initialization token for currentIdentity != -1) {
    goto LABEL_11;
  }
LABEL_5:
  long long v33 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  long long v34 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v34);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v33, v85);
  os_unfair_lock_unlock(v34);
  swift_release();
  uint64_t v35 = v85[0];
  uint64_t v81 = v85[0];
  BigString.init()();
  v85[0] = 0;
  MEMORY[0x185309530](v85, 8);
  uint64_t v36 = v85[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v37 = swift_allocObject();
  if ((BigString.isEmpty.getter() & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  *(_OWORD *)(v37 + 16) = v82;
  *(_OWORD *)(v37 + 32) = v83;
  *(_OWORD *)(v37 + 48) = v84;
  *(void *)(v37 + 64) = 0;
  *(void *)(v37 + 72) = 0;
  *(void *)(v37 + 80) = 0;
  *(void *)(v37 + 88) = v36;
  *uint64_t v75 = v37;
  swift_release();
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (static BigString.Index.< infix(_:_:)())
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  long long v39 = v2[1];
  long long v40 = v2[2];
  uint64_t v38 = v2 + 1;
  long long v41 = v38[2];
  v11[11] = v40;
  v11[12] = v41;
  v11[10] = v39;
  long long v42 = *v38;
  v11[35] = v38[1];
  v11[36] = v41;
  v11[34] = v42;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v105, (uint64_t)v106);
  outlined retain of Locale((uint64_t)v106);
  uint64_t v43 = MEMORY[0x185301530](v78, v7, v9, v76);
  uint64_t v77 = v44;
  uint64_t v79 = v35;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  outlined release of Locale((uint64_t)v97);
  long long v49 = *v38;
  long long v50 = v38[2];
  v11[8] = v38[1];
  v11[9] = v50;
  v11[7] = v49;
  long long v51 = *v38;
  v11[41] = v38[1];
  v11[42] = v50;
  v11[40] = v51;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v107, (uint64_t)v108);
  outlined retain of Locale((uint64_t)v108);
  uint64_t v52 = MEMORY[0x185301530](v74, v73, v72, v71);
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  outlined release of Locale((uint64_t)v96);
  v86[0] = v43;
  v86[1] = v46;
  v86[2] = v77;
  _OWORD v86[3] = v48;
  v86[4] = v52;
  v86[5] = v54;
  v86[6] = v56;
  v86[7] = v58;
  uint64_t v88 = v69;
  uint64_t v89 = v68;
  uint64_t v90 = v67;
  uint64_t v91 = v66;
  uint64_t v92 = v65;
  uint64_t v93 = v64;
  uint64_t v94 = v63;
  uint64_t v95 = v62;
  long long v59 = v70[1];
  long long v60 = v70[3];
  v11[1] = v70[2];
  void v11[2] = v60;
  *uint64_t v11 = v59;
  swift_retain();
  outlined retain of Locale((uint64_t)v87);
  BigSubstring.init(_unchecked:in:)();
  specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v86);
  swift_release();
  outlined release of Locale((uint64_t)v85);
  if (v81 == v79)
  {
    *uint64_t v75 = (uint64_t)v80;
    swift_release();
    return swift_release();
  }
LABEL_15:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AttributedString.characters.modify(void *a1)
{
  long long v3 = (char *)malloc(0x180uLL);
  *a1 = v3;
  long long v4 = v3 + 80;
  uint64_t v5 = (long long *)(v3 + 128);
  uint64_t v6 = v3 + 224;
  uint64_t v7 = (uint64_t)(v3 + 320);
  *((void *)v3 + 46) = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v8 = (void *)*v1;
    long long v10 = *(_OWORD *)(*v1 + 32);
    long long v9 = *(_OWORD *)(*v1 + 48);
    *((_OWORD *)v3 + 11) = *(_OWORD *)(*v1 + 16);
    *((_OWORD *)v3 + 12) = v10;
    *((_OWORD *)v3 + 13) = v9;
    uint64_t v11 = v8[8];
    uint64_t v12 = v8[9];
    uint64_t v41 = v8[11];
    uint64_t v43 = v8[10];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)(v3 + 176));
    swift_unknownObjectRetain();
    uint64_t *v1 = AttributedString.Guts.init(string:runs:)((_OWORD *)v3 + 11, v11, v12, v43, v41);
    swift_release();
  }
  long long v40 = v1;
  long long v13 = (_OWORD *)*v1;
  long long v15 = *(_OWORD *)(*v1 + 32);
  long long v14 = *(_OWORD *)(*v1 + 48);
  *uint64_t v6 = *(_OWORD *)(*v1 + 16);
  *((_OWORD *)v3 + 15) = v15;
  *((_OWORD *)v3 + 16) = v14;
  swift_retain_n();
  outlined retain of Locale((uint64_t)v6);
  uint64_t v16 = BigString.startIndex.getter();
  uint64_t v42 = v17;
  uint64_t v44 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  outlined release of Locale((uint64_t)v6);
  long long v23 = v13[2];
  long long v22 = v13[3];
  *long long v4 = v13[1];
  *((_OWORD *)v3 + 6) = v23;
  *((_OWORD *)v3 + 7) = v22;
  long long v24 = v13[1];
  long long v25 = v13[3];
  *((_OWORD *)v3 + 9) = v13[2];
  *((_OWORD *)v3 + 10) = v25;
  *uint64_t v5 = v24;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v5, v7);
  outlined retain of Locale(v7);
  uint64_t v26 = BigString.endIndex.getter();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  outlined release of Locale((uint64_t)v4);
  swift_release();
  *(void *)long long v3 = v13;
  *((void *)v3 + 1) = v44;
  *((void *)v3 + 2) = v19;
  *((void *)v3 + 3) = v21;
  *((void *)v3 + 4) = v42;
  *((void *)v3 + 5) = v26;
  *((void *)v3 + 6) = v28;
  *((void *)v3 + 7) = v30;
  *((void *)v3 + 8) = v32;
  if (one-time initialization token for currentIdentity != -1) {
    swift_once();
  }
  long long v33 = (uint64_t *)(static AttributedString.currentIdentity + 16);
  long long v34 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
  swift_retain();
  os_unfair_lock_lock(v34);
  closure #1 in static AttributedString._nextModifyIdentity.getter(v33, &v45);
  os_unfair_lock_unlock(v34);
  swift_release();
  uint64_t v35 = v45;
  *((void *)v3 + 47) = v45;
  *((void *)v3 + 9) = v35;
  BigString.init()();
  *((void *)v3 + 45) = 0;
  MEMORY[0x185309530](v3 + 360, 8);
  uint64_t v36 = *((void *)v3 + 45);
  type metadata accessor for AttributedString.Guts();
  uint64_t v37 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if (result)
  {
    long long v39 = *((_OWORD *)v3 + 18);
    *(_OWORD *)(v37 + 16) = *((_OWORD *)v3 + 17);
    *(_OWORD *)(v37 + 32) = v39;
    *(_OWORD *)(v37 + 48) = *((_OWORD *)v3 + 19);
    *(void *)(v37 + 64) = 0;
    *(void *)(v37 + 72) = 0;
    *(void *)(v37 + 80) = 0;
    *(void *)(v37 + 88) = v36;
    *long long v40 = v37;
    swift_release();
    return (uint64_t)AttributedString.characters.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AttributedString.characters.modify(uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  if (*(void *)(*(void *)a1 + 72) == *(void *)(*(void *)a1 + 376))
  {
    *v1[46] = *v1;
    swift_retain();
    swift_release();
    swift_release();
    free(v1);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t specialized AttributedString.CharacterView.replaceSubrange<A>(_:with:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v11 = a1[6];
  uint64_t v10 = a1[7];
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if ((result & 1) == 0)
    {
      uint64_t v54 = v10;
      long long v13 = *(_OWORD **)v2;
      long long v14 = *(_OWORD *)(*(void *)v2 + 16);
      long long v15 = *(_OWORD *)(*(void *)v2 + 48);
      v75[1] = *(_OWORD *)(*(void *)v2 + 32);
      v75[2] = v15;
      v75[0] = v14;
      long long v16 = v13[1];
      v76[1] = v13[2];
      v76[2] = v15;
      v76[0] = v16;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v76, (uint64_t)v77);
      outlined retain of Locale((uint64_t)v77);
      uint64_t v17 = MEMORY[0x185301530](v4, v5, v7, v6);
      uint64_t v19 = v18;
      uint64_t v21 = v20;
      uint64_t v23 = v22;
      outlined release of Locale((uint64_t)v75);
      long long v24 = v13[1];
      long long v25 = v13[3];
      v74[1] = v13[2];
      void v74[2] = v25;
      v74[0] = v24;
      long long v26 = v13[1];
      v78[1] = v13[2];
      v78[2] = v25;
      v78[0] = v26;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v78, (uint64_t)v79);
      outlined retain of Locale((uint64_t)v79);
      uint64_t v27 = MEMORY[0x185301530](v8, v9, v11, v54);
      uint64_t v29 = v28;
      uint64_t v31 = v30;
      uint64_t v33 = v32;
      outlined release of Locale((uint64_t)v74);
      v57[0] = v17;
      v57[1] = v19;
      _OWORD v57[2] = v21;
      v57[3] = v23;
      v57[4] = v27;
      v57[5] = v29;
      v57[6] = v31;
      v57[7] = v33;
      long long v34 = *(_OWORD *)(a2 + 16);
      long long v69 = *(_OWORD *)a2;
      long long v70 = v34;
      long long v35 = *(_OWORD *)(a2 + 48);
      long long v71 = *(_OWORD *)(a2 + 32);
      long long v72 = v35;
      uint64_t v36 = *(_OWORD **)(a2 + 64);
      long long v37 = v36[1];
      long long v38 = v36[3];
      v73[1] = v36[2];
      v73[2] = v38;
      v73[0] = v37;
      outlined retain of Slice<AttributedString.UnicodeScalarView>(a2);
      outlined retain of Slice<AttributedString.UnicodeScalarView>(a2);
      outlined retain of Slice<AttributedString.UnicodeScalarView>(a2);
      outlined retain of Slice<AttributedString.UnicodeScalarView>(a2);
      outlined retain of Locale((uint64_t)v73);
      BigString.subscript.getter();
      outlined release of Locale((uint64_t)v73);
      uint64_t v39 = BigSubstring.startIndex.getter();
      uint64_t v41 = v40;
      uint64_t v43 = v42;
      uint64_t v45 = v44;
      uint64_t v46 = BigSubstring.endIndex.getter();
      uint64_t v48 = v47;
      uint64_t v50 = v49;
      uint64_t v52 = v51;
      outlined release of Locale((uint64_t)v55);
      outlined release of Slice<AttributedString.UnicodeScalarView>(a2);
      outlined release of Slice<AttributedString.UnicodeScalarView>(a2);
      uint64_t v61 = v39;
      uint64_t v62 = v41;
      uint64_t v63 = v43;
      uint64_t v64 = v45;
      uint64_t v65 = v46;
      uint64_t v66 = v48;
      uint64_t v67 = v50;
      uint64_t v68 = v52;
      long long v53 = v36[2];
      long long v58 = v36[1];
      long long v59 = v53;
      long long v60 = v36[3];
      v80[1] = v53;
      v80[2] = v60;
      v80[0] = v58;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v80, (uint64_t)v81);
      outlined retain of Locale((uint64_t)v81);
      BigSubstring.init(_unchecked:in:)();
      outlined release of Slice<AttributedString.UnicodeScalarView>(a2);
      specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v57);
      outlined release of Slice<AttributedString.UnicodeScalarView>(a2);
      return outlined release of Locale((uint64_t)v56);
    }
  }
  __break(1u);
  return result;
}

uint64_t AttributedString.CharacterView.replaceSubrange<A>(_:with:)(uint64_t *a1, _OWORD *a2, ValueMetadata *a3)
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[6];
  uint64_t v64 = a1[5];
  uint64_t v65 = a1[4];
  uint64_t v11 = a1[7];
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v63 = a3;
  long long v13 = *(_OWORD **)v3;
  long long v14 = *(_OWORD *)(*(void *)v3 + 16);
  long long v15 = *(_OWORD *)(*(void *)v3 + 48);
  v94[1] = *(_OWORD *)(*(void *)v3 + 32);
  v94[2] = v15;
  v94[0] = v14;
  long long v16 = v13[1];
  v95[1] = v13[2];
  v95[2] = v15;
  v95[0] = v16;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v95, (uint64_t)v96);
  outlined retain of Locale((uint64_t)v96);
  uint64_t v17 = MEMORY[0x185301530](v7, v6, v8, v9);
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  outlined release of Locale((uint64_t)v94);
  long long v24 = v13[1];
  long long v25 = v13[3];
  v93[1] = v13[2];
  v93[2] = v25;
  v93[0] = v24;
  long long v26 = v13[1];
  v97[1] = v13[2];
  v97[2] = v25;
  v97[0] = v26;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v97, (uint64_t)v98);
  outlined retain of Locale((uint64_t)v98);
  uint64_t v27 = MEMORY[0x185301530](v65, v64, v10, v11);
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  outlined release of Locale((uint64_t)v93);
  v76[0] = v17;
  v76[1] = v19;
  v76[2] = v21;
  long long v76[3] = v23;
  v76[4] = v27;
  v76[5] = v29;
  v76[6] = v31;
  v76[7] = v33;
  if (v63 == &type metadata for AttributedString.CharacterView)
  {
    long long v34 = *(_OWORD **)a2;
    long long v35 = *(_OWORD *)((char *)a2 + 24);
    v75[0] = *(_OWORD *)((char *)a2 + 8);
    v75[1] = v35;
    long long v36 = *(_OWORD *)((char *)a2 + 56);
    v75[2] = *(_OWORD *)((char *)a2 + 40);
    _OWORD v75[3] = v36;
    long long v37 = v34[1];
    long long v38 = v34[3];
    v74[1] = v34[2];
    void v74[2] = v38;
    v74[0] = v37;
    swift_retain();
    outlined retain of Locale((uint64_t)v74);
    BigSubstring.init(_unchecked:in:)();
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v76);
    swift_release();
    uint64_t v39 = v66;
  }
  else
  {
    if ((ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<AttributedString.CharacterView>) != v63) {
      return AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v76, a2, (uint64_t)v63);
    }
    long long v40 = a2[3];
    long long v67 = a2[2];
    long long v68 = v40;
    long long v41 = a2[8];
    long long v42 = a2[6];
    long long v72 = a2[7];
    long long v73 = v41;
    long long v43 = a2[5];
    long long v69 = a2[4];
    long long v70 = v43;
    long long v71 = v42;
    long long v44 = a2[1];
    v66[0] = *a2;
    v66[1] = v44;
    long long v88 = v66[0];
    long long v89 = v44;
    long long v90 = v67;
    long long v91 = v68;
    uint64_t v45 = (_OWORD *)v69;
    long long v46 = *(_OWORD *)(v69 + 16);
    long long v47 = *(_OWORD *)(v69 + 48);
    v92[1] = *(_OWORD *)(v69 + 32);
    _OWORD v92[2] = v47;
    v92[0] = v46;
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v66);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v66);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v66);
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v66);
    outlined retain of Locale((uint64_t)v92);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v92);
    uint64_t v48 = BigSubstring.startIndex.getter();
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    uint64_t v54 = v53;
    uint64_t v55 = BigSubstring.endIndex.getter();
    uint64_t v57 = v56;
    uint64_t v59 = v58;
    uint64_t v61 = v60;
    outlined release of Locale((uint64_t)v74);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v66);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v66);
    uint64_t v80 = v48;
    uint64_t v81 = v50;
    uint64_t v82 = v52;
    uint64_t v83 = v54;
    uint64_t v84 = v55;
    uint64_t v85 = v57;
    uint64_t v86 = v59;
    uint64_t v87 = v61;
    long long v62 = v45[2];
    long long v77 = v45[1];
    long long v78 = v62;
    long long v79 = v45[3];
    v99[1] = v62;
    v99[2] = v79;
    v99[0] = v77;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v99, (uint64_t)v100);
    outlined retain of Locale((uint64_t)v100);
    BigSubstring.init(_unchecked:in:)();
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v66);
    specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v76);
    outlined release of Slice<AttributedString.UnicodeScalarView>((uint64_t)v66);
    uint64_t v39 = v75;
  }
  return outlined release of Locale((uint64_t)v39);
}

__n128 AttributedString.CharacterView.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 8);
  long long v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 AttributedString.CharacterView.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 40);
  long long v3 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t AttributedString.CharacterView._count.getter()
{
  uint64_t v1 = *(_OWORD **)v0;
  long long v2 = *(_OWORD *)(v0 + 24);
  long long v11 = *(_OWORD *)(v0 + 8);
  long long v12 = v2;
  long long v3 = *(_OWORD *)(v0 + 56);
  long long v13 = *(_OWORD *)(v0 + 40);
  long long v14 = v3;
  long long v4 = v1[2];
  long long v8 = v1[1];
  long long v9 = v4;
  long long v10 = v1[3];
  v15[0] = v8;
  v15[1] = v4;
  void v15[2] = v10;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v15, (uint64_t)v16);
  outlined retain of Locale((uint64_t)v16);
  BigSubstring.init(_unchecked:in:)();
  uint64_t v5 = BigSubstring.count.getter();
  outlined release of Locale((uint64_t)&v7);
  return v5;
}

uint64_t AttributedString.CharacterView._index(_:offsetBy:)@<X0>(uint64_t *a1@<X8>)
{
  long long v3 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  long long v5 = v3[1];
  long long v6 = v3[3];
  v15[1] = v3[2];
  void v15[2] = v6;
  v15[0] = v5;
  long long v7 = v3[1];
  v16[1] = v3[2];
  _OWORD v16[2] = v6;
  v16[0] = v7;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v16, (uint64_t)v17);
  outlined retain of Locale((uint64_t)v17);
  uint64_t v8 = BigString.index(_:offsetBy:)();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  outlined release of Locale((uint64_t)v15);
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v12;
    a1[3] = v14;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t AttributedString.CharacterView._index(_:offsetBy:limitedBy:)@<X0>(uint64_t *a1@<X8>)
{
  long long v2 = (_OWORD *)*v1;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  long long v4 = v2[1];
  long long v5 = v2[3];
  v15[1] = v2[2];
  void v15[2] = v5;
  v15[0] = v4;
  long long v6 = v2[1];
  v16[1] = v2[2];
  _OWORD v16[2] = v5;
  v16[0] = v6;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v16, (uint64_t)v17);
  outlined retain of Locale((uint64_t)v17);
  uint64_t v7 = BigString.index(_:offsetBy:limitedBy:)();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t result = outlined release of Locale((uint64_t)v15);
  if (v13 == 2)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    a1[3] = 2;
    return result;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result) {
    goto LABEL_15;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  *a1 = v7;
  a1[1] = v9;
  a1[2] = v11;
  a1[3] = v13;
  return result;
}

uint64_t AttributedString.CharacterView._distance(from:to:)()
{
  uint64_t v1 = *(_OWORD **)v0;
  long long v2 = *(_OWORD *)(v0 + 24);
  long long v11 = *(_OWORD *)(v0 + 8);
  long long v12 = v2;
  long long v3 = *(_OWORD *)(v0 + 56);
  long long v13 = *(_OWORD *)(v0 + 40);
  long long v14 = v3;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if ((result & 1) == 0)
  {
    long long v5 = v1[2];
    long long v8 = v1[1];
    long long v9 = v5;
    long long v10 = v1[3];
    v15[1] = v5;
    void v15[2] = v10;
    v15[0] = v8;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v15, (uint64_t)v16);
    outlined retain of Locale((uint64_t)v16);
    BigSubstring.init(_unchecked:in:)();
    uint64_t v6 = BigSubstring.distance(from:to:)();
    outlined release of Locale((uint64_t)v7);
    return v6;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t AttributedString.CharacterView.subscript.getter()
{
  uint64_t v1 = (_OWORD *)*v0;
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result)
    {
      long long v3 = v1[1];
      long long v4 = v1[3];
      v7[1] = v1[2];
      _OWORD v7[2] = v4;
      v7[0] = v3;
      long long v5 = v1[1];
      v8[1] = v1[2];
      v8[2] = v4;
      v8[0] = v5;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v8, (uint64_t)v9);
      outlined retain of Locale((uint64_t)v9);
      uint64_t v6 = BigString.subscript.getter();
      outlined release of Locale((uint64_t)v7);
      return v6;
    }
  }
  __break(1u);
  return result;
}

uint64_t key path getter for AttributedString.CharacterView.subscript(_:) : AttributedString.CharacterView@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v2 = (_OWORD *)*a1;
  swift_retain();
  uint64_t result = static BigString.Index.< infix(_:_:)();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = static BigString.Index.< infix(_:_:)();
    if (result)
    {
      long long v4 = v2[1];
      long long v5 = v2[3];
      v11[1] = v2[2];
      void v11[2] = v5;
      v11[0] = v4;
      long long v6 = v2[1];
      v12[1] = v2[2];
      Foundation::Date v12[2] = v5;
      v12[0] = v6;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v12, (uint64_t)v13);
      outlined retain of Locale((uint64_t)v13);
      uint64_t v7 = BigString.subscript.getter();
      uint64_t v9 = v8;
      outlined release of Locale((uint64_t)v11);
      uint64_t result = swift_release();
      *a2 = v7;
      a2[1] = v9;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t key path setter for AttributedString.CharacterView.subscript(_:) : AttributedString.CharacterView(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  long long v5 = a3[1];
  v7[0] = *a3;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  specialized AttributedString.CharacterView.subscript.setter(v3, v4, (uint64_t *)v7);

  return swift_bridgeObjectRelease();
}

uint64_t AttributedString.CharacterView.subscript.setter(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  specialized AttributedString.CharacterView.subscript.setter(a1, a2, a3);

  return swift_bridgeObjectRelease();
}

uint64_t specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  long long v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v443 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v7 = (void *)*v1;
    long long v8 = *(_OWORD *)(*v1 + 16);
    long long v9 = *(_OWORD *)(*v1 + 32);
    long long v575 = *(_OWORD *)(*v1 + 48);
    long long v574 = v9;
    long long v573 = v8;
    uint64_t v10 = v7[8];
    uint64_t v11 = v7[9];
    uint64_t v12 = v7[10];
    uint64_t v13 = v7[11];
    type metadata accessor for AttributedString.Guts();
    long long v14 = (uint64_t *)v1;
    uint64_t v15 = swift_allocObject();
    outlined retain of Locale((uint64_t)&v573);
    swift_unknownObjectRetain();
    int v16 = BigString.isEmpty.getter();
    uint64_t v17 = swift_unknownObjectRetain();
    int v18 = specialized Collection.isEmpty.getter(v17, v11, v12);
    uint64_t result = swift_unknownObjectRelease();
    if ((v16 ^ v18))
    {
LABEL_443:
      __break(1u);
LABEL_444:
      __break(1u);
LABEL_445:
      __break(1u);
LABEL_446:
      __break(1u);
LABEL_447:
      __break(1u);
LABEL_448:
      __break(1u);
LABEL_449:
      __break(1u);
      goto LABEL_450;
    }
    long long v20 = v574;
    *(_OWORD *)(v15 + 16) = v573;
    *(_OWORD *)(v15 + 32) = v20;
    *(_OWORD *)(v15 + 48) = v575;
    *(void *)(v15 + 64) = v10;
    *(void *)(v15 + 72) = v11;
    *(void *)(v15 + 80) = v12;
    *(void *)(v15 + 88) = v13;
    uint64_t *v14 = v15;
    swift_release();
    long long v2 = (unint64_t *)v14;
    uint64_t v6 = v443;
  }
  uint64_t v21 = (_OWORD *)*v2;
  long long v22 = *(_OWORD *)(v2 + 3);
  long long v558 = *(_OWORD *)(v2 + 1);
  long long v559 = v22;
  long long v23 = *(_OWORD *)(v2 + 7);
  long long v560 = *(_OWORD *)(v2 + 5);
  long long v561 = v23;
  long long v24 = v21[1];
  long long v25 = v21[2];
  _OWORD v572[2] = v21[3];
  v572[1] = v25;
  v572[0] = v24;
  outlined retain of Locale(v4);
  outlined retain of Locale((uint64_t)v572);
  BigSubstring.init(_unchecked:in:)();
  BigSubstring.subscript.getter();
  outlined release of Locale((uint64_t)v487);
  char v26 = BigSubstring.isIdentical(to:)();
  uint64_t v432 = v4;
  outlined release of Locale(v4);
  outlined release of Locale((uint64_t)v488);
  uint64_t v27 = (_OWORD *)*v2;
  long long v28 = *(_OWORD *)(*v2 + 16);
  long long v29 = *(_OWORD *)(*v2 + 32);
  long long v571 = *(_OWORD *)(*v2 + 48);
  v570[1] = v29;
  v570[0] = v28;
  long long v30 = v27[1];
  long long v31 = v27[2];
  v576[2] = v571;
  v576[1] = v31;
  v576[0] = v30;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v576, (uint64_t)v577);
  outlined retain of Locale((uint64_t)v577);
  char v32 = BigString.isEmpty.getter();
  outlined release of Locale((uint64_t)v570);
  long long v445 = v2;
  char v440 = v26;
  if ((v32 & 1) == 0)
  {
    if ((static BigString.Index.== infix(_:_:)() & 1) != 0 && BigString.Index.utf8Offset.getter() >= 1)
    {
      long long v33 = v27[1];
      long long v34 = v27[2];
      long long v569 = v27[3];
      v568[1] = v34;
      v568[0] = v33;
      long long v35 = v27[1];
      long long v36 = v27[2];
      v578[2] = v569;
      v578[1] = v36;
      v578[0] = v35;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v578, (uint64_t)v579);
      outlined retain of Locale((uint64_t)v579);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v568);
      BigString.UTF8View.index(before:)();
      outlined release of Locale((uint64_t)v489);
    }
    uint64_t v37 = *((void *)v27 + 8);
    uint64_t v4 = *((void *)v27 + 9);
    int64_t v39 = *((void *)v27 + 10);
    unint64_t v38 = *((void *)v27 + 11);
    swift_unknownObjectRetain();
    uint64_t result = BigString.Index.utf8Offset.getter();
    if (v37) {
      int64_t v40 = v39;
    }
    else {
      int64_t v40 = 0;
    }
    if (result < 0) {
      goto LABEL_444;
    }
    uint64_t v41 = result;
    if (v40 < result) {
      goto LABEL_444;
    }
    if (v37 && result < v39 && *(_WORD *)(v37 + 16))
    {
      *(void *)&long long v461 = v4;
      uint64_t v42 = *(unsigned __int8 *)(v37 + 18);
      if (*(unsigned char *)(v37 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v4 = 24;
        int64_t v43 = v37;
        while (1)
        {
          uint64_t v46 = *(unsigned __int16 *)(v43 + 16);
          if (!*(_WORD *)(v43 + 16)) {
            goto LABEL_20;
          }
          uint64_t v47 = *(void *)(v43 + 40);
          BOOL v48 = __OFSUB__(v41, v47);
          uint64_t v49 = v41 - v47;
          if (v48) {
            goto LABEL_424;
          }
          if (__OFADD__(v49, 1)) {
            goto LABEL_425;
          }
          if (v49 + 1 < 1)
          {
            uint64_t v46 = 0;
          }
          else
          {
            if (v46 == 1)
            {
              uint64_t v41 = v49;
LABEL_20:
              if (v41) {
                goto LABEL_423;
              }
              goto LABEL_21;
            }
            uint64_t v50 = (uint64_t *)(v43 + 64);
            uint64_t v51 = 1;
            while (1)
            {
              uint64_t v52 = *v50;
              v50 += 3;
              uint64_t v41 = v49 - v52;
              if (__OFSUB__(v49, v52)) {
                goto LABEL_401;
              }
              if (__OFADD__(v41, 1)) {
                goto LABEL_402;
              }
              if (v41 + 1 < 1) {
                break;
              }
              ++v51;
              uint64_t v49 = v41;
              if (v46 == v51) {
                goto LABEL_20;
              }
            }
            uint64_t v46 = v51;
            uint64_t v41 = v49;
          }
LABEL_21:
          char v44 = (4 * *(unsigned char *)(v43 + 18) + 8) & 0x3C;
          uint64_t v42 = ((-15 << v44) - 1) & v42 | (v46 << v44);
          uint64_t v45 = *(void *)(v43 + 24 + 24 * v46);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          int64_t v43 = v45;
          if (!*(unsigned char *)(v45 + 18)) {
            goto LABEL_358;
          }
        }
      }
      swift_unknownObjectRetain_n();
      uint64_t v45 = v37;
LABEL_358:
      uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v41, 0, (_WORD *)(v45 + 16), (uint64_t *)(v45 + 24));
      if (result < 0) {
        goto LABEL_466;
      }
      uint64_t v408 = result;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v54 = v42 & 0xFFFFFFFFFFFFF0FFLL | (v408 << 8);
      uint64_t v55 = v461;
    }
    else
    {
      unint64_t v53 = swift_unknownObjectRetain();
      unint64_t v54 = specialized Rope._endPath.getter(v53);
      swift_unknownObjectRelease();
      uint64_t v55 = v4;
      uint64_t v45 = 0;
      uint64_t v56 = 0;
      if (!v37)
      {
LABEL_37:
        uint64_t v57 = *((void *)v27 + 8);
        uint64_t v58 = *((void *)v27 + 9);
        uint64_t v59 = *((void *)v27 + 10);
        uint64_t v60 = *((void *)v27 + 11);
        swift_unknownObjectRetain();
        specialized Rope.subscript.getter(v38, v54, v56, v57, v58, v59, v60);
        swift_unknownObjectRelease();
        uint64_t v61 = swift_bridgeObjectRetain();
        uint64_t v430 = specialized _NativeDictionary.filter(_:)(v61);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t v6 = v443;
        long long v2 = v445;
        goto LABEL_38;
      }
    }
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v38, v54, v45, v37, v55);
    swift_unknownObjectRelease_n();
    uint64_t v56 = v45;
    goto LABEL_37;
  }
  uint64_t v430 = MEMORY[0x1E4FBC868];
LABEL_38:
  unint64_t v38 = *v2;
  long long v437 = *(long long **)(v6 + 16);
  uint64_t v62 = BigString.Index.utf8Offset.getter();
  uint64_t v63 = BigString.Index.utf8Offset.getter();
  if (v62 == v63)
  {
    uint64_t v64 = v62;
    goto LABEL_224;
  }
  uint64_t v460 = v63;
  *(void *)&long long v469 = v62;
  unint64_t v65 = *(void *)(v38 + 64);
  uint64_t v66 = *(void *)(v38 + 72);
  uint64_t v67 = *(void *)(v38 + 80);
  uint64_t v68 = *(void *)(v38 + 88);
  swift_unknownObjectRetain_n();
  uint64_t v431 = v62;
  uint64_t v69 = specialized Rope.find<A>(at:in:preferEnd:)(v62, 0, v65, v66, v67, v68);
  unint64_t v71 = v70;
  uint64_t v73 = v72;
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  specialized Rope.offset<A>(of:in:)(v69, v71, v73, v65, v66, v67, v68);
  swift_unknownObjectRelease_n();
  uint64_t v74 = *(void *)(v38 + 64);
  uint64_t v4 = *(void *)(v38 + 72);
  uint64_t v75 = *(void *)(v38 + 80);
  uint64_t v76 = *(void *)(v38 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v69, v71, v73, v74, v4, v75, v76);
  int64_t v39 = v77;
  uint64_t v455 = v78;
  swift_unknownObjectRelease();
  uint64_t v79 = swift_bridgeObjectRetain();
  uint64_t v80 = specialized _NativeDictionary.filter(_:)(v79);
  swift_bridgeObjectRelease_n();
  uint64_t v37 = *(void *)(v80 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v81 = 0;
  *(void *)&long long v480 = result;
  *(void *)&long long v461 = v80;
  uint64_t v82 = 1 << *(unsigned char *)(v80 + 32);
  uint64_t v49 = -1;
  if (v82 < 64) {
    uint64_t v49 = ~(-1 << v82);
  }
  uint64_t v83 = v80 + 64;
  unint64_t v84 = v49 & *(void *)(v80 + 64);
  int64_t v43 = (unint64_t)(v82 + 63) >> 6;
  while (1)
  {
    if (v84)
    {
      unint64_t v85 = __clz(__rbit64(v84));
      v84 &= v84 - 1;
      unint64_t v86 = v85 | (v81 << 6);
      goto LABEL_44;
    }
    uint64_t v46 = v81 + 1;
    if (__OFADD__(v81, 1)) {
      goto LABEL_400;
    }
    if (v46 >= v43) {
      break;
    }
    unint64_t v88 = *(void *)(v83 + 8 * v46);
    ++v81;
    if (!v88)
    {
      int64_t v81 = v46 + 1;
      if (v46 + 1 >= v43) {
        break;
      }
      unint64_t v88 = *(void *)(v83 + 8 * v81);
      if (!v88)
      {
        int64_t v81 = v46 + 2;
        if (v46 + 2 >= v43) {
          break;
        }
        unint64_t v88 = *(void *)(v83 + 8 * v81);
        if (!v88)
        {
          int64_t v81 = v46 + 3;
          if (v46 + 3 >= v43) {
            break;
          }
          unint64_t v88 = *(void *)(v83 + 8 * v81);
          if (!v88)
          {
            int64_t v81 = v46 + 4;
            if (v46 + 4 >= v43) {
              break;
            }
            unint64_t v88 = *(void *)(v83 + 8 * v81);
            if (!v88)
            {
              int64_t v89 = v46 + 5;
              if (v89 >= v43) {
                break;
              }
              unint64_t v88 = *(void *)(v83 + 8 * v89);
              if (!v88)
              {
                while (1)
                {
                  int64_t v81 = v89 + 1;
                  if (__OFADD__(v89, 1)) {
                    break;
                  }
                  if (v81 >= v43) {
                    goto LABEL_64;
                  }
                  unint64_t v88 = *(void *)(v83 + 8 * v81);
                  ++v89;
                  if (v88) {
                    goto LABEL_63;
                  }
                }
LABEL_455:
                __break(1u);
LABEL_456:
                __break(1u);
LABEL_457:
                __break(1u);
LABEL_458:
                __break(1u);
                goto LABEL_459;
              }
              int64_t v81 = v89;
            }
          }
        }
      }
    }
LABEL_63:
    unint64_t v84 = (v88 - 1) & v88;
    unint64_t v86 = __clz(__rbit64(v88)) + (v81 << 6);
LABEL_44:
    uint64_t v87 = (uint64_t *)(*(void *)(v461 + 48) + 16 * v86);
    uint64_t v4 = *v87;
    int64_t v39 = v87[1];
    swift_bridgeObjectRetain();
    uint64_t v37 = (uint64_t)&v480;
    specialized Set._Variant.insert(_:)((unint64_t *)&v548, v4, v39);
    uint64_t result = swift_bridgeObjectRelease();
  }
LABEL_64:
  uint64_t result = swift_release();
  uint64_t v90 = v480;
  *(void *)&long long v463 = v480;
  if (v431 < 0) {
    goto LABEL_445;
  }
  if (v431)
  {
    uint64_t v91 = *(void *)(v38 + 64);
    uint64_t v92 = *(void *)(v38 + 72);
    uint64_t v93 = *(void *)(v38 + 80);
    uint64_t v94 = *(void *)(v38 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v91, v92, v93, v94, &v490);
    long long v448 = v491;
    long long v452 = v490;
    uint64_t v95 = v492;
    swift_unknownObjectRelease();
    long long v97 = v448;
    long long v96 = v452;
  }
  else
  {
    long long v98 = (void *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v98, 0, (unint64_t *)&v490);
    long long v96 = v490;
    long long v97 = v491;
    uint64_t v95 = v492;
  }
  long long v480 = v96;
  long long v481 = v97;
  *(void *)&long long v482 = v95;
  unint64_t v99 = *(void *)(v38 + 64);
  uint64_t v100 = *(void *)(v38 + 72);
  uint64_t v101 = *(void *)(v38 + 80);
  uint64_t v102 = *(void *)(v38 + 88);
  char Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  char v449 = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, Enum & 1, v99, v100, v101, v102, (uint64_t *)&v548);
  uint64_t v104 = v550;
  swift_unknownObjectRelease();
  if (v104 < v95 && *(void *)(v90 + 16))
  {
    while (2)
    {
      long long v105 = v480;
      uint64_t v4 = *((void *)&v481 + 1);
      uint64_t v106 = v481;
      uint64_t v107 = *(void *)(v38 + 64);
      uint64_t v108 = *(void *)(v38 + 80);
      unint64_t v109 = swift_unknownObjectRetain();
      uint64_t result = specialized Rope._endPath.getter(v109);
      if (v107)
      {
        uint64_t result = swift_unknownObjectRelease();
        if (v95 == v108) {
          goto LABEL_72;
        }
LABEL_94:
        uint64_t v122 = v106;
        uint64_t v123 = *(void *)(v38 + 64);
        uint64_t v124 = *(void *)(v38 + 72);
        uint64_t v125 = v4;
        uint64_t v126 = *(void *)(v38 + 80);
        uint64_t v4 = *(void *)(v38 + 88);
        long long v548 = v105;
        *(void *)&long long v549 = v122;
        uint64_t v127 = v125 - 1;
        if (__OFSUB__(v125, 1)) {
          goto LABEL_440;
        }
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v548, v123, v124, v126, v4);
        unint64_t v128 = *((void *)&v548 + 1);
        uint64_t v37 = v548;
        uint64_t v115 = v549;
        unint64_t v129 = specialized Rope.subscript.getter(v548, *((unint64_t *)&v548 + 1), v549, v123, v124, v126, v4);
        uint64_t v4 = v130;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v131 = v95 - v129;
        if (__OFSUB__(v95, v129)) {
          goto LABEL_441;
        }
        uint64_t v132 = v431;
LABEL_119:
        *(void *)&long long v480 = v37;
        *((void *)&v480 + 1) = v128;
        *(void *)&long long v481 = v115;
        *((void *)&v481 + 1) = v127;
        *(void *)&long long v482 = v131;
        swift_retain();
        swift_bridgeObjectRetain();
        specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v480, 0, v132, (void *)v38, (uint64_t *)&v463, v461, v455, (uint64_t)&v469);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v95 = v482;
        unint64_t v140 = *(void *)(v38 + 64);
        uint64_t v141 = *(void *)(v38 + 72);
        uint64_t v142 = *(void *)(v38 + 80);
        uint64_t v143 = *(void *)(v38 + 88);
        swift_unknownObjectRetain();
        AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, v449 & 1, v140, v141, v142, v143, (uint64_t *)&v548);
        uint64_t v144 = v550;
        swift_unknownObjectRelease();
        if (v144 >= v95 || !*(void *)(v463 + 16)) {
          goto LABEL_121;
        }
        continue;
      }
      break;
    }
    if (v95) {
      goto LABEL_94;
    }
LABEL_72:
    int64_t v39 = *(void *)(v38 + 64);
    int64_t v43 = *(void *)(v38 + 72);
    uint64_t v37 = *(void *)(v38 + 88);
    if (v39)
    {
      uint64_t v110 = -15;
      if (*(void *)(v38 + 80) < v431) {
        goto LABEL_446;
      }
      if (*(_WORD *)(v39 + 16))
      {
        uint64_t v111 = *(unsigned __int8 *)(v39 + 18);
        if (*(unsigned char *)(v39 + 18))
        {
          uint64_t result = swift_unknownObjectRetain_n();
          uint64_t v4 = v431;
          int64_t v112 = v39;
          while (1)
          {
            uint64_t v116 = *(unsigned __int16 *)(v112 + 16);
            if (!*(_WORD *)(v112 + 16)) {
              goto LABEL_479;
            }
            uint64_t v117 = *(void *)(v112 + 40);
            BOOL v48 = __OFSUB__(v4, v117);
            uint64_t v118 = v4 - v117;
            if (v48) {
              goto LABEL_415;
            }
            if (v118 <= 0)
            {
              uint64_t v113 = 0;
            }
            else
            {
              if (v116 == 1) {
                goto LABEL_481;
              }
              uint64_t v119 = *(void *)(v112 + 64);
              uint64_t v4 = v118 - v119;
              if (__OFSUB__(v118, v119)) {
                goto LABEL_419;
              }
              if (v4 >= 1)
              {
                if (v116 == 2) {
                  goto LABEL_481;
                }
                Swift::Int v120 = (void *)(v112 + 88);
                uint64_t v113 = 2;
                while (v116 != v113)
                {
                  uint64_t v121 = v4 - *v120;
                  if (__OFSUB__(v4, *v120)) {
                    goto LABEL_381;
                  }
                  if (v121 < 1) {
                    goto LABEL_78;
                  }
                  ++v113;
                  v120 += 3;
                  uint64_t v4 = v121;
                  if (v116 == v113) {
                    goto LABEL_481;
                  }
                }
                __break(1u);
LABEL_381:
                __break(1u);
LABEL_382:
                uint64_t v409 = 0;
                goto LABEL_396;
              }
              uint64_t v4 = v118;
              uint64_t v113 = 1;
            }
LABEL_78:
            char v114 = (4 * *(unsigned char *)(v112 + 18) + 8) & 0x3C;
            uint64_t v111 = ((-15 << v114) - 1) & v111 | (v113 << v114);
            uint64_t v115 = *(void *)(v112 + 24 + 24 * v113);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            int64_t v112 = v115;
            if (!*(unsigned char *)(v115 + 18)) {
              goto LABEL_101;
            }
          }
        }
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v4 = v431;
        uint64_t v115 = v39;
LABEL_101:
        uint64_t v133 = *(unsigned __int16 *)(v115 + 16);
        if (!*(_WORD *)(v115 + 16)) {
          goto LABEL_482;
        }
        uint64_t v134 = *(void *)(v115 + 24);
        BOOL v48 = __OFSUB__(v4, v134);
        uint64_t v135 = v4 - v134;
        if (v48) {
          goto LABEL_464;
        }
        if (v135 <= 0)
        {
          uint64_t v138 = 0;
        }
        else
        {
          if (v133 == 1) {
            goto LABEL_484;
          }
          uint64_t v136 = *(void *)(v115 + 48);
          uint64_t v4 = v135 - v136;
          if (__OFSUB__(v135, v136)) {
            goto LABEL_465;
          }
          if (v4 >= 1)
          {
            if (v133 == 2) {
              goto LABEL_484;
            }
            int64_t v137 = (void *)(v115 + 72);
            uint64_t v138 = 2;
            while (v133 != v138)
            {
              uint64_t v139 = v4 - *v137;
              if (__OFSUB__(v4, *v137)) {
                goto LABEL_418;
              }
              if (v139 < 1) {
                goto LABEL_116;
              }
              ++v138;
              v137 += 3;
              uint64_t v4 = v139;
              if (v133 == v138) {
                goto LABEL_484;
              }
            }
            goto LABEL_417;
          }
          uint64_t v4 = v135;
          uint64_t v138 = 1;
        }
LABEL_116:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v128 = v111 & 0xFFFFFFFFFFFFF0FFLL | (v138 << 8);
LABEL_99:
        swift_unknownObjectRetain();
        uint64_t v127 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v37, v128, v115, v39, v43);
        uint64_t result = swift_unknownObjectRelease_n();
        goto LABEL_118;
      }
    }
    else if (v431)
    {
      goto LABEL_463;
    }
    swift_unknownObjectRetain_n();
    unint64_t v128 = specialized Rope._endPath.getter(v39);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v115 = 0;
    uint64_t v4 = 0;
    if (v39) {
      goto LABEL_99;
    }
    uint64_t v127 = 0;
LABEL_118:
    uint64_t v132 = v431;
    uint64_t v131 = v431 - v4;
    if (__OFSUB__(v431, v4)) {
      goto LABEL_442;
    }
    goto LABEL_119;
  }
LABEL_121:
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)&long long v463 = v460;
  if (__OFSUB__(v460, 1))
  {
LABEL_450:
    __break(1u);
    goto LABEL_451;
  }
  unint64_t v145 = *(void *)(v38 + 64);
  uint64_t v146 = *(void *)(v38 + 72);
  uint64_t v147 = *(void *)(v38 + 80);
  uint64_t v148 = *(void *)(v38 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v460 - 1, v449 & 1, v145, v146, v147, v148, (uint64_t *)&v548);
  long long v461 = v548;
  long long v456 = v549;
  uint64_t v149 = v550;
  swift_unknownObjectRelease();
  v566[0] = v461;
  v566[1] = v456;
  uint64_t v567 = v149;
  uint64_t v150 = *(void *)(v38 + 64);
  uint64_t v151 = *(void *)(v38 + 72);
  int64_t v39 = *(void *)(v38 + 80);
  uint64_t v152 = *(void *)(v38 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v566, v150, v151, v39, v152);
  uint64_t v154 = v153;
  swift_unknownObjectRelease();
  uint64_t v155 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)((uint64_t (*)(uint64_t, uint64_t, long long *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:), 0, v154);
  uint64_t v457 = v156;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v37 = *(void *)(v155 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v157 = 0;
  *(void *)&long long v480 = result;
  uint64_t v158 = 1 << *(unsigned char *)(v155 + 32);
  uint64_t v49 = -1;
  if (v158 < 64) {
    uint64_t v49 = ~(-1 << v158);
  }
  int64_t v43 = v155 + 64;
  uint64_t v4 = v49 & *(void *)(v155 + 64);
  int64_t v159 = (unint64_t)(v158 + 63) >> 6;
  while (2)
  {
    if (v4)
    {
      unint64_t v160 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v161 = v160 | (v157 << 6);
LABEL_126:
      uint64_t v162 = (unint64_t *)(*(void *)(v155 + 48) + 16 * v161);
      unint64_t v163 = *v162;
      unint64_t v164 = v162[1];
      swift_bridgeObjectRetain();
      uint64_t v37 = (uint64_t)&v480;
      specialized Set._Variant.insert(_:)((unint64_t *)&v548, v163, v164);
      uint64_t result = swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  uint64_t v46 = v157 + 1;
  if (__OFADD__(v157, 1)) {
    goto LABEL_403;
  }
  if (v46 < v159)
  {
    unint64_t v165 = *(void *)(v43 + 8 * v46);
    ++v157;
    if (!v165)
    {
      int64_t v157 = v46 + 1;
      if (v46 + 1 >= v159) {
        goto LABEL_146;
      }
      unint64_t v165 = *(void *)(v43 + 8 * v157);
      if (!v165)
      {
        int64_t v157 = v46 + 2;
        if (v46 + 2 >= v159) {
          goto LABEL_146;
        }
        unint64_t v165 = *(void *)(v43 + 8 * v157);
        if (!v165)
        {
          int64_t v157 = v46 + 3;
          if (v46 + 3 >= v159) {
            goto LABEL_146;
          }
          unint64_t v165 = *(void *)(v43 + 8 * v157);
          if (!v165)
          {
            int64_t v157 = v46 + 4;
            if (v46 + 4 >= v159) {
              goto LABEL_146;
            }
            unint64_t v165 = *(void *)(v43 + 8 * v157);
            if (!v165)
            {
              int64_t v166 = v46 + 5;
              if (v166 >= v159) {
                goto LABEL_146;
              }
              unint64_t v165 = *(void *)(v43 + 8 * v166);
              if (!v165)
              {
                while (1)
                {
                  int64_t v157 = v166 + 1;
                  if (__OFADD__(v166, 1)) {
                    break;
                  }
                  if (v157 >= v159) {
                    goto LABEL_146;
                  }
                  unint64_t v165 = *(void *)(v43 + 8 * v157);
                  ++v166;
                  if (v165) {
                    goto LABEL_145;
                  }
                }
LABEL_459:
                __break(1u);
LABEL_460:
                __break(1u);
LABEL_461:
                __break(1u);
LABEL_462:
                __break(1u);
LABEL_463:
                __break(1u);
LABEL_464:
                __break(1u);
LABEL_465:
                __break(1u);
LABEL_466:
                __break(1u);
LABEL_467:
                __break(1u);
LABEL_468:
                __break(1u);
LABEL_469:
                __break(1u);
LABEL_470:
                __break(1u);
LABEL_471:
                __break(1u);
LABEL_472:
                __break(1u);
LABEL_473:
                __break(1u);
LABEL_474:
                __break(1u);
LABEL_475:
                __break(1u);
LABEL_476:
                __break(1u);
LABEL_477:
                __break(1u);
LABEL_478:
                __break(1u);
LABEL_479:
                if (!v4) {
                  __break(1u);
                }
LABEL_481:
                __break(1u);
LABEL_482:
                if (!v4) {
                  __break(1u);
                }
LABEL_484:
                __break(1u);
                return result;
              }
              int64_t v157 = v166;
            }
          }
        }
      }
    }
LABEL_145:
    uint64_t v4 = (v165 - 1) & v165;
    unint64_t v161 = __clz(__rbit64(v165)) + (v157 << 6);
    goto LABEL_126;
  }
LABEL_146:
  swift_release();
  uint64_t v531 = v480;
  long long v167 = *(_OWORD *)(v38 + 16);
  long long v168 = *(_OWORD *)(v38 + 32);
  long long v565 = *(_OWORD *)(v38 + 48);
  v564[1] = v168;
  v564[0] = v167;
  long long v169 = *(_OWORD *)(v38 + 16);
  long long v170 = *(_OWORD *)(v38 + 32);
  v580[2] = v565;
  v580[1] = v170;
  v580[0] = v169;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v580, (uint64_t)v581);
  outlined retain of Locale((uint64_t)v581);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v564);
  uint64_t v171 = BigString.UTF8View.count.getter();
  uint64_t result = outlined release of Locale((uint64_t)v493);
  *(void *)&long long v461 = v171;
  if (v171 < v460)
  {
LABEL_451:
    __break(1u);
    goto LABEL_452;
  }
  unint64_t v172 = *(void *)(v38 + 64);
  uint64_t v173 = *(void *)(v38 + 72);
  uint64_t v174 = *(void *)(v38 + 80);
  uint64_t v175 = *(void *)(v38 + 88);
  swift_unknownObjectRetain();
  swift_retain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v460, v449 & 1, v172, v173, v174, v175, (uint64_t *)&v548);
  long long v450 = v548;
  long long v176 = v549;
  uint64_t v177 = v550;
  uint64_t v178 = v460;
  swift_unknownObjectRelease();
  long long v548 = v450;
  long long v549 = v176;
  *(void *)&long long v550 = v177;
  uint64_t v453 = v155;
  while (2)
  {
    if (v178 == (void)v461)
    {
      AttributedString._InternalRunsSlice.startIndex.getter((void *)v38, v178, v494);
      char v182 = &v495;
    }
    else
    {
      uint64_t v183 = *(void *)(v38 + 72);
      uint64_t v184 = *(void *)(v38 + 80);
      uint64_t v185 = *(void *)(v38 + 88);
      uint64_t v186 = swift_unknownObjectRetain();
      AttributedString._InternalRuns.endIndex.getter(v186, v183, v184, v185, v496);
      uint64_t v178 = v460;
      swift_unknownObjectRelease();
      char v182 = &v497;
    }
    if (v177 < *v182 && *(void *)(v531 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v548, v178, v461, (void *)v38, &v531, v155, v457, (uint64_t)&v463);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v4 = *((void *)&v548 + 1);
      unint64_t v187 = v548;
      uint64_t v188 = v549;
      int64_t v39 = v550;
      uint64_t v189 = *(void *)(v38 + 64);
      uint64_t v190 = *(void *)(v38 + 72);
      uint64_t v191 = *(void *)(v38 + 80);
      uint64_t v192 = *(void *)(v38 + 88);
      long long v480 = v548;
      *(void *)&long long v481 = v549;
      uint64_t v193 = *((void *)&v549 + 1) + 1;
      if (__OFADD__(*((void *)&v549 + 1), 1))
      {
LABEL_409:
        __break(1u);
LABEL_410:
        __break(1u);
LABEL_411:
        __break(1u);
LABEL_412:
        __break(1u);
LABEL_413:
        __break(1u);
LABEL_414:
        __break(1u);
LABEL_415:
        __break(1u);
LABEL_416:
        __break(1u);
LABEL_417:
        __break(1u);
LABEL_418:
        __break(1u);
LABEL_419:
        __break(1u);
LABEL_420:
        __break(1u);
LABEL_421:
        __break(1u);
LABEL_422:
        __break(1u);
LABEL_423:
        __break(1u);
LABEL_424:
        __break(1u);
LABEL_425:
        __break(1u);
LABEL_426:
        __break(1u);
LABEL_427:
        __break(1u);
LABEL_428:
        __break(1u);
LABEL_429:
        __break(1u);
LABEL_430:
        __break(1u);
LABEL_431:
        __break(1u);
LABEL_432:
        __break(1u);
        goto LABEL_433;
      }
      swift_unknownObjectRetain();
      unint64_t v194 = specialized Rope.subscript.getter(v187, v4, v188, v189, v190, v191, v192);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v177 = v39 + v194;
      if (__OFADD__(v39, v194)) {
        goto LABEL_410;
      }
      swift_unknownObjectRetain();
      specialized Rope.formIndex(after:)(&v480, v189, v190, v191, v192);
      uint64_t result = swift_unknownObjectRelease_n();
      if (v177 < (uint64_t)v461)
      {
        unint64_t v179 = *((void *)&v480 + 1);
        uint64_t v180 = v480;
        uint64_t v181 = v481;
        uint64_t v178 = v460;
      }
      else
      {
        uint64_t v195 = *(void *)(v38 + 64);
        uint64_t v193 = *(void *)(v38 + 72);
        uint64_t v177 = *(void *)(v38 + 80);
        uint64_t v180 = *(void *)(v38 + 88);
        uint64_t v178 = v460;
        if (v460 == (void)v461)
        {
          if (v195) {
            uint64_t v196 = *(void *)(v38 + 80);
          }
          else {
            uint64_t v196 = 0;
          }
          if (v460 < 0 || v196 < v460) {
            goto LABEL_428;
          }
          if (v195 && v460 < v177 && *(_WORD *)(v195 + 16))
          {
            uint64_t v37 = *(unsigned __int8 *)(v195 + 18);
            if (*(unsigned char *)(v195 + 18))
            {
              uint64_t result = swift_unknownObjectRetain_n();
              uint64_t v4 = v460;
              int64_t v43 = v195;
              while (1)
              {
                uint64_t v46 = *(unsigned __int16 *)(v43 + 16);
                if (!*(_WORD *)(v43 + 16)) {
                  goto LABEL_170;
                }
                uint64_t v198 = *(void *)(v43 + 40);
                uint64_t v199 = v4 - v198;
                if (__OFSUB__(v4, v198)) {
                  goto LABEL_412;
                }
                if (__OFADD__(v199, 1)) {
                  goto LABEL_413;
                }
                if (v199 + 1 <= 0)
                {
                  uint64_t v46 = 0;
                }
                else
                {
                  if (v46 == 1)
                  {
                    v4 -= v198;
                    goto LABEL_170;
                  }
                  uint64_t v200 = *(void *)(v43 + 64);
                  BOOL v48 = __OFSUB__(v199, v200);
                  uint64_t v49 = v199 - v200;
                  if (v48) {
                    goto LABEL_426;
                  }
                  if (__OFADD__(v49, 1)) {
                    goto LABEL_427;
                  }
                  if (v49 + 1 < 1)
                  {
                    uint64_t v46 = 1;
                    uint64_t v4 = v199;
                  }
                  else
                  {
                    if (v46 == 2)
                    {
                      uint64_t v4 = v49;
LABEL_170:
                      if (v4) {
                        goto LABEL_411;
                      }
                      goto LABEL_171;
                    }
                    Swift::Int_optional v201 = (void *)(v43 + 88);
                    uint64_t v202 = 2;
                    while (1)
                    {
                      if (v46 == v202) {
                        goto LABEL_404;
                      }
                      uint64_t v4 = v49 - *v201;
                      if (__OFSUB__(v49, *v201)) {
                        goto LABEL_405;
                      }
                      if (__OFADD__(v4, 1)) {
                        goto LABEL_406;
                      }
                      if (v4 + 1 < 1) {
                        break;
                      }
                      ++v202;
                      v201 += 3;
                      uint64_t v49 = v4;
                      if (v46 == v202) {
                        goto LABEL_170;
                      }
                    }
                    uint64_t v46 = v202;
                    uint64_t v4 = v49;
                  }
                }
LABEL_171:
                char v197 = (4 * *(unsigned char *)(v43 + 18) + 8) & 0x3C;
                uint64_t v37 = ((-15 << v197) - 1) & v37 | (v46 << v197);
                uint64_t v181 = *(void *)(v43 + 24 + 24 * v46);
                swift_unknownObjectRetain();
                uint64_t result = swift_unknownObjectRelease();
                int64_t v43 = v181;
                if (!*(unsigned char *)(v181 + 18)) {
                  goto LABEL_200;
                }
              }
            }
            uint64_t result = swift_unknownObjectRetain_n();
            uint64_t v4 = v460;
            uint64_t v181 = v195;
LABEL_200:
            uint64_t v205 = *(unsigned __int16 *)(v181 + 16);
            if (!*(_WORD *)(v181 + 16)) {
              goto LABEL_219;
            }
            uint64_t v206 = *(void *)(v181 + 24);
            uint64_t v207 = v4 - v206;
            if (__OFSUB__(v4, v206)) {
              goto LABEL_461;
            }
            if (__OFADD__(v207, 1)) {
              goto LABEL_462;
            }
            if (v207 + 1 <= 0)
            {
              uint64_t v205 = 0;
            }
            else
            {
              if (v205 == 1)
              {
                v4 -= v206;
                goto LABEL_219;
              }
              uint64_t v208 = *(void *)(v181 + 48);
              BOOL v48 = __OFSUB__(v207, v208);
              uint64_t v209 = v207 - v208;
              if (v48) {
                goto LABEL_470;
              }
              if (__OFADD__(v209, 1)) {
                goto LABEL_471;
              }
              if (v209 + 1 < 1)
              {
                uint64_t v205 = 1;
                uint64_t v4 = v207;
              }
              else
              {
                if (v205 == 2)
                {
                  uint64_t v4 = v209;
LABEL_219:
                  if (v4) {
                    goto LABEL_460;
                  }
                  goto LABEL_220;
                }
                Swift::Int_optional v210 = (void *)(v181 + 72);
                uint64_t v211 = 2;
                while (1)
                {
                  if (v205 == v211) {
                    goto LABEL_447;
                  }
                  uint64_t v4 = v209 - *v210;
                  if (__OFSUB__(v209, *v210)) {
                    goto LABEL_448;
                  }
                  if (__OFADD__(v4, 1)) {
                    goto LABEL_449;
                  }
                  if (v4 + 1 < 1) {
                    break;
                  }
                  ++v211;
                  v210 += 3;
                  uint64_t v209 = v4;
                  if (v205 == v211) {
                    goto LABEL_219;
                  }
                }
                uint64_t v205 = v211;
                uint64_t v4 = v209;
              }
            }
LABEL_220:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v179 = v37 & 0xFFFFFFFFFFFFF0FFLL | (v205 << 8);
            uint64_t v178 = v460;
LABEL_195:
            swift_unknownObjectRetain();
            uint64_t v193 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v180, v179, v181, v195, v193);
            uint64_t result = swift_unknownObjectRelease_n();
            uint64_t v177 = v178 - v4;
            if (__OFSUB__(v178, v4)) {
              goto LABEL_429;
            }
            goto LABEL_149;
          }
          unint64_t v204 = swift_unknownObjectRetain_n();
          unint64_t v179 = specialized Rope._endPath.getter(v204);
          swift_unknownObjectRelease();
          uint64_t v181 = 0;
          uint64_t v4 = 0;
          if (v195) {
            goto LABEL_195;
          }
          uint64_t v193 = 0;
          uint64_t v177 = v460;
        }
        else
        {
          unint64_t v203 = swift_unknownObjectRetain();
          unint64_t v179 = specialized Rope._endPath.getter(v203);
          if (v195)
          {
            swift_unknownObjectRelease();
            uint64_t v181 = 0;
          }
          else
          {
            uint64_t v181 = 0;
            uint64_t v193 = 0;
            uint64_t v177 = 0;
          }
        }
      }
LABEL_149:
      *(void *)&long long v548 = v180;
      *((void *)&v548 + 1) = v179;
      *(void *)&long long v549 = v181;
      *((void *)&v549 + 1) = v193;
      *(void *)&long long v550 = v177;
      uint64_t v155 = v453;
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v62 = v469;
  uint64_t v64 = v463;
  if ((uint64_t)v463 < (uint64_t)v469)
  {
LABEL_452:
    __break(1u);
LABEL_453:
    __break(1u);
LABEL_454:
    __break(1u);
    goto LABEL_455;
  }
LABEL_224:
  uint64_t v431 = v62;
  long long v212 = *(_OWORD *)(v38 + 16);
  long long v213 = *(_OWORD *)(v38 + 32);
  long long v563 = *(_OWORD *)(v38 + 48);
  v562[1] = v213;
  v562[0] = v212;
  long long v214 = *(_OWORD *)(v38 + 16);
  long long v215 = *(_OWORD *)(v38 + 32);
  v582[2] = v563;
  v582[1] = v215;
  v582[0] = v214;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v582, (uint64_t)v583);
  outlined retain of Locale((uint64_t)v583);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v562);
  uint64_t v216 = BigString.UTF8View.count.getter();
  outlined release of Locale((uint64_t)v498);
  unint64_t v217 = *v445;
  long long v218 = *(_OWORD *)(*v445 + 32);
  long long v555 = *(_OWORD *)(*v445 + 16);
  long long v556 = v218;
  long long v557 = *(_OWORD *)(v217 + 48);
  v584[2] = v557;
  v584[1] = v218;
  v584[0] = v555;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v584, (uint64_t)v585);
  outlined retain of Locale((uint64_t)v585);
  BigSubstring.init(_unchecked:in:)();
  Swift::Int_optional v219 = (_OWORD *)*v445;
  BigString.init()();
  long long v220 = v500;
  v219[1] = v499;
  v219[2] = v220;
  v219[3] = v501;
  swift_unknownObjectRelease();
  if ((v440 & 1) == 0)
  {
    long long v221 = *(_OWORD *)(v432 + 80);
    long long v552 = *(_OWORD *)(v432 + 64);
    long long v553 = v221;
    long long v554 = *(_OWORD *)(v432 + 96);
    long long v222 = *(_OWORD *)(v432 + 16);
    long long v548 = *(_OWORD *)v432;
    long long v549 = v222;
    long long v223 = *(_OWORD *)(v432 + 32);
    long long v551 = *(_OWORD *)(v432 + 48);
    long long v550 = v223;
    outlined retain of Locale(v432);
    lazy protocol witness table accessor for type BigSubstring and conformance BigSubstring();
    BigSubstring.replaceSubrange<A>(_:with:)();
  }
  uint64_t v224 = (_OWORD *)*v445;
  long long v552 = v484;
  long long v553 = v485;
  long long v554 = v486;
  long long v548 = v480;
  long long v549 = v481;
  long long v551 = v483;
  long long v550 = v482;
  outlined retain of Locale((uint64_t)&v548);
  BigSubstring.base.getter();
  outlined release of Locale((uint64_t)&v548);
  long long v225 = v503;
  v224[1] = v502;
  v224[2] = v225;
  v224[3] = v504;
  swift_unknownObjectRelease();
  outlined retain of Locale((uint64_t)&v548);
  uint64_t v226 = BigSubstring.startIndex.getter();
  uint64_t v228 = v227;
  uint64_t v230 = v229;
  uint64_t v232 = v231;
  outlined release of Locale((uint64_t)&v548);
  outlined retain of Locale((uint64_t)&v548);
  uint64_t v233 = BigSubstring.endIndex.getter();
  uint64_t v235 = v234;
  uint64_t v237 = v236;
  uint64_t v4 = v238;
  outlined release of Locale((uint64_t)&v548);
  specialized Range.init(uncheckedBounds:)(v226, v228, v230, v232, v233, v235, v237, v4, &v469);
  long long v239 = v470[0];
  *(_OWORD *)(v445 + 1) = v469;
  *(_OWORD *)(v445 + 3) = v239;
  long long v240 = v471;
  *(_OWORD *)(v445 + 5) = v470[1];
  *(_OWORD *)(v445 + 7) = v240;
  uint64_t v241 = BigString.Index.utf8Offset.getter();
  uint64_t v242 = BigString.Index.utf8Offset.getter();
  unint64_t v243 = *v445;
  long long v244 = *(_OWORD *)(*v445 + 16);
  long long v245 = *(_OWORD *)(*v445 + 32);
  long long v547 = *(_OWORD *)(*v445 + 48);
  v546[1] = v245;
  v546[0] = v244;
  long long v246 = *(_OWORD *)(v243 + 16);
  long long v247 = *(_OWORD *)(v243 + 32);
  v586[2] = v547;
  v586[1] = v247;
  v586[0] = v246;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v586, (uint64_t)v587);
  outlined retain of Locale((uint64_t)v587);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v546);
  uint64_t v248 = BigString.UTF8View.count.getter();
  uint64_t result = outlined release of Locale((uint64_t)v505);
  uint64_t v249 = v248 - v216;
  if (__OFSUB__(v248, v216)) {
    goto LABEL_434;
  }
  uint64_t v250 = v242 - v241;
  if (__OFSUB__(v242, v241))
  {
LABEL_435:
    __break(1u);
    goto LABEL_436;
  }
  uint64_t v251 = v250 + v249;
  if (__OFADD__(v250, v249))
  {
LABEL_436:
    __break(1u);
    goto LABEL_437;
  }
  swift_bridgeObjectRetain();
  uint64_t v252 = MEMORY[0x1E4FBC870];
  swift_bridgeObjectRetain();
  specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v241, v242, v251, v430, v252);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v253 = *v445;
  long long v254 = *(_OWORD *)(*v445 + 16);
  long long v255 = *(_OWORD *)(*v445 + 32);
  long long v545 = *(_OWORD *)(*v445 + 48);
  v544[1] = v255;
  v544[0] = v254;
  long long v256 = *(_OWORD *)(v253 + 16);
  long long v257 = *(_OWORD *)(v253 + 32);
  v588[2] = v545;
  v588[1] = v257;
  v588[0] = v256;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v588, (uint64_t)v589);
  outlined retain of Locale((uint64_t)v589);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v544);
  uint64_t v258 = BigString.UTF8View.count.getter();
  uint64_t result = outlined release of Locale((uint64_t)v506);
  uint64_t v259 = v258 - v216;
  if (__OFSUB__(v258, v216))
  {
LABEL_437:
    __break(1u);
    goto LABEL_438;
  }
  uint64_t v260 = v64 + v259;
  if (__OFADD__(v64, v259))
  {
LABEL_438:
    __break(1u);
    goto LABEL_439;
  }
  if (v260 < v431)
  {
LABEL_439:
    __break(1u);
LABEL_440:
    __break(1u);
LABEL_441:
    __break(1u);
LABEL_442:
    __break(1u);
    goto LABEL_443;
  }
  uint64_t v261 = *(void *)(v253 + 80);
  if (!*(void *)(v253 + 64))
  {
    unint64_t v310 = swift_unknownObjectRetain();
    specialized Rope._endPath.getter(v310);
    swift_unknownObjectRelease();
    goto LABEL_270;
  }
  uint64_t v432 = v253;
  unint64_t v262 = swift_unknownObjectRetain_n();
  specialized Rope._endPath.getter(v262);
  swift_unknownObjectRelease_n();
  if (!v261) {
    goto LABEL_270;
  }
  uint64_t v4 = v253 + 16;
  long long v263 = *(_OWORD *)(v253 + 16);
  long long v264 = *(_OWORD *)(v253 + 32);
  long long v543 = *(_OWORD *)(v253 + 48);
  v542[1] = v264;
  v542[0] = v263;
  long long v265 = *(_OWORD *)(v253 + 16);
  long long v266 = *(_OWORD *)(v253 + 32);
  v590[2] = v543;
  v590[1] = v266;
  v590[0] = v265;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v590, (uint64_t)v591);
  outlined retain of Locale((uint64_t)v591);
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)v542);
  long long v267 = *(_OWORD *)(v253 + 16);
  long long v268 = *(_OWORD *)(v253 + 32);
  long long v541 = *(_OWORD *)(v253 + 48);
  v540[1] = v268;
  v540[0] = v267;
  long long v269 = *(_OWORD *)(v253 + 16);
  long long v270 = *(_OWORD *)(v253 + 32);
  v592[2] = v541;
  v592[1] = v270;
  v592[0] = v269;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v592, (uint64_t)v593);
  outlined retain of Locale((uint64_t)v593);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)v540);
  uint64_t v271 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v273 = v272;
  uint64_t v275 = v274;
  uint64_t v277 = v276;
  outlined release of Locale((uint64_t)v507);
  long long v278 = *(_OWORD *)(v432 + 16);
  long long v279 = *(_OWORD *)(v432 + 32);
  long long v539 = *(_OWORD *)(v432 + 48);
  v538[1] = v279;
  v538[0] = v278;
  long long v280 = *(_OWORD *)(v432 + 16);
  long long v281 = *(_OWORD *)(v432 + 32);
  v594[2] = v539;
  v594[1] = v281;
  v594[0] = v280;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v594, (uint64_t)v595);
  outlined retain of Locale((uint64_t)v595);
  BigString.utf8.getter();
  uint64_t result = outlined release of Locale((uint64_t)v538);
  if (__OFSUB__(v260, v431)) {
    goto LABEL_456;
  }
  uint64_t v429 = v260;
  uint64_t v282 = BigString.UTF8View.index(_:offsetBy:)();
  uint64_t v284 = v283;
  uint64_t v286 = v285;
  uint64_t v288 = v287;
  outlined release of Locale((uint64_t)v508);
  specialized Range.init(uncheckedBounds:)(v271, v273, v275, v277, v282, v284, v286, v288, &v531);
  *(void *)&long long v600 = MEMORY[0x1E4FBC868];
  long long v289 = *(_OWORD *)(v4 + 16);
  long long v535 = *(_OWORD *)v4;
  long long v536 = v289;
  long long v537 = *(_OWORD *)(v4 + 32);
  BigString.unicodeScalars.getter();
  uint64_t v290 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v292 = v291;
  uint64_t v294 = v293;
  uint64_t v296 = v295;
  outlined release of Locale((uint64_t)v509);
  long long v297 = *(_OWORD *)(v4 + 16);
  long long v532 = *(_OWORD *)v4;
  long long v533 = v297;
  long long v437 = (long long *)v4;
  long long v534 = *(_OWORD *)(v4 + 32);
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.index(roundingUp:)();
  uint64_t v4 = v298;
  outlined release of Locale((uint64_t)v510);
  *(void *)&long long v606 = v290;
  *((void *)&v606 + 1) = v292;
  *(void *)&long long v607 = v294;
  *((void *)&v607 + 1) = v296;
  uint64_t v37 = BigString.Index.utf8Offset.getter();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (result < v37) {
    goto LABEL_457;
  }
  int64_t v39 = *(void *)(v432 + 64);
  if (v39) {
    uint64_t v299 = *(void *)(v432 + 80);
  }
  else {
    uint64_t v299 = 0;
  }
  if (v37 < 0 || v299 < v37) {
    goto LABEL_458;
  }
  uint64_t v300 = result;
  uint64_t v4 = *(void *)(v432 + 72);
  int64_t v43 = *(void *)(v432 + 88);
  if (!v39 || !*(_WORD *)(v39 + 16) || v37 >= *(void *)(v432 + 80))
  {
    swift_retain_n();
    unint64_t v311 = swift_unknownObjectRetain_n();
    unint64_t v312 = specialized Rope._endPath.getter(v311);
    swift_unknownObjectRelease();
    unint64_t v38 = 0;
    uint64_t v110 = 0;
    long long v313 = v437;
    if (!v39) {
      goto LABEL_397;
    }
    goto LABEL_272;
  }
  uint64_t v460 = *(void *)(v432 + 72);
  *(void *)&long long v461 = result;
  uint64_t v4 = *(unsigned __int8 *)(v39 + 18);
  if (*(unsigned char *)(v39 + 18))
  {
    swift_unknownObjectRetain_n();
    uint64_t result = swift_retain_n();
    uint64_t v110 = v37;
    unint64_t v301 = v39;
    while (1)
    {
      uint64_t v303 = *(unsigned __int16 *)(v301 + 16);
      if (!*(_WORD *)(v301 + 16)) {
        goto LABEL_247;
      }
      uint64_t v304 = *(void *)(v301 + 40);
      uint64_t v305 = v110 - v304;
      if (__OFSUB__(v110, v304)) {
        goto LABEL_431;
      }
      if (__OFADD__(v305, 1)) {
        goto LABEL_432;
      }
      if (v305 + 1 <= 0)
      {
        uint64_t v303 = 0;
      }
      else
      {
        if (v303 == 1)
        {
          v110 -= v304;
          goto LABEL_247;
        }
        uint64_t v306 = *(void *)(v301 + 64);
        BOOL v48 = __OFSUB__(v305, v306);
        uint64_t v307 = v305 - v306;
        if (v48) {
          goto LABEL_453;
        }
        if (__OFADD__(v307, 1)) {
          goto LABEL_454;
        }
        if (v307 + 1 < 1)
        {
          uint64_t v303 = 1;
          uint64_t v110 = v305;
        }
        else
        {
          if (v303 == 2)
          {
            uint64_t v110 = v307;
LABEL_247:
            if (v110) {
              goto LABEL_430;
            }
            goto LABEL_248;
          }
          uint64_t v308 = (void *)(v301 + 88);
          uint64_t v309 = 2;
          while (1)
          {
            if (v303 == v309) {
              goto LABEL_420;
            }
            uint64_t v110 = v307 - *v308;
            if (__OFSUB__(v307, *v308)) {
              goto LABEL_421;
            }
            if (__OFADD__(v110, 1)) {
              goto LABEL_422;
            }
            if (v110 + 1 < 1) {
              break;
            }
            ++v309;
            v308 += 3;
            uint64_t v307 = v110;
            if (v303 == v309) {
              goto LABEL_247;
            }
          }
          uint64_t v303 = v309;
          uint64_t v110 = v307;
        }
      }
LABEL_248:
      char v302 = (4 * *(unsigned char *)(v301 + 18) + 8) & 0x3C;
      uint64_t v4 = ((-15 << v302) - 1) & v4 | (v303 << v302);
      unint64_t v38 = *(void *)(v301 + 24 + 24 * v303);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v301 = v38;
      if (!*(unsigned char *)(v38 + 18)) {
        goto LABEL_361;
      }
    }
  }
  swift_unknownObjectRetain_n();
  uint64_t result = swift_retain_n();
  uint64_t v110 = v37;
  unint64_t v38 = v39;
LABEL_361:
  uint64_t v409 = *(unsigned __int16 *)(v38 + 16);
  if (*(_WORD *)(v38 + 16))
  {
    uint64_t v410 = *(void *)(v38 + 24);
    uint64_t v411 = v110 - v410;
    if (__OFSUB__(v110, v410)) {
      goto LABEL_473;
    }
    if (__OFADD__(v411, 1)) {
      goto LABEL_474;
    }
    if (v411 + 1 <= 0) {
      goto LABEL_382;
    }
    if (v409 == 1)
    {
      v110 -= v410;
    }
    else
    {
      uint64_t v427 = *(void *)(v38 + 48);
      BOOL v48 = __OFSUB__(v411, v427);
      uint64_t v46 = v411 - v427;
      if (v48) {
        goto LABEL_477;
      }
      if (__OFADD__(v46, 1)) {
        goto LABEL_478;
      }
      if (v46 + 1 < 1)
      {
        uint64_t v409 = 1;
        uint64_t v110 = v411;
        goto LABEL_396;
      }
      if (v409 != 2)
      {
        uint64_t v428 = (void *)(v38 + 72);
        uint64_t v49 = 2;
        while (v409 != v49)
        {
          uint64_t v110 = v46 - *v428;
          if (__OFSUB__(v46, *v428)) {
            goto LABEL_468;
          }
          if (__OFADD__(v110, 1)) {
            goto LABEL_469;
          }
          if (v110 + 1 < 1) {
            goto LABEL_407;
          }
          ++v49;
          v428 += 3;
          uint64_t v46 = v110;
          if (v409 == v49) {
            goto LABEL_395;
          }
        }
        goto LABEL_467;
      }
      uint64_t v110 = v46;
    }
  }
LABEL_395:
  if (v110) {
    goto LABEL_472;
  }
LABEL_396:
  while (1)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v312 = v4 & 0xFFFFFFFFFFFFF0FFLL | (v409 << 8);
    uint64_t v4 = v460;
    uint64_t v300 = v461;
    long long v313 = v437;
    if (!v39) {
      break;
    }
LABEL_272:
    swift_unknownObjectRetain();
    uint64_t v314 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v43, v312, v38, v39, v4);
    swift_release();
    swift_unknownObjectRelease_n();
    uint64_t v46 = v37 - v110;
    if (!__OFSUB__(v37, v110)) {
      goto LABEL_273;
    }
LABEL_399:
    __break(1u);
LABEL_400:
    __break(1u);
LABEL_401:
    __break(1u);
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
LABEL_404:
    __break(1u);
LABEL_405:
    __break(1u);
LABEL_406:
    __break(1u);
LABEL_407:
    uint64_t v409 = v49;
    uint64_t v110 = v46;
  }
LABEL_397:
  swift_release();
  uint64_t v314 = 0;
  uint64_t v46 = v37 - v110;
  if (__OFSUB__(v37, v110)) {
    goto LABEL_399;
  }
LABEL_273:
  *(void *)&long long v475 = v432;
  *((void *)&v475 + 1) = v37;
  *(void *)&long long v476 = v300;
  *((void *)&v476 + 1) = v43;
  *(void *)&long long v477 = v312;
  *((void *)&v477 + 1) = v38;
  uint64_t v478 = v314;
  uint64_t v479 = v46;
  specialized IndexingIterator.next()();
  if (!v315)
  {
    uint64_t v354 = MEMORY[0x1E4FBC868];
    goto LABEL_317;
  }
  uint64_t v316 = v315;
  while (1)
  {
    long long v318 = *v313;
    long long v319 = v313[1];
    long long v521 = v313[2];
    v520[1] = v319;
    v520[0] = v318;
    long long v320 = *v313;
    v609[1] = v313[1];
    v609[2] = v521;
    v609[0] = v320;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v609, (uint64_t)v610);
    outlined retain of Locale((uint64_t)v610);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v520);
    uint64_t v4 = v606;
    uint64_t v321 = *((void *)&v607 + 1);
    uint64_t v441 = *((void *)&v606 + 1);
    uint64_t v458 = v607;
    uint64_t v322 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v324 = v323;
    uint64_t v326 = v325;
    uint64_t v328 = v327;
    outlined release of Locale((uint64_t)v511);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v329 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v316);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v329)
    {
      uint64_t v330 = v441;
      uint64_t v331 = v458;
      if (static BigString.Index.< infix(_:_:)()) {
        break;
      }
    }
LABEL_275:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(&v606, v322, v324, v326, v328);
    specialized IndexingIterator.next()();
    uint64_t v316 = v317;
    if (!v317) {
      goto LABEL_316;
    }
  }
  uint64_t v438 = v316 + 64;
  uint64_t v435 = v328;
  uint64_t v436 = v326;
  uint64_t v433 = v322;
  uint64_t v434 = v324;
  while (2)
  {
    long long v332 = v313[1];
    long long v517 = *v313;
    long long v518 = v332;
    long long v519 = v313[2];
    BigString.unicodeScalars.getter();
    int v454 = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v512);
    long long v333 = v313[1];
    long long v514 = *v313;
    long long v515 = v333;
    long long v516 = v313[2];
    BigString.unicodeScalars.getter();
    uint64_t v439 = v4;
    uint64_t v442 = v330;
    uint64_t v334 = BigString.UnicodeScalarView.index(after:)();
    uint64_t v447 = v335;
    uint64_t v451 = v334;
    uint64_t v444 = v337;
    unint64_t v446 = v336;
    outlined release of Locale((uint64_t)v513);
    uint64_t v338 = 1 << *(unsigned char *)(v316 + 32);
    if (v338 < 64) {
      uint64_t v339 = ~(-1 << v338);
    }
    else {
      uint64_t v339 = -1;
    }
    unint64_t v340 = v339 & *(void *)(v316 + 64);
    int64_t v459 = (unint64_t)(v338 + 63) >> 6;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v341 = 0;
LABEL_285:
    if (v340)
    {
      unint64_t v342 = __clz(__rbit64(v340));
      v340 &= v340 - 1;
      unint64_t v343 = v342 | (v341 << 6);
      goto LABEL_287;
    }
    int64_t v347 = v341 + 1;
    if (!__OFADD__(v341, 1))
    {
      if (v347 < v459)
      {
        unint64_t v348 = *(void *)(v438 + 8 * v347);
        if (v348)
        {
LABEL_291:
          unint64_t v340 = (v348 - 1) & v348;
          unint64_t v343 = __clz(__rbit64(v348)) + (v347 << 6);
          int64_t v341 = v347;
LABEL_287:
          uint64_t v344 = *(void *)(v316 + 56);
          uint64_t v345 = (void *)(*(void *)(v316 + 48) + 16 * v343);
          uint64_t v346 = v345[1];
          *(void *)&long long v463 = *v345;
          *((void *)&v463 + 1) = v346;
          outlined init with copy of AttributedString._AttributeValue(v344 + 72 * v343, (uint64_t)&v464);
          swift_bridgeObjectRetain();
LABEL_297:
          outlined init with take of LocalePreferences?((uint64_t)&v463, (uint64_t)&v469, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
          uint64_t v349 = *((void *)&v469 + 1);
          if (!*((void *)&v469 + 1))
          {
            swift_release();
            uint64_t v330 = v447;
            uint64_t v4 = v451;
            uint64_t v321 = v444;
            uint64_t v331 = v446;
            uint64_t v322 = v433;
            uint64_t v324 = v434;
            uint64_t v328 = v435;
            uint64_t v326 = v436;
            long long v313 = v437;
            if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
              goto LABEL_275;
            }
            continue;
          }
          uint64_t v4 = v469;
          uint64_t v350 = *((void *)&v471 + 1);
          uint64_t v351 = v472;
          outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v471 + 1), v472);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v470);
          if (v351 != 1)
          {
            *(void *)&long long v463 = v350;
            *((void *)&v463 + 1) = v351;
            unint64_t v352 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
            outlined consume of AttributedString.AttributeRunBoundaries?(v350, v351);
            if ((v352 & 0x100000000) == 0 && v454 != v352) {
              specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(v4, v349, v439, v442, v331, v321, v451, v447, v446, v444, (uint64_t *)&v600);
            }
          }
          uint64_t result = swift_bridgeObjectRelease();
          goto LABEL_285;
        }
        v341 += 2;
        if (v347 + 1 >= v459)
        {
          int64_t v341 = v347;
        }
        else
        {
          unint64_t v348 = *(void *)(v438 + 8 * v341);
          if (v348)
          {
            ++v347;
            goto LABEL_291;
          }
          if (v347 + 2 < v459)
          {
            unint64_t v348 = *(void *)(v438 + 8 * (v347 + 2));
            if (v348)
            {
              v347 += 2;
              goto LABEL_291;
            }
            int64_t v353 = v347 + 3;
            if (v347 + 3 >= v459)
            {
              int64_t v341 = v347 + 2;
            }
            else
            {
              unint64_t v348 = *(void *)(v438 + 8 * v353);
              if (v348)
              {
                v347 += 3;
                goto LABEL_291;
              }
              while (1)
              {
                int64_t v347 = v353 + 1;
                if (__OFADD__(v353, 1)) {
                  goto LABEL_414;
                }
                if (v347 >= v459) {
                  break;
                }
                unint64_t v348 = *(void *)(v438 + 8 * v347);
                ++v353;
                if (v348) {
                  goto LABEL_291;
                }
              }
              int64_t v341 = v459 - 1;
            }
          }
        }
      }
      unint64_t v340 = 0;
      uint64_t v468 = 0;
      long long v466 = 0u;
      long long v467 = 0u;
      long long v464 = 0u;
      long long v465 = 0u;
      long long v463 = 0u;
      goto LABEL_297;
    }
    break;
  }
  __break(1u);
LABEL_316:
  uint64_t v354 = v600;
LABEL_317:
  uint64_t result = swift_release();
  uint64_t v4 = 0;
  uint64_t v355 = v354 + 64;
  uint64_t v356 = 1 << *(unsigned char *)(v354 + 32);
  uint64_t v357 = -1;
  if (v356 < 64) {
    uint64_t v357 = ~(-1 << v356);
  }
  unint64_t v358 = v357 & *(void *)(v354 + 64);
  int64_t v462 = (unint64_t)(v356 + 63) >> 6;
  while (2)
  {
    if (v358)
    {
      unint64_t v359 = __clz(__rbit64(v358));
      v358 &= v358 - 1;
      unint64_t v360 = v359 | (v4 << 6);
LABEL_333:
      uint64_t v363 = (unint64_t *)(*(void *)(v354 + 48) + 16 * v360);
      unint64_t v365 = *v363;
      unint64_t v364 = v363[1];
      uint64_t v366 = *(void *)(*(void *)(v354 + 56) + 8 * v360);
      uint64_t result = specialized Array._getCount()(v366);
      if (result)
      {
        uint64_t v367 = result;
        if (result < 1)
        {
          __break(1u);
          goto LABEL_409;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v368 = (uint64_t *)(v366 + 40);
        do
        {
          AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v365, v364, *(v368 - 1), *v368, 0);
          v368 += 2;
          --v367;
        }
        while (v367);
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
      }
      continue;
    }
    break;
  }
  BOOL v48 = __OFADD__(v4++, 1);
  if (v48) {
    goto LABEL_416;
  }
  if (v4 < v462)
  {
    unint64_t v361 = *(void *)(v355 + 8 * v4);
    if (!v361)
    {
      uint64_t v362 = v4 + 1;
      if (v4 + 1 >= v462) {
        goto LABEL_342;
      }
      unint64_t v361 = *(void *)(v355 + 8 * v362);
      if (!v361)
      {
        uint64_t v362 = v4 + 2;
        if (v4 + 2 >= v462) {
          goto LABEL_342;
        }
        unint64_t v361 = *(void *)(v355 + 8 * v362);
        if (!v361)
        {
          uint64_t v362 = v4 + 3;
          if (v4 + 3 >= v462) {
            goto LABEL_342;
          }
          unint64_t v361 = *(void *)(v355 + 8 * v362);
          if (!v361)
          {
            while (1)
            {
              uint64_t v4 = v362 + 1;
              if (__OFADD__(v362, 1)) {
                break;
              }
              if (v4 >= v462) {
                goto LABEL_342;
              }
              unint64_t v361 = *(void *)(v355 + 8 * v4);
              ++v362;
              if (v361) {
                goto LABEL_332;
              }
            }
LABEL_433:
            __break(1u);
LABEL_434:
            __break(1u);
            goto LABEL_435;
          }
        }
      }
      uint64_t v4 = v362;
    }
LABEL_332:
    unint64_t v358 = (v361 - 1) & v361;
    unint64_t v360 = __clz(__rbit64(v361)) + (v4 << 6);
    goto LABEL_333;
  }
LABEL_342:
  swift_release();
  uint64_t v4 = v429;
  if ((specialized Range.isEmpty.getter() & 1) == 0)
  {
    long long v388 = *v437;
    long long v389 = v437[1];
    long long v530 = v437[2];
    long long v529 = v389;
    long long v528 = v388;
    long long v390 = *v437;
    long long v391 = v437[1];
    long long v598 = v530;
    long long v597 = v391;
    long long v596 = v390;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v596, (uint64_t)v599);
    outlined retain of Locale((uint64_t)v599);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v528);
    if ((specialized static Comparable.> infix(_:_:)() & 1) == 0) {
      goto LABEL_352;
    }
    uint64_t result = v431 - 1;
    if (__OFSUB__(v431, 1)) {
      goto LABEL_475;
    }
    if (AttributedString.Guts._needsParagraphFixing(from:to:)(result, v431))
    {
      long long v392 = *v437;
      long long v393 = v437[1];
      long long v527 = v437[2];
      v526[1] = v393;
      v526[0] = v392;
      long long v394 = *v437;
      long long v395 = v437[1];
      long long v602 = v527;
      long long v601 = v395;
      long long v600 = v394;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v600, (uint64_t)v603);
      outlined retain of Locale((uint64_t)v603);
      uint64_t v396 = BigString.index(before:)();
      uint64_t v398 = v397;
      uint64_t v400 = v399;
      uint64_t v402 = v401;
      outlined release of Locale((uint64_t)v526);
      AttributedString.Guts._paragraphExtending(from:)(v396, v398, v400, v402, &v463);
      int64_t v385 = Range<>._utf8OffsetRange.getter();
      int64_t v387 = v403;
      char v404 = 0;
    }
    else
    {
LABEL_352:
      int64_t v385 = 0;
      int64_t v387 = 0;
      char v404 = 1;
    }
    long long v405 = *v437;
    long long v406 = v437[1];
    long long v525 = v437[2];
    v524[1] = v406;
    v524[0] = v405;
    long long v407 = *v437;
    long long v607 = v437[1];
    long long v608 = v525;
    long long v606 = v407;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v606, (uint64_t)v604);
    outlined retain of Locale((uint64_t)v604);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v524);
    if ((static BigString.Index.< infix(_:_:)() & 1) == 0) {
      goto LABEL_371;
    }
    if (v404)
    {
      if (v429 < 1) {
        goto LABEL_270;
      }
    }
    else if (v387 >= v429)
    {
LABEL_370:
      char v404 = 0;
      goto LABEL_371;
    }
    if (AttributedString.Guts._needsParagraphFixing(from:to:)(v429 - 1, v429))
    {
      long long v412 = *v437;
      long long v413 = v437[1];
      long long v523 = v437[2];
      v522[1] = v413;
      v522[0] = v412;
      long long v414 = *v437;
      long long v476 = v437[1];
      long long v477 = v523;
      long long v475 = v414;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v475, (uint64_t)v605);
      outlined retain of Locale((uint64_t)v605);
      uint64_t v415 = BigString.index(before:)();
      uint64_t v417 = v416;
      uint64_t v419 = v418;
      uint64_t v421 = v420;
      outlined release of Locale((uint64_t)v522);
      AttributedString.Guts._paragraphExtending(from:)(v415, v417, v419, v421, &v469);
      int64_t v422 = Range<>._utf8OffsetRange.getter();
      int64_t v424 = v423;
      int v425 = 1;
      goto LABEL_372;
    }
LABEL_371:
    int64_t v422 = 0;
    int64_t v424 = 0;
    int v425 = 0;
LABEL_372:
    if ((v404 & 1) == 0 && v431 < v387)
    {
      uint64_t v474 = 0;
      uint64_t v473 = 0;
      AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v473, v385, v431, v387);
    }
    if (v429 < v424) {
      int v426 = v425;
    }
    else {
      int v426 = 0;
    }
    if (v426 == 1)
    {
      uint64_t v474 = 0;
      uint64_t v473 = 0;
      AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v473, v422, v429, v424);
    }
    goto LABEL_270;
  }
  long long v369 = *v437;
  long long v370 = v437[1];
  long long v602 = v437[2];
  long long v601 = v370;
  long long v600 = v369;
  long long v371 = *v437;
  long long v607 = v437[1];
  long long v608 = v602;
  long long v606 = v371;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v606, (uint64_t)v522);
  outlined retain of Locale((uint64_t)v522);
  BigString.startIndex.getter();
  outlined release of Locale((uint64_t)&v600);
  if (specialized static Comparable.> infix(_:_:)())
  {
    long long v372 = *v437;
    long long v373 = v437[1];
    long long v598 = v437[2];
    long long v597 = v373;
    long long v596 = v372;
    long long v374 = *v437;
    long long v476 = v437[1];
    long long v477 = v598;
    long long v475 = v374;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v475, (uint64_t)v524);
    outlined retain of Locale((uint64_t)v524);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v596);
    if (static BigString.Index.< infix(_:_:)())
    {
      uint64_t result = v431 - 1;
      if (__OFSUB__(v431, 1)) {
        goto LABEL_476;
      }
      if (AttributedString.Guts._needsParagraphFixing(from:to:)(result, v431))
      {
        long long v375 = *v437;
        long long v376 = v437[1];
        long long v530 = v437[2];
        long long v529 = v376;
        long long v528 = v375;
        long long v377 = *v437;
        long long v464 = v437[1];
        long long v465 = v530;
        long long v463 = v377;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v463, (uint64_t)v526);
        outlined retain of Locale((uint64_t)v526);
        uint64_t v378 = BigString.index(before:)();
        uint64_t v380 = v379;
        uint64_t v382 = v381;
        uint64_t v384 = v383;
        outlined release of Locale((uint64_t)&v528);
        AttributedString.Guts._paragraphExtending(from:)(v378, v380, v382, v384, &v469);
        int64_t v385 = Range<>._utf8OffsetRange.getter();
        int64_t v387 = v386;
        goto LABEL_370;
      }
    }
  }
LABEL_270:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  long long v8;
  long long v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  long long v17;
  uint64_t v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  char v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t result;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  long long v88;
  long long v89;
  void *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char Enum;
  uint64_t v95;
  long long v96;
  long long v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  long long v149;
  long long v150;
  long long v151;
  long long v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  long long v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *i;
  long long v167;
  long long v168;
  long long v169;
  long long v170;
  uint64_t v171;
  _OWORD *v172;
  long long v173;
  long long v174;
  long long v175;
  _OWORD *v176;
  long long v177;
  _OWORD *v178;
  long long v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  long long v197;
  long long v198;
  long long v199;
  long long v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  long long v205;
  long long v206;
  long long v207;
  long long v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  _OWORD *v213;
  long long v214;
  long long v215;
  long long v216;
  long long v217;
  long long v218;
  long long v219;
  long long v220;
  long long v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  long long v228;
  long long v229;
  long long v230;
  long long v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  long long v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  long long v246;
  uint64_t v247;
  uint64_t v248;
  int64_t v249;
  char v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  long long v267;
  long long v268;
  long long v269;
  uint64_t v270;
  long long v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char v279;
  uint64_t v280;
  uint64_t v281;
  char v282;
  unint64_t v283;
  char v284;
  long long v285;
  uint64_t v286;
  long long v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  int64_t v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  void *v298;
  uint64_t v299;
  int64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  int64_t v307;
  uint64_t v308;
  int64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  int64_t v317;
  uint64_t *v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  long long v323;
  long long v324;
  long long v325;
  long long v326;
  long long v327;
  long long v328;
  long long v329;
  long long v330;
  long long v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  long long v340;
  long long v341;
  long long v342;
  long long v343;
  long long v344;
  long long v345;
  long long v346;
  long long v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  long long v356;
  long long v357;
  long long v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  long long v362;
  long long v363;
  long long v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  int64_t v372;
  int64_t v373;
  int64_t v374;
  int v375;
  int v376;
  uint64_t v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  _OWORD *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  long long v402;
  uint64_t v403;
  long long v404;
  char v405;
  uint64_t v406;
  uint64_t v407;
  long long v408;
  uint64_t v409;
  long long v410;
  long long v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  int64_t v415;
  long long v416;
  long long v417;
  long long v418;
  long long v419;
  long long v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  long long v429;
  long long v430;
  long long v431;
  uint64_t v432;
  uint64_t v433;
  long long v434;
  long long v435;
  long long v436;
  long long v437;
  long long v438;
  long long v439;
  long long v440;
  char v441[48];
  long long v442;
  long long v443;
  uint64_t v444;
  char v445[48];
  unint64_t v446[4];
  uint64_t v447;
  uint64_t v448[4];
  uint64_t v449;
  char v450[48];
  long long v451;
  long long v452;
  long long v453;
  long long v454;
  long long v455;
  long long v456;
  char v457[48];
  char v458[48];
  char v459[48];
  char v460[48];
  char v461[48];
  char v462[48];
  char v463[48];
  char v464[48];
  char v465[48];
  long long v466;
  long long v467;
  long long v468;
  long long v469;
  long long v470;
  long long v471;
  _OWORD v472[2];
  long long v473;
  _OWORD v474[2];
  long long v475;
  _OWORD v476[2];
  long long v477;
  _OWORD v478[2];
  long long v479;
  long long v480;
  long long v481;
  long long v482;
  void v483[3];
  long long v484;
  long long v485;
  long long v486;
  long long v487;
  long long v488;
  long long v489;
  _OWORD v490[2];
  long long v491;
  _OWORD v492[2];
  long long v493;
  _OWORD v494[2];
  long long v495;
  _OWORD v496[2];
  long long v497;
  _OWORD v498[2];
  long long v499;
  long long v500;
  long long v501;
  long long v502;
  long long v503;
  long long v504;
  long long v505;
  long long v506;
  long long v507;
  long long v508;
  long long v509;
  long long v510;
  long long v511;
  long long v512;
  long long v513;
  _OWORD v514[2];
  long long v515;
  _OWORD v516[2];
  long long v517;
  _OWORD v518[2];
  uint64_t v519;
  _OWORD v520[2];
  long long v521;
  _OWORD v522[2];
  long long v523;
  long long v524;
  long long v525;
  long long v526;
  long long v527[3];
  unsigned char v528[40];
  long long v529[3];
  unsigned char v530[40];
  long long v531[3];
  unsigned char v532[40];
  long long v533[3];
  unsigned char v534[40];
  long long v535[3];
  unsigned char v536[40];
  long long v537[3];
  unsigned char v538[40];
  long long v539[3];
  unsigned char v540[40];
  long long v541[3];
  unsigned char v542[40];
  long long v543[3];
  unsigned char v544[40];
  long long v545[3];
  unsigned char v546[40];
  long long v547;
  long long v548;
  long long v549;
  unsigned char v550[40];
  long long v551;
  long long v552;
  long long v553;
  unsigned char v554[40];
  unsigned char v555[40];
  unsigned char v556[40];
  long long v557;
  long long v558;
  long long v559;
  long long v560[3];
  unsigned char v561[56];

  MEMORY[0x1F4188790](a1);
  uint64_t v4 = v1;
  uint64_t v6 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v2 = (uint64_t)v6;
    uint64_t v7 = *(void **)v1;
    long long v8 = *(_OWORD *)(*(void *)v1 + 16);
    long long v9 = *(_OWORD *)(*(void *)v1 + 32);
    uint64_t v526 = *(_OWORD *)(*(void *)v1 + 48);
    long long v525 = v9;
    uint64_t v524 = v8;
    uint64_t v10 = v7[8];
    uint64_t v11 = v7[9];
    uint64_t v12 = v7[10];
    uint64_t v13 = v7[11];
    type metadata accessor for AttributedString.Guts();
    long long v14 = swift_allocObject();
    outlined retain of Locale((uint64_t)&v524);
    swift_unknownObjectRetain();
    uint64_t v15 = BigString.isEmpty.getter();
    if (v10)
    {
      int v16 = swift_unknownObjectRetain_n();
      specialized Rope._endPath.getter(v16);
      swift_unknownObjectRelease_n();
      if ((((v12 == 0) ^ v15) & 1) == 0)
      {
LABEL_4:
        uint64_t v17 = v525;
        *(_OWORD *)(v14 + 16) = v524;
        *(_OWORD *)(v14 + 32) = v17;
        *(_OWORD *)(v14 + 48) = v526;
        *(void *)(v14 + 64) = v10;
        *(void *)(v14 + 72) = v11;
        *(void *)(v14 + 80) = v12;
        *(void *)(v14 + 88) = v13;
        *(void *)uint64_t v4 = v14;
        swift_release();
        uint64_t v6 = (uint64_t *)v2;
        goto LABEL_5;
      }
    }
    else
    {
      swift_unknownObjectRetain();
      specialized Rope._endPath.getter(0);
      swift_unknownObjectRelease_n();
      if (v15) {
        goto LABEL_4;
      }
    }
    __break(1u);
    goto LABEL_65;
  }
LABEL_5:
  int v18 = *(void *)v4;
  uint64_t v19 = *(_OWORD *)(*(void *)v4 + 16);
  long long v20 = *(_OWORD *)(*(void *)v4 + 32);
  long long v523 = *(_OWORD *)(*(void *)v4 + 48);
  v522[1] = v20;
  v522[0] = v19;
  uint64_t v21 = *(_OWORD *)(v18 + 16);
  long long v22 = *(_OWORD *)(v18 + 32);
  v527[2] = v523;
  v527[1] = v22;
  v527[0] = v21;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v527, (uint64_t)v528);
  outlined retain of Locale((uint64_t)v528);
  long long v23 = BigString.isEmpty.getter();
  outlined release of Locale((uint64_t)v522);
  uint64_t v397 = v6;
  uint64_t v399 = v4;
  if (v23)
  {
    uint64_t v382 = MEMORY[0x1E4FBC868];
    goto LABEL_39;
  }
  if ((static BigString.Index.== infix(_:_:)() & 1) != 0 && BigString.Index.utf8Offset.getter() >= 1)
  {
    long long v24 = *(_OWORD *)(v18 + 16);
    long long v25 = *(_OWORD *)(v18 + 32);
    long long v521 = *(_OWORD *)(v18 + 48);
    v520[1] = v25;
    v520[0] = v24;
    char v26 = *(_OWORD *)(v18 + 16);
    uint64_t v27 = *(_OWORD *)(v18 + 32);
    v529[2] = v521;
    v529[1] = v27;
    v529[0] = v26;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v529, (uint64_t)v530);
    outlined retain of Locale((uint64_t)v530);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v520);
    BigString.UTF8View.index(before:)();
    outlined release of Locale((uint64_t)v441);
  }
  long long v28 = *(void *)(v18 + 64);
  long long v29 = *(void *)(v18 + 72);
  long long v31 = *(void *)(v18 + 80);
  long long v30 = *(void *)(v18 + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v28) {
    long long v33 = v31;
  }
  else {
    long long v33 = 0;
  }
  if (result < 0) {
    goto LABEL_398;
  }
  long long v34 = result;
  if (v33 < result) {
    goto LABEL_398;
  }
  if (v28 && result < v31 && *(_WORD *)(v28 + 16))
  {
    long long v413 = v29;
    uint64_t v4 = *(unsigned __int8 *)(v28 + 18);
    if (*(unsigned char *)(v28 + 18))
    {
      uint64_t result = swift_unknownObjectRetain_n();
      uint64_t v11 = -15;
      long long v2 = 24;
      long long v35 = v28;
      while (1)
      {
        unint64_t v38 = *(unsigned __int16 *)(v35 + 16);
        if (!*(_WORD *)(v35 + 16)) {
          goto LABEL_21;
        }
        int64_t v39 = *(void *)(v35 + 40);
        int64_t v40 = __OFSUB__(v34, v39);
        uint64_t v41 = v34 - v39;
        if (v40) {
          goto LABEL_382;
        }
        if (__OFADD__(v41, 1))
        {
LABEL_383:
          __break(1u);
LABEL_384:
          __break(1u);
LABEL_385:
          __break(1u);
LABEL_386:
          __break(1u);
LABEL_387:
          __break(1u);
LABEL_388:
          __break(1u);
LABEL_389:
          __break(1u);
LABEL_390:
          __break(1u);
LABEL_391:
          __break(1u);
LABEL_392:
          __break(1u);
LABEL_393:
          __break(1u);
LABEL_394:
          __break(1u);
LABEL_395:
          __break(1u);
LABEL_396:
          __break(1u);
LABEL_397:
          __break(1u);
LABEL_398:
          __break(1u);
LABEL_399:
          __break(1u);
LABEL_400:
          __break(1u);
LABEL_401:
          __break(1u);
LABEL_402:
          __break(1u);
LABEL_403:
          __break(1u);
LABEL_404:
          __break(1u);
LABEL_405:
          __break(1u);
LABEL_406:
          __break(1u);
LABEL_407:
          __break(1u);
LABEL_408:
          __break(1u);
          goto LABEL_409;
        }
        if (v41 + 1 >= 1) {
          break;
        }
        unint64_t v38 = 0;
LABEL_22:
        long long v36 = (4 * *(unsigned char *)(v35 + 18) + 8) & 0x3C;
        uint64_t v4 = ((-15 << v36) - 1) & v4 | (v38 << v36);
        uint64_t v37 = *(void *)(v35 + 24 + 24 * v38);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        long long v35 = v37;
        if (!*(unsigned char *)(v37 + 18)) {
          goto LABEL_317;
        }
      }
      if (v38 != 1)
      {
        uint64_t v42 = (uint64_t *)(v35 + 64);
        int64_t v43 = 1;
        while (1)
        {
          char v44 = *v42;
          v42 += 3;
          long long v34 = v41 - v44;
          if (__OFSUB__(v41, v44)) {
            goto LABEL_363;
          }
          if (__OFADD__(v34, 1)) {
            goto LABEL_364;
          }
          if (v34 + 1 < 1) {
            break;
          }
          ++v43;
          uint64_t v41 = v34;
          if (v38 == v43) {
            goto LABEL_21;
          }
        }
        unint64_t v38 = v43;
        long long v34 = v41;
        goto LABEL_22;
      }
      long long v34 = v41;
LABEL_21:
      if (v34) {
        goto LABEL_381;
      }
      goto LABEL_22;
    }
    swift_unknownObjectRetain_n();
    uint64_t v37 = v28;
LABEL_317:
    uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v34, 0, (_WORD *)(v37 + 16), (uint64_t *)(v37 + 24));
    if (result < 0) {
      goto LABEL_413;
    }
    unint64_t v359 = result;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v46 = v4 & 0xFFFFFFFFFFFFF0FFLL | (v359 << 8);
    uint64_t v47 = v413;
    goto LABEL_37;
  }
  uint64_t v45 = swift_unknownObjectRetain();
  uint64_t v46 = specialized Rope._endPath.getter(v45);
  swift_unknownObjectRelease();
  uint64_t v37 = 0;
  uint64_t v47 = v29;
  BOOL v48 = 0;
  if (v28)
  {
LABEL_37:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v30, v46, v37, v28, v47);
    swift_unknownObjectRelease_n();
    BOOL v48 = v37;
  }
  uint64_t v49 = *(void *)(v18 + 64);
  uint64_t v50 = *(void *)(v18 + 72);
  uint64_t v51 = *(void *)(v18 + 80);
  uint64_t v52 = *(void *)(v18 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v30, v46, v48, v49, v50, v51, v52);
  swift_unknownObjectRelease();
  unint64_t v53 = swift_bridgeObjectRetain();
  uint64_t v382 = specialized _NativeDictionary.filter(_:)(v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v6 = v397;
  uint64_t v4 = v399;
LABEL_39:
  uint64_t v3 = *(void *)v4;
  long long v2 = *v6;
  unint64_t v54 = BigString.Index.utf8Offset.getter();
  uint64_t result = BigString.Index.utf8Offset.getter();
  long long v413 = result;
  uint64_t v383 = v54;
  uint64_t v381 = 0;
  if (v54 == result)
  {
    long long v414 = v54;
LABEL_185:
    long long v167 = *(_OWORD *)(v3 + 16);
    long long v168 = *(_OWORD *)(v3 + 32);
    long long v515 = *(_OWORD *)(v3 + 48);
    v514[1] = v168;
    v514[0] = v167;
    long long v169 = *(_OWORD *)(v3 + 16);
    long long v170 = *(_OWORD *)(v3 + 32);
    v533[2] = v515;
    v533[1] = v170;
    v533[0] = v169;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v533, (uint64_t)v534);
    outlined retain of Locale((uint64_t)v534);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v514);
    uint64_t v171 = BigString.UTF8View.count.getter();
    outlined release of Locale((uint64_t)v450);
    unint64_t v172 = *(_OWORD **)v4;
    uint64_t v173 = *(_OWORD *)(v4 + 24);
    uint64_t v510 = *(_OWORD *)(v4 + 8);
    uint64_t v511 = v173;
    uint64_t v174 = *(_OWORD *)(v4 + 56);
    uint64_t v512 = *(_OWORD *)(v4 + 40);
    uint64_t v513 = v174;
    uint64_t v175 = v172[2];
    uint64_t v507 = v172[1];
    uint64_t v508 = v175;
    uint64_t v509 = v172[3];
    v535[0] = v507;
    v535[1] = v175;
    v535[2] = v509;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v535, (uint64_t)v536);
    outlined retain of Locale((uint64_t)v536);
    BigSubstring.init(_unchecked:in:)();
    long long v176 = *(_OWORD **)v4;
    BigString.init()();
    uint64_t v177 = v452;
    v176[1] = v451;
    v176[2] = v177;
    v176[3] = v453;
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<Character>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type EmptyCollection<Character> and conformance EmptyCollection<A>, &demangling cache variable for type metadata for EmptyCollection<Character>);
    BigSubstring.replaceSubrange<A>(_:with:)();
    uint64_t v178 = *(_OWORD **)v4;
    long long v504 = v438;
    long long v505 = v439;
    uint64_t v506 = v440;
    long long v500 = v434;
    long long v501 = v435;
    long long v503 = v437;
    long long v502 = v436;
    outlined retain of Locale((uint64_t)&v500);
    BigSubstring.base.getter();
    outlined release of Locale((uint64_t)&v500);
    unint64_t v179 = v455;
    v178[1] = v454;
    v178[2] = v179;
    v178[3] = v456;
    swift_unknownObjectRelease();
    outlined retain of Locale((uint64_t)&v500);
    uint64_t v180 = BigSubstring.startIndex.getter();
    char v182 = v181;
    long long v2 = v183;
    uint64_t v185 = v184;
    outlined release of Locale((uint64_t)&v500);
    outlined retain of Locale((uint64_t)&v500);
    uint64_t v186 = BigSubstring.endIndex.getter();
    uint64_t v188 = v187;
    uint64_t v190 = v189;
    uint64_t v191 = (uint64_t *)v4;
    uint64_t v193 = v192;
    outlined release of Locale((uint64_t)&v500);
    v191[1] = v180;
    v191[2] = v182;
    v191[3] = v2;
    v191[4] = v185;
    v191[5] = v186;
    v191[6] = v188;
    v191[7] = v190;
    v191[8] = v193;
    unint64_t v194 = BigString.Index.utf8Offset.getter();
    uint64_t v195 = BigString.Index.utf8Offset.getter();
    uint64_t v196 = *v191;
    char v197 = *(_OWORD *)(*v191 + 16);
    uint64_t v198 = *(_OWORD *)(*v191 + 32);
    long long v499 = *(_OWORD *)(*v191 + 48);
    v498[1] = v198;
    v498[0] = v197;
    uint64_t v199 = *(_OWORD *)(v196 + 16);
    uint64_t v200 = *(_OWORD *)(v196 + 32);
    v537[2] = v499;
    v537[1] = v200;
    v537[0] = v199;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v537, (uint64_t)v538);
    outlined retain of Locale((uint64_t)v538);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v498);
    Swift::Int_optional v201 = BigString.UTF8View.count.getter();
    uint64_t result = outlined release of Locale((uint64_t)v457);
    uint64_t v202 = v201 - v171;
    if (__OFSUB__(v201, v171)) {
      goto LABEL_389;
    }
    unint64_t v203 = v195 - v194;
    if (__OFSUB__(v195, v194)) {
      goto LABEL_390;
    }
    long long v2 = v203 + v202;
    if (__OFADD__(v203, v202)) {
      goto LABEL_391;
    }
    swift_bridgeObjectRetain();
    unint64_t v204 = MEMORY[0x1E4FBC870];
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v194, v195, v2, v382, v204);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v2 = *v191;
    uint64_t v205 = *(_OWORD *)(*v191 + 16);
    uint64_t v206 = *(_OWORD *)(*v191 + 32);
    uint64_t v497 = *(_OWORD *)(*v191 + 48);
    v496[1] = v206;
    v496[0] = v205;
    uint64_t v207 = *(_OWORD *)(v2 + 16);
    uint64_t v208 = *(_OWORD *)(v2 + 32);
    v539[2] = v497;
    v539[1] = v208;
    v539[0] = v207;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v539, (uint64_t)v540);
    outlined retain of Locale((uint64_t)v540);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v496);
    uint64_t v209 = BigString.UTF8View.count.getter();
    uint64_t result = outlined release of Locale((uint64_t)v458);
    Swift::Int_optional v210 = v209 - v171;
    if (__OFSUB__(v209, v171)) {
      goto LABEL_392;
    }
    if (__OFADD__(v414, v210)) {
      goto LABEL_393;
    }
    if (v414 + v210 < v383) {
      goto LABEL_394;
    }
    uint64_t v211 = *(void *)(v2 + 80);
    if (!*(void *)(v2 + 64))
    {
      uint64_t v258 = swift_unknownObjectRetain();
      specialized Rope._endPath.getter(v258);
      swift_unknownObjectRelease();
      goto LABEL_229;
    }
    uint64_t v380 = v414 + v210;
    uint64_t v384 = v2;
    long long v212 = swift_unknownObjectRetain_n();
    specialized Rope._endPath.getter(v212);
    swift_unknownObjectRelease_n();
    if (!v211) {
      goto LABEL_229;
    }
    long long v213 = (_OWORD *)(v2 + 16);
    long long v214 = *(_OWORD *)(v2 + 16);
    long long v215 = *(_OWORD *)(v2 + 32);
    uint64_t v495 = *(_OWORD *)(v2 + 48);
    v494[1] = v215;
    v494[0] = v214;
    uint64_t v216 = *(_OWORD *)(v2 + 16);
    unint64_t v217 = *(_OWORD *)(v2 + 32);
    v541[2] = v495;
    v541[1] = v217;
    v541[0] = v216;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v541, (uint64_t)v542);
    outlined retain of Locale((uint64_t)v542);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v494);
    long long v218 = *(_OWORD *)(v2 + 16);
    Swift::Int_optional v219 = *(_OWORD *)(v2 + 32);
    v493 = *(_OWORD *)(v2 + 48);
    v492[1] = v219;
    v492[0] = v218;
    long long v220 = *(_OWORD *)(v2 + 16);
    long long v221 = *(_OWORD *)(v2 + 32);
    v543[2] = v493;
    v543[1] = v221;
    v543[0] = v220;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v543, (uint64_t)v544);
    outlined retain of Locale((uint64_t)v544);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v492);
    long long v2 = BigString.UTF8View.index(_:offsetBy:)();
    long long v223 = v222;
    long long v225 = v224;
    uint64_t v227 = v226;
    outlined release of Locale((uint64_t)v459);
    uint64_t v228 = *(_OWORD *)(v384 + 16);
    uint64_t v229 = *(_OWORD *)(v384 + 32);
    long long v491 = *(_OWORD *)(v384 + 48);
    v490[1] = v229;
    v490[0] = v228;
    uint64_t v230 = *(_OWORD *)(v384 + 16);
    uint64_t v231 = *(_OWORD *)(v384 + 32);
    v545[2] = v491;
    v545[1] = v231;
    v545[0] = v230;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v545, (uint64_t)v546);
    outlined retain of Locale((uint64_t)v546);
    BigString.utf8.getter();
    uint64_t result = outlined release of Locale((uint64_t)v490);
    if (__OFSUB__(v380, v383)) {
      goto LABEL_406;
    }
    uint64_t v232 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v234 = v233;
    uint64_t v236 = v235;
    uint64_t v238 = v237;
    outlined release of Locale((uint64_t)v460);
    specialized Range.init(uncheckedBounds:)(v2, v223, v225, v227, v232, v234, v236, v238, v483);
    *(void *)&long long v551 = MEMORY[0x1E4FBC868];
    long long v239 = v213[1];
    v487 = *v213;
    v488 = v239;
    v489 = v213[2];
    BigString.unicodeScalars.getter();
    uint64_t v379 = v483[2];
    long long v240 = BigString.UnicodeScalarView.index(roundingDown:)();
    uint64_t v242 = v241;
    long long v244 = v243;
    long long v2 = v245;
    outlined release of Locale((uint64_t)v461);
    long long v246 = v213[1];
    long long v484 = *v213;
    long long v485 = v246;
    long long v486 = v213[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingUp:)();
    outlined release of Locale((uint64_t)v462);
    *(void *)&long long v557 = v240;
    *((void *)&v557 + 1) = v242;
    *(void *)&long long v558 = v244;
    *((void *)&v558 + 1) = v2;
    long long v30 = BigString.Index.utf8Offset.getter();
    uint64_t result = BigString.Index.utf8Offset.getter();
    long long v413 = result;
    if (result < v30) {
      goto LABEL_407;
    }
    long long v31 = *(void *)(v384 + 64);
    if (v31) {
      long long v247 = *(void *)(v384 + 80);
    }
    else {
      long long v247 = 0;
    }
    if (v30 < 0 || v247 < v30) {
      goto LABEL_408;
    }
    long long v34 = *(void *)(v384 + 72);
    uint64_t v11 = *(void *)(v384 + 88);
    int64_t v385 = v213;
    if (!v31 || !*(_WORD *)(v31 + 16) || v30 >= *(void *)(v384 + 80))
    {
      swift_retain_n();
      uint64_t v259 = swift_unknownObjectRetain_n();
      uint64_t v260 = specialized Rope._endPath.getter(v259);
      swift_unknownObjectRelease();
      long long v2 = 0;
      uint64_t v248 = 0;
      if (!v31) {
        goto LABEL_368;
      }
      goto LABEL_231;
    }
    uint64_t v4 = *(unsigned __int8 *)(v31 + 18);
    if (!*(unsigned char *)(v31 + 18))
    {
      swift_unknownObjectRetain_n();
      uint64_t result = swift_retain_n();
      uint64_t v248 = v30;
      long long v2 = v31;
LABEL_323:
      uint64_t v103 = *(unsigned __int16 *)(v2 + 16);
      if (!*(_WORD *)(v2 + 16)) {
        goto LABEL_329;
      }
      unint64_t v361 = *(void *)(v2 + 24);
      uint64_t v60 = v248 - v361;
      if (__OFSUB__(v248, v361)) {
        goto LABEL_419;
      }
      if (__OFADD__(v60, 1)) {
        goto LABEL_420;
      }
      if (v60 + 1 <= 0)
      {
        uint64_t v103 = 0;
      }
      else
      {
        if (v103 != 1) {
          goto LABEL_347;
        }
        v248 -= v361;
LABEL_329:
        if (v248)
        {
          __break(1u);
LABEL_331:
          if (v11 < v380) {
            goto LABEL_332;
          }
LABEL_334:
          LOBYTE(v34) = 0;
          goto LABEL_335;
        }
      }
      goto LABEL_367;
    }
    swift_unknownObjectRetain_n();
    uint64_t result = swift_retain_n();
    uint64_t v248 = v30;
    uint64_t v249 = v31;
    while (1)
    {
      uint64_t v251 = *(unsigned __int16 *)(v249 + 16);
      if (!*(_WORD *)(v249 + 16)) {
        goto LABEL_206;
      }
      uint64_t v252 = *(void *)(v249 + 40);
      uint64_t v253 = v248 - v252;
      if (__OFSUB__(v248, v252)) {
        goto LABEL_386;
      }
      if (__OFADD__(v253, 1)) {
        goto LABEL_387;
      }
      if (v253 + 1 <= 0)
      {
        uint64_t v251 = 0;
      }
      else
      {
        if (v251 == 1)
        {
          v248 -= v252;
          goto LABEL_206;
        }
        long long v254 = *(void *)(v249 + 64);
        int64_t v40 = __OFSUB__(v253, v254);
        long long v255 = v253 - v254;
        if (v40) {
          goto LABEL_404;
        }
        if (__OFADD__(v255, 1)) {
          goto LABEL_405;
        }
        if (v255 + 1 < 1)
        {
          uint64_t v251 = 1;
          uint64_t v248 = v253;
        }
        else
        {
          if (v251 == 2)
          {
            uint64_t v248 = v255;
LABEL_206:
            if (v248) {
              goto LABEL_385;
            }
            goto LABEL_207;
          }
          long long v256 = (void *)(v249 + 88);
          long long v257 = 2;
          while (1)
          {
            if (v251 == v257) {
              goto LABEL_378;
            }
            uint64_t v248 = v255 - *v256;
            if (__OFSUB__(v255, *v256)) {
              goto LABEL_379;
            }
            if (__OFADD__(v248, 1)) {
              goto LABEL_380;
            }
            if (v248 + 1 < 1) {
              break;
            }
            ++v257;
            v256 += 3;
            long long v255 = v248;
            if (v251 == v257) {
              goto LABEL_206;
            }
          }
          uint64_t v251 = v257;
          uint64_t v248 = v255;
        }
      }
LABEL_207:
      uint64_t v250 = (4 * *(unsigned char *)(v249 + 18) + 8) & 0x3C;
      uint64_t v4 = ((-15 << v250) - 1) & v4 | (v251 << v250);
      long long v2 = *(void *)(v249 + 24 + 24 * v251);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v249 = v2;
      if (!*(unsigned char *)(v2 + 18)) {
        goto LABEL_323;
      }
    }
  }
  int64_t v422 = v54;
  uint64_t v15 = *(void *)(v3 + 64);
  long long v31 = *(void *)(v3 + 80);
  if (v15) {
    uint64_t v55 = *(void *)(v3 + 80);
  }
  else {
    uint64_t v55 = 0;
  }
  if (v54 < 0 || v55 < v54) {
    goto LABEL_399;
  }
  long long v407 = *(void *)(v3 + 72);
  uint64_t v11 = *(void *)(v3 + 88);
  if (!v15)
  {
LABEL_66:
    uint64_t v64 = swift_unknownObjectRetain();
    unint64_t v65 = v407;
    uint64_t v66 = specialized Rope._endPath.getter(v64);
    swift_unknownObjectRelease();
    uint64_t v4 = 0;
    uint64_t v67 = 0;
    if (!v15) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  if (!*(_WORD *)(v15 + 16) || v54 >= v31)
  {
LABEL_65:
    swift_unknownObjectRetain();
    goto LABEL_66;
  }
  long long v30 = *(unsigned __int8 *)(v15 + 18);
  if (*(unsigned char *)(v15 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    long long v2 = -15;
    long long v34 = 24;
    uint64_t v56 = v383;
    uint64_t v57 = v15;
    while (1)
    {
      uint64_t v58 = *(unsigned __int16 *)(v57 + 16);
      if (*(_WORD *)(v57 + 16))
      {
        uint64_t v60 = 0;
        uint64_t v61 = (uint64_t *)(v57 + 40);
        while (1)
        {
          uint64_t v62 = *v61;
          v61 += 3;
          uint64_t v63 = v56 - v62;
          if (__OFSUB__(v56, v62))
          {
            __break(1u);
LABEL_353:
            __break(1u);
            goto LABEL_354;
          }
          if (__OFADD__(v63, 1)) {
            goto LABEL_353;
          }
          if (v63 + 1 < 1) {
            break;
          }
          ++v60;
          uint64_t v56 = v63;
          if (v58 == v60) {
            goto LABEL_61;
          }
        }
        uint64_t v58 = v60;
      }
      else
      {
        uint64_t v63 = v56;
LABEL_61:
        if (v63) {
          goto LABEL_384;
        }
        uint64_t v56 = 0;
      }
      uint64_t v59 = (4 * *(unsigned char *)(v57 + 18) + 8) & 0x3C;
      long long v30 = ((-15 << v59) - 1) & v30 | (v58 << v59);
      uint64_t v4 = *(void *)(v57 + 24 + 24 * v58);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v57 = v4;
      if (!*(unsigned char *)(v4 + 18)) {
        goto LABEL_320;
      }
    }
  }
  swift_unknownObjectRetain_n();
  uint64_t v56 = v383;
  uint64_t v4 = v15;
LABEL_320:
  uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v56, 0, (_WORD *)(v4 + 16), (uint64_t *)(v4 + 24));
  if (result < 0) {
    goto LABEL_415;
  }
  unint64_t v360 = result;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v66 = v30 & 0xFFFFFFFFFFFFF0FFLL | (v360 << 8);
  unint64_t v65 = v407;
LABEL_67:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v66, v4, v15, v65);
  swift_unknownObjectRelease_n();
  uint64_t v67 = v4;
LABEL_68:
  uint64_t v68 = v11;
  uint64_t v69 = *(void *)(v3 + 64);
  long long v31 = *(void *)(v3 + 72);
  unint64_t v70 = *(void *)(v3 + 80);
  unint64_t v71 = *(void *)(v3 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v68, v66, v67, v69, v31, v70, v71);
  uint64_t v401 = v72;
  swift_unknownObjectRelease();
  uint64_t v73 = swift_bridgeObjectRetain();
  uint64_t v11 = v381;
  uint64_t v4 = specialized _NativeDictionary.filter(_:)(v73);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v74 = 0;
  *(void *)&uint64_t v434 = result;
  uint64_t v75 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v41 = -1;
  if (v75 < 64) {
    uint64_t v41 = ~(-1 << v75);
  }
  long long v30 = v4 + 64;
  long long v34 = v41 & *(void *)(v4 + 64);
  long long v2 = (unint64_t)(v75 + 63) >> 6;
  uint64_t v76 = v413;
  while (1)
  {
    if (v34)
    {
      int64_t v77 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      uint64_t v78 = v77 | (v74 << 6);
      goto LABEL_72;
    }
    unint64_t v38 = v74 + 1;
    if (__OFADD__(v74, 1))
    {
      __break(1u);
LABEL_363:
      __break(1u);
LABEL_364:
      __break(1u);
LABEL_365:
      __break(1u);
LABEL_366:
      uint64_t v103 = v41;
      uint64_t v248 = v38;
      goto LABEL_367;
    }
    if (v38 >= v2) {
      goto LABEL_92;
    }
    uint64_t v80 = *(void *)(v30 + 8 * v38);
    ++v74;
    if (!v80)
    {
      uint64_t v74 = v38 + 1;
      if (v38 + 1 >= v2) {
        goto LABEL_92;
      }
      uint64_t v80 = *(void *)(v30 + 8 * v74);
      if (!v80)
      {
        uint64_t v74 = v38 + 2;
        if (v38 + 2 >= v2) {
          goto LABEL_92;
        }
        uint64_t v80 = *(void *)(v30 + 8 * v74);
        if (!v80)
        {
          uint64_t v74 = v38 + 3;
          if (v38 + 3 >= v2) {
            goto LABEL_92;
          }
          uint64_t v80 = *(void *)(v30 + 8 * v74);
          if (!v80)
          {
            uint64_t v74 = v38 + 4;
            if (v38 + 4 >= v2) {
              goto LABEL_92;
            }
            uint64_t v80 = *(void *)(v30 + 8 * v74);
            if (!v80) {
              break;
            }
          }
        }
      }
    }
LABEL_91:
    long long v34 = (v80 - 1) & v80;
    uint64_t v78 = __clz(__rbit64(v80)) + (v74 << 6);
LABEL_72:
    uint64_t v79 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v78);
    uint64_t v11 = *v79;
    long long v31 = v79[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)((unint64_t *)&v500, v11, v31);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v81 = v38 + 5;
  if (v81 < v2)
  {
    uint64_t v80 = *(void *)(v30 + 8 * v81);
    if (!v80)
    {
      while (1)
      {
        uint64_t v74 = v81 + 1;
        if (__OFADD__(v81, 1)) {
          break;
        }
        if (v74 >= v2) {
          goto LABEL_92;
        }
        uint64_t v80 = *(void *)(v30 + 8 * v74);
        ++v81;
        if (v80) {
          goto LABEL_91;
        }
      }
LABEL_409:
      __break(1u);
      goto LABEL_410;
    }
    uint64_t v74 = v81;
    goto LABEL_91;
  }
LABEL_92:
  swift_release();
  uint64_t v82 = v434;
  *(void *)&uint64_t v416 = v434;
  if (v383)
  {
    uint64_t v83 = *(void *)(v3 + 64);
    unint64_t v84 = *(void *)(v3 + 72);
    unint64_t v85 = *(void *)(v3 + 80);
    unint64_t v86 = *(void *)(v3 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v83, v84, v85, v86, &v442);
    char v404 = v443;
    uint64_t v408 = v442;
    uint64_t v87 = v444;
    swift_unknownObjectRelease();
    int64_t v89 = v404;
    unint64_t v88 = v408;
  }
  else
  {
    uint64_t v90 = (void *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v90, 0, (unint64_t *)&v442);
    unint64_t v88 = v442;
    int64_t v89 = v443;
    uint64_t v87 = v444;
  }
  uint64_t v434 = v88;
  uint64_t v435 = v89;
  *(void *)&uint64_t v436 = v87;
  uint64_t v91 = *(void *)(v3 + 64);
  uint64_t v92 = *(void *)(v3 + 72);
  uint64_t v93 = *(void *)(v3 + 80);
  long long v2 = *(void *)(v3 + 88);
  char Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  long long v405 = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, Enum & 1, v91, v92, v93, v2, (uint64_t *)&v500);
  uint64_t v95 = v502;
  swift_unknownObjectRelease();
  if (v95 < v87 && *(void *)(v82 + 16))
  {
    int64_t v386 = v4;
    do
    {
      long long v96 = v434;
      long long v97 = v435;
      long long v98 = *(void *)(v3 + 64);
      unint64_t v99 = *(void *)(v3 + 80);
      long long v2 = *(void *)(v3 + 88);
      uint64_t v100 = swift_unknownObjectRetain();
      uint64_t result = specialized Rope._endPath.getter(v100);
      if (v98)
      {
        uint64_t result = swift_unknownObjectRelease();
        if (v87 != v99) {
          goto LABEL_122;
        }
      }
      else if (v87)
      {
LABEL_122:
        uint64_t v111 = *(void *)(v3 + 64);
        int64_t v112 = *(void *)(v3 + 72);
        long long v2 = *(void *)(v3 + 80);
        uint64_t v113 = *(void *)(v3 + 88);
        long long v500 = v96;
        *(void *)&long long v501 = v97;
        char v114 = *((void *)&v97 + 1) - 1;
        if (__OFSUB__(*((void *)&v97 + 1), 1)) {
          goto LABEL_395;
        }
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v500, v111, v112, v2, v113);
        uint64_t v115 = *((void *)&v500 + 1);
        long long v31 = v501;
        uint64_t v409 = v500;
        uint64_t v116 = specialized Rope.subscript.getter(v500, *((unint64_t *)&v500 + 1), v501, v111, v112, v2, v113);
        long long v2 = v117;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v118 = v87 - v116;
        if (__OFSUB__(v87, v116)) {
          goto LABEL_396;
        }
        uint64_t v102 = v383;
        uint64_t v76 = v413;
        uint64_t v4 = v386;
        goto LABEL_148;
      }
      uint64_t v101 = *(void *)(v3 + 64);
      long long v31 = *(void *)(v3 + 72);
      long long v34 = *(void *)(v3 + 80);
      uint64_t v409 = *(void *)(v3 + 88);
      int64_t v385 = (_OWORD *)v31;
      if (v101)
      {
        uint64_t v102 = v383;
        uint64_t v4 = v386;
        if (v34 < v383) {
          goto LABEL_400;
        }
        if (*(_WORD *)(v101 + 16))
        {
          uint64_t v103 = *(unsigned __int8 *)(v101 + 18);
          if (*(unsigned char *)(v101 + 18))
          {
            uint64_t result = swift_unknownObjectRetain_n();
            long long v2 = v383;
            uint64_t v11 = v101;
            long long v30 = -15;
            while (1)
            {
              long long v105 = *(unsigned __int16 *)(v11 + 16);
              if (!*(_WORD *)(v11 + 16)) {
                goto LABEL_425;
              }
              uint64_t v106 = *(void *)(v11 + 40);
              int64_t v40 = __OFSUB__(v2, v106);
              uint64_t v107 = v2 - v106;
              if (v40) {
                goto LABEL_373;
              }
              if (v107 <= 0)
              {
                uint64_t v60 = 0;
              }
              else
              {
                if (v105 == 1) {
                  goto LABEL_427;
                }
                uint64_t v108 = *(void *)(v11 + 64);
                long long v2 = v107 - v108;
                if (__OFSUB__(v107, v108)) {
                  goto LABEL_377;
                }
                if (v2 >= 1)
                {
                  if (v105 == 2) {
                    goto LABEL_427;
                  }
                  unint64_t v109 = (void *)(v11 + 88);
                  uint64_t v60 = 2;
                  while (v105 != v60)
                  {
                    uint64_t v110 = v2 - *v109;
                    if (__OFSUB__(v2, *v109)) {
                      goto LABEL_346;
                    }
                    if (v110 < 1) {
                      goto LABEL_106;
                    }
                    ++v60;
                    v109 += 3;
                    long long v2 = v110;
                    if (v105 == v60) {
                      goto LABEL_427;
                    }
                  }
                  __break(1u);
LABEL_346:
                  __break(1u);
LABEL_347:
                  long long v377 = *(void *)(v2 + 48);
                  int64_t v40 = __OFSUB__(v60, v377);
                  unint64_t v38 = v60 - v377;
                  if (v40) {
                    goto LABEL_423;
                  }
                  if (__OFADD__(v38, 1)) {
                    goto LABEL_424;
                  }
                  if (v38 + 1 >= 1)
                  {
                    if (v103 != 2)
                    {
                      uint64_t v378 = (void *)(v2 + 72);
                      uint64_t v41 = 2;
                      while (v103 != v41)
                      {
                        uint64_t v248 = v38 - *v378;
                        if (__OFSUB__(v38, *v378)) {
                          goto LABEL_417;
                        }
                        if (__OFADD__(v248, 1)) {
                          goto LABEL_418;
                        }
                        if (v248 + 1 < 1) {
                          goto LABEL_366;
                        }
                        ++v41;
                        v378 += 3;
                        unint64_t v38 = v248;
                        if (v103 == v41) {
                          goto LABEL_329;
                        }
                      }
                      goto LABEL_416;
                    }
                    uint64_t v248 = v38;
                    goto LABEL_329;
                  }
LABEL_354:
                  uint64_t v103 = 1;
                  uint64_t v248 = v60;
LABEL_367:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  uint64_t v260 = v4 & 0xFFFFFFFFFFFFF0FFLL | (v103 << 8);
                  long long v213 = v385;
                  if (!v31)
                  {
LABEL_368:
                    uint64_t result = swift_release();
                    uint64_t v261 = 0;
                    unint64_t v262 = v30 - v248;
                    if (!__OFSUB__(v30, v248))
                    {
LABEL_232:
                      *(void *)&uint64_t v429 = v384;
                      *((void *)&v429 + 1) = v30;
                      *(void *)&uint64_t v430 = v413;
                      *((void *)&v430 + 1) = v11;
                      *(void *)&uint64_t v431 = v260;
                      *((void *)&v431 + 1) = v2;
                      uint64_t v432 = v261;
                      uint64_t v433 = v262;
                      specialized IndexingIterator.next()();
                      if (!v263)
                      {
                        uint64_t v308 = MEMORY[0x1E4FBC868];
                        goto LABEL_276;
                      }
                      long long v264 = v263;
                      while (1)
                      {
                        long long v267 = *v213;
                        long long v268 = v213[1];
                        uint64_t v473 = v213[2];
                        v472[1] = v268;
                        v472[0] = v267;
                        long long v269 = *v213;
                        v560[1] = v213[1];
                        v560[2] = v473;
                        v560[0] = v269;
                        outlined init with take of any PredicateExpression<Self.Output == B1>(v560, (uint64_t)v561);
                        outlined retain of Locale((uint64_t)v561);
                        BigString.utf8.getter();
                        outlined release of Locale((uint64_t)v472);
                        long long v394 = *((void *)&v557 + 1);
                        long long v270 = v557;
                        uint64_t v271 = v558;
                        uint64_t v272 = BigString.UTF8View.index(_:offsetBy:)();
                        uint64_t v274 = v273;
                        uint64_t v276 = v275;
                        long long v278 = v277;
                        outlined release of Locale((uint64_t)v463);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        long long v279 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v264);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if (v279)
                        {
                          long long v280 = v394;
                          long long v281 = *((void *)&v271 + 1);
                          uint64_t v282 = static BigString.Index.< infix(_:_:)();
                          uint64_t v283 = v271;
                          if (v282) {
                            break;
                          }
                        }
LABEL_234:
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(&v557, v272, v274, v276, v278);
                        specialized IndexingIterator.next()();
                        long long v264 = v265;
                        long long v2 = v266;
                        if (!v265) {
                          goto LABEL_275;
                        }
                      }
                      long long v390 = v276;
                      long long v391 = v264 + 64;
                      long long v388 = v274;
                      long long v389 = v278;
                      int64_t v387 = v272;
                      while (2)
                      {
                        uint64_t v285 = v213[1];
                        long long v469 = *v213;
                        uint64_t v470 = v285;
                        long long v471 = v213[2];
                        uint64_t v286 = v283;
                        BigString.unicodeScalars.getter();
                        long long v412 = BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)v464);
                        uint64_t v287 = v213[1];
                        long long v466 = *v213;
                        long long v467 = v287;
                        uint64_t v468 = v213[2];
                        BigString.unicodeScalars.getter();
                        long long v392 = v270;
                        long long v393 = v281;
                        long long v395 = v280;
                        uint64_t v396 = v286;
                        long long v406 = BigString.UnicodeScalarView.index(after:)();
                        uint64_t v400 = v289;
                        int64_t v403 = v288;
                        uint64_t v398 = v290;
                        outlined release of Locale((uint64_t)v465);
                        uint64_t v291 = 1 << *(unsigned char *)(v264 + 32);
                        if (v291 < 64) {
                          uint64_t v292 = ~(-1 << v291);
                        }
                        else {
                          uint64_t v292 = -1;
                        }
                        uint64_t v293 = v292 & *(void *)(v264 + 64);
                        uint64_t v294 = (unint64_t)(v291 + 63) >> 6;
                        uint64_t result = swift_bridgeObjectRetain();
                        long long v2 = 0;
LABEL_244:
                        if (v293)
                        {
                          uint64_t v295 = __clz(__rbit64(v293));
                          v293 &= v293 - 1;
                          uint64_t v296 = v295 | (v2 << 6);
                          goto LABEL_246;
                        }
                        uint64_t v300 = v2 + 1;
                        if (__OFADD__(v2, 1))
                        {
                          __break(1u);
LABEL_275:
                          uint64_t v308 = v551;
LABEL_276:
                          uint64_t result = swift_release();
                          uint64_t v309 = 0;
                          unint64_t v310 = v308 + 64;
                          unint64_t v311 = 1 << *(unsigned char *)(v308 + 32);
                          unint64_t v312 = -1;
                          if (v311 < 64) {
                            unint64_t v312 = ~(-1 << v311);
                          }
                          long long v313 = v312 & *(void *)(v308 + 64);
                          uint64_t v415 = (unint64_t)(v311 + 63) >> 6;
                          while (1)
                          {
                            if (v313)
                            {
                              uint64_t v314 = __clz(__rbit64(v313));
                              v313 &= v313 - 1;
                              uint64_t v315 = v314 | (v309 << 6);
                            }
                            else
                            {
                              int64_t v40 = __OFADD__(v309++, 1);
                              if (v40) {
                                goto LABEL_374;
                              }
                              if (v309 >= v415)
                              {
LABEL_301:
                                swift_release();
                                uint64_t v4 = (uint64_t)v385;
                                if (specialized Range.isEmpty.getter())
                                {
                                  uint64_t v323 = *v385;
                                  uint64_t v324 = v385[1];
                                  long long v553 = v385[2];
                                  long long v552 = v324;
                                  long long v551 = v323;
                                  uint64_t v325 = *v385;
                                  long long v558 = v385[1];
                                  long long v559 = v553;
                                  long long v557 = v325;
                                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v557, (uint64_t)v474);
                                  outlined retain of Locale((uint64_t)v474);
                                  BigString.startIndex.getter();
                                  outlined release of Locale((uint64_t)&v551);
                                  long long v2 = v379;
                                  if (specialized static Comparable.> infix(_:_:)())
                                  {
                                    uint64_t v326 = *v385;
                                    uint64_t v327 = v385[1];
                                    long long v549 = v385[2];
                                    long long v548 = v327;
                                    long long v547 = v326;
                                    uint64_t v328 = *v385;
                                    uint64_t v430 = v385[1];
                                    uint64_t v431 = v549;
                                    uint64_t v429 = v328;
                                    outlined init with take of any PredicateExpression<Self.Output == B1>(&v429, (uint64_t)v476);
                                    outlined retain of Locale((uint64_t)v476);
                                    BigString.endIndex.getter();
                                    outlined release of Locale((uint64_t)&v547);
                                    if (static BigString.Index.< infix(_:_:)())
                                    {
                                      uint64_t result = v383 - 1;
                                      if (__OFSUB__(v383, 1)) {
                                        goto LABEL_422;
                                      }
                                      if (AttributedString.Guts._needsParagraphFixing(from:to:)(result, v383))
                                      {
                                        char v329 = *v385;
                                        uint64_t v330 = v385[1];
                                        long long v482 = v385[2];
                                        long long v481 = v330;
                                        long long v480 = v329;
                                        uint64_t v331 = *v385;
                                        uint64_t v417 = v385[1];
                                        uint64_t v418 = v482;
                                        uint64_t v416 = v331;
                                        outlined init with take of any PredicateExpression<Self.Output == B1>(&v416, (uint64_t)v478);
                                        outlined retain of Locale((uint64_t)v478);
                                        long long v332 = BigString.index(before:)();
                                        uint64_t v334 = v333;
                                        unint64_t v336 = v335;
                                        uint64_t v338 = v337;
                                        outlined release of Locale((uint64_t)&v480);
                                        AttributedString.Guts._paragraphExtending(from:)(v332, v334, v336, v338, &v422);
                                        long long v30 = Range<>._utf8OffsetRange.getter();
                                        uint64_t v11 = v339;
                                        goto LABEL_334;
                                      }
                                    }
                                  }
                                  goto LABEL_229;
                                }
                                unint64_t v340 = *v385;
                                int64_t v341 = v385[1];
                                long long v482 = v385[2];
                                long long v481 = v341;
                                long long v480 = v340;
                                unint64_t v342 = *v385;
                                unint64_t v343 = v385[1];
                                long long v549 = v482;
                                long long v548 = v343;
                                long long v547 = v342;
                                outlined init with take of any PredicateExpression<Self.Output == B1>(&v547, (uint64_t)v550);
                                outlined retain of Locale((uint64_t)v550);
                                BigString.startIndex.getter();
                                outlined release of Locale((uint64_t)&v480);
                                long long v2 = v384;
                                if ((specialized static Comparable.> infix(_:_:)() & 1) == 0) {
                                  goto LABEL_311;
                                }
                                uint64_t result = v383 - 1;
                                if (__OFSUB__(v383, 1)) {
                                  goto LABEL_421;
                                }
                                if (AttributedString.Guts._needsParagraphFixing(from:to:)(result, v383))
                                {
                                  uint64_t v344 = *v385;
                                  uint64_t v345 = v385[1];
                                  uint64_t v479 = v385[2];
                                  v478[1] = v345;
                                  v478[0] = v344;
                                  uint64_t v346 = *v385;
                                  int64_t v347 = v385[1];
                                  long long v553 = v479;
                                  long long v552 = v347;
                                  long long v551 = v346;
                                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v551, (uint64_t)v554);
                                  outlined retain of Locale((uint64_t)v554);
                                  unint64_t v348 = BigString.index(before:)();
                                  uint64_t v350 = v349;
                                  unint64_t v352 = v351;
                                  uint64_t v354 = v353;
                                  outlined release of Locale((uint64_t)v478);
                                  AttributedString.Guts._paragraphExtending(from:)(v348, v350, v352, v354, &v416);
                                  long long v30 = Range<>._utf8OffsetRange.getter();
                                  uint64_t v11 = v355;
                                  LOBYTE(v34) = 0;
                                }
                                else
                                {
LABEL_311:
                                  long long v30 = 0;
                                  uint64_t v11 = 0;
                                  LOBYTE(v34) = 1;
                                }
                                uint64_t v356 = *v385;
                                uint64_t v357 = v385[1];
                                long long v477 = v385[2];
                                v476[1] = v357;
                                v476[0] = v356;
                                unint64_t v358 = *v385;
                                long long v558 = v385[1];
                                long long v559 = v477;
                                long long v557 = v358;
                                outlined init with take of any PredicateExpression<Self.Output == B1>(&v557, (uint64_t)v555);
                                outlined retain of Locale((uint64_t)v555);
                                BigString.endIndex.getter();
                                outlined release of Locale((uint64_t)v476);
                                if (static BigString.Index.< infix(_:_:)())
                                {
                                  if ((v34 & 1) == 0) {
                                    goto LABEL_331;
                                  }
                                  if (v380 < 1)
                                  {
LABEL_229:
                                    swift_bridgeObjectRelease();
                                    swift_bridgeObjectRelease();
                                    return swift_unknownObjectRelease();
                                  }
LABEL_332:
                                  if (AttributedString.Guts._needsParagraphFixing(from:to:)(v380 - 1, v380))
                                  {
                                    uint64_t v362 = *(_OWORD *)v4;
                                    uint64_t v363 = *(_OWORD *)(v4 + 16);
                                    long long v475 = *(_OWORD *)(v4 + 32);
                                    v474[1] = v363;
                                    v474[0] = v362;
                                    unint64_t v364 = *(_OWORD *)v4;
                                    uint64_t v430 = *(_OWORD *)(v4 + 16);
                                    uint64_t v431 = v475;
                                    uint64_t v429 = v364;
                                    outlined init with take of any PredicateExpression<Self.Output == B1>(&v429, (uint64_t)v556);
                                    outlined retain of Locale((uint64_t)v556);
                                    unint64_t v365 = BigString.index(before:)();
                                    uint64_t v367 = v366;
                                    long long v369 = v368;
                                    long long v371 = v370;
                                    outlined release of Locale((uint64_t)v474);
                                    AttributedString.Guts._paragraphExtending(from:)(v365, v367, v369, v371, &v422);
                                    long long v372 = Range<>._utf8OffsetRange.getter();
                                    long long v374 = v373;
                                    long long v375 = 1;
                                    goto LABEL_336;
                                  }
                                }
LABEL_335:
                                long long v372 = 0;
                                long long v374 = 0;
                                long long v375 = 0;
LABEL_336:
                                if ((v34 & 1) == 0 && v383 < v11)
                                {
                                  uint64_t v427 = 0;
                                  uint64_t v428 = 0;
                                  AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v427, v30, v383, v11);
                                }
                                if (v380 < v374) {
                                  long long v376 = v375;
                                }
                                else {
                                  long long v376 = 0;
                                }
                                if (v376 == 1)
                                {
                                  uint64_t v427 = 0;
                                  uint64_t v428 = 0;
                                  AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v427, v372, v380, v374);
                                }
                                goto LABEL_229;
                              }
                              uint64_t v316 = *(void *)(v310 + 8 * v309);
                              if (!v316)
                              {
                                uint64_t v317 = v309 + 1;
                                if (v309 + 1 >= v415) {
                                  goto LABEL_301;
                                }
                                uint64_t v316 = *(void *)(v310 + 8 * v317);
                                if (!v316)
                                {
                                  uint64_t v317 = v309 + 2;
                                  if (v309 + 2 >= v415) {
                                    goto LABEL_301;
                                  }
                                  uint64_t v316 = *(void *)(v310 + 8 * v317);
                                  if (!v316)
                                  {
                                    uint64_t v317 = v309 + 3;
                                    if (v309 + 3 >= v415) {
                                      goto LABEL_301;
                                    }
                                    uint64_t v316 = *(void *)(v310 + 8 * v317);
                                    if (!v316)
                                    {
                                      while (1)
                                      {
                                        uint64_t v309 = v317 + 1;
                                        if (__OFADD__(v317, 1)) {
                                          goto LABEL_388;
                                        }
                                        if (v309 >= v415) {
                                          goto LABEL_301;
                                        }
                                        uint64_t v316 = *(void *)(v310 + 8 * v309);
                                        ++v317;
                                        if (v316) {
                                          goto LABEL_291;
                                        }
                                      }
                                    }
                                  }
                                }
                                uint64_t v309 = v317;
                              }
LABEL_291:
                              long long v313 = (v316 - 1) & v316;
                              uint64_t v315 = __clz(__rbit64(v316)) + (v309 << 6);
                            }
                            long long v318 = (uint64_t *)(*(void *)(v308 + 48) + 16 * v315);
                            long long v2 = *v318;
                            long long v319 = v318[1];
                            long long v320 = *(void *)(*(void *)(v308 + 56) + 8 * v315);
                            uint64_t result = specialized Array._getCount()(v320);
                            if (result)
                            {
                              uint64_t v321 = result;
                              if (result < 1) {
                                goto LABEL_371;
                              }
                              swift_bridgeObjectRetain();
                              swift_bridgeObjectRetain();
                              uint64_t v322 = (uint64_t *)(v320 + 40);
                              do
                              {
                                AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v2, v319, *(v322 - 1), *v322, 0);
                                v322 += 2;
                                --v321;
                              }
                              while (v321);
                              swift_bridgeObjectRelease();
                              uint64_t result = swift_bridgeObjectRelease();
                            }
                          }
                        }
                        if (v300 < v294)
                        {
                          unint64_t v301 = *(void *)(v391 + 8 * v300);
                          if (v301)
                          {
LABEL_250:
                            uint64_t v293 = (v301 - 1) & v301;
                            uint64_t v296 = __clz(__rbit64(v301)) + (v300 << 6);
                            long long v2 = v300;
LABEL_246:
                            long long v297 = *(void *)(v264 + 56);
                            uint64_t v298 = (void *)(*(void *)(v264 + 48) + 16 * v296);
                            uint64_t v299 = v298[1];
                            *(void *)&uint64_t v416 = *v298;
                            *((void *)&v416 + 1) = v299;
                            outlined init with copy of AttributedString._AttributeValue(v297 + 72 * v296, (uint64_t)&v417);
                            swift_bridgeObjectRetain();
LABEL_256:
                            outlined init with take of LocalePreferences?((uint64_t)&v416, (uint64_t)&v422, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
                            char v302 = v423;
                            if (!v423)
                            {
                              swift_release();
                              long long v270 = v406;
                              long long v280 = v403;
                              uint64_t v272 = v387;
                              uint64_t v274 = v388;
                              long long v278 = v389;
                              uint64_t v276 = v390;
                              uint64_t v284 = static BigString.Index.< infix(_:_:)();
                              uint64_t v283 = v400;
                              long long v281 = v398;
                              long long v213 = v385;
                              if ((v284 & 1) == 0) {
                                goto LABEL_234;
                              }
                              continue;
                            }
                            uint64_t v303 = v422;
                            uint64_t v304 = v425;
                            uint64_t v305 = v426;
                            outlined copy of AttributedString.AttributeRunBoundaries?(v425, v426);
                            outlined destroy of AttributedString._AttributeValue((uint64_t)&v424);
                            if (v305 != 1)
                            {
                              *(void *)&uint64_t v416 = v304;
                              *((void *)&v416 + 1) = v305;
                              uint64_t v306 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
                              outlined consume of AttributedString.AttributeRunBoundaries?(v304, v305);
                              if ((v306 & 0x100000000) == 0 && v412 != v306) {
                                specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(v303, v302, v392, v395, v396, v393, v406, v403, v400, v398, (uint64_t *)&v551);
                              }
                            }
                            uint64_t result = swift_bridgeObjectRelease();
                            goto LABEL_244;
                          }
                          v2 += 2;
                          if (v300 + 1 >= v294)
                          {
                            long long v2 = v300;
                          }
                          else
                          {
                            unint64_t v301 = *(void *)(v391 + 8 * v2);
                            if (v301)
                            {
                              ++v300;
                              goto LABEL_250;
                            }
                            if (v300 + 2 < v294)
                            {
                              unint64_t v301 = *(void *)(v391 + 8 * (v300 + 2));
                              if (v301)
                              {
                                v300 += 2;
                                goto LABEL_250;
                              }
                              uint64_t v307 = v300 + 3;
                              if (v300 + 3 >= v294)
                              {
                                long long v2 = v300 + 2;
                              }
                              else
                              {
                                unint64_t v301 = *(void *)(v391 + 8 * v307);
                                if (v301)
                                {
                                  v300 += 3;
                                  goto LABEL_250;
                                }
                                while (1)
                                {
                                  uint64_t v300 = v307 + 1;
                                  if (__OFADD__(v307, 1)) {
                                    goto LABEL_372;
                                  }
                                  if (v300 >= v294) {
                                    break;
                                  }
                                  unint64_t v301 = *(void *)(v391 + 8 * v300);
                                  ++v307;
                                  if (v301) {
                                    goto LABEL_250;
                                  }
                                }
                                long long v2 = v294 - 1;
                              }
                            }
                          }
                        }
                        break;
                      }
                      uint64_t v293 = 0;
                      uint64_t v421 = 0;
                      uint64_t v419 = 0u;
                      uint64_t v420 = 0u;
                      uint64_t v417 = 0u;
                      uint64_t v418 = 0u;
                      uint64_t v416 = 0u;
                      goto LABEL_256;
                    }
LABEL_370:
                    __break(1u);
LABEL_371:
                    __break(1u);
LABEL_372:
                    __break(1u);
LABEL_373:
                    __break(1u);
LABEL_374:
                    __break(1u);
LABEL_375:
                    __break(1u);
LABEL_376:
                    __break(1u);
LABEL_377:
                    __break(1u);
LABEL_378:
                    __break(1u);
LABEL_379:
                    __break(1u);
LABEL_380:
                    __break(1u);
LABEL_381:
                    __break(1u);
LABEL_382:
                    __break(1u);
                    goto LABEL_383;
                  }
LABEL_231:
                  swift_unknownObjectRetain();
                  uint64_t v261 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v260, v2, v31, v34);
                  swift_release();
                  uint64_t result = swift_unknownObjectRelease_n();
                  unint64_t v262 = v30 - v248;
                  if (!__OFSUB__(v30, v248)) {
                    goto LABEL_232;
                  }
                  goto LABEL_370;
                }
                long long v2 = v107;
                uint64_t v60 = 1;
              }
LABEL_106:
              uint64_t v104 = (4 * *(unsigned char *)(v11 + 18) + 8) & 0x3C;
              uint64_t v103 = ((-15 << v104) - 1) & v103 | (v60 << v104);
              long long v31 = *(void *)(v11 + 24 + 24 * v60);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              uint64_t v11 = v31;
              if (!*(unsigned char *)(v31 + 18)) {
                goto LABEL_131;
              }
            }
          }
          uint64_t result = swift_unknownObjectRetain_n();
          long long v2 = v383;
          long long v31 = v101;
LABEL_131:
          uint64_t v119 = *(unsigned __int16 *)(v31 + 16);
          if (!*(_WORD *)(v31 + 16)) {
            goto LABEL_428;
          }
          Swift::Int v120 = *(void *)(v31 + 24);
          int64_t v40 = __OFSUB__(v2, v120);
          uint64_t v121 = v2 - v120;
          if (v40) {
            goto LABEL_412;
          }
          if (v121 <= 0)
          {
            uint64_t v124 = 0;
          }
          else
          {
            if (v119 == 1) {
              goto LABEL_430;
            }
            uint64_t v122 = *(void *)(v31 + 48);
            long long v2 = v121 - v122;
            if (__OFSUB__(v121, v122)) {
              goto LABEL_414;
            }
            if (v2 >= 1)
            {
              if (v119 == 2) {
                goto LABEL_430;
              }
              uint64_t v123 = (void *)(v31 + 72);
              uint64_t v124 = 2;
              while (v119 != v124)
              {
                uint64_t v125 = v2 - *v123;
                if (__OFSUB__(v2, *v123)) {
                  goto LABEL_376;
                }
                if (v125 < 1) {
                  goto LABEL_146;
                }
                ++v124;
                v123 += 3;
                long long v2 = v125;
                if (v119 == v124) {
                  goto LABEL_430;
                }
              }
              goto LABEL_375;
            }
            long long v2 = v121;
            uint64_t v124 = 1;
          }
LABEL_146:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v115 = v103 & 0xFFFFFFFFFFFFF0FFLL | (v124 << 8);
          uint64_t v102 = v383;
LABEL_127:
          swift_unknownObjectRetain();
          char v114 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v409, v115, v31, v101, (uint64_t)v385);
          uint64_t result = swift_unknownObjectRelease_n();
          uint64_t v118 = v102 - v2;
          if (__OFSUB__(v102, v2)) {
            goto LABEL_397;
          }
          goto LABEL_148;
        }
      }
      else
      {
        uint64_t v102 = v383;
        uint64_t v4 = v386;
        if (v383 > 0) {
          goto LABEL_411;
        }
      }
      swift_unknownObjectRetain_n();
      uint64_t v115 = specialized Rope._endPath.getter(v101);
      swift_unknownObjectRelease();
      long long v31 = 0;
      long long v2 = 0;
      if (v101) {
        goto LABEL_127;
      }
      char v114 = 0;
      uint64_t v118 = v102;
LABEL_148:
      *(void *)&uint64_t v434 = v409;
      *((void *)&v434 + 1) = v115;
      *(void *)&uint64_t v435 = v31;
      *((void *)&v435 + 1) = v114;
      *(void *)&uint64_t v436 = v118;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v434, 0, v102, (void *)v3, (uint64_t *)&v416, v4, v401, (uint64_t)&v422);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v87 = v436;
      uint64_t v126 = *(void *)(v3 + 64);
      uint64_t v127 = *(void *)(v3 + 72);
      unint64_t v128 = *(void *)(v3 + 80);
      long long v2 = *(void *)(v3 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, v405 & 1, v126, v127, v128, v2, (uint64_t *)&v500);
      unint64_t v129 = v502;
      swift_unknownObjectRelease();
    }
    while (v129 < v87 && *(void *)(v416 + 16));
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)&uint64_t v434 = v76;
  if (__OFSUB__(v76, 1)) {
    goto LABEL_401;
  }
  uint64_t v130 = *(void *)(v3 + 64);
  uint64_t v131 = *(void *)(v3 + 72);
  uint64_t v132 = *(void *)(v3 + 80);
  uint64_t v133 = *(void *)(v3 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v76 - 1, v405 & 1, v130, v131, v132, v133, (uint64_t *)&v500);
  uint64_t v410 = v500;
  uint64_t v402 = v501;
  uint64_t v134 = v502;
  swift_unknownObjectRelease();
  v518[0] = v410;
  v518[1] = v402;
  long long v519 = v134;
  uint64_t v135 = *(void *)(v3 + 64);
  uint64_t v136 = *(void *)(v3 + 72);
  int64_t v137 = *(void *)(v3 + 80);
  uint64_t v138 = *(void *)(v3 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v518, v135, v136, v137, v138);
  long long v2 = v139;
  swift_unknownObjectRelease();
  uint64_t v11 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)((uint64_t (*)(uint64_t, uint64_t, long long *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:), 0, v2);
  long long v31 = v140;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v141 = 0;
  *(void *)&uint64_t v416 = result;
  uint64_t v142 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v41 = -1;
  if (v142 < 64) {
    uint64_t v41 = ~(-1 << v142);
  }
  long long v30 = v11 + 64;
  uint64_t v4 = v41 & *(void *)(v11 + 64);
  long long v34 = (unint64_t)(v142 + 63) >> 6;
  while (1)
  {
    if (v4)
    {
      uint64_t v143 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      uint64_t v144 = v143 | (v141 << 6);
      goto LABEL_155;
    }
    unint64_t v38 = v141 + 1;
    if (__OFADD__(v141, 1)) {
      goto LABEL_365;
    }
    if (v38 >= v34)
    {
LABEL_175:
      swift_release();
      uint64_t v149 = *(_OWORD *)(v3 + 16);
      uint64_t v150 = *(_OWORD *)(v3 + 32);
      long long v517 = *(_OWORD *)(v3 + 48);
      v516[1] = v150;
      v516[0] = v149;
      uint64_t v151 = *(_OWORD *)(v3 + 16);
      uint64_t v152 = *(_OWORD *)(v3 + 32);
      _OWORD v531[2] = v517;
      v531[1] = v152;
      v531[0] = v151;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v531, (uint64_t)v532);
      outlined retain of Locale((uint64_t)v532);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v516);
      uint64_t v153 = BigString.UTF8View.count.getter();
      uint64_t result = outlined release of Locale((uint64_t)v445);
      if (v153 < v413) {
        goto LABEL_402;
      }
      long long v2 = *(void *)(v3 + 64);
      uint64_t v154 = *(void *)(v3 + 72);
      uint64_t v155 = *(void *)(v3 + 80);
      uint64_t v156 = *(void *)(v3 + 88);
      swift_unknownObjectRetain();
      swift_retain();
      int64_t v157 = v156;
      uint64_t v158 = v413;
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v413, v405 & 1, v2, v154, v155, v157, (uint64_t *)&v500);
      uint64_t v411 = v500;
      int64_t v159 = v501;
      unint64_t v160 = v502;
      swift_unknownObjectRelease();
      long long v500 = v411;
      long long v501 = v159;
      *(void *)&long long v502 = v160;
      if (v413 != v153) {
        goto LABEL_180;
      }
LABEL_181:
      AttributedString._InternalRunsSlice.startIndex.getter((void *)v3, v158, v446);
      for (uint64_t i = &v447; v160 < *i && *(void *)(v416 + 16); uint64_t i = &v449)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v500, v158, v153, (void *)v3, (uint64_t *)&v416, v11, v31, (uint64_t)&v434);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        $defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)((void *)v3, v158, v153, (uint64_t *)&v500);
        unint64_t v160 = v502;
        if (v158 == v153) {
          goto LABEL_181;
        }
LABEL_180:
        long long v2 = *(void *)(v3 + 64);
        unint64_t v161 = *(void *)(v3 + 72);
        uint64_t v162 = *(void *)(v3 + 80);
        unint64_t v163 = *(void *)(v3 + 88);
        unint64_t v164 = swift_unknownObjectRetain();
        unint64_t v165 = v163;
        uint64_t v158 = v413;
        AttributedString._InternalRuns.endIndex.getter(v164, v161, v162, v165, v448);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      if ((uint64_t)v434 < v422) {
        goto LABEL_403;
      }
      long long v414 = v434;
      uint64_t v383 = v422;
      uint64_t v4 = v399;
      goto LABEL_185;
    }
    uint64_t v147 = *(void *)(v30 + 8 * v38);
    ++v141;
    if (!v147)
    {
      uint64_t v141 = v38 + 1;
      if (v38 + 1 >= v34) {
        goto LABEL_175;
      }
      uint64_t v147 = *(void *)(v30 + 8 * v141);
      if (!v147)
      {
        uint64_t v141 = v38 + 2;
        if (v38 + 2 >= v34) {
          goto LABEL_175;
        }
        uint64_t v147 = *(void *)(v30 + 8 * v141);
        if (!v147)
        {
          uint64_t v141 = v38 + 3;
          if (v38 + 3 >= v34) {
            goto LABEL_175;
          }
          uint64_t v147 = *(void *)(v30 + 8 * v141);
          if (!v147)
          {
            uint64_t v141 = v38 + 4;
            if (v38 + 4 >= v34) {
              goto LABEL_175;
            }
            uint64_t v147 = *(void *)(v30 + 8 * v141);
            if (!v147) {
              break;
            }
          }
        }
      }
    }
LABEL_174:
    uint64_t v4 = (v147 - 1) & v147;
    uint64_t v144 = __clz(__rbit64(v147)) + (v141 << 6);
LABEL_155:
    unint64_t v145 = (uint64_t *)(*(void *)(v11 + 48) + 16 * v144);
    long long v2 = *v145;
    uint64_t v146 = v145[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)((unint64_t *)&v500, v2, v146);
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v148 = v38 + 5;
  if (v148 >= v34) {
    goto LABEL_175;
  }
  uint64_t v147 = *(void *)(v30 + 8 * v148);
  if (v147)
  {
    uint64_t v141 = v148;
    goto LABEL_174;
  }
  while (1)
  {
    uint64_t v141 = v148 + 1;
    if (__OFADD__(v148, 1)) {
      break;
    }
    if (v141 >= v34) {
      goto LABEL_175;
    }
    uint64_t v147 = *(void *)(v30 + 8 * v141);
    ++v148;
    if (v147) {
      goto LABEL_174;
    }
  }
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
LABEL_425:
  if (!v2) {
    __break(1u);
  }
LABEL_427:
  __break(1u);
LABEL_428:
  if (!v2) {
    __break(1u);
  }
LABEL_430:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  void *v10;
  long long v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  long long v20;
  uint64_t v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  char v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t result;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  long long v91;
  long long v92;
  void *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char Enum;
  uint64_t v98;
  long long v99;
  long long v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  long long v152;
  long long v153;
  long long v154;
  long long v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  long long v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *i;
  long long v170;
  long long v171;
  long long v172;
  long long v173;
  uint64_t v174;
  _OWORD *v175;
  long long v176;
  long long v177;
  long long v178;
  _OWORD *v179;
  long long v180;
  _OWORD *v181;
  long long v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  long long v200;
  long long v201;
  long long v202;
  long long v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  long long v208;
  long long v209;
  long long v210;
  long long v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  _OWORD *v216;
  long long v217;
  long long v218;
  long long v219;
  long long v220;
  long long v221;
  long long v222;
  long long v223;
  long long v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  long long v231;
  long long v232;
  long long v233;
  long long v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  long long v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  long long v249;
  uint64_t v250;
  uint64_t v251;
  int64_t v252;
  char v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  long long v270;
  long long v271;
  long long v272;
  uint64_t v273;
  long long v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char v282;
  uint64_t v283;
  uint64_t v284;
  char v285;
  unint64_t v286;
  char v287;
  long long v288;
  uint64_t v289;
  long long v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  int64_t v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  void *v301;
  uint64_t v302;
  int64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  int64_t v310;
  uint64_t v311;
  int64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  int64_t v320;
  uint64_t *v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  long long v326;
  long long v327;
  long long v328;
  long long v329;
  long long v330;
  long long v331;
  long long v332;
  long long v333;
  long long v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  long long v343;
  long long v344;
  long long v345;
  long long v346;
  long long v347;
  long long v348;
  long long v349;
  long long v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  long long v359;
  long long v360;
  long long v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  long long v365;
  long long v366;
  long long v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int64_t v375;
  int64_t v376;
  int64_t v377;
  int v378;
  int v379;
  uint64_t v380;
  void *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  _OWORD *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  long long v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  long long v406;
  uint64_t v407;
  long long v408;
  char v409;
  uint64_t v410;
  uint64_t v411;
  long long v412;
  uint64_t v413;
  long long v414;
  long long v415;
  int v416;
  uint64_t v417;
  uint64_t v418;
  int64_t v419;
  long long v420;
  long long v421;
  long long v422;
  long long v423;
  long long v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  long long v433;
  long long v434;
  long long v435;
  uint64_t v436;
  uint64_t v437;
  long long v438;
  long long v439;
  long long v440;
  long long v441;
  long long v442;
  long long v443;
  long long v444;
  char v445[48];
  long long v446;
  long long v447;
  uint64_t v448;
  char v449[48];
  unint64_t v450[4];
  uint64_t v451;
  uint64_t v452[4];
  uint64_t v453;
  char v454[48];
  long long v455;
  long long v456;
  long long v457;
  long long v458;
  long long v459;
  long long v460;
  char v461[48];
  char v462[48];
  char v463[48];
  char v464[48];
  char v465[48];
  char v466[48];
  char v467[48];
  char v468[48];
  char v469[48];
  long long v470;
  long long v471;
  long long v472;
  long long v473;
  long long v474;
  long long v475;
  _OWORD v476[2];
  long long v477;
  _OWORD v478[2];
  long long v479;
  _OWORD v480[2];
  long long v481;
  _OWORD v482[2];
  long long v483;
  long long v484;
  long long v485;
  long long v486;
  void v487[3];
  long long v488;
  long long v489;
  long long v490;
  long long v491;
  long long v492;
  long long v493;
  _OWORD v494[2];
  long long v495;
  _OWORD v496[2];
  long long v497;
  _OWORD v498[2];
  long long v499;
  _OWORD v500[2];
  long long v501;
  _OWORD v502[2];
  long long v503;
  long long v504;
  long long v505;
  long long v506;
  long long v507;
  long long v508;
  long long v509;
  long long v510;
  long long v511;
  long long v512;
  long long v513;
  long long v514;
  long long v515;
  long long v516;
  long long v517;
  _OWORD v518[2];
  long long v519;
  _OWORD v520[2];
  long long v521;
  _OWORD v522[2];
  uint64_t v523;
  _OWORD v524[2];
  long long v525;
  _OWORD v526[2];
  long long v527;
  long long v528;
  long long v529;
  long long v530;
  long long v531[3];
  unsigned char v532[40];
  long long v533[3];
  unsigned char v534[40];
  long long v535[3];
  unsigned char v536[40];
  long long v537[3];
  unsigned char v538[40];
  long long v539[3];
  unsigned char v540[40];
  long long v541[3];
  unsigned char v542[40];
  long long v543[3];
  unsigned char v544[40];
  long long v545[3];
  unsigned char v546[40];
  long long v547[3];
  unsigned char v548[40];
  long long v549[3];
  unsigned char v550[40];
  long long v551;
  long long v552;
  long long v553;
  unsigned char v554[40];
  long long v555;
  long long v556;
  long long v557;
  unsigned char v558[40];
  unsigned char v559[40];
  unsigned char v560[40];
  long long v561;
  long long v562;
  long long v563;
  long long v564[3];
  unsigned char v565[56];

  MEMORY[0x1F4188790](a1);
  uint64_t v3 = v1;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  long long v9 = v8;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v2 = (uint64_t)v9;
    uint64_t v10 = *(void **)v1;
    uint64_t v11 = *(_OWORD *)(*(void *)v1 + 16);
    uint64_t v12 = *(_OWORD *)(*(void *)v1 + 32);
    long long v530 = *(_OWORD *)(*(void *)v1 + 48);
    long long v529 = v12;
    long long v528 = v11;
    uint64_t v13 = v10[8];
    long long v14 = v10[9];
    uint64_t v15 = v10[10];
    int v16 = v10[11];
    type metadata accessor for AttributedString.Guts();
    uint64_t v17 = swift_allocObject();
    outlined retain of Locale((uint64_t)&v528);
    swift_unknownObjectRetain();
    int v18 = BigString.isEmpty.getter();
    if (v13)
    {
      uint64_t v19 = swift_unknownObjectRetain_n();
      specialized Rope._endPath.getter(v19);
      swift_unknownObjectRelease_n();
      if ((((v15 == 0) ^ v18) & 1) == 0)
      {
LABEL_4:
        long long v20 = v529;
        *(_OWORD *)(v17 + 16) = v528;
        *(_OWORD *)(v17 + 32) = v20;
        *(_OWORD *)(v17 + 48) = v530;
        *(void *)(v17 + 64) = v13;
        *(void *)(v17 + 72) = v14;
        *(void *)(v17 + 80) = v15;
        *(void *)(v17 + 88) = v16;
        *(void *)uint64_t v3 = v17;
        swift_release();
        long long v9 = (uint64_t *)v2;
        goto LABEL_5;
      }
    }
    else
    {
      swift_unknownObjectRetain();
      specialized Rope._endPath.getter(0);
      swift_unknownObjectRelease_n();
      if (v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
    goto LABEL_65;
  }
LABEL_5:
  *(void *)&uint64_t v402 = v7;
  *((void *)&v402 + 1) = v5;
  uint64_t v21 = *(void *)v3;
  long long v22 = *(_OWORD *)(*(void *)v3 + 16);
  long long v23 = *(_OWORD *)(*(void *)v3 + 32);
  long long v527 = *(_OWORD *)(*(void *)v3 + 48);
  v526[1] = v23;
  v526[0] = v22;
  long long v24 = *(_OWORD *)(v21 + 16);
  long long v25 = *(_OWORD *)(v21 + 32);
  _OWORD v531[2] = v527;
  v531[1] = v25;
  v531[0] = v24;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v531, (uint64_t)v532);
  outlined retain of Locale((uint64_t)v532);
  char v26 = BigString.isEmpty.getter();
  outlined release of Locale((uint64_t)v526);
  uint64_t v397 = v9;
  uint64_t v400 = v3;
  if (v26)
  {
    int64_t v385 = MEMORY[0x1E4FBC868];
    goto LABEL_39;
  }
  if ((static BigString.Index.== infix(_:_:)() & 1) != 0 && BigString.Index.utf8Offset.getter() >= 1)
  {
    uint64_t v27 = *(_OWORD *)(v21 + 16);
    long long v28 = *(_OWORD *)(v21 + 32);
    long long v525 = *(_OWORD *)(v21 + 48);
    v524[1] = v28;
    v524[0] = v27;
    long long v29 = *(_OWORD *)(v21 + 16);
    long long v30 = *(_OWORD *)(v21 + 32);
    v533[2] = v525;
    v533[1] = v30;
    v533[0] = v29;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v533, (uint64_t)v534);
    outlined retain of Locale((uint64_t)v534);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v524);
    BigString.UTF8View.index(before:)();
    outlined release of Locale((uint64_t)v445);
  }
  long long v31 = *(void *)(v21 + 64);
  char v32 = *(void *)(v21 + 72);
  long long v34 = *(void *)(v21 + 80);
  long long v33 = *(void *)(v21 + 88);
  swift_unknownObjectRetain();
  uint64_t result = BigString.Index.utf8Offset.getter();
  if (v31) {
    long long v36 = v34;
  }
  else {
    long long v36 = 0;
  }
  if (result < 0) {
    goto LABEL_398;
  }
  uint64_t v37 = result;
  if (v36 < result) {
    goto LABEL_398;
  }
  if (v31 && result < v34 && *(_WORD *)(v31 + 16))
  {
    uint64_t v417 = v32;
    uint64_t v3 = *(unsigned __int8 *)(v31 + 18);
    if (*(unsigned char *)(v31 + 18))
    {
      uint64_t result = swift_unknownObjectRetain_n();
      long long v14 = -15;
      long long v2 = 24;
      unint64_t v38 = v31;
      while (1)
      {
        uint64_t v41 = *(unsigned __int16 *)(v38 + 16);
        if (!*(_WORD *)(v38 + 16)) {
          goto LABEL_21;
        }
        uint64_t v42 = *(void *)(v38 + 40);
        int64_t v43 = __OFSUB__(v37, v42);
        char v44 = v37 - v42;
        if (v43) {
          goto LABEL_382;
        }
        if (__OFADD__(v44, 1))
        {
LABEL_383:
          __break(1u);
LABEL_384:
          __break(1u);
LABEL_385:
          __break(1u);
LABEL_386:
          __break(1u);
LABEL_387:
          __break(1u);
LABEL_388:
          __break(1u);
LABEL_389:
          __break(1u);
LABEL_390:
          __break(1u);
LABEL_391:
          __break(1u);
LABEL_392:
          __break(1u);
LABEL_393:
          __break(1u);
LABEL_394:
          __break(1u);
LABEL_395:
          __break(1u);
LABEL_396:
          __break(1u);
LABEL_397:
          __break(1u);
LABEL_398:
          __break(1u);
LABEL_399:
          __break(1u);
LABEL_400:
          __break(1u);
LABEL_401:
          __break(1u);
LABEL_402:
          __break(1u);
LABEL_403:
          __break(1u);
LABEL_404:
          __break(1u);
LABEL_405:
          __break(1u);
LABEL_406:
          __break(1u);
LABEL_407:
          __break(1u);
LABEL_408:
          __break(1u);
          goto LABEL_409;
        }
        if (v44 + 1 >= 1) {
          break;
        }
        uint64_t v41 = 0;
LABEL_22:
        int64_t v39 = (4 * *(unsigned char *)(v38 + 18) + 8) & 0x3C;
        uint64_t v3 = ((-15 << v39) - 1) & v3 | (v41 << v39);
        int64_t v40 = *(void *)(v38 + 24 + 24 * v41);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        unint64_t v38 = v40;
        if (!*(unsigned char *)(v40 + 18)) {
          goto LABEL_317;
        }
      }
      if (v41 != 1)
      {
        uint64_t v45 = (uint64_t *)(v38 + 64);
        uint64_t v46 = 1;
        while (1)
        {
          uint64_t v47 = *v45;
          v45 += 3;
          uint64_t v37 = v44 - v47;
          if (__OFSUB__(v44, v47)) {
            goto LABEL_363;
          }
          if (__OFADD__(v37, 1)) {
            goto LABEL_364;
          }
          if (v37 + 1 < 1) {
            break;
          }
          ++v46;
          char v44 = v37;
          if (v41 == v46) {
            goto LABEL_21;
          }
        }
        uint64_t v41 = v46;
        uint64_t v37 = v44;
        goto LABEL_22;
      }
      uint64_t v37 = v44;
LABEL_21:
      if (v37) {
        goto LABEL_381;
      }
      goto LABEL_22;
    }
    swift_unknownObjectRetain_n();
    int64_t v40 = v31;
LABEL_317:
    uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v37, 0, (_WORD *)(v40 + 16), (uint64_t *)(v40 + 24));
    if (result < 0) {
      goto LABEL_413;
    }
    uint64_t v362 = result;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v49 = v3 & 0xFFFFFFFFFFFFF0FFLL | (v362 << 8);
    uint64_t v50 = v417;
    goto LABEL_37;
  }
  BOOL v48 = swift_unknownObjectRetain();
  uint64_t v49 = specialized Rope._endPath.getter(v48);
  swift_unknownObjectRelease();
  int64_t v40 = 0;
  uint64_t v50 = v32;
  uint64_t v51 = 0;
  if (v31)
  {
LABEL_37:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v33, v49, v40, v31, v50);
    swift_unknownObjectRelease_n();
    uint64_t v51 = v40;
  }
  uint64_t v52 = *(void *)(v21 + 64);
  unint64_t v53 = *(void *)(v21 + 72);
  unint64_t v54 = *(void *)(v21 + 80);
  uint64_t v55 = *(void *)(v21 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v33, v49, v51, v52, v53, v54, v55);
  swift_unknownObjectRelease();
  uint64_t v56 = swift_bridgeObjectRetain();
  int64_t v385 = specialized _NativeDictionary.filter(_:)(v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  long long v9 = v397;
  uint64_t v3 = v400;
LABEL_39:
  uint64_t v7 = *(void *)v3;
  long long v2 = *v9;
  uint64_t v57 = BigString.Index.utf8Offset.getter();
  long long v389 = (_OWORD *)v9[7];
  uint64_t result = BigString.Index.utf8Offset.getter();
  uint64_t v417 = result;
  int64_t v386 = v57;
  uint64_t v384 = 0;
  if (v57 == result)
  {
    uint64_t v418 = v57;
LABEL_185:
    long long v170 = *(_OWORD *)(v7 + 16);
    uint64_t v171 = *(_OWORD *)(v7 + 32);
    long long v519 = *(_OWORD *)(v7 + 48);
    v518[1] = v171;
    v518[0] = v170;
    unint64_t v172 = *(_OWORD *)(v7 + 16);
    uint64_t v173 = *(_OWORD *)(v7 + 32);
    v537[2] = v519;
    v537[1] = v173;
    v537[0] = v172;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v537, (uint64_t)v538);
    outlined retain of Locale((uint64_t)v538);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v518);
    uint64_t v174 = BigString.UTF8View.count.getter();
    outlined release of Locale((uint64_t)v454);
    uint64_t v175 = *(_OWORD **)v3;
    long long v176 = *(_OWORD *)(v3 + 24);
    long long v514 = *(_OWORD *)(v3 + 8);
    long long v515 = v176;
    uint64_t v177 = *(_OWORD *)(v3 + 56);
    long long v516 = *(_OWORD *)(v3 + 40);
    long long v517 = v177;
    uint64_t v178 = v175[2];
    uint64_t v511 = v175[1];
    uint64_t v512 = v178;
    uint64_t v513 = v175[3];
    v539[0] = v511;
    v539[1] = v178;
    v539[2] = v513;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v539, (uint64_t)v540);
    outlined retain of Locale((uint64_t)v540);
    BigSubstring.init(_unchecked:in:)();
    unint64_t v179 = *(_OWORD **)v3;
    BigString.init()();
    uint64_t v180 = v456;
    v179[1] = v455;
    v179[2] = v180;
    v179[3] = v457;
    swift_unknownObjectRelease();
    long long v504 = v402;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<Character>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type CollectionOfOne<Character> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<Character>);
    BigSubstring.replaceSubrange<A>(_:with:)();
    uint64_t v181 = *(_OWORD **)v3;
    uint64_t v508 = v442;
    uint64_t v509 = v443;
    uint64_t v510 = v444;
    long long v504 = v438;
    long long v505 = v439;
    uint64_t v507 = v441;
    uint64_t v506 = v440;
    outlined retain of Locale((uint64_t)&v504);
    BigSubstring.base.getter();
    outlined release of Locale((uint64_t)&v504);
    char v182 = v459;
    v181[1] = v458;
    v181[2] = v182;
    v181[3] = v460;
    swift_unknownObjectRelease();
    outlined retain of Locale((uint64_t)&v504);
    uint64_t v183 = BigSubstring.startIndex.getter();
    uint64_t v185 = v184;
    long long v2 = v186;
    uint64_t v188 = v187;
    outlined release of Locale((uint64_t)&v504);
    outlined retain of Locale((uint64_t)&v504);
    uint64_t v189 = BigSubstring.endIndex.getter();
    uint64_t v191 = v190;
    uint64_t v193 = v192;
    unint64_t v194 = (uint64_t *)v3;
    uint64_t v196 = v195;
    outlined release of Locale((uint64_t)&v504);
    v194[1] = v183;
    v194[2] = v185;
    v194[3] = v2;
    v194[4] = v188;
    v194[5] = v189;
    v194[6] = v191;
    v194[7] = v193;
    v194[8] = v196;
    char v197 = BigString.Index.utf8Offset.getter();
    uint64_t v198 = BigString.Index.utf8Offset.getter();
    uint64_t v199 = *v194;
    uint64_t v200 = *(_OWORD *)(*v194 + 16);
    Swift::Int_optional v201 = *(_OWORD *)(*v194 + 32);
    long long v503 = *(_OWORD *)(*v194 + 48);
    v502[1] = v201;
    v502[0] = v200;
    uint64_t v202 = *(_OWORD *)(v199 + 16);
    unint64_t v203 = *(_OWORD *)(v199 + 32);
    v541[2] = v503;
    v541[1] = v203;
    v541[0] = v202;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v541, (uint64_t)v542);
    outlined retain of Locale((uint64_t)v542);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v502);
    unint64_t v204 = BigString.UTF8View.count.getter();
    uint64_t result = outlined release of Locale((uint64_t)v461);
    uint64_t v205 = v204 - v174;
    if (__OFSUB__(v204, v174)) {
      goto LABEL_389;
    }
    uint64_t v206 = v198 - v197;
    if (__OFSUB__(v198, v197)) {
      goto LABEL_390;
    }
    long long v2 = v206 + v205;
    if (__OFADD__(v206, v205)) {
      goto LABEL_391;
    }
    swift_bridgeObjectRetain();
    uint64_t v207 = MEMORY[0x1E4FBC870];
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v197, v198, v2, v385, v207);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v2 = *v194;
    uint64_t v208 = *(_OWORD *)(*v194 + 16);
    uint64_t v209 = *(_OWORD *)(*v194 + 32);
    long long v501 = *(_OWORD *)(*v194 + 48);
    v500[1] = v209;
    v500[0] = v208;
    Swift::Int_optional v210 = *(_OWORD *)(v2 + 16);
    uint64_t v211 = *(_OWORD *)(v2 + 32);
    v543[2] = v501;
    v543[1] = v211;
    v543[0] = v210;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v543, (uint64_t)v544);
    outlined retain of Locale((uint64_t)v544);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v500);
    long long v212 = BigString.UTF8View.count.getter();
    uint64_t result = outlined release of Locale((uint64_t)v462);
    long long v213 = v212 - v174;
    if (__OFSUB__(v212, v174)) {
      goto LABEL_392;
    }
    if (__OFADD__(v418, v213)) {
      goto LABEL_393;
    }
    if (v418 + v213 < v386) {
      goto LABEL_394;
    }
    long long v214 = *(void *)(v2 + 80);
    if (!*(void *)(v2 + 64))
    {
      uint64_t v261 = swift_unknownObjectRetain();
      specialized Rope._endPath.getter(v261);
      swift_unknownObjectRelease();
      goto LABEL_229;
    }
    uint64_t v383 = v418 + v213;
    int64_t v387 = v2;
    long long v215 = swift_unknownObjectRetain_n();
    specialized Rope._endPath.getter(v215);
    swift_unknownObjectRelease_n();
    if (!v214) {
      goto LABEL_229;
    }
    uint64_t v216 = (_OWORD *)(v2 + 16);
    unint64_t v217 = *(_OWORD *)(v2 + 16);
    long long v218 = *(_OWORD *)(v2 + 32);
    long long v499 = *(_OWORD *)(v2 + 48);
    v498[1] = v218;
    v498[0] = v217;
    Swift::Int_optional v219 = *(_OWORD *)(v2 + 16);
    long long v220 = *(_OWORD *)(v2 + 32);
    v545[2] = v499;
    v545[1] = v220;
    v545[0] = v219;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v545, (uint64_t)v546);
    outlined retain of Locale((uint64_t)v546);
    BigString.utf8.getter();
    outlined release of Locale((uint64_t)v498);
    long long v221 = *(_OWORD *)(v2 + 16);
    long long v222 = *(_OWORD *)(v2 + 32);
    uint64_t v497 = *(_OWORD *)(v2 + 48);
    v496[1] = v222;
    v496[0] = v221;
    long long v223 = *(_OWORD *)(v2 + 16);
    uint64_t v224 = *(_OWORD *)(v2 + 32);
    v547[2] = v497;
    v547[1] = v224;
    v547[0] = v223;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v547, (uint64_t)v548);
    outlined retain of Locale((uint64_t)v548);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v496);
    long long v2 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v226 = v225;
    uint64_t v228 = v227;
    uint64_t v230 = v229;
    outlined release of Locale((uint64_t)v463);
    uint64_t v231 = *(_OWORD *)(v387 + 16);
    uint64_t v232 = *(_OWORD *)(v387 + 32);
    uint64_t v495 = *(_OWORD *)(v387 + 48);
    v494[1] = v232;
    v494[0] = v231;
    uint64_t v233 = *(_OWORD *)(v387 + 16);
    uint64_t v234 = *(_OWORD *)(v387 + 32);
    v549[2] = v495;
    v549[1] = v234;
    v549[0] = v233;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v549, (uint64_t)v550);
    outlined retain of Locale((uint64_t)v550);
    BigString.utf8.getter();
    uint64_t result = outlined release of Locale((uint64_t)v494);
    if (__OFSUB__(v383, v386)) {
      goto LABEL_406;
    }
    uint64_t v235 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v237 = v236;
    long long v239 = v238;
    uint64_t v241 = v240;
    outlined release of Locale((uint64_t)v464);
    specialized Range.init(uncheckedBounds:)(v2, v226, v228, v230, v235, v237, v239, v241, v487);
    *(void *)&long long v555 = MEMORY[0x1E4FBC868];
    uint64_t v242 = v216[1];
    long long v491 = *v216;
    uint64_t v492 = v242;
    v493 = v216[2];
    BigString.unicodeScalars.getter();
    uint64_t v382 = v487[2];
    unint64_t v243 = BigString.UnicodeScalarView.index(roundingDown:)();
    long long v245 = v244;
    long long v247 = v246;
    long long v2 = v248;
    outlined release of Locale((uint64_t)v465);
    uint64_t v249 = v216[1];
    v488 = *v216;
    v489 = v249;
    long long v490 = v216[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingUp:)();
    outlined release of Locale((uint64_t)v466);
    *(void *)&long long v561 = v243;
    *((void *)&v561 + 1) = v245;
    *(void *)&long long v562 = v247;
    *((void *)&v562 + 1) = v2;
    long long v33 = BigString.Index.utf8Offset.getter();
    uint64_t result = BigString.Index.utf8Offset.getter();
    uint64_t v417 = result;
    if (result < v33) {
      goto LABEL_407;
    }
    long long v34 = *(void *)(v387 + 64);
    if (v34) {
      uint64_t v250 = *(void *)(v387 + 80);
    }
    else {
      uint64_t v250 = 0;
    }
    if (v33 < 0 || v250 < v33) {
      goto LABEL_408;
    }
    uint64_t v37 = *(void *)(v387 + 72);
    long long v14 = *(void *)(v387 + 88);
    long long v389 = v216;
    if (!v34 || !*(_WORD *)(v34 + 16) || v33 >= *(void *)(v387 + 80))
    {
      swift_retain_n();
      unint64_t v262 = swift_unknownObjectRetain_n();
      long long v263 = specialized Rope._endPath.getter(v262);
      swift_unknownObjectRelease();
      long long v2 = 0;
      uint64_t v251 = 0;
      if (!v34) {
        goto LABEL_368;
      }
      goto LABEL_231;
    }
    uint64_t v3 = *(unsigned __int8 *)(v34 + 18);
    if (!*(unsigned char *)(v34 + 18))
    {
      swift_unknownObjectRetain_n();
      uint64_t result = swift_retain_n();
      uint64_t v251 = v33;
      long long v2 = v34;
LABEL_323:
      uint64_t v106 = *(unsigned __int16 *)(v2 + 16);
      if (!*(_WORD *)(v2 + 16)) {
        goto LABEL_329;
      }
      unint64_t v364 = *(void *)(v2 + 24);
      uint64_t v63 = v251 - v364;
      if (__OFSUB__(v251, v364)) {
        goto LABEL_419;
      }
      if (__OFADD__(v63, 1)) {
        goto LABEL_420;
      }
      if (v63 + 1 <= 0)
      {
        uint64_t v106 = 0;
      }
      else
      {
        if (v106 != 1) {
          goto LABEL_347;
        }
        v251 -= v364;
LABEL_329:
        if (v251)
        {
          __break(1u);
LABEL_331:
          if (v14 < v383) {
            goto LABEL_332;
          }
LABEL_334:
          LOBYTE(v37) = 0;
          goto LABEL_335;
        }
      }
      goto LABEL_367;
    }
    swift_unknownObjectRetain_n();
    uint64_t result = swift_retain_n();
    uint64_t v251 = v33;
    uint64_t v252 = v34;
    while (1)
    {
      long long v254 = *(unsigned __int16 *)(v252 + 16);
      if (!*(_WORD *)(v252 + 16)) {
        goto LABEL_206;
      }
      long long v255 = *(void *)(v252 + 40);
      long long v256 = v251 - v255;
      if (__OFSUB__(v251, v255)) {
        goto LABEL_386;
      }
      if (__OFADD__(v256, 1)) {
        goto LABEL_387;
      }
      if (v256 + 1 <= 0)
      {
        long long v254 = 0;
      }
      else
      {
        if (v254 == 1)
        {
          v251 -= v255;
          goto LABEL_206;
        }
        long long v257 = *(void *)(v252 + 64);
        int64_t v43 = __OFSUB__(v256, v257);
        uint64_t v258 = v256 - v257;
        if (v43) {
          goto LABEL_404;
        }
        if (__OFADD__(v258, 1)) {
          goto LABEL_405;
        }
        if (v258 + 1 < 1)
        {
          long long v254 = 1;
          uint64_t v251 = v256;
        }
        else
        {
          if (v254 == 2)
          {
            uint64_t v251 = v258;
LABEL_206:
            if (v251) {
              goto LABEL_385;
            }
            goto LABEL_207;
          }
          uint64_t v259 = (void *)(v252 + 88);
          uint64_t v260 = 2;
          while (1)
          {
            if (v254 == v260) {
              goto LABEL_378;
            }
            uint64_t v251 = v258 - *v259;
            if (__OFSUB__(v258, *v259)) {
              goto LABEL_379;
            }
            if (__OFADD__(v251, 1)) {
              goto LABEL_380;
            }
            if (v251 + 1 < 1) {
              break;
            }
            ++v260;
            v259 += 3;
            uint64_t v258 = v251;
            if (v254 == v260) {
              goto LABEL_206;
            }
          }
          long long v254 = v260;
          uint64_t v251 = v258;
        }
      }
LABEL_207:
      uint64_t v253 = (4 * *(unsigned char *)(v252 + 18) + 8) & 0x3C;
      uint64_t v3 = ((-15 << v253) - 1) & v3 | (v254 << v253);
      long long v2 = *(void *)(v252 + 24 + 24 * v254);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v252 = v2;
      if (!*(unsigned char *)(v2 + 18)) {
        goto LABEL_323;
      }
    }
  }
  int v426 = v57;
  int v18 = *(void *)(v7 + 64);
  long long v34 = *(void *)(v7 + 80);
  if (v18) {
    uint64_t v58 = *(void *)(v7 + 80);
  }
  else {
    uint64_t v58 = 0;
  }
  if (v57 < 0 || v58 < v57) {
    goto LABEL_399;
  }
  uint64_t v411 = *(void *)(v7 + 72);
  long long v14 = *(void *)(v7 + 88);
  if (!v18)
  {
LABEL_66:
    uint64_t v67 = swift_unknownObjectRetain();
    uint64_t v68 = v411;
    uint64_t v69 = specialized Rope._endPath.getter(v67);
    swift_unknownObjectRelease();
    uint64_t v3 = 0;
    unint64_t v70 = 0;
    if (!v18) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  if (!*(_WORD *)(v18 + 16) || v57 >= v34)
  {
LABEL_65:
    swift_unknownObjectRetain();
    goto LABEL_66;
  }
  long long v33 = *(unsigned __int8 *)(v18 + 18);
  if (*(unsigned char *)(v18 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    long long v2 = -15;
    uint64_t v37 = 24;
    uint64_t v59 = v386;
    uint64_t v60 = v18;
    while (1)
    {
      uint64_t v61 = *(unsigned __int16 *)(v60 + 16);
      if (*(_WORD *)(v60 + 16))
      {
        uint64_t v63 = 0;
        uint64_t v64 = (uint64_t *)(v60 + 40);
        while (1)
        {
          unint64_t v65 = *v64;
          v64 += 3;
          uint64_t v66 = v59 - v65;
          if (__OFSUB__(v59, v65))
          {
            __break(1u);
LABEL_353:
            __break(1u);
            goto LABEL_354;
          }
          if (__OFADD__(v66, 1)) {
            goto LABEL_353;
          }
          if (v66 + 1 < 1) {
            break;
          }
          ++v63;
          uint64_t v59 = v66;
          if (v61 == v63) {
            goto LABEL_61;
          }
        }
        uint64_t v61 = v63;
      }
      else
      {
        uint64_t v66 = v59;
LABEL_61:
        if (v66) {
          goto LABEL_384;
        }
        uint64_t v59 = 0;
      }
      uint64_t v62 = (4 * *(unsigned char *)(v60 + 18) + 8) & 0x3C;
      long long v33 = ((-15 << v62) - 1) & v33 | (v61 << v62);
      uint64_t v3 = *(void *)(v60 + 24 + 24 * v61);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v60 = v3;
      if (!*(unsigned char *)(v3 + 18)) {
        goto LABEL_320;
      }
    }
  }
  swift_unknownObjectRetain_n();
  uint64_t v59 = v386;
  uint64_t v3 = v18;
LABEL_320:
  uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v59, 0, (_WORD *)(v3 + 16), (uint64_t *)(v3 + 24));
  if (result < 0) {
    goto LABEL_415;
  }
  uint64_t v363 = result;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v69 = v33 & 0xFFFFFFFFFFFFF0FFLL | (v363 << 8);
  uint64_t v68 = v411;
LABEL_67:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v14, v69, v3, v18, v68);
  swift_unknownObjectRelease_n();
  unint64_t v70 = v3;
LABEL_68:
  unint64_t v71 = v14;
  uint64_t v72 = *(void *)(v7 + 64);
  long long v34 = *(void *)(v7 + 72);
  uint64_t v73 = *(void *)(v7 + 80);
  uint64_t v74 = *(void *)(v7 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v71, v69, v70, v72, v34, v73, v74);
  long long v405 = v75;
  swift_unknownObjectRelease();
  uint64_t v76 = swift_bridgeObjectRetain();
  long long v14 = v384;
  uint64_t v3 = specialized _NativeDictionary.filter(_:)(v76);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v77 = 0;
  *(void *)&uint64_t v438 = result;
  uint64_t v78 = 1 << *(unsigned char *)(v3 + 32);
  char v44 = -1;
  if (v78 < 64) {
    char v44 = ~(-1 << v78);
  }
  long long v33 = v3 + 64;
  uint64_t v37 = v44 & *(void *)(v3 + 64);
  long long v2 = (unint64_t)(v78 + 63) >> 6;
  uint64_t v79 = v417;
  while (1)
  {
    if (v37)
    {
      uint64_t v80 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      int64_t v81 = v80 | (v77 << 6);
      goto LABEL_72;
    }
    uint64_t v41 = v77 + 1;
    if (__OFADD__(v77, 1))
    {
      __break(1u);
LABEL_363:
      __break(1u);
LABEL_364:
      __break(1u);
LABEL_365:
      __break(1u);
LABEL_366:
      uint64_t v106 = v44;
      uint64_t v251 = v41;
      goto LABEL_367;
    }
    if (v41 >= v2) {
      goto LABEL_92;
    }
    uint64_t v83 = *(void *)(v33 + 8 * v41);
    ++v77;
    if (!v83)
    {
      int64_t v77 = v41 + 1;
      if (v41 + 1 >= v2) {
        goto LABEL_92;
      }
      uint64_t v83 = *(void *)(v33 + 8 * v77);
      if (!v83)
      {
        int64_t v77 = v41 + 2;
        if (v41 + 2 >= v2) {
          goto LABEL_92;
        }
        uint64_t v83 = *(void *)(v33 + 8 * v77);
        if (!v83)
        {
          int64_t v77 = v41 + 3;
          if (v41 + 3 >= v2) {
            goto LABEL_92;
          }
          uint64_t v83 = *(void *)(v33 + 8 * v77);
          if (!v83)
          {
            int64_t v77 = v41 + 4;
            if (v41 + 4 >= v2) {
              goto LABEL_92;
            }
            uint64_t v83 = *(void *)(v33 + 8 * v77);
            if (!v83) {
              break;
            }
          }
        }
      }
    }
LABEL_91:
    uint64_t v37 = (v83 - 1) & v83;
    int64_t v81 = __clz(__rbit64(v83)) + (v77 << 6);
LABEL_72:
    uint64_t v82 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v81);
    long long v14 = *v82;
    long long v34 = v82[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)((unint64_t *)&v504, v14, v34);
    uint64_t result = swift_bridgeObjectRelease();
  }
  unint64_t v84 = v41 + 5;
  if (v84 < v2)
  {
    uint64_t v83 = *(void *)(v33 + 8 * v84);
    if (!v83)
    {
      while (1)
      {
        int64_t v77 = v84 + 1;
        if (__OFADD__(v84, 1)) {
          break;
        }
        if (v77 >= v2) {
          goto LABEL_92;
        }
        uint64_t v83 = *(void *)(v33 + 8 * v77);
        ++v84;
        if (v83) {
          goto LABEL_91;
        }
      }
LABEL_409:
      __break(1u);
      goto LABEL_410;
    }
    int64_t v77 = v84;
    goto LABEL_91;
  }
LABEL_92:
  swift_release();
  unint64_t v85 = v438;
  *(void *)&uint64_t v420 = v438;
  if (v386)
  {
    unint64_t v86 = *(void *)(v7 + 64);
    uint64_t v87 = *(void *)(v7 + 72);
    unint64_t v88 = *(void *)(v7 + 80);
    int64_t v89 = *(void *)(v7 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v86, v87, v88, v89, &v446);
    uint64_t v408 = v447;
    long long v412 = v446;
    uint64_t v90 = v448;
    swift_unknownObjectRelease();
    uint64_t v92 = v408;
    uint64_t v91 = v412;
  }
  else
  {
    uint64_t v93 = (void *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v93, 0, (unint64_t *)&v446);
    uint64_t v91 = v446;
    uint64_t v92 = v447;
    uint64_t v90 = v448;
  }
  uint64_t v438 = v91;
  uint64_t v439 = v92;
  *(void *)&char v440 = v90;
  uint64_t v94 = *(void *)(v7 + 64);
  uint64_t v95 = *(void *)(v7 + 72);
  long long v96 = *(void *)(v7 + 80);
  long long v2 = *(void *)(v7 + 88);
  char Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  uint64_t v409 = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, Enum & 1, v94, v95, v96, v2, (uint64_t *)&v504);
  long long v98 = v506;
  swift_unknownObjectRelease();
  if (v98 < v90 && *(void *)(v85 + 16))
  {
    long long v388 = v3;
    do
    {
      unint64_t v99 = v438;
      uint64_t v100 = v439;
      uint64_t v101 = *(void *)(v7 + 64);
      uint64_t v102 = *(void *)(v7 + 80);
      long long v2 = *(void *)(v7 + 88);
      uint64_t v103 = swift_unknownObjectRetain();
      uint64_t result = specialized Rope._endPath.getter(v103);
      if (v101)
      {
        uint64_t result = swift_unknownObjectRelease();
        if (v90 != v102) {
          goto LABEL_122;
        }
      }
      else if (v90)
      {
LABEL_122:
        char v114 = *(void *)(v7 + 64);
        uint64_t v115 = *(void *)(v7 + 72);
        long long v2 = *(void *)(v7 + 80);
        uint64_t v116 = *(void *)(v7 + 88);
        long long v504 = v99;
        *(void *)&long long v505 = v100;
        uint64_t v117 = *((void *)&v100 + 1) - 1;
        if (__OFSUB__(*((void *)&v100 + 1), 1)) {
          goto LABEL_395;
        }
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v504, v114, v115, v2, v116);
        uint64_t v118 = *((void *)&v504 + 1);
        long long v34 = v505;
        long long v413 = v504;
        uint64_t v119 = specialized Rope.subscript.getter(v504, *((unint64_t *)&v504 + 1), v505, v114, v115, v2, v116);
        long long v2 = v120;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v121 = v90 - v119;
        if (__OFSUB__(v90, v119)) {
          goto LABEL_396;
        }
        long long v105 = v386;
        uint64_t v79 = v417;
        uint64_t v3 = v388;
        goto LABEL_148;
      }
      uint64_t v104 = *(void *)(v7 + 64);
      long long v34 = *(void *)(v7 + 72);
      uint64_t v37 = *(void *)(v7 + 80);
      long long v413 = *(void *)(v7 + 88);
      int64_t v387 = v34;
      if (v104)
      {
        long long v105 = v386;
        uint64_t v3 = v388;
        if (v37 < v386) {
          goto LABEL_400;
        }
        if (*(_WORD *)(v104 + 16))
        {
          uint64_t v106 = *(unsigned __int8 *)(v104 + 18);
          if (*(unsigned char *)(v104 + 18))
          {
            uint64_t result = swift_unknownObjectRetain_n();
            long long v2 = v386;
            long long v14 = v104;
            long long v33 = -15;
            while (1)
            {
              uint64_t v108 = *(unsigned __int16 *)(v14 + 16);
              if (!*(_WORD *)(v14 + 16)) {
                goto LABEL_425;
              }
              unint64_t v109 = *(void *)(v14 + 40);
              int64_t v43 = __OFSUB__(v2, v109);
              uint64_t v110 = v2 - v109;
              if (v43) {
                goto LABEL_373;
              }
              if (v110 <= 0)
              {
                uint64_t v63 = 0;
              }
              else
              {
                if (v108 == 1) {
                  goto LABEL_427;
                }
                uint64_t v111 = *(void *)(v14 + 64);
                long long v2 = v110 - v111;
                if (__OFSUB__(v110, v111)) {
                  goto LABEL_377;
                }
                if (v2 >= 1)
                {
                  if (v108 == 2) {
                    goto LABEL_427;
                  }
                  int64_t v112 = (void *)(v14 + 88);
                  uint64_t v63 = 2;
                  while (v108 != v63)
                  {
                    uint64_t v113 = v2 - *v112;
                    if (__OFSUB__(v2, *v112)) {
                      goto LABEL_346;
                    }
                    if (v113 < 1) {
                      goto LABEL_106;
                    }
                    ++v63;
                    v112 += 3;
                    long long v2 = v113;
                    if (v108 == v63) {
                      goto LABEL_427;
                    }
                  }
                  __break(1u);
LABEL_346:
                  __break(1u);
LABEL_347:
                  uint64_t v380 = *(void *)(v2 + 48);
                  int64_t v43 = __OFSUB__(v63, v380);
                  uint64_t v41 = v63 - v380;
                  if (v43) {
                    goto LABEL_423;
                  }
                  if (__OFADD__(v41, 1)) {
                    goto LABEL_424;
                  }
                  if (v41 + 1 >= 1)
                  {
                    if (v106 != 2)
                    {
                      uint64_t v381 = (void *)(v2 + 72);
                      char v44 = 2;
                      while (v106 != v44)
                      {
                        uint64_t v251 = v41 - *v381;
                        if (__OFSUB__(v41, *v381)) {
                          goto LABEL_417;
                        }
                        if (__OFADD__(v251, 1)) {
                          goto LABEL_418;
                        }
                        if (v251 + 1 < 1) {
                          goto LABEL_366;
                        }
                        ++v44;
                        v381 += 3;
                        uint64_t v41 = v251;
                        if (v106 == v44) {
                          goto LABEL_329;
                        }
                      }
                      goto LABEL_416;
                    }
                    uint64_t v251 = v41;
                    goto LABEL_329;
                  }
LABEL_354:
                  uint64_t v106 = 1;
                  uint64_t v251 = v63;
LABEL_367:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  long long v263 = v3 & 0xFFFFFFFFFFFFF0FFLL | (v106 << 8);
                  uint64_t v216 = v389;
                  if (!v34)
                  {
LABEL_368:
                    uint64_t result = swift_release();
                    long long v264 = 0;
                    long long v265 = v33 - v251;
                    if (!__OFSUB__(v33, v251))
                    {
LABEL_232:
                      *(void *)&uint64_t v433 = v387;
                      *((void *)&v433 + 1) = v33;
                      *(void *)&uint64_t v434 = v417;
                      *((void *)&v434 + 1) = v14;
                      *(void *)&uint64_t v435 = v263;
                      *((void *)&v435 + 1) = v2;
                      uint64_t v436 = v264;
                      long long v437 = v265;
                      specialized IndexingIterator.next()();
                      if (!v266)
                      {
                        unint64_t v311 = MEMORY[0x1E4FBC868];
                        goto LABEL_276;
                      }
                      long long v267 = v266;
                      while (1)
                      {
                        long long v270 = *v216;
                        uint64_t v271 = v216[1];
                        long long v477 = v216[2];
                        v476[1] = v271;
                        v476[0] = v270;
                        uint64_t v272 = *v216;
                        v564[1] = v216[1];
                        _OWORD v564[2] = v477;
                        v564[0] = v272;
                        outlined init with take of any PredicateExpression<Self.Output == B1>(v564, (uint64_t)v565);
                        outlined retain of Locale((uint64_t)v565);
                        BigString.utf8.getter();
                        outlined release of Locale((uint64_t)v476);
                        uint64_t v398 = *((void *)&v561 + 1);
                        uint64_t v273 = v561;
                        uint64_t v274 = v562;
                        uint64_t v275 = BigString.UTF8View.index(_:offsetBy:)();
                        uint64_t v277 = v276;
                        long long v279 = v278;
                        long long v281 = v280;
                        outlined release of Locale((uint64_t)v467);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        uint64_t v282 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v267);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if (v282)
                        {
                          uint64_t v283 = v398;
                          uint64_t v284 = *((void *)&v274 + 1);
                          uint64_t v285 = static BigString.Index.< infix(_:_:)();
                          uint64_t v286 = v274;
                          if (v285) {
                            break;
                          }
                        }
LABEL_234:
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(&v561, v275, v277, v279, v281);
                        specialized IndexingIterator.next()();
                        long long v267 = v268;
                        long long v2 = v269;
                        if (!v268) {
                          goto LABEL_275;
                        }
                      }
                      long long v393 = v279;
                      long long v394 = v267 + 64;
                      long long v391 = v277;
                      long long v392 = v281;
                      long long v390 = v275;
                      while (2)
                      {
                        uint64_t v288 = v216[1];
                        uint64_t v473 = *v216;
                        uint64_t v474 = v288;
                        long long v475 = v216[2];
                        long long v289 = v286;
                        BigString.unicodeScalars.getter();
                        uint64_t v416 = BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)v468);
                        uint64_t v290 = v216[1];
                        uint64_t v470 = *v216;
                        long long v471 = v290;
                        uint64_t v472 = v216[2];
                        BigString.unicodeScalars.getter();
                        long long v395 = v273;
                        uint64_t v396 = v284;
                        uint64_t v399 = v283;
                        uint64_t v401 = v289;
                        uint64_t v410 = BigString.UnicodeScalarView.index(after:)();
                        char v404 = v292;
                        long long v407 = v291;
                        int64_t v403 = v293;
                        outlined release of Locale((uint64_t)v469);
                        uint64_t v294 = 1 << *(unsigned char *)(v267 + 32);
                        if (v294 < 64) {
                          uint64_t v295 = ~(-1 << v294);
                        }
                        else {
                          uint64_t v295 = -1;
                        }
                        uint64_t v296 = v295 & *(void *)(v267 + 64);
                        long long v297 = (unint64_t)(v294 + 63) >> 6;
                        uint64_t result = swift_bridgeObjectRetain();
                        long long v2 = 0;
LABEL_244:
                        if (v296)
                        {
                          uint64_t v298 = __clz(__rbit64(v296));
                          v296 &= v296 - 1;
                          uint64_t v299 = v298 | (v2 << 6);
                          goto LABEL_246;
                        }
                        uint64_t v303 = v2 + 1;
                        if (__OFADD__(v2, 1))
                        {
                          __break(1u);
LABEL_275:
                          unint64_t v311 = v555;
LABEL_276:
                          uint64_t result = swift_release();
                          unint64_t v312 = 0;
                          long long v313 = v311 + 64;
                          uint64_t v314 = 1 << *(unsigned char *)(v311 + 32);
                          uint64_t v315 = -1;
                          if (v314 < 64) {
                            uint64_t v315 = ~(-1 << v314);
                          }
                          uint64_t v316 = v315 & *(void *)(v311 + 64);
                          uint64_t v419 = (unint64_t)(v314 + 63) >> 6;
                          while (1)
                          {
                            if (v316)
                            {
                              uint64_t v317 = __clz(__rbit64(v316));
                              v316 &= v316 - 1;
                              long long v318 = v317 | (v312 << 6);
                            }
                            else
                            {
                              int64_t v43 = __OFADD__(v312++, 1);
                              if (v43) {
                                goto LABEL_374;
                              }
                              if (v312 >= v419)
                              {
LABEL_301:
                                swift_release();
                                uint64_t v3 = (uint64_t)v389;
                                if (specialized Range.isEmpty.getter())
                                {
                                  uint64_t v326 = *v389;
                                  uint64_t v327 = v389[1];
                                  long long v557 = v389[2];
                                  long long v556 = v327;
                                  long long v555 = v326;
                                  uint64_t v328 = *v389;
                                  long long v562 = v389[1];
                                  long long v563 = v557;
                                  long long v561 = v328;
                                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v561, (uint64_t)v478);
                                  outlined retain of Locale((uint64_t)v478);
                                  BigString.startIndex.getter();
                                  outlined release of Locale((uint64_t)&v555);
                                  long long v2 = v382;
                                  if (specialized static Comparable.> infix(_:_:)())
                                  {
                                    char v329 = *v389;
                                    uint64_t v330 = v389[1];
                                    long long v553 = v389[2];
                                    long long v552 = v330;
                                    long long v551 = v329;
                                    uint64_t v331 = *v389;
                                    uint64_t v434 = v389[1];
                                    uint64_t v435 = v553;
                                    uint64_t v433 = v331;
                                    outlined init with take of any PredicateExpression<Self.Output == B1>(&v433, (uint64_t)v480);
                                    outlined retain of Locale((uint64_t)v480);
                                    BigString.endIndex.getter();
                                    outlined release of Locale((uint64_t)&v551);
                                    if (static BigString.Index.< infix(_:_:)())
                                    {
                                      uint64_t result = v386 - 1;
                                      if (__OFSUB__(v386, 1)) {
                                        goto LABEL_422;
                                      }
                                      if (AttributedString.Guts._needsParagraphFixing(from:to:)(result, v386))
                                      {
                                        long long v332 = *v389;
                                        long long v333 = v389[1];
                                        long long v486 = v389[2];
                                        long long v485 = v333;
                                        long long v484 = v332;
                                        uint64_t v334 = *v389;
                                        uint64_t v421 = v389[1];
                                        int64_t v422 = v486;
                                        uint64_t v420 = v334;
                                        outlined init with take of any PredicateExpression<Self.Output == B1>(&v420, (uint64_t)v482);
                                        outlined retain of Locale((uint64_t)v482);
                                        uint64_t v335 = BigString.index(before:)();
                                        uint64_t v337 = v336;
                                        uint64_t v339 = v338;
                                        int64_t v341 = v340;
                                        outlined release of Locale((uint64_t)&v484);
                                        AttributedString.Guts._paragraphExtending(from:)(v335, v337, v339, v341, &v426);
                                        long long v33 = Range<>._utf8OffsetRange.getter();
                                        long long v14 = v342;
                                        goto LABEL_334;
                                      }
                                    }
                                  }
                                  goto LABEL_229;
                                }
                                unint64_t v343 = *v389;
                                uint64_t v344 = v389[1];
                                long long v486 = v389[2];
                                long long v485 = v344;
                                long long v484 = v343;
                                uint64_t v345 = *v389;
                                uint64_t v346 = v389[1];
                                long long v553 = v486;
                                long long v552 = v346;
                                long long v551 = v345;
                                outlined init with take of any PredicateExpression<Self.Output == B1>(&v551, (uint64_t)v554);
                                outlined retain of Locale((uint64_t)v554);
                                BigString.startIndex.getter();
                                outlined release of Locale((uint64_t)&v484);
                                long long v2 = v387;
                                if ((specialized static Comparable.> infix(_:_:)() & 1) == 0) {
                                  goto LABEL_311;
                                }
                                uint64_t result = v386 - 1;
                                if (__OFSUB__(v386, 1)) {
                                  goto LABEL_421;
                                }
                                if (AttributedString.Guts._needsParagraphFixing(from:to:)(result, v386))
                                {
                                  int64_t v347 = *v389;
                                  unint64_t v348 = v389[1];
                                  long long v483 = v389[2];
                                  v482[1] = v348;
                                  v482[0] = v347;
                                  uint64_t v349 = *v389;
                                  uint64_t v350 = v389[1];
                                  long long v557 = v483;
                                  long long v556 = v350;
                                  long long v555 = v349;
                                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v555, (uint64_t)v558);
                                  outlined retain of Locale((uint64_t)v558);
                                  uint64_t v351 = BigString.index(before:)();
                                  int64_t v353 = v352;
                                  uint64_t v355 = v354;
                                  uint64_t v357 = v356;
                                  outlined release of Locale((uint64_t)v482);
                                  AttributedString.Guts._paragraphExtending(from:)(v351, v353, v355, v357, &v420);
                                  long long v33 = Range<>._utf8OffsetRange.getter();
                                  long long v14 = v358;
                                  LOBYTE(v37) = 0;
                                }
                                else
                                {
LABEL_311:
                                  long long v33 = 0;
                                  long long v14 = 0;
                                  LOBYTE(v37) = 1;
                                }
                                unint64_t v359 = *v389;
                                unint64_t v360 = v389[1];
                                long long v481 = v389[2];
                                v480[1] = v360;
                                v480[0] = v359;
                                unint64_t v361 = *v389;
                                long long v562 = v389[1];
                                long long v563 = v481;
                                long long v561 = v361;
                                outlined init with take of any PredicateExpression<Self.Output == B1>(&v561, (uint64_t)v559);
                                outlined retain of Locale((uint64_t)v559);
                                BigString.endIndex.getter();
                                outlined release of Locale((uint64_t)v480);
                                if (static BigString.Index.< infix(_:_:)())
                                {
                                  if ((v37 & 1) == 0) {
                                    goto LABEL_331;
                                  }
                                  if (v383 < 1)
                                  {
LABEL_229:
                                    swift_bridgeObjectRelease();
                                    swift_bridgeObjectRelease();
                                    return swift_unknownObjectRelease();
                                  }
LABEL_332:
                                  if (AttributedString.Guts._needsParagraphFixing(from:to:)(v383 - 1, v383))
                                  {
                                    unint64_t v365 = *(_OWORD *)v3;
                                    uint64_t v366 = *(_OWORD *)(v3 + 16);
                                    uint64_t v479 = *(_OWORD *)(v3 + 32);
                                    v478[1] = v366;
                                    v478[0] = v365;
                                    uint64_t v367 = *(_OWORD *)v3;
                                    uint64_t v434 = *(_OWORD *)(v3 + 16);
                                    uint64_t v435 = v479;
                                    uint64_t v433 = v367;
                                    outlined init with take of any PredicateExpression<Self.Output == B1>(&v433, (uint64_t)v560);
                                    outlined retain of Locale((uint64_t)v560);
                                    uint64_t v368 = BigString.index(before:)();
                                    long long v370 = v369;
                                    long long v372 = v371;
                                    long long v374 = v373;
                                    outlined release of Locale((uint64_t)v478);
                                    AttributedString.Guts._paragraphExtending(from:)(v368, v370, v372, v374, &v426);
                                    long long v375 = Range<>._utf8OffsetRange.getter();
                                    long long v377 = v376;
                                    uint64_t v378 = 1;
                                    goto LABEL_336;
                                  }
                                }
LABEL_335:
                                long long v375 = 0;
                                long long v377 = 0;
                                uint64_t v378 = 0;
LABEL_336:
                                if ((v37 & 1) == 0 && v386 < v14)
                                {
                                  uint64_t v431 = 0;
                                  uint64_t v432 = 0;
                                  AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v431, v33, v386, v14);
                                }
                                if (v383 < v377) {
                                  uint64_t v379 = v378;
                                }
                                else {
                                  uint64_t v379 = 0;
                                }
                                if (v379 == 1)
                                {
                                  uint64_t v431 = 0;
                                  uint64_t v432 = 0;
                                  AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v431, v375, v383, v377);
                                }
                                goto LABEL_229;
                              }
                              long long v319 = *(void *)(v313 + 8 * v312);
                              if (!v319)
                              {
                                long long v320 = v312 + 1;
                                if (v312 + 1 >= v419) {
                                  goto LABEL_301;
                                }
                                long long v319 = *(void *)(v313 + 8 * v320);
                                if (!v319)
                                {
                                  long long v320 = v312 + 2;
                                  if (v312 + 2 >= v419) {
                                    goto LABEL_301;
                                  }
                                  long long v319 = *(void *)(v313 + 8 * v320);
                                  if (!v319)
                                  {
                                    long long v320 = v312 + 3;
                                    if (v312 + 3 >= v419) {
                                      goto LABEL_301;
                                    }
                                    long long v319 = *(void *)(v313 + 8 * v320);
                                    if (!v319)
                                    {
                                      while (1)
                                      {
                                        unint64_t v312 = v320 + 1;
                                        if (__OFADD__(v320, 1)) {
                                          goto LABEL_388;
                                        }
                                        if (v312 >= v419) {
                                          goto LABEL_301;
                                        }
                                        long long v319 = *(void *)(v313 + 8 * v312);
                                        ++v320;
                                        if (v319) {
                                          goto LABEL_291;
                                        }
                                      }
                                    }
                                  }
                                }
                                unint64_t v312 = v320;
                              }
LABEL_291:
                              uint64_t v316 = (v319 - 1) & v319;
                              long long v318 = __clz(__rbit64(v319)) + (v312 << 6);
                            }
                            uint64_t v321 = (uint64_t *)(*(void *)(v311 + 48) + 16 * v318);
                            long long v2 = *v321;
                            uint64_t v322 = v321[1];
                            uint64_t v323 = *(void *)(*(void *)(v311 + 56) + 8 * v318);
                            uint64_t result = specialized Array._getCount()(v323);
                            if (result)
                            {
                              uint64_t v324 = result;
                              if (result < 1) {
                                goto LABEL_371;
                              }
                              swift_bridgeObjectRetain();
                              swift_bridgeObjectRetain();
                              uint64_t v325 = (uint64_t *)(v323 + 40);
                              do
                              {
                                AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v2, v322, *(v325 - 1), *v325, 0);
                                v325 += 2;
                                --v324;
                              }
                              while (v324);
                              swift_bridgeObjectRelease();
                              uint64_t result = swift_bridgeObjectRelease();
                            }
                          }
                        }
                        if (v303 < v297)
                        {
                          uint64_t v304 = *(void *)(v394 + 8 * v303);
                          if (v304)
                          {
LABEL_250:
                            uint64_t v296 = (v304 - 1) & v304;
                            uint64_t v299 = __clz(__rbit64(v304)) + (v303 << 6);
                            long long v2 = v303;
LABEL_246:
                            uint64_t v300 = *(void *)(v267 + 56);
                            unint64_t v301 = (void *)(*(void *)(v267 + 48) + 16 * v299);
                            char v302 = v301[1];
                            *(void *)&uint64_t v420 = *v301;
                            *((void *)&v420 + 1) = v302;
                            outlined init with copy of AttributedString._AttributeValue(v300 + 72 * v299, (uint64_t)&v421);
                            swift_bridgeObjectRetain();
LABEL_256:
                            outlined init with take of LocalePreferences?((uint64_t)&v420, (uint64_t)&v426, &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
                            uint64_t v305 = v427;
                            if (!v427)
                            {
                              swift_release();
                              uint64_t v273 = v410;
                              uint64_t v283 = v407;
                              uint64_t v275 = v390;
                              uint64_t v277 = v391;
                              long long v281 = v392;
                              long long v279 = v393;
                              uint64_t v287 = static BigString.Index.< infix(_:_:)();
                              uint64_t v286 = v404;
                              uint64_t v284 = v403;
                              uint64_t v216 = v389;
                              if ((v287 & 1) == 0) {
                                goto LABEL_234;
                              }
                              continue;
                            }
                            uint64_t v306 = v426;
                            uint64_t v307 = v429;
                            uint64_t v308 = v430;
                            outlined copy of AttributedString.AttributeRunBoundaries?(v429, v430);
                            outlined destroy of AttributedString._AttributeValue((uint64_t)&v428);
                            if (v308 != 1)
                            {
                              *(void *)&uint64_t v420 = v307;
                              *((void *)&v420 + 1) = v308;
                              uint64_t v309 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
                              outlined consume of AttributedString.AttributeRunBoundaries?(v307, v308);
                              if ((v309 & 0x100000000) == 0 && v416 != v309) {
                                specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)(v306, v305, v395, v399, v401, v396, v410, v407, v404, v403, (uint64_t *)&v555);
                              }
                            }
                            uint64_t result = swift_bridgeObjectRelease();
                            goto LABEL_244;
                          }
                          v2 += 2;
                          if (v303 + 1 >= v297)
                          {
                            long long v2 = v303;
                          }
                          else
                          {
                            uint64_t v304 = *(void *)(v394 + 8 * v2);
                            if (v304)
                            {
                              ++v303;
                              goto LABEL_250;
                            }
                            if (v303 + 2 < v297)
                            {
                              uint64_t v304 = *(void *)(v394 + 8 * (v303 + 2));
                              if (v304)
                              {
                                v303 += 2;
                                goto LABEL_250;
                              }
                              unint64_t v310 = v303 + 3;
                              if (v303 + 3 >= v297)
                              {
                                long long v2 = v303 + 2;
                              }
                              else
                              {
                                uint64_t v304 = *(void *)(v394 + 8 * v310);
                                if (v304)
                                {
                                  v303 += 3;
                                  goto LABEL_250;
                                }
                                while (1)
                                {
                                  uint64_t v303 = v310 + 1;
                                  if (__OFADD__(v310, 1)) {
                                    goto LABEL_372;
                                  }
                                  if (v303 >= v297) {
                                    break;
                                  }
                                  uint64_t v304 = *(void *)(v394 + 8 * v303);
                                  ++v310;
                                  if (v304) {
                                    goto LABEL_250;
                                  }
                                }
                                long long v2 = v297 - 1;
                              }
                            }
                          }
                        }
                        break;
                      }
                      uint64_t v296 = 0;
                      int v425 = 0;
                      int64_t v423 = 0u;
                      int64_t v424 = 0u;
                      uint64_t v421 = 0u;
                      int64_t v422 = 0u;
                      uint64_t v420 = 0u;
                      goto LABEL_256;
                    }
LABEL_370:
                    __break(1u);
LABEL_371:
                    __break(1u);
LABEL_372:
                    __break(1u);
LABEL_373:
                    __break(1u);
LABEL_374:
                    __break(1u);
LABEL_375:
                    __break(1u);
LABEL_376:
                    __break(1u);
LABEL_377:
                    __break(1u);
LABEL_378:
                    __break(1u);
LABEL_379:
                    __break(1u);
LABEL_380:
                    __break(1u);
LABEL_381:
                    __break(1u);
LABEL_382:
                    __break(1u);
                    goto LABEL_383;
                  }
LABEL_231:
                  swift_unknownObjectRetain();
                  long long v264 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v14, v263, v2, v34, v37);
                  swift_release();
                  uint64_t result = swift_unknownObjectRelease_n();
                  long long v265 = v33 - v251;
                  if (!__OFSUB__(v33, v251)) {
                    goto LABEL_232;
                  }
                  goto LABEL_370;
                }
                long long v2 = v110;
                uint64_t v63 = 1;
              }
LABEL_106:
              uint64_t v107 = (4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C;
              uint64_t v106 = ((-15 << v107) - 1) & v106 | (v63 << v107);
              long long v34 = *(void *)(v14 + 24 + 24 * v63);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              long long v14 = v34;
              if (!*(unsigned char *)(v34 + 18)) {
                goto LABEL_131;
              }
            }
          }
          uint64_t result = swift_unknownObjectRetain_n();
          long long v2 = v386;
          long long v34 = v104;
LABEL_131:
          uint64_t v122 = *(unsigned __int16 *)(v34 + 16);
          if (!*(_WORD *)(v34 + 16)) {
            goto LABEL_428;
          }
          uint64_t v123 = *(void *)(v34 + 24);
          int64_t v43 = __OFSUB__(v2, v123);
          uint64_t v124 = v2 - v123;
          if (v43) {
            goto LABEL_412;
          }
          if (v124 <= 0)
          {
            uint64_t v127 = 0;
          }
          else
          {
            if (v122 == 1) {
              goto LABEL_430;
            }
            uint64_t v125 = *(void *)(v34 + 48);
            long long v2 = v124 - v125;
            if (__OFSUB__(v124, v125)) {
              goto LABEL_414;
            }
            if (v2 >= 1)
            {
              if (v122 == 2) {
                goto LABEL_430;
              }
              uint64_t v126 = (void *)(v34 + 72);
              uint64_t v127 = 2;
              while (v122 != v127)
              {
                unint64_t v128 = v2 - *v126;
                if (__OFSUB__(v2, *v126)) {
                  goto LABEL_376;
                }
                if (v128 < 1) {
                  goto LABEL_146;
                }
                ++v127;
                v126 += 3;
                long long v2 = v128;
                if (v122 == v127) {
                  goto LABEL_430;
                }
              }
              goto LABEL_375;
            }
            long long v2 = v124;
            uint64_t v127 = 1;
          }
LABEL_146:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v118 = v106 & 0xFFFFFFFFFFFFF0FFLL | (v127 << 8);
          long long v105 = v386;
LABEL_127:
          swift_unknownObjectRetain();
          uint64_t v117 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v413, v118, v34, v104, v387);
          uint64_t result = swift_unknownObjectRelease_n();
          uint64_t v121 = v105 - v2;
          if (__OFSUB__(v105, v2)) {
            goto LABEL_397;
          }
          goto LABEL_148;
        }
      }
      else
      {
        long long v105 = v386;
        uint64_t v3 = v388;
        if (v386 > 0) {
          goto LABEL_411;
        }
      }
      swift_unknownObjectRetain_n();
      uint64_t v118 = specialized Rope._endPath.getter(v104);
      swift_unknownObjectRelease();
      long long v34 = 0;
      long long v2 = 0;
      if (v104) {
        goto LABEL_127;
      }
      uint64_t v117 = 0;
      uint64_t v121 = v105;
LABEL_148:
      *(void *)&uint64_t v438 = v413;
      *((void *)&v438 + 1) = v118;
      *(void *)&uint64_t v439 = v34;
      *((void *)&v439 + 1) = v117;
      *(void *)&char v440 = v121;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v438, 0, v105, (void *)v7, (uint64_t *)&v420, v3, v405, (uint64_t)&v426);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v90 = v440;
      unint64_t v129 = *(void *)(v7 + 64);
      uint64_t v130 = *(void *)(v7 + 72);
      uint64_t v131 = *(void *)(v7 + 80);
      long long v2 = *(void *)(v7 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0, v409 & 1, v129, v130, v131, v2, (uint64_t *)&v504);
      uint64_t v132 = v506;
      swift_unknownObjectRelease();
    }
    while (v132 < v90 && *(void *)(v420 + 16));
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)&uint64_t v438 = v79;
  if (__OFSUB__(v79, 1)) {
    goto LABEL_401;
  }
  uint64_t v133 = *(void *)(v7 + 64);
  uint64_t v134 = *(void *)(v7 + 72);
  uint64_t v135 = *(void *)(v7 + 80);
  uint64_t v136 = *(void *)(v7 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v79 - 1, v409 & 1, v133, v134, v135, v136, (uint64_t *)&v504);
  long long v414 = v504;
  long long v406 = v505;
  int64_t v137 = v506;
  swift_unknownObjectRelease();
  v522[0] = v414;
  v522[1] = v406;
  long long v523 = v137;
  uint64_t v138 = *(void *)(v7 + 64);
  uint64_t v139 = *(void *)(v7 + 72);
  unint64_t v140 = *(void *)(v7 + 80);
  uint64_t v141 = *(void *)(v7 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v522, v138, v139, v140, v141);
  long long v2 = v142;
  swift_unknownObjectRelease();
  long long v14 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)((uint64_t (*)(uint64_t, uint64_t, long long *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:), 0, v2);
  long long v34 = v143;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v144 = 0;
  *(void *)&uint64_t v420 = result;
  unint64_t v145 = 1 << *(unsigned char *)(v14 + 32);
  char v44 = -1;
  if (v145 < 64) {
    char v44 = ~(-1 << v145);
  }
  long long v33 = v14 + 64;
  uint64_t v3 = v44 & *(void *)(v14 + 64);
  uint64_t v37 = (unint64_t)(v145 + 63) >> 6;
  while (1)
  {
    if (v3)
    {
      uint64_t v146 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      uint64_t v147 = v146 | (v144 << 6);
      goto LABEL_155;
    }
    uint64_t v41 = v144 + 1;
    if (__OFADD__(v144, 1)) {
      goto LABEL_365;
    }
    if (v41 >= v37)
    {
LABEL_175:
      swift_release();
      uint64_t v152 = *(_OWORD *)(v7 + 16);
      uint64_t v153 = *(_OWORD *)(v7 + 32);
      long long v521 = *(_OWORD *)(v7 + 48);
      v520[1] = v153;
      v520[0] = v152;
      uint64_t v154 = *(_OWORD *)(v7 + 16);
      uint64_t v155 = *(_OWORD *)(v7 + 32);
      v535[2] = v521;
      v535[1] = v155;
      v535[0] = v154;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v535, (uint64_t)v536);
      outlined retain of Locale((uint64_t)v536);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v520);
      uint64_t v156 = BigString.UTF8View.count.getter();
      uint64_t result = outlined release of Locale((uint64_t)v449);
      if (v156 < v417) {
        goto LABEL_402;
      }
      long long v2 = *(void *)(v7 + 64);
      int64_t v157 = *(void *)(v7 + 72);
      uint64_t v158 = *(void *)(v7 + 80);
      int64_t v159 = *(void *)(v7 + 88);
      swift_unknownObjectRetain();
      swift_retain();
      unint64_t v160 = v159;
      unint64_t v161 = v417;
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(v417, v409 & 1, v2, v157, v158, v160, (uint64_t *)&v504);
      uint64_t v415 = v504;
      uint64_t v162 = v505;
      unint64_t v163 = v506;
      swift_unknownObjectRelease();
      long long v504 = v415;
      long long v505 = v162;
      *(void *)&uint64_t v506 = v163;
      if (v417 != v156) {
        goto LABEL_180;
      }
LABEL_181:
      AttributedString._InternalRunsSlice.startIndex.getter((void *)v7, v161, v450);
      for (uint64_t i = &v451; v163 < *i && *(void *)(v420 + 16); uint64_t i = &v453)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized AttributedString.Guts.updateRun(at:within:with:)((uint64_t *)&v504, v161, v156, (void *)v7, (uint64_t *)&v420, v14, v34, (uint64_t)&v438);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        $defer #1 () in AttributedString.Guts.enforceAttributeConstraintsBeforeMutation(to:)((void *)v7, v161, v156, (uint64_t *)&v504);
        unint64_t v163 = v506;
        if (v161 == v156) {
          goto LABEL_181;
        }
LABEL_180:
        long long v2 = *(void *)(v7 + 64);
        unint64_t v164 = *(void *)(v7 + 72);
        unint64_t v165 = *(void *)(v7 + 80);
        int64_t v166 = *(void *)(v7 + 88);
        long long v167 = swift_unknownObjectRetain();
        long long v168 = v166;
        unint64_t v161 = v417;
        AttributedString._InternalRuns.endIndex.getter(v167, v164, v165, v168, v452);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      if ((uint64_t)v438 < v426) {
        goto LABEL_403;
      }
      uint64_t v418 = v438;
      int64_t v386 = v426;
      uint64_t v3 = v400;
      goto LABEL_185;
    }
    uint64_t v150 = *(void *)(v33 + 8 * v41);
    ++v144;
    if (!v150)
    {
      uint64_t v144 = v41 + 1;
      if (v41 + 1 >= v37) {
        goto LABEL_175;
      }
      uint64_t v150 = *(void *)(v33 + 8 * v144);
      if (!v150)
      {
        uint64_t v144 = v41 + 2;
        if (v41 + 2 >= v37) {
          goto LABEL_175;
        }
        uint64_t v150 = *(void *)(v33 + 8 * v144);
        if (!v150)
        {
          uint64_t v144 = v41 + 3;
          if (v41 + 3 >= v37) {
            goto LABEL_175;
          }
          uint64_t v150 = *(void *)(v33 + 8 * v144);
          if (!v150)
          {
            uint64_t v144 = v41 + 4;
            if (v41 + 4 >= v37) {
              goto LABEL_175;
            }
            uint64_t v150 = *(void *)(v33 + 8 * v144);
            if (!v150) {
              break;
            }
          }
        }
      }
    }
LABEL_174:
    uint64_t v3 = (v150 - 1) & v150;
    uint64_t v147 = __clz(__rbit64(v150)) + (v144 << 6);
LABEL_155:
    uint64_t v148 = (uint64_t *)(*(void *)(v14 + 48) + 16 * v147);
    long long v2 = *v148;
    uint64_t v149 = v148[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)((unint64_t *)&v504, v2, v149);
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v151 = v41 + 5;
  if (v151 >= v37) {
    goto LABEL_175;
  }
  uint64_t v150 = *(void *)(v33 + 8 * v151);
  if (v150)
  {
    uint64_t v144 = v151;
    goto LABEL_174;
  }
  while (1)
  {
    uint64_t v144 = v151 + 1;
    if (__OFADD__(v151, 1)) {
      break;
    }
    if (v144 >= v37) {
      goto LABEL_175;
    }
    uint64_t v150 = *(void *)(v33 + 8 * v144);
    ++v151;
    if (v150) {
      goto LABEL_174;
    }
  }
LABEL_410:
  __break(1u);
LABEL_411:
  __break(1u);
LABEL_412:
  __break(1u);
LABEL_413:
  __break(1u);
LABEL_414:
  __break(1u);
LABEL_415:
  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
LABEL_425:
  if (!v2) {
    __break(1u);
  }
LABEL_427:
  __break(1u);
LABEL_428:
  if (!v2) {
    __break(1u);
  }
LABEL_430:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  void *v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[3];

  long long v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = (void *)*v1;
    uint64_t v5 = *(_OWORD *)(*v1 + 16);
    uint64_t v6 = *(_OWORD *)(*v1 + 48);
    v15[1] = *(_OWORD *)(*v1 + 32);
    void v15[2] = v6;
    v15[0] = v5;
    uint64_t v7 = v4[8];
    long long v8 = v4[9];
    long long v9 = v4[10];
    uint64_t v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v15);
    swift_unknownObjectRetain();
    unint64_t *v2 = AttributedString.Guts.init(string:runs:)(v15, v7, v8, v9, v10);
    swift_release();
  }
  uint64_t v11 = AttributedString.Guts.attributesToUseForTextReplacement(in:)();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v11);
  AttributedString.CharacterView._mutateStringContents(in:attributes:with:)(a1, v11, v13, (void (*)(_OWORD *, uint64_t))partial apply for specialized closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}